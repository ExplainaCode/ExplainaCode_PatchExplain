record_number,buggy_code,fixed_code,code_similarity
129001,"public void mouseDoubleClick(MouseEvent e){
}","@Override public void mouseDoubleClick(MouseEvent e){
}",0.9
129002,"public int getSwtStyle(){
  return swtStyle;
}","@Override public int getSwtStyle(){
  return swtStyle;
}",0.9019607843137256
129003,"protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    public void mouseDoubleClick(    MouseEvent e){
    }
    public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        public void run(){
          getTable().forceFocus();
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
}","protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          getTable().forceFocus();
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
}",0.9854354791727352
129004,"/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorControls();
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
  }
;
  setTablePreferences();
  return table;
}","/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,SWT.VIRTUAL | checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
      refreshTableEditorControls();
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorColumn(index);
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void inputChanged(    Object input,    Object oldInput){
      if (input instanceof List) {
        int newSize=((List)input).size();
        int oldSize=0;
        if (oldInput instanceof List) {
          oldSize=((List)oldInput).size();
        }
        if (newSize != oldSize) {
          tableViewer.setItemCount(newSize);
        }
      }
      super.inputChanged(input,oldInput);
    }
  }
;
  setTablePreferences();
  return table;
}",0.8747422680412371
129005,"public void handleEvent(Event event){
  TableItem tableItem=(TableItem)event.item;
  if (table.isDisposed() || tableItem.isDisposed()) {
    return;
  }
  boolean selectedState=(event.detail & SWT.SELECTED) != 0;
  boolean focusedState=table.isFocusControl();
  if (selectedState || event.detail == 22) {
    GC gc=event.gc;
    Rectangle rect=event.getBounds();
    Color previousBackground=gc.getBackground();
    Color previousForeground=gc.getForeground();
    Color bgColor=null;
    Color fgColor=null;
    if (focusedState) {
      if (bgColorSelectedLine != null) {
        bgColor=bgColorSelectedLine;
      }
 else {
        bgColor=table.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);
      }
      if (fgColorSelectedLine != null) {
        fgColor=fgColorSelectedLine;
      }
 else {
        fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
      }
    }
 else {
      if (bgColorSelectedLineWhenUnactive != null) {
        bgColor=bgColorSelectedLineWhenUnactive;
      }
 else {
        bgColor=table.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
      }
      if (fgColorSelectedLineWhenUnactive != null) {
        fgColor=fgColorSelectedLineWhenUnactive;
      }
 else {
        fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
      }
    }
    gc.setBackground(bgColor);
    gc.setForeground(fgColor);
    gc.fillRectangle(rect);
    gc.setBackground(previousBackground);
    gc.setForeground(previousForeground);
    event.detail&=~SWT.SELECTED;
  }
 else   if (event.detail == 24 || event.detail == 28) {
    GC gc=event.gc;
    Rectangle rect=event.getBounds();
    int columnIndex=TableUtils.getColumnIndex(table,new Point(event.x,event.y));
    Color currentBackgroundColumn=tableItem.getBackground(columnIndex);
    Color parentBg=tableItem.getParent().getBackground();
    if (currentBackgroundColumn == parentBg && tableItem.getBackground() != null) {
      currentBackgroundColumn=tableItem.getBackground();
    }
    Color background=gc.getBackground();
    gc.setBackground(currentBackgroundColumn);
    gc.fillRectangle(rect);
    gc.setBackground(background);
  }
}","@Override public void handleEvent(Event event){
  TableItem tableItem=(TableItem)event.item;
  if (table.isDisposed() || tableItem.isDisposed()) {
    return;
  }
  boolean selectedState=(event.detail & SWT.SELECTED) != 0;
  boolean focusedState=table.isFocusControl();
  if (selectedState || event.detail == 22) {
    GC gc=event.gc;
    Rectangle rect=event.getBounds();
    Color previousBackground=gc.getBackground();
    Color previousForeground=gc.getForeground();
    Color bgColor=null;
    Color fgColor=null;
    if (focusedState) {
      if (bgColorSelectedLine != null) {
        bgColor=bgColorSelectedLine;
      }
 else {
        bgColor=table.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);
      }
      if (fgColorSelectedLine != null) {
        fgColor=fgColorSelectedLine;
      }
 else {
        fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
      }
    }
 else {
      if (bgColorSelectedLineWhenUnactive != null) {
        bgColor=bgColorSelectedLineWhenUnactive;
      }
 else {
        bgColor=table.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
      }
      if (fgColorSelectedLineWhenUnactive != null) {
        fgColor=fgColorSelectedLineWhenUnactive;
      }
 else {
        fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
      }
    }
    gc.setBackground(bgColor);
    gc.setForeground(fgColor);
    gc.fillRectangle(rect);
    gc.setBackground(previousBackground);
    gc.setForeground(previousForeground);
    event.detail&=~SWT.SELECTED;
  }
 else   if (event.detail == 24 || event.detail == 28) {
    GC gc=event.gc;
    Rectangle rect=event.getBounds();
    int columnIndex=TableUtils.getColumnIndex(table,new Point(event.x,event.y));
    Color currentBackgroundColumn=tableItem.getBackground(columnIndex);
    Color parentBg=tableItem.getParent().getBackground();
    if (currentBackgroundColumn == parentBg && tableItem.getBackground() != null) {
      currentBackgroundColumn=tableItem.getBackground();
    }
    Color background=gc.getBackground();
    gc.setBackground(currentBackgroundColumn);
    gc.fillRectangle(rect);
    gc.setBackground(background);
  }
}",0.9976689976689976
129006,"@Override public void insert(Object element,int position){
  super.insert(element,position);
}","@Override public void insert(Object element,int position){
  super.insert(element,position);
  refreshTableEditorControls();
}",0.8545454545454545
129007,"/** 
 * This method initialize erase listener to go round the following SWT bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=50163 ""Table doesn't respect transparency in column images when using a different row background color"" . Unfortunately, use this listener implies that : - automatic tooltip in Table doesn't work anymore - bug when  {@link TableViewer#refresh()} or {@link TableViewer#refresh(boolean)} are called and possibly others...
 */
protected void createEraseItemListener(){
  if (eraseItemListener != null) {
    return;
  }
  eraseItemListener=new Listener(){
    public void handleEvent(    Event event){
      TableItem tableItem=(TableItem)event.item;
      if (table.isDisposed() || tableItem.isDisposed()) {
        return;
      }
      boolean selectedState=(event.detail & SWT.SELECTED) != 0;
      boolean focusedState=table.isFocusControl();
      if (selectedState || event.detail == 22) {
        GC gc=event.gc;
        Rectangle rect=event.getBounds();
        Color previousBackground=gc.getBackground();
        Color previousForeground=gc.getForeground();
        Color bgColor=null;
        Color fgColor=null;
        if (focusedState) {
          if (bgColorSelectedLine != null) {
            bgColor=bgColorSelectedLine;
          }
 else {
            bgColor=table.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);
          }
          if (fgColorSelectedLine != null) {
            fgColor=fgColorSelectedLine;
          }
 else {
            fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
          }
        }
 else {
          if (bgColorSelectedLineWhenUnactive != null) {
            bgColor=bgColorSelectedLineWhenUnactive;
          }
 else {
            bgColor=table.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
          }
          if (fgColorSelectedLineWhenUnactive != null) {
            fgColor=fgColorSelectedLineWhenUnactive;
          }
 else {
            fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
          }
        }
        gc.setBackground(bgColor);
        gc.setForeground(fgColor);
        gc.fillRectangle(rect);
        gc.setBackground(previousBackground);
        gc.setForeground(previousForeground);
        event.detail&=~SWT.SELECTED;
      }
 else       if (event.detail == 24 || event.detail == 28) {
        GC gc=event.gc;
        Rectangle rect=event.getBounds();
        int columnIndex=TableUtils.getColumnIndex(table,new Point(event.x,event.y));
        Color currentBackgroundColumn=tableItem.getBackground(columnIndex);
        Color parentBg=tableItem.getParent().getBackground();
        if (currentBackgroundColumn == parentBg && tableItem.getBackground() != null) {
          currentBackgroundColumn=tableItem.getBackground();
        }
        Color background=gc.getBackground();
        gc.setBackground(currentBackgroundColumn);
        gc.fillRectangle(rect);
        gc.setBackground(background);
      }
    }
  }
;
}","/** 
 * This method initialize erase listener to go round the following SWT bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=50163 ""Table doesn't respect transparency in column images when using a different row background color"" . Unfortunately, use this listener implies that : - automatic tooltip in Table doesn't work anymore - bug when  {@link TableViewer#refresh()} or {@link TableViewer#refresh(boolean)} are called and possibly others...
 */
protected void createEraseItemListener(){
  if (eraseItemListener != null) {
    return;
  }
  eraseItemListener=new Listener(){
    @Override public void handleEvent(    Event event){
      TableItem tableItem=(TableItem)event.item;
      if (table.isDisposed() || tableItem.isDisposed()) {
        return;
      }
      boolean selectedState=(event.detail & SWT.SELECTED) != 0;
      boolean focusedState=table.isFocusControl();
      if (selectedState || event.detail == 22) {
        GC gc=event.gc;
        Rectangle rect=event.getBounds();
        Color previousBackground=gc.getBackground();
        Color previousForeground=gc.getForeground();
        Color bgColor=null;
        Color fgColor=null;
        if (focusedState) {
          if (bgColorSelectedLine != null) {
            bgColor=bgColorSelectedLine;
          }
 else {
            bgColor=table.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);
          }
          if (fgColorSelectedLine != null) {
            fgColor=fgColorSelectedLine;
          }
 else {
            fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
          }
        }
 else {
          if (bgColorSelectedLineWhenUnactive != null) {
            bgColor=bgColorSelectedLineWhenUnactive;
          }
 else {
            bgColor=table.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
          }
          if (fgColorSelectedLineWhenUnactive != null) {
            fgColor=fgColorSelectedLineWhenUnactive;
          }
 else {
            fgColor=table.getDisplay().getSystemColor(SWT.COLOR_BLACK);
          }
        }
        gc.setBackground(bgColor);
        gc.setForeground(fgColor);
        gc.fillRectangle(rect);
        gc.setBackground(previousBackground);
        gc.setForeground(previousForeground);
        event.detail&=~SWT.SELECTED;
      }
 else       if (event.detail == 24 || event.detail == 28) {
        GC gc=event.gc;
        Rectangle rect=event.getBounds();
        int columnIndex=TableUtils.getColumnIndex(table,new Point(event.x,event.y));
        Color currentBackgroundColumn=tableItem.getBackground(columnIndex);
        Color parentBg=tableItem.getParent().getBackground();
        if (currentBackgroundColumn == parentBg && tableItem.getBackground() != null) {
          currentBackgroundColumn=tableItem.getBackground();
        }
        Color background=gc.getBackground();
        gc.setBackground(currentBackgroundColumn);
        gc.fillRectangle(rect);
        gc.setBackground(background);
      }
    }
  }
;
}",0.9983176312247644
129008,"/** 
 * Edit a cell.
 * @param currentControl current control before change, if null the first valid cell is edited or focused.
 */
private void editOtherEditor(final Control currentControl){
  int indexColumnStart=-1;
  int itemIndexStart=-1;
  if (currentControl == null) {
    indexColumnStart=0;
    TableViewerCreatorColumnNotModifiable previousModifiedColumn=getModifiedObjectInfo().getPreviousModifiedColumn();
    if (previousModifiedColumn != null) {
      indexColumnStart=previousModifiedColumn.getIndex();
    }
    itemIndexStart=getTable().getSelectionIndex();
    if (itemIndexStart == -1) {
      itemIndexStart=0;
    }
  }
 else {
    boolean controlLostFocusIsTableEditor=false;
    if (tableEditorManager != null) {
      List<TableEditor> tableEditorList=tableEditorManager.getTableEditorList();
      for (      TableEditor editor : tableEditorList) {
        if (editor.getEditor() == currentControl) {
          controlLostFocusIsTableEditor=true;
          indexColumnStart=editor.getColumn();
          itemIndexStart=getTable().indexOf(editor.getItem());
          break;
        }
      }
    }
    if (!controlLostFocusIsTableEditor) {
      for (      TableViewerCreatorColumnNotModifiable column : columns) {
        if (column.getCellEditor() != null && isEqualsOrChildOf(currentControl,column.getCellEditor().getControl())) {
          indexColumnStart=column.getIndex();
          itemIndexStart=getTable().getSelectionIndex();
          break;
        }
      }
    }
  }
  if (indexColumnStart != -1 && itemIndexStart != -1) {
    final int indexColumnStartFinal=indexColumnStart;
    final int itemIndexStartFinal=itemIndexStart;
    controlClicked=null;
    Runnable runnable=new Runnable(){
      public void run(){
        boolean continueRun=(keyPressed == SWT.TRAVERSE_TAB_NEXT || keyPressed == SWT.TRAVERSE_TAB_PREVIOUS || keyPressed == SWT.TRAVERSE_RETURN || keyPressed == SWT.F2);
        if (!continueRun || getTable().isDisposed()) {
          return;
        }
        List<B> inputList=TableViewerCreatorNotModifiable.this.getInputList();
        int currentIndexColumn=indexColumnStartFinal;
        int currentItemIndex=itemIndexStartFinal;
        CellEditor cellEditorToActivate=null;
        Control controlToFocusIn=null;
        boolean found=false;
        boolean firstLoop=true;
        while (true) {
          if (keyPressed == SWT.TRAVERSE_TAB_NEXT || !firstLoop && (keyPressed == SWT.F2 || keyPressed == SWT.TRAVERSE_RETURN)) {
            currentIndexColumn++;
            if (currentIndexColumn >= columns.size()) {
              currentIndexColumn=0;
              currentItemIndex++;
              if (currentItemIndex >= inputList.size()) {
                break;
              }
            }
          }
 else           if (keyPressed == SWT.TRAVERSE_TAB_PREVIOUS) {
            currentIndexColumn--;
            if (currentIndexColumn < 0) {
              currentIndexColumn=columns.size() - 1;
              currentItemIndex--;
              if (currentItemIndex < 0) {
                break;
              }
            }
          }
 else           if (keyPressed == SWT.TRAVERSE_RETURN) {
          }
          TableViewerCreatorColumnNotModifiable tableViewerCreatorColumn=columns.get(currentIndexColumn);
          if (tableViewerCreatorColumn.getTableEditorContent() != null) {
            TableItem tableItem=getTable().getItem(currentItemIndex);
            if (tableEditorManager != null) {
              List<TableEditor> tableEditorList=tableEditorManager.getTableEditorList();
              for (              TableEditor editor : tableEditorList) {
                if (editor.getColumn() == currentIndexColumn && editor.getItem() == tableItem) {
                  controlToFocusIn=editor.getEditor();
                  found=true;
                  break;
                }
              }
            }
          }
 else           if (tableViewerCreatorColumn.getCellEditor() != null) {
            cellEditorToActivate=tableViewerCreatorColumn.getCellEditor();
            found=true;
          }
          firstLoop=false;
          if (found) {
            if (controlToFocusIn != null) {
              getTable().setSelection(currentItemIndex);
              controlToFocusIn.setFocus();
              break;
            }
 else             if (getCellModifier() != null && getCellModifier().canModify(inputList.get(currentItemIndex),getColumns().get(currentIndexColumn).getId()) && cellEditorToActivate != null) {
              TableViewerCreatorNotModifiable.this.getTableViewer().editElement(inputList.get(currentItemIndex),currentIndexColumn);
              break;
            }
 else {
              found=false;
            }
          }
        }
        keyPressed=0;
      }
    }
;
    new AsynchronousThreading(10,false,getTable().getDisplay(),runnable).start();
  }
}","/** 
 * Edit a cell.
 * @param currentControl current control before change, if null the first valid cell is edited or focused.
 */
private void editOtherEditor(final Control currentControl){
  int indexColumnStart=-1;
  int itemIndexStart=-1;
  if (currentControl == null) {
    indexColumnStart=0;
    TableViewerCreatorColumnNotModifiable previousModifiedColumn=getModifiedObjectInfo().getPreviousModifiedColumn();
    if (previousModifiedColumn != null) {
      indexColumnStart=previousModifiedColumn.getIndex();
    }
    itemIndexStart=getTable().getSelectionIndex();
    if (itemIndexStart == -1) {
      itemIndexStart=0;
    }
  }
 else {
    boolean controlLostFocusIsTableEditor=false;
    if (tableEditorManager != null) {
      List<TableEditor> tableEditorList=tableEditorManager.getTableEditorList();
      for (      TableEditor editor : tableEditorList) {
        if (editor.getEditor() == currentControl) {
          controlLostFocusIsTableEditor=true;
          indexColumnStart=editor.getColumn();
          itemIndexStart=getTable().indexOf(editor.getItem());
          break;
        }
      }
    }
    if (!controlLostFocusIsTableEditor) {
      for (      TableViewerCreatorColumnNotModifiable column : columns) {
        if (column.getCellEditor() != null && isEqualsOrChildOf(currentControl,column.getCellEditor().getControl())) {
          indexColumnStart=column.getIndex();
          itemIndexStart=getTable().getSelectionIndex();
          break;
        }
      }
    }
  }
  if (indexColumnStart != -1 && itemIndexStart != -1) {
    final int indexColumnStartFinal=indexColumnStart;
    final int itemIndexStartFinal=itemIndexStart;
    controlClicked=null;
    Runnable runnable=new Runnable(){
      @Override public void run(){
        boolean continueRun=(keyPressed == SWT.TRAVERSE_TAB_NEXT || keyPressed == SWT.TRAVERSE_TAB_PREVIOUS || keyPressed == SWT.TRAVERSE_RETURN || keyPressed == SWT.F2);
        if (!continueRun || getTable().isDisposed()) {
          return;
        }
        List<B> inputList=TableViewerCreatorNotModifiable.this.getInputList();
        int currentIndexColumn=indexColumnStartFinal;
        int currentItemIndex=itemIndexStartFinal;
        CellEditor cellEditorToActivate=null;
        Control controlToFocusIn=null;
        boolean found=false;
        boolean firstLoop=true;
        while (true) {
          if (keyPressed == SWT.TRAVERSE_TAB_NEXT || !firstLoop && (keyPressed == SWT.F2 || keyPressed == SWT.TRAVERSE_RETURN)) {
            currentIndexColumn++;
            if (currentIndexColumn >= columns.size()) {
              currentIndexColumn=0;
              currentItemIndex++;
              if (currentItemIndex >= inputList.size()) {
                break;
              }
            }
          }
 else           if (keyPressed == SWT.TRAVERSE_TAB_PREVIOUS) {
            currentIndexColumn--;
            if (currentIndexColumn < 0) {
              currentIndexColumn=columns.size() - 1;
              currentItemIndex--;
              if (currentItemIndex < 0) {
                break;
              }
            }
          }
 else           if (keyPressed == SWT.TRAVERSE_RETURN) {
          }
          TableViewerCreatorColumnNotModifiable tableViewerCreatorColumn=columns.get(currentIndexColumn);
          if (tableViewerCreatorColumn.getTableEditorContent() != null) {
            TableItem tableItem=getTable().getItem(currentItemIndex);
            if (tableEditorManager != null) {
              List<TableEditor> tableEditorList=tableEditorManager.getTableEditorList();
              for (              TableEditor editor : tableEditorList) {
                if (editor.getColumn() == currentIndexColumn && editor.getItem() == tableItem) {
                  controlToFocusIn=editor.getEditor();
                  found=true;
                  break;
                }
              }
            }
          }
 else           if (tableViewerCreatorColumn.getCellEditor() != null) {
            cellEditorToActivate=tableViewerCreatorColumn.getCellEditor();
            found=true;
          }
          firstLoop=false;
          if (found) {
            if (controlToFocusIn != null) {
              getTable().setSelection(currentItemIndex);
              controlToFocusIn.setFocus();
              break;
            }
 else             if (getCellModifier() != null && getCellModifier().canModify(inputList.get(currentItemIndex),getColumns().get(currentIndexColumn).getId()) && cellEditorToActivate != null) {
              TableViewerCreatorNotModifiable.this.getTableViewer().editElement(inputList.get(currentItemIndex),currentIndexColumn);
              break;
            }
 else {
              found=false;
            }
          }
        }
        keyPressed=0;
      }
    }
;
    new AsynchronousThreading(10,false,getTable().getDisplay(),runnable).start();
  }
}",0.9989741485432908
129009,"public void keyTraversed(TraverseEvent e){
  if (!keyboardManagementForCellEdition) {
    return;
  }
  int key=e.detail;
  if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
    keyPressed=key;
    e.doit=false;
    editOtherEditor(null);
  }
 else   if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
    keyPressed=key;
    editOtherEditor(null);
  }
}","@Override public void keyTraversed(TraverseEvent e){
  if (!keyboardManagementForCellEdition) {
    return;
  }
  int key=e.detail;
  if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
    keyPressed=key;
    e.doit=false;
    editOtherEditor(null);
  }
 else   if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
    keyPressed=key;
    editOtherEditor(null);
  }
}",0.9885057471264368
129010,"public void checkInit(Boolean lastVersion,Boolean readonly,boolean load) throws PersistenceException {
  if (loadedProcess instanceof ILastVersionChecker) {
    ((ILastVersionChecker)loadedProcess).setLastVersion(lastVersion);
  }
  if (load) {
    loadProcess();
  }
 else {
    saveProcessBefore();
    saveProcess(null,null);
  }
  if (readonly == null) {
    checkReadOnly();
  }
 else {
    setReadOnly(readonly);
  }
}","public void checkInit(Boolean lastVersion,Boolean readonly,boolean load) throws PersistenceException {
  if (loadedProcess instanceof ILastVersionChecker) {
    ((ILastVersionChecker)loadedProcess).setLastVersion(lastVersion);
  }
  if (load) {
    loadProcess();
  }
 else {
    saveProcessBefore();
    saveProcess(null,null,true);
  }
  if (readonly == null) {
    checkReadOnly();
  }
 else {
    setReadOnly(readonly);
  }
}",0.9941383352872216
129011,"public boolean saveProcess(IProgressMonitor monitor,IPath path){
  try {
    if (monitor != null) {
      monitor.beginTask(""String_Node_Str"",100);
    }
    final ProcessType processType=loadedProcess.saveXmlFile();
    if (monitor != null) {
      monitor.worked(40);
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    final IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (path != null) {
    }
 else {
      RepositoryWorkUnit rwu=new RepositoryWorkUnit(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
          resetItem();
          if (getItem() instanceof JobletProcessItem) {
            ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
          }
 else           if (getItem() instanceof ProcessItem) {
            ((ProcessItem)getItem()).setProcess(processType);
          }
          factory.save(getItem());
          loadedProcess.setProperty(getItem().getProperty());
          RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      factory.executeRepositoryWorkUnit(rwu);
      if (monitor != null) {
        monitor.worked(50);
      }
    }
    if (monitor != null) {
      monitor.worked(10);
    }
    return true;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
 finally {
    if (monitor != null) {
      monitor.done();
    }
  }
}","public boolean saveProcess(IProgressMonitor monitor,IPath path,final boolean avoidSaveRelations){
  try {
    if (monitor != null) {
      monitor.beginTask(""String_Node_Str"",100);
    }
    final ProcessType processType=loadedProcess.saveXmlFile();
    if (monitor != null) {
      monitor.worked(40);
    }
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    final IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
    if (path != null) {
    }
 else {
      RepositoryWorkUnit rwu=new RepositoryWorkUnit(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
          resetItem();
          if (getItem() instanceof JobletProcessItem) {
            ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
          }
 else           if (getItem() instanceof ProcessItem) {
            ((ProcessItem)getItem()).setProcess(processType);
          }
          factory.save(getItem());
          loadedProcess.setProperty(getItem().getProperty());
          if (!avoidSaveRelations) {
            RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
          }
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      factory.executeRepositoryWorkUnit(rwu);
      if (monitor != null) {
        monitor.worked(50);
      }
    }
    if (monitor != null) {
      monitor.worked(10);
    }
    return true;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    if (monitor != null) {
      monitor.setCanceled(true);
    }
    return false;
  }
 finally {
    if (monitor != null) {
      monitor.done();
    }
  }
}",0.9763513513513512
129012,"@Override protected void run() throws LoginException, PersistenceException {
  resetItem();
  if (getItem() instanceof JobletProcessItem) {
    ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
  }
 else   if (getItem() instanceof ProcessItem) {
    ((ProcessItem)getItem()).setProcess(processType);
  }
  factory.save(getItem());
  loadedProcess.setProperty(getItem().getProperty());
  RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
}","@Override protected void run() throws LoginException, PersistenceException {
  resetItem();
  if (getItem() instanceof JobletProcessItem) {
    ((JobletProcessItem)getItem()).setJobletProcess((JobletProcess)processType);
  }
 else   if (getItem() instanceof ProcessItem) {
    ((ProcessItem)getItem()).setProcess(processType);
  }
  factory.save(getItem());
  loadedProcess.setProperty(getItem().getProperty());
  if (!avoidSaveRelations) {
    RelationshipItemBuilder.getInstance().addOrUpdateItem(getItem());
  }
}",0.9648946840521564
129013,"public void setReadOnly(boolean readOnly){
  super.setReadOnly(readOnly);
  if (loadedProcess != null) {
    loadedProcess.setReadOnly(readOnly);
  }
}","@Override public void setReadOnly(boolean readOnly){
  super.setReadOnly(readOnly);
  if (loadedProcess != null) {
    loadedProcess.setReadOnly(readOnly);
  }
}",0.967948717948718
129014,"public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}","public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    if (linker.linkSize() == 0) {
      linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
    }
  }
}",0.9599236641221374
129015,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
            IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            IRepositoryViewObject object=node.getObject();
            if (coreService != null && object != null && object.getProperty() != null) {
              Item item=object.getProperty().getItem();
              IProcess iProcess=coreService.getProcessFromItem(item);
              if (iProcess != null && iProcess instanceof IProcess2) {
                IProcess2 process=(IProcess2)iProcess;
                process.removeProblems4ProcessDeleted();
              }
            }
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
            if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9643403821078292
129016,"private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    factory.deleteObjectLogical(objToDelete);
  }
}","private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
      Item item=objToDelete.getProperty().getItem();
      IProcess iProcess=coreService.getProcessFromItem(item);
      if (iProcess != null && iProcess instanceof IProcess2) {
        IProcess2 process=(IProcess2)iProcess;
        process.removeProblems4ProcessDeleted();
      }
    }
    factory.deleteObjectLogical(objToDelete);
  }
}",0.8723563075391888
129017,"/** 
 * this creates or updates the org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY by adding or changing the command with value, except if value is null then the command shall be removed.
 * @param command the command to add or update or remove (if value is null) (usually starts with a -)
 * @param value the value of the command,if the value is null,will only update the commmand
 * @param delete the flag used to trigger delete or insert/update the command
 */
static public void updateOrCreateExitDataPropertyWithCommand(String command,String value,boolean delete){
  boolean isValueNull=false;
  if (value == null || ""String_Node_Str"".equals(value)) {
    isValueNull=true;
  }
  StringBuffer result=new StringBuffer(512);
  String currentProperty=System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY);
  if (currentProperty != null) {
    Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
    Matcher restartMatcher=commandPattern.matcher(currentProperty);
    if (delete) {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(""String_Node_Str"");
      }
    }
 else {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
      }
 else {
        int indexOfVmArgs=currentProperty.indexOf(CMD_VMARGS);
        if (indexOfVmArgs >= 0) {
          currentProperty=currentProperty.substring(0,indexOfVmArgs) + command + EclipseCommandLine.NEW_LINE+ (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE)+ currentProperty.substring(indexOfVmArgs);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY + ""String_Node_Str""+ EclipseCommandLine.CMD_VMARGS);
        }
      }
    }
    result.append(currentProperty);
  }
 else {
    String property=System.getProperty(EclipseCommandLine.PROP_VM);
    result.append(property);
    result.append(EclipseCommandLine.NEW_LINE);
    String vmargs=System.getProperty(EclipseCommandLine.PROP_VMARGS);
    if (vmargs != null) {
      result.append(vmargs);
    }
    property=System.getProperty(EclipseCommandLine.PROP_COMMANDS);
    if (property == null) {
      if (value != null) {
        result.append(command);
        result.append(EclipseCommandLine.NEW_LINE);
        if (!isValueNull) {
          result.append(value);
          result.append(EclipseCommandLine.NEW_LINE);
        }
      }
    }
 else {
      Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
      Matcher restartMatcher=commandPattern.matcher(property);
      if (delete) {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(EclipseCommandLine.NEW_LINE);
        }
      }
 else {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
        }
 else {
          result.append(command);
          result.append(EclipseCommandLine.NEW_LINE);
          if (!isValueNull) {
            result.append(value);
            result.append(EclipseCommandLine.NEW_LINE);
          }
        }
      }
      result.append(property);
    }
    if (vmargs != null) {
      result.append(EclipseCommandLine.CMD_VMARGS);
      result.append(EclipseCommandLine.NEW_LINE);
      result.append(vmargs);
    }
  }
  System.setProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY,result.toString());
}","/** 
 * this creates or updates the org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY by adding or changing the command with value, except if value is null then the command shall be removed.
 * @param command the command to add or update or remove (if value is null) (usually starts with a -)
 * @param value the value of the command,if the value is null,will only update the commmanden
 * @param delete the flag used to trigger delete or insert/update the command
 */
static public void updateOrCreateExitDataPropertyWithCommand(String command,String value,boolean delete,boolean isOption){
  boolean isValueNull=false;
  if (value == null || ""String_Node_Str"".equals(value)) {
    isValueNull=true;
  }
  StringBuffer result=new StringBuffer(512);
  String patternStr=""String_Node_Str"";
  if (isOption) {
    patternStr=""String_Node_Str"";
  }
  String currentProperty=System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY);
  if (currentProperty != null) {
    Pattern commandPattern=Pattern.compile(command + patternStr);
    Matcher restartMatcher=commandPattern.matcher(currentProperty);
    if (delete) {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(""String_Node_Str"");
      }
    }
 else {
      if (restartMatcher.find()) {
        if (isOption) {
        }
 else {
          currentProperty=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
        }
      }
 else {
        int indexOfVmArgs=currentProperty.indexOf(CMD_VMARGS);
        if (indexOfVmArgs >= 0) {
          currentProperty=currentProperty.substring(0,indexOfVmArgs) + command + EclipseCommandLine.NEW_LINE+ (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE)+ currentProperty.substring(indexOfVmArgs);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY + ""String_Node_Str""+ EclipseCommandLine.CMD_VMARGS);
        }
      }
    }
    result.append(currentProperty);
  }
 else {
    String property=System.getProperty(EclipseCommandLine.PROP_VM);
    result.append(property);
    result.append(EclipseCommandLine.NEW_LINE);
    String vmargs=System.getProperty(EclipseCommandLine.PROP_VMARGS);
    if (vmargs != null) {
      result.append(vmargs);
    }
    property=System.getProperty(EclipseCommandLine.PROP_COMMANDS);
    if (property == null) {
      if (value != null) {
        result.append(command);
        result.append(EclipseCommandLine.NEW_LINE);
        if (!isValueNull) {
          result.append(value);
          result.append(EclipseCommandLine.NEW_LINE);
        }
      }
    }
 else {
      Pattern commandPattern=Pattern.compile(command + patternStr);
      Matcher restartMatcher=commandPattern.matcher(property);
      if (delete) {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(EclipseCommandLine.NEW_LINE);
        }
      }
 else {
        if (restartMatcher.find()) {
          if (isOption) {
          }
 else {
            property=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
          }
        }
 else {
          result.append(command);
          result.append(EclipseCommandLine.NEW_LINE);
          if (!isValueNull) {
            result.append(value);
            result.append(EclipseCommandLine.NEW_LINE);
          }
        }
      }
      result.append(property);
    }
    if (vmargs != null) {
      result.append(EclipseCommandLine.CMD_VMARGS);
      result.append(EclipseCommandLine.NEW_LINE);
      result.append(vmargs);
    }
  }
  System.setProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY,result.toString());
}",0.9626193001060446
129018,"public void stop(){
  final IWorkbench workbench=PlatformUI.getWorkbench();
  if (workbench == null) {
    return;
  }
  final Display display=workbench.getDisplay();
  display.syncExec(new Runnable(){
    public void run(){
      if (!display.isDisposed()) {
        workbench.close();
      }
    }
  }
);
}","@Override public void stop(){
  final IWorkbench workbench=PlatformUI.getWorkbench();
  if (workbench == null) {
    return;
  }
  final Display display=workbench.getDisplay();
  display.syncExec(new Runnable(){
    @Override public void run(){
      if (!display.isDisposed()) {
        workbench.close();
      }
    }
  }
);
}",0.9467084639498432
129019,"public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    CoreRepositoryPlugin.getDefault().setRCPMode();
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}","@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    CoreRepositoryPlugin.getDefault().setRCPMode();
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}",0.979325758986776
129020,"public void run(){
  if (!display.isDisposed()) {
    workbench.close();
  }
}","@Override public void run(){
  if (!display.isDisposed()) {
    workbench.close();
  }
}",0.9397590361445785
129021,"private void addNode(RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode,IRepositoryViewObject repositoryObject){
  boolean isAvaliableInTOS=true;
  if (type == ERepositoryObjectType.METADATA_CONNECTIONS) {
    DatabaseConnection metadataConnection=(DatabaseConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    isAvaliableInTOS=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDatabaseType(),false) == null ? false : true;
  }
  RepositoryNode node=new RepositoryNode(repositoryObject,parent,ENodeType.REPOSITORY_ELEMENT);
  node.setProperties(EProperties.CONTENT_TYPE,type);
  node.setProperties(EProperties.LABEL,repositoryObject.getLabel());
  if ((repositoryObject.isDeleted() && parent.getObject() == null) || (repositoryObject.isDeleted() && !parent.getObject().isDeleted())) {
  }
 else {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService designerCoreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (designerCoreService != null) {
        for (        IRepositoryNode repositoryNode : parent.getChildren()) {
          if (repositoryNode.getObject() != null) {
            if (repositoryNode.getObject().getId().equals(repositoryObject.getId())) {
              Problem problem=new Problem();
              problem.setDescription(type.name() + ""String_Node_Str"" + repositoryNode.getObject().getLabel()+ ""String_Node_Str""+ repositoryNode.getObject().getVersion()+ ""String_Node_Str""+ repositoryObject.getLabel()+ ""String_Node_Str""+ repositoryObject.getVersion()+ ""String_Node_Str"");
              problem.setStatus(ProblemStatus.WARNING);
              designerCoreService.addProblems(problem);
            }
          }
        }
      }
    }
    if (isAvaliableInTOS) {
      parent.getChildren().add(node);
    }
  }
  if (type == ERepositoryObjectType.METADATA_CONNECTIONS && isAvaliableInTOS) {
    DatabaseConnection metadataConnection=(DatabaseConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
    SAPConnection metadataConnection=(SAPConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    DelimitedFileConnection metadataConnection=(DelimitedFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
    PositionalFileConnection metadataConnection=(PositionalFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_REGEXP) {
    RegexpFileConnection metadataConnection=(RegexpFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    XmlFileConnection metadataConnection=(XmlFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_EXCEL) {
    FileExcelConnection metadataConnection=(FileExcelConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_LDIF) {
    LdifFileConnection metadataConnection=(LdifFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
    LDAPSchemaConnection metadataConnection=(LDAPSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
    GenericSchemaConnection genericSchemaConnection=(GenericSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,genericSchemaConnection);
  }
  if (type == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
    WSDLSchemaConnection genericSchemaConnection=(WSDLSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,genericSchemaConnection);
  }
  if (type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
    SalesforceSchemaConnection genericSchemaConnection=(SalesforceSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,genericSchemaConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
    EbcdicConnection ebcdicConnection=(EbcdicConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,ebcdicConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_HL7) {
    HL7Connection hl7Connection=(HL7Connection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,hl7Connection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_FTP) {
    FTPConnection ftpConnection=(FTPConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,ftpConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_BRMS) {
    BRMSConnection brmsConnection=(BRMSConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,brmsConnection);
  }
  if (type == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    MDMConnection mdmConnection=(MDMConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,mdmConnection);
  }
  if (type == ERepositoryObjectType.METADATA_EDIFACT) {
    EDIFACTConnection edifactConnection=(EDIFACTConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,edifactConnection);
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.addNode(type,recBinNode,repositoryObject,node);
    if (handler.isCreateTableNode()) {
      Item item=repositoryObject.getProperty().getItem();
      if (item != null && item instanceof ConnectionItem) {
        createTables(recBinNode,node,repositoryObject,((ConnectionItem)item).getConnection());
      }
    }
  }
}","private void addNode(RepositoryNode parent,ERepositoryObjectType type,RepositoryNode recBinNode,IRepositoryViewObject repositoryObject){
  boolean isAvaliableInTOS=true;
  if (type == ERepositoryObjectType.METADATA_CONNECTIONS) {
    DatabaseConnection metadataConnection=(DatabaseConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    isAvaliableInTOS=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDatabaseType(),false) == null ? false : true;
  }
  RepositoryNode node=new RepositoryNode(repositoryObject,parent,ENodeType.REPOSITORY_ELEMENT);
  node.setProperties(EProperties.CONTENT_TYPE,type);
  node.setProperties(EProperties.LABEL,repositoryObject.getLabel());
  if ((repositoryObject.isDeleted() && parent.getObject() == null) || (repositoryObject.isDeleted() && !parent.getObject().isDeleted())) {
  }
 else {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService designerCoreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (designerCoreService != null) {
        for (        IRepositoryNode repositoryNode : parent.getChildren()) {
          if (repositoryNode.getObject() != null) {
            if (repositoryNode.getObject().getId().equals(repositoryObject.getId())) {
              Problem problem=new Problem();
              problem.setDescription(type.name() + ""String_Node_Str"" + repositoryNode.getObject().getLabel()+ ""String_Node_Str""+ repositoryNode.getObject().getVersion()+ ""String_Node_Str""+ repositoryObject.getLabel()+ ""String_Node_Str""+ repositoryObject.getVersion()+ ""String_Node_Str"");
              problem.setStatus(ProblemStatus.WARNING);
              designerCoreService.addProblems(problem);
            }
          }
        }
      }
    }
    if (isAvaliableInTOS) {
      parent.getChildren().add(node);
    }
  }
  if (type == ERepositoryObjectType.METADATA_CONNECTIONS && isAvaliableInTOS) {
    DatabaseConnection metadataConnection=(DatabaseConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
    SAPConnection metadataConnection=(SAPConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    DelimitedFileConnection metadataConnection=(DelimitedFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
    PositionalFileConnection metadataConnection=(PositionalFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_REGEXP) {
    RegexpFileConnection metadataConnection=(RegexpFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    XmlFileConnection metadataConnection=(XmlFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_EXCEL) {
    FileExcelConnection metadataConnection=(FileExcelConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_LDIF) {
    LdifFileConnection metadataConnection=(LdifFileConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
    LDAPSchemaConnection metadataConnection=(LDAPSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,metadataConnection);
  }
  if (type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
    GenericSchemaConnection genericSchemaConnection=(GenericSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,genericSchemaConnection);
  }
  if (type == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
    WSDLSchemaConnection genericSchemaConnection=(WSDLSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,genericSchemaConnection);
  }
  if (type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
    SalesforceSchemaConnection genericSchemaConnection=(SalesforceSchemaConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,genericSchemaConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
    EbcdicConnection ebcdicConnection=(EbcdicConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,ebcdicConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_HL7) {
    HL7Connection hl7Connection=(HL7Connection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,hl7Connection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_FTP) {
    FTPConnection ftpConnection=(FTPConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,ftpConnection);
  }
  if (type == ERepositoryObjectType.METADATA_FILE_BRMS) {
    BRMSConnection brmsConnection=(BRMSConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,brmsConnection);
  }
  if (type == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    MDMConnection mdmConnection=(MDMConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,mdmConnection);
  }
  if (type == ERepositoryObjectType.METADATA_EDIFACT) {
    EDIFACTConnection edifactConnection=(EDIFACTConnection)((ConnectionItem)repositoryObject.getProperty().getItem()).getConnection();
    createTables(recBinNode,node,repositoryObject,edifactConnection);
  }
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    handler.addNode(type,recBinNode,repositoryObject,node);
  }
}",0.9813907933398628
129022,"@Override protected List<String> getTablesToFilter(IMetadataConnection metadataConnection){
  List<String> tablesToFilter=new ArrayList<String>();
  Statement stmt;
  try {
    stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    if (metadataConnection.getDbVersionString() != null && !metadataConnection.getDbVersionString().equals(EDatabaseVersion4Drivers.ORACLE_8.getVersionValue())) {
      ResultSet rsTables=stmt.executeQuery(ORACLE_10G_RECBIN_SQL);
      tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
      rsTables.close();
    }
    stmt.close();
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
  }
  return tablesToFilter;
}","@Override protected List<String> getTablesToFilter(IMetadataConnection metadataConnection){
  List<String> tablesToFilter=new ArrayList<String>();
  Statement stmt;
  try {
    stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLE_RAC.getDisplayName().equals(metadataConnection.getDbType())|| EDatabaseTypeName.ORACLE_OCI.getDisplayName().equals(metadataConnection.getDbType())) {
      ResultSet rsTables=stmt.executeQuery(ORACLE_10G_RECBIN_SQL);
      tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
      rsTables.close();
    }
    stmt.close();
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
  }
  return tablesToFilter;
}",0.7171837708830548
129023,"public static boolean isBrandingChanged(){
  if (!isBrandingChanged) {
    if (CommonsPlugin.isHeadless()) {
      isBrandingChanged=true;
    }
 else {
      IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
      final String fullProductName=brandingService.getFullProductName();
      Display display=Display.getDefault();
      if (display == null) {
        display=Display.getCurrent();
      }
      display.syncExec(new Runnable(){
        public void run(){
          IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
          String oldBrandingName=preferenceStore.getString(LAST_STARTED_PRODUCT);
          if (oldBrandingName == null || oldBrandingName.equals(""String_Node_Str"") || !oldBrandingName.equals(fullProductName)) {
            isBrandingChanged=true;
            preferenceStore.setValue(LAST_STARTED_PRODUCT,fullProductName);
          }
        }
      }
);
    }
  }
  return isBrandingChanged;
}","public static boolean isBrandingChanged(){
  if (!isBrandingChanged) {
    if (CommonsPlugin.isHeadless()) {
      isBrandingChanged=false;
    }
 else {
      IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
      final String fullProductName=brandingService.getFullProductName();
      Display display=Display.getDefault();
      if (display == null) {
        display=Display.getCurrent();
      }
      display.syncExec(new Runnable(){
        public void run(){
          IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
          String oldBrandingName=preferenceStore.getString(LAST_STARTED_PRODUCT);
          if (oldBrandingName == null || oldBrandingName.equals(""String_Node_Str"") || !oldBrandingName.equals(fullProductName)) {
            isBrandingChanged=true;
            preferenceStore.setValue(LAST_STARTED_PRODUCT,fullProductName);
          }
        }
      }
);
    }
  }
  return isBrandingChanged;
}",0.996583699365544
129024,"private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  List<String> columnLabels=new ArrayList<String>();
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    columnLabels.add(column.getLabel());
    index++;
  }
  columns.close();
}",0.98622919410849
129025,"private static void fillSynonmsForDB2(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  synSQL+=""String_Node_Str"";
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(""String_Node_Str"");
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(""String_Node_Str"");
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForDB2(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  synSQL+=""String_Node_Str"";
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  List<String> columnLabels=new ArrayList<String>();
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(""String_Node_Str"");
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(""String_Node_Str"");
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    columnLabels.add(column.getLabel());
    index++;
  }
  columns.close();
}",0.9816966417316568
129026,"public static List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,TableNode tableNode,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String catalogName=null;
    String schemaName=null;
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      if (parent.getType() == TableNode.CATALOG) {
        catalogName=parent.getValue();
      }
 else       if (parent.getType() == TableNode.SCHEMA) {
        schemaName=parent.getValue();
        TableNode catalogNode=parent.getParent();
        if (catalogNode != null) {
          catalogName=catalogNode.getValue();
        }
      }
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    boolean isHive=MetadataConnectionUtils.isHive(dbMetaData);
    if (!isHive) {
      try {
        ResultSet keys;
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(catalogName,schemaName,tableNode.getValue());
        }
 else {
          keys=dbMetaData.getIndexInfo(catalogName,schemaName,tableNode.getValue(),true,true);
        }
        primaryKeys.clear();
        while (keys.next()) {
          primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
        }
        keys.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
      Connection connection=dbMetaData.getConnection();
      checkUniqueKeyConstraint(tableNode.getValue(),primaryKeys,connection);
    }
    String tableName=tableNode.getValue();
    ResultSet columns;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str""+ ""String_Node_Str""+ tableNode.getValue()+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
        metadataColumns.add(metadataColumn);
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}","public static List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,TableNode tableNode,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String catalogName=null;
    String schemaName=null;
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      if (parent.getType() == TableNode.CATALOG) {
        catalogName=parent.getValue();
      }
 else       if (parent.getType() == TableNode.SCHEMA) {
        schemaName=parent.getValue();
        TableNode catalogNode=parent.getParent();
        if (catalogNode != null) {
          catalogName=catalogNode.getValue();
        }
      }
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    boolean isHive=MetadataConnectionUtils.isHive(dbMetaData);
    if (!isHive) {
      try {
        ResultSet keys;
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(catalogName,schemaName,tableNode.getValue());
        }
 else {
          keys=dbMetaData.getIndexInfo(catalogName,schemaName,tableNode.getValue(),true,true);
        }
        primaryKeys.clear();
        while (keys.next()) {
          primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
        }
        keys.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
      Connection connection=dbMetaData.getConnection();
      checkUniqueKeyConstraint(tableNode.getValue(),primaryKeys,connection);
    }
    String tableName=tableNode.getValue();
    ResultSet columns;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str""+ ""String_Node_Str""+ tableNode.getValue()+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}",0.9794618691291196
129027,"private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
 else   if (table.eContainer() instanceof Schema) {
    Schema schema=(Schema)table.eContainer();
    synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
 else   if (table.eContainer() instanceof Schema) {
    Schema schema=(Schema)table.eContainer();
    synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  List<String> columnLabels=new ArrayList<String>();
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    columnLabels.add(column.getLabel());
    index++;
  }
  columns.close();
}",0.982657216106168
129028,"public static boolean isBrandingChanged(){
  if (!isBrandingChanged) {
    if (CommonsPlugin.isHeadless()) {
      isBrandingChanged=true;
    }
 else {
      IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
      final String fullProductName=brandingService.getFullProductName();
      Display display=Display.getDefault();
      if (display == null) {
        display=Display.getCurrent();
      }
      display.syncExec(new Runnable(){
        public void run(){
          IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
          String oldBrandingName=preferenceStore.getString(LAST_STARTED_PRODUCT);
          if (oldBrandingName == null || oldBrandingName.equals(""String_Node_Str"") || !oldBrandingName.equals(fullProductName)) {
            isBrandingChanged=true;
            preferenceStore.setValue(LAST_STARTED_PRODUCT,fullProductName);
          }
        }
      }
);
    }
  }
  return isBrandingChanged;
}","public static boolean isBrandingChanged(){
  if (!isBrandingChanged) {
    if (CommonsPlugin.isHeadless()) {
      isBrandingChanged=false;
    }
 else {
      IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
      final String fullProductName=brandingService.getFullProductName();
      Display display=Display.getDefault();
      if (display == null) {
        display=Display.getCurrent();
      }
      display.syncExec(new Runnable(){
        public void run(){
          IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
          String oldBrandingName=preferenceStore.getString(LAST_STARTED_PRODUCT);
          if (oldBrandingName == null || oldBrandingName.equals(""String_Node_Str"") || !oldBrandingName.equals(fullProductName)) {
            isBrandingChanged=true;
            preferenceStore.setValue(LAST_STARTED_PRODUCT,fullProductName);
          }
        }
      }
);
    }
  }
  return isBrandingChanged;
}",0.996583699365544
129029,"public int compare(IWorkspaceMigrationTask o1,IWorkspaceMigrationTask o2){
  return o1.getOrder().compareTo(o2.getOrder());
}","@Override public int compare(IWorkspaceMigrationTask o1,IWorkspaceMigrationTask o2){
  return o1.getOrder().compareTo(o2.getOrder());
}",0.9615384615384616
129030,"private void sortMigrationTasks(List<? extends IMigrationTask> tasks){
  Collections.sort(tasks,new Comparator<IMigrationTask>(){
    public int compare(    IMigrationTask t1,    IMigrationTask t2){
      return t1.getOrder().compareTo(t2.getOrder());
    }
  }
);
}","private void sortMigrationTasks(List<? extends IMigrationTask> tasks){
  Collections.sort(tasks,new Comparator<IMigrationTask>(){
    @Override public int compare(    IMigrationTask t1,    IMigrationTask t2){
      return t1.getOrder().compareTo(t2.getOrder());
    }
  }
);
}",0.981549815498155
129031,"public void initNewProjectTasks(Project project){
  List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(true);
  toExecute.addAll(GetTasksHelper.getProjectTasks(false));
  List<MigrationTask> done=new ArrayList<MigrationTask>();
  for (  IProjectMigrationTask task : toExecute) {
    done.add(MigrationUtil.convertMigrationTask(task));
  }
  saveProjectMigrationTasksDone(project,done);
}","@Override public void initNewProjectTasks(Project project){
  List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(true);
  toExecute.addAll(GetTasksHelper.getProjectTasks(false));
  List<MigrationTask> done=new ArrayList<MigrationTask>();
  for (  IProjectMigrationTask task : toExecute) {
    done.add(MigrationUtil.convertMigrationTask(task));
  }
  saveProjectMigrationTasksDone(project,done);
}",0.9878048780487804
129032,"public void run() throws PersistenceException {
  boolean needSave=false;
  if (!beforeLogon) {
    ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
    Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
      public int compare(      ERepositoryObjectType arg0,      ERepositoryObjectType arg1){
        if (arg0 == ERepositoryObjectType.PROCESS) {
          return 1;
        }
        if (arg0 == ERepositoryObjectType.JOBLET) {
          return 1;
        }
        return 0;
      }
    }
);
    for (    ERepositoryObjectType type : types) {
      if (!type.isResourceItem()) {
        continue;
      }
      List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
      for (      IRepositoryViewObject object : objects) {
        Item item=object.getProperty().getItem();
        monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
        subProgressMonitor.worked(1);
        for (        IProjectMigrationTask task : toExecute) {
          if (monitorWrap.isCanceled()) {
            throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
          }
          MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
          if (mgTask == null && !task.isDeprecated()) {
            ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
              if (task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
case SUCCESS_NO_ALERT:
            if (task.getStatus() != ExecutionResult.FAILURE) {
              task.setStatus(status);
            }
case NOTHING_TO_DO:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case SKIPPED:
      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
        task.setStatus(status);
      }
    break;
case FAILURE:
  task.setStatus(status);
default :
task.setStatus(status);
break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
task.setStatus(status);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}","@Override public void run() throws PersistenceException {
  boolean needSave=false;
  if (!beforeLogon) {
    ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
    Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
      @Override public int compare(      ERepositoryObjectType arg0,      ERepositoryObjectType arg1){
        if (arg0 == ERepositoryObjectType.PROCESS) {
          return 1;
        }
        if (arg0 == ERepositoryObjectType.JOBLET) {
          return 1;
        }
        return 0;
      }
    }
);
    for (    ERepositoryObjectType type : types) {
      if (!type.isResourceItem()) {
        continue;
      }
      List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
      for (      IRepositoryViewObject object : objects) {
        Item item=object.getProperty().getItem();
        monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
        subProgressMonitor.worked(1);
        for (        IProjectMigrationTask task : toExecute) {
          if (monitorWrap.isCanceled()) {
            throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
          }
          MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
          if (mgTask == null && !task.isDeprecated()) {
            ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
              if (task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
case SUCCESS_NO_ALERT:
            if (task.getStatus() != ExecutionResult.FAILURE) {
              task.setStatus(status);
            }
case NOTHING_TO_DO:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case SKIPPED:
      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
        task.setStatus(status);
      }
    break;
case FAILURE:
  task.setStatus(status);
default :
task.setStatus(status);
break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
task.setStatus(status);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
RelationshipItemBuilder.getInstance().saveRelations();
}",0.9824466648663246
129033,"public boolean needExecutemigration(){
  return !AlertUserOnLogin.executed;
}","@Override public boolean needExecutemigration(){
  return !AlertUserOnLogin.executed;
}",0.9390243902439024
129034,"public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
              if (mgTask == null && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
task.setStatus(status);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}","@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          @Override public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
              if (mgTask == null && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
task.setStatus(status);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (mgTask == null && task.isDeprecated()) {
done.add(MigrationUtil.convertMigrationTask(task));
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
RelationshipItemBuilder.getInstance().saveRelations();
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.9784034554471284
129035,"public void executeWorspaceTasks(){
  log.trace(""String_Node_Str"");
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  List<String> done=coreService.readWorkspaceTasksDone();
  String lastUser=coreService.getLastUser();
  if (lastUser == null || lastUser.length() == 0) {
    if (done.isEmpty()) {
      initNewWorkspaceTasks();
      done=coreService.readWorkspaceTasksDone();
    }
  }
  Collections.sort(toExecute,new Comparator<IWorkspaceMigrationTask>(){
    public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  for (  IWorkspaceMigrationTask task : toExecute) {
    if (!done.contains(task.getId())) {
      if (task.execute()) {
        coreService.addWorkspaceTaskDone(task.getId());
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
 else {
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
    }
  }
}","@Override public void executeWorspaceTasks(){
  log.trace(""String_Node_Str"");
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  List<String> done=coreService.readWorkspaceTasksDone();
  String lastUser=coreService.getLastUser();
  if (lastUser == null || lastUser.length() == 0) {
    if (done.isEmpty()) {
      initNewWorkspaceTasks();
      done=coreService.readWorkspaceTasksDone();
    }
  }
  Collections.sort(toExecute,new Comparator<IWorkspaceMigrationTask>(){
    @Override public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  for (  IWorkspaceMigrationTask task : toExecute) {
    if (!done.contains(task.getId())) {
      if (task.execute()) {
        coreService.addWorkspaceTaskDone(task.getId());
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
 else {
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
    }
  }
}",0.990138067061144
129036,"public void executeMigration(boolean underPluginModel){
  new AlertUserOnLogin().startup(underPluginModel);
}","@Override public void executeMigration(boolean underPluginModel){
  new AlertUserOnLogin().startup(underPluginModel);
}",0.956140350877193
129037,"public void executeMigrationTasksForImport(Project project,Item item,List<MigrationTask> migrationTasksToApply,final IProgressMonitor monitor) throws Exception {
  if (item == null || migrationTasksToApply == null) {
    return;
  }
  String itemName=item.getProperty().getLabel();
  List<IProjectMigrationTask> toExecute=new ArrayList<IProjectMigrationTask>();
  for (  MigrationTask task : migrationTasksToApply) {
    IProjectMigrationTask projectTask=GetTasksHelper.getInstance().getProjectTask(task.getId());
    if (projectTask == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (!projectTask.isDeprecated()) {
      toExecute.add(projectTask);
    }
  }
  sortMigrationTasks(toExecute);
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IProjectMigrationTask task : toExecute) {
    monitor.subTask(Messages.getString(""String_Node_Str"",task.getName(),itemName));
    try {
      if ((item.getProperty().eResource() == null || item.eResource() == null)) {
        Property updatedProperty=factory.reload(item.getProperty());
        item=updatedProperty.getItem();
      }
      if (item != null) {
        ExecutionResult executionResult=task.execute(project,item);
        if (executionResult == ExecutionResult.FAILURE) {
          log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()));
        }
      }
    }
 catch (    Exception e) {
      log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()),e);
      try {
        factory.deleteObjectPhysical(new RepositoryObject(item.getProperty()));
        break;
      }
 catch (      PersistenceException e1) {
        log.error(Messages.getString(""String_Node_Str"",itemName));
      }
    }
  }
  try {
    ICodeGeneratorService service=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer routineSynchronizer=service.createJavaRoutineSynchronizer();
    if (item != null && item instanceof RoutineItem) {
      RoutineUtils.changeRoutinesPackage(item);
      RoutineItem routineItem=(RoutineItem)item;
      routineSynchronizer.forceSyncRoutine(routineItem);
      routineSynchronizer.syncRoutine(routineItem,true);
      routineSynchronizer.getFile(routineItem);
    }
    if (item.getProperty().eResource() != null) {
      factory.unloadResources(item.getProperty());
      if (item.getParent() != null && item.getParent() instanceof FolderItem) {
        ((FolderItem)item.getParent()).getChildren().remove(item);
        item.setParent(null);
      }
    }
  }
 catch (  Exception e) {
    throw e;
  }
}","@Override public void executeMigrationTasksForImport(Project project,Item item,List<MigrationTask> migrationTasksToApply,final IProgressMonitor monitor) throws Exception {
  if (item == null || migrationTasksToApply == null) {
    return;
  }
  String itemName=item.getProperty().getLabel();
  List<IProjectMigrationTask> toExecute=new ArrayList<IProjectMigrationTask>();
  for (  MigrationTask task : migrationTasksToApply) {
    IProjectMigrationTask projectTask=GetTasksHelper.getInstance().getProjectTask(task.getId());
    if (projectTask == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (!projectTask.isDeprecated()) {
      toExecute.add(projectTask);
    }
  }
  sortMigrationTasks(toExecute);
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IProjectMigrationTask task : toExecute) {
    monitor.subTask(Messages.getString(""String_Node_Str"",task.getName(),itemName));
    try {
      if ((item.getProperty().eResource() == null || item.eResource() == null)) {
        Property updatedProperty=factory.reload(item.getProperty());
        item=updatedProperty.getItem();
      }
      if (item != null) {
        ExecutionResult executionResult=task.execute(project,item);
        if (executionResult == ExecutionResult.FAILURE) {
          log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()));
        }
      }
    }
 catch (    Exception e) {
      log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()),e);
      try {
        factory.deleteObjectPhysical(new RepositoryObject(item.getProperty()));
        break;
      }
 catch (      PersistenceException e1) {
        log.error(Messages.getString(""String_Node_Str"",itemName));
      }
    }
  }
  try {
    ICodeGeneratorService service=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer routineSynchronizer=service.createJavaRoutineSynchronizer();
    if (item != null && item instanceof RoutineItem) {
      RoutineUtils.changeRoutinesPackage(item);
      RoutineItem routineItem=(RoutineItem)item;
      routineSynchronizer.forceSyncRoutine(routineItem);
      routineSynchronizer.syncRoutine(routineItem,true);
      routineSynchronizer.getFile(routineItem);
    }
    if (item.getProperty().eResource() != null) {
      factory.unloadResources(item.getProperty());
      if (item.getParent() != null && item.getParent() instanceof FolderItem) {
        ((FolderItem)item.getParent()).getChildren().remove(item);
        item.setParent(null);
      }
    }
  }
 catch (  Exception e) {
    throw e;
  }
}",0.9981160512434062
129038,"public boolean checkMigrationTasks(org.talend.core.model.properties.Project project){
  EList<MigrationTask> migrationTasks=project.getMigrationTask();
  ProductVersion topTaskVersion=new ProductVersion(0,0,0);
  ProductVersion topTaskBreaks=new ProductVersion(0,0,0);
  for (  MigrationTask task : migrationTasks) {
    String version=task.getVersion();
    if (version == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else {
      ProductVersion taskVersion=ProductVersion.fromString(version);
      if (taskVersion.compareTo(topTaskVersion) > 0) {
        topTaskVersion=taskVersion;
      }
    }
    String breaks=task.getBreaks();
    MigrationStatus status=task.getStatus();
    if (breaks == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (status != MigrationStatus.NOIMPACT_LITERAL) {
      ProductVersion taskBreaks=ProductVersion.fromString(breaks);
      if (taskBreaks.compareTo(topTaskBreaks) > 0) {
        topTaskBreaks=taskBreaks;
      }
    }
  }
  ProductVersion productVersion=ProductVersion.fromString(VersionUtils.getTalendVersion());
  if (topTaskBreaks.compareTo(productVersion) >= 0) {
    int dataVersionMajor=topTaskVersion.getMajor();
    int dataVersionMinor=topTaskVersion.getMinor();
    int dataVersionSystem=topTaskVersion.getMicro();
    int productVersionMajor=productVersion.getMajor();
    int productVersionMinor=productVersion.getMinor();
    int productVersionSystem=productVersion.getMicro();
    if (dataVersionMajor == productVersionMajor && dataVersionMinor == productVersionMinor && dataVersionSystem <= productVersionSystem) {
      return true;
    }
    return false;
  }
  return true;
}","@Override public boolean checkMigrationTasks(org.talend.core.model.properties.Project project){
  EList<MigrationTask> migrationTasks=project.getMigrationTask();
  ProductVersion topTaskVersion=new ProductVersion(0,0,0);
  ProductVersion topTaskBreaks=new ProductVersion(0,0,0);
  for (  MigrationTask task : migrationTasks) {
    String version=task.getVersion();
    if (version == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else {
      ProductVersion taskVersion=ProductVersion.fromString(version);
      if (taskVersion.compareTo(topTaskVersion) > 0) {
        topTaskVersion=taskVersion;
      }
    }
    String breaks=task.getBreaks();
    MigrationStatus status=task.getStatus();
    if (breaks == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (status != MigrationStatus.NOIMPACT_LITERAL) {
      ProductVersion taskBreaks=ProductVersion.fromString(breaks);
      if (taskBreaks.compareTo(topTaskBreaks) > 0) {
        topTaskBreaks=taskBreaks;
      }
    }
  }
  ProductVersion productVersion=ProductVersion.fromString(VersionUtils.getTalendVersion());
  if (topTaskBreaks.compareTo(productVersion) >= 0) {
    int dataVersionMajor=topTaskVersion.getMajor();
    int dataVersionMinor=topTaskVersion.getMinor();
    int dataVersionSystem=topTaskVersion.getMicro();
    int productVersionMajor=productVersion.getMajor();
    int productVersionMinor=productVersion.getMinor();
    int productVersionSystem=productVersion.getMicro();
    if (dataVersionMajor == productVersionMajor && dataVersionMinor == productVersionMinor && dataVersionSystem <= productVersionSystem) {
      return true;
    }
    return false;
  }
  return true;
}",0.9971048060220036
129039,"public void updateMigrationSystem(org.talend.core.model.properties.Project project,boolean persistence){
  IProjectMigrationTask task=GetTasksHelper.getInstance().getProjectTask(MigrationUtil.ADAPT_NEW_MIGRATION_TASK_SYSTEM_ID);
  task.execute(new org.talend.core.model.general.Project(project),persistence);
  project.getMigrationTask().add(MigrationUtil.convertMigrationTask(task));
}","@Override public void updateMigrationSystem(org.talend.core.model.properties.Project project,boolean persistence){
  IProjectMigrationTask task=GetTasksHelper.getInstance().getProjectTask(MigrationUtil.ADAPT_NEW_MIGRATION_TASK_SYSTEM_ID);
  task.execute(new org.talend.core.model.general.Project(project),persistence);
  project.getMigrationTask().add(MigrationUtil.convertMigrationTask(task));
}",0.9872122762148338
129040,"@Override public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  done.remove(""String_Node_Str"");
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    @Override public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          @Override public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
RelationshipItemBuilder.getInstance().saveRelations();
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}","@Override public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    @Override public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  done.remove(""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          @Override public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
RelationshipItemBuilder.getInstance().saveRelations();
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.9944344409887051
129041,"/** 
 * qli Comment method ""validateColumnName"".
 */
public static String validateColumnName(final String columnName,final int index){
  String originalColumnName=new String(mapSpecialChar(columnName));
  final String underLine=""String_Node_Str"";
  boolean isKeyword=KeywordsValidator.isKeyword(originalColumnName);
  String returnedColumnName=""String_Node_Str"";
  if (!isKeyword) {
    boolean isAllowSpecific=isAllowSpecificCharacters();
    for (int i=0; i < originalColumnName.length(); i++) {
      Character car=originalColumnName.charAt(i);
      if (car.toString().getBytes().length == 1 && !isAllowSpecific) {
        if (((car >= 'a') && (car <= 'z')) || ((car >= 'A') && (car <= 'Z')) || car == '_' || ((car >= '0') && (car <= '9') && (i != 0))) {
          returnedColumnName+=car;
        }
 else {
          returnedColumnName+=underLine;
        }
      }
 else {
        returnedColumnName+=car;
      }
    }
  }
  if (isKeyword || org.apache.commons.lang.StringUtils.countMatches(returnedColumnName,underLine) > (originalColumnName.length() / 2)) {
    returnedColumnName=""String_Node_Str"" + index;
  }
  return returnedColumnName;
}","public static String validateColumnName(final String columnName,final int index,List<String> labels){
  String name=validateColumnName(columnName,index);
  UniqueStringGenerator<String> uniqueStringGenerator=new UniqueStringGenerator<String>(name,labels){
    @Override protected String getBeanString(    String bean){
      return bean;
    }
  }
;
  return uniqueStringGenerator.getUniqueString();
}",0.1701030927835051
129042,"/** 
 * qli Comment method ""validateColumnName"".
 */
public static String validateColumnName(String columnName,int index){
  String originalColumnName=new String(columnName);
  final String underLine=""String_Node_Str"";
  boolean isKeyword=KeywordsValidator.isKeyword(originalColumnName);
  columnName=""String_Node_Str"";
  if (!isKeyword) {
    boolean isAllowSpecific=isAllowSpecificCharacters();
    for (int i=0; i < originalColumnName.length(); i++) {
      Character car=originalColumnName.charAt(i);
      if (car.toString().getBytes().length == 1 && !isAllowSpecific) {
        if (((car >= 'a') && (car <= 'z')) || ((car >= 'A') && (car <= 'Z')) || car == '_' || ((car >= '0') && (car <= '9') && (i != 0))) {
          columnName+=car;
        }
 else {
          columnName+=underLine;
        }
      }
 else {
        columnName+=car;
      }
    }
  }
  if (isKeyword || org.apache.commons.lang.StringUtils.countMatches(columnName,underLine) > (originalColumnName.length() / 2)) {
    columnName=""String_Node_Str"" + index;
  }
  return columnName;
}","public static String validateColumnName(final String columnName,final int index,List<String> labels){
  String name=validateColumnName(columnName,index);
  UniqueStringGenerator<String> uniqueStringGenerator=new UniqueStringGenerator<String>(name,labels){
    @Override protected String getBeanString(    String bean){
      return bean;
    }
  }
;
  return uniqueStringGenerator.getUniqueString();
}",0.0917180013689254
129043,"private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  List<String> columnLabels=new ArrayList<String>();
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    columnLabels.add(column.getLabel());
    index++;
  }
  columns.close();
}",0.98622919410849
129044,"private static void fillSynonmsForDB2(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  synSQL+=""String_Node_Str"";
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(""String_Node_Str"");
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(""String_Node_Str"");
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForDB2(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  synSQL+=""String_Node_Str"";
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  List<String> columnLabels=new ArrayList<String>();
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(""String_Node_Str"");
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(""String_Node_Str"");
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    columnLabels.add(column.getLabel());
    index++;
  }
  columns.close();
}",0.9816966417316568
129045,"/** 
 * DOC cantoine. Method to return a Collection of Column description(metadata) for a DB connection.
 * @param DatabaseMetaData dbMetaData
 * @param MetadataTable medataTable
 * @return Collection of MetadataColumn Object
 * @deprecated
 */
public static List<TdColumn> extractMetadataColumnsFormTable(DatabaseMetaData dbMetaData,String medataLabel,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String originSchema=null;
    if (!""String_Node_Str"".equals(medataLabel) && medataLabel != null) {
      originSchema=tableSchemaMap.get(medataLabel);
    }
    if (!""String_Node_Str"".equals(metadataConnection.getSchema()) && (metadataConnection.getSchema() != null)) {
      originSchema=metadataConnection.getSchema();
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    try {
      ResultSet keys;
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,originSchema,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,originSchema,medataLabel,true,true);
        }
      }
 else {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,null,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,null,medataLabel,true,true);
        }
      }
      primaryKeys.clear();
      while (keys.next()) {
        primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
      }
      keys.close();
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
    Connection connection=dbMetaData.getConnection();
    checkUniqueKeyConstraint(medataLabel,primaryKeys,connection);
    String tableName=medataLabel;
    ResultSet columns;
    ResultSetMetaData resultMetadata=null;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        columns=dbMetaData.getColumns(null,originSchema,tableName,null);
      }
 else {
        columns=dbMetaData.getColumns(null,null,tableName,null);
      }
    }
    boolean isMYSQL=EDatabaseTypeName.MYSQL.getDisplayName().equals(metadataConnection.getDbType());
    if (isMYSQL) {
      Statement statement=connection.createStatement();
      String query=""String_Node_Str"" + tableName + ""String_Node_Str"";
      ResultSet resultSet=statement.executeQuery(query);
      resultMetadata=resultSet.getMetaData();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          columnSize=ExtractMetaDataUtils.getOracleIntMatadataInfo(columns,""String_Node_Str"");
        }
 else {
          if (isMYSQL) {
            columnSize=ExtractMetaDataUtils.getMysqlIntMetaDataInfo(resultMetadata,columnIndex);
          }
 else {
            columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
          }
        }
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str""+ ""String_Node_Str""+ medataLabel+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        metadataColumns.add(metadataColumn);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=(MetadataColumn)metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}","/** 
 * DOC cantoine. Method to return a Collection of Column description(metadata) for a DB connection.
 * @param DatabaseMetaData dbMetaData
 * @param MetadataTable medataTable
 * @return Collection of MetadataColumn Object
 * @deprecated
 */
public static List<TdColumn> extractMetadataColumnsFormTable(DatabaseMetaData dbMetaData,String medataLabel,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String originSchema=null;
    if (!""String_Node_Str"".equals(medataLabel) && medataLabel != null) {
      originSchema=tableSchemaMap.get(medataLabel);
    }
    if (!""String_Node_Str"".equals(metadataConnection.getSchema()) && (metadataConnection.getSchema() != null)) {
      originSchema=metadataConnection.getSchema();
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    try {
      ResultSet keys;
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,originSchema,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,originSchema,medataLabel,true,true);
        }
      }
 else {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,null,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,null,medataLabel,true,true);
        }
      }
      primaryKeys.clear();
      while (keys.next()) {
        primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
      }
      keys.close();
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
    Connection connection=dbMetaData.getConnection();
    checkUniqueKeyConstraint(medataLabel,primaryKeys,connection);
    String tableName=medataLabel;
    ResultSet columns;
    ResultSetMetaData resultMetadata=null;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        columns=dbMetaData.getColumns(null,originSchema,tableName,null);
      }
 else {
        columns=dbMetaData.getColumns(null,null,tableName,null);
      }
    }
    boolean isMYSQL=EDatabaseTypeName.MYSQL.getDisplayName().equals(metadataConnection.getDbType());
    if (isMYSQL) {
      Statement statement=connection.createStatement();
      String query=""String_Node_Str"" + tableName + ""String_Node_Str"";
      ResultSet resultSet=statement.executeQuery(query);
      resultMetadata=resultSet.getMetaData();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    List<String> columnLabels=new ArrayList<String>();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          columnSize=ExtractMetaDataUtils.getOracleIntMatadataInfo(columns,""String_Node_Str"");
        }
 else {
          if (isMYSQL) {
            columnSize=ExtractMetaDataUtils.getMysqlIntMetaDataInfo(resultMetadata,columnIndex);
          }
 else {
            columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
          }
        }
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str""+ ""String_Node_Str""+ medataLabel+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=(MetadataColumn)metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}",0.981677735386934
129046,"public static List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,TableNode tableNode,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String catalogName=null;
    String schemaName=null;
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      if (parent.getType() == TableNode.CATALOG) {
        catalogName=parent.getValue();
      }
 else       if (parent.getType() == TableNode.SCHEMA) {
        schemaName=parent.getValue();
        TableNode catalogNode=parent.getParent();
        if (catalogNode != null) {
          catalogName=catalogNode.getValue();
        }
      }
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    boolean isHive=MetadataConnectionUtils.isHive(dbMetaData);
    if (!isHive) {
      try {
        ResultSet keys;
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(catalogName,schemaName,tableNode.getValue());
        }
 else {
          keys=dbMetaData.getIndexInfo(catalogName,schemaName,tableNode.getValue(),true,true);
        }
        primaryKeys.clear();
        while (keys.next()) {
          primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
        }
        keys.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
      Connection connection=dbMetaData.getConnection();
      checkUniqueKeyConstraint(tableNode.getValue(),primaryKeys,connection);
    }
    String tableName=tableNode.getValue();
    ResultSet columns;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str""+ ""String_Node_Str""+ tableNode.getValue()+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
        metadataColumns.add(metadataColumn);
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=(MetadataColumn)metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}","public static List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,TableNode tableNode,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String catalogName=null;
    String schemaName=null;
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      if (parent.getType() == TableNode.CATALOG) {
        catalogName=parent.getValue();
      }
 else       if (parent.getType() == TableNode.SCHEMA) {
        schemaName=parent.getValue();
        TableNode catalogNode=parent.getParent();
        if (catalogNode != null) {
          catalogName=catalogNode.getValue();
        }
      }
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    boolean isHive=MetadataConnectionUtils.isHive(dbMetaData);
    if (!isHive) {
      try {
        ResultSet keys;
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(catalogName,schemaName,tableNode.getValue());
        }
 else {
          keys=dbMetaData.getIndexInfo(catalogName,schemaName,tableNode.getValue(),true,true);
        }
        primaryKeys.clear();
        while (keys.next()) {
          primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
        }
        keys.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
      Connection connection=dbMetaData.getConnection();
      checkUniqueKeyConstraint(tableNode.getValue(),primaryKeys,connection);
    }
    String tableName=tableNode.getValue();
    ResultSet columns;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    List<String> columnLabels=new ArrayList<String>();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str""+ ""String_Node_Str""+ tableNode.getValue()+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=(MetadataColumn)metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}",0.9793929120093235
129047,"private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
 else   if (table.eContainer() instanceof Schema) {
    Schema schema=(Schema)table.eContainer();
    synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
 else   if (table.eContainer() instanceof Schema) {
    Schema schema=(Schema)table.eContainer();
    synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  List<String> columnLabels=new ArrayList<String>();
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    columnLabels.add(column.getLabel());
    index++;
  }
  columns.close();
}",0.982657216106168
129048,"private void propagateFileName(Project project,Property property) throws PersistenceException {
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(project,property.getId(),false);
  for (  IRepositoryViewObject object : allVersionToMove) {
    xmiResourceManager.propagateFileName(property,object.getProperty());
  }
}","private void propagateFileName(Project project,Property property) throws PersistenceException {
  String originalVersionText=null;
  URI uri=property.eResource().getURI();
  String fileNameString=uri.trimFileExtension().lastSegment();
  int index=fileNameString.lastIndexOf(""String_Node_Str"");
  originalVersionText=fileNameString.substring(index + 1);
  Version originalVersion=new Version(originalVersionText);
  List<IRepositoryViewObject> allVersionToMove=getAllVersion(project,property.getId(),false);
  int lastVersionCheck=0;
  for (  IRepositoryViewObject object : allVersionToMove) {
    if (originalVersion != null && new Version(object.getVersion()).compareTo(originalVersion) > 0) {
      lastVersionCheck++;
    }
  }
  if (lastVersionCheck > 1) {
    for (    IRepositoryViewObject object : allVersionToMove) {
      ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(object.getProperty().eResource(),object.getProperty(),property);
      if (fileNameTest.getResourceVersion().equals(originalVersionText)) {
        if (ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
          throw new PersistenceException(""String_Node_Str"");
        }
        xmiResourceManager.propagateFileName(property,object.getProperty());
      }
    }
  }
 else {
    for (    IRepositoryViewObject object : allVersionToMove) {
      xmiResourceManager.propagateFileName(property,object.getProperty());
    }
  }
}",0.3714609286523216
129049,"public int compare(IWorkspaceMigrationTask o1,IWorkspaceMigrationTask o2){
  return o1.getOrder().compareTo(o2.getOrder());
}","@Override public int compare(IWorkspaceMigrationTask o1,IWorkspaceMigrationTask o2){
  return o1.getOrder().compareTo(o2.getOrder());
}",0.9615384615384616
129050,"public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  done.remove(""String_Node_Str"");
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}","@Override public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  done.remove(""String_Node_Str"");
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    @Override public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          @Override public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
RelationshipItemBuilder.getInstance().saveRelations();
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.987682706519954
129051,"public void initNewProjectTasks(Project project){
  List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(true);
  toExecute.addAll(GetTasksHelper.getProjectTasks(false));
  List<String> done=new ArrayList<String>();
  for (  IProjectMigrationTask task : toExecute) {
    done.add(task.getId());
  }
  saveProjectMigrationTasksDone(project,done);
}","@Override public void initNewProjectTasks(Project project){
  List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(true);
  toExecute.addAll(GetTasksHelper.getProjectTasks(false));
  List<String> done=new ArrayList<String>();
  for (  IProjectMigrationTask task : toExecute) {
    done.add(task.getId());
  }
  saveProjectMigrationTasksDone(project,done);
}",0.9864130434782608
129052,"public void run() throws PersistenceException {
  boolean needSave=false;
  if (!beforeLogon) {
    ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
    Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
      public int compare(      ERepositoryObjectType arg0,      ERepositoryObjectType arg1){
        if (arg0 == ERepositoryObjectType.PROCESS) {
          return 1;
        }
        if (arg0 == ERepositoryObjectType.JOBLET) {
          return 1;
        }
        return 0;
      }
    }
);
    for (    ERepositoryObjectType type : types) {
      if (!type.isResourceItem()) {
        continue;
      }
      List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
      for (      IRepositoryViewObject object : objects) {
        Item item=object.getProperty().getItem();
        monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
        subProgressMonitor.worked(1);
        for (        IProjectMigrationTask task : toExecute) {
          if (monitorWrap.isCanceled()) {
            throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
          }
          if (!done.contains(task.getId()) && !task.isDeprecated()) {
            ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
              if (task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
case SUCCESS_NO_ALERT:
            if (task.getStatus() != ExecutionResult.FAILURE) {
              task.setStatus(status);
            }
case NOTHING_TO_DO:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case SKIPPED:
      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
        task.setStatus(status);
      }
    break;
case FAILURE:
  task.setStatus(status);
default :
task.setStatus(status);
break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}","@Override public void run() throws PersistenceException {
  boolean needSave=false;
  if (!beforeLogon) {
    ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
    Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
      @Override public int compare(      ERepositoryObjectType arg0,      ERepositoryObjectType arg1){
        if (arg0 == ERepositoryObjectType.PROCESS) {
          return 1;
        }
        if (arg0 == ERepositoryObjectType.JOBLET) {
          return 1;
        }
        return 0;
      }
    }
);
    for (    ERepositoryObjectType type : types) {
      if (!type.isResourceItem()) {
        continue;
      }
      List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
      for (      IRepositoryViewObject object : objects) {
        Item item=object.getProperty().getItem();
        monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
        subProgressMonitor.worked(1);
        for (        IProjectMigrationTask task : toExecute) {
          if (monitorWrap.isCanceled()) {
            throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
          }
          if (!done.contains(task.getId()) && !task.isDeprecated()) {
            ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
              if (task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
case SUCCESS_NO_ALERT:
            if (task.getStatus() != ExecutionResult.FAILURE) {
              task.setStatus(status);
            }
case NOTHING_TO_DO:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case SKIPPED:
      if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
        task.setStatus(status);
      }
    break;
case FAILURE:
  task.setStatus(status);
default :
task.setStatus(status);
break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
RelationshipItemBuilder.getInstance().saveRelations();
}",0.9815602836879432
129053,"public void executeMigration(boolean underPluginModel){
  new AlertUserOnLogin().startup(underPluginModel);
}","@Override public void executeMigration(boolean underPluginModel){
  new AlertUserOnLogin().startup(underPluginModel);
}",0.956140350877193
129054,"public boolean needExecutemigration(){
  return !AlertUserOnLogin.executed;
}","@Override public boolean needExecutemigration(){
  return !AlertUserOnLogin.executed;
}",0.9390243902439024
129055,"public void executeWorspaceTasks(){
  log.trace(""String_Node_Str"");
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  List<String> done=coreService.readWorkspaceTasksDone();
  String lastUser=coreService.getLastUser();
  if (lastUser == null || lastUser.length() == 0) {
    if (done.isEmpty()) {
      initNewWorkspaceTasks();
      done=coreService.readWorkspaceTasksDone();
    }
  }
  Collections.sort(toExecute,new Comparator<IWorkspaceMigrationTask>(){
    public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  for (  IWorkspaceMigrationTask task : toExecute) {
    if (!done.contains(task.getId())) {
      if (task.execute()) {
        coreService.addWorkspaceTaskDone(task.getId());
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
 else {
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
    }
  }
}","@Override public void executeWorspaceTasks(){
  log.trace(""String_Node_Str"");
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  List<String> done=coreService.readWorkspaceTasksDone();
  String lastUser=coreService.getLastUser();
  if (lastUser == null || lastUser.length() == 0) {
    if (done.isEmpty()) {
      initNewWorkspaceTasks();
      done=coreService.readWorkspaceTasksDone();
    }
  }
  Collections.sort(toExecute,new Comparator<IWorkspaceMigrationTask>(){
    @Override public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  for (  IWorkspaceMigrationTask task : toExecute) {
    if (!done.contains(task.getId())) {
      if (task.execute()) {
        coreService.addWorkspaceTaskDone(task.getId());
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
 else {
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
    }
  }
}",0.990138067061144
129056,"/** 
 * qli Comment method ""validateColumnName"".
 */
public static String validateColumnName(final String columnName,final int index){
  String originalColumnName=new String(mapSpecialChar(columnName));
  final String underLine=""String_Node_Str"";
  boolean isKeyword=KeywordsValidator.isKeyword(originalColumnName);
  String returnedColumnName=""String_Node_Str"";
  if (!isKeyword) {
    boolean isAllowSpecific=isAllowSpecificCharacters();
    for (int i=0; i < originalColumnName.length(); i++) {
      Character car=originalColumnName.charAt(i);
      if (car.toString().getBytes().length == 1 && !isAllowSpecific) {
        if (((car >= 'a') && (car <= 'z')) || ((car >= 'A') && (car <= 'Z')) || car == '_' || ((car >= '0') && (car <= '9') && (i != 0))) {
          returnedColumnName+=car;
        }
 else {
          returnedColumnName+=underLine;
        }
      }
 else {
        returnedColumnName+=car;
      }
    }
  }
  if (isKeyword || org.apache.commons.lang.StringUtils.countMatches(returnedColumnName,underLine) > (originalColumnName.length() / 2)) {
    returnedColumnName=""String_Node_Str"" + index;
  }
  return returnedColumnName;
}","public static String validateColumnName(final String columnName,final int index,List<String> labels){
  String name=validateColumnName(columnName,index);
  UniqueStringGenerator<String> uniqueStringGenerator=new UniqueStringGenerator<String>(name,labels){
    @Override protected String getBeanString(    String bean){
      return bean;
    }
  }
;
  return uniqueStringGenerator.getUniqueString();
}",0.1701030927835051
129057,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9903703703703703
129058,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9796208952567412
129059,"@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
    synSQL+=""String_Node_Str"";
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(""String_Node_Str"");
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index);
        column.setLabel(label);
        column.setOriginalField(label2);
        if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(metadataConnection.getDbType(),metadataConnection.isSqlMode())) {
          typeName=columns.getString(""String_Node_Str"");
        }
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}","@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
    synSQL+=""String_Node_Str"";
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(""String_Node_Str"");
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(metadataConnection.getDbType(),metadataConnection.isSqlMode())) {
          typeName=columns.getString(""String_Node_Str"");
        }
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}",0.983973904410722
129060,"@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String str=tableName;
    String TABLE_SCHEMA=null;
    String TABLE_NAME=null;
    String splitstr=str;
    int position=0;
    int count=0;
    if (tableName != null) {
      while (str.contains(""String_Node_Str"")) {
        count++;
        splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
      }
      if (str.indexOf(""String_Node_Str"") == 0) {
        TABLE_NAME=str.substring(1,str.length() - 1);
      }
 else       if (str.indexOf(""String_Node_Str"") == -1) {
        TABLE_NAME=tableName;
      }
 else {
        if (count == 2) {
          str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
        }
        position=str.indexOf(""String_Node_Str"");
        TABLE_SCHEMA=str.substring(0,position);
        TABLE_NAME=str.substring(position + 3,str.length());
      }
    }
    String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
    if (null != TABLE_SCHEMA) {
      synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
    }
    if (!(""String_Node_Str"").equals(metadataConnection.getDatabase())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getDatabase() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    try {
      while (columns.next()) {
        int column_size=0;
        String lenString=null;
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          lenString=""String_Node_Str"";
          column_size=columns.getInt(""String_Node_Str"");
          if (columns.getString(""String_Node_Str"") != null) {
            column_size=columns.getInt(""String_Node_Str"");
            lenString=""String_Node_Str"";
          }
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}","@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    String str=tableName;
    String TABLE_SCHEMA=null;
    String TABLE_NAME=null;
    String splitstr=str;
    int position=0;
    int count=0;
    if (tableName != null) {
      while (str.contains(""String_Node_Str"")) {
        count++;
        splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
      }
      if (str.indexOf(""String_Node_Str"") == 0) {
        TABLE_NAME=str.substring(1,str.length() - 1);
      }
 else       if (str.indexOf(""String_Node_Str"") == -1) {
        TABLE_NAME=tableName;
      }
 else {
        if (count == 2) {
          str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
        }
        position=str.indexOf(""String_Node_Str"");
        TABLE_SCHEMA=str.substring(0,position);
        TABLE_NAME=str.substring(position + 3,str.length());
      }
    }
    String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
    if (null != TABLE_SCHEMA) {
      synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
    }
    if (!(""String_Node_Str"").equals(metadataConnection.getDatabase())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getDatabase() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        int column_size=0;
        String lenString=null;
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          lenString=""String_Node_Str"";
          column_size=columns.getInt(""String_Node_Str"");
          if (columns.getString(""String_Node_Str"") != null) {
            column_size=columns.getInt(""String_Node_Str"");
            lenString=""String_Node_Str"";
          }
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}",0.9874262824079224
129061,"@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(OracleExtractManager.DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
 else     if (table.eContainer() instanceof Schema) {
      Schema schema=(Schema)table.eContainer();
      synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}","@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(OracleExtractManager.DATABASE_PRODUCT_NAME)) {
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
 else     if (table.eContainer() instanceof Schema) {
      Schema schema=(Schema)table.eContainer();
      synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
    }
    Statement sta=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}",0.984246479855012
129062,"@Override protected void checkComments(IMetadataConnection metadataConnection,String tableName,List<TdColumn> metadataColumns){
  ResultSet keys=null;
  PreparedStatement statement=null;
  try {
    statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
    ExtractMetaDataUtils.setQueryStatementTimeout(statement);
    if (statement.execute()) {
      keys=statement.getResultSet();
      int i=0;
      while (keys.next()) {
        MetadataColumn metadataColumn=(MetadataColumn)metadataColumns.get(i++);
        metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
      }
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
  }
 finally {
    try {
      if (keys != null) {
        keys.close();
      }
      if (statement != null) {
        statement.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
}","@Override protected void checkComments(IMetadataConnection metadataConnection,String tableName,List<TdColumn> metadataColumns){
  ResultSet keys=null;
  PreparedStatement statement=null;
  try {
    statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
    ExtractMetaDataUtils.setQueryStatementTimeout(statement);
    if (statement.execute()) {
      keys=statement.getResultSet();
      int i=0;
      while (keys.next()) {
        MetadataColumn metadataColumn=metadataColumns.get(i++);
        metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
      }
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
  }
 finally {
    try {
      if (keys != null) {
        keys.close();
      }
      if (statement != null) {
        statement.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
}",0.9916230366492148
129063,"/** 
 * this creates or updates the org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY by adding or changing the command with value, except if value is null then the command shall be removed.
 * @param command the command to add or update or remove (if value is null) (usually starts with a -)
 * @param value the value of the command,if the value is null,will only update the commmand
 * @param delete the flag used to trigger delete or insert/update the command
 */
static public void updateOrCreateExitDataPropertyWithCommand(String command,String value,boolean delete){
  boolean isValueNull=false;
  if (value == null || ""String_Node_Str"".equals(value)) {
    isValueNull=true;
  }
  StringBuffer result=new StringBuffer(512);
  String currentProperty=System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY);
  if (currentProperty != null) {
    Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
    Matcher restartMatcher=commandPattern.matcher(currentProperty);
    if (delete) {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(""String_Node_Str"");
      }
    }
 else {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
      }
 else {
        int indexOfVmArgs=currentProperty.indexOf(CMD_VMARGS);
        if (indexOfVmArgs >= 0) {
          currentProperty=currentProperty.substring(0,indexOfVmArgs) + command + EclipseCommandLine.NEW_LINE+ (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE)+ currentProperty.substring(indexOfVmArgs);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY + ""String_Node_Str""+ EclipseCommandLine.CMD_VMARGS);
        }
      }
    }
    result.append(currentProperty);
  }
 else {
    String property=System.getProperty(EclipseCommandLine.PROP_VM);
    result.append(property);
    result.append(EclipseCommandLine.NEW_LINE);
    String vmargs=System.getProperty(EclipseCommandLine.PROP_VMARGS);
    if (vmargs != null) {
      result.append(vmargs);
    }
    property=System.getProperty(EclipseCommandLine.PROP_COMMANDS);
    if (property == null) {
      if (value != null) {
        result.append(command);
        result.append(EclipseCommandLine.NEW_LINE);
        if (!isValueNull) {
          result.append(value);
          result.append(EclipseCommandLine.NEW_LINE);
        }
      }
    }
 else {
      Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
      Matcher restartMatcher=commandPattern.matcher(property);
      if (delete) {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(EclipseCommandLine.NEW_LINE);
        }
      }
 else {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
        }
 else {
          result.append(command);
          result.append(EclipseCommandLine.NEW_LINE);
          if (!isValueNull) {
            result.append(value);
            result.append(EclipseCommandLine.NEW_LINE);
          }
        }
      }
      result.append(property);
    }
    if (vmargs != null) {
      result.append(EclipseCommandLine.CMD_VMARGS);
      result.append(EclipseCommandLine.NEW_LINE);
      result.append(vmargs);
    }
  }
  System.setProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY,result.toString());
}","/** 
 * this creates or updates the org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY by adding or changing the command with value, except if value is null then the command shall be removed.
 * @param command the command to add or update or remove (if value is null) (usually starts with a -)
 * @param value the value of the command,if the value is null,will only update the commmand
 * @param delete the flag used to trigger delete or insert/update the command
 * @param isOption this flag used to trigger for the option command without any arguments.
 */
static public void updateOrCreateExitDataPropertyWithCommand(String command,String value,boolean delete,boolean isOption){
  boolean isValueNull=false;
  if (value == null || ""String_Node_Str"".equals(value)) {
    isValueNull=true;
  }
  StringBuffer result=new StringBuffer(512);
  String currentProperty=System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY);
  String patternStr=""String_Node_Str"";
  if (isOption) {
    patternStr=""String_Node_Str"";
  }
  if (currentProperty != null) {
    Pattern commandPattern=Pattern.compile(command + patternStr);
    Matcher restartMatcher=commandPattern.matcher(currentProperty);
    if (delete) {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(""String_Node_Str"");
      }
    }
 else {
      if (restartMatcher.find()) {
        if (isOption) {
        }
 else {
          currentProperty=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
        }
      }
 else {
        int indexOfVmArgs=currentProperty.indexOf(CMD_VMARGS);
        if (indexOfVmArgs >= 0) {
          currentProperty=currentProperty.substring(0,indexOfVmArgs) + command + EclipseCommandLine.NEW_LINE+ (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE)+ currentProperty.substring(indexOfVmArgs);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY + ""String_Node_Str""+ EclipseCommandLine.CMD_VMARGS);
        }
      }
    }
    result.append(currentProperty);
  }
 else {
    String property=System.getProperty(EclipseCommandLine.PROP_VM);
    result.append(property);
    result.append(EclipseCommandLine.NEW_LINE);
    String vmargs=System.getProperty(EclipseCommandLine.PROP_VMARGS);
    if (vmargs != null) {
      result.append(vmargs);
    }
    property=System.getProperty(EclipseCommandLine.PROP_COMMANDS);
    if (property == null) {
      if (value != null) {
        result.append(command);
        result.append(EclipseCommandLine.NEW_LINE);
        if (!isValueNull) {
          result.append(value);
          result.append(EclipseCommandLine.NEW_LINE);
        }
      }
    }
 else {
      Pattern commandPattern=Pattern.compile(command + patternStr);
      Matcher restartMatcher=commandPattern.matcher(property);
      if (delete) {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(EclipseCommandLine.NEW_LINE);
        }
      }
 else {
        if (restartMatcher.find()) {
          if (isOption) {
          }
 else {
            property=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
          }
        }
 else {
          result.append(command);
          result.append(EclipseCommandLine.NEW_LINE);
          if (!isValueNull) {
            result.append(value);
            result.append(EclipseCommandLine.NEW_LINE);
          }
        }
      }
      result.append(property);
    }
    if (vmargs != null) {
      result.append(EclipseCommandLine.CMD_VMARGS);
      result.append(EclipseCommandLine.NEW_LINE);
      result.append(vmargs);
    }
  }
  System.setProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY,result.toString());
}",0.9513952574348225
129064,"@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    CoreRepositoryPlugin.getDefault().setRCPMode();
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
      return IApplication.EXIT_RESTART;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}","@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    CoreRepositoryPlugin.getDefault().setRCPMode();
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      boolean devMode=Activator.getDefault().getBundle().getBundleContext().getProperty(""String_Node_Str"") != null;
      if (devMode) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}",0.963639685729947
129065,"public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else                     if (""String_Node_Str"".equals(type.getValue())) {
                      paramValue=type.getValue();
                    }
 else {
                      paramValue=tempVlaue;
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else                     if (""String_Node_Str"".equals(type.getValue())) {
                      paramValue=type.getValue();
                    }
 else {
                      paramValue=tempVlaue;
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}",0.67276529012023
129066,"public static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection){
  boolean hasSchemaInCatalog=false;
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
    }
  }
}","public static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection){
  boolean hasSchemaInCatalog=false;
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else   if (s == null && c == null && !isAccess) {
    fillCatalogAndSchemas(iMetadataConnection,connection);
    addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
    }
  }
}",0.2378504672897196
129067,"/** 
 * DOC cantoine. Method to return a Collection of Column description(metadata) for a DB connection.
 * @param DatabaseMetaData dbMetaData
 * @param MetadataTable medataTable
 * @return Collection of MetadataColumn Object
 * @deprecated
 */
public static List<TdColumn> extractMetadataColumnsFormTable(DatabaseMetaData dbMetaData,String medataLabel,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String originSchema=null;
    if (!""String_Node_Str"".equals(medataLabel) && medataLabel != null) {
      originSchema=tableSchemaMap.get(medataLabel);
    }
    if (!""String_Node_Str"".equals(metadataConnection.getSchema()) && (metadataConnection.getSchema() != null)) {
      originSchema=metadataConnection.getSchema();
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    try {
      ResultSet keys;
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,originSchema,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,originSchema,medataLabel,true,true);
        }
      }
 else {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,null,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,null,medataLabel,true,true);
        }
      }
      primaryKeys.clear();
      while (keys.next()) {
        primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
      }
      keys.close();
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
    Connection connection=dbMetaData.getConnection();
    checkUniqueKeyConstraint(medataLabel,primaryKeys,connection);
    String tableName=medataLabel;
    ResultSet columns;
    ResultSetMetaData resultMetadata=null;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        columns=dbMetaData.getColumns(null,originSchema,tableName,null);
      }
 else {
        columns=dbMetaData.getColumns(null,null,tableName,null);
      }
    }
    boolean isMYSQL=EDatabaseTypeName.MYSQL.getDisplayName().equals(metadataConnection.getDbType());
    if (isMYSQL) {
      Statement statement=connection.createStatement();
      String query=""String_Node_Str"" + tableName + ""String_Node_Str"";
      ResultSet resultSet=statement.executeQuery(query);
      resultMetadata=resultSet.getMetaData();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          columnSize=ExtractMetaDataUtils.getOracleIntMatadataInfo(columns,""String_Node_Str"");
        }
 else {
          if (isMYSQL) {
            columnSize=ExtractMetaDataUtils.getMysqlIntMetaDataInfo(resultMetadata,columnIndex);
          }
 else {
            columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
          }
        }
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str""+ ""String_Node_Str""+ medataLabel+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        metadataColumns.add(metadataColumn);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=(MetadataColumn)metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}","/** 
 * DOC cantoine. Method to return a Collection of Column description(metadata) for a DB connection.
 * @param DatabaseMetaData dbMetaData
 * @param MetadataTable medataTable
 * @return Collection of MetadataColumn Object
 * @deprecated
 */
@Deprecated public static List<TdColumn> extractMetadataColumnsFormTable(DatabaseMetaData dbMetaData,String medataLabel,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String originSchema=null;
    if (!""String_Node_Str"".equals(medataLabel) && medataLabel != null) {
      originSchema=tableSchemaMap.get(medataLabel);
    }
    if (!""String_Node_Str"".equals(metadataConnection.getSchema()) && (metadataConnection.getSchema() != null)) {
      originSchema=metadataConnection.getSchema();
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    try {
      ResultSet keys;
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,originSchema,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,originSchema,medataLabel,true,true);
        }
      }
 else {
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(null,null,medataLabel);
        }
 else {
          keys=dbMetaData.getIndexInfo(null,null,medataLabel,true,true);
        }
      }
      primaryKeys.clear();
      while (keys.next()) {
        primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
      }
      keys.close();
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
    Connection connection=dbMetaData.getConnection();
    checkUniqueKeyConstraint(medataLabel,primaryKeys,connection);
    String tableName=medataLabel;
    ResultSet columns;
    ResultSetMetaData resultMetadata=null;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      if (dbMetaData.supportsSchemasInDataManipulation() && (originSchema != null)) {
        columns=dbMetaData.getColumns(null,originSchema,tableName,null);
      }
 else {
        columns=dbMetaData.getColumns(null,null,tableName,null);
      }
    }
    boolean isMYSQL=EDatabaseTypeName.MYSQL.getDisplayName().equals(metadataConnection.getDbType());
    if (isMYSQL) {
      Statement statement=connection.createStatement();
      String query=""String_Node_Str"" + tableName + ""String_Node_Str"";
      ResultSet resultSet=statement.executeQuery(query);
      resultMetadata=resultSet.getMetaData();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          columnSize=ExtractMetaDataUtils.getOracleIntMatadataInfo(columns,""String_Node_Str"");
        }
 else {
          if (isMYSQL) {
            columnSize=ExtractMetaDataUtils.getMysqlIntMetaDataInfo(resultMetadata,columnIndex);
          }
 else {
            columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
          }
        }
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str""+ ""String_Node_Str""+ medataLabel+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        metadataColumns.add(metadataColumn);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + medataLabel + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}",0.9986792452830188
129068,"public static List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,TableNode tableNode,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String catalogName=null;
    String schemaName=null;
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      if (parent.getType() == TableNode.CATALOG) {
        catalogName=parent.getValue();
      }
 else       if (parent.getType() == TableNode.SCHEMA) {
        schemaName=parent.getValue();
        TableNode catalogNode=parent.getParent();
        if (catalogNode != null) {
          catalogName=catalogNode.getValue();
        }
      }
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    boolean isHive=MetadataConnectionUtils.isHive(dbMetaData);
    if (!isHive) {
      try {
        ResultSet keys;
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(catalogName,schemaName,tableNode.getValue());
        }
 else {
          keys=dbMetaData.getIndexInfo(catalogName,schemaName,tableNode.getValue(),true,true);
        }
        primaryKeys.clear();
        while (keys.next()) {
          primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
        }
        keys.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
      Connection connection=dbMetaData.getConnection();
      checkUniqueKeyConstraint(tableNode.getValue(),primaryKeys,connection);
    }
    String tableName=tableNode.getValue();
    ResultSet columns;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str""+ ""String_Node_Str""+ tableNode.getValue()+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
        metadataColumns.add(metadataColumn);
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=(MetadataColumn)metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}","public static List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,TableNode tableNode,IMetadataConnection metadataConnection,String databaseType){
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  HashMap<String,String> primaryKeys=new HashMap<String,String>();
  try {
    String catalogName=null;
    String schemaName=null;
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      if (parent.getType() == TableNode.CATALOG) {
        catalogName=parent.getValue();
      }
 else       if (parent.getType() == TableNode.SCHEMA) {
        schemaName=parent.getValue();
        TableNode catalogNode=parent.getParent();
        if (catalogNode != null) {
          catalogName=catalogNode.getValue();
        }
      }
    }
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    boolean isHive=MetadataConnectionUtils.isHive(dbMetaData);
    if (!isHive) {
      try {
        ResultSet keys;
        if (!isAccess) {
          keys=dbMetaData.getPrimaryKeys(catalogName,schemaName,tableNode.getValue());
        }
 else {
          keys=dbMetaData.getIndexInfo(catalogName,schemaName,tableNode.getValue(),true,true);
        }
        primaryKeys.clear();
        while (keys.next()) {
          primaryKeys.put(keys.getString(""String_Node_Str""),""String_Node_Str"");
        }
        keys.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
      Connection connection=dbMetaData.getConnection();
      checkUniqueKeyConstraint(tableNode.getValue(),primaryKeys,connection);
    }
    String tableName=tableNode.getValue();
    ResultSet columns;
    if (ExtractMetaDataUtils.isUseAllSynonyms()) {
      String sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      columns=stmt.executeQuery(sql);
    }
 else {
      columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    boolean isMSSQL=EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataConnection.getDbType());
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
 else {
            talendType=""String_Node_Str"";
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        if (!isAccess) {
          TDColumnAttributeHelper.addColumnAttribute(label,label2,dbType,columnSize,intMetaDataInfo,commentInfo,columns,metadataColumn,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (isMSSQL && ""String_Node_Str"".equals(dbType)) {
          Integer ident1=0;
          Integer ident2=0;
          try {
            PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str""+ ""String_Node_Str""+ tableNode.getValue()+ ""String_Node_Str"");
            ResultSet resultSet=null;
            ExtractMetaDataUtils.setQueryStatementTimeout(statement);
            if (statement.execute()) {
              resultSet=statement.getResultSet();
              while (resultSet.next()) {
                String st1=resultSet.getString(1);
                String st2=resultSet.getString(2);
                Integer valueOf1=Integer.valueOf(st1);
                if (valueOf1 != null) {
                  ident1=valueOf1;
                }
                Integer valueOf2=Integer.valueOf(st2);
                if (valueOf2 != null) {
                  ident2=valueOf2;
                }
              }
            }
            resultSet.close();
            statement.close();
          }
 catch (          Exception e) {
            log.error(e.toString());
          }
          metadataColumn.setLength(ident1);
          metadataColumn.setPrecision(ident2);
        }
 else {
          metadataColumn.setPrecision(intMetaDataInfo);
        }
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
          if (dbType.equals(""String_Node_Str"")) {
            metadataColumn.setLength(metadataColumn.getPrecision());
            metadataColumn.setPrecision(-1);
          }
        }
        metadataColumns.add(metadataColumn);
      }
    }
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(metadataConnection.getDbType())) {
      try {
        PreparedStatement statement=ExtractMetaDataUtils.conn.prepareStatement(""String_Node_Str"" + tableNode.getValue() + ""String_Node_Str"");
        ResultSet keys=null;
        ExtractMetaDataUtils.setQueryStatementTimeout(statement);
        if (statement.execute()) {
          keys=statement.getResultSet();
          int i=0;
          while (keys.next()) {
            MetadataColumn metadataColumn=metadataColumns.get(i++);
            metadataColumn.setComment(ManagementTextUtils.filterSpecialChar(keys.getString(""String_Node_Str"")));
          }
        }
        keys.close();
        statement.close();
      }
 catch (      Exception e) {
        log.error(e.toString());
      }
    }
    columns.close();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return metadataColumns;
}",0.9991504725496444
129069,"public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(catalogName);
  catalogAndSchema.add(""String_Node_Str"".equals(schemaName) ? null : schemaName);
  return catalogAndSchema;
}","public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(""String_Node_Str"".equals(catalogName) ? null : catalogName);
  catalogAndSchema.add((""String_Node_Str"".equals(schemaName) || ""String_Node_Str"".equals(schemaName)) ? null : schemaName);
  return catalogAndSchema;
}",0.9687785283914552
129070,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      resourceProperty.setDisplayName(lastVersionProperty.getDisplayName());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        previousVersionProperty.setDisplayName(lastVersionProperty.getDisplayName());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.9759905729857122
129071,"@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (this.repositoryFactoryFromProvider.isLocalConnectionProvider()) {
    this.repositoryFactoryFromProvider.renameFolderForLocal(type,path,label);
  }
 else {
    this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  }
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}","@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}",0.8552036199095022
129072,"@Override public void renameFolder(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            xmiResourceManager.moveResource(resource,path);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}","@Override public void renameFolder(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  try {
    if (isLocalConnectionProvider()) {
      renameFolderForLocal(type,sourcePath,label);
    }
 else {
      renameFolderExecute(type,sourcePath,label);
    }
  }
 catch (  UnsupportedOperationException e) {
    renameFolderExecute(type,sourcePath,label);
  }
}",0.0961974313774867
129073,"@Override public void renameFolderForLocal(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  IPath lastPath=sourcePath;
  if (sourcePath.lastSegment().equalsIgnoreCase(label)) {
    String tmpLabel=label.concat(this.getNextId());
    renameFolder(type,sourcePath,tmpLabel);
    lastPath=sourcePath.removeLastSegments(1).append(tmpLabel);
  }
  renameFolder(type,lastPath,label);
}","private void renameFolderForLocal(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  IPath lastPath=sourcePath;
  if (sourcePath.lastSegment().equalsIgnoreCase(label)) {
    String tmpLabel=label.concat(this.getNextId());
    renameFolderExecute(type,sourcePath,tmpLabel);
    lastPath=sourcePath.removeLastSegments(1).append(tmpLabel);
  }
  renameFolderExecute(type,lastPath,label);
}",0.960272417707151
129074,"private boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser;
  }
  return true;
}","private boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser || isLock;
  }
  return true;
}",0.9890590809628008
129075,"public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}","public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (state != null) {
            boolean haveLock=state.isLocked();
            if (haveLock) {
              isLock=true;
            }
          }
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}",0.9697661152310324
129076,"@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}","@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser && isLock) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}",0.9966442953020134
129077,"@Override public void dispose(){
  unlockObject();
  super.dispose();
}","@Override public void dispose(){
  if (!isLock) {
    unlockObject();
  }
  super.dispose();
}",0.8606060606060606
129078,"@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}","@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser && isLock) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}",0.9916666666666668
129079,"@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  try {
    IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    proxyRepositoryFactory.save(object.getProperty(),this.originaleObjectLabel,this.originalVersion);
    ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
    proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
      IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
      service.editJobName(originaleObjectLabel,object.getLabel());
    }
    return true;
  }
 catch (  PersistenceException e) {
    MessageBoxExceptionHandler.process(e);
    return false;
  }
}","@Override public boolean performFinish(){
  if (alreadyEditedByUser || isLock) {
    return false;
  }
  try {
    IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    proxyRepositoryFactory.save(object.getProperty(),this.originaleObjectLabel,this.originalVersion);
    ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
    proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
      IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
      service.editJobName(originaleObjectLabel,object.getLabel());
    }
    return true;
  }
 catch (  PersistenceException e) {
    MessageBoxExceptionHandler.process(e);
    return false;
  }
}",0.9943946188340808
129080,"@SuppressWarnings(""String_Node_Str"") public static IMetadataTable getTableByName(ConnectionItem item,String name){
  if (item == null || name == null) {
    return null;
  }
  final Connection connection=item.getConnection();
  if (connection != null) {
    final EList tables=MetadataToolHelper.getMetadataTableFromConnection(connection);
    if (tables != null && tables.size() > 0) {
      Object tableObject=tables.get(0);
      if (tableObject instanceof MetadataTable) {
        for (        MetadataTable table : (List<MetadataTable>)tables) {
          Object object=table.getProperties().get(""String_Node_Str"");
          if (object == null || (object != null && !object.equals(Boolean.TRUE.toString()))) {
            if (table.getLabel().equals(name)) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
                IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
                return mmService.convertMetadataTable(table);
              }
            }
          }
        }
      }
 else       if (tableObject instanceof EObjectContainmentEList) {
        EObjectContainmentEList eObjectContainmentEList=(EObjectContainmentEList)tableObject;
        for (        MetadataTable table : (List<MetadataTable>)eObjectContainmentEList) {
          Object object=table.getProperties().get(""String_Node_Str"");
          if (object == null || (object != null && !object.equals(Boolean.TRUE.toString()))) {
            if (table.getLabel().equals(name)) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
                IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
                return mmService.convertMetadataTable(table);
              }
            }
          }
        }
      }
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public static IMetadataTable getTableByName(ConnectionItem item,String name){
  if (item == null || name == null) {
    return null;
  }
  final Connection connection=item.getConnection();
  if (connection != null) {
    final EList tables=MetadataToolHelper.getMetadataTableFromConnection(connection);
    if (tables != null && tables.size() > 0) {
      Object tableObject=tables.get(0);
      if (tableObject instanceof MetadataTable) {
        for (        MetadataTable table : (List<MetadataTable>)tables) {
          if (table.getLabel().equals(name)) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
              IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
              return mmService.convertMetadataTable(table);
            }
          }
        }
      }
 else       if (tableObject instanceof EObjectContainmentEList) {
        EObjectContainmentEList eObjectContainmentEList=(EObjectContainmentEList)tableObject;
        for (        MetadataTable table : (List<MetadataTable>)eObjectContainmentEList) {
          if (table.getLabel().equals(name)) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
              IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
              return mmService.convertMetadataTable(table);
            }
          }
        }
      }
    }
  }
  return null;
}",0.4964807796426638
129081,"public static IRepositoryViewObject getRepositoryObjectById(final String id,boolean withDeleted){
  if (id == null || ""String_Node_Str"".equals(id) || RepositoryNode.NO_ID.equals(id)) {
    return null;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    IRepositoryViewObject lastVersion=factory.getLastVersion(id);
    if (lastVersion != null) {
      if (withDeleted) {
        return lastVersion;
      }
 else       if (factory.getStatus(lastVersion) != ERepositoryStatus.DELETED) {
        return lastVersion;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return null;
}","/** 
 * ggu Comment method ""getRepositoryObjectById"".
 * @param id
 * @return
 */
public static IRepositoryViewObject getRepositoryObjectById(final String id){
  if (id == null || ""String_Node_Str"".equals(id) || RepositoryNode.NO_ID.equals(id)) {
    return null;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    IRepositoryViewObject lastVersion=factory.getLastVersion(id);
    return lastVersion;
  }
 catch (  PersistenceException e) {
  }
  return null;
}",0.739093242087254
129082,"@SuppressWarnings(""String_Node_Str"") public static Query getQueryByName(ConnectionItem item,String name){
  if (item == null || name == null) {
    return null;
  }
  final Connection connection=item.getConnection();
  if (connection != null) {
    final QueriesConnection queryConn=connection.getQueries();
    if (queryConn != null) {
      final EList queries=queryConn.getQuery();
      if (queries != null) {
        for (        Query query : (List<Query>)queries) {
          Object object=query.getProperties().get(""String_Node_Str"");
          if (object == null || (object != null && !object.equals(Boolean.TRUE.toString()))) {
            if (query.getLabel().equals(name)) {
              return query;
            }
          }
        }
      }
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public static Query getQueryByName(ConnectionItem item,String name){
  if (item == null || name == null) {
    return null;
  }
  final Connection connection=item.getConnection();
  if (connection != null) {
    final QueriesConnection queryConn=connection.getQueries();
    if (queryConn != null) {
      final EList queries=queryConn.getQuery();
      if (queries != null) {
        for (        Query query : (List<Query>)queries) {
          if (query.getLabel().equals(name)) {
            return query;
          }
        }
      }
    }
  }
  return null;
}",0.7209805335255948
129083,"protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser;
  }
  return true;
}","protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser || isLock;
  }
  return true;
}",0.989106753812636
129084,"public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}","public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (state != null) {
            boolean haveLock=state.isLocked();
            if (haveLock) {
              isLock=true;
            }
          }
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}",0.9697661152310324
129085,"@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}","@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser && isLock) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}",0.9966666666666668
129086,"@Override public void dispose(){
  unlockObject();
  super.dispose();
}","@Override public void dispose(){
  if (!isLock) {
    unlockObject();
  }
  super.dispose();
}",0.8606060606060606
129087,"@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}","@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser && isLock) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}",0.9916666666666668
129088,"@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}","@Override public boolean performFinish(){
  if (alreadyEditedByUser || isLock) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}",0.9967447916666666
129089,"/** 
 * This handles model notifications by calling   {@link #updateChildren} to update any cachedchildren and by creating a viewer notification, which it passes to  {@link #fireNotifyChanged}. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void notifyChanged(Notification notification){
  updateChildren(notification);
  super.notifyChanged(notification);
}","/** 
 * This handles model notifications by calling   {@link #updateChildren} to update any cached children and by creatinga viewer notification, which it passes to  {@link #fireNotifyChanged}. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public void notifyChanged(Notification notification){
  updateChildren(notification);
  super.notifyChanged(notification);
}",0.9844961240310076
129090,"/** 
 * This returns the label text for the adapted class. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public String getText(Object object){
  String label=((Service)object).getId();
  return label == null || label.length() == 0 ? getString(""String_Node_Str"") : getString(""String_Node_Str"") + ""String_Node_Str"" + label;
}","/** 
 * This returns the label text for the adapted class. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public String getText(Object object){
  String label=((Service)object).getId();
  return label == null || label.length() == 0 ? getString(""String_Node_Str"") : getString(""String_Node_Str"") + ""String_Node_Str"" + label;
}",0.9855491329479767
129091,"/** 
 * This returns the property descriptors for the adapted class. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public List getPropertyDescriptors(Object object){
  if (itemPropertyDescriptors == null) {
    super.getPropertyDescriptors(object);
  }
  return itemPropertyDescriptors;
}","/** 
 * This returns the property descriptors for the adapted class. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public List getPropertyDescriptors(Object object){
  if (itemPropertyDescriptors == null) {
    super.getPropertyDescriptors(object);
  }
  return itemPropertyDescriptors;
}",0.9839228295819936
129092,"/** 
 * This returns Service.gif. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public Object getImage(Object object){
  return overlayImage(object,getResourceLocator().getImage(""String_Node_Str""));
}","/** 
 * This returns Service.gif. <!-- begin-user-doc --> <!-- end-user-doc -->
 */
@Override public Object getImage(Object object){
  return ImageDescriptor.createFromFile(ECoreImage.class,ECoreImage.SERVICES_ICON.getPath()).createImage();
}",0.6130434782608696
129093,"/** 
 * This adds   {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children that can be created under this object. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
protected void collectNewChildDescriptors(Collection newChildDescriptors,Object object){
  super.collectNewChildDescriptors(newChildDescriptors,object);
}","/** 
 * This adds   {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children that can be created under this object. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override protected void collectNewChildDescriptors(Collection newChildDescriptors,Object object){
  super.collectNewChildDescriptors(newChildDescriptors,object);
}",0.9861495844875346
129094,"protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser;
  }
  return true;
}","protected boolean isReadOnly(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    return !repositoryFactory.getStatus(object).isEditable() || alreadyEditedByUser || isLock;
  }
  return true;
}",0.989106753812636
129095,"public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}","public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (state != null) {
            boolean haveLock=state.isLocked();
            if (haveLock) {
              isLock=true;
            }
          }
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}",0.9697661152310324
129096,"@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}","@Override public void addPages(){
  mainPage=new PropertiesWizardPage(""String_Node_Str"",object.getProperty(),path,isReadOnly(),false,lastVersionFound){
    @Override public void createControl(    Composite parent){
      Composite container=new Composite(parent,SWT.NONE);
      GridLayout layout=new GridLayout(2,false);
      container.setLayout(layout);
      if (alreadyEditedByUser && isLock) {
        Label label=new Label(container,SWT.NONE);
        label.setForeground(ColorConstants.red);
        label.setText(Messages.getString(""String_Node_Str""));
        GridData gridData=new GridData();
        gridData.horizontalSpan=2;
        label.setLayoutData(gridData);
      }
      super.createControl(container);
      setControl(container);
      updateContent();
      addListeners();
      setPageComplete(false);
    }
    @Override protected void evaluateTextField(){
      super.evaluateTextField();
      if (nameStatus.getSeverity() == IStatus.OK) {
        ERepositoryObjectType type=getRepositoryObjectType();
        if (type == ERepositoryObjectType.PROCESS) {
          evaluateNameInRoutine();
        }
 else         if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.METADATA_FILE_RULES) {
          evaluateNameInJob();
        }
      }
    }
    @Override public ERepositoryObjectType getRepositoryObjectType(){
      return object.getRepositoryObjectType();
    }
  }
;
  addPage(mainPage);
  setWindowTitle(Messages.getString(""String_Node_Str""));
}",0.9966666666666668
129097,"@Override public void dispose(){
  unlockObject();
  super.dispose();
}","@Override public void dispose(){
  if (!isLock) {
    unlockObject();
  }
  super.dispose();
}",0.8606060606060606
129098,"@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}","@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  if (alreadyEditedByUser && isLock) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  super.createControl(container);
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}",0.9916666666666668
129099,"@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}","@Override public boolean performFinish(){
  if (alreadyEditedByUser || isLock) {
    return false;
  }
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    final IProgressMonitor monitor) throws CoreException {
      try {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        object.getProperty().setLabel(object.getProperty().getDisplayName());
        proxyRepositoryFactory.save(object.getProperty(),originaleObjectLabel,originalVersion);
        ExpressionPersistance.getInstance().jobNameChanged(originaleObjectLabel,object.getLabel());
        proxyRepositoryFactory.saveProject(ProjectManager.getInstance().getCurrentProject());
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
          IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
          service.editJobName(originaleObjectLabel,object.getLabel());
        }
      }
 catch (      PersistenceException pe) {
        throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",pe));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(runnable,schedulingRule,IWorkspace.AVOID_UPDATE,null);
    return true;
  }
 catch (  CoreException e) {
    MessageBoxExceptionHandler.process(e.getCause());
    return false;
  }
}",0.9967447916666666
129100,"/** 
 * zwang Comment method ""initializeUI"".
 * @param viewer
 */
private void initializeUI(){
  final ToolBar toolBar=new ToolBar(this,SWT.FLAT | SWT.NO_BACKGROUND);
  GridDataFactory.swtDefaults().align(SWT.RIGHT,SWT.TOP).applyTo(toolBar);
  createToolBar(toolBar);
  viewer=new TreeViewer(this,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  createColumnsAndCellEditors(tree,getContexts());
  tree.layout();
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  cellModifier=new ContextTableCellModifier(this,isRepositoryContext);
  viewer.setCellModifier(cellModifier);
  provider=new ContextViewerProvider();
  changeContextProvider();
  final TreeEditor treeEditor=new TreeEditor(viewer.getTree());
  valueChecker=new ContextValueErrorChecker(viewer);
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
    createTreeTooltip(tree);
  }
}","/** 
 * zwang Comment method ""initializeUI"".
 * @param viewer
 */
private void initializeUI(){
  final ToolBar toolBar=new ToolBar(this,SWT.FLAT | SWT.NO_BACKGROUND);
  GridDataFactory.swtDefaults().align(SWT.RIGHT,SWT.TOP).applyTo(toolBar);
  createToolBar(toolBar);
  viewer=new TreeViewer(this,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  createColumnsAndCellEditors(tree,getContexts());
  tree.layout();
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  cellModifier=new ContextTableCellModifier(this,isRepositoryContext);
  viewer.setCellModifier(cellModifier);
  provider=new ContextViewerProvider();
  changeContextProvider();
  final TreeEditor treeEditor=new TreeEditor(viewer.getTree());
  viewer.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (modelManager.isReadOnly()) {
        return;
      }
      Point pt=new Point(e.x,e.y);
      if (e.x > 0 && e.x < (viewer.getTree().getColumnCount()) * ContextTableValuesComposite.CONTEXT_COLUMN_WIDTH) {
        createEditorListener(treeEditor,e.x / CONTEXT_COLUMN_WIDTH);
      }
      TreeItem item=viewer.getTree().getItem(pt);
      if (cellEditor != null && !cellEditor.getControl().isDisposed()) {
        deactivateCellEditor(treeEditor,e.x / CONTEXT_COLUMN_WIDTH);
      }
      if (item != null && !item.isDisposed()) {
        Rectangle rect=item.getBounds(viewer.getTree().getColumnCount() - 1);
        if (e.x > 0 && e.x < (viewer.getTree().getColumnCount()) * ContextTableValuesComposite.CONTEXT_COLUMN_WIDTH) {
          handleSelect(item,viewer.getTree(),treeEditor,viewer.getTree().getColumnCount() - 1,e.x / CONTEXT_COLUMN_WIDTH);
        }
      }
    }
  }
);
  valueChecker=new ContextValueErrorChecker(viewer);
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
    createTreeTooltip(tree);
  }
}",0.6878504672897197
129101,"/** 
 * Looks up the context parameter value under the specified context.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private String lookupContextParameterValue(String sourceId,String contextParaName,int index){
  IContextParameter contextPara=lookupContextParameter(sourceId,contextParaName,index);
  if (contextPara != null)   return contextPara.getValue();
  return null;
}","/** 
 * Looks up the context parameter value under the specified context.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private String lookupContextParameterValue(String sourceId,String contextParaName,int index){
  IContextParameter contextPara=lookupContextParameter(sourceId,contextParaName,index);
  if (contextPara != null)   return ContextParameterUtils.checkAndHideValue(contextPara);
  return null;
}",0.9314420803782506
129102,"private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return contextPara.getValue();
        }
      }
    }
  }
  return text;
}","private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return ContextParameterUtils.checkAndHideValue(contextPara);
        }
      }
    }
  }
  return text;
}",0.9680170575692963
129103,"public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (state != null) {
            boolean haveLock=state.isLocked();
            if (haveLock) {
              isLock=true;
            }
          }
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}","public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}",0.9697661152310324
129104,"private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}","private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER)) {
        isLock=true;
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}",0.9437229437229436
129105,"public int compare(IContext o1,IContext o2){
  String name1=o1.getName().toUpperCase();
  String name2=o2.getName().toUpperCase();
  return name1.compareTo(name2);
}","@Override public int compare(IContext o1,IContext o2){
  String name1=o1.getName().toUpperCase();
  String name2=o2.getName().toUpperCase();
  return name1.compareTo(name2);
}",0.9705882352941176
129106,"/** 
 * zwang Comment method ""initializeUI"".
 * @param viewer
 */
private void initializeUI(){
  final ToolBar toolBar=new ToolBar(this,SWT.FLAT | SWT.NO_BACKGROUND);
  GridDataFactory.swtDefaults().align(SWT.RIGHT,SWT.TOP).applyTo(toolBar);
  createToolBar(toolBar);
  viewer=new TreeViewer(this,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  createColumnsAndCellEditors(tree,getContexts());
  tree.layout();
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  cellModifier=new ContextTableCellModifier(this,isRepositoryContext);
  viewer.setCellModifier(cellModifier);
  provider=new ContextViewerProvider();
  changeContextProvider();
  final TreeEditor treeEditor=new TreeEditor(viewer.getTree());
  valueChecker=new ContextValueErrorChecker(viewer);
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
    createTreeTooltip(tree);
  }
}","/** 
 * zwang Comment method ""initializeUI"".
 * @param viewer
 */
private void initializeUI(){
  final ToolBar toolBar=new ToolBar(this,SWT.FLAT | SWT.NO_BACKGROUND);
  GridDataFactory.swtDefaults().align(SWT.RIGHT,SWT.TOP).applyTo(toolBar);
  createToolBar(toolBar);
  viewer=new TreeViewer(this,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  createColumnsAndCellEditors(tree,getContexts());
  tree.layout();
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  cellModifier=new ContextTableCellModifier(this,isRepositoryContext);
  viewer.setCellModifier(cellModifier);
  provider=new ContextViewerProvider();
  changeContextProvider();
  final TreeEditor treeEditor=new TreeEditor(viewer.getTree());
  viewer.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (modelManager.isReadOnly()) {
        return;
      }
      Point pt=new Point(e.x,e.y);
      if (e.x > 0 && e.x < (viewer.getTree().getColumnCount()) * ContextTableValuesComposite.CONTEXT_COLUMN_WIDTH) {
        createEditorListener(treeEditor,e.x / CONTEXT_COLUMN_WIDTH);
      }
      TreeItem item=viewer.getTree().getItem(pt);
      if (cellEditor != null && !cellEditor.getControl().isDisposed()) {
        deactivateCellEditor(treeEditor,e.x / CONTEXT_COLUMN_WIDTH);
      }
      if (item != null && !item.isDisposed()) {
        Rectangle rect=item.getBounds(viewer.getTree().getColumnCount() - 1);
        if (e.x > 0 && e.x < (viewer.getTree().getColumnCount()) * ContextTableValuesComposite.CONTEXT_COLUMN_WIDTH) {
          handleSelect(item,viewer.getTree(),treeEditor,viewer.getTree().getColumnCount() - 1,e.x / CONTEXT_COLUMN_WIDTH);
        }
      }
    }
  }
);
  valueChecker=new ContextValueErrorChecker(viewer);
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
    createTreeTooltip(tree);
  }
}",0.6878504672897197
129107,"public IContextModelManager getContextModelManager(){
  return this.modelManager;
}","@Override public IContextModelManager getContextModelManager(){
  return this.modelManager;
}",0.9431818181818182
129108,"public void handleEvent(Event e){
  final TreeColumn column=(TreeColumn)e.widget;
  if (column == table.getSortColumn()) {
    direction=-direction;
  }
  if (direction == 1) {
    table.setSortDirection(SWT.UP);
  }
 else {
    table.setSortDirection(SWT.DOWN);
  }
  table.setSortColumn(column);
  viewer2.setSorter(new ViewerSorter(){
    int index=0;
    @Override public void sort(    Viewer viewer,    Object[] elements){
      boolean found=false;
      for (index=0; index < table.getColumns().length; index++) {
        if (table.getColumn(index) == table.getSortColumn()) {
          found=true;
          break;
        }
      }
      if (!found) {
        index=0;
      }
      super.sort(viewer,elements);
    }
    @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      ITableLabelProvider labelProvider=(ITableLabelProvider)viewer2.getLabelProvider();
      String columnText=labelProvider.getColumnText(e1,index) != null ? labelProvider.getColumnText(e1,index) : ""String_Node_Str"";
      String columnText2=labelProvider.getColumnText(e2,index) != null ? labelProvider.getColumnText(e2,index) : ""String_Node_Str"";
      return getComparator().compare(columnText,columnText2) * direction;
    }
  }
);
}","@Override public void handleEvent(Event e){
  final TreeColumn column=(TreeColumn)e.widget;
  if (column == table.getSortColumn()) {
    direction=-direction;
  }
  if (direction == 1) {
    table.setSortDirection(SWT.UP);
  }
 else {
    table.setSortDirection(SWT.DOWN);
  }
  table.setSortColumn(column);
  viewer2.setSorter(new ViewerSorter(){
    int index=0;
    @Override public void sort(    Viewer viewer,    Object[] elements){
      boolean found=false;
      for (index=0; index < table.getColumns().length; index++) {
        if (table.getColumn(index) == table.getSortColumn()) {
          found=true;
          break;
        }
      }
      if (!found) {
        index=0;
      }
      super.sort(viewer,elements);
    }
    @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      ITableLabelProvider labelProvider=(ITableLabelProvider)viewer2.getLabelProvider();
      String columnText=labelProvider.getColumnText(e1,index) != null ? labelProvider.getColumnText(e1,index) : ""String_Node_Str"";
      String columnText2=labelProvider.getColumnText(e2,index) != null ? labelProvider.getColumnText(e2,index) : ""String_Node_Str"";
      return getComparator().compare(columnText,columnText2) * direction;
    }
  }
);
}",0.9960095770151636
129109,"private void addSorter(final TreeViewer viewer2){
  final Tree table=viewer2.getTree();
  Listener sortListener=new Listener(){
    private int direction=1;
    public void handleEvent(    Event e){
      final TreeColumn column=(TreeColumn)e.widget;
      if (column == table.getSortColumn()) {
        direction=-direction;
      }
      if (direction == 1) {
        table.setSortDirection(SWT.UP);
      }
 else {
        table.setSortDirection(SWT.DOWN);
      }
      table.setSortColumn(column);
      viewer2.setSorter(new ViewerSorter(){
        int index=0;
        @Override public void sort(        Viewer viewer,        Object[] elements){
          boolean found=false;
          for (index=0; index < table.getColumns().length; index++) {
            if (table.getColumn(index) == table.getSortColumn()) {
              found=true;
              break;
            }
          }
          if (!found) {
            index=0;
          }
          super.sort(viewer,elements);
        }
        @Override public int compare(        Viewer viewer,        Object e1,        Object e2){
          ITableLabelProvider labelProvider=(ITableLabelProvider)viewer2.getLabelProvider();
          String columnText=labelProvider.getColumnText(e1,index) != null ? labelProvider.getColumnText(e1,index) : ""String_Node_Str"";
          String columnText2=labelProvider.getColumnText(e2,index) != null ? labelProvider.getColumnText(e2,index) : ""String_Node_Str"";
          return getComparator().compare(columnText,columnText2) * direction;
        }
      }
);
    }
  }
;
  table.getColumn(0).addListener(SWT.Selection,sortListener);
  if (getContexts().size() > 0) {
    for (int i=0; i < getContexts().size(); i++) {
      table.getColumn(i + 1).addListener(SWT.Selection,sortListener);
    }
  }
  table.setSortColumn(table.getColumn(0));
  table.setSortDirection(SWT.UP);
}","private void addSorter(final TreeViewer viewer2){
  final Tree table=viewer2.getTree();
  Listener sortListener=new Listener(){
    private int direction=1;
    @Override public void handleEvent(    Event e){
      final TreeColumn column=(TreeColumn)e.widget;
      if (column == table.getSortColumn()) {
        direction=-direction;
      }
      if (direction == 1) {
        table.setSortDirection(SWT.UP);
      }
 else {
        table.setSortDirection(SWT.DOWN);
      }
      table.setSortColumn(column);
      viewer2.setSorter(new ViewerSorter(){
        int index=0;
        @Override public void sort(        Viewer viewer,        Object[] elements){
          boolean found=false;
          for (index=0; index < table.getColumns().length; index++) {
            if (table.getColumn(index) == table.getSortColumn()) {
              found=true;
              break;
            }
          }
          if (!found) {
            index=0;
          }
          super.sort(viewer,elements);
        }
        @Override public int compare(        Viewer viewer,        Object e1,        Object e2){
          ITableLabelProvider labelProvider=(ITableLabelProvider)viewer2.getLabelProvider();
          String columnText=labelProvider.getColumnText(e1,index) != null ? labelProvider.getColumnText(e1,index) : ""String_Node_Str"";
          String columnText2=labelProvider.getColumnText(e2,index) != null ? labelProvider.getColumnText(e2,index) : ""String_Node_Str"";
          return getComparator().compare(columnText,columnText2) * direction;
        }
      }
);
    }
  }
;
  table.getColumn(0).addListener(SWT.Selection,sortListener);
  if (getContexts().size() > 0) {
    for (int i=0; i < getContexts().size(); i++) {
      table.getColumn(i + 1).addListener(SWT.Selection,sortListener);
    }
  }
  table.setSortColumn(table.getColumn(0));
  table.setSortDirection(SWT.UP);
}",0.9973432518597236
129110,"public void applyEditorValue(){
  editing=true;
}","@Override public void applyEditorValue(){
  editing=true;
}",0.9074074074074074
129111,"public void editorValueChanged(boolean oldValidState,boolean newValidState){
}","@Override public void editorValueChanged(boolean oldValidState,boolean newValidState){
}",0.9397590361445785
129112,"public void cancelEditor(){
  deactivateCellEditor(tableEditor,columnIndex);
}","@Override public void cancelEditor(){
  deactivateCellEditor(tableEditor,columnIndex);
}",0.9397590361445785
129113,"public TreeViewer getViewer(){
  return this.viewer;
}","@Override public TreeViewer getViewer(){
  return this.viewer;
}",0.9152542372881356
129114,"public boolean isGroupBySource(){
  boolean isRepositoryContext=false;
  if (modelManager != null) {
    isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  }
  boolean value=getPreferenceStore().getBoolean(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE);
  return value && !isRepositoryContext;
}","@Override public boolean isGroupBySource(){
  boolean isRepositoryContext=false;
  if (modelManager != null) {
    isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  }
  boolean value=getPreferenceStore().getBoolean(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE);
  return value && !isRepositoryContext;
}",0.9867021276595744
129115,"private ICellEditorListener createEditorListener(final TreeEditor tableEditor,final int columnIndex){
  editorListener=new ICellEditorListener(){
    public void cancelEditor(){
      deactivateCellEditor(tableEditor,columnIndex);
    }
    public void editorValueChanged(    boolean oldValidState,    boolean newValidState){
    }
    public void applyEditorValue(){
      editing=true;
    }
  }
;
  return editorListener;
}","private ICellEditorListener createEditorListener(final TreeEditor tableEditor,final int columnIndex){
  editorListener=new ICellEditorListener(){
    @Override public void cancelEditor(){
      deactivateCellEditor(tableEditor,columnIndex);
    }
    @Override public void editorValueChanged(    boolean oldValidState,    boolean newValidState){
    }
    @Override public void applyEditorValue(){
      editing=true;
    }
  }
;
  return editorListener;
}",0.9659863945578232
129116,"public Object getParent(Object element){
  if (element instanceof ContextTableTabChildModel) {
    ContextTableTabChildModel child=(ContextTableTabChildModel)element;
    return child.getParent();
  }
  return null;
}","@Override public Object getParent(Object element){
  if (element instanceof ContextTableTabChildModel) {
    ContextTableTabChildModel child=(ContextTableTabChildModel)element;
    return child.getParent();
  }
  return null;
}",0.9774774774774776
129117,"public boolean hasChildren(Object element){
  if (element instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)element;
    return parent.hasChildren();
  }
  return false;
}","@Override public boolean hasChildren(Object element){
  if (element instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)element;
    return parent.hasChildren();
  }
  return false;
}",0.9785407725321889
129118,"/** 
 * Looks up the context parameter value under the specified context.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private String lookupContextParameterValue(String sourceId,String contextParaName,int index){
  IContextParameter contextPara=lookupContextParameter(sourceId,contextParaName,index);
  if (contextPara != null)   return contextPara.getValue();
  return null;
}","/** 
 * Looks up the context parameter value under the specified context.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private String lookupContextParameterValue(String sourceId,String contextParaName,int index){
  IContextParameter contextPara=lookupContextParameter(sourceId,contextParaName,index);
  if (contextPara != null) {
    return ContextParameterUtils.checkAndHideValue(contextPara);
  }
  return null;
}",0.9016393442622952
129119,"/** 
 * @param name
 * @return
 */
private boolean hasSameNameContextParameters(String name){
  boolean has=false;
  IContextManager contextManager=parentModel.getContextModelManager().getContextManager();
  IContext context=contextManager.getDefaultContext();
  if (context instanceof JobContext) {
    JobContext jobContext=(JobContext)context;
    int size=jobContext.getSameNameContextParameterSize(name);
    if (size > 1)     has=true;
  }
  return has;
}","/** 
 * @param name
 * @return
 */
private boolean hasSameNameContextParameters(String name){
  boolean has=false;
  IContextManager contextManager=parentModel.getContextModelManager().getContextManager();
  IContext context=contextManager.getDefaultContext();
  if (context instanceof JobContext) {
    JobContext jobContext=(JobContext)context;
    int size=jobContext.getSameNameContextParameterSize(name);
    if (size > 1) {
      has=true;
    }
  }
  return has;
}",0.9892703862660944
129120,"public Color getForeground(Object element,int columnIndex){
  return null;
}","@Override public Color getForeground(Object element,int columnIndex){
  return null;
}",0.9382716049382716
129121,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)parentElement;
    return parent.getChildren().toArray();
  }
  return new Object[0];
}","@Override public Object[] getChildren(Object parentElement){
  if (parentElement instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)parentElement;
    return parent.getChildren().toArray();
  }
  return new Object[0];
}",0.9814814814814816
129122,"private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return contextPara.getValue();
        }
      }
    }
  }
  return text;
}","private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0) {
    return child.getContextParameter().getName();
  }
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return ContextParameterUtils.checkAndHideValue(contextPara);
        }
      }
    }
  }
  return text;
}",0.9639065817409768
129123,"@SuppressWarnings(""String_Node_Str"") public Object[] getElements(Object inputElement){
  List<IContextParameter> contexts=(List<IContextParameter>)inputElement;
  List<ContextTableTabParentModel> output=new ArrayList<ContextTableTabParentModel>();
  if (!contexts.isEmpty()) {
    for (    IContextParameter para : contexts) {
      String sourceId=para.getSource();
      if (IContextParameter.BUILT_IN.equals(sourceId)) {
        handleBuiltInNode(para,output);
      }
 else {
        handleNonBuiltInNode(para,output);
      }
    }
  }
  return output.toArray();
}","@Override @SuppressWarnings(""String_Node_Str"") public Object[] getElements(Object inputElement){
  List<IContextParameter> contexts=(List<IContextParameter>)inputElement;
  List<ContextTableTabParentModel> output=new ArrayList<ContextTableTabParentModel>();
  if (!contexts.isEmpty()) {
    for (    IContextParameter para : contexts) {
      String sourceId=para.getSource();
      if (IContextParameter.BUILT_IN.equals(sourceId)) {
        handleBuiltInNode(para,output);
      }
 else {
        handleNonBuiltInNode(para,output);
      }
    }
  }
  return output.toArray();
}",0.9912891986062716
129124,"public String getColumnText(Object element,int columnIndex){
  if (element instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)element;
    return getColumnTextForParent(parent,columnIndex);
  }
 else   if (element instanceof ContextTableTabChildModel) {
    ContextTableTabChildModel child=(ContextTableTabChildModel)element;
    return getColumnTextForChild(child,columnIndex);
  }
  return ""String_Node_Str"";
}","@Override public String getColumnText(Object element,int columnIndex){
  if (element instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)element;
    return getColumnTextForParent(parent,columnIndex);
  }
 else   if (element instanceof ContextTableTabChildModel) {
    ContextTableTabChildModel child=(ContextTableTabChildModel)element;
    return getColumnTextForChild(child,columnIndex);
  }
  return ""String_Node_Str"";
}",0.9894291754756872
129125,"private String getColumnTextForParent(ContextTableTabParentModel parent,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=parent.getSourceId();
  if (columnIndex == 0) {
    if (IContextParameter.BUILT_IN.equals(sourceId)) {
      return parent.getContextParameter().getName();
    }
 else {
      return parent.getSourceName();
    }
  }
 else {
    if (IContextParameter.BUILT_IN.equals(sourceId)) {
      String contextParaName=parent.getContextParameter().getName();
      return lookupContextParameterValue(sourceId,contextParaName,columnIndex - 1);
    }
 else {
      List<ContextTabChildModel> children=parent.getChildren();
      StringBuffer sb=new StringBuffer();
      if (children != null && children.size() > 0) {
        for (        ContextTabChildModel child : children) {
          IContextParameter contextPara=child.getContextParameter();
          String paraName=contextPara.getName();
          String childSourceId=contextPara.getSource();
          IContextParameter foundContextPara=lookupContextParameter(childSourceId,paraName,columnIndex - 1);
          if (foundContextPara != null) {
            String value=foundContextPara.getValue();
            if (ContextConstant.NULL_STRING.equals(value))             sb.append(""String_Node_Str"" + ""String_Node_Str"");
 else             sb.append(ContextParameterUtils.checkAndHideValue(foundContextPara) + ""String_Node_Str"");
          }
        }
        if (sb.toString().lastIndexOf(""String_Node_Str"") != -1)         return sb.toString().substring(0,sb.toString().lastIndexOf(""String_Node_Str""));
 else         return sb.toString();
      }
    }
  }
  return text;
}","private String getColumnTextForParent(ContextTableTabParentModel parent,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=parent.getSourceId();
  if (columnIndex == 0) {
    if (IContextParameter.BUILT_IN.equals(sourceId)) {
      return parent.getContextParameter().getName();
    }
 else {
      return parent.getSourceName();
    }
  }
 else {
    if (IContextParameter.BUILT_IN.equals(sourceId)) {
      String contextParaName=parent.getContextParameter().getName();
      return lookupContextParameterValue(sourceId,contextParaName,columnIndex - 1);
    }
 else {
      List<ContextTabChildModel> children=parent.getChildren();
      StringBuffer sb=new StringBuffer();
      if (children != null && children.size() > 0) {
        for (        ContextTabChildModel child : children) {
          IContextParameter contextPara=child.getContextParameter();
          String paraName=contextPara.getName();
          String childSourceId=contextPara.getSource();
          IContextParameter foundContextPara=lookupContextParameter(childSourceId,paraName,columnIndex - 1);
          if (foundContextPara != null) {
            String value=foundContextPara.getValue();
            if (ContextConstant.NULL_STRING.equals(value)) {
              sb.append(""String_Node_Str"" + ""String_Node_Str"");
            }
 else {
              sb.append(ContextParameterUtils.checkAndHideValue(foundContextPara) + ""String_Node_Str"");
            }
          }
        }
        if (sb.toString().lastIndexOf(""String_Node_Str"") != -1) {
          return sb.toString().substring(0,sb.toString().lastIndexOf(""String_Node_Str""));
        }
 else {
          return sb.toString();
        }
      }
    }
  }
  return text;
}",0.9763733018310692
129126,"public Color getBackground(Object element,int columnIndex){
  if (element instanceof ContextTableTabChildModel) {
    ContextTableTabChildModel child=(ContextTableTabChildModel)element;
    IContextParameter contextPara=child.getContextParameter();
    String name=contextPara.getName();
    if (hasSameNameContextParameters(name))     return Display.getDefault().getSystemColor(SWT.COLOR_RED);
  }
 else   if (element instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)element;
    IContextParameter contextPara=parent.getContextParameter();
    if (contextPara != null) {
      String name=parent.getContextParameter().getName();
      if (hasSameNameContextParameters(name))       return Display.getDefault().getSystemColor(SWT.COLOR_RED);
    }
  }
  return null;
}","@Override public Color getBackground(Object element,int columnIndex){
  if (element instanceof ContextTableTabChildModel) {
    ContextTableTabChildModel child=(ContextTableTabChildModel)element;
    IContextParameter contextPara=child.getContextParameter();
    String name=contextPara.getName();
    if (hasSameNameContextParameters(name)) {
      return Display.getDefault().getSystemColor(SWT.COLOR_RED);
    }
  }
 else   if (element instanceof ContextTableTabParentModel) {
    ContextTableTabParentModel parent=(ContextTableTabParentModel)element;
    IContextParameter contextPara=parent.getContextParameter();
    if (contextPara != null) {
      String name=parent.getContextParameter().getName();
      if (hasSameNameContextParameters(name)) {
        return Display.getDefault().getSystemColor(SWT.COLOR_RED);
      }
    }
  }
  return null;
}",0.980975029726516
129127,"private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.983881864684876
129128,"@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    List<String> listExistingObjects=service.getProxyRepositoryFactory().getFolders(type);
    for (    String existName : listExistingObjects) {
      if (existName.equalsIgnoreCase(label)) {
        return false;
      }
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}",0.8486842105263158
129129,"public static void replaceInFile(String regex,String fileName,String replacement) throws IOException {
  InputStream in=new FileInputStream(fileName);
  StringBuffer buffer=new StringBuffer();
  try {
    InputStreamReader inR=new InputStreamReader(in);
    BufferedReader buf=new BufferedReader(inR);
    String line;
    while ((line=buf.readLine()) != null) {
      buffer.append(line.replaceAll(regex,replacement)).append(""String_Node_Str"");
    }
  }
  finally {
    in.close();
  }
  OutputStream os=new FileOutputStream(fileName);
  os.write(buffer.toString().getBytes());
  os.close();
}","public static void replaceInFile(String regex,String fileName,String replacement) throws IOException {
  InputStream in=new FileInputStream(fileName);
  StringBuffer buffer=new StringBuffer();
  try {
    InputStreamReader inR=new InputStreamReader(in);
    BufferedReader buf=new BufferedReader(inR);
    String line;
    while ((line=buf.readLine()) != null) {
      buffer.append(StringUtils.replace(line,regex,replacement)).append(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
 finally {
    in.close();
  }
  OutputStream os=new FileOutputStream(fileName);
  os.write(buffer.toString().getBytes());
  os.close();
}",0.9278846153846154
129130,"/** 
 * This handles model notifications by calling   {@link #updateChildren} to update any cachedchildren and by creating a viewer notification, which it passes to  {@link #fireNotifyChanged}. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void notifyChanged(Notification notification){
  updateChildren(notification);
  super.notifyChanged(notification);
}","/** 
 * This handles model notifications by calling   {@link #updateChildren} to update any cached children and by creatinga viewer notification, which it passes to  {@link #fireNotifyChanged}. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void notifyChanged(Notification notification){
  updateChildren(notification);
  super.notifyChanged(notification);
}",0.9973821989528796
129131,"/** 
 * This returns Service.gif. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public Object getImage(Object object){
  return overlayImage(object,getResourceLocator().getImage(""String_Node_Str""));
}","/** 
 * This returns Service.gif. <!-- begin-user-doc --> <!-- end-user-doc -->
 */
public Object getImage(Object object){
  return ImageDescriptor.createFromFile(ECoreImage.class,ECoreImage.SERVICES_ICON.getPath()).createImage();
}",0.6311111111111111
129132,"public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (state != null) {
            boolean haveLock=state.isLocked();
            if (haveLock) {
              isLock=true;
            }
          }
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}","public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}",0.9697661152310324
129133,"private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}","private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER)) {
        isLock=true;
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}",0.9437229437229436
129134,"@Override public void renameFolder(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (        Item children2 : childrens) {
          if (children2 instanceof FolderItem) {
            FolderItem children=(FolderItem)children2;
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,children2);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            xmiResourceManager.moveResource(resource,path);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}","@Override public void renameFolder(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  try {
    if (isLocalConnectionProvider()) {
      renameFolderForLocal(type,sourcePath,label);
    }
 else {
      renameFolderExecute(type,sourcePath,label);
    }
  }
 catch (  UnsupportedOperationException e) {
    renameFolderExecute(type,sourcePath,label);
  }
}",0.0961974313774867
129135,"@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    List<String> listExistingObjects=service.getProxyRepositoryFactory().getFolders(type);
    for (    String existName : listExistingObjects) {
      if (existName.equalsIgnoreCase(label)) {
        return false;
      }
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}",0.8486842105263158
129136,"public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  for (  Object o : processType.getNode()) {
    if (o instanceof NodeType) {
      NodeType currentNode=(NodeType)o;
      if (""String_Node_Str"".equals(currentNode.getComponentName())) {
        String jobIdStr=null;
        String jobVersion=LATEST_VERSION;
        String nowVersion=""String_Node_Str"";
        Set<String> jobIdSet=new HashSet<String>();
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              String jobIds=param.getValue();
              String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
              for (              String jobId : jobsArr) {
                if (StringUtils.isNotEmpty(jobId)) {
                  jobIdSet.add(jobId);
                }
                jobIdStr=jobId;
              }
            }
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              jobVersion=param.getValue();
              if (jobVersion.equals(LATEST_VERSION)) {
                if (!versions.isEmpty()) {
                  nowVersion=versions.get(jobIdStr);
                  param.setValue(nowVersion);
                }
              }
            }
          }
        }
        for (        String jobId : jobIdSet) {
          addRelationShip(item,jobId,nowVersion,JOB_RELATION);
          factory.save(project,item);
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}","public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobIdStr=null;
          String jobVersion=LATEST_VERSION;
          String nowVersion=""String_Node_Str"";
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                  jobIdStr=jobId;
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
                if (jobVersion.equals(LATEST_VERSION)) {
                  if (!versions.isEmpty()) {
                    nowVersion=versions.get(jobIdStr);
                    param.setValue(nowVersion);
                  }
                }
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,nowVersion,JOB_RELATION);
            factory.save(project,item);
          }
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}",0.9531584062196308
129137,"public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (state != null) {
            boolean haveLock=state.isLocked();
            if (haveLock) {
              isLock=true;
            }
          }
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}","public PropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super();
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EImage.PROPERTIES_WIZ));
  if (repositoryViewObject != null && repositoryViewObject.getProperty() != null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
    Property property=object.getProperty();
    Item item=property.getItem();
    if (property.eResource() == null || item != null && item.eContainer() == null) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
        IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
        IProxyRepositoryFactory factory=service.getProxyRepositoryFactory();
        try {
          ItemState state=item.getState();
          if (useLastVersion) {
            if (state != null && state.getPath() != null) {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType());
              lastVersionFound=this.object.getVersion();
            }
 else {
              this.object=(IRepositoryObject)factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId());
              lastVersionFound=this.object.getVersion();
            }
          }
 else {
            if (state != null && state.getPath() != null) {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId(),state.getPath(),object.getRepositoryObjectType()).getVersion();
            }
 else {
              this.lastVersionFound=factory.getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getVersion();
            }
            this.object.setProperty(factory.getUptodateProperty(property));
          }
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  if (this.object == null) {
    this.object=new RepositoryObject(repositoryViewObject.getProperty());
  }
  this.originaleObjectLabel=this.object.getLabel();
  this.originalVersion=this.object.getVersion();
  this.originalDescription=this.object.getDescription();
  this.originalPurpose=this.object.getPurpose();
  this.originalStatus=this.object.getStatusCode();
  this.path=path;
  lockObject();
}",0.9697661152310324
129138,"private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}","private void lockObject(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
    try {
      boolean isOpened=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
        ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
        isOpened=coreService.isOpenedItemInEditor(object);
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER)) {
        isLock=true;
      }
      if (repositoryFactory.getStatus(object).equals(ERepositoryStatus.LOCK_BY_USER) && isOpened) {
        alreadyEditedByUser=true;
      }
 else {
        repositoryFactory.lock(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    BusinessException e) {
    }
  }
}",0.9437229437229436
129139,"/** 
 * This handles model notifications by calling   {@link #updateChildren} to update any cachedchildren and by creating a viewer notification, which it passes to  {@link #fireNotifyChanged}. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void notifyChanged(Notification notification){
  updateChildren(notification);
  super.notifyChanged(notification);
}","/** 
 * This handles model notifications by calling   {@link #updateChildren} to update any cached children and by creatinga viewer notification, which it passes to  {@link #fireNotifyChanged}. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void notifyChanged(Notification notification){
  updateChildren(notification);
  super.notifyChanged(notification);
}",0.9973821989528796
129140,"/** 
 * This returns Service.gif. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public Object getImage(Object object){
  return overlayImage(object,getResourceLocator().getImage(""String_Node_Str""));
}","/** 
 * This returns Service.gif. <!-- begin-user-doc --> <!-- end-user-doc -->
 */
public Object getImage(Object object){
  return ImageDescriptor.createFromFile(ECoreImage.class,ECoreImage.SERVICES_ICON.getPath()).createImage();
}",0.6311111111111111
129141,"private void renameFolderForLocal(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  IPath lastPath=sourcePath;
  if (sourcePath.lastSegment().equalsIgnoreCase(label)) {
    String tmpLabel=label.concat(this.getNextId());
    renameFolder(type,sourcePath,tmpLabel);
    lastPath=sourcePath.removeLastSegments(1).append(tmpLabel);
  }
  renameFolder(type,lastPath,label);
}","private void renameFolderForLocal(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  IPath lastPath=sourcePath;
  if (sourcePath.lastSegment().equalsIgnoreCase(label)) {
    String tmpLabel=label.concat(this.getNextId());
    renameFolderExecute(type,sourcePath,tmpLabel);
    lastPath=sourcePath.removeLastSegments(1).append(tmpLabel);
  }
  renameFolderExecute(type,lastPath,label);
}",0.9839449541284404
129142,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  RepositoryNode node=(RepositoryNode)selection.getFirstElement();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  this.sourceNode=node;
  this.selection=selection;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    canWork=false;
  }
  if (selection != null) {
    if (((StructuredSelection)selection).toArray().length > 1) {
      canWork=false;
    }
 else     if (((StructuredSelection)selection).toArray().length == 1) {
      Object obj=((StructuredSelection)selection).toList().get(0);
      if (canWork) {
        RepositoryNode sourceNode=(RepositoryNode)obj;
        if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
          canWork=false;
        }
 else         if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC) {
          canWork=false;
        }
 else         if (node.getContentType() == ERepositoryObjectType.JOBS || node.getContentType() == ERepositoryObjectType.JOBLETS || node.getContentType() == ERepositoryObjectType.GENERATED || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC) {
          canWork=false;
        }
 else         if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_CDC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_QUERY || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_TABLE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_VIEW || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_SYNONYM || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SAP_FUNCTION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SAP_IDOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.MDM_CONCEPT || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT) {
          canWork=false;
        }
      }
    }
  }
 else {
    canWork=false;
  }
  setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  RepositoryNode node=(RepositoryNode)selection.getFirstElement();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  this.sourceNode=node;
  this.selection=selection;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    canWork=false;
  }
  if (selection != null) {
    if (((StructuredSelection)selection).toArray().length > 1) {
      canWork=false;
    }
 else     if (((StructuredSelection)selection).toArray().length == 1) {
      Object obj=((StructuredSelection)selection).toList().get(0);
      if (canWork) {
        RepositoryNode sourceNode=(RepositoryNode)obj;
        if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
          canWork=false;
        }
 else         if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC) {
          canWork=false;
        }
 else         if (node.getContentType() == ERepositoryObjectType.JOBS || node.getContentType() == ERepositoryObjectType.JOBLETS || node.getContentType() == ERepositoryObjectType.GENERATED || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC) {
          canWork=false;
        }
 else         if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_CDC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_QUERY || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_TABLE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_VIEW || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_SYNONYM || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SAP_FUNCTION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SAP_IDOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.MDM_CONCEPT || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT) {
          canWork=false;
        }
      }
    }
  }
 else {
    canWork=false;
  }
  setEnabled(canWork);
}",0.9981350242446848
129143,"private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.983881864684876
129144,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.9866666666666668
129145,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    label=copy.getProperty().getLabel();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  copy.getProperty().setLabel(newJobName);
                  copy.getProperty().setDisplayName(newJobName);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  factory.save(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    label=copy.getProperty().getLabel();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  copy.getProperty().setLabel(newJobName);
                  copy.getProperty().setDisplayName(newJobName);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  factory.save(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9975627589568608
129146,"@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getLabel();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    public String isValid(    String newText){
      return validJobName(newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
}","@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getLabel();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    @Override public String isValid(    String newText){
      return validJobName(newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
}",0.9964838255977496
129147,"private void addExtensionRepositoryNodes(List<ERepositoryObjectType> arraysList){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (int i=0; i < configurationElements.length; i++) {
    IConfigurationElement element=configurationElements[i];
    String type=element.getAttribute(""String_Node_Str"");
    ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
    if (repositoryNodeType != null) {
      arraysList.add(repositoryNodeType);
    }
  }
}","private void addExtensionRepositoryNodes(List<ERepositoryObjectType> arraysList){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (  IConfigurationElement element : configurationElements) {
    String type=element.getAttribute(""String_Node_Str"");
    ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
    if (repositoryNodeType != null) {
      arraysList.add(repositoryNodeType);
    }
  }
}",0.9124270225187656
129148,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9956369982547992
129149,"public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  for (  Object o : processType.getNode()) {
    if (o instanceof NodeType) {
      NodeType currentNode=(NodeType)o;
      if (""String_Node_Str"".equals(currentNode.getComponentName())) {
        String jobIdStr=null;
        String jobVersion=LATEST_VERSION;
        String nowVersion=""String_Node_Str"";
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              String jobIds=param.getValue();
              String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
              for (              String jobId : jobsArr) {
                if (StringUtils.isNotEmpty(jobId)) {
                  addRelationShip(item,jobId,nowVersion,JOB_RELATION);
                  factory.save(project,item);
                }
                jobIdStr=jobId;
              }
            }
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              jobVersion=param.getValue();
              if (jobVersion.equals(LATEST_VERSION)) {
                if (!versions.isEmpty()) {
                  nowVersion=versions.get(jobIdStr);
                  param.setValue(nowVersion);
                }
              }
            }
          }
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}","public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobIdStr=null;
          String jobVersion=LATEST_VERSION;
          String nowVersion=""String_Node_Str"";
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    addRelationShip(item,jobId,nowVersion,JOB_RELATION);
                    factory.save(project,item);
                  }
                  jobIdStr=jobId;
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
                if (jobVersion.equals(LATEST_VERSION)) {
                  if (!versions.isEmpty()) {
                    nowVersion=versions.get(jobIdStr);
                    param.setValue(nowVersion);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}",0.9759704251386322
129150,"public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null)           addRelationShip(item,property.getId(),version,JOBLET_RELATION);
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}","public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null) {
            addRelationShip(item,property.getId(),version,JOBLET_RELATION);
          }
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}",0.999169521436728
129151,"public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  for (  Object o : processType.getNode()) {
    if (o instanceof NodeType) {
      NodeType currentNode=(NodeType)o;
      if (""String_Node_Str"".equals(currentNode.getComponentName())) {
        String jobIdStr=null;
        String jobVersion=LATEST_VERSION;
        String nowVersion=""String_Node_Str"";
        Set<String> jobIdSet=new HashSet<String>();
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              String jobIds=param.getValue();
              String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
              for (              String jobId : jobsArr) {
                if (StringUtils.isNotEmpty(jobId)) {
                  jobIdSet.add(jobId);
                }
                jobIdStr=jobId;
              }
            }
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              jobVersion=param.getValue();
              if (jobVersion.equals(LATEST_VERSION)) {
                if (!versions.isEmpty()) {
                  nowVersion=versions.get(jobIdStr);
                  param.setValue(nowVersion);
                }
              }
            }
          }
        }
        for (        String jobId : jobIdSet) {
          addRelationShip(item,jobId,nowVersion,JOB_RELATION);
          factory.save(project,item);
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}","public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobIdStr=null;
          String jobVersion=LATEST_VERSION;
          String nowVersion=""String_Node_Str"";
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                  jobIdStr=jobId;
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
                if (jobVersion.equals(LATEST_VERSION)) {
                  if (!versions.isEmpty()) {
                    nowVersion=versions.get(jobIdStr);
                    param.setValue(nowVersion);
                  }
                }
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,nowVersion,JOB_RELATION);
            factory.save(project,item);
          }
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}",0.9531584062196308
129152,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Relation other=(Relation)obj;
  if (id == null) {
    if (other.id != null)     return false;
  }
 else   if (!id.equals(other.id))   return false;
  if (type == null) {
    if (other.type != null)     return false;
  }
 else   if (!type.equals(other.type))   return false;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  Relation other=(Relation)obj;
  if (id == null) {
    if (other.id != null) {
      return false;
    }
  }
 else   if (!id.equals(other.id)) {
    return false;
  }
  if (type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!type.equals(other.type)) {
    return false;
  }
  if (version == null) {
    if (other.version != null) {
      return false;
    }
  }
 else   if (!version.equals(other.version)) {
    return false;
  }
  return true;
}",0.6913385826771653
129153,"protected Object clone() throws CloneNotSupportedException {
  return super.clone();
}","@Override protected Object clone() throws CloneNotSupportedException {
  return super.clone();
}",0.945054945054945
129154,"/** 
 * zwang Comment method ""initializeUI"".
 * @param viewer
 */
private void initializeUI(){
  final ToolBar toolBar=new ToolBar(this,SWT.FLAT | SWT.NO_BACKGROUND);
  GridDataFactory.swtDefaults().align(SWT.RIGHT,SWT.TOP).applyTo(toolBar);
  createToolBar(toolBar);
  viewer=new TreeViewer(this,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  createColumnsAndCellEditors(tree,getContexts());
  tree.layout();
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  cellModifier=new ContextTableCellModifier(this,isRepositoryContext);
  viewer.setCellModifier(cellModifier);
  provider=new ContextViewerProvider();
  changeContextProvider();
  final TreeEditor treeEditor=new TreeEditor(viewer.getTree());
  valueChecker=new ContextValueErrorChecker(viewer);
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
    createTreeTooltip(tree);
  }
}","/** 
 * zwang Comment method ""initializeUI"".
 * @param viewer
 */
private void initializeUI(){
  final ToolBar toolBar=new ToolBar(this,SWT.FLAT | SWT.NO_BACKGROUND);
  GridDataFactory.swtDefaults().align(SWT.RIGHT,SWT.TOP).applyTo(toolBar);
  createToolBar(toolBar);
  viewer=new TreeViewer(this,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  createColumnsAndCellEditors(tree,getContexts());
  tree.layout();
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  cellModifier=new ContextTableCellModifier(this,isRepositoryContext);
  viewer.setCellModifier(cellModifier);
  provider=new ContextViewerProvider();
  changeContextProvider();
  final TreeEditor treeEditor=new TreeEditor(viewer.getTree());
  viewer.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (modelManager.isReadOnly()) {
        return;
      }
      Point pt=new Point(e.x,e.y);
      if (e.x > 0 && e.x < (viewer.getTree().getColumnCount()) * ContextTableValuesComposite.CONTEXT_COLUMN_WIDTH) {
        createEditorListener(treeEditor,e.x / CONTEXT_COLUMN_WIDTH);
      }
      TreeItem item=viewer.getTree().getItem(pt);
      if (cellEditor != null && !cellEditor.getControl().isDisposed()) {
        deactivateCellEditor(treeEditor,e.x / CONTEXT_COLUMN_WIDTH);
      }
      if (item != null && !item.isDisposed()) {
        Rectangle rect=item.getBounds(viewer.getTree().getColumnCount() - 1);
        if (e.x > 0 && e.x < (viewer.getTree().getColumnCount()) * ContextTableValuesComposite.CONTEXT_COLUMN_WIDTH) {
          handleSelect(item,viewer.getTree(),treeEditor,viewer.getTree().getColumnCount() - 1,e.x / CONTEXT_COLUMN_WIDTH);
        }
      }
    }
  }
);
  valueChecker=new ContextValueErrorChecker(viewer);
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
    createTreeTooltip(tree);
  }
}",0.6878504672897197
129155,"/** 
 * Looks up the context parameter value under the specified context.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private String lookupContextParameterValue(String sourceId,String contextParaName,int index){
  IContextParameter contextPara=lookupContextParameter(sourceId,contextParaName,index);
  if (contextPara != null)   return contextPara.getValue();
  return null;
}","/** 
 * Looks up the context parameter value under the specified context.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private String lookupContextParameterValue(String sourceId,String contextParaName,int index){
  IContextParameter contextPara=lookupContextParameter(sourceId,contextParaName,index);
  if (contextPara != null)   return ContextParameterUtils.checkAndHideValue(contextPara);
  return null;
}",0.9314420803782506
129156,"private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return contextPara.getValue();
        }
      }
    }
  }
  return text;
}","private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return ContextParameterUtils.checkAndHideValue(contextPara);
        }
      }
    }
  }
  return text;
}",0.9680170575692963
129157,"protected void retrieveItemTables(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters,List<String> itemTablesName) throws SQLException {
  Set<String> nameFiters=tableInfoParameters.getNameFilters();
  if (nameFiters.isEmpty()) {
    itemTablesName=getTableNamesFromTablesForMultiSchema(tableInfoParameters,""String_Node_Str"",metadataConnection);
  }
 else {
    for (    String s : nameFiters) {
      List<String> tableNamesFromTables=getTableNamesFromTablesForMultiSchema(tableInfoParameters,s,metadataConnection);
      for (      String string : tableNamesFromTables) {
        if (!itemTablesName.contains(string)) {
          itemTablesName.add(string);
        }
      }
    }
  }
}","protected List<String> retrieveItemTables(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters,List<String> itemTablesName) throws SQLException {
  Set<String> nameFiters=tableInfoParameters.getNameFilters();
  if (nameFiters.isEmpty()) {
    itemTablesName=getTableNamesFromTablesForMultiSchema(tableInfoParameters,""String_Node_Str"",metadataConnection);
  }
 else {
    for (    String s : nameFiters) {
      List<String> tableNamesFromTables=getTableNamesFromTablesForMultiSchema(tableInfoParameters,s,metadataConnection);
      for (      String string : tableNamesFromTables) {
        if (!itemTablesName.contains(string)) {
          itemTablesName.add(string);
        }
      }
    }
  }
  return itemTablesName;
}",0.9720136518771332
129158,"/** 
 * DOC ggu Comment method ""returnTablesFormConnection"". work for @see ExtractMetaDataFromDataBase.returnTablesFormConnection(...)
 * @param metadataConnection
 * @param tableInfoParameters
 * @return
 */
public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters){
  getTableTypeMap().clear();
  List<String> itemTablesName=new ArrayList<String>();
  List connList=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
  try {
    if (!tableInfoParameters.isUsedName()) {
      if (tableInfoParameters.getSqlFiter() != null && !""String_Node_Str"".equals(tableInfoParameters.getSqlFiter())) {
        Statement stmt=ExtractMetaDataUtils.conn.createStatement();
        ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
        ResultSet rsTables=stmt.executeQuery(tableInfoParameters.getSqlFiter());
        itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
        rsTables.close();
        stmt.close();
      }
    }
 else {
      retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  filterTablesFromRecycleBin(metadataConnection,itemTablesName);
  ExtractMetaDataUtils.closeConnection();
  DriverShim wapperDriver=null;
  if (connList != null && connList.size() > 0) {
    for (int i=0; i < connList.size(); i++) {
      if (connList.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)connList.get(i);
      }
    }
  }
  closeConnection(metadataConnection,wapperDriver);
  return itemTablesName;
}","/** 
 * DOC ggu Comment method ""returnTablesFormConnection"". work for @see ExtractMetaDataFromDataBase.returnTablesFormConnection(...)
 * @param metadataConnection
 * @param tableInfoParameters
 * @return
 */
public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters){
  getTableTypeMap().clear();
  List<String> itemTablesName=new ArrayList<String>();
  List connList=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
  try {
    if (!tableInfoParameters.isUsedName()) {
      if (tableInfoParameters.getSqlFiter() != null && !""String_Node_Str"".equals(tableInfoParameters.getSqlFiter())) {
        Statement stmt=ExtractMetaDataUtils.conn.createStatement();
        ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
        ResultSet rsTables=stmt.executeQuery(tableInfoParameters.getSqlFiter());
        itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
        rsTables.close();
        stmt.close();
      }
    }
 else {
      itemTablesName=retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  filterTablesFromRecycleBin(metadataConnection,itemTablesName);
  ExtractMetaDataUtils.closeConnection();
  DriverShim wapperDriver=null;
  if (connList != null && connList.size() > 0) {
    for (int i=0; i < connList.size(); i++) {
      if (connList.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)connList.get(i);
      }
    }
  }
  closeConnection(metadataConnection,wapperDriver);
  return itemTablesName;
}",0.9963811821471652
129159,"@Override protected void retrieveItemTables(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters,List<String> itemTablesName) throws SQLException {
  if (ExtractMetaDataUtils.conn != null && ExtractMetaDataUtils.conn.toString().contains(""String_Node_Str"") && ExtractMetaDataUtils.isUseAllSynonyms()) {
    Set<String> nameFiters=tableInfoParameters.getNameFilters();
    Statement stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    StringBuffer filters=new StringBuffer();
    if (!nameFiters.isEmpty()) {
      filters.append(""String_Node_Str"");
      final String tStr=""String_Node_Str"";
      int i=0;
      for (      String s : nameFiters) {
        if (i != 0) {
          filters.append(""String_Node_Str"");
        }
        filters.append(tStr);
        filters.append(s);
        filters.append('\'');
        i++;
      }
      filters.append(')');
    }
    ResultSet rsTables=stmt.executeQuery(GET_ALL_SYNONYMS + filters.toString());
    itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
    rsTables.close();
    stmt.close();
    for (    String synonymName : itemTablesName) {
      getTableTypeMap().put(synonymName,ETableTypes.TABLETYPE_SYNONYM.getName());
    }
  }
 else {
    super.retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
  }
}","@Override protected List<String> retrieveItemTables(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters,List<String> itemTablesName) throws SQLException {
  if (ExtractMetaDataUtils.conn != null && ExtractMetaDataUtils.conn.toString().contains(""String_Node_Str"") && ExtractMetaDataUtils.isUseAllSynonyms()) {
    Set<String> nameFiters=tableInfoParameters.getNameFilters();
    Statement stmt=ExtractMetaDataUtils.conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
    StringBuffer filters=new StringBuffer();
    if (!nameFiters.isEmpty()) {
      filters.append(""String_Node_Str"");
      final String tStr=""String_Node_Str"";
      int i=0;
      for (      String s : nameFiters) {
        if (i != 0) {
          filters.append(""String_Node_Str"");
        }
        filters.append(tStr);
        filters.append(s);
        filters.append('\'');
        i++;
      }
      filters.append(')');
    }
    ResultSet rsTables=stmt.executeQuery(GET_ALL_SYNONYMS + filters.toString());
    itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
    rsTables.close();
    stmt.close();
    for (    String synonymName : itemTablesName) {
      getTableTypeMap().put(synonymName,ETableTypes.TABLETYPE_SYNONYM.getName());
    }
  }
 else {
    itemTablesName=super.retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
  }
  return itemTablesName;
}",0.9802677942212826
129160,"@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    List<String> listExistingObjects=service.getProxyRepositoryFactory().getFolders(type);
    for (    String existName : listExistingObjects) {
      if (existName.equalsIgnoreCase(label)) {
        return false;
      }
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}",0.8486842105263158
129161,"public void openEditSchemaWizard(String value){
  final RepositoryNode realNode=RepositoryNodeUtilities.getMetadataTableFromConnection(value);
  if (realNode != null) {
    AbstractCreateTableAction action=new CreateTableAction(){
      @Override public ISelection getSelection(){
        return new StructuredSelection(realNode);
      }
    }
;
    action.run();
  }
}","@Override public void openEditSchemaWizard(String value){
  final RepositoryNode realNode=RepositoryNodeUtilities.getMetadataTableFromConnection(value);
  if (realNode != null) {
    AbstractCreateTableAction action=new CreateTableAction(){
      @Override public ISelection getSelection(){
        return new StructuredSelection(realNode);
      }
    }
;
    action.run();
  }
}",0.9866666666666668
129162,"public Property getPropertyFromWizardDialog(){
  if (this.genericSchemaWizard != null) {
    return this.genericSchemaWizard.getConnectionProperty();
  }
  return null;
}","@Override public Property getPropertyFromWizardDialog(){
  if (this.genericSchemaWizard != null) {
    return this.genericSchemaWizard.getConnectionProperty();
  }
  return null;
}",0.9714285714285714
129163,"public IPath getPathForSaveAsGenericSchema(){
  if (this.genericSchemaWizard != null) {
    return this.genericSchemaWizard.getPathForSaveAsGenericSchema();
  }
  return null;
}","@Override public IPath getPathForSaveAsGenericSchema(){
  if (this.genericSchemaWizard != null) {
    return this.genericSchemaWizard.getPathForSaveAsGenericSchema();
  }
  return null;
}",0.9725274725274724
129164,"@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,500);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}","@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}",0.992289641300704
129165,"public WizardDialog getGenericSchemaWizardDialog(Shell shell,IWorkbench workbench,boolean creation,ISelection selection,String[] existingNames,boolean isSinglePageOnly){
  genericSchemaWizard=new GenericSchemaWizard(workbench,creation,selection,existingNames,isSinglePageOnly);
  return new WizardDialog(shell,genericSchemaWizard);
}","@Override public WizardDialog getGenericSchemaWizardDialog(Shell shell,IWorkbench workbench,boolean creation,ISelection selection,String[] existingNames,boolean isSinglePageOnly){
  genericSchemaWizard=new GenericSchemaWizard(workbench,creation,selection,existingNames,isSinglePageOnly);
  return new WizardDialog(shell,genericSchemaWizard);
}",0.985207100591716
129166,"public boolean performCancel(){
  return super.performCancel();
}","@Override public boolean performCancel(){
  return super.performCancel();
}",0.9285714285714286
129167,"public boolean performFinish(){
  return false;
}","@Override public boolean performFinish(){
  return false;
}",0.9074074074074074
129168,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=delimitedFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(delimitedFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8626144879267277
129169,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=excelFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(excelFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8368509212730318
129170,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=ldifFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(ldifFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8603512813129859
129171,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=fileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(fileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8610544713078939
129172,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (regexpFileWizardPage3 == null) {
    formIsPerformed=regexpFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=regexpFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,regexpFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=regexpFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (regexpFileWizardPage3 == null) {
    formIsPerformed=regexpFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=regexpFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,regexpFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(regexpFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8595231255386383
129173,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=page1.isPageComplete();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,salesforceSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=salesforceSchemaWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=page1.isPageComplete();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,salesforceSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(salesforceSchemaWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8237776996130848
129174,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            if (creation) {
              String nextId=factory.getNextId();
              connectionProperty.setId(nextId);
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
            }
 else {
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
              EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
              if (schema != null && schema.size() > 0) {
                XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
                if (xmlXPathLoopDescriptor != null) {
                  EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
                  if (schemaTargets != null && schemaTargets.size() > 0) {
                    for (                    SchemaTarget schemaTarget : schemaTargets) {
                      schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
                    }
                  }
                }
              }
              Map<String,MetadataColumn> columnsMap=new HashMap<String,MetadataColumn>();
              MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
              for (              MetadataTable table : tables) {
                EList<MetadataColumn> columns=table.getColumns();
                Iterator<MetadataColumn> columnsIter=columns.iterator();
                while (columnsIter.hasNext()) {
                  MetadataColumn column=columnsIter.next();
                  if (schemaTargetMap.get(column.getLabel()) == null) {
                    columnsIter.remove();
                  }
 else {
                    columnsMap.put(column.getLabel(),column);
                  }
                }
              }
              boolean hasAddedColumns=false;
              Iterator<Entry<String,SchemaTarget>> schemaTargetIter=schemaTargetMap.entrySet().iterator();
              while (schemaTargetIter.hasNext()) {
                Map.Entry<String,SchemaTarget> entry=schemaTargetIter.next();
                String key=entry.getKey();
                if (columnsMap.get(key) == null) {
                  hasAddedColumns=true;
                  break;
                }
              }
              if (hasAddedColumns) {
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              }
              RepositoryUpdateManager.updateFileConnection(connectionItem);
              boolean isModified=propertiesWizardPage.isNameModifiedByUser();
              if (isModified) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
                  IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
                  if (service != null) {
                    service.refreshComponentView(connectionItem);
                  }
                }
              }
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.save(connectionItem);
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
              closeLockStrategy();
            }
            final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
              @Override protected void run() throws LoginException, PersistenceException {
                ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
              }
            }
;
            workUnit.setAvoidUnloadResources(true);
            factory.executeRepositoryWorkUnit(workUnit);
          }
        }
);
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            if (creation) {
              String nextId=factory.getNextId();
              connectionProperty.setId(nextId);
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
            }
 else {
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
              EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
              if (schema != null && schema.size() > 0) {
                XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
                if (xmlXPathLoopDescriptor != null) {
                  EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
                  if (schemaTargets != null && schemaTargets.size() > 0) {
                    for (                    SchemaTarget schemaTarget : schemaTargets) {
                      schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
                    }
                  }
                }
              }
              Map<String,MetadataColumn> columnsMap=new HashMap<String,MetadataColumn>();
              MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
              for (              MetadataTable table : tables) {
                EList<MetadataColumn> columns=table.getColumns();
                Iterator<MetadataColumn> columnsIter=columns.iterator();
                while (columnsIter.hasNext()) {
                  MetadataColumn column=columnsIter.next();
                  if (schemaTargetMap.get(column.getLabel()) == null) {
                    columnsIter.remove();
                  }
 else {
                    columnsMap.put(column.getLabel(),column);
                  }
                }
              }
              boolean hasAddedColumns=false;
              Iterator<Entry<String,SchemaTarget>> schemaTargetIter=schemaTargetMap.entrySet().iterator();
              while (schemaTargetIter.hasNext()) {
                Map.Entry<String,SchemaTarget> entry=schemaTargetIter.next();
                String key=entry.getKey();
                if (columnsMap.get(key) == null) {
                  hasAddedColumns=true;
                  break;
                }
              }
              if (hasAddedColumns) {
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              }
              RepositoryUpdateManager.updateFileConnection(connectionItem);
              refreshInFinish(propertiesWizardPage.isNameModifiedByUser());
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.save(connectionItem);
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
              closeLockStrategy();
            }
            final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
              @Override protected void run() throws LoginException, PersistenceException {
                ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
              }
            }
;
            workUnit.setAvoidUnloadResources(true);
            factory.executeRepositoryWorkUnit(workUnit);
          }
        }
);
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}",0.9656364815215042
129175,"@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (ldapSchemaWizardPage4 == null) {
    formIsPerformed=ldapSchemaWizardPage3.isPageComplete();
  }
 else {
    formIsPerformed=ldapSchemaWizardPage4.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldapSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        boolean isModified=ldapSchemaWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (ldapSchemaWizardPage4 == null) {
    formIsPerformed=ldapSchemaWizardPage3.isPageComplete();
  }
 else {
    formIsPerformed=ldapSchemaWizardPage4.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldapSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        refreshInFinish(ldapSchemaWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8373794479547721
129176,"/** 
 * ggu Comment method ""getQueriesFromItemId"". get queries from the item.
 */
public static List<Query> getQueriesFromItemId(final String itemId){
  ConnectionItem item=getConnectionItemByItemId(itemId);
  if (item != null) {
    final Connection connection=item.getConnection();
    if (connection != null) {
      final QueriesConnection queryConn=connection.getQueries();
      if (queryConn != null) {
        final EList query=queryConn.getQuery();
        if (query != null) {
          return (List<Query>)query;
        }
      }
    }
  }
  return null;
}","/** 
 * ggu Comment method ""getQueriesFromItemId"". get queries from the item.
 */
public static List<Query> getQueriesFromItemId(final String itemId){
  ConnectionItem item=getConnectionItemByItemId(itemId);
  if (item != null) {
    final Connection connection=item.getConnection();
    if (connection != null) {
      final QueriesConnection queryConn=connection.getQueries();
      if (queryConn != null) {
        final EList query=queryConn.getQuery();
        if (query != null) {
          return query;
        }
      }
    }
  }
  return null;
}",0.9884238646482636
129177,"/** 
 * ggu Comment method ""getRepositoryObjectById"".
 * @param id
 * @return
 */
public static IRepositoryViewObject getRepositoryObjectById(final String id){
  if (id == null || ""String_Node_Str"".equals(id) || RepositoryNode.NO_ID.equals(id)) {
    return null;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    IRepositoryViewObject lastVersion=factory.getLastVersion(id);
    if (lastVersion != null && factory.getStatus(lastVersion) != ERepositoryStatus.DELETED) {
      return lastVersion;
    }
  }
 catch (  PersistenceException e) {
  }
  return null;
}","public static IRepositoryViewObject getRepositoryObjectById(final String id,boolean withDeleted){
  if (id == null || ""String_Node_Str"".equals(id) || RepositoryNode.NO_ID.equals(id)) {
    return null;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    IRepositoryViewObject lastVersion=factory.getLastVersion(id);
    if (lastVersion != null) {
      if (withDeleted) {
        return lastVersion;
      }
 else       if (factory.getStatus(lastVersion) != ERepositoryStatus.DELETED) {
        return lastVersion;
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return null;
}",0.8450039339103068
129178,"public static List<Query> getQueriesFromItem(Item item){
  if (item == null) {
    return null;
  }
  if (item instanceof ConnectionItem) {
    final Connection connection=((ConnectionItem)item).getConnection();
    if (connection != null) {
      final QueriesConnection queryConn=connection.getQueries();
      if (queryConn != null) {
        final EList query=queryConn.getQuery();
        if (query != null) {
          return (List<Query>)query;
        }
      }
    }
  }
  return null;
}","public static List<Query> getQueriesFromItem(Item item){
  if (item == null) {
    return null;
  }
  if (item instanceof ConnectionItem) {
    final Connection connection=((ConnectionItem)item).getConnection();
    if (connection != null) {
      final QueriesConnection queryConn=connection.getQueries();
      if (queryConn != null) {
        final EList query=queryConn.getQuery();
        if (query != null) {
          return query;
        }
      }
    }
  }
  return null;
}",0.8825331971399387
129179,"public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
}","public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    OutputStream output=null;
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      System.err.println(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
      output=System.out;
    }
 else {
      s=(Socket)object;
      output=s.getOutputStream();
    }
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  boolean isConnect=false;
  OutputStream output=null;
  try {
    s=new Socket(clientHost,portStats);
    isConnect=true;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + clientHost + ""String_Node_Str""+ portStats);
  }
  if (isConnect) {
    GlobalResource.resourceMap.put(portStats,s);
    output=s.getOutputStream();
    System.out.println(""String_Node_Str"");
  }
 else {
    output=System.out;
    System.out.println(""String_Node_Str"");
  }
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  Thread t=new Thread(this);
  t.start();
}",0.1480582524271844
129180,"public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","@Override public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.982078853046595
129181,"@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,500);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}","@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}",0.992289641300704
129182,"/** 
 * create technical name.
 * @param name
 * @return
 */
public static String createTechnicalName(String name){
  while (name.endsWith(""String_Node_Str"")) {
    name=name.substring(0,name.length() - 1);
  }
  if (name != null) {
    name=name.toUpperCase();
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return name;
}","/** 
 * create technical name.
 * @param name
 * @return
 */
public static String createTechnicalName(String name){
  while (name.endsWith(""String_Node_Str"")) {
    name=name.substring(0,name.length() - 1);
  }
  if (name != null) {
    name=name.toUpperCase(Locale.ENGLISH);
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
    name=name.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return name;
}",0.982885085574572
129183,"public String toString(){
  return getLabel();
}","@Override public String toString(){
  return getLabel();
}",0.9056603773584906
129184,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.985228290062668
129185,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=delimitedFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(delimitedFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8626144879267277
129186,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=excelFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(excelFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8368509212730318
129187,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=ldifFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(ldifFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8603512813129859
129188,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=fileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(fileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8610544713078939
129189,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (regexpFileWizardPage3 == null) {
    formIsPerformed=regexpFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=regexpFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,regexpFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=regexpFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (regexpFileWizardPage3 == null) {
    formIsPerformed=regexpFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=regexpFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,regexpFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(regexpFileWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8595231255386383
129190,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=page1.isPageComplete();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,salesforceSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=salesforceSchemaWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=page1.isPageComplete();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,salesforceSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        refreshInFinish(salesforceSchemaWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8237776996130848
129191,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            if (creation) {
              String nextId=factory.getNextId();
              connectionProperty.setId(nextId);
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
            }
 else {
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
              EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
              if (schema != null && schema.size() > 0) {
                XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
                if (xmlXPathLoopDescriptor != null) {
                  EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
                  if (schemaTargets != null && schemaTargets.size() > 0) {
                    for (                    SchemaTarget schemaTarget : schemaTargets) {
                      schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
                    }
                  }
                }
              }
              Map<String,MetadataColumn> columnsMap=new HashMap<String,MetadataColumn>();
              MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
              for (              MetadataTable table : tables) {
                EList<MetadataColumn> columns=table.getColumns();
                Iterator<MetadataColumn> columnsIter=columns.iterator();
                while (columnsIter.hasNext()) {
                  MetadataColumn column=columnsIter.next();
                  if (schemaTargetMap.get(column.getLabel()) == null) {
                    columnsIter.remove();
                  }
 else {
                    columnsMap.put(column.getLabel(),column);
                  }
                }
              }
              boolean hasAddedColumns=false;
              Iterator<Entry<String,SchemaTarget>> schemaTargetIter=schemaTargetMap.entrySet().iterator();
              while (schemaTargetIter.hasNext()) {
                Map.Entry<String,SchemaTarget> entry=schemaTargetIter.next();
                String key=entry.getKey();
                if (columnsMap.get(key) == null) {
                  hasAddedColumns=true;
                  break;
                }
              }
              if (hasAddedColumns) {
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              }
              RepositoryUpdateManager.updateFileConnection(connectionItem);
              boolean isModified=propertiesWizardPage.isNameModifiedByUser();
              if (isModified) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
                  IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
                  if (service != null) {
                    service.refreshComponentView(connectionItem);
                  }
                }
              }
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.save(connectionItem);
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
              closeLockStrategy();
            }
            final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
              @Override protected void run() throws LoginException, PersistenceException {
                ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
              }
            }
;
            workUnit.setAvoidUnloadResources(true);
            factory.executeRepositoryWorkUnit(workUnit);
          }
        }
);
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            if (creation) {
              String nextId=factory.getNextId();
              connectionProperty.setId(nextId);
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
            }
 else {
              connectionProperty.setLabel(connectionProperty.getDisplayName());
              Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
              EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
              if (schema != null && schema.size() > 0) {
                XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
                if (xmlXPathLoopDescriptor != null) {
                  EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
                  if (schemaTargets != null && schemaTargets.size() > 0) {
                    for (                    SchemaTarget schemaTarget : schemaTargets) {
                      schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
                    }
                  }
                }
              }
              Map<String,MetadataColumn> columnsMap=new HashMap<String,MetadataColumn>();
              MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
              for (              MetadataTable table : tables) {
                EList<MetadataColumn> columns=table.getColumns();
                Iterator<MetadataColumn> columnsIter=columns.iterator();
                while (columnsIter.hasNext()) {
                  MetadataColumn column=columnsIter.next();
                  if (schemaTargetMap.get(column.getLabel()) == null) {
                    columnsIter.remove();
                  }
 else {
                    columnsMap.put(column.getLabel(),column);
                  }
                }
              }
              boolean hasAddedColumns=false;
              Iterator<Entry<String,SchemaTarget>> schemaTargetIter=schemaTargetMap.entrySet().iterator();
              while (schemaTargetIter.hasNext()) {
                Map.Entry<String,SchemaTarget> entry=schemaTargetIter.next();
                String key=entry.getKey();
                if (columnsMap.get(key) == null) {
                  hasAddedColumns=true;
                  break;
                }
              }
              if (hasAddedColumns) {
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              }
              RepositoryUpdateManager.updateFileConnection(connectionItem);
              refreshInFinish(propertiesWizardPage.isNameModifiedByUser());
              final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
                @Override protected void run() throws LoginException, PersistenceException {
                  factory.save(connectionItem);
                }
              }
;
              workUnit.setAvoidUnloadResources(true);
              factory.executeRepositoryWorkUnit(workUnit);
              closeLockStrategy();
            }
            final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
              @Override protected void run() throws LoginException, PersistenceException {
                ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
              }
            }
;
            workUnit.setAvoidUnloadResources(true);
            factory.executeRepositoryWorkUnit(workUnit);
          }
        }
);
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}",0.9657352201709648
129192,"@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (ldapSchemaWizardPage4 == null) {
    formIsPerformed=ldapSchemaWizardPage3.isPageComplete();
  }
 else {
    formIsPerformed=ldapSchemaWizardPage4.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldapSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        boolean isModified=ldapSchemaWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (ldapSchemaWizardPage4 == null) {
    formIsPerformed=ldapSchemaWizardPage3.isPageComplete();
  }
 else {
    formIsPerformed=ldapSchemaWizardPage4.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldapSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        refreshInFinish(ldapSchemaWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8373794479547721
129193,"@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed=true;
  IWizardPage finalPage=null;
  if (finalPage == null) {
    finalPage=wsdlSchemaWizardPage0;
  }
  if (((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel()) {
    if (finalPage instanceof WSDLSchemaWizardPage) {
      int step=((WSDLSchemaWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  manager.saveValue();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,wsdlSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateWSDLConnection(connectionItem,false,false);
        boolean isModified=wsdlSchemaWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed=true;
  IWizardPage finalPage=null;
  if (finalPage == null) {
    finalPage=wsdlSchemaWizardPage0;
  }
  if (((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel()) {
    if (finalPage instanceof WSDLSchemaWizardPage) {
      int step=((WSDLSchemaWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  manager.saveValue();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,wsdlSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateWSDLConnection(connectionItem,false,false);
        refreshInFinish(wsdlSchemaWizardPage0.isNameModifiedByUser());
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.872290415252024
129194,"@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}","@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (this.repositoryFactoryFromProvider.isLocalConnectionProvider()) {
    this.repositoryFactoryFromProvider.renameFolderForLocal(type,path,label);
  }
 else {
    this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  }
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}",0.8552036199095022
129195,"@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    List<String> listExistingObjects=service.getProxyRepositoryFactory().getFolders(type);
    for (    String existName : listExistingObjects) {
      if (existName.equalsIgnoreCase(label)) {
        return false;
      }
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}",0.8486842105263158
129196,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            tableNodeList=filterItemContextSchema(tableNodeList);
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.985228290062668
129197,"@Override public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.982078853046595
129198,"@Override public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.982078853046595
129199,"public void init(IWorkbench workbench,IStructuredSelection selection){
}","@Override public void init(IWorkbench workbench,IStructuredSelection selection){
}",0.935064935064935
129200,"public void run(IProgressMonitor monitor) throws CoreException {
  try {
    factory.save(connectionItem);
    closeLockStrategy();
  }
 catch (  PersistenceException e) {
    throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
  }
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    factory.save(connectionItem);
    closeLockStrategy();
  }
 catch (  PersistenceException e) {
    throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
  }
}",0.9818840579710144
129201,"@Override public boolean performFinish(){
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  ITDQRepositoryService tdqRepService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  }
  try {
    if (creation) {
      String nextId=factory.getNextId();
      connectionProperty.setId(nextId);
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      if (tdqRepService != null) {
        tdqRepService.fillMetadata(connectionItem);
      }
    }
 else {
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      RepositoryUpdateManager.updateFileConnection(connectionItem);
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRunnable operation=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            factory.save(connectionItem);
            closeLockStrategy();
          }
 catch (          PersistenceException e) {
            throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
          }
        }
      }
;
      workspace.run(operation,null);
    }
  }
 catch (  Exception e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,""String_Node_Str"",detailError);
    return false;
  }
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  if (tdqRepService != null) {
    if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      tdqRepService.openEditor(connectionItem);
      tdqRepService.refresh(node);
    }
  }
  return true;
}","@Override public boolean performFinish(){
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  ITDQRepositoryService tdqRepService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  }
  try {
    if (creation) {
      String nextId=factory.getNextId();
      connectionProperty.setId(nextId);
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      if (tdqRepService != null) {
        tdqRepService.fillMetadata(connectionItem);
      }
    }
 else {
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      RepositoryUpdateManager.updateFileConnection(connectionItem);
      boolean isModified=propertiesWizardPage.isNameModifiedByUser();
      if (isModified) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          if (service != null) {
            service.refreshComponentView(connectionItem);
          }
        }
      }
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRunnable operation=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            factory.save(connectionItem);
            closeLockStrategy();
          }
 catch (          PersistenceException e) {
            throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
          }
        }
      }
;
      workspace.run(operation,null);
    }
  }
 catch (  Exception e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,""String_Node_Str"",detailError);
    return false;
  }
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  if (tdqRepService != null) {
    if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      tdqRepService.openEditor(connectionItem);
      tdqRepService.refresh(node);
    }
  }
  return true;
}",0.8920627487707796
129202,"public int getCursorPosition(){
  return content.length();
}","@Override public int getCursorPosition(){
  return content.length();
}",0.9230769230769232
129203,"public IContentProposal[] getProposals(String contents,int position){
  IContentProposal[] cp=new IContentProposal[]{new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(Messages.getString(""String_Node_Str""),""String_Node_Str"",Messages.getString(""String_Node_Str""))};
  return cp;
}","@Override public IContentProposal[] getProposals(String contents,int position){
  IContentProposal[] cp=new IContentProposal[]{new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new DateFormatContentProposal(Messages.getString(""String_Node_Str""),""String_Node_Str"",Messages.getString(""String_Node_Str""))};
  return cp;
}",0.9982225382154284
129204,"public String getLabel(){
  return label;
}","@Override public String getLabel(){
  return label;
}",0.8958333333333334
129205,"public String getContent(){
  return TalendQuoteUtils.addQuotes(content);
}","@Override public String getContent(){
  return TalendQuoteUtils.addQuotes(content);
}",0.9375
129206,"public String getDescription(){
  return description;
}","@Override public String getDescription(){
  return description;
}",0.9166666666666666
129207,"private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        dialog.open();
      }
    }
);
    return true;
  }
  Item item=objToDelete.getProperty().getItem();
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null && item instanceof ConnectionItem && item.getState().isDeleted()) {
    if (!resChangeService.handleResourceChange(((ConnectionItem)item).getConnection())) {
      return true;
    }
  }
  ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType != null && nodeType.isSubItem()) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        final DeleteTableAction deleteTableAction=new DeleteTableAction();
        deleteTableAction.setWorkbenchPart(getWorkbenchPart());
        deleteTableAction.run();
      }
    }
);
    needReturn=true;
  }
 else {
    if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
      if (confirm == null) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            String title=Messages.getString(""String_Node_Str"");
            String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
            confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
          }
        }
);
        confirm=confirmFromDialog;
      }
      if (confirm) {
        deleteActionCache.closeOpenedEditor(objToDelete);
        if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
          boolean success=true;
          for (          IRepositoryNode curNode : currentJobNode.getChildren()) {
            try {
              deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
              success=false;
            }
          }
          if (success) {
            if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
              Item fitem=currentJobNode.getObject().getProperty().getItem();
              if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
                factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
              }
 else {
                factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
              }
            }
 else {
              factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
            }
          }
        }
 else {
          if (resChangeService != null && (item instanceof TDQItem || item instanceof ConnectionItem)) {
            resChangeService.removeAllDependecies(item);
          }
          if (item instanceof ConnectionItem && GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            tdqRepService.removeAliasInSQLExplorer(currentJobNode);
          }
          factory.deleteObjectPhysical(objToDelete);
          ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
        }
      }
    }
 else {
      factory.deleteObjectLogical(objToDelete);
    }
  }
  return needReturn;
}","private boolean deleteElements(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final RepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  boolean needReturn=false;
  final IRepositoryViewObject objToDelete=currentJobNode.getObject();
  final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,currentJobNode);
  if (checkContext.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
        dialog.open();
      }
    }
);
    return true;
  }
  Item item=null;
  if (objToDelete != null && objToDelete.getProperty() != null) {
    item=objToDelete.getProperty().getItem();
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null && item != null && item instanceof ConnectionItem && item.getState().isDeleted()) {
    if (!resChangeService.handleResourceChange(((ConnectionItem)item).getConnection())) {
      return true;
    }
  }
  ERepositoryObjectType nodeType=(ERepositoryObjectType)currentJobNode.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType != null && nodeType.isSubItem()) {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        final DeleteTableAction deleteTableAction=new DeleteTableAction();
        deleteTableAction.setWorkbenchPart(getWorkbenchPart());
        deleteTableAction.run();
      }
    }
);
    needReturn=true;
  }
 else {
    if (factory.getStatus(objToDelete) == ERepositoryStatus.DELETED) {
      if (confirm == null) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            String title=Messages.getString(""String_Node_Str"");
            String message=currentJobNode.getProperties(EProperties.LABEL) + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
            confirmFromDialog=MessageDialog.openQuestion(new Shell(),title,message);
          }
        }
);
        confirm=confirmFromDialog;
      }
      if (confirm) {
        deleteActionCache.closeOpenedEditor(objToDelete);
        if (currentJobNode.getType() == ENodeType.SIMPLE_FOLDER) {
          boolean success=true;
          for (          IRepositoryNode curNode : currentJobNode.getChildren()) {
            try {
              deleteElements(factory,deleteActionCache,(RepositoryNode)curNode,confirm);
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
              success=false;
            }
          }
          if (success) {
            if (currentJobNode.getObject() != null && currentJobNode.getObject().getProperty() != null && currentJobNode.getObject().getProperty().getItem() != null) {
              Item fitem=currentJobNode.getObject().getProperty().getItem();
              if ((fitem instanceof FolderItem) && (((FolderItem)fitem).getType().getValue() == FolderType.FOLDER)) {
                factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentJobNode.getObject().getProperty().getItem()));
              }
 else {
                factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
              }
            }
 else {
              factory.deleteFolder(currentJobNode.getContentType(),RepositoryNodeUtilities.getPath(currentJobNode));
            }
          }
        }
 else {
          if (resChangeService != null && (item instanceof TDQItem || item instanceof ConnectionItem)) {
            resChangeService.removeAllDependecies(item);
          }
          if (item instanceof ConnectionItem && GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            tdqRepService.removeAliasInSQLExplorer(currentJobNode);
          }
          factory.deleteObjectPhysical(objToDelete);
          ExpressionPersistance.getInstance().jobDeleted(objToDelete.getLabel());
        }
      }
    }
 else {
      factory.deleteObjectLogical(objToDelete);
    }
  }
  return needReturn;
}",0.9886401979529862
129208,"public static List<ContextReferenceBean> checkContextFromProcess(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,RepositoryNode currentJobNode){
  IRepositoryViewObject object=currentJobNode.getObject();
  Item nodeItem=object.getProperty().getItem();
  boolean contextIsUsed=false;
  if (nodeItem instanceof ContextItem) {
    contextIsUsed=true;
  }
  List<ContextReferenceBean> list=new ArrayList<ContextReferenceBean>();
  if (deleteActionCache == null) {
    deleteActionCache=DeleteActionCache.getInstance();
    deleteActionCache.createRecords();
  }
  if (object != null && contextIsUsed) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      Item item=property.getItem();
      if (!(item instanceof ContextItem)) {
        return list;
      }
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> objList=new ArrayList<IRepositoryViewObject>();
          List<IRepositoryViewObject> processes=factory.getAll(refP,ERepositoryObjectType.PROCESS);
          List<IRepositoryViewObject> jobletes=factory.getAll(refP,ERepositoryObjectType.JOBLET);
          processes.addAll(jobletes);
          deleteActionCache.setProcessList(processes);
          objList.addAll(processes);
          List<IRepositoryViewObject> connectionc=factory.getAll(refP,ERepositoryObjectType.METADATA_CONNECTIONS);
          objList.addAll(connectionc);
          List<IRepositoryViewObject> edifact=factory.getAll(refP,ERepositoryObjectType.METADATA_EDIFACT);
          objList.addAll(edifact);
          List<IRepositoryViewObject> brms=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_BRMS);
          objList.addAll(brms);
          List<IRepositoryViewObject> delis=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_DELIMITED);
          objList.addAll(delis);
          List<IRepositoryViewObject> ebcdic=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_EBCDIC);
          objList.addAll(ebcdic);
          List<IRepositoryViewObject> excel=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_EXCEL);
          objList.addAll(excel);
          List<IRepositoryViewObject> ftp=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_FTP);
          objList.addAll(ftp);
          List<IRepositoryViewObject> hl7=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_HL7);
          objList.addAll(hl7);
          List<IRepositoryViewObject> ldif=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_LDIF);
          objList.addAll(ldif);
          List<IRepositoryViewObject> positional=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
          objList.addAll(positional);
          List<IRepositoryViewObject> regexp=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_REGEXP);
          objList.addAll(regexp);
          List<IRepositoryViewObject> xmls=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_XML);
          objList.addAll(xmls);
          List<IRepositoryViewObject> mdms=factory.getAll(refP,ERepositoryObjectType.METADATA_MDMCONNECTION);
          objList.addAll(mdms);
          List<IRepositoryViewObject> wsdl=factory.getAll(refP,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
          objList.addAll(wsdl);
          List<IRepositoryViewObject> saleForces=factory.getAll(refP,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
          objList.addAll(saleForces);
          for (          IRepositoryViewObject process : objList) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            boolean isJob=true;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            List<IContext> contextList=null;
            String contextID=null;
            if (!isOpenedItem(item2,deleteActionCache.getOpenProcessMap())) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              if (item2 instanceof ProcessItem) {
                contextList=service.getProcessFromProcessItem((ProcessItem)item2).getContextManager().getListContext();
              }
 else               if (item2 instanceof JobletProcessItem) {
                contextList=service.getProcessFromJobletProcessItem((JobletProcessItem)item2).getContextManager().getListContext();
              }
 else               if (item2 instanceof ConnectionItem) {
                contextID=((ConnectionItem)item2).getConnection().getContextId();
              }
            }
            if (contextList != null) {
              for (              IContext context : contextList) {
                if (context.getContextParameterList().size() <= 0) {
                  continue;
                }
                String source=context.getContextParameterList().get(0).getSource();
                if (source.equals(item.getProperty().getId())) {
                  String path=item2.getState().getPath();
                  String type=process.getRepositoryObjectType().getType();
                  ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                  bean.setJobFlag(isJob,isDelete);
                  list.add(bean);
                  break;
                }
              }
            }
 else             if (contextID != null) {
              if (contextID.equals(item.getProperty().getId())) {
                String path=item2.getState().getPath();
                String type=process.getRepositoryObjectType().getType();
                ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                bean.setJobFlag(isJob,isDelete);
                list.add(bean);
                break;
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            List<IContext> contextList=openedProcess.getContextManager().getListContext();
            for (            IContext context : contextList) {
              if (context.getContextParameterList().size() <= 0) {
                continue;
              }
              String source=context.getContextParameterList().get(0).getSource();
              if (source.equals(item.getProperty().getId())) {
                boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
                boolean isJob=true;
                Property property2=openedProcess.getProperty();
                Item item2=property2.getItem();
                String path=item2.getState().getPath();
                ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),openedProcess.getRepositoryObjectType().getType(),property2.getVersion(),path,refP.getLabel());
                bean.setJobFlag(isJob,isDelete);
                list.add(bean);
                break;
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return list;
}","public static List<ContextReferenceBean> checkContextFromProcess(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,RepositoryNode currentJobNode){
  IRepositoryViewObject object=currentJobNode.getObject();
  Item nodeItem=null;
  if (object != null && object.getProperty() != null) {
    nodeItem=object.getProperty().getItem();
  }
  boolean contextIsUsed=false;
  if (nodeItem != null && nodeItem instanceof ContextItem) {
    contextIsUsed=true;
  }
  List<ContextReferenceBean> list=new ArrayList<ContextReferenceBean>();
  if (deleteActionCache == null) {
    deleteActionCache=DeleteActionCache.getInstance();
    deleteActionCache.createRecords();
  }
  if (object != null && contextIsUsed) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      Item item=property.getItem();
      if (!(item instanceof ContextItem)) {
        return list;
      }
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> objList=new ArrayList<IRepositoryViewObject>();
          List<IRepositoryViewObject> processes=factory.getAll(refP,ERepositoryObjectType.PROCESS);
          List<IRepositoryViewObject> jobletes=factory.getAll(refP,ERepositoryObjectType.JOBLET);
          processes.addAll(jobletes);
          deleteActionCache.setProcessList(processes);
          objList.addAll(processes);
          List<IRepositoryViewObject> connectionc=factory.getAll(refP,ERepositoryObjectType.METADATA_CONNECTIONS);
          objList.addAll(connectionc);
          List<IRepositoryViewObject> edifact=factory.getAll(refP,ERepositoryObjectType.METADATA_EDIFACT);
          objList.addAll(edifact);
          List<IRepositoryViewObject> brms=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_BRMS);
          objList.addAll(brms);
          List<IRepositoryViewObject> delis=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_DELIMITED);
          objList.addAll(delis);
          List<IRepositoryViewObject> ebcdic=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_EBCDIC);
          objList.addAll(ebcdic);
          List<IRepositoryViewObject> excel=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_EXCEL);
          objList.addAll(excel);
          List<IRepositoryViewObject> ftp=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_FTP);
          objList.addAll(ftp);
          List<IRepositoryViewObject> hl7=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_HL7);
          objList.addAll(hl7);
          List<IRepositoryViewObject> ldif=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_LDIF);
          objList.addAll(ldif);
          List<IRepositoryViewObject> positional=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
          objList.addAll(positional);
          List<IRepositoryViewObject> regexp=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_REGEXP);
          objList.addAll(regexp);
          List<IRepositoryViewObject> xmls=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_XML);
          objList.addAll(xmls);
          List<IRepositoryViewObject> mdms=factory.getAll(refP,ERepositoryObjectType.METADATA_MDMCONNECTION);
          objList.addAll(mdms);
          List<IRepositoryViewObject> wsdl=factory.getAll(refP,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
          objList.addAll(wsdl);
          List<IRepositoryViewObject> saleForces=factory.getAll(refP,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
          objList.addAll(saleForces);
          for (          IRepositoryViewObject process : objList) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            boolean isJob=true;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            List<IContext> contextList=null;
            String contextID=null;
            if (!isOpenedItem(item2,deleteActionCache.getOpenProcessMap())) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              if (item2 instanceof ProcessItem) {
                contextList=service.getProcessFromProcessItem((ProcessItem)item2).getContextManager().getListContext();
              }
 else               if (item2 instanceof JobletProcessItem) {
                contextList=service.getProcessFromJobletProcessItem((JobletProcessItem)item2).getContextManager().getListContext();
              }
 else               if (item2 instanceof ConnectionItem) {
                contextID=((ConnectionItem)item2).getConnection().getContextId();
              }
            }
            if (contextList != null) {
              for (              IContext context : contextList) {
                if (context.getContextParameterList().size() <= 0) {
                  continue;
                }
                String source=context.getContextParameterList().get(0).getSource();
                if (source.equals(item.getProperty().getId())) {
                  String path=item2.getState().getPath();
                  String type=process.getRepositoryObjectType().getType();
                  ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                  bean.setJobFlag(isJob,isDelete);
                  list.add(bean);
                  break;
                }
              }
            }
 else             if (contextID != null) {
              if (contextID.equals(item.getProperty().getId())) {
                String path=item2.getState().getPath();
                String type=process.getRepositoryObjectType().getType();
                ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                bean.setJobFlag(isJob,isDelete);
                list.add(bean);
                break;
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            List<IContext> contextList=openedProcess.getContextManager().getListContext();
            for (            IContext context : contextList) {
              if (context.getContextParameterList().size() <= 0) {
                continue;
              }
              String source=context.getContextParameterList().get(0).getSource();
              if (source.equals(item.getProperty().getId())) {
                boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
                boolean isJob=true;
                Property property2=openedProcess.getProperty();
                Item item2=property2.getItem();
                String path=item2.getState().getPath();
                ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),openedProcess.getRepositoryObjectType().getType(),property2.getVersion(),path,refP.getLabel());
                bean.setJobFlag(isJob,isDelete);
                list.add(bean);
                break;
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return list;
}",0.98993752055245
129209,"public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    List<String> listExistingObjects=service.getProxyRepositoryFactory().getFolders(type);
    for (    String existName : listExistingObjects) {
      if (existName.equalsIgnoreCase(label)) {
        return false;
      }
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}",0.8474295190713101
129210,"public int compare(String o1,String o2){
  return o1.replaceAll(""String_Node_Str"",""String_Node_Str"").compareToIgnoreCase(o2.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","@Override public int compare(String o1,String o2){
  return o1.replaceAll(""String_Node_Str"",""String_Node_Str"").compareToIgnoreCase(o2.replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9722222222222222
129211,"@Override protected Comparator<String> getComparator(){
  return new Comparator<String>(){
    public int compare(    String o1,    String o2){
      return o1.replaceAll(""String_Node_Str"",""String_Node_Str"").compareToIgnoreCase(o2.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
;
}","@Override protected Comparator<String> getComparator(){
  return new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      return o1.replaceAll(""String_Node_Str"",""String_Node_Str"").compareToIgnoreCase(o2.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
  }
;
}",0.9832775919732442
129212,"@Override public int category(Object element){
  RepositoryNode node=(RepositoryNode)element;
  if (node.isBin()) {
    return 150;
  }
  if (node.getType() == ENodeType.STABLE_SYSTEM_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
    ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (contentType == null) {
      return 199;
    }
    if (contentType == ERepositoryObjectType.BUSINESS_PROCESS) {
      return 0;
    }
 else     if (contentType == ERepositoryObjectType.PROCESS) {
      return 5;
    }
 else     if (contentType == ERepositoryObjectType.JOBLET) {
      return 6;
    }
 else     if (contentType == ERepositoryObjectType.CONTEXT) {
      return 10;
    }
 else     if (contentType == ERepositoryObjectType.CODE) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.ROUTINES) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.METADATA) {
      return 20;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_CONNECTIONS) {
      return 25;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
      return 28;
    }
 else     if (contentType == ERepositoryObjectType.SQLPATTERNS) {
      return 19;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
      return 30;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
      return 35;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
      return 40;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_XML) {
      return 45;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
      return 46;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_LDIF) {
      return 50;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
      return 55;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
      return 56;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
      return 58;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
      return 59;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_RULES_MANAGEMENT) {
      return 60;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
      return 61;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
      return 62;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
      return 63;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
      return 64;
    }
 else     if (contentType == ERepositoryObjectType.DOCUMENTATION) {
      return 65;
    }
 else     if (contentType == ERepositoryObjectType.JOBS) {
      return 70;
    }
 else     if (contentType == ERepositoryObjectType.JOBLETS) {
      return 75;
    }
 else     if (!contentType.isStaticNode()) {
      return contentType.ordinal();
    }
 else {
      return 199;
    }
  }
 else   if (node.getType() == ENodeType.SIMPLE_FOLDER) {
    return 120;
  }
 else   if (node.getType() == ENodeType.REFERENCED_PROJECT) {
    return 200;
  }
 else {
    if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
      ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (contentType != null) {
        if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
          return 120;
        }
 else         if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
          return 125;
        }
 else {
          return 130;
        }
      }
    }
    return 130;
  }
}","@Override public int category(Object element){
  if (!(element instanceof RepositoryNode)) {
    return 0;
  }
  RepositoryNode node=(RepositoryNode)element;
  if (node.isBin()) {
    return 150;
  }
  if (node.getType() == ENodeType.STABLE_SYSTEM_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
    ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (contentType == null) {
      return 199;
    }
    if (contentType == ERepositoryObjectType.BUSINESS_PROCESS) {
      return 1;
    }
 else     if (contentType == ERepositoryObjectType.PROCESS) {
      return 5;
    }
 else     if (contentType == ERepositoryObjectType.JOBLET) {
      return 6;
    }
 else     if (contentType == ERepositoryObjectType.CONTEXT) {
      return 10;
    }
 else     if (contentType == ERepositoryObjectType.CODE) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.ROUTINES) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.METADATA) {
      return 20;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_CONNECTIONS) {
      return 25;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
      return 28;
    }
 else     if (contentType == ERepositoryObjectType.SQLPATTERNS) {
      return 19;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
      return 30;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
      return 35;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
      return 40;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_XML) {
      return 45;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
      return 46;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_LDIF) {
      return 50;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
      return 55;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
      return 56;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
      return 58;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
      return 59;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_RULES_MANAGEMENT) {
      return 60;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
      return 61;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
      return 62;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
      return 63;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
      return 64;
    }
 else     if (contentType == ERepositoryObjectType.DOCUMENTATION) {
      return 65;
    }
 else     if (contentType == ERepositoryObjectType.JOBS) {
      return 70;
    }
 else     if (contentType == ERepositoryObjectType.JOBLETS) {
      return 75;
    }
 else     if (!contentType.isStaticNode()) {
      return contentType.ordinal();
    }
 else {
      return 199;
    }
  }
 else   if (node.getType() == ENodeType.SIMPLE_FOLDER) {
    return 120;
  }
 else   if (node.getType() == ENodeType.REFERENCED_PROJECT) {
    return 200;
  }
 else {
    if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
      ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (contentType != null) {
        if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
          return 120;
        }
 else         if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
          return 125;
        }
 else {
          return 130;
        }
      }
    }
    return 130;
  }
}",0.99140848737308
129213,"public void setMigrationTasksDone(Project project,List<String> list) throws PersistenceException {
  project.getEmfProject().getMigrationTasks().clear();
  project.getEmfProject().getMigrationTasks().addAll(list);
  saveProject(project);
}","@Override public void setMigrationTasksDone(Project project,List<String> list) throws PersistenceException {
  project.getEmfProject().getMigrationTasks().clear();
  project.getEmfProject().getMigrationTasks().addAll(list);
  saveProject(project);
}",0.9795081967213116
129214,"@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    List<String> listExistingObjects=service.getProxyRepositoryFactory().getFolders(type);
    for (    String existName : listExistingObjects) {
      if (existName.equalsIgnoreCase(label)) {
        return false;
      }
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}",0.8486842105263158
129215,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}",0.9819494584837544
129216,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  delimitedFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_DELIMITED,!isRepositoryObjectEditable(),creation);
  delimitedFileWizardPage1=new DelimitedFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  delimitedFileWizardPage2=new DelimitedFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage3=new DelimitedFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    delimitedFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage3);
    delimitedFileWizardPage1.setPageComplete(false);
    delimitedFileWizardPage2.setPageComplete(false);
    delimitedFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage1.setPageComplete(true);
    delimitedFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  delimitedFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_DELIMITED,!isRepositoryObjectEditable(),creation);
  delimitedFileWizardPage1=new DelimitedFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  delimitedFileWizardPage2=new DelimitedFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage3=new DelimitedFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    delimitedFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage3);
    delimitedFileWizardPage1.setPageComplete(false);
    delimitedFileWizardPage2.setPageComplete(false);
    delimitedFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage1.setPageComplete(true);
    delimitedFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}",0.9983771502758844
129217,"public DelimitedFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_DELIMITED_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createDelimitedFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_DELIMITED.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(DelimitedFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getDisplayName();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
originalConn=FileConnectionContextUtils.cloneOriginalValueConnection(connection);
}
initConnection();
}","public DelimitedFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_DELIMITED_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createDelimitedFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_DELIMITED.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(DelimitedFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getDisplayName();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
originalConn=FileConnectionContextUtils.cloneOriginalValueConnection(connection);
}
initConnection();
}",0.9977645305514158
129218,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=delimitedFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8633134413185564
129219,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129220,"public void init(IWorkbench workbench,IStructuredSelection selection){
  this.selection=selection;
}","@Override public void init(IWorkbench workbench,IStructuredSelection selection){
  this.selection=selection;
}",0.9523809523809524
129221,"public ExcelFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createFileExcelConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_EXCEL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(FileExcelConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}","public ExcelFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createFileExcelConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_EXCEL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(FileExcelConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}",0.9976914197768372
129222,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=excelFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8397941680960549
129223,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129224,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}",0.9819494584837544
129225,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  if (isToobar) {
    pathToSave=null;
  }
  ldifFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_LDIF,!isRepositoryObjectEditable(),creation);
  ldifFileWizardPage1=new LdifFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  ldifFileWizardPage2=new LdifFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage3=new LdifFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    ldifFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage3);
    ldifFileWizardPage1.setPageComplete(false);
    ldifFileWizardPage2.setPageComplete(false);
    ldifFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage1.setPageComplete(true);
    ldifFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToobar) {
    pathToSave=null;
  }
  ldifFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_LDIF,!isRepositoryObjectEditable(),creation);
  ldifFileWizardPage1=new LdifFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  ldifFileWizardPage2=new LdifFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage3=new LdifFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    ldifFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage3);
    ldifFileWizardPage1.setPageComplete(false);
    ldifFileWizardPage2.setPageComplete(false);
    ldifFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage1.setPageComplete(true);
    ldifFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}",0.9982817869415808
129226,"public LdifFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createLdifFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_LDIF.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(LdifFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}","public LdifFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createLdifFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_LDIF.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(LdifFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}",0.9976869699306092
129227,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=ldifFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.859752504419564
129228,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129229,"/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}","/** 
 * We will accept the selection in the workbench to see if we can initialize from it.
 * @see IWorkbenchWizard#init(IWorkbench,IStructuredSelection)
 */
@Override public void init(final IWorkbench workbench,final IStructuredSelection selection2){
  this.selection=selection2;
}",0.9819494584837544
129230,"public FilePositionalWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_POSITIONAL_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createPositionalFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_POSITIONAL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(PositionalFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}","public FilePositionalWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_POSITIONAL_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createPositionalFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_POSITIONAL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(PositionalFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}",0.9977186311787072
129231,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  fileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_POSITIONAL,!isRepositoryObjectEditable(),creation);
  fileWizardPage1=new FilePositionalWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  fileWizardPage2=new FilePositionalWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage3=new FilePositionalWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    fileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    fileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    addPage(fileWizardPage3);
    fileWizardPage1.setPageComplete(false);
    fileWizardPage2.setPageComplete(false);
    fileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage1.setPageComplete(true);
    fileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  fileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_POSITIONAL,!isRepositoryObjectEditable(),creation);
  fileWizardPage1=new FilePositionalWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  fileWizardPage2=new FilePositionalWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage3=new FilePositionalWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    fileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    fileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    addPage(fileWizardPage3);
    fileWizardPage1.setPageComplete(false);
    fileWizardPage2.setPageComplete(false);
    fileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage1.setPageComplete(true);
    fileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}",0.9982238010657194
129232,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=fileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8594401429422275
129233,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129234,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (int i=0; i < schemaTargets.size(); i++) {
          Map<String,Object> map=new HashMap<String,Object>();
          SchemaTarget sch=schemaTargets.get(i);
          map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && (concept.getLabel() == null || concept.getLabel().equals(metadataTable.getLabel()))) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : (List<MetadataColumn>)table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (int i=0; i < schemaTargets.size(); i++) {
          Map<String,Object> map=new HashMap<String,Object>();
          SchemaTarget sch=schemaTargets.get(i);
          map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : (List<MetadataColumn>)table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.9973787680209698
129235,"@Override public int category(Object element){
  if (!(element instanceof RepositoryNode)) {
    return 0;
  }
  RepositoryNode node=(RepositoryNode)element;
  if (node.isBin()) {
    return 150;
  }
  if (node.getType() == ENodeType.STABLE_SYSTEM_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
    ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (contentType == null) {
      return 199;
    }
    if (contentType == ERepositoryObjectType.BUSINESS_PROCESS) {
      return 1;
    }
 else     if (contentType == ERepositoryObjectType.PROCESS) {
      return 5;
    }
 else     if (contentType == ERepositoryObjectType.JOBLET) {
      return 6;
    }
 else     if (contentType == ERepositoryObjectType.CONTEXT) {
      return 10;
    }
 else     if (contentType == ERepositoryObjectType.CODE) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.ROUTINES) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.METADATA) {
      return 20;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_CONNECTIONS) {
      return 25;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
      return 28;
    }
 else     if (contentType == ERepositoryObjectType.SQLPATTERNS) {
      return 19;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
      return 30;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
      return 35;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
      return 40;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_XML) {
      return 45;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
      return 46;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_LDIF) {
      return 50;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
      return 55;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
      return 56;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
      return 58;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
      return 59;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_RULES_MANAGEMENT) {
      return 60;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
      return 61;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
      return 62;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
      return 63;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
      return 64;
    }
 else     if (contentType == ERepositoryObjectType.DOCUMENTATION) {
      return 65;
    }
 else     if (contentType == ERepositoryObjectType.JOBS) {
      return 70;
    }
 else     if (contentType == ERepositoryObjectType.JOBLETS) {
      return 75;
    }
 else     if (!contentType.isStaticNode()) {
      return contentType.ordinal();
    }
 else {
      return 199;
    }
  }
 else   if (node.getType() == ENodeType.SIMPLE_FOLDER) {
    return 120;
  }
 else   if (node.getType() == ENodeType.REFERENCED_PROJECT) {
    return 200;
  }
 else {
    if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
      ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (contentType != null) {
        if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
          return 120;
        }
 else         if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
          return 125;
        }
 else {
          return 130;
        }
      }
    }
    return 130;
  }
}","@Override public int category(Object element){
  if (!(element instanceof RepositoryNode)) {
    return super.category(element);
  }
  RepositoryNode node=(RepositoryNode)element;
  if (node.isBin()) {
    return 150;
  }
  if (node.getType() == ENodeType.STABLE_SYSTEM_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
    ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (contentType == null) {
      return 199;
    }
    if (contentType == ERepositoryObjectType.BUSINESS_PROCESS) {
      return 1;
    }
 else     if (contentType == ERepositoryObjectType.PROCESS) {
      return 5;
    }
 else     if (contentType == ERepositoryObjectType.JOBLET) {
      return 6;
    }
 else     if (contentType == ERepositoryObjectType.CONTEXT) {
      return 10;
    }
 else     if (contentType == ERepositoryObjectType.CODE) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.ROUTINES) {
      return 15;
    }
 else     if (contentType == ERepositoryObjectType.METADATA) {
      return 20;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_CONNECTIONS) {
      return 25;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
      return 28;
    }
 else     if (contentType == ERepositoryObjectType.SQLPATTERNS) {
      return 19;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
      return 30;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
      return 35;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
      return 40;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_XML) {
      return 45;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
      return 46;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_LDIF) {
      return 50;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
      return 55;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
      return 56;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
      return 58;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
      return 59;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_RULES_MANAGEMENT) {
      return 60;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
      return 61;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
      return 62;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
      return 63;
    }
 else     if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
      return 64;
    }
 else     if (contentType == ERepositoryObjectType.DOCUMENTATION) {
      return 65;
    }
 else     if (contentType == ERepositoryObjectType.JOBS) {
      return 70;
    }
 else     if (contentType == ERepositoryObjectType.JOBLETS) {
      return 75;
    }
 else     if (!contentType.isStaticNode()) {
      return contentType.ordinal();
    }
 else {
      return 199;
    }
  }
 else   if (node.getType() == ENodeType.SIMPLE_FOLDER) {
    return 120;
  }
 else   if (node.getType() == ENodeType.REFERENCED_PROJECT) {
    return 200;
  }
 else {
    if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
      ERepositoryObjectType contentType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
      if (contentType != null) {
        if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
          return 120;
        }
 else         if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
          return 125;
        }
 else {
          return 130;
        }
      }
    }
    return 130;
  }
}",0.9969104016477858
129236,"@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}","@Override public boolean isPathValid(Project project,ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path == null) {
    return false;
  }
  if (label.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
 else   if (RepositoryConstants.isSystemFolder(label) || RepositoryConstants.isGeneratedFolder(label) || RepositoryConstants.isJobsFolder(label)|| RepositoryConstants.isJobletsFolder(label)) {
    return false;
  }
 else {
    IProject fsProject=ResourceModelUtils.getProject(project);
    String completePath=null;
    if (type.equals(ERepositoryObjectType.TDQ_PATTERN_REGEX)) {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label.toString();
    }
 else {
      completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
      completePath=completePath + IPath.SEPARATOR + label;
    }
    IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
    List<String> listExistingObjects=service.getProxyRepositoryFactory().getFolders(type);
    for (    String existName : listExistingObjects) {
      if (existName.equalsIgnoreCase(label)) {
        return false;
      }
    }
    IFolder existingFolder=ResourceUtils.getFolder(fsProject,completePath,false);
    return !existingFolder.exists();
  }
}",0.8486842105263158
129237,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (int i=0; i < schemaTargets.size(); i++) {
          Map<String,Object> map=new HashMap<String,Object>();
          SchemaTarget sch=schemaTargets.get(i);
          map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && (concept.getLabel() == null || concept.getLabel().equals(metadataTable.getLabel()))) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : (List<MetadataColumn>)table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (int i=0; i < schemaTargets.size(); i++) {
          Map<String,Object> map=new HashMap<String,Object>();
          SchemaTarget sch=schemaTargets.get(i);
          map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : (List<MetadataColumn>)table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.9973787680209698
129238,"/** 
 * DOC YeXiaowei Comment method ""getSAPInputAndOutputValue"".
 * @param conn
 * @param value2
 * @param functionLabel
 * @param isInput
 * @return
 */
public static void getSAPInputAndOutputValue(SAPConnection conn,List<Map<String,Object>> value2,String functionLabel,boolean isInput){
  if (conn == null) {
    return;
  }
  SAPFunctionUnit unit=null;
  for (int i=0; i < conn.getFuntions().size(); i++) {
    SAPFunctionUnit tmp=(SAPFunctionUnit)conn.getFuntions().get(i);
    if (tmp.getLabel().equals(functionLabel)) {
      unit=tmp;
      break;
    }
  }
  if (unit == null) {
    return;
  }
  SAPFunctionParameterTable table=isInput ? unit.getTestInputParameterTable() : unit.getOutputParameterTable();
  if (table == null || table.getColumns() == null || table.getColumns().isEmpty()) {
    return;
  }
  value2.clear();
  Map<String,List<Object>> mergedKeyValues=new HashMap<String,List<Object>>();
  for (int i=0; i < table.getColumns().size(); i++) {
    SAPFunctionParameterColumn column=(SAPFunctionParameterColumn)table.getColumns().get(i);
    Map<String,Object> map=new HashMap<String,Object>();
    if (isInput) {
      mergeColumn(map,column,table.getColumns(),mergedKeyValues);
    }
 else {
      map.put(""String_Node_Str"",column.getParameterType().replace('.','_'));
      map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getStructureOrTableName()));
      map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getName()));
    }
    if (!map.isEmpty()) {
      value2.add(map);
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""getSAPInputAndOutputValue"".
 * @param conn
 * @param value2
 * @param functionLabel
 * @param isInput
 * @return
 */
public static void getSAPInputAndOutputValue(SAPConnection conn,List<Map<String,Object>> value2,String functionLabel,boolean isInput){
  if (conn == null) {
    return;
  }
  SAPFunctionUnit unit=null;
  for (int i=0; i < conn.getFuntions().size(); i++) {
    SAPFunctionUnit tmp=conn.getFuntions().get(i);
    if (tmp.getLabel().equals(functionLabel)) {
      unit=tmp;
      break;
    }
  }
  if (unit == null) {
    return;
  }
  SAPFunctionParameterTable table=isInput ? unit.getTestInputParameterTable() : unit.getOutputParameterTable();
  if (table == null || table.getColumns() == null || table.getColumns().isEmpty()) {
    return;
  }
  value2.clear();
  Map<String,List<Object>> mergedKeyValues=new HashMap<String,List<Object>>();
  for (int i=0; i < table.getColumns().size(); i++) {
    SAPFunctionParameterColumn column=table.getColumns().get(i);
    Map<String,Object> map=new HashMap<String,Object>();
    if (isInput) {
      mergeColumn(map,column,table.getColumns(),mergedKeyValues);
    }
 else {
      map.put(""String_Node_Str"",column.getParameterType().replace('.','_'));
      map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getStructureOrTableName()));
      map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getName()));
    }
    if (!map.isEmpty()) {
      value2.add(map);
    }
  }
}",0.6543169037380085
129239,"private static Concept getConcept(MDMConnection connection,IMetadataTable table){
  if (table != null) {
    for (    Concept concept : (List<Concept>)connection.getSchemas()) {
      if (concept != null && (concept.getLabel() != null && concept.getLabel().equals(table.getLabel()))) {
        return concept;
      }
    }
  }
  return null;
}","private static Concept getConcept(MDMConnection connection,IMetadataTable table){
  if (table != null) {
    for (    Concept concept : connection.getSchemas()) {
      if (concept != null && (concept.getLabel() != null && concept.getLabel().equals(table.getLabel()))) {
        return concept;
      }
    }
  }
  return null;
}",0.9777117384843982
129240,"public static void getTableXMLMappingValue(Connection connection,List<Map<String,Object>> tableInfo,INode node){
  List<IMetadataTable> metaTables=node.getMetadataList();
  if (connection instanceof XmlFileConnection || connection instanceof MDMConnection) {
    getTableXMLMappingValue(connection,tableInfo,metaTables.get(0));
  }
 else   if (connection instanceof HL7Connection) {
    List<IMetadataTable> newMetaTables=new ArrayList<IMetadataTable>(metaTables);
    HL7Connection hl7Connection=(HL7Connection)connection;
    tableInfo.clear();
    for (    MetadataTable repTable : (Set<MetadataTable>)ConnectionHelper.getTables(connection)) {
      IMetadataTable metaTable=null;
      Iterator<IMetadataTable> iterator=newMetaTables.iterator();
      while (iterator.hasNext()) {
        IMetadataTable nodeTable=iterator.next();
        if (repTable.getLabel() != null && repTable.getLabel().equals(nodeTable.getLabel())) {
          metaTable=nodeTable;
          iterator.remove();
          break;
        }
      }
      String xpathValue=""String_Node_Str"";
      for (      MetadataColumn col : (List<MetadataColumn>)repTable.getColumns()) {
        String original=col.getOriginalField();
        if (original != null && !""String_Node_Str"".equals(original)) {
          if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
            original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
          }
          original=TalendQuoteUtils.addQuotes(original);
          xpathValue+=original;
        }
        if (repTable.getColumns().indexOf(col) < repTable.getColumns().size() - 1) {
          xpathValue+=""String_Node_Str"";
        }
      }
      Map<String,Object> map=new HashMap<String,Object>();
      if (metaTable != null) {
        map.put(""String_Node_Str"",metaTable.getTableName());
      }
 else {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
          IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
          IMetadataTable convert=mmService.convertMetadataTable(repTable);
          String uinqueTableName=node.getProcess().generateUniqueConnectionName(MultiSchemasUtil.getConnectionBaseName((String)repTable.getLabel()));
          convert.setTableName(uinqueTableName);
          node.getProcess().addUniqueConnectionName(uinqueTableName);
          node.getMetadataList().add(convert);
          map.put(""String_Node_Str"",uinqueTableName);
        }
      }
      map.put(""String_Node_Str"",xpathValue);
      tableInfo.add(map);
    }
    if (!newMetaTables.isEmpty()) {
      metaTables.removeAll(newMetaTables);
      for (      IMetadataTable table : newMetaTables) {
        node.getProcess().removeUniqueConnectionName(table.getTableName());
      }
    }
  }
}","public static void getTableXMLMappingValue(Connection connection,List<Map<String,Object>> tableInfo,INode node){
  List<IMetadataTable> metaTables=node.getMetadataList();
  if (connection instanceof XmlFileConnection || connection instanceof MDMConnection) {
    getTableXMLMappingValue(connection,tableInfo,metaTables.get(0));
  }
 else   if (connection instanceof HL7Connection) {
    List<IMetadataTable> newMetaTables=new ArrayList<IMetadataTable>(metaTables);
    HL7Connection hl7Connection=(HL7Connection)connection;
    tableInfo.clear();
    for (    MetadataTable repTable : ConnectionHelper.getTables(connection)) {
      IMetadataTable metaTable=null;
      Iterator<IMetadataTable> iterator=newMetaTables.iterator();
      while (iterator.hasNext()) {
        IMetadataTable nodeTable=iterator.next();
        if (repTable.getLabel() != null && repTable.getLabel().equals(nodeTable.getLabel())) {
          metaTable=nodeTable;
          iterator.remove();
          break;
        }
      }
      String xpathValue=""String_Node_Str"";
      for (      MetadataColumn col : repTable.getColumns()) {
        String original=col.getOriginalField();
        if (original != null && !""String_Node_Str"".equals(original)) {
          if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
            original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
          }
          original=TalendQuoteUtils.addQuotes(original);
          xpathValue+=original;
        }
        if (repTable.getColumns().indexOf(col) < repTable.getColumns().size() - 1) {
          xpathValue+=""String_Node_Str"";
        }
      }
      Map<String,Object> map=new HashMap<String,Object>();
      if (metaTable != null) {
        map.put(""String_Node_Str"",metaTable.getTableName());
      }
 else {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
          IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
          IMetadataTable convert=mmService.convertMetadataTable(repTable);
          String uinqueTableName=node.getProcess().generateUniqueConnectionName(MultiSchemasUtil.getConnectionBaseName(repTable.getLabel()));
          convert.setTableName(uinqueTableName);
          node.getProcess().addUniqueConnectionName(uinqueTableName);
          node.getMetadataList().add(convert);
          map.put(""String_Node_Str"",uinqueTableName);
        }
      }
      map.put(""String_Node_Str"",xpathValue);
      tableInfo.add(map);
    }
    if (!newMetaTables.isEmpty()) {
      metaTables.removeAll(newMetaTables);
      for (      IMetadataTable table : newMetaTables) {
        node.getProcess().removeUniqueConnectionName(table.getTableName());
      }
    }
  }
}",0.9912311469659768
129241,"/** 
 * DOC xye Comment method ""getSAPValuesForFunction"".
 * @param conn
 * @param functionLabel
 * @param paramterName
 * @return
 */
public static String getSAPValuesForFunction(SAPConnection conn,String functionLabel,String paramterName){
  SAPFunctionUnit unit=null;
  if (conn == null) {
    return null;
  }
  for (int i=0; i < conn.getFuntions().size(); i++) {
    unit=(SAPFunctionUnit)conn.getFuntions().get(i);
    if (unit.getLabel().equals(functionLabel)) {
      break;
    }
  }
  if (unit == null) {
    return null;
  }
  if (paramterName.equals(""String_Node_Str"")) {
    if (unit.getOutputType() != null) {
      return unit.getOutputType().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (paramterName.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(unit.getOutputTableName());
  }
  return null;
}","/** 
 * DOC xye Comment method ""getSAPValuesForFunction"".
 * @param conn
 * @param functionLabel
 * @param paramterName
 * @return
 */
public static String getSAPValuesForFunction(SAPConnection conn,String functionLabel,String paramterName){
  SAPFunctionUnit unit=null;
  if (conn == null) {
    return null;
  }
  for (int i=0; i < conn.getFuntions().size(); i++) {
    unit=conn.getFuntions().get(i);
    if (unit.getLabel().equals(functionLabel)) {
      break;
    }
  }
  if (unit == null) {
    return null;
  }
  if (paramterName.equals(""String_Node_Str"")) {
    if (unit.getOutputType() != null) {
      return unit.getOutputType().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (paramterName.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(unit.getOutputTableName());
  }
  return null;
}",0.989946777054997
129242,"private static Object getFTPValue(FTPConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getPort();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystoreFile())) {
      return connection.getKeystoreFile();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystoreFile());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystorePassword())) {
      return connection.getKeystorePassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystorePassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getMethod())) {
      return connection.getMethod();
    }
 else {
      if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return TalendQuoteUtils.addQuotes(connection.getMethod());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSFTP();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isFTPS();
  }
  if (value.equals(""String_Node_Str"")) {
    if (connection.getMode() == null) {
      return ""String_Node_Str"";
    }
    return connection.getMode().toUpperCase();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getCustomEncode())) {
      return connection.getCustomEncode();
    }
 else {
      if (connection.getCustomEncode() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else       return TalendQuoteUtils.addQuotes(connection.getCustomEncode());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isUsesocks();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyhost())) {
      return connection.getProxyhost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyhost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyport())) {
      return connection.getProxyport();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyport());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyuser())) {
      return connection.getProxyuser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyuser());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxypassword())) {
      return connection.getProxypassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxypassword());
    }
  }
  return null;
}","private static Object getFTPValue(FTPConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getPort();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystoreFile())) {
      return connection.getKeystoreFile();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystoreFile());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystorePassword())) {
      return connection.getKeystorePassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystorePassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getMethod())) {
      return connection.getMethod();
    }
 else {
      if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return TalendQuoteUtils.addQuotes(connection.getMethod());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSFTP();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isFTPS();
  }
  if (value.equals(""String_Node_Str"")) {
    if (connection.getMode() == null) {
      return ""String_Node_Str"";
    }
    return connection.getMode().toUpperCase();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getCustomEncode())) {
      return connection.getCustomEncode();
    }
 else {
      if (connection.getCustomEncode() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getCustomEncode());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isUsesocks();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyhost())) {
      return connection.getProxyhost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyhost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyport())) {
      return connection.getProxyport();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyport());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyuser())) {
      return connection.getProxyuser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyuser());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxypassword())) {
      return connection.getProxypassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxypassword());
    }
  }
  return null;
}",0.998326359832636
129243,"/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (int i=0; i < schemaTargets.size(); i++) {
          Map<String,Object> map=new HashMap<String,Object>();
          SchemaTarget sch=schemaTargets.get(i);
          map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && (concept.getLabel() == null || concept.getLabel().equals(metadataTable.getLabel()))) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : (List<MetadataColumn>)table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}","/** 
 * DOC qiang.zhang Comment method ""getXMLMappingValue"".
 * @param repositoryConnection
 * @param metadataTable
 * @return
 */
public static List<Map<String,Object>> getXMLMappingValue(Connection connection,List<IMetadataTable> metadataTables){
  if (metadataTables == null || metadataTables.isEmpty()) {
    return new ArrayList<Map<String,Object>>();
  }
  if (connection instanceof XmlFileConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    EList objectList=xmlConnection.getSchema();
    XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
    if (metadataTable != null) {
      if (xmlDesc != null) {
        List<SchemaTarget> schemaTargets=xmlDesc.getSchemaTargets();
        List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
        for (int i=0; i < schemaTargets.size(); i++) {
          Map<String,Object> map=new HashMap<String,Object>();
          SchemaTarget sch=schemaTargets.get(i);
          map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(sch.getRelativeXPathQuery()));
          maps.add(map);
        }
        return maps;
      }
    }
  }
  if (connection instanceof MDMConnection) {
    IMetadataTable metadataTable=metadataTables.get(0);
    MDMConnection xmlConnection=(MDMConnection)connection;
    EList objectList=xmlConnection.getSchemas();
    if (metadataTable != null) {
      for (      Concept concept : (List<Concept>)objectList) {
        if (concept != null && concept.getLabel() != null && concept.getLabel().equals(metadataTable.getLabel())) {
          List<ConceptTarget> conceptTargets=concept.getConceptTargets();
          List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
          for (          IMetadataColumn col : metadataTable.getListColumns()) {
            Map<String,Object> map=new HashMap<String,Object>();
            map.put(""String_Node_Str"",null);
            for (int i=0; i < conceptTargets.size(); i++) {
              ConceptTarget cpt=conceptTargets.get(i);
              if (col.getLabel().equals(cpt.getTargetName())) {
                map.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(cpt.getRelativeLoopExpression()));
              }
            }
            maps.add(map);
          }
          return maps;
        }
      }
    }
  }
  if (connection instanceof HL7Connection) {
    HL7Connection hl7Connection=(HL7Connection)connection;
    Set objectList=ConnectionHelper.getTables(hl7Connection);
    List<Map<String,Object>> maps=new ArrayList<Map<String,Object>>();
    for (    IMetadataTable tableOfNode : metadataTables) {
      Map<String,Object> map=new HashMap<String,Object>();
      for (      MetadataTable table : (Set<MetadataTable>)objectList) {
        if (table != null && (table.getLabel() == null || table.getLabel().equals(tableOfNode.getLabel()))) {
          String xpathValue=""String_Node_Str"";
          for (          MetadataColumn col : table.getColumns()) {
            String original=col.getOriginalField();
            if (original != null && !""String_Node_Str"".equals(original)) {
              if (original.indexOf(TalendQuoteUtils.LBRACKET) != -1) {
                original=original.substring(0,original.indexOf(TalendQuoteUtils.LBRACKET));
              }
              original=TalendQuoteUtils.addQuotes(original);
              xpathValue+=original;
            }
            if (table.getColumns().indexOf(col) < table.getColumns().size() - 1) {
              xpathValue+=""String_Node_Str"";
            }
          }
          map.put(""String_Node_Str"",xpathValue);
          map.put(""String_Node_Str"",tableOfNode.getTableName());
          maps.add(map);
        }
      }
    }
    return maps;
  }
  return null;
}",0.9942166140904312
129244,"@Override public boolean performFinish(){
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  ITDQRepositoryService tdqRepService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  }
  try {
    if (creation) {
      String nextId=factory.getNextId();
      connectionProperty.setId(nextId);
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      if (tdqRepService != null) {
        tdqRepService.fillMetadata(connectionItem);
      }
    }
 else {
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      RepositoryUpdateManager.updateFileConnection(connectionItem);
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRunnable operation=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            factory.save(connectionItem);
            closeLockStrategy();
          }
 catch (          PersistenceException e) {
            throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
          }
        }
      }
;
      workspace.run(operation,null);
    }
  }
 catch (  Exception e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,""String_Node_Str"",detailError);
    return false;
  }
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  if (tdqRepService != null) {
    if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      tdqRepService.openEditor(connectionItem);
      tdqRepService.refresh(node);
    }
  }
  return true;
}","@Override public boolean performFinish(){
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  ITDQRepositoryService tdqRepService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  }
  try {
    if (creation) {
      String nextId=factory.getNextId();
      connectionProperty.setId(nextId);
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      if (tdqRepService != null) {
        tdqRepService.fillMetadata(connectionItem);
      }
    }
 else {
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      RepositoryUpdateManager.updateFileConnection(connectionItem);
      boolean isModified=propertiesWizardPage.isNameModifiedByUser();
      if (isModified) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          if (service != null) {
            service.refreshComponentView(connectionItem);
          }
        }
      }
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRunnable operation=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            factory.save(connectionItem);
            closeLockStrategy();
          }
 catch (          PersistenceException e) {
            throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
          }
        }
      }
;
      workspace.run(operation,null);
    }
  }
 catch (  Exception e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,""String_Node_Str"",detailError);
    return false;
  }
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  if (tdqRepService != null) {
    if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      tdqRepService.openEditor(connectionItem);
      tdqRepService.refresh(node);
    }
  }
  return true;
}",0.8946256747242431
129245,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  delimitedFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_DELIMITED,!isRepositoryObjectEditable(),creation);
  delimitedFileWizardPage1=new DelimitedFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  delimitedFileWizardPage2=new DelimitedFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage3=new DelimitedFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    delimitedFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage3);
    delimitedFileWizardPage1.setPageComplete(false);
    delimitedFileWizardPage2.setPageComplete(false);
    delimitedFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage1.setPageComplete(true);
    delimitedFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  delimitedFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_DELIMITED,!isRepositoryObjectEditable(),creation);
  delimitedFileWizardPage1=new DelimitedFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  delimitedFileWizardPage2=new DelimitedFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage3=new DelimitedFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    delimitedFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage3);
    delimitedFileWizardPage1.setPageComplete(false);
    delimitedFileWizardPage2.setPageComplete(false);
    delimitedFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    delimitedFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage0);
    delimitedFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage1);
    delimitedFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    delimitedFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(delimitedFileWizardPage2);
    delimitedFileWizardPage1.setPageComplete(true);
    delimitedFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}",0.9983771502758844
129246,"public DelimitedFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_DELIMITED_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createDelimitedFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_DELIMITED.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(DelimitedFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getDisplayName();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
originalConn=FileConnectionContextUtils.cloneOriginalValueConnection(connection);
}
initConnection();
}","public DelimitedFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_DELIMITED_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createDelimitedFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_DELIMITED.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(DelimitedFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getDisplayName();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
originalConn=FileConnectionContextUtils.cloneOriginalValueConnection(connection);
}
initConnection();
}",0.9977645305514158
129247,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=delimitedFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8633134413185564
129248,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129249,"public ExcelFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createFileExcelConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_EXCEL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(FileExcelConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}","public ExcelFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createFileExcelConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_EXCEL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(FileExcelConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}",0.9976914197768372
129250,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=excelFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8397941680960549
129251,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129252,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  if (isToobar) {
    pathToSave=null;
  }
  ldifFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_LDIF,!isRepositoryObjectEditable(),creation);
  ldifFileWizardPage1=new LdifFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  ldifFileWizardPage2=new LdifFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage3=new LdifFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    ldifFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage3);
    ldifFileWizardPage1.setPageComplete(false);
    ldifFileWizardPage2.setPageComplete(false);
    ldifFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage1.setPageComplete(true);
    ldifFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToobar) {
    pathToSave=null;
  }
  ldifFileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_LDIF,!isRepositoryObjectEditable(),creation);
  ldifFileWizardPage1=new LdifFileWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  ldifFileWizardPage2=new LdifFileWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage3=new LdifFileWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    ldifFileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage3);
    ldifFileWizardPage1.setPageComplete(false);
    ldifFileWizardPage2.setPageComplete(false);
    ldifFileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    ldifFileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage0);
    ldifFileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage1);
    ldifFileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    ldifFileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(ldifFileWizardPage2);
    ldifFileWizardPage1.setPageComplete(true);
    ldifFileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}",0.9982817869415808
129253,"public LdifFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createLdifFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_LDIF.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(LdifFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}","public LdifFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_LDIF_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createLdifFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_LDIF.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(LdifFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}",0.9976869699306092
129254,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=ldifFileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.859752504419564
129255,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129256,"public FilePositionalWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_POSITIONAL_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createPositionalFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_POSITIONAL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(PositionalFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}","public FilePositionalWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_POSITIONAL_WIZ));
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createPositionalFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_POSITIONAL.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(PositionalFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
initConnection();
}",0.9977186311787072
129257,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  fileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_POSITIONAL,!isRepositoryObjectEditable(),creation);
  fileWizardPage1=new FilePositionalWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  fileWizardPage2=new FilePositionalWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage3=new FilePositionalWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    fileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    fileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    addPage(fileWizardPage3);
    fileWizardPage1.setPageComplete(false);
    fileWizardPage2.setPageComplete(false);
    fileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage1.setPageComplete(true);
    fileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  fileWizardPage0=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_POSITIONAL,!isRepositoryObjectEditable(),creation);
  fileWizardPage1=new FilePositionalWizardPage(1,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  fileWizardPage2=new FilePositionalWizardPage(2,connectionItem,isRepositoryObjectEditable(),existingNames,contextModeManager);
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage3=new FilePositionalWizardPage(3,connectionItem,isRepositoryObjectEditable(),null,contextModeManager);
    fileWizardPage3.setDescription(Messages.getString(""String_Node_Str""));
    fileWizardPage3.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    addPage(fileWizardPage3);
    fileWizardPage1.setPageComplete(false);
    fileWizardPage2.setPageComplete(false);
    fileWizardPage3.setPageComplete(false);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    fileWizardPage0.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage0.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage0);
    fileWizardPage1.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage1.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage1);
    fileWizardPage2.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    fileWizardPage2.setDescription(Messages.getString(""String_Node_Str""));
    addPage(fileWizardPage2);
    fileWizardPage1.setPageComplete(true);
    fileWizardPage2.setPageComplete(isRepositoryObjectEditable());
  }
}",0.9982238010657194
129258,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        boolean isModified=fileWizardPage0.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8594401429422275
129259,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129260,"public static XSDSchema getXSDSchema(String fileName){
  XSDSchema schema=null;
  try {
    String newFilePath;
    try {
      newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
    }
 catch (    PersistenceException e1) {
      newFilePath=fileName;
    }
    schema=new XSDPopulationUtil2().getXSDSchema(newFilePath);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}","public static XSDSchema getXSDSchema(String fileName){
  XSDSchema schema=null;
  try {
    if (fileName.endsWith(""String_Node_Str"")) {
      Project project=ProjectManager.getInstance().getCurrentProject();
      IProject fsProject=null;
      try {
        fsProject=ResourceModelUtils.getProject(project);
      }
 catch (      PersistenceException e2) {
        ExceptionHandler.process(e2);
      }
      IPath path=new Path(fsProject.getLocationURI().getPath());
      path=path.append(""String_Node_Str"").append(""String_Node_Str"" + new Path(fileName).lastSegment());
      String unzipPath=path.toPortableString();
      File zip=new File(fileName);
      if (zip.exists()) {
        try {
          FilesUtils.unzip(zip.getAbsolutePath(),unzipPath);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      File unzipFile=new File(unzipPath);
      XSDPopulationUtil2 popUtil=new XSDPopulationUtil2();
      if (unzipFile.exists() && unzipFile.isDirectory()) {
        File[] tempXSDFiles=unzipFile.listFiles();
        for (        File tempXSDFile : tempXSDFiles) {
          popUtil.addSchema(tempXSDFile.getAbsolutePath());
        }
        schema=popUtil.getXSDSchema(tempXSDFiles[0].getAbsolutePath());
      }
    }
 else {
      String newFilePath;
      try {
        newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
      }
 catch (      PersistenceException e1) {
        newFilePath=fileName;
      }
      schema=new XSDPopulationUtil2().getXSDSchema(newFilePath);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}",0.3888888888888889
129261,"public void widgetSelected(SelectionEvent e){
  xmlXsdFilePath.setEditable(true);
  String text=xmlXsdFilePath.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  getConnection().setXmlFilePath(text);
  updateConnection(text);
  encodingCombo.setEnabled(true);
  commonNodesLimitation.setEditable(true);
  availableXmlTree.setEnabled(true);
  fileContentText.setEnabled(true);
  fileContentText.setEditable(false);
  checkFieldsValue();
}","@Override public void widgetSelected(SelectionEvent e){
  xmlXsdFilePath.setEditable(true);
  String text=xmlXsdFilePath.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  getConnection().setXmlFilePath(text);
  updateConnection(text);
  encodingCombo.setEnabled(true);
  commonNodesLimitation.setEditable(true);
  availableXmlTree.setEnabled(true);
  fileContentText.setEnabled(true);
  fileContentText.setEditable(false);
  checkFieldsValue();
}",0.9923312883435584
129262,"@Override protected void addUtilsButtonListeners(){
  noFileButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(false);
      xmlXsdFilePath.setText(""String_Node_Str"");
      encodingCombo.setEnabled(false);
      commonNodesLimitation.setEditable(false);
      availableXmlTree.setEnabled(false);
      fileContentText.setEnabled(false);
      getConnection().setXmlFilePath(""String_Node_Str"");
      ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns().clear();
      getConnection().getRoot().clear();
      getConnection().getLoop().clear();
      getConnection().getGroup().clear();
      checkFieldsValue();
    }
  }
);
  useFileButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(true);
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      getConnection().setXmlFilePath(text);
      updateConnection(text);
      encodingCombo.setEnabled(true);
      commonNodesLimitation.setEditable(true);
      availableXmlTree.setEnabled(true);
      fileContentText.setEnabled(true);
      fileContentText.setEditable(false);
      checkFieldsValue();
    }
  }
);
}","@Override protected void addUtilsButtonListeners(){
  noFileButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(false);
      xmlXsdFilePath.setText(""String_Node_Str"");
      encodingCombo.setEnabled(false);
      commonNodesLimitation.setEditable(false);
      availableXmlTree.setEnabled(false);
      fileContentText.setEnabled(false);
      getConnection().setXmlFilePath(""String_Node_Str"");
      ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns().clear();
      getConnection().getRoot().clear();
      getConnection().getLoop().clear();
      getConnection().getGroup().clear();
      checkFieldsValue();
    }
  }
);
  useFileButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(true);
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      getConnection().setXmlFilePath(text);
      updateConnection(text);
      encodingCombo.setEnabled(true);
      commonNodesLimitation.setEditable(true);
      availableXmlTree.setEnabled(true);
      fileContentText.setEnabled(true);
      fileContentText.setEditable(false);
      checkFieldsValue();
    }
  }
);
}",0.9935316946959896
129263,"private void initFileContent(){
  if (getConnection().getXmlFilePath() == null || ""String_Node_Str"".equals(getConnection().getXmlFilePath())) {
    return;
  }
  byte[] bytes=getConnection().getFileContent();
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return;
  }
  String temPath=fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str"";
  String fileName=""String_Node_Str"";
  String xmlXsdPath=getConnection().getXmlFilePath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdPath));
  }
  if (xmlXsdPath != null && XmlUtil.isXMLFile(xmlXsdPath)) {
    fileName=StringUtil.TMP_XML_FILE;
  }
 else   if (xmlXsdPath != null && XmlUtil.isXSDFile(xmlXsdPath)) {
    fileName=StringUtil.TMP_XSD_FILE;
  }
  File temfile=new File(temPath + File.separator + fileName);
  if (!temfile.exists()) {
    try {
      temfile.createNewFile();
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  FileOutputStream outStream;
  try {
    outStream=new FileOutputStream(temfile);
    outStream.write(bytes);
    outStream.close();
  }
 catch (  FileNotFoundException e1) {
    ExceptionHandler.process(e1);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  tempXmlXsdPath=temfile.getPath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    tempXmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,tempXmlXsdPath));
  }
}","private void initFileContent(){
  if (getConnection().getXmlFilePath() == null || ""String_Node_Str"".equals(getConnection().getXmlFilePath())) {
    return;
  }
  byte[] bytes=getConnection().getFileContent();
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return;
  }
  String temPath=fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str"";
  String fileName=""String_Node_Str"";
  String xmlXsdPath=getConnection().getXmlFilePath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdPath));
  }
  if (xmlXsdPath != null && XmlUtil.isXMLFile(xmlXsdPath)) {
    fileName=StringUtil.TMP_XML_FILE;
  }
 else   if (xmlXsdPath != null && XmlUtil.isXSDFile(xmlXsdPath)) {
    fileName=StringUtil.TMP_XSD_FILE;
  }
 else   if (xmlXsdPath.contains(""String_Node_Str"")) {
    fileName=new Path(xmlXsdPath).lastSegment();
  }
  File temfile=new File(temPath + File.separator + fileName);
  if (!temfile.exists()) {
    try {
      temfile.createNewFile();
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  FileOutputStream outStream;
  try {
    outStream=new FileOutputStream(temfile);
    outStream.write(bytes);
    outStream.close();
  }
 catch (  FileNotFoundException e1) {
    ExceptionHandler.process(e1);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  tempXmlXsdPath=temfile.getPath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    tempXmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,tempXmlXsdPath));
  }
}",0.9729593126105636
129264,"@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath)) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}","@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str"")) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}",0.9900896649362908
129265,"public Image getColumnImage(Object element,int columnIndex){
  if (columnIndex == 0) {
    if (element instanceof JobletReferenceBean) {
      JobletReferenceBean bean=(JobletReferenceBean)element;
      if (bean.isJob()) {
        return ImageProvider.getImage(ECoreImage.PROCESS_ICON);
      }
 else {
        return ImageProvider.getImage(ECoreImage.JOBLET_ICON);
      }
    }
  }
  return null;
}","@Override public Image getColumnImage(Object element,int columnIndex){
  if (columnIndex == 0) {
    if (element instanceof JobletReferenceBean) {
      JobletReferenceBean bean=(JobletReferenceBean)element;
      if (bean.isJob()) {
        return ImageProvider.getImage(ECoreImage.PROCESS_ICON);
      }
 else {
        return ImageProvider.getImage(ECoreImage.JOBLET_ICON);
      }
    }
  }
  return null;
}",0.9876847290640394
129266,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setSize(540,400);
  newShell.setText(Messages.getString(""String_Node_Str""));
}",0.9123867069486404
129267,"public Object[] getElements(Object inputElement){
  if (inputElement != null) {
    return ((List)inputElement).toArray();
  }
  return new Object[0];
}","@Override public Object[] getElements(Object inputElement){
  if (inputElement != null) {
    return ((List)inputElement).toArray();
  }
  return new Object[0];
}",0.9681528662420382
129268,"public String getColumnText(Object element,int columnIndex){
  JobletReferenceBean bean=(JobletReferenceBean)element;
switch (columnIndex) {
case 1:
    return bean.getProjectName() + ""String_Node_Str"";
case 2:
  if (bean.isDelete()) {
    return bean.getJobName() + ""String_Node_Str"" + bean.getJobVersion()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str"";
  }
 else {
    String prefix=""String_Node_Str"";
    if (bean.getJobPath() != null && !""String_Node_Str"".equals(bean.getJobPath())) {
      prefix=bean.getJobPath() + File.separator;
    }
    return prefix + bean.getJobName() + ""String_Node_Str""+ bean.getJobVersion();
  }
case 3:
return ""String_Node_Str"" + bean.getNodeNum();
case 0:
default :
return ""String_Node_Str"";
}
}","@Override public String getColumnText(Object element,int columnIndex){
  JobletReferenceBean bean=(JobletReferenceBean)element;
switch (columnIndex) {
case 1:
    return bean.getProjectName() + ""String_Node_Str"";
case 2:
  if (bean.isDelete()) {
    return bean.getJobName() + ""String_Node_Str"" + bean.getJobVersion()+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"")+ ""String_Node_Str"";
  }
 else {
    String prefix=""String_Node_Str"";
    if (bean.getJobPath() != null && !""String_Node_Str"".equals(bean.getJobPath())) {
      prefix=bean.getJobPath() + File.separator;
    }
    return prefix + bean.getJobName() + ""String_Node_Str""+ bean.getJobVersion();
  }
case 3:
return ""String_Node_Str"" + bean.getNodeNum();
case 0:
default :
return ""String_Node_Str"";
}
}",0.9934725848563968
129269,"@SuppressWarnings(""String_Node_Str"") @Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  createMessageArea(composite);
  Label label=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  TableViewer viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.setLabelProvider(new JobletsProvide());
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((List)inputElement).toArray();
      }
      return new Object[0];
    }
  }
);
  Table table=viewer.getTable();
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.heightHint=100;
  data.widthHint=255;
  table.setLayoutData(data);
  TableColumn column;
  tableLayout.addColumnData(new ColumnPixelData(20,false));
  column=new TableColumn(table,SWT.NONE);
  column.setText(""String_Node_Str"");
  tableLayout.addColumnData(new ColumnPixelData(200,true));
  column=new TableColumn(table,SWT.NONE);
  column.setText(Messages.getString(""String_Node_Str""));
  tableLayout.addColumnData(new ColumnPixelData(200,true));
  column=new TableColumn(table,SWT.NONE);
  column.setText(Messages.getString(""String_Node_Str""));
  table.setSortColumn(column);
  tableLayout.addColumnData(new ColumnPixelData(55,true));
  column=new TableColumn(table,SWT.NONE);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setAlignment(SWT.CENTER);
  column.setToolTipText(Messages.getString(""String_Node_Str""));
  viewer.setInput(referenceList);
  return composite;
}","@SuppressWarnings(""String_Node_Str"") @Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  createMessageArea(composite);
  Label label=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  TableViewer viewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  viewer.setLabelProvider(new JobletsProvide());
  viewer.setContentProvider(new IStructuredContentProvider(){
    @Override public void dispose(){
    }
    @Override public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    @Override public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((List)inputElement).toArray();
      }
      return new Object[0];
    }
  }
);
  Table table=viewer.getTable();
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.heightHint=100;
  data.widthHint=255;
  table.setLayoutData(data);
  TableColumn column;
  tableLayout.addColumnData(new ColumnPixelData(20,false));
  column=new TableColumn(table,SWT.NONE);
  column.setText(""String_Node_Str"");
  tableLayout.addColumnData(new ColumnPixelData(200,true));
  column=new TableColumn(table,SWT.NONE);
  column.setText(Messages.getString(""String_Node_Str""));
  tableLayout.addColumnData(new ColumnPixelData(200,true));
  column=new TableColumn(table,SWT.NONE);
  column.setText(Messages.getString(""String_Node_Str""));
  table.setSortColumn(column);
  tableLayout.addColumnData(new ColumnPixelData(55,true));
  column=new TableColumn(table,SWT.NONE);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setAlignment(SWT.CENTER);
  column.setToolTipText(Messages.getString(""String_Node_Str""));
  viewer.setInput(referenceList);
  return composite;
}",0.9855721393034826
129270,"public void dispose(){
}","@Override public void dispose(){
}",0.8275862068965517
129271,"public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","@Override public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}",0.9367088607594936
129272,"@Test public void testGetDBConnectionSchema(){
  DatabaseConnection conn=mock(DatabaseConnection.class);
  IMetadataConnection metadataConnection=mock(IMetadataConnection.class);
  when(metadataConnection.getSchema()).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(ConvertionHelper.class);
  when(ConvertionHelper.convert(conn,true)).thenReturn(metadataConnection);
  Assert.assertEquals(ExtractMetaDataUtils.getDBConnectionSchema(conn),metadataConnection.getSchema());
  verify(metadataConnection,times(2)).getSchema();
}","@Test public void testGetDBConnectionSchema(){
  DatabaseConnection conn=mock(DatabaseConnection.class);
  when(conn.getUiSchema()).thenReturn(""String_Node_Str"");
  Assert.assertEquals(ExtractMetaDataUtils.getDBConnectionSchema(conn),""String_Node_Str"");
}",0.4752223634053367
129273,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setSize(540,400);
  newShell.setText(Messages.getString(""String_Node_Str""));
}",0.9123867069486404
129274,"@Test public void testGetStringMetaDataInfo_ThreeArguments4Null() throws SQLException {
  ResultSet resultSet=mock(ResultSet.class);
  DatabaseMetaData metadata=mock(DatabaseMetaData.class);
  final String infoType=""String_Node_Str"";
  Assert.assertNull(ExtractMetaDataUtils.getStringMetaDataInfo(null,null,null));
  Assert.assertNull(ExtractMetaDataUtils.getStringMetaDataInfo(null,null,metadata));
  Assert.assertNull(ExtractMetaDataUtils.getStringMetaDataInfo(null,""String_Node_Str"",metadata));
  final String value=""String_Node_Str"";
  when(resultSet.getString(anyString())).thenReturn(value);
  String actualResult=ExtractMetaDataUtils.getStringMetaDataInfo(resultSet,infoType,null);
  verify(resultSet).getString(anyString());
  Assert.assertEquals(actualResult,value);
  actualResult=ExtractMetaDataUtils.getStringMetaDataInfo(resultSet,infoType,metadata);
  verify(resultSet,times(2)).getString(anyString());
  Assert.assertEquals(actualResult,ManagementTextUtils.QUOTATION_MARK + value + ManagementTextUtils.QUOTATION_MARK);
}","@Test public void testGetStringMetaDataInfo_ThreeArguments4Null() throws SQLException {
  ResultSet resultSet=mock(ResultSet.class);
  DatabaseMetaData metadata=mock(DatabaseMetaData.class);
  final String infoType=""String_Node_Str"";
  Assert.assertNull(ExtractMetaDataUtils.getStringMetaDataInfo(null,null,null));
  Assert.assertNull(ExtractMetaDataUtils.getStringMetaDataInfo(null,null,metadata));
  Assert.assertNull(ExtractMetaDataUtils.getStringMetaDataInfo(null,""String_Node_Str"",metadata));
  final String value=""String_Node_Str"";
  when(resultSet.getString(anyString())).thenReturn(value);
  String actualResult=ExtractMetaDataUtils.getStringMetaDataInfo(resultSet,infoType,null);
  verify(resultSet).getString(anyString());
  Assert.assertEquals(actualResult,value);
  actualResult=ExtractMetaDataUtils.getStringMetaDataInfo(resultSet,infoType,metadata);
  verify(resultSet,times(2)).getString(anyString());
  Assert.assertEquals(actualResult,value);
}",0.9629258517034068
129275,"public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      if (children[i] instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)children[i];
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}","public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (    Object element : children) {
      if (element instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)element;
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}",0.972913211719182
129276,"public static XSDSchema getXSDSchema(String fileName){
  XSDSchema schema=null;
  try {
    String newFilePath;
    try {
      newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
    }
 catch (    PersistenceException e1) {
      newFilePath=fileName;
    }
    schema=new XSDPopulationUtil2().getXSDSchema(newFilePath);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}","public static XSDSchema getXSDSchema(String fileName){
  XSDSchema schema=null;
  try {
    if (fileName.endsWith(""String_Node_Str"")) {
      Project project=ProjectManager.getInstance().getCurrentProject();
      IProject fsProject=null;
      try {
        fsProject=ResourceModelUtils.getProject(project);
      }
 catch (      PersistenceException e2) {
        ExceptionHandler.process(e2);
      }
      IPath path=new Path(fsProject.getLocationURI().getPath());
      path=path.append(""String_Node_Str"").append(""String_Node_Str"" + new Path(fileName).lastSegment());
      String unzipPath=path.toPortableString();
      File zip=new File(fileName);
      if (zip.exists()) {
        try {
          FilesUtils.unzip(zip.getAbsolutePath(),unzipPath);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      File unzipFile=new File(unzipPath);
      XSDPopulationUtil2 popUtil=new XSDPopulationUtil2();
      if (unzipFile.exists() && unzipFile.isDirectory()) {
        File[] tempXSDFiles=unzipFile.listFiles();
        for (        File tempXSDFile : tempXSDFiles) {
          popUtil.addSchema(tempXSDFile.getAbsolutePath());
        }
        schema=popUtil.getXSDSchema(tempXSDFiles[0].getAbsolutePath());
      }
    }
 else {
      String newFilePath;
      try {
        newFilePath=CopyDeleteFileUtilForWizard.copyToTemp(fileName);
      }
 catch (      PersistenceException e1) {
        newFilePath=fileName;
      }
      schema=new XSDPopulationUtil2().getXSDSchema(newFilePath);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return schema;
}",0.3888888888888889
129277,"public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null)     return null;
    URL fileUrl=FileLocator.find(b,new Path(""String_Node_Str""),null);
    if (fileUrl == null) {
      return null;
    }
    URL url=FileLocator.toFileURL(fileUrl);
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null) {
      return null;
    }
    URL fileUrl=FileLocator.find(b,new Path(""String_Node_Str""),null);
    if (fileUrl == null) {
      return null;
    }
    URL url=FileLocator.toFileURL(fileUrl);
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.9821731748726656
129278,"public void focusGained(FocusEvent e){
}","@Override public void focusGained(FocusEvent e){
}",0.8888888888888888
129279,"public void widgetSelected(SelectionEvent e){
  xmlXsdFilePath.setEditable(true);
  String text=xmlXsdFilePath.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  getConnection().setXmlFilePath(text);
  updateConnection(text);
  encodingCombo.setEnabled(true);
  commonNodesLimitation.setEditable(true);
  availableXmlTree.setEnabled(true);
  fileContentText.setEnabled(true);
  fileContentText.setEditable(false);
  checkFieldsValue();
}","@Override public void widgetSelected(SelectionEvent e){
  xmlXsdFilePath.setEditable(true);
  String text=xmlXsdFilePath.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  getConnection().setXmlFilePath(text);
  updateConnection(text);
  encodingCombo.setEnabled(true);
  commonNodesLimitation.setEditable(true);
  availableXmlTree.setEnabled(true);
  fileContentText.setEnabled(true);
  fileContentText.setEditable(false);
  checkFieldsValue();
}",0.9923312883435584
129280,"@Override protected void addUtilsButtonListeners(){
  noFileButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(false);
      xmlXsdFilePath.setText(""String_Node_Str"");
      encodingCombo.setEnabled(false);
      commonNodesLimitation.setEditable(false);
      availableXmlTree.setEnabled(false);
      fileContentText.setEnabled(false);
      getConnection().setXmlFilePath(""String_Node_Str"");
      ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns().clear();
      getConnection().getRoot().clear();
      getConnection().getLoop().clear();
      getConnection().getGroup().clear();
      checkFieldsValue();
    }
  }
);
  useFileButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(true);
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      getConnection().setXmlFilePath(text);
      updateConnection(text);
      encodingCombo.setEnabled(true);
      commonNodesLimitation.setEditable(true);
      availableXmlTree.setEnabled(true);
      fileContentText.setEnabled(true);
      fileContentText.setEditable(false);
      checkFieldsValue();
    }
  }
);
}","@Override protected void addUtilsButtonListeners(){
  noFileButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(false);
      xmlXsdFilePath.setText(""String_Node_Str"");
      encodingCombo.setEnabled(false);
      commonNodesLimitation.setEditable(false);
      availableXmlTree.setEnabled(false);
      fileContentText.setEnabled(false);
      getConnection().setXmlFilePath(""String_Node_Str"");
      ConnectionHelper.getTables(getConnection()).toArray(new MetadataTable[0])[0].getColumns().clear();
      getConnection().getRoot().clear();
      getConnection().getLoop().clear();
      getConnection().getGroup().clear();
      checkFieldsValue();
    }
  }
);
  useFileButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      xmlXsdFilePath.setEditable(true);
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      getConnection().setXmlFilePath(text);
      updateConnection(text);
      encodingCombo.setEnabled(true);
      commonNodesLimitation.setEditable(true);
      availableXmlTree.setEnabled(true);
      fileContentText.setEnabled(true);
      fileContentText.setEditable(false);
      checkFieldsValue();
    }
  }
);
}",0.9935316946959896
129281,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
129282,"@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  xmlXsdFilePath.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (xmlXsdFilePath.getResult() == null) {
        return;
      }
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        if (XmlUtil.isXSDFile(text)) {
          try {
            XSDSchema xsdSchema=updateXSDSchema(text);
            List<ATreeNode> list=updateRootNodes(xsdSchema,true);
            if (list.size() > 1) {
              RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
              if (dialog.open() == IDialogConstants.OK_ID) {
                ATreeNode selectedNode=dialog.getSelectedNode();
                valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              }
 else {
                return;
              }
            }
 else {
              valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          valid=treePopulator.populateTree(text,treeNode);
        }
        if (treeNodes.size() > 0) {
          treeNode=treeNodes.get(0);
        }
        updateConnection(text);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  xmlXsdFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      String text=xmlXsdFilePath.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        getConnection().getRoot().clear();
        getConnection().getGroup().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(xmlXsdFilePath.getText()));
      StringBuilder fileContent=new StringBuilder();
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e) {
            ExceptionHandler.process(e);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      String str;
      try {
        Charset guessCharset=CharsetToolkit.guessEncoding(file,4096);
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessCharset.displayName()));
        while ((str=in.readLine()) != null) {
          fileContent.append(str + ""String_Node_Str"");
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
        fileContentText.setText(new String(fileContent));
      }
 catch (      Exception e) {
        String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + xmlXsdFilePath.getText().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        if (e instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (e instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        fileContentText.setText(msgError);
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !""String_Node_Str"".equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
      }
      valid=treePopulator.populateTree(xmlXsdFilePath.getText(),treeNode);
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
    }
  }
);
  outputFilePath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
      checkFieldsValue();
    }
  }
);
}",0.9945310363686082
129283,"public void modifyText(ModifyEvent e){
  getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
  checkFieldsValue();
}","@Override public void modifyText(ModifyEvent e){
  getConnection().setOutputFilePath(PathUtils.getPortablePath(outputFilePath.getText()));
  checkFieldsValue();
}",0.9681528662420382
129284,"public void focusLost(FocusEvent e){
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
}","@Override public void focusLost(FocusEvent e){
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
}",0.9576271186440678
129285,"private void initFileContent(){
  if (getConnection().getXmlFilePath() == null || ""String_Node_Str"".equals(getConnection().getXmlFilePath())) {
    return;
  }
  byte[] bytes=getConnection().getFileContent();
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return;
  }
  String temPath=fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str"";
  String fileName=""String_Node_Str"";
  String xmlXsdPath=getConnection().getXmlFilePath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdPath));
  }
  if (xmlXsdPath != null && XmlUtil.isXMLFile(xmlXsdPath)) {
    fileName=StringUtil.TMP_XML_FILE;
  }
 else   if (xmlXsdPath != null && XmlUtil.isXSDFile(xmlXsdPath)) {
    fileName=StringUtil.TMP_XSD_FILE;
  }
  File temfile=new File(temPath + File.separator + fileName);
  if (!temfile.exists()) {
    try {
      temfile.createNewFile();
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  FileOutputStream outStream;
  try {
    outStream=new FileOutputStream(temfile);
    outStream.write(bytes);
    outStream.close();
  }
 catch (  FileNotFoundException e1) {
    ExceptionHandler.process(e1);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  tempXmlXsdPath=temfile.getPath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    tempXmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,tempXmlXsdPath));
  }
}","private void initFileContent(){
  if (getConnection().getXmlFilePath() == null || ""String_Node_Str"".equals(getConnection().getXmlFilePath())) {
    return;
  }
  byte[] bytes=getConnection().getFileContent();
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return;
  }
  String temPath=fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str"";
  String fileName=""String_Node_Str"";
  String xmlXsdPath=getConnection().getXmlFilePath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdPath));
  }
  if (xmlXsdPath != null && XmlUtil.isXMLFile(xmlXsdPath)) {
    fileName=StringUtil.TMP_XML_FILE;
  }
 else   if (xmlXsdPath != null && XmlUtil.isXSDFile(xmlXsdPath)) {
    fileName=new Path(xmlXsdPath).lastSegment();
  }
 else   if (xmlXsdPath.contains(""String_Node_Str"")) {
    fileName=new Path(xmlXsdPath).lastSegment();
  }
  File temfile=new File(temPath + File.separator + fileName);
  if (!temfile.exists()) {
    try {
      temfile.createNewFile();
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  FileOutputStream outStream;
  try {
    outStream=new FileOutputStream(temfile);
    outStream.write(bytes);
    outStream.close();
  }
 catch (  FileNotFoundException e1) {
    ExceptionHandler.process(e1);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  tempXmlXsdPath=temfile.getPath();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    tempXmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,tempXmlXsdPath));
  }
}",0.9601814516129032
129286,"@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath)) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}","@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath) || xmlXsdPath.endsWith(""String_Node_Str"")) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        getTreeNode(xsdSchema);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}",0.83261105092091
129287,"/** 
 * cli Comment method ""retrieveSchemaPatternForAS400"". bug 12179
 */
public static String retrieveSchemaPatternForAS400(String url){
  String libsPattern=""String_Node_Str"";
  Pattern regex=Pattern.compile(libsPattern + ""String_Node_Str"",Pattern.CANON_EQ | Pattern.CASE_INSENSITIVE);
  Matcher regexMatcher=regex.matcher(url);
  Set<String> libs=new HashSet<String>();
  while (regexMatcher.find()) {
    String str=regexMatcher.group();
    if (str != null && !""String_Node_Str"".equals(str.trim())) {
      Pattern libP=Pattern.compile(libsPattern + ""String_Node_Str"");
      Matcher libMatcher=libP.matcher(str.trim());
      if (libMatcher.find()) {
        String libStr=libMatcher.group(1);
        if (libStr != null) {
          libStr=libStr.trim();
          if (libStr.endsWith(""String_Node_Str"")) {
            libStr=libStr.substring(0,libStr.length() - 1);
          }
          libStr=libStr.trim();
          if (!libStr.equals(""String_Node_Str"")) {
            String[] multiSchems=getMultiSchems(libStr);
            if (multiSchems != null) {
              for (              String s : multiSchems) {
                if (s != null) {
                  libs.add(s.trim());
                }
              }
            }
          }
        }
      }
    }
  }
  if (!libs.isEmpty()) {
    StringBuffer sb=new StringBuffer();
    int index=0;
    for (    String lib : libs) {
      sb.append(lib);
      if (index < libs.size() - 1) {
        sb.append(SPLIT_CHAR);
      }
      index++;
    }
    return sb.toString();
  }
 else {
    return null;
  }
}","/** 
 * cli Comment method ""retrieveSchemaPatternForAS400"". bug 12179
 */
public static String retrieveSchemaPatternForAS400(String url){
  if (url == null || ""String_Node_Str"".equals(url)) {
    return null;
  }
  String libsPattern=""String_Node_Str"";
  Pattern regex=Pattern.compile(libsPattern + ""String_Node_Str"",Pattern.CANON_EQ | Pattern.CASE_INSENSITIVE);
  Matcher regexMatcher=regex.matcher(url);
  Set<String> libs=new HashSet<String>();
  while (regexMatcher.find()) {
    String str=regexMatcher.group();
    if (str != null && !""String_Node_Str"".equals(str.trim())) {
      Pattern libP=Pattern.compile(libsPattern + ""String_Node_Str"");
      Matcher libMatcher=libP.matcher(str.trim());
      if (libMatcher.find()) {
        String libStr=libMatcher.group(1);
        if (libStr != null) {
          libStr=libStr.trim();
          if (libStr.endsWith(""String_Node_Str"")) {
            libStr=libStr.substring(0,libStr.length() - 1);
          }
          libStr=libStr.trim();
          if (!libStr.equals(""String_Node_Str"")) {
            String[] multiSchems=getMultiSchems(libStr);
            if (multiSchems != null) {
              for (              String s : multiSchems) {
                if (s != null) {
                  libs.add(s.trim());
                }
              }
            }
          }
        }
      }
    }
  }
  if (!libs.isEmpty()) {
    StringBuffer sb=new StringBuffer();
    int index=0;
    for (    String lib : libs) {
      sb.append(lib);
      if (index < libs.size() - 1) {
        sb.append(SPLIT_CHAR);
      }
      index++;
    }
    return sb.toString();
  }
 else {
    return null;
  }
}",0.9767873723305478
129288,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setSize(540,400);
  newShell.setText(Messages.getString(""String_Node_Str""));
}",0.9123867069486404
129289,"public Color getForeground(Object element,int columnIndex){
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getColorProvider() != null) {
    return column.getColorProvider().getForegroundColor(element);
  }
  return null;
}","@Override public Color getForeground(Object element,int columnIndex){
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getColorProvider() != null) {
    return column.getColorProvider().getForegroundColor(element);
  }
  return null;
}",0.9850746268656716
129290,"public Image getColumnImage(Object element,int columnIndex){
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getImageProvider() != null) {
    return column.getImageProvider().getImage(element);
  }
  return null;
}","@Override public Image getColumnImage(Object element,int columnIndex){
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getImageProvider() != null) {
    return column.getImageProvider().getImage(element);
  }
  return null;
}",0.9846625766871164
129291,"public String getColumnText(Object element,int columnIndex){
  String returnValue=null;
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getLabelProvider() != null) {
    returnValue=column.getLabelProvider().getLabel(element);
  }
  if (returnValue == null) {
    if (column.getDisplayedValue() != null || column.getDefaultDisplayedValue() != null || column.getBeanPropertyAccessors() == null) {
      String defaultValue=column.getDefaultDisplayedValue();
      String imposedDisplayedValue=column.getDisplayedValue();
      if (imposedDisplayedValue != null) {
        returnValue=imposedDisplayedValue;
      }
 else       if (defaultValue == null) {
        returnValue=""String_Node_Str"";
      }
 else {
        returnValue=defaultValue;
      }
    }
 else {
      Object value=AccessorUtils.get(element,column);
      CellEditor cellEditor=column.getCellEditor();
      CellEditorValueAdapter retrieverValue=column.getCellEditorValueAdapter();
      if (cellEditor != null && retrieverValue != null && value != null) {
        returnValue=retrieverValue.getColumnText(cellEditor,element,value);
      }
 else       if (value != null) {
        returnValue=String.valueOf(value);
      }
 else {
        returnValue=""String_Node_Str"";
      }
    }
  }
  return returnValue;
}","@Override public String getColumnText(Object element,int columnIndex){
  String returnValue=null;
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getLabelProvider() != null) {
    returnValue=column.getLabelProvider().getLabel(element);
  }
  if (returnValue == null) {
    if (column.getDisplayedValue() != null || column.getDefaultDisplayedValue() != null || column.getBeanPropertyAccessors() == null) {
      String defaultValue=column.getDefaultDisplayedValue();
      String imposedDisplayedValue=column.getDisplayedValue();
      if (imposedDisplayedValue != null) {
        returnValue=imposedDisplayedValue;
      }
 else       if (defaultValue == null) {
        returnValue=""String_Node_Str"";
      }
 else {
        returnValue=defaultValue;
      }
    }
 else {
      Object value=AccessorUtils.get(element,column);
      CellEditor cellEditor=column.getCellEditor();
      CellEditorValueAdapter retrieverValue=column.getCellEditorValueAdapter();
      if (value != null && column.getCellEditorValueAdapter() != null && column.getCellEditorValueAdapter() instanceof ComboEditorValueAdapter) {
        Object returnObject=column.getCellEditorValueAdapter().getCellEditorTypedValue(column.getCellEditor(),value);
        if (""String_Node_Str"".equals(returnObject + ""String_Node_Str"")) {
          return ""String_Node_Str"";
        }
      }
      if (cellEditor != null && retrieverValue != null && value != null) {
        returnValue=retrieverValue.getColumnText(cellEditor,element,value);
      }
 else       if (value != null) {
        returnValue=String.valueOf(value);
      }
 else {
        returnValue=""String_Node_Str"";
      }
    }
  }
  return returnValue;
}",0.8225298930144745
129292,"public void dispose(){
}","@Override public void dispose(){
}",0.8275862068965517
129293,"public void removeListener(ILabelProviderListener lpl){
}","@Override public void removeListener(ILabelProviderListener lpl){
}",0.9193548387096774
129294,"public boolean isLabelProperty(Object element,String property){
  return false;
}","@Override public boolean isLabelProperty(Object element,String property){
  return false;
}",0.9418604651162792
129295,"public Color getBackground(Object element,int columnIndex){
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getColorProvider() != null) {
    return column.getColorProvider().getBackgroundColor(element);
  }
  return null;
}","@Override public Color getBackground(Object element,int columnIndex){
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getColorProvider() != null) {
    return column.getColorProvider().getBackgroundColor(element);
  }
  return null;
}",0.9850746268656716
129296,"public void addListener(ILabelProviderListener listener){
}","@Override public void addListener(ILabelProviderListener listener){
}",0.921875
129297,"private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  return result;
}","private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    if (column.getTaggedValue().size() > 0) {
      for (      TaggedValue tv : column.getTaggedValue()) {
        String additionalTag=tv.getTag();
        if (additionalTag.startsWith(""String_Node_Str"")) {
          String[] splits=additionalTag.split(""String_Node_Str"");
          additionalTag=splits[1];
        }
        newColumn.getAdditionalField().put(additionalTag,tv.getValue());
      }
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  return result;
}",0.9244791666666666
129298,"/** 
 * DOC ggu Comment method ""testReturnColumns4reCreateConnection"". test when the dontCreateClose is true
 * @throws Exception
 */
public void testReturnColumns4reCreateConnection() throws Exception {
  PTODO();
}","/** 
 * DOC ggu Comment method ""testReturnColumns4reCreateConnection"". test when the dontCreateClose is true
 * @throws Exception
 */
@Test public void testReturnColumns4reCreateConnection() throws Exception {
  Assert.assertNotNull(getExtractManger());
  Connection conn=mockConnection4ReturnColumns4reCreateConnection();
  ExtractMetaDataUtils.conn=conn;
  IMetadataConnection metadataConn=mockMetadataConnection4ReturnColumns4reCreateConnection();
  DatabaseMetaData dbMetadata=mockDatabaseMetaData4ReturnColumns4reCreateConnection();
  when(conn.getMetaData()).thenReturn(dbMetadata);
  ResultSet getColumnsResultSet=mockGetColumnsResultSet4ReturnColumns4reCreateConnection();
  doReturn(getColumnsResultSet).when(dbMetadata).getColumns(anyString(),anyString(),anyString(),anyString());
  TableNode tableNode=mockTableNode4ReturnColumns4reCreateConnection();
  TdTable tdTable=mockTable4ReturnColumns4reCreateConnection();
  when(tableNode.getTable()).thenReturn(tdTable);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  List conList=new ArrayList();
  conList.add(conn);
  DriverShim wapperDriver=mock(DriverShim.class);
  conList.add(wapperDriver);
  when(ExtractMetaDataUtils.getConnection(anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString(),anyString())).thenReturn(conList);
  when(ExtractMetaDataUtils.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase())).thenReturn(dbMetadata);
  List<TdColumn> columns=getExtractManger().returnColumns(metadataConn,tableNode,false);
  Assert.assertNotNull(columns);
  Assert.assertTrue(columns.isEmpty());
  ExtractMetaDataUtils.conn=null;
}",0.2200208550573514
129299,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (!schemaname.contains(""String_Node_Str"") && !schemaname.contains(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.994008432576374
129300,"/** 
 * DOC ggu Comment method ""testReturnTablesFormConnection"".
 * @see ExtractManager.returnTablesFormConnection(IMetadataConnection, TableInfoParameters)
 * @throws Exception
 */
public void testReturnTablesFormConnection() throws Exception {
  PTODO();
}","/** 
 * DOC ggu Comment method ""testReturnTablesFormConnection"".
 * @see ExtractManager.returnTablesFormConnection(IMetadataConnection, TableInfoParameters)
 * @throws Exception
 */
@Test public void testReturnTablesFormConnection() throws Exception {
  Assert.assertNotNull(getExtractManger());
  IMetadataConnection metadataConn=mockMetadataConnection4ReturnTablesFormConnection();
  Connection conn=mockConnection4ReturnTablesFormConnection();
  ExtractMetaDataUtils.conn=conn;
  ExtractMetaDataUtils.isReconnect=false;
  DatabaseMetaData dbMetadata=mockDatabaseMetaData4ReturnTablesFormConnection();
  when(conn.getMetaData()).thenReturn(dbMetadata);
  ResultSet resultSet=mockGetColumnsResultSet4ReturnTablesFormConnection();
  when(dbMetadata.getTableTypes()).thenReturn(resultSet);
  final String value=""String_Node_Str"";
  when(resultSet.getString(anyString())).thenReturn(value);
  TableInfoParameters tableInfoParameters=mock(TableInfoParameters.class);
  when(tableInfoParameters.isUsedName()).thenReturn(false);
  when(tableInfoParameters.getSqlFiter()).thenReturn(""String_Node_Str"");
  List connList=getExtractManger().returnTablesFormConnection(metadataConn,tableInfoParameters);
  Assert.assertNotNull(connList);
  Assert.assertTrue(connList.isEmpty());
  ExtractMetaDataUtils.conn=null;
}",0.323943661971831
129301,"@Override public void testReturnColumns4DontCreateConnection() throws Exception {
  PTODO();
}","@Override @Test public void testReturnColumns4DontCreateConnection() throws Exception {
  Assert.assertNotNull(getExtractManger());
  Connection conn=mockConnection4ReturnColumns();
  ExtractMetaDataUtils.conn=conn;
  SASDataBaseMetadata dbMetadata=mockDatabaseMetaData4ReturnColumns();
  when(conn.getMetaData()).thenReturn(dbMetadata);
  SASResultSet getColumnsResultSet=mockGetColumnsResultSet4ReturnColumns();
  doReturn(getColumnsResultSet).when(dbMetadata).getColumns(anyString(),anyString(),anyString(),anyString());
  IMetadataConnection metadataConn=mockMetadataConnection4ReturnColumns();
  TableNode tableNode=mockTableNode4ReturnColumns();
  TdTable tdTable=mockTable4ReturnColumns();
  when(tableNode.getTable()).thenReturn(tdTable);
  List<TdColumn> columns=getExtractManger().returnColumns(metadataConn,tableNode,true);
  Assert.assertNotNull(columns);
  Assert.assertTrue(columns.isEmpty());
  verifyTableNode4ReturnColumns4DontCreateConnection(tableNode);
  verifyMeatadataConnection4ReturnColumns4DontCreateConnection(metadataConn);
  verifyConnection4ReturnColumns4DontCreateConnection(conn);
  ExtractMetaDataUtils.conn=null;
}",0.1434327155519742
129302,"public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      throw new RuntimeException(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      s=(Socket)object;
    }
    OutputStream output=s.getOutputStream();
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  s=new Socket(clientHost,portStats);
  GlobalResource.resourceMap.put(portStats,s);
  OutputStream output=s.getOutputStream();
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  System.out.println(""String_Node_Str"");
  Thread t=new Thread(this);
  t.start();
}","public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    OutputStream output=null;
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      System.err.println(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
      output=System.out;
    }
 else {
      s=(Socket)object;
      output=s.getOutputStream();
    }
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  boolean isConnect=false;
  OutputStream output=null;
  try {
    s=new Socket(clientHost,portStats);
    isConnect=true;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + clientHost + ""String_Node_Str""+ portStats+ ""String_Node_Str"");
  }
  if (isConnect) {
    GlobalResource.resourceMap.put(portStats,s);
    output=s.getOutputStream();
    System.out.println(""String_Node_Str"");
  }
 else {
    output=System.out;
    System.out.println(""String_Node_Str"");
  }
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  Thread t=new Thread(this);
  t.start();
}",0.4232456140350877
129303,"public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","@Override public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.982078853046595
129304,"public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(SQLServerException.class.toString())) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      schemaRs=dbJDBCMetadata.getSchemas();
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  try {
    while (schemaRs.next()) {
      String schemaName=null;
      String catalogName=null;
      try {
        schemaName=schemaRs.getString(MetaDataConstants.TABLE_SCHEM.name());
        if (!MetadataConnectionUtils.isPostgresql(dbJDBCMetadata)) {
          catalogName=schemaRs.getString(MetaDataConstants.TABLE_CATALOG.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata) && dbJDBCMetadata.getDatabaseMajorVersion() > 8 && dbJDBCMetadata.getDriverMajorVersion() > 1) {
          if (catalogName != null && catalogName != schemaName) {
            schemaName=catalogName;
          }
        }
        if (schemaName == null || !MetadataConnectionUtils.isMssql(dbJDBCMetadata.getConnection()) && catalogName != null && !catalogName.equals(catalog.getName())) {
          continue;
        }
      }
 catch (      Exception e) {
      }
      if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
        schemaNameCacheTmp.add(schemaName);
        Schema schema=SchemaHelper.createSchema(schemaName);
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        schemaList.add(schema);
      }
    }
    schemaRs.close();
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(e,e);
    }
  }
  return schemaList;
}","public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(""String_Node_Str"")) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      schemaRs=dbJDBCMetadata.getSchemas();
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  try {
    while (schemaRs.next()) {
      String schemaName=null;
      String catalogName=null;
      try {
        schemaName=schemaRs.getString(MetaDataConstants.TABLE_SCHEM.name());
        if (!MetadataConnectionUtils.isPostgresql(dbJDBCMetadata)) {
          catalogName=schemaRs.getString(MetaDataConstants.TABLE_CATALOG.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata) && dbJDBCMetadata.getDatabaseMajorVersion() > 8 && dbJDBCMetadata.getDriverMajorVersion() > 1) {
          if (catalogName != null && catalogName != schemaName) {
            schemaName=catalogName;
          }
        }
        if (schemaName == null || !MetadataConnectionUtils.isMssql(dbJDBCMetadata.getConnection()) && catalogName != null && !catalogName.equals(catalog.getName())) {
          continue;
        }
      }
 catch (      Exception e) {
      }
      if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
        schemaNameCacheTmp.add(schemaName);
        Schema schema=SchemaHelper.createSchema(schemaName);
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        schemaList.add(schema);
      }
    }
    schemaRs.close();
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(e,e);
    }
  }
  return schemaList;
}",0.9897557131599684
129305,"public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      throw new RuntimeException(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      s=(Socket)object;
    }
    OutputStream output=s.getOutputStream();
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  s=new Socket(clientHost,portStats);
  GlobalResource.resourceMap.put(portStats,s);
  OutputStream output=s.getOutputStream();
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  System.out.println(""String_Node_Str"");
  Thread t=new Thread(this);
  t.start();
}","public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    OutputStream output=null;
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      System.err.println(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
      output=System.err;
    }
 else {
      s=(Socket)object;
      output=s.getOutputStream();
    }
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  boolean isConnect=false;
  OutputStream output=null;
  try {
    s=new Socket(clientHost,portStats);
    isConnect=true;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + clientHost + ""String_Node_Str""+ portStats+ ""String_Node_Str"");
  }
  if (isConnect) {
    GlobalResource.resourceMap.put(portStats,s);
    output=s.getOutputStream();
    System.out.println(""String_Node_Str"");
  }
 else {
    output=System.err;
    System.out.println(""String_Node_Str"");
  }
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  Thread t=new Thread(this);
  t.start();
}",0.4232456140350877
129306,"/** 
 * DOC ggu Comment method ""testReturnColumns4DontCreateConnection2TableTypeSynonym"". test for the Synonym
 * @throws Exception
 */
public void testReturnColumns4DontCreateConnection2TableTypeSynonym() throws Exception {
  PTODO();
}","/** 
 * DOC ggu Comment method ""testReturnColumns4DontCreateConnection2TableTypeSynonym"". test for the Synonym
 * @throws Exception
 */
@Test public void testReturnColumns4DontCreateConnection2TableTypeSynonym() throws Exception {
  Assert.assertNotNull(getExtractManger());
  Connection conn=mockConnection4ReturnColumns();
  ExtractMetaDataUtils.conn=conn;
  DatabaseMetaData dbMetadata=mockDatabaseMetaData4ReturnColumns();
  when(conn.getMetaData()).thenReturn(dbMetadata);
  ResultSet getColumnsResultSet=mockGetColumnsResultSet4ReturnColumns();
  doReturn(getColumnsResultSet).when(dbMetadata).getColumns(anyString(),anyString(),anyString(),anyString());
  IMetadataConnection metadataConn=mockMetadataConnection4ReturnColumns();
  TableNode tableNode=mockTableNode4ReturnColumns2TableTypeSynonym();
  TdTable tdTable=mockTable4ReturnColumns();
  when(tableNode.getTable()).thenReturn(tdTable);
  List<TdColumn> columns=getExtractManger().returnColumns(metadataConn,tableNode,true);
  Assert.assertNotNull(columns);
  Assert.assertTrue(columns.isEmpty());
  verifyTableNode4ReturnColumns2TableTypeSynonym(tableNode);
  verifyMeatadataConnection4ReturnColumns4DontCreateConnection(metadataConn);
  verifyConnection4ReturnColumns4DontCreateConnection(conn);
  ExtractMetaDataUtils.conn=null;
}",0.3011734028683181
129307,"public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    OutputStream output=null;
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      System.err.println(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
      output=System.err;
    }
 else {
      s=(Socket)object;
      output=s.getOutputStream();
    }
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  boolean isConnect=false;
  OutputStream output=null;
  try {
    s=new Socket(clientHost,portStats);
    isConnect=true;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + clientHost + ""String_Node_Str""+ portStats+ ""String_Node_Str"");
  }
  if (isConnect) {
    GlobalResource.resourceMap.put(portStats,s);
    output=s.getOutputStream();
    System.out.println(""String_Node_Str"");
  }
 else {
    output=System.err;
    System.out.println(""String_Node_Str"");
  }
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  Thread t=new Thread(this);
  t.start();
}","public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    OutputStream output=null;
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      System.err.println(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
      output=System.out;
    }
 else {
      s=(Socket)object;
      output=s.getOutputStream();
    }
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  boolean isConnect=false;
  OutputStream output=null;
  try {
    s=new Socket(clientHost,portStats);
    isConnect=true;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + clientHost + ""String_Node_Str""+ portStats+ ""String_Node_Str"");
  }
  if (isConnect) {
    GlobalResource.resourceMap.put(portStats,s);
    output=s.getOutputStream();
    System.out.println(""String_Node_Str"");
  }
 else {
    output=System.out;
    System.out.println(""String_Node_Str"");
  }
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  Thread t=new Thread(this);
  t.start();
}",0.996116504854369
129308,"public void fatalError(final SAXParseException exception) throws SAXException {
  throw exception;
}","@Override public void fatalError(final SAXParseException exception) throws SAXException {
  throw exception;
}",0.9523809523809524
129309,"public void error(final SAXParseException exception) throws SAXException {
  throw exception;
}","@Override public void error(final SAXParseException exception) throws SAXException {
  throw exception;
}",0.95
129310,"/** 
 * Export SchemaTarget to the specified file.
 * @param file to save
 * @param table to export
 * @return boolean result
 * @throws IOException if file cannot be saved
 * @throws ParserConfigurationException if dom is not fully respected
 */
public static boolean saveSchemaTargetToFile(File file,org.talend.core.model.metadata.builder.connection.MetadataSchema table) throws IOException, ParserConfigurationException {
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(TARGETSCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    Document document=analyseur.newDocument();
    Element racine=document.createElement(""String_Node_Str"");
    document.appendChild(racine);
    for (    Object list : table.getSchemaTargets()) {
      SchemaTarget schemaTarget=(SchemaTarget)list;
      Element column=document.createElement(""String_Node_Str"");
      racine.appendChild(column);
      Attr xPathQuery=document.createAttribute(""String_Node_Str"");
      xPathQuery.setNodeValue(schemaTarget.getRelativeXPathQuery());
      column.setAttributeNode(xPathQuery);
      Attr tagName=document.createAttribute(""String_Node_Str"");
      tagName.setNodeValue(String.valueOf(schemaTarget.getTagName()));
      column.setAttributeNode(tagName);
    }
    XMLSerializer serializer=new XMLSerializer();
    serializer.setOutputCharStream(new java.io.FileWriter(file));
    serializer.serialize(document);
    return true;
  }
  return false;
}","/** 
 * Export SchemaTarget to the specified file.
 * @param file to save
 * @param table to export
 * @return boolean result
 * @throws IOException if file cannot be saved
 * @throws ParserConfigurationException if dom is not fully respected
 */
public static boolean saveSchemaTargetToFile(File file,org.talend.core.model.metadata.builder.connection.MetadataSchema table) throws IOException, ParserConfigurationException {
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(TARGETSCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    Document document=analyseur.newDocument();
    Element racine=document.createElement(""String_Node_Str"");
    document.appendChild(racine);
    for (    Object list : table.getSchemaTargets()) {
      SchemaTarget schemaTarget=(SchemaTarget)list;
      Element column=document.createElement(""String_Node_Str"");
      racine.appendChild(column);
      Attr xPathQuery=document.createAttribute(""String_Node_Str"");
      xPathQuery.setNodeValue(schemaTarget.getRelativeXPathQuery());
      column.setAttributeNode(xPathQuery);
      Attr tagName=document.createAttribute(""String_Node_Str"");
      tagName.setNodeValue(String.valueOf(schemaTarget.getTagName()));
      column.setAttributeNode(tagName);
    }
    XMLSerializer serializer=new XMLSerializer();
    serializer.setOutputCharStream(new java.io.FileWriter(file));
    serializer.serialize(document);
    return true;
  }
  return false;
}",0.9934354485776804
129311,"/** 
 * qzhang Comment method ""saveColumnsToFile"".
 * @param file
 * @param table
 * @return
 * @throws IOException
 * @throws ParserConfigurationException
 */
public boolean saveColumnsToFile(File file,IMetadataTable table) throws IOException, ParserConfigurationException {
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    Document document=analyseur.newDocument();
    Element racine=document.createElement(""String_Node_Str"");
    document.appendChild(racine);
    if (table.getDbms() != null && table.getDbms().trim() != ""String_Node_Str"") {
      Attr dbmsId=document.createAttribute(""String_Node_Str"");
      dbmsId.setNodeValue(table.getDbms());
      racine.setAttributeNode(dbmsId);
    }
    for (    IMetadataColumn metadataColumn : table.getListColumns()) {
      Element column=document.createElement(""String_Node_Str"");
      racine.appendChild(column);
      saveOneColumn(document,metadataColumn,column);
    }
    saveDocumentByEncoding(document,file);
    return true;
  }
  return false;
}","/** 
 * qzhang Comment method ""saveColumnsToFile"".
 * @param file
 * @param table
 * @return
 * @throws IOException
 * @throws ParserConfigurationException
 */
public boolean saveColumnsToFile(File file,IMetadataTable table) throws IOException, ParserConfigurationException {
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    Document document=analyseur.newDocument();
    Element racine=document.createElement(""String_Node_Str"");
    document.appendChild(racine);
    if (table.getDbms() != null && table.getDbms().trim() != ""String_Node_Str"") {
      Attr dbmsId=document.createAttribute(""String_Node_Str"");
      dbmsId.setNodeValue(table.getDbms());
      racine.setAttributeNode(dbmsId);
    }
    for (    IMetadataColumn metadataColumn : table.getListColumns()) {
      Element column=document.createElement(""String_Node_Str"");
      racine.appendChild(column);
      saveOneColumn(document,metadataColumn,column);
    }
    saveDocumentByEncoding(document,file);
    return true;
  }
  return false;
}",0.9921834288692029
129312,"/** 
 * Initalize SchemaTargets available in a file.
 * @param file where SchemaTargets data are available
 * @return MetadataSchema setted with datas from file
 * @throws ParserConfigurationException if dom exception occured
 * @throws SAXException if sax exception occured
 * @throws IOException if file cannot be read
 */
private static List<org.talend.core.model.metadata.builder.connection.SchemaTarget> initializeSchemaTarget2(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.SchemaTarget> listSchemaTargets=new ArrayList<org.talend.core.model.metadata.builder.connection.SchemaTarget>();
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(TARGETSCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node xPathQuery=nodeMap.getNamedItem(""String_Node_Str"");
      final Node tagName=nodeMap.getNamedItem(""String_Node_Str"");
      schemaTarget.setRelativeXPathQuery(xPathQuery.getNodeValue());
      schemaTarget.setTagName(tagName.getNodeValue());
      listSchemaTargets.add(schemaTarget);
    }
  }
  return listSchemaTargets;
}","/** 
 * Initalize SchemaTargets available in a file.
 * @param file where SchemaTargets data are available
 * @return MetadataSchema setted with datas from file
 * @throws ParserConfigurationException if dom exception occured
 * @throws SAXException if sax exception occured
 * @throws IOException if file cannot be read
 */
private static List<org.talend.core.model.metadata.builder.connection.SchemaTarget> initializeSchemaTarget2(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.SchemaTarget> listSchemaTargets=new ArrayList<org.talend.core.model.metadata.builder.connection.SchemaTarget>();
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(TARGETSCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node xPathQuery=nodeMap.getNamedItem(""String_Node_Str"");
      final Node tagName=nodeMap.getNamedItem(""String_Node_Str"");
      schemaTarget.setRelativeXPathQuery(xPathQuery.getNodeValue());
      schemaTarget.setTagName(tagName.getNodeValue());
      listSchemaTargets.add(schemaTarget);
    }
  }
  return listSchemaTargets;
}",0.9937810945273632
129313,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      metadataColumn.setOriginalField(metadataColumn.getLabel());
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      @Override public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      @Override public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength != null && originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setOriginalLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      metadataColumn.setOriginalField(metadataColumn.getLabel());
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal != null && impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed != null && signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9831575365770672
129314,"public void warning(final SAXParseException exception) throws SAXException {
  throw exception;
}","@Override public void warning(final SAXParseException exception) throws SAXException {
  throw exception;
}",0.9509803921568628
129315,"public String getColumnText(Object element,int columnIndex){
  String returnValue=null;
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getLabelProvider() != null) {
    returnValue=column.getLabelProvider().getLabel(element);
  }
  if (returnValue == null) {
    if (column.getDisplayedValue() != null || column.getDefaultDisplayedValue() != null || column.getBeanPropertyAccessors() == null) {
      String defaultValue=column.getDefaultDisplayedValue();
      String imposedDisplayedValue=column.getDisplayedValue();
      if (imposedDisplayedValue != null) {
        returnValue=imposedDisplayedValue;
      }
 else       if (defaultValue == null) {
        returnValue=""String_Node_Str"";
      }
 else {
        returnValue=defaultValue;
      }
    }
 else {
      Object value=AccessorUtils.get(element,column);
      CellEditor cellEditor=column.getCellEditor();
      CellEditorValueAdapter retrieverValue=column.getCellEditorValueAdapter();
      if (cellEditor != null && retrieverValue != null && value != null) {
        returnValue=retrieverValue.getColumnText(cellEditor,element,value);
      }
 else       if (value != null) {
        returnValue=String.valueOf(value);
      }
 else {
        returnValue=""String_Node_Str"";
      }
    }
  }
  return returnValue;
}","public String getColumnText(Object element,int columnIndex){
  String returnValue=null;
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getLabelProvider() != null) {
    returnValue=column.getLabelProvider().getLabel(element);
  }
  if (returnValue == null) {
    if (column.getDisplayedValue() != null || column.getDefaultDisplayedValue() != null || column.getBeanPropertyAccessors() == null) {
      String defaultValue=column.getDefaultDisplayedValue();
      String imposedDisplayedValue=column.getDisplayedValue();
      if (imposedDisplayedValue != null) {
        returnValue=imposedDisplayedValue;
      }
 else       if (defaultValue == null) {
        returnValue=""String_Node_Str"";
      }
 else {
        returnValue=defaultValue;
      }
    }
 else {
      Object value=AccessorUtils.get(element,column);
      CellEditor cellEditor=column.getCellEditor();
      CellEditorValueAdapter retrieverValue=column.getCellEditorValueAdapter();
      if (value != null && column.getCellEditorValueAdapter() != null && column.getCellEditorValueAdapter() instanceof ComboEditorValueAdapter) {
        Object returnObject=column.getCellEditorValueAdapter().getCellEditorTypedValue(column.getCellEditor(),value);
        if (""String_Node_Str"".equals(returnObject + ""String_Node_Str"")) {
          return ""String_Node_Str"";
        }
      }
      if (cellEditor != null && retrieverValue != null && value != null) {
        returnValue=retrieverValue.getColumnText(cellEditor,element,value);
      }
 else       if (value != null) {
        returnValue=String.valueOf(value);
      }
 else {
        returnValue=""String_Node_Str"";
      }
    }
  }
  return returnValue;
}",0.8251262626262627
129316,"public String getColumnText(Object element,int columnIndex){
  String returnValue=null;
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getLabelProvider() != null) {
    returnValue=column.getLabelProvider().getLabel(element);
  }
  if (returnValue == null) {
    if (column.getDisplayedValue() != null || column.getDefaultDisplayedValue() != null || column.getBeanPropertyAccessors() == null) {
      String defaultValue=column.getDefaultDisplayedValue();
      String imposedDisplayedValue=column.getDisplayedValue();
      if (imposedDisplayedValue != null) {
        returnValue=imposedDisplayedValue;
      }
 else       if (defaultValue == null) {
        returnValue=""String_Node_Str"";
      }
 else {
        returnValue=defaultValue;
      }
    }
 else {
      Object value=AccessorUtils.get(element,column);
      CellEditor cellEditor=column.getCellEditor();
      CellEditorValueAdapter retrieverValue=column.getCellEditorValueAdapter();
      if (cellEditor != null && retrieverValue != null && value != null) {
        returnValue=retrieverValue.getColumnText(cellEditor,element,value);
      }
 else       if (value != null) {
        returnValue=String.valueOf(value);
      }
 else {
        returnValue=""String_Node_Str"";
      }
    }
  }
  return returnValue;
}","public String getColumnText(Object element,int columnIndex){
  String returnValue=null;
  TableViewerCreatorColumnNotModifiable column=(TableViewerCreatorColumnNotModifiable)this.tableViewerCreator.getColumns().get(columnIndex);
  if (column.getLabelProvider() != null) {
    returnValue=column.getLabelProvider().getLabel(element);
  }
  if (returnValue == null) {
    if (column.getDisplayedValue() != null || column.getDefaultDisplayedValue() != null || column.getBeanPropertyAccessors() == null) {
      String defaultValue=column.getDefaultDisplayedValue();
      String imposedDisplayedValue=column.getDisplayedValue();
      if (imposedDisplayedValue != null) {
        returnValue=imposedDisplayedValue;
      }
 else       if (defaultValue == null) {
        returnValue=""String_Node_Str"";
      }
 else {
        returnValue=defaultValue;
      }
    }
 else {
      Object value=AccessorUtils.get(element,column);
      CellEditor cellEditor=column.getCellEditor();
      CellEditorValueAdapter retrieverValue=column.getCellEditorValueAdapter();
      if (value != null && column.getCellEditorValueAdapter() != null && column.getCellEditorValueAdapter() instanceof ComboEditorValueAdapter) {
        Object returnObject=column.getCellEditorValueAdapter().getCellEditorTypedValue(column.getCellEditor(),value);
        if (""String_Node_Str"".equals(returnObject + ""String_Node_Str"")) {
          return ""String_Node_Str"";
        }
      }
      if (cellEditor != null && retrieverValue != null && value != null) {
        returnValue=retrieverValue.getColumnText(cellEditor,element,value);
      }
 else       if (value != null) {
        returnValue=String.valueOf(value);
      }
 else {
        returnValue=""String_Node_Str"";
      }
    }
  }
  return returnValue;
}",0.8251262626262627
129317,"public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      throw new RuntimeException(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      s=(Socket)object;
    }
    OutputStream output=s.getOutputStream();
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  s=new Socket(clientHost,portStats);
  GlobalResource.resourceMap.put(portStats,s);
  OutputStream output=s.getOutputStream();
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  System.out.println(""String_Node_Str"");
  Thread t=new Thread(this);
  t.start();
}","public void startThreadStat(String clientHost,int portStats) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    Socket s=null;
    Object object=GlobalResource.resourceMap.get(portStats);
    OutputStream output=null;
    if (object == null || !(object instanceof Socket)) {
      String lastCallerJobName=new Exception().getStackTrace()[1].getClassName();
      System.err.println(""String_Node_Str"" + lastCallerJobName + ""String_Node_Str""+ ""String_Node_Str"");
      output=System.out;
    }
 else {
      s=(Socket)object;
      output=s.getOutputStream();
    }
    if (debug) {
      output=System.out;
    }
    pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
    Thread t=new Thread(this);
    t.start();
    return;
  }
  System.out.println(""String_Node_Str"" + portStats);
  boolean isConnect=false;
  OutputStream output=null;
  try {
    s=new Socket(clientHost,portStats);
    isConnect=true;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + clientHost + ""String_Node_Str""+ portStats+ ""String_Node_Str"");
  }
  if (isConnect) {
    GlobalResource.resourceMap.put(portStats,s);
    output=s.getOutputStream();
    System.out.println(""String_Node_Str"");
  }
 else {
    output=System.out;
    System.out.println(""String_Node_Str"");
  }
  if (debug) {
    output=System.out;
  }
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(output)),true);
  Thread t=new Thread(this);
  t.start();
}",0.4232456140350877
129318,"public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","@Override public void run(){
  if (!debug) {
synchronized (this) {
      try {
        while (!jobIsFinished) {
          sendMessages();
          wait(1000);
        }
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.982078853046595
129319,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (!schemaname.contains(""String_Node_Str"") && !schemaname.contains(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9940208164169188
129320,"private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  return result;
}","private static IMetadataTable convert(MetadataTable old){
  ICoreService coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
  IMetadataTable result=new org.talend.core.model.metadata.MetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  String sourceName=old.getName();
  if (sourceName == null) {
    sourceName=old.getLabel();
  }
  result.setTableName(sourceName);
  List<IMetadataColumn> columns=new ArrayList<IMetadataColumn>(old.getColumns().size());
  for (  Object o : old.getColumns()) {
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=(org.talend.core.model.metadata.builder.connection.MetadataColumn)o;
    IMetadataColumn newColumn=new org.talend.core.model.metadata.MetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefault(column.getDefaultValue());
    newColumn.setKey(column.isKey());
    String label2=column.getLabel();
    if (coreService != null) {
      if (coreService.isKeyword(label2)) {
        label2=""String_Node_Str"" + label2;
      }
    }
    newColumn.setLabel(label2);
    newColumn.setPattern(column.getPattern());
    if (column.getLength() < 0) {
      newColumn.setLength(null);
    }
 else {
      newColumn.setLength(Long.valueOf(column.getLength()).intValue());
    }
    if (column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(null);
    }
 else {
      newColumn.setOriginalLength(Long.valueOf(column.getOriginalLength()).intValue());
    }
    if (column.getTaggedValue().size() > 0) {
      for (      TaggedValue tv : column.getTaggedValue()) {
        String additionalTag=tv.getTag();
        if (additionalTag.startsWith(""String_Node_Str"")) {
          String[] splits=additionalTag.split(""String_Node_Str"");
          additionalTag=splits[1];
        }
        newColumn.getAdditionalField().put(additionalTag,tv.getValue());
      }
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() < 0) {
      newColumn.setPrecision(null);
    }
 else {
      newColumn.setPrecision(Long.valueOf(column.getPrecision()).intValue());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setType(column.getSourceType());
    if (column.getName() == null || column.getName().equals(""String_Node_Str"")) {
      String label=label2;
      if (label != null && label.length() > 0) {
        String substring=label.substring(1);
        if (coreService != null) {
          if (label.startsWith(""String_Node_Str"") && coreService.isKeyword(substring)) {
            label=substring;
          }
        }
      }
      newColumn.setOriginalDbColumnName(label);
    }
 else {
      newColumn.setOriginalDbColumnName(column.getName());
    }
  }
  result.setListColumns(columns);
  return result;
}",0.9244791666666666
129321,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (!schemaname.contains(""String_Node_Str"") && !schemaname.contains(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (schemaPattern.equalsIgnoreCase(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9940208164169188
129322,"public void addChangeLibrariesListener(IChangedLibrariesListener listener){
  listeners.add(listener);
}","@Override public void addChangeLibrariesListener(IChangedLibrariesListener listener){
  listeners.add(listener);
}",0.9541284403669724
129323,"public void undeployLibrary(String jarName) throws IOException {
  ILibraryManagerService service=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if (service.delete(jarName)) {
    ModulesNeededProvider.userRemoveUnusedModules(jarName);
    fireLibrariesChanges();
  }
 else {
    ExceptionHandler.process(new Exception(""String_Node_Str"" + jarName + ""String_Node_Str""));
  }
}","@Override public void undeployLibrary(String jarName) throws IOException {
  ILibraryManagerService service=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if (service.delete(jarName)) {
    ModulesNeededProvider.userRemoveUnusedModules(jarName);
    fireLibrariesChanges();
  }
 else {
    ExceptionHandler.process(new Exception(""String_Node_Str"" + jarName + ""String_Node_Str""));
  }
}",0.9885321100917432
129324,"public void run() throws PersistenceException {
  String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
  path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ sourceFile.getName();
  File libsTargetFile=new File(path);
  try {
    FilesUtils.copyFile(sourceFile,libsTargetFile);
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  CoreException e1) {
    ExceptionHandler.process(e1);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
}","@Override public void run() throws PersistenceException {
  String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
  path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ sourceFile.getName();
  File libsTargetFile=new File(path);
  try {
    FilesUtils.copyFile(sourceFile,libsTargetFile);
    eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
  }
 catch (  CoreException e1) {
    ExceptionHandler.process(e1);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
}",0.9922118380062306
129325,"public ELibraryInstallStatus getLibraryStatus(String libName) throws BusinessException {
  checkInstalledLibraries();
  for (  ModuleNeeded current : ModulesNeededProvider.getModulesNeeded()) {
    if (current.getModuleName().equals(libName)) {
      return current.getStatus();
    }
  }
  throw new BusinessException(Messages.getString(""String_Node_Str"",libName));
}","@Override public ELibraryInstallStatus getLibraryStatus(String libName) throws BusinessException {
  checkInstalledLibraries();
  for (  ModuleNeeded current : ModulesNeededProvider.getModulesNeeded()) {
    if (current.getModuleName().equals(libName)) {
      return current.getStatus();
    }
  }
  throw new BusinessException(Messages.getString(""String_Node_Str"",libName));
}",0.9865951742627346
129326,"public void checkLibraries(){
  this.checkInstalledLibraries();
  fireLibrariesChanges();
}","@Override public void checkLibraries(){
  this.checkInstalledLibraries();
  fireLibrariesChanges();
}",0.9479166666666666
129327,"public void resetModulesNeeded(){
  ModulesNeededProvider.reset();
  checkLibraries();
}","@Override public void resetModulesNeeded(){
  ModulesNeededProvider.reset();
  checkLibraries();
}",0.946236559139785
129328,"public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : list) {
      if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired(node.getElementParameters())) {
          Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
          problem.setKey(""String_Node_Str"" + current.getModuleName());
          toReturn.add(problem);
        }
      }
    }
  }
  return toReturn;
}","@Override public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : list) {
      if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired(node.getElementParameters())) {
          Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
          problem.setKey(""String_Node_Str"" + current.getModuleName());
          toReturn.add(problem);
        }
      }
    }
  }
  return toReturn;
}",0.9943310657596371
129329,"public void removeChangeLibrariesListener(IChangedLibrariesListener listener){
  listeners.remove(listener);
}","@Override public void removeChangeLibrariesListener(IChangedLibrariesListener listener){
  listeners.remove(listener);
}",0.9565217391304348
129330,"public void updateModulesNeededForCurrentJob(IProcess process){
  ModulesNeededProvider.resetCurrentJobNeededModuleList(process);
  checkLibraries();
}","@Override public void updateModulesNeededForCurrentJob(IProcess process){
  ModulesNeededProvider.resetCurrentJobNeededModuleList(process);
  checkLibraries();
}",0.967948717948718
129331,public abstract URL getRoutineTemplate();,@Override public abstract URL getRoutineTemplate();,0.8913043478260869
129332,"public void deployLibrary(URL source) throws IOException {
  LocalLibraryManager repositoryBundleService=(LocalLibraryManager)CorePlugin.getDefault().getRepositoryBundleService();
  final String decode=URLDecoder.decode(source.getFile(),""String_Node_Str"");
  final File sourceFile=new File(decode);
  final File targetFile=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + sourceFile.getName());
  if (!repositoryBundleService.contains(source.getFile())) {
    repositoryBundleService.deploy(sourceFile.toURI());
  }
  ModulesNeededProvider.userAddImportModules(targetFile.getPath(),sourceFile.getName(),ELibraryInstallStatus.INSTALLED);
  fireLibrariesChanges();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      public void run() throws PersistenceException {
        String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
        path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ sourceFile.getName();
        File libsTargetFile=new File(path);
        try {
          FilesUtils.copyFile(sourceFile,libsTargetFile);
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        CoreException e1) {
          ExceptionHandler.process(e1);
        }
catch (        IOException e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  }
}","@Override public void deployLibrary(URL source) throws IOException {
  LocalLibraryManager repositoryBundleService=(LocalLibraryManager)CorePlugin.getDefault().getRepositoryBundleService();
  final String decode=URLDecoder.decode(source.getFile(),""String_Node_Str"");
  final File sourceFile=new File(decode);
  final File targetFile=new File(PreferencesUtilities.getLibrariesPath(ECodeLanguage.JAVA) + File.separatorChar + sourceFile.getName());
  if (!repositoryBundleService.contains(source.getFile())) {
    repositoryBundleService.deploy(sourceFile.toURI());
  }
  ModulesNeededProvider.userAddImportModules(targetFile.getPath(),sourceFile.getName(),ELibraryInstallStatus.INSTALLED);
  resetModulesNeeded();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProject eclipseProject=workspace.getRoot().getProject(projectLabel);
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(currentProject,""String_Node_Str""){
      @Override public void run() throws PersistenceException {
        String path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
        path=path + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS)+ File.separatorChar+ sourceFile.getName();
        File libsTargetFile=new File(path);
        try {
          FilesUtils.copyFile(sourceFile,libsTargetFile);
          eclipseProject.refreshLocal(IResource.DEPTH_INFINITE,new NullProgressMonitor());
        }
 catch (        CoreException e1) {
          ExceptionHandler.process(e1);
        }
catch (        IOException e) {
          ExceptionHandler.process(e);
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  }
}",0.9859017987360232
129333,public abstract URL getBeanTemplate();,@Override public abstract URL getBeanTemplate();,0.8837209302325582
129334,"public boolean contains(String jarName){
  if (jarList.contains(jarName)) {
    return true;
  }
  jarList=list(new NullProgressMonitor());
  return jarList.contains(jarName);
}","@Override public boolean contains(String jarName){
  if (jarList.contains(jarName)) {
    return true;
  }
  jarList=list(new NullProgressMonitor());
  return jarList.contains(jarName);
}",0.9725274725274724
129335,"public boolean isInitialized(){
  String installLocation=getStorageDirectory().getAbsolutePath();
  File indexFile=new File(installLocation + JAR_INDEX);
  if (indexFile.exists()) {
    LibrariesIndexManager.getInstance().loadResource();
    return LibrariesIndexManager.getInstance().getIndex().isInitialized();
  }
  return false;
}","@Override public boolean isInitialized(){
  String installLocation=getStorageDirectory().getAbsolutePath();
  File indexFile=new File(installLocation + JAR_INDEX);
  if (indexFile.exists()) {
    LibrariesIndexManager.getInstance().loadResource();
    return LibrariesIndexManager.getInstance().getIndex().isInitialized();
  }
  return false;
}",0.9852507374631267
129336,"public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,IProgressMonitor... monitorWrap){
  if (jarsNeeded == null || jarsNeeded.size() == 0)   return false;
  boolean allIsOK=true;
  for (  String jar : jarsNeeded) {
    if (!retrieve(jar,pathToStore,monitorWrap)) {
      allIsOK=false;
    }
  }
  return allIsOK;
}","@Override public boolean retrieve(Collection<String> jarsNeeded,String pathToStore,IProgressMonitor... monitorWrap){
  if (jarsNeeded == null || jarsNeeded.size() == 0) {
    return false;
  }
  boolean allIsOK=true;
  for (  String jar : jarsNeeded) {
    if (!retrieve(jar,pathToStore,monitorWrap)) {
      allIsOK=false;
    }
  }
  return allIsOK;
}",0.9738372093023256
129337,"public void setInitialized(){
  LibrariesIndexManager.getInstance().loadResource();
  LibrariesIndexManager.getInstance().getIndex().setInitialized(true);
  LibrariesIndexManager.getInstance().saveResource();
}","@Override public void setInitialized(){
  LibrariesIndexManager.getInstance().loadResource();
  LibrariesIndexManager.getInstance().getIndex().setInitialized(true);
  LibrariesIndexManager.getInstance().saveResource();
}",0.9767441860465116
129338,"public void clearCache(){
  if (isInitialized()) {
    LibrariesIndexManager.getInstance().loadResource();
    LibrariesIndexManager.getInstance().getIndex().setInitialized(false);
    LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath().clear();
    LibrariesIndexManager.getInstance().saveResource();
  }
}","@Override public void clearCache(){
  if (isInitialized()) {
    LibrariesIndexManager.getInstance().loadResource();
    LibrariesIndexManager.getInstance().getIndex().setInitialized(false);
    LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath().clear();
    LibrariesIndexManager.getInstance().saveResource();
  }
}",0.9848942598187312
129339,"public Set<String> list(IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
 else {
    }
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  return names;
}","@Override public Set<String> list(IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
 else {
    }
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  names.addAll(jarsToRelative.keySet());
  return names;
}",0.9921135646687698
129340,"public boolean delete(String jarName){
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        if (file.getName().equals(jarName)) {
          file.delete();
          jarList.remove(jarName);
          return true;
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
  return false;
}","@Override public boolean delete(String jarName){
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        if (file.getName().equals(jarName)) {
          file.delete();
          jarList.remove(jarName);
          return true;
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.process(e);
  }
  return false;
}",0.9890829694323144
129341,"public void deploy(Collection<URI> jarFileUris,IProgressMonitor... monitorWrap){
  if (jarFileUris == null || jarFileUris.size() == 0)   return;
  for (  URI uri : jarFileUris) {
    deploy(uri,monitorWrap);
  }
}","@Override public void deploy(Collection<URI> jarFileUris,IProgressMonitor... monitorWrap){
  if (jarFileUris == null || jarFileUris.size() == 0) {
    return;
  }
  for (  URI uri : jarFileUris) {
    deploy(uri,monitorWrap);
  }
}",0.9594594594594594
129342,"/** 
 * get the correct ItemStatePath for TDQ Elements(Patterns, Indicators, Rules, etc.).
 * @param type ERepositoryObjectType of the TDQ Element
 * @param targetPath target path of the TDQ Element
 * @return
 */
private IPath getItemStatePath(ERepositoryObjectType type,IPath targetPath){
  IPath itemStatePath=targetPath;
  if (ERepositoryObjectType.TDQ_PATTERN_REGEX.equals(type) || ERepositoryObjectType.TDQ_PATTERN_SQL.equals(type) || ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS.equals(type)) {
    itemStatePath=Path.fromOSString(type.getFolder()).removeFirstSegments(2).append(targetPath);
  }
  return itemStatePath;
}","/** 
 * get the correct ItemStatePath for TDQ Elements(Patterns, Indicators, Rules, etc.).
 * @param type ERepositoryObjectType of the TDQ Element
 * @param targetPath target path of the TDQ Element
 * @return
 */
private IPath getItemStatePath(ERepositoryObjectType type,IPath targetPath){
  IPath itemStatePath=targetPath;
  if (ERepositoryObjectType.TDQ_PATTERN_REGEX.equals(type) || ERepositoryObjectType.TDQ_PATTERN_SQL.equals(type) || ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS.equals(type)|| ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.equals(type)) {
    itemStatePath=Path.fromOSString(type.getFolder()).removeFirstSegments(2).append(targetPath);
  }
 else   if (targetPath.toOSString().startsWith(ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getFolder())) {
    itemStatePath=targetPath.removeFirstSegments(2);
  }
  return itemStatePath;
}",0.847548690396239
129343,"/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}","/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (isDnd && objectToCopy != null && (objectToCopy.getRepositoryObjectType().equals(ERepositoryObjectType.SERVICESOPERATION) || objectToCopy.getRepositoryObjectType().equals(ERepositoryObjectType.SERVICESPORT))) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}",0.9649690903738593
129344,"public String getPurpose(){
  return this.purpose;
}","@Override public String getPurpose(){
  return this.purpose;
}",0.912280701754386
129345,"public String getLabel(){
  return this.label;
}","@Override public String getLabel(){
  return this.label;
}",0.9056603773584906
129346,"public User getAuthor(){
  return this.author;
}","@Override public User getAuthor(){
  return this.author;
}",0.9056603773584906
129347,"public void setRepositoryNode(IRepositoryNode node){
  this.repositoryNode=node;
}","@Override public void setRepositoryNode(IRepositoryNode node){
  this.repositoryNode=node;
}",0.942528735632184
129348,"public String getId(){
  return this.id;
}","@Override public String getId(){
  return this.id;
}",0.8936170212765957
129349,"public String getDescription(){
  return this.description;
}","@Override public String getDescription(){
  return this.description;
}",0.9230769230769232
129350,"public RepositoryViewObject cloneNewObject(){
  RepositoryViewObject object=null;
  try {
    Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
    connectionProperty.setAuthor(getAuthor());
    connectionProperty.setCreationDate(getCreationDate());
    connectionProperty.setDescription(getDescription());
    connectionProperty.setId(getId());
    connectionProperty.setLabel(getLabel());
    connectionProperty.setModificationDate(getModificationDate());
    connectionProperty.setPurpose(getPurpose());
    connectionProperty.setStatusCode(getStatusCode());
    connectionProperty.setVersion(getVersion());
    final Item oldItem=getProperty().getItem();
    DatabaseConnectionItem newItem=null;
    if (oldItem instanceof DatabaseConnectionItem) {
      DatabaseConnectionItem item=(DatabaseConnectionItem)oldItem;
      newItem=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      newItem.setProperty(connectionProperty);
      ItemState state=PropertiesFactory.eINSTANCE.createItemState();
      state.setPath(oldItem.getState().getPath());
      newItem.setState(state);
      final DatabaseConnection connection=(DatabaseConnection)item.getConnection();
      DatabaseConnection conn=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
        IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
        conn=service.cloneOriginalValueConnection(connection);
      }
      final QueriesConnection queries=connection.getQueries();
      QueriesConnection newQ=null;
      if (queries != null) {
        newQ=ConnectionFactory.eINSTANCE.createQueriesConnection();
        newQ.setConnection(conn);
        final List<Query> query=queries.getQuery();
        List<Query> queries2=new ArrayList<Query>();
        for (        Query query2 : query) {
          Query newQuery=ConnectionFactory.eINSTANCE.createQuery();
          newQuery.setProperties(query2.getProperties());
          newQuery.setComment(query2.getComment());
          newQuery.setDivergency(query2.isDivergency());
          newQuery.setId(query2.getId());
          newQuery.setLabel(query2.getLabel());
          newQuery.setQueries(newQ);
          newQuery.setSynchronised(query2.isSynchronised());
          newQuery.setValue(query2.getValue());
          newQuery.setContextMode(query2.isContextMode());
          queries2.add(newQuery);
        }
        newQ.getQuery().addAll(queries2);
      }
      final Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
      List<MetadataTable> newTs=null;
      if (tables != null) {
        newTs=new ArrayList<MetadataTable>();
        for (        MetadataTable table : tables) {
          MetadataTable table2=ConnectionFactory.eINSTANCE.createMetadataTable();
          table2.setProperties(table.getProperties());
          table2.setComment(table.getComment());
          if (table2.getNamespace() instanceof Package) {
            Package pkg=(Package)table2.getNamespace();
            pkg.getDataManager().add(conn);
          }
          table2.setDivergency(table.isDivergency());
          table2.setId(table.getId());
          table2.setLabel(table.getLabel());
          table2.setSourceName(table.getSourceName());
          table2.setSynchronised(table.isSynchronised());
          table2.setTableType(table.getTableType());
          List<MetadataColumn> list=new ArrayList<MetadataColumn>();
          for (          MetadataColumn column : (List<MetadataColumn>)table.getColumns()) {
            MetadataColumn column2=ConnectionFactory.eINSTANCE.createMetadataColumn();
            column2.setProperties(column.getProperties());
            column2.setComment(column.getComment());
            column2.setDefaultValue(column.getDefaultValue());
            column2.setDivergency(column.isDivergency());
            column2.setId(column.getId());
            column2.setKey(column.isKey());
            column2.setLabel(column.getLabel());
            column2.setLength(column.getLength());
            column2.setNullable(column.isNullable());
            column2.setOriginalField(column.getOriginalField());
            column2.setPattern(column.getPattern());
            column2.setPrecision(column.getPrecision());
            column2.setSourceType(column.getSourceType());
            column2.setSynchronised(column.isSynchronised());
            column2.setTable(table2);
            column2.setTalendType(column.getTalendType());
            list.add(column2);
          }
          table2.getColumns().addAll(list);
          newTs.add(table2);
        }
      }
      Catalog c=(Catalog)ConnectionHelper.getPackage(conn.getSID(),(Connection)conn,Catalog.class);
      if (c != null) {
        PackageHelper.addMetadataTable(newTs,c);
        c.getOwnedElement().addAll(newTs);
      }
      conn.setQueries(newQ);
      newItem.setConnection(conn);
    }
    connectionProperty.setItem(newItem);
    object=new RepositoryViewObject(connectionProperty);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return object;
}","public RepositoryViewObject cloneNewObject(){
  RepositoryViewObject object=null;
  try {
    Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
    connectionProperty.setAuthor(getAuthor());
    connectionProperty.setCreationDate(getCreationDate());
    connectionProperty.setDescription(getDescription());
    connectionProperty.setId(getId());
    connectionProperty.setLabel(getLabel());
    connectionProperty.setModificationDate(getModificationDate());
    connectionProperty.setPurpose(getPurpose());
    connectionProperty.setStatusCode(getStatusCode());
    connectionProperty.setVersion(getVersion());
    final Item oldItem=getProperty().getItem();
    DatabaseConnectionItem newItem=null;
    if (oldItem instanceof DatabaseConnectionItem) {
      DatabaseConnectionItem item=(DatabaseConnectionItem)oldItem;
      newItem=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      newItem.setProperty(connectionProperty);
      ItemState state=PropertiesFactory.eINSTANCE.createItemState();
      state.setPath(oldItem.getState().getPath());
      newItem.setState(state);
      final DatabaseConnection connection=(DatabaseConnection)item.getConnection();
      DatabaseConnection conn=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
        IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
        conn=service.cloneOriginalValueConnection(connection);
      }
      final QueriesConnection queries=connection.getQueries();
      QueriesConnection newQ=null;
      if (queries != null) {
        newQ=ConnectionFactory.eINSTANCE.createQueriesConnection();
        newQ.setConnection(conn);
        final List<Query> query=queries.getQuery();
        List<Query> queries2=new ArrayList<Query>();
        for (        Query query2 : query) {
          Query newQuery=ConnectionFactory.eINSTANCE.createQuery();
          newQuery.setProperties(query2.getProperties());
          newQuery.setComment(query2.getComment());
          newQuery.setDivergency(query2.isDivergency());
          newQuery.setId(query2.getId());
          newQuery.setLabel(query2.getLabel());
          newQuery.setQueries(newQ);
          newQuery.setSynchronised(query2.isSynchronised());
          newQuery.setValue(query2.getValue());
          newQuery.setContextMode(query2.isContextMode());
          queries2.add(newQuery);
        }
        newQ.getQuery().addAll(queries2);
      }
      final Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
      List<MetadataTable> newTs=null;
      if (tables != null) {
        newTs=new ArrayList<MetadataTable>();
        for (        MetadataTable table : tables) {
          MetadataTable table2=ConnectionFactory.eINSTANCE.createMetadataTable();
          table2.setProperties(table.getProperties());
          table2.setComment(table.getComment());
          if (table2.getNamespace() instanceof Package) {
            Package pkg=(Package)table2.getNamespace();
            pkg.getDataManager().add(conn);
          }
          table2.setDivergency(table.isDivergency());
          table2.setId(table.getId());
          table2.setLabel(table.getLabel());
          table2.setSourceName(table.getSourceName());
          table2.setSynchronised(table.isSynchronised());
          table2.setTableType(table.getTableType());
          List<MetadataColumn> list=new ArrayList<MetadataColumn>();
          for (          MetadataColumn column : table.getColumns()) {
            MetadataColumn column2=ConnectionFactory.eINSTANCE.createMetadataColumn();
            column2.setProperties(column.getProperties());
            column2.setComment(column.getComment());
            column2.setDefaultValue(column.getDefaultValue());
            column2.setDivergency(column.isDivergency());
            column2.setId(column.getId());
            column2.setKey(column.isKey());
            column2.setLabel(column.getLabel());
            column2.setLength(column.getLength());
            column2.setNullable(column.isNullable());
            column2.setOriginalField(column.getOriginalField());
            column2.setPattern(column.getPattern());
            column2.setPrecision(column.getPrecision());
            column2.setSourceType(column.getSourceType());
            column2.setSynchronised(column.isSynchronised());
            column2.setTable(table2);
            column2.setTalendType(column.getTalendType());
            list.add(column2);
          }
          table2.getColumns().addAll(list);
          newTs.add(table2);
        }
      }
      Catalog c=(Catalog)ConnectionHelper.getPackage(conn.getSID(),conn,Catalog.class);
      if (c != null) {
        PackageHelper.addMetadataTable(newTs,c);
        c.getOwnedElement().addAll(newTs);
      }
      conn.setQueries(newQ);
      newItem.setConnection(conn);
    }
    connectionProperty.setItem(newItem);
    object=new RepositoryViewObject(connectionProperty);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return object;
}",0.9966945362628816
129351,"/** 
 * Getter for projectLabel.
 * @return the projectLabel
 */
public String getProjectLabel(){
  return this.projectLabel;
}","/** 
 * Getter for projectLabel.
 * @return the projectLabel
 */
@Override public String getProjectLabel(){
  return this.projectLabel;
}",0.9621212121212122
129352,"public Date getCreationDate(){
  return this.creationDate;
}","@Override public Date getCreationDate(){
  return this.creationDate;
}",0.9230769230769232
129353,"public Date getModificationDate(){
  return this.modificationDate;
}","@Override public Date getModificationDate(){
  return this.modificationDate;
}",0.9315068493150684
129354,"public IRepositoryNode getRepositoryNode(){
  return this.repositoryNode;
}","@Override public IRepositoryNode getRepositoryNode(){
  return this.repositoryNode;
}",0.9375
129355,"public boolean isDeleted(){
  return deleted;
}","@Override public boolean isDeleted(){
  return deleted;
}",0.903846153846154
129356,"public String getPath(){
  return path;
}","@Override public String getPath(){
  return path;
}",0.8913043478260869
129357,"public ERepositoryStatus getRepositoryStatus(){
  return repositoryStatus;
}","@Override public ERepositoryStatus getRepositoryStatus(){
  return repositoryStatus;
}",0.9382716049382716
129358,"public String getVersion(){
  return this.version;
}","@Override public String getVersion(){
  return this.version;
}",0.912280701754386
129359,"public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length == 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    ExceptionHandler.process(e);
  }
  return null;
}","@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    ExceptionHandler.process(e);
  }
  return null;
}",0.9975349219391948
129360,"public ERepositoryStatus getInformationStatus(){
  return informationStatus;
}","@Override public ERepositoryStatus getInformationStatus(){
  return informationStatus;
}",0.9397590361445785
129361,"public List<IRepositoryViewObject> getChildren(){
  List<IRepositoryViewObject> toReturn=new ArrayList<IRepositoryViewObject>();
  return toReturn;
}","@Override public List<IRepositoryViewObject> getChildren(){
  List<IRepositoryViewObject> toReturn=new ArrayList<IRepositoryViewObject>();
  return toReturn;
}",0.9675324675324676
129362,"public String getStatusCode(){
  return this.statusCode;
}","@Override public String getStatusCode(){
  return this.statusCode;
}",0.9206349206349206
129363,"public ERepositoryObjectType getRepositoryObjectType(){
  return type;
}","@Override public ERepositoryObjectType getRepositoryObjectType(){
  return type;
}",0.935064935064935
129364,"/** 
 * DOC sgandon Comment method ""registerMergeRefListgener"".
 */
private void registerMergeRefListener(){
  if (mergeRefListener == null) {
    mergeRefListener=new IPropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent event){
        if (IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT.equals(event.getProperty())) {
          refreshTopLevelNodes();
        }
      }
    }
;
    IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
    preferenceStore.addPropertyChangeListener(mergeRefListener);
  }
}","/** 
 * DOC sgandon Comment method ""registerMergeRefListgener"".
 */
private void registerMergeRefListener(){
  if (mergeRefListener == null) {
    mergeRefListener=new IPropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent event){
        if (IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT.equals(event.getProperty())) {
          refreshTopLevelNodes();
        }
      }
    }
;
    if (CoreRuntimePlugin.getInstance().getDesignerCoreService() != null) {
      IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
      preferenceStore.addPropertyChangeListener(mergeRefListener);
    }
  }
}",0.9299674267100976
129365,"/** 
 * DOC sgandon Comment method ""registerMergeRefListgener"".
 */
private void registerMergeRefListener(){
  if (mergeRefListener == null) {
    mergeRefListener=new IPropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent event){
        if (IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT.equals(event.getProperty())) {
          refreshTopLevelNodes();
        }
      }
    }
;
    IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
    preferenceStore.addPropertyChangeListener(mergeRefListener);
  }
}","/** 
 * DOC sgandon Comment method ""registerMergeRefListgener"".
 */
private void registerMergeRefListener(){
  if (mergeRefListener == null) {
    mergeRefListener=new IPropertyChangeListener(){
      @Override public void propertyChange(      PropertyChangeEvent event){
        if (IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT.equals(event.getProperty())) {
          refreshTopLevelNodes();
        }
      }
    }
;
    if (CoreRuntimePlugin.getInstance().getDesignerCoreService() != null) {
      IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
      preferenceStore.addPropertyChangeListener(mergeRefListener);
    }
  }
}",0.9299674267100976
129366,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9986140626443684
129367,"/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
    defautVal=TalendQuoteUtils.removeQuotes(defautVal);
    if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
    }
    initialValue.setBody(defautVal);
  }
 else {
    initialValue.setBody(TalendQuoteUtils.addQuotesIfNotExist(defautVal));
  }
}","/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column,DatabaseMetaData dbMetaData){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  boolean defaultValueIsFunction=false;
  List<String> functions=getAllDBFuctions(dbMetaData);
  if (functions.contains(defautVal)) {
    defaultValueIsFunction=true;
  }
  if (!defaultValueIsFunction) {
    if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.removeQuotes(defautVal);
      if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
        defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
      }
    }
 else {
      defautVal=TalendQuoteUtils.addSingleQuotesIfNotExist(defautVal);
    }
  }
  initialValue.setBody(defautVal);
}",0.8645990922844176
129368,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  try {
    primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        if (repositoryService != null) {
          label=repositoryService.validateColumnName(label,columnIndex);
          metadataColumn.setLabel(label);
        }
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (ExtractMetaDataUtils.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=ExtractMetaDataUtils.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        boolean isNullable=ExtractMetaDataUtils.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        String stringMetaDataInfo=ExtractMetaDataUtils.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        ExtractMetaDataUtils.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9990121239335428
129369,"/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(QUOTATION_MARK)) {
    text=QUOTATION_MARK + text;
  }
  if (!text.endsWith(QUOTATION_MARK)) {
    text=text + QUOTATION_MARK;
  }
  return text;
}","/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text,String quote){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(quote)) {
    text=quote + text;
  }
  if (!text.endsWith(quote)) {
    text=text + quote;
  }
  return text;
}",0.8700729927007299
129370,"/** 
 * Adds double quotes if Talend type is Date or String.
 * @param bean
 * @param value
 * @return
 */
private void handleDefaultValue(MetadataColumn bean){
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    String returnValue=bean.getDefaultValue();
  if (bean.getTalendType().equals(JavaTypesManager.STRING.getId()) || bean.getTalendType().equals(JavaTypesManager.DATE.getId())) {
    if (returnValue == null || returnValue.length() == 0) {
      returnValue=null;
    }
 else     if (returnValue.equalsIgnoreCase(""String_Node_Str"")) {
      returnValue=""String_Node_Str"";
    }
 else {
      returnValue=returnValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    bean.setDefaultValue(returnValue);
  }
 else   if (bean.getTalendType().equals(JavaTypesManager.BOOLEAN.getId())) {
    String returnBoolean=TalendQuoteUtils.removeQuotes(returnValue);
    if (returnBoolean != null && returnBoolean.length() > 0 && returnBoolean.getBytes()[0] == 1) {
      returnValue=TalendQuoteUtils.addQuotes(""String_Node_Str"");
      bean.setDefaultValue(returnValue);
    }
  }
default :
}
}","/** 
 * Adds double quotes if Talend type is Date or String.
 * @param bean
 * @param value
 * @return
 */
private void handleDefaultValue(MetadataColumn bean){
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    String returnValue=bean.getDefaultValue();
  if (bean.getTalendType().equals(JavaTypesManager.STRING.getId()) || bean.getTalendType().equals(JavaTypesManager.DATE.getId())) {
    if (returnValue == null || returnValue.length() == 0) {
      returnValue=null;
    }
 else     if (returnValue.equalsIgnoreCase(""String_Node_Str"")) {
      returnValue=""String_Node_Str"";
    }
    bean.setDefaultValue(returnValue);
  }
 else   if (bean.getTalendType().equals(JavaTypesManager.BOOLEAN.getId())) {
    String returnBoolean=TalendQuoteUtils.removeQuotes(returnValue);
    if (returnBoolean != null && returnBoolean.length() > 0 && returnBoolean.getBytes()[0] == 1) {
      returnValue=TalendQuoteUtils.addQuotes(""String_Node_Str"");
      bean.setDefaultValue(returnValue);
    }
  }
default :
}
}",0.9561527581329562
129371,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9986140626443684
129372,"/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
    defautVal=TalendQuoteUtils.removeQuotes(defautVal);
    if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
    }
    initialValue.setBody(defautVal);
  }
 else {
    initialValue.setBody(TalendQuoteUtils.addQuotesIfNotExist(defautVal));
  }
}","/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column,DatabaseMetaData dbMetaData){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  boolean defaultValueIsFunction=false;
  List<String> functions=getAllDBFuctions(dbMetaData);
  if (functions.contains(defautVal)) {
    defaultValueIsFunction=true;
  }
  if (!defaultValueIsFunction) {
    if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.removeQuotes(defautVal);
      if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
        defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
      }
    }
 else {
      defautVal=TalendQuoteUtils.addSingleQuotesIfNotExist(defautVal);
    }
  }
  initialValue.setBody(defautVal);
}",0.8645990922844176
129373,"/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(QUOTATION_MARK)) {
    text=QUOTATION_MARK + text;
  }
  if (!text.endsWith(QUOTATION_MARK)) {
    text=text + QUOTATION_MARK;
  }
  return text;
}","/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text,String quote){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(quote)) {
    text=quote + text;
  }
  if (!text.endsWith(quote)) {
    text=text + quote;
  }
  return text;
}",0.8700729927007299
129374,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9986140626443684
129375,"/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
    defautVal=TalendQuoteUtils.removeQuotes(defautVal);
    if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
    }
    initialValue.setBody(defautVal);
  }
 else {
    initialValue.setBody(TalendQuoteUtils.addQuotesIfNotExist(defautVal));
  }
}","/** 
 * DOC ycbai Comment method ""handleDefaultValue"".
 * @param column
 */
public static void handleDefaultValue(MetadataColumn column,DatabaseMetaData dbMetaData){
  if (column == null) {
    return;
  }
  String talendType=column.getTalendType();
  if (talendType == null) {
    return;
  }
  Expression initialValue=column.getInitialValue();
  if (initialValue == null) {
    return;
  }
  String defautVal=initialValue.getBody();
  if (StringUtils.isEmpty(defautVal)) {
    return;
  }
  boolean defaultValueIsFunction=false;
  List<String> functions=getAllDBFuctions(dbMetaData);
  if (functions.contains(defautVal)) {
    defaultValueIsFunction=true;
  }
  if (!defaultValueIsFunction) {
    if (talendType.equals(JavaTypesManager.INTEGER.getId()) || talendType.equals(JavaTypesManager.FLOAT.getId()) || talendType.equals(JavaTypesManager.DOUBLE.getId())|| talendType.equals(JavaTypesManager.LONG.getId())|| talendType.equals(JavaTypesManager.SHORT.getId())|| talendType.equals(JavaTypesManager.BIGDECIMAL.getId())|| talendType.equals(JavaTypesManager.CHARACTER.getId())) {
      defautVal=TalendQuoteUtils.removeQuotes(defautVal);
      if (column.getTalendType().equals(JavaTypesManager.CHARACTER.getId())) {
        defautVal=TalendQuoteUtils.addQuotes(defautVal,TalendQuoteUtils.SINGLE_QUOTE);
      }
    }
 else {
      defautVal=TalendQuoteUtils.addSingleQuotesIfNotExist(defautVal);
    }
  }
  initialValue.setBody(defautVal);
}",0.8645990922844176
129376,"/** 
 * Adds double quotes if Talend type is Date or String.
 * @param bean
 * @param value
 * @return
 */
private void handleDefaultValue(MetadataColumn bean){
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    String returnValue=bean.getDefaultValue();
  if (bean.getTalendType().equals(JavaTypesManager.STRING.getId()) || bean.getTalendType().equals(JavaTypesManager.DATE.getId())) {
    if (returnValue == null || returnValue.length() == 0) {
      returnValue=null;
    }
 else     if (returnValue.equalsIgnoreCase(""String_Node_Str"")) {
      returnValue=""String_Node_Str"";
    }
 else {
      returnValue=returnValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    bean.setDefaultValue(returnValue);
  }
 else   if (bean.getTalendType().equals(JavaTypesManager.BOOLEAN.getId())) {
    String returnBoolean=TalendQuoteUtils.removeQuotes(returnValue);
    if (returnBoolean != null && returnBoolean.length() > 0 && returnBoolean.getBytes()[0] == 1) {
      returnValue=TalendQuoteUtils.addQuotes(""String_Node_Str"");
      bean.setDefaultValue(returnValue);
    }
  }
default :
}
}","/** 
 * Adds double quotes if Talend type is Date or String.
 * @param bean
 * @param value
 * @return
 */
private void handleDefaultValue(MetadataColumn bean){
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    String returnValue=bean.getDefaultValue();
  if (bean.getTalendType().equals(JavaTypesManager.STRING.getId()) || bean.getTalendType().equals(JavaTypesManager.DATE.getId())) {
    if (returnValue == null || returnValue.length() == 0) {
      returnValue=null;
    }
 else     if (returnValue.equalsIgnoreCase(""String_Node_Str"")) {
      returnValue=""String_Node_Str"";
    }
    bean.setDefaultValue(returnValue);
  }
 else   if (bean.getTalendType().equals(JavaTypesManager.BOOLEAN.getId())) {
    String returnBoolean=TalendQuoteUtils.removeQuotes(returnValue);
    if (returnBoolean != null && returnBoolean.length() > 0 && returnBoolean.getBytes()[0] == 1) {
      returnValue=TalendQuoteUtils.addQuotes(""String_Node_Str"");
      bean.setDefaultValue(returnValue);
    }
  }
default :
}
}",0.9561527581329562
129377,"/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(QUOTATION_MARK)) {
    text=QUOTATION_MARK + text;
  }
  if (!text.endsWith(QUOTATION_MARK)) {
    text=text + QUOTATION_MARK;
  }
  return text;
}","/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text,String quote){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(quote)) {
    text=quote + text;
  }
  if (!text.endsWith(quote)) {
    text=text + quote;
  }
  return text;
}",0.8700729927007299
129378,"/** 
 * Adds double quotes if Talend type is Date or String.
 * @param bean
 * @param value
 * @return
 */
private void handleDefaultValue(MetadataColumn bean){
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    String returnValue=bean.getDefaultValue();
  if (bean.getTalendType().equals(JavaTypesManager.STRING.getId()) || bean.getTalendType().equals(JavaTypesManager.DATE.getId())) {
    if (returnValue == null || returnValue.length() == 0) {
      returnValue=null;
    }
 else     if (returnValue.equalsIgnoreCase(""String_Node_Str"")) {
      returnValue=""String_Node_Str"";
    }
 else {
      returnValue=returnValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    bean.setDefaultValue(returnValue);
  }
 else   if (bean.getTalendType().equals(JavaTypesManager.BOOLEAN.getId())) {
    String returnBoolean=TalendQuoteUtils.removeQuotes(returnValue);
    if (returnBoolean != null && returnBoolean.length() > 0 && returnBoolean.getBytes()[0] == 1) {
      returnValue=TalendQuoteUtils.addQuotes(""String_Node_Str"");
      bean.setDefaultValue(returnValue);
    }
  }
default :
}
}","/** 
 * Adds double quotes if Talend type is Date or String.
 * @param bean
 * @param value
 * @return
 */
private void handleDefaultValue(MetadataColumn bean){
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    String returnValue=bean.getDefaultValue();
  if (bean.getTalendType().equals(JavaTypesManager.STRING.getId()) || bean.getTalendType().equals(JavaTypesManager.DATE.getId())) {
    if (returnValue == null || returnValue.length() == 0) {
      returnValue=null;
    }
 else     if (returnValue.equalsIgnoreCase(""String_Node_Str"")) {
      returnValue=""String_Node_Str"";
    }
    bean.setDefaultValue(returnValue);
  }
 else   if (bean.getTalendType().equals(JavaTypesManager.BOOLEAN.getId())) {
    String returnBoolean=TalendQuoteUtils.removeQuotes(returnValue);
    if (returnBoolean != null && returnBoolean.length() > 0 && returnBoolean.getBytes()[0] == 1) {
      returnValue=TalendQuoteUtils.addQuotes(""String_Node_Str"");
      bean.setDefaultValue(returnValue);
    }
  }
default :
}
}",0.9561527581329562
129379,"/** 
 * This method is not intended to be overriden.
 * @param event
 */
protected void handleSelectionEvent(Event event){
  beforeCommandExecution();
  this.commandToExecute=getCommandToExecute();
  if (this.commandToExecute != null) {
    executeCommand(this.commandToExecute);
    afterCommandExecution(this.commandToExecute);
  }
}","/** 
 * This method is not intended to be overriden.
 * @param event
 */
protected void handleSelectionEvent(Event event){
  beforeCommandExecution();
  this.commandToExecute=getCommandToExecute();
  if (this.commandToExecute != null) {
    if (commandToExecute instanceof ExtendedTableCopyCommand) {
      commandToExecute.execute();
    }
 else {
      executeCommand(this.commandToExecute);
      afterCommandExecution(this.commandToExecute);
    }
  }
}",0.7550505050505051
129380,"/** 
 * This method is not intended to be overriden.
 * @param event
 */
protected void handleSelectionEvent(Event event){
  beforeCommandExecution();
  this.commandToExecute=getCommandToExecute();
  if (this.commandToExecute != null) {
    executeCommand(this.commandToExecute);
    afterCommandExecution(this.commandToExecute);
  }
}","/** 
 * This method is not intended to be overriden.
 * @param event
 */
protected void handleSelectionEvent(Event event){
  beforeCommandExecution();
  this.commandToExecute=getCommandToExecute();
  if (this.commandToExecute != null) {
    if (commandToExecute instanceof ExtendedTableCopyCommand) {
      commandToExecute.execute();
    }
 else {
      executeCommand(this.commandToExecute);
      afterCommandExecution(this.commandToExecute);
    }
  }
}",0.7550505050505051
129381,"public int compare(IConnection connection1,IConnection connection2){
  EConnectionType lineStyle=connection1.getLineStyle();
  EConnectionType lineStyle2=connection2.getLineStyle();
  if (""String_Node_Str"".equals(connection1.getConnectorName())) {
    return -1;
  }
  if (""String_Node_Str"".equals(connection2.getConnectorName())) {
    return 1;
  }
  if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
    return -1;
  }
  if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
    return 1;
  }
  return 0;
}","@Override public int compare(IConnection connection1,IConnection connection2){
  EConnectionType lineStyle=connection1.getLineStyle();
  EConnectionType lineStyle2=connection2.getLineStyle();
  if (""String_Node_Str"".equals(connection1.getConnectorName())) {
    return -1;
  }
  if (""String_Node_Str"".equals(connection2.getConnectorName())) {
    return 1;
  }
  if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
    return -1;
  }
  if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
    return 1;
  }
  return 0;
}",0.9915254237288136
129382,"/** 
 * DOC sort the outgoingconnections to make sure the first connection is EConnectionType.FLOW_MAIN or EConnectionType.FLOW_REF<br/> <p> bug:9363, if a component have 2 output links, <li>""EConnectionType.FLOW_MAIN(FLOW), EConnectionType.FLOW_REF(REJECT)""</li> <li>""EConnectionType.FLOW_MAIN(REJECT), EConnectionType.FLOW_REF(FLOW)""</li>, make FLOW before ""REJECT"" </p>
 * @param node
 * @return List<? extends IConnection>
 */
public static List<? extends IConnection> getOutgoingCamelSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      public int compare(      IConnection o1,      IConnection o2){
        if (EConnectionType.ROUTE_WHEN == o1.getLineStyle())         return -1;
        if (EConnectionType.ROUTE_OTHER == o1.getLineStyle())         if (EConnectionType.ROUTE_WHEN == o2.getLineStyle())         return 1;
        if (EConnectionType.ROUTE_ENDBLOCK == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle() || EConnectionType.ROUTE_OTHER == o2.getLineStyle())           return 2;
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle() || EConnectionType.ROUTE_FINALLY == o2.getLineStyle())           return 3;
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 4;
          }
        }
        if (EConnectionType.ROUTE_TRY == o1.getLineStyle())         return -1;
        if (EConnectionType.ROUTE_CATCH == o1.getLineStyle())         if (EConnectionType.ROUTE_TRY == o2.getLineStyle())         return 1;
        if (EConnectionType.ROUTE_FINALLY == o1.getLineStyle())         if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle())         return 2;
        return 0;
      }
    }
);
  }
  return conns;
}","/** 
 * DOC sort the outgoingconnections to make sure the first connection is EConnectionType.FLOW_MAIN or EConnectionType.FLOW_REF<br/> <p> bug:9363, if a component have 2 output links, <li>""EConnectionType.FLOW_MAIN(FLOW), EConnectionType.FLOW_REF(REJECT)""</li> <li>""EConnectionType.FLOW_MAIN(REJECT), EConnectionType.FLOW_REF(FLOW)""</li>, make FLOW before ""REJECT"" </p>
 * @param node
 * @return List<? extends IConnection>
 */
public static List<? extends IConnection> getOutgoingCamelSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      @Override public int compare(      IConnection o1,      IConnection o2){
        if (EConnectionType.ROUTE_WHEN == o1.getLineStyle()) {
          return -1;
        }
        if (EConnectionType.ROUTE_OTHER == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle()) {
            return 1;
          }
        }
        if (EConnectionType.ROUTE_ENDBLOCK == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_WHEN == o2.getLineStyle() || EConnectionType.ROUTE_OTHER == o2.getLineStyle()) {
            return 2;
          }
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle() || EConnectionType.ROUTE_FINALLY == o2.getLineStyle()) {
            return 3;
          }
          if (EConnectionType.ROUTE == o2.getLineStyle()) {
            return 4;
          }
        }
        if (EConnectionType.ROUTE_TRY == o1.getLineStyle()) {
          return -1;
        }
        if (EConnectionType.ROUTE_CATCH == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle()) {
            return 1;
          }
        }
        if (EConnectionType.ROUTE_FINALLY == o1.getLineStyle()) {
          if (EConnectionType.ROUTE_TRY == o2.getLineStyle() || EConnectionType.ROUTE_CATCH == o2.getLineStyle()) {
            return 2;
          }
        }
        return 0;
      }
    }
);
  }
  return conns;
}",0.9609043805934998
129383,"public static List<? extends IConnection> getOutgoingSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      public int compare(      IConnection connection1,      IConnection connection2){
        EConnectionType lineStyle=connection1.getLineStyle();
        EConnectionType lineStyle2=connection2.getLineStyle();
        if (""String_Node_Str"".equals(connection1.getConnectorName())) {
          return -1;
        }
        if (""String_Node_Str"".equals(connection2.getConnectorName())) {
          return 1;
        }
        if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
          return -1;
        }
        if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
          return 1;
        }
        return 0;
      }
    }
);
  }
  return conns;
}","public static List<? extends IConnection> getOutgoingSortedConnections(INode node){
  List<IConnection> conns=null;
  List<? extends IConnection> outgoingConnections=node.getOutgoingConnections();
  if (outgoingConnections != null) {
    conns=new ArrayList<IConnection>(outgoingConnections);
    Collections.sort(conns,new Comparator<IConnection>(){
      @Override public int compare(      IConnection connection1,      IConnection connection2){
        EConnectionType lineStyle=connection1.getLineStyle();
        EConnectionType lineStyle2=connection2.getLineStyle();
        if (""String_Node_Str"".equals(connection1.getConnectorName())) {
          return -1;
        }
        if (""String_Node_Str"".equals(connection2.getConnectorName())) {
          return 1;
        }
        if (lineStyle == EConnectionType.FLOW_MAIN || lineStyle == EConnectionType.FLOW_MERGE) {
          return -1;
        }
        if (lineStyle2 == EConnectionType.FLOW_MAIN || lineStyle2 == EConnectionType.FLOW_MERGE) {
          return 1;
        }
        return 0;
      }
    }
);
  }
  return conns;
}",0.9953959484346224
129384,"public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      emfFolder.getChildren().remove(childrens[i]);
      newFolder.getChildren().add(childrens[i]);
      AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
      if (resChangeService != null) {
        resChangeService.postMove(childrens[i],targetPath.toString() + IPath.SEPARATOR + sourcePath.lastSegment());
      }
      childrens[i].setParent(newFolder);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(childrens[i].getProperty());
      for (      Resource resource : affectedResources) {
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(resource);
        List<Resource> needSaves=new ArrayList<Resource>();
        for (        EObject object : find.keySet()) {
          Resource re=object.eResource();
          if (re == null) {
            continue;
          }
          EcoreUtil.resolveAll(re);
          needSaves.add(re);
        }
        xmiResourceManager.moveResource(resource,path);
        if (resChangeService != null) {
          for (          Resource toSave : needSaves) {
            resChangeService.saveResourceByEMFShared(toSave);
          }
        }
      }
      affectedResources=xmiResourceManager.getAffectedResources(childrens[i].getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      emfFolder.getChildren().remove(childrens[i]);
      newFolder.getChildren().add(childrens[i]);
      childrens[i].setParent(newFolder);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(childrens[i].getProperty());
      for (      Resource resource : affectedResources) {
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(resource);
        List<Resource> needSaves=new ArrayList<Resource>();
        for (        EObject object : find.keySet()) {
          Resource re=object.eResource();
          if (re == null) {
            continue;
          }
          EcoreUtil.resolveAll(re);
          needSaves.add(re);
        }
        xmiResourceManager.moveResource(resource,path);
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          for (          Resource toSave : needSaves) {
            resChangeService.saveResourceByEMFShared(toSave);
          }
        }
      }
      affectedResources=xmiResourceManager.getAffectedResources(childrens[i].getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.7944126074498568
129385,"public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
      if (resChangeService != null) {
        resChangeService.postMove(childrens[i],targetPath.toString() + IPath.SEPARATOR + sourcePath.lastSegment());
      }
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,childrens[i]);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,childrens[i]);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.9464865789023764
129386,"/** 
 * This method is not intended to be overriden.
 * @param event
 */
protected void handleSelectionEvent(Event event){
  beforeCommandExecution();
  this.commandToExecute=getCommandToExecute();
  if (this.commandToExecute != null) {
    executeCommand(this.commandToExecute);
    afterCommandExecution(this.commandToExecute);
  }
}","/** 
 * This method is not intended to be overriden.
 * @param event
 */
protected void handleSelectionEvent(Event event){
  beforeCommandExecution();
  this.commandToExecute=getCommandToExecute();
  if (this.commandToExecute != null) {
    if (commandToExecute instanceof ExtendedTableCopyCommand) {
      commandToExecute.execute();
    }
 else {
      executeCommand(this.commandToExecute);
      afterCommandExecution(this.commandToExecute);
    }
  }
}",0.7550505050505051
129387,"/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
 finally {
    try {
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnect(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}","/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
 finally {
    try {
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}",0.9988249118683902
129388,"protected EDatabaseTypeName getDbType(){
  return dbType;
}","public EDatabaseTypeName getDbType(){
  return dbType;
}",0.9043478260869564
129389,"/** 
 * DOC ggu Comment method ""returnMetadataColumnsFormTable"".
 * @param metadataConnection
 * @param tableLabel
 * @param dontCreateClose
 * @return
 * @deprecated because still use it
 */
public synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection metadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    tableLabel=checkTableLabel(tableLabel);
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)metadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,metadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    closeConnect(metadataConnection,wapperDriver);
  }
  return metadataColumns;
}","/** 
 * DOC ggu Comment method ""returnMetadataColumnsFormTable"".
 * @param metadataConnection
 * @param tableLabel
 * @param dontCreateClose
 * @return
 * @deprecated because still use it
 */
@Deprecated public synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection metadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    tableLabel=checkTableLabel(tableLabel);
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)metadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,metadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    closeConnection(metadataConnection,wapperDriver);
  }
  return metadataColumns;
}",0.9964037401102852
129390,"/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
protected List<String> getTableNamesFromTables(ResultSet resultSet,IMetadataConnection metadataConnection) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  tableCommentsMap.clear();
  if (resultSet != null) {
    while (resultSet.next()) {
      String nameKey=resultSet.getString(GetTable.TABLE_NAME.name());
      String colComment=getTableComment(metadataConnection,resultSet,nameKey);
      itemTablesName.add(nameKey);
      if (tableCommentsMap.containsKey(nameKey)) {
        if (colComment == null) {
          colComment=""String_Node_Str"";
        }
        tableCommentsMap.remove(nameKey);
        tableCommentsMap.put(nameKey,colComment);
      }
      tableCommentsMap.put(nameKey,colComment);
      if (tableTypeMap.containsKey(nameKey)) {
        tableTypeMap.remove(nameKey);
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
 else       tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
    }
    resultSet.close();
  }
  return itemTablesName;
}","/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
protected List<String> getTableNamesFromTables(ResultSet resultSet,IMetadataConnection metadataConnection) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  tableCommentsMap.clear();
  if (resultSet != null) {
    while (resultSet.next()) {
      String nameKey=resultSet.getString(GetTable.TABLE_NAME.name());
      String colComment=getTableComment(metadataConnection,resultSet,nameKey);
      itemTablesName.add(nameKey);
      if (tableCommentsMap.containsKey(nameKey)) {
        if (colComment == null) {
          colComment=""String_Node_Str"";
        }
        tableCommentsMap.remove(nameKey);
        tableCommentsMap.put(nameKey,colComment);
      }
      tableCommentsMap.put(nameKey,colComment);
      if (tableTypeMap.containsKey(nameKey)) {
        tableTypeMap.remove(nameKey);
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
 else {
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
    }
    resultSet.close();
  }
  return itemTablesName;
}",0.976824034334764
129391,"/** 
 * DOC ggu Comment method ""returnTablesFormConnection"". work for @see ExtractMetaDataFromDataBase.returnTablesFormConnection(...)
 * @param metadataConnection
 * @param tableInfoParameters
 * @return
 */
public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters){
  getTableTypeMap().clear();
  List<String> itemTablesName=new ArrayList<String>();
  List connList=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
  try {
    if (!tableInfoParameters.isUsedName()) {
      if (tableInfoParameters.getSqlFiter() != null && !""String_Node_Str"".equals(tableInfoParameters.getSqlFiter())) {
        Statement stmt=ExtractMetaDataUtils.conn.createStatement();
        ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
        ResultSet rsTables=stmt.executeQuery(tableInfoParameters.getSqlFiter());
        itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
        rsTables.close();
        stmt.close();
      }
    }
 else {
      retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  filterTablesFromRecycleBin(metadataConnection,itemTablesName);
  ExtractMetaDataUtils.closeConnection();
  DriverShim wapperDriver=null;
  if (connList != null && connList.size() > 0) {
    for (int i=0; i < connList.size(); i++) {
      if (connList.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)connList.get(i);
      }
    }
  }
  closeConnect(metadataConnection,wapperDriver);
  return itemTablesName;
}","/** 
 * DOC ggu Comment method ""returnTablesFormConnection"". work for @see ExtractMetaDataFromDataBase.returnTablesFormConnection(...)
 * @param metadataConnection
 * @param tableInfoParameters
 * @return
 */
public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection,TableInfoParameters tableInfoParameters){
  getTableTypeMap().clear();
  List<String> itemTablesName=new ArrayList<String>();
  List connList=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
  try {
    if (!tableInfoParameters.isUsedName()) {
      if (tableInfoParameters.getSqlFiter() != null && !""String_Node_Str"".equals(tableInfoParameters.getSqlFiter())) {
        Statement stmt=ExtractMetaDataUtils.conn.createStatement();
        ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
        ResultSet rsTables=stmt.executeQuery(tableInfoParameters.getSqlFiter());
        itemTablesName=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
        rsTables.close();
        stmt.close();
      }
    }
 else {
      retrieveItemTables(metadataConnection,tableInfoParameters,itemTablesName);
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  filterTablesFromRecycleBin(metadataConnection,itemTablesName);
  ExtractMetaDataUtils.closeConnection();
  DriverShim wapperDriver=null;
  if (connList != null && connList.size() > 0) {
    for (int i=0; i < connList.size(); i++) {
      if (connList.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)connList.get(i);
      }
    }
  }
  closeConnection(metadataConnection,wapperDriver);
  return itemTablesName;
}",0.9992730797189242
129392,"/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    closeConnect(metadataConnection,wapperDriver);
  }
  return metadataColumns;
}","/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    closeConnection(metadataConnection,wapperDriver);
  }
  return metadataColumns;
}",0.999493670886076
129393,"/** 
 * DOC qzhang Comment method ""getResultSetFromTableInfo"".
 * @param dbMetaData
 * @return
 * @throws SQLException
 */
protected ResultSet getResultSetFromTableInfo(TableInfoParameters tableInfo,String namePattern,IMetadataConnection iMetadataConnection,String schema) throws SQLException {
  ResultSet rsTables=null;
  String tableNamePattern=""String_Node_Str"".equals(namePattern) ? null : namePattern;
  String[] types=new String[tableInfo.getTypes().size()];
  for (int i=0; i < types.length; i++) {
    final String selectedTypeName=tableInfo.getTypes().get(i).getName();
    if (""String_Node_Str"".equals(selectedTypeName) && iMetadataConnection.getDbType().equals(EDatabaseTypeName.IBMDB2.getDisplayName())) {
      types[i]=""String_Node_Str"";
    }
 else     types[i]=selectedTypeName;
  }
  DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
  ResultSet rsTableTypes=null;
  rsTableTypes=dbMetaData.getTableTypes();
  Set<String> availableTableTypes=new HashSet<String>();
  String[] neededTableTypes={ETableTypes.TABLETYPE_TABLE.getName(),ETableTypes.TABLETYPE_VIEW.getName(),ETableTypes.TABLETYPE_SYNONYM.getName()};
  while (rsTableTypes.next()) {
    String currentTableType=StringUtils.trimToEmpty(rsTableTypes.getString(""String_Node_Str""));
    if (ArrayUtils.contains(neededTableTypes,currentTableType)) {
      availableTableTypes.add(currentTableType);
    }
  }
  rsTableTypes.close();
  rsTables=dbMetaData.getTables(null,schema,tableNamePattern,types);
  return rsTables;
}","/** 
 * DOC qzhang Comment method ""getResultSetFromTableInfo"".
 * @param dbMetaData
 * @return
 * @throws SQLException
 */
protected ResultSet getResultSetFromTableInfo(TableInfoParameters tableInfo,String namePattern,IMetadataConnection iMetadataConnection,String schema) throws SQLException {
  ResultSet rsTables=null;
  String tableNamePattern=""String_Node_Str"".equals(namePattern) ? null : namePattern;
  String[] types=new String[tableInfo.getTypes().size()];
  for (int i=0; i < types.length; i++) {
    final String selectedTypeName=tableInfo.getTypes().get(i).getName();
    if (""String_Node_Str"".equals(selectedTypeName) && iMetadataConnection.getDbType().equals(EDatabaseTypeName.IBMDB2.getDisplayName())) {
      types[i]=""String_Node_Str"";
    }
 else {
      types[i]=selectedTypeName;
    }
  }
  DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
  ResultSet rsTableTypes=null;
  rsTableTypes=dbMetaData.getTableTypes();
  Set<String> availableTableTypes=new HashSet<String>();
  String[] neededTableTypes={ETableTypes.TABLETYPE_TABLE.getName(),ETableTypes.TABLETYPE_VIEW.getName(),ETableTypes.TABLETYPE_SYNONYM.getName()};
  while (rsTableTypes.next()) {
    String currentTableType=StringUtils.trimToEmpty(rsTableTypes.getString(""String_Node_Str""));
    if (ArrayUtils.contains(neededTableTypes,currentTableType)) {
      availableTableTypes.add(currentTableType);
    }
  }
  rsTableTypes.close();
  rsTables=dbMetaData.getTables(null,schema,tableNamePattern,types);
  return rsTables;
}",0.9969604863221884
129394,"public static ExtractManager create(EDatabaseTypeName dbType){
  if (dbType == null) {
    return null;
  }
switch (dbType) {
case ACCESS:
    return new AccessExtractManager();
case AS400:
  return new AS400ExtractManager();
case GENERAL_JDBC:
return new GeneralJDBCExtractManager();
case HIVE:
return new HiveExtractManager();
case HSQLDB:
case HSQLDB_SERVER:
case HSQLDB_WEBSERVER:
case HSQLDB_IN_PROGRESS:
return new HSQLDBExtractManager(dbType);
case IBMDB2:
case IBMDB2ZOS:
return new IBMDB2ExtractManager(dbType);
case JAVADB_EMBEDED:
case JAVADB_DERBYCLIENT:
case JAVADB_JCCJDBC:
return new JAVADBExtractManager(dbType);
case MSSQL:
case MSSQL05_08:
return new MSSQLExtractManager(dbType);
case MYSQL:
return new MySQLExtractManager();
case ORACLEFORSID:
case ORACLESN:
case ORACLE_RAC:
case ORACLE_OCI:
return new OracleExtractManager(dbType);
case TERADATA:
return new TeradataExtractManager();
default :
return new ExtractManager(dbType);
}
}","public static ExtractManager create(EDatabaseTypeName dbType){
  if (dbType == null) {
    return null;
  }
switch (dbType) {
case ACCESS:
    return new AccessExtractManager();
case AS400:
  return new AS400ExtractManager();
case GENERAL_JDBC:
return new GeneralJDBCExtractManager();
case HIVE:
return new HiveExtractManager();
case HSQLDB:
case HSQLDB_SERVER:
case HSQLDB_WEBSERVER:
case HSQLDB_IN_PROGRESS:
return new HSQLDBExtractManager(dbType);
case IBMDB2:
case IBMDB2ZOS:
return new IBMDB2ExtractManager(dbType);
case JAVADB:
case JAVADB_EMBEDED:
case JAVADB_DERBYCLIENT:
case JAVADB_JCCJDBC:
return new JAVADBExtractManager(dbType);
case MSSQL:
case MSSQL05_08:
return new MSSQLExtractManager(dbType);
case MYSQL:
return new MySQLExtractManager();
case ORACLEFORSID:
case ORACLESN:
case ORACLE_RAC:
case ORACLE_OCI:
return new OracleExtractManager(dbType);
case TERADATA:
return new TeradataExtractManager();
default :
return new ExtractManager(dbType);
}
}",0.993225638353309
129395,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new RepositoryNameSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
}",0.995067817509248
129396,"/** 
 * DOC cantoine. Method to return a Collection of Column about a Table for a DB connection.
 * @param IMetadataConnection iMetadataConnection
 * @param String tableLabel
 * @return Collection of MetadataColumn Object of a Table
 * @deprecated
 */
public static synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection iMetadataConnection,String tableLabel,boolean... dontCreateClose){
  ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(iMetadataConnection.getDbType());
  if (extractManager != null) {
    return extractManager.returnMetadataColumnsFormTable(iMetadataConnection,tableLabel,dontCreateClose);
  }
  return Collections.emptyList();
}","/** 
 * DOC cantoine. Method to return a Collection of Column about a Table for a DB connection.
 * @param IMetadataConnection iMetadataConnection
 * @param String tableLabel
 * @return Collection of MetadataColumn Object of a Table
 * @deprecated
 */
public static synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection iMetadataConnection,String tableLabel,boolean... dontCreateClose){
  ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(iMetadataConnection.getDbType());
  if (extractManager != null) {
    List<TdColumn> columns=extractManager.returnMetadataColumnsFormTable(iMetadataConnection,tableLabel,dontCreateClose);
    tableCommentsMap.clear();
    tableCommentsMap.putAll(extractManager.getTableCommentsMap());
    return columns;
  }
  return Collections.emptyList();
}",0.8618205631958088
129397,"/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
public static List<String> getTableNamesFromQuery(ResultSet resultSet) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  Map<String,String> tableCommentsMap=new HashMap<String,String>();
  while (resultSet.next()) {
    String nameKey=resultSet.getString(1).trim();
    String tableComment=getTableComment(nameKey,resultSet,false);
    if (tableCommentsMap.containsKey(nameKey)) {
      if (tableComment == null) {
        tableComment=""String_Node_Str"";
      }
      tableCommentsMap.remove(nameKey);
      tableCommentsMap.put(nameKey,tableComment);
    }
    itemTablesName.add(nameKey);
    tableCommentsMap.put(nameKey,tableComment);
  }
  return itemTablesName;
}","/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
public static List<String> getTableNamesFromQuery(ResultSet resultSet) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  tableCommentsMap.clear();
  while (resultSet.next()) {
    String nameKey=resultSet.getString(1).trim();
    String tableComment=getTableComment(nameKey,resultSet,false);
    if (tableCommentsMap.containsKey(nameKey)) {
      if (tableComment == null) {
        tableComment=""String_Node_Str"";
      }
      tableCommentsMap.remove(nameKey);
      tableCommentsMap.put(nameKey,tableComment);
    }
    itemTablesName.add(nameKey);
    tableCommentsMap.put(nameKey,tableComment);
  }
  return itemTablesName;
}",0.9510664993726474
129398,"/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
protected List<String> getTableNamesFromTables(ResultSet resultSet,IMetadataConnection metadataConnection) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  Map<String,String> tableCommentsMap=new HashMap<String,String>();
  if (resultSet != null) {
    while (resultSet.next()) {
      String nameKey=resultSet.getString(GetTable.TABLE_NAME.name());
      String colComment=getTableComment(metadataConnection,resultSet,nameKey);
      itemTablesName.add(nameKey);
      if (tableCommentsMap.containsKey(nameKey)) {
        if (colComment == null) {
          colComment=""String_Node_Str"";
        }
        tableCommentsMap.remove(nameKey);
        tableCommentsMap.put(nameKey,colComment);
      }
      tableCommentsMap.put(nameKey,colComment);
      if (tableTypeMap.containsKey(nameKey)) {
        tableTypeMap.remove(nameKey);
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
 else       tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
    }
    resultSet.close();
  }
  return itemTablesName;
}","/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
protected List<String> getTableNamesFromTables(ResultSet resultSet,IMetadataConnection metadataConnection) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  tableCommentsMap.clear();
  if (resultSet != null) {
    while (resultSet.next()) {
      String nameKey=resultSet.getString(GetTable.TABLE_NAME.name());
      String colComment=getTableComment(metadataConnection,resultSet,nameKey);
      itemTablesName.add(nameKey);
      if (tableCommentsMap.containsKey(nameKey)) {
        if (colComment == null) {
          colComment=""String_Node_Str"";
        }
        tableCommentsMap.remove(nameKey);
        tableCommentsMap.put(nameKey,colComment);
      }
      tableCommentsMap.put(nameKey,colComment);
      if (tableTypeMap.containsKey(nameKey)) {
        tableTypeMap.remove(nameKey);
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
 else       tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
    }
    resultSet.close();
  }
  return itemTablesName;
}",0.9669211195928752
129399,"public static void getTableXmlFileValue(Connection connection,String value,IElementParameter param,List<Map<String,Object>> tableInfo,IMetadataTable metaTable){
  if (connection instanceof XmlFileConnection) {
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    if (xmlConnection.isInputModel()) {
      EList objectList=xmlConnection.getSchema();
      XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
      if (value.equals(""String_Node_Str"")) {
        if (xmlDesc == null) {
          return;
        }
 else {
          String[] list=param.getListRepositoryItems();
          int column=0;
          boolean found=false;
          for (int k=0; (k < list.length) && (!found); k++) {
            if (list[k].equals(""String_Node_Str"")) {
              column=k;
              found=true;
            }
          }
          EList schemaList=xmlDesc.getSchemaTargets();
          String[] names=param.getListItemsDisplayCodeName();
          for (int k=0; k < schemaList.size(); k++) {
            if (tableInfo.size() > k) {
              Map<String,Object> line=tableInfo.get(k);
              if (metaTable != null) {
                if (metaTable.getListColumns().size() > k) {
                  SchemaTarget schemaTarget=(SchemaTarget)schemaList.get(k);
                  String strValue=TalendQuoteUtils.addQuotes(schemaTarget.getRelativeXPathQuery());
                  line.put(names[column],strValue);
                }
              }
            }
          }
        }
      }
    }
  }
  if (connection instanceof MDMConnection) {
    MDMConnection mdmConnection=(MDMConnection)connection;
    EList objectList=mdmConnection.getSchemas();
    for (    Concept concept : (List<Concept>)objectList) {
      if (concept.getLabel() == null || concept.getLabel().equals(metaTable.getLabel())) {
        if (value.equals(""String_Node_Str"")) {
          if (concept == null) {
            return;
          }
 else {
            String[] list=param.getListRepositoryItems();
            int column=0;
            boolean found=false;
            for (int k=0; (k < list.length) && (!found); k++) {
              if (list[k].equals(""String_Node_Str"")) {
                column=k;
                found=true;
              }
            }
            EList conceptTargetsList=concept.getConceptTargets();
            String[] names=param.getListItemsDisplayCodeName();
            for (int k=0; k < conceptTargetsList.size(); k++) {
              if (tableInfo.size() > k) {
                Map<String,Object> line=tableInfo.get(k);
                if (metaTable != null) {
                  if (metaTable.getListColumns().size() > k) {
                    ConceptTarget conceptTarget=(ConceptTarget)conceptTargetsList.get(k);
                    String strValue=TalendQuoteUtils.addQuotes(conceptTarget.getRelativeLoopExpression());
                    line.put(names[column],strValue);
                  }
                }
              }
            }
          }
        }
        break;
      }
    }
  }
}","public static void getTableXmlFileValue(Connection connection,String value,IElementParameter param,List<Map<String,Object>> tableInfo,IMetadataTable metaTable){
  if (connection instanceof XmlFileConnection) {
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    if (xmlConnection.isInputModel()) {
      EList objectList=xmlConnection.getSchema();
      XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
      if (value.equals(""String_Node_Str"")) {
        if (xmlDesc == null) {
          return;
        }
 else {
          String[] list=param.getListRepositoryItems();
          int column=0;
          boolean found=false;
          for (int k=0; (k < list.length) && (!found); k++) {
            if (list[k].equals(""String_Node_Str"")) {
              column=k;
              found=true;
            }
          }
          EList schemaList=xmlDesc.getSchemaTargets();
          String[] names=param.getListItemsDisplayCodeName();
          for (int k=0; k < schemaList.size(); k++) {
            if (tableInfo.size() > k) {
              Map<String,Object> line=tableInfo.get(k);
              if (metaTable != null) {
                if (metaTable.getListColumns().size() > k) {
                  SchemaTarget schemaTarget=(SchemaTarget)schemaList.get(k);
                  String strValue=TalendQuoteUtils.addQuotes(schemaTarget.getRelativeXPathQuery());
                  line.put(names[column],strValue);
                }
              }
            }
          }
        }
      }
    }
  }
  if (connection instanceof MDMConnection) {
    MDMConnection mdmConnection=(MDMConnection)connection;
    EList objectList=mdmConnection.getSchemas();
    for (    Concept concept : (List<Concept>)objectList) {
      if (concept.getLabel() != null && concept.getLabel().equals(metaTable.getLabel())) {
        if (value.equals(""String_Node_Str"")) {
          String[] list=param.getListRepositoryItems();
          int column=0;
          boolean found=false;
          for (int k=0; (k < list.length) && (!found); k++) {
            if (list[k].equals(""String_Node_Str"")) {
              column=k;
              found=true;
            }
          }
          EList conceptTargetsList=concept.getConceptTargets();
          String[] names=param.getListItemsDisplayCodeName();
          for (int k=0; k < conceptTargetsList.size(); k++) {
            if (tableInfo.size() > k) {
              Map<String,Object> line=tableInfo.get(k);
              if (metaTable != null) {
                if (metaTable.getListColumns().size() > k) {
                  ConceptTarget conceptTarget=(ConceptTarget)conceptTargetsList.get(k);
                  String strValue=TalendQuoteUtils.addQuotes(conceptTarget.getRelativeLoopExpression());
                  line.put(names[column],strValue);
                }
              }
            }
          }
        }
        break;
      }
    }
  }
}",0.970465543133656
129400,"public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.getComponent().getOriginalFamilyName().startsWith(ELT_LABEL);
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataTool.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent && (!eltComponent),hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
}","public static void initializeMetadataTableView(MetadataTableEditorView metaView,INode node,IMetadataTable metadataTable){
  boolean dbComponent=false;
  boolean hasMappingType=false;
  boolean eltComponent=false;
  boolean hasRepositoryDbSchema=false;
  boolean isEBCDIC=false;
  if (node != null && node.getComponent() != null) {
    eltComponent=node.getComponent().getOriginalFamilyName().startsWith(ELT_LABEL);
    isEBCDIC=node.getComponent().getName().contains(""String_Node_Str"");
    if (node.getComponent().getOriginalFamilyName().startsWith(DATABASE_LABEL) || eltComponent || isEBCDIC) {
      dbComponent=true && !isEBCDIC;
      for (      IElementParameter currentParam : node.getElementParameters()) {
        if (currentParam.getFieldType().equals(EParameterFieldType.MAPPING_TYPE)) {
          metaView.setCurrentDbms((String)currentParam.getValue());
          hasMappingType=true;
        }
      }
      IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
      if (!hasMappingType && schemaParam != null) {
        String schemaType=(String)schemaParam.getValue();
        if (schemaType.equals(""String_Node_Str"")) {
          String metaRepositoryName=(String)node.getElementParameter(""String_Node_Str"").getValue();
          Connection connection=MetadataTool.getConnectionFromRepository(metaRepositoryName);
          boolean isDatabaseConnection=connection instanceof DatabaseConnection;
          boolean isGenericSchemaConnection=connection instanceof GenericSchemaConnection;
          if (isDatabaseConnection || isGenericSchemaConnection) {
            hasRepositoryDbSchema=true;
            for (            IMetadataColumn column : metadataTable.getListColumns()) {
              if ((column.getType() == ""String_Node_Str"") || (column.getType() == null)) {
                hasRepositoryDbSchema=false;
              }
            }
            String componentDbType=""String_Node_Str"";
            for (            IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
              if (param.getRepositoryValue() != null) {
                if (param.getRepositoryValue().equals(""String_Node_Str"")) {
                  componentDbType=(String)param.getValue();
                }
              }
            }
            if (!EDatabaseTypeName.supportDbType(componentDbType)) {
              hasRepositoryDbSchema=false;
            }
            String componentProduct=EDatabaseTypeName.getTypeFromDbType(componentDbType).getProduct();
            String connectionProduct=null;
            if (isDatabaseConnection) {
              connectionProduct=((DatabaseConnection)connection).getProductId();
              if (!componentProduct.equals(connectionProduct)) {
                hasRepositoryDbSchema=false;
              }
 else {
                metaView.setCurrentDbms(((DatabaseConnection)connection).getDbmsId());
              }
            }
 else             if (isGenericSchemaConnection) {
              String mappingTypeId=((GenericSchemaConnection)connection).getMappingTypeId();
              if (mappingTypeId != null) {
                connectionProduct=mappingTypeId;
                metaView.setCurrentDbms(connectionProduct);
              }
            }
          }
        }
      }
    }
  }
 else {
    eltComponent=false;
  }
  metaView.setShowDbTypeColumn(hasMappingType || eltComponent,false,hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowDbColumnName(dbComponent && (!eltComponent),hasMappingType || (dbComponent && !hasRepositoryDbSchema));
  metaView.setShowTalendTypeColumn(!eltComponent);
  metaView.setShowPatternColumn(!eltComponent);
  metaView.setShowOriginalLength(isEBCDIC);
  if (isEBCDIC) {
    metaView.setShowOriginalLength(true);
    List<String> fieldList=new ArrayList<String>();
    fieldList.add(""String_Node_Str"");
    fieldList.add(""String_Node_Str"");
    metaView.setAdditionalFields(fieldList);
  }
}",0.969216781400182
129401,"/** 
 * DOC amaumont Comment method ""getCommentAccessor"".
 * @return
 */
protected abstract IBeanPropertyAccessors<B,Integer> getOriginalLengthAccessor();","/** 
 * DOC ldong Comment method ""getCommentAccessor"".
 * @return
 */
protected abstract IBeanPropertyAccessors<B,Integer> getOriginalLengthAccessor();",0.9704918032786886
129402,"@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(this.readOnly);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  configureKeyColumn(tableViewerCreator);
  configureTypeColumns(tableViewerCreator);
  configureNullableColumn(tableViewerCreator);
  configurePatternColumn(tableViewerCreator);
  configureLengthColumn(tableViewerCreator);
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  configurePrecisionColumn(tableViewerCreator);
  configureDefaultColumn(tableViewerCreator);
  configureCommentColumn(tableViewerCreator);
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}","@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(this.readOnly);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  configureKeyColumn(tableViewerCreator);
  configureTypeColumns(tableViewerCreator);
  configureNullableColumn(tableViewerCreator);
  configurePatternColumn(tableViewerCreator);
  configureLengthColumn(tableViewerCreator);
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  configureAdditionalFieldColumns(tableViewerCreator);
  configurePrecisionColumn(tableViewerCreator);
  configureDefaultColumn(tableViewerCreator);
  configureCommentColumn(tableViewerCreator);
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}",0.9748053137883648
129403,"public String get(MetadataColumn bean){
  return bean.getRelationshipType();
}","public String get(MetadataColumn bean){
  String value=null;
  for (  TaggedValue tgValue : bean.getTaggedValue()) {
    String tag=tgValue.getTag();
    if (tag != null && tag.startsWith(ConvertionHelper.ADDITIONAL_FIELD_PREFIX) && tag.endsWith(field)) {
      value=tgValue.getValue();
      break;
    }
  }
  return value;
}",0.270935960591133
129404,"public void set(MetadataColumn bean,String value){
  bean.setRelationshipType(value);
}","public void set(MetadataColumn bean,String value){
  for (  TaggedValue tgValue : bean.getTaggedValue()) {
    String tag=tgValue.getTag();
    if (tag != null && tag.startsWith(ConvertionHelper.ADDITIONAL_FIELD_PREFIX) && tag.endsWith(field)) {
      tgValue.setValue(value);
      return;
    }
  }
  TaggedValue tgValue=orgomg.cwm.objectmodel.core.CoreFactory.eINSTANCE.createTaggedValue();
  tgValue.setTag(ConvertionHelper.ADDITIONAL_FIELD_PREFIX + field);
  tgValue.setValue(value);
}",0.2495667244367417
129405,"public String get(IMetadataColumn bean){
  return bean.getRelationshipType();
}","public String get(IMetadataColumn bean){
  return bean.getAdditionalField().get(field);
}",0.8214285714285714
129406,"public void set(IMetadataColumn bean,String value){
  bean.setRelationshipType(value);
}","public void set(IMetadataColumn bean,String value){
  bean.getAdditionalField().put(field,value);
}",0.8235294117647058
129407,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      metadataColumn.setOriginalField(metadataColumn.getLabel());
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalLength=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      final Node impliedDecimal=nodeMap.getNamedItem(""String_Node_Str"");
      final Node signed=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (originalLength.getNodeValue() != null) {
        try {
          metadataColumn.setOriginalLength(Integer.parseInt(originalLength.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      metadataColumn.setOriginalField(metadataColumn.getLabel());
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
      if (impliedDecimal.getNodeValue() != null) {
        TaggedValue impliedDc=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + impliedDecimal.getNodeName(),impliedDecimal.getNodeValue());
        metadataColumn.getTaggedValue().add(impliedDc);
      }
      if (signed.getNodeValue() != null) {
        TaggedValue sign=TaggedValueHelper.createTaggedValue(""String_Node_Str"" + signed.getNodeName(),signed.getNodeValue());
        metadataColumn.getTaggedValue().add(sign);
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9430127041742288
129408,"/** 
 * key is   {@link #IMPORT_PACKAGE} {@link #REQUIRE_BUNDLE} {@link #BUNDLE_CLASSPATH}
 * @return
 */
public Map<String,String> getBundleDependences(ProcessItem pi,EMap additionProperties);","/** 
 * key is   {@link #IMPORT_PACKAGE} {@link #REQUIRE_BUNDLE} {@link #BUNDLE_CLASSPATH}
 * @return
 */
public Map<String,String> getBundleDependences(ProcessItem pi,EMap<?,?> additionProperties);",0.9872122762148338
129409,"public void setOriginalDbColumnName(String originalDbColumnName){
  this.originalDbColumnName=originalDbColumnName;
}","@Override public void setOriginalDbColumnName(String originalDbColumnName){
  this.originalDbColumnName=originalDbColumnName;
}",0.9590163934426228
129410,"public String getLabel(){
  return this.label;
}","@Override public String getLabel(){
  return this.label;
}",0.9056603773584906
129411,"public String getTalendType(){
  return talendType;
}","@Override public String getTalendType(){
  return talendType;
}",0.913793103448276
129412,"public void setPrecision(Integer precision){
  this.precision=precision;
}","@Override public void setPrecision(Integer precision){
  this.precision=precision;
}",0.9367088607594936
129413,"public void setOriginalLength(Integer originalLength){
  this.originalLength=originalLength;
}","@Override public void setOriginalLength(Integer originalLength){
  this.originalLength=originalLength;
}",0.9494949494949496
129414,"/** 
 * @return the relationshipType
 */
public String getRelationshipType(){
  return relationshipType;
}","/** 
 * @return the relationshipType
 */
@Override public String getRelationshipType(){
  return relationshipType;
}",0.954954954954955
129415,"/** 
 * Getter for id.
 * @return the id
 */
public String getId(){
  return this.id;
}","/** 
 * Getter for id.
 * @return the id
 */
@Override public String getId(){
  return this.id;
}",0.9456521739130436
129416,"/** 
 * Sets the custom.
 * @param custom the custom to set
 */
public void setCustom(boolean custom){
  this.custom=custom;
}","/** 
 * Sets the custom.
 * @param custom the custom to set
 */
@Override public void setCustom(boolean custom){
  this.custom=custom;
}",0.9618320610687024
129417,"/** 
 * @return the relatedEntity
 */
public String getRelatedEntity(){
  return relatedEntity;
}","/** 
 * @return the relatedEntity
 */
@Override public String getRelatedEntity(){
  return relatedEntity;
}",0.9509803921568628
129418,"/** 
 * Getter for readOnly.
 * @return the readOnly
 */
public boolean isReadOnly(){
  return readOnly;
}","/** 
 * Getter for readOnly.
 * @return the readOnly
 */
@Override public boolean isReadOnly(){
  return readOnly;
}",0.954954954954955
129419,"/** 
 * @param relatedEntity the relatedEntity to set
 */
public void setRelatedEntity(String relatedEntity){
  this.relatedEntity=relatedEntity;
}","/** 
 * @param relatedEntity the relatedEntity to set
 */
@Override public void setRelatedEntity(String relatedEntity){
  this.relatedEntity=relatedEntity;
}",0.9671052631578948
129420,"public void setNullable(boolean nullable){
  this.nullable=nullable;
}","@Override public void setNullable(boolean nullable){
  this.nullable=nullable;
}",0.9333333333333332
129421,"/** 
 * Sets the id.
 * @param id the id to set
 */
public void setId(String id){
  this.id=id;
}","/** 
 * Sets the id.
 * @param id the id to set
 */
@Override public void setId(String id){
  this.id=id;
}",0.9509803921568628
129422,"public void setPattern(String pattern){
  this.pattern=pattern;
}","@Override public void setPattern(String pattern){
  this.pattern=pattern;
}",0.9285714285714286
129423,"public int getCustomId(){
  return customId;
}","@Override public int getCustomId(){
  return customId;
}",0.9019607843137256
129424,"public String getComment(){
  return this.comment;
}","@Override public String getComment(){
  return this.comment;
}",0.912280701754386
129425,"public void setCustomId(int customId){
  this.customId=customId;
}","@Override public void setCustomId(int customId){
  this.customId=customId;
}",0.9295774647887324
129426,"public void setKey(boolean key){
  this.key=key;
}","@Override public void setKey(boolean key){
  this.key=key;
}",0.9090909090909092
129427,"/** 
 * @param relationshipType the relationshipType to set
 */
public void setRelationshipType(String relationshipType){
  this.relationshipType=relationshipType;
}","/** 
 * @param relationshipType the relationshipType to set
 */
@Override public void setRelationshipType(String relationshipType){
  this.relationshipType=relationshipType;
}",0.9705882352941176
129428,"public Integer getOriginalLength(){
  return originalLength;
}","@Override public Integer getOriginalLength(){
  return originalLength;
}",0.9253731343283582
129429,"public boolean isKey(){
  return this.key;
}","@Override public boolean isKey(){
  return this.key;
}",0.8979591836734694
129430,"public String getDefault(){
  return this.defaut;
}","@Override public String getDefault(){
  return this.defaut;
}",0.9107142857142856
129431,"public void setType(String sourceType){
  this.sourceType=sourceType;
}","@Override public void setType(String sourceType){
  this.sourceType=sourceType;
}",0.9342105263157896
129432,"public void setDefault(String defaut){
  this.defaut=defaut;
}","@Override public void setDefault(String defaut){
  this.defaut=defaut;
}",0.9253731343283582
129433,"public Integer getPrecision(){
  return this.precision;
}","@Override public Integer getPrecision(){
  return this.precision;
}",0.9193548387096774
129434,"public void setLength(Integer length){
  this.length=length;
}","@Override public void setLength(Integer length){
  this.length=length;
}",0.9253731343283582
129435,"public String getExpression(){
  return this.expression;
}","@Override public String getExpression(){
  return this.expression;
}",0.9206349206349206
129436,"public boolean sameMetacolumnAs(IMetadataColumn other){
  return sameMetacolumnAs(other,OPTIONS_NONE);
}","@Override public boolean sameMetacolumnAs(IMetadataColumn other){
  return sameMetacolumnAs(other,OPTIONS_NONE);
}",0.9541284403669724
129437,"public void setTalendType(String talendType){
  this.talendType=talendType;
}","@Override public void setTalendType(String talendType){
  this.talendType=talendType;
}",0.9390243902439024
129438,"public String getType(){
  return this.sourceType;
}","@Override public String getType(){
  return this.sourceType;
}",0.912280701754386
129439,"public boolean isNullable(){
  return this.nullable;
}","@Override public boolean isNullable(){
  return this.nullable;
}",0.9152542372881356
129440,"public IMetadataColumn clone(boolean withCustoms){
  IMetadataColumn clonedMetacolumn=null;
  try {
    clonedMetacolumn=(IMetadataColumn)super.clone();
    if (!withCustoms) {
      clonedMetacolumn.setCustom(false);
      clonedMetacolumn.setReadOnly(false);
    }
  }
 catch (  CloneNotSupportedException e) {
  }
  return clonedMetacolumn;
}","@Override public IMetadataColumn clone(boolean withCustoms){
  IMetadataColumn clonedMetacolumn=null;
  try {
    clonedMetacolumn=(IMetadataColumn)super.clone();
    if (!withCustoms) {
      clonedMetacolumn.setCustom(false);
      clonedMetacolumn.setReadOnly(false);
    }
  }
 catch (  CloneNotSupportedException e) {
  }
  return clonedMetacolumn;
}",0.9857142857142858
129441,"/** 
 * Getter for custom.
 * @return the custom
 */
public boolean isCustom(){
  return custom;
}","/** 
 * Getter for custom.
 * @return the custom
 */
@Override public boolean isCustom(){
  return custom;
}",0.9514563106796116
129442,"public void setLabel(String label){
  this.label=label;
}","@Override public void setLabel(String label){
  this.label=label;
}",0.9193548387096774
129443,"public Integer getLength(){
  return this.length;
}","@Override public Integer getLength(){
  return this.length;
}",0.9107142857142856
129444,"public void setComment(String comment){
  this.comment=comment;
}","@Override public void setComment(String comment){
  this.comment=comment;
}",0.9285714285714286
129445,"public void setExpression(String expression){
  this.expression=expression;
}","@Override public void setExpression(String expression){
  this.expression=expression;
}",0.9390243902439024
129446,"public String getOriginalDbColumnName(){
  return originalDbColumnName;
}","@Override public String getOriginalDbColumnName(){
  return originalDbColumnName;
}",0.935897435897436
129447,"public String getPattern(){
  return this.pattern;
}","@Override public String getPattern(){
  return this.pattern;
}",0.912280701754386
129448,"/** 
 * Sets the readOnly.
 * @param readOnly the readOnly to set
 */
public void setReadOnly(boolean readOnly){
  this.readOnly=readOnly;
}","/** 
 * Sets the readOnly.
 * @param readOnly the readOnly to set
 */
@Override public void setReadOnly(boolean readOnly){
  this.readOnly=readOnly;
}",0.9655172413793104
129449,"public static void getTableXmlFileValue(Connection connection,String value,IElementParameter param,List<Map<String,Object>> tableInfo,IMetadataTable metaTable){
  if (connection instanceof XmlFileConnection) {
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    if (xmlConnection.isInputModel()) {
      EList objectList=xmlConnection.getSchema();
      XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
      if (value.equals(""String_Node_Str"")) {
        if (xmlDesc == null) {
          return;
        }
 else {
          String[] list=param.getListRepositoryItems();
          int column=0;
          boolean found=false;
          for (int k=0; (k < list.length) && (!found); k++) {
            if (list[k].equals(""String_Node_Str"")) {
              column=k;
              found=true;
            }
          }
          EList schemaList=xmlDesc.getSchemaTargets();
          String[] names=param.getListItemsDisplayCodeName();
          for (int k=0; k < schemaList.size(); k++) {
            if (tableInfo.size() > k) {
              Map<String,Object> line=tableInfo.get(k);
              if (metaTable != null) {
                if (metaTable.getListColumns().size() > k) {
                  SchemaTarget schemaTarget=(SchemaTarget)schemaList.get(k);
                  String strValue=TalendQuoteUtils.addQuotes(schemaTarget.getRelativeXPathQuery());
                  line.put(names[column],strValue);
                }
              }
            }
          }
        }
      }
    }
  }
  if (connection instanceof MDMConnection) {
    MDMConnection mdmConnection=(MDMConnection)connection;
    EList objectList=mdmConnection.getSchemas();
    for (    Concept concept : (List<Concept>)objectList) {
      if (concept.getLabel() == null || concept.getLabel().equals(metaTable.getLabel())) {
        if (value.equals(""String_Node_Str"")) {
          if (concept == null) {
            return;
          }
 else {
            String[] list=param.getListRepositoryItems();
            int column=0;
            boolean found=false;
            for (int k=0; (k < list.length) && (!found); k++) {
              if (list[k].equals(""String_Node_Str"")) {
                column=k;
                found=true;
              }
            }
            EList conceptTargetsList=concept.getConceptTargets();
            String[] names=param.getListItemsDisplayCodeName();
            for (int k=0; k < conceptTargetsList.size(); k++) {
              if (tableInfo.size() > k) {
                Map<String,Object> line=tableInfo.get(k);
                if (metaTable != null) {
                  if (metaTable.getListColumns().size() > k) {
                    ConceptTarget conceptTarget=(ConceptTarget)conceptTargetsList.get(k);
                    String strValue=TalendQuoteUtils.addQuotes(conceptTarget.getRelativeLoopExpression());
                    line.put(names[column],strValue);
                  }
                }
              }
            }
          }
        }
        break;
      }
    }
  }
}","public static void getTableXmlFileValue(Connection connection,String value,IElementParameter param,List<Map<String,Object>> tableInfo,IMetadataTable metaTable){
  if (connection instanceof XmlFileConnection) {
    XmlFileConnection xmlConnection=(XmlFileConnection)connection;
    if (xmlConnection.isInputModel()) {
      EList objectList=xmlConnection.getSchema();
      XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)objectList.get(0);
      if (value.equals(""String_Node_Str"")) {
        if (xmlDesc == null) {
          return;
        }
 else {
          String[] list=param.getListRepositoryItems();
          int column=0;
          boolean found=false;
          for (int k=0; (k < list.length) && (!found); k++) {
            if (list[k].equals(""String_Node_Str"")) {
              column=k;
              found=true;
            }
          }
          EList schemaList=xmlDesc.getSchemaTargets();
          String[] names=param.getListItemsDisplayCodeName();
          for (int k=0; k < schemaList.size(); k++) {
            if (tableInfo.size() > k) {
              Map<String,Object> line=tableInfo.get(k);
              if (metaTable != null) {
                if (metaTable.getListColumns().size() > k) {
                  SchemaTarget schemaTarget=(SchemaTarget)schemaList.get(k);
                  String strValue=TalendQuoteUtils.addQuotes(schemaTarget.getRelativeXPathQuery());
                  line.put(names[column],strValue);
                }
              }
            }
          }
        }
      }
    }
  }
  if (connection instanceof MDMConnection) {
    MDMConnection mdmConnection=(MDMConnection)connection;
    EList objectList=mdmConnection.getSchemas();
    for (    Concept concept : (List<Concept>)objectList) {
      if (concept.getLabel() != null && concept.getLabel().equals(metaTable.getLabel())) {
        if (value.equals(""String_Node_Str"")) {
          String[] list=param.getListRepositoryItems();
          int column=0;
          boolean found=false;
          for (int k=0; (k < list.length) && (!found); k++) {
            if (list[k].equals(""String_Node_Str"")) {
              column=k;
              found=true;
            }
          }
          EList conceptTargetsList=concept.getConceptTargets();
          String[] names=param.getListItemsDisplayCodeName();
          for (int k=0; k < conceptTargetsList.size(); k++) {
            if (tableInfo.size() > k) {
              Map<String,Object> line=tableInfo.get(k);
              if (metaTable != null) {
                if (metaTable.getListColumns().size() > k) {
                  ConceptTarget conceptTarget=(ConceptTarget)conceptTargetsList.get(k);
                  String strValue=TalendQuoteUtils.addQuotes(conceptTarget.getRelativeLoopExpression());
                  line.put(names[column],strValue);
                }
              }
            }
          }
        }
        break;
      }
    }
  }
}",0.970465543133656
129450,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9945549945549944
129451,"private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setName(columnName);
  column.setLabel(label);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}","private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setName(columnName);
  column.setLabel(label);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
    columnRemark=ManagementTextUtils.filterSpecialChar(columnRemark);
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}",0.9921312949640289
129452,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9688990650639192
129453,"public Process deployAndRunByCommandline(final ITargetExecutionConfig config,String jobName,String jobVersion,String jobContextName,int statisticsPort,int tracePort,String watchParam,final boolean runnable) throws ProcessorException ;","public Process deployAndRunByCommandline(final ITargetExecutionConfig config,String jobName,String jobVersion,String jobContextName,int statisticsPort,int tracePort,String watchParam,final boolean runnable,List<IContextParameter> jobContextParams) throws ProcessorException ;",0.9194499017681728
129454,"public Process deployAndRunByCommandline(final ITargetExecutionConfig config,String jobName,String jobVersion,String jobContextName,int statisticsPort,int tracePort,String watchParam,final boolean runnable) throws ProcessorException ;","public Process deployAndRunByCommandline(final ITargetExecutionConfig config,String jobName,String jobVersion,String jobContextName,int statisticsPort,int tracePort,String watchParam,final boolean runnable,List<IContextParameter> jobContextParams) throws ProcessorException ;",0.9194499017681728
129455,"public Process deployAndRunByCommandline(final ITargetExecutionConfig config,String jobName,String jobVersion,String jobContextName,int statisticsPort,int tracePort,String watchParam,final boolean runnable) throws ProcessorException ;","public Process deployAndRunByCommandline(final ITargetExecutionConfig config,String jobName,String jobVersion,String jobContextName,int statisticsPort,int tracePort,String watchParam,final boolean runnable,List<IContextParameter> jobContextParams) throws ProcessorException ;",0.9194499017681728
129456,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9688990650639192
129457,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9688990650639192
129458,"/** 
 * DOC cantoine. Method to return a Collection of Column about a Table for a DB connection.
 * @param IMetadataConnection iMetadataConnection
 * @param String tableLabel
 * @return Collection of MetadataColumn Object of a Table
 * @deprecated
 */
public static synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection iMetadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String name=getTableTypeByTableName(tableLabel);
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName()) && !isAccess) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,tableLabel);
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      tableLabel=tableName;
    }
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)iMetadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,iMetadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","/** 
 * DOC cantoine. Method to return a Collection of Column about a Table for a DB connection.
 * @param IMetadataConnection iMetadataConnection
 * @param String tableLabel
 * @return Collection of MetadataColumn Object of a Table
 * @deprecated
 */
@Deprecated public static synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection iMetadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String name=getTableTypeByTableName(tableLabel);
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName()) && !isAccess) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,tableLabel);
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      tableLabel=tableName;
    }
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)iMetadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,iMetadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.9980867346938777
129459,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9945549945549944
129460,"private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setName(columnName);
  column.setLabel(label);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}","private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setName(columnName);
  column.setLabel(label);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
    columnRemark=ManagementTextUtils.filterSpecialChar(columnRemark);
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}",0.9921312949640289
129461,"public static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection){
  boolean hasSchemaInCatalog=false;
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
    }
  }
}","public static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection){
  boolean hasSchemaInCatalog=false;
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else   if (s == null && c == null && !isAccess) {
    fillCatalogAndSchemas(iMetadataConnection,connection);
    addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
    }
  }
}",0.2378504672897196
129462,"/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getLabel();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}","/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getLabel();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
 else {
        for (        Object obj : ConnectionHelper.getTables(getConnection())) {
          if (obj == null) {
            continue;
          }
          MetadataTable table=(MetadataTable)obj;
          if (table.getLabel().equals(tableNode.getValue())) {
            return true;
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}",0.9279603782080144
129463,"public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(catalogName);
  catalogAndSchema.add(""String_Node_Str"".equals(schemaName) ? null : schemaName);
  return catalogAndSchema;
}","public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(""String_Node_Str"".equals(catalogName) ? null : catalogName);
  catalogAndSchema.add((""String_Node_Str"".equals(schemaName) || ""String_Node_Str"".equals(schemaName)) ? null : schemaName);
  return catalogAndSchema;
}",0.9687785283914552
129464,"public static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection){
  boolean hasSchemaInCatalog=false;
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
    }
  }
}","public static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection){
  boolean hasSchemaInCatalog=false;
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else   if (s == null && c == null && !isAccess) {
    fillCatalogAndSchemas(iMetadataConnection,connection);
    addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
    }
  }
}",0.2378504672897196
129465,"public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(catalogName);
  catalogAndSchema.add(""String_Node_Str"".equals(schemaName) ? null : schemaName);
  return catalogAndSchema;
}","public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(""String_Node_Str"".equals(catalogName) ? null : catalogName);
  catalogAndSchema.add((""String_Node_Str"".equals(schemaName) || ""String_Node_Str"".equals(schemaName)) ? null : schemaName);
  return catalogAndSchema;
}",0.9687785283914552
129466,"/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getLabel();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}","/** 
 * wzhang Comment method ""isExistTable"".
 * @param tableNode
 * @return
 */
private boolean isExistTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    TableNode parent=tableNode.getParent();
    if (parent == null) {
      for (      Object obj : ConnectionHelper.getTables(getConnection())) {
        if (obj == null) {
          continue;
        }
        MetadataTable table=(MetadataTable)obj;
        if (table.getLabel().equals(tableNode.getValue())) {
          return true;
        }
      }
    }
 else {
      int type=parent.getType();
      EList<ModelElement> ownedElement=null;
      if (type == TableNode.CATALOG) {
        Catalog c=(Catalog)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Catalog.class);
        if (c != null) {
          ownedElement=c.getOwnedElement();
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        Schema s=null;
        if (p == null) {
          s=(Schema)ConnectionHelper.getPackage(parent.getValue(),getConnection(),Schema.class);
        }
 else {
          Catalog c=(Catalog)ConnectionHelper.getPackage(p.getValue(),getConnection(),Catalog.class);
          if (c != null) {
            List<Schema> schemas=CatalogHelper.getSchemas(c);
            for (            Schema schema : schemas) {
              if (schema.getName().equals(parent.getValue())) {
                s=schema;
                break;
              }
            }
          }
        }
        if (s != null) {
          ownedElement=s.getOwnedElement();
        }
      }
      if (ownedElement != null) {
        for (        ModelElement m : ownedElement) {
          if (m instanceof MetadataTable) {
            String label=((MetadataTable)m).getLabel();
            if (label.equals(tableNode.getValue())) {
              return true;
            }
          }
        }
      }
 else {
        for (        Object obj : ConnectionHelper.getTables(getConnection())) {
          if (obj == null) {
            continue;
          }
          MetadataTable table=(MetadataTable)obj;
          if (table.getLabel().equals(tableNode.getValue())) {
            return true;
          }
        }
      }
    }
  }
 else   if (useProvider()) {
    return provider.isMetadataExsit(tableNode,getConnection());
  }
  return false;
}",0.9279603782080144
129467,"/** 
 * Test method for   {@link org.talend.core.model.metadata.builder.database.dburl.SupportDBUrlType#isMssql(String)} .
 */
@Test public void testIsMssql(){
  String dbKey=""String_Node_Str"";
  PowerMockito.mockStatic(SupportDBUrlType.class);
  when(SupportDBUrlType.isMssql(dbKey)).thenReturn(true);
  assertTrue(SupportDBUrlType.isMssql(dbKey));
}","/** 
 * Test method for   {@link org.talend.core.model.metadata.builder.database.dburl.SupportDBUrlType#isMssql(String)} .
 */
@Test public void testIsMssql(){
  String dbKey=""String_Node_Str"";
  assertTrue(SupportDBUrlType.isMssql(dbKey));
}",0.7352445193929174
129468,"/** 
 * ggu Comment method ""exportAsContext"".
 */
public static ContextItem exportAsContext(ConnectionItem connItem,Set<IConnParamName> paramSet){
  if (connItem == null) {
    return null;
  }
  List<IContextParameter> varList=createContextParameters(connItem,paramSet);
  if (varList == null || varList.isEmpty()) {
    return null;
  }
  String contextName=convertContextLabel(connItem.getProperty().getLabel());
  ISelection selection=getRepositoryContext(contextName,false);
  if (selection == null) {
    return null;
  }
  ContextWizard contextWizard=new ContextWizard(contextName,selection.isEmpty(),selection,varList);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),contextWizard);
  if (dlg.open() == Window.OK) {
    ContextItem contextItem=contextWizard.getContextItem();
    contextManager=contextWizard.getContextManager();
    if (contextItem != null) {
      contextItem.getProperty().setLabel(contextName);
    }
    return contextItem;
  }
  return null;
}","/** 
 * ggu Comment method ""exportAsContext"".
 */
public static ContextItem exportAsContext(ConnectionItem connItem,Set<IConnParamName> paramSet){
  if (connItem == null) {
    return null;
  }
  List<IContextParameter> varList=createContextParameters(connItem,paramSet);
  if (varList == null || varList.isEmpty()) {
    return null;
  }
  String contextName=convertContextLabel(connItem.getProperty().getLabel());
  ISelection selection=getRepositoryContext(contextName,false);
  if (selection == null) {
    return null;
  }
  ContextWizard contextWizard=new ContextWizard(contextName,selection.isEmpty(),selection,varList);
  WizardDialog dlg=new WizardDialog(Display.getCurrent().getActiveShell(),contextWizard);
  if (dlg.open() == Window.OK) {
    ContextItem contextItem=contextWizard.getContextItem();
    contextManager=contextWizard.getContextManager();
    if (contextItem != null) {
      contextItem.getProperty().setLabel(contextName);
    }
    RepositoryManager.refreshCreatedNode(ERepositoryObjectType.CONTEXT);
    return contextItem;
  }
  return null;
}",0.9648192771084336
129469,"public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
        if (tmpProjectNode instanceof RepositoryNode) {
          ((RepositoryNode)tmpProjectNode).setEnableDisposed(true);
        }
        tmpProjectNode.dispose();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}","public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}",0.7770154373927959
129470,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9945549945549944
129471,"/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
private static List<String> getTableNamesFromTables(ResultSet resultSet,IMetadataConnection iMetadataConnection) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  ExtractMetaDataFromDataBase.tableCommentsMap.clear();
  if (resultSet != null) {
    while (resultSet.next()) {
      String nameKey=resultSet.getString(GetTable.TABLE_NAME.name());
      boolean isDerby=false;
      if (iMetadataConnection != null) {
        String dbType=iMetadataConnection.getDbType();
        if (dbType.equals(""String_Node_Str"")) {
          String driverClassName=iMetadataConnection.getDriverClass();
          String driverJar=iMetadataConnection.getDriverJarPath();
          if (driverJar != null && !""String_Node_Str"".equals(driverJar)) {
            if (driverJar.contains(""String_Node_Str"")) {
              driverJar=driverJar.substring(driverJar.lastIndexOf(""String_Node_Str"") + 1,driverJar.length());
            }
          }
          if (driverJar != null && !""String_Node_Str"".equals(driverJar)) {
            dbType=ExtractMetaDataUtils.getDbTypeByClassNameAndDriverJar(driverClassName,driverJar);
          }
 else {
            dbType=ExtractMetaDataUtils.getDbTypeByClassName(driverClassName);
          }
        }
        isDerby=""String_Node_Str"".equals(dbType) || ""String_Node_Str"".equals(dbType);
      }
      String colComment=""String_Node_Str"";
      if (!isDerby) {
        if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(iMetadataConnection.getProduct()) && iMetadataConnection.getDbVersionString() != null && iMetadataConnection.getDbVersionString().equals(""String_Node_Str"") || EDatabaseTypeName.GENERAL_JDBC.getProduct().equals(iMetadataConnection.getProduct()) && iMetadataConnection.getDriverJarPath().contains(""String_Node_Str"")) {
          colComment=getTableComment(nameKey,resultSet,false);
        }
 else {
          colComment=getTableComment(nameKey,resultSet,true);
        }
      }
      itemTablesName.add(nameKey);
      if (ExtractMetaDataFromDataBase.tableCommentsMap.containsKey(nameKey)) {
        if (colComment == null) {
          colComment=""String_Node_Str"";
        }
        tableCommentsMap.remove(nameKey);
        tableCommentsMap.put(nameKey,colComment);
      }
      tableCommentsMap.put(nameKey,colComment);
      if (tableTypeMap.containsKey(nameKey)) {
        tableTypeMap.remove(nameKey);
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
 else       tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
    }
    resultSet.close();
  }
  return itemTablesName;
}","/** 
 * DOC qzhang Comment method ""getTableNamesFromQuery"".
 * @param rsTables
 * @return
 * @throws SQLException
 */
private static List<String> getTableNamesFromTables(ResultSet resultSet,IMetadataConnection iMetadataConnection) throws SQLException {
  List<String> itemTablesName=new ArrayList<String>();
  ExtractMetaDataFromDataBase.tableCommentsMap.clear();
  if (resultSet != null) {
    while (resultSet.next()) {
      String nameKey=resultSet.getString(GetTable.TABLE_NAME.name());
      boolean isDerby=false;
      if (iMetadataConnection != null) {
        String dbType=iMetadataConnection.getDbType();
        if (dbType.equals(""String_Node_Str"")) {
          String driverClassName=iMetadataConnection.getDriverClass();
          String driverJar=iMetadataConnection.getDriverJarPath();
          if (driverJar != null && !""String_Node_Str"".equals(driverJar)) {
            if (driverJar.contains(""String_Node_Str"")) {
              driverJar=driverJar.substring(driverJar.lastIndexOf(""String_Node_Str"") + 1,driverJar.length());
            }
          }
          if (driverJar != null && !""String_Node_Str"".equals(driverJar)) {
            dbType=ExtractMetaDataUtils.getDbTypeByClassNameAndDriverJar(driverClassName,driverJar);
          }
 else {
            dbType=ExtractMetaDataUtils.getDbTypeByClassName(driverClassName);
          }
        }
        isDerby=""String_Node_Str"".equals(dbType) || ""String_Node_Str"".equals(dbType);
      }
      String colComment=""String_Node_Str"";
      if (!isDerby) {
        if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(iMetadataConnection.getProduct()) && iMetadataConnection.getDbVersionString() != null && iMetadataConnection.getDbVersionString().equals(""String_Node_Str"") || EDatabaseTypeName.GENERAL_JDBC.getProduct().equals(iMetadataConnection.getProduct()) && iMetadataConnection.getDriverJarPath().contains(""String_Node_Str"")) {
          colComment=getTableComment(nameKey,resultSet,false);
        }
 else {
          colComment=getTableComment(nameKey,resultSet,true);
        }
      }
      itemTablesName.add(nameKey);
      if (ExtractMetaDataFromDataBase.tableCommentsMap.containsKey(nameKey)) {
        if (colComment == null) {
          colComment=""String_Node_Str"";
        }
        tableCommentsMap.remove(nameKey);
        tableCommentsMap.put(nameKey,colComment);
      }
      tableCommentsMap.put(nameKey,colComment);
      if (tableTypeMap.containsKey(nameKey)) {
        tableTypeMap.remove(nameKey);
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
 else {
        tableTypeMap.put(nameKey,resultSet.getString(""String_Node_Str""));
      }
    }
    resultSet.close();
  }
  return itemTablesName;
}",0.9977973568281938
129472,"/** 
 * DOC qzhang Comment method ""getResultSetFromTableInfo"".
 * @param dbMetaData
 * @return
 * @throws SQLException
 */
private static ResultSet getResultSetFromTableInfo(TableInfoParameters tableInfo,String namePattern,IMetadataConnection iMetadataConnection,String schema) throws SQLException {
  ResultSet rsTables=null;
  String tableNamePattern=""String_Node_Str"".equals(namePattern) ? null : namePattern;
  String[] types=new String[tableInfo.getTypes().size()];
  for (int i=0; i < types.length; i++) {
    final String selectedTypeName=tableInfo.getTypes().get(i).getName();
    if (""String_Node_Str"".equals(selectedTypeName) && iMetadataConnection.getDbType().equals(EDatabaseTypeName.IBMDB2.getDisplayName())) {
      types[i]=""String_Node_Str"";
    }
 else     types[i]=selectedTypeName;
  }
  DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
  ResultSet rsTableTypes=null;
  rsTableTypes=dbMetaData.getTableTypes();
  Set<String> availableTableTypes=new HashSet<String>();
  String[] neededTableTypes={ETableTypes.TABLETYPE_TABLE.getName(),ETableTypes.TABLETYPE_VIEW.getName(),ETableTypes.TABLETYPE_SYNONYM.getName()};
  while (rsTableTypes.next()) {
    String currentTableType=StringUtils.trimToEmpty(rsTableTypes.getString(""String_Node_Str""));
    if (ArrayUtils.contains(neededTableTypes,currentTableType)) {
      availableTableTypes.add(currentTableType);
    }
  }
  rsTableTypes.close();
  rsTables=dbMetaData.getTables(null,schema,tableNamePattern,types);
  return rsTables;
}","/** 
 * DOC qzhang Comment method ""getResultSetFromTableInfo"".
 * @param dbMetaData
 * @return
 * @throws SQLException
 */
private static ResultSet getResultSetFromTableInfo(TableInfoParameters tableInfo,String namePattern,IMetadataConnection iMetadataConnection,String schema) throws SQLException {
  ResultSet rsTables=null;
  String tableNamePattern=""String_Node_Str"".equals(namePattern) ? null : namePattern;
  String[] types=new String[tableInfo.getTypes().size()];
  for (int i=0; i < types.length; i++) {
    final String selectedTypeName=tableInfo.getTypes().get(i).getName();
    if (""String_Node_Str"".equals(selectedTypeName) && iMetadataConnection.getDbType().equals(EDatabaseTypeName.IBMDB2.getDisplayName())) {
      types[i]=""String_Node_Str"";
    }
 else {
      types[i]=selectedTypeName;
    }
  }
  DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
  ResultSet rsTableTypes=null;
  rsTableTypes=dbMetaData.getTableTypes();
  Set<String> availableTableTypes=new HashSet<String>();
  String[] neededTableTypes={ETableTypes.TABLETYPE_TABLE.getName(),ETableTypes.TABLETYPE_VIEW.getName(),ETableTypes.TABLETYPE_SYNONYM.getName()};
  while (rsTableTypes.next()) {
    String currentTableType=StringUtils.trimToEmpty(rsTableTypes.getString(""String_Node_Str""));
    if (ArrayUtils.contains(neededTableTypes,currentTableType)) {
      availableTableTypes.add(currentTableType);
    }
  }
  rsTableTypes.close();
  rsTables=dbMetaData.getTables(null,schema,tableNamePattern,types);
  return rsTables;
}",0.996969696969697
129473,"/** 
 * DOC YeXiaowei Comment method ""isValidJarFile"".
 * @param driverJarPath
 * @return
 */
private static boolean isValidJarFile(final String[] driverJarPath){
  boolean a=false;
  for (int i=0; i < driverJarPath.length; i++) {
    if (driverJarPath[i] == null || driverJarPath[i].equals(""String_Node_Str"")) {
      return a;
    }
    File jarFile=new File(driverJarPath[i]);
    a=jarFile.exists() && jarFile.isFile();
  }
  return a;
}","/** 
 * DOC YeXiaowei Comment method ""isValidJarFile"".
 * @param driverJarPath
 * @return
 */
private static boolean isValidJarFile(final String[] driverJarPath){
  boolean a=false;
  for (  String element : driverJarPath) {
    if (element == null || element.equals(""String_Node_Str"")) {
      return a;
    }
    File jarFile=new File(element);
    a=jarFile.exists() && jarFile.isFile();
  }
  return a;
}",0.8692579505300353
129474,"private static List<String> convertFunctions2Array(List<String> functionlist,String[] functions){
  if (functions != null) {
    for (int i=0; i < functions.length; i++) {
      functionlist.add(functions[i]);
    }
  }
  return functionlist;
}","private static List<String> convertFunctions2Array(List<String> functionlist,String[] functions){
  if (functions != null) {
    for (    String function : functions) {
      functionlist.add(function);
    }
  }
  return functionlist;
}",0.8565488565488566
129475,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            Path path=new Path(jars[i]);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jars[i]);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public static List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  if (PluginChecker.isOnlyTopLoaded()) {
    if (StringUtils.isBlank(driverClassName)) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
    }
    IMetadataConnection mconn=new MetadataConnection();
    mconn.setUrl(url);
    mconn.setUsername(username);
    mconn.setPassword(pwd);
    mconn.setDbType(dbType);
    mconn.setDriverClass(driverClassName);
    mconn.setDriverJarPath(driverJarPathArg);
    mconn.setDbVersionString(dbVersion);
    mconn.setAdditionalParams(additionalParams);
    TypedReturnCode<Connection> checkConnection=MetadataConnectionUtils.checkConnection(mconn);
    if (checkConnection.isOk()) {
      conList.add(checkConnection.getObject());
    }
 else {
      throw new Exception(checkConnection.getMessage());
    }
  }
 else {
    ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        for (        String jar : driverNames) {
          if (!new File(getJavaLibPath() + jar).exists()) {
            librairesManagerService.retrieve(jar,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarPathList.add(jar);
            }
          }
        }
 else {
          Path path=new Path(driverJarPathArg);
          if (jarsAvailable.contains(path.lastSegment())) {
            String jarUnderLib=getJavaLibPath() + path.lastSegment();
            File file=new File(jarUnderLib);
            if (!file.exists()) {
              librairesManagerService.retrieve(path.lastSegment(),getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(jarUnderLib);
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          for (int i=0; i < jars.length; i++) {
            if (!new File(getJavaLibPath() + jars[i]).exists()) {
              librairesManagerService.retrieve(jars[i],getJavaLibPath(),new NullProgressMonitor());
            }
            jarPathList.add(getJavaLibPath() + jars[i]);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
    final String[] driverJarPath=jarPathList.toArray(new String[0]);
    if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
      driverClassName=ExtractMetaDataUtils.getDriverClassByDbType(dbType);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
        ExtractMetaDataUtils.checkAccessDbq(url);
      }
    }
    List list=new ArrayList();
    ExtractMetaDataUtils.checkDBConnectionTimeout();
    if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else     if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
 else {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
    if (connection == null) {
      throw new Exception(Messages.getString(""String_Node_Str""));
    }
    conList.add(connection);
    if (wapperDriver != null) {
      conList.add(wapperDriver);
    }
  }
  return conList;
}",0.9896810506566605
129476,"private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setName(columnName);
  column.setLabel(label);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}","private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setName(columnName);
  column.setLabel(label);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
    columnRemark=ManagementTextUtils.filterSpecialChar(columnRemark);
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}",0.9921312949640289
129477,"public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.createUser50(pseudo,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}","public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort,String proxyUser,String proxyPassword) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    Properties properties=System.getProperties();
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",proxyHost);
    properties.put(""String_Node_Str"",proxyPort);
    properties.put(""String_Node_Str"",proxyUser);
    properties.put(""String_Node_Str"",proxyPassword);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.createUser50(pseudo,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}",0.872946330777656
129478,"@Override protected void buttonPressed(int buttonId){
  if (IDialogConstants.NEXT_ID == buttonId) {
    boolean updateOrCreateSuccess=false;
    boolean success=false;
    try {
      if (alreadyRegistered) {
        success=RegisterManagement.getInstance().updateUser(email,pseudonym,oldPasswd,null,firstname,lastname,country,isProxyEnable,proxyHost,proxyPort);
      }
 else {
        success=RegisterManagement.getInstance().createUser(email,pseudonym,password,firstname,lastname,country,isProxyEnable,proxyHost,proxyPort);
      }
      if (success) {
        updateOrCreateSuccess=true;
      }
    }
 catch (    BusinessException e) {
      MessageBoxExceptionHandler.process(e);
      updateOrCreateSuccess=false;
    }
 finally {
      if (updateOrCreateSuccess) {
        close();
        RegisterWizard registerWizard=new RegisterWizard();
        RegisterWizardPage3 dialog=new RegisterWizardPage3(this.getShell(),registerWizard,email);
        dialog.open();
      }
    }
  }
 else   if (IDialogConstants.BACK_ID == buttonId) {
    close();
    RegisterWizard registerWizard=new RegisterWizard();
    RegisterWizardPage1 dialog=new RegisterWizardPage1(this.getShell(),registerWizard,email,country);
    dialog.open();
  }
}","@Override protected void buttonPressed(int buttonId){
  if (IDialogConstants.NEXT_ID == buttonId) {
    boolean updateOrCreateSuccess=false;
    boolean success=false;
    try {
      if (alreadyRegistered) {
        success=RegisterManagement.getInstance().updateUser(email,pseudonym,oldPasswd,null,firstname,lastname,country,isProxyEnable,proxyHost,proxyPort);
      }
 else {
        success=RegisterManagement.getInstance().createUser(email,pseudonym,password,firstname,lastname,country,isProxyEnable,proxyHost,proxyPort,null,null);
      }
      if (success) {
        updateOrCreateSuccess=true;
      }
    }
 catch (    BusinessException e) {
      MessageBoxExceptionHandler.process(e);
      updateOrCreateSuccess=false;
    }
 finally {
      if (updateOrCreateSuccess) {
        close();
        RegisterWizard registerWizard=new RegisterWizard();
        RegisterWizardPage3 dialog=new RegisterWizardPage3(this.getShell(),registerWizard,email);
        dialog.open();
      }
    }
  }
 else   if (IDialogConstants.BACK_ID == buttonId) {
    close();
    RegisterWizard registerWizard=new RegisterWizard();
    RegisterWizardPage1 dialog=new RegisterWizardPage1(this.getShell(),registerWizard,email,country);
    dialog.open();
  }
}",0.9959709911361804
129479,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (!tdqRepService.removeAliasInSQLExplorer(child)) {
            MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
            try {
              factory.saveProject(ProjectManager.getInstance().getCurrentProject());
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
            return;
          }
        }
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.8834072759538598
129480,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (sourceFileOpening(node)) {
              continue;
            }
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,op);
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            repositoryView.refresh();
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (sourceFileOpening(node)) {
              continue;
            }
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,op);
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            RepositoryManager.refresh(types);
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.998881153654898
129481,"@Override protected void doRun(){
  ISelection selection=getSelection();
  connections=new ArrayList<IRepositoryViewObject>();
  procItems=new HashMap<String,Item>();
  needToUpdatePalette=false;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      restoreNode(node);
      while (node.getParent().getObject() != null && factory.getStatus(node.getParent().getObject()) == ERepositoryStatus.DELETED) {
        node=node.getParent();
        if (node.getObject().getProperty().getItem() instanceof FolderItem) {
          node.getObject().getProperty().getItem().getState().setDeleted(false);
        }
      }
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  procItems=null;
  if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
    final boolean updatePalette=needToUpdatePalette;
    Display.getCurrent().syncExec(new Runnable(){
      public void run(){
        IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
        if (repositoryView != null) {
          repositoryView.refresh();
        }
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
      }
    }
);
    notifySQLBuilder(connections);
    connections=null;
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  connections=new ArrayList<IRepositoryViewObject>();
  procItems=new HashMap<String,Item>();
  needToUpdatePalette=false;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      types.add(node.getObjectType());
      restoreNode(node);
      while (node.getParent().getObject() != null && factory.getStatus(node.getParent().getObject()) == ERepositoryStatus.DELETED) {
        node=node.getParent();
        if (node.getObject().getProperty().getItem() instanceof FolderItem) {
          node.getObject().getProperty().getItem().getState().setDeleted(false);
        }
      }
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  procItems=null;
  if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
    final boolean updatePalette=needToUpdatePalette;
    Display.getCurrent().syncExec(new Runnable(){
      public void run(){
        IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
        if (repositoryView != null) {
          RepositoryManager.refresh(types);
        }
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
      }
    }
);
    notifySQLBuilder(connections);
    connections=null;
  }
}",0.8845537145911277
129482,"protected void restoreNode(RepositoryNode node){
  try {
    RestoreFolderUtil restoreFolder=new RestoreFolderUtil();
    ERepositoryObjectType nodeType=(ERepositoryObjectType)(node).getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == null) {
      return;
    }
    if (nodeType.isSubItem()) {
      ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
      AbstractMetadataObject abstractMetadataObject=((ISubRepositoryObject)node.getObject()).getAbstractMetadataObject();
      SubItemHelper.setDeleted(abstractMetadataObject,false);
      final String id=item.getProperty().getId();
      Item tmpItem=procItems.get(id);
      if (tmpItem == null) {
        procItems.put(id,item);
      }
      connections.add(node.getObject());
    }
 else {
      String oldPath=node.getObject().getProperty().getItem().getState().getPath();
      IPath path=new Path(oldPath);
      if (node.getObject().getProperty().getItem() instanceof FolderItem) {
        node.getObject().getProperty().getItem().getState().setDeleted(false);
      }
 else {
        RestoreObjectAction restoreObjectAction=RestoreObjectAction.getInstance();
        restoreObjectAction.execute(node,null,path);
      }
      ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      if (nodeType.equals(ERepositoryObjectType.PROCESS) || nodeType.equals(ERepositoryObjectType.JOBLET) && node.getObject() != null) {
        IRepositoryViewObject docObject=factory.getLastVersion(node.getObject().getId() + ""String_Node_Str"");
        if (docObject != null) {
          factory.restoreObject(docObject,path);
        }
      }
    }
    if (nodeType == ERepositoryObjectType.JOBLET) {
      needToUpdatePalette=true;
    }
    if (nodeType.isSubItem()) {
      RepositoryNode parent=node.getParent();
      if (parent.getObject() == null) {
        parent=parent.getParent();
      }
      nodeType=parent.getObjectType();
    }
    if (node.hasChildren()) {
      for (      IRepositoryNode childNode : node.getChildren()) {
        restoreNode((RepositoryNode)childNode);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","protected void restoreNode(RepositoryNode node){
  try {
    RestoreFolderUtil restoreFolder=new RestoreFolderUtil();
    ERepositoryObjectType nodeType=(ERepositoryObjectType)(node).getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == null) {
      return;
    }
    if (nodeType.isSubItem()) {
      ConnectionItem item=(ConnectionItem)node.getObject().getProperty().getItem();
      AbstractMetadataObject abstractMetadataObject=((ISubRepositoryObject)node.getObject()).getAbstractMetadataObject();
      SubItemHelper.setDeleted(abstractMetadataObject,false);
      final String id=item.getProperty().getId();
      Item tmpItem=procItems.get(id);
      if (tmpItem == null) {
        procItems.put(id,item);
      }
      connections.add(node.getObject());
    }
 else {
      String oldPath=node.getObject().getProperty().getItem().getState().getPath();
      IPath path=new Path(oldPath);
      if (node.getObject().getProperty().getItem() instanceof FolderItem) {
        node.getObject().getProperty().getItem().getState().setDeleted(false);
      }
 else {
        RestoreObjectAction restoreObjectAction=RestoreObjectAction.getInstance();
        restoreObjectAction.execute(node,null,path);
      }
      ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      if (nodeType.equals(ERepositoryObjectType.PROCESS) || nodeType.equals(ERepositoryObjectType.JOBLET) && node.getObject() != null) {
        IRepositoryViewObject docObject=factory.getLastVersion(node.getObject().getId() + ""String_Node_Str"");
        if (docObject != null) {
          factory.restoreObject(docObject,path);
          RepositoryManager.refresh(docObject.getRepositoryObjectType());
        }
      }
    }
    if (nodeType == ERepositoryObjectType.JOBLET) {
      needToUpdatePalette=true;
    }
    if (nodeType.isSubItem()) {
      RepositoryNode parent=node.getParent();
      if (parent.getObject() == null) {
        parent=parent.getParent();
      }
      nodeType=parent.getObjectType();
    }
    if (node.hasChildren()) {
      for (      IRepositoryNode childNode : node.getChildren()) {
        restoreNode((RepositoryNode)childNode);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9832275611967362
129483,"public void run(){
  IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
  if (repositoryView != null) {
    repositoryView.refresh();
  }
  if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
    ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
    service.updatePalette();
  }
}","public void run(){
  IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
  if (repositoryView != null) {
    RepositoryManager.refresh(types);
  }
  if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
    ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
    service.updatePalette();
  }
}",0.9558823529411764
129484,"public static boolean isRefreshManually(){
  return getPreferenceStore().getBoolean(IRepositoryPrefConstants.MANUALLY_REFRESH);
}","public static boolean isRefreshManually(){
  return true;
}",0.5957446808510638
129485,"public static String getTrueParamValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    paramValue=type.getValue();
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getTrueParamValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    paramValue=type.getValue();
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}",0.9763313609467456
129486,"public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length == 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    if (!CommonsPlugin.isHeadless() && PlatformUI.isWorkbenchRunning()) {
      MessageDialog.openError(Display.getCurrent().getActiveShell(),""String_Node_Str"",exception.getMessage());
    }
  }
  return null;
}","public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length == 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    ExceptionHandler.process(e);
  }
  return null;
}",0.9532374100719424
129487,"public static String getTrueParamValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    paramValue=type.getValue();
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getTrueParamValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    paramValue=type.getValue();
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}",0.9763313609467456
129488,"/** 
 * Method ""addPrimaryKey"".
 * @param table
 * @param pk the primary key of the table
 */
public static PrimaryKey addPrimaryKey(TdTable table,PrimaryKey pk){
}","/** 
 * Method ""addPrimaryKey"".
 * @param table
 * @param pk the primary key of the table
 */
public static PrimaryKey addPrimaryKey(TdTable table,TdColumn col){
}",0.9357798165137616
129489,"/** 
 * Method ""addForeignKey"".
 * @param table
 * @param foreignKey the foreign key of the given table
 */
public static ForeignKey addForeignKey(TdTable table,ForeignKey foreignKey){
}","/** 
 * Method ""addForeignKey"".
 * @param table
 * @param foreignKey the foreign key of the given table
 */
public static ForeignKey addForeignKey(TdTable table,ForeignKey foreignKey,TdColumn column){
}",0.9587628865979382
129490,"@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (obj.eResource() == null || obj.getProperty().eResource() == null) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      if (obj instanceof JobletProcessItem || obj instanceof ProcessItem) {
        String docId=obj.getProperty().getId() + ""String_Node_Str"";
        IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
        if (repositoryViewObject != null) {
          Property property=repositoryViewObject.getProperty();
          Item documentationItem=property.getItem();
          this.repositoryFactoryFromProvider.unlock(documentationItem);
        }
      }
      notifyLock(obj,false);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}","@Override public void unlock(Item obj) throws PersistenceException, LoginException {
  if (!(obj instanceof FolderItem) && (obj.eResource() == null || obj.getProperty().eResource() == null)) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      if (obj instanceof JobletProcessItem || obj instanceof ProcessItem) {
        String docId=obj.getProperty().getId() + ""String_Node_Str"";
        IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
        if (repositoryViewObject != null) {
          Property property=repositoryViewObject.getProperty();
          Item documentationItem=property.getItem();
          this.repositoryFactoryFromProvider.unlock(documentationItem);
        }
      }
      notifyLock(obj,false);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}",0.9876722262509064
129491,"private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata) || MetadataConnectionUtils.isHive(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
            columnMap.get(colName).setKey(true);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}","private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata) || MetadataConnectionUtils.isHive(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}",0.9910009182736456
129492,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    HashMap<String,String> primaryKeys=getPrimaryKeys(iMetadataConnection,dbMetaData,tableNode);
    for (    TdColumn metadataColumn : metadataColumns) {
      if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
        metadataColumn.setKey(true);
      }
 else {
        metadataColumn.setKey(false);
      }
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.958833063209076
129493,"public void unlock(Item obj) throws PersistenceException, LoginException {
  if (obj.eResource() == null || obj.getProperty().eResource() == null) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      if (obj instanceof JobletProcessItem || obj instanceof ProcessItem) {
        String docId=obj.getProperty().getId() + ""String_Node_Str"";
        IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
        if (repositoryViewObject != null) {
          Property property=repositoryViewObject.getProperty();
          Item documentationItem=property.getItem();
          this.repositoryFactoryFromProvider.unlock(documentationItem);
        }
      }
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}","public void unlock(Item obj) throws PersistenceException, LoginException {
  if (!(obj instanceof FolderItem) && (obj.eResource() == null || obj.getProperty().eResource() == null)) {
    obj=getUptodateProperty(obj.getProperty()).getItem();
  }
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      if (obj instanceof JobletProcessItem || obj instanceof ProcessItem) {
        String docId=obj.getProperty().getId() + ""String_Node_Str"";
        IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
        if (repositoryViewObject != null) {
          Property property=repositoryViewObject.getProperty();
          Item documentationItem=property.getItem();
          this.repositoryFactoryFromProvider.unlock(documentationItem);
        }
      }
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}",0.9873134328358208
129494,"public static String getTrueParamValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    paramValue=type.getValue();
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getTrueParamValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    paramValue=type.getValue();
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}",0.9763313609467456
129495,"private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata) || MetadataConnectionUtils.isHive(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
            columnMap.get(colName).setKey(true);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}","private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata) || MetadataConnectionUtils.isHive(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}",0.9910009182736456
129496,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    HashMap<String,String> primaryKeys=getPrimaryKeys(iMetadataConnection,dbMetaData,tableNode);
    for (    TdColumn metadataColumn : metadataColumns) {
      if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
        metadataColumn.setKey(true);
      }
 else {
        metadataColumn.setKey(false);
      }
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.958833063209076
129497,"public static String getNewQueryLabel(){
  return Messages1.getString(""String_Node_Str"",num++);
}","public static String getNewQueryLabel(){
  return Messages.getString(""String_Node_Str"",num++);
}",0.9948186528497408
129498,"public static String getNewQueryLabel(){
  return Messages1.getString(""String_Node_Str"",num++);
}","public static String getNewQueryLabel(){
  return Messages.getString(""String_Node_Str"",num++);
}",0.9948186528497408
129499,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9944873208379272
129500,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (!schemaname.contains(""String_Node_Str"") && !schemaname.contains(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (!schemaname.contains(""String_Node_Str"") && !schemaname.contains(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (      String element : tableType) {
        if (element.equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9904172195193868
129501,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9944873208379272
129502,"/** 
 * DOC sgandon TalendSplashHandler constructor comment.
 */
public TalendSplashHandler(){
  if (INSTANCE == null) {
    INSTANCE=this;
  }
}","/** 
 * DOC sgandon TalendSplashHandler constructor comment.
 */
public TalendSplashHandler(){
  if (instance == null) {
    instance=this;
  }
}",0.8896551724137931
129503,"@SuppressWarnings(""String_Node_Str"") @Override public void preStartup(){
  super.preStartup();
  RunProcessPlugin.getDefault();
  CodeGeneratorActivator.getDefault();
  PerspectiveReviewUtil.resetPerspective();
  LoginTaskRegistryReader loginTaskRegistryReader=new LoginTaskRegistryReader();
  IRunnableWithProgress[] allLoginTasks=loginTaskRegistryReader.getAllTaskListInstance();
  IProgressMonitor monitor=TalendSplashHandler.INSTANCE != null ? TalendSplashHandler.INSTANCE.getBundleProgressMonitor() : new NullProgressMonitor();
  SubMonitor subMonitor=SubMonitor.convert(monitor,allLoginTasks.length + 1);
  for (  IRunnableWithProgress toBeRun : allLoginTasks) {
    try {
      toBeRun.run(subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void preStartup(){
  super.preStartup();
  RunProcessPlugin.getDefault();
  CodeGeneratorActivator.getDefault();
  PerspectiveReviewUtil.resetPerspective();
  LoginTaskRegistryReader loginTaskRegistryReader=new LoginTaskRegistryReader();
  IRunnableWithProgress[] allLoginTasks=loginTaskRegistryReader.getAllTaskListInstance();
  IProgressMonitor monitor=TalendSplashHandler.instance != null ? TalendSplashHandler.instance.getBundleProgressMonitor() : new NullProgressMonitor();
  SubMonitor subMonitor=SubMonitor.convert(monitor,allLoginTasks.length + 1);
  for (  IRunnableWithProgress toBeRun : allLoginTasks) {
    try {
      toBeRun.run(subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.9806996381182148
129504,"public void run(){
  manualResizing=false;
}","public void run(){
  try {
synchronized (this) {
      wait(500);
      manualResizing=false;
    }
  }
 catch (  InterruptedException e) {
    manualResizing=false;
  }
}",0.4093023255813953
129505,"/** 
 * DOC amaumont Comment method ""resizeControl"".
 * @param e
 */
private synchronized void controlResizedExecute(ControlEvent e){
  final TableColumn currentTableColumn=(TableColumn)e.widget;
  if (!WindowSystem.isGTK() && !columnsResizingByLayout && (fillHorizontal || continuousLayout)) {
    if (continuousLayout && !fillHorizontal) {
      asyncThreadingForManualColumnResizingFalse.interrupt();
      if (!fillHorizontal) {
        manualResizing=false;
      }
    }
    if (!manualResizing) {
      manualResizing=true;
      final Table table=currentTableColumn.getParent();
      Rectangle bounds=table.getClientArea();
      if (table.getHorizontalBar().getSelection() == 0) {
        if (!WindowSystem.isGTK()) {
          changeColumnLayoutData(currentTableColumn,bounds);
        }
        lastDisplayedWidth=bounds.width + widthAdjustValue;
        referenceWidth=computeCurrentTableWidth();
        TableColumn[] tableColumns=table.getColumns();
        if (fillHorizontal && tableColumns.length - 1 >= 0) {
          int widthAll=referenceWidth;
          int indexLastColumn=tableColumns.length - 1;
          TableColumn lastTableColumn=tableColumns[indexLastColumn];
          TableViewerCreatorColumnNotModifiable tableViewerCreatorColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(indexLastColumn);
          ColumnLayoutData columnLayoutData=columnsLayoutData.get(indexLastColumn);
          int minimumWidth=0;
          if (columnLayoutData instanceof ColumnWeightData) {
            minimumWidth=((ColumnWeightData)columnLayoutData).minimumWidth;
          }
 else           if (columnLayoutData instanceof ColumnPixelData) {
            minimumWidth=((ColumnPixelData)columnLayoutData).width;
          }
          int widthLastColumn=lastTableColumn.getWidth();
          int newColumnWidth=lastDisplayedWidth - (widthAll - widthLastColumn);
          if (newColumnWidth > minimumWidth) {
            if (referenceWidth - widthLastColumn < lastDisplayedWidth) {
              if (newColumnWidth > 0) {
                lastTableColumn.setWidth(newColumnWidth);
                changeColumnLayoutData(lastTableColumn,bounds);
              }
            }
 else {
              int width=tableViewerCreatorColumn.getWidth();
              if (columnLayoutData instanceof ColumnWeightData) {
                lastTableColumn.setWidth(width);
                changeColumnLayoutData(lastTableColumn,bounds);
              }
            }
          }
          referenceWidth=computeCurrentTableWidth() + widthAdjustValue;
        }
      }
      if (continuousLayout && !fillHorizontal) {
        asyncThreadingForManualColumnResizingFalse.start();
      }
    }
    if (fillHorizontal) {
      manualResizing=false;
    }
    tableViewerCreator.redrawTableEditorControls();
  }
}","/** 
 * DOC amaumont Comment method ""resizeControl"".
 * @param e
 */
private synchronized void controlResizedExecute(ControlEvent e){
  final TableColumn currentTableColumn=(TableColumn)e.widget;
  if (!WindowSystem.isGTK() && !columnsResizingByLayout && (fillHorizontal || continuousLayout)) {
    if (continuousLayout && !fillHorizontal) {
    }
    if (!manualResizing) {
      manualResizing=true;
      final Table table=currentTableColumn.getParent();
      Rectangle bounds=table.getClientArea();
      if (table.getHorizontalBar().getSelection() == 0) {
        if (!WindowSystem.isGTK()) {
          changeColumnLayoutData(currentTableColumn,bounds);
        }
        lastDisplayedWidth=bounds.width + widthAdjustValue;
        referenceWidth=computeCurrentTableWidth();
        TableColumn[] tableColumns=table.getColumns();
        if (fillHorizontal && tableColumns.length - 1 >= 0) {
          int widthAll=referenceWidth;
          int indexLastColumn=tableColumns.length - 1;
          TableColumn lastTableColumn=tableColumns[indexLastColumn];
          TableViewerCreatorColumnNotModifiable tableViewerCreatorColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(indexLastColumn);
          ColumnLayoutData columnLayoutData=columnsLayoutData.get(indexLastColumn);
          int minimumWidth=0;
          if (columnLayoutData instanceof ColumnWeightData) {
            minimumWidth=((ColumnWeightData)columnLayoutData).minimumWidth;
          }
 else           if (columnLayoutData instanceof ColumnPixelData) {
            minimumWidth=((ColumnPixelData)columnLayoutData).width;
          }
          int widthLastColumn=lastTableColumn.getWidth();
          int newColumnWidth=lastDisplayedWidth - (widthAll - widthLastColumn);
          if (newColumnWidth > minimumWidth) {
            if (referenceWidth - widthLastColumn < lastDisplayedWidth) {
              if (newColumnWidth > 0) {
                lastTableColumn.setWidth(newColumnWidth);
                changeColumnLayoutData(lastTableColumn,bounds);
              }
            }
 else {
              int width=tableViewerCreatorColumn.getWidth();
              if (columnLayoutData instanceof ColumnWeightData) {
                lastTableColumn.setWidth(width);
                changeColumnLayoutData(lastTableColumn,bounds);
              }
            }
          }
          referenceWidth=computeCurrentTableWidth() + widthAdjustValue;
        }
      }
      if (continuousLayout && !fillHorizontal) {
        Runnable runable=new Runnable(){
          public void run(){
            try {
synchronized (this) {
                wait(500);
                manualResizing=false;
              }
            }
 catch (            InterruptedException e) {
              manualResizing=false;
            }
          }
        }
;
        new Thread(runable).start();
      }
    }
    if (fillHorizontal) {
      manualResizing=false;
    }
    tableViewerCreator.redrawTableEditorControls();
  }
}",0.8989225243714726
129506,"/** 
 * Sets if if layout must be really processed at each call or not.
 * @param continuousLayout <code>true</code> if layout must be really processed at each call, and<code>false</code> otherwise
 */
public void setContinuousLayout(boolean continuousLayout){
  this.continuousLayout=continuousLayout;
}","/** 
 * Sets if if layout must be really processed at each call or not.
 * @param continuousLayout <code>true</code> if layout must be really processed at each call, and <code>false</code>otherwise
 */
public void setContinuousLayout(boolean continuousLayout){
  this.continuousLayout=continuousLayout;
}",0.9967105263157896
129507,"/** 
 * Method ""addPrimaryKey"".
 * @param table
 * @param pk the primary key of the table
 */
public static PrimaryKey addPrimaryKey(TdTable table,PrimaryKey pk){
}","/** 
 * Method ""addPrimaryKey"".
 * @param table
 * @param pk the primary key of the table
 */
public static PrimaryKey addPrimaryKey(TdTable table,TdColumn col){
}",0.9357798165137616
129508,"/** 
 * Method ""addForeignKey"".
 * @param table
 * @param foreignKey the foreign key of the given table
 */
public static ForeignKey addForeignKey(TdTable table,ForeignKey foreignKey){
}","/** 
 * Method ""addForeignKey"".
 * @param table
 * @param foreignKey the foreign key of the given table
 */
public static ForeignKey addForeignKey(TdTable table,ForeignKey foreignKey,TdColumn column){
}",0.9587628865979382
129509,"private void addItemToRecycleBin(RepositoryNode parentNode,Item item,List<RepositoryNode> foldersList){
  if (isGeneratedJobItem(item)) {
    return;
  }
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
  RepositoryNode currentParentNode=parentNode;
  if (item instanceof FolderItem) {
    itemType=getFolderContentType((FolderItem)item);
    if (itemType == null) {
      return;
    }
    if (itemType != null && itemType.isDQItemType() && !itemType.isSharedType()) {
      return;
    }
    if (item.getState().isDeleted()) {
      Folder folder=new Folder(item.getProperty(),itemType);
      RepositoryNode folderNode=null;
      for (      RepositoryNode existingFolder : foldersList) {
        if (existingFolder.getContentType() == null) {
          break;
        }
        if (existingFolder.getContentType().equals(folder.getRepositoryObjectType()) && existingFolder.getProperties(EProperties.LABEL).equals(folder.getLabel())) {
          folderNode=existingFolder;
          break;
        }
      }
      if (folderNode == null) {
        folderNode=new RepositoryNode(folder,parentNode,ENodeType.SIMPLE_FOLDER);
        folderNode.setProperties(EProperties.CONTENT_TYPE,itemType);
        folderNode.setProperties(EProperties.LABEL,folder.getLabel());
        foldersList.add(folderNode);
        parentNode.getChildren().add(folderNode);
        folderNode.setParent(parentNode);
      }
      for (      Item curItem : (List<Item>)new ArrayList(((FolderItem)item).getChildren())) {
        addItemToRecycleBin(folderNode,curItem,foldersList);
      }
      currentParentNode=folderNode;
    }
 else {
      for (      Item curItem : (List<Item>)new ArrayList(((FolderItem)item).getChildren())) {
        addItemToRecycleBin(parentNode,curItem,foldersList);
      }
    }
  }
 else   if (item.getState() != null && item.getState().isDeleted()) {
    try {
      if (item.getProperty().getVersion().equals(ProxyRepositoryFactory.getInstance().getLastVersion(item.getProperty().getId()).getVersion())) {
        RepositoryNode repNode=new RepositoryNode(new RepositoryViewObject(item.getProperty()),currentParentNode,ENodeType.REPOSITORY_ELEMENT);
        repNode.setProperties(EProperties.CONTENT_TYPE,itemType);
        repNode.setProperties(EProperties.LABEL,item.getProperty().getLabel());
        currentParentNode.getChildren().add(repNode);
        repNode.setParent(currentParentNode);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    if (item instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)item).getConnection();
      if (connection instanceof SAPConnection) {
        SAPConnection sapConnection=(SAPConnection)connection;
        EList<SAPFunctionUnit> funtions=sapConnection.getFuntions();
        if (funtions != null) {
          for (int i=0; i < funtions.size(); i++) {
            SAPFunctionUnit unit=funtions.get(i);
            if (SubItemHelper.isDeleted(unit)) {
              RepositoryNode tableNode=createSAPNode(new RepositoryViewObject(item.getProperty()),currentParentNode,unit);
              currentParentNode.getChildren().add(tableNode);
              tableNode.setParent(currentParentNode);
            }
 else {
              for (              MetadataTable table : ConnectionHelper.getTables(connection,unit)) {
                if (SubItemHelper.isDeleted(table)) {
                  RepositoryNode tableNode=createMetatableNode(currentParentNode,new RepositoryViewObject(item.getProperty()),table,ERepositoryObjectType.METADATA_CON_TABLE);
                  currentParentNode.getChildren().add(tableNode);
                  tableNode.setParent(currentParentNode);
                }
              }
            }
          }
        }
        EList<SAPIDocUnit> iDocs=sapConnection.getIDocs();
        if (iDocs != null) {
          for (int i=0; i < iDocs.size(); i++) {
            SAPIDocUnit unit=iDocs.get(i);
            if (SubItemHelper.isDeleted(unit)) {
              RepositoryNode tableNode=createSAPNode(new RepositoryViewObject(item.getProperty()),currentParentNode,unit);
              currentParentNode.getChildren().add(tableNode);
              tableNode.setParent(currentParentNode);
            }
          }
        }
        return;
      }
      for (      MetadataTable table : ConnectionHelper.getTables(connection)) {
        if (SubItemHelper.isDeleted(table)) {
          RepositoryNode tableNode=createMetatableNode(currentParentNode,new RepositoryViewObject(item.getProperty()),table,ERepositoryObjectType.METADATA_CON_TABLE);
          currentParentNode.getChildren().add(tableNode);
          tableNode.setParent(currentParentNode);
        }
      }
      QueriesConnection queriesConnection=connection.getQueries();
      if (queriesConnection != null) {
        for (        Query query : queriesConnection.getQuery()) {
          if (SubItemHelper.isDeleted(query)) {
            RepositoryNode queryNode=createQueryNode(currentParentNode,new RepositoryViewObject(item.getProperty()),query);
            currentParentNode.getChildren().add(queryNode);
            queryNode.setParent(currentParentNode);
          }
        }
      }
    }
  }
}","private void addItemToRecycleBin(RepositoryNode parentNode,Item item,List<RepositoryNode> foldersList){
  if (isGeneratedJobItem(item)) {
    return;
  }
  ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
  RepositoryNode currentParentNode=parentNode;
  if (item instanceof FolderItem) {
    itemType=getFolderContentType((FolderItem)item);
    if (itemType == null) {
      return;
    }
    if (itemType != null && itemType.isDQItemType() && !itemType.isSharedType()) {
      return;
    }
    if (item.getState().isDeleted()) {
      Folder folder=new Folder(item.getProperty(),itemType);
      RepositoryNode folderNode=null;
      for (      RepositoryNode existingFolder : foldersList) {
        if (existingFolder.getContentType() == null) {
          break;
        }
        if (existingFolder.getContentType().equals(folder.getRepositoryObjectType()) && existingFolder.getProperties(EProperties.LABEL).equals(folder.getLabel())) {
          folderNode=existingFolder;
          break;
        }
      }
      if (folderNode == null) {
        folderNode=new RepositoryNode(folder,parentNode,ENodeType.SIMPLE_FOLDER);
        folderNode.setProperties(EProperties.CONTENT_TYPE,itemType);
        folderNode.setProperties(EProperties.LABEL,folder.getLabel());
        foldersList.add(folderNode);
        parentNode.getChildren().add(folderNode);
        folderNode.setParent(parentNode);
      }
      for (      Item curItem : (List<Item>)new ArrayList(((FolderItem)item).getChildren())) {
        addItemToRecycleBin(folderNode,curItem,foldersList);
      }
      currentParentNode=folderNode;
    }
 else {
      for (      Item curItem : (List<Item>)new ArrayList(((FolderItem)item).getChildren())) {
        addItemToRecycleBin(parentNode,curItem,foldersList);
      }
    }
  }
 else   if (item.getState() != null && item.getState().isDeleted()) {
    try {
      if (item.getProperty().getVersion().equals(ProxyRepositoryFactory.getInstance().getLastVersion(item.getProperty().getId()).getVersion())) {
        RepositoryNode repNode=new RepositoryNode(new RepositoryViewObject(item.getProperty()),currentParentNode,ENodeType.REPOSITORY_ELEMENT);
        repNode.setProperties(EProperties.CONTENT_TYPE,itemType);
        repNode.setProperties(EProperties.LABEL,item.getProperty().getLabel());
        currentParentNode.getChildren().add(repNode);
        repNode.setParent(currentParentNode);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    if (item instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)item).getConnection();
      if (connection instanceof SAPConnection) {
        SAPConnection sapConnection=(SAPConnection)connection;
        EList<SAPFunctionUnit> funtions=sapConnection.getFuntions();
        if (funtions != null) {
          for (int i=0; i < funtions.size(); i++) {
            SAPFunctionUnit unit=funtions.get(i);
            if (SubItemHelper.isDeleted(unit)) {
              RepositoryNode tableNode=createSAPNode(new RepositoryViewObject(item.getProperty()),currentParentNode,unit);
              currentParentNode.getChildren().add(tableNode);
              tableNode.setParent(currentParentNode);
            }
 else {
              for (              MetadataTable table : ConnectionHelper.getTables(connection,unit)) {
                if (SubItemHelper.isDeleted(table)) {
                  RepositoryNode tableNode=createMetatableNode(currentParentNode,new RepositoryViewObject(item.getProperty()),table,ERepositoryObjectType.METADATA_CON_TABLE);
                  currentParentNode.getChildren().add(tableNode);
                  tableNode.setParent(currentParentNode);
                }
              }
            }
          }
        }
        EList<SAPIDocUnit> iDocs=sapConnection.getIDocs();
        if (iDocs != null) {
          for (int i=0; i < iDocs.size(); i++) {
            SAPIDocUnit unit=iDocs.get(i);
            if (SubItemHelper.isDeleted(unit)) {
              RepositoryNode tableNode=createSAPNode(new RepositoryViewObject(item.getProperty()),currentParentNode,unit);
              currentParentNode.getChildren().add(tableNode);
              tableNode.setParent(currentParentNode);
            }
          }
        }
        return;
      }
      for (      MetadataTable table : ConnectionHelper.getTables(connection)) {
        if (SubItemHelper.isDeleted(table)) {
          RepositoryNode tableNode=createMetatableNode(currentParentNode,new RepositoryViewObject(item.getProperty()),table,ERepositoryObjectType.METADATA_CON_TABLE);
          currentParentNode.getChildren().add(tableNode);
          tableNode.setParent(currentParentNode);
        }
      }
      if (connection != null) {
        QueriesConnection queriesConnection=connection.getQueries();
        if (queriesConnection != null) {
          for (          Query query : queriesConnection.getQuery()) {
            if (SubItemHelper.isDeleted(query)) {
              RepositoryNode queryNode=createQueryNode(currentParentNode,new RepositoryViewObject(item.getProperty()),query);
              currentParentNode.getChildren().add(queryNode);
              queryNode.setParent(currentParentNode);
            }
          }
        }
      }
    }
  }
}",0.976483974966812
129510,"public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=xmiResourceManager.resourceSet.getResources().get(i);
    if (resource == null) {
      continue;
    }
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (object instanceof Property) {
        if (((Property)object).getItem() instanceof FolderItem) {
          continue;
        }
        if (((Property)object).getItem() instanceof RoutineItem) {
          RoutineItem item=(RoutineItem)((Property)object).getItem();
          if (item.isBuiltIn()) {
            continue;
          }
        }
        if (((Property)object).getItem() instanceof SQLPatternItem) {
          SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
          if (item.isSystem()) {
            continue;
          }
        }
        ERepositoryStatus status=getStatus(((Property)object).getItem());
        if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
          continue;
        }
        resourceToUnload.add(resource);
        if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
          boolean toKeepInMemorySinceDeleted=false;
          if (((Property)object).getItem().getState().isDeleted()) {
            toKeepInMemorySinceDeleted=true;
          }
 else           if (((Property)object).getItem() instanceof ConnectionItem) {
            Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
            boolean haveTableDeleted=false;
            for (            MetadataTable table : ConnectionHelper.getTables(connection)) {
              if (SubItemHelper.isDeleted(table)) {
                haveTableDeleted=true;
                break;
              }
            }
            if (!haveTableDeleted) {
              QueriesConnection queriesConnection=connection.getQueries();
              if (queriesConnection != null) {
                for (                Query query : queriesConnection.getQuery()) {
                  if (SubItemHelper.isDeleted(query)) {
                    haveTableDeleted=true;
                    break;
                  }
                }
              }
              if (connection instanceof SAPConnection) {
                SAPConnection sapConn=(SAPConnection)connection;
                if (!haveTableDeleted) {
                  EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                  for (                  SAPFunctionUnit unit : funtions) {
                    if (SubItemHelper.isDeleted(unit)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (!haveTableDeleted) {
                  EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                  for (                  SAPIDocUnit iDoc : iDocs) {
                    if (SubItemHelper.isDeleted(iDoc)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
              }
            }
            if (haveTableDeleted) {
              toKeepInMemorySinceDeleted=true;
            }
          }
          if (!toKeepInMemorySinceDeleted) {
            ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
            ((Property)object).getItem().setParent(null);
          }
        }
        possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
      }
    }
  }
  kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=kaka.get(i);
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (!(object instanceof Property)) {
        if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
          resourceToUnload.add(resource);
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}","public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=xmiResourceManager.resourceSet.getResources().get(i);
    if (resource == null) {
      continue;
    }
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (object instanceof Property) {
        if (((Property)object).getItem() instanceof FolderItem) {
          continue;
        }
        if (((Property)object).getItem() instanceof RoutineItem) {
          RoutineItem item=(RoutineItem)((Property)object).getItem();
          if (item.isBuiltIn()) {
            continue;
          }
        }
        if (((Property)object).getItem() instanceof SQLPatternItem) {
          SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
          if (item.isSystem()) {
            continue;
          }
        }
        ERepositoryStatus status=getStatus(((Property)object).getItem());
        if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
          continue;
        }
        resourceToUnload.add(resource);
        if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
          boolean toKeepInMemorySinceDeleted=false;
          if (((Property)object).getItem().getState().isDeleted()) {
            toKeepInMemorySinceDeleted=true;
          }
 else           if (((Property)object).getItem() instanceof ConnectionItem) {
            Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
            boolean haveTableDeleted=false;
            for (            MetadataTable table : ConnectionHelper.getTables(connection)) {
              if (SubItemHelper.isDeleted(table)) {
                haveTableDeleted=true;
                break;
              }
            }
            if (!haveTableDeleted && connection != null) {
              QueriesConnection queriesConnection=connection.getQueries();
              if (queriesConnection != null) {
                for (                Query query : queriesConnection.getQuery()) {
                  if (SubItemHelper.isDeleted(query)) {
                    haveTableDeleted=true;
                    break;
                  }
                }
              }
              if (connection instanceof SAPConnection) {
                SAPConnection sapConn=(SAPConnection)connection;
                if (!haveTableDeleted) {
                  EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                  for (                  SAPFunctionUnit unit : funtions) {
                    if (SubItemHelper.isDeleted(unit)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (!haveTableDeleted) {
                  EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                  for (                  SAPIDocUnit iDoc : iDocs) {
                    if (SubItemHelper.isDeleted(iDoc)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
              }
            }
            if (haveTableDeleted) {
              toKeepInMemorySinceDeleted=true;
            }
          }
          if (!toKeepInMemorySinceDeleted) {
            ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
            ((Property)object).getItem().setParent(null);
          }
        }
        possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
      }
    }
  }
  kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=kaka.get(i);
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (!(object instanceof Property)) {
        if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
          resourceToUnload.add(resource);
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}",0.9977777777777778
129511,"public void refreshTemplateTab(){
  if (getContextManager() == null) {
    this.setEnabled(false);
    template.clear();
  }
 else {
    this.setEnabled(true);
    setTabEnable(!isReadOnly());
    toolgeRefreshContextRelitiveComposite(template);
  }
  if (getContextManager() != null) {
    getContextManager().fireContextsChangedEvent();
  }
}","public void refreshTemplateTab(){
  if (getContextManager() == null) {
    this.setEnabled(false);
    template.clear();
    template.setEnabled(isReadOnly());
  }
 else {
    this.setEnabled(true);
    setTabEnable(!isReadOnly());
    toolgeRefreshContextRelitiveComposite(template);
  }
  if (getContextManager() != null) {
    getContextManager().fireContextsChangedEvent();
  }
}",0.9463548830811556
129512,"public static String getNewQueryLabel(){
  return Messages.getString(""String_Node_Str"",num++);
}","public static String getNewQueryLabel(){
  return Messages1.getString(""String_Node_Str"",num++);
}",0.9948186528497408
129513,"/** 
 * set a date new value partly
 * @param date (a date value)
 * @param nb (new number)
 * @param dateType (the part)
 * @return a new date{talendTypes} Date {Category} TalendDate {param} date(mydate) date : the date to set {param} Integer(newValue) nb : the new value {param} String(""MM"") dateType : the part to set {examples} ->> setDate(2008/11/24 12:15:25, 2010, ""yyyy"") return 2010/11/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 01, ""MM"") return 2008/01/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 15, ""dd"") return 2008/11/15 12:15:25 #
 */
public static Date setDate(Date date,int nb,String dateType){
  if (date == null || dateType == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.YEAR,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MONTH,nb - 1);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.DATE,nb);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.HOUR_OF_DAY,nb);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + dateType);
  }
  return c.getTime();
}","/** 
 * set a date new value partly
 * @param date (a date value)
 * @param nb (new number)
 * @param dateType (the part)
 * @return a new date{talendTypes} Date {Category} TalendDate {param} date(mydate) date : the date to set {param} Integer(newValue) nb : the new value {param} String(""MM"") dateType : the part to set {examples} ->> setDate(2008/11/24 12:15:25, 2010, ""yyyy"") return 2010/11/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 01, ""MM"") return 2008/01/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 15, ""dd"") return 2008/11/15 12:15:25 #
 */
public static Date setDate(Date date,int nb,String dateType){
  if (date == null || dateType == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.YEAR,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MONTH,nb - 1);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.DATE,nb);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.HOUR_OF_DAY,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MINUTE,nb);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + dateType);
  }
  return c.getTime();
}",0.965739621120516
129514,"public void save(Project project,Property property) throws PersistenceException {
  computePropertyMaxInformationLevel(property);
  propagateFileName(project,property);
  Resource propertyResource=property.eResource();
  if (propertyResource != null) {
    xmiResourceManager.saveResource(propertyResource);
  }
}","public void save(Project project,Property property) throws PersistenceException {
  xmiResourceManager.getAffectedResources(property);
  computePropertyMaxInformationLevel(property);
  propagateFileName(project,property);
  Resource propertyResource=property.eResource();
  if (propertyResource != null) {
    xmiResourceManager.saveResource(propertyResource);
  }
}",0.9219440353460971
129515,"public static boolean validComponent(String componentName){
  if (componentName != null) {
    for (    RepositoryComponentSetting setting : getSettings()) {
      final String inputComponent=setting.getInputComponent();
      final String outputComponent=setting.getOutputComponent();
      final String defaultComponent=setting.getDefaultComponent();
      if (componentName.equals(inputComponent) || componentName.equals(outputComponent) || componentName.equals(defaultComponent)) {
        return true;
      }
    }
  }
  return false;
}","public static boolean validComponent(String componentName){
  if (componentName != null) {
    for (    RepositoryComponentSetting setting : getSettings()) {
      final String inputComponent=setting.getInputComponent();
      final String outputComponent=setting.getOutputComponent();
      final String defaultComponent=setting.getDefaultComponent();
      if (componentName.equals(inputComponent) || componentName.equals(outputComponent) || componentName.equals(defaultComponent)|| componentName.equals(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}",0.9626998223801064
129516,"@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,500);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}","@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
          if (node != null && ""String_Node_Str"".equals(node.getComponent().getName())) {
            if (relatedWizard != null && relatedWizard instanceof RepositoryWizard) {
              ConnectionItem connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
              if (connItem != null && connItem instanceof MDMConnectionItem) {
                org.talend.core.model.metadata.builder.connection.Connection connection=((MDMConnectionItem)connItem).getConnection();
                if (connection != null && connection instanceof MDMConnection) {
                  if (oldMdmConValues.containsKey(""String_Node_Str"") && oldMdmConValues.get(""String_Node_Str"") != null) {
                    ((MDMConnection)connection).setUsername(oldMdmConValues.get(""String_Node_Str"").toString());
                    ((MDMConnection)connection).setPassword(oldMdmConValues.get(""String_Node_Str"").toString());
                    ((MDMConnection)connection).setServer(oldMdmConValues.get(""String_Node_Str"").toString());
                    ((MDMConnection)connection).setPort(oldMdmConValues.get(""String_Node_Str"").toString());
                  }
 else {
                    ((MDMConnection)connection).setUsername(""String_Node_Str"");
                    ((MDMConnection)connection).setPassword(""String_Node_Str"");
                    ((MDMConnection)connection).setServer(""String_Node_Str"");
                    ((MDMConnection)connection).setPort(""String_Node_Str"");
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=(IProviderService)GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,500);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}",0.8858595534595829
129517,"/** 
 * set a date new value partly
 * @param date (a date value)
 * @param nb (new number)
 * @param dateType (the part)
 * @return a new date{talendTypes} Date {Category} TalendDate {param} date(mydate) date : the date to set {param} Integer(newValue) nb : the new value {param} String(""MM"") dateType : the part to set {examples} ->> setDate(2008/11/24 12:15:25, 2010, ""yyyy"") return 2010/11/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 01, ""MM"") return 2008/01/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 15, ""dd"") return 2008/11/15 12:15:25 #
 */
public static Date setDate(Date date,int nb,String dateType){
  if (date == null || dateType == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.YEAR,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MONTH,nb - 1);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.DATE,nb);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.HOUR_OF_DAY,nb);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + dateType);
  }
  return c.getTime();
}","/** 
 * set a date new value partly
 * @param date (a date value)
 * @param nb (new number)
 * @param dateType (the part)
 * @return a new date{talendTypes} Date {Category} TalendDate {param} date(mydate) date : the date to set {param} Integer(newValue) nb : the new value {param} String(""MM"") dateType : the part to set {examples} ->> setDate(2008/11/24 12:15:25, 2010, ""yyyy"") return 2010/11/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 01, ""MM"") return 2008/01/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 15, ""dd"") return 2008/11/15 12:15:25 #
 */
public static Date setDate(Date date,int nb,String dateType){
  if (date == null || dateType == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.YEAR,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MONTH,nb - 1);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.DATE,nb);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.HOUR_OF_DAY,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MINUTE,nb);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + dateType);
  }
  return c.getTime();
}",0.965739621120516
129518,"/** 
 * set a date new value partly
 * @param date (a date value)
 * @param nb (new number)
 * @param dateType (the part)
 * @return a new date{talendTypes} Date {Category} TalendDate {param} date(mydate) date : the date to set {param} Integer(newValue) nb : the new value {param} String(""MM"") dateType : the part to set {examples} ->> setDate(2008/11/24 12:15:25, 2010, ""yyyy"") return 2010/11/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 01, ""MM"") return 2008/01/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 15, ""dd"") return 2008/11/15 12:15:25 #
 */
public static Date setDate(Date date,int nb,String dateType){
  if (date == null || dateType == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.YEAR,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MONTH,nb - 1);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.DATE,nb);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.HOUR_OF_DAY,nb);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + dateType);
  }
  return c.getTime();
}","/** 
 * set a date new value partly
 * @param date (a date value)
 * @param nb (new number)
 * @param dateType (the part)
 * @return a new date{talendTypes} Date {Category} TalendDate {param} date(mydate) date : the date to set {param} Integer(newValue) nb : the new value {param} String(""MM"") dateType : the part to set {examples} ->> setDate(2008/11/24 12:15:25, 2010, ""yyyy"") return 2010/11/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 01, ""MM"") return 2008/01/24 12:15:25 ->> setDate(2008/11/24 12:15:25, 15, ""dd"") return 2008/11/15 12:15:25 #
 */
public static Date setDate(Date date,int nb,String dateType){
  if (date == null || dateType == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  c.setTime(date);
  if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.YEAR,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MONTH,nb - 1);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.DATE,nb);
  }
 else   if (dateType.equalsIgnoreCase(""String_Node_Str"")) {
    c.set(Calendar.HOUR_OF_DAY,nb);
  }
 else   if (dateType.equals(""String_Node_Str"")) {
    c.set(Calendar.MINUTE,nb);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + dateType);
  }
  return c.getTime();
}",0.965739621120516
129519,"public static String getNewQueryLabel(){
  return Messages.getString(""String_Node_Str"",num++);
}","public static String getNewQueryLabel(){
  return Messages1.getString(""String_Node_Str"",num++);
}",0.9948186528497408
129520,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    HashMap<String,String> primaryKeys=getPrimaryKeys(iMetadataConnection,dbMetaData,tableNode);
    for (    TdColumn metadataColumn : metadataColumns) {
      if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
        metadataColumn.setKey(true);
      }
 else {
        metadataColumn.setKey(false);
      }
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.958833063209076
129521,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType,iMetadataConnection.isSqlMode(),iMetadataConnection.getDatabase());
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    HashMap<String,String> primaryKeys=getPrimaryKeys(iMetadataConnection,dbMetaData,tableNode);
    for (    TdColumn metadataColumn : metadataColumns) {
      if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
        metadataColumn.setKey(true);
      }
 else {
        metadataColumn.setKey(false);
      }
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.958833063209076
129522,"protected void updateConnectionItem() throws CoreException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IWorkspaceRunnable operation=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        factory.save(connectionItem);
        closeLockStrategy();
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  workspace.run(operation,null);
}","protected void updateConnectionItem() throws CoreException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IWorkspaceRunnable operation=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        factory.save(connectionItem);
        closeLockStrategy();
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  ISchedulingRule schedulingRule=workspace.getRoot();
  workspace.run(operation,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
}",0.9075757575757576
129523,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : (List<Item>)currentFolderItem.getChildren()) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,(IFolder)current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : (List<Item>)currentFolderItem.getChildren()) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            RuntimeException e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              log.error(Messages.getString(""String_Node_Str"") + current);
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,(IFolder)current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                ((IFolder)current).delete(true,null);
              }
 catch (              CoreException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9753836108390468
129524,"/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
protected List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              RuntimeException e) {
                ExceptionHandler.process(e);
              }
              if (property != null) {
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  ((IFolder)current).delete(true,null);
                }
 catch (                CoreException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : (List<Item>)currentFolderItem.getChildren()) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}","/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
protected List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : (List<Item>)currentFolderItem.getChildren()) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              RuntimeException e) {
                ExceptionHandler.process(e);
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  ((IFolder)current).delete(true,null);
                }
 catch (                CoreException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : (List<Item>)currentFolderItem.getChildren()) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}",0.9746500677288268
129525,"public void refreshTemplateTab(){
  if (getContextManager() == null) {
    this.setEnabled(false);
    template.clear();
  }
 else {
    this.setEnabled(true);
    setTabEnable(!isReadOnly());
    toolgeRefreshContextRelitiveComposite(template);
  }
  if (getContextManager() != null) {
    getContextManager().fireContextsChangedEvent();
  }
}","public void refreshTemplateTab(){
  if (getContextManager() == null) {
    this.setEnabled(false);
    template.clear();
    template.setEnabled(isReadOnly());
  }
 else {
    this.setEnabled(true);
    setTabEnable(!isReadOnly());
    toolgeRefreshContextRelitiveComposite(template);
  }
  if (getContextManager() != null) {
    getContextManager().fireContextsChangedEvent();
  }
}",0.9463548830811556
129526,"public void generateDocumentation(ExportFileResource resource,String targetPath,String... jobVersion) throws Exception {
  List<URL> picList=new ArrayList<URL>(5);
  String jobName=resource.getItem().getProperty().getLabel();
  String jobPath=resource.getItem().getProperty().getItem().getState().getPath();
  if (targetPath.endsWith(this.repositoryObjectType.toString().toLowerCase())) {
    targetPath=targetPath + IPath.SEPARATOR + jobPath+ IPath.SEPARATOR+ jobName;
  }
  String version=""String_Node_Str"";
  if (jobVersion != null && jobVersion.length == 1) {
    version=jobVersion[0];
  }
 else {
    version=resource.getItem().getProperty().getVersion();
  }
  targetPath=targetPath + ""String_Node_Str"" + version;
  File file=new File(targetPath);
  if (file.exists()) {
    FilesUtils.removeFolder(file,true);
  }
  file.mkdirs();
  handleXMLFile(resource,targetPath,jobVersion);
  String picFolderPath=checkPicDirIsExists(resource,targetPath);
  final Bundle b=Platform.getBundle(""String_Node_Str"");
  final URL xslFileUrl=FileLocator.toFileURL(FileLocator.find(b,new Path(IHTMLDocConstants.MAIN_XSL_FILE_PATH),null));
  File logoFile=new File(picFolderPath + File.separatorChar + IHTMLDocConstants.TALEND_LOGO_FILE_NAME);
  saveLogoImage(SWT.IMAGE_JPEG,logoFile);
  String xslFilePath=xslFileUrl.getPath();
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.USE_CSS_TEMPLATE);
  String cssFile=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.CSS_FILE_PATH);
  String temXslPath=null;
  if (isCheck && cssFile != null && !cssFile.equals(""String_Node_Str"")) {
    String tempFolderPath=checkTempDirIsExists(resource);
    temXslPath=tempFolderPath + File.separator + (new File(xslFilePath)).getName();
    File temXslFile=new File(temXslPath);
    if (temXslFile.exists()) {
      temXslFile.delete();
    }
    generateXslFile(xslFilePath,temXslPath,cssFile,null);
  }
  if (temXslPath != null) {
    File temFile=new File(temXslPath);
    if (!temFile.exists()) {
      temXslPath=xslFilePath;
    }
  }
 else {
    temXslPath=xslFilePath;
  }
  picList.add(logoFile.toURL());
  byte[] innerContent=null;
  ProcessType processType=null;
  if (resource.getItem() instanceof ProcessItem) {
    processType=((ProcessItem)resource.getItem()).getProcess();
    innerContent=(byte[])processType.getScreenshots().get(""String_Node_Str"");
  }
 else   if (resource.getItem() instanceof JobletProcessItem) {
    processType=((JobletProcessItem)resource.getItem()).getJobletProcess();
    innerContent=(byte[])processType.getScreenshots().get(""String_Node_Str"");
    ;
  }
  if (innerContent != null) {
    String picName=jobName + ""String_Node_Str"" + version+ IHTMLDocConstants.JOB_PREVIEW_PIC_SUFFIX;
    ImageUtils.save(innerContent,picFolderPath + File.separatorChar + picName,SWT.IMAGE_PNG);
    picList.add(new File(picFolderPath + File.separatorChar + picName).toURL());
    ByteArrayInputStream bais=new ByteArrayInputStream(innerContent);
    Image pdfImage=new Image(null,bais);
    int width=pdfImage.getImageData().width;
    int percent=22 * 32 * 100 / width;
    ImageUtils.save(ImageUtils.scale(pdfImage,percent),picFolderPath + File.separatorChar + ""String_Node_Str""+ picName,SWT.IMAGE_PNG);
    picList.add(new File(picFolderPath + File.separatorChar + ""String_Node_Str""+ picName).toURL());
    pdfImage.dispose();
  }
  for (  NodeType node : (List<NodeType>)processType.getNode()) {
    String uniqueName=""String_Node_Str"";
    for (    Object o : node.getElementParameter()) {
      if (o instanceof ElementParameterType) {
        if (""String_Node_Str"".equals(((ElementParameterType)o).getName())) {
          uniqueName=((ElementParameterType)o).getValue();
          break;
        }
      }
    }
    byte[] screenshot=(byte[])processType.getScreenshots().get(uniqueName);
    if (screenshot != null && screenshot.length != 0) {
      String picName=IHTMLDocConstants.EXTERNAL_NODE_PREVIEW + uniqueName + IHTMLDocConstants.JOB_PREVIEW_PIC_SUFFIX;
      ImageUtils.save(screenshot,picFolderPath + File.separatorChar + picName,SWT.IMAGE_PNG);
      picList.add(new File(picFolderPath + File.separatorChar + picName).toURL());
      ByteArrayInputStream bais=new ByteArrayInputStream(screenshot);
      Image pdfImage=new Image(null,bais);
      int width=pdfImage.getImageData().width;
      int percent=22 * 32 * 100 / width;
      ImageUtils.save(ImageUtils.scale(pdfImage,percent),picFolderPath + File.separatorChar + ""String_Node_Str""+ picName,SWT.IMAGE_PNG);
      picList.add(new File(picFolderPath + File.separatorChar + picName).toURL());
      pdfImage.dispose();
    }
  }
  Set keySet=picFilePathMap.keySet();
  for (  Object key : keySet) {
    String value=picFilePathMap.get(key);
    FileCopyUtils.copy(value,picFolderPath + File.separatorChar + key);
    picList.add(new File(picFolderPath + File.separatorChar + key).toURL());
  }
  List<URL> resultFiles=parseXml2HtmlPdf(targetPath,jobName + ""String_Node_Str"" + version,temXslPath);
  resource.addResources(resultFiles);
  resource.addResources(IHTMLDocConstants.PIC_FOLDER_NAME,picList);
  HTMLDocUtils.deleteTempFiles();
  targetConnectionMap=null;
  sourceConnectionMap=null;
}","public void generateDocumentation(ExportFileResource resource,String targetPath,String... jobVersion) throws Exception {
  List<URL> picList=new ArrayList<URL>(5);
  String jobName=resource.getItem().getProperty().getLabel();
  String jobPath=resource.getItem().getProperty().getItem().getState().getPath();
  if (jobName != null && !(jobName).equals(this.repositoryObjectType.toString().toLowerCase()) && targetPath.endsWith(this.repositoryObjectType.toString().toLowerCase())) {
    targetPath=targetPath + IPath.SEPARATOR + jobPath+ IPath.SEPARATOR+ jobName;
  }
  String version=""String_Node_Str"";
  if (jobVersion != null && jobVersion.length == 1) {
    version=jobVersion[0];
  }
 else {
    version=resource.getItem().getProperty().getVersion();
  }
  targetPath=targetPath + ""String_Node_Str"" + version;
  File file=new File(targetPath);
  if (file.exists()) {
    FilesUtils.removeFolder(file,true);
  }
  file.mkdirs();
  handleXMLFile(resource,targetPath,jobVersion);
  String picFolderPath=checkPicDirIsExists(resource,targetPath);
  final Bundle b=Platform.getBundle(""String_Node_Str"");
  final URL xslFileUrl=FileLocator.toFileURL(FileLocator.find(b,new Path(IHTMLDocConstants.MAIN_XSL_FILE_PATH),null));
  File logoFile=new File(picFolderPath + File.separatorChar + IHTMLDocConstants.TALEND_LOGO_FILE_NAME);
  saveLogoImage(SWT.IMAGE_JPEG,logoFile);
  String xslFilePath=xslFileUrl.getPath();
  boolean isCheck=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.USE_CSS_TEMPLATE);
  String cssFile=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.CSS_FILE_PATH);
  String temXslPath=null;
  if (isCheck && cssFile != null && !cssFile.equals(""String_Node_Str"")) {
    String tempFolderPath=checkTempDirIsExists(resource);
    temXslPath=tempFolderPath + File.separator + (new File(xslFilePath)).getName();
    File temXslFile=new File(temXslPath);
    if (temXslFile.exists()) {
      temXslFile.delete();
    }
    generateXslFile(xslFilePath,temXslPath,cssFile,null);
  }
  if (temXslPath != null) {
    File temFile=new File(temXslPath);
    if (!temFile.exists()) {
      temXslPath=xslFilePath;
    }
  }
 else {
    temXslPath=xslFilePath;
  }
  picList.add(logoFile.toURL());
  byte[] innerContent=null;
  ProcessType processType=null;
  if (resource.getItem() instanceof ProcessItem) {
    processType=((ProcessItem)resource.getItem()).getProcess();
    innerContent=(byte[])processType.getScreenshots().get(""String_Node_Str"");
  }
 else   if (resource.getItem() instanceof JobletProcessItem) {
    processType=((JobletProcessItem)resource.getItem()).getJobletProcess();
    innerContent=(byte[])processType.getScreenshots().get(""String_Node_Str"");
    ;
  }
  if (innerContent != null) {
    String picName=jobName + ""String_Node_Str"" + version+ IHTMLDocConstants.JOB_PREVIEW_PIC_SUFFIX;
    ImageUtils.save(innerContent,picFolderPath + File.separatorChar + picName,SWT.IMAGE_PNG);
    picList.add(new File(picFolderPath + File.separatorChar + picName).toURL());
    ByteArrayInputStream bais=new ByteArrayInputStream(innerContent);
    Image pdfImage=new Image(null,bais);
    int width=pdfImage.getImageData().width;
    int percent=22 * 32 * 100 / width;
    ImageUtils.save(ImageUtils.scale(pdfImage,percent),picFolderPath + File.separatorChar + ""String_Node_Str""+ picName,SWT.IMAGE_PNG);
    picList.add(new File(picFolderPath + File.separatorChar + ""String_Node_Str""+ picName).toURL());
    pdfImage.dispose();
  }
  for (  NodeType node : (List<NodeType>)processType.getNode()) {
    String uniqueName=""String_Node_Str"";
    for (    Object o : node.getElementParameter()) {
      if (o instanceof ElementParameterType) {
        if (""String_Node_Str"".equals(((ElementParameterType)o).getName())) {
          uniqueName=((ElementParameterType)o).getValue();
          break;
        }
      }
    }
    byte[] screenshot=(byte[])processType.getScreenshots().get(uniqueName);
    if (screenshot != null && screenshot.length != 0) {
      String picName=IHTMLDocConstants.EXTERNAL_NODE_PREVIEW + uniqueName + IHTMLDocConstants.JOB_PREVIEW_PIC_SUFFIX;
      ImageUtils.save(screenshot,picFolderPath + File.separatorChar + picName,SWT.IMAGE_PNG);
      picList.add(new File(picFolderPath + File.separatorChar + picName).toURL());
      ByteArrayInputStream bais=new ByteArrayInputStream(screenshot);
      Image pdfImage=new Image(null,bais);
      int width=pdfImage.getImageData().width;
      int percent=22 * 32 * 100 / width;
      ImageUtils.save(ImageUtils.scale(pdfImage,percent),picFolderPath + File.separatorChar + ""String_Node_Str""+ picName,SWT.IMAGE_PNG);
      picList.add(new File(picFolderPath + File.separatorChar + picName).toURL());
      pdfImage.dispose();
    }
  }
  Set keySet=picFilePathMap.keySet();
  for (  Object key : keySet) {
    String value=picFilePathMap.get(key);
    FileCopyUtils.copy(value,picFolderPath + File.separatorChar + key);
    picList.add(new File(picFolderPath + File.separatorChar + key).toURL());
  }
  List<URL> resultFiles=parseXml2HtmlPdf(targetPath,jobName + ""String_Node_Str"" + version,temXslPath);
  resource.addResources(resultFiles);
  resource.addResources(IHTMLDocConstants.PIC_FOLDER_NAME,picList);
  HTMLDocUtils.deleteTempFiles();
  targetConnectionMap=null;
  sourceConnectionMap=null;
}",0.9913109180204004
129527,"/** 
 * Method ""addPrimaryKey"".
 * @param table
 * @param pk the primary key of the table
 */
public static PrimaryKey addPrimaryKey(TdTable table,PrimaryKey pk){
}","/** 
 * Method ""addPrimaryKey"".
 * @param table
 * @param pk the primary key of the table
 */
public static PrimaryKey addPrimaryKey(TdTable table,TdColumn col){
}",0.9357798165137616
129528,"/** 
 * Method ""addForeignKey"".
 * @param table
 * @param foreignKey the foreign key of the given table
 */
public static ForeignKey addForeignKey(TdTable table,ForeignKey foreignKey){
}","/** 
 * Method ""addForeignKey"".
 * @param table
 * @param foreignKey the foreign key of the given table
 */
public static ForeignKey addForeignKey(TdTable table,ForeignKey foreignKey,TdColumn column){
}",0.9587628865979382
129529,"public static boolean isDeleted(AbstractMetadataObject abstractMetadataObject){
  return abstractMetadataObject.getProperties().containsKey(DELETED);
}","public static boolean isDeleted(AbstractMetadataObject abstractMetadataObject){
  boolean deleted=false;
  if (abstractMetadataObject != null) {
    deleted=abstractMetadataObject.getProperties().containsKey(DELETED);
  }
  return deleted;
}",0.7397959183673469
129530,"public static void setDeleted(AbstractMetadataObject abstractMetadataObject,boolean deleted){
  if (deleted)   abstractMetadataObject.getProperties().put(DELETED,Boolean.TRUE.toString());
 else   abstractMetadataObject.getProperties().remove(DELETED);
}","public static void setDeleted(AbstractMetadataObject abstractMetadataObject,boolean deleted){
  if (abstractMetadataObject != null) {
    if (deleted) {
      abstractMetadataObject.getProperties().put(DELETED,Boolean.TRUE.toString());
    }
 else {
      abstractMetadataObject.getProperties().remove(DELETED);
    }
  }
}",0.8368055555555556
129531,"@Override public void moveObject(IRepositoryViewObject objToMove,IPath targetPath,IPath... sourcePath) throws PersistenceException, BusinessException {
  checkAvailability(objToMove);
  this.repositoryFactoryFromProvider.moveObject(objToMove,targetPath);
  String str[]=new String[]{objToMove + ""String_Node_Str"",targetPath + ""String_Node_Str""};
  log.debug(Messages.getString(""String_Node_Str"",str));
  boolean isExtendPoint=false;
  ERepositoryObjectType repositoryObjectType=objToMove.getRepositoryObjectType();
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    ERepositoryObjectType type=handler.getProcessType();
    if (type != null && repositoryObjectType == type) {
      isExtendPoint=true;
      break;
    }
  }
  if (isExtendPoint || objToMove.getRepositoryObjectType() == ERepositoryObjectType.PROCESS) {
    if (sourcePath != null && sourcePath.length == 1) {
      fireRepositoryPropertyChange(ERepositoryActionName.JOB_MOVE.getName(),objToMove,new IPath[]{sourcePath[0],targetPath});
    }
  }
  if (objToMove.getRepositoryObjectType() == ERepositoryObjectType.JOBLET) {
    if (sourcePath != null && sourcePath.length == 1) {
      fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_MOVE.getName(),objToMove,new IPath[]{sourcePath[0],targetPath});
    }
  }
}","@Override public void moveObject(IRepositoryViewObject objToMove,IPath targetPath,IPath... sourcePath) throws PersistenceException, BusinessException {
  checkAvailability(objToMove);
  this.repositoryFactoryFromProvider.moveObject(objToMove,targetPath);
  String str[]=new String[]{objToMove + ""String_Node_Str"",targetPath + ""String_Node_Str""};
  log.debug(Messages.getString(""String_Node_Str"",str));
  if (objToMove.getRepositoryObjectType() == ERepositoryObjectType.PROCESS) {
    if (sourcePath != null && sourcePath.length == 1) {
      fireRepositoryPropertyChange(ERepositoryActionName.JOB_MOVE.getName(),objToMove,new IPath[]{sourcePath[0],targetPath});
    }
  }
  if (objToMove.getRepositoryObjectType() == ERepositoryObjectType.JOBLET) {
    if (sourcePath != null && sourcePath.length == 1) {
      fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_MOVE.getName(),objToMove,new IPath[]{sourcePath[0],targetPath});
    }
  }
}",0.8303217276333187
129532,"@Override protected void run() throws LoginException, PersistenceException {
  try {
    for (    Object obj : ((StructuredSelection)data).toArray()) {
      final RepositoryNode sourceNode=(RepositoryNode)obj;
      monitor.subTask(Messages.getString(""String_Node_Str"") + sourceNode.getObject().getLabel());
      MoveObjectAction.getInstance().execute(sourceNode,targetNode,true);
    }
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
}","public void run(IProgressMonitor monitor) throws CoreException {
  try {
    for (    Object obj : ((StructuredSelection)data).toArray()) {
      final RepositoryNode sourceNode=(RepositoryNode)obj;
      monitor.subTask(Messages.getString(""String_Node_Str"") + sourceNode.getObject().getLabel());
      MoveObjectAction.getInstance().execute(sourceNode,targetNode,true);
    }
  }
 catch (  Exception e) {
    throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
  }
}",0.1045498547918683
129533,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            repositoryView.refresh();
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9765780071456928
129534,"public DeleteAction(){
  super();
  setId(ActionFactory.DELETE.getId());
  this.setImageDescriptor(ImageProvider.getImageDesc(EImage.DELETE_ICON));
  singleton=this;
}","public DeleteAction(){
  super();
  setId(ActionFactory.DELETE.getId());
  this.setImageDescriptor(ImageProvider.getImageDesc(EImage.DELETE_ICON));
  singleton=this;
  this.setUnloadResourcesAfter(true);
  this.setAvoidUnloadResources(true);
}",0.8146341463414634
129535,"@Override protected void doRun(){
  ISelection selection=getSelection();
  connections=new ArrayList<IRepositoryViewObject>();
  procItems=new HashMap<String,Item>();
  needToUpdatePalette=false;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  Object obj : ((IStructuredSelection)selection).toArray()) {
    if (obj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)obj;
      restoreNode(node);
      while (node.getParent().getObject() != null && factory.getStatus(node.getParent().getObject()) == ERepositoryStatus.DELETED) {
        node=node.getParent();
        if (node.getObject().getProperty().getItem() instanceof FolderItem) {
          node.getObject().getProperty().getItem().getState().setDeleted(false);
        }
      }
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    for (    String id : procItems.keySet()) {
      Item item=procItems.get(id);
      factory.save(item);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  procItems=null;
  if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
    final boolean updatePalette=needToUpdatePalette;
    Display.getCurrent().syncExec(new Runnable(){
      public void run(){
        IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
        if (repositoryView != null) {
          repositoryView.refresh();
        }
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
      }
    }
);
    notifySQLBuilder(connections);
    connections=null;
  }
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  connections=new ArrayList<IRepositoryViewObject>();
  procItems=new HashMap<String,Item>();
  needToUpdatePalette=false;
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          restoreNode(node);
          while (node.getParent().getObject() != null && factory.getStatus(node.getParent().getObject()) == ERepositoryStatus.DELETED) {
            node=node.getParent();
            if (node.getObject().getProperty().getItem() instanceof FolderItem) {
              node.getObject().getProperty().getItem().getState().setDeleted(false);
            }
          }
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        for (        String id : procItems.keySet()) {
          Item item=procItems.get(id);
          factory.save(item);
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      procItems=null;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
    final boolean updatePalette=needToUpdatePalette;
    Display.getCurrent().syncExec(new Runnable(){
      public void run(){
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
      }
    }
);
    notifySQLBuilder(connections);
    connections=null;
  }
}",0.756108805901337
129536,"public RestoreAction(){
  super();
  this.setText(Messages.getString(""String_Node_Str""));
  this.setToolTipText(Messages.getString(""String_Node_Str""));
  this.setImageDescriptor(ImageProvider.getImageDesc(EImage.RESTORE_ICON));
  this.setActionDefinitionId(""String_Node_Str"");
}","public RestoreAction(){
  super();
  this.setText(Messages.getString(""String_Node_Str""));
  this.setToolTipText(Messages.getString(""String_Node_Str""));
  this.setImageDescriptor(ImageProvider.getImageDesc(EImage.RESTORE_ICON));
  this.setActionDefinitionId(""String_Node_Str"");
  this.setUnloadResourcesAfter(true);
  this.setAvoidUnloadResources(true);
}",0.879746835443038
129537,"public void run(){
  IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
  if (repositoryView != null) {
    repositoryView.refresh();
  }
  if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
    ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
    service.updatePalette();
  }
}","public void run(){
  if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
    ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
    service.updatePalette();
  }
}",0.7831325301204819
129538,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() && EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataconnection.getDbType()) || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9799643811219948
129539,"protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.useAllSynonyms && EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataconnection.getDbType())) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}","protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.useAllSynonyms) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}",0.9677881173944166
129540,"public void resetAllProxy(){
  Properties properties=System.getProperties();
  if (properties.contains(SalesforceModuleParseAPI.SOCKS_PROXY_HOST) && oldSocksProxySet) {
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
  }
  if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_SET) && ""String_Node_Str"".equals(oldHttpProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,oldHttpProxySet);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
  }
  if (properties.contains(SalesforceModuleParseAPI.HTTPS_PROXY_SET) && ""String_Node_Str"".equals(oldHttpsProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,oldHttpsProxySet);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
  }
}","public void resetAllProxy(){
  Properties properties=System.getProperties();
  if (properties.containsKey(SalesforceModuleParseAPI.SOCKS_PROXY_HOST) && oldSocksProxySet) {
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
  }
  if (properties.containsKey(SalesforceModuleParseAPI.HTTP_PROXY_SET) && ""String_Node_Str"".equals(oldHttpProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,oldHttpProxySet);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
  }
  if (properties.containsKey(SalesforceModuleParseAPI.HTTPS_PROXY_SET) && ""String_Node_Str"".equals(oldHttpsProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,oldHttpsProxySet);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
  }
}",0.9981740718198416
129541,"public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  if (socksProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.SOCKS_PROXY_HOST)) {
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
      oldSocksProxySet=true;
    }
 else {
      oldSocksProxySet=false;
    }
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    }
 else {
      oldHttpProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpsProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    }
 else {
      oldHttpsProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}","public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  if (socksProxy && proxyHost != null && proxyPort != null) {
    if (properties.containsKey(SalesforceModuleParseAPI.SOCKS_PROXY_HOST)) {
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
      oldSocksProxySet=true;
    }
 else {
      oldSocksProxySet=false;
    }
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    if (properties.containsKey(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    }
 else {
      oldHttpProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    if (properties.containsKey(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpsProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    }
 else {
      oldHttpsProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}",0.9986731534719152
129542,"private void preparModuleInit(){
  SalesforceSchemaConnection connection=temConnection;
  endPoint=connection.getWebServiceUrl();
  username=connection.getUserName();
  pwd=connection.getPassword();
  batchSize=connection.getBatchSize();
  timeOut=connection.getTimeOut();
  useHttpProxy=connection.isUseHttpProxy();
  if (useHttpProxy && endPoint.startsWith(""String_Node_Str"")) {
    useHttpsProxy=true;
  }
  useSocketProxy=connection.isUseProxy();
  proxyHost=connection.getProxyHost();
  proxyPort=connection.getProxyHost();
  proxyUsername=connection.getProxyUsername();
  proxyPassword=connection.getProxyPassword();
}","private void preparModuleInit(){
  SalesforceSchemaConnection connection=temConnection;
  endPoint=connection.getWebServiceUrl();
  username=connection.getUserName();
  pwd=connection.getPassword();
  batchSize=connection.getBatchSize();
  timeOut=connection.getTimeOut();
  useHttpProxy=connection.isUseHttpProxy();
  if (useHttpProxy && endPoint.startsWith(""String_Node_Str"")) {
    useHttpsProxy=true;
  }
  useSocketProxy=connection.isUseProxy();
  proxyHost=connection.getProxyHost();
  proxyPort=connection.getProxyPort();
  proxyUsername=connection.getProxyUsername();
  proxyPassword=connection.getProxyPassword();
}",0.9951923076923076
129543,"public void resetAllProxy(){
  Properties properties=System.getProperties();
  if (properties.contains(SalesforceModuleParseAPI.SOCKS_PROXY_HOST) && oldSocksProxySet) {
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
  }
  if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_SET) && ""String_Node_Str"".equals(oldHttpProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,oldHttpProxySet);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
  }
  if (properties.contains(SalesforceModuleParseAPI.HTTPS_PROXY_SET) && ""String_Node_Str"".equals(oldHttpsProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,oldHttpsProxySet);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
  }
}","public void resetAllProxy(){
  Properties properties=System.getProperties();
  if (properties.containsKey(SalesforceModuleParseAPI.SOCKS_PROXY_HOST) && oldSocksProxySet) {
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
    properties.remove(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
  }
  if (properties.containsKey(SalesforceModuleParseAPI.HTTP_PROXY_SET) && ""String_Node_Str"".equals(oldHttpProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,oldHttpProxySet);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
  }
  if (properties.containsKey(SalesforceModuleParseAPI.HTTPS_PROXY_SET) && ""String_Node_Str"".equals(oldHttpsProxySet)) {
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,oldHttpsProxySet);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,oldProxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,oldProxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,oldProxyUser);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,oldProxyPwd);
  }
 else {
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
    properties.remove(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
  }
}",0.9981740718198416
129544,"public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  if (socksProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.SOCKS_PROXY_HOST)) {
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
      oldSocksProxySet=true;
    }
 else {
      oldSocksProxySet=false;
    }
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    }
 else {
      oldHttpProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpsProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    }
 else {
      oldHttpsProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}","public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  if (socksProxy && proxyHost != null && proxyPort != null) {
    if (properties.containsKey(SalesforceModuleParseAPI.SOCKS_PROXY_HOST)) {
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
      oldSocksProxySet=true;
    }
 else {
      oldSocksProxySet=false;
    }
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    if (properties.containsKey(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    }
 else {
      oldHttpProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    if (properties.containsKey(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpsProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    }
 else {
      oldHttpsProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}",0.9986731534719152
129545,"private void preparModuleInit(){
  SalesforceSchemaConnection connection=temConnection;
  endPoint=connection.getWebServiceUrl();
  username=connection.getUserName();
  pwd=connection.getPassword();
  batchSize=connection.getBatchSize();
  timeOut=connection.getTimeOut();
  useHttpProxy=connection.isUseHttpProxy();
  if (useHttpProxy && endPoint.startsWith(""String_Node_Str"")) {
    useHttpsProxy=true;
  }
  useSocketProxy=connection.isUseProxy();
  proxyHost=connection.getProxyHost();
  proxyPort=connection.getProxyHost();
  proxyUsername=connection.getProxyUsername();
  proxyPassword=connection.getProxyPassword();
}","private void preparModuleInit(){
  SalesforceSchemaConnection connection=temConnection;
  endPoint=connection.getWebServiceUrl();
  username=connection.getUserName();
  pwd=connection.getPassword();
  batchSize=connection.getBatchSize();
  timeOut=connection.getTimeOut();
  useHttpProxy=connection.isUseHttpProxy();
  if (useHttpProxy && endPoint.startsWith(""String_Node_Str"")) {
    useHttpsProxy=true;
  }
  useSocketProxy=connection.isUseProxy();
  proxyHost=connection.getProxyHost();
  proxyPort=connection.getProxyPort();
  proxyUsername=connection.getProxyUsername();
  proxyPassword=connection.getProxyPassword();
}",0.9951923076923076
129546,"public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
    if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.IBMDB2ZOS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.TERADATA.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.TERADATA.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.SAS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.SAS.getXmlName());
    }
  }
  return dbMetaData;
}","public static DatabaseMetaData getConnectionMetadata(java.sql.Connection conn) throws SQLException {
  DatabaseMetaData dbMetaData=conn.getMetaData();
  if (dbMetaData != null && dbMetaData.getDatabaseProductName() != null) {
    if (""String_Node_Str"".equals(conn.getClass().getName())) {
      dbMetaData=createJtdsDatabaseMetaData(conn);
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.IBMDB2ZOS.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.TERADATA.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.TERADATA.getXmlName());
    }
 else     if (dbMetaData.getDatabaseProductName().equals(EDatabaseTypeName.SAS.getXmlName())) {
      getDatabaseMetaData(conn,EDatabaseTypeName.SAS.getXmlName());
    }
  }
  return dbMetaData;
}",0.925089179548157
129547,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (!tdqRepService.removeAliasInSQLExplorer(child)) {
            MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
            try {
              factory.saveProject(ProjectManager.getInstance().getCurrentProject());
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
            return;
          }
        }
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (!PluginChecker.isOnlyTopLoaded()) {
    RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
    IRepositoryView view=getViewPart();
    if (view != null) {
      view.refresh();
    }
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (!tdqRepService.removeAliasInSQLExplorer(child)) {
            MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
            try {
              factory.saveProject(ProjectManager.getInstance().getCurrentProject());
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
            return;
          }
        }
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9647630619684082
129548,"public void renameFolder(ERepositoryObjectType type,IPath sourcePath,String label) throws PersistenceException {
  IPath targetPath=sourcePath.removeLastSegments(1);
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
  String completeNewPath;
  if (targetPath.isEmpty()) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,label);
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,childrens[i]);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","public void renameFolder(final ERepositoryObjectType type,final IPath sourcePath,final String label) throws PersistenceException {
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        IPath targetPath=sourcePath.removeLastSegments(1);
        Project project=getRepositoryContext().getProject();
        IProject fsProject=ResourceModelUtils.getProject(project);
        String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
        String completeNewPath;
        if (targetPath.isEmpty()) {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
        }
 else {
          completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
        }
        if (completeNewPath.equals(completeOldPath)) {
          return;
        }
        IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
        FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
        FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
        if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
          IPath path=new Path(sourcePath.toString());
          ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
          emfFolder=folderHelper.getFolder(completeOldPath);
        }
        createFolder(getRepositoryContext().getProject(),type,targetPath,label);
        FolderItem newFolder=folderHelper.getFolder(completeNewPath);
        Item[] childrens=(Item[])emfFolder.getChildren().toArray();
        for (int i=0; i < childrens.length; i++) {
          if (childrens[i] instanceof FolderItem) {
            FolderItem children=(FolderItem)childrens[i];
            moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
          }
 else {
            moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,childrens[i]);
          }
        }
        List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
        for (        IRepositoryViewObject object : serializableFromFolder) {
          List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
          for (          Resource resource : affectedResources) {
            IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
            xmiResourceManager.moveResource(resource,path);
          }
        }
        deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
        xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
      }
 catch (      PersistenceException e) {
        throw new CoreException(new org.eclipse.core.runtime.Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),""String_Node_Str"",e));
      }
    }
  }
;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new PersistenceException(e.getCause());
  }
}",0.8359082777687429
129549,"private IMetadataTable getMetadataTableBySalesforceServerAPI(final String endPoint,final String user,final String pass,final String timeOut,final String moduleName,final String proxy,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (user == null || pass == null || user.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  if (!salesforceAPI.isLogin()) {
    try {
      ArrayList loginList=salesforceAPI.login(endPoint,user,pass,timeOut);
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
 else {
          bindingPartner=new SforceServiceStub(endPoint);
        }
      }
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  salesforceAPI.fetchMetaDataColumns(moduleName);
  salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  if (salesforceAPI.getCurrentMetadataColumns() == null) {
    return null;
  }
  metadataTable.setListColumns(salesforceAPI.getCurrentMetadataColumns());
  return metadataTable;
}","private IMetadataTable getMetadataTableBySalesforceServerAPI(final String endPoint,final String user,final String pass,final String timeOut,final String moduleName,final String proxy,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (user == null || pass == null || user.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  if (!salesforceAPI.isLogin()) {
    try {
      ArrayList loginList=salesforceAPI.login(endPoint,user,pass,timeOut);
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
 else {
          bindingPartner=new SforceServiceStub(endPoint);
        }
      }
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  salesforceAPI.fetchMetaDataColumns(moduleName);
  salesforceAPI.resetAllProxy();
  if (salesforceAPI.getCurrentMetadataColumns() == null) {
    return null;
  }
  metadataTable.setListColumns(salesforceAPI.getCurrentMetadataColumns());
  return metadataTable;
}",0.9141583054626532
129550,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (salesforceAPI == null) {
    try {
      salesforceAPI=new SalesforceModuleParseAPI();
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  try {
    ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
    if (loginList != null) {
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
        if (loginList.get(i) instanceof SforceServiceStub) {
          bindingPartner=(SforceServiceStub)loginList.get(i);
        }
      }
    }
    salesforceAPI.setLogin(true);
  }
 catch (  Throwable e) {
    errors.add(e.getMessage());
    ExceptionHandler.process(e);
  }
 finally {
    salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  }
  monitor.done();
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (salesforceAPI == null) {
    try {
      salesforceAPI=new SalesforceModuleParseAPI();
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  try {
    ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
    if (loginList != null) {
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
        if (loginList.get(i) instanceof SforceServiceStub) {
          bindingPartner=(SforceServiceStub)loginList.get(i);
        }
      }
    }
    salesforceAPI.setLogin(true);
  }
 catch (  Throwable e) {
    errors.add(e.getMessage());
    ExceptionHandler.process(e);
  }
 finally {
    salesforceAPI.resetAllProxy();
  }
  monitor.done();
}",0.9108322324966976
129551,"protected SalesforceModuleParseAPI checkSalesfoceLogin(final String proxy,final String endPoint,final String username,final String password,final String timeOut,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  final List<String> errors=new ArrayList<String>();
  salesforceAPI.setLogin(false);
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (salesforceAPI == null) {
          try {
            salesforceAPI=new SalesforceModuleParseAPI();
          }
 catch (          Throwable e) {
            ExceptionHandler.process(e);
          }
        }
        boolean socksProxy=false;
        boolean httpProxy=false;
        boolean httpsProxy=false;
        if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
          socksProxy=true;
        }
        if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
          if (endPoint.startsWith(""String_Node_Str"")) {
            httpsProxy=true;
          }
 else {
            httpProxy=true;
          }
        }
        salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
        salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
        try {
          ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
          if (loginList != null) {
            for (int i=0; i < loginList.size(); i++) {
              if (loginList.get(i) instanceof SoapBindingStub) {
                binding=(SoapBindingStub)loginList.get(i);
              }
              if (loginList.get(i) instanceof SforceServiceStub) {
                bindingPartner=(SforceServiceStub)loginList.get(i);
              }
            }
          }
          salesforceAPI.setLogin(true);
        }
 catch (        Throwable e) {
          errors.add(e.getMessage());
          ExceptionHandler.process(e);
        }
 finally {
          salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e2) {
    ExceptionHandler.process(e2);
  }
  if (salesforceAPI.isLogin()) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String error=errors.size() > 0 ? errors.get(0) : ""String_Node_Str"";
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,error);
  }
  return salesforceAPI;
}","protected SalesforceModuleParseAPI checkSalesfoceLogin(final String proxy,final String endPoint,final String username,final String password,final String timeOut,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  final List<String> errors=new ArrayList<String>();
  salesforceAPI.setLogin(false);
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (salesforceAPI == null) {
          try {
            salesforceAPI=new SalesforceModuleParseAPI();
          }
 catch (          Throwable e) {
            ExceptionHandler.process(e);
          }
        }
        boolean socksProxy=false;
        boolean httpProxy=false;
        boolean httpsProxy=false;
        if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
          socksProxy=true;
        }
        if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
          if (endPoint.startsWith(""String_Node_Str"")) {
            httpsProxy=true;
          }
 else {
            httpProxy=true;
          }
        }
        salesforceAPI.resetAllProxy();
        salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
        try {
          ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
          if (loginList != null) {
            for (int i=0; i < loginList.size(); i++) {
              if (loginList.get(i) instanceof SoapBindingStub) {
                binding=(SoapBindingStub)loginList.get(i);
              }
              if (loginList.get(i) instanceof SforceServiceStub) {
                bindingPartner=(SforceServiceStub)loginList.get(i);
              }
            }
          }
          salesforceAPI.setLogin(true);
        }
 catch (        Throwable e) {
          errors.add(e.getMessage());
          ExceptionHandler.process(e);
        }
 finally {
          salesforceAPI.resetAllProxy();
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e2) {
    ExceptionHandler.process(e2);
  }
  if (salesforceAPI.isLogin()) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String error=errors.size() > 0 ? errors.get(0) : ""String_Node_Str"";
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,error);
  }
  return salesforceAPI;
}",0.9600688468158348
129552,"public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  this.socksProxy=false;
  this.httpProxy=false;
  this.httpsProxy=false;
  if (socksProxy && proxyHost != null && proxyPort != null) {
    this.socksProxy=true;
    oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    this.httpProxy=true;
    oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
    oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
    oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
    oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
    oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    this.httpsProxy=true;
    oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
    oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
    oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
    oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
    oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}","public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  if (socksProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.SOCKS_PROXY_HOST)) {
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
      oldSocksProxySet=true;
    }
 else {
      oldSocksProxySet=false;
    }
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    }
 else {
      oldHttpProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpsProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    }
 else {
      oldHttpsProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}",0.5168365770775409
129553,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (table.getItemCount() > 0) {
      table.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(getIMetadataConnection());
        if (true) {
          itemTableName=connectFromCustomModuleName();
          if (itemTableName.size() <= 0) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (table.getItemCount() > 0) {
      table.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(getIMetadataConnection());
        String proxy=null;
        if (temConnection.isUseProxy()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (temConnection.isUseHttpProxy()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        itemTableName=connectFromCustomModuleName(proxy);
        if (itemTableName.size() <= 0) {
          if (displayMessageBox) {
            openInfoDialogInUIThread(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),true);
          }
        }
 else {
          createAllItems(displayMessageBox,null);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.7171102661596959
129554,"public List<String> connectFromCustomModuleName(){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  try {
    salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
    salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
    salesforceAPI.login(endPoint,username,pwd,timeOut);
    ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
    if (currentAPI instanceof SalesforceModuleParseEnterprise) {
      describeGlobalResult=describeGlobal();
      if (describeGlobalResult != null) {
        types=describeGlobalResult.getTypes();
      }
    }
 else {
      if (currentAPI instanceof SalesforceModuleParserPartner) {
        SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
        SforceManagementImpl sforceManagement=partner.getSforceManagement();
        SessionHeader sessionHeader=sforceManagement.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}","public List<String> connectFromCustomModuleName(String proxy){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  try {
    salesforceAPI.resetAllProxy();
    salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
    salesforceAPI.login(endPoint,username,pwd,timeOut);
    ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
    if (currentAPI instanceof SalesforceModuleParseEnterprise) {
      describeGlobalResult=describeGlobal();
      if (describeGlobalResult != null) {
        types=describeGlobalResult.getTypes();
      }
    }
 else {
      if (currentAPI instanceof SalesforceModuleParserPartner) {
        SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
        SforceManagementImpl sforceManagement=partner.getSforceManagement();
        SessionHeader sessionHeader=sforceManagement.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetAllProxy();
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}",0.5310331152092008
129555,"@Override public String getLabel(){
  if (getProject() != null) {
    return getProject().getLabel();
  }
  return super.getLabel();
}","@Override public String getLabel(){
  if (getProject() != null) {
    String urlBranch=null;
    if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
      urlBranch=showSVNRoot();
    }
    return getProject().getLabel() + (urlBranch != null && !""String_Node_Str"".equals(urlBranch) ? '(' + urlBranch + ')' : ""String_Node_Str"");
  }
  return super.getLabel();
}",0.458252427184466
129556,"public boolean getMergeRefProject(){
  IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
  this.mergeRefProject=preferenceStore.getBoolean(IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT);
  return this.mergeRefProject;
}","public boolean getMergeRefProject(){
  IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
  return preferenceStore.getBoolean(IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT);
}",0.8674157303370786
129557,"public RepositoryNode getRootRepositoryNode(ERepositoryObjectType type){
  if (type == null) {
    return null;
  }
  String typeName=type.name();
  if (repositoryNodeMap.containsKey(typeName)) {
    return repositoryNodeMap.get(typeName);
  }
  return null;
}","@Override public RepositoryNode getRootRepositoryNode(ERepositoryObjectType type){
  if (type == null) {
    return null;
  }
  String typeName=type.name();
  if (repositoryNodeMap.containsKey(typeName)) {
    return repositoryNodeMap.get(typeName);
  }
  return null;
}",0.981132075471698
129558,"public RepositoryNode getRecBinNode(){
  return this.recBinNode;
}","@Override public RepositoryNode getRecBinNode(){
  return this.recBinNode;
}",0.9295774647887324
129559,"public org.talend.core.model.general.Project getProject(){
  return this.project;
}","@Override public org.talend.core.model.general.Project getProject(){
  return this.project;
}",0.9431818181818182
129560,"public void resetUniservLibraries(){
  ILibraryManagerService libManager=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String jarNeeded=""String_Node_Str"";
  if (libManager.contains(jarNeeded)) {
    Bundle bundle=Platform.getBundle(""String_Node_Str"");
    if (bundle instanceof BundleHost) {
      BundleHost bundleHost=(BundleHost)bundle;
      final BundleData bundleData=bundleHost.getBundleData();
      if (bundleData instanceof BaseData) {
        BaseData baseData=(BaseData)bundleData;
        final BundleFile bundleFile=baseData.getBundleFile();
        final File baseFile=bundleFile.getBaseFile();
        libManager.retrieve(jarNeeded,baseFile.getAbsolutePath(),new NullProgressMonitor());
      }
    }
  }
}","public void resetUniservLibraries(){
  ILibraryManagerService libManager=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String jarNeeded=""String_Node_Str"";
  if (libManager.contains(jarNeeded)) {
    Bundle bundle=Platform.getBundle(""String_Node_Str"");
    if (bundle instanceof BundleHost) {
      BundleHost bundleHost=(BundleHost)bundle;
      final BundleData bundleData=bundleHost.getBundleData();
      if (bundleData instanceof BaseData) {
        BaseData baseData=(BaseData)bundleData;
        final BundleFile bundleFile=baseData.getBundleFile();
        final File baseFile=bundleFile.getBaseFile();
        File jarFile=new File(baseFile.getAbsolutePath(),jarNeeded);
        if (jarFile.exists()) {
          return;
        }
        libManager.retrieve(jarNeeded,baseFile.getAbsolutePath(),new NullProgressMonitor());
      }
    }
  }
}",0.9235328986366332
129561,"public WebDriver setFirefox(){
  logger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"").trim());
  if (null == System.getProperty(""String_Node_Str"") || ""String_Node_Str"".equals(System.getProperty(""String_Node_Str"").trim()) || System.getProperty(""String_Node_Str"").trim().contains(""String_Node_Str"")) {
  }
 else {
    System.setProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"").trim());
  }
  FirefoxProfile firefoxProfile=new FirefoxProfile();
  firefoxProfile.setPreference(""String_Node_Str"",2);
  firefoxProfile.setPreference(""String_Node_Str"",false);
  firefoxProfile.setPreference(""String_Node_Str"",this.getAbsoluteFolderPath(""String_Node_Str""));
  firefoxProfile.setPreference(""String_Node_Str"",""String_Node_Str"");
  firefoxProfile.setPreference(""String_Node_Str"",0);
  firefoxProfile.setPreference(""String_Node_Str"",0);
  firefoxProfile.setPreference(""String_Node_Str"",false);
  logger.info(""String_Node_Str"" + firefoxProfile.areNativeEventsEnabled());
  return new FirefoxDriver(firefoxProfile);
}","public WebDriver setFirefox(){
  logger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  if (null == System.getProperty(""String_Node_Str"") || ""String_Node_Str"".equals(System.getProperty(""String_Node_Str"").trim()) || System.getProperty(""String_Node_Str"").trim().contains(""String_Node_Str"")) {
  }
 else {
    System.setProperty(""String_Node_Str"",System.getProperty(""String_Node_Str"").trim());
  }
  FirefoxProfile firefoxProfile=new FirefoxProfile();
  firefoxProfile.setPreference(""String_Node_Str"",2);
  firefoxProfile.setPreference(""String_Node_Str"",false);
  firefoxProfile.setPreference(""String_Node_Str"",this.getAbsoluteFolderPath(""String_Node_Str""));
  firefoxProfile.setPreference(""String_Node_Str"",""String_Node_Str"");
  firefoxProfile.setPreference(""String_Node_Str"",0);
  firefoxProfile.setPreference(""String_Node_Str"",0);
  firefoxProfile.setPreference(""String_Node_Str"",false);
  logger.info(""String_Node_Str"" + firefoxProfile.areNativeEventsEnabled());
  return new FirefoxDriver(firefoxProfile);
}",0.9966068831798351
129562,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
    EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
    EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
    if (PluginChecker.isTDQLoaded()) {
      saveMetaData();
      ITDQRepositoryService tdqRepositoryService=null;
      boolean needUpdateAnalysis=false;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
      }
      if (tdqRepositoryService != null && needUpdateAnalysis) {
        if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
          return true;
        }
      }
      generateOriginalColumnsMap(dataPackageFromOrignalConnection);
      Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
      ConnectionHelper.addPackages(copyDataPackage,connection);
      replaceUUidsForColumnsAndTables(copyDataPackage);
      saveMetaData();
      if (tdqRepositoryService != null && needUpdateAnalysis) {
        tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
      }
    }
 else {
      Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
      ConnectionHelper.addPackages(copyDataPackage,connection);
      saveMetaData();
    }
    RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
    closeLockStrategy();
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
    temConnection=null;
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.8940410819605451
129563,"@Override protected void init(){
  super.init();
  updateNavigatorContentState();
}","@Override protected void init(){
  super.init();
}",0.7518796992481203
129564,"protected String[] getExtensionIdsToActivate(String perspectiveId){
  if (perspectiveFilterExtensionsReader == null) {
    perspectiveFilterExtensionsReader=new PerspectiveFilterRegistryReader(getActionProviderId());
    perspectiveFilterExtensionsReader.readRegistry();
  }
  INavigatorContentService contentService=getNavigatorContentService();
  String[] filteredIds=perspectiveFilterExtensionsReader.getContentProviderFilteredIds(contentService,perspectiveId);
  return RepositoryNodeFilterHelper.filterRemovedNavigatorContents(filteredIds);
}","protected String[] getExtensionIdsToActivate(String perspectiveId){
  if (perspectiveFilterExtensionsReader == null) {
    perspectiveFilterExtensionsReader=new PerspectiveFilterRegistryReader(getActionProviderId());
    perspectiveFilterExtensionsReader.readRegistry();
  }
  INavigatorContentService contentService=getNavigatorContentService();
  String[] filteredIds=perspectiveFilterExtensionsReader.getContentProviderFilteredIds(contentService,perspectiveId);
  return filteredIds;
}",0.9333333333333332
129565,"/** 
 * filter on the given perspective
 * @param perspectiveId
 * @param restoring
 */
private void filterView(String perspectiveId,boolean restoring){
  refreshNavigatorContents(getExtensionIdsToActivate(perspectiveId),restoring);
}","/** 
 * filter on the given perspective
 * @param perspectiveId
 * @param restoring
 */
private void filterView(String perspectiveId,boolean restoring){
  refreshNavigatorContents(RepositoryNodeFilterHelper.filterRemovedNavigatorContents(getExtensionIdsToActivate(perspectiveId)),restoring);
}",0.888045540796964
129566,"/** 
 * DOC ycbai Comment method ""getExtensionIdsNeedRemove"".
 * @param visibleExtensionIds
 * @return
 */
public static List<String> getExtensionIdsNeedRemove(String[] visibleExtensionIds){
  String REMOVE_FLAG=""String_Node_Str"";
  List<String> extensionIds=Arrays.asList(visibleExtensionIds);
  List<String> needRemovedExtensionIds=new ArrayList<String>();
  for (  String extensionId : extensionIds) {
    if (extensionId != null && extensionId.toLowerCase().endsWith(REMOVE_FLAG)) {
      needRemovedExtensionIds.add(extensionId);
      String realExtensionId=extensionId.substring(0,extensionId.lastIndexOf(REMOVE_FLAG));
      if (extensionIds.contains(realExtensionId)) {
        needRemovedExtensionIds.add(realExtensionId);
      }
    }
  }
  return needRemovedExtensionIds;
}","/** 
 * DOC ycbai Comment method ""getExtensionIdsNeedRemove"".
 * @param visibleExtensionIds
 * @return
 */
public static List<String> getExtensionIdsNeedRemove(String[] visibleExtensionIds){
  List<String> extensionIds=Arrays.asList(visibleExtensionIds);
  List<String> needRemovedExtensionIds=new ArrayList<String>();
  for (  String extensionId : extensionIds) {
    addRemoveExtensionId(extensionIds,needRemovedExtensionIds,extensionId,""String_Node_Str"");
    addRemoveExtensionId(extensionIds,needRemovedExtensionIds,extensionId,""String_Node_Str"");
  }
  return needRemovedExtensionIds;
}",0.5805515239477503
129567,"private static void processContentExtensions(final CommonViewer commonViewer,boolean activeFilter,boolean activedPerspectiveFilter){
  final INavigatorContentService contentService=commonViewer.getNavigatorContentService();
  String[] visibleExtensionIds=filterRemovedNavigatorContents(contentService.getVisibleExtensionIds());
  List<String> visibleIDsForPecpective=new ArrayList<String>();
  List<String> visibleIdsForActiveFilter=new ArrayList<String>();
  if (visibleExtensionIds != null) {
    visibleIdsForActiveFilter.addAll(Arrays.asList(visibleExtensionIds));
  }
  if (activedPerspectiveFilter) {
    String perspectiveId=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective().getId();
    PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
    helper.setTreeViewer(commonViewer);
    helper.setNavigatorContentService(contentService);
    helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
    String[] pvExtensions=helper.getExtensionIdsToActivate(perspectiveId);
    if (pvExtensions != null && pvExtensions.length > 0) {
      visibleIDsForPecpective=Arrays.asList(pvExtensions);
    }
    visibleIdsForActiveFilter.retainAll(visibleIDsForPecpective);
  }
  String[] filteredContents=RepositoryNodeFilterHelper.getFilterByNodeValues();
  List<String> filteredContentsList=new ArrayList<String>();
  if (filteredContents != null) {
    filteredContentsList=Arrays.asList(filteredContents);
  }
  List<String> checkedExtensions=new ArrayList<String>();
  if (activeFilter) {
    for (    String id : visibleIdsForActiveFilter) {
      if (!filteredContentsList.contains(id)) {
        checkedExtensions.add(id);
      }
    }
  }
 else {
    checkedExtensions.addAll(visibleIdsForActiveFilter);
  }
  String[] contentExtensionIdsToActivate=(String[])checkedExtensions.toArray(new String[checkedExtensions.size()]);
  UpdateActiveExtensionsOperation updateExtensions=new UpdateActiveExtensionsOperation(commonViewer,contentExtensionIdsToActivate);
  updateExtensions.execute(null,null);
}","private static void processContentExtensions(final CommonViewer commonViewer,boolean activeFilter,boolean activedPerspectiveFilter){
  final INavigatorContentService contentService=commonViewer.getNavigatorContentService();
  String[] visibleExtensionIds=contentService.getVisibleExtensionIds();
  List<String> visibleIDsForPecpective=new ArrayList<String>();
  List<String> visibleIdsForActiveFilter=new ArrayList<String>();
  if (visibleExtensionIds != null) {
    visibleIdsForActiveFilter.addAll(Arrays.asList(visibleExtensionIds));
  }
  if (activedPerspectiveFilter) {
    String perspectiveId=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective().getId();
    PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
    helper.setTreeViewer(commonViewer);
    helper.setNavigatorContentService(contentService);
    helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
    String[] pvExtensions=helper.getExtensionIdsToActivate(perspectiveId);
    if (pvExtensions != null && pvExtensions.length > 0) {
      visibleIDsForPecpective=Arrays.asList(pvExtensions);
    }
    visibleIdsForActiveFilter.retainAll(visibleIDsForPecpective);
  }
  String[] filteredContents=RepositoryNodeFilterHelper.getFilterByNodeValues();
  List<String> filteredContentsList=new ArrayList<String>();
  if (filteredContents != null) {
    filteredContentsList=Arrays.asList(filteredContents);
  }
  List<String> checkedExtensions=new ArrayList<String>();
  if (activeFilter) {
    for (    String id : visibleIdsForActiveFilter) {
      if (!filteredContentsList.contains(id)) {
        checkedExtensions.add(id);
      }
    }
  }
 else {
    checkedExtensions.addAll(visibleIdsForActiveFilter);
  }
  String[] contentExtensionIdsToActivate=(String[])checkedExtensions.toArray(new String[checkedExtensions.size()]);
  UpdateActiveExtensionsOperation updateExtensions=new UpdateActiveExtensionsOperation(commonViewer,contentExtensionIdsToActivate);
  updateExtensions.execute(null,null);
}",0.9921491658488716
129568,"protected IRepositoryView getRepView(){
  if (realRepView == null) {
    realRepView=RepositoryManagerHelper.findRepositoryView();
  }
  return realRepView;
}","protected IRepositoryView getRepView(){
  if (realRepView == null) {
    realRepView=RepositoryManagerHelper.findRepositoryView();
  }
  if (realRepView == null) {
    realRepView=RepositoryManagerHelper.getRepositoryView();
    if (realRepView != null && realRepView instanceof RepoViewCommonNavigator) {
      ((RepoViewCommonNavigator)realRepView).getCommonViewer().expandToLevel(2);
    }
  }
  return realRepView;
}",0.4878892733564013
129569,"public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  IProject fsProject=ResourceModelUtils.getProject(getRepositoryContext().getProject());
  String completePath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + path.toString();
  IFolder folder=ResourceUtils.getFolder(fsProject,completePath,false);
  IPath targetPath=new Path(label);
  getFolderHelper(getRepositoryContext().getProject().getEmfProject()).renameFolder(completePath,label);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
  if (folder.exists()) {
    ResourceUtils.moveResource(folder,targetPath);
  }
}","public void renameFolder(ERepositoryObjectType type,IPath sourcePath,String label) throws PersistenceException {
  IPath targetPath=sourcePath.removeLastSegments(1);
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toPortableString();
  String completeNewPath;
  if (targetPath.isEmpty()) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + label;
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ label;
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,label);
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(newFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,childrens[i]);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.2224247948951686
129570,"public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      emfFolder.getChildren().remove(childrens[i]);
      newFolder.getChildren().add(childrens[i]);
      childrens[i].setParent(newFolder);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(childrens[i].getProperty());
      for (      Resource resource : affectedResources) {
        IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
        Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(resource);
        List<Resource> needSaves=new ArrayList<Resource>();
        for (        EObject object : find.keySet()) {
          Resource re=object.eResource();
          if (re == null) {
            continue;
          }
          EcoreUtil.resolveAll(re);
          needSaves.add(re);
        }
        xmiResourceManager.moveResource(resource,path);
        AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
        if (resChangeService != null) {
          for (          Resource toSave : needSaves) {
            resChangeService.saveResourceByEMFShared(toSave);
          }
        }
      }
      affectedResources=xmiResourceManager.getAffectedResources(childrens[i].getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}","public void moveFolder(ERepositoryObjectType type,IPath sourcePath,IPath targetPath) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(sourcePath.toString()) || RepositoryConstants.isSystemFolder(targetPath.toString())) {
    return;
  }
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completeOldPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.toString();
  String completeNewPath;
  if (targetPath.equals(""String_Node_Str"")) {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + sourcePath.lastSegment();
  }
 else {
    completeNewPath=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString()+ IPath.SEPARATOR+ sourcePath.lastSegment();
  }
  if (completeNewPath.equals(completeOldPath)) {
    return;
  }
  IFolder folder=ResourceUtils.getFolder(fsProject,completeOldPath,false);
  FolderHelper folderHelper=getFolderHelper(getRepositoryContext().getProject().getEmfProject());
  FolderItem emfFolder=folderHelper.getFolder(completeOldPath);
  if (emfFolder == null && (type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC)) {
    IPath path=new Path(sourcePath.toString());
    ProxyRepositoryFactory.getInstance().createParentFoldersRecursively(project,type,path);
    emfFolder=folderHelper.getFolder(completeOldPath);
  }
  createFolder(getRepositoryContext().getProject(),type,targetPath,emfFolder.getProperty().getLabel());
  FolderItem newFolder=folderHelper.getFolder(completeNewPath);
  Item[] childrens=(Item[])emfFolder.getChildren().toArray();
  for (int i=0; i < childrens.length; i++) {
    if (childrens[i] instanceof FolderItem) {
      FolderItem children=(FolderItem)childrens[i];
      moveFolder(type,sourcePath.append(children.getProperty().getLabel()),targetPath.append(emfFolder.getProperty().getLabel()));
    }
 else {
      moveOldContentToNewFolder(project,completeNewPath,emfFolder,newFolder,childrens[i]);
    }
  }
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(project,folder,null,type,true,true,true,false);
  for (  IRepositoryViewObject object : serializableFromFolder) {
    List<Resource> affectedResources=xmiResourceManager.getAffectedResources(object.getProperty());
    for (    Resource resource : affectedResources) {
      IPath path=getPhysicalProject(project).getFullPath().append(completeNewPath).append(resource.getURI().lastSegment());
      xmiResourceManager.moveResource(resource,path);
    }
  }
  deleteFolder(getRepositoryContext().getProject(),type,sourcePath);
  xmiResourceManager.saveResource(getRepositoryContext().getProject().getEmfProject().eResource());
}",0.7850494473531123
129571,"/** 
 * Looks up the <code>IContextParameter</code> from context list by the specified parameters.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private IContextParameter lookupContextParameter(String sourceId,String contextParaName,int index){
  List<IContext> contextList=parentModel.getContexts();
  IContext context=contextList.get(index);
  List<IContextParameter> list=context.getContextParameterList();
  if (list != null && list.size() > 0) {
    for (    IContextParameter contextPara : list) {
      String tempSourceId=contextPara.getSource();
      String tempContextParaName=contextPara.getName();
      if (tempSourceId.equals(sourceId) && tempContextParaName.equals(contextParaName)) {
        return contextPara;
      }
    }
  }
  return null;
}","/** 
 * Looks up the <code>IContextParameter</code> from context list by the specified parameters.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private IContextParameter lookupContextParameter(String sourceId,String contextParaName,int index){
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (index < size) {
    IContext context=contextList.get(index);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempSourceId=contextPara.getSource();
        String tempContextParaName=contextPara.getName();
        if (tempSourceId.equals(sourceId) && tempContextParaName.equals(contextParaName)) {
          return contextPara;
        }
      }
    }
  }
  return null;
}",0.9322135572885424
129572,"private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else {
    List<IContext> contextList=parentModel.getContexts();
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return contextPara.getValue();
        }
      }
    }
  }
  return text;
}","private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return contextPara.getValue();
        }
      }
    }
  }
  return text;
}",0.902070509233352
129573,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() && EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataconnection.getDbType()) || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (tree.getItemCount() > 0) {
      tree.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(metadataconnection,true);
        if (managerConnection.getIsValide()) {
          if (useProvider()) {
            provider.updatePackage(metadataconnection);
          }
 else {
            updatePackage(metadataconnection);
          }
          if (ExtractMetaDataUtils.isUseAllSynonyms() || EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType())) {
            List<String> itemTableName=ExtractMetaDataFromDataBase.returnTablesFormConnection(metadataconnection,getTableInfoParameters());
            if (ExtractMetaDataUtils.isUseAllSynonyms()) {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,true);
            }
 else {
              tableNodeList=getTableNodeForAllSynonyms(itemTableName,false);
            }
          }
 else           if (useProvider()) {
            tableNodeList=provider.getTableNodeInfo(metadataconnection);
          }
 else {
            tableNodeList=getTableNodeInfo();
          }
          if (tableNodeList.isEmpty()) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),""String_Node_Str"",""String_Node_Str"",true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          parentWizardPage.getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9799643811219948
129574,"protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.useAllSynonyms && EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataconnection.getDbType())) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}","protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.useAllSynonyms) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}",0.9677881173944166
129575,"private IMetadataTable getMetadataTableBySalesforceServerAPI(final String endPoint,final String user,final String pass,final String timeOut,final String moduleName,final String proxy,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (user == null || pass == null || user.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  if (!salesforceAPI.isLogin()) {
    try {
      ArrayList loginList=salesforceAPI.login(endPoint,user,pass,timeOut);
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
 else {
          bindingPartner=new SforceServiceStub(endPoint);
        }
      }
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  salesforceAPI.fetchMetaDataColumns(moduleName);
  salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  if (salesforceAPI.getCurrentMetadataColumns() == null) {
    return null;
  }
  metadataTable.setListColumns(salesforceAPI.getCurrentMetadataColumns());
  return metadataTable;
}","private IMetadataTable getMetadataTableBySalesforceServerAPI(final String endPoint,final String user,final String pass,final String timeOut,final String moduleName,final String proxy,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (user == null || pass == null || user.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  if (!salesforceAPI.isLogin()) {
    try {
      ArrayList loginList=salesforceAPI.login(endPoint,user,pass,timeOut);
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
 else {
          bindingPartner=new SforceServiceStub(endPoint);
        }
      }
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  salesforceAPI.fetchMetaDataColumns(moduleName);
  salesforceAPI.resetAllProxy();
  if (salesforceAPI.getCurrentMetadataColumns() == null) {
    return null;
  }
  metadataTable.setListColumns(salesforceAPI.getCurrentMetadataColumns());
  return metadataTable;
}",0.9141583054626532
129576,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (salesforceAPI == null) {
    try {
      salesforceAPI=new SalesforceModuleParseAPI();
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  try {
    ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
    if (loginList != null) {
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
        if (loginList.get(i) instanceof SforceServiceStub) {
          bindingPartner=(SforceServiceStub)loginList.get(i);
        }
      }
    }
    salesforceAPI.setLogin(true);
  }
 catch (  Throwable e) {
    errors.add(e.getMessage());
    ExceptionHandler.process(e);
  }
 finally {
    salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
  }
  monitor.done();
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (salesforceAPI == null) {
    try {
      salesforceAPI=new SalesforceModuleParseAPI();
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  try {
    ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
    if (loginList != null) {
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
        if (loginList.get(i) instanceof SforceServiceStub) {
          bindingPartner=(SforceServiceStub)loginList.get(i);
        }
      }
    }
    salesforceAPI.setLogin(true);
  }
 catch (  Throwable e) {
    errors.add(e.getMessage());
    ExceptionHandler.process(e);
  }
 finally {
    salesforceAPI.resetAllProxy();
  }
  monitor.done();
}",0.9108322324966976
129577,"protected SalesforceModuleParseAPI checkSalesfoceLogin(final String proxy,final String endPoint,final String username,final String password,final String timeOut,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  final List<String> errors=new ArrayList<String>();
  salesforceAPI.setLogin(false);
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (salesforceAPI == null) {
          try {
            salesforceAPI=new SalesforceModuleParseAPI();
          }
 catch (          Throwable e) {
            ExceptionHandler.process(e);
          }
        }
        boolean socksProxy=false;
        boolean httpProxy=false;
        boolean httpsProxy=false;
        if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
          socksProxy=true;
        }
        if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
          if (endPoint.startsWith(""String_Node_Str"")) {
            httpsProxy=true;
          }
 else {
            httpProxy=true;
          }
        }
        salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
        salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
        try {
          ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
          if (loginList != null) {
            for (int i=0; i < loginList.size(); i++) {
              if (loginList.get(i) instanceof SoapBindingStub) {
                binding=(SoapBindingStub)loginList.get(i);
              }
              if (loginList.get(i) instanceof SforceServiceStub) {
                bindingPartner=(SforceServiceStub)loginList.get(i);
              }
            }
          }
          salesforceAPI.setLogin(true);
        }
 catch (        Throwable e) {
          errors.add(e.getMessage());
          ExceptionHandler.process(e);
        }
 finally {
          salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e2) {
    ExceptionHandler.process(e2);
  }
  if (salesforceAPI.isLogin()) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String error=errors.size() > 0 ? errors.get(0) : ""String_Node_Str"";
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,error);
  }
  return salesforceAPI;
}","protected SalesforceModuleParseAPI checkSalesfoceLogin(final String proxy,final String endPoint,final String username,final String password,final String timeOut,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  final List<String> errors=new ArrayList<String>();
  salesforceAPI.setLogin(false);
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (salesforceAPI == null) {
          try {
            salesforceAPI=new SalesforceModuleParseAPI();
          }
 catch (          Throwable e) {
            ExceptionHandler.process(e);
          }
        }
        boolean socksProxy=false;
        boolean httpProxy=false;
        boolean httpsProxy=false;
        if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
          socksProxy=true;
        }
        if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
          if (endPoint.startsWith(""String_Node_Str"")) {
            httpsProxy=true;
          }
 else {
            httpProxy=true;
          }
        }
        salesforceAPI.resetAllProxy();
        salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
        try {
          ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
          if (loginList != null) {
            for (int i=0; i < loginList.size(); i++) {
              if (loginList.get(i) instanceof SoapBindingStub) {
                binding=(SoapBindingStub)loginList.get(i);
              }
              if (loginList.get(i) instanceof SforceServiceStub) {
                bindingPartner=(SforceServiceStub)loginList.get(i);
              }
            }
          }
          salesforceAPI.setLogin(true);
        }
 catch (        Throwable e) {
          errors.add(e.getMessage());
          ExceptionHandler.process(e);
        }
 finally {
          salesforceAPI.resetAllProxy();
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e2) {
    ExceptionHandler.process(e2);
  }
  if (salesforceAPI.isLogin()) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String error=errors.size() > 0 ? errors.get(0) : ""String_Node_Str"";
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,error);
  }
  return salesforceAPI;
}",0.9600688468158348
129578,"public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  this.socksProxy=false;
  this.httpProxy=false;
  this.httpsProxy=false;
  if (socksProxy && proxyHost != null && proxyPort != null) {
    this.socksProxy=true;
    oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    this.httpProxy=true;
    oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
    oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
    oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
    oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
    oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    this.httpsProxy=true;
    oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
    oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
    oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
    oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
    oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}","public void setProxy(String proxyHost,String proxyPort,String proxyUsername,String proxyPassword,boolean httpProxy,boolean socksProxy,boolean httpsProxy){
  Properties properties=System.getProperties();
  if (socksProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.SOCKS_PROXY_HOST)) {
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD);
      oldSocksProxySet=true;
    }
 else {
      oldSocksProxySet=false;
    }
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_USERNAME,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.SOCKS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD);
    }
 else {
      oldHttpProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTP_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
 else   if (httpsProxy && proxyHost != null && proxyPort != null) {
    if (properties.contains(SalesforceModuleParseAPI.HTTP_PROXY_HOST)) {
      oldHttpsProxySet=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_SET);
      oldProxyHost=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_HOST);
      oldProxyPort=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PORT);
      oldProxyUser=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_USER);
      oldProxyPwd=(String)properties.get(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD);
    }
 else {
      oldHttpsProxySet=""String_Node_Str"";
    }
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_SET,""String_Node_Str"");
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_HOST,proxyHost);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PORT,proxyPort);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_USER,proxyUsername == null ? ""String_Node_Str"" : proxyUsername);
    properties.put(SalesforceModuleParseAPI.HTTPS_PROXY_PASSWORD,proxyPassword == null ? ""String_Node_Str"" : proxyPassword);
  }
}",0.5168365770775409
129579,"/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (table.getItemCount() > 0) {
      table.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(getIMetadataConnection());
        if (true) {
          itemTableName=connectFromCustomModuleName();
          if (itemTableName.size() <= 0) {
            if (displayMessageBox) {
              openInfoDialogInUIThread(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),true);
            }
          }
 else {
            createAllItems(displayMessageBox,null);
          }
        }
 else         if (displayMessageBox) {
          getShell().getDisplay().asyncExec(new Runnable(){
            public void run(){
              new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
            }
          }
);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * checkConnection.
 * @param displayMessageBox
 */
protected void checkConnection(final boolean displayMessageBox){
  try {
    if (table.getItemCount() > 0) {
      table.removeAll();
    }
    parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        managerConnection.check(getIMetadataConnection());
        String proxy=null;
        if (temConnection.isUseProxy()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (temConnection.isUseHttpProxy()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        itemTableName=connectFromCustomModuleName(proxy);
        if (itemTableName.size() <= 0) {
          if (displayMessageBox) {
            openInfoDialogInUIThread(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),true);
          }
        }
 else {
          createAllItems(displayMessageBox,null);
        }
        monitor.done();
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.7171102661596959
129580,"public List<String> connectFromCustomModuleName(){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  try {
    salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
    salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
    salesforceAPI.login(endPoint,username,pwd,timeOut);
    ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
    if (currentAPI instanceof SalesforceModuleParseEnterprise) {
      describeGlobalResult=describeGlobal();
      if (describeGlobalResult != null) {
        types=describeGlobalResult.getTypes();
      }
    }
 else {
      if (currentAPI instanceof SalesforceModuleParserPartner) {
        SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
        SforceManagementImpl sforceManagement=partner.getSforceManagement();
        SessionHeader sessionHeader=sforceManagement.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetProxy(httpProxy,socksProxy,httpsProxy);
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}","public List<String> connectFromCustomModuleName(String proxy){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  try {
    salesforceAPI.resetAllProxy();
    salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
    salesforceAPI.login(endPoint,username,pwd,timeOut);
    ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
    if (currentAPI instanceof SalesforceModuleParseEnterprise) {
      describeGlobalResult=describeGlobal();
      if (describeGlobalResult != null) {
        types=describeGlobalResult.getTypes();
      }
    }
 else {
      if (currentAPI instanceof SalesforceModuleParserPartner) {
        SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
        SforceManagementImpl sforceManagement=partner.getSforceManagement();
        SessionHeader sessionHeader=sforceManagement.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetAllProxy();
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}",0.5310331152092008
129581,"/** 
 * Looks up the <code>IContextParameter</code> from context list by the specified parameters.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private IContextParameter lookupContextParameter(String sourceId,String contextParaName,int index){
  List<IContext> contextList=parentModel.getContexts();
  IContext context=contextList.get(index);
  List<IContextParameter> list=context.getContextParameterList();
  if (list != null && list.size() > 0) {
    for (    IContextParameter contextPara : list) {
      String tempSourceId=contextPara.getSource();
      String tempContextParaName=contextPara.getName();
      if (tempSourceId.equals(sourceId) && tempContextParaName.equals(contextParaName)) {
        return contextPara;
      }
    }
  }
  return null;
}","/** 
 * Looks up the <code>IContextParameter</code> from context list by the specified parameters.
 * @param sourceId
 * @param contextParaName
 * @param index
 * @return
 */
private IContextParameter lookupContextParameter(String sourceId,String contextParaName,int index){
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (index < size) {
    IContext context=contextList.get(index);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempSourceId=contextPara.getSource();
        String tempContextParaName=contextPara.getName();
        if (tempSourceId.equals(sourceId) && tempContextParaName.equals(contextParaName)) {
          return contextPara;
        }
      }
    }
  }
  return null;
}",0.9322135572885424
129582,"private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else {
    List<IContext> contextList=parentModel.getContexts();
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return contextPara.getValue();
        }
      }
    }
  }
  return text;
}","private String getColumnTextForChild(ContextTableTabChildModel child,int columnIndex){
  String text=""String_Node_Str"";
  String sourceId=child.getContextParameter().getSource();
  String variableName=child.getContextParameter().getName();
  List<IContext> contextList=parentModel.getContexts();
  int size=contextList.size();
  if (columnIndex == 0)   return child.getContextParameter().getName();
 else   if (columnIndex - 1 < size) {
    IContext context=contextList.get(columnIndex - 1);
    List<IContextParameter> list=context.getContextParameterList();
    if (list != null && list.size() > 0) {
      for (      IContextParameter contextPara : list) {
        String tempName=contextPara.getName();
        String tempSourceId=contextPara.getSource();
        if (tempName.equals(variableName) && tempSourceId.equals(sourceId)) {
          return contextPara.getValue();
        }
      }
    }
  }
  return text;
}",0.902070509233352
129583,"@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
      MessageDialog messageDialog=new MessageDialog(getShell(),""String_Node_Str"",null,""String_Node_Str"",MessageDialog.INFORMATION,new String[]{""String_Node_Str""},0);
      messageDialog.open();
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      String proxy=null;
      if (useProxyBtn.getSelection()) {
        proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
      }
 else       if (useHttpBtn.getSelection()) {
        proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
      }
      SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
      if (checkSalesfoceLogin != null) {
        setSalesforceModuleParseAPI(checkSalesfoceLogin);
        loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
      }
      if (loginOk) {
        checkFieldsValue();
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      String proxy=null;
      if (useProxyBtn.getSelection()) {
        proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
      }
 else       if (useHttpBtn.getSelection()) {
        proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
      }
      SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
      if (checkSalesfoceLogin != null) {
        setSalesforceModuleParseAPI(checkSalesfoceLogin);
        loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
      }
      if (loginOk) {
        checkFieldsValue();
      }
    }
  }
);
}",0.9795142555438224
129584,"public WebDriver setWebDriver(Browser browser){
switch (browser) {
case iexplore:
    driver=this.setIExplore();
default :
  driver=this.setFirefox();
}
return driver;
}","public WebDriver setWebDriver(Browser browser){
switch (browser) {
case iexplore:
    driver=this.setIExplore();
  break;
default :
driver=this.setFirefox();
}
return driver;
}",0.9681159420289857
129585,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.9276081227716632
129586,"public Item copy(Item originalItem,IPath path,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","public Item copy(Item originalItem,IPath path,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    copyScreenshotFile(originalItem,newItem);
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9842896174863388
129587,"public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}","public void propagateFileName(Property lastVersionProperty,Property resourceProperty) throws PersistenceException {
  ResourceFilenameHelper.FileName fileNameTest=ResourceFilenameHelper.create(resourceProperty.eResource(),resourceProperty,lastVersionProperty);
  if (!ResourceFilenameHelper.mustChangeVersion(fileNameTest) && !ResourceFilenameHelper.mustChangeLabel(fileNameTest)) {
    return;
  }
  List<Resource> affectedResources=getAffectedResources(resourceProperty);
  List<Resource> resourcesToSave=new ArrayList<Resource>();
  Property previousVersionProperty=null;
  IFile propertyFile=null;
  for (  Resource resource : affectedResources) {
    ResourceFilenameHelper.FileName fileName=ResourceFilenameHelper.create(resource,resourceProperty,lastVersionProperty);
    if (ResourceFilenameHelper.mustChangeVersion(fileName)) {
      IPath path=URIHelper.convert(resource.getURI());
      IPath bakPath=path.addFileExtension(""String_Node_Str"");
      copyResource(resource,bakPath);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(bakPath);
      moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      resourcesToSave.add(resource);
      ResourceUtils.moveResource(file,path);
      file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (isPropertyFile(file)) {
        propertyFile=file;
      }
    }
 else     if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
      resourceProperty.setLabel(lastVersionProperty.getLabel());
      if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
        moveResource(resource,ResourceFilenameHelper.getExpectedFilePath(fileName,false));
      }
      resourcesToSave.add(resource);
    }
  }
  if (propertyFile != null) {
    previousVersionProperty=loadProperty(propertyFile);
  }
  if (previousVersionProperty != null) {
    List<Resource> previousVersionResources=getAffectedResources(previousVersionProperty);
    for (    Resource resource : previousVersionResources) {
      FileName fileName=ResourceFilenameHelper.create(resource,previousVersionProperty,lastVersionProperty);
      if (ResourceFilenameHelper.mustChangeLabel(fileName)) {
        IPath expectedFilePath=ResourceFilenameHelper.getExpectedFilePath(fileName,true);
        previousVersionProperty.setLabel(lastVersionProperty.getLabel());
        if (!ResourceFilenameHelper.hasSameNameButDifferentCase(fileName)) {
          moveResource(resource,expectedFilePath);
        }
      }
      resourcesToSave.add(resource);
    }
    if (lastVersionProperty.getItem().getParent() instanceof FolderItem) {
      FolderItem folderItem=(FolderItem)lastVersionProperty.getItem().getParent();
      folderItem.getChildren().add(previousVersionProperty.getItem());
    }
  }
  for (  Resource resource : resourcesToSave) {
    if (ResourceFilenameHelper.mustChangeLabel(fileNameTest) && resource.getURI() != null && resource.getURI().toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    saveResource(resource);
  }
  if (!resourceProperty.equals(lastVersionProperty)) {
    Item item=resourceProperty.getItem();
    if (item.getParent() != null && item.getParent() instanceof FolderItem) {
      ((FolderItem)item.getParent()).getChildren().remove(item);
      item.setParent(null);
    }
  }
}",0.9276081227716632
129588,"public Item copy(Item originalItem,IPath path,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","public Item copy(Item originalItem,IPath path,boolean changeLabelWithCopyPrefix) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    copyScreenshotFile(originalItem,newItem);
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9842896174863388
129589,"public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel((String)treeNode.getValue());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  node.setDataType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + treeNode.getOriginalDataType()));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      if (children[i] instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)children[i];
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}","public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel((String)treeNode.getValue());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      if (children[i] instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)children[i];
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}",0.9206049149338374
129590,"public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  node.setDataType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + treeNode.getOriginalDataType()));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      if (children[i] instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)children[i];
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}","public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  String originalDataType=treeNode.getOriginalDataType();
  if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
    originalDataType=""String_Node_Str"" + originalDataType;
  }
  node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      if (children[i] instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)children[i];
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue();
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}",0.9253903990746096
129591,"public static List<TalendItemType> getTISItemTypes(){
  List<TalendItemType> itemList=new ArrayList<TalendItemType>();
  itemList.add(TalendItemType.SERVICES);
  itemList.add(TalendItemType.JOBLET_DESIGNS);
  itemList.add(TalendItemType.JOBSCRIPTS);
  itemList.add(TalendItemType.SAP_CONNECTIONS);
  itemList.add(TalendItemType.SURVIVORSHIP_RULES);
  itemList.add(TalendItemType.BRMS);
  itemList.add(TalendItemType.EMBEDDED_RULES);
  itemList.add(TalendItemType.VALIDATION_RULES);
  itemList.add(TalendItemType.COPYBOOK);
  itemList.add(TalendItemType.HL7);
  itemList.add(TalendItemType.EDI);
  return itemList;
}","public static List<TalendItemType> getTISItemTypes(){
  List<TalendItemType> itemList=new ArrayList<TalendItemType>();
  for (  TalendItemType itemType : TalendItemType.values())   itemList.add(itemType);
  return itemList;
}",0.3119047619047619
129592,"public SWTBotShell beginEditWizard(String contextMenu,String shellTitle){
  parentNode.getNode(itemFullName).contextMenu(contextMenu).click();
  SWTBotShell shell=gefBot.shell(shellTitle).activate();
  return shell;
}","public SWTBotShell beginEditWizard(String contextMenu,String shellTitle){
  parentNode.getNode(itemFullName).contextMenu(contextMenu).click();
  SWTBotShell shell=null;
  if (shellTitle == null)   shell=gefBot.activeShell();
 else   shell=gefBot.shell(shellTitle).activate();
  return shell;
}",0.7607843137254902
129593,"/** 
 * DOC ycbai Comment method ""getRoutineFromName"".
 * @param name
 * @return
 */
public static IRepositoryViewObject getRoutineFromName(String name){
  if (name == null)   return null;
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem && name.equals(label)) {
          return obj;
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","/** 
 * DOC hcyi Comment method ""getRoutineFromName"".
 * @param tempProject
 * @param name
 * @return
 */
public static IRepositoryViewObject getRoutineFromName(Project tempProject,String name){
  if (name == null)   return null;
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(tempProject,ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem && name.equals(label)) {
          return obj;
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.935637663885578
129594,"public void reSortWindows(){
  this.checkGetStartedWindow();
  this.reSortWindowLayout(""String_Node_Str"",500,500);
  this.checkAlertsWindow();
  this.reSortWindowLayout(""String_Node_Str"",500,500);
  this.checkProcessWindow();
  this.reSortWindowLayout(""String_Node_Str"",-800,500);
  this.checkSearchWindow();
  this.reSortWindowLayout(""String_Node_Str"",-300,200);
  this.checkTasksWindow();
}","public void reSortWindows(){
  this.checkGetStartedWindow();
  this.reSortWindowLayout(""String_Node_Str"",""String_Node_Str"",0,20);
  this.checkAlertsWindow();
  this.reSortWindowLayout(""String_Node_Str"",""String_Node_Str"",0,20);
  this.checkSearchWindow();
  this.reSortWindowLayout(""String_Node_Str"",""String_Node_Str"",0,20);
  this.checkTasksWindow();
  this.reSortWindowLayout(""String_Node_Str"",""String_Node_Str"",0,20);
  this.checkProcessWindow();
}",0.5106888361045131
129595,"public void reSortWindowLayout(String xpathLocatorKey,int xP,int yP){
  Point p1=this.getWindowPosition(this.getElementByXpath(locator.getString(xpathLocatorKey)));
  WebElement ele1=(this.getElementByXpath(locator.getString(xpathLocatorKey)));
  logger.info(this.getWindowPosition(ele1).x + ""String_Node_Str"" + this.getWindowPosition(ele1).y);
  this.dragAndDropBy(ele1,this.getWindowPosition(ele1).x + xP,this.getWindowPosition(ele1).y + yP);
  this.sleepCertainTime(5000);
  WebElement ele2=this.getElementByXpath(locator.getString(xpathLocatorKey));
  Point p2=this.getWindowPosition(this.getElementByXpath(locator.getString(xpathLocatorKey)));
  logger.info(this.getWindowPosition(ele2).x + ""String_Node_Str"" + this.getWindowPosition(ele2).y);
  Assert.assertFalse(p1.equals(p2),""String_Node_Str"");
}","public void reSortWindowLayout(String srcXpathLocatorKey,String destXpathLocatorKey,int xP,int yP){
  WebElement srcElementOld=(this.getElementByXpath(locator.getString(srcXpathLocatorKey)));
  Point pointOld=this.getWindowPosition(srcElementOld);
  Actions builder=new Actions(driver);
  builder.clickAndHold(this.getElementByXpath(locator.getString(srcXpathLocatorKey))).moveToElement(this.getElementByXpath(locator.getString(destXpathLocatorKey)),xP,yP).release().build().perform();
  this.sleepCertainTime(5000);
  WebElement srcElementNew=(this.getElementByXpath(locator.getString(srcXpathLocatorKey)));
  Point pointNew=this.getWindowPosition(srcElementNew);
  Assert.assertFalse(pointNew.equals(pointOld),""String_Node_Str"");
}",0.5071521456436932
129596,"private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.9827362538668796
129597,"public static IRepositoryViewObject getRoutineFromName(String name,boolean includeSystem){
  if (name == null)   return null;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem) {
          RoutineItem routineItem=(RoutineItem)item;
          if (name.equals(label)) {
            if (!includeSystem && routineItem.isBuiltIn()) {
              continue;
            }
 else {
              return obj;
            }
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","public static IRepositoryViewObject getRoutineFromName(Project tempProject,String name,boolean includeSystem){
  if (name == null)   return null;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> all=factory.getAll(tempProject,ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject obj : all) {
      if (obj != null && obj.getProperty() != null) {
        Item item=obj.getProperty().getItem();
        String label=obj.getProperty().getLabel();
        if (item != null && item instanceof RoutineItem) {
          RoutineItem routineItem=(RoutineItem)item;
          if (name.equals(label)) {
            if (!includeSystem && routineItem.isBuiltIn()) {
              continue;
            }
 else {
              return obj;
            }
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9667519181585678
129598,"/** 
 * Empty Recycle bin
 * @author fzhong
 * @return void
 */
public static void emptyRecycleBin(){
  try {
    SWTBotTreeItem recycleBin=tree.expandNode(""String_Node_Str"").select();
    gefBot.waitUntil(Conditions.widgetIsEnabled(recycleBin));
    if (recycleBin.rowCount() != 0) {
      recycleBin.click();
      recycleBin.contextMenu(""String_Node_Str"").click();
      gefBot.waitUntil(Conditions.shellIsActive(""String_Node_Str""));
      gefBot.button(""String_Node_Str"").click();
    }
  }
 catch (  Exception e) {
    gefBot.closeAllShells();
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","/** 
 * Empty Recycle bin
 * @author fzhong
 * @return void
 */
public static void emptyRecycleBin(){
  try {
    Thread.sleep(1000);
    SWTBotTreeItem recycleBin=tree.expandNode(""String_Node_Str"").select();
    gefBot.waitUntil(Conditions.widgetIsEnabled(recycleBin));
    if (recycleBin.rowCount() != 0) {
      recycleBin.click();
      recycleBin.contextMenu(""String_Node_Str"").click();
      gefBot.waitUntil(Conditions.shellIsActive(""String_Node_Str""));
      gefBot.button(""String_Node_Str"").click();
      Thread.sleep(1000);
    }
  }
 catch (  Exception e) {
    gefBot.closeAllShells();
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9613601236476044
129599,"public void maxARecordPanel(){
  Point b=this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))).getLocation();
  Point a=this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))).getLocation();
  logger.info(b.x + ""String_Node_Str"" + b.y);
  logger.info(a.x + ""String_Node_Str"" + a.y);
  logger.info(""String_Node_Str"" + (a.x - b.x - 50));
  this.dragAndDropBy(this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))),-a.x + b.x + 50,0);
}","public void maxARecordPanel(){
  Point b=this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))).getLocation();
  Point a=this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))).getLocation();
  logger.info(""String_Node_Str"" + b.x + ""String_Node_Str""+ b.y);
  logger.info(""String_Node_Str"" + a.x + ""String_Node_Str""+ a.y);
  logger.info(""String_Node_Str"" + (a.x - b.x - 50));
  Actions builder=new Actions(driver);
  builder.clickAndHold(this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str"")))).moveToElement(this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))),2,-2).release().build().perform();
}",0.7586750788643533
129600,"public void maxDataBrowserBoard(){
  Point b=this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))).getLocation();
  logger.info(""String_Node_Str"" + (b.x - 50));
  this.dragAndDropBy(this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))),-b.x + 50,0);
}","public void maxDataBrowserBoard(){
  Point b=this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str""))).getLocation();
  logger.info(""String_Node_Str"" + b.x + ""String_Node_Str""+ b.y);
  logger.info(""String_Node_Str"" + (b.x - 100));
  Actions builder=new Actions(driver);
  builder.clickAndHold(this.findElementDefineDriver(this.driver,By.xpath(locator.getString(""String_Node_Str"")))).moveToElement(this.findElementDefineDriver(this.driver,By.id(locator.getString(""String_Node_Str""))),-5,0).release().build().perform();
}",0.6681974741676234
129601,"@BeforeClass @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void initWebdriver(String url,String root,String testlinkId,String testlinkProject,ITestContext context){
  System.setProperty(""String_Node_Str"",testlinkId);
  System.setProperty(""String_Node_Str"",testlinkProject);
  URL file=Login.class.getClassLoader().getResource(""String_Node_Str"");
  PropertyConfigurator.configure(file.getPath() + ""String_Node_Str"");
  FirefoxProfile firefoxProfile=new FirefoxProfile();
  firefoxProfile.setPreference(""String_Node_Str"",2);
  firefoxProfile.setPreference(""String_Node_Str"",false);
  firefoxProfile.setPreference(""String_Node_Str"",this.getAbsoluteFolderPath(""String_Node_Str""));
  firefoxProfile.setPreference(""String_Node_Str"",""String_Node_Str"");
  firefoxProfile.setPreference(""String_Node_Str"",0);
  driver=new FirefoxDriver(firefoxProfile);
  driver.manage().timeouts().setScriptTimeout(10,TimeUnit.SECONDS);
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + url + root);
  driver.get(url + root);
  super.setDriver(driver);
  windowMaximize();
  onTestListener(context,Login.class.getClassLoader().getResource(""String_Node_Str"").getPath());
}","@BeforeClass @Parameters({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void initWebdriver(String url,String root,String testlinkId,String testlinkProject,ITestContext context){
  System.setProperty(""String_Node_Str"",testlinkId);
  System.setProperty(""String_Node_Str"",testlinkProject);
  URL file=Login.class.getClassLoader().getResource(""String_Node_Str"");
  PropertyConfigurator.configure(file.getPath() + ""String_Node_Str"");
  FirefoxProfile firefoxProfile=new FirefoxProfile();
  firefoxProfile.setPreference(""String_Node_Str"",2);
  firefoxProfile.setPreference(""String_Node_Str"",false);
  firefoxProfile.setPreference(""String_Node_Str"",this.getAbsoluteFolderPath(""String_Node_Str""));
  firefoxProfile.setPreference(""String_Node_Str"",""String_Node_Str"");
  firefoxProfile.setPreference(""String_Node_Str"",0);
  firefoxProfile.setPreference(""String_Node_Str"",0);
  driver=new FirefoxDriver(firefoxProfile);
  driver.manage().timeouts().setScriptTimeout(10,TimeUnit.SECONDS);
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + url + root);
  driver.get(url + root);
  super.setDriver(driver);
  windowMaximize();
  onTestListener(context,Login.class.getClassLoader().getResource(""String_Node_Str"").getPath());
}",0.9785858585858586
129602,"private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.9827362538668796
129603,"public void run(){
  for (  TalendTabbedPropertyList ttpl : controls) {
    ttpl.select(index);
  }
}","public void run(IProgressMonitor monitor){
  Iterator<ERepositoryObjectType> it=repositoriesFolders.keySet().iterator();
  List<String> folderPaths;
  while (it.hasNext()) {
    ERepositoryObjectType key=it.next();
    folderPaths=repositoriesFolders.get(key);
    for (    String path : folderPaths) {
      IFolder folder=project.getFolder(key.getFolder() + ""String_Node_Str"" + path);
      if (folder.exists()) {
        try {
          folder.delete(true,false,null);
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
  try {
    project.refreshLocal(IResource.DEPTH_INFINITE,null);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  gefBot.resetActivePerspective();
}",0.0976190476190476
129604,"@AfterClass public static void after() throws PersistenceException, CoreException {
  gefBot.closeAllShells();
  gefBot.saveAllEditors();
  gefBot.closeAllEditors();
  for (  ERepositoryObjectType epot : repositories) {
    System.out.print(""String_Node_Str"" + epot.getAlias() + ""String_Node_Str""+ epot.getType());
    List<IRepositoryViewObject> ivos=ProxyRepositoryFactory.getInstance().getAll(epot);
    for (    IRepositoryViewObject ivo : ivos) {
      ProxyRepositoryFactory.getInstance().deleteObjectPhysical(ivo);
    }
    RepositoryManager.refresh(epot);
    RepositoryManager.refresh(ERepositoryObjectType.RECYCLE_BIN);
    gefBot.resetActivePerspective();
    Utilities.emptyRecycleBin();
  }
  Iterator<ERepositoryObjectType> it=repositoriesFolders.keySet().iterator();
  List<String> folderPaths;
  while (it.hasNext()) {
    ERepositoryObjectType key=it.next();
    folderPaths=repositoriesFolders.get(key);
    for (    String path : folderPaths) {
      IFolder folder=project.getFolder(key.getFolder() + ""String_Node_Str"" + path);
      if (folder.exists()) {
        System.out.println(""String_Node_Str"" + folder.exists());
        folder.delete(true,false,null);
      }
      project.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
  }
  gefBot.resetActivePerspective();
  repositories.clear();
}","@AfterClass public static void after() throws PersistenceException, CoreException {
  gefBot.closeAllShells();
  gefBot.saveAllEditors();
  gefBot.closeAllEditors();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceRunnable operation=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      for (      ERepositoryObjectType epot : repositories) {
        System.out.println(""String_Node_Str"" + epot.getAlias() + ""String_Node_Str""+ epot.getType());
        final ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
        List<IRepositoryViewObject> ivos=null;
        try {
          ivos=factory.getAll(epot);
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
        if (ivos != null) {
          for (          final IRepositoryViewObject ivo : ivos) {
            try {
              factory.deleteObjectLogical(ivo);
              RepositoryManager.refresh(epot);
              if (!repositoriesFolders.isEmpty()) {
                try {
                  Thread.sleep(ONE_MINUTE_IN_MILLISEC / 2);
                }
 catch (                InterruptedException e2) {
                  e2.printStackTrace();
                }
              }
              factory.deleteObjectPhysical(ivo);
            }
 catch (            PersistenceException e) {
              e.printStackTrace();
            }
catch (            BusinessException e) {
              e.printStackTrace();
            }
            RepositoryManager.refresh(epot);
          }
        }
      }
    }
  }
;
  workspace.run(operation,null);
  gefBot.resetActivePerspective();
  Utilities.emptyRecycleBin();
  IWorkspaceRunnable cleanup=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      Iterator<ERepositoryObjectType> it=repositoriesFolders.keySet().iterator();
      List<String> folderPaths;
      while (it.hasNext()) {
        ERepositoryObjectType key=it.next();
        folderPaths=repositoriesFolders.get(key);
        for (        String path : folderPaths) {
          IFolder folder=project.getFolder(key.getFolder() + ""String_Node_Str"" + path);
          if (folder.exists()) {
            try {
              folder.delete(true,false,null);
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
        }
      }
      try {
        project.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
      gefBot.resetActivePerspective();
    }
  }
;
  workspace.run(cleanup,null);
  repositories.clear();
  repositoriesFolders.clear();
}",0.4585828343313373
129605,"public void finishCreationWizard(final SWTBotShell shell){
  gefBot.waitUntil(new DefaultCondition(){
    public boolean test() throws Exception {
      return gefBot.button(""String_Node_Str"").isEnabled();
    }
    public String getFailureMessage(){
      shell.close();
      return ""String_Node_Str"";
    }
  }
);
  gefBot.button(""String_Node_Str"").click();
  if (""String_Node_Str"".equals(gefBot.activeShell().getText())) {
    String errorLog=gefBot.label(1).getText();
    gefBot.button(""String_Node_Str"").click();
    Assert.fail(errorLog);
  }
  gefBot.waitUntil(new DefaultCondition(){
    public boolean test() throws Exception {
      return !shell.isOpen();
    }
    public String getFailureMessage(){
      return ""String_Node_Str"";
    }
  }
,2000);
  SWTBotTreeItem newTreeItem=null;
  try {
    if (gefBot.toolbarButtonWithTooltip(""String_Node_Str"").isEnabled()) {
      gefBot.toolbarButtonWithTooltip(""String_Node_Str"").click();
    }
    parentNode.setFocus();
    newTreeItem=parentNode.expand().select(itemName + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    Assert.assertNotNull(""String_Node_Str"",newTreeItem);
  }
  setItem(parentNode.getNode(itemName + ""String_Node_Str""));
}","public void finishCreationWizard(final SWTBotShell shell){
  gefBot.waitUntil(new DefaultCondition(){
    public boolean test() throws Exception {
      return gefBot.button(""String_Node_Str"").isEnabled();
    }
    public String getFailureMessage(){
      shell.close();
      return ""String_Node_Str"";
    }
  }
);
  gefBot.button(""String_Node_Str"").click();
  gefBot.waitUntil(new DefaultCondition(){
    public boolean test() throws Exception {
      return gefBot.activeShell() != null;
    }
    public String getFailureMessage(){
      return ""String_Node_Str"";
    }
  }
,60000);
  if (""String_Node_Str"".equals(gefBot.activeShell().getText())) {
    String errorLog=gefBot.label(1).getText();
    gefBot.button(""String_Node_Str"").click();
    Assert.fail(errorLog);
  }
  gefBot.waitUntil(new DefaultCondition(){
    public boolean test() throws Exception {
      return !shell.isOpen();
    }
    public String getFailureMessage(){
      return ""String_Node_Str"";
    }
  }
,2000);
  SWTBotTreeItem newTreeItem=null;
  try {
    if (gefBot.toolbarButtonWithTooltip(""String_Node_Str"").isEnabled()) {
      gefBot.toolbarButtonWithTooltip(""String_Node_Str"").click();
    }
    parentNode.setFocus();
    newTreeItem=parentNode.expand().select(itemName + ""String_Node_Str"");
    newTreeItem.setFocus();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    Assert.assertNotNull(""String_Node_Str"",newTreeItem);
  }
  setItem(parentNode.getNode(itemName + ""String_Node_Str""));
}",0.9071714597742992
129606,"@SuppressWarnings(""String_Node_Str"") public TalendItem copyAndPaste(){
  getItem().contextMenu(""String_Node_Str"").click();
  parentNode.contextMenu(""String_Node_Str"").click();
  TalendItem copyItem=(TalendItem)this.clone();
  SWTBotTreeItem newItem=null;
  try {
    newItem=parentNode.getNode(""String_Node_Str"" + itemFullName);
  }
 catch (  WidgetNotFoundException e) {
    Assert.fail(""String_Node_Str"" + itemFullName + ""String_Node_Str"");
  }
 finally {
    if (newItem == null)     return null;
    copyItem.setItem(newItem);
    return copyItem;
  }
}","@SuppressWarnings(""String_Node_Str"") public TalendItem copyAndPaste(){
  getItem().contextMenu(""String_Node_Str"").click();
  parentNode.contextMenu(""String_Node_Str"").click();
  TalendItem copyItem=(TalendItem)this.clone();
  SWTBotTreeItem newItem=null;
  try {
    newItem=parentNode.getNode(""String_Node_Str"" + itemFullName);
  }
 catch (  WidgetNotFoundException e) {
    Assert.fail(""String_Node_Str"" + itemFullName + ""String_Node_Str"");
  }
 finally {
    if (newItem == null)     return null;
    copyItem.setItem(newItem);
    gefBot.sleep(6000);
    return copyItem;
  }
}",0.9789103690685412
129607,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (!schemaname.contains(""String_Node_Str"") && !schemaname.contains(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.986162773396816
129608,"@Override public boolean performFinish(){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  ITDQRepositoryService tdqRepService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  }
  try {
    if (creation) {
      String nextId=factory.getNextId();
      connectionProperty.setId(nextId);
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      if (tdqRepService != null) {
        tdqRepService.fillMetadata(connectionItem);
      }
    }
 else {
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      RepositoryUpdateManager.updateFileConnection(connectionItem);
      factory.save(connectionItem);
      closeLockStrategy();
    }
  }
 catch (  PersistenceException e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,""String_Node_Str"",detailError);
    return false;
  }
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  if (tdqRepService != null) {
    if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      tdqRepService.openEditor(connectionItem);
      tdqRepService.refresh();
    }
  }
  return true;
}","@Override public boolean performFinish(){
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  ITDQRepositoryService tdqRepService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  }
  try {
    if (creation) {
      String nextId=factory.getNextId();
      connectionProperty.setId(nextId);
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      if (tdqRepService != null) {
        tdqRepService.fillMetadata(connectionItem);
      }
    }
 else {
      connectionProperty.setLabel(connectionProperty.getDisplayName());
      RepositoryUpdateManager.updateFileConnection(connectionItem);
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRunnable operation=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            factory.save(connectionItem);
            closeLockStrategy();
          }
 catch (          PersistenceException e) {
            throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
          }
        }
      }
;
      workspace.run(operation,null);
    }
  }
 catch (  Exception e) {
    String detailError=e.toString();
    new ErrorDialogWidthDetailArea(getShell(),PID,""String_Node_Str"",detailError);
    return false;
  }
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  if (tdqRepService != null) {
    if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      tdqRepService.openEditor(connectionItem);
      tdqRepService.refresh();
    }
  }
  return true;
}",0.8589322994333433
129609,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                tdqRepService.reloadDatabase(connectionItem);
              }
            }
 else {
              ConnectionHelper.setUsingURL(this.connection,this.connection.getURL());
              relpacePackageName(this.connection);
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn);
            }
          }
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        IWorkspaceRunnable operation=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(connectionItem);
            }
 catch (            PersistenceException e) {
              e.printStackTrace();
            }
          }
        }
;
        workspace.run(operation,null);
        boolean isModified=propertiesWizardPage.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
        closeLockStrategy();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh();
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getDriverClassByDbType(connection.getDatabaseType());
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
          final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
          if (equals && !c.isContextMode()) {
            if (c.getUiSchema() == null) {
              c.setUiSchema(""String_Node_Str"");
            }
 else {
              c.setUiSchema(c.getUiSchema().toUpperCase());
            }
          }
        }
        EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
        if (!type.equals(EDatabaseTypeName.GENERAL_JDBC)) {
          this.connection.setDriverClass(EDatabase4DriverClassName.getDriverClassByDbType(metadataConnection.getDbType()));
        }
        String displayName=connectionProperty.getDisplayName();
        connectionProperty.setLabel(displayName);
        this.connection.setName(displayName);
        this.connection.setLabel(displayName);
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
        ConnectionHelper.setUsingURL(connection,connection.getURL());
        ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
        MetadataConnectionUtils.fillConnectionInformation(connectionItem);
        List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
        List<Schema> schemas=ConnectionHelper.getSchema(connection);
        if (catalogs.isEmpty() && schemas.isEmpty()) {
          IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
          if (extractor != null && type.isUseProvider()) {
            extractor.fillConnection(connection);
            factory.save(connectionItem);
          }
        }
      }
 else {
        if (connectionItem.getConnection() instanceof DatabaseConnection) {
          DatabaseConnection conn=(DatabaseConnection)connectionItem.getConnection();
          ReturnCode reloadCheck=new ReturnCode(false);
          if (tdqRepService != null && ConnectionHelper.isUrlChanged(conn)) {
            reloadCheck=openConfirmReloadConnectionDialog(Display.getCurrent().getActiveShell());
            if (!reloadCheck.isOk()) {
              return false;
            }
          }
          final boolean isOracle=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(conn.getProductId());
          if (isOracle && !conn.isContextMode()) {
            if (conn.getUiSchema() != null && !""String_Node_Str"".equals(conn.getUiSchema())) {
              conn.setUiSchema(conn.getUiSchema().toUpperCase());
            }
          }
          RepositoryUpdateManager.updateDBConnection(connectionItem);
          if (reloadCheck.isOk()) {
            if (needReload(reloadCheck.getMessage())) {
              if (tdqRepService != null) {
                tdqRepService.reloadDatabase(connectionItem);
              }
            }
 else {
              ConnectionHelper.setUsingURL(this.connection,this.connection.getURL());
              relpacePackageName(this.connection);
            }
          }
 else {
            DatabaseConnection dbConn=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(conn);
            if (dbConn != null && dbConn instanceof DatabaseConnection) {
              updateConnectionInformation(dbConn);
            }
          }
        }
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        this.connection.setName(connectionProperty.getDisplayName());
        this.connection.setLabel(connectionProperty.getDisplayName());
        updateConnectionItem();
        boolean isModified=propertiesWizardPage.isNameModifiedByUser();
        if (isModified) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (service != null) {
              service.refreshComponentView(connectionItem);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      tdqRepService.notifySQLExplorer(connectionItem);
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.openEditor(connectionItem);
        tdqRepService.refresh();
      }
    }
    updateTdqDependencies();
    return true;
  }
 else {
    return false;
  }
}",0.9627444892890408
129610,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (delimitedFileWizardPage3 == null) {
    formIsPerformed=delimitedFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=delimitedFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        factory.create(connectionItem,delimitedFileWizardPage0.getDestinationPath());
      }
 else {
        connectionItem.getProperty().setLabel(connectionItem.getProperty().getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9721141374837872
129611,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  if (page3 == null) {
    formIsPerformed=page1.isPageComplete();
  }
 else {
    formIsPerformed=page3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,excelFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9655172413793104
129612,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (ldifFileWizardPage3 == null) {
    formIsPerformed=ldifFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=ldifFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldifFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9709851551956816
129613,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (fileWizardPage3 == null) {
    formIsPerformed=fileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=fileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        connectionProperty.setId(nextId);
        factory.create(connectionItem,fileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.970668485675307
129614,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (regexpFileWizardPage3 == null) {
    formIsPerformed=regexpFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=regexpFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,regexpFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed;
  if (regexpFileWizardPage3 == null) {
    formIsPerformed=regexpFileWizardPage2.isPageComplete();
  }
 else {
    formIsPerformed=regexpFileWizardPage3.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,regexpFileWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9198113207547168
129615,"@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=page1.isPageComplete();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,salesforceSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=page1.isPageComplete();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,salesforceSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9632164242942686
129616,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        factory.create(connectionItem,new Path(""String_Node_Str""));
      }
 else {
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        factory.create(connectionItem,new Path(""String_Node_Str""));
      }
 else {
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        updateConnectionItem();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.7873338545738858
129617,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (genericSchemaWizardPage1 == null) {
    formIsPerformed=genericSchemaWizardPage0.isPageComplete();
  }
 else {
    formIsPerformed=genericSchemaWizardPage1.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,genericSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        factory.save(connectionItem);
        boolean isModified=genericSchemaWizardPage0.isNameModifiedByUser();
        if (isModified) {
          CoreRuntimePlugin.getInstance().getDesignerCoreService().refreshComponentView(connectionItem);
        }
        closeLockStrategy();
      }
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (genericSchemaWizardPage1 == null) {
    formIsPerformed=genericSchemaWizardPage0.isPageComplete();
  }
 else {
    formIsPerformed=genericSchemaWizardPage1.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,genericSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        updateConnectionItem();
        boolean isModified=genericSchemaWizardPage0.isNameModifiedByUser();
        if (isModified) {
          CoreRuntimePlugin.getInstance().getDesignerCoreService().refreshComponentView(connectionItem);
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.8614386792452831
129618,"@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (ldapSchemaWizardPage4 == null) {
    formIsPerformed=ldapSchemaWizardPage3.isPageComplete();
  }
 else {
    formIsPerformed=ldapSchemaWizardPage4.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldapSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        factory.save(connectionItem);
        closeLockStrategy();
      }
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed;
  if (ldapSchemaWizardPage4 == null) {
    formIsPerformed=ldapSchemaWizardPage3.isPageComplete();
  }
 else {
    formIsPerformed=ldapSchemaWizardPage4.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,ldapSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.965791567223548
129619,"@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed=true;
  IWizardPage finalPage=null;
  if (finalPage == null) {
    finalPage=wsdlSchemaWizardPage0;
  }
  if (((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel()) {
    if (finalPage instanceof WSDLSchemaWizardPage) {
      int step=((WSDLSchemaWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  manager.saveValue();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,wsdlSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateWSDLConnection(connectionItem,false,false);
        factory.save(connectionItem);
        closeLockStrategy();
      }
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (isSinglePageOnly) {
    return true;
  }
  boolean formIsPerformed=true;
  IWizardPage finalPage=null;
  if (finalPage == null) {
    finalPage=wsdlSchemaWizardPage0;
  }
  if (((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel()) {
    if (finalPage instanceof WSDLSchemaWizardPage) {
      int step=((WSDLSchemaWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  manager.saveValue();
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,wsdlSchemaWizardPage0.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        RepositoryUpdateManager.updateWSDLConnection(connectionItem,false,false);
        updateConnectionItem();
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9742206235011992
129620,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracleJdbc || isOracle) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables);
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          if (!schemaname.contains(""String_Node_Str"") && !schemaname.contains(""String_Node_Str"")) {
            ResultSet rsTables=stmt.executeQuery(sql);
            while (rsTables.next()) {
              String nameKey=rsTables.getString(""String_Node_Str"").trim();
              MetadataTable metadatatable=null;
              metadatatable=RelationalFactory.eINSTANCE.createTdTable();
              metadatatable.setName(nameKey);
              metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
              metadatatable.setLabel(metadatatable.getName());
              if (schemaPattern != null) {
                ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
              }
              list.add(metadatatable);
            }
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.986162773396816
129621,"@Override protected IStatus run(IProgressMonitor monitor){
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
  try {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      listExistingObjects=service.getProxyRepositoryFactory().getAll(type,true,false);
    }
  }
 catch (  PersistenceException e) {
    return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
  }
  retrieveNameFinished=true;
  return Status.OK_STATUS;
}","public void run(){
  evaluateTextField();
}",0.0631001371742112
129622,"protected void evaluateTextField(){
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(StringUtils.trimToNull(nameText.getText()));
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (nameText == null || nameText.isDisposed()) {
    return;
  }
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(StringUtils.trimToNull(nameText.getText()));
  }
  updatePageStatus();
}",0.9718605627887442
129623,"protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
      try {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
          IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
          listExistingObjects=service.getProxyRepositoryFactory().getAll(type,true,false);
        }
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  this.property=property;
}","protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
      try {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
          IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
          listExistingObjects=service.getProxyRepositoryFactory().getAll(type,true,false);
        }
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      Display d=Display.getDefault();
      if (d != null) {
        d.syncExec(new Runnable(){
          public void run(){
            evaluateTextField();
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  this.property=property;
}",0.9355817875210792
129624,"public String getText(Object element){
  return ((Folder)element).getName();
}","@Override public String getText(Object element){
  return ((Folder)element).getName();
}",0.9397590361445785
129625,"public Image getImage(Object element){
  ECoreImage image=(dialog.getExpandedState(element) ? ECoreImage.FOLDER_OPEN_ICON : ECoreImage.FOLDER_CLOSE_ICON);
  return ImageProvider.getImage(image);
}","@Override public Image getImage(Object element){
  ECoreImage image=(dialog.getExpandedState(element) ? ECoreImage.FOLDER_OPEN_ICON : ECoreImage.FOLDER_CLOSE_ICON);
  return ImageProvider.getImage(image);
}",0.9751243781094528
129626,"protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  versionMajorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=property.getVersion();
      if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
        version=lastVersionFound;
      }
      version=VersionUtils.upMajor(version);
      versionText.setText(version);
      property.setVersion(version);
      property.setCreationDate(new Date());
      updatePageStatus();
    }
  }
);
  versionMinorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=property.getVersion();
      if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
        version=lastVersionFound;
      }
      version=VersionUtils.upMinor(version);
      versionText.setText(version);
      property.setVersion(version);
      property.setCreationDate(new Date());
      updatePageStatus();
    }
  }
);
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}","protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}",0.967505575023893
129627,"public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly && allowVerchange);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly && allowVerchange);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}","public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
  if (allowVerchange) {
    Label versionLab=new Label(parent,SWT.NONE);
    versionLab.setText(Messages.getString(""String_Node_Str""));
    Composite versionContainer=new Composite(parent,SWT.NONE);
    versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    GridLayout versionLayout=new GridLayout(3,false);
    versionLayout.marginHeight=0;
    versionLayout.marginWidth=0;
    versionLayout.horizontalSpacing=0;
    versionContainer.setLayout(versionLayout);
    versionText=new Text(versionContainer,SWT.BORDER);
    versionText.setEnabled(false);
    versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    versionMajorBtn=new Button(versionContainer,SWT.PUSH);
    versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
    versionMajorBtn.setEnabled(!readOnly && allowVerchange);
    versionMinorBtn=new Button(versionContainer,SWT.PUSH);
    versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
    versionMinorBtn.setEnabled(!readOnly && allowVerchange);
  }
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}",0.9630613230323516
129628,"protected void updateContent(){
  if (property != null) {
    nameText.setText(StringUtils.trimToEmpty(property.getDisplayName()));
    purposeText.setText(StringUtils.trimToEmpty(property.getPurpose()));
    descriptionText.setText(StringUtils.trimToEmpty(property.getDescription()));
    authorText.setText(StringUtils.trimToEmpty(property.getAuthor().getLogin()));
    lockerText.setText(""String_Node_Str"");
    ProxyRepositoryFactory instance=ProxyRepositoryFactory.getInstance();
    Item item=property.getItem();
    if (instance.getStatus(item) == ERepositoryStatus.LOCK_BY_USER || (instance.getStatus(item) == ERepositoryStatus.LOCK_BY_OTHER)) {
      LockInfo lockInfo=instance.getLockInfo(item);
      if (lockInfo != null) {
        String locker=lockInfo.getUser();
        if (locker != null) {
          lockerText.setText(locker);
        }
      }
    }
    versionText.setText(property.getVersion());
    statusText.setText(statusHelper.getStatusLabel(property.getStatusCode()));
    if (destinationPath != null) {
      pathText.setText(destinationPath.toString());
    }
  }
  evaluateFields();
}","protected void updateContent(){
  if (property != null) {
    nameText.setText(StringUtils.trimToEmpty(property.getDisplayName()));
    purposeText.setText(StringUtils.trimToEmpty(property.getPurpose()));
    descriptionText.setText(StringUtils.trimToEmpty(property.getDescription()));
    authorText.setText(StringUtils.trimToEmpty(property.getAuthor().getLogin()));
    lockerText.setText(""String_Node_Str"");
    ProxyRepositoryFactory instance=ProxyRepositoryFactory.getInstance();
    Item item=property.getItem();
    if (instance.getStatus(item) == ERepositoryStatus.LOCK_BY_USER || (instance.getStatus(item) == ERepositoryStatus.LOCK_BY_OTHER)) {
      LockInfo lockInfo=instance.getLockInfo(item);
      if (lockInfo != null) {
        String locker=lockInfo.getUser();
        if (locker != null) {
          lockerText.setText(locker);
        }
      }
    }
    if (allowVerchange) {
      versionText.setText(property.getVersion());
    }
    statusText.setText(statusHelper.getStatusLabel(property.getStatusCode()));
    if (destinationPath != null) {
      pathText.setText(destinationPath.toString());
    }
  }
  evaluateFields();
}",0.984982332155477
129629,"public boolean updateUser(String email,String pseudo,String oldPassword,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.updateUser(email,pseudo,oldPassword,password,firstname,lastname,country,version,brandingService.getShortProductName(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result != null && result.signum() > 0) {
      PlatformUI.getPreferenceStore().setValue(""String_Node_Str"",1);
      saveRegistoryBean();
      registNumber=result.longValue();
      PreferenceManipulator prefManipulator=new PreferenceManipulator();
      if (prefManipulator.readConnections().isEmpty()) {
        ConnectionBean recup=ConnectionBean.getDefaultConnectionBean();
        recup.setUser(email);
        recup.setComplete(true);
        prefManipulator.addConnection(recup);
      }
    }
 else {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    decrementTry();
    increaseFailRegisterTimes();
    throw new BusinessException(e);
  }
  if (result != null) {
    return result.signum() > 0;
  }
 else {
    return false;
  }
}","public boolean updateUser(String email,String pseudo,String oldPassword,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.updateUser(email,pseudo,oldPassword,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result != null && result.signum() > 0) {
      PlatformUI.getPreferenceStore().setValue(""String_Node_Str"",1);
      saveRegistoryBean();
      registNumber=result.longValue();
      PreferenceManipulator prefManipulator=new PreferenceManipulator();
      if (prefManipulator.readConnections().isEmpty()) {
        ConnectionBean recup=ConnectionBean.getDefaultConnectionBean();
        recup.setUser(email);
        recup.setComplete(true);
        prefManipulator.addConnection(recup);
      }
    }
 else {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    decrementTry();
    increaseFailRegisterTimes();
    throw new BusinessException(e);
  }
  if (result != null) {
    return result.signum() > 0;
  }
 else {
    return false;
  }
}",0.9952173008941568
129630,"public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.createUser50(pseudo,password,firstname,lastname,country,version,brandingService.getShortProductName(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}","public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.createUser50(pseudo,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}",0.993584379358438
129631,"@Deprecated public boolean register(String email,String country,boolean isProxyEnabled,String proxyHost,String proxyPort,String designerVersion,String projectLanguage,String osName,String osVersion,String javaVersion,long totalMemory,Long memRAM,int nbProc) throws BusinessException {
  registNumber=null;
  BigInteger result=BigInteger.valueOf(-1);
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.registerUserWithAllUserInformationsAndReturnId(email,country,designerVersion,brandingService.getShortProductName(),projectLanguage,osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.signum() > 0) {
      PlatformUI.getPreferenceStore().setValue(""String_Node_Str"",1);
      registNumber=result.longValue();
      PreferenceManipulator prefManipulator=new PreferenceManipulator();
      if (prefManipulator.readConnections().isEmpty()) {
        ConnectionBean recup=ConnectionBean.getDefaultConnectionBean();
        recup.setUser(email);
        recup.setComplete(true);
        prefManipulator.addConnection(recup);
      }
    }
  }
 catch (  RemoteException e) {
    decrementTry();
    throw new BusinessException(e);
  }
  return result.signum() > 0;
}","@Deprecated public boolean register(String email,String country,boolean isProxyEnabled,String proxyHost,String proxyPort,String designerVersion,String projectLanguage,String osName,String osVersion,String javaVersion,long totalMemory,Long memRAM,int nbProc) throws BusinessException {
  registNumber=null;
  BigInteger result=BigInteger.valueOf(-1);
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.registerUserWithAllUserInformationsAndReturnId(email,country,designerVersion,brandingService.getAcronym(),projectLanguage,osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.signum() > 0) {
      PlatformUI.getPreferenceStore().setValue(""String_Node_Str"",1);
      registNumber=result.longValue();
      PreferenceManipulator prefManipulator=new PreferenceManipulator();
      if (prefManipulator.readConnections().isEmpty()) {
        ConnectionBean recup=ConnectionBean.getDefaultConnectionBean();
        recup.setUser(email);
        recup.setComplete(true);
        prefManipulator.addConnection(recup);
      }
    }
  }
 catch (  RemoteException e) {
    decrementTry();
    throw new BusinessException(e);
  }
  return result.signum() > 0;
}",0.993385102099511
129632,"public RepositoryNode getRootRepositoryNode(ERepositoryObjectType type){
  if (type == null) {
    return null;
  }
  String typeName=type.name();
  if (repositoryNodeMap.containsKey(typeName)) {
    return repositoryNodeMap.get(typeName);
  }
 else   if (type == ERepositoryObjectType.BUSINESS_PROCESS) {
    return this.businessProcessNode;
  }
 else   if (type == ERepositoryObjectType.PROCESS) {
    return this.processNode;
  }
 else   if (type == ERepositoryObjectType.CONTEXT) {
    return this.contextNode;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return this.routineNode;
  }
 else   if (type == ERepositoryObjectType.JOB_SCRIPT) {
    return this.jobscriptsNode;
  }
 else   if (type == ERepositoryObjectType.SNIPPETS) {
    return this.snippetsNode;
  }
 else   if (type == ERepositoryObjectType.GENERATED || type == ERepositoryObjectType.JOBS || type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLETS || type == ERepositoryObjectType.JOBLET_DOC || type == ERepositoryObjectType.DOCUMENTATION) {
    return this.docNode;
  }
 else   if (type == ERepositoryObjectType.METADATA) {
    return this.metadataNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_VIEW || type == ERepositoryObjectType.METADATA_CON_SYNONYM || type == ERepositoryObjectType.METADATA_CON_QUERY || type == ERepositoryObjectType.METADATA_CON_CDC || type == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return this.metadataConNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
    return this.metadataSAPConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_SAP_FUNCTION) {
    return this.metadataSAPConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_SAP_IDOC) {
    return this.metadataSAPConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
    return this.metadataHeaderFooterConnectionNode;
  }
 else   if (type == ERepositoryObjectType.SQLPATTERNS) {
    return this.sqlPatternNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    return this.metadataFileNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
    return this.metadataFilePositionalNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_REGEXP) {
    return this.metadataFileRegexpNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    return this.metadataFileXmlNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_LDIF) {
    return this.metadataFileLdifNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EXCEL) {
    return this.metadataFileExcelNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
    return this.metadataEbcdicConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_HL7) {
    return this.metadataHL7ConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_FTP) {
    return this.metadataFTPConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_BRMS) {
    return this.metadataBRMSConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.MDM_CONCEPT) {
    return this.metadataMDMConnectionNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
    return this.metadataSalesforceSchemaNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_MODULE) {
    return this.metadataSalesforceSchemaNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
    return this.metadataGenericSchemaNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
    return this.metadataLDAPSchemaNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
    return this.metadataWSDLSchemaNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
    return this.metadataRulesNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
    return this.metadataValidationRulesNode;
  }
 else   if (type == ERepositoryObjectType.METADATA_EDIFACT) {
    return this.metadataEDIFactConnectionNode;
  }
 else   if (type == ERepositoryObjectType.REFERENCED_PROJECTS) {
    return this.refProject;
  }
 else   if (type == ERepositoryObjectType.JOBLET) {
    return this.jobletNode;
  }
 else   if (type == ERepositoryObjectType.SVN_ROOT) {
    return this.svnRootNode;
  }
  return null;
}","public RepositoryNode getRootRepositoryNode(ERepositoryObjectType type){
  if (type == null) {
    return null;
  }
  String typeName=type.name();
  if (repositoryNodeMap.containsKey(typeName)) {
    return repositoryNodeMap.get(typeName);
  }
  return null;
}",0.1021806853582554
129633,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && !getMergeRefProject() && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  IRepositoryNode curParentNode=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    curParentNode=this;
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    curParentNode=svnRootNode;
  }
  List<IRepositoryNode> nodes=curParentNode.getChildren();
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(curParentNode);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(curParentNode);
}",0.9980358003187192
129634,"private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId() + ""String_Node_Str"" + ((Query)parameter).getLabel();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId() + ""String_Node_Str"" + ((Query)parameter).getLabel();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations,true){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.997622444127437
129635,"public Saveable[] getSaveables(){
  return this.getActiveSaveables();
}","@Override public Saveable[] getSaveables(){
  Saveable[] superSaveables=super.getSaveables();
  Saveable[] allSavables=Arrays.copyOf(superSaveables,superSaveables.length + 1);
  allSavables[allSavables.length - 1]=editorSavable;
  return allSavables;
}",0.3095975232198142
129636,"@Override public void dispose(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null && resouceChangeVisitor != null) {
    workspace.removeResourceChangeListener(resouceChangeVisitor);
  }
}","@Override public void dispose(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null && resouceChangeVisitor != null) {
    workspace.removeResourceChangeListener(resouceChangeVisitor);
  }
  super.dispose();
}",0.9582417582417584
129637,"@Override public void dispose(){
  if (deleteFolderListener != null) {
    project.eAdapters().remove(deleteFolderListener);
  }
  super.dispose();
}","@Override public void dispose(){
  if (deleteFolderListener != null) {
    project.eAdapters().remove(deleteFolderListener);
    deleteFolderListener=null;
  }
  if (mergeRefListener != null) {
    IPreferenceStore preferenceStore=RepositoryManager.getPreferenceStore();
    preferenceStore.removePropertyChangeListener(mergeRefListener);
    mergeRefListener=null;
  }
  super.dispose();
}",0.4897959183673469
129638,"public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null)     return null;
    URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(""String_Node_Str""),null));
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","public static List<FOXTreeNode> parseMDMUpdateReport(Shell shell,boolean needConfirm){
  boolean fileExist=false;
  String filePath=""String_Node_Str"";
  try {
    Bundle b=Platform.getBundle(""String_Node_Str"");
    if (b == null)     return null;
    URL fileUrl=FileLocator.find(b,new Path(""String_Node_Str""),null);
    if (fileUrl == null) {
      return null;
    }
    URL url=FileLocator.toFileURL(fileUrl);
    if (url != null) {
      filePath=copyToTempFile(url,""String_Node_Str"");
      fileExist=true;
    }
  }
 catch (  IOException e) {
    fileExist=false;
  }
  if (!fileExist) {
    return null;
  }
  boolean pass=true;
  if (needConfirm) {
    pass=MessageDialog.openConfirm(shell,""String_Node_Str"",""String_Node_Str"");
  }
  if (pass) {
    try {
      if (XmlUtil.isXSDFile(filePath)) {
        XSDSchema xsdSchema=getXSDSchema(filePath);
        List<ATreeNode> allTreeNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (!allTreeNodes.isEmpty()) {
          return getFoxTreeNodesByRootNode(xsdSchema,allTreeNodes.get(0));
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.9237549581313352
129639,"public void createSalesforceModuleWizard(RepositoryNode node,final boolean forceReadOnly){
  SalesforceSchemaConnection connection=null;
  MetadataTable metadataTable=null;
  boolean creation=false;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
    ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    String tableLabel=(String)node.getProperties(EProperties.LABEL);
    SalesforceSchemaConnectionItem item=null;
    if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
      item=(SalesforceSchemaConnectionItem)node.getParent().getObject().getProperty().getItem();
      connection=(SalesforceSchemaConnection)item.getConnection();
      metadataTable=TableHelper.findByLabel(connection,tableLabel);
      creation=false;
    }
 else     if (nodeType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
      item=(SalesforceSchemaConnectionItem)node.getObject().getProperty().getItem();
      connection=(SalesforceSchemaConnection)item.getConnection();
      metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
      String nextId=ProxyRepositoryFactory.getInstance().getNextId();
      metadataTable.setId(nextId);
      metadataTable.setLabel(getStringIndexed(metadataTable.getLabel()));
      creation=true;
    }
 else     if (nodeType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE) {
      item=(SalesforceSchemaConnectionItem)node.getObject().getProperty().getItem();
      connection=(SalesforceSchemaConnection)item.getConnection();
      metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
      String nextId=ProxyRepositoryFactory.getInstance().getNextId();
      metadataTable.setId(nextId);
      metadataTable.setLabel(getStringIndexed(metadataTable.getLabel()));
      creation=false;
    }
 else {
      return;
    }
    initContextMode(item);
    SalesforceModulesWizard salesforceSchemaWizard=new SalesforceModulesWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,null,null);
    WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),salesforceSchemaWizard);
    handleWizard(node,wizardDialog);
  }
}","public void createSalesforceModuleWizard(RepositoryNode node,final boolean forceReadOnly){
  SalesforceSchemaConnection connection=null;
  MetadataTable metadataTable=null;
  boolean creation=false;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
    ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    String tableLabel=(String)node.getProperties(EProperties.LABEL);
    SalesforceSchemaConnectionItem item=null;
    if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
      item=(SalesforceSchemaConnectionItem)node.getParent().getObject().getProperty().getItem();
      connection=(SalesforceSchemaConnection)item.getConnection();
      metadataTable=TableHelper.findByLabel(connection,tableLabel);
      creation=false;
    }
 else     if (nodeType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
      item=(SalesforceSchemaConnectionItem)node.getObject().getProperty().getItem();
      connection=(SalesforceSchemaConnection)item.getConnection();
      metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
      String nextId=ProxyRepositoryFactory.getInstance().getNextId();
      metadataTable.setId(nextId);
      metadataTable.setLabel(getStringIndexed(metadataTable.getLabel()));
      creation=false;
    }
 else     if (nodeType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE) {
      item=(SalesforceSchemaConnectionItem)node.getObject().getProperty().getItem();
      connection=(SalesforceSchemaConnection)item.getConnection();
      metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
      String nextId=ProxyRepositoryFactory.getInstance().getNextId();
      metadataTable.setId(nextId);
      metadataTable.setLabel(getStringIndexed(metadataTable.getLabel()));
      creation=false;
    }
 else {
      return;
    }
    initContextMode(item);
    SalesforceModulesWizard salesforceSchemaWizard=new SalesforceModulesWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,null,null);
    WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),salesforceSchemaWizard);
    handleWizard(node,wizardDialog);
  }
}",0.998416647817236
129640,"/** 
 * DOC ocarbone DatabaseTableWizard constructor comment.
 * @param workbench
 * @param idNodeDbConnection
 * @param metadataTable
 * @param existingNames
 * @param managerConnection
 */
@SuppressWarnings(""String_Node_Str"") public SalesforceModulesWizard(IWorkbench workbench,boolean creation,IRepositoryViewObject object,MetadataTable metadataTable,String[] existingNames,boolean forceReadOnly,ManagerConnection managerConnection,IMetadataConnection metadataConnection){
  super(workbench,creation,forceReadOnly);
  this.existingNames=existingNames;
  this.managerConnection=managerConnection;
  this.metadataConnection=metadataConnection;
  setNeedsProgressMonitor(true);
  setRepositoryObject(object);
  isRepositoryObjectEditable();
  initLockStrategy();
  this.selectedMetadataTable=metadataTable;
  this.connectionItem=(ConnectionItem)object.getProperty().getItem();
  if (connectionItem != null) {
    cloneBaseConnection((SalesforceSchemaConnection)connectionItem.getConnection());
  }
}","/** 
 * DOC ocarbone DatabaseTableWizard constructor comment.
 * @param workbench
 * @param idNodeDbConnection
 * @param metadataTable
 * @param existingNames
 * @param managerConnection
 */
public SalesforceModulesWizard(IWorkbench workbench,boolean creation,IRepositoryViewObject object,MetadataTable metadataTable,String[] existingNames,boolean forceReadOnly,ManagerConnection managerConnection,IMetadataConnection metadataConnection){
  super(workbench,creation,forceReadOnly);
  this.existingNames=existingNames;
  this.metadataConnection=metadataConnection;
  setNeedsProgressMonitor(true);
  setRepositoryObject(object);
  isRepositoryObjectEditable();
  initLockStrategy();
  this.connectionItem=(ConnectionItem)object.getProperty().getItem();
  if (connectionItem != null) {
    cloneBaseConnection((SalesforceSchemaConnection)connectionItem.getConnection());
  }
}",0.9332621462893752
129641,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        factory.create(connectionItem,new Path(""String_Node_Str""));
      }
 else {
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  formIsPerformed=true;
  connectionItem.setConnection((SalesforceSchemaConnection)EcoreUtil.copy(temConnection));
  if (formIsPerformed) {
    RepositoryUpdateManager.updateFileConnection(connectionItem);
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    final IWorkspaceRunnable op=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        try {
          factory.save(connectionItem);
          closeLockStrategy();
          ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        Exception e) {
          String detailError=e.toString();
          log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
        }
      }
    }
;
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,false,iRunnableWithProgress);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
    return true;
  }
 else {
    return false;
  }
}",0.5361276196434157
129642,"protected void deleteElements(IProxyRepositoryFactory factory,RepositoryNode currentNode) throws PersistenceException, BusinessException {
  IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IEditorReference editors : page.getEditorReferences()) {
      String nameInEditor=editors.getName();
      if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
        page.closeEditor(editors.getEditor(false),false);
      }
    }
    if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
      if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
        for (        IRepositoryNode curNode : currentNode.getChildren()) {
          deleteElements(factory,(RepositoryNode)curNode);
        }
        factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
      }
 else {
        factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
      }
    }
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            String nameInEditor=editors.getName();
            if (objToDelete.getLabel().equals(nameInEditor.substring(nameInEditor.indexOf(""String_Node_Str"") + 1))) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.9054861488321564
129643,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
    try {
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (!PluginChecker.isOnlyTopLoaded()) {
    RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
    IRepositoryView view=getViewPart();
    if (view != null) {
      view.refresh();
    }
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (!tdqRepService.removeAliasInSQLExplorer(child)) {
            MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
            try {
              factory.saveProject(ProjectManager.getInstance().getCurrentProject());
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
            return;
          }
        }
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (!PluginChecker.isOnlyTopLoaded()) {
    RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
    IRepositoryView view=getViewPart();
    if (view != null) {
      view.refresh();
    }
  }
}",0.8191153238546603
129644,"/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    this.metadataTable=t;
    break;
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}","/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    if ((metadataTable != null && t.getLabel().equals(metadataTable.getLabel())) || metadataTable == null) {
      this.metadataTable=t;
      break;
    }
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}",0.9474613686534216
129645,"private void hideHiddenNodesDependsUserRight() throws JSONException {
  String[] userRights=getUserAuthorization();
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>(this.getChildren());
  for (  IRepositoryNode node : nodes) {
    ERepositoryObjectType contentType=node.getContentType();
    if (contentType == null) {
      continue;
    }
    String[] contentRight=contentType.getUserRight();
    if (contentRight != null && contentRight.length > 0 && userRights != null && userRights.length > 0) {
      for (int i=0; i < contentRight.length; i++) {
        if (!ArrayUtils.contains(userRights,contentRight[i])) {
          removeNode(this,node);
          removeContentType(contentType);
        }
      }
    }
  }
}","private void hideHiddenNodesDependsUserRight() throws JSONException {
  String[] userRights=getUserAuthorization();
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>(this.getChildren());
  for (  IRepositoryNode node : nodes) {
    ERepositoryObjectType contentType=node.getContentType();
    if (contentType == null) {
      continue;
    }
    String[] contentRight=contentType.getUserRight();
    if (contentRight != null && contentRight.length > 0 && userRights != null && userRights.length > 0) {
      for (int i=0; i < contentRight.length; i++) {
        if (!ArrayUtils.contains(userRights,contentRight[i])) {
          removeNode(this,node);
        }
      }
    }
  }
}",0.970505617977528
129646,"/** 
 * DOC sgandon Comment method ""registerAdapters"".
 */
private void registerAdapters(){
  Platform.getAdapterManager().registerAdapters(new DescriptorAdapterFactory(),TalendRepositoryRoot.class);
}","/** 
 * DOC sgandon Comment method ""registerAdapters"".
 */
private void registerAdapters(){
  Platform.getAdapterManager().registerAdapters(new DescriptorAdapterFactory(),TalendRepositoryRoot.class);
  Platform.getAdapterManager().registerAdapters(new ContentAdapterFactory(),TalendRepositoryRoot.class);
}",0.7928994082840237
129647,"protected String[] getExtensionIdsToActivate(String perspectiveId){
  if (perspectiveFilterExtensionsReader == null) {
    perspectiveFilterExtensionsReader=new PerspectiveFilterRegistryReader(getActionProviderId());
    perspectiveFilterExtensionsReader.readRegistry();
  }
  INavigatorContentService contentService=getNavigatorContentService();
  String[] filteredIds=perspectiveFilterExtensionsReader.getContentProviderFilteredIds(contentService,perspectiveId);
  return filteredIds;
}","protected String[] getExtensionIdsToActivate(String perspectiveId){
  if (perspectiveFilterExtensionsReader == null) {
    perspectiveFilterExtensionsReader=new PerspectiveFilterRegistryReader(getActionProviderId());
    perspectiveFilterExtensionsReader.readRegistry();
  }
  INavigatorContentService contentService=getNavigatorContentService();
  String[] filteredIds=perspectiveFilterExtensionsReader.getContentProviderFilteredIds(contentService,perspectiveId);
  return RepositoryNodeFilterHelper.filterRemovedNavigatorContents(filteredIds);
}",0.9333333333333332
129648,"private void unfilterView(boolean restoring){
  refreshNavigatorContents(getNavigatorContentService().getVisibleExtensionIds(),restoring);
}","private void unfilterView(boolean restoring){
  refreshNavigatorContents(RepositoryNodeFilterHelper.filterRemovedNavigatorContents(getNavigatorContentService().getVisibleExtensionIds()),restoring);
}",0.8259587020648967
129649,"private static void processContentExtensions(final ICommonActionExtensionSite commonActionSite,boolean activeFilter,boolean activedPerspectiveFilter){
  final CommonViewer commonViewer=(CommonViewer)commonActionSite.getStructuredViewer();
  final INavigatorContentService contentService=commonActionSite.getContentService();
  final INavigatorContentDescriptor[] visibleExtensions=contentService.getVisibleExtensions();
  List<String> visibleIDsForPecpective=new ArrayList<String>();
  List<String> visibleIdsForActiveFilter=new ArrayList<String>();
  for (  INavigatorContentDescriptor nd : visibleExtensions) {
    visibleIdsForActiveFilter.add(nd.getId());
  }
  if (activedPerspectiveFilter) {
    String perspectiveId=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective().getId();
    PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
    helper.setTreeViewer(commonViewer);
    helper.setNavigatorContentService(contentService);
    helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
    String[] pvExtensions=helper.getExtensionIdsToActivate(perspectiveId);
    if (pvExtensions != null && pvExtensions.length > 0) {
      visibleIDsForPecpective=Arrays.asList(pvExtensions);
    }
    visibleIdsForActiveFilter.retainAll(visibleIDsForPecpective);
  }
  String[] filteredContents=RepositoryNodeFilterHelper.getFilterByNodeValues();
  List<String> filteredContentsList=new ArrayList<String>();
  if (filteredContents != null) {
    filteredContentsList=Arrays.asList(filteredContents);
  }
  List<String> checkedExtensions=new ArrayList<String>();
  if (activeFilter) {
    for (    String id : visibleIdsForActiveFilter) {
      if (!filteredContentsList.contains(id)) {
        checkedExtensions.add(id);
      }
    }
  }
 else {
    checkedExtensions.addAll(visibleIdsForActiveFilter);
  }
  String[] contentExtensionIdsToActivate=(String[])checkedExtensions.toArray(new String[checkedExtensions.size()]);
  UpdateActiveExtensionsOperation updateExtensions=new UpdateActiveExtensionsOperation(commonViewer,contentExtensionIdsToActivate);
  updateExtensions.execute(null,null);
}","private static void processContentExtensions(final ICommonActionExtensionSite commonActionSite,boolean activeFilter,boolean activedPerspectiveFilter){
  final CommonViewer commonViewer=(CommonViewer)commonActionSite.getStructuredViewer();
  final INavigatorContentService contentService=commonActionSite.getContentService();
  String[] visibleExtensionIds=filterRemovedNavigatorContents(contentService.getVisibleExtensionIds());
  List<String> visibleIDsForPecpective=new ArrayList<String>();
  List<String> visibleIdsForActiveFilter=new ArrayList<String>();
  for (  String id : visibleExtensionIds) {
    visibleIdsForActiveFilter.add(id);
  }
  if (activedPerspectiveFilter) {
    String perspectiveId=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective().getId();
    PerspectiveFilterHelper helper=new PerspectiveFilterHelper();
    helper.setTreeViewer(commonViewer);
    helper.setNavigatorContentService(contentService);
    helper.setActionProviderId(PerspectiveFilterActionProvider.ID);
    String[] pvExtensions=helper.getExtensionIdsToActivate(perspectiveId);
    if (pvExtensions != null && pvExtensions.length > 0) {
      visibleIDsForPecpective=Arrays.asList(pvExtensions);
    }
    visibleIdsForActiveFilter.retainAll(visibleIDsForPecpective);
  }
  String[] filteredContents=RepositoryNodeFilterHelper.getFilterByNodeValues();
  List<String> filteredContentsList=new ArrayList<String>();
  if (filteredContents != null) {
    filteredContentsList=Arrays.asList(filteredContents);
  }
  List<String> checkedExtensions=new ArrayList<String>();
  if (activeFilter) {
    for (    String id : visibleIdsForActiveFilter) {
      if (!filteredContentsList.contains(id)) {
        checkedExtensions.add(id);
      }
    }
  }
 else {
    checkedExtensions.addAll(visibleIdsForActiveFilter);
  }
  String[] contentExtensionIdsToActivate=(String[])checkedExtensions.toArray(new String[checkedExtensions.size()]);
  UpdateActiveExtensionsOperation updateExtensions=new UpdateActiveExtensionsOperation(commonViewer,contentExtensionIdsToActivate);
  updateExtensions.execute(null,null);
}",0.9695692883895132
129650,"@Override protected void run() throws LoginException, PersistenceException {
  try {
    final Item newItem=factory.copy(item,path,true);
    newItem.getProperty().setLabel(newName);
    newItem.getProperty().setDisplayName(newName);
    if (newItem instanceof RoutineItem) {
      synDuplicatedRoutine((RoutineItem)newItem);
    }
    ICamelDesignerCoreService service=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    }
    if (service != null && service.isInstanceofCamelBeans(item)) {
      synDuplicatedBean(newItem);
    }
    if (newItem instanceof ProcessItem) {
      RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      connectionItem.getConnection().getSupplierDependency().clear();
    }
    factory.save(newItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.0271554650373387
129651,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      Object currentSource=selectionInClipboard.toArray()[0];
      try {
        IPath path=RepositoryNodeUtilities.getPath(target);
        if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
          Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
          List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
          for (          IRepositoryViewObject obj : allVersion) {
            if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
              originalItem=obj.getProperty().getItem();
              break;
            }
          }
          if (allVersion.size() == 1) {
            duplicateSingleVersionItem(originalItem,path,newJobName);
          }
 else           if (allVersion.size() > 1) {
            PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
            if (dialog.open() == Window.OK) {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              for (              IRepositoryViewObject object : selectedVersionItems) {
                Item selectedItem=object.getProperty().getItem();
                final Item copy=factory.copy(selectedItem,path);
                if (isfirst) {
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
                copy.getProperty().setId(id);
                copy.getProperty().setLabel(newJobName);
                copy.getProperty().setDisplayName(newJobName);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy);
                    needSys=false;
                  }
                }
                final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(getText(),this){
                  @Override protected void run() throws LoginException, PersistenceException {
                    if (copy instanceof ProcessItem) {
                      RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                    }
                    factory.save(copy);
                  }
                }
;
                workUnit.setAvoidUnloadResources(true);
                factory.executeRepositoryWorkUnit(workUnit);
              }
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor monitor) throws CoreException {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              try {
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    label=copy.getProperty().getLabel();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  copy.getProperty().setLabel(newJobName);
                  copy.getProperty().setDisplayName(newJobName);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy);
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  factory.save(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.7669927263606722
129652,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  RepositoryWorkUnit<Object> rwu=new RepositoryWorkUnit<Object>(this.getText(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  rwu.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(rwu);
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.6680828465215082
129653,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        String id=null;
        String label=null;
        boolean isfirst=true;
        boolean needSys=true;
        for (        IRepositoryViewObject object : selectedVersionItems) {
          Item selectedItem=object.getProperty().getItem();
          final Item copy=factory.copy(selectedItem,path);
          if (isfirst) {
            id=copy.getProperty().getId();
            label=copy.getProperty().getLabel();
            isfirst=false;
          }
          copy.getProperty().setId(id);
          copy.getProperty().setLabel(label);
          copy.getProperty().setDisplayName(label);
          if (needSys && originalItem instanceof RoutineItem) {
            String lastestVersion=getLastestVersion(selectedVersionItems);
            if (lastestVersion.equals(copy.getProperty().getVersion())) {
              synDuplicatedRoutine((RoutineItem)copy);
              needSys=false;
            }
          }
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor monitor) throws CoreException {
              if (copy instanceof ProcessItem) {
                RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
              }
              try {
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            String id=null;
            String label=null;
            boolean isfirst=true;
            boolean needSys=true;
            for (            IRepositoryViewObject object : selectedVersionItems) {
              Item selectedItem=object.getProperty().getItem();
              try {
                final Item copy=factory.copy(selectedItem,path);
                if (isfirst) {
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
                copy.getProperty().setId(id);
                copy.getProperty().setLabel(label);
                copy.getProperty().setDisplayName(label);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy);
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
                }
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
catch (              BusinessException e) {
                ExceptionHandler.process(e);
              }
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}",0.8372645008159026
129654,"/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    this.metadataTable=t;
    break;
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}","/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    if ((metadataTable != null && t.getLabel().equals(metadataTable.getLabel())) || metadataTable == null) {
      this.metadataTable=t;
      break;
    }
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}",0.9474613686534216
129655,"private void runInProgressDialog(IRunnableWithProgress runnable){
  try {
    ProgressMonitorDialog progress=new ProgressMonitorDialog(getViewer().getControl().getShell());
    progress.run(false,false,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.process(e);
  }
}","private void runInProgressDialog(final IWorkspaceRunnable op){
  final IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        ProgressMonitorDialog progress=new ProgressMonitorDialog(getViewer().getControl().getShell());
        progress.run(false,false,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.4434993924665856
129656,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  try {
    for (    Object obj : ((StructuredSelection)data).toArray()) {
      final RepositoryNode sourceNode=(RepositoryNode)obj;
      monitor.subTask(Messages.getString(""String_Node_Str"") + sourceNode.getObject().getLabel());
      MoveObjectAction.getInstance().execute(sourceNode,targetNode,true);
    }
  }
 catch (  Exception e) {
    throw new PersistenceException(e);
  }
}",0.21875
129657,"/** 
 * refreshTable. This Methos execute the CreateTable in a Thread task.
 * @param tableItem
 * @param size
 */
private void refreshTable(final TreeItem treeItem,final int size){
  if (threadExecutor == null) {
    return;
  }
  if (!threadExecutor.isThreadRunning(treeItem) && !useProvider()) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == TableNode.TABLE) {
      if (managerConnection.check(getIMetadataConnection(),true)) {
        RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem);
        String value=node.getValue();
        if (!(isExistingNames(value))) {
          threadExecutor.execute(runnable);
        }
      }
    }
  }
 else   if (useProvider() && !threadExecutor.isThreadRunning(treeItem)) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == provider.getRunnableAccessNodeType()) {
      RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem){
        @Override public void run(){
          if (isCanceled()) {
            return;
          }
          checkConnectionIsDone=true;
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              provider.executeInRunnable(metadataconnection,(TableNode)treeItem.getData(),getConnection());
              if (isCanceled()) {
                return;
              }
              updateUIInThreadIfThread();
            }
          }
);
        }
        @Override public void updateUIInThreadIfThread(){
          if (treeItem.isDisposed()) {
            return;
          }
          if (checkConnectionIsDone) {
            treeItem.setText(3,Messages.getString(""String_Node_Str""));
            countSuccess++;
          }
 else {
            updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
            new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
          }
          count++;
          updateStatus(IStatus.OK,null);
          parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
        }
      }
;
      String value=node.getValue();
      if (!(isExistingNames(value))) {
        threadExecutor.execute(runnable);
      }
    }
  }
 else {
    RetrieveColumnRunnable runnable=threadExecutor.getRunnable(treeItem);
    runnable.setCanceled(false);
  }
}","/** 
 * refreshTable. This Methos execute the CreateTable in a Thread task.
 * @param tableItem
 * @param size
 */
private void refreshTable(final TreeItem treeItem,final int size){
  if (threadExecutor == null) {
    return;
  }
  if (!threadExecutor.isThreadRunning(treeItem) && !useProvider()) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == TableNode.TABLE) {
      if (managerConnection.check(getIMetadataConnection(),true)) {
        RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem);
        String value=node.getValue();
        if (!(isExistingNames(value))) {
          threadExecutor.execute(runnable);
        }
      }
    }
  }
 else   if (useProvider() && !threadExecutor.isThreadRunning(treeItem)) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == provider.getRunnableAccessNodeType()) {
      RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem){
        @Override public void run(){
          if (isCanceled()) {
            return;
          }
          checkConnectionIsDone=true;
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              provider.executeInRunnable(metadataconnection,treeItem.getData(),getConnection());
              if (isCanceled()) {
                return;
              }
              updateUIInThreadIfThread();
            }
          }
);
        }
        @Override public void updateUIInThreadIfThread(){
          if (treeItem.isDisposed()) {
            return;
          }
          if (checkConnectionIsDone) {
            treeItem.setText(3,Messages.getString(""String_Node_Str""));
            countSuccess++;
          }
 else {
            updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
            new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
          }
          count++;
          updateStatus(IStatus.OK,null);
          parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
        }
      }
;
      String value=node.getValue();
      if (!(isExistingNames(value))) {
        threadExecutor.execute(runnable);
      }
    }
  }
 else {
    RetrieveColumnRunnable runnable=threadExecutor.getRunnable(treeItem);
    runnable.setCanceled(false);
  }
}",0.9977518904557532
129658,"private void clearTableItem(TableNode item,boolean deleteFromConnection){
  if (item == null) {
    return;
  }
  if (item != null && item instanceof TableNode) {
    TableNode node=(TableNode)item;
    if (node.getType() == TableNode.TABLE) {
      if (deleteFromConnection) {
        deleteTable(item);
      }
    }
  }
}","private void clearTableItem(TableNode item,boolean deleteFromConnection){
  if (item == null) {
    return;
  }
  if (item != null && item instanceof TableNode) {
    TableNode node=item;
    if (node.getType() == TableNode.TABLE) {
      if (deleteFromConnection) {
        deleteTable(item);
      }
    }
  }
}",0.9827315541601256
129659,"/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      updateStatus(IStatus.ERROR,null);
      for (      TreeItem catalogItem : tree.getItems()) {
        int type=((TableNode)catalogItem.getData()).getType();
        if (type == TableNode.CATALOG) {
          for (          TreeItem schemaItem : catalogItem.getItems()) {
            if (schemaItem.getData() != null) {
              int t=((TableNode)schemaItem.getData()).getType();
              if (t == TableNode.SCHEMA) {
                for (                TreeItem tableItem : schemaItem.getItems()) {
                  updateItem(tableItem,true,false);
                }
                schemaItem.setChecked(true);
              }
 else               if (t == TableNode.TABLE) {
                updateItem(schemaItem,true,false);
              }
            }
          }
          catalogItem.setChecked(true);
          catalogItem.setGrayed(true);
        }
 else         if (type == TableNode.SCHEMA) {
          for (          TreeItem tableItem : catalogItem.getItems()) {
            updateItem(tableItem,true,false);
          }
          catalogItem.setChecked(true);
          catalogItem.setGrayed(true);
        }
 else         if (type == TableNode.TABLE) {
          updateItem(catalogItem,true,false);
        }
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(true);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      for (      TreeItem catalogItem : tree.getItems()) {
        int type=((TableNode)catalogItem.getData()).getType();
        if (type == TableNode.CATALOG) {
          for (          TreeItem schemaItem : catalogItem.getItems()) {
            if (schemaItem.getData() != null) {
              int t=((TableNode)schemaItem.getData()).getType();
              if (t == TableNode.SCHEMA) {
                for (                TreeItem tableItem : schemaItem.getItems()) {
                  updateItem(tableItem,false,false);
                }
                schemaItem.setChecked(false);
              }
 else               if (t == TableNode.TABLE) {
                updateItem(schemaItem,false,false);
              }
            }
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.SCHEMA) {
          for (          TreeItem tableItem : catalogItem.getItems()) {
            updateItem(tableItem,false,false);
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.TABLE) {
          updateItem(catalogItem,false,false);
        }
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(false);
      }
    }
  }
);
  addTableListener();
}","/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
          @Override public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                monitor.beginTask(""String_Node_Str"",tree.getItems().length);
                int length=tree.getItems().length;
                updateStatus(IStatus.ERROR,null);
                for (int i=0; i < length; i++) {
                  monitor.worked(i + 1);
                  TreeItem catalogItem=tree.getItem(i);
                  int type=((TableNode)catalogItem.getData()).getType();
                  if (type == TableNode.CATALOG) {
                    for (                    TreeItem schemaItem : catalogItem.getItems()) {
                      if (schemaItem.getData() != null) {
                        int t=((TableNode)schemaItem.getData()).getType();
                        if (t == TableNode.SCHEMA) {
                          for (                          TreeItem tableItem : schemaItem.getItems()) {
                            updateItem(tableItem,true,false);
                          }
                          schemaItem.setChecked(true);
                        }
 else                         if (t == TableNode.TABLE) {
                          updateItem(schemaItem,true,false);
                        }
                      }
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.SCHEMA) {
                    for (                    TreeItem tableItem : catalogItem.getItems()) {
                      updateItem(tableItem,true,false);
                    }
                    catalogItem.setChecked(true);
                    catalogItem.setGrayed(true);
                  }
 else                   if (type == TableNode.TABLE) {
                    updateItem(catalogItem,true,false);
                  }
                }
                if (forTemplate) {
                  parentWizardPage.setPageComplete(true);
                }
                monitor.done();
              }
            }
);
          }
        }
);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      for (      TreeItem catalogItem : tree.getItems()) {
        int type=((TableNode)catalogItem.getData()).getType();
        if (type == TableNode.CATALOG) {
          for (          TreeItem schemaItem : catalogItem.getItems()) {
            if (schemaItem.getData() != null) {
              int t=((TableNode)schemaItem.getData()).getType();
              if (t == TableNode.SCHEMA) {
                for (                TreeItem tableItem : schemaItem.getItems()) {
                  updateItem(tableItem,false,false);
                }
                schemaItem.setChecked(false);
              }
 else               if (t == TableNode.TABLE) {
                updateItem(schemaItem,false,false);
              }
            }
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.SCHEMA) {
          for (          TreeItem tableItem : catalogItem.getItems()) {
            updateItem(tableItem,false,false);
          }
          catalogItem.setChecked(false);
        }
 else         if (type == TableNode.TABLE) {
          updateItem(catalogItem,false,false);
        }
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(false);
      }
    }
  }
);
  addTableListener();
}",0.8346826847740925
129660,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            repositoryView.refresh();
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            repositoryView.refresh();
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9833407799834046
129661,"public static boolean isValid(String str){
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  return pattern.matcher(str).matches();
}","public static boolean isValid(String str){
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  ;
  return pattern.matcher(str).matches();
}",0.9858156028368794
129662,"@Override protected void run() throws LoginException, PersistenceException {
  try {
    final Item newItem=factory.copy(item,path,true);
    newItem.getProperty().setLabel(newName);
    newItem.getProperty().setDisplayName(newName);
    if (newItem instanceof RoutineItem) {
      synDuplicatedRoutine((RoutineItem)newItem);
    }
    ICamelDesignerCoreService service=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    }
    if (service != null && service.isInstanceofCamelBeans(item)) {
      synDuplicatedBean(newItem);
    }
    if (newItem instanceof ProcessItem) {
      RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)newItem);
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      connectionItem.getConnection().getSupplierDependency().clear();
    }
    factory.save(newItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  try {
    final Item newItem=factory.copy(item,path,true);
    newItem.getProperty().setLabel(newName);
    newItem.getProperty().setDisplayName(newName);
    if (newItem instanceof RoutineItem) {
      synDuplicatedRoutine((RoutineItem)newItem);
    }
    ICamelDesignerCoreService service=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    }
    if (service != null && service.isInstanceofCamelBeans(item)) {
      synDuplicatedBean(newItem);
    }
    if (newItem instanceof ProcessItem) {
      RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      connectionItem.getConnection().getSupplierDependency().clear();
    }
    factory.save(newItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9941415051825148
129663,"private void synDuplicatedRoutine(RoutineItem item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createRoutineSynchronizer().renameRoutineClass((RoutineItem)item);
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine((RoutineItem)item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void synDuplicatedRoutine(RoutineItem item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createRoutineSynchronizer().renameRoutineClass(item);
    try {
      codeGenService.createRoutineSynchronizer().syncRoutine(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9727463312368972
129664,"private void createOperation(String newJobName,RepositoryNode target,CopyObjectAction copyObjectAction,TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        if (dialog.open() == Window.OK) {
          Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          String id=null;
          String label=null;
          boolean isfirst=true;
          boolean needSys=true;
          for (          IRepositoryViewObject object : selectedVersionItems) {
            Item selectedItem=object.getProperty().getItem();
            final Item copy=factory.copy(selectedItem,path);
            if (isfirst) {
              id=copy.getProperty().getId();
              label=copy.getProperty().getLabel();
              isfirst=false;
            }
            copy.getProperty().setId(id);
            copy.getProperty().setLabel(newJobName);
            copy.getProperty().setDisplayName(newJobName);
            if (needSys && originalItem instanceof RoutineItem) {
              String lastestVersion=getLastestVersion(selectedVersionItems);
              if (lastestVersion.equals(copy.getProperty().getVersion())) {
                synDuplicatedRoutine((RoutineItem)copy);
                needSys=false;
              }
            }
            final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(this.getText(),this){
              @Override protected void run() throws LoginException, PersistenceException {
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
                }
                factory.save(copy);
              }
            }
;
            workUnit.setAvoidUnloadResources(true);
            factory.executeRepositoryWorkUnit(workUnit);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      Object currentSource=selectionInClipboard.toArray()[0];
      try {
        IPath path=RepositoryNodeUtilities.getPath(target);
        if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
          Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
          List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
          for (          IRepositoryViewObject obj : allVersion) {
            if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
              originalItem=obj.getProperty().getItem();
              break;
            }
          }
          if (allVersion.size() == 1) {
            duplicateSingleVersionItem(originalItem,path,newJobName);
          }
 else           if (allVersion.size() > 1) {
            PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
            if (dialog.open() == Window.OK) {
              Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              for (              IRepositoryViewObject object : selectedVersionItems) {
                Item selectedItem=object.getProperty().getItem();
                final Item copy=factory.copy(selectedItem,path);
                if (isfirst) {
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
                copy.getProperty().setId(id);
                copy.getProperty().setLabel(newJobName);
                copy.getProperty().setDisplayName(newJobName);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy);
                    needSys=false;
                  }
                }
                final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(getText(),this){
                  @Override protected void run() throws LoginException, PersistenceException {
                    if (copy instanceof ProcessItem) {
                      RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                    }
                    factory.save(copy);
                  }
                }
;
                workUnit.setAvoidUnloadResources(true);
                factory.executeRepositoryWorkUnit(workUnit);
              }
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.8292902066486972
129665,"@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=(Property)sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getLabel();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    public String isValid(    String newText){
      return validJobName(newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
  RepositoryManager.refreshCreatedNode(sourceNode.getObjectType());
}","@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(property.getItem())),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + sourceNode.getObject().getProperty().getItem().getProperty().getLabel();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
    public String isValid(    String newText){
      return validJobName(newText,selectionInClipboard);
    }
  }
);
  if (jobNewNameDialog.open() != Dialog.OK) {
    return;
  }
  String jobNewName=jobNewNameDialog.getValue();
  createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
}",0.9732142857142856
129666,"private void addExtensionRepositoryNodes(List<ERepositoryObjectType> arraysList){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (int i=0; i < configurationElements.length; i++) {
    IConfigurationElement element=configurationElements[i];
    String type=element.getAttribute(""String_Node_Str"");
    ERepositoryObjectType repositoryNodeType=(ERepositoryObjectType)ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
    if (repositoryNodeType != null) {
      arraysList.add(repositoryNodeType);
    }
  }
}","private void addExtensionRepositoryNodes(List<ERepositoryObjectType> arraysList){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (int i=0; i < configurationElements.length; i++) {
    IConfigurationElement element=configurationElements[i];
    String type=element.getAttribute(""String_Node_Str"");
    ERepositoryObjectType repositoryNodeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,type);
    if (repositoryNodeType != null) {
      arraysList.add(repositoryNodeType);
    }
  }
}",0.9677926158680282
129667,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  RepositoryWorkUnit<Object> rwu=new RepositoryWorkUnit<Object>(this.getText(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  rwu.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(rwu);
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  RepositoryWorkUnit<Object> rwu=new RepositoryWorkUnit<Object>(this.getText(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  rwu.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(rwu);
}",0.995639047299564
129668,"protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
    try {
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (!PluginChecker.isOnlyTopLoaded()) {
    RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
    IRepositoryView view=getViewPart();
    if (view != null) {
      view.refresh();
    }
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
    try {
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (!PluginChecker.isOnlyTopLoaded()) {
    RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
    IRepositoryView view=getViewPart();
    if (view != null) {
      view.refresh();
    }
  }
}",0.9975926817525276
129669,"/** 
 * ggu Comment method ""refreshRelations"". bug 12883
 */
private void refreshRelations(){
  if (!DeleteActionCache.getInstance().isDocRefresh()) {
    RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
  }
  RepositoryManager.refreshDeletedNode(null);
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null && GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    IDiagramModelService sevice=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
    if (page != null && sevice != null) {
      for (      IEditorReference editors : page.getEditorReferences()) {
        sevice.refreshBusinessModel(editors);
      }
    }
  }
}","/** 
 * ggu Comment method ""refreshRelations"". bug 12883
 */
private void refreshRelations(){
  RepositoryManager.refreshDeletedNode(null);
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null && GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    IDiagramModelService sevice=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
    if (page != null && sevice != null) {
      for (      IEditorReference editors : page.getEditorReferences()) {
        sevice.refreshBusinessModel(editors);
      }
    }
  }
}",0.912826899128269
129670,"@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  if (selectionInClipboard != null) {
    for (    Object currentSource : selectionInClipboard.toArray()) {
      try {
        if (copyObjectAction.validateAction((RepositoryNode)currentSource,target)) {
          copyObjectAction.execute((RepositoryNode)currentSource,target);
        }
 else {
          MessageDialog.openWarning(new Shell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
      }
 catch (      BusinessException e) {
        MessageBoxExceptionHandler.process(e);
      }
catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    ERepositoryObjectType contentType=target.getContentType();
    if (contentType == null) {
      contentType=target.getObjectType();
    }
    RepositoryManager.refreshCreatedNode(contentType);
    if (contentType.equals(ERepositoryObjectType.METADATA_CON_TABLE)) {
      RepositoryManager.refreshCreatedNode(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
    RepositoryManager.refreshCreatedNode(target.getContentType());
  }
}","@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  if (selectionInClipboard != null) {
    for (    Object currentSource : selectionInClipboard.toArray()) {
      try {
        if (copyObjectAction.validateAction((RepositoryNode)currentSource,target)) {
          copyObjectAction.execute((RepositoryNode)currentSource,target);
        }
 else {
          MessageDialog.openWarning(new Shell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
      }
 catch (      BusinessException e) {
        MessageBoxExceptionHandler.process(e);
      }
catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    ERepositoryObjectType contentType=target.getContentType();
    if (contentType == null) {
      contentType=target.getObjectType();
    }
  }
}",0.8848
129671,"/** 
 * Getter for visible.
 * @return the visible
 */
public boolean isVisible(){
  return this.visible;
}","/** 
 * Getter for visible.
 * @return the visible
 */
@Override public boolean isVisible(){
  return this.visible;
}",0.9553571428571428
129672,"public void execute(){
  if (extendedTableModel instanceof MetadataTableEditor) {
    MetadataTableEditor editor=(MetadataTableEditor)extendedTableModel;
    IMetadataTable metadataTable=editor.getMetadataTable();
    List<IMetadataColumn> listColumns=metadataTable.getListColumns();
    if (listColumns == null || listColumns.size() == 0) {
      return;
    }
    RepositoryNode genericSchemaNode=getGenericSchemaNode();
    boolean isGenericSchemaExisting=false;
    RepositoryObject repositoryObject=null;
    if (genericSchemaNode != null) {
    }
    IMetadataService metadataService=CoreRuntimePlugin.getInstance().getMetadataService();
    if (metadataService == null) {
      return;
    }
    WizardDialog dialog=metadataService.getGenericSchemaWizardDialog(new Shell(),PlatformUI.getWorkbench(),false,null,null,true);
    dialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
    dialog.create();
    Property property=null;
    if (dialog.open() != 0) {
      return;
    }
 else {
      property=metadataService.getPropertyFromWizardDialog();
    }
    repositoryObject=new RepositoryObject();
    GenericSchemaConnectionItem item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    String nextId=factory.getNextId();
    property.setId(nextId);
    GenericSchemaConnection connection=ConnectionFactory.eINSTANCE.createGenericSchemaConnection();
    connection.setLabel(""String_Node_Str"");
    connection.setComment(""String_Node_Str"");
    if (this.dbmsId != null && this.dbmsId.length() > 0) {
      connection.setMappingTypeId(this.dbmsId);
      connection.setMappingTypeUsed(true);
    }
    MetadataTable createMetadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getNextId();
    metadataTable.setId(nextId);
    if (createMetadataTable.getNamespace() instanceof Package) {
      Package pkg=(Package)createMetadataTable.getNamespace();
      pkg.getDataManager().add(connection);
    }
    createMetadataTable.setLabel(""String_Node_Str"");
    for (    IMetadataColumn column : listColumns) {
      MetadataColumn createMetadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      createMetadataColumn.setComment(column.getComment());
      createMetadataColumn.setLabel(column.getLabel());
      createMetadataColumn.setDefaultValue(column.getDefault());
      createMetadataColumn.setId(column.getId() + ""String_Node_Str"");
      createMetadataColumn.setKey(column.isKey());
      Integer length=column.getLength();
      if (length == null) {
        length=0;
      }
      createMetadataColumn.setLength(length);
      Integer precision=column.getPrecision();
      if (precision == null) {
        precision=0;
      }
      createMetadataColumn.setPrecision(precision);
      createMetadataColumn.setPattern(column.getPattern());
      createMetadataColumn.setNullable(column.isNullable());
      createMetadataColumn.setOriginalField(column.getOriginalDbColumnName());
      createMetadataColumn.setTalendType(column.getTalendType());
      createMetadataColumn.setSourceType(column.getType());
      createMetadataTable.getColumns().add(createMetadataColumn);
    }
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,GenericPackage.class);
    if (g != null) {
      g.getOwnedElement().add(createMetadataTable);
    }
 else {
      GenericPackage gpkg=ConnectionFactory.eINSTANCE.createGenericPackage();
      PackageHelper.addMetadataTable(createMetadataTable,gpkg);
      ConnectionHelper.addPackage(gpkg,connection);
    }
    item.setProperty(property);
    item.setConnection(connection);
    IPath path=metadataService.getPathForSaveAsGenericSchema();
    if (path == null) {
      this.saveMetaData(item,new Path(""String_Node_Str""));
    }
 else {
      this.saveMetaData(item,path);
    }
    RepositoryManager.refreshCreatedNode(ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  }
}","@Override public void execute(){
  if (extendedTableModel instanceof MetadataTableEditor) {
    MetadataTableEditor editor=(MetadataTableEditor)extendedTableModel;
    IMetadataTable metadataTable=editor.getMetadataTable();
    List<IMetadataColumn> listColumns=metadataTable.getListColumns();
    if (listColumns == null || listColumns.size() == 0) {
      return;
    }
    RepositoryNode genericSchemaNode=getGenericSchemaNode();
    boolean isGenericSchemaExisting=false;
    RepositoryObject repositoryObject=null;
    if (genericSchemaNode != null) {
    }
    IMetadataService metadataService=CoreRuntimePlugin.getInstance().getMetadataService();
    if (metadataService == null) {
      return;
    }
    WizardDialog dialog=metadataService.getGenericSchemaWizardDialog(new Shell(),PlatformUI.getWorkbench(),false,null,null,true);
    dialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
    dialog.create();
    Property property=null;
    if (dialog.open() != 0) {
      return;
    }
 else {
      property=metadataService.getPropertyFromWizardDialog();
    }
    repositoryObject=new RepositoryObject();
    GenericSchemaConnectionItem item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    String nextId=factory.getNextId();
    property.setId(nextId);
    GenericSchemaConnection connection=ConnectionFactory.eINSTANCE.createGenericSchemaConnection();
    connection.setLabel(""String_Node_Str"");
    connection.setComment(""String_Node_Str"");
    if (this.dbmsId != null && this.dbmsId.length() > 0) {
      connection.setMappingTypeId(this.dbmsId);
      connection.setMappingTypeUsed(true);
    }
    MetadataTable createMetadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getNextId();
    metadataTable.setId(nextId);
    if (createMetadataTable.getNamespace() instanceof Package) {
      Package pkg=(Package)createMetadataTable.getNamespace();
      pkg.getDataManager().add(connection);
    }
    createMetadataTable.setLabel(""String_Node_Str"");
    for (    IMetadataColumn column : listColumns) {
      MetadataColumn createMetadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      createMetadataColumn.setComment(column.getComment());
      createMetadataColumn.setLabel(column.getLabel());
      createMetadataColumn.setDefaultValue(column.getDefault());
      createMetadataColumn.setId(column.getId() + ""String_Node_Str"");
      createMetadataColumn.setKey(column.isKey());
      Integer length=column.getLength();
      if (length == null) {
        length=0;
      }
      createMetadataColumn.setLength(length);
      Integer precision=column.getPrecision();
      if (precision == null) {
        precision=0;
      }
      createMetadataColumn.setPrecision(precision);
      createMetadataColumn.setPattern(column.getPattern());
      createMetadataColumn.setNullable(column.isNullable());
      createMetadataColumn.setOriginalField(column.getOriginalDbColumnName());
      createMetadataColumn.setTalendType(column.getTalendType());
      createMetadataColumn.setSourceType(column.getType());
      createMetadataTable.getColumns().add(createMetadataColumn);
    }
    GenericPackage g=(GenericPackage)ConnectionHelper.getPackage(connection.getName(),connection,GenericPackage.class);
    if (g != null) {
      g.getOwnedElement().add(createMetadataTable);
    }
 else {
      GenericPackage gpkg=ConnectionFactory.eINSTANCE.createGenericPackage();
      PackageHelper.addMetadataTable(createMetadataTable,gpkg);
      ConnectionHelper.addPackage(gpkg,connection);
    }
    item.setProperty(property);
    item.setConnection(connection);
    IPath path=metadataService.getPathForSaveAsGenericSchema();
    if (path == null) {
      this.saveMetaData(item,new Path(""String_Node_Str""));
    }
 else {
      this.saveMetaData(item,path);
    }
  }
}",0.986223159985106
129673,"public XmlFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),(Connection)connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(XmlFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(XmlFileConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
}","public XmlFileWizard(IWorkbench workbench,boolean creation,RepositoryNode node,String[] existingNames){
  super(workbench,creation);
  this.selection=selection;
  this.existingNames=existingNames;
  setNeedsProgressMonitor(true);
switch (node.getType()) {
case SIMPLE_FOLDER:
case REPOSITORY_ELEMENT:
    pathToSave=RepositoryNodeUtilities.getPath(node);
  break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
break;
}
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
MetadataTable metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
metadataTable.setId(factory.getNextId());
RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
if (record != null) {
PackageHelper.addMetadataTable(metadataTable,record);
}
 else {
RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
newrecord.setName(connection.getName());
ConnectionHelper.addPackage(newrecord,connection);
PackageHelper.addMetadataTable(metadataTable,newrecord);
}
connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
connectionProperty.setStatusCode(""String_Node_Str"");
connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
connectionItem.setProperty(connectionProperty);
connectionItem.setConnection(connection);
break;
case REPOSITORY_ELEMENT:
connection=(XmlFileConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
connectionProperty=node.getObject().getProperty();
connectionItem=(XmlFileConnectionItem)node.getObject().getProperty().getItem();
setRepositoryObject(node.getObject());
isRepositoryObjectEditable();
initLockStrategy();
break;
}
if (!creation) {
this.originaleObjectLabel=this.connectionItem.getProperty().getLabel();
this.originalVersion=this.connectionItem.getProperty().getVersion();
this.originalDescription=this.connectionItem.getProperty().getDescription();
this.originalPurpose=this.connectionItem.getProperty().getPurpose();
this.originalStatus=this.connectionItem.getProperty().getStatusCode();
}
}",0.9975825946817084
129674,"public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}","@Override public ConnectionItem getConnectionItem(){
  return this.connectionItem;
}",0.9367088607594936
129675,"/** 
 * Adding the page to the wizard.
 */
public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  propertiesWizardPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_XML,!isRepositoryObjectEditable(),creation);
  xmlFileSelectPage=new XmlFileSelectWizardPage(creation,connectionItem,isRepositoryObjectEditable(),existingNames);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_XML_WIZ));
  if (connection != null) {
    List schemas=connection.getSchema();
    if (!schemas.isEmpty()) {
      XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
      oldAbstractQueryPath=currentSchema.getAbsoluteXPathQuery();
    }
  }
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    propertiesWizardPage.setPageComplete(false);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  if (isToolbar) {
    pathToSave=null;
  }
  propertiesWizardPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_FILE_XML,!isRepositoryObjectEditable(),creation);
  xmlFileSelectPage=new XmlFileSelectWizardPage(creation,connectionItem,isRepositoryObjectEditable(),existingNames);
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_FILE_XML_WIZ));
  if (connection != null) {
    List schemas=connection.getSchema();
    if (!schemas.isEmpty()) {
      XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
      oldAbstractQueryPath=currentSchema.getAbsoluteXPathQuery();
    }
  }
  if (creation) {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    propertiesWizardPage.setPageComplete(false);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
 else {
    setWindowTitle(Messages.getString(""String_Node_Str""));
    propertiesWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    propertiesWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    addPage(propertiesWizardPage);
    xmlFileSelectPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"")+ ""String_Node_Str"");
    xmlFileSelectPage.setDescription(""String_Node_Str"");
    addPage(xmlFileSelectPage);
    xmlFileSelectPage.setPageComplete(true);
  }
}",0.9975562072336266
129676,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
        EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
        if (schema != null && schema.size() > 0) {
          XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
          if (xmlXPathLoopDescriptor != null) {
            EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
            if (schemaTargets != null && schemaTargets.size() > 0) {
              for (              SchemaTarget schemaTarget : schemaTargets) {
                schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
              }
            }
          }
        }
        Map<String,MetadataColumn> columnsMap=new HashMap<String,MetadataColumn>();
        MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
        for (        MetadataTable table : tables) {
          EList<MetadataColumn> columns=table.getColumns();
          Iterator<MetadataColumn> columnsIter=columns.iterator();
          while (columnsIter.hasNext()) {
            MetadataColumn column=columnsIter.next();
            if (schemaTargetMap.get(column.getLabel()) == null) {
              columnsIter.remove();
            }
 else {
              columnsMap.put(column.getLabel(),column);
            }
          }
        }
        boolean hasAddedColumns=false;
        Iterator<Entry<String,SchemaTarget>> schemaTargetIter=schemaTargetMap.entrySet().iterator();
        while (schemaTargetIter.hasNext()) {
          Map.Entry<String,SchemaTarget> entry=schemaTargetIter.next();
          String key=entry.getKey();
          if (columnsMap.get(key) == null) {
            hasAddedColumns=true;
            break;
          }
        }
        if (hasAddedColumns) {
          MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
 else {
        connectionProperty.setLabel(connectionProperty.getDisplayName());
        Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
        EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
        if (schema != null && schema.size() > 0) {
          XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
          if (xmlXPathLoopDescriptor != null) {
            EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
            if (schemaTargets != null && schemaTargets.size() > 0) {
              for (              SchemaTarget schemaTarget : schemaTargets) {
                schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
              }
            }
          }
        }
        Map<String,MetadataColumn> columnsMap=new HashMap<String,MetadataColumn>();
        MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
        for (        MetadataTable table : tables) {
          EList<MetadataColumn> columns=table.getColumns();
          Iterator<MetadataColumn> columnsIter=columns.iterator();
          while (columnsIter.hasNext()) {
            MetadataColumn column=columnsIter.next();
            if (schemaTargetMap.get(column.getLabel()) == null) {
              columnsIter.remove();
            }
 else {
              columnsMap.put(column.getLabel(),column);
            }
          }
        }
        boolean hasAddedColumns=false;
        Iterator<Entry<String,SchemaTarget>> schemaTargetIter=schemaTargetMap.entrySet().iterator();
        while (schemaTargetIter.hasNext()) {
          Map.Entry<String,SchemaTarget> entry=schemaTargetIter.next();
          String key=entry.getKey();
          if (columnsMap.get(key) == null) {
            hasAddedColumns=true;
            break;
          }
        }
        if (hasAddedColumns) {
          MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(connectionItem);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.7966490299823633
129677,"@Override public Saveable[] getSaveables(){
  return null;
}","@Override public Saveable[] getSaveables(){
  return new Saveable[0];
}",0.8854961832061069
129678,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        String id=null;
        String label=null;
        boolean isfirst=true;
        boolean needSys=true;
        for (        IRepositoryViewObject object : selectedVersionItems) {
          Item selectedItem=object.getProperty().getItem();
          final Item copy=factory.copy(selectedItem,path);
          if (isfirst) {
            id=copy.getProperty().getId();
            label=copy.getProperty().getLabel();
            isfirst=false;
          }
          copy.getProperty().setId(id);
          copy.getProperty().setLabel(label);
          copy.getProperty().setDisplayName(label);
          if (needSys && originalItem instanceof RoutineItem) {
            String lastestVersion=getLastestVersion(selectedVersionItems);
            if (lastestVersion.equals(copy.getProperty().getVersion())) {
              synDuplicatedRoutine((RoutineItem)copy);
              needSys=false;
            }
          }
          RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
            @Override protected void run() throws LoginException, PersistenceException {
              if (copy instanceof ProcessItem) {
                RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
              }
              factory.save(copy);
            }
          }
;
          workUnit.setAvoidUnloadResources(true);
          factory.executeRepositoryWorkUnit(workUnit);
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        String id=null;
        String label=null;
        boolean isfirst=true;
        boolean needSys=true;
        for (        IRepositoryViewObject object : selectedVersionItems) {
          Item selectedItem=object.getProperty().getItem();
          final Item copy=factory.copy(selectedItem,path);
          if (isfirst) {
            id=copy.getProperty().getId();
            label=copy.getProperty().getLabel();
            isfirst=false;
          }
          copy.getProperty().setId(id);
          copy.getProperty().setLabel(label);
          copy.getProperty().setDisplayName(label);
          if (needSys && originalItem instanceof RoutineItem) {
            String lastestVersion=getLastestVersion(selectedVersionItems);
            if (lastestVersion.equals(copy.getProperty().getVersion())) {
              synDuplicatedRoutine((RoutineItem)copy);
              needSys=false;
            }
          }
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor monitor) throws CoreException {
              if (copy instanceof ProcessItem) {
                RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
              }
              try {
                factory.save(copy);
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
}",0.7110326566637246
129679,"/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}","/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (isDnd && sourceNode.getObjectType() == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}",0.9827612052166091
129680,"private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
            columnMap.get(colName).setKey(true);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}","private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata) || MetadataConnectionUtils.isHive(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
            columnMap.get(colName).setKey(true);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}",0.5007347538574578
129681,"@Override public void onFinish(ITestContext testContext){
  try {
    if (testCaseScreenRecorder != null) {
      testCaseScreenRecorder.stop();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    testCaseScreenRecorder=null;
  }
  super.onFinish(testContext);
}","@Override public void onFinish(ITestContext testContext){
  try {
    if (testCaseScreenRecorder != null && testCaseScreenRecorder.getState() == State.RECORDING) {
      testCaseScreenRecorder.stop();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    testCaseScreenRecorder=null;
  }
  super.onFinish(testContext);
}",0.9122257053291536
129682,"public void onTestListener(ITestContext context,final String imgFilePath){
  TestRunner runner=(TestRunner)context;
  runner.addListener(new TestListenerAdapter(){
    @Override public void onTestFailure(    ITestResult tr){
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      String methodName=tr.getMethod().getMethodName();
      int lineNumber=0;
      for (      StackTraceElement element : tr.getThrowable().getStackTrace()) {
        if (methodName.equals(element.getMethodName())) {
          lineNumber=element.getLineNumber();
        }
      }
      String name=testCaseInfo + ""String_Node_Str"" + lineNumber+ ""String_Node_Str"";
      try {
        captureScreenshot(imgFilePath + File.separator + name);
        System.out.println(imgFilePath + File.separator + name);
      }
 catch (      Exception e) {
      }
      this.setTestCaseResultInfo(failedTestCases,testCaseInfo,Result.f);
    }
    @Override public void onTestSuccess(    ITestResult tr){
      super.onTestSuccess(tr);
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      this.setTestCaseResultInfo(successTestCases,testCaseInfo,Result.p);
    }
    @Override public void onTestStart(    ITestResult tr){
      String testCaseInfo=this.getTestCaseInfo(tr);
      try {
        testCaseScreenRecorder=testCaseRecorder.getScreenRecorder(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
        logger.info(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
        if (testCaseScreenRecorder == null) {
          logger.info(""String_Node_Str"");
        }
        testCaseScreenRecorder.start();
      }
 catch (      Exception e) {
        logger.info(e.getMessage());
        e.printStackTrace();
      }
      super.onTestStart(tr);
    }
    @Override public void onFinish(    ITestContext testContext){
      try {
        if (testCaseScreenRecorder != null) {
          testCaseScreenRecorder.stop();
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        testCaseScreenRecorder=null;
      }
      super.onFinish(testContext);
    }
    public String getTestCaseInfo(    ITestResult tr){
      IClass clazz=tr.getTestClass();
      String className=clazz.getRealClass().getSimpleName();
      String methodName=tr.getMethod().getMethodName();
      String parameter=""String_Node_Str"";
      try {
        for (        Object param : tr.getParameters()) {
          String par=(String)param;
          parameter=parameter + ""String_Node_Str"" + par.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        for (        Object param : tr.getParameters()) {
        }
        ex.printStackTrace();
      }
      if (parameter != null && !""String_Node_Str"".equals(parameter.trim())) {
        parameter=parameter.substring(1);
      }
      return className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameter+ ""String_Node_Str"";
    }
    public void setTestCaseResultInfo(    List<TestCase> testcases,    String testCaseInfo,    Result result){
      TestCase testCase=new TestCase();
      String testlinkProject=System.getProperty(""String_Node_Str"");
      String testlinkId=System.getProperty(""String_Node_Str"");
      int id=Integer.parseInt(testlinkId.substring(testlinkProject.length() + 1));
      testCase.setId(id);
      testCase.setResult(result);
      testCase.setNote(testCaseInfo + ""String_Node_Str"");
      testCase.setComment(testCaseInfo);
      testcases.add(testCase);
    }
  }
);
}","public void onTestListener(ITestContext context,final String imgFilePath){
  TestRunner runner=(TestRunner)context;
  runner.addListener(new TestListenerAdapter(){
    @Override public void onTestFailure(    ITestResult tr){
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      String methodName=tr.getMethod().getMethodName();
      int lineNumber=0;
      for (      StackTraceElement element : tr.getThrowable().getStackTrace()) {
        if (methodName.equals(element.getMethodName())) {
          lineNumber=element.getLineNumber();
        }
      }
      String name=testCaseInfo + ""String_Node_Str"" + lineNumber+ ""String_Node_Str"";
      try {
        captureScreenshot(imgFilePath + File.separator + name);
        System.out.println(imgFilePath + File.separator + name);
      }
 catch (      Exception e) {
      }
      this.setTestCaseResultInfo(failedTestCases,testCaseInfo,Result.f);
    }
    @Override public void onTestSuccess(    ITestResult tr){
      super.onTestSuccess(tr);
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      this.setTestCaseResultInfo(successTestCases,testCaseInfo,Result.p);
    }
    @Override public void onTestStart(    ITestResult tr){
      String testCaseInfo=this.getTestCaseInfo(tr);
      try {
        testCaseScreenRecorder=testCaseRecorder.getScreenRecorder(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
        logger.info(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
        if (testCaseScreenRecorder == null) {
          logger.info(""String_Node_Str"");
        }
        testCaseScreenRecorder.start();
      }
 catch (      Exception e) {
        logger.info(e.getMessage());
        e.printStackTrace();
      }
      super.onTestStart(tr);
    }
    @Override public void onFinish(    ITestContext testContext){
      try {
        if (testCaseScreenRecorder != null && testCaseScreenRecorder.getState() == State.RECORDING) {
          testCaseScreenRecorder.stop();
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        testCaseScreenRecorder=null;
      }
      super.onFinish(testContext);
    }
    public String getTestCaseInfo(    ITestResult tr){
      IClass clazz=tr.getTestClass();
      String className=clazz.getRealClass().getSimpleName();
      String methodName=tr.getMethod().getMethodName();
      String parameter=""String_Node_Str"";
      try {
        for (        Object param : tr.getParameters()) {
          String par=(String)param;
          parameter=parameter + ""String_Node_Str"" + par.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        for (        Object param : tr.getParameters()) {
        }
        ex.printStackTrace();
      }
      if (parameter != null && !""String_Node_Str"".equals(parameter.trim())) {
        parameter=parameter.substring(1);
      }
      return className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameter+ ""String_Node_Str"";
    }
    public void setTestCaseResultInfo(    List<TestCase> testcases,    String testCaseInfo,    Result result){
      TestCase testCase=new TestCase();
      String testlinkProject=System.getProperty(""String_Node_Str"");
      String testlinkId=System.getProperty(""String_Node_Str"");
      int id=Integer.parseInt(testlinkId.substring(testlinkProject.length() + 1));
      testCase.setId(id);
      testCase.setResult(result);
      testCase.setNote(testCaseInfo + ""String_Node_Str"");
      testCase.setComment(testCaseInfo);
      testcases.add(testCase);
    }
  }
);
}",0.9924036896364624
129683,"@Override protected void okPressed(){
  IPreferenceStore preferenceStore=getPreferenceStore();
  final List<String> filteredContents=getFilteredContents();
  String relust=convertToString(filteredContents,RepositoryManager.ITEM_SEPARATOR);
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_NODE,relust.length() > 2 ? relust.substring(0,relust.length() - 2) : relust);
  String status=convertToString(uncheckedStatus,RepositoryManager.ITEM_SEPARATOR);
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_STATUS,status.length() > 2 ? status.substring(0,status.length() - 2) : status);
  String users=convertToString(uncheckedUser,RepositoryManager.ITEM_SEPARATOR);
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_USER,users.length() > 2 ? users.substring(0,users.length() - 2) : users);
  boolean canUserFilterEnable=this.userFilterPattern.getText() != null && !""String_Node_Str"".equals(this.userFilterPattern.getText());
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_NAME,this.userFilterPattern.getText());
  preferenceStore.setValue(IRepositoryPrefConstants.TAG_USER_DEFINED_PATTERNS_ENABLED,this.enableUserPatternBtn.getSelection() && canUserFilterEnable);
  preferenceStore.setValue(IRepositoryPrefConstants.USER_FILTER_TABLE_ENABLED,!allUsersBtn.getSelection());
  super.okPressed();
  RepositoryNodeFilterHelper.filter(actionSite,isActivedFilter(),false);
}","@Override protected void okPressed(){
  IPreferenceStore preferenceStore=getPreferenceStore();
  final List<String> filteredContents=getFilteredContents();
  String relust=convertToString(filteredContents,RepositoryManager.ITEM_SEPARATOR);
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_NODE,relust.length() > 2 ? relust.substring(0,relust.length() - 2) : relust);
  String status=convertToString(uncheckedStatus,RepositoryManager.ITEM_SEPARATOR);
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_STATUS,status.length() > 2 ? status.substring(0,status.length() - 2) : status);
  String users=convertToString(uncheckedUser,RepositoryManager.ITEM_SEPARATOR);
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_USER,users.length() > 2 ? users.substring(0,users.length() - 2) : users);
  boolean canUserFilterEnable=this.userFilterPattern.getText() != null && !""String_Node_Str"".equals(this.userFilterPattern.getText());
  preferenceStore.setValue(IRepositoryPrefConstants.FILTER_BY_NAME,this.userFilterPattern.getText());
  preferenceStore.setValue(IRepositoryPrefConstants.TAG_USER_DEFINED_PATTERNS_ENABLED,this.enableUserPatternBtn.getSelection() && canUserFilterEnable);
  preferenceStore.setValue(IRepositoryPrefConstants.USER_FILTER_TABLE_ENABLED,!allUsersBtn.getSelection());
  super.okPressed();
  RepositoryNodeFilterHelper.filter(actionSite,isActivedFilter(),isPerspectiveFilter(),false);
}",0.9922752808988764
129684,"public RepositoryFilterSettingDialog(final ICommonActionExtensionSite actionSite,final boolean activedFilter){
  super(actionSite.getViewSite().getShell());
  setShellStyle(getShellStyle() | SWT.MAX | SWT.MIN| SWT.RESIZE| SWT.APPLICATION_MODAL);
  this.actionSite=actionSite;
  this.activedFilter=activedFilter;
}","public RepositoryFilterSettingDialog(final ICommonActionExtensionSite actionSite,final boolean activedFilter,boolean isPerspectiveFilter){
  super(actionSite.getViewSite().getShell());
  setShellStyle(getShellStyle() | SWT.MAX | SWT.MIN| SWT.RESIZE| SWT.APPLICATION_MODAL);
  this.actionSite=actionSite;
  this.activedFilter=activedFilter;
  this.isPerspectiveFilter=isPerspectiveFilter;
}",0.8917378917378918
129685,"@Override public void restoreState(IMemento aMemento){
  super.restoreState(aMemento);
  doFiltering(isActivedFilter(),true);
}","@Override public void restoreState(IMemento aMemento){
  super.restoreState(aMemento);
  if (aMemento != null) {
    Integer isFilteringInt=aMemento.getInteger(IS_FILTERING_WITH_PERSPECTIVE);
    if (isFilteringInt != null) {
      isPerspectiveFiltering=isFilteringInt.intValue() == 1;
    }
  }
  doFiltering(isActivedFilter(),true);
}",0.5474137931034483
129686,"private void doFiltering(boolean filtering,boolean restoring){
  RepositoryNodeFilterHelper.filter(this.getActionSite(),filtering,restoring);
}","private void doFiltering(boolean filtering,boolean restoring){
  RepositoryNodeFilterHelper.filter(this.getActionSite(),filtering,isPerspectiveFiltering,restoring);
}",0.9255663430420712
129687,"@Override public void run(){
  super.run();
  final ICommonActionExtensionSite actionSite=RepositoryFilterSettingActionProvider.this.getActionSite();
  RepositoryFilterSettingDialog dialog=new RepositoryFilterSettingDialog(actionSite,isActivedFilter());
  if (dialog.open() == Window.OK) {
    actionSite.getStructuredViewer().refresh();
  }
}","@Override public void run(){
  super.run();
  final ICommonActionExtensionSite actionSite=RepositoryFilterSettingActionProvider.this.getActionSite();
  RepositoryFilterSettingDialog dialog=new RepositoryFilterSettingDialog(actionSite,isActivedFilter(),isPecpectiveFiltering);
  if (dialog.open() == Window.OK) {
    actionSite.getStructuredViewer().refresh();
  }
}",0.9689265536723164
129688,"public static void filter(final ICommonActionExtensionSite commonActionSite,boolean activedFilter,boolean restoring){
  processContentExtensions(commonActionSite,activedFilter);
  processCommonFilters(commonActionSite,activedFilter);
}","public static void filter(final ICommonActionExtensionSite commonActionSite,boolean activedFilter,boolean isPerspectiveFilter,boolean restoring){
  processContentExtensions(commonActionSite,activedFilter,isPerspectiveFilter);
  processCommonFilters(commonActionSite,activedFilter);
}",0.9073359073359072
129689,"private static void processContentExtensions(final ICommonActionExtensionSite commonActionSite,boolean activedFilter){
  final CommonViewer commonViewer=(CommonViewer)commonActionSite.getStructuredViewer();
  final INavigatorContentService contentService=commonActionSite.getContentService();
  final INavigatorContentDescriptor[] visibleExtensions=contentService.getVisibleExtensions();
  String[] filteredContents=RepositoryViewPlugin.getDefault().getPreferenceValues(IRepositoryPrefConstants.FILTER_BY_NODE);
  List<String> filteredContentsList=new ArrayList<String>();
  if (filteredContents != null) {
    filteredContentsList=Arrays.asList(filteredContents);
  }
  List<String> checkedExtensions=new ArrayList<String>();
  for (int i=0; i < visibleExtensions.length; i++) {
    String id=visibleExtensions[i].getId();
    if (!activedFilter || activedFilter && !filteredContentsList.contains(id)) {
      checkedExtensions.add(id);
    }
  }
  String[] contentExtensionIdsToActivate=(String[])checkedExtensions.toArray(new String[checkedExtensions.size()]);
  UpdateActiveExtensionsOperation updateExtensions=new UpdateActiveExtensionsOperation(commonViewer,contentExtensionIdsToActivate);
  updateExtensions.execute(null,null);
}","private static void processContentExtensions(final ICommonActionExtensionSite commonActionSite,boolean activeFilter,boolean activedPerspectiveFilter){
  final CommonViewer commonViewer=(CommonViewer)commonActionSite.getStructuredViewer();
  final INavigatorContentService contentService=commonActionSite.getContentService();
  final INavigatorContentDescriptor[] visibleExtensions=contentService.getVisibleExtensions();
  List<String> visibleIDsForPecpective=new ArrayList<String>();
  List<String> visibleIdsForActiveFilter=new ArrayList<String>();
  for (  INavigatorContentDescriptor nd : visibleExtensions) {
    visibleIdsForActiveFilter.add(nd.getId());
  }
  if (activedPerspectiveFilter) {
    String perspectiveId=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective().getId();
    PerspectiveFilterActionProvider pvFilter=new PerspectiveFilterActionProvider();
    pvFilter.getHelper().setTreeViewer(commonViewer);
    pvFilter.getHelper().setNavigatorContentService(contentService);
    pvFilter.getHelper().setActionProviderId(pvFilter.ID);
    String[] pvExtensions=pvFilter.getHelper().getExtensionIdsToActivate(perspectiveId);
    if (pvExtensions != null && pvExtensions.length > 0) {
      visibleIDsForPecpective=Arrays.asList(pvExtensions);
    }
    visibleIdsForActiveFilter.retainAll(visibleIDsForPecpective);
  }
  String[] filteredContents=RepositoryViewPlugin.getDefault().getPreferenceValues(IRepositoryPrefConstants.FILTER_BY_NODE);
  List<String> filteredContentsList=new ArrayList<String>();
  if (filteredContents != null) {
    filteredContentsList=Arrays.asList(filteredContents);
  }
  List<String> checkedExtensions=new ArrayList<String>();
  for (  String id : visibleIdsForActiveFilter) {
    if (!activedPerspectiveFilter || (activedPerspectiveFilter && !filteredContentsList.contains(id))) {
      checkedExtensions.add(id);
    }
  }
  String[] contentExtensionIdsToActivate=(String[])checkedExtensions.toArray(new String[checkedExtensions.size()]);
  UpdateActiveExtensionsOperation updateExtensions=new UpdateActiveExtensionsOperation(commonViewer,contentExtensionIdsToActivate);
  updateExtensions.execute(null,null);
}",0.5122520420070011
129690,"/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    if (metadataTable != null && t.getLabel().equals(metadataTable.getLabel())) {
      this.metadataTable=t;
      break;
    }
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}","/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    this.metadataTable=t;
    break;
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}",0.7265415549597856
129691,"public boolean updateUser(String email,String pseudo,String oldPassword,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.updateUser(email,pseudo,oldPassword,password,firstname,lastname,country,version,brandingService.getShortProductName(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result != null && result.signum() > 0) {
      PlatformUI.getPreferenceStore().setValue(""String_Node_Str"",1);
      saveRegistoryBean();
      registNumber=result.longValue();
      PreferenceManipulator prefManipulator=new PreferenceManipulator();
      if (prefManipulator.readConnections().isEmpty()) {
        ConnectionBean recup=ConnectionBean.getDefaultConnectionBean();
        recup.setUser(email);
        recup.setComplete(true);
        prefManipulator.addConnection(recup);
      }
    }
 else {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    decrementTry();
    increaseFailRegisterTimes();
    throw new BusinessException(e);
  }
  if (result != null) {
    return result.signum() > 0;
  }
 else {
    return false;
  }
}","public boolean updateUser(String email,String pseudo,String oldPassword,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.updateUser(email,pseudo,oldPassword,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result != null && result.signum() > 0) {
      PlatformUI.getPreferenceStore().setValue(""String_Node_Str"",1);
      saveRegistoryBean();
      registNumber=result.longValue();
      PreferenceManipulator prefManipulator=new PreferenceManipulator();
      if (prefManipulator.readConnections().isEmpty()) {
        ConnectionBean recup=ConnectionBean.getDefaultConnectionBean();
        recup.setUser(email);
        recup.setComplete(true);
        prefManipulator.addConnection(recup);
      }
    }
 else {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    decrementTry();
    increaseFailRegisterTimes();
    throw new BusinessException(e);
  }
  if (result != null) {
    return result.signum() > 0;
  }
 else {
    return false;
  }
}",0.9952173008941568
129692,"public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.createUser50(pseudo,password,firstname,lastname,country,version,brandingService.getShortProductName(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}","public boolean createUser(String pseudo,String password,String firstname,String lastname,String country,boolean isProxyEnabled,String proxyHost,String proxyPort) throws BusinessException {
  BigInteger result=BigInteger.valueOf(-1);
  registNumber=null;
  if (isProxyEnabled) {
    System.setProperty(""String_Node_Str"",proxyHost);
    System.setProperty(""String_Node_Str"",proxyPort);
    if (proxyPort != null && proxyPort.trim().equals(""String_Node_Str"")) {
      proxyPort=null;
    }
    SiteManager.setHttpProxyInfo(true,proxyHost,proxyPort);
  }
  String osName=System.getProperty(""String_Node_Str"");
  String osVersion=System.getProperty(""String_Node_Str"");
  String javaVersion=System.getProperty(""String_Node_Str"");
  long totalMemory=Runtime.getRuntime().totalMemory();
  com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
  int nbProc=Runtime.getRuntime().availableProcessors();
  String version=VersionUtils.getVersion();
  RegisterUserPortTypeProxy proxy=new RegisterUserPortTypeProxy();
  proxy.setEndpoint(""String_Node_Str"");
  try {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    result=proxy.createUser50(pseudo,password,firstname,lastname,country,version,brandingService.getAcronym(),osName,osVersion,javaVersion,totalMemory + ""String_Node_Str"",memRAM + ""String_Node_Str"",nbProc + ""String_Node_Str"");
    if (result.intValue() != -110 && result.signum() < 0) {
      checkErrors(result.intValue());
    }
  }
 catch (  RemoteException e) {
    throw new BusinessException(e);
  }
  return result.intValue() == -110;
}",0.993584379358438
129693,"/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    if (metadataTable != null && t.getLabel().equals(metadataTable.getLabel())) {
      this.metadataTable=t;
      break;
    }
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}","/** 
 * TableForm Constructor to use by RCP Wizard.
 * @param parent
 * @param connection
 * @param page
 * @param metadataTable
 * @param page
 * @param managerConnection2
 */
public DatabaseTableForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,ManagerConnection managerConnection,IWizardPage page,DatabaseConnection temConnection,IMetadataConnection metadataconnection){
  super(parent,SWT.NONE);
  this.managerConnection=managerConnection;
  this.connectionItem=connectionItem;
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  this.metadataconnection=metadataconnection;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    this.metadataTable=t;
    break;
  }
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm();
}",0.7265415549597856
129694,"@Override public void onFinish(ITestContext testContext){
  System.out.println(""String_Node_Str"");
  try {
    System.out.println(""String_Node_Str"");
    if (testCaseScreenRecorder != null) {
      testCaseScreenRecorder.stop();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    testCaseScreenRecorder=null;
  }
  super.onFinish(testContext);
}","@Override public void onFinish(ITestContext testContext){
  try {
    if (testCaseScreenRecorder != null) {
      testCaseScreenRecorder.stop();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    testCaseScreenRecorder=null;
  }
  super.onFinish(testContext);
}",0.8618618618618619
129695,"public void onTestListener(ITestContext context,final String imgFilePath){
  TestRunner runner=(TestRunner)context;
  runner.addListener(new TestListenerAdapter(){
    @Override public void onTestFailure(    ITestResult tr){
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      String methodName=tr.getMethod().getMethodName();
      int lineNumber=0;
      for (      StackTraceElement element : tr.getThrowable().getStackTrace()) {
        if (methodName.equals(element.getMethodName())) {
          lineNumber=element.getLineNumber();
        }
      }
      String name=testCaseInfo + ""String_Node_Str"" + lineNumber+ ""String_Node_Str"";
      try {
        captureScreenshot(imgFilePath + File.separator + name);
        System.out.println(imgFilePath + File.separator + name);
      }
 catch (      Exception e) {
      }
      this.setTestCaseResultInfo(failedTestCases,testCaseInfo,Result.f);
    }
    @Override public void onTestSuccess(    ITestResult tr){
      super.onTestSuccess(tr);
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      this.setTestCaseResultInfo(successTestCases,testCaseInfo,Result.p);
    }
    @Override public void onTestStart(    ITestResult tr){
      String testCaseInfo=this.getTestCaseInfo(tr);
      try {
        testCaseScreenRecorder=testCaseRecorder.getScreenRecorder(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
        logger.info(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
      }
 catch (      Exception e) {
        logger.info(e.getMessage());
        e.printStackTrace();
      }
      if (testCaseScreenRecorder == null) {
{
          logger.info(""String_Node_Str"");
        }
      }
      super.onTestStart(tr);
    }
    @Override public void onFinish(    ITestContext testContext){
      System.out.println(""String_Node_Str"");
      try {
        System.out.println(""String_Node_Str"");
        if (testCaseScreenRecorder != null) {
          testCaseScreenRecorder.stop();
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        testCaseScreenRecorder=null;
      }
      super.onFinish(testContext);
    }
    public String getTestCaseInfo(    ITestResult tr){
      IClass clazz=tr.getTestClass();
      String className=clazz.getRealClass().getSimpleName();
      String methodName=tr.getMethod().getMethodName();
      String parameter=""String_Node_Str"";
      try {
        for (        Object param : tr.getParameters()) {
          String par=(String)param;
          parameter=parameter + ""String_Node_Str"" + par.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        for (        Object param : tr.getParameters()) {
        }
        ex.printStackTrace();
      }
      if (parameter != null && !""String_Node_Str"".equals(parameter.trim())) {
        parameter=parameter.substring(1);
      }
      return className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameter+ ""String_Node_Str"";
    }
    public void setTestCaseResultInfo(    List<TestCase> testcases,    String testCaseInfo,    Result result){
      TestCase testCase=new TestCase();
      String testlinkProject=System.getProperty(""String_Node_Str"");
      String testlinkId=System.getProperty(""String_Node_Str"");
      int id=Integer.parseInt(testlinkId.substring(testlinkProject.length() + 1));
      testCase.setId(id);
      testCase.setResult(result);
      testCase.setNote(testCaseInfo + ""String_Node_Str"");
      testCase.setComment(testCaseInfo);
      testcases.add(testCase);
    }
  }
);
}","public void onTestListener(ITestContext context,final String imgFilePath){
  TestRunner runner=(TestRunner)context;
  runner.addListener(new TestListenerAdapter(){
    @Override public void onTestFailure(    ITestResult tr){
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      String methodName=tr.getMethod().getMethodName();
      int lineNumber=0;
      for (      StackTraceElement element : tr.getThrowable().getStackTrace()) {
        if (methodName.equals(element.getMethodName())) {
          lineNumber=element.getLineNumber();
        }
      }
      String name=testCaseInfo + ""String_Node_Str"" + lineNumber+ ""String_Node_Str"";
      try {
        captureScreenshot(imgFilePath + File.separator + name);
        System.out.println(imgFilePath + File.separator + name);
      }
 catch (      Exception e) {
      }
      this.setTestCaseResultInfo(failedTestCases,testCaseInfo,Result.f);
    }
    @Override public void onTestSuccess(    ITestResult tr){
      super.onTestSuccess(tr);
      Reporter.setCurrentTestResult(tr);
      String testCaseInfo=this.getTestCaseInfo(tr);
      this.setTestCaseResultInfo(successTestCases,testCaseInfo,Result.p);
    }
    @Override public void onTestStart(    ITestResult tr){
      String testCaseInfo=this.getTestCaseInfo(tr);
      try {
        testCaseScreenRecorder=testCaseRecorder.getScreenRecorder(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
        logger.info(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
        if (testCaseScreenRecorder == null) {
          logger.info(""String_Node_Str"");
        }
        testCaseScreenRecorder.start();
      }
 catch (      Exception e) {
        logger.info(e.getMessage());
        e.printStackTrace();
      }
      super.onTestStart(tr);
    }
    @Override public void onFinish(    ITestContext testContext){
      try {
        if (testCaseScreenRecorder != null) {
          testCaseScreenRecorder.stop();
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        testCaseScreenRecorder=null;
      }
      super.onFinish(testContext);
    }
    public String getTestCaseInfo(    ITestResult tr){
      IClass clazz=tr.getTestClass();
      String className=clazz.getRealClass().getSimpleName();
      String methodName=tr.getMethod().getMethodName();
      String parameter=""String_Node_Str"";
      try {
        for (        Object param : tr.getParameters()) {
          String par=(String)param;
          parameter=parameter + ""String_Node_Str"" + par.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        for (        Object param : tr.getParameters()) {
        }
        ex.printStackTrace();
      }
      if (parameter != null && !""String_Node_Str"".equals(parameter.trim())) {
        parameter=parameter.substring(1);
      }
      return className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameter+ ""String_Node_Str"";
    }
    public void setTestCaseResultInfo(    List<TestCase> testcases,    String testCaseInfo,    Result result){
      TestCase testCase=new TestCase();
      String testlinkProject=System.getProperty(""String_Node_Str"");
      String testlinkId=System.getProperty(""String_Node_Str"");
      int id=Integer.parseInt(testlinkId.substring(testlinkProject.length() + 1));
      testCase.setId(id);
      testCase.setResult(result);
      testCase.setNote(testCaseInfo + ""String_Node_Str"");
      testCase.setComment(testCaseInfo);
      testcases.add(testCase);
    }
  }
);
}",0.9539045553145336
129696,"@Override public void onTestStart(ITestResult tr){
  String testCaseInfo=this.getTestCaseInfo(tr);
  try {
    testCaseScreenRecorder=testCaseRecorder.getScreenRecorder(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
    logger.info(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
  }
 catch (  Exception e) {
    logger.info(e.getMessage());
    e.printStackTrace();
  }
  if (testCaseScreenRecorder == null) {
{
      logger.info(""String_Node_Str"");
    }
  }
  super.onTestStart(tr);
}","@Override public void onTestStart(ITestResult tr){
  String testCaseInfo=this.getTestCaseInfo(tr);
  try {
    testCaseScreenRecorder=testCaseRecorder.getScreenRecorder(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
    logger.info(getAbsoluteFolderPath(""String_Node_Str"") + ""String_Node_Str"" + testCaseInfo);
    if (testCaseScreenRecorder == null) {
      logger.info(""String_Node_Str"");
    }
    testCaseScreenRecorder.start();
  }
 catch (  Exception e) {
    logger.info(e.getMessage());
    e.printStackTrace();
  }
  super.onTestStart(tr);
}",0.8120567375886525
129697,"public void deleteFolder(Project project,ERepositoryObjectType type,IPath path,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(path.toString()) || RepositoryConstants.isGeneratedFolder(path.toString()) || RepositoryConstants.isJobsFolder(path.toString())|| RepositoryConstants.isJobletsFolder(path.toString())) {
    return;
  }
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completePath=new Path(ERepositoryObjectType.getFolderName(type)).append(path).toString();
  IFolder folder=ResourceUtils.getFolder(fsProject,completePath,true);
  getFolderHelper(project.getEmfProject()).deleteFolder(completePath);
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
  ResourceUtils.deleteResource(folder);
}","public void deleteFolder(Project project,ERepositoryObjectType type,IPath path,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (RepositoryConstants.isSystemFolder(path.toString()) || RepositoryConstants.isGeneratedFolder(path.toString()) || RepositoryConstants.isJobsFolder(path.toString())|| RepositoryConstants.isJobletsFolder(path.toString())) {
    return;
  }
  IProject fsProject=ResourceModelUtils.getProject(project);
  String completePath=new Path(ERepositoryObjectType.getFolderName(type)).append(path).toString();
  IFolder folder=ResourceUtils.getFolder(fsProject,completePath,true);
  ResourceUtils.deleteResource(folder);
  getFolderHelper(project.getEmfProject()).deleteFolder(completePath);
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}",0.9489795918367347
129698,"/** 
 * This calls the refresh of the toplevel node, this must be invoke from the UI thread.
 * @param topLevelNode
 */
protected void refreshTopLevelNode(){
  RepositoryNode topLevelNode=getTopLevelNode();
  if (topLevelNode != null) {
    if (isReInit()) {
      topLevelNode.setInitialized(false);
      topLevelNode.getChildren().clear();
    }
    beforeRefreshTopLevelNode();
    if (topLevelNode.getParent() instanceof ProjectRepositoryNode) {
      ((ProjectRepositoryNode)topLevelNode.getParent()).clearNodeAndProjectCash();
    }
    viewer.refresh(topLevelNode);
  }
}","/** 
 * This calls the refresh of the toplevel node, this must be invoke from the UI thread.
 * @param topLevelNode
 */
protected void refreshTopLevelNode(){
  RepositoryNode topLevelNode=getTopLevelNode();
  if (topLevelNode != null) {
    if (isReInit()) {
      topLevelNode.setInitialized(false);
      topLevelNode.getChildren().clear();
    }
    beforeRefreshTopLevelNode();
    if (topLevelNode.getParent() instanceof ProjectRepositoryNode) {
      ((ProjectRepositoryNode)topLevelNode.getParent()).clearNodeAndProjectCash();
    }
    if (viewer != null) {
      viewer.refresh(topLevelNode);
    }
  }
}",0.971476510067114
129699,"@Override public void inputChanged(Viewer arg0,Object arg1,Object arg2){
  this.viewer=(CommonViewer)arg0;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    if (resouceChangeVisitor != null) {
      workspace.removeResourceChangeListener(resouceChangeVisitor);
    }
    resouceChangeVisitor=createResourceChangedVisitor();
    workspace.addResourceChangeListener(resouceChangeVisitor,IResourceChangeEvent.POST_CHANGE);
  }
}","@Override public void inputChanged(Viewer arg0,Object arg1,Object arg2){
  if (arg0 instanceof CommonViewer) {
    this.viewer=(CommonViewer)arg0;
  }
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    if (resouceChangeVisitor != null) {
      workspace.removeResourceChangeListener(resouceChangeVisitor);
    }
    resouceChangeVisitor=createResourceChangedVisitor();
    workspace.addResourceChangeListener(resouceChangeVisitor,IResourceChangeEvent.POST_CHANGE);
  }
}",0.9544513457556936
129700,"@Override public void notifyChanged(Notification notification){
  if (notification.getFeature() == PropertiesPackage.eINSTANCE.getProject_DeletedFolders()) {
    if (viewer.getControl() != null) {
      viewer.getControl().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          refreshTopLevelNode();
        }
      }
);
    }
  }
}","@Override public void notifyChanged(Notification notification){
  if (notification.getFeature() == PropertiesPackage.eINSTANCE.getProject_DeletedFolders()) {
    if (viewer != null && viewer.getControl() != null) {
      viewer.getControl().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          refreshTopLevelNode();
        }
      }
);
    }
  }
}",0.941018766756032
129701,"@Override public void resourceChanged(IResourceChangeEvent event){
  final Control ctrl=viewer.getControl();
  if (ctrl == null || ctrl.isDisposed()) {
    return;
  }
  final Collection<Runnable> runnables=new ArrayList<Runnable>();
  visitor.setRunnables(runnables);
  try {
    event.getDelta().accept(visitor);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  if (!runnables.isEmpty()) {
    if (ctrl.getDisplay().getThread() == Thread.currentThread()) {
      runUpdates(runnables);
    }
 else {
      ctrl.getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          Control ctrl2=viewer.getControl();
          if (ctrl2 == null || ctrl2.isDisposed()) {
            return;
          }
          runUpdates(runnables);
        }
      }
);
    }
  }
}","@Override public void resourceChanged(IResourceChangeEvent event){
  if (viewer == null) {
    return;
  }
  final Control ctrl=viewer.getControl();
  if (ctrl == null || ctrl.isDisposed()) {
    return;
  }
  final Collection<Runnable> runnables=new ArrayList<Runnable>();
  visitor.setRunnables(runnables);
  try {
    event.getDelta().accept(visitor);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  if (!runnables.isEmpty()) {
    if (ctrl.getDisplay().getThread() == Thread.currentThread()) {
      runUpdates(runnables);
    }
 else {
      ctrl.getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          Control ctrl2=viewer.getControl();
          if (ctrl2 == null || ctrl2.isDisposed()) {
            return;
          }
          runUpdates(runnables);
        }
      }
);
    }
  }
}",0.9755799755799756
129702,"@Override public void init(ICommonActionExtensionSite aSite){
  super.init(aSite);
  helper.setCommonViewer(getCommonViewer());
  helper.setNavigatorContentService(getNavigatorContentService());
  helper.setActionProviderId(this.getActionSite().getExtensionId());
}","@Override public void init(ICommonActionExtensionSite aSite){
  super.init(aSite);
  helper.setTreeViewer(getCommonViewer());
  helper.setNavigatorContentService(getNavigatorContentService());
  helper.setActionProviderId(this.getActionSite().getExtensionId());
}",0.981060606060606
129703,"/** 
 * Only activate the view content providers with the extension ID belonging to extensionIdsToActivate array.
 * @param extensionIdsToActivate
 * @param restoring, used because setting new selection cause renentrance and may create 2 action types whenrestoring state
 */
protected void refreshNavigatorContents(String[] extensionIdsToActivate,boolean restoring){
  boolean updateExtensionActivation=false;
  String[] contentExtensionsToActivate=Arrays.copyOf(extensionIdsToActivate,extensionIdsToActivate.length);
  Arrays.sort(contentExtensionsToActivate);
  IStructuredSelection ssel=null;
  CommonViewer commonViewer=getCommonViewer();
  INavigatorContentService contentService=getNavigatorContentService();
  try {
    commonViewer.getControl().setRedraw(false);
    ISelection selection=commonViewer.getSelection();
    if (selection instanceof IStructuredSelection) {
      ssel=(IStructuredSelection)selection;
    }
    INavigatorContentDescriptor[] visibleContentDescriptors=contentService.getVisibleExtensions();
    int indexofContentExtensionIdToBeActivated;
    for (int i=0; i < visibleContentDescriptors.length && !updateExtensionActivation; i++) {
      indexofContentExtensionIdToBeActivated=Arrays.binarySearch(contentExtensionsToActivate,visibleContentDescriptors[i].getId());
      if (indexofContentExtensionIdToBeActivated >= 0 ^ contentService.isActive(visibleContentDescriptors[i].getId())) {
        updateExtensionActivation=true;
      }
    }
    if (updateExtensionActivation) {
      contentService.getActivationService().activateExtensions(contentExtensionsToActivate,true);
      contentService.getActivationService().persistExtensionActivations();
      Object[] expandedElements=commonViewer.getExpandedElements();
      contentService.update();
      commonViewer.refresh();
      if (!restoring) {
        Object[] originalObjects=ssel != null ? ssel.toArray() : new Object[0];
        commonViewer.setExpandedElements(expandedElements);
        IStructuredSelection newSelection=new StructuredSelection(originalObjects);
        commonViewer.setSelection(newSelection,true);
      }
    }
  }
  finally {
    commonViewer.getControl().setRedraw(true);
  }
}","/** 
 * Only activate the view content providers with the extension ID belonging to extensionIdsToActivate array.
 * @param extensionIdsToActivate
 * @param restoring, used because setting new selection cause renentrance and may create 2 action types whenrestoring state
 */
protected void refreshNavigatorContents(String[] extensionIdsToActivate,boolean restoring){
  boolean updateExtensionActivation=false;
  String[] contentExtensionsToActivate=Arrays.copyOf(extensionIdsToActivate,extensionIdsToActivate.length);
  Arrays.sort(contentExtensionsToActivate);
  IStructuredSelection ssel=null;
  TreeViewer commonViewer=getTreeViewer();
  INavigatorContentService contentService=getNavigatorContentService();
  try {
    commonViewer.getControl().setRedraw(false);
    ISelection selection=commonViewer.getSelection();
    if (selection instanceof IStructuredSelection) {
      ssel=(IStructuredSelection)selection;
    }
    INavigatorContentDescriptor[] visibleContentDescriptors=contentService.getVisibleExtensions();
    int indexofContentExtensionIdToBeActivated;
    for (int i=0; i < visibleContentDescriptors.length && !updateExtensionActivation; i++) {
      indexofContentExtensionIdToBeActivated=Arrays.binarySearch(contentExtensionsToActivate,visibleContentDescriptors[i].getId());
      if (indexofContentExtensionIdToBeActivated >= 0 ^ contentService.isActive(visibleContentDescriptors[i].getId())) {
        updateExtensionActivation=true;
      }
    }
    if (updateExtensionActivation) {
      contentService.getActivationService().activateExtensions(contentExtensionsToActivate,true);
      contentService.getActivationService().persistExtensionActivations();
      Object[] expandedElements=commonViewer.getExpandedElements();
      contentService.update();
      commonViewer.refresh();
      if (!restoring) {
        Object[] originalObjects=ssel != null ? ssel.toArray() : new Object[0];
        commonViewer.setExpandedElements(expandedElements);
        IStructuredSelection newSelection=new StructuredSelection(originalObjects);
        commonViewer.setSelection(newSelection,true);
      }
    }
  }
  finally {
    commonViewer.getControl().setRedraw(true);
  }
}",0.9954462659380692
129704,"/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || tables != null && tables.isEmpty()) {
    if (tables != null && !tables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < tables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)tables.toArray()[i])) {
          metadataTable=(MetadataTable)tables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : tables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  for (int i=0; i < allTableLabel.length; i++) {
    if (allTableLabel[i].equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(allTableLabel[i]);
      tableNavigator.setSelection(subItem);
    }
 else     if (!TableHelper.isDeleted(TableHelper.findByLabel(getConnection(),allTableLabel[i]))) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(allTableLabel[i]);
    }
  }
}","/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || tables != null && tables.isEmpty()) {
    if (tables != null && !tables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < tables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)tables.toArray()[i])) {
          metadataTable=(MetadataTable)tables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : tables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  for (int i=0; i < allTableLabel.length; i++) {
    if (allTableLabel[i].equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(allTableLabel[i]);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(allTableLabel[i]);
    }
  }
}",0.9665071770334928
129705,"private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
            columnMap.get(colName).setKey(true);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}","private void fillPkandFk(ColumnSet colSet,Map<String,TdColumn> columnMap,DatabaseMetaData dbJDBCMetadata,String catalogName,String schemaName,String tableName) throws Exception {
  if (columnMap.size() > 0) {
    Map<String,ForeignKey> foreignKeysMap=new HashMap<String,ForeignKey>();
    if (orgomg.cwm.resource.relational.RelationalPackage.eINSTANCE.getTable().isSuperTypeOf(colSet.eClass())) {
      try {
        if (MetadataConnectionUtils.isOdbcExcel(dbJDBCMetadata) || MetadataConnectionUtils.isAccess(dbJDBCMetadata) || MetadataConnectionUtils.isHive(dbJDBCMetadata)) {
          log.info(""String_Node_Str"");
          return;
        }
        ResultSet pkResult=dbJDBCMetadata.getPrimaryKeys(catalogName,schemaName,tableName);
        PrimaryKey primaryKey=null;
        while (pkResult.next()) {
          String colName=pkResult.getString(GetPrimaryKey.COLUMN_NAME.name());
          String pkName=pkResult.getString(GetPrimaryKey.PK_NAME.name());
          if (pkName == null) {
            continue;
          }
          if (primaryKey == null) {
            primaryKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createPrimaryKey();
            primaryKey.setName(pkName);
          }
 else           if (!pkName.equals(primaryKey.getName())) {
            throw new Exception(""String_Node_Str"" + colSet + ""String_Node_Str"");
          }
          columnMap.get(colName).getUniqueKey().add(primaryKey);
          columnMap.get(colName).setKey(true);
          TableHelper.addPrimaryKey((TdTable)colSet,primaryKey);
        }
        pkResult.close();
        ForeignKey foreignKey=null;
        ResultSet fkResult=null;
        try {
          fkResult=dbJDBCMetadata.getImportedKeys(catalogName,schemaName,tableName);
        }
 catch (        Exception e) {
          log.warn(e,e);
        }
        if (fkResult != null) {
          while (fkResult.next()) {
            String fkname=fkResult.getString(GetForeignKey.FK_NAME.name());
            String colName=fkResult.getString(GetForeignKey.FKCOLUMN_NAME.name());
            if (foreignKey == null || foreignKeysMap.get(fkname) == null) {
              foreignKey=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createForeignKey();
              foreignKey.setName(fkname);
              foreignKeysMap.put(fkname,foreignKey);
            }
            columnMap.get(colName).getKeyRelationship().add(foreignKey);
            columnMap.get(colName).setKey(true);
          }
          fkResult.close();
          TableHelper.addForeignKeys((TdTable)colSet,Arrays.asList(foreignKeysMap.values().toArray(new ForeignKey[foreignKeysMap.values().size()])));
        }
      }
 catch (      SQLException e) {
        log.error(e,e);
      }
    }
  }
}",0.5007347538574578
129706,"public Set<String> getNeededLibrariesForProcess(IProcess process,boolean withChildrens,boolean... exportAsOSGI);","public Set<ModuleNeeded> getNeededLibrariesForProcess(IProcess process,boolean withChildrens);",0.7961165048543689
129707,"/** 
 * @return the modulesNeededPerJob
 */
public Set<String> getModulesNeededPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededPerJob.containsKey(key)) {
    modulesNeededPerJob.put(key,new HashSet<String>());
  }
  return modulesNeededPerJob.get(key);
}","/** 
 * @return the modulesNeededPerJob
 */
public Set<ModuleNeeded> getModulesNeededPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededPerJob.containsKey(key)) {
    modulesNeededPerJob.put(key,new HashSet<ModuleNeeded>());
  }
  return modulesNeededPerJob.get(key);
}",0.9446153846153846
129708,"private LastGenerationInfo(){
  modulesNeededPerJob=new HashMap<String,Set<String>>();
  contextPerJob=new HashMap<String,Set<String>>();
  modulesNeededWithSubjobPerJob=new HashMap<String,Set<String>>();
  lastGeneratedjobs=new HashSet<JobInfo>();
  routinesNeededPerJob=new HashMap<String,Set<String>>();
  routinesNeededWithSubjobPerJob=new HashMap<String,Set<String>>();
  useDynamic=new HashMap<String,Boolean>();
}","private LastGenerationInfo(){
  modulesNeededPerJob=new HashMap<String,Set<ModuleNeeded>>();
  contextPerJob=new HashMap<String,Set<String>>();
  modulesNeededWithSubjobPerJob=new HashMap<String,Set<ModuleNeeded>>();
  lastGeneratedjobs=new HashSet<JobInfo>();
  routinesNeededPerJob=new HashMap<String,Set<String>>();
  routinesNeededWithSubjobPerJob=new HashMap<String,Set<String>>();
  useDynamic=new HashMap<String,Boolean>();
}",0.9577464788732394
129709,"/** 
 * Sets the modulesNeededPerJob.
 * @param modulesNeededPerJob the modulesNeededPerJob to set
 */
public void setModulesNeededPerJob(String jobId,String jobVersion,Set<String> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  modulesNeededPerJob.put(key,new HashSet<String>(modulesNeeded));
}","/** 
 * Sets the modulesNeededPerJob.
 * @param modulesNeededPerJob the modulesNeededPerJob to set
 */
public void setModulesNeededPerJob(String jobId,String jobVersion,Set<ModuleNeeded> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  modulesNeededPerJob.put(key,new HashSet<ModuleNeeded>(modulesNeeded));
}",0.9444444444444444
129710,"/** 
 * @return the modulesNeededPerJob
 */
public Set<String> getModulesNeededWithSubjobPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededWithSubjobPerJob.containsKey(key)) {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<String>());
  }
  return modulesNeededWithSubjobPerJob.get(key);
}","/** 
 * @return the modulesNeededPerJob
 */
public Set<ModuleNeeded> getModulesNeededWithSubjobPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededWithSubjobPerJob.containsKey(key)) {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<ModuleNeeded>());
  }
  return modulesNeededWithSubjobPerJob.get(key);
}",0.9506849315068492
129711,"/** 
 * Sets the modulesNeededWithSubjobPerJob.
 * @param modulesNeededWithSubjobPerJob the modulesNeededWithSubjobPerJob to set
 */
public void setModulesNeededWithSubjobPerJob(String jobId,String jobVersion,Set<String> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (modulesNeeded == null) {
    modulesNeededWithSubjobPerJob.put(key,null);
  }
 else {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<String>(modulesNeeded));
  }
}","/** 
 * Sets the modulesNeededWithSubjobPerJob.
 * @param modulesNeededWithSubjobPerJob the modulesNeededWithSubjobPerJob to set
 */
public void setModulesNeededWithSubjobPerJob(String jobId,String jobVersion,Set<ModuleNeeded> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (modulesNeeded == null) {
    modulesNeededWithSubjobPerJob.put(key,null);
  }
 else {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<ModuleNeeded>(modulesNeeded));
  }
}",0.961864406779661
129712,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    CorePlugin.getDefault().getRunProcessService().updateLibraries(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()),currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        ((IJavaProject)CorePlugin.getDefault().getRunProcessService().getJavaProject()).getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        ((IJavaProject)CorePlugin.getDefault().getRunProcessService().getJavaProject()).getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    codeModified=false;
  }
}",0.8339483394833949
129713,"/** 
 * DOC ocarbone Comment method ""addMetadataTable"".
 */
protected void addMetadataTable(boolean flag){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
  if (flag) {
    ProjectNodeHelper.addTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
 else {
    ProjectNodeHelper.addDefaultTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
  metadataTable.setId(factory.getNextId());
  metadataTable.setLabel(IndiceHelper.getIndexedLabel(metadataTable.getLabel(),existingNames));
  initTreeNavigatorNodes();
  initMetadataForm();
  if (tableCombo.getItemCount() > 0) {
    tableCombo.setEnabled(true);
  }
}","/** 
 * DOC ocarbone Comment method ""addMetadataTable"".
 */
protected void addMetadataTable(boolean flag){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
  if (flag) {
    ProjectNodeHelper.addTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
 else {
    ProjectNodeHelper.addDefaultTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
  metadataTable.setId(factory.getNextId());
  metadataTable.setLabel(IndiceHelper.getIndexedLabel(metadataTable.getLabel(),existingNames));
  metadataTable.setName(metadataTable.getLabel());
  initTreeNavigatorNodes();
  initMetadataForm();
  if (tableCombo.getItemCount() > 0) {
    tableCombo.setEnabled(true);
  }
}",0.965886287625418
129714,"/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || tables != null && tables.isEmpty()) {
    if (tables != null && !tables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < tables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)tables.toArray()[i])) {
          metadataTable=(MetadataTable)tables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : tables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  for (int i=0; i < allTableLabel.length; i++) {
    if (allTableLabel[i].equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(allTableLabel[i]);
      tableNavigator.setSelection(subItem);
    }
 else     if (!TableHelper.isDeleted(TableHelper.findByLabel(getConnection(),allTableLabel[i]))) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(allTableLabel[i]);
    }
  }
}","/** 
 * DOC ocarbone Comment method ""initTreeNodes"".
 */
private void initTreeNavigatorNodes(){
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null || tables != null && tables.isEmpty()) {
    if (tables != null && !tables.isEmpty()) {
      boolean isAllDeleted=true;
      for (int i=0; i < tables.size(); i++) {
        if (!TableHelper.isDeleted((MetadataTable)tables.toArray()[i])) {
          metadataTable=(MetadataTable)tables.toArray()[i];
          isAllDeleted=false;
        }
      }
      if (isAllDeleted) {
        addMetadataTable(true);
      }
    }
 else {
      addMetadataTable(false);
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : tables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  for (int i=0; i < allTableLabel.length; i++) {
    if (allTableLabel[i].equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(allTableLabel[i]);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NULL);
      subItem.setText(allTableLabel[i]);
    }
  }
}",0.9665071770334928
129715,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,op);
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            repositoryView.refresh();
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      for (      Object obj : ((IStructuredSelection)selection).toArray()) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode node=(RepositoryNode)obj;
          try {
            if (containParent(node,(IStructuredSelection)selection)) {
              continue;
            }
            if (isForbidNode(node)) {
              continue;
            }
            if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                Item repoItem=node.getObject().getProperty().getItem();
                if (service != null && !repoItem.getState().isDeleted()) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      public void run(){
                        String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
              if (isInDeletedFolder(deletedFolder,node.getParent())) {
                continue;
              }
              boolean needReturn=deleteElements(factory,deleteActionCache,node);
              if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
                needToUpdataPalette=true;
              }
              if (needReturn) {
                return;
              }
              types.add(node.getObjectType());
            }
 else             if (node.getType() == ENodeType.SIMPLE_FOLDER) {
              FolderItem folderItem=(FolderItem)node.getObject().getProperty().getItem();
              if (node.getChildren().size() > 0 && !folderItem.getState().isDeleted()) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                  IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                  if (service != null) {
                    final StringBuffer jobNames=service.getAllTheJObNames(node);
                    if (jobNames != null) {
                      Display.getDefault().syncExec(new Runnable(){
                        public void run(){
                          String message=null;
                          if (jobNames.toString().contains(""String_Node_Str"")) {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
 else {
                            message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                          }
                          final Shell shell=getShell();
                          confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                        }
                      }
);
                      if (!confirmAssignDialog) {
                        continue;
                      }
                    }
                  }
                }
              }
              boolean isSqlTemplate=false;
              if (node.getObject() instanceof Folder) {
                Object label=node.getProperties(EProperties.LABEL);
                if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                  isSqlTemplate=true;
                }
              }
              if (!isSqlTemplate) {
                types.add(node.getContentType());
                if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                  types.add(ERepositoryObjectType.DOCUMENTATION);
                }
                deletedFolder.add(node);
                deleteFolder(node,factory,deleteActionCache);
              }
            }
          }
 catch (          PersistenceException e) {
            MessageBoxExceptionHandler.process(e);
          }
catch (          BusinessException e) {
            MessageBoxExceptionHandler.process(e);
          }
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  final boolean updatePalette=needToUpdataPalette;
  Display.getCurrent().syncExec(new Runnable(){
    public void run(){
      if (!org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
        if (updatePalette && GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
          ICoreService service=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
          service.updatePalette();
        }
        if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
          IRepositoryView repositoryView=RepositoryManagerHelper.getRepositoryView();
          if (repositoryView != null) {
            repositoryView.refresh();
          }
        }
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        for (        IEditorReference editors : page.getEditorReferences()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class)) {
            IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
            service.refreshBusinessModel(editors);
          }
        }
        if (!deleteActionCache.isDocRefresh() && !CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
          RepositoryManager.refreshCreatedNode(ERepositoryObjectType.DOCUMENTATION);
        }
      }
      deleteActionCache.revertParameters();
    }
  }
);
}",0.9417526446388924
129716,"/** 
 * DOC ocarbone Comment method ""addMetadataTable"".
 */
protected void addMetadataTable(boolean flag){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
  if (flag) {
    ProjectNodeHelper.addTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
 else {
    ProjectNodeHelper.addDefaultTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
  metadataTable.setId(factory.getNextId());
  metadataTable.setLabel(IndiceHelper.getIndexedLabel(metadataTable.getLabel(),existingNames));
  initTreeNavigatorNodes();
  initMetadataForm();
  if (tableCombo.getItemCount() > 0) {
    tableCombo.setEnabled(true);
  }
}","/** 
 * DOC ocarbone Comment method ""addMetadataTable"".
 */
protected void addMetadataTable(boolean flag){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
  if (flag) {
    ProjectNodeHelper.addTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
 else {
    ProjectNodeHelper.addDefaultTableForSpecifiedDataPackage(getConnection(),metadataTable);
  }
  metadataTable.setId(factory.getNextId());
  metadataTable.setLabel(IndiceHelper.getIndexedLabel(metadataTable.getLabel(),existingNames));
  metadataTable.setName(metadataTable.getLabel());
  initTreeNavigatorNodes();
  initMetadataForm();
  if (tableCombo.getItemCount() > 0) {
    tableCombo.setEnabled(true);
  }
}",0.965886287625418
129717,"public Set<String> getNeededLibrariesForProcess(IProcess process,boolean withChildrens,boolean... exportAsOSGI);","public Set<ModuleNeeded> getNeededLibrariesForProcess(IProcess process,boolean withChildrens);",0.7961165048543689
129718,"/** 
 * @return the modulesNeededPerJob
 */
public Set<String> getModulesNeededPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededPerJob.containsKey(key)) {
    modulesNeededPerJob.put(key,new HashSet<String>());
  }
  return modulesNeededPerJob.get(key);
}","/** 
 * @return the modulesNeededPerJob
 */
public Set<ModuleNeeded> getModulesNeededPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededPerJob.containsKey(key)) {
    modulesNeededPerJob.put(key,new HashSet<ModuleNeeded>());
  }
  return modulesNeededPerJob.get(key);
}",0.9446153846153846
129719,"private LastGenerationInfo(){
  modulesNeededPerJob=new HashMap<String,Set<String>>();
  contextPerJob=new HashMap<String,Set<String>>();
  modulesNeededWithSubjobPerJob=new HashMap<String,Set<String>>();
  lastGeneratedjobs=new HashSet<JobInfo>();
  routinesNeededPerJob=new HashMap<String,Set<String>>();
  routinesNeededWithSubjobPerJob=new HashMap<String,Set<String>>();
  useDynamic=new HashMap<String,Boolean>();
}","private LastGenerationInfo(){
  modulesNeededPerJob=new HashMap<String,Set<ModuleNeeded>>();
  contextPerJob=new HashMap<String,Set<String>>();
  modulesNeededWithSubjobPerJob=new HashMap<String,Set<ModuleNeeded>>();
  lastGeneratedjobs=new HashSet<JobInfo>();
  routinesNeededPerJob=new HashMap<String,Set<String>>();
  routinesNeededWithSubjobPerJob=new HashMap<String,Set<String>>();
  useDynamic=new HashMap<String,Boolean>();
}",0.9577464788732394
129720,"/** 
 * Sets the modulesNeededPerJob.
 * @param modulesNeededPerJob the modulesNeededPerJob to set
 */
public void setModulesNeededPerJob(String jobId,String jobVersion,Set<String> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  modulesNeededPerJob.put(key,new HashSet<String>(modulesNeeded));
}","/** 
 * Sets the modulesNeededPerJob.
 * @param modulesNeededPerJob the modulesNeededPerJob to set
 */
public void setModulesNeededPerJob(String jobId,String jobVersion,Set<ModuleNeeded> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  modulesNeededPerJob.put(key,new HashSet<ModuleNeeded>(modulesNeeded));
}",0.9444444444444444
129721,"/** 
 * @return the modulesNeededPerJob
 */
public Set<String> getModulesNeededWithSubjobPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededWithSubjobPerJob.containsKey(key)) {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<String>());
  }
  return modulesNeededWithSubjobPerJob.get(key);
}","/** 
 * @return the modulesNeededPerJob
 */
public Set<ModuleNeeded> getModulesNeededWithSubjobPerJob(String jobId,String jobVersion){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (!modulesNeededWithSubjobPerJob.containsKey(key)) {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<ModuleNeeded>());
  }
  return modulesNeededWithSubjobPerJob.get(key);
}",0.9506849315068492
129722,"/** 
 * Sets the modulesNeededWithSubjobPerJob.
 * @param modulesNeededWithSubjobPerJob the modulesNeededWithSubjobPerJob to set
 */
public void setModulesNeededWithSubjobPerJob(String jobId,String jobVersion,Set<String> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (modulesNeeded == null) {
    modulesNeededWithSubjobPerJob.put(key,null);
  }
 else {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<String>(modulesNeeded));
  }
}","/** 
 * Sets the modulesNeededWithSubjobPerJob.
 * @param modulesNeededWithSubjobPerJob the modulesNeededWithSubjobPerJob to set
 */
public void setModulesNeededWithSubjobPerJob(String jobId,String jobVersion,Set<ModuleNeeded> modulesNeeded){
  String key=jobId + ""String_Node_Str"" + jobVersion;
  if (modulesNeeded == null) {
    modulesNeededWithSubjobPerJob.put(key,null);
  }
 else {
    modulesNeededWithSubjobPerJob.put(key,new HashSet<ModuleNeeded>(modulesNeeded));
  }
}",0.961864406779661
129723,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    CorePlugin.getDefault().getRunProcessService().updateLibraries(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()),currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        ((IJavaProject)CorePlugin.getDefault().getRunProcessService().getJavaProject()).getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA && codeModified) {
      try {
        ((IJavaProject)CorePlugin.getDefault().getRunProcessService().getJavaProject()).getProject().build(IncrementalProjectBuilder.AUTO_BUILD,null);
      }
 catch (      CoreException e) {
        throw new ProcessorException(e);
      }
    }
    codeModified=false;
  }
}",0.8339483394833949
129724,"public void run(){
  orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
  boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
  if (confirm) {
    TreeItem existItem=getExistItem(existTable);
    TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
    if (existItem == null) {
      if (existTableItem == null) {
        return;
      }
 else {
        clearTableItem(existTableItem,true);
      }
    }
 else {
      clearTableItem(existItem);
      existItem.setChecked(false);
    }
    item.setText(3,Messages.getString(""String_Node_Str""));
    countPending++;
    parentWizardPage.setPageComplete(false);
    refreshTable(item,-1);
  }
 else {
    item.setChecked(false);
    boolean hasCheckedItem=false;
    TreeItem parentItem=item.getParentItem();
    if (parentItem != null) {
      for (      TreeItem i : parentItem.getItems()) {
        if (i.getChecked()) {
          hasCheckedItem=true;
          break;
        }
      }
    }
    if (!hasCheckedItem) {
      parentItem.setChecked(false);
    }
  }
}","public void run(){
  orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
  boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
  if (confirm) {
    TreeItem existItem=getExistItem(existTable);
    TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
    if (existItem == null) {
      if (existTableItem == null) {
        return;
      }
 else {
        clearTableItem(existTableItem,true);
      }
    }
 else {
      clearTableItem(existItem);
      existItem.setChecked(false);
    }
    item.setText(3,Messages.getString(""String_Node_Str""));
    countPending++;
    parentWizardPage.setPageComplete(false);
    refreshTable(item,-1);
  }
 else {
    item.setChecked(false);
    boolean hasCheckedItem=false;
    TreeItem parentItem=item.getParentItem();
    if (parentItem != null) {
      for (      TreeItem i : parentItem.getItems()) {
        if (i.getChecked()) {
          hasCheckedItem=true;
          break;
        }
      }
    }
    if (!hasCheckedItem && parentItem != null) {
      parentItem.setChecked(false);
    }
  }
}",0.9911858974358976
129725,"private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
        if (existItem == null) {
          if (existTableItem == null) {
            return;
          }
 else {
            clearTableItem(existTableItem,true);
          }
        }
 else {
          clearTableItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(3,Messages.getString(""String_Node_Str""));
        countPending++;
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}","private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
        if (existItem == null) {
          if (existTableItem == null) {
            return;
          }
 else {
            clearTableItem(existTableItem,true);
          }
        }
 else {
          clearTableItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(3,Messages.getString(""String_Node_Str""));
        countPending++;
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem && parentItem != null) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}",0.9928571428571428
129726,"protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}","protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.useAllSynonyms && EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataconnection.getDbType())) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}",0.91005291005291
129727,"public void run(){
  orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
  boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
  if (confirm) {
    TreeItem existItem=getExistItem(existTable);
    TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
    if (existItem == null) {
      if (existTableItem == null) {
        return;
      }
 else {
        clearTableItem(existTableItem,true);
      }
    }
 else {
      clearTableItem(existItem);
      existItem.setChecked(false);
    }
    item.setText(3,Messages.getString(""String_Node_Str""));
    countPending++;
    parentWizardPage.setPageComplete(false);
    refreshTable(item,-1);
  }
 else {
    item.setChecked(false);
    boolean hasCheckedItem=false;
    TreeItem parentItem=item.getParentItem();
    if (parentItem != null) {
      for (      TreeItem i : parentItem.getItems()) {
        if (i.getChecked()) {
          hasCheckedItem=true;
          break;
        }
      }
    }
    if (!hasCheckedItem) {
      parentItem.setChecked(false);
    }
  }
}","public void run(){
  orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
  boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
  if (confirm) {
    TreeItem existItem=getExistItem(existTable);
    TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
    if (existItem == null) {
      if (existTableItem == null) {
        return;
      }
 else {
        clearTableItem(existTableItem,true);
      }
    }
 else {
      clearTableItem(existItem);
      existItem.setChecked(false);
    }
    item.setText(3,Messages.getString(""String_Node_Str""));
    countPending++;
    parentWizardPage.setPageComplete(false);
    refreshTable(item,-1);
  }
 else {
    item.setChecked(false);
    boolean hasCheckedItem=false;
    TreeItem parentItem=item.getParentItem();
    if (parentItem != null) {
      for (      TreeItem i : parentItem.getItems()) {
        if (i.getChecked()) {
          hasCheckedItem=true;
          break;
        }
      }
    }
    if (!hasCheckedItem && parentItem != null) {
      parentItem.setChecked(false);
    }
  }
}",0.9911858974358976
129728,"private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
        if (existItem == null) {
          if (existTableItem == null) {
            return;
          }
 else {
            clearTableItem(existTableItem,true);
          }
        }
 else {
          clearTableItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(3,Messages.getString(""String_Node_Str""));
        countPending++;
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}","private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
        if (existItem == null) {
          if (existTableItem == null) {
            return;
          }
 else {
            clearTableItem(existTableItem,true);
          }
        }
 else {
          clearTableItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(3,Messages.getString(""String_Node_Str""));
        countPending++;
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem && parentItem != null) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}",0.9928571428571428
129729,"protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}","protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    if (""String_Node_Str"".equals(schema) && ExtractMetaDataUtils.useAllSynonyms && EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(metadataconnection.getDbType())) {
      schema=MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS;
    }
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}",0.91005291005291
129730,"/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (isDnd && sourceNode.getObjectType() == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}","/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}",0.9827612052166091
129731,"private void registerGlobalActions(){
  actionBarConfigurer.registerGlobalAction(ActionFactory.SAVE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.UNDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.CUT.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.COPY.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.PASTE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.DELETE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.SELECT_ALL.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REFRESH.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.RESET_PERSPECTIVE.create(window));
}","private void registerGlobalActions(){
  actionBarConfigurer.registerGlobalAction(ActionFactory.SAVE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.SAVE_ALL.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.UNDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.CUT.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.COPY.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.PASTE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.DELETE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.SELECT_ALL.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REFRESH.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.RESET_PERSPECTIVE.create(window));
}",0.9536053661263276
129732,"private void registerGlobalActions(){
  actionBarConfigurer.registerGlobalAction(ActionFactory.SAVE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.UNDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.CUT.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.COPY.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.PASTE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.DELETE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.SELECT_ALL.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REFRESH.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.RESET_PERSPECTIVE.create(window));
}","private void registerGlobalActions(){
  actionBarConfigurer.registerGlobalAction(ActionFactory.SAVE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.SAVE_ALL.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.UNDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REDO.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.CUT.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.COPY.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.PASTE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.DELETE.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.SELECT_ALL.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.REFRESH.create(window));
  actionBarConfigurer.registerGlobalAction(ActionFactory.RESET_PERSPECTIVE.create(window));
}",0.9536053661263276
129733,"/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (isDnd && sourceNode.getObjectType() == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}","/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}",0.9827612052166091
129734,"public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null)           addRelationShip(item,property.getId(),version,JOBLET_RELATION);
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    addRelationShip(item,jobId,jobVersion,JOB_RELATION);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}","public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null)           addRelationShip(item,property.getId(),version,JOBLET_RELATION);
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    addRelationShip(item,jobId,jobVersion,JOB_RELATION);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}",0.9985200845665962
129735,"public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  List<IRepositoryNode> nodes=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    nodes=getChildren();
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    root.add(svnRootNode);
    nodes=svnRootNode.getChildren();
  }
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && !getMergeRefProject() && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(nodes);
}","public void initialize(String currentPerspective){
  this.currentPerspective=currentPerspective;
  nodeAndProject=new HashMap<Object,List<Project>>();
  List<IRepositoryNode> nodes=null;
  String urlBranch=null;
  if (ProjectManager.getInstance().getCurrentBranchURL(project) != null) {
    urlBranch=showSVNRoot();
  }
  if (""String_Node_Str"".equals(urlBranch) || urlBranch == null) {
    nodes=getChildren();
  }
 else {
    List<IRepositoryNode> root=getChildren();
    svnRootNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    svnRootNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SVN_ROOT + ""String_Node_Str"" + urlBranch+ ""String_Node_Str"");
    svnRootNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SVN_ROOT);
    if (root.contains(svnRootNode)) {
      return;
    }
    root.add(svnRootNode);
    nodes=svnRootNode.getChildren();
  }
  recBinNode=new BinRepositoryNode(this);
  nodes.add(recBinNode);
  businessProcessNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  businessProcessNode.setProperties(EProperties.LABEL,ERepositoryObjectType.BUSINESS_PROCESS);
  businessProcessNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.BUSINESS_PROCESS);
  nodes.add(businessProcessNode);
  processNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  processNode.setProperties(EProperties.LABEL,ERepositoryObjectType.PROCESS);
  processNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.PROCESS);
  nodes.add(processNode);
  if (PluginChecker.isJobLetPluginLoaded()) {
    jobletNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobletNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOBLET);
    jobletNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOBLET);
    nodes.add(jobletNode);
  }
  contextNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  contextNode.setProperties(EProperties.LABEL,ERepositoryObjectType.CONTEXT);
  contextNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CONTEXT);
  nodes.add(contextNode);
  codeNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.CODE_ICON);
  codeNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.CODE);
  nodes.add(codeNode);
  routineNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  routineNode.setProperties(EProperties.LABEL,ERepositoryObjectType.ROUTINES);
  routineNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.ROUTINES);
  codeNode.getChildren().add(routineNode);
  if (PluginChecker.isMetalanguagePluginLoaded()) {
    jobscriptsNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    jobscriptsNode.setProperties(EProperties.LABEL,ERepositoryObjectType.JOB_SCRIPT);
    jobscriptsNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.JOB_SCRIPT);
    codeNode.getChildren().add(jobscriptsNode);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
    IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
    if (service.isVisible()) {
      metadataHeaderFooterConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      metadataHeaderFooterConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_HEADER_FOOTER);
      codeNode.getChildren().add(metadataHeaderFooterConnectionNode);
    }
  }
  sqlPatternNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  sqlPatternNode.setProperties(EProperties.LABEL,ERepositoryObjectType.SQLPATTERNS);
  sqlPatternNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.SQLPATTERNS);
  nodes.add(sqlPatternNode);
  docNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  docNode.setProperties(EProperties.LABEL,ERepositoryObjectType.DOCUMENTATION);
  docNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.DOCUMENTATION);
  nodes.add(docNode);
  metadataNode=new RepositoryNode(null,this,ENodeType.STABLE_SYSTEM_FOLDER);
  metadataNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA);
  metadataNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA);
  nodes.add(metadataNode);
  metadataConNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataConNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataConNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
  metadataNode.getChildren().add(metadataConNode);
  metadataFileNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataFileNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_DELIMITED);
  metadataNode.getChildren().add(metadataFileNode);
  metadataFilePositionalNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFilePositionalNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataFilePositionalNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
  metadataNode.getChildren().add(metadataFilePositionalNode);
  metadataFileRegexpNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileRegexpNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataFileRegexpNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_REGEXP);
  metadataNode.getChildren().add(metadataFileRegexpNode);
  metadataFileXmlNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileXmlNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_XML);
  metadataFileXmlNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_XML);
  metadataNode.getChildren().add(metadataFileXmlNode);
  metadataFileLdifNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileLdifNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataFileLdifNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_LDIF);
  metadataNode.getChildren().add(metadataFileLdifNode);
  metadataFileExcelNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataFileExcelNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataFileExcelNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EXCEL);
  metadataNode.getChildren().add(metadataFileExcelNode);
  ECodeLanguage codeLanguage=LanguageManager.getCurrentLanguage();
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataLDAPSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataLDAPSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataLDAPSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_LDAP_SCHEMA);
    metadataNode.getChildren().add(metadataLDAPSchemaNode);
  }
  metadataGenericSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataGenericSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataGenericSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
  metadataNode.getChildren().add(metadataGenericSchemaNode);
  metadataWSDLSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
  metadataWSDLSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataWSDLSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
  metadataNode.getChildren().add(metadataWSDLSchemaNode);
  if (codeLanguage != ECodeLanguage.PERL) {
    metadataSalesforceSchemaNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSalesforceSchemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataSalesforceSchemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
    metadataNode.getChildren().add(metadataSalesforceSchemaNode);
  }
  if (PluginChecker.isSAPWizardPluginLoaded() && LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    metadataSAPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataSAPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataSAPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAPCONNECTIONS);
    metadataNode.getChildren().add(metadataSAPConnectionNode);
  }
  if (PluginChecker.isHL7PluginLoaded()) {
    metadataHL7ConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataHL7ConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataHL7ConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_HL7);
    metadataNode.getChildren().add(metadataHL7ConnectionNode);
  }
  if (PluginChecker.isFTPPluginLoaded()) {
    metadataFTPConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataFTPConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataFTPConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_FTP);
    metadataNode.getChildren().add(metadataFTPConnectionNode);
  }
  if (PluginChecker.isEBCDICPluginLoaded()) {
    metadataEbcdicConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEbcdicConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataEbcdicConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_EBCDIC);
    metadataNode.getChildren().add(metadataEbcdicConnectionNode);
  }
  if (PluginChecker.isMDMPluginLoaded()) {
    metadataMDMConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataMDMConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataMDMConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_MDMCONNECTION);
    metadataNode.getChildren().add(metadataMDMConnectionNode);
  }
  if (PluginChecker.isSurvivorshipPluginLoaded() || PluginChecker.isRulesPluginLoaded() || PluginChecker.isBRMSPluginLoaded()) {
    StableRepositoryNode baseRulesNode=new StableRepositoryNode(this,Messages.getString(""String_Node_Str""),ECoreImage.METADATA_RULES_ICON);
    baseRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_RULES_MANAGEMENT);
    metadataNode.getChildren().add(baseRulesNode);
    if (PluginChecker.isBRMSPluginLoaded()) {
      metadataBRMSConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataBRMSConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_BRMS);
      metadataBRMSConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_BRMS);
      baseRulesNode.getChildren().add(metadataBRMSConnectionNode);
    }
    if (PluginChecker.isRulesPluginLoaded() && codeLanguage != ECodeLanguage.PERL) {
      metadataRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
      metadataRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_FILE_RULES);
      metadataRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_FILE_RULES);
      baseRulesNode.getChildren().add(metadataRulesNode);
    }
  }
  if (PluginChecker.isValidationrulesPluginLoaded()) {
    metadataValidationRulesNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataValidationRulesNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataValidationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATION_RULES);
    metadataNode.getChildren().add(metadataValidationRulesNode);
  }
  if (PluginChecker.isEDIFACTPluginLoaded()) {
    metadataEDIFactConnectionNode=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    metadataEDIFactConnectionNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_EDIFACT);
    metadataEDIFactConnectionNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_EDIFACT);
    metadataNode.getChildren().add(metadataEDIFactConnectionNode);
  }
  if (PluginChecker.isRefProjectLoaded() && getParent() != this && !getMergeRefProject() && project != null && project.getEmfProject().getReferencedProjects().size() > 0) {
    refProject=new RepositoryNode(null,this,ENodeType.SYSTEM_FOLDER);
    refProject.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS);
    refProject.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
    nodes.add(refProject);
  }
  initExtensionRepositoryNodes(nodes);
  try {
    hideHiddenNodesDependsUserRight();
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  collectRepositoryNodes(nodes);
}",0.9978366281238344
129736,"@Override public String getText(Object element){
  if (element instanceof RepositoryNode && !(element instanceof ProjectRepositoryNode)) {
    return repoLabelProv.getText(element);
  }
 else {
    return ""String_Node_Str"";
  }
}","@Override public String getText(Object element){
  if (element instanceof RepositoryNode) {
    return repoLabelProv.getText(element);
  }
 else {
    return ""String_Node_Str"";
  }
}",0.8856447688564477
129737,"private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
 else   if (table.eContainer() instanceof Schema) {
    Schema schema=(Schema)table.eContainer();
    synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.972896312637882
129738,"public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null)           addRelationShip(item,property.getId(),version,JOBLET_RELATION);
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}","public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField() != null && param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null)           addRelationShip(item,property.getId(),version,JOBLET_RELATION);
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}",0.9985433357611072
129739,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  if (isFromFake) {
    refresh();
  }
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  refreshContentDescription();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  if (isFromFake) {
    refresh();
  }
  setLabelProviderForView();
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  refreshContentDescription();
}",0.9969681129116572
129740,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  if (isFromFake) {
    refresh();
  }
  setLabelProviderForView();
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  refreshContentDescription();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  if (isFromFake) {
    refresh();
  }
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),event.getElement());
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
          TreeItem item=getObject(viewer.getTree(),element);
          if (item != null) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  refreshContentDescription();
}",0.9969681129116572
129741,"public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isAllowMultipleName=(type == ERepositoryObjectType.SQLPATTERNS || type == ERepositoryObjectType.METADATA_FILE_XML);
  String path=null;
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if (name.equalsIgnoreCase(current.getProperty().getLabel()) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isAllowMultipleName || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}","public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isAllowMultipleName=(type == ERepositoryObjectType.SQLPATTERNS || type == ERepositoryObjectType.METADATA_FILE_XML);
  String path=""String_Node_Str"";
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if (name.equalsIgnoreCase(current.getProperty().getLabel()) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isAllowMultipleName || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}",0.9915356711003628
129742,"/** 
 * This calls the refresh of the toplevel node, this must be invoke from the UI thread.
 * @param topLevelNode
 */
protected void refreshTopLevelNode(){
  RepositoryNode topLevelNode=getTopLevelNode();
  topLevelNode.setInitialized(false);
  topLevelNode.getChildren().clear();
  if (topLevelNode.getParent() instanceof ProjectRepositoryNode) {
    ((ProjectRepositoryNode)topLevelNode.getParent()).clearNodeAndProjectCash();
  }
  viewer.refresh(topLevelNode);
}","/** 
 * This calls the refresh of the toplevel node, this must be invoke from the UI thread.
 * @param topLevelNode
 */
protected void refreshTopLevelNode(){
  RepositoryNode topLevelNode=getTopLevelNode();
  if (topLevelNode != null) {
    topLevelNode.setInitialized(false);
    topLevelNode.getChildren().clear();
    if (topLevelNode.getParent() instanceof ProjectRepositoryNode) {
      ((ProjectRepositoryNode)topLevelNode.getParent()).clearNodeAndProjectCash();
    }
    viewer.refresh(topLevelNode);
  }
}",0.9531568228105908
129743,"@SuppressWarnings(""String_Node_Str"") protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  if (node.getChildren().size() == 0) {
    return;
  }
 else   if (node.getChildren().size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
    try {
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (!PluginChecker.isOnlyTopLoaded()) {
    RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
    IRepositoryView view=getViewPart();
    if (view != null) {
      view.refresh();
    }
  }
}","protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
 else   if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
    try {
      deleteElements(factory,(RepositoryNode)child);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e);
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (!PluginChecker.isOnlyTopLoaded()) {
    RepositoryManager.refresh(ERepositoryObjectType.JOB_SCRIPT);
    IRepositoryView view=getViewPart();
    if (view != null) {
      view.refresh();
    }
  }
}",0.94516842881731
129744,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (super.isVisible()) {
    if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(""String_Node_Str"") && new File(getConnection().getXmlFilePath()).exists()) {
      runShadowProcess(true);
    }
    ((XmlFileWizard)getPage().getWizard()).setXsdRootChange(false);
    if (isReadOnly() != readOnly) {
      adaptFormToReadOnly();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (super.isVisible()) {
    if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(""String_Node_Str"") && (new File(getConnection().getXmlFilePath()).exists() || new File(getContextXmlPath(getConnection())).exists())) {
      runShadowProcess(true);
    }
    ((XmlFileWizard)getPage().getWizard()).setXsdRootChange(false);
    if (isReadOnly() != readOnly) {
      adaptFormToReadOnly();
    }
  }
}",0.9393627954779034
129745,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (super.isVisible()) {
    if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(""String_Node_Str"") && new File(getConnection().getXmlFilePath()).exists()) {
      runShadowProcess(true);
    }
    ((XmlFileWizard)getPage().getWizard()).setXsdRootChange(false);
    if (isReadOnly() != readOnly) {
      adaptFormToReadOnly();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (super.isVisible()) {
    if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(""String_Node_Str"") && (new File(getConnection().getXmlFilePath()).exists() || new File(getContextXmlPath(getConnection())).exists())) {
      runShadowProcess(true);
    }
    ((XmlFileWizard)getPage().getWizard()).setXsdRootChange(false);
    if (isReadOnly() != readOnly) {
      adaptFormToReadOnly();
    }
  }
}",0.9393627954779034
129746,"@Override public void doRun(){
  if (this.repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_CONNECTIONS) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
  }
  RepositoryManager.getRepositoryView().refresh();
  RepositoryNode metadataNode=repositoryNode.getParent();
  if (metadataNode != null) {
    getViewPart().setFocus();
    getViewPart().expand(metadataNode,true);
    getViewPart().expand(repositoryNode,true);
  }
  DatabaseConnection connection=null;
  IPath pathToSave=null;
  if (repositoryNode.getObject() != null && repositoryNode.getObject().getClass().equals(RepositoryObject.class)) {
    try {
      ((RepositoryObject)repositoryNode.getObject()).setProperty(ProxyRepositoryFactory.getInstance().getUptodateProperty(repositoryNode.getObject().getProperty()));
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  RepositoryNode node=repositoryNode;
  boolean creation=false;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    connection=(DatabaseConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
  creation=false;
break;
case SIMPLE_FOLDER:
pathToSave=RepositoryNodeUtilities.getPath(node);
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
}
if (!creation) {
Property property=node.getObject().getProperty();
Property updatedProperty=null;
if (getNeededVersion() == null) {
}
 else {
try {
updatedProperty=ProxyRepositoryFactory.getInstance().getUptodateProperty(new Project(ProjectManager.getInstance().getProject(property.getItem())),property);
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
}
}
}
DatabaseWizard databaseWizard;
if (isToolbar()) {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
databaseWizard.setToolBar(true);
}
 else {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
}
if (!creation) {
RepositoryManager.refreshSavedNode(node);
}
WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),databaseWizard);
wizardDialog.setPageSize(600,510);
wizardDialog.create();
wizardDialog.open();
connItem=databaseWizard.getConnectionItem();
RepositoryManager.refreshSavedNode(node);
}","@Override public void doRun(){
  if (this.repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_CONNECTIONS) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
  }
  RepositoryManager.getRepositoryView().refresh();
  RepositoryNode metadataNode=repositoryNode.getParent();
  if (metadataNode != null) {
    getViewPart().setFocus();
    getViewPart().expand(metadataNode,true);
    getViewPart().expand(repositoryNode,true);
  }
  DatabaseConnection connection=null;
  IPath pathToSave=null;
  if (repositoryNode.getObject() != null && repositoryNode.getObject().getClass().equals(RepositoryObject.class)) {
    try {
      ((RepositoryObject)repositoryNode.getObject()).setProperty(ProxyRepositoryFactory.getInstance().getUptodateProperty(repositoryNode.getObject().getProperty()));
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  RepositoryNode node=repositoryNode;
  boolean creation=false;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
    connection=(DatabaseConnection)((ConnectionItem)node.getObject().getProperty().getItem()).getConnection();
  creation=false;
break;
case SIMPLE_FOLDER:
pathToSave=RepositoryNodeUtilities.getPath(node);
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
case SYSTEM_FOLDER:
pathToSave=new Path(""String_Node_Str"");
connection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
creation=true;
break;
}
if (!creation) {
Property property=node.getObject().getProperty();
Property updatedProperty=null;
if (getNeededVersion() == null) {
}
 else {
try {
updatedProperty=ProxyRepositoryFactory.getInstance().getUptodateProperty(new Project(ProjectManager.getInstance().getProject(property.getItem())),property);
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
}
}
}
DatabaseWizard databaseWizard;
if (isToolbar()) {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
databaseWizard.setToolBar(true);
}
 else {
databaseWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,node,getExistingNames());
}
if (!creation) {
RepositoryManager.refreshSavedNode(node);
}
WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),databaseWizard);
wizardDialog.setPageSize(600,540);
wizardDialog.create();
wizardDialog.open();
connItem=databaseWizard.getConnectionItem();
RepositoryManager.refreshSavedNode(node);
}",0.9996272828922848
129747,"/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  GridLayout layout2=null;
  fileField.hide();
  directoryField.hide();
  Composite checkGroup=new Composite(this,SWT.NONE);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  GridData gridData23=new GridData(SWT.FILL,SWT.FILL,true,true);
  gridData23.minimumHeight=2;
  gridData23.heightHint=2;
  checkGroup.setLayoutData(gridData23);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  layout2=(GridLayout)compositeCheckButton.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  layout2.marginLeft=0;
  layout2.marginRight=0;
  layout2.marginWidth=0;
  GridData checkGridData=new GridData(GridData.FILL_HORIZONTAL);
  checkGridData.minimumHeight=5;
  checkGroup.setLayoutData(checkGridData);
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  Group group1=Form.createGroup(this,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.minimumHeight=80;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,4,width,100);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  GridLayout layout2=null;
  fileField.hide();
  directoryField.hide();
  Composite checkGroup=new Composite(this,SWT.NONE);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  GridData gridData23=new GridData(SWT.FILL,SWT.FILL,true,true);
  gridData23.minimumHeight=2;
  gridData23.heightHint=2;
  checkGroup.setLayoutData(gridData23);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  layout2=(GridLayout)compositeCheckButton.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  layout2.marginLeft=0;
  layout2.marginRight=0;
  layout2.marginWidth=0;
  GridData checkGridData=new GridData(GridData.FILL_HORIZONTAL);
  checkGridData.minimumHeight=5;
  checkGroup.setLayoutData(checkGridData);
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  Group group1=Form.createGroup(this,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.minimumHeight=135;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,4,width,130);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
}",0.9989900447265908
129748,"protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
    addSeparator(menu);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
    addToMenu(menu,service.getCreateDiagramAction(true),-1);
    addSeparator(menu);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
    createFileLdifAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileLdifAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
    createLDAPSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createLDAPSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    final AContextualAction createRoutineAction=null;
    addToMenu(menu,createRoutineAction,-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (int i=0; i < configurationElements.length; i++) {
    IConfigurationElement element=configurationElements[i];
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
}","protected void fillMenu(Menu menu){
  IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
  if (repositoryView == null) {
    return;
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.PROCESS)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    addToMenu(menu,service.getCreateProcessAction(true),-1);
    addSeparator(menu);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.BUSINESS_PROCESS)) {
    IDiagramModelService service=(IDiagramModelService)GlobalServiceRegister.getDefault().getService(IDiagramModelService.class);
    addToMenu(menu,service.getCreateDiagramAction(true),-1);
    addSeparator(menu);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_CONNECTIONS)) {
    final CreateConnectionAction createConnectionAction=new CreateConnectionAction(true);
    createConnectionAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createConnectionAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
    final CreateFileDelimitedAction createFileDelimitedAction=new CreateFileDelimitedAction(true);
    createFileDelimitedAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileDelimitedAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
    final CreateFilePositionalAction createFilePositionalAction=new CreateFilePositionalAction(true);
    createFilePositionalAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFilePositionalAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
    final CreateFileRegexpAction createFileRegexpAction=new CreateFileRegexpAction(true);
    createFileRegexpAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileRegexpAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_XML)) {
    final CreateFileXmlAction createFileXmlAction=new CreateFileXmlAction(true);
    createFileXmlAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileXmlAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
    final CreateFileExcelAction createFileExcelAction=new CreateFileExcelAction(true);
    createFileExcelAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileExcelAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_FILE_LDIF)) {
    final CreateFileLdifAction createFileLdifAction=new CreateFileLdifAction(true);
    createFileLdifAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createFileLdifAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
    final CreateLDAPSchemaAction createLDAPSchemaAction=new CreateLDAPSchemaAction(true);
    createLDAPSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createLDAPSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
    final CreateSalesforceSchemaAction createSalesforceModulesAction=new CreateSalesforceSchemaAction(true);
    createSalesforceModulesAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createSalesforceModulesAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
    final CreateGenericSchemaAction createGenericSchemaAction=new CreateGenericSchemaAction(true);
    createGenericSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createGenericSchemaAction,-1);
  }
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
    final CreateWSDLSchemaAction createWSDLSchemaAction=new CreateWSDLSchemaAction(true);
    createWSDLSchemaAction.setWorkbenchPart(repositoryView);
    addToMenu(menu,createWSDLSchemaAction,-1);
  }
  addSeparator(menu);
  if (repositoryView.containsRepositoryType(ERepositoryObjectType.ROUTINES)) {
    IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
    addToMenu(menu,service.getCreateRoutineAction(repositoryView),-1);
  }
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  for (int i=0; i < configurationElements.length; i++) {
    IConfigurationElement element=configurationElements[i];
    try {
      AContextualAction action=(AContextualAction)element.createExecutableExtension(""String_Node_Str"");
      action.setToolbar(true);
      action.setWorkbenchPart(repositoryView);
      addToMenu(menu,action,-1);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9725313999795772
129749,"/** 
 * checkFileFieldsValue active fileViewer if file exist.
 */
private void checkFilePathAndManageIt(boolean isNewFile){
  filePathIsDone=false;
  String fileStr=getConnection().getFilePath();
  if (isContextMode() && getContextModeManager() != null) {
    fileStr=getContextModeManager().getOriginalValue(fileStr);
    fileStr=TalendQuoteUtils.removeQuotes(fileStr);
  }
  if (fileStr == null || fileStr == ""String_Node_Str"") {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    StringBuffer previewRows=new StringBuffer(""String_Node_Str"");
    BufferedReader in=null;
    try {
      File file=new File(fileStr);
      String str;
      int numberLine=0;
      String encoding=getConnection().getEncoding();
      if (encoding == null || encoding.equals(""String_Node_Str"")) {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        encoding=guessedCharset.displayName();
        getConnection().setEncoding(encoding);
      }
      in=new BufferedReader(new InputStreamReader(new FileInputStream(fileStr),encoding));
      previewRows.append(""String_Node_Str"");
      while (((str=in.readLine()) != null) && (numberLine <= maximumRowsToPreview)) {
        numberLine++;
        previewRows.append(str.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
      filePositionalViewer.setText(new String(previewRows));
      filePathIsDone=true;
      if (isNewFile && !isContextMode()) {
        fieldSeparatorText.setText(""String_Node_Str"");
        filePositionalViewer.setSeparatorValue(""String_Node_Str"",true);
        getConnection().setFieldSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      if (e instanceof FileNotFoundException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof EOFException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof IOException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else {
        msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      }
      filePositionalViewer.setText(""String_Node_Str"" + msgError);
      updateStatus(IStatus.ERROR,msgError);
    }
 finally {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException e) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
    }
    filePositionalViewer.layout();
    scrolledCompositeFileViewer.setMinSize(filePositionalViewer.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  }
  checkFieldsValue();
}","/** 
 * checkFileFieldsValue active fileViewer if file exist.
 */
private void checkFilePathAndManageIt(boolean isNewFile){
  filePathIsDone=false;
  String fileStr=getConnection().getFilePath();
  String encoding=getConnection().getEncoding();
  if (isContextMode() && getContextModeManager() != null) {
    fileStr=getContextModeManager().getOriginalValue(fileStr);
    fileStr=TalendQuoteUtils.removeQuotes(fileStr);
    encoding=getContextModeManager().getOriginalValue(encoding);
    encoding=TalendQuoteUtils.removeQuotes(encoding);
  }
  if (fileStr == null || fileStr == ""String_Node_Str"") {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    StringBuffer previewRows=new StringBuffer(""String_Node_Str"");
    BufferedReader in=null;
    try {
      File file=new File(fileStr);
      String str;
      int numberLine=0;
      if (encoding == null || encoding.equals(""String_Node_Str"")) {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        encoding=guessedCharset.displayName();
        getConnection().setEncoding(encoding);
      }
      in=new BufferedReader(new InputStreamReader(new FileInputStream(fileStr),encoding));
      previewRows.append(""String_Node_Str"");
      while (((str=in.readLine()) != null) && (numberLine <= maximumRowsToPreview)) {
        numberLine++;
        previewRows.append(str.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
      filePositionalViewer.setText(new String(previewRows));
      filePathIsDone=true;
      if (isNewFile && !isContextMode()) {
        fieldSeparatorText.setText(""String_Node_Str"");
        filePositionalViewer.setSeparatorValue(""String_Node_Str"",true);
        getConnection().setFieldSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      if (e instanceof FileNotFoundException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof EOFException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof IOException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else {
        msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      }
      filePositionalViewer.setText(""String_Node_Str"" + msgError);
      updateStatus(IStatus.ERROR,msgError);
    }
 finally {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException e) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
    }
    filePositionalViewer.layout();
    scrolledCompositeFileViewer.setMinSize(filePositionalViewer.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  }
  checkFieldsValue();
}",0.9662027833001988
129750,"/** 
 * run a ShadowProcess to determined the Metadata.
 */
protected void runShadowProcess(Boolean flag){
  XmlFileConnection connection2=getConnection();
  if (XmlUtil.isXSDFile(connection2.getXmlFilePath())) {
    refreshMetaDataTable(null,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    checkFieldsValue();
    return;
  }
  try {
    informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    CsvArray csvArray=ShadowProcessHelper.getCsvArray(getProcessDescription(true),""String_Node_Str"");
    if (csvArray == null) {
      informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
 else {
      refreshMetaDataTable(csvArray,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    }
  }
 catch (  CoreException e) {
    if (getParent().getChildren().length == 1) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str""),e.getMessage());
    }
 else {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
    }
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
  checkFieldsValue();
}","/** 
 * run a ShadowProcess to determined the Metadata.
 */
protected void runShadowProcess(Boolean flag){
  XmlFileConnection connection2=getConnection();
  String tempXmlFilePath=getContextXmlPath(connection2);
  if (tempXmlFilePath == null ? XmlUtil.isXSDFile(connection2.getXmlFilePath()) : XmlUtil.isXSDFile(connection2.getXmlFilePath()) || XmlUtil.isXSDFile(tempXmlFilePath)) {
    refreshMetaDataTable(null,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    checkFieldsValue();
    return;
  }
  try {
    informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    CsvArray csvArray=ShadowProcessHelper.getCsvArray(getProcessDescription(true),""String_Node_Str"");
    if (csvArray == null) {
      informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
 else {
      refreshMetaDataTable(csvArray,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    }
  }
 catch (  CoreException e) {
    if (getParent().getChildren().length == 1) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str""),e.getMessage());
    }
 else {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
    }
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
  checkFieldsValue();
}",0.9390374331550804
129751,"/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  guessButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      XmlFileConnection connection2=getConnection();
      if (connection2.getXmlFilePath() == null || connection2.getXmlFilePath().equals(""String_Node_Str"")) {
        informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        return;
      }
      if (!new File(connection2.getXmlFilePath()).exists()) {
        String msg=Messages.getString(""String_Node_Str"");
        informationLabel.setText(MessageFormat.format(msg,connection2.getXmlFilePath()));
        return;
      }
      if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
        MessageBox box=new MessageBox(getShell(),SWT.ICON_INFORMATION | SWT.YES | SWT.NO| SWT.CANCEL);
        box.setMessage(Messages.getString(""String_Node_Str""));
        int open7=box.open();
        if (open7 == SWT.YES) {
          runShadowProcess(true);
        }
 else         if (open7 == SWT.NO) {
          runShadowProcess(false);
        }
        return;
      }
      runShadowProcess(true);
    }
  }
);
  if (cancelButton != null) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}","/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  guessButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      XmlFileConnection connection2=getConnection();
      String tempXmlFilePath=getContextXmlPath(connection2);
      if (connection2.getXmlFilePath() == null || connection2.getXmlFilePath().equals(""String_Node_Str"")) {
        informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        return;
      }
      if (tempXmlFilePath == null ? (!new File(connection2.getXmlFilePath()).exists()) : (!new File(connection2.getXmlFilePath()).exists() && !new File(tempXmlFilePath).exists())) {
        String msg=Messages.getString(""String_Node_Str"");
        informationLabel.setText(MessageFormat.format(msg,connection2.getXmlFilePath()));
        return;
      }
      if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
        MessageBox box=new MessageBox(getShell(),SWT.ICON_INFORMATION | SWT.YES | SWT.NO| SWT.CANCEL);
        box.setMessage(Messages.getString(""String_Node_Str""));
        int open7=box.open();
        if (open7 == SWT.YES) {
          runShadowProcess(true);
        }
 else         if (open7 == SWT.NO) {
          runShadowProcess(false);
        }
        return;
      }
      runShadowProcess(true);
    }
  }
);
  if (cancelButton != null) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}",0.94208
129752,"/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  GridLayout layout2=null;
  fileField.hide();
  directoryField.hide();
  Composite checkGroup=new Composite(this,SWT.NONE);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  GridData gridData23=new GridData(SWT.FILL,SWT.FILL,true,true);
  gridData23.minimumHeight=2;
  gridData23.heightHint=2;
  checkGroup.setLayoutData(gridData23);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  layout2=(GridLayout)compositeCheckButton.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  layout2.marginLeft=0;
  layout2.marginRight=0;
  layout2.marginWidth=0;
  GridData checkGridData=new GridData(GridData.FILL_HORIZONTAL);
  checkGridData.minimumHeight=5;
  checkGroup.setLayoutData(checkGridData);
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  Group group1=Form.createGroup(this,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.minimumHeight=80;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,4,width,100);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  GridLayout layout2=null;
  fileField.hide();
  directoryField.hide();
  Composite checkGroup=new Composite(this,SWT.NONE);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  GridData gridData23=new GridData(SWT.FILL,SWT.FILL,true,true);
  gridData23.minimumHeight=2;
  gridData23.heightHint=2;
  checkGroup.setLayoutData(gridData23);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  layout2=(GridLayout)compositeCheckButton.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  layout2.marginLeft=0;
  layout2.marginRight=0;
  layout2.marginWidth=0;
  GridData checkGridData=new GridData(GridData.FILL_HORIZONTAL);
  checkGridData.minimumHeight=5;
  checkGroup.setLayoutData(checkGridData);
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  Group group1=Form.createGroup(this,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.minimumHeight=135;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,4,width,130);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
}",0.9989900447265908
129753,"/** 
 * checkFileFieldsValue active fileViewer if file exist.
 */
private void checkFilePathAndManageIt(boolean isNewFile){
  filePathIsDone=false;
  String fileStr=getConnection().getFilePath();
  if (isContextMode() && getContextModeManager() != null) {
    fileStr=getContextModeManager().getOriginalValue(fileStr);
    fileStr=TalendQuoteUtils.removeQuotes(fileStr);
  }
  if (fileStr == null || fileStr == ""String_Node_Str"") {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    StringBuffer previewRows=new StringBuffer(""String_Node_Str"");
    BufferedReader in=null;
    try {
      File file=new File(fileStr);
      String str;
      int numberLine=0;
      String encoding=getConnection().getEncoding();
      if (encoding == null || encoding.equals(""String_Node_Str"")) {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        encoding=guessedCharset.displayName();
        getConnection().setEncoding(encoding);
      }
      in=new BufferedReader(new InputStreamReader(new FileInputStream(fileStr),encoding));
      previewRows.append(""String_Node_Str"");
      while (((str=in.readLine()) != null) && (numberLine <= maximumRowsToPreview)) {
        numberLine++;
        previewRows.append(str.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
      filePositionalViewer.setText(new String(previewRows));
      filePathIsDone=true;
      if (isNewFile && !isContextMode()) {
        fieldSeparatorText.setText(""String_Node_Str"");
        filePositionalViewer.setSeparatorValue(""String_Node_Str"",true);
        getConnection().setFieldSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      if (e instanceof FileNotFoundException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof EOFException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof IOException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else {
        msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      }
      filePositionalViewer.setText(""String_Node_Str"" + msgError);
      updateStatus(IStatus.ERROR,msgError);
    }
 finally {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException e) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
    }
    filePositionalViewer.layout();
    scrolledCompositeFileViewer.setMinSize(filePositionalViewer.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  }
  checkFieldsValue();
}","/** 
 * checkFileFieldsValue active fileViewer if file exist.
 */
private void checkFilePathAndManageIt(boolean isNewFile){
  filePathIsDone=false;
  String fileStr=getConnection().getFilePath();
  String encoding=getConnection().getEncoding();
  if (isContextMode() && getContextModeManager() != null) {
    fileStr=getContextModeManager().getOriginalValue(fileStr);
    fileStr=TalendQuoteUtils.removeQuotes(fileStr);
    encoding=getContextModeManager().getOriginalValue(encoding);
    encoding=TalendQuoteUtils.removeQuotes(encoding);
  }
  if (fileStr == null || fileStr == ""String_Node_Str"") {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    filePositionalViewer.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    StringBuffer previewRows=new StringBuffer(""String_Node_Str"");
    BufferedReader in=null;
    try {
      File file=new File(fileStr);
      String str;
      int numberLine=0;
      if (encoding == null || encoding.equals(""String_Node_Str"")) {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        encoding=guessedCharset.displayName();
        getConnection().setEncoding(encoding);
      }
      in=new BufferedReader(new InputStreamReader(new FileInputStream(fileStr),encoding));
      previewRows.append(""String_Node_Str"");
      while (((str=in.readLine()) != null) && (numberLine <= maximumRowsToPreview)) {
        numberLine++;
        previewRows.append(str.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
      filePositionalViewer.setText(new String(previewRows));
      filePathIsDone=true;
      if (isNewFile && !isContextMode()) {
        fieldSeparatorText.setText(""String_Node_Str"");
        filePositionalViewer.setSeparatorValue(""String_Node_Str"",true);
        getConnection().setFieldSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      if (e instanceof FileNotFoundException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof EOFException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else       if (e instanceof IOException) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
 else {
        msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ Messages.getString(""String_Node_Str"");
      }
      filePositionalViewer.setText(""String_Node_Str"" + msgError);
      updateStatus(IStatus.ERROR,msgError);
    }
 finally {
      String msgError=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException e) {
        msgError=msgError + Messages.getString(""String_Node_Str"");
      }
    }
    filePositionalViewer.layout();
    scrolledCompositeFileViewer.setMinSize(filePositionalViewer.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  }
  checkFieldsValue();
}",0.9662027833001988
129754,"/** 
 * get absolute path of the filePath
 * @param filePath
 * @return
 */
public String getAbsolutePath(String filePath){
  return this.getfileURL(filePath).getPath();
}","/** 
 * get absolute path of the filePath
 * @param filePath
 * @return
 */
public String getAbsolutePath(String filePath){
  String path=this.getfileURL(filePath).getPath();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    if (path.startsWith(""String_Node_Str"")) {
      path=path.substring(1);
    }
    path=path.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return path;
}",0.5606837606837607
129755,"/** 
 * run a ShadowProcess to determined the Metadata.
 */
protected void runShadowProcess(Boolean flag){
  XmlFileConnection connection2=getConnection();
  if (XmlUtil.isXSDFile(connection2.getXmlFilePath())) {
    refreshMetaDataTable(null,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    checkFieldsValue();
    return;
  }
  try {
    informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    CsvArray csvArray=ShadowProcessHelper.getCsvArray(getProcessDescription(true),""String_Node_Str"");
    if (csvArray == null) {
      informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
 else {
      refreshMetaDataTable(csvArray,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    }
  }
 catch (  CoreException e) {
    if (getParent().getChildren().length == 1) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str""),e.getMessage());
    }
 else {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
    }
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
  checkFieldsValue();
}","/** 
 * run a ShadowProcess to determined the Metadata.
 */
protected void runShadowProcess(Boolean flag){
  XmlFileConnection connection2=getConnection();
  String tempXmlFilePath=getContextXmlPath(connection2);
  if (tempXmlFilePath == null ? XmlUtil.isXSDFile(connection2.getXmlFilePath()) : XmlUtil.isXSDFile(connection2.getXmlFilePath()) || XmlUtil.isXSDFile(tempXmlFilePath)) {
    refreshMetaDataTable(null,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    checkFieldsValue();
    return;
  }
  try {
    informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    CsvArray csvArray=ShadowProcessHelper.getCsvArray(getProcessDescription(true),""String_Node_Str"");
    if (csvArray == null) {
      informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
 else {
      refreshMetaDataTable(csvArray,((XmlXPathLoopDescriptor)connection2.getSchema().get(0)).getSchemaTargets(),flag);
    }
  }
 catch (  CoreException e) {
    if (getParent().getChildren().length == 1) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str""),e.getMessage());
    }
 else {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
    }
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
  checkFieldsValue();
}",0.9390374331550804
129756,"/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  guessButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      XmlFileConnection connection2=getConnection();
      if (connection2.getXmlFilePath() == null || connection2.getXmlFilePath().equals(""String_Node_Str"")) {
        informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        return;
      }
      if (!new File(connection2.getXmlFilePath()).exists()) {
        String msg=Messages.getString(""String_Node_Str"");
        informationLabel.setText(MessageFormat.format(msg,connection2.getXmlFilePath()));
        return;
      }
      if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
        MessageBox box=new MessageBox(getShell(),SWT.ICON_INFORMATION | SWT.YES | SWT.NO| SWT.CANCEL);
        box.setMessage(Messages.getString(""String_Node_Str""));
        int open7=box.open();
        if (open7 == SWT.YES) {
          runShadowProcess(true);
        }
 else         if (open7 == SWT.NO) {
          runShadowProcess(false);
        }
        return;
      }
      runShadowProcess(true);
    }
  }
);
  if (cancelButton != null) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}","/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  guessButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      XmlFileConnection connection2=getConnection();
      String tempXmlFilePath=getContextXmlPath(connection2);
      if (connection2.getXmlFilePath() == null || connection2.getXmlFilePath().equals(""String_Node_Str"")) {
        informationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
        return;
      }
      if (tempXmlFilePath == null ? (!new File(connection2.getXmlFilePath()).exists()) : (!new File(connection2.getXmlFilePath()).exists() && !new File(tempXmlFilePath).exists())) {
        String msg=Messages.getString(""String_Node_Str"");
        informationLabel.setText(MessageFormat.format(msg,connection2.getXmlFilePath()));
        return;
      }
      if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
        MessageBox box=new MessageBox(getShell(),SWT.ICON_INFORMATION | SWT.YES | SWT.NO| SWT.CANCEL);
        box.setMessage(Messages.getString(""String_Node_Str""));
        int open7=box.open();
        if (open7 == SWT.YES) {
          runShadowProcess(true);
        }
 else         if (open7 == SWT.NO) {
          runShadowProcess(false);
        }
        return;
      }
      runShadowProcess(true);
    }
  }
);
  if (cancelButton != null) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}",0.94208
129757,"public void widgetSelected(SelectionEvent event){
  if (fileFieldXml.getResult() == null) {
    return;
  }
  String text=fileFieldXml.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  File file=new File(text);
  if (file.exists()) {
    if (file.exists()) {
      if (XmlUtil.isXSDFile(text)) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        try {
          XSDSchema xsdSchema=updateXSDSchema(text);
          List<ATreeNode> list=updateRootNodes(xsdSchema,true);
          if (list.size() > 1) {
            RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
            if (dialog.open() == IDialogConstants.OK_ID) {
              ATreeNode selectedNode=dialog.getSelectedNode();
              valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              if (treeNodes.size() > 0) {
                treeNode=treeNodes.get(0);
              }
            }
 else {
              return;
            }
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
 catch (        Exception ex) {
          ExceptionHandler.process(ex);
        }
        XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
        wizard.setRootNodes(treeNodes);
        wizard.setTreeRootNode(treeNode);
        List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
        if (nodeList.size() > 0) {
          FOXTreeNode foxTreeNode=nodeList.get(0);
          EList root=getConnection().getRoot();
          if (root == null)           return;
          XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
          String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
          xmlFileNode.setXMLPath(currentPath);
          xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
          xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
          xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
          xmlFileNode.setType(foxTreeNode.getDataType());
          XMLFileNode originalXmlNode=null;
          if (root.size() > 0) {
            originalXmlNode=(XMLFileNode)root.get(0);
          }
          if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
            wizard.setXsdRootChange(true);
          }
 else {
            wizard.setXsdRootChange(false);
          }
          root.clear();
          root.add(xmlFileNode);
        }
      }
 else {
        valid=treePopulator.populateTree(text,treeNode);
      }
    }
  }
}","public void widgetSelected(SelectionEvent event){
  if (fileFieldXml.getResult() == null) {
    return;
  }
  String text=fileFieldXml.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  File file=new File(text);
  if (file.exists()) {
    if (file.exists()) {
      if (XmlUtil.isXSDFile(text)) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        try {
          XSDSchema xsdSchema=updateXSDSchema(text);
          List<ATreeNode> list=updateRootNodes(xsdSchema,true);
          if (list.size() > 1) {
            RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
            if (dialog.open() == IDialogConstants.OK_ID) {
              ATreeNode selectedNode=dialog.getSelectedNode();
              valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              if (treeNodes.size() > 0) {
                treeNode=treeNodes.get(0);
              }
            }
 else {
              return;
            }
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
 catch (        Exception ex) {
          ExceptionHandler.process(ex);
        }
        XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
        wizard.setRootNodes(treeNodes);
        wizard.setTreeRootNode(treeNode);
        List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
        if (nodeList.size() > 0) {
          FOXTreeNode foxTreeNode=nodeList.get(0);
          EList root=getConnection().getRoot();
          if (root == null)           return;
          XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
          String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
          xmlFileNode.setXMLPath(currentPath);
          xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
          xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
          xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
          xmlFileNode.setType(foxTreeNode.getDataType());
          XMLFileNode originalXmlNode=null;
          if (root.size() > 0) {
            originalXmlNode=(XMLFileNode)root.get(0);
          }
          if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
            wizard.setXsdRootChange(true);
          }
 else {
            wizard.setXsdRootChange(false);
          }
          root.clear();
          root.add(xmlFileNode);
        }
      }
 else {
        valid=treePopulator.populateTree(text,treeNode);
      }
    }
    checkFieldsValue();
  }
}",0.9958734525447044
129758,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  fileFieldXml.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent event){
      if (fileFieldXml.getResult() == null) {
        return;
      }
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        if (file.exists()) {
          if (XmlUtil.isXSDFile(text)) {
            List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
            try {
              XSDSchema xsdSchema=updateXSDSchema(text);
              List<ATreeNode> list=updateRootNodes(xsdSchema,true);
              if (list.size() > 1) {
                RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
                if (dialog.open() == IDialogConstants.OK_ID) {
                  ATreeNode selectedNode=dialog.getSelectedNode();
                  valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                  if (treeNodes.size() > 0) {
                    treeNode=treeNodes.get(0);
                  }
                }
 else {
                  return;
                }
              }
 else {
                valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
                if (treeNodes.size() > 0) {
                  treeNode=treeNodes.get(0);
                }
              }
            }
 catch (            Exception ex) {
              ExceptionHandler.process(ex);
            }
            XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
            wizard.setRootNodes(treeNodes);
            wizard.setTreeRootNode(treeNode);
            List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
            if (nodeList.size() > 0) {
              FOXTreeNode foxTreeNode=nodeList.get(0);
              EList root=getConnection().getRoot();
              if (root == null)               return;
              XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
              String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
              xmlFileNode.setXMLPath(currentPath);
              xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
              xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
              xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
              xmlFileNode.setType(foxTreeNode.getDataType());
              XMLFileNode originalXmlNode=null;
              if (root.size() > 0) {
                originalXmlNode=(XMLFileNode)root.get(0);
              }
              if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
                wizard.setXsdRootChange(true);
              }
 else {
                wizard.setXsdRootChange(false);
              }
              root.clear();
              root.add(xmlFileNode);
            }
          }
 else {
            valid=treePopulator.populateTree(text,treeNode);
          }
        }
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  fileFieldXml.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(fileFieldXml.getText()));
      XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
      wizard.setTreeRootNode(treeNode);
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e3) {
            ExceptionHandler.process(e3);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      try {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        String str;
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessedCharset.displayName()));
        while ((str=in.readLine()) != null) {
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
      }
 catch (      Exception ex) {
        String fileStr=text;
        String msgError=""String_Node_Str"" + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
        if (ex instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception ex2) {
          ExceptionHandler.process(ex2);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !(""String_Node_Str"").equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  fileFieldXml.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent event){
      if (fileFieldXml.getResult() == null) {
        return;
      }
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        if (file.exists()) {
          if (XmlUtil.isXSDFile(text)) {
            List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
            try {
              XSDSchema xsdSchema=updateXSDSchema(text);
              List<ATreeNode> list=updateRootNodes(xsdSchema,true);
              if (list.size() > 1) {
                RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
                if (dialog.open() == IDialogConstants.OK_ID) {
                  ATreeNode selectedNode=dialog.getSelectedNode();
                  valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                  if (treeNodes.size() > 0) {
                    treeNode=treeNodes.get(0);
                  }
                }
 else {
                  return;
                }
              }
 else {
                valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
                if (treeNodes.size() > 0) {
                  treeNode=treeNodes.get(0);
                }
              }
            }
 catch (            Exception ex) {
              ExceptionHandler.process(ex);
            }
            XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
            wizard.setRootNodes(treeNodes);
            wizard.setTreeRootNode(treeNode);
            List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
            if (nodeList.size() > 0) {
              FOXTreeNode foxTreeNode=nodeList.get(0);
              EList root=getConnection().getRoot();
              if (root == null)               return;
              XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
              String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
              xmlFileNode.setXMLPath(currentPath);
              xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
              xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
              xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
              xmlFileNode.setType(foxTreeNode.getDataType());
              XMLFileNode originalXmlNode=null;
              if (root.size() > 0) {
                originalXmlNode=(XMLFileNode)root.get(0);
              }
              if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
                wizard.setXsdRootChange(true);
              }
 else {
                wizard.setXsdRootChange(false);
              }
              root.clear();
              root.add(xmlFileNode);
            }
          }
 else {
            valid=treePopulator.populateTree(text,treeNode);
          }
        }
        checkFieldsValue();
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  fileFieldXml.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(fileFieldXml.getText()));
      XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
      wizard.setTreeRootNode(treeNode);
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e3) {
            ExceptionHandler.process(e3);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      try {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        String str;
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessedCharset.displayName()));
        while ((str=in.readLine()) != null) {
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
      }
 catch (      Exception ex) {
        String fileStr=text;
        String msgError=""String_Node_Str"" + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
        if (ex instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception ex2) {
          ExceptionHandler.process(ex2);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !(""String_Node_Str"").equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
}",0.9981972701519444
129759,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_MDMCONNECTION.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
this.setImageDescriptor(createImage);
collectChildNames(node);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_MDMCONNECTION.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
this.setImageDescriptor(createImage);
collectChildNames(node);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
break;
default :
return;
}
setEnabled(true);
}",0.8927875243664717
129760,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_MDMCONNECTION.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
this.setImageDescriptor(createImage);
collectChildNames(node);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_MDMCONNECTION.equals(nodeType)) {
    setEnabled(false);
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
this.setImageDescriptor(createImage);
collectChildNames(node);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
break;
default :
return;
}
setEnabled(true);
}",0.8927875243664717
129761,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.8954372623574145
129762,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_EXCEL.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_EXCEL.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}",0.9048543689320389
129763,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_LDIF.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_LDIF.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.894937917860554
129764,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_POSITIONAL.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_POSITIONAL.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}",0.923671497584541
129765,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_REGEXP.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_REGEXP.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}",0.9233753637245392
129766,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_XML.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_FILE_XML.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
}
setEnabled(true);
}",0.9046692607003892
129767,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(createLabel);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(editLabel);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(openLabel);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(createLabel);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(editLabel);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(openLabel);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.8920510304219823
129768,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(createLabel);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(editLabel);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(openLabel);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(createLabel);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(editLabel);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(openLabel);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.8920510304219823
129769,"protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(CREATE_LABEL);
collectChildNames(node);
creation=true;
this.setImageDescriptor(createImage);
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(EDIT_LABEL);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(OPEN_LABEL);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.8957345971563981
129770,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
      setEnabled(false);
      return;
    }
  this.setText(createLabel);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(editLabel);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(openLabel);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (!currentNodeType.equals(nodeType)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
case SYSTEM_FOLDER:
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    setEnabled(false);
    return;
  }
this.setText(createLabel);
collectChildNames(node);
this.setImageDescriptor(createImage);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(editLabel);
this.setImageDescriptor(defaultImage);
collectSiblingNames(node);
}
 else {
this.setText(openLabel);
this.setImageDescriptor(defaultImage);
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.8931000971817298
129771,"public void widgetSelected(SelectionEvent event){
  if (fileFieldXml.getResult() == null) {
    return;
  }
  String text=fileFieldXml.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  File file=new File(text);
  if (file.exists()) {
    if (file.exists()) {
      if (XmlUtil.isXSDFile(text)) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        try {
          XSDSchema xsdSchema=updateXSDSchema(text);
          List<ATreeNode> list=updateRootNodes(xsdSchema,true);
          if (list.size() > 1) {
            RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
            if (dialog.open() == IDialogConstants.OK_ID) {
              ATreeNode selectedNode=dialog.getSelectedNode();
              valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              if (treeNodes.size() > 0) {
                treeNode=treeNodes.get(0);
              }
            }
 else {
              return;
            }
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
 catch (        Exception ex) {
          ExceptionHandler.process(ex);
        }
        XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
        wizard.setRootNodes(treeNodes);
        wizard.setTreeRootNode(treeNode);
        List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
        if (nodeList.size() > 0) {
          FOXTreeNode foxTreeNode=nodeList.get(0);
          EList root=getConnection().getRoot();
          if (root == null)           return;
          XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
          String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
          xmlFileNode.setXMLPath(currentPath);
          xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
          xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
          xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
          xmlFileNode.setType(foxTreeNode.getDataType());
          XMLFileNode originalXmlNode=null;
          if (root.size() > 0) {
            originalXmlNode=(XMLFileNode)root.get(0);
          }
          if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
            wizard.setXsdRootChange(true);
          }
 else {
            wizard.setXsdRootChange(false);
          }
          root.clear();
          root.add(xmlFileNode);
        }
      }
 else {
        valid=treePopulator.populateTree(text,treeNode);
      }
    }
  }
}","public void widgetSelected(SelectionEvent event){
  if (fileFieldXml.getResult() == null) {
    return;
  }
  String text=fileFieldXml.getText();
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
    text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
  }
  File file=new File(text);
  if (file.exists()) {
    if (file.exists()) {
      if (XmlUtil.isXSDFile(text)) {
        List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
        try {
          XSDSchema xsdSchema=updateXSDSchema(text);
          List<ATreeNode> list=updateRootNodes(xsdSchema,true);
          if (list.size() > 1) {
            RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
            if (dialog.open() == IDialogConstants.OK_ID) {
              ATreeNode selectedNode=dialog.getSelectedNode();
              valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
              if (treeNodes.size() > 0) {
                treeNode=treeNodes.get(0);
              }
            }
 else {
              return;
            }
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
 catch (        Exception ex) {
          ExceptionHandler.process(ex);
        }
        XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
        wizard.setRootNodes(treeNodes);
        wizard.setTreeRootNode(treeNode);
        List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
        if (nodeList.size() > 0) {
          FOXTreeNode foxTreeNode=nodeList.get(0);
          EList root=getConnection().getRoot();
          if (root == null)           return;
          XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
          String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
          xmlFileNode.setXMLPath(currentPath);
          xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
          xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
          xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
          xmlFileNode.setType(foxTreeNode.getDataType());
          XMLFileNode originalXmlNode=null;
          if (root.size() > 0) {
            originalXmlNode=(XMLFileNode)root.get(0);
          }
          if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
            wizard.setXsdRootChange(true);
          }
 else {
            wizard.setXsdRootChange(false);
          }
          root.clear();
          root.add(xmlFileNode);
        }
      }
 else {
        valid=treePopulator.populateTree(text,treeNode);
      }
    }
    checkFieldsValue();
  }
}",0.9958734525447044
129772,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  fileFieldXml.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent event){
      if (fileFieldXml.getResult() == null) {
        return;
      }
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        if (file.exists()) {
          if (XmlUtil.isXSDFile(text)) {
            List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
            try {
              XSDSchema xsdSchema=updateXSDSchema(text);
              List<ATreeNode> list=updateRootNodes(xsdSchema,true);
              if (list.size() > 1) {
                RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
                if (dialog.open() == IDialogConstants.OK_ID) {
                  ATreeNode selectedNode=dialog.getSelectedNode();
                  valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                  if (treeNodes.size() > 0) {
                    treeNode=treeNodes.get(0);
                  }
                }
 else {
                  return;
                }
              }
 else {
                valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
                if (treeNodes.size() > 0) {
                  treeNode=treeNodes.get(0);
                }
              }
            }
 catch (            Exception ex) {
              ExceptionHandler.process(ex);
            }
            XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
            wizard.setRootNodes(treeNodes);
            wizard.setTreeRootNode(treeNode);
            List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
            if (nodeList.size() > 0) {
              FOXTreeNode foxTreeNode=nodeList.get(0);
              EList root=getConnection().getRoot();
              if (root == null)               return;
              XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
              String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
              xmlFileNode.setXMLPath(currentPath);
              xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
              xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
              xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
              xmlFileNode.setType(foxTreeNode.getDataType());
              XMLFileNode originalXmlNode=null;
              if (root.size() > 0) {
                originalXmlNode=(XMLFileNode)root.get(0);
              }
              if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
                wizard.setXsdRootChange(true);
              }
 else {
                wizard.setXsdRootChange(false);
              }
              root.clear();
              root.add(xmlFileNode);
            }
          }
 else {
            valid=treePopulator.populateTree(text,treeNode);
          }
        }
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  fileFieldXml.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(fileFieldXml.getText()));
      XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
      wizard.setTreeRootNode(treeNode);
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e3) {
            ExceptionHandler.process(e3);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      try {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        String str;
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessedCharset.displayName()));
        while ((str=in.readLine()) != null) {
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
      }
 catch (      Exception ex) {
        String fileStr=text;
        String msgError=""String_Node_Str"" + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
        if (ex instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception ex2) {
          ExceptionHandler.process(ex2);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !(""String_Node_Str"").equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  fileFieldXml.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent event){
      if (fileFieldXml.getResult() == null) {
        return;
      }
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      File file=new File(text);
      if (file.exists()) {
        if (file.exists()) {
          if (XmlUtil.isXSDFile(text)) {
            List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
            try {
              XSDSchema xsdSchema=updateXSDSchema(text);
              List<ATreeNode> list=updateRootNodes(xsdSchema,true);
              if (list.size() > 1) {
                RootNodeSelectDialog dialog=new RootNodeSelectDialog(null,list);
                if (dialog.open() == IDialogConstants.OK_ID) {
                  ATreeNode selectedNode=dialog.getSelectedNode();
                  valid=treePopulator.populateTree(xsdSchema,selectedNode,treeNodes);
                  if (treeNodes.size() > 0) {
                    treeNode=treeNodes.get(0);
                  }
                }
 else {
                  return;
                }
              }
 else {
                valid=treePopulator.populateTree(xsdSchema,list.get(0),treeNodes);
                if (treeNodes.size() > 0) {
                  treeNode=treeNodes.get(0);
                }
              }
            }
 catch (            Exception ex) {
              ExceptionHandler.process(ex);
            }
            XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
            wizard.setRootNodes(treeNodes);
            wizard.setTreeRootNode(treeNode);
            List<FOXTreeNode> nodeList=getCorrespondingFoxTreeNodes(treeNode,true);
            if (nodeList.size() > 0) {
              FOXTreeNode foxTreeNode=nodeList.get(0);
              EList root=getConnection().getRoot();
              if (root == null)               return;
              XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
              String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
              xmlFileNode.setXMLPath(currentPath);
              xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
              xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
              xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
              xmlFileNode.setType(foxTreeNode.getDataType());
              XMLFileNode originalXmlNode=null;
              if (root.size() > 0) {
                originalXmlNode=(XMLFileNode)root.get(0);
              }
              if (originalXmlNode != null && !currentPath.equals(originalXmlNode.getXMLPath())) {
                wizard.setXsdRootChange(true);
              }
 else {
                wizard.setXsdRootChange(false);
              }
              root.clear();
              root.add(xmlFileNode);
            }
          }
 else {
            valid=treePopulator.populateTree(text,treeNode);
          }
        }
        checkFieldsValue();
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  fileFieldXml.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      String text=fileFieldXml.getText();
      if (isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
        text=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,text));
      }
      if (getConnection().getXmlFilePath() != null && !getConnection().getXmlFilePath().equals(text)) {
        getConnection().getLoop().clear();
        xsdPathChanged=true;
      }
 else {
        xsdPathChanged=false;
      }
      getConnection().setXmlFilePath(PathUtils.getPortablePath(fileFieldXml.getText()));
      XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
      wizard.setTreeRootNode(treeNode);
      BufferedReader in=null;
      File file=null;
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0 && !isModifing) {
        file=new File(tempXmlXsdPath);
        if (!file.exists()) {
          try {
            file.createNewFile();
          }
 catch (          IOException e2) {
            ExceptionHandler.process(e2);
          }
          FileOutputStream outStream;
          try {
            outStream=new FileOutputStream(file);
            outStream.write(getConnection().getFileContent());
            outStream.close();
          }
 catch (          FileNotFoundException e1) {
            ExceptionHandler.process(e1);
          }
catch (          IOException e3) {
            ExceptionHandler.process(e3);
          }
        }
      }
 else {
        file=new File(text);
      }
      if (!XmlUtil.isXMLFile(file.getPath())) {
        setFileContent(file);
      }
      try {
        Charset guessedCharset=CharsetToolkit.guessEncoding(file,4096);
        String str;
        in=new BufferedReader(new InputStreamReader(new FileInputStream(file),guessedCharset.displayName()));
        while ((str=in.readLine()) != null) {
          if (str.contains(""String_Node_Str"")) {
            String regex=""String_Node_Str"";
            Perl5Compiler compiler=new Perl5Compiler();
            Perl5Matcher matcher=new Perl5Matcher();
            Pattern pattern=null;
            try {
              pattern=compiler.compile(regex);
              if (matcher.contains(str,pattern)) {
                MatchResult matchResult=matcher.getMatch();
                if (matchResult != null) {
                  encoding=matchResult.group(1);
                }
              }
            }
 catch (            MalformedPatternException malE) {
              ExceptionHandler.process(malE);
            }
          }
        }
      }
 catch (      Exception ex) {
        String fileStr=text;
        String msgError=""String_Node_Str"" + ""String_Node_Str"" + fileStr.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
        if (ex instanceof FileNotFoundException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof EOFException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else         if (ex instanceof IOException) {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
 else {
          msgError=msgError + Messages.getString(""String_Node_Str"");
        }
        if (!isReadOnly()) {
          updateStatus(IStatus.ERROR,msgError);
        }
      }
 finally {
        try {
          if (in != null) {
            in.close();
          }
        }
 catch (        Exception ex2) {
          ExceptionHandler.process(ex2);
        }
      }
      if (getConnection().getEncoding() == null || ""String_Node_Str"".equals(getConnection().getEncoding())) {
        getConnection().setEncoding(encoding);
        if (encoding != null && !(""String_Node_Str"").equals(encoding)) {
          encodingCombo.setText(encoding);
        }
 else {
          encodingCombo.setText(""String_Node_Str"");
        }
      }
      checkFieldsValue();
      isModifing=true;
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
}",0.9981972701519444
129773,"@Override public void onTestFailure(ITestResult tr){
  Reporter.setCurrentTestResult(tr);
  IClass clazz=tr.getTestClass();
  String className=clazz.getName();
  String methodName=tr.getMethod().getMethodName();
  String parameter=""String_Node_Str"";
  for (  Object param : tr.getParameters()) {
    String par=(String)param;
    parameter=parameter + ""String_Node_Str"" + par.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  }
  if (parameter != null && !""String_Node_Str"".equals(parameter.trim())) {
    parameter=parameter.substring(1);
  }
  int lineNumber=0;
  for (  StackTraceElement element : tr.getThrowable().getStackTrace()) {
    if (methodName.equals(element.getMethodName())) {
      lineNumber=element.getLineNumber();
    }
  }
  String name=className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameter+ ""String_Node_Str""+ lineNumber+ ""String_Node_Str"";
  try {
    captureScreenshot(imgFilePath + File.separator + name);
    System.out.println(imgFilePath + File.separator + name);
  }
 catch (  Exception e) {
  }
}","@Override public void onTestFailure(ITestResult tr){
  Reporter.setCurrentTestResult(tr);
  IClass clazz=tr.getTestClass();
  String className=clazz.getName();
  String methodName=tr.getMethod().getMethodName();
  String parameter=""String_Node_Str"";
  try {
    for (    Object param : tr.getParameters()) {
      String par=(String)param;
      parameter=parameter + ""String_Node_Str"" + par.replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
    }
  }
 catch (  Exception ex) {
    for (    Object param : tr.getParameters()) {
      logger.info(""String_Node_Str"" + param);
    }
    ex.printStackTrace();
  }
  if (parameter != null && !""String_Node_Str"".equals(parameter.trim())) {
    parameter=parameter.substring(1);
  }
  int lineNumber=0;
  for (  StackTraceElement element : tr.getThrowable().getStackTrace()) {
    if (methodName.equals(element.getMethodName())) {
      lineNumber=element.getLineNumber();
    }
  }
  String name=className + ""String_Node_Str"" + methodName+ ""String_Node_Str""+ parameter+ ""String_Node_Str""+ lineNumber+ ""String_Node_Str"";
  try {
    captureScreenshot(imgFilePath + File.separator + name);
    System.out.println(imgFilePath + File.separator + name);
  }
 catch (  Exception e) {
  }
}",0.922077922077922
129774,"public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}","public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}",0.9949367088607596
129775,"/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          if (myClass != null && !myClass.getName().equals(""String_Node_Str"")) {
            JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
            addJavaType(javaType);
          }
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}","/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
          addJavaType(javaType);
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}",0.9782559964133604
129776,"public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}","public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}",0.9949367088607596
129777,"/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          if (myClass != null && !myClass.getName().equals(""String_Node_Str"")) {
            JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
            addJavaType(javaType);
          }
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}","/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
          addJavaType(javaType);
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}",0.9782559964133604
129778,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,parentNode,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,parentNode,currentPath);
    }
  }
}",0.993552617200306
129779,"public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute2){
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      String originalElementName=xsdElementDeclaration.getName();
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
        }
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue()) && (!(prefixNumberGenerated > 1 && originalElementName.equals(selectedNode.getValue())))) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdTypeDefinition.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
          node.setCurrentNamespace(xsdTypeDefinition.getTargetNamespace());
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}","public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute2){
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      String originalElementName=xsdElementDeclaration.getName();
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
        }
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue()) && (!(prefixNumberGenerated > 1 && originalElementName.equals(selectedNode.getValue())))) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      if (xsdTypeDefinition == null) {
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
          node.setCurrentNamespace(xsdTypeDefinition.getTargetNamespace());
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}",0.9774123899684438
129780,"public List<ATreeNode> getAllRootNodes(XSDSchema xsdSchema) throws OdaException {
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  List<String> rootNodesName=new ArrayList<String>();
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  all.addAll(xsdSchema.getTypeDefinitions());
  all=XSDNamedComponentImpl.sortNamedComponents(all);
  for (Iterator i=all.iterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof XSDElementDeclaration) {
      ATreeNode node=new ATreeNode();
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)o;
      String elementName=xsdElementDeclaration.getQName();
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
          if (prefix != null && !prefix.isEmpty()) {
            elementName=prefix + ""String_Node_Str"" + elementName;
          }
        }
      }
      node.setValue(elementName);
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
        rootNodesName.add((String)node.getValue());
        rootNodes.add(node);
      }
    }
 else {
      XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)o;
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        ATreeNode node=new ATreeNode();
        String elementName=xsdTypeDefinition.getQName();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
          rootNodesName.add((String)node.getValue());
          rootNodes.add(node);
        }
      }
    }
  }
  return rootNodes;
}","public List<ATreeNode> getAllRootNodes(XSDSchema xsdSchema) throws OdaException {
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  List<String> rootNodesName=new ArrayList<String>();
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  all.addAll(xsdSchema.getTypeDefinitions());
  all=XSDNamedComponentImpl.sortNamedComponents(all);
  for (Iterator i=all.iterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof XSDElementDeclaration) {
      ATreeNode node=new ATreeNode();
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)o;
      String elementName=xsdElementDeclaration.getQName();
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
          if (prefix != null && !prefix.isEmpty()) {
            elementName=prefix + ""String_Node_Str"" + elementName;
          }
        }
      }
      node.setValue(elementName);
      if (xsdTypeDefinition == null) {
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
        rootNodesName.add((String)node.getValue());
        rootNodes.add(node);
      }
    }
 else {
      XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)o;
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        ATreeNode node=new ATreeNode();
        String elementName=xsdTypeDefinition.getQName();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
          rootNodesName.add((String)node.getValue());
          rootNodes.add(node);
        }
      }
    }
  }
  return rootNodes;
}",0.9908164969110036
129781,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (xsdTypeDefinition == null) {
          XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
          if (generalType.getContainer() != null) {
            xsdTypeDefinition=generalType;
          }
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9938764919564088
129782,"public List<ATreeNode> getAllRootNodes(XSDSchema xsdSchema) throws OdaException {
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  List<String> rootNodesName=new ArrayList<String>();
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  all.addAll(xsdSchema.getTypeDefinitions());
  all=XSDNamedComponentImpl.sortNamedComponents(all);
  for (Iterator i=all.iterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof XSDElementDeclaration) {
      ATreeNode node=new ATreeNode();
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)o;
      String elementName=xsdElementDeclaration.getQName();
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
          if (prefix != null && !prefix.isEmpty()) {
            elementName=prefix + ""String_Node_Str"" + elementName;
          }
        }
      }
      node.setValue(elementName);
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
        rootNodesName.add((String)node.getValue());
        rootNodes.add(node);
      }
    }
 else {
      XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)o;
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        ATreeNode node=new ATreeNode();
        String elementName=xsdTypeDefinition.getQName();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
          rootNodesName.add((String)node.getValue());
          rootNodes.add(node);
        }
      }
    }
  }
  return rootNodes;
}","public List<ATreeNode> getAllRootNodes(XSDSchema xsdSchema) throws OdaException {
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  List<String> rootNodesName=new ArrayList<String>();
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  all.addAll(xsdSchema.getTypeDefinitions());
  all=XSDNamedComponentImpl.sortNamedComponents(all);
  for (Iterator i=all.iterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof XSDElementDeclaration) {
      ATreeNode node=new ATreeNode();
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)o;
      String elementName=xsdElementDeclaration.getQName();
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
          if (prefix != null && !prefix.isEmpty()) {
            elementName=prefix + ""String_Node_Str"" + elementName;
          }
        }
      }
      node.setValue(elementName);
      if (xsdTypeDefinition == null) {
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
        rootNodesName.add((String)node.getValue());
        rootNodes.add(node);
      }
    }
 else {
      XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)o;
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        ATreeNode node=new ATreeNode();
        String elementName=xsdTypeDefinition.getQName();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
          rootNodesName.add((String)node.getValue());
          rootNodes.add(node);
        }
      }
    }
  }
  return rootNodes;
}",0.9908164969110036
129783,"private void addSubstitutionDetails(XSDSchema xsdSchema,ATreeNode parentNode,XSDElementDeclaration elementDeclaration,ATreeNode rootSubsNode) throws OdaException, IllegalAccessException, InvocationTargetException {
  boolean hasSubstitution=false;
  Set<ATreeNode> subsChildren=new HashSet<ATreeNode>();
  List<XSDElementDeclaration> directSubstitutionGroups=getDirectSubstitutionGroups(elementDeclaration);
  for (  XSDElementDeclaration xsdElementDeclaration : directSubstitutionGroups) {
    String elementName=xsdElementDeclaration.getName();
    hasSubstitution=true;
    if (rootSubsNode == null) {
      rootSubsNode=parentNode;
    }
    ATreeNode node=new ATreeNode();
    String prefix=null;
    String namespace=xsdElementDeclaration.getTargetNamespace();
    node.setCurrentNamespace(namespace);
    XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
    if (namespace != null) {
      prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
      if (prefix == null || prefix.isEmpty()) {
        if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
          for (          String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
            if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
              prefix=key;
            }
          }
        }
      }
      if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
        prefix=""String_Node_Str"" + prefixNumberGenerated;
        prefixNumberGenerated++;
      }
      if (prefix != null && !prefix.isEmpty()) {
        elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
        namespaceToPrefix.put(namespace,prefix);
      }
 else {
        ATreeNode namespaceNode=new ATreeNode();
        namespaceNode.setDataType(""String_Node_Str"");
        namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
        namespaceNode.setValue(namespace);
        node.addChild(namespaceNode);
      }
    }
    node.setValue(elementName);
    node.setType(ATreeNode.ELEMENT_TYPE);
    node.setDataType(xsdElementDeclaration.getName());
    XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
    XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
    if (generalType.getContainer() != null) {
      xsdTypeDefinition=generalType;
    }
    if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
      node.setDataType(xsdTypeDefinition.getName());
    }
    if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
      addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
    }
    List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
    Collections.reverse(namespaceList);
    for (    String currentNamespace : namespaceList) {
      ATreeNode namespaceNode=null;
      if (currentNamespace != null) {
        prefix=namespaceToPrefix.get(currentNamespace);
        namespaceNode=new ATreeNode();
        namespaceNode.setDataType(prefix);
        namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
        namespaceNode.setValue(currentNamespace);
        node.addAsFirstChild(namespaceNode);
      }
    }
    addSubstitutionDetails(xsdSchema,node,xsdElementDeclaration,rootSubsNode);
    subsChildren.add(node);
  }
  if (hasSubstitution) {
    if (supportSubstitution) {
      Object oldValue=parentNode.getValue();
      parentNode.setSubstitution(true);
      parentNode.setValue(oldValue + SUBS);
      Object[] originalChildren=parentNode.getChildren();
      parentNode.removeAllChildren();
      if (!elementDeclaration.isAbstract()) {
        ATreeNode cloneNode=new ATreeNode();
        BeanUtils.copyProperties(cloneNode,parentNode);
        cloneNode.setSubstitution(false);
        cloneNode.setValue(oldValue);
        cloneNode.addChild(originalChildren);
        parentNode.addAsFirstChild(cloneNode);
      }
      parentNode.addChild(subsChildren.toArray());
    }
 else {
      if (rootSubsNode != null) {
        ATreeNode parent=rootSubsNode.getParent();
        if (parent != null) {
          List children=Arrays.asList(parent.getChildren());
          for (          ATreeNode child : subsChildren) {
            if (!children.contains(child)) {
              parent.addChild(child);
            }
          }
        }
      }
    }
  }
}","private void addSubstitutionDetails(XSDSchema xsdSchema,ATreeNode parentNode,XSDElementDeclaration elementDeclaration,ATreeNode rootSubsNode) throws OdaException, IllegalAccessException, InvocationTargetException {
  boolean hasSubstitution=false;
  Set<ATreeNode> subsChildren=new HashSet<ATreeNode>();
  List<XSDElementDeclaration> directSubstitutionGroups=getDirectSubstitutionGroups(elementDeclaration);
  for (  XSDElementDeclaration xsdElementDeclaration : directSubstitutionGroups) {
    String elementName=xsdElementDeclaration.getName();
    hasSubstitution=true;
    if (rootSubsNode == null) {
      rootSubsNode=parentNode;
    }
    ATreeNode node=new ATreeNode();
    String prefix=null;
    String namespace=xsdElementDeclaration.getTargetNamespace();
    node.setCurrentNamespace(namespace);
    XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
    if (namespace != null) {
      prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
      if (prefix == null || prefix.isEmpty()) {
        if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
          for (          String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
            if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
              prefix=key;
            }
          }
        }
      }
      if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
        prefix=""String_Node_Str"" + prefixNumberGenerated;
        prefixNumberGenerated++;
      }
      if (prefix != null && !prefix.isEmpty()) {
        elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
        namespaceToPrefix.put(namespace,prefix);
      }
 else {
        ATreeNode namespaceNode=new ATreeNode();
        namespaceNode.setDataType(""String_Node_Str"");
        namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
        namespaceNode.setValue(namespace);
        node.addChild(namespaceNode);
      }
    }
    node.setValue(elementName);
    node.setType(ATreeNode.ELEMENT_TYPE);
    node.setDataType(xsdElementDeclaration.getName());
    XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
    if (xsdTypeDefinition == null) {
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
    }
    if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
      node.setDataType(xsdTypeDefinition.getName());
    }
    if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
      addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
    }
    List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
    Collections.reverse(namespaceList);
    for (    String currentNamespace : namespaceList) {
      ATreeNode namespaceNode=null;
      if (currentNamespace != null) {
        prefix=namespaceToPrefix.get(currentNamespace);
        namespaceNode=new ATreeNode();
        namespaceNode.setDataType(prefix);
        namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
        namespaceNode.setValue(currentNamespace);
        node.addAsFirstChild(namespaceNode);
      }
    }
    addSubstitutionDetails(xsdSchema,node,xsdElementDeclaration,rootSubsNode);
    subsChildren.add(node);
  }
  if (hasSubstitution) {
    if (supportSubstitution) {
      Object oldValue=parentNode.getValue();
      parentNode.setSubstitution(true);
      parentNode.setValue(oldValue + SUBS);
      Object[] originalChildren=parentNode.getChildren();
      parentNode.removeAllChildren();
      if (!elementDeclaration.isAbstract()) {
        ATreeNode cloneNode=new ATreeNode();
        BeanUtils.copyProperties(cloneNode,parentNode);
        cloneNode.setSubstitution(false);
        cloneNode.setValue(oldValue);
        cloneNode.addChild(originalChildren);
        parentNode.addAsFirstChild(cloneNode);
      }
      parentNode.addChild(subsChildren.toArray());
    }
 else {
      if (rootSubsNode != null) {
        ATreeNode parent=rootSubsNode.getParent();
        if (parent != null) {
          List children=Arrays.asList(parent.getChildren());
          for (          ATreeNode child : subsChildren) {
            if (!children.contains(child)) {
              parent.addChild(child);
            }
          }
        }
      }
    }
  }
}",0.9944535073409462
129784,"public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute,boolean supportChoice,boolean supportSubstitution){
  this.includeAttribute=includeAttribute;
  this.supportChoice=supportChoice;
  this.supportSubstitution=supportSubstitution;
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      String originalElementName=xsdElementDeclaration.getName();
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
        }
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue()) && (!(prefixNumberGenerated > 1 && originalElementName.equals(selectedNode.getValue())))) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      addSubstitutionDetails(xsdSchema,node,xsdElementDeclaration,null);
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdTypeDefinition.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
          node.setCurrentNamespace(xsdTypeDefinition.getTargetNamespace());
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}","public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute,boolean supportChoice,boolean supportSubstitution){
  this.includeAttribute=includeAttribute;
  this.supportChoice=supportChoice;
  this.supportSubstitution=supportSubstitution;
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      String originalElementName=xsdElementDeclaration.getName();
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
        }
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue()) && (!(prefixNumberGenerated > 1 && originalElementName.equals(selectedNode.getValue())))) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      if (xsdTypeDefinition == null) {
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      addSubstitutionDetails(xsdSchema,node,xsdElementDeclaration,null);
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
          node.setCurrentNamespace(xsdTypeDefinition.getTargetNamespace());
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}",0.978295563357804
129785,"public String getLabel(){
switch (getType()) {
case REFERENCED_PROJECT:
    return properties.get(EProperties.LABEL).toString();
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
  return getObjectType().toString();
default :
final ERepositoryObjectType contentType=getContentType();
if (contentType != null) {
if (""String_Node_Str"".equals(contentType.toString())) {
  return getProperties(EProperties.LABEL).toString();
}
if (contentType.equals(ERepositoryObjectType.PROCESS)) {
  return getProperties(EProperties.LABEL).toString();
}
if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.equals(contentType) || ERepositoryObjectType.TDQ_PATTERN_ELEMENT.equals(contentType) || ERepositoryObjectType.TDQ_RULES.equals(contentType)) {
  return getObject().getLabel();
}
return contentType.toString();
}
}
return ""String_Node_Str"";
}","public String getLabel(){
switch (getType()) {
case REFERENCED_PROJECT:
    return properties.get(EProperties.LABEL).toString();
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
  final ERepositoryObjectType objectType=getObjectType();
if (objectType != null) {
  objectType.toString();
}
default :
final ERepositoryObjectType contentType=getContentType();
if (contentType != null) {
if (""String_Node_Str"".equals(contentType.toString())) {
return getProperties(EProperties.LABEL).toString();
}
if (contentType.equals(ERepositoryObjectType.PROCESS)) {
return getProperties(EProperties.LABEL).toString();
}
if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.equals(contentType) || ERepositoryObjectType.TDQ_PATTERN_ELEMENT.equals(contentType) || ERepositoryObjectType.TDQ_RULES.equals(contentType)) {
return getObject().getLabel();
}
return contentType.toString();
}
}
return ""String_Node_Str"";
}",0.8253223915592028
129786,"/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
          addJavaType(javaType);
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}","/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          if (myClass != null && !myClass.getName().equals(""String_Node_Str"")) {
            JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
            addJavaType(javaType);
          }
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}",0.9782559964133604
129787,"public XmlFileWizardPage getPage(){
  return this.page;
}","public WizardPage getPage(){
  return this.page;
}",0.9345794392523364
129788,"public void setPage(XmlFileWizardPage page){
  this.page=page;
}","public void setPage(WizardPage page){
  this.page=page;
}",0.9421487603305784
129789,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    ATreeNode selectedTreeNode=getSelectedTreeNode(xsdFilePath,selectedEntity);
    List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
    CreateConceptWizard wizard=((CreateConceptWizard)getPage().getWizard());
    this.treePopulator.populateTree(wizard.getXSDSchema(),selectedTreeNode,treeNodes);
    if (!treeNodes.isEmpty()) {
      treeNode=treeNodes.get(0);
    }
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}",0.8710601719197708
129790,"public void createControl(Composite parent){
  if (getConcept() != null) {
    if (MdmConceptType.INPUT.equals(getConcept().getConceptType())) {
      if (getPreviousPage() instanceof MdmConceptWizardPage2) {
        xsdFileForm=new MDMXSDFileForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
      }
    }
 else     if (MdmConceptType.OUTPUT.equals(getConcept().getConceptType())) {
      xsdFileForm=new MDMOutputSchemaForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
 else     if (MdmConceptType.RECEIVE.equals(getConcept().getConceptType())) {
      xsdFileForm=new MdmReceiveForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
    xsdFileForm.setReadOnly(!isRepositoryObjectEditable);
    AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
      public void checkPerformed(      final AbstractForm source){
        if (source.isStatusOnError()) {
          MdmConceptWizardPage3.this.setPageComplete(false);
          setErrorMessage(source.getStatus());
        }
 else {
          MdmConceptWizardPage3.this.setPageComplete(true);
          setErrorMessage(null);
          setMessage(source.getStatus(),source.getStatusLevel());
        }
      }
    }
;
    xsdFileForm.setListener(listener);
    this.setPageComplete(false);
    setControl(xsdFileForm);
  }
}","public void createControl(Composite parent){
  if (getConcept() != null) {
    if (MdmConceptType.INPUT.equals(getConcept().getConceptType())) {
      if (getPreviousPage() instanceof MdmConceptWizardPage2) {
        xsdFileForm=new MDMXSDFileForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
      }
    }
 else     if (MdmConceptType.OUTPUT.equals(getConcept().getConceptType())) {
      xsdFileForm=new MDMOutputSchemaForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
 else     if (MdmConceptType.RECEIVE.equals(getConcept().getConceptType())) {
      xsdFileForm=new MdmReceiveForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
    xsdFileForm.setReadOnly(!isRepositoryObjectEditable);
    AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
      public void checkPerformed(      final AbstractForm source){
        if (source.isStatusOnError()) {
          MdmConceptWizardPage3.this.setPageComplete(false);
          setErrorMessage(source.getStatus());
        }
 else {
          MdmConceptWizardPage3.this.setPageComplete(true);
          setErrorMessage(null);
          setMessage(source.getStatus(),source.getStatusLevel());
        }
      }
    }
;
    xsdFileForm.setListener(listener);
    this.setPageComplete(false);
    setControl(xsdFileForm);
    xsdFileForm.setPage(this);
  }
}",0.988739556847076
129791,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      prefixCombo.select(1);
      concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
    }
 else {
      prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      prefixCombo.select(1);
      concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
    }
 else {
      prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    ATreeNode selectedTreeNode=getSelectedTreeNode(xsdFilePath,selectedEntity);
    List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
    CreateConceptWizard wizard=((CreateConceptWizard)getPage().getWizard());
    this.treePopulator.populateTree(wizard.getXSDSchema(),selectedTreeNode,treeNodes);
    if (!treeNodes.isEmpty()) {
      treeNode=treeNodes.get(0);
    }
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}",0.8998109640831758
129792,"private static void setEbcdicValue(EbcdicConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
      connection.setDataFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setMidFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}","private static void setEbcdicValue(EbcdicConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDataFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setMidFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}",0.9735525375268048
129793,"@Override public void createElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null) {
    return;
  }
  createContext(returnValue);
  refreshViewer();
}","@Override public void createElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null || ""String_Node_Str"".equals(returnValue)) {
    return;
  }
  createContext(returnValue);
  refreshViewer();
}",0.9602327837051406
129794,"@Override protected void editSelectedElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  IContext selectedContext=(IContext)(getSelection()).getFirstElement();
  String contextName=selectedContext.getName();
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",contextName),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null) {
    return;
  }
  if (manager.getProcess() != null && manager.getProcess().getLastRunContext() != null && manager.getProcess().getLastRunContext().sameAs(selectedContext)) {
    manager.getProcess().setLastRunContext(selectedContext);
  }
  renameContext(selectedContext,returnValue);
  refreshViewer();
}","@Override protected void editSelectedElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  IContext selectedContext=(IContext)(getSelection()).getFirstElement();
  String contextName=selectedContext.getName();
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",contextName),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null || ""String_Node_Str"".equals(returnValue)) {
    return;
  }
  if (manager.getProcess() != null && manager.getProcess().getLastRunContext() != null && manager.getProcess().getLastRunContext().sameAs(selectedContext)) {
    manager.getProcess().setLastRunContext(selectedContext);
  }
  renameContext(selectedContext,returnValue);
  refreshViewer();
}",0.9771332961517012
129795,"/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
          addJavaType(javaType);
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}","/** 
 * DOC amaumont Comment method ""init"".
 */
private static void init(){
  shortNameToJavaType=new HashMap<String,JavaType>();
  labelToJavaType=new HashMap<String,JavaType>();
  idToJavaType=new HashMap<String,JavaType>();
  canonicalClassNameToJavaType=new HashMap<String,JavaType>();
  javaTypes=new ArrayList<JavaType>();
  perlTypes=new ArrayList<String>();
  for (int i=0; i < JAVA_TYPES.length; i++) {
    JavaType javaType=JAVA_TYPES[i];
    addJavaType(javaType);
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] configurationElements=extension.getConfigurationElements();
    for (    IConfigurationElement configurationElement : configurationElements) {
      if (""String_Node_Str"".equals(configurationElement.getAttribute(""String_Node_Str""))) {
        try {
          String className=configurationElement.getAttribute(""String_Node_Str"");
          Class myClass=Platform.getBundle(configurationElement.getContributor().getName()).loadClass(className);
          boolean isGenerateWithCanonicalName=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          boolean isObjectBased=configurationElement.getAttribute(""String_Node_Str"") == null ? false : Boolean.valueOf(configurationElement.getAttribute(""String_Node_Str""));
          if (myClass != null && !myClass.getName().equals(""String_Node_Str"")) {
            JavaType javaType=new JavaType(myClass,isGenerateWithCanonicalName,isObjectBased);
            addJavaType(javaType);
          }
        }
 catch (        InvalidRegistryObjectException e) {
          ExceptionHandler.process(e);
        }
catch (        ClassNotFoundException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  final String[] loadTalendTypes=MetadataTalendType.getTalendTypesLabels();
  perlTypes.addAll(Arrays.asList(loadTalendTypes));
  perlTypes.add(PERL_FILE);
  perlTypes.add(PERL_DIRECTORY);
  perlTypes.add(PERL_VALUE_LIST);
  perlTypes.add(PERL_PASSWORD);
}",0.9782559964133604
129796,"@Override public void createElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null) {
    return;
  }
  createContext(returnValue);
  refreshViewer();
}","@Override public void createElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null || ""String_Node_Str"".equals(returnValue)) {
    return;
  }
  createContext(returnValue);
  refreshViewer();
}",0.9602327837051406
129797,"@Override protected void editSelectedElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  IContext selectedContext=(IContext)(getSelection()).getFirstElement();
  String contextName=selectedContext.getName();
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",contextName),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null) {
    return;
  }
  if (manager.getProcess() != null && manager.getProcess().getLastRunContext() != null && manager.getProcess().getLastRunContext().sameAs(selectedContext)) {
    manager.getProcess().setLastRunContext(selectedContext);
  }
  renameContext(selectedContext,returnValue);
  refreshViewer();
}","@Override protected void editSelectedElement(){
  IInputValidator validator=new IInputValidator(){
    public String isValid(    String newText){
      return toValid(newText);
    }
  }
;
  IContext selectedContext=(IContext)(getSelection()).getFirstElement();
  String contextName=selectedContext.getName();
  InputDialog inputDial=new InputDialog(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",contextName),""String_Node_Str"",validator);
  inputDial.open();
  String returnValue=inputDial.getValue();
  if (returnValue == null || ""String_Node_Str"".equals(returnValue)) {
    return;
  }
  if (manager.getProcess() != null && manager.getProcess().getLastRunContext() != null && manager.getProcess().getLastRunContext().sameAs(selectedContext)) {
    manager.getProcess().setLastRunContext(selectedContext);
  }
  renameContext(selectedContext,returnValue);
  refreshViewer();
}",0.9771332961517012
129798,"private static void setEbcdicValue(EbcdicConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
      connection.setDataFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setMidFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}","private static void setEbcdicValue(EbcdicConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDataFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setMidFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}",0.9735525375268048
129799,"public XmlFileWizardPage getPage(){
  return this.page;
}","public WizardPage getPage(){
  return this.page;
}",0.9345794392523364
129800,"public void setPage(XmlFileWizardPage page){
  this.page=page;
}","public void setPage(WizardPage page){
  this.page=page;
}",0.9421487603305784
129801,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    ATreeNode selectedTreeNode=getSelectedTreeNode(xsdFilePath,selectedEntity);
    List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
    CreateConceptWizard wizard=((CreateConceptWizard)getPage().getWizard());
    this.treePopulator.populateTree(wizard.getXSDSchema(),selectedTreeNode,treeNodes);
    if (!treeNodes.isEmpty()) {
      treeNode=treeNodes.get(0);
    }
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}",0.8710601719197708
129802,"public void createControl(Composite parent){
  if (getConcept() != null) {
    if (MdmConceptType.INPUT.equals(getConcept().getConceptType())) {
      if (getPreviousPage() instanceof MdmConceptWizardPage2) {
        xsdFileForm=new MDMXSDFileForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
      }
    }
 else     if (MdmConceptType.OUTPUT.equals(getConcept().getConceptType())) {
      xsdFileForm=new MDMOutputSchemaForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
 else     if (MdmConceptType.RECEIVE.equals(getConcept().getConceptType())) {
      xsdFileForm=new MdmReceiveForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
    xsdFileForm.setReadOnly(!isRepositoryObjectEditable);
    AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
      public void checkPerformed(      final AbstractForm source){
        if (source.isStatusOnError()) {
          MdmConceptWizardPage3.this.setPageComplete(false);
          setErrorMessage(source.getStatus());
        }
 else {
          MdmConceptWizardPage3.this.setPageComplete(true);
          setErrorMessage(null);
          setMessage(source.getStatus(),source.getStatusLevel());
        }
      }
    }
;
    xsdFileForm.setListener(listener);
    this.setPageComplete(false);
    setControl(xsdFileForm);
  }
}","public void createControl(Composite parent){
  if (getConcept() != null) {
    if (MdmConceptType.INPUT.equals(getConcept().getConceptType())) {
      if (getPreviousPage() instanceof MdmConceptWizardPage2) {
        xsdFileForm=new MDMXSDFileForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
      }
    }
 else     if (MdmConceptType.OUTPUT.equals(getConcept().getConceptType())) {
      xsdFileForm=new MDMOutputSchemaForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
 else     if (MdmConceptType.RECEIVE.equals(getConcept().getConceptType())) {
      xsdFileForm=new MdmReceiveForm(parent,connectionItem,metadataTable,getConcept(),this,creation);
    }
    xsdFileForm.setReadOnly(!isRepositoryObjectEditable);
    AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
      public void checkPerformed(      final AbstractForm source){
        if (source.isStatusOnError()) {
          MdmConceptWizardPage3.this.setPageComplete(false);
          setErrorMessage(source.getStatus());
        }
 else {
          MdmConceptWizardPage3.this.setPageComplete(true);
          setErrorMessage(null);
          setMessage(source.getStatus(),source.getStatusLevel());
        }
      }
    }
;
    xsdFileForm.setListener(listener);
    this.setPageComplete(false);
    setControl(xsdFileForm);
    xsdFileForm.setPage(this);
  }
}",0.988739556847076
129803,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      prefixCombo.select(1);
      concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
    }
 else {
      prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      prefixCombo.select(1);
      concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
    }
 else {
      prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    ATreeNode selectedTreeNode=getSelectedTreeNode(xsdFilePath,selectedEntity);
    List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
    CreateConceptWizard wizard=((CreateConceptWizard)getPage().getWizard());
    this.treePopulator.populateTree(wizard.getXSDSchema(),selectedTreeNode,treeNodes);
    if (!treeNodes.isEmpty()) {
      treeNode=treeNodes.get(0);
    }
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}",0.8998109640831758
129804,"public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}","public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
        if (tmpProjectNode instanceof RepositoryNode) {
          ((RepositoryNode)tmpProjectNode).setEnableDisposed(true);
        }
        tmpProjectNode.dispose();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}",0.855917667238422
129805,"public void dispose(){
  boolean doDispose=isEnableDisposed();
  if (getType() == ENodeType.STABLE_SYSTEM_FOLDER) {
    doDispose=true;
  }
  if (doDispose) {
    this.id=null;
    this.projectTechnicalLabel=null;
    this.type=null;
    this.icon=null;
    this.parent=null;
    this.object=null;
    this.initialized=false;
    if (this.properties != null) {
      this.properties.clear();
    }
  }
  if (this.children != null) {
    for (    IRepositoryNode child : this.children) {
      child.dispose();
    }
    if (doDispose) {
      this.children.clear();
    }
  }
  if (doDispose) {
    this.isDisposed=true;
  }
}","public void dispose(){
  boolean doDispose=isEnableDisposed();
  if (getType() == ENodeType.STABLE_SYSTEM_FOLDER) {
    doDispose=true;
  }
  if (doDispose) {
    this.id=null;
    this.projectTechnicalLabel=null;
    this.parent=null;
    this.object=null;
    this.initialized=false;
    if (this.properties != null) {
      this.properties.clear();
    }
  }
  if (this.children != null) {
    for (    IRepositoryNode child : this.children) {
      child.dispose();
    }
    if (doDispose) {
      this.children.clear();
    }
  }
  if (doDispose) {
    this.isDisposed=true;
  }
}",0.966996699669967
129806,"public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}","public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  objectToCopy.getProperty();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}",0.9731663685152058
129807,"public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}","public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  objectToCopy.getProperty();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}",0.9731663685152058
129808,"public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEditable(!readOnly);
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}","public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}",0.9855842185128983
129809,"private void pressGuessSchemaButton(){
  IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
  String tableName=tableCombo.getText();
  CsvArray array;
  try {
    if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableName) == -1) {
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    IMetadataTable table=UpdateRepositoryUtils.getTableByName(connectionItem,tableName);
    if (table == null) {
      return;
    }
    array=designerService.convertNode(connectionItem,tableName);
    tableEditorView.getMetadataEditor().removeAll();
    List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
    columns=GuessSchemaUtil.guessSchemaFromArray(array,true,tableEditorView,5);
    List<String[]> schemaContent=array.getRows();
    if (schemaContent.size() <= 0) {
      return;
    }
    int numbOfColumn=schemaContent.get(0).length;
    for (int i=1; i <= numbOfColumn; i++) {
      MetadataColumn oneColum=columns.get(i - 1);
      String labelName=(schemaContent.get(0))[i - 1];
      if (!""String_Node_Str"".equals(labelName)) {
        oneColum.setOriginalField(labelName);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(2)[i - 1])) {
        oneColum.setPrecision(Integer.parseInt(schemaContent.get(2)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(3)[i - 1])) {
        oneColum.setLength(Integer.parseInt(schemaContent.get(3)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(4)[i - 1])) {
        oneColum.setSourceType(schemaContent.get(4)[i - 1]);
        String talendType=MetadataTalendType.getMappingTypeRetriever(tableEditorView.getCurrentDbms()).getDefaultSelectedTalendType(schemaContent.get(4)[i - 1]);
        oneColum.setTalendType(talendType);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(1)[i - 1])) {
        oneColum.setNullable((schemaContent.get(1))[i - 1].equals(Boolean.TRUE.toString()) ? true : false);
      }
    }
    tableEditorView.getMetadataEditor().addAll(columns);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}","private void pressGuessSchemaButton(){
  IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
  String tableName=tableCombo.getText();
  CsvArray array;
  try {
    if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableName) == -1) {
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    array=designerService.convertNode(connectionItem,tableName);
    tableEditorView.getMetadataEditor().removeAll();
    List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
    columns=GuessSchemaUtil.guessSchemaFromArray(array,true,tableEditorView,5);
    List<String[]> schemaContent=array.getRows();
    if (schemaContent.size() <= 0) {
      return;
    }
    int numbOfColumn=schemaContent.get(0).length;
    for (int i=1; i <= numbOfColumn; i++) {
      MetadataColumn oneColum=columns.get(i - 1);
      String labelName=(schemaContent.get(0))[i - 1];
      if (!""String_Node_Str"".equals(labelName)) {
        oneColum.setOriginalField(labelName);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(2)[i - 1])) {
        oneColum.setPrecision(Integer.parseInt(schemaContent.get(2)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(3)[i - 1])) {
        oneColum.setLength(Integer.parseInt(schemaContent.get(3)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(4)[i - 1])) {
        oneColum.setSourceType(schemaContent.get(4)[i - 1]);
        String talendType=MetadataTalendType.getMappingTypeRetriever(tableEditorView.getCurrentDbms()).getDefaultSelectedTalendType(schemaContent.get(4)[i - 1]);
        oneColum.setTalendType(talendType);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(1)[i - 1])) {
        oneColum.setNullable((schemaContent.get(1))[i - 1].equals(Boolean.TRUE.toString()) ? true : false);
      }
    }
    tableEditorView.getMetadataEditor().addAll(columns);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}",0.9692095588235294
129810,"public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEditable(!readOnly);
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}","public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label versionLab=new Label(parent,SWT.NONE);
  versionLab.setText(Messages.getString(""String_Node_Str""));
  Composite versionContainer=new Composite(parent,SWT.NONE);
  versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout versionLayout=new GridLayout(3,false);
  versionLayout.marginHeight=0;
  versionLayout.marginWidth=0;
  versionLayout.horizontalSpacing=0;
  versionContainer.setLayout(versionLayout);
  versionText=new Text(versionContainer,SWT.BORDER);
  versionText.setEnabled(false);
  versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  versionMajorBtn=new Button(versionContainer,SWT.PUSH);
  versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMajorBtn.setEnabled(!readOnly);
  versionMinorBtn=new Button(versionContainer,SWT.PUSH);
  versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
  versionMinorBtn.setEnabled(!readOnly);
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
}",0.9855842185128983
129811,"public static routines.system.Document parseTo_Document(String s,boolean ignoreDTD) throws org.dom4j.DocumentException {
  if (s == null) {
    return null;
  }
  routines.system.Document theDoc=new routines.system.Document();
  org.dom4j.io.SAXReader reader=new org.dom4j.io.SAXReader();
  if (ignoreDTD) {
    reader.setEntityResolver(new EntityResolver(){
      public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
      }
    }
);
  }
  org.dom4j.Document document=reader.read(new java.io.StringReader(s));
  theDoc.setDocument(document);
  return theDoc;
}","public static routines.system.Document parseTo_Document(String s,boolean ignoreDTD,String encoding) throws org.dom4j.DocumentException {
  if (s == null) {
    return null;
  }
  routines.system.Document theDoc=new routines.system.Document();
  org.dom4j.io.SAXReader reader=new org.dom4j.io.SAXReader();
  if (ignoreDTD) {
    reader.setEntityResolver(new EntityResolver(){
      public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
      }
    }
);
  }
  org.dom4j.Document document=reader.read(new java.io.StringReader(s));
  if (encoding != null && !(""String_Node_Str"".equals(encoding))) {
    document.setXMLEncoding(encoding);
  }
  theDoc.setDocument(document);
  return theDoc;
}",0.9204545454545454
129812,"public List<Resource> getAffectedResources(Property property){
  List<Resource> resources=new ArrayList<Resource>();
  Iterator<EObject> i=property.getItem().eCrossReferences().iterator();
  while (i.hasNext()) {
    EObject object=i.next();
    Resource currentResource=object.eResource();
    if (currentResource == null) {
      continue;
    }
    if (!resources.contains(currentResource)) {
      if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
        continue;
      }
      if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
        resources.add(currentResource);
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
    if (object instanceof ReferenceFileItem) {
      ReferenceFileItem fi=(ReferenceFileItem)object;
      ByteArray ba=fi.getContent();
      if (ba != null) {
        Resource fiResource=ba.eResource();
        if (fiResource != null) {
          resources.add(fiResource);
        }
      }
    }
  }
  i=property.getItem().eAllContents();
  while (i.hasNext()) {
    EObject object=i.next();
    Iterator<EObject> j=object.eCrossReferences().iterator();
    while (j.hasNext()) {
      EObject childEObject=j.next();
      Resource currentResource=childEObject.eResource();
      if (currentResource == null) {
        continue;
      }
      if (!resources.contains(currentResource)) {
        if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
          continue;
        }
        if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
          resources.add(currentResource);
        }
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
  }
  if (property.getItem() instanceof ProcessItem || property.getItem() instanceof JobletProcessItem) {
    Resource screenshotResource=getScreenshotResource(property.getItem());
    if (screenshotResource != null) {
      resources.add(screenshotResource);
    }
  }
  return resources;
}","public List<Resource> getAffectedResources(Property property){
  List<Resource> resources=new ArrayList<Resource>();
  Iterator<EObject> i=property.getItem().eCrossReferences().iterator();
  while (i.hasNext()) {
    EObject object=i.next();
    Resource currentResource=object.eResource();
    if (currentResource == null) {
      continue;
    }
    if (!resources.contains(currentResource)) {
      if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
        continue;
      }
      if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
        resources.add(currentResource);
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
    if (object instanceof ReferenceFileItem) {
      ReferenceFileItem fi=(ReferenceFileItem)object;
      ByteArray ba=fi.getContent();
      if (ba != null) {
        Resource fiResource=ba.eResource();
        if (fiResource != null) {
          resources.add(fiResource);
        }
      }
    }
  }
  i=property.getItem().eAllContents();
  while (i.hasNext()) {
    EObject object=i.next();
    Iterator<EObject> j=object.eCrossReferences().iterator();
    while (j.hasNext()) {
      EObject childEObject=j.next();
      Resource currentResource=childEObject.eResource();
      if (currentResource == null) {
        continue;
      }
      if (!resources.contains(currentResource)) {
        if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
          continue;
        }
        if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
          resources.add(currentResource);
        }
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
  }
  if (property.getItem() instanceof ProcessItem || property.getItem() instanceof JobletProcessItem) {
    if (property.eResource() != null) {
      Resource screenshotResource=getScreenshotResource(property.getItem());
      if (screenshotResource != null) {
        resources.add(screenshotResource);
      }
    }
  }
  return resources;
}",0.9393103448275862
129813,"public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  String productNameWanted=repositoryType;
  String componentProductname=null;
  if (item instanceof XmlFileConnectionItem) {
    XmlFileConnection connection=(XmlFileConnection)((XmlFileConnectionItemImpl)item).getConnection();
    if (!connection.isInputModel()) {
      productNameWanted=""String_Node_Str"";
    }
  }
  if (component != null) {
    componentProductname=component.getRepositoryType();
  }
  if (repositoryType != null && (""String_Node_Str"").equals(component.getName())) {
    if (componentProductname != null && productNameWanted.endsWith(componentProductname) && repositoryType.equals(component.getName())) {
      return true;
    }
  }
 else   if (component != null && repositoryType != null && repositoryType.equals(component.getName())) {
    return true;
  }
  return false;
}","public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (component != null && repositoryType != null && repositoryType.equals(component.getName())) {
    return true;
  }
  return false;
}",0.2464612822647793
129814,"public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  String productNameWanted=repositoryType;
  if (component == null || repositoryType == null) {
    return false;
  }
  if ((""String_Node_Str"").equals(component.getName()) || (""String_Node_Str"").equals(component.getName())) {
    if (item instanceof XmlFileConnectionItem) {
      XmlFileConnection connection=(XmlFileConnection)((XmlFileConnectionItemImpl)item).getConnection();
      if (!connection.isInputModel()) {
        productNameWanted=""String_Node_Str"";
      }
    }
  }
  String componentProductname=component.getRepositoryType();
  if (componentProductname != null && productNameWanted.endsWith(componentProductname) && validSub(item,type,seletetedNode,component,repositoryType)) {
    return true;
  }
  return false;
}","public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (component == null || repositoryType == null) {
    return false;
  }
  String componentProductname=component.getRepositoryType();
  if (componentProductname != null && repositoryType.endsWith(componentProductname) && validSub(item,type,seletetedNode,component,repositoryType)) {
    return true;
  }
  return false;
}",0.6343679031037093
129815,"public List<Resource> getAffectedResources(Property property){
  List<Resource> resources=new ArrayList<Resource>();
  Iterator<EObject> i=property.getItem().eCrossReferences().iterator();
  while (i.hasNext()) {
    EObject object=i.next();
    Resource currentResource=object.eResource();
    if (currentResource == null) {
      continue;
    }
    if (!resources.contains(currentResource)) {
      if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
        continue;
      }
      if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
        resources.add(currentResource);
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
    if (object instanceof ReferenceFileItem) {
      ReferenceFileItem fi=(ReferenceFileItem)object;
      ByteArray ba=fi.getContent();
      if (ba != null) {
        Resource fiResource=ba.eResource();
        if (fiResource != null) {
          resources.add(fiResource);
        }
      }
    }
  }
  i=property.getItem().eAllContents();
  while (i.hasNext()) {
    EObject object=i.next();
    Iterator<EObject> j=object.eCrossReferences().iterator();
    while (j.hasNext()) {
      EObject childEObject=j.next();
      Resource currentResource=childEObject.eResource();
      if (currentResource == null) {
        continue;
      }
      if (!resources.contains(currentResource)) {
        if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
          continue;
        }
        if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
          resources.add(currentResource);
        }
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
  }
  if (property.getItem() instanceof ProcessItem || property.getItem() instanceof JobletProcessItem) {
    Resource screenshotResource=getScreenshotResource(property.getItem());
    if (screenshotResource != null) {
      resources.add(screenshotResource);
    }
  }
  return resources;
}","public List<Resource> getAffectedResources(Property property){
  List<Resource> resources=new ArrayList<Resource>();
  Iterator<EObject> i=property.getItem().eCrossReferences().iterator();
  while (i.hasNext()) {
    EObject object=i.next();
    Resource currentResource=object.eResource();
    if (currentResource == null) {
      continue;
    }
    if (!resources.contains(currentResource)) {
      if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
        continue;
      }
      if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
        resources.add(currentResource);
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
    if (object instanceof ReferenceFileItem) {
      ReferenceFileItem fi=(ReferenceFileItem)object;
      ByteArray ba=fi.getContent();
      if (ba != null) {
        Resource fiResource=ba.eResource();
        if (fiResource != null) {
          resources.add(fiResource);
        }
      }
    }
  }
  i=property.getItem().eAllContents();
  while (i.hasNext()) {
    EObject object=i.next();
    Iterator<EObject> j=object.eCrossReferences().iterator();
    while (j.hasNext()) {
      EObject childEObject=j.next();
      Resource currentResource=childEObject.eResource();
      if (currentResource == null) {
        continue;
      }
      if (!resources.contains(currentResource)) {
        if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
          continue;
        }
        if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
          resources.add(currentResource);
        }
      }
      if (!resourceSet.getResources().contains(currentResource)) {
        resourceSet.getResources().add(currentResource);
      }
    }
  }
  if (property.getItem() instanceof ProcessItem || property.getItem() instanceof JobletProcessItem) {
    if (property.eResource() != null) {
      Resource screenshotResource=getScreenshotResource(property.getItem());
      if (screenshotResource != null) {
        resources.add(screenshotResource);
      }
    }
  }
  return resources;
}",0.9393103448275862
129816,"private void pressGuessSchemaButton(){
  IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
  String tableName=tableCombo.getText();
  CsvArray array;
  try {
    if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableName) == -1) {
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    IMetadataTable table=UpdateRepositoryUtils.getTableByName(connectionItem,tableName);
    if (table == null) {
      return;
    }
    array=designerService.convertNode(connectionItem,tableName);
    tableEditorView.getMetadataEditor().removeAll();
    List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
    columns=GuessSchemaUtil.guessSchemaFromArray(array,true,tableEditorView,5);
    List<String[]> schemaContent=array.getRows();
    if (schemaContent.size() <= 0) {
      return;
    }
    int numbOfColumn=schemaContent.get(0).length;
    for (int i=1; i <= numbOfColumn; i++) {
      MetadataColumn oneColum=columns.get(i - 1);
      String labelName=(schemaContent.get(0))[i - 1];
      if (!""String_Node_Str"".equals(labelName)) {
        oneColum.setOriginalField(labelName);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(2)[i - 1])) {
        oneColum.setPrecision(Integer.parseInt(schemaContent.get(2)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(3)[i - 1])) {
        oneColum.setLength(Integer.parseInt(schemaContent.get(3)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(4)[i - 1])) {
        oneColum.setSourceType(schemaContent.get(4)[i - 1]);
        String talendType=MetadataTalendType.getMappingTypeRetriever(tableEditorView.getCurrentDbms()).getDefaultSelectedTalendType(schemaContent.get(4)[i - 1]);
        oneColum.setTalendType(talendType);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(1)[i - 1])) {
        oneColum.setNullable((schemaContent.get(1))[i - 1].equals(Boolean.TRUE.toString()) ? true : false);
      }
    }
    tableEditorView.getMetadataEditor().addAll(columns);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}","private void pressGuessSchemaButton(){
  IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
  String tableName=tableCombo.getText();
  CsvArray array;
  try {
    if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableName) == -1) {
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    array=designerService.convertNode(connectionItem,tableName);
    tableEditorView.getMetadataEditor().removeAll();
    List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
    columns=GuessSchemaUtil.guessSchemaFromArray(array,true,tableEditorView,5);
    List<String[]> schemaContent=array.getRows();
    if (schemaContent.size() <= 0) {
      return;
    }
    int numbOfColumn=schemaContent.get(0).length;
    for (int i=1; i <= numbOfColumn; i++) {
      MetadataColumn oneColum=columns.get(i - 1);
      String labelName=(schemaContent.get(0))[i - 1];
      if (!""String_Node_Str"".equals(labelName)) {
        oneColum.setOriginalField(labelName);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(2)[i - 1])) {
        oneColum.setPrecision(Integer.parseInt(schemaContent.get(2)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(3)[i - 1])) {
        oneColum.setLength(Integer.parseInt(schemaContent.get(3)[i - 1]));
      }
      if (!""String_Node_Str"".equals(schemaContent.get(4)[i - 1])) {
        oneColum.setSourceType(schemaContent.get(4)[i - 1]);
        String talendType=MetadataTalendType.getMappingTypeRetriever(tableEditorView.getCurrentDbms()).getDefaultSelectedTalendType(schemaContent.get(4)[i - 1]);
        oneColum.setTalendType(talendType);
      }
      if (!""String_Node_Str"".equals(schemaContent.get(1)[i - 1])) {
        oneColum.setNullable((schemaContent.get(1))[i - 1].equals(Boolean.TRUE.toString()) ? true : false);
      }
    }
    tableEditorView.getMetadataEditor().addAll(columns);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}",0.9692095588235294
129817,"public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (component != null && repositoryType != null && repositoryType.equals(component.getName())) {
    return true;
  }
  return false;
}","public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  String productNameWanted=repositoryType;
  String componentProductname=null;
  if (item instanceof XmlFileConnectionItem) {
    XmlFileConnection connection=(XmlFileConnection)((XmlFileConnectionItemImpl)item).getConnection();
    if (!connection.isInputModel()) {
      productNameWanted=""String_Node_Str"";
    }
  }
  if (component != null) {
    componentProductname=component.getRepositoryType();
  }
  if (repositoryType != null && (""String_Node_Str"").equals(component.getName())) {
    if (componentProductname != null && productNameWanted.endsWith(componentProductname) && repositoryType.equals(component.getName())) {
      return true;
    }
  }
 else   if (component != null && repositoryType != null && repositoryType.equals(component.getName())) {
    return true;
  }
  return false;
}",0.4096586178184846
129818,"public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (component == null || repositoryType == null) {
    return false;
  }
  String componentProductname=component.getRepositoryType();
  if (componentProductname != null && repositoryType.endsWith(componentProductname) && validSub(item,type,seletetedNode,component,repositoryType)) {
    return true;
  }
  return false;
}","public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  String productNameWanted=repositoryType;
  if (component == null || repositoryType == null) {
    return false;
  }
  if ((""String_Node_Str"").equals(component.getName()) || (""String_Node_Str"").equals(component.getName())) {
    if (item instanceof XmlFileConnectionItem) {
      XmlFileConnection connection=(XmlFileConnection)((XmlFileConnectionItemImpl)item).getConnection();
      if (!connection.isInputModel()) {
        productNameWanted=""String_Node_Str"";
      }
    }
  }
  String componentProductname=component.getRepositoryType();
  if (componentProductname != null && productNameWanted.endsWith(componentProductname) && validSub(item,type,seletetedNode,component,repositoryType)) {
    return true;
  }
  return false;
}",0.6676760030280091
129819,"/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}","/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  Statement sta=null;
  ResultSet resultSet=null;
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
      if (sta != null) {
        sta.close();
      }
    }
 catch (    SQLException e) {
      log.equals(e.toString());
    }
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
      if (sta != null) {
        sta.close();
      }
    }
 catch (    SQLException e) {
      log.equals(e.toString());
    }
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
      if (sta != null) {
        sta.close();
      }
    }
 catch (    SQLException e) {
      log.equals(e.toString());
    }
  }
  return null;
}",0.4235486508585445
129820,"/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  DocumentToFlat docToFlat=new DocumentToFlat(lookupInfo,xpathOfResults,xpathToTypeMap,xpathToPatternMap);
  docToFlat.setDoc(document);
  docToFlat.setOriginalLoop(loopXPath);
  docToFlat.setXmlNameSpaceMap(nsMapping);
  docToFlat.flatForLookup();
  java.util.List<org.dom4j.tree.AbstractNode> nodes=docToFlat.getNodes();
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  lookupInfo.clear();
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}","/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  DocumentToFlat docToFlat=new DocumentToFlat(lookupInfo,xpathOfResults,xpathToTypeMap,xpathToPatternMap);
  docToFlat.setDoc(document);
  docToFlat.setOriginalLoop(loopXPath);
  docToFlat.setXmlNameSpaceMap(nsMapping);
  docToFlat.flatForLookup();
  if (docToFlat.isLoopChanged()) {
    lookupInfo=docToFlat.getLookupInfo();
    xpathOfResults=docToFlat.getXpathOfResults();
    xpathToTypeMap=docToFlat.getXpathToTypeMap();
    xpathToPatternMap=docToFlat.getXpathToPatternMap();
  }
  java.util.List<org.dom4j.tree.AbstractNode> nodes=docToFlat.getNodes();
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}",0.9568692756036636
129821,"private void resetMapRelativeXpathValue(Map<String,String> source){
  Map content=new HashMap();
  for (  String key : source.keySet()) {
    String value=source.get(key);
    String newValue=resetRelativeXPath(value);
    content.put(key,newValue);
  }
  source.clear();
  source.putAll(content);
}","private Map resetMapRelativeXpathValue(Map<String,String> source){
  Map content=new HashMap();
  for (  String key : source.keySet()) {
    String value=source.get(key);
    String newValue=resetRelativeXPath(value);
    content.put(key,newValue);
  }
  return content;
}",0.8931698774080561
129822,"private void resetMapRelativeXpathKey(Map<String,? extends Object> source){
  Map content=new HashMap();
  for (  String key : source.keySet()) {
    String newKey=resetRelativeXPath(key);
    content.put(newKey,source.get(key));
  }
  source.clear();
  source.putAll(content);
}","private Map resetMapRelativeXpathKey(Map<String,? extends Object> source){
  Map content=new HashMap();
  for (  String key : source.keySet()) {
    String newKey=resetRelativeXPath(key);
    content.put(newKey,source.get(key));
  }
  return content;
}",0.8851224105461394
129823,"private void reset(){
  resetMapRelativeXpathKey(lookupInfo);
  resetMapRelativeXpathKey(xpathToTypeMap);
  resetMapRelativeXpathKey(xpathToPatternMap);
  resetMapRelativeXpathValue(xpathOfResults);
}","private void reset(){
  lookupInfo=resetMapRelativeXpathKey(lookupInfo);
  xpathToTypeMap=resetMapRelativeXpathKey(xpathToTypeMap);
  xpathToPatternMap=resetMapRelativeXpathKey(xpathToPatternMap);
  xpathOfResults=resetMapRelativeXpathValue(xpathOfResults);
}",0.8714596949891068
129824,"public void flatForLookup(){
  XPath loopXpath=doc.createXPath(currentLoop);
  loopXpath.setNamespaceURIs(xmlNameSpaceMap);
  nodes=loopXpath.selectNodes(doc);
  if (nodes.size() == 0 && !top) {
    setParentAsLoop();
    flatForLookup();
  }
 else {
    if (currentLoop != originalLoop) {
      reset();
    }
  }
}","public void flatForLookup(){
  XPath loopXpath=doc.createXPath(currentLoop);
  loopXpath.setNamespaceURIs(xmlNameSpaceMap);
  nodes=loopXpath.selectNodes(doc);
  if (nodes.size() == 0 && !top) {
    setParentAsLoop();
    flatForLookup();
  }
 else {
    if (currentLoop != originalLoop) {
      loopChanged=true;
      reset();
    }
  }
}",0.9634146341463414
129825,"/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}","/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  Statement sta=null;
  ResultSet resultSet=null;
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
      if (sta != null) {
        sta.close();
      }
    }
 catch (    SQLException e) {
      log.equals(e.toString());
    }
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
      if (sta != null) {
        sta.close();
      }
    }
 catch (    SQLException e) {
      log.equals(e.toString());
    }
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (resultSet != null) {
        resultSet.close();
      }
      if (sta != null) {
        sta.close();
      }
    }
 catch (    SQLException e) {
      log.equals(e.toString());
    }
  }
  return null;
}",0.4235486508585445
129826,"/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  if (nodes.size() == 0) {
    loopXPath=resetLoop(loopXPath,lookupInfo,xpathOfResults,xpathToTypeMap,xpathToPatternMap);
    xpathObjectForDoc=document.createXPath(loopXPath);
    xpathObjectForDoc.setNamespaceURIs(nsMapping);
    nodes=xpathObjectForDoc.selectNodes(document);
  }
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}","/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  DocumentToFlat docToFlat=new DocumentToFlat(lookupInfo,xpathOfResults,xpathToTypeMap,xpathToPatternMap);
  docToFlat.setDoc(document);
  docToFlat.setOriginalLoop(loopXPath);
  docToFlat.setXmlNameSpaceMap(nsMapping);
  docToFlat.flatForLookup();
  java.util.List<org.dom4j.tree.AbstractNode> nodes=docToFlat.getNodes();
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  lookupInfo.clear();
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}",0.3731267890217208
129827,"/** 
 * deleteTable.
 * @param tableItem
 */
protected void deleteTable(TableItem tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getText(0))) {
      tables.add(metadata);
    }
  }
}","/** 
 * deleteTable.
 * @param tableItem
 */
protected void deleteTable(TableItem tableItem){
  SalesforceSchemaConnection connection=getConnection();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getText(0)) && metadata.eContainer() instanceof SalesforceModuleUnit) {
      SalesforceModuleUnit moduleUnit=(SalesforceModuleUnit)metadata.eContainer();
      connection.getModules().remove(moduleUnit);
    }
  }
}",0.6763005780346821
129828,"protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  versionMajorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=property.getVersion();
      if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
        version=lastVersionFound;
      }
      version=VersionUtils.upMajor(version);
      versionText.setText(version);
      property.setVersion(version);
      property.setCreationDate(new Date());
      updatePageStatus();
    }
  }
);
  versionMinorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=property.getVersion();
      if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
        version=lastVersionFound;
      }
      version=VersionUtils.upMinor(version);
      versionText.setText(version);
      property.setVersion(version);
      property.setCreationDate(new Date());
      updatePageStatus();
    }
  }
);
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}","protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(StringUtils.trimToNull(nameText.getText()));
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      updatePageStatus();
    }
  }
);
  versionMajorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=property.getVersion();
      if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
        version=lastVersionFound;
      }
      version=VersionUtils.upMajor(version);
      versionText.setText(version);
      property.setVersion(version);
      property.setCreationDate(new Date());
      updatePageStatus();
    }
  }
);
  versionMinorBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String version=property.getVersion();
      if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
        version=lastVersionFound;
      }
      version=VersionUtils.upMinor(version);
      versionText.setText(version);
      property.setVersion(version);
      property.setCreationDate(new Date());
      updatePageStatus();
    }
  }
);
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      updatePageStatus();
    }
  }
);
}",0.987743095277006
129829,"protected void evaluateTextField(){
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
  }
  updatePageStatus();
}","protected void evaluateTextField(){
  if (nameText.getText().length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),nameText.getText()) || nameText.getText().trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(nameText.getText()) || ""String_Node_Str"".equalsIgnoreCase(nameText.getText())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(nameText.getText())) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (property != null && nameStatus.getSeverity() == IStatus.OK) {
    property.setLabel(StringUtils.trimToNull(nameText.getText()));
    property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
  }
  updatePageStatus();
}",0.9720016715419976
129830,"/** 
 * deleteTable.
 * @param tableItem
 */
protected void deleteTable(TableItem tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getText(0))) {
      tables.add(metadata);
    }
  }
}","/** 
 * deleteTable.
 * @param tableItem
 */
protected void deleteTable(TableItem tableItem){
  SalesforceSchemaConnection connection=getConnection();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getText(0)) && metadata.eContainer() instanceof SalesforceModuleUnit) {
      SalesforceModuleUnit moduleUnit=(SalesforceModuleUnit)metadata.eContainer();
      connection.getModules().remove(moduleUnit);
    }
  }
}",0.6763005780346821
129831,"private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String strsplit=str;
  int count=0;
  if (tableName != null) {
    while (strsplit.contains(""String_Node_Str"")) {
      count++;
      strsplit=strsplit.substring(strsplit.indexOf(""String_Node_Str"") + 1);
    }
    if (count > 1) {
      strsplit=str.substring(str.indexOf(""String_Node_Str"") + 1);
      str=strsplit;
    }
    TABLE_SCHEMA=str.substring(0,str.indexOf(""String_Node_Str""));
    TABLE_NAME=str.substring(str.indexOf(""String_Node_Str"") + 1);
  }
  String synSQL=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str""+ TABLE_NAME+ ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.9016248897846076
129832,"/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}","/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}",0.9941520467836256
129833,"public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
        tmpProjectNode.dispose();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}","public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}",0.875968992248062
129834,"private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.9947935585421964
129835,"public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
        tmpProjectNode.dispose();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}","public synchronized void updateViewProjectNode(IProjectRepositoryNode projectRepNode){
  if (projectRepNode != null) {
    final Iterator<IProjectRepositoryNode> iterator=viewProjectNodes.iterator();
    while (iterator.hasNext()) {
      IProjectRepositoryNode tmpProjectNode=iterator.next();
      if (tmpProjectNode.getProject().getTechnicalLabel().equals(projectRepNode.getProject().getTechnicalLabel())) {
        iterator.remove();
      }
    }
    viewProjectNodes.add(projectRepNode);
  }
}",0.875968992248062
129836,"protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=""String_Node_Str"" + relativeXpath;
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}","protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      if (!""String_Node_Str"".equals(relativeXpath)) {
        String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
        if (relatedSplitedPaths.length > 1) {
          int pathsToRemove=relatedSplitedPaths.length - 1;
          String[] fullPathSplited=fullPath.split(""String_Node_Str"");
          fullPath=""String_Node_Str"";
          for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
            fullPath+=""String_Node_Str"" + fullPathSplited[i];
          }
          fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
        }
 else {
          fullPath+=""String_Node_Str"" + relativeXpath;
        }
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}",0.9869419981779533
129837,"protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=""String_Node_Str"" + relativeXpath;
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}","protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      if (!""String_Node_Str"".equals(relativeXpath)) {
        String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
        if (relatedSplitedPaths.length > 1) {
          int pathsToRemove=relatedSplitedPaths.length - 1;
          String[] fullPathSplited=fullPath.split(""String_Node_Str"");
          fullPath=""String_Node_Str"";
          for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
            fullPath+=""String_Node_Str"" + fullPathSplited[i];
          }
          fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
        }
 else {
          fullPath+=""String_Node_Str"" + relativeXpath;
        }
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}",0.9869419981779533
129838,"public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionLoopWithMDMEditorView loopTableEditorView=linker.getLoopTableEditorView();
  ExtractionFieldsWithMDMEditorView mdmEditorView=linker.getFieldsTableEditorView();
  if (loopTableEditorView.isReadOnly()) {
    return;
  }
  List<ConceptTarget> fullSchemaTargetList=new ArrayList<ConceptTarget>(mdmEditorView.getModel().getBeansList());
  ExtendedTableModel<Concept> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  Concept concept=extendedTableModel.getBeansList().get(0);
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,concept,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithMDMEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<ConceptTarget> list=new ArrayList<ConceptTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0) {
        String loopPath=loopXpathNodes.get(0);
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath == null) {
          continue;
        }
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        ConceptTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=extractColumnName(extractTagName(relativeXPath),fullSchemaTargetList);
        newTargetEntry.setTargetName(name);
        list.add(newTargetEntry);
        fullSchemaTargetList.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}","public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionLoopWithMDMEditorView loopTableEditorView=linker.getLoopTableEditorView();
  ExtractionFieldsWithMDMEditorView mdmEditorView=linker.getFieldsTableEditorView();
  if (loopTableEditorView.isReadOnly()) {
    return;
  }
  List<ConceptTarget> fullSchemaTargetList=new ArrayList<ConceptTarget>(mdmEditorView.getModel().getBeansList());
  ExtendedTableModel<Concept> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  Concept concept=extendedTableModel.getBeansList().get(0);
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,concept,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithMDMEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<ConceptTarget> list=new ArrayList<ConceptTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0) {
        String loopPath=loopXpathNodes.get(0);
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath == null) {
          continue;
        }
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        ConceptTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=""String_Node_Str"";
        if (""String_Node_Str"".equals(relativeXPath)) {
          if (entry.getAbsoluteXPath() != null) {
            String[] split=entry.getAbsoluteXPath().split(""String_Node_Str"");
            name=extractColumnName(extractTagName(split[split.length - 1]),fullSchemaTargetList);
          }
        }
 else {
          name=extractColumnName(extractTagName(relativeXPath),fullSchemaTargetList);
        }
        newTargetEntry.setTargetName(name);
        list.add(newTargetEntry);
        fullSchemaTargetList.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}",0.9397590361445785
129839,"/** 
 * DOC smallet Comment method ""getCopiedLabel"".
 * @param copiedProperty
 * @return
 * @throws PersistenceException
 * @throws BusinessException
 */
private void setPropNewName(Property copiedProperty) throws PersistenceException, BusinessException {
  String originalLabel=copiedProperty.getLabel();
  String add1=""String_Node_Str"";
  String initialTry=add1 + originalLabel;
  copiedProperty.setLabel(initialTry);
  if (isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
    return;
  }
 else {
    char j='a';
    while (!isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
      if (j > 'z') {
        throw new BusinessException(Messages.getString(""String_Node_Str""));
      }
      String nextTry=initialTry + ""String_Node_Str"" + (j++)+ ""String_Node_Str"";
      copiedProperty.setLabel(nextTry);
    }
  }
}","/** 
 * DOC smallet Comment method ""getCopiedLabel"".
 * @param copiedProperty
 * @return
 * @throws PersistenceException
 * @throws BusinessException
 */
private void setPropNewName(Property copiedProperty) throws PersistenceException, BusinessException {
  String originalLabel=copiedProperty.getLabel();
  String add1=""String_Node_Str"";
  String initialTry=add1 + originalLabel;
  copiedProperty.setLabel(initialTry);
  copiedProperty.setDisplayName(initialTry);
  if (isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
    return;
  }
 else {
    char j='a';
    while (!isNameAvailable(getRepositoryContext().getProject(),copiedProperty.getItem(),null)) {
      if (j > 'z') {
        throw new BusinessException(Messages.getString(""String_Node_Str""));
      }
      String nextTry=initialTry + ""String_Node_Str"" + (j++)+ ""String_Node_Str"";
      copiedProperty.setLabel(nextTry);
      copiedProperty.setDisplayName(nextTry);
    }
  }
}",0.951154052603328
129840,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        String id=null;
        String label=null;
        boolean isfirst=true;
        boolean needSys=true;
        for (        IRepositoryViewObject object : selectedVersionItems) {
          Item selectedItem=object.getProperty().getItem();
          final Item copy=factory.copy(selectedItem,path);
          if (isfirst) {
            id=copy.getProperty().getId();
            label=copy.getProperty().getLabel();
            isfirst=false;
          }
          copy.getProperty().setId(id);
          copy.getProperty().setLabel(label);
          if (needSys && originalItem instanceof RoutineItem) {
            String lastestVersion=getLastestVersion(selectedVersionItems);
            if (lastestVersion.equals(copy.getProperty().getVersion())) {
              synDuplicatedRoutine((RoutineItem)copy);
              needSys=false;
            }
          }
          RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
            @Override protected void run() throws LoginException, PersistenceException {
              if (copy instanceof ProcessItem) {
                RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
              }
              factory.save(copy);
            }
          }
;
          workUnit.setAvoidUnloadResources(true);
          factory.executeRepositoryWorkUnit(workUnit);
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        String id=null;
        String label=null;
        boolean isfirst=true;
        boolean needSys=true;
        for (        IRepositoryViewObject object : selectedVersionItems) {
          Item selectedItem=object.getProperty().getItem();
          final Item copy=factory.copy(selectedItem,path);
          if (isfirst) {
            id=copy.getProperty().getId();
            label=copy.getProperty().getLabel();
            isfirst=false;
          }
          copy.getProperty().setId(id);
          copy.getProperty().setLabel(label);
          copy.getProperty().setDisplayName(label);
          if (needSys && originalItem instanceof RoutineItem) {
            String lastestVersion=getLastestVersion(selectedVersionItems);
            if (lastestVersion.equals(copy.getProperty().getVersion())) {
              synDuplicatedRoutine((RoutineItem)copy);
              needSys=false;
            }
          }
          RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
            @Override protected void run() throws LoginException, PersistenceException {
              if (copy instanceof ProcessItem) {
                RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
              }
              factory.save(copy);
            }
          }
;
          workUnit.setAvoidUnloadResources(true);
          factory.executeRepositoryWorkUnit(workUnit);
        }
      }
    }
  }
}",0.9890341628005062
129841,"@Override protected void run() throws LoginException, PersistenceException {
  try {
    final Item newItem=factory.copy(item,path,true);
    newItem.getProperty().setLabel(newName);
    if (newItem instanceof RoutineItem) {
      synDuplicatedRoutine((RoutineItem)newItem);
    }
    ICamelDesignerCoreService service=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    }
    if (service != null && service.isInstanceofCamelBeans(item)) {
      synDuplicatedBean(newItem);
    }
    if (newItem instanceof ProcessItem) {
      RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)newItem);
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      connectionItem.getConnection().getSupplierDependency().clear();
    }
    factory.save(newItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  try {
    final Item newItem=factory.copy(item,path,true);
    newItem.getProperty().setLabel(newName);
    newItem.getProperty().setDisplayName(newName);
    if (newItem instanceof RoutineItem) {
      synDuplicatedRoutine((RoutineItem)newItem);
    }
    ICamelDesignerCoreService service=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    }
    if (service != null && service.isInstanceofCamelBeans(item)) {
      synDuplicatedBean(newItem);
    }
    if (newItem instanceof ProcessItem) {
      RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)newItem);
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      connectionItem.getConnection().getSupplierDependency().clear();
    }
    factory.save(newItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9766162310866576
129842,"private void createOperation(String newJobName,RepositoryNode target,CopyObjectAction copyObjectAction,TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        if (dialog.open() == Window.OK) {
          Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          String id=null;
          String label=null;
          boolean isfirst=true;
          boolean needSys=true;
          for (          IRepositoryViewObject object : selectedVersionItems) {
            Item selectedItem=object.getProperty().getItem();
            final Item copy=factory.copy(selectedItem,path);
            if (isfirst) {
              id=copy.getProperty().getId();
              label=copy.getProperty().getLabel();
              isfirst=false;
            }
            copy.getProperty().setId(id);
            copy.getProperty().setLabel(newJobName);
            if (needSys && originalItem instanceof RoutineItem) {
              String lastestVersion=getLastestVersion(selectedVersionItems);
              if (lastestVersion.equals(copy.getProperty().getVersion())) {
                synDuplicatedRoutine((RoutineItem)copy);
                needSys=false;
              }
            }
            final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(this.getText(),this){
              @Override protected void run() throws LoginException, PersistenceException {
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
                }
                factory.save(copy);
              }
            }
;
            workUnit.setAvoidUnloadResources(true);
            factory.executeRepositoryWorkUnit(workUnit);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(String newJobName,RepositoryNode target,CopyObjectAction copyObjectAction,TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        if (dialog.open() == Window.OK) {
          Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          String id=null;
          String label=null;
          boolean isfirst=true;
          boolean needSys=true;
          for (          IRepositoryViewObject object : selectedVersionItems) {
            Item selectedItem=object.getProperty().getItem();
            final Item copy=factory.copy(selectedItem,path);
            if (isfirst) {
              id=copy.getProperty().getId();
              label=copy.getProperty().getLabel();
              isfirst=false;
            }
            copy.getProperty().setId(id);
            copy.getProperty().setLabel(newJobName);
            copy.getProperty().setDisplayName(newJobName);
            if (needSys && originalItem instanceof RoutineItem) {
              String lastestVersion=getLastestVersion(selectedVersionItems);
              if (lastestVersion.equals(copy.getProperty().getVersion())) {
                synDuplicatedRoutine((RoutineItem)copy);
                needSys=false;
              }
            }
            final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(this.getText(),this){
              @Override protected void run() throws LoginException, PersistenceException {
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)copy);
                }
                factory.save(copy);
              }
            }
;
            workUnit.setAvoidUnloadResources(true);
            factory.executeRepositoryWorkUnit(workUnit);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9893405600722672
129843,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  RepositoryWorkUnit<Object> rwu=new RepositoryWorkUnit<Object>(this.getText(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  rwu.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(rwu);
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  RepositoryWorkUnit<Object> rwu=new RepositoryWorkUnit<Object>(this.getText(),this){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        final Item newItem=factory.copy(item,path,true);
        newItem.getProperty().setLabel(newName);
        newItem.getProperty().setDisplayName(newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem);
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem((ProcessItem)newItem);
        }
        if (newItem instanceof ConnectionItem) {
          ConnectionItem connectionItem=(ConnectionItem)newItem;
          connectionItem.getConnection().getSupplierDependency().clear();
        }
        factory.save(newItem);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  rwu.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(rwu);
}",0.9812861517522968
129844,"private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String strsplit=str;
  int count=0;
  if (tableName != null) {
    while (strsplit.contains(""String_Node_Str"")) {
      count++;
      strsplit=strsplit.substring(strsplit.indexOf(""String_Node_Str"") + 1);
    }
    if (count > 1) {
      strsplit=str.substring(str.indexOf(""String_Node_Str"") + 1);
      str=strsplit;
    }
    TABLE_SCHEMA=str.substring(0,str.indexOf(""String_Node_Str""));
    TABLE_NAME=str.substring(str.indexOf(""String_Node_Str"") + 1);
  }
  String synSQL=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str""+ TABLE_NAME+ ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForMSSQL(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  String str=tableName;
  String TABLE_SCHEMA=null;
  String TABLE_NAME=null;
  String splitstr=str;
  int position=0;
  int count=0;
  if (tableName != null) {
    while (str.contains(""String_Node_Str"")) {
      count++;
      splitstr=splitstr.substring(splitstr.indexOf(""String_Node_Str"") + 3,splitstr.length());
    }
    if (str.indexOf(""String_Node_Str"") == 0) {
      TABLE_NAME=str.substring(1,str.length() - 1);
    }
 else     if (str.indexOf(""String_Node_Str"") == -1) {
      TABLE_NAME=tableName;
    }
 else {
      if (count == 2) {
        str=str.substring(str.indexOf(""String_Node_Str"") + 3,str.length());
      }
      position=str.indexOf(""String_Node_Str"");
      TABLE_SCHEMA=str.substring(0,position);
      TABLE_NAME=str.substring(position + 3,str.length());
    }
  }
  String synSQL=""String_Node_Str"" + TABLE_NAME + ""String_Node_Str"";
  if (null != TABLE_SCHEMA) {
    synSQL+=""String_Node_Str"" + TABLE_SCHEMA + ""String_Node_Str"";
  }
  if (!(""String_Node_Str"").equals(iMetadataConnection.getDatabase())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getDatabase() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    int column_size=0;
    String lenString=null;
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      lenString=""String_Node_Str"";
      column_size=columns.getInt(""String_Node_Str"");
      if (columns.getString(""String_Node_Str"") != null) {
        column_size=columns.getInt(""String_Node_Str"");
        lenString=""String_Node_Str"";
      }
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,lenString),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(""String_Node_Str"")));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.9055316999242232
129845,"/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}","/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}",0.9941520467836256
129846,"protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=""String_Node_Str"" + relativeXpath;
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}","protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      if (!""String_Node_Str"".equals(relativeXpath)) {
        String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
        if (relatedSplitedPaths.length > 1) {
          int pathsToRemove=relatedSplitedPaths.length - 1;
          String[] fullPathSplited=fullPath.split(""String_Node_Str"");
          fullPath=""String_Node_Str"";
          for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
            fullPath+=""String_Node_Str"" + fullPathSplited[i];
          }
          fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
        }
 else {
          fullPath+=""String_Node_Str"" + relativeXpath;
        }
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}",0.9869419981779533
129847,"protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=""String_Node_Str"" + relativeXpath;
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}","protected void createTable(){
  if (concept == null) {
    return;
  }
  if (metadataTable == null) {
    metadataTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    metadataTable.setId(factory.getNextId());
  }
  metadataTable.setLabel(concept.getLabel());
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  List<ConceptTarget> targetList=concept.getConceptTargets();
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  metadataTable.getColumns().clear();
  for (  ConceptTarget target : targetList) {
    String relativeXpath=target.getRelativeLoopExpression();
    String fullPath=target.getSchema().getLoopExpression();
    if (fullPath.contains(""String_Node_Str"") && metadataTable.getSourceName() == null) {
      String source=fullPath.split(""String_Node_Str"")[1];
      metadataTable.setSourceName(source);
    }
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    if (relativeXpath != null) {
      if (!""String_Node_Str"".equals(relativeXpath)) {
        String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
        if (relatedSplitedPaths.length > 1) {
          int pathsToRemove=relatedSplitedPaths.length - 1;
          String[] fullPathSplited=fullPath.split(""String_Node_Str"");
          fullPath=""String_Node_Str"";
          for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
            fullPath+=""String_Node_Str"" + fullPathSplited[i];
          }
          fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
        }
 else {
          fullPath+=""String_Node_Str"" + relativeXpath;
        }
      }
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(target.getTargetName());
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      if (!metadataTable.getColumns().contains(metadataColumn)) {
        metadataTable.getColumns().add(metadataColumn);
      }
      metadataColumns.add(metadataColumn);
    }
  }
  if (!ConnectionHelper.getTables(getConnection()).contains(metadataTable)) {
    TdXmlSchema d=(TdXmlSchema)ConnectionHelper.getPackage(((MDMConnection)connectionItem.getConnection()).getDatacluster(),connectionItem.getConnection(),TdXmlSchema.class);
    if (d != null) {
      d.getOwnedElement().add(metadataTable);
    }
 else {
      TdXmlSchema newXmlDoc=XmlFactory.eINSTANCE.createTdXmlSchema();
      newXmlDoc.setName(((MDMConnection)connectionItem.getConnection()).getDatacluster());
      ConnectionHelper.addPackage(newXmlDoc,connectionItem.getConnection());
      PackageHelper.addMetadataTable(metadataTable,newXmlDoc);
    }
  }
}",0.9869419981779533
129848,"public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionFieldsWithMDMEditorView mdmEditorView=linker.getFieldsTableEditorView();
  ExtractionLoopWithMDMEditorView loopTableEditorView=linker.getLoopTableEditorView();
  if (loopTableEditorView.isReadOnly()) {
    return;
  }
  ExtendedTableModel<Concept> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  List<ConceptTarget> fullSchemaTargetList=new ArrayList<ConceptTarget>(mdmEditorView.getModel().getBeansList());
  Concept concept=extendedTableModel.getBeansList().get(0);
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,concept,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithMDMEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<ConceptTarget> list=new ArrayList<ConceptTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0) {
        String loopPath=loopXpathNodes.get(0);
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath == null) {
          continue;
        }
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        ConceptTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=extractColumnName(extractTagName(relativeXPath),fullSchemaTargetList);
        newTargetEntry.setTargetName(name);
        list.add(newTargetEntry);
        fullSchemaTargetList.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}","public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionFieldsWithMDMEditorView mdmEditorView=linker.getFieldsTableEditorView();
  ExtractionLoopWithMDMEditorView loopTableEditorView=linker.getLoopTableEditorView();
  if (loopTableEditorView.isReadOnly()) {
    return;
  }
  ExtendedTableModel<Concept> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  List<ConceptTarget> fullSchemaTargetList=new ArrayList<ConceptTarget>(mdmEditorView.getModel().getBeansList());
  Concept concept=extendedTableModel.getBeansList().get(0);
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,concept,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithMDMEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<ConceptTarget> list=new ArrayList<ConceptTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0) {
        String loopPath=loopXpathNodes.get(0);
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath == null) {
          continue;
        }
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        ConceptTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=""String_Node_Str"";
        if (""String_Node_Str"".equals(relativeXPath)) {
          if (entry.getAbsoluteXPath() != null) {
            String[] split=entry.getAbsoluteXPath().split(""String_Node_Str"");
            name=extractColumnName(extractTagName(split[split.length - 1]),fullSchemaTargetList);
          }
        }
 else {
          name=extractColumnName(extractTagName(relativeXPath),fullSchemaTargetList);
        }
        newTargetEntry.setTargetName(name);
        list.add(newTargetEntry);
        fullSchemaTargetList.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}",0.9397590361445785
129849,"@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
  if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
 else   if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    return;
  }
 else   if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
}","@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
  disappearGenerateJobCoolBar(pId,PlatformUI.getWorkbench().getActiveWorkbenchWindow());
  if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
 else   if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    return;
  }
 else   if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
}",0.913508260447036
129850,"/** 
 * DOC Comment method ""regisitPerspectiveBarSelectListener"".
 */
public static void regisitPerspectiveBarSelectListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
 else       if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        return;
      }
 else       if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
    }
  }
);
}","/** 
 * DOC Comment method ""regisitPerspectiveBarSelectListener"".
 */
public static void regisitPerspectiveBarSelectListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      disappearGenerateJobCoolBar(pId,PlatformUI.getWorkbench().getActiveWorkbenchWindow());
      if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
 else       if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        return;
      }
 else       if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
    }
  }
);
}",0.9433962264150944
129851,"@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
  if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
 else   if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    return;
  }
 else   if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
}","@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
  disappearGenerateJobCoolBar(pId,PlatformUI.getWorkbench().getActiveWorkbenchWindow());
  if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
 else   if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    return;
  }
 else   if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
    isfirst=perspective.getId();
    refreshAll();
  }
}",0.913508260447036
129852,"/** 
 * DOC Comment method ""regisitPerspectiveBarSelectListener"".
 */
public static void regisitPerspectiveBarSelectListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
 else       if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        return;
      }
 else       if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
    }
  }
);
}","/** 
 * DOC Comment method ""regisitPerspectiveBarSelectListener"".
 */
public static void regisitPerspectiveBarSelectListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      disappearGenerateJobCoolBar(pId,PlatformUI.getWorkbench().getActiveWorkbenchWindow());
      if (null == isfirst || ""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
 else       if (pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        return;
      }
 else       if (!pId.equals(isfirst) && !""String_Node_Str"".equals(isfirst)) {
        isfirst=perspective.getId();
        refreshAll();
      }
    }
  }
);
}",0.9433962264150944
129853,"/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
public static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}","/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}",0.967741935483871
129854,"/** 
 * Retrieve and return the dbms from the given id.
 * @param dbmsId
 * @return the dbms from the given id
 */
static Dbms getDbms(String dbmsId){
  if (dbmsId == null) {
    throw new IllegalArgumentException();
  }
  Dbms[] allDbmsArray=getAllDbmsArray();
  for (int i=0; i < allDbmsArray.length; i++) {
    Dbms dbms=allDbmsArray[i];
    if (dbmsId.equals(dbms.getId())) {
      return dbms;
    }
  }
  throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",dbmsId));
}","/** 
 * Retrieve and return the dbms from the given id.
 * @param dbmsId
 * @return the dbms from the given id
 */
public static Dbms getDbms(String dbmsId){
  if (dbmsId == null) {
    throw new IllegalArgumentException();
  }
  Dbms[] allDbmsArray=getAllDbmsArray();
  for (int i=0; i < allDbmsArray.length; i++) {
    Dbms dbms=allDbmsArray[i];
    if (dbmsId.equals(dbms.getId())) {
      return dbms;
    }
  }
  throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",dbmsId));
}",0.992964824120603
129855,"/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
public static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}","/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}",0.967741935483871
129856,"/** 
 * Retrieve and return the dbms from the given id.
 * @param dbmsId
 * @return the dbms from the given id
 */
public static Dbms getDbms(String dbmsId){
  if (dbmsId == null) {
    throw new IllegalArgumentException();
  }
  Dbms[] allDbmsArray=getAllDbmsArray();
  for (int i=0; i < allDbmsArray.length; i++) {
    Dbms dbms=allDbmsArray[i];
    if (dbmsId.equals(dbms.getId())) {
      return dbms;
    }
  }
  throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",dbmsId));
}","/** 
 * Retrieve and return the dbms from the given id.
 * @param dbmsId
 * @return the dbms from the given id
 */
static Dbms getDbms(String dbmsId){
  if (dbmsId == null) {
    throw new IllegalArgumentException();
  }
  Dbms[] allDbmsArray=getAllDbmsArray();
  for (int i=0; i < allDbmsArray.length; i++) {
    Dbms dbms=allDbmsArray[i];
    if (dbmsId.equals(dbms.getId())) {
      return dbms;
    }
  }
  throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",dbmsId));
}",0.992964824120603
129857,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    String sid=((DatabaseConnection)dbConn).getSID();
    if (sid != null && sid.length() > 0) {
      schemaFilter.add(sid);
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      if (!dbConn.isContextMode()) {
        String sid=((DatabaseConnection)dbConn).getSID();
        if (sid != null && sid.length() > 0) {
          schemaFilter.add(sid);
        }
      }
 else {
        IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
        String sid=iMetadataCon.getDatabase();
        if (sid != null && sid.length() > 0) {
          schemaFilter.add(sid);
        }
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9198577680525164
129858,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateCheckButton();
  if (urlConnectionStringText.getText().equals(""String_Node_Str"")) {
    urlConnectionStringText.setText(getStringConnection());
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    setPropertiesFormEditable(template != null);
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    updateStatus(getStatusLevel(),getStatus());
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateCheckButton();
  if (urlConnectionStringText.getText().equals(""String_Node_Str"")) {
    urlConnectionStringText.setText(getStringConnection());
  }
  if (isContextMode()) {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    setPropertiesFormEditable(template != null);
    adaptFormToEditable();
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    setPropertiesFormEditable(template != null);
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    updateStatus(getStatusLevel(),getStatus());
  }
}",0.8017751479289941
129859,"public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null)           addRelationShip(item,property.getId(),version,JOBLET_RELATION);
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    addRelationShip(item,jobId,jobVersion,JOB_RELATION);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}","public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  if (processType != null) {
    boolean relationsModified=true;
    Relation relation=new Relation();
    relation.setId(item.getProperty().getId());
    relation.setType(getTypeFromItem(item));
    relation.setVersion(item.getProperty().getVersion());
    Set<Relation> oldProjectRelations=null;
    if (currentProjectItemsRelations.containsKey(relation)) {
      oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
      currentProjectItemsRelations.get(relation).clear();
    }
    clearItemsRelations(item);
    Boolean builtIn=null;
    String currentValue=null;
    String relationType=null;
    for (    Object o : processType.getContext()) {
      ContextType context=(ContextType)o;
      for (      Object o2 : context.getContextParameter()) {
        ContextParameterType contextParam=(ContextParameterType)o2;
        if (!StringUtils.isEmpty(contextParam.getRepositoryContextId())) {
          addRelationShip(item,contextParam.getRepositoryContextId(),LATEST_VERSION,CONTEXT_RELATION);
        }
      }
    }
    if (processType.getParameters() != null) {
      if (processType.getParameters().getRoutinesParameter() != null) {
        for (        Object o : processType.getParameters().getRoutinesParameter()) {
          RoutinesParameterType itemInfor=(RoutinesParameterType)o;
          addRelationShip(item,itemInfor.getName(),LATEST_VERSION,ROUTINE_RELATION);
        }
      }
      for (      Object o : processType.getParameters().getElementParameter()) {
        if (o instanceof ElementParameterType) {
          ElementParameterType param=(ElementParameterType)o;
          if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=SCHEMA_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=PROPERTY_RELATION;
          }
 else           if (param.getName().startsWith(""String_Node_Str"")) {
            relationType=VALIDATION_RULE_RELATION;
          }
 else {
            builtIn=null;
            currentValue=null;
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            builtIn=true;
            if (param.getValue().equals(""String_Node_Str"")) {
              builtIn=false;
            }
          }
          if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")) {
            currentValue=param.getValue();
          }
          if (builtIn != null && currentValue != null) {
            if (!builtIn) {
              addRelationShip(item,currentValue,LATEST_VERSION,relationType);
            }
            builtIn=null;
            currentValue=null;
          }
        }
      }
    }
    List<String> jobletsComponentsList=new ArrayList<String>();
    IComponentsService compService=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    for (    IComponent component : compService.getComponentsFactory().getComponents()) {
      if (component.getComponentType() == EComponentType.JOBLET) {
        jobletsComponentsList.add(component.getName());
      }
    }
    builtIn=null;
    currentValue=null;
    for (    Object o : processType.getNode()) {
      if (o instanceof NodeType) {
        NodeType currentNode=(NodeType)o;
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=QUERY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"") || param.getName().startsWith(""String_Node_Str"")) {
              relationType=SCHEMA_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=PROPERTY_RELATION;
            }
 else             if (param.getName().startsWith(""String_Node_Str"")) {
              relationType=VALIDATION_RULE_RELATION;
            }
 else {
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              builtIn=true;
              if (param.getValue().equals(""String_Node_Str"")) {
                builtIn=false;
              }
            }
            if (param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"") || param.getName().endsWith(""String_Node_Str"")|| param.getName().endsWith(""String_Node_Str"")) {
              currentValue=param.getValue();
            }
            if (builtIn != null && currentValue != null) {
              if (!builtIn) {
                addRelationShip(item,currentValue,LATEST_VERSION,relationType);
              }
              builtIn=null;
              currentValue=null;
            }
            if (param.getName().equals(""String_Node_Str"")) {
              for (              Object o3 : param.getElementValue()) {
                if (o3 instanceof ElementValueType && ""String_Node_Str"".equals(((ElementValueType)o3).getElementRef())) {
                  addRelationShip(item,((ElementValueType)o3).getValue(),LATEST_VERSION,SQLPATTERN_RELATION);
                }
              }
            }
            if (param.getField().equals(EParameterFieldType.SURVIVOR_RELATION.getName())) {
              String relatedID=param.getValue();
              addRelationShip(item,relatedID,LATEST_VERSION,SURVIVOR_RELATION);
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          AbstractExternalData nodeData=currentNode.getNodeData();
          List<String> schemaIds=service.getRepositorySchemaIds(nodeData);
          if (schemaIds.size() > 0) {
            for (            String schemaId : schemaIds) {
              addRelationShip(item,schemaId,LATEST_VERSION,SCHEMA_RELATION);
            }
          }
        }
        if (jobletsComponentsList.contains(currentNode.getComponentName())) {
          String version=LATEST_VERSION;
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"")) {
                version=param.getValue();
              }
            }
          }
          IComponent cc=compService.getComponentsFactory().get(currentNode.getComponentName());
          IJobletProviderService service=null;
          if (PluginChecker.isJobLetPluginLoaded()) {
            service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          }
          Property property=service.getJobletComponentItem(cc);
          if (property != null)           addRelationShip(item,property.getId(),version,JOBLET_RELATION);
        }
        if (""String_Node_Str"".equals(currentNode.getComponentName())) {
          String jobVersion=LATEST_VERSION;
          Set<String> jobIdSet=new HashSet<String>();
          for (          Object o2 : currentNode.getElementParameter()) {
            if (o2 instanceof ElementParameterType) {
              ElementParameterType param=(ElementParameterType)o2;
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                String jobIds=param.getValue();
                String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
                for (                String jobId : jobsArr) {
                  if (StringUtils.isNotEmpty(jobId)) {
                    jobIdSet.add(jobId);
                  }
                }
              }
              if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
                jobVersion=param.getValue();
              }
            }
          }
          for (          String jobId : jobIdSet) {
            addRelationShip(item,jobId,jobVersion,JOB_RELATION);
          }
        }
      }
    }
    if (oldProjectRelations != null) {
      Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
      if (oldProjectRelations.size() == newProjectRelations.size()) {
        relationsModified=false;
        for (        Relation newRelation : newProjectRelations) {
          if (!oldProjectRelations.contains(newRelation)) {
            relationsModified=true;
            break;
          }
        }
      }
      if (!relationsModified) {
        currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
      }
    }
    if (relationsModified && !modified) {
      modified=true;
    }
    if (!fromMigration && modified) {
      saveRelations();
    }
  }
}",0.967179541038702
129860,"public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  for (  Object o : processType.getNode()) {
    if (o instanceof NodeType) {
      NodeType currentNode=(NodeType)o;
      if (""String_Node_Str"".equals(currentNode.getComponentName())) {
        String jobIdStr=null;
        String jobVersion=LATEST_VERSION;
        String nowVersion=""String_Node_Str"";
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              String jobIds=param.getValue();
              String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
              for (              String jobId : jobsArr) {
                if (StringUtils.isNotEmpty(jobId)) {
                  addRelationShip(item,jobId,nowVersion,JOB_RELATION);
                  factory.save(project,item);
                }
                jobIdStr=jobId;
              }
            }
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              jobVersion=param.getValue();
              if (jobVersion.equals(LATEST_VERSION)) {
                if (!versions.isEmpty()) {
                  nowVersion=versions.get(jobIdStr);
                  param.setValue(nowVersion);
                }
              }
            }
          }
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}","public void updateItemVersion(Item baseItem,String oldVersion,String id,Map<String,String> versions,boolean avoidSaveProject) throws PersistenceException {
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  IRepositoryViewObject obj=factory.getSpecificVersion(id,oldVersion,avoidSaveProject);
  Item item=obj.getProperty().getItem();
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  Project project=new Project(ProjectManager.getInstance().getProject(item));
  if (!loaded) {
    loadRelations();
  }
  if (!currentProject.equals(project)) {
    return;
  }
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
  if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  for (  Object o : processType.getNode()) {
    if (o instanceof NodeType) {
      NodeType currentNode=(NodeType)o;
      if (""String_Node_Str"".equals(currentNode.getComponentName())) {
        String jobIdStr=null;
        String jobVersion=LATEST_VERSION;
        String nowVersion=""String_Node_Str"";
        Set<String> jobIdSet=new HashSet<String>();
        for (        Object o2 : currentNode.getElementParameter()) {
          if (o2 instanceof ElementParameterType) {
            ElementParameterType param=(ElementParameterType)o2;
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              String jobIds=param.getValue();
              String[] jobsArr=jobIds.split(RelationshipItemBuilder.COMMA);
              for (              String jobId : jobsArr) {
                if (StringUtils.isNotEmpty(jobId)) {
                  jobIdSet.add(jobId);
                }
                jobIdStr=jobId;
              }
            }
            if (param.getName().equals(""String_Node_Str"") || param.getName().equals(""String_Node_Str"")) {
              jobVersion=param.getValue();
              if (jobVersion.equals(LATEST_VERSION)) {
                if (!versions.isEmpty()) {
                  nowVersion=versions.get(jobIdStr);
                  param.setValue(nowVersion);
                }
              }
            }
          }
        }
        for (        String jobId : jobIdSet) {
          addRelationShip(item,jobId,nowVersion,JOB_RELATION);
          factory.save(project,item);
        }
      }
    }
  }
  if (!avoidSaveProject) {
    saveRelations();
  }
}",0.7471898630696914
129861,"/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}","/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  if (nodes.size() == 0) {
    loopXPath=resetLoop(loopXPath,lookupInfo,xpathOfResults,xpathToTypeMap,xpathToPatternMap);
    xpathObjectForDoc=document.createXPath(loopXPath);
    xpathObjectForDoc.setNamespaceURIs(nsMapping);
    nodes=xpathObjectForDoc.selectNodes(document);
  }
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}",0.5770887166236004
129862,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateCheckButton();
  if (urlConnectionStringText.getText().equals(""String_Node_Str"")) {
    urlConnectionStringText.setText(getStringConnection());
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    setPropertiesFormEditable(template != null);
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    updateStatus(getStatusLevel(),getStatus());
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateCheckButton();
  if (urlConnectionStringText.getText().equals(""String_Node_Str"")) {
    urlConnectionStringText.setText(getStringConnection());
  }
  if (isContextMode()) {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    setPropertiesFormEditable(template != null);
    adaptFormToEditable();
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    setPropertiesFormEditable(template != null);
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    updateStatus(getStatusLevel(),getStatus());
  }
}",0.8017751479289941
129863,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    String sid=((DatabaseConnection)dbConn).getSID();
    if (sid != null && sid.length() > 0) {
      schemaFilter.add(sid);
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.959349593495935
129864,"/** 
 * DOC wzhang Comment method ""setXmlFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setXmlFileValue(XmlFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setXmlFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  EList emfSchemaList=connection.getSchema();
  if (emfSchemaList.size() < 1) {
    emfSchemaList.add(ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor());
  }
  XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)emfSchemaList.get(0);
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      xmlDesc.setAbsoluteXPathQuery(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && value.trim().length() > 0) {
      xmlDesc.setLimitBoucle(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null) {
      EList schemaTargets=xmlDesc.getSchemaTargets();
      List<Map<String,Object>> tableInfo=(List<Map<String,Object>>)param.getValue();
      for (      Map<String,Object> mapObject : tableInfo) {
        String schema=(String)mapObject.get(""String_Node_Str"");
        if (schema != null) {
          String query=(String)mapObject.get(""String_Node_Str"");
          SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
          schemaTargets.add(schemaTarget);
          schemaTarget.setTagName(schema);
          schemaTarget.setRelativeXPathQuery(query);
        }
      }
    }
  }
}","/** 
 * DOC wzhang Comment method ""setXmlFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setXmlFileValue(XmlFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setXmlFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  EList emfSchemaList=connection.getSchema();
  if (emfSchemaList.size() < 1) {
    emfSchemaList.add(ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor());
  }
  XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)emfSchemaList.get(0);
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      xmlDesc.setAbsoluteXPathQuery(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && value.trim().length() > 0) {
      xmlDesc.setLimitBoucle(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null) {
      EList schemaTargets=xmlDesc.getSchemaTargets();
      List<Map<String,Object>> tableInfo=(List<Map<String,Object>>)param.getValue();
      for (      Map<String,Object> mapObject : tableInfo) {
        String schema=(String)mapObject.get(""String_Node_Str"");
        if (schema != null) {
          String query=(String)mapObject.get(""String_Node_Str"");
          SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
          schemaTargets.add(schemaTarget);
          schemaTarget.setTagName(schema);
          schemaTarget.setRelativeXPathQuery(TalendQuoteUtils.removeQuotes(query));
        }
      }
    }
  }
}",0.9925319200192724
129865,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  this.orignalVersion=property.getVersion();
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
  setPageComplete(false);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  setOrignalName(property.getLabel());
  setOrignalDescription(property.getDescription());
  setOrignalpurpose(property.getPurpose());
  setOrignalStatus(property.getStatusCode());
  setOrignalversion(property.getVersion());
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
  setPageComplete(false);
}",0.937658388241257
129866,"@Override public boolean performCancel(){
  docItem.getProperty().setVersion(mainPage.getOrignalVersion());
  return super.performCancel();
}","@Override public boolean performCancel(){
  docItem.getProperty().setLabel(mainPage.getOrignalName());
  docItem.getProperty().setDescription(mainPage.getOrignalDescription());
  docItem.getProperty().setPurpose(mainPage.getOrignalpurpose());
  docItem.getProperty().setStatusCode(mainPage.getOrignalStatus());
  docItem.getProperty().setVersion(mainPage.getOrignalversion());
  return super.performCancel();
}",0.5081669691470054
129867,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.9564283156261192
129868,"/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    String sql=""String_Node_Str"" + name + ""String_Node_Str"";
    Statement sta;
    sta=conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet resultSet=sta.executeQuery(sql);
    while (resultSet.next()) {
      return resultSet.getString(""String_Node_Str"");
    }
    resultSet.close();
    sta.close();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}","/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}",0.9461742698527636
129869,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  this.orignalVersion=property.getVersion();
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
  setPageComplete(false);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  setOrignalName(property.getDisplayName());
  setOrignalDescription(property.getDescription());
  setOrignalpurpose(property.getPurpose());
  setOrignalStatus(property.getStatusCode());
  setOrignalversion(property.getVersion());
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
  setPageComplete(false);
}",0.9362348178137652
129870,"@Override public boolean performCancel(){
  docItem.getProperty().setVersion(mainPage.getOrignalVersion());
  return super.performCancel();
}","@Override public boolean performCancel(){
  docItem.getProperty().setDisplayName(mainPage.getOrignalName());
  docItem.getProperty().setDescription(mainPage.getOrignalDescription());
  docItem.getProperty().setPurpose(mainPage.getOrignalpurpose());
  docItem.getProperty().setStatusCode(mainPage.getOrignalStatus());
  docItem.getProperty().setVersion(mainPage.getOrignalversion());
  return super.performCancel();
}",0.5026929982046678
129871,"/** 
 * DOC wzhang Comment method ""setXmlFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setXmlFileValue(XmlFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setXmlFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  EList emfSchemaList=connection.getSchema();
  if (emfSchemaList.size() < 1) {
    emfSchemaList.add(ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor());
  }
  XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)emfSchemaList.get(0);
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      xmlDesc.setAbsoluteXPathQuery(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && value.trim().length() > 0) {
      xmlDesc.setLimitBoucle(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null) {
      EList schemaTargets=xmlDesc.getSchemaTargets();
      List<Map<String,Object>> tableInfo=(List<Map<String,Object>>)param.getValue();
      for (      Map<String,Object> mapObject : tableInfo) {
        String schema=(String)mapObject.get(""String_Node_Str"");
        if (schema != null) {
          String query=(String)mapObject.get(""String_Node_Str"");
          SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
          schemaTargets.add(schemaTarget);
          schemaTarget.setTagName(schema);
          schemaTarget.setRelativeXPathQuery(query);
        }
      }
    }
  }
}","/** 
 * DOC wzhang Comment method ""setXmlFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setXmlFileValue(XmlFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setXmlFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  EList emfSchemaList=connection.getSchema();
  if (emfSchemaList.size() < 1) {
    emfSchemaList.add(ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor());
  }
  XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)emfSchemaList.get(0);
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      xmlDesc.setAbsoluteXPathQuery(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && value.trim().length() > 0) {
      xmlDesc.setLimitBoucle(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null) {
      EList schemaTargets=xmlDesc.getSchemaTargets();
      List<Map<String,Object>> tableInfo=(List<Map<String,Object>>)param.getValue();
      for (      Map<String,Object> mapObject : tableInfo) {
        String schema=(String)mapObject.get(""String_Node_Str"");
        if (schema != null) {
          String query=(String)mapObject.get(""String_Node_Str"");
          SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
          schemaTargets.add(schemaTarget);
          schemaTarget.setTagName(schema);
          schemaTarget.setRelativeXPathQuery(TalendQuoteUtils.removeQuotes(query));
        }
      }
    }
  }
}",0.9925319200192724
129872,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else       if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForMSSQL(iMetadataConnection,metadataColumns,table,tableName,dbMetaData);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.9564283156261192
129873,"/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    String sql=""String_Node_Str"" + name + ""String_Node_Str"";
    Statement sta;
    sta=conn.createStatement();
    ExtractMetaDataUtils.setQueryStatementTimeout(sta);
    ResultSet resultSet=sta.executeQuery(sql);
    while (resultSet.next()) {
      return resultSet.getString(""String_Node_Str"");
    }
    resultSet.close();
    sta.close();
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}","/** 
 * Retrieves table name by synonym, this method is only for Oracle as we cannot get column informations by metadata in Oracle.
 * @param connection
 * @param name synonym
 * @param tableType
 * @return table name
 */
public static String getTableNameBySynonym(Connection conn,String name){
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        return baseName;
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        String baseName=resultSet.getString(""String_Node_Str"").trim();
        if (baseName.contains(""String_Node_Str"") && baseName.length() > 2) {
          return baseName.substring(baseName.indexOf(""String_Node_Str"") + 2,baseName.length() - 1);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  try {
    if (conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
      String sql=""String_Node_Str"" + name + ""String_Node_Str"";
      Statement sta;
      sta=conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(sta);
      ResultSet resultSet=sta.executeQuery(sql);
      while (resultSet.next()) {
        return resultSet.getString(""String_Node_Str"");
      }
      resultSet.close();
      sta.close();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return null;
}",0.9461742698527636
129874,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")|| iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")) {
        tableName=newNode.getValue();
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.927997927997928
129875,"private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!iMetadataConnection.getSchema().equals(""String_Node_Str"")) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.9915748541801686
129876,"private XPathPrefix getXPathPrefix(String prefix){
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i].getPrefix().equals(prefix)) {
      return values[i];
    }
  }
  return null;
}","private String getXPathPrefix(String prefix){
  if (prefix == null) {
    return ""String_Node_Str"";
  }
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i].getPrefix().equals(prefix)) {
      return values[i].getDisplayName();
    }
  }
  return prefix;
}",0.802158273381295
129877,"@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  xPathPrefixCombo.setReadOnly(isContextMode());
  loopTableEditorView.setReadOnly(isContextMode());
  this.fieldsTableEditorView.setReadOnly(isContextMode());
}","@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  if (isContextMode()) {
    prefixCombo.setBackground(null);
  }
 else {
    prefixCombo.setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  prefixCombo.setEditable(isContextMode());
  loopTableEditorView.setReadOnly(isContextMode());
  this.fieldsTableEditorView.setReadOnly(isContextMode());
}",0.5366614664586583
129878,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      xPathPrefixCombo.select(0);
    }
 else {
      final XPathPrefix xPathPrefix=getXPathPrefix(concept.getXPathPrefix());
      xPathPrefixCombo.setText(xPathPrefix.getDisplayName());
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      prefixCombo.select(1);
      concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
    }
 else {
      prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}",0.9405563689604686
129879,"/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 * @return
 */
@Override protected boolean checkFieldsValue(){
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(false);
  String msg=fieldsTableEditorView.checkColumnNames();
  if (!StringUtils.isEmpty(msg)) {
    updateStatus(IStatus.ERROR,msg);
    return false;
  }
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    if (labelledCheckboxCombo.getCheckbox().getSelection()) {
      if (labelledCheckboxCombo.getText() == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,labelledCheckboxCombo.getLabelText() + Messages.getString(""String_Node_Str""));
        return false;
      }
    }
  }
  previewInformationLabel.setText(""String_Node_Str"");
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
  }
  if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
    previewButton.setEnabled(false);
  }
 else {
    previewButton.setEnabled(true);
  }
  if (concept == null || concept.getConceptTargets().isEmpty()) {
    updateStatus(IStatus.ERROR,null);
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}","/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 * @return
 */
@Override protected boolean checkFieldsValue(){
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(false);
  String msg=fieldsTableEditorView.checkColumnNames();
  if (!StringUtils.isEmpty(msg)) {
    updateStatus(IStatus.ERROR,msg);
    return false;
  }
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    if (labelledCheckboxCombo.getCheckbox().getSelection()) {
      if (labelledCheckboxCombo.getText() == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,labelledCheckboxCombo.getLabelText() + Messages.getString(""String_Node_Str""));
        return false;
      }
    }
  }
  previewInformationLabel.setText(""String_Node_Str"");
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
  }
  if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
    previewButton.setEnabled(false);
  }
 else {
    previewButton.setEnabled(true);
  }
  if (concept == null || concept.getConceptTargets().isEmpty()) {
    updateStatus(IStatus.ERROR,null);
    return false;
  }
  if (""String_Node_Str"".equals(prefixCombo.getText())) {
    updateStatus(IStatus.ERROR,""String_Node_Str"");
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}",0.9612864800476474
129880,"private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  XPathPrefix[] values=XPathPrefix.values();
  String[] xPathPrefixData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    xPathPrefixData[j]=values[j].getDisplayName();
  }
  Composite composite=new Composite(schemaTargetGroup,SWT.NONE);
  final GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  xPathPrefixCombo=new LabelledCombo(composite,""String_Node_Str"",""String_Node_Str"",xPathPrefixData,1,true);
  xPathPrefixCombo.getCombo().setBackground(null);
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}","private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  XPathPrefix[] values=XPathPrefix.values();
  String[] xPathPrefixData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    xPathPrefixData[j]=values[j].getDisplayName();
  }
  Composite composite=new Composite(schemaTargetGroup,SWT.NONE);
  final GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  prefixCombo=new CCombo(composite,SWT.BORDER);
  prefixCombo.setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
  prefixCombo.setItems(xPathPrefixData);
  prefixCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}",0.8232841565105837
129881,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  xPathPrefixCombo.getCombo().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (concept != null) {
        final XPathPrefix xPathPrefixByDisplayName=getXPathPrefixByDisplayName(xPathPrefixCombo.getText());
        if (xPathPrefixByDisplayName != null) {
          concept.setXPathPrefix(xPathPrefixByDisplayName.getPrefix());
        }
      }
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<ConceptTarget>(){
    public void handleEvent(    ModifiedBeanEvent<ConceptTarget> event){
      updateStatus(IStatus.OK,null);
      String msg=fieldsTableEditorView.checkColumnNames();
      if (!StringUtils.isEmpty(msg)) {
        updateStatus(IStatus.ERROR,msg);
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  prefixCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (concept != null) {
        concept.setXPathPrefix(getXPathPrefixByDisplayName(prefixCombo.getText()));
        checkFieldsValue();
      }
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<ConceptTarget>(){
    public void handleEvent(    ModifiedBeanEvent<ConceptTarget> event){
      updateStatus(IStatus.OK,null);
      String msg=fieldsTableEditorView.checkColumnNames();
      if (!StringUtils.isEmpty(msg)) {
        updateStatus(IStatus.ERROR,msg);
      }
    }
  }
);
}",0.75390625
129882,"/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  File file=MDMUtil.getTempTemplateXSDFile();
  xsdFilePath=file.getParentFile().getAbsolutePath();
  if (!file.exists()) {
    try {
      super.initialize();
    }
 catch (    Exception e) {
      isTemplateExist=false;
    }
  }
 else {
    xsdFilePath=file.getAbsolutePath();
  }
  isTemplateExist=true;
  this.treePopulator=new TreePopulator(availableXmlTree);
  checkFieldsValue();
  if (concept == null) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    concept=ConnectionFactory.eINSTANCE.createConcept();
    getConnection().getSchemas().add(concept);
  }
  loopModel.setConcept(concept);
  if (concept.getLoopLimit() == null) {
    concept.setLoopLimit(-1);
    XmlArray.setLimitToDefault();
    concept.setLoopLimit(XmlArray.getRowLimit());
  }
  fieldsModel.setConcept(concept.getConceptTargets());
  fieldsTableEditorView.getTableViewerCreator().layout();
  if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
    xPathPrefixCombo.select(0);
  }
 else {
    final XPathPrefix xPathPrefix=getXPathPrefix(concept.getXPathPrefix());
    xPathPrefixCombo.setText(xPathPrefix.getDisplayName());
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
}","/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  File file=MDMUtil.getTempTemplateXSDFile();
  xsdFilePath=file.getParentFile().getAbsolutePath();
  if (!file.exists()) {
    try {
      super.initialize();
    }
 catch (    Exception e) {
      isTemplateExist=false;
    }
  }
 else {
    xsdFilePath=file.getAbsolutePath();
  }
  isTemplateExist=true;
  this.treePopulator=new TreePopulator(availableXmlTree);
  checkFieldsValue();
  if (concept == null) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    concept=ConnectionFactory.eINSTANCE.createConcept();
    getConnection().getSchemas().add(concept);
  }
  loopModel.setConcept(concept);
  if (concept.getLoopLimit() == null) {
    concept.setLoopLimit(-1);
    XmlArray.setLimitToDefault();
    concept.setLoopLimit(XmlArray.getRowLimit());
  }
  fieldsModel.setConcept(concept.getConceptTargets());
  fieldsTableEditorView.getTableViewerCreator().layout();
  if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
    prefixCombo.select(1);
    concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
  }
 else {
    prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
}",0.8568190404231205
129883,"private XPathPrefix getXPathPrefixByDisplayName(String dispalyName){
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i].getDisplayName().equals(dispalyName)) {
      return values[i];
    }
  }
  return null;
}","private String getXPathPrefixByDisplayName(String dispalyName){
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i] == XPathPrefix.USER_DEFINED_ITEM) {
      continue;
    }
    if (values[i].getDisplayName().equals(dispalyName)) {
      return values[i].getPrefix();
    }
  }
  return dispalyName;
}",0.7968253968253968
129884,"/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}","/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
public static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}",0.967741935483871
129885,"public static boolean isOSX(){
  return Platform.WS_CARBON.equals(ws);
}","public static boolean isOSX(){
  return Platform.WS_CARBON.equals(ws) || Platform.WS_COCOA.equals(ws);
}",0.8181818181818182
129886,"public static void addTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable){
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  DatabaseConnection conn=(DatabaseConnection)imetadataConnection.getCurrentConnection();
  Collection<orgomg.cwm.objectmodel.core.Package> newDataPackage=EcoreUtil.copyAll(dbconn.getDataPackage());
  ConnectionHelper.addPackages(newDataPackage,conn);
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  EObject container=dbtable.eContainer();
  if (container != null) {
    if (container instanceof Schema) {
      schema=((Schema)container).getName();
      EObject c=container.eContainer();
      if (c != null && c instanceof Catalog) {
        catalog=((Catalog)c).getName();
      }
    }
 else     if (container instanceof Catalog) {
      catalog=((Catalog)container).getName();
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
  if (!isAccess) {
    schema=ExtractMetaDataUtils.getMeataConnectionSchema(imetadataConnection);
  }
  addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}","public static void addTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable){
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  DatabaseConnection conn=(DatabaseConnection)imetadataConnection.getCurrentConnection();
  Collection<orgomg.cwm.objectmodel.core.Package> newDataPackage=EcoreUtil.copyAll(dbconn.getDataPackage());
  ConnectionHelper.addPackages(newDataPackage,conn);
  String catalog=imetadataConnection.getDatabase();
  String schema=""String_Node_Str"";
  EObject container=dbtable.eContainer();
  if (container != null) {
    if (container instanceof Schema) {
      schema=((Schema)container).getName();
      EObject c=container.eContainer();
      if (c != null && c instanceof Catalog) {
        catalog=((Catalog)c).getName();
      }
    }
 else     if (container instanceof Catalog) {
      catalog=((Catalog)container).getName();
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
  if (!isAccess) {
    schema=ExtractMetaDataUtils.getMeataConnectionSchema(imetadataConnection);
  }
  addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}",0.979026845637584
129887,"public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_PAT_ITEM_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else {
    return TDQ_PAT_ITEM_PATTERN;
  }
}","public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_PAT_ITEM_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else {
    return TDQ_PAT_ITEM_PATTERN;
  }
}",0.9511002444987776
129888,"private void getReferencedProjectBean(List<IRepositoryViewObject> beans,List projects) throws SystemException {
  if (projects == null || projects.isEmpty()) {
    return;
  }
  IProxyRepositoryFactory repositoryFactory=getRepositoryService().getProxyRepositoryFactory();
  for (  Object obj : projects) {
    Project project=null;
    if (obj instanceof Project) {
      project=(Project)obj;
    }
 else     if (obj instanceof ProjectReference) {
      project=new Project(((ProjectReference)obj).getReferencedProject());
    }
    if (project != null) {
      try {
        beans.addAll(repositoryFactory.getAll(project,ERepositoryObjectType.getTypeFromKey(""String_Node_Str"")));
      }
 catch (      PersistenceException e) {
        throw new SystemException(e);
      }
      getReferencedProjectRoutine(beans,project.getEmfProject().getReferencedProjects());
    }
  }
}","private void getReferencedProjectBean(List<IRepositoryViewObject> beans,List projects) throws SystemException {
  if (projects == null || projects.isEmpty()) {
    return;
  }
  IProxyRepositoryFactory repositoryFactory=getRepositoryService().getProxyRepositoryFactory();
  for (  Object obj : projects) {
    Project project=null;
    if (obj instanceof Project) {
      project=(Project)obj;
    }
 else     if (obj instanceof ProjectReference) {
      project=new Project(((ProjectReference)obj).getReferencedProject());
    }
    if (project != null) {
      try {
        beans.addAll(repositoryFactory.getAll(project,ERepositoryObjectType.getTypeFromKey(""String_Node_Str"")));
      }
 catch (      PersistenceException e) {
        throw new SystemException(e);
      }
      getReferencedProjectBean(beans,project.getEmfProject().getReferencedProjects());
    }
  }
}",0.9937178754997144
129889,"private void getReferencedProjectBean(List<IRepositoryViewObject> beans,List projects) throws SystemException {
  if (projects == null || projects.isEmpty()) {
    return;
  }
  IProxyRepositoryFactory repositoryFactory=getRepositoryService().getProxyRepositoryFactory();
  for (  Object obj : projects) {
    Project project=null;
    if (obj instanceof Project) {
      project=(Project)obj;
    }
 else     if (obj instanceof ProjectReference) {
      project=new Project(((ProjectReference)obj).getReferencedProject());
    }
    if (project != null) {
      try {
        beans.addAll(repositoryFactory.getAll(project,ERepositoryObjectType.getTypeFromKey(""String_Node_Str"")));
      }
 catch (      PersistenceException e) {
        throw new SystemException(e);
      }
      getReferencedProjectRoutine(beans,project.getEmfProject().getReferencedProjects());
    }
  }
}","private void getReferencedProjectBean(List<IRepositoryViewObject> beans,List projects) throws SystemException {
  if (projects == null || projects.isEmpty()) {
    return;
  }
  IProxyRepositoryFactory repositoryFactory=getRepositoryService().getProxyRepositoryFactory();
  for (  Object obj : projects) {
    Project project=null;
    if (obj instanceof Project) {
      project=(Project)obj;
    }
 else     if (obj instanceof ProjectReference) {
      project=new Project(((ProjectReference)obj).getReferencedProject());
    }
    if (project != null) {
      try {
        beans.addAll(repositoryFactory.getAll(project,ERepositoryObjectType.getTypeFromKey(""String_Node_Str"")));
      }
 catch (      PersistenceException e) {
        throw new SystemException(e);
      }
      getReferencedProjectBean(beans,project.getEmfProject().getReferencedProjects());
    }
  }
}",0.9937178754997144
129890,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
  setPageComplete(false);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  this.orignalVersion=property.getVersion();
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
  setPageComplete(false);
}",0.9879064767535608
129891,"public static boolean isOSX(){
  return Platform.WS_CARBON.equals(ws);
}","public static boolean isOSX(){
  return Platform.WS_CARBON.equals(ws) || Platform.WS_COCOA.equals(ws);
}",0.8181818181818182
129892,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}",0.951472015528955
129893,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")|| iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")) {
        tableName=newNode.getValue();
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (ExtractMetaDataUtils.conn.getMetaData().getDatabaseProductName().equals(""String_Node_Str"")) {
        fillSynonmsForDB2(iMetadataConnection,metadataColumns,table,tableName);
      }
 else {
        if (iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLESN.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
          tableName=newNode.getValue();
        }
        newNode.setValue(tableName);
        fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
      }
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.927997927997928
129894,"private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!iMetadataConnection.getSchema().equals(""String_Node_Str"")) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!(""String_Node_Str"").equals(iMetadataConnection.getSchema())) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.9915748541801686
129895,"public Object fromJsonToObject(JSONObject ob,Class<?> clazz) throws JSONException {
  Object o=null;
  try {
    o=clazz.newInstance();
    for (    Field f : clazz.getDeclaredFields()) {
      String name=f.getName();
      String upperName=name.substring(0,1).toUpperCase() + name.substring(1);
      Method m=clazz.getDeclaredMethod(""String_Node_Str"" + upperName,new Class[]{f.getType()});
      Object value=ob.get(name);
      if (f.getType().isAssignableFrom(String.class) && JSONObject.NULL == value)       value=""String_Node_Str"";
      m.invoke(o,value);
    }
  }
 catch (  Exception e) {
    throw new JSONException(e);
  }
  return o;
}","public Object fromJsonToObject(JSONObject ob,Class<?> clazz) throws JSONException {
  Object o=null;
  try {
    o=clazz.newInstance();
    for (    Field f : clazz.getDeclaredFields()) {
      String name=f.getName();
      String upperName=name.substring(0,1).toUpperCase() + name.substring(1);
      try {
        Method m=clazz.getDeclaredMethod(""String_Node_Str"" + upperName,new Class[]{f.getType()});
        Object value=ob.get(name);
        if (f.getType().isAssignableFrom(String.class) && JSONObject.NULL == value)         value=""String_Node_Str"";
        m.invoke(o,value);
      }
 catch (      NoSuchMethodException nsme) {
        log.equals(nsme);
      }
    }
  }
 catch (  Exception e) {
    throw new JSONException(e);
  }
  return o;
}",0.8988603988603988
129896,"protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  orignalVersion2=property.getVersion();
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
      try {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
          IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
          listExistingObjects=service.getProxyRepositoryFactory().getAll(type,true,false);
        }
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  this.property=property;
}","protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
      try {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
          IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
          listExistingObjects=service.getProxyRepositoryFactory().getAll(type,true,false);
        }
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  this.property=property;
}",0.9854351687388988
129897,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  GridData data;
  Label filenameLab=new Label(container,SWT.NONE);
  filenameLab.setText(Messages.getString(""String_Node_Str""));
  Composite filenameContainer=new Composite(container,SWT.NONE);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  filenameContainer.setLayoutData(data);
  GridLayout filenameLayout=new GridLayout(2,false);
  filenameLayout.marginHeight=0;
  filenameLayout.marginWidth=0;
  filenameContainer.setLayout(filenameLayout);
  filenameText=new Text(filenameContainer,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  filenameText.setLayoutData(data);
  this.orignalVersion=property.getVersion();
  super.createControl(container);
  Label originalNameLab=new Label(container,SWT.NONE);
  originalNameLab.setText(Messages.getString(""String_Node_Str""));
  originalFilenameText=new Text(container,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=layout.numColumns - 1;
  originalFilenameText.setLayoutData(data);
  originalFilenameText.setEditable(false);
  originalFilenameText.setEnabled(false);
  Group option=new Group(container,SWT.NONE);
  option.setText(Messages.getString(""String_Node_Str""));
  layout=new GridLayout();
  option.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  option.setLayoutData(data);
  checkLinkBtn=new Button(option,SWT.CHECK);
  checkLinkBtn.setText(Messages.getString(""String_Node_Str""));
  evaluateCheckLinkDoc();
  browseBtn=new Button(filenameContainer,SWT.PUSH);
  switchCheck(false);
  setControl(container);
  updateContent();
  evaluateFields();
  addListeners();
  updatePageComplete();
}",0.9877350776778414
129898,"@Override public boolean performCancel(){
  docItem.getProperty().setVersion(PropertiesWizardPage.orignalVersion2);
  return super.performCancel();
}","@Override public boolean performCancel(){
  docItem.getProperty().setVersion(mainPage.getOrignalVersion());
  return super.performCancel();
}",0.9103448275862068
129899,"/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}","/** 
 * Getter for dbmsSet.
 * @return the dbmsSet
 */
public static Set<Dbms> getDbmsSet(){
  return dbmsSet;
}",0.967741935483871
129900,"protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
      try {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
          IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
          listExistingObjects=service.getProxyRepositoryFactory().getAll(type,true,false);
        }
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  this.property=property;
}","protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  orignalVersion2=property.getVersion();
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      ERepositoryObjectType type=ERepositoryObjectType.getItemType(property.getItem());
      try {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
          IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
          listExistingObjects=service.getProxyRepositoryFactory().getAll(type,true,false);
        }
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  this.property=property;
}",0.9854351687388988
129901,"public Object fromJsonToObject(JSONObject ob,Class<?> clazz) throws JSONException {
  Object o=null;
  try {
    o=clazz.newInstance();
    for (    Field f : clazz.getDeclaredFields()) {
      String name=f.getName();
      String upperName=name.substring(0,1).toUpperCase() + name.substring(1);
      Method m=clazz.getDeclaredMethod(""String_Node_Str"" + upperName,new Class[]{f.getType()});
      Object value=ob.get(name);
      if (f.getType().isAssignableFrom(String.class) && JSONObject.NULL == value)       value=""String_Node_Str"";
      m.invoke(o,value);
    }
  }
 catch (  Exception e) {
    throw new JSONException(e);
  }
  return o;
}","public Object fromJsonToObject(JSONObject ob,Class<?> clazz) throws JSONException {
  Object o=null;
  try {
    o=clazz.newInstance();
    for (    Field f : clazz.getDeclaredFields()) {
      String name=f.getName();
      String upperName=name.substring(0,1).toUpperCase() + name.substring(1);
      try {
        Method m=clazz.getDeclaredMethod(""String_Node_Str"" + upperName,new Class[]{f.getType()});
        Object value=ob.get(name);
        if (f.getType().isAssignableFrom(String.class) && JSONObject.NULL == value)         value=""String_Node_Str"";
        m.invoke(o,value);
      }
 catch (      NoSuchMethodException nsme) {
        log.equals(nsme);
      }
    }
  }
 catch (  Exception e) {
    throw new JSONException(e);
  }
  return o;
}",0.8988603988603988
129902,"public static void addTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable){
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  DatabaseConnection conn=(DatabaseConnection)imetadataConnection.getCurrentConnection();
  Collection<orgomg.cwm.objectmodel.core.Package> newDataPackage=EcoreUtil.copyAll(dbconn.getDataPackage());
  ConnectionHelper.addPackages(newDataPackage,conn);
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  EObject container=dbtable.eContainer();
  if (container != null) {
    if (container instanceof Schema) {
      schema=((Schema)container).getName();
      EObject c=container.eContainer();
      if (c != null && c instanceof Catalog) {
        catalog=((Catalog)c).getName();
      }
    }
 else     if (container instanceof Catalog) {
      catalog=((Catalog)container).getName();
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
  if (!isAccess) {
    schema=ExtractMetaDataUtils.getMeataConnectionSchema(imetadataConnection);
  }
  addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}","public static void addTableForSpecifiedDataPackage(DatabaseConnection dbconn,MetadataTable dbtable){
  IMetadataConnection imetadataConnection=ConvertionHelper.convert(dbconn);
  DatabaseConnection conn=(DatabaseConnection)imetadataConnection.getCurrentConnection();
  Collection<orgomg.cwm.objectmodel.core.Package> newDataPackage=EcoreUtil.copyAll(dbconn.getDataPackage());
  ConnectionHelper.addPackages(newDataPackage,conn);
  String catalog=imetadataConnection.getDatabase();
  String schema=""String_Node_Str"";
  EObject container=dbtable.eContainer();
  if (container != null) {
    if (container instanceof Schema) {
      schema=((Schema)container).getName();
      EObject c=container.eContainer();
      if (c != null && c instanceof Catalog) {
        catalog=((Catalog)c).getName();
      }
    }
 else     if (container instanceof Catalog) {
      catalog=((Catalog)container).getName();
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(imetadataConnection.getDbType());
  if (!isAccess) {
    schema=ExtractMetaDataUtils.getMeataConnectionSchema(imetadataConnection);
  }
  addTableForTemCatalogOrSchema(catalog,schema,dbconn,dbtable,imetadataConnection);
}",0.979026845637584
129903,"public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_PAT_ITEM_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else {
    return TDQ_PAT_ITEM_PATTERN;
  }
}","public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_PAT_ITEM_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else {
    return TDQ_PAT_ITEM_PATTERN;
  }
}",0.9511002444987776
129904,"private XPathPrefix getXPathPrefix(String prefix){
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i].getPrefix().equals(prefix)) {
      return values[i];
    }
  }
  return null;
}","private String getXPathPrefix(String prefix){
  if (prefix == null) {
    return ""String_Node_Str"";
  }
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i].getPrefix().equals(prefix)) {
      return values[i].getDisplayName();
    }
  }
  return prefix;
}",0.802158273381295
129905,"@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  xPathPrefixCombo.setReadOnly(isContextMode());
  loopTableEditorView.setReadOnly(isContextMode());
  this.fieldsTableEditorView.setReadOnly(isContextMode());
}","@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  if (isContextMode()) {
    prefixCombo.setBackground(null);
  }
 else {
    prefixCombo.setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  prefixCombo.setEditable(isContextMode());
  loopTableEditorView.setReadOnly(isContextMode());
  this.fieldsTableEditorView.setReadOnly(isContextMode());
}",0.5366614664586583
129906,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      xPathPrefixCombo.select(0);
    }
 else {
      final XPathPrefix xPathPrefix=getXPathPrefix(concept.getXPathPrefix());
      xPathPrefixCombo.setText(xPathPrefix.getDisplayName());
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    if (this.linker != null) {
      this.linker.removeAllLinks();
    }
    if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
      prefixCombo.select(1);
      concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
    }
 else {
      prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
    }
    String selectedEntity=null;
    if (wizardPage != null && wizardPage.getPreviousPage() instanceof MdmConceptWizardPage2) {
      selectedEntity=((MdmConceptWizardPage2)wizardPage.getPreviousPage()).getSelectedEntity();
    }
    this.treePopulator.populateTree(xsdFilePath,treeNode,selectedEntity);
    ScrollBar verticalBar=availableXmlTree.getVerticalBar();
    if (verticalBar != null) {
      verticalBar.setSelection(0);
    }
    resetStatusIfNecessary(selectedEntity);
    if (this.linker == null) {
      this.linker=new MDMLinker(this.xmlToSchemaSash,isTemplateExist);
      this.linker.init(availableXmlTree,loopTableEditorView,fieldsTableEditorView,treePopulator);
      loopTableEditorView.setLinker(this.linker);
      fieldsTableEditorView.setLinker(this.linker);
    }
 else {
      this.linker.init(treePopulator);
      this.linker.createLinks();
    }
    checkFilePathAndManageIt();
    if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
      previewButton.setEnabled(false);
      previewButton.setText(Messages.getString(""String_Node_Str""));
      previewButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      previewButton.getParent().layout();
    }
    if (isContextMode()) {
      adaptFormToEditable();
    }
  }
}",0.9405563689604686
129907,"/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 * @return
 */
@Override protected boolean checkFieldsValue(){
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(false);
  String msg=fieldsTableEditorView.checkColumnNames();
  if (!StringUtils.isEmpty(msg)) {
    updateStatus(IStatus.ERROR,msg);
    return false;
  }
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    if (labelledCheckboxCombo.getCheckbox().getSelection()) {
      if (labelledCheckboxCombo.getText() == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,labelledCheckboxCombo.getLabelText() + Messages.getString(""String_Node_Str""));
        return false;
      }
    }
  }
  previewInformationLabel.setText(""String_Node_Str"");
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
  }
  if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
    previewButton.setEnabled(false);
  }
 else {
    previewButton.setEnabled(true);
  }
  if (concept == null || concept.getConceptTargets().isEmpty()) {
    updateStatus(IStatus.ERROR,null);
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}","/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 * @return
 */
@Override protected boolean checkFieldsValue(){
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(false);
  String msg=fieldsTableEditorView.checkColumnNames();
  if (!StringUtils.isEmpty(msg)) {
    updateStatus(IStatus.ERROR,msg);
    return false;
  }
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    if (labelledCheckboxCombo.getCheckbox().getSelection()) {
      if (labelledCheckboxCombo.getText() == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,labelledCheckboxCombo.getLabelText() + Messages.getString(""String_Node_Str""));
        return false;
      }
    }
  }
  previewInformationLabel.setText(""String_Node_Str"");
  if (isContextMode()) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
  }
  if (xsdFilePath != null && XmlUtil.isXSDFile(xsdFilePath)) {
    previewButton.setEnabled(false);
  }
 else {
    previewButton.setEnabled(true);
  }
  if (concept == null || concept.getConceptTargets().isEmpty()) {
    updateStatus(IStatus.ERROR,null);
    return false;
  }
  if (""String_Node_Str"".equals(prefixCombo.getText())) {
    updateStatus(IStatus.ERROR,""String_Node_Str"");
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}",0.9612864800476474
129908,"private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  XPathPrefix[] values=XPathPrefix.values();
  String[] xPathPrefixData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    xPathPrefixData[j]=values[j].getDisplayName();
  }
  Composite composite=new Composite(schemaTargetGroup,SWT.NONE);
  final GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  xPathPrefixCombo=new LabelledCombo(composite,""String_Node_Str"",""String_Node_Str"",xPathPrefixData,1,true);
  xPathPrefixCombo.getCombo().setBackground(null);
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}","private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  XPathPrefix[] values=XPathPrefix.values();
  String[] xPathPrefixData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    xPathPrefixData[j]=values[j].getDisplayName();
  }
  Composite composite=new Composite(schemaTargetGroup,SWT.NONE);
  final GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label label=new Label(composite,SWT.NONE);
  label.setText(""String_Node_Str"");
  prefixCombo=new CCombo(composite,SWT.BORDER);
  prefixCombo.setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
  prefixCombo.setItems(xPathPrefixData);
  prefixCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}",0.8232841565105837
129909,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  xPathPrefixCombo.getCombo().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (concept != null) {
        final XPathPrefix xPathPrefixByDisplayName=getXPathPrefixByDisplayName(xPathPrefixCombo.getText());
        if (xPathPrefixByDisplayName != null) {
          concept.setXPathPrefix(xPathPrefixByDisplayName.getPrefix());
        }
      }
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<ConceptTarget>(){
    public void handleEvent(    ModifiedBeanEvent<ConceptTarget> event){
      updateStatus(IStatus.OK,null);
      String msg=fieldsTableEditorView.checkColumnNames();
      if (!StringUtils.isEmpty(msg)) {
        updateStatus(IStatus.ERROR,msg);
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  prefixCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (concept != null) {
        concept.setXPathPrefix(getXPathPrefixByDisplayName(prefixCombo.getText()));
        checkFieldsValue();
      }
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    public void handleEvent(    ListenableListEvent event){
      checkFieldsValue();
    }
  }
);
  fieldsTableEditorView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<ConceptTarget>(){
    public void handleEvent(    ModifiedBeanEvent<ConceptTarget> event){
      updateStatus(IStatus.OK,null);
      String msg=fieldsTableEditorView.checkColumnNames();
      if (!StringUtils.isEmpty(msg)) {
        updateStatus(IStatus.ERROR,msg);
      }
    }
  }
);
}",0.75390625
129910,"/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  File file=MDMUtil.getTempTemplateXSDFile();
  xsdFilePath=file.getParentFile().getAbsolutePath();
  if (!file.exists()) {
    try {
      super.initialize();
    }
 catch (    Exception e) {
      isTemplateExist=false;
    }
  }
 else {
    xsdFilePath=file.getAbsolutePath();
  }
  isTemplateExist=true;
  this.treePopulator=new TreePopulator(availableXmlTree);
  checkFieldsValue();
  if (concept == null) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    concept=ConnectionFactory.eINSTANCE.createConcept();
    getConnection().getSchemas().add(concept);
  }
  loopModel.setConcept(concept);
  if (concept.getLoopLimit() == null) {
    concept.setLoopLimit(-1);
    XmlArray.setLimitToDefault();
    concept.setLoopLimit(XmlArray.getRowLimit());
  }
  fieldsModel.setConcept(concept.getConceptTargets());
  fieldsTableEditorView.getTableViewerCreator().layout();
  if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
    xPathPrefixCombo.select(0);
  }
 else {
    final XPathPrefix xPathPrefix=getXPathPrefix(concept.getXPathPrefix());
    xPathPrefixCombo.setText(xPathPrefix.getDisplayName());
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
}","/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  File file=MDMUtil.getTempTemplateXSDFile();
  xsdFilePath=file.getParentFile().getAbsolutePath();
  if (!file.exists()) {
    try {
      super.initialize();
    }
 catch (    Exception e) {
      isTemplateExist=false;
    }
  }
 else {
    xsdFilePath=file.getAbsolutePath();
  }
  isTemplateExist=true;
  this.treePopulator=new TreePopulator(availableXmlTree);
  checkFieldsValue();
  if (concept == null) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    concept=ConnectionFactory.eINSTANCE.createConcept();
    getConnection().getSchemas().add(concept);
  }
  loopModel.setConcept(concept);
  if (concept.getLoopLimit() == null) {
    concept.setLoopLimit(-1);
    XmlArray.setLimitToDefault();
    concept.setLoopLimit(XmlArray.getRowLimit());
  }
  fieldsModel.setConcept(concept.getConceptTargets());
  fieldsTableEditorView.getTableViewerCreator().layout();
  if (concept.getXPathPrefix() == null || ""String_Node_Str"".equals(concept.getXPathPrefix())) {
    prefixCombo.select(1);
    concept.setXPathPrefix(XPathPrefix.NONE_ITEM.getPrefix());
  }
 else {
    prefixCombo.setText(getXPathPrefix(concept.getXPathPrefix()));
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
}",0.8568190404231205
129911,"private XPathPrefix getXPathPrefixByDisplayName(String dispalyName){
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i].getDisplayName().equals(dispalyName)) {
      return values[i];
    }
  }
  return null;
}","private String getXPathPrefixByDisplayName(String dispalyName){
  final XPathPrefix[] values=XPathPrefix.values();
  for (int i=0; i < values.length; i++) {
    if (values[i] == XPathPrefix.USER_DEFINED_ITEM) {
      continue;
    }
    if (values[i].getDisplayName().equals(dispalyName)) {
      return values[i].getPrefix();
    }
  }
  return dispalyName;
}",0.7968253968253968
129912,"public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType);","/** 
 * if true, will add this component to list; if false, will ignore it.
 */
public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType);",0.7660818713450293
129913,"public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    return Collections.emptyList();
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  for (  IComponent component : components) {
    for (    RepositoryComponentDndFilterSetting dndFilter : getDndFilterSettings()) {
      IRepositoryComponentDndFilter filter=dndFilter.getFilter();
      if (filter == null) {
        continue;
      }
      String repositoryType=filter.getRepositoryType(item,type);
      if (repositoryType == null) {
        continue;
      }
      if (filter.valid(item,type,seletetedNode,component,repositoryType) && !neededComponents.contains(component)) {
        neededComponents.add(component);
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}","public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    return Collections.emptyList();
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  List<IComponent> exceptedComponents=new ArrayList<IComponent>();
  for (  IComponent component : components) {
    for (    RepositoryComponentDndFilterSetting dndFilter : getDndFilterSettings()) {
      IRepositoryComponentDndFilter filter=dndFilter.getFilter();
      if (filter == null) {
        continue;
      }
      String repositoryType=filter.getRepositoryType(item,type);
      if (repositoryType == null) {
        continue;
      }
      if (!exceptedComponents.contains(component) && filter.except(item,type,seletetedNode,component,repositoryType)) {
        exceptedComponents.add(component);
      }
      if (!exceptedComponents.contains(component) && !neededComponents.contains(component) && filter.valid(item,type,seletetedNode,component,repositoryType)) {
        neededComponents.add(component);
      }
    }
  }
  neededComponents.removeAll(exceptedComponents);
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}",0.8012162675788673
129914,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}",0.9681630054122892
129915,"private static boolean isContextMode(Connection connection,String value){
  if (connection == null || value == null) {
    return false;
  }
  if (connection.isContextMode() && ContextParameterUtils.isContainContextParam(value)) {
    return true;
  }
  return false;
}","private static boolean isContextMode(Connection connection,String value){
  if (connection == null || value == null) {
    return false;
  }
  if (!(connection.isContextMode() && ContextParameterUtils.isContainContextParam(value))) {
    return true;
  }
  return false;
}",0.9944547134935304
129916,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")|| iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")) {
        tableName=newNode.getValue();
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.9518405756988652
129917,"private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!iMetadataConnection.getSchema().equals(""String_Node_Str"")) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.9738899052053884
129918,"public Object[] getElements(Object inputElement){
  List list=(List)inputElement;
  return list.toArray();
}","public Object[] getElements(Object inputElement){
  List list=(List)inputElement;
  if (list != null && list.size() == 1) {
    Object obj=list.get(0);
    if (obj instanceof TableNode) {
      TableNode node=(TableNode)obj;
      if (node.getType() == TableNode.SCHEMA && ""String_Node_Str"".equals(node.getValue())) {
        return getChildren(node);
      }
    }
  }
  return list.toArray();
}",0.373015873015873
129919,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    java.sql.Connection sqlConnection=dbJDBCMetadata.getConnection();
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
        }
 else {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
        decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
 else {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
        }
 else {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
        decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
 else {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9834638816362054
129920,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9839562917353222
129921,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    String sid=((DatabaseConnection)dbConn).getSID();
    if (sid != null && sid.length() > 0) {
      schemaFilter.add(sid);
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"");
    return null;
  }
  try {
    if (schemas != null) {
      boolean hasSchema=false;
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
      if (!hasSchema) {
        Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
        returnSchemas.add(schema);
      }
      Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
      if (dbConn != null) {
        tableSet.addAll(ConnectionHelper.getTables(dbConn));
      }
      List<Schema> oldSchemas=new ArrayList<Schema>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
          oldSchemas.add((Schema)eContainer);
        }
      }
      if (isLinked() && !returnSchemas.isEmpty()) {
        ConnectionHelper.addSchemas(returnSchemas,dbConn);
      }
      for (      Schema schema : oldSchemas) {
        List<Schema> list=new ArrayList<Schema>();
        String name=schema.getName();
        Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
        if (s != null) {
          list.add(s);
          ConnectionHelper.removeSchemas(list,dbConn);
          ConnectionHelper.addSchema(schema,dbConn);
        }
 else {
          ConnectionHelper.addSchema(schema,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    String sid=((DatabaseConnection)dbConn).getSID();
    if (sid != null && sid.length() > 0) {
      schemaFilter.add(sid);
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.6570680628272252
129922,"public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(catalogName);
  catalogAndSchema.add(schemaName);
  return catalogAndSchema;
}","public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(catalogName);
  catalogAndSchema.add(""String_Node_Str"".equals(schemaName) ? null : schemaName);
  return catalogAndSchema;
}",0.9913889928865594
129923,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}",0.9955348476024072
129924,"private static boolean isContextMode(Connection connection,String value){
  if (connection == null || value == null) {
    return false;
  }
  if (!(connection.isContextMode() && ContextParameterUtils.isContainContextParam(value))) {
    return true;
  }
  return false;
}","private static boolean isContextMode(Connection connection,String value){
  if (connection == null || value == null) {
    return false;
  }
  if (connection.isContextMode() && ContextParameterUtils.isContainContextParam(value)) {
    return true;
  }
  return false;
}",0.9944547134935304
129925,"/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @param fullSchemaTargetList
 * @return
 */
public static String extractColumnName(String currentExpr,List<SchemaTarget> fullSchemaTargetList){
  String columnName=currentExpr.replaceAll(""String_Node_Str"",""String_Node_Str"");
  UniqueStringGenerator<SchemaTarget> uniqueStringGenerator=new UniqueStringGenerator<SchemaTarget>(columnName,fullSchemaTargetList){
    @Override protected String getBeanString(    SchemaTarget bean){
      return bean.getTagName();
    }
  }
;
  columnName=uniqueStringGenerator.getUniqueString();
  return columnName;
}","/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @param fullSchemaTargetList
 * @return
 */
public static String extractColumnName(String currentExpr,List<SchemaTarget> fullSchemaTargetList){
  String columnName=currentExpr.startsWith(""String_Node_Str"") ? currentExpr.substring(1) : currentExpr;
  columnName=columnName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  UniqueStringGenerator<SchemaTarget> uniqueStringGenerator=new UniqueStringGenerator<SchemaTarget>(columnName,fullSchemaTargetList){
    @Override protected String getBeanString(    SchemaTarget bean){
      return bean.getTagName();
    }
  }
;
  columnName=uniqueStringGenerator.getUniqueString();
  return columnName;
}",0.9326788218793828
129926,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    java.sql.Connection sqlConnection=dbJDBCMetadata.getConnection();
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
        }
 else {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
        decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
 else {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
        }
 else {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
        column.setLength(column_size);
        decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (!(dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata)) {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
 else {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9834638816362054
129927,"public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(catalogName);
  catalogAndSchema.add(schemaName);
  return catalogAndSchema;
}","public static List<String> getTableCatalogAndSchema(DatabaseConnection dbConnection,String tableName){
  String catalogName=null;
  String schemaName=null;
  List<String> catalogAndSchema=new ArrayList<String>();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbConnection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(dbConnection);
    if (schemas.isEmpty()) {
    }
 else {
      for (      Schema s : schemas) {
        EList<ModelElement> ownedElement=null;
        if (s != null) {
          ownedElement=s.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  schemaName=s.getName();
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      EList<ModelElement> ownedElement=null;
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        if (c != null) {
          ownedElement=c.getOwnedElement();
          if (ownedElement != null) {
            for (            ModelElement m : ownedElement) {
              if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                if (label.equals(tableName)) {
                  catalogName=c.getName();
                  break;
                }
              }
            }
          }
        }
      }
 else {
        for (        Schema s : schemas) {
          if (s != null) {
            ownedElement=s.getOwnedElement();
            if (ownedElement != null) {
              for (              ModelElement m : ownedElement) {
                if (m instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
                  String label=((org.talend.core.model.metadata.builder.connection.MetadataTable)m).getLabel();
                  if (label.equals(tableName)) {
                    catalogName=c.getName();
                    schemaName=s.getName();
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  catalogAndSchema.add(catalogName);
  catalogAndSchema.add(""String_Node_Str"".equals(schemaName) ? null : schemaName);
  return catalogAndSchema;
}",0.9913889928865594
129928,"/** 
 * DOC cantoine. Method to return a Collection of Tables for a DB connection.
 * @param DatabaseMetaData dbMetaData
 * @return Collection of MetadataTable
 */
public static List<IMetadataTable> extractTablesFromDB(DatabaseMetaData dbMetaData,IMetadataConnection iMetadataConnection,int... limit){
  String schema=iMetadataConnection.getSchema();
  final boolean as400=EDatabaseTypeName.AS400.getProduct().equals(iMetadataConnection.getProduct());
  if (schema == null || ""String_Node_Str"".equals(schema)) {
    if (EDatabaseTypeName.TERADATA.getProduct().equals(iMetadataConnection.getProduct())) {
      schema=iMetadataConnection.getDatabase();
    }
 else     if (EDatabaseTypeName.IBMDB2.getProduct().equals(iMetadataConnection.getProduct())) {
      String username=iMetadataConnection.getUsername();
      if (username != null) {
        schema=username.toUpperCase();
        iMetadataConnection.setSchema(schema);
      }
    }
 else     if (as400) {
      schema=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataConnection.getUrl());
    }
  }
  if (dbMetaData.equals(oldMetadata) && schema.equals(oldSchema) && limit.equals(oldLimit)&& (oldUseAllSynonyms == ExtractMetaDataUtils.isUseAllSynonyms())) {
    return oldMetadataRetrieved;
  }
  List<String> tablesToFilter=new ArrayList<String>();
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(iMetadataConnection.getProduct())) {
    Statement stmt;
    try {
      stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      if (iMetadataConnection.getDbVersionString() != null && !iMetadataConnection.getDbVersionString().equals(""String_Node_Str"")) {
        ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
        tablesToFilter=getTableNamesFromQuery(rsTables);
        rsTables.close();
      }
      stmt.close();
    }
 catch (    SQLException e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    ExtractMetaDataUtils.setUseAllSynonyms(false);
  }
  List<IMetadataTable> medataTables=new ArrayList<IMetadataTable>();
  try {
    ResultSet rsTables=null, rsTableTypes=null;
    if (!ExtractMetaDataUtils.isUseAllSynonyms()) {
      rsTableTypes=dbMetaData.getTableTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      String[] neededTableTypes={ETableTypes.TABLETYPE_TABLE.getName(),ETableTypes.TABLETYPE_VIEW.getName(),ETableTypes.TABLETYPE_SYNONYM.getName()};
      while (rsTableTypes.next()) {
        String currentTableType=StringUtils.trimToEmpty(rsTableTypes.getString(""String_Node_Str""));
        if (""String_Node_Str"".equalsIgnoreCase(currentTableType)) {
          currentTableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (ArrayUtils.contains(neededTableTypes,currentTableType)) {
          availableTableTypes.add(currentTableType);
        }
      }
      rsTableTypes.close();
      if (dbMetaData.supportsSchemasInTableDefinitions() && schema != null && !schema.equals(""String_Node_Str"")) {
        if (as400) {
          String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(schema);
          if (multiSchems != null) {
            for (            String s : multiSchems) {
              rsTables=dbMetaData.getTables(null,s.trim(),null,availableTableTypes.toArray(new String[]{}));
              getMetadataTables(medataTables,rsTables,dbMetaData.supportsSchemasInTableDefinitions(),tablesToFilter,limit);
              rsTables.close();
            }
            rsTables=null;
          }
        }
 else {
          rsTables=dbMetaData.getTables(null,schema,null,availableTableTypes.toArray(new String[]{}));
        }
      }
 else       if (schema != null && !schema.equals(""String_Node_Str"")) {
        rsTables=dbMetaData.getTables(null,schema,null,availableTableTypes.toArray(new String[]{}));
      }
 else {
        rsTables=dbMetaData.getTables(null,null,null,availableTableTypes.toArray(new String[]{}));
      }
    }
 else {
      String sql=GET_ALL_SYNONYMS;
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      rsTables=stmt.executeQuery(sql);
    }
    if (rsTables != null) {
      getMetadataTables(medataTables,rsTables,dbMetaData.supportsSchemasInTableDefinitions(),tablesToFilter,limit);
      rsTables.close();
    }
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  oldMetadata=dbMetaData;
  oldSchema=schema;
  oldLimit=limit;
  oldUseAllSynonyms=ExtractMetaDataUtils.isUseAllSynonyms();
  oldMetadataRetrieved=medataTables;
  return medataTables;
}","/** 
 * DOC cantoine. Method to return a Collection of Tables for a DB connection.
 * @param DatabaseMetaData dbMetaData
 * @return Collection of MetadataTable
 */
public static List<IMetadataTable> extractTablesFromDB(DatabaseMetaData dbMetaData,IMetadataConnection iMetadataConnection,int... limit){
  String schema=iMetadataConnection.getSchema();
  final boolean as400=EDatabaseTypeName.AS400.getProduct().equals(iMetadataConnection.getProduct());
  if (schema == null || ""String_Node_Str"".equals(schema)) {
    if (EDatabaseTypeName.TERADATA.getProduct().equals(iMetadataConnection.getProduct())) {
      schema=iMetadataConnection.getDatabase();
    }
 else     if (EDatabaseTypeName.IBMDB2.getProduct().equals(iMetadataConnection.getProduct())) {
      String username=iMetadataConnection.getUsername();
      if (username != null) {
        schema=username.toUpperCase();
        iMetadataConnection.setSchema(schema);
      }
    }
 else     if (as400) {
      schema=ExtractMetaDataUtils.retrieveSchemaPatternForAS400(iMetadataConnection.getUrl());
    }
  }
  if (dbMetaData.equals(oldMetadata) && schema.equals(oldSchema) && limit.equals(oldLimit)&& (oldUseAllSynonyms == ExtractMetaDataUtils.isUseAllSynonyms())) {
    return oldMetadataRetrieved;
  }
  List<String> tablesToFilter=new ArrayList<String>();
  if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(iMetadataConnection.getDbType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(iMetadataConnection.getDbType()) || EDatabaseTypeName.ORACLE_RAC.getDisplayName().equals(iMetadataConnection.getDbType())|| EDatabaseTypeName.ORACLE_OCI.getDisplayName().equals(iMetadataConnection.getDbType())) {
    Statement stmt;
    try {
      stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      if (iMetadataConnection.getDbVersionString() != null && !iMetadataConnection.getDbVersionString().equals(""String_Node_Str"")) {
        ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
        tablesToFilter=getTableNamesFromQuery(rsTables);
        rsTables.close();
      }
      stmt.close();
    }
 catch (    SQLException e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    ExtractMetaDataUtils.setUseAllSynonyms(false);
  }
  List<IMetadataTable> medataTables=new ArrayList<IMetadataTable>();
  try {
    ResultSet rsTables=null, rsTableTypes=null;
    if (!ExtractMetaDataUtils.isUseAllSynonyms()) {
      rsTableTypes=dbMetaData.getTableTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      String[] neededTableTypes={ETableTypes.TABLETYPE_TABLE.getName(),ETableTypes.TABLETYPE_VIEW.getName(),ETableTypes.TABLETYPE_SYNONYM.getName()};
      while (rsTableTypes.next()) {
        String currentTableType=StringUtils.trimToEmpty(rsTableTypes.getString(""String_Node_Str""));
        if (""String_Node_Str"".equalsIgnoreCase(currentTableType)) {
          currentTableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (ArrayUtils.contains(neededTableTypes,currentTableType)) {
          availableTableTypes.add(currentTableType);
        }
      }
      rsTableTypes.close();
      if (dbMetaData.supportsSchemasInTableDefinitions() && schema != null && !schema.equals(""String_Node_Str"")) {
        if (as400) {
          String[] multiSchems=ExtractMetaDataUtils.getMultiSchems(schema);
          if (multiSchems != null) {
            for (            String s : multiSchems) {
              rsTables=dbMetaData.getTables(null,s.trim(),null,availableTableTypes.toArray(new String[]{}));
              getMetadataTables(medataTables,rsTables,dbMetaData.supportsSchemasInTableDefinitions(),tablesToFilter,limit);
              rsTables.close();
            }
            rsTables=null;
          }
        }
 else {
          rsTables=dbMetaData.getTables(null,schema,null,availableTableTypes.toArray(new String[]{}));
        }
      }
 else       if (schema != null && !schema.equals(""String_Node_Str"")) {
        rsTables=dbMetaData.getTables(null,schema,null,availableTableTypes.toArray(new String[]{}));
      }
 else {
        rsTables=dbMetaData.getTables(null,null,null,availableTableTypes.toArray(new String[]{}));
      }
    }
 else {
      String sql=GET_ALL_SYNONYMS;
      Statement stmt=ExtractMetaDataUtils.conn.createStatement();
      ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
      rsTables=stmt.executeQuery(sql);
    }
    if (rsTables != null) {
      getMetadataTables(medataTables,rsTables,dbMetaData.supportsSchemasInTableDefinitions(),tablesToFilter,limit);
      rsTables.close();
    }
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  oldMetadata=dbMetaData;
  oldSchema=schema;
  oldLimit=limit;
  oldUseAllSynonyms=ExtractMetaDataUtils.isUseAllSynonyms();
  oldMetadataRetrieved=medataTables;
  return medataTables;
}",0.9701809360153644
129929,"/** 
 * DOC qiang.zhang Comment method ""returnMetaTablesFormConnection"".
 * @param iMetadataConnection
 * @return
 */
public static List<org.talend.core.model.metadata.builder.connection.MetadataTable> returnMetaTablesFormConnection(IMetadataConnection iMetadataConnection){
  List<org.talend.core.model.metadata.builder.connection.MetadataTable> itemTablesName=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataTable>();
  List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
  DriverShim wapperDriver=null;
  if (list != null && list.size() > 0) {
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)list.get(i);
      }
    }
  }
  String dbType=iMetadataConnection.getDbType();
  DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
  List<IMetadataTable> metadataTables=ExtractMetaDataFromDataBase.extractTablesFromDB(dbMetaData,iMetadataConnection);
  ExtractMetaDataUtils.closeConnection();
  if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
    try {
      wapperDriver.connect(""String_Node_Str"",null);
    }
 catch (    SQLException e) {
    }
  }
  Iterator<IMetadataTable> iterate=metadataTables.iterator();
  while (iterate.hasNext()) {
    IMetadataTable metadataTable=iterate.next();
    itemTablesName.add(ConvertionHelper.convert(metadataTable));
  }
  return itemTablesName;
}","public static List<org.talend.core.model.metadata.builder.connection.MetadataTable> returnMetaTablesFormConnection(IMetadataConnection iMetadataConnection){
  return returnMetaTablesFormConnection(iMetadataConnection,-1);
}",0.1441821247892074
129930,"/** 
 * DOC qzhang Comment method ""getMetadataTables"".
 * @param medataTables
 * @param rsTables
 * @throws SQLException
 */
private static void getMetadataTables(List<IMetadataTable> medataTables,ResultSet rsTables,boolean supportSchema,List<String> tablesToFilter,int... limit) throws SQLException {
  if (rsTables == null) {
    return;
  }
  int limitNum=-1;
  long index=0;
  if (limit != null && limit.length > 0) {
    limitNum=limit[0];
  }
  while (rsTables.next()) {
    boolean isSynonym=false;
    MetadataTable medataTable=new MetadataTable();
    medataTable.setId(medataTables.size() + 1 + ""String_Node_Str"");
    String tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,3);
    }
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
      isSynonym=true;
    }
    if (tableName == null || tablesToFilter.contains(tableName)) {
      continue;
    }
    medataTable.setLabel(tableName);
    medataTable.setTableName(medataTable.getLabel());
    medataTable.setComment(ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null));
    String schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
    if (schema == null) {
      schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,2);
    }
    if (supportSchema && schema != null) {
      tableSchemaMap.put(medataTable.getLabel(),schema);
    }
    String tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
    if (tableType == null) {
      tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,4);
    }
    if (""String_Node_Str"".equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_TABLE.getName();
    }
    if (""String_Node_Str"".equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_VIEW.getName();
    }
    if (isSynonym) {
      tableType=""String_Node_Str"";
    }
    try {
      tableTypeMap.put(medataTable.getLabel(),tableType);
    }
 catch (    Exception e) {
      tableTypeMap.put(medataTable.getLabel(),""String_Node_Str"");
    }
    medataTables.add(medataTable);
    index++;
    if (limitNum > 0 && index > limitNum) {
      break;
    }
  }
}","/** 
 * DOC qzhang Comment method ""getMetadataTables"".
 * @param medataTables
 * @param rsTables
 * @throws SQLException
 */
private static void getMetadataTables(List<IMetadataTable> medataTables,ResultSet rsTables,boolean supportSchema,List<String> tablesToFilter,int... limit) throws SQLException {
  if (rsTables == null) {
    return;
  }
  int limitNum=-1;
  long index=0;
  if (limit != null && limit.length > 0) {
    limitNum=limit[0];
  }
  while (rsTables.next()) {
    boolean isSynonym=false;
    MetadataTable medataTable=new MetadataTable();
    medataTable.setId(medataTables.size() + 1 + ""String_Node_Str"");
    String tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,3);
    }
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
      isSynonym=true;
    }
    if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
      continue;
    }
    medataTable.setLabel(tableName);
    medataTable.setTableName(medataTable.getLabel());
    medataTable.setComment(ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null));
    String schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
    if (schema == null) {
      schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,2);
    }
    if (supportSchema && schema != null) {
      tableSchemaMap.put(medataTable.getLabel(),schema);
    }
    String tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,""String_Node_Str"",null);
    if (tableType == null) {
      tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,4);
    }
    if (""String_Node_Str"".equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_TABLE.getName();
    }
    if (""String_Node_Str"".equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_VIEW.getName();
    }
    if (isSynonym) {
      tableType=""String_Node_Str"";
    }
    try {
      tableTypeMap.put(medataTable.getLabel(),tableType);
    }
 catch (    Exception e) {
      tableTypeMap.put(medataTable.getLabel(),""String_Node_Str"");
    }
    medataTables.add(medataTable);
    index++;
    if (limitNum > 0 && index > limitNum) {
      break;
    }
  }
}",0.9908878999788092
129931,"public Object[] getElements(Object inputElement){
  List list=(List)inputElement;
  return list.toArray();
}","public Object[] getElements(Object inputElement){
  List list=(List)inputElement;
  if (list != null && list.size() == 1) {
    Object obj=list.get(0);
    if (obj instanceof TableNode) {
      TableNode node=(TableNode)obj;
      if (node.getType() == TableNode.SCHEMA && ""String_Node_Str"".equals(node.getValue())) {
        return getChildren(node);
      }
    }
  }
  return list.toArray();
}",0.373015873015873
129932,"public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}","public List<MetadataTable> fillAll(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<MetadataTable> list=new ArrayList<MetadataTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=""String_Node_Str"".equals(catalogOrSchema.getName()) ? null : catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    String productName=dbJDBCMetadata.getDatabaseProductName();
    boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
    while (tables.next()) {
      String tableSchema=null;
      if (schemaPattern != null) {
        tableSchema=tables.getString(GetTable.TABLE_SCHEM.name());
      }
 else {
        tableSchema=""String_Node_Str"";
      }
      String tableName=tables.getString(GetTable.TABLE_NAME.name());
      String temptableType=tables.getString(GetTable.TABLE_TYPE.name());
      if (temptableType != null) {
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_TABLE.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_VIEW.getName();
        }
        if (""String_Node_Str"".equals(temptableType)) {
          temptableType=ETableTypes.TABLETYPE_ALIAS.getName();
        }
      }
      if (!filterMetadaElement(tableFilter,tableName)) {
        continue;
      }
      String tableOwner=null;
      if (!isHive && MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
        tableOwner=tableSchema;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=tables.getString(GetTable.REMARKS.name());
        if (StringUtils.isBlank(tableComment)) {
          String selectRemarkOnTable=MetadataConnectionUtils.getCommonQueryStr(productName,tableName);
          if (selectRemarkOnTable != null) {
            tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
          }
        }
      }
      MetadataTable metadatatable=null;
      if (TableType.VIEW.toString().equals(temptableType)) {
        metadatatable=RelationalFactory.eINSTANCE.createTdView();
      }
 else {
        metadatatable=RelationalFactory.eINSTANCE.createTdTable();
      }
      metadatatable.setName(tableName);
      metadatatable.setTableType(temptableType);
      metadatatable.setLabel(metadatatable.getName());
      if (tableOwner != null) {
        ColumnSetHelper.setTableOwner(tableOwner,metadatatable);
      }
      if (tableComment != null) {
        metadatatable.setComment(tableComment);
        ColumnSetHelper.setComment(tableComment,metadatatable);
      }
      list.add(metadatatable);
    }
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String schemaname=catalogName + ""String_Node_Str"" + schemaPattern+ ""String_Node_Str"";
          String sql=""String_Node_Str"" + schemaname + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
 else     if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().equals(""String_Node_Str"")) {
      for (int i=0; i < tableType.length; i++) {
        if (tableType[i].equals(""String_Node_Str"")) {
          Statement stmt=ExtractMetaDataUtils.conn.createStatement();
          ExtractMetaDataUtils.setQueryStatementTimeout(stmt);
          String sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
          ResultSet rsTables=stmt.executeQuery(sql);
          while (rsTables.next()) {
            String nameKey=rsTables.getString(""String_Node_Str"").trim();
            MetadataTable metadatatable=null;
            metadatatable=RelationalFactory.eINSTANCE.createTdTable();
            metadatatable.setName(nameKey);
            metadatatable.setTableType(ETableTypes.TABLETYPE_SYNONYM.getName());
            metadatatable.setLabel(metadatatable.getName());
            if (schemaPattern != null) {
              ColumnSetHelper.setTableOwner(schemaPattern,metadatatable);
            }
            list.add(metadatatable);
          }
        }
      }
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,list),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return list;
}",0.9839562917353222
129933,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    String sid=((DatabaseConnection)dbConn).getSID();
    if (sid != null && sid.length() > 0) {
      schemaFilter.add(sid);
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"");
    return null;
  }
  try {
    if (schemas != null) {
      boolean hasSchema=false;
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
      if (!hasSchema) {
        Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
        returnSchemas.add(schema);
      }
      Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
      if (dbConn != null) {
        tableSet.addAll(ConnectionHelper.getTables(dbConn));
      }
      List<Schema> oldSchemas=new ArrayList<Schema>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
          oldSchemas.add((Schema)eContainer);
        }
      }
      if (isLinked() && !returnSchemas.isEmpty()) {
        ConnectionHelper.addSchemas(returnSchemas,dbConn);
      }
      for (      Schema schema : oldSchemas) {
        List<Schema> list=new ArrayList<Schema>();
        String name=schema.getName();
        Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
        if (s != null) {
          list.add(s);
          ConnectionHelper.removeSchemas(list,dbConn);
          ConnectionHelper.addSchema(schema,dbConn);
        }
 else {
          ConnectionHelper.addSchema(schema,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    String sid=((DatabaseConnection)dbConn).getSID();
    if (sid != null && sid.length() > 0) {
      schemaFilter.add(sid);
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=ConvertionHelper.convert((DatabaseConnection)dbConn);
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        if (!filterMetadaElement(schemaFilter,schemaName)) {
          continue;
        }
        Schema schema=SchemaHelper.createSchema(schemaName);
        returnSchemas.add(schema);
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.6570680628272252
129934,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"") || iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")|| iMetadataConnection.getDbType().equalsIgnoreCase(""String_Node_Str"")) {
        tableName=newNode.getValue();
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.9518405756988652
129935,"private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}","private static void fillSynonmsForOracle(IMetadataConnection iMetadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName) throws SQLException {
  String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
  if (!iMetadataConnection.getSchema().equals(""String_Node_Str"")) {
    synSQL+=""String_Node_Str"" + iMetadataConnection.getSchema() + ""String_Node_Str"";
  }
  Statement sta=ExtractMetaDataUtils.conn.createStatement();
  ExtractMetaDataUtils.setQueryStatementTimeout(sta);
  ResultSet columns=sta.executeQuery(synSQL);
  String typeName=null;
  int index=0;
  while (columns.next()) {
    long numPrecRadix=0;
    String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
    TdColumn column=ColumnHelper.createTdColumn(columnName);
    String label=column.getLabel();
    label=ManagementTextUtils.filterSpecialChar(label);
    String sub=""String_Node_Str"";
    String sub2=""String_Node_Str"";
    String label2=label;
    if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
      sub=label.substring(1);
      if (sub != null && sub.length() > 0) {
        sub2=sub.substring(1);
      }
    }
    ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
    if (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2)) {
      label=""String_Node_Str"" + label;
    }
    label=MetadataToolHelper.validateColumnName(label,index);
    column.setLabel(label);
    column.setOriginalField(label2);
    if (!ExtractMetaDataUtils.needFakeDatabaseMetaData(iMetadataConnection.getDbType(),iMetadataConnection.isSqlMode())) {
      typeName=columns.getString(GetColumn.DATA_TYPE.name());
    }
    try {
      int column_size=columns.getInt(""String_Node_Str"");
      column.setLength(column_size);
      numPrecRadix=columns.getLong(""String_Node_Str"");
      column.setPrecision(numPrecRadix);
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
    String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
    if (dbmsId != null) {
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
      column.setTalendType(talendType);
      String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
      column.setSourceType(defaultSelectedDbType);
    }
    try {
      column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
    }
 catch (    Exception e) {
      log.error(e);
    }
    metadataColumns.add(column);
    index++;
  }
  columns.close();
}",0.9738899052053884
129936,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      if (url != null) {
        String h2Prefix=""String_Node_Str"";
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
        }
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}",0.9955348476024072
129937,"private static boolean isContextMode(Connection connection,String value){
  if (connection == null || value == null) {
    return false;
  }
  if (!(connection.isContextMode() && ContextParameterUtils.isContainContextParam(value))) {
    return true;
  }
  return false;
}","private static boolean isContextMode(Connection connection,String value){
  if (connection == null || value == null) {
    return false;
  }
  if (connection.isContextMode() && ContextParameterUtils.isContainContextParam(value)) {
    return true;
  }
  return false;
}",0.9944547134935304
129938,"/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @param fullSchemaTargetList
 * @return
 */
public static String extractColumnName(String currentExpr,List<SchemaTarget> fullSchemaTargetList){
  String columnName=currentExpr.replaceAll(""String_Node_Str"",""String_Node_Str"");
  UniqueStringGenerator<SchemaTarget> uniqueStringGenerator=new UniqueStringGenerator<SchemaTarget>(columnName,fullSchemaTargetList){
    @Override protected String getBeanString(    SchemaTarget bean){
      return bean.getTagName();
    }
  }
;
  columnName=uniqueStringGenerator.getUniqueString();
  return columnName;
}","/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @param fullSchemaTargetList
 * @return
 */
public static String extractColumnName(String currentExpr,List<SchemaTarget> fullSchemaTargetList){
  String columnName=currentExpr.startsWith(""String_Node_Str"") ? currentExpr.substring(1) : currentExpr;
  columnName=columnName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  UniqueStringGenerator<SchemaTarget> uniqueStringGenerator=new UniqueStringGenerator<SchemaTarget>(columnName,fullSchemaTargetList){
    @Override protected String getBeanString(    SchemaTarget bean){
      return bean.getTagName();
    }
  }
;
  columnName=uniqueStringGenerator.getUniqueString();
  return columnName;
}",0.9326788218793828
129939,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  if (selection.size() != 1) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}",0.9834874504623514
129940,"public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isAllowMultipleName=(type == ERepositoryObjectType.SQLPATTERNS || type == ERepositoryObjectType.METADATA_FILE_XML);
  String path=null;
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if (name.equalsIgnoreCase(current.getProperty().getLabel()) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isAllowMultipleName || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}","public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isSqlPattern=(type == ERepositoryObjectType.SQLPATTERNS);
  String path=null;
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if (name.equalsIgnoreCase(current.getProperty().getLabel()) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isSqlPattern || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}",0.9563046192259675
129941,"public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
  if (isImportItem.length == 1) {
    this.repositoryFactoryFromProvider.unloadResources(item.getProperty());
  }
}","public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
}",0.9452449567723344
129942,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField != null && originalField.getNodeValue() != null) {
        metadataColumn.setOriginalField(originalField.getNodeValue());
      }
 else {
        metadataColumn.setOriginalField(label.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9762220634758648
129943,"public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
  if (isImportItem.length == 1) {
    this.repositoryFactoryFromProvider.unloadResources(item.getProperty());
  }
}","public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
}",0.9452449567723344
129944,"private static EDatabaseTypeName[] retrieveDBTypes(IConfigurationElement parent){
  IConfigurationElement[] children=parent.getChildren(""String_Node_Str"");
  List<EDatabaseTypeName> list=new ArrayList<EDatabaseTypeName>();
  for (  IConfigurationElement ce : children) {
    String type=ce.getAttribute(""String_Node_Str"");
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(type,false);
    if (dbType != null) {
      list.add(dbType);
    }
  }
  return list.toArray(new EDatabaseTypeName[0]);
}","private static EDatabaseTypeName[] retrieveDBTypes(IConfigurationElement parent){
  IConfigurationElement[] children=parent.getChildren(""String_Node_Str"");
  List<EDatabaseTypeName> list=new ArrayList<EDatabaseTypeName>();
  for (  IConfigurationElement ce : children) {
    String type=ce.getAttribute(""String_Node_Str"");
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(type,false);
    if (dbType == null) {
      for (      EDatabaseTypeName dtn : EDatabaseTypeName.values()) {
        if (dtn.name().equals(type)) {
          dbType=dtn;
          break;
        }
      }
    }
    if (dbType != null) {
      list.add(dbType);
    }
  }
  return list.toArray(new EDatabaseTypeName[0]);
}",0.8370188370188371
129945,"private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (int i=0; i < tableItems.length; i++) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItems[i].getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItems[i],tableItems[i].getData(),xmlViewer.getTree(),treeNode,true);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (int i=0; i < children.length; i++) {
    initLinker(children[i],tableItems);
  }
}","private void initLinker(TreeItem node,TableItem[] tableItems){
  FOXTreeNode treeNode=(FOXTreeNode)node.getData();
  IMetadataColumn column=treeNode.getColumn();
  if (column != null) {
    for (int i=0; i < tableItems.length; i++) {
      MetadataColumn metadataColumn=(MetadataColumn)tableItems[i].getData();
      if (metadataColumn.getLabel().equals(column.getLabel())) {
        linker.addLoopLink(tableItems[i],tableItems[i].getData(),xmlViewer.getTree(),treeNode,false);
        break;
      }
    }
  }
  TreeItem[] children=node.getItems();
  for (int i=0; i < children.length; i++) {
    initLinker(children[i],tableItems);
  }
}",0.9945184025058732
129946,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField != null && originalField.getNodeValue() != null) {
        metadataColumn.setOriginalField(originalField.getNodeValue());
      }
 else {
        metadataColumn.setOriginalField(label.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9762220634758648
129947,"public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  boolean flag=false;
  for (  ModuleNeeded current : list) {
    if (current.getRequiredIf() != null && !current.getRequiredIf().equals(""String_Node_Str"")) {
      flag=true;
    }
  }
  if (flag) {
    for (    ModuleNeeded module : modulesNeeded) {
      for (      ModuleNeeded current : list) {
        if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
          if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && (current.getRequiredIf() != null && !current.getRequiredIf().equals(""String_Node_Str""))) {
            Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
            problem.setKey(""String_Node_Str"" + current.getModuleName());
            toReturn.add(problem);
          }
        }
      }
    }
  }
 else {
    for (    ModuleNeeded module : modulesNeeded) {
      for (      ModuleNeeded current : list) {
        if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
          if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired()) {
            Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
            problem.setKey(""String_Node_Str"" + current.getModuleName());
            toReturn.add(problem);
          }
        }
      }
    }
  }
  return toReturn;
}","public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : list) {
      if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired(node.getElementParameters())) {
          Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
          problem.setKey(""String_Node_Str"" + current.getModuleName());
          toReturn.add(problem);
        }
      }
    }
  }
  return toReturn;
}",0.4986717267552182
129948,"public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}","public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  done.remove(""String_Node_Str"");
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.9971910112359552
129949,"public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode){
  if (sourceNode == null) {
    return false;
  }
  if (sourceNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  try {
    if (ProxyRepositoryFactory.getInstance().getLastVersion(objectToCopy.getId()) == null) {
      return false;
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (objectToCopy != null && objectToCopy.getId() == null) {
    return false;
  }
  if (objectToCopy == null || objectToCopy.getRepositoryStatus() == ERepositoryStatus.DELETED || ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
    Property property=objectToCopy.getProperty();
    RoutineItem item=(RoutineItem)property.getItem();
    return !item.isBuiltIn();
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
    Property property=objectToCopy.getProperty();
    SQLPatternItem item=(SQLPatternItem)property.getItem();
    return !item.isSystem();
  }
  if (PluginChecker.isCDCPluginLoaded()) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && (cdcService.isSubscriberTableNode(sourceNode) || cdcService.isSystemSubscriberTable(sourceNode))) {
      return false;
    }
  }
  if (targetNode == null) {
    return true;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT || targetNode.getType() == ENodeType.SIMPLE_FOLDER || targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    return ((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
  }
  return false;
}","public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode){
  if (sourceNode == null) {
    return false;
  }
  if (sourceNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (objectToCopy.getId() == null) {
    return false;
  }
  try {
    if (ProxyRepositoryFactory.getInstance().getLastVersion(objectToCopy.getId()) == null) {
      return false;
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (objectToCopy != null && objectToCopy.getId() == null) {
    return false;
  }
  if (objectToCopy == null || objectToCopy.getRepositoryStatus() == ERepositoryStatus.DELETED || ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
    Property property=objectToCopy.getProperty();
    RoutineItem item=(RoutineItem)property.getItem();
    return !item.isBuiltIn();
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
    Property property=objectToCopy.getProperty();
    SQLPatternItem item=(SQLPatternItem)property.getItem();
    return !item.isSystem();
  }
  if (PluginChecker.isCDCPluginLoaded()) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && (cdcService.isSubscriberTableNode(sourceNode) || cdcService.isSystemSubscriberTable(sourceNode))) {
      return false;
    }
  }
  if (targetNode == null) {
    return true;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT || targetNode.getType() == ENodeType.SIMPLE_FOLDER || targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    return ((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
  }
  return false;
}",0.984725050916497
129950,"public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
}","public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
  if (isImportItem.length == 1) {
    this.repositoryFactoryFromProvider.unloadResources(item.getProperty());
  }
}",0.9452449567723344
129951,"public void setItem(Item item){
  this.item=item;
  if (item != null) {
    this.id=item.getProperty().getId();
    this.version=item.getProperty().getVersion();
  }
}","public void setItem(Item item){
  this.item=item;
  if (item != null) {
    this.id=item.getProperty().getId();
    this.version=item.getProperty().getVersion();
    this.name=getItem().getProperty().getLabel();
  }
}",0.8697916666666666
129952,"public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}","public void executeProjectTasks(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<String> done=new ArrayList<String>(project.getEmfProject().getMigrationTasks());
  done.remove(""String_Node_Str"");
  Collections.sort(toExecute,new Comparator<IProjectMigrationTask>(){
    public int compare(    IProjectMigrationTask o1,    IProjectMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    if (!done.contains(task.getId()) && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || project.getEmfProject().getItemsRelations() == null || project.getEmfProject().getItemsRelations().isEmpty() || nbMigrationsToDo > 0)) {
    done.remove(RELATION_TASK);
  }
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    done.remove(""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    public void run() throws PersistenceException {
      boolean needSave=false;
      if (!beforeLogon) {
        ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
        Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
          public int compare(          ERepositoryObjectType arg0,          ERepositoryObjectType arg1){
            if (arg0 == ERepositoryObjectType.PROCESS) {
              return 1;
            }
            if (arg0 == ERepositoryObjectType.JOBLET) {
              return 1;
            }
            return 0;
          }
        }
);
        for (        ERepositoryObjectType type : types) {
          if (!type.isResourceItem()) {
            continue;
          }
          List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
          for (          IRepositoryViewObject object : objects) {
            Item item=object.getProperty().getItem();
            monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
            subProgressMonitor.worked(1);
            for (            IProjectMigrationTask task : toExecute) {
              if (monitorWrap.isCanceled()) {
                throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
              }
              if (!done.contains(task.getId()) && !task.isDeprecated()) {
                ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                  if (task.getStatus() != ExecutionResult.FAILURE) {
                    task.setStatus(status);
                  }
case SUCCESS_NO_ALERT:
                if (task.getStatus() != ExecutionResult.FAILURE) {
                  task.setStatus(status);
                }
case NOTHING_TO_DO:
              if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                task.setStatus(status);
              }
            break;
case SKIPPED:
          if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
            task.setStatus(status);
          }
        break;
case FAILURE:
      task.setStatus(status);
default :
    task.setStatus(status);
  break;
}
}
}
if (object instanceof RepositoryObject) {
((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
if (!done.contains(task.getId()) && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
status=task.execute(project);
}
 else {
status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
doneThisSession.add(task);
case SUCCESS_NO_ALERT:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
case NOTHING_TO_DO:
done.add(task.getId());
needSave=true;
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
case FAILURE:
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
}
 else if (task.isDeprecated() && !done.contains(task.getId())) {
done.add(task.getId());
needSave=true;
}
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
RelationshipItemBuilder.getInstance().saveRelations();
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
}",0.9971910112359552
129953,"public RepositoryEditorInput(IFile file,Item item){
  super(file);
  this.item=item;
}","public RepositoryEditorInput(IFile file,Item item){
  super(file);
  this.item=item;
  this.id=item.getProperty().getId();
  this.version=item.getProperty().getVersion();
}",0.6666666666666666
129954,"public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryEditorInput other=(RepositoryEditorInput)obj;
  if (this.item == null) {
    if (other.item != null) {
      return false;
    }
  }
 else   if (!this.item.getProperty().getId().equals(other.item.getProperty().getId())) {
    return false;
  }
 else   if (!this.item.getProperty().getVersion().equals(other.item.getProperty().getVersion())) {
    return false;
  }
  return true;
}","public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryEditorInput other=(RepositoryEditorInput)obj;
  if (!this.getId().equals(other.getId())) {
    return false;
  }
 else   if (!this.getVersion().equals(other.getVersion())) {
    return false;
  }
  return true;
}",0.8231768231768232
129955,"public void setItem(Item item){
  this.item=item;
}","public void setItem(Item item){
  this.item=item;
  if (item != null) {
    this.id=item.getProperty().getId();
    this.version=item.getProperty().getVersion();
  }
}",0.4678899082568807
129956,"/** 
 * create Dimensionned NewGrid (width Columns) in a Composite.
 * @param Composite parent
 * @param int numColumns
 * @param boolean sameWidth
 * @param int styleHoryzontal
 * @param int styleVertical
 * @return Composite
 */
public static Composite startNewDimensionnedGridLayout(Composite parent,int numColumns,int minimumWidth,int minimumHeight){
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayout(new GridLayout(numColumns,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=minimumWidth;
  gridData.minimumHeight=minimumHeight;
  gridData.widthHint=minimumWidth;
  gridData.heightHint=minimumHeight;
  composite.setLayoutData(gridData);
  return composite;
}","/** 
 * create Dimensionned NewGrid (width Columns) in a Composite.
 * @param Composite parent
 * @param int numColumns
 * @param boolean sameWidth
 * @param int styleHoryzontal
 * @param int styleVertical
 * @param boolean isFillBoth
 * @return Composite
 */
public static Composite startNewDimensionnedGridLayout(Composite parent,int numColumns,int minimumWidth,int minimumHeight,boolean isFillBoth){
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayout(new GridLayout(numColumns,false));
  GridData gridData=isFillBoth ? new GridData(GridData.FILL_BOTH) : new GridData();
  gridData.minimumWidth=minimumWidth;
  gridData.minimumHeight=minimumHeight;
  gridData.widthHint=minimumWidth;
  gridData.heightHint=minimumHeight;
  composite.setLayoutData(gridData);
  return composite;
}",0.9491525423728814
129957,"/** 
 * create Button width image less FillLayout.
 * @param Composite parent
 * @param Image image
 * @param String string
 */
public UtilsButton(Composite parent,Image image,String string){
  button=new Button(parent,SWT.PUSH);
  button.setImage(image);
  button.setToolTipText(string);
}","/** 
 * create Button with related layoutData.
 * @param parent
 * @param string
 * @param layoutData
 */
public UtilsButton(Composite parent,String string,Object layoutData){
  button=new Button(parent,SWT.PUSH);
  button.setText(string);
  button.setLayoutData(layoutData);
}",0.4902998236331569
129958,"public static boolean isDeleteOrReselectMap(ConnectionItem connItem,List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,EUpdateResult> deletedOrReselectTables){
  for (  IMetadataTable oldTable : oldTables) {
    String prefix;
    boolean isDeleted=true;
    String oldtableName=oldTable.getTableName();
    String oldtableId=oldTable.getId();
    for (    IMetadataTable newTable : newTables) {
      String tableLabel=newTable.getLabel();
      String tableId=newTable.getId();
      if (tableLabel.equals(oldtableName)) {
        isDeleted=false;
        if (!tableId.equals(oldtableId)) {
          prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
          deletedOrReselectTables.put(prefix + tableLabel,EUpdateResult.RELOAD);
        }
      }
    }
    if (isDeleted) {
      prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
      deletedOrReselectTables.put(prefix + oldtableName,EUpdateResult.DELETE);
    }
  }
  return !deletedOrReselectTables.isEmpty();
}","public static boolean isDeleteOrReselectMap(ConnectionItem connItem,List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,EUpdateResult> deletedOrReselectTables){
  for (  IMetadataTable oldTable : oldTables) {
    String prefix;
    boolean isDeleted=true;
    String oldtableLabel=oldTable.getLabel();
    String oldtableId=oldTable.getId();
    for (    IMetadataTable newTable : newTables) {
      String tableLabel=newTable.getLabel();
      String tableId=newTable.getId();
      if (tableLabel.equals(oldtableLabel)) {
        isDeleted=false;
        if (!tableId.equals(oldtableId)) {
          prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
          deletedOrReselectTables.put(prefix + tableLabel,EUpdateResult.RELOAD);
        }
      }
    }
    if (isDeleted) {
      prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
      deletedOrReselectTables.put(prefix + oldtableLabel,EUpdateResult.DELETE);
    }
  }
  return !deletedOrReselectTables.isEmpty();
}",0.9046927914852444
129959,"public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
}","public void create(Project project,Item item,IPath path,boolean... isImportItem) throws PersistenceException {
  boolean isOherProcess=false;
  for (  IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
    isOherProcess=handler.isProcess(item);
    if (isOherProcess) {
      break;
    }
  }
  if (isOherProcess || item instanceof ProcessItem) {
    try {
      coreService.checkJob(item.getProperty().getLabel());
    }
 catch (    BusinessException e) {
      throw new PersistenceException(e);
    }
catch (    RuntimeException e) {
    }
  }
  checkFileNameAndPath(project,item,RepositoryConstants.getPattern(ERepositoryObjectType.getItemType(item)),path,false,isImportItem);
  this.repositoryFactoryFromProvider.create(project,item,path,isImportItem);
  if ((item instanceof ProcessItem || item instanceof JobletProcessItem) && (isImportItem.length == 0)) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOB_CREATE.getName(),null,item);
  }
  if (isImportItem.length == 1) {
    this.repositoryFactoryFromProvider.unloadResources(item.getProperty());
  }
}",0.9452449567723344
129960,"public RepositoryEditorInput(IFile file,Item item){
  super(file);
  this.item=item;
  this.id=item.getProperty().getId();
  this.version=item.getProperty().getVersion();
}","public RepositoryEditorInput(IFile file,Item item){
  super(file);
  this.item=item;
  this.id=item.getProperty().getId();
  this.version=item.getProperty().getVersion();
  this.name=getItem().getProperty().getLabel();
}",0.8775510204081632
129961,"@Override public String getName(){
  return ""String_Node_Str"" + item.getProperty().getLabel();
}","@Override public String getName(){
  return name;
}",0.6666666666666666
129962,"/** 
 * create Dimensionned NewGrid (width Columns) in a Composite.
 * @param Composite parent
 * @param int numColumns
 * @param boolean sameWidth
 * @param int styleHoryzontal
 * @param int styleVertical
 * @return Composite
 */
public static Composite startNewDimensionnedGridLayout(Composite parent,int numColumns,int minimumWidth,int minimumHeight){
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayout(new GridLayout(numColumns,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=minimumWidth;
  gridData.minimumHeight=minimumHeight;
  gridData.widthHint=minimumWidth;
  gridData.heightHint=minimumHeight;
  composite.setLayoutData(gridData);
  return composite;
}","/** 
 * create Dimensionned NewGrid (width Columns) in a Composite.
 * @param Composite parent
 * @param int numColumns
 * @param boolean sameWidth
 * @param int styleHoryzontal
 * @param int styleVertical
 * @param boolean isFillBoth
 * @return Composite
 */
public static Composite startNewDimensionnedGridLayout(Composite parent,int numColumns,int minimumWidth,int minimumHeight,boolean isFillBoth){
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayout(new GridLayout(numColumns,false));
  GridData gridData=isFillBoth ? new GridData(GridData.FILL_BOTH) : new GridData();
  gridData.minimumWidth=minimumWidth;
  gridData.minimumHeight=minimumHeight;
  gridData.widthHint=minimumWidth;
  gridData.heightHint=minimumHeight;
  composite.setLayoutData(gridData);
  return composite;
}",0.9491525423728814
129963,"/** 
 * create Button width image less FillLayout.
 * @param Composite parent
 * @param Image image
 * @param String string
 */
public UtilsButton(Composite parent,Image image,String string){
  button=new Button(parent,SWT.PUSH);
  button.setImage(image);
  button.setToolTipText(string);
}","/** 
 * create Button with related layoutData.
 * @param parent
 * @param string
 * @param layoutData
 */
public UtilsButton(Composite parent,String string,Object layoutData){
  button=new Button(parent,SWT.PUSH);
  button.setText(string);
  button.setLayoutData(layoutData);
}",0.4902998236331569
129964,"public static boolean isDeleteOrReselectMap(ConnectionItem connItem,List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,EUpdateResult> deletedOrReselectTables){
  for (  IMetadataTable oldTable : oldTables) {
    String prefix;
    boolean isDeleted=true;
    String oldtableName=oldTable.getTableName();
    String oldtableId=oldTable.getId();
    for (    IMetadataTable newTable : newTables) {
      String tableLabel=newTable.getLabel();
      String tableId=newTable.getId();
      if (tableLabel.equals(oldtableName)) {
        isDeleted=false;
        if (!tableId.equals(oldtableId)) {
          prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
          deletedOrReselectTables.put(prefix + tableLabel,EUpdateResult.RELOAD);
        }
      }
    }
    if (isDeleted) {
      prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
      deletedOrReselectTables.put(prefix + oldtableName,EUpdateResult.DELETE);
    }
  }
  return !deletedOrReselectTables.isEmpty();
}","public static boolean isDeleteOrReselectMap(ConnectionItem connItem,List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,EUpdateResult> deletedOrReselectTables){
  for (  IMetadataTable oldTable : oldTables) {
    String prefix;
    boolean isDeleted=true;
    String oldtableLabel=oldTable.getLabel();
    String oldtableId=oldTable.getId();
    for (    IMetadataTable newTable : newTables) {
      String tableLabel=newTable.getLabel();
      String tableId=newTable.getId();
      if (tableLabel.equals(oldtableLabel)) {
        isDeleted=false;
        if (!tableId.equals(oldtableId)) {
          prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
          deletedOrReselectTables.put(prefix + tableLabel,EUpdateResult.RELOAD);
        }
      }
    }
    if (isDeleted) {
      prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
      deletedOrReselectTables.put(prefix + oldtableLabel,EUpdateResult.DELETE);
    }
  }
  return !deletedOrReselectTables.isEmpty();
}",0.9046927914852444
129965,"private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
}","private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  XPathPrefix[] values=XPathPrefix.values();
  String[] xPathPrefixData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    xPathPrefixData[j]=values[j].getDisplayName();
  }
  Composite composite=new Composite(schemaTargetGroup,SWT.NONE);
  final GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  xPathPrefixCombo=new LabelledCombo(composite,""String_Node_Str"",""String_Node_Str"",xPathPrefixData,1,true);
  xPathPrefixCombo.getCombo().setBackground(null);
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}",0.0637958532695374
129966,"public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : list) {
      if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired()) {
          Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
          problem.setKey(""String_Node_Str"" + current.getModuleName());
          toReturn.add(problem);
        }
      }
    }
  }
  return toReturn;
}","public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  boolean flag=false;
  for (  ModuleNeeded current : list) {
    if (current.getRequiredIf() != null && !current.getRequiredIf().equals(""String_Node_Str"")) {
      flag=true;
    }
  }
  if (flag) {
    for (    ModuleNeeded module : modulesNeeded) {
      for (      ModuleNeeded current : list) {
        if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
          if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && (current.getRequiredIf() != null && !current.getRequiredIf().equals(""String_Node_Str""))) {
            Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
            problem.setKey(""String_Node_Str"" + current.getModuleName());
            toReturn.add(problem);
          }
        }
      }
    }
  }
 else {
    for (    ModuleNeeded module : modulesNeeded) {
      for (      ModuleNeeded current : list) {
        if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
          if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired()) {
            Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
            problem.setKey(""String_Node_Str"" + current.getModuleName());
            toReturn.add(problem);
          }
        }
      }
    }
  }
  return toReturn;
}",0.5552147239263804
129967,"/** 
 * delete namespace prefix in the xpath
 * @param xpath the source xpath
 * @return
 */
public static String deletePrefixForXpath(String xpath){
  if (xpath == null) {
    return null;
  }
  char[] block=null;
  StringBuffer sb=new StringBuffer();
  int size=xpath.length();
  int start=-1;
  int offset=0;
  char next=' ';
  for (int i=0; i < size; i++) {
    if (':' == next) {
      next=' ';
      continue;
    }
    int end=-1;
    char c=xpath.charAt(i);
    if ('/' == c || '@' == c) {
      start=i;
    }
    if (':' == c) {
      if (i < size - 1) {
        next=xpath.charAt(i + 1);
      }
      if (':' != next) {
        end=i;
      }
    }
    if (end != -1) {
      if (block == null) {
        block=xpath.toCharArray();
      }
      sb.append(block,offset,start + 1 - offset);
      offset=end + 1;
    }
  }
  if (offset == 0) {
    return xpath;
  }
  if (offset < size) {
    if (block == null) {
      block=xpath.toCharArray();
    }
    sb.append(block,offset,size - offset);
  }
  return sb.toString();
}","/** 
 * delete namespace prefix in the xpath
 * @param xpath the source xpath
 * @return example ./ns:aa/ns:b ==> ./aa/b ../ns:aa/ns:b ==> ../aa/b ../aa/ns:b ==> ../aa/b ../aa/ns:b/../ns:a/a ==> ../aa/b/../a/a /aa/b/c ==> /aa/b/c /aa/b/c/@e ==> /aa/b/c/@e /aa/b/c/@ns:e ==> /aa/b/c/@e aa ==> aa ns:aa ==> aa child::book ==> child::book attribute::attr ==> attribute::attr to[@a:attri=""xxx:yyy""]/ns:a ==> to[@attri=""xxx:yyy""]/a to[.=""to:yyy""]/ns:a ==> to[.=""to:yyy""]/a substring('12:3""4:5',2,3) ==> substring('12:3""4:5',2,3) substring(""12:3'4:5"",2,3) ==> substring(""12:3'4:5"",2,3) //name[@ns:attri=""xxx:yyyy""] ==> //name[@attri=""xxx:yyyy""] //name[@ns:attri=""xxx:yyyy""]/ns:b/@ns:a ==> //name[@attri=""xxx:yyyy""]/b/@a body[ns:age/ns:name/@ns:b=""12:3""]/age ==> body[age/name/@b=""12:3""]/age
 */
public static String deletePrefixForXpath(String xpath){
  if (xpath == null) {
    return null;
  }
  char[] block=null;
  StringBuffer sb=new StringBuffer();
  int size=xpath.length();
  int start=-1;
  int offset=0;
  char next=' ';
  boolean literal=false;
  char textEnclosure=' ';
  for (int i=0; i < size; i++) {
    if (':' == next) {
      next=' ';
      continue;
    }
    int end=-1;
    char c=xpath.charAt(i);
    if (c == '\'' || c == '""') {
      if (!literal) {
        literal=true;
        textEnclosure=c;
      }
 else       if (textEnclosure == c) {
        literal=false;
        textEnclosure=' ';
      }
    }
    if (literal) {
      continue;
    }
    if ('/' == c || '@' == c || '[' == c) {
      start=i;
    }
    if (':' == c) {
      if (i < size - 1) {
        next=xpath.charAt(i + 1);
      }
      if (':' != next) {
        end=i;
      }
    }
    if (end != -1) {
      if (block == null) {
        block=xpath.toCharArray();
      }
      sb.append(block,offset,start + 1 - offset);
      offset=end + 1;
    }
  }
  if (offset == 0) {
    return xpath;
  }
  if (offset < size) {
    if (block == null) {
      block=xpath.toCharArray();
    }
    sb.append(block,offset,size - offset);
  }
  return sb.toString();
}",0.6668826960466624
129968,"public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : list) {
      if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired()) {
          Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
          problem.setKey(""String_Node_Str"" + current.getModuleName());
          toReturn.add(problem);
        }
      }
    }
  }
  return toReturn;
}","public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  boolean flag=false;
  for (  ModuleNeeded current : list) {
    if (current.getRequiredIf() != null && !current.getRequiredIf().equals(""String_Node_Str"")) {
      flag=true;
    }
  }
  if (flag) {
    for (    ModuleNeeded module : modulesNeeded) {
      for (      ModuleNeeded current : list) {
        if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
          if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && (current.getRequiredIf() != null && !current.getRequiredIf().equals(""String_Node_Str""))) {
            Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
            problem.setKey(""String_Node_Str"" + current.getModuleName());
            toReturn.add(problem);
          }
        }
      }
    }
  }
 else {
    for (    ModuleNeeded module : modulesNeeded) {
      for (      ModuleNeeded current : list) {
        if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
          if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired()) {
            Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
            problem.setKey(""String_Node_Str"" + current.getModuleName());
            toReturn.add(problem);
          }
        }
      }
    }
  }
  return toReturn;
}",0.5552147239263804
129969,"private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
}","private void addGroupSchemaTarget(final Composite mainComposite,final int width,final int height){
  schemaTargetGroup=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    schemaTargetGroup.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),schemaTargetGroup,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  XPathPrefix[] values=XPathPrefix.values();
  String[] xPathPrefixData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    xPathPrefixData[j]=values[j].getDisplayName();
  }
  Composite composite=new Composite(schemaTargetGroup,SWT.NONE);
  final GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  xPathPrefixCombo=new LabelledCombo(composite,""String_Node_Str"",""String_Node_Str"",xPathPrefixData,1,true);
  xPathPrefixCombo.getCombo().setBackground(null);
  CommandStackForComposite commandStack=new CommandStackForComposite(schemaTargetGroup);
  loopModel=new MDMXSDExtractorLoopModel(""String_Node_Str"");
  loopTableEditorView=new ExtractionLoopWithMDMEditorView(loopModel,schemaTargetGroup);
  loopTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  GridData data2=new GridData(GridData.FILL_HORIZONTAL);
  data2.heightHint=90;
  final Composite loopTableEditorComposite=loopTableEditorView.getMainComposite();
  loopTableEditorComposite.setLayoutData(data2);
  loopTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    loopTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),loopTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
  fieldsModel=new MDMXSDExtractorFieldModel(""String_Node_Str"");
  fieldsTableEditorView=new ExtractionFieldsWithMDMEditorView(fieldsModel,schemaTargetGroup);
  fieldsTableEditorView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=fieldsTableEditorView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
  if (WindowSystem.isGTK() && firstTimeWizardOpened.equals(Boolean.TRUE)) {
    fieldTableEditorComposite.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        Point offsetPoint=event.display.map(linker.getBgDrawableComposite(),fieldTableEditorComposite,new Point(0,0));
        linker.setOffset(offsetPoint);
        linker.drawBackground(event.gc);
      }
    }
);
  }
}",0.0637958532695374
129970,"/** 
 * delete namespace prefix in the xpath
 * @param xpath the source xpath
 * @return
 */
public static String deletePrefixForXpath(String xpath){
  if (xpath == null) {
    return null;
  }
  char[] block=null;
  StringBuffer sb=new StringBuffer();
  int size=xpath.length();
  int start=-1;
  int offset=0;
  char next=' ';
  for (int i=0; i < size; i++) {
    if (':' == next) {
      next=' ';
      continue;
    }
    int end=-1;
    char c=xpath.charAt(i);
    if ('/' == c || '@' == c) {
      start=i;
    }
    if (':' == c) {
      if (i < size - 1) {
        next=xpath.charAt(i + 1);
      }
      if (':' != next) {
        end=i;
      }
    }
    if (end != -1) {
      if (block == null) {
        block=xpath.toCharArray();
      }
      sb.append(block,offset,start + 1 - offset);
      offset=end + 1;
    }
  }
  if (offset == 0) {
    return xpath;
  }
  if (offset < size) {
    if (block == null) {
      block=xpath.toCharArray();
    }
    sb.append(block,offset,size - offset);
  }
  return sb.toString();
}","/** 
 * delete namespace prefix in the xpath
 * @param xpath the source xpath
 * @return example ./ns:aa/ns:b ==> ./aa/b ../ns:aa/ns:b ==> ../aa/b ../aa/ns:b ==> ../aa/b ../aa/ns:b/../ns:a/a ==> ../aa/b/../a/a /aa/b/c ==> /aa/b/c /aa/b/c/@e ==> /aa/b/c/@e /aa/b/c/@ns:e ==> /aa/b/c/@e aa ==> aa ns:aa ==> aa child::book ==> child::book attribute::attr ==> attribute::attr to[@a:attri=""xxx:yyy""]/ns:a ==> to[@attri=""xxx:yyy""]/a to[.=""to:yyy""]/ns:a ==> to[.=""to:yyy""]/a substring('12:3""4:5',2,3) ==> substring('12:3""4:5',2,3) substring(""12:3'4:5"",2,3) ==> substring(""12:3'4:5"",2,3) //name[@ns:attri=""xxx:yyyy""] ==> //name[@attri=""xxx:yyyy""] //name[@ns:attri=""xxx:yyyy""]/ns:b/@ns:a ==> //name[@attri=""xxx:yyyy""]/b/@a body[ns:age/ns:name/@ns:b=""12:3""]/age ==> body[age/name/@b=""12:3""]/age
 */
public static String deletePrefixForXpath(String xpath){
  if (xpath == null) {
    return null;
  }
  char[] block=null;
  StringBuffer sb=new StringBuffer();
  int size=xpath.length();
  int start=-1;
  int offset=0;
  char next=' ';
  boolean literal=false;
  char textEnclosure=' ';
  for (int i=0; i < size; i++) {
    if (':' == next) {
      next=' ';
      continue;
    }
    int end=-1;
    char c=xpath.charAt(i);
    if (c == '\'' || c == '""') {
      if (!literal) {
        literal=true;
        textEnclosure=c;
      }
 else       if (textEnclosure == c) {
        literal=false;
        textEnclosure=' ';
      }
    }
    if (literal) {
      continue;
    }
    if ('/' == c || '@' == c || '[' == c) {
      start=i;
    }
    if (':' == c) {
      if (i < size - 1) {
        next=xpath.charAt(i + 1);
      }
      if (':' != next) {
        end=i;
      }
    }
    if (end != -1) {
      if (block == null) {
        block=xpath.toCharArray();
      }
      sb.append(block,offset,start + 1 - offset);
      offset=end + 1;
    }
  }
  if (offset == 0) {
    return xpath;
  }
  if (offset < size) {
    if (block == null) {
      block=xpath.toCharArray();
    }
    sb.append(block,offset,size - offset);
  }
  return sb.toString();
}",0.6668826960466624
129971,"private static String getImports(){
  String imports=""String_Node_Str"";
  IProxyRepositoryFactory repositoryFactory=CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory();
  Project project=ProjectManager.getInstance().getProject(null);
  try {
    List<IRepositoryViewObject> routines=repositoryFactory.getAll(ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject routine : routines) {
      if (routine.getProperty().getItem() instanceof RoutineItem && ((RoutineItem)routine.getProperty().getItem()).isBuiltIn()) {
        imports+=""String_Node_Str"" + routine.getLabel() + ""String_Node_Str"";
      }
 else {
        imports+=""String_Node_Str"" + routine.getLabel() + ""String_Node_Str"";
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return ""String_Node_Str"";
  }
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  return imports;
}","private static String getImports(){
  String imports=""String_Node_Str"";
  IProxyRepositoryFactory repositoryFactory=CorePlugin.getDefault().getRepositoryService().getProxyRepositoryFactory();
  Project project=ProjectManager.getInstance().getProject(null);
  try {
    List<IRepositoryViewObject> routines=repositoryFactory.getAll(ERepositoryObjectType.ROUTINES);
    for (    IRepositoryViewObject routine : routines) {
      if (routine.getProperty().getItem() instanceof RoutineItem && ((RoutineItem)routine.getProperty().getItem()).isBuiltIn()) {
        imports+=""String_Node_Str"" + routine.getLabel() + ""String_Node_Str"";
      }
 else {
        imports+=""String_Node_Str"" + routine.getLabel() + ""String_Node_Str"";
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return ""String_Node_Str"";
  }
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  imports+=""String_Node_Str"";
  return imports;
}",0.9719887955182072
129972,"public ModuleNeeded(String context,String moduleName,String informationMsg,boolean required,List<String> installURL){
  super();
  this.context=context;
  this.moduleName=moduleName;
  this.informationMsg=informationMsg;
  this.required=required;
  this.installURL=installURL;
}","public ModuleNeeded(String context,String moduleName,String informationMsg,boolean required,List<String> installURL,String requiredIf){
  super();
  this.context=context;
  this.moduleName=moduleName;
  this.informationMsg=informationMsg;
  this.required=required;
  this.installURL=installURL;
  this.requiredIf=requiredIf;
}",0.9205298013245032
129973,"public RepositoryUpdateManager(Object parameter,List<RelationshipItemBuilder.Relation> relations){
  super();
  this.parameter=parameter;
  this.relations=relations;
}","public RepositoryUpdateManager(Object parameter,List<RelationshipItemBuilder.Relation> relations,boolean isDetectAndUpdate){
  super();
  this.parameter=parameter;
  this.relations=relations;
  this.isDetectAndUpdate=isDetectAndUpdate;
}",0.8267326732673267
129974,"public List<Status> getStatusList(Property property) throws PersistenceException {
  List<Status> status=null;
  Item item=property.getItem();
  if (item != null) {
    EClass propertyEClass=item.eClass();
    int i=propertyEClass.getClassifierID();
switch (propertyEClass.getClassifierID()) {
case PropertiesPackage.CSV_FILE_CONNECTION_ITEM:
case PropertiesPackage.DATABASE_CONNECTION_ITEM:
case PropertiesPackage.SAP_CONNECTION_ITEM:
case PropertiesPackage.DELIMITED_FILE_CONNECTION_ITEM:
case PropertiesPackage.POSITIONAL_FILE_CONNECTION_ITEM:
case PropertiesPackage.CONTEXT_ITEM:
case PropertiesPackage.PROCESS_ITEM:
case PropertiesPackage.JOBLET_PROCESS_ITEM:
case PropertiesPackage.ROUTINE_ITEM:
case PropertiesPackage.REG_EX_FILE_CONNECTION_ITEM:
case PropertiesPackage.GENERIC_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDAP_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDIF_FILE_CONNECTION_ITEM:
case PropertiesPackage.XML_FILE_CONNECTION_ITEM:
case PropertiesPackage.EXCEL_FILE_CONNECTION_ITEM:
case PropertiesPackage.SALESFORCE_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.WSDL_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.EBCDIC_CONNECTION_ITEM:
case PropertiesPackage.HL7_CONNECTION_ITEM:
case PropertiesPackage.FTP_CONNECTION_ITEM:
case PropertiesPackage.BRMS_CONNECTION_ITEM:
case PropertiesPackage.MDM_CONNECTION_ITEM:
case PropertiesPackage.JOB_SCRIPT_ITEM:
case PropertiesPackage.SQL_PATTERN_ITEM:
case PropertiesPackage.EDIFACT_CONNECTION_ITEM:
case PropertiesPackage.VALIDATION_RULES_CONNECTION_ITEM:
      status=repositoryFactory.getTechnicalStatus();
    break;
case PropertiesPackage.RULES_ITEM:
  status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.LINK_RULES_ITEM:
status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.BUSINESS_PROCESS_ITEM:
case PropertiesPackage.SVG_BUSINESS_PROCESS_ITEM:
case PropertiesPackage.DOCUMENTATION_ITEM:
status=repositoryFactory.getDocumentationStatus();
break;
}
}
if (status == null) {
status=new ArrayList<Status>();
}
toMaps(status);
return status;
}","public List<Status> getStatusList(Property property) throws PersistenceException {
  List<Status> status=null;
  Item item=property.getItem();
  if (item != null) {
    EClass propertyEClass=item.eClass();
    int i=propertyEClass.getClassifierID();
switch (propertyEClass.getClassifierID()) {
case PropertiesPackage.CSV_FILE_CONNECTION_ITEM:
case PropertiesPackage.DATABASE_CONNECTION_ITEM:
case PropertiesPackage.SAP_CONNECTION_ITEM:
case PropertiesPackage.DELIMITED_FILE_CONNECTION_ITEM:
case PropertiesPackage.POSITIONAL_FILE_CONNECTION_ITEM:
case PropertiesPackage.CONTEXT_ITEM:
case PropertiesPackage.PROCESS_ITEM:
case PropertiesPackage.JOBLET_PROCESS_ITEM:
case PropertiesPackage.ROUTINE_ITEM:
case PropertiesPackage.REG_EX_FILE_CONNECTION_ITEM:
case PropertiesPackage.GENERIC_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDAP_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDIF_FILE_CONNECTION_ITEM:
case PropertiesPackage.XML_FILE_CONNECTION_ITEM:
case PropertiesPackage.EXCEL_FILE_CONNECTION_ITEM:
case PropertiesPackage.SALESFORCE_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.WSDL_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.EBCDIC_CONNECTION_ITEM:
case PropertiesPackage.HL7_CONNECTION_ITEM:
case PropertiesPackage.FTP_CONNECTION_ITEM:
case PropertiesPackage.BRMS_CONNECTION_ITEM:
case PropertiesPackage.MDM_CONNECTION_ITEM:
case PropertiesPackage.JOB_SCRIPT_ITEM:
case PropertiesPackage.SQL_PATTERN_ITEM:
case PropertiesPackage.EDIFACT_CONNECTION_ITEM:
case PropertiesPackage.VALIDATION_RULES_CONNECTION_ITEM:
      status=repositoryFactory.getTechnicalStatus();
    break;
case PropertiesPackage.RULES_ITEM:
  status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.LINK_RULES_ITEM:
status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.BUSINESS_PROCESS_ITEM:
case PropertiesPackage.SVG_BUSINESS_PROCESS_ITEM:
case PropertiesPackage.DOCUMENTATION_ITEM:
status=repositoryFactory.getDocumentationStatus();
break;
}
if (status == null) {
if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
if (service != null) {
boolean flag=service.isServiceItem(i);
if (flag) {
status=repositoryFactory.getTechnicalStatus();
}
}
}
}
}
if (status == null) {
status=new ArrayList<Status>();
}
toMaps(status);
return status;
}",0.925934213470575
129975,"public List<Status> getStatusList(Property property) throws PersistenceException {
  List<Status> status=null;
  Item item=property.getItem();
  if (item != null) {
    EClass propertyEClass=item.eClass();
    int i=propertyEClass.getClassifierID();
switch (propertyEClass.getClassifierID()) {
case PropertiesPackage.CSV_FILE_CONNECTION_ITEM:
case PropertiesPackage.DATABASE_CONNECTION_ITEM:
case PropertiesPackage.SAP_CONNECTION_ITEM:
case PropertiesPackage.DELIMITED_FILE_CONNECTION_ITEM:
case PropertiesPackage.POSITIONAL_FILE_CONNECTION_ITEM:
case PropertiesPackage.CONTEXT_ITEM:
case PropertiesPackage.PROCESS_ITEM:
case PropertiesPackage.JOBLET_PROCESS_ITEM:
case PropertiesPackage.ROUTINE_ITEM:
case PropertiesPackage.REG_EX_FILE_CONNECTION_ITEM:
case PropertiesPackage.GENERIC_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDAP_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDIF_FILE_CONNECTION_ITEM:
case PropertiesPackage.XML_FILE_CONNECTION_ITEM:
case PropertiesPackage.EXCEL_FILE_CONNECTION_ITEM:
case PropertiesPackage.SALESFORCE_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.WSDL_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.EBCDIC_CONNECTION_ITEM:
case PropertiesPackage.HL7_CONNECTION_ITEM:
case PropertiesPackage.FTP_CONNECTION_ITEM:
case PropertiesPackage.BRMS_CONNECTION_ITEM:
case PropertiesPackage.MDM_CONNECTION_ITEM:
case PropertiesPackage.JOB_SCRIPT_ITEM:
case PropertiesPackage.SQL_PATTERN_ITEM:
case PropertiesPackage.EDIFACT_CONNECTION_ITEM:
case PropertiesPackage.VALIDATION_RULES_CONNECTION_ITEM:
      status=repositoryFactory.getTechnicalStatus();
    break;
case PropertiesPackage.RULES_ITEM:
  status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.LINK_RULES_ITEM:
status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.BUSINESS_PROCESS_ITEM:
case PropertiesPackage.SVG_BUSINESS_PROCESS_ITEM:
case PropertiesPackage.DOCUMENTATION_ITEM:
status=repositoryFactory.getDocumentationStatus();
break;
}
}
if (status == null) {
status=new ArrayList<Status>();
}
toMaps(status);
return status;
}","public List<Status> getStatusList(Property property) throws PersistenceException {
  List<Status> status=null;
  Item item=property.getItem();
  if (item != null) {
    EClass propertyEClass=item.eClass();
    int i=propertyEClass.getClassifierID();
switch (propertyEClass.getClassifierID()) {
case PropertiesPackage.CSV_FILE_CONNECTION_ITEM:
case PropertiesPackage.DATABASE_CONNECTION_ITEM:
case PropertiesPackage.SAP_CONNECTION_ITEM:
case PropertiesPackage.DELIMITED_FILE_CONNECTION_ITEM:
case PropertiesPackage.POSITIONAL_FILE_CONNECTION_ITEM:
case PropertiesPackage.CONTEXT_ITEM:
case PropertiesPackage.PROCESS_ITEM:
case PropertiesPackage.JOBLET_PROCESS_ITEM:
case PropertiesPackage.ROUTINE_ITEM:
case PropertiesPackage.REG_EX_FILE_CONNECTION_ITEM:
case PropertiesPackage.GENERIC_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDAP_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.LDIF_FILE_CONNECTION_ITEM:
case PropertiesPackage.XML_FILE_CONNECTION_ITEM:
case PropertiesPackage.EXCEL_FILE_CONNECTION_ITEM:
case PropertiesPackage.SALESFORCE_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.WSDL_SCHEMA_CONNECTION_ITEM:
case PropertiesPackage.EBCDIC_CONNECTION_ITEM:
case PropertiesPackage.HL7_CONNECTION_ITEM:
case PropertiesPackage.FTP_CONNECTION_ITEM:
case PropertiesPackage.BRMS_CONNECTION_ITEM:
case PropertiesPackage.MDM_CONNECTION_ITEM:
case PropertiesPackage.JOB_SCRIPT_ITEM:
case PropertiesPackage.SQL_PATTERN_ITEM:
case PropertiesPackage.EDIFACT_CONNECTION_ITEM:
case PropertiesPackage.VALIDATION_RULES_CONNECTION_ITEM:
      status=repositoryFactory.getTechnicalStatus();
    break;
case PropertiesPackage.RULES_ITEM:
  status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.LINK_RULES_ITEM:
status=repositoryFactory.getTechnicalStatus();
break;
case PropertiesPackage.BUSINESS_PROCESS_ITEM:
case PropertiesPackage.SVG_BUSINESS_PROCESS_ITEM:
case PropertiesPackage.DOCUMENTATION_ITEM:
status=repositoryFactory.getDocumentationStatus();
break;
}
if (status == null) {
if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
if (service != null) {
boolean flag=service.isServiceItem(i);
if (flag) {
status=repositoryFactory.getTechnicalStatus();
}
}
}
}
}
if (status == null) {
status=new ArrayList<Status>();
}
toMaps(status);
return status;
}",0.925934213470575
129976,"public ModuleNeeded(String context,String moduleName,String informationMsg,boolean required,List<String> installURL){
  super();
  this.context=context;
  this.moduleName=moduleName;
  this.informationMsg=informationMsg;
  this.required=required;
  this.installURL=installURL;
}","public ModuleNeeded(String context,String moduleName,String informationMsg,boolean required,List<String> installURL,String requiredIf){
  super();
  this.context=context;
  this.moduleName=moduleName;
  this.informationMsg=informationMsg;
  this.required=required;
  this.installURL=installURL;
  this.requiredIf=requiredIf;
}",0.9205298013245032
129977,"private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId() + ""String_Node_Str"" + ((Query)parameter).getLabel();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<RelationshipItemBuilder.Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId() + ""String_Node_Str"" + ((Query)parameter).getLabel();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations,true){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.997622444127437
129978,"public RepositoryUpdateManager(Object parameter,List<RelationshipItemBuilder.Relation> relations){
  super();
  this.parameter=parameter;
  this.relations=relations;
}","public RepositoryUpdateManager(Object parameter,List<RelationshipItemBuilder.Relation> relations,boolean isDetectAndUpdate){
  super();
  this.parameter=parameter;
  this.relations=relations;
  this.isDetectAndUpdate=isDetectAndUpdate;
}",0.8267326732673267
129979,"public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}","public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}",0.9592592592592591
129980,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getServerName());
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}",0.9938088041729636
129981,"/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    for (    String xpath : lookupInfo.keySet()) {
      Object lookupValue=lookupInfo.get(xpath);
      org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
      xpathObjectForLookup.setNamespaceURIs(nsMapping);
      Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
      String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
      String pattern=xpathToPatternMap.get(xpath);
      String javaType=xpathToTypeMap.get(xpath);
      Object value=ParserUtils.parse(text,javaType,pattern);
      if (lookupValue == null && value == null) {
      }
 else {
        if (value == null || !value.equals(lookupValue)) {
          reject=true;
          break;
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}","/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}",0.9766071099650028
129982,"public DocumentLookupCache(String matchingMode){
  if (""String_Node_Str"".equals(matchingMode)) {
    cache=new UniqueLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode)) {
    cache=new FirstLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode)) {
    cache=new AllMatchLookupCache();
  }
}","public DocumentLookupCache(String matchingMode){
  if (""String_Node_Str"".equals(matchingMode)) {
    cache=new UniqueLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode)) {
    cache=new FirstLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode) || ""String_Node_Str"".equals(matchingMode)) {
    cache=new AllMatchLookupCache();
  }
}",0.9391304347826088
129983,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getServerName());
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  return null;
}",0.9938088041729636
129984,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
    }
    metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.9778613804080452
129985,"public void initControlData(boolean flag){
  checkConnection(flag);
  if (tableNodeList != null && tableNodeList.size() > 0) {
    threadExecutor=new CustomThreadPoolExecutor(5,new ThreadPoolExecutor.CallerRunsPolicy());
  }
}","public void initControlData(boolean flag){
  checkConnection(flag);
  checkTreeRoot();
  if (tableNodeList != null && tableNodeList.size() > 0) {
    threadExecutor=new CustomThreadPoolExecutor(5,new ThreadPoolExecutor.CallerRunsPolicy());
  }
}",0.9596602972399152
129986,"public void initControlData(boolean flag){
  checkConnection(flag);
  if (tableNodeList != null && tableNodeList.size() > 0) {
    threadExecutor=new CustomThreadPoolExecutor(5,new ThreadPoolExecutor.CallerRunsPolicy());
  }
}","public void initControlData(boolean flag){
  checkConnection(flag);
  checkTreeRoot();
  if (tableNodeList != null && tableNodeList.size() > 0) {
    threadExecutor=new CustomThreadPoolExecutor(5,new ThreadPoolExecutor.CallerRunsPolicy());
  }
}",0.9596602972399152
129987,"public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}","public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}",0.9592592592592591
129988,"private List<TableNode> getTableNodeInfo(){
  List<TableNode> tableNodes=new ArrayList<TableNode>();
  DatabaseConnection connection=(DatabaseConnection)metadataconnection.getCurrentConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(connection);
    if (schemas.isEmpty()) {
      return tableNodes;
    }
 else {
      for (      Schema s : schemas) {
        TableNode schemaNode=new TableNode();
        schemaNode.setSchema(s);
        schemaNode.setValue(s.getName());
        schemaNode.setType(TableNode.SCHEMA);
        schemaNode.setMetadataConn(metadataconnection);
        schemaNode.setParas(tableInfoParameters);
        tableNodes.add(schemaNode);
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      TableNode catalogNode=new TableNode();
      catalogNode.setCatalog(c);
      catalogNode.setValue(c.getName());
      catalogNode.setType(TableNode.CATALOG);
      catalogNode.setMetadataConn(metadataconnection);
      catalogNode.setParas(tableInfoParameters);
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        tableNodes.add(catalogNode);
      }
 else {
        for (        Schema s : schemas) {
          TableNode schemaNode=new TableNode();
          schemaNode.setSchema(s);
          schemaNode.setValue(s.getName());
          schemaNode.setType(TableNode.SCHEMA);
          schemaNode.setMetadataConn(metadataconnection);
          schemaNode.setParas(tableInfoParameters);
          schemaNode.setParent(catalogNode);
          catalogNode.addChild(schemaNode);
        }
        tableNodes.add(catalogNode);
      }
    }
  }
  return tableNodes;
}","private List<TableNode> getTableNodeInfo(){
  List<TableNode> tableNodes=new ArrayList<TableNode>();
  DatabaseConnection connection=(DatabaseConnection)metadataconnection.getCurrentConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(connection);
    if (schemas.isEmpty()) {
      return tableNodes;
    }
 else {
      for (      Schema s : schemas) {
        TableNode schemaNode=new TableNode();
        schemaNode.setSchema(s);
        schemaNode.setValue(s.getName());
        schemaNode.setType(TableNode.SCHEMA);
        schemaNode.setMetadataConn(metadataconnection);
        schemaNode.setParas(tableInfoParameters);
        if (s.getName() != null && !s.getName().equals(MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS)) {
          tableNodes.add(schemaNode);
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      TableNode catalogNode=new TableNode();
      catalogNode.setCatalog(c);
      catalogNode.setValue(c.getName());
      catalogNode.setType(TableNode.CATALOG);
      catalogNode.setMetadataConn(metadataconnection);
      catalogNode.setParas(tableInfoParameters);
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        tableNodes.add(catalogNode);
      }
 else {
        for (        Schema s : schemas) {
          TableNode schemaNode=new TableNode();
          schemaNode.setSchema(s);
          schemaNode.setValue(s.getName());
          schemaNode.setType(TableNode.SCHEMA);
          schemaNode.setMetadataConn(metadataconnection);
          schemaNode.setParas(tableInfoParameters);
          schemaNode.setParent(catalogNode);
          catalogNode.addChild(schemaNode);
        }
        tableNodes.add(catalogNode);
      }
    }
  }
  return tableNodes;
}",0.952934662236988
129989,"public static void removeTablesFromCurrentCatalogOrSchema(String dbsid,String schema,DatabaseConnection dbconn,Collection<? extends MetadataTable> tablesToDelete){
  boolean hasSchemaInCatalog=false;
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,dbconn,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,dbconn,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    c.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    s.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s == null || ""String_Node_Str"".equals(s)) {
        EList<ModelElement> ownedElement=c.getOwnedElement();
        if (ownedElement instanceof EObjectContainmentWithInverseEList) {
          EObjectContainmentWithInverseEList elist=(EObjectContainmentWithInverseEList)ownedElement;
          if (!elist.isEmpty() && elist.size() > 0) {
            for (int i=0; i < elist.size(); i++) {
              Object object=elist.get(i);
              if (object instanceof SchemaImpl) {
                SchemaImpl schemaImpl=(SchemaImpl)object;
                EList<ModelElement> ownedElement2=schemaImpl.getOwnedElement();
                ownedElement2.removeAll(tablesToDelete);
              }
            }
          }
        }
      }
 else {
        s.getOwnedElement().removeAll(tablesToDelete);
      }
    }
  }
 else {
  }
}","public static void removeTablesFromCurrentCatalogOrSchema(String dbsid,String schema,DatabaseConnection dbconn,Collection<? extends MetadataTable> tablesToDelete){
  boolean hasSchemaInCatalog=false;
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,dbconn,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,dbconn,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    c.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    s.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s == null || ""String_Node_Str"".equals(s)) {
        EList<ModelElement> ownedElement=c.getOwnedElement();
        if (ownedElement instanceof EObjectContainmentWithInverseEList) {
          EObjectContainmentWithInverseEList elist=(EObjectContainmentWithInverseEList)ownedElement;
          if (!elist.isEmpty() && elist.size() > 0) {
            for (int i=0; i < elist.size(); i++) {
              Object object=elist.get(i);
              if (object instanceof SchemaImpl) {
                SchemaImpl schemaImpl=(SchemaImpl)object;
                EList<ModelElement> ownedElement2=schemaImpl.getOwnedElement();
                ownedElement2.removeAll(tablesToDelete);
              }
            }
          }
        }
        ownedElement.removeAll(tablesToDelete);
      }
 else {
        s.getOwnedElement().removeAll(tablesToDelete);
      }
    }
  }
 else {
  }
}",0.9875454073689672
129990,"public static void removeTablesFromCurrentCatalogOrSchema(String dbsid,String schema,DatabaseConnection dbconn,Collection<? extends MetadataTable> tablesToDelete){
  boolean hasSchemaInCatalog=false;
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,dbconn,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,dbconn,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    c.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    s.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s == null || ""String_Node_Str"".equals(s)) {
        EList<ModelElement> ownedElement=c.getOwnedElement();
        if (ownedElement instanceof EObjectContainmentWithInverseEList) {
          EObjectContainmentWithInverseEList elist=(EObjectContainmentWithInverseEList)ownedElement;
          if (!elist.isEmpty() && elist.size() > 0) {
            for (int i=0; i < elist.size(); i++) {
              Object object=elist.get(i);
              if (object instanceof SchemaImpl) {
                SchemaImpl schemaImpl=(SchemaImpl)object;
                EList<ModelElement> ownedElement2=schemaImpl.getOwnedElement();
                ownedElement2.removeAll(tablesToDelete);
              }
            }
          }
        }
      }
 else {
        s.getOwnedElement().removeAll(tablesToDelete);
      }
    }
  }
 else {
  }
}","public static void removeTablesFromCurrentCatalogOrSchema(String dbsid,String schema,DatabaseConnection dbconn,Collection<? extends MetadataTable> tablesToDelete){
  boolean hasSchemaInCatalog=false;
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,dbconn,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,dbconn,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    c.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    s.getOwnedElement().removeAll(tablesToDelete);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s == null || ""String_Node_Str"".equals(s)) {
        EList<ModelElement> ownedElement=c.getOwnedElement();
        if (ownedElement instanceof EObjectContainmentWithInverseEList) {
          EObjectContainmentWithInverseEList elist=(EObjectContainmentWithInverseEList)ownedElement;
          if (!elist.isEmpty() && elist.size() > 0) {
            for (int i=0; i < elist.size(); i++) {
              Object object=elist.get(i);
              if (object instanceof SchemaImpl) {
                SchemaImpl schemaImpl=(SchemaImpl)object;
                EList<ModelElement> ownedElement2=schemaImpl.getOwnedElement();
                ownedElement2.removeAll(tablesToDelete);
              }
            }
          }
        }
        ownedElement.removeAll(tablesToDelete);
      }
 else {
        s.getOwnedElement().removeAll(tablesToDelete);
      }
    }
  }
 else {
  }
}",0.9875454073689672
129991,"public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
    }
    metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}","public static synchronized List<TdColumn> returnColumns(IMetadataConnection iMetadataConnection,TableNode tableNode,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  if (tableNode.getType() != TableNode.TABLE) {
    return metadataColumns;
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return metadataColumns;
  }
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  try {
    if (needCreateAndClose || ExtractMetaDataUtils.conn == null || ExtractMetaDataUtils.conn.isClosed()) {
      List list=ExtractMetaDataUtils.getConnection(iMetadataConnection.getDbType(),iMetadataConnection.getUrl(),iMetadataConnection.getUsername(),iMetadataConnection.getPassword(),iMetadataConnection.getDatabase(),iMetadataConnection.getSchema(),iMetadataConnection.getDriverClass(),iMetadataConnection.getDriverJarPath(),iMetadataConnection.getDbVersionString(),iMetadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    dbType=iMetadataConnection.getDbType();
    DatabaseMetaData dbMetaData=ExtractMetaDataUtils.getDatabaseMetaData(ExtractMetaDataUtils.conn,dbType);
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonym(ExtractMetaDataUtils.conn,newNode.getValue());
      if (tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableName);
      fillSynonmsForOracle(iMetadataConnection,metadataColumns,table,tableName);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,iMetadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      ExtractMetaDataUtils.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (dbType != null && (dbType.equals(EDatabaseTypeName.HSQLDB.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) || dbType.equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      ExtractMetaDataUtils.closeConnection();
    }
    if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
      try {
        wapperDriver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  return metadataColumns;
}",0.9778613804080452
129992,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url.startsWith(h2Prefix)) {
        String path=url.substring(h2Prefix.length(),url.length());
        path=PathUtils.getPortablePath(path);
        url=h2Prefix + path;
      }
      return TalendQuoteUtils.addQuotes(url);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getServerName());
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getServerName());
  }
  return null;
}",0.995714918977491
129993,"/** 
 * DOC chuang Comment method ""checkColumnNames"".
 */
public String checkColumnNames(){
  List<SchemaTarget> list=getModel().getBeansList();
  Set<String> conflictNames=new HashSet<String>();
  Set<String> names=new HashSet<String>();
  Map<String,String> con=new HashMap<String,String>();
  int lstSize=list.size();
  for (int i=0; i < lstSize; i++) {
    String name=list.get(i).getTagName();
    String path=list.get(i).getRelativeXPathQuery();
    if (path == null) {
      path=""String_Node_Str"";
    }
    if (name == null)     name=""String_Node_Str"";
    if (!path.contains(""String_Node_Str"") && names.contains(name)) {
      if (con.get(name) != null && !con.get(name).contains(""String_Node_Str""))       conflictNames.add(name);
    }
 else {
      names.add(name);
      con.put(name,path);
    }
  }
  setRowBackground(list,conflictNames);
  if (conflictNames.isEmpty()) {
    return null;
  }
 else {
    StringBuffer buf=new StringBuffer();
    buf.append(Messages.getString(""String_Node_Str""));
    for (    String name : conflictNames) {
      buf.append(name);
      buf.append(""String_Node_Str"");
    }
    buf.deleteCharAt(buf.length() - 1);
    buf.append(Messages.getString(""String_Node_Str""));
    return buf.toString();
  }
}","/** 
 * DOC chuang Comment method ""checkColumnNames"".
 */
public String checkColumnNames(){
  List<SchemaTarget> list=getModel().getBeansList();
  Set<String> conflictNames=new HashSet<String>();
  Set<String> names=new HashSet<String>();
  int lstSize=list.size();
  for (int i=0; i < lstSize; i++) {
    String name=list.get(i).getTagName();
    String path=list.get(i).getRelativeXPathQuery();
    if (path == null) {
      path=""String_Node_Str"";
    }
    if (name == null)     name=""String_Node_Str"";
    if (names.contains(name)) {
      conflictNames.add(name);
    }
 else {
      names.add(name);
    }
  }
  setRowBackground(list,conflictNames);
  if (conflictNames.isEmpty()) {
    return null;
  }
 else {
    StringBuffer buf=new StringBuffer();
    buf.append(Messages.getString(""String_Node_Str""));
    for (    String name : conflictNames) {
      buf.append(name);
      buf.append(""String_Node_Str"");
    }
    buf.deleteCharAt(buf.length() - 1);
    buf.append(Messages.getString(""String_Node_Str""));
    return buf.toString();
  }
}",0.9144594007815892
129994,"private boolean checkResultSchema(UpdateResult result,Object object,Object parameter){
  if (object == null || parameter == null) {
    return false;
  }
  if (object instanceof IMetadataTable) {
    if (parameter instanceof ConnectionItem) {
      ConnectionItem connection=(ConnectionItem)parameter;
      String source=UpdateRepositoryHelper.getRepositorySourceName(connection);
      if (result.getRemark() != null) {
        if (result.getRemark().startsWith(source)) {
          return true;
        }
 else         if (result.isReadOnlyProcess()) {
          return true;
        }
 else {
          String[] split=result.getRemark().split(UpdatesConstants.SEGMENT_LINE);
          if (connection.getProperty() != null && split[0].equals(connection.getProperty().getId())) {
            return true;
          }
        }
      }
    }
 else     if (parameter instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
      IMetadataTable table1=((IMetadataTable)object);
      MetadataTable table2=(org.talend.core.model.metadata.builder.connection.MetadataTable)parameter;
      if (table1.getId() == null || table2.getId() == null) {
        return table1.getLabel().equals(table2.getLabel());
      }
 else {
        return table1.getId().equals(table2.getId());
      }
    }
 else     if (parameter instanceof SAPFunctionUnit) {
      IMetadataTable table1=((IMetadataTable)object);
      return table1.getId().equals(((SAPFunctionUnit)parameter).getMetadataTable().getId());
    }
 else     if (parameter instanceof Connection) {
      Set<MetadataTable> tables=ConnectionHelper.getTables((Connection)parameter);
      if (tables.size() == 1) {
        IMetadataTable table1=((IMetadataTable)object);
        MetadataTable table2=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
        return table1.getId().equals(table2.getId());
      }
    }
  }
  Object parameter2=result.getParameter();
  if (object instanceof String && parameter2 instanceof List) {
    List listParameter=(List)parameter2;
    if (listParameter.get(1) instanceof EUpdateResult) {
      return true;
    }
  }
  return false;
}","private boolean checkResultSchema(UpdateResult result,Object object,Object parameter){
  if (object == null || parameter == null) {
    return false;
  }
  if (object instanceof IMetadataTable) {
    if (parameter instanceof ConnectionItem) {
      ConnectionItem connection=(ConnectionItem)parameter;
      String source=UpdateRepositoryHelper.getRepositorySourceName(connection);
      if (result.getRemark() != null) {
        if (result.getRemark().startsWith(source)) {
          return true;
        }
 else         if (result.isReadOnlyProcess()) {
          return true;
        }
 else {
          String[] split=result.getRemark().split(UpdatesConstants.SEGMENT_LINE);
          if (connection.getProperty() != null && split[0].equals(connection.getProperty().getId())) {
            return true;
          }
        }
      }
    }
 else     if (parameter instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
      IMetadataTable table1=((IMetadataTable)object);
      MetadataTable table2=(org.talend.core.model.metadata.builder.connection.MetadataTable)parameter;
      if (table1.getId() == null || table2.getId() == null) {
        return table1.getLabel().equals(table2.getLabel());
      }
 else {
        return table1.getId().equals(table2.getId());
      }
    }
 else     if (parameter instanceof SAPFunctionUnit) {
      IMetadataTable table1=((IMetadataTable)object);
      return table1.getId().equals(((SAPFunctionUnit)parameter).getMetadataTable().getId());
    }
 else     if (parameter instanceof Connection) {
      Set<MetadataTable> tables=ConnectionHelper.getTables((Connection)parameter);
      if (tables.size() == 1) {
        IMetadataTable table1=((IMetadataTable)object);
        MetadataTable table2=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
        return table1.getId().equals(table2.getId());
      }
      if (parameter instanceof XmlFileConnection) {
        boolean isResult=false;
        for (        MetadataTable table : tables) {
          if (table.getId() != null && table.getId().equals(((IMetadataTable)object).getId())) {
            isResult=true;
            break;
          }
        }
        return isResult;
      }
    }
  }
  Object parameter2=result.getParameter();
  if (object instanceof String && parameter2 instanceof List) {
    List listParameter=(List)parameter2;
    if (listParameter.get(1) instanceof EUpdateResult) {
      return true;
    }
  }
  return false;
}",0.895044362692058
129995,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      }
 else {
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      }
 else {
        Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
        EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
        if (schema != null && schema.size() > 0) {
          XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
          if (xmlXPathLoopDescriptor != null) {
            EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
            if (schemaTargets != null && schemaTargets.size() > 0) {
              for (              SchemaTarget schemaTarget : schemaTargets) {
                schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
              }
            }
          }
        }
        MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
        for (        MetadataTable table : tables) {
          EList<MetadataColumn> columns=table.getColumns();
          Iterator<MetadataColumn> columnsIter=columns.iterator();
          while (columnsIter.hasNext()) {
            MetadataColumn column=columnsIter.next();
            if (schemaTargetMap.size() > 0 && schemaTargetMap.get(column.getLabel()) == null) {
              columnsIter.remove();
            }
          }
        }
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.7933421226104153
129996,"public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}","public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}",0.8595744680851064
129997,"public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}","public boolean isLock(RepositoryNode sourceNode){
  boolean isLock=false;
  try {
    ProxyRepositoryFactory.getInstance().initialize();
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_USER) {
    isLock=true;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.LOCK_BY_OTHER) {
    isLock=true;
  }
  return isLock;
}",0.8595744680851064
129998,"public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.setRCPMode();
    }
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"") && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,""String_Node_Str"",false);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,""String_Node_Str"",false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}","public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.setRCPMode();
    }
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}",0.92330547818013
129999,"@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"")) {
    RegisterManagement.getInstance().validateRegistration();
  }
  if (!CommonsPlugin.isHeadless()) {
    CorePlugin.getDefault().getCodeGeneratorService().initializeTemplates();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
}","@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  if (!CommonsPlugin.isHeadless()) {
    CorePlugin.getDefault().getCodeGeneratorService().initializeTemplates();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
}",0.9198966408268734
130000,"public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.setRCPMode();
    }
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"") && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,""String_Node_Str"",false);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,""String_Node_Str"",false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}","public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.setRCPMode();
    }
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}",0.92330547818013
