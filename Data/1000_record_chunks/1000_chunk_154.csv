record_number,buggy_code,fixed_code,code_similarity
153001,"@Override public void registerAchievements(){
  AchievementInfo info;
  info=infoMap.get(0);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.MISTAKE_THE_GETAWAY));
  }
  info=infoMap.get(1);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.MIGHT_AND_MAGIC));
  }
  info=infoMap.get(2);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.RETRO));
  }
  info=infoMap.get(3);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.JAVLA_SLADDAR));
  }
  info=infoMap.get(4);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.ODINS_KRAFT));
  }
  info=infoMap.get(100);
  if (info != null)   achievements.add(new DesperateTimes(info));
  info=infoMap.get(200);
  if (info != null)   achievements.add(new BetterNotToMash(info));
  postRegisterAchievements();
}","@Override public void registerAchievements(){
  AchievementInfo info;
  info=infoMap.get(0);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.MISTAKE_THE_GETAWAY));
  }
  info=infoMap.get(1);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.MIGHT_AND_MAGIC));
  }
  info=infoMap.get(2);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.RETRO));
  }
  info=infoMap.get(3);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.JAVLA_SLADDAR));
  }
  info=infoMap.get(4);
  if (info != null) {
    achievements.add(new SongAchievement(info,Song.ODINS_KRAFT));
  }
  info=infoMap.get(100);
  if (info != null)   achievements.add(new DesperateTimes(info));
  info=infoMap.get(200);
  if (info != null)   achievements.add(new BetterNotToMash(info));
  info=infoMap.get(500);
  if (info != null)   achievements.add(new AnythingYouCanDo(info));
  postRegisterAchievements();
}",0.9490968801313628
153002,"@Override public void onTouchMove(float x,float y){
  if (!tutorial.isFinished()) {
    tutorial.touchMove(x,y);
    return;
  }
  x-=BBTHSimulation.GAME_X;
  y-=BBTHSimulation.GAME_Y;
  if (x < 0 || y < 0) {
    simulateWallGeneration();
  }
 else   if (currentWall != null) {
    currentWall.b.set(x,y);
  }
  if (BBTHGame.IS_SINGLE_PLAYER) {
    sim.simulateTapMove(x,y,true);
  }
 else {
    sim.recordTapMove(x,y);
  }
}","@Override public void onTouchMove(float x,float y){
  if (!BBTHGame.DEBUG && !tutorial.isFinished()) {
    tutorial.touchMove(x,y);
    return;
  }
  x-=BBTHSimulation.GAME_X;
  y-=BBTHSimulation.GAME_Y;
  if (x < 0 || y < 0) {
    simulateWallGeneration();
  }
 else   if (currentWall != null) {
    currentWall.b.set(x,y);
  }
  if (BBTHGame.IS_SINGLE_PLAYER) {
    sim.simulateTapMove(x,y,true);
  }
 else {
    sim.recordTapMove(x,y);
  }
}",0.9781357882623706
153003,"@Override public void onTouchUp(float x,float y){
  if (!tutorial.isFinished()) {
    tutorial.touchUp(x,y);
    return;
  }
  beatTrack.onTouchUp(x,y);
  if (userScrolling) {
    userScrolling=false;
    return;
  }
  x-=BBTHSimulation.GAME_X;
  y-=BBTHSimulation.GAME_Y;
  simulateWallGeneration();
  if (BBTHGame.IS_SINGLE_PLAYER) {
    sim.simulateTapUp(x,y,true);
  }
 else {
    sim.recordTapUp(x,y);
  }
}","@Override public void onTouchUp(float x,float y){
  if (!BBTHGame.DEBUG && !tutorial.isFinished()) {
    tutorial.touchUp(x,y);
    return;
  }
  beatTrack.onTouchUp(x,y);
  if (userScrolling) {
    userScrolling=false;
    return;
  }
  x-=BBTHSimulation.GAME_X;
  y-=BBTHSimulation.GAME_Y;
  simulateWallGeneration();
  if (BBTHGame.IS_SINGLE_PLAYER) {
    sim.simulateTapUp(x,y,true);
  }
 else {
    sim.recordTapUp(x,y);
  }
}",0.9774614472123369
153004,"public BBTHSimulation(Team localTeam,LockStepProtocol protocol,boolean isServer){
  super(3,0.1f,2,protocol,isServer);
  random.setSeed(0);
  serverReady=true;
  clientReady=false;
  aiController=new AIController();
  accel=new GridAcceleration(GAME_WIDTH,GAME_HEIGHT,GAME_WIDTH / 10);
  team=localTeam;
  serverPlayer=new Player(Team.SERVER,aiController,this);
  clientPlayer=new Player(Team.CLIENT,aiController,this);
  localPlayer=(team == Team.SERVER) ? serverPlayer : clientPlayer;
  remotePlayer=(team == Team.SERVER) ? clientPlayer : serverPlayer;
  playerMap=new HashMap<Boolean,Player>();
  playerMap.put(true,serverPlayer);
  playerMap.put(false,clientPlayer);
  graphGen=new FastGraphGenerator(15.0f,GAME_WIDTH,GAME_HEIGHT);
  accel.insertWalls(graphGen.walls);
  pathFinder=new Pathfinder(graphGen.graph);
  tester=new FastLineOfSightTester(15.f,accel);
  aiController.setPathfinder(pathFinder,graphGen.graph,tester,accel);
  aiController.setUpdateFraction(.1f);
  cachedUnits=new HashSet<Unit>();
}","public BBTHSimulation(Team localTeam,LockStepProtocol protocol,boolean isServer){
  super(3,0.1f,2,protocol,isServer);
  random.setSeed(0);
  serverReady=true;
  clientReady=false;
  aiController=new AIController();
  accel=new GridAcceleration(GAME_WIDTH,GAME_HEIGHT,GAME_WIDTH / 10);
  team=localTeam;
  serverPlayer=new Player(Team.SERVER,aiController,this);
  clientPlayer=new Player(Team.CLIENT,aiController,this);
  localPlayer=(team == Team.SERVER) ? serverPlayer : clientPlayer;
  remotePlayer=(team == Team.SERVER) ? clientPlayer : serverPlayer;
  playerMap=new HashMap<Boolean,Player>();
  playerMap.put(true,serverPlayer);
  playerMap.put(false,clientPlayer);
  graphGen=new FastGraphGenerator(15.0f,GAME_WIDTH,GAME_HEIGHT);
  accel.insertWalls(graphGen.walls);
  pathFinder=new Pathfinder(graphGen.graph);
  tester=new FastLineOfSightTester(15.f,accel);
  aiController.setPathfinder(pathFinder,graphGen.graph,tester,accel);
  aiController.setUpdateFraction(.10f);
  cachedUnits=new HashSet<Unit>();
}",0.999505684626792
153005,"@Override public void onUpdate(float seconds){
  entireUpdateTimer.start();
  if (bluetooth.getState() != State.CONNECTED) {
    beatTrack.stopMusic();
    nextScreen=new GameStatusMessageScreen.DisconnectScreen();
  }
  simUpdateTimer.start();
  sim.onUpdate(seconds);
  simUpdateTimer.stop();
  if (!tutorial.isFinished()) {
    tutorial.update(seconds);
    if (tutorial.isFinished()) {
      sim.recordCustomEvent(0,0,BBTHSimulation.TUTORIAL_DONE);
    }
  }
  if (sim.isReady() && !beatTrack.isPlaying()) {
    beatTrack.startMusic();
  }
  clientHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.clientPlayer.getHealth());
  serverHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.serverPlayer.getHealth());
  if (sim.localPlayer.getHealth() <= 0.f) {
    this.nextScreen=new GameStatusMessageScreen.LoseScreen();
  }
  if (sim.remotePlayer.getHealth() <= 0.f) {
    this.nextScreen=new GameStatusMessageScreen.WinScreen();
  }
  beatTrack.refreshBeats();
  if (cameraInteraction == SNAP_TO_MOST_ADVANCED) {
    Unit mostAdvanced=sim.getOpponentsMostAdvancedUnit();
    if (mostAdvanced != null) {
      this.scrollTo(mostAdvanced.getX(),mostAdvanced.getY() - BBTHGame.HEIGHT / 2);
    }
  }
  particles.tick(seconds);
  entireUpdateTimer.stop();
}","@Override public void onUpdate(float seconds){
  entireUpdateTimer.start();
  if (bluetooth.getState() != State.CONNECTED) {
    beatTrack.stopMusic();
    nextScreen=new GameStatusMessageScreen.DisconnectScreen();
  }
  simUpdateTimer.start();
  sim.onUpdate(seconds);
  simUpdateTimer.stop();
  if (!tutorial.isFinished()) {
    tutorial.update(seconds);
    if (tutorial.isFinished()) {
      sim.recordCustomEvent(0,0,BBTHSimulation.TUTORIAL_DONE);
    }
  }
  if (sim.isReady() && !beatTrack.isPlaying()) {
    beatTrack.startMusic();
  }
  clientHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.clientPlayer.getHealth());
  serverHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.serverPlayer.getHealth());
  if (sim.localPlayer.getHealth() <= 0.f) {
    beatTrack.stopMusic();
    this.nextScreen=new GameStatusMessageScreen.LoseScreen();
  }
  if (sim.remotePlayer.getHealth() <= 0.f) {
    beatTrack.stopMusic();
    this.nextScreen=new GameStatusMessageScreen.WinScreen();
  }
  beatTrack.refreshBeats();
  if (cameraInteraction == SNAP_TO_MOST_ADVANCED) {
    Unit mostAdvanced=sim.getOpponentsMostAdvancedUnit();
    if (mostAdvanced != null) {
      this.scrollTo(mostAdvanced.getX(),mostAdvanced.getY() - BBTHGame.HEIGHT / 2);
    }
  }
  particles.tick(seconds);
  entireUpdateTimer.stop();
}",0.9800443458980044
153006,"private void update(ArrayList<Unit> entities,FlockRulesCalculator flock,Team team){
  int size=entities.size();
  int num_to_update=(int)((size * m_fraction_to_update) + 1);
  if (size == 0) {
    return;
  }
  int last_updated=m_last_updated.get(team);
  if (last_updated > size - 1) {
    last_updated=0;
  }
  int i=last_updated;
  while (num_to_update > 0) {
    Unit entity=entities.get(i);
    if (entity.getType() == UnitType.DEFENDING) {
      m_defensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.ATTACKING) {
      m_offensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.UBER) {
      m_offensive.update(entity,this,flock);
    }
    num_to_update--;
    if (i >= size - 1) {
      i=0;
    }
 else {
      i++;
    }
  }
  if (i >= size - 1) {
    m_last_updated.put(team,0);
  }
 else {
    m_last_updated.put(team,i);
  }
  if (m_tester != null) {
    for (int c=0; c < size; c++) {
      Unit entity=entities.get(c);
      float start_x=entity.getX();
      float start_y=entity.getY();
      float heading=entity.getHeading();
      float startheading=heading;
      boolean clear=false;
      int tries=0;
      while (!clear) {
        if (tries > 100) {
          heading=startheading + MathUtils.PI;
          break;
        }
        float s_x=start_x + 3.0f * FloatMath.cos(heading);
        float s_y=start_y + 3.0f * FloatMath.sin(heading);
        float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
        float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
        float leftx1=s_x + stickoffsetx;
        float lefty1=s_y + stickoffsety;
        float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
        float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
        float rightx1=s_x - stickoffsetx;
        float righty1=s_y - stickoffsety;
        float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
        float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
        Wall result=m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2);
        Wall result2=m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2);
        if (result == null && result2 == null) {
          clear=true;
        }
 else {
          if (result != null) {
            getTurnVector(entity,result,heading);
          }
 else           if (result2 != null) {
            getTurnVector(entity,result2,heading);
          }
          if (m_vec_result.x == 0 && m_vec_result.y == 0) {
            m_vec_result.x=0.01f;
            m_vec_result.y=0.01f;
          }
          float otherangle=MathUtils.getAngle(0,0,m_vec_result.x,m_vec_result.y);
          if (MathUtils.normalizeAngle(otherangle,startheading) - startheading > 0) {
            heading+=.08f;
          }
 else {
            heading-=.08f;
          }
          tries++;
        }
      }
      entity.setVelocity(entity.getSpeed(),heading);
    }
  }
}","private void update(ArrayList<Unit> entities,FlockRulesCalculator flock,Team team){
  int size=entities.size();
  int num_to_update=(int)((size * m_fraction_to_update) + 1);
  if (size == 0) {
    return;
  }
  int last_updated=m_last_updated.get(team);
  if (last_updated > size - 1) {
    last_updated=0;
  }
  int i=last_updated;
  while (num_to_update > 0) {
    Unit entity=entities.get(i);
    if (entity.getType() == UnitType.DEFENDING) {
      m_defensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.ATTACKING) {
      m_offensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.UBER) {
      m_offensive.update(entity,this,flock);
    }
    num_to_update--;
    if (i >= size - 1) {
      i=0;
    }
 else {
      i++;
    }
  }
  if (i > size - 1) {
    m_last_updated.put(team,0);
  }
 else {
    m_last_updated.put(team,i);
  }
  if (m_tester != null) {
    for (int c=0; c < size; c++) {
      Unit entity=entities.get(c);
      float start_x=entity.getX();
      float start_y=entity.getY();
      float heading=entity.getHeading();
      float startheading=heading;
      boolean clear=false;
      int tries=0;
      while (!clear) {
        if (tries > 100) {
          heading=startheading + MathUtils.PI;
          break;
        }
        float s_x=start_x + 3.0f * FloatMath.cos(heading);
        float s_y=start_y + 3.0f * FloatMath.sin(heading);
        float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
        float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
        float leftx1=s_x + stickoffsetx;
        float lefty1=s_y + stickoffsety;
        float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
        float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
        float rightx1=s_x - stickoffsetx;
        float righty1=s_y - stickoffsety;
        float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
        float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
        Wall result=m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2);
        Wall result2=m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2);
        if (result == null && result2 == null) {
          clear=true;
        }
 else {
          if (result != null) {
            getTurnVector(entity,result,heading);
          }
 else           if (result2 != null) {
            getTurnVector(entity,result2,heading);
          }
          if (m_vec_result.x == 0 && m_vec_result.y == 0) {
            m_vec_result.x=0.01f;
            m_vec_result.y=0.01f;
          }
          float otherangle=MathUtils.getAngle(0,0,m_vec_result.x,m_vec_result.y);
          if (MathUtils.normalizeAngle(otherangle,startheading) - startheading > 0) {
            heading+=.08f;
          }
 else {
            heading-=.08f;
          }
          tries++;
        }
      }
      entity.setVelocity(entity.getSpeed(),heading);
    }
  }
}",0.999835336736374
153007,"@Override public int compareTo(Event other){
  return fineTime - other.fineTime;
}","/** 
 * Complicated comparison is to avoid race condition by ensuring the same ordering of events on both the client and the server.
 */
@Override public int compareTo(Event other){
  if (fineTime > other.fineTime) {
    return 1;
  }
 else   if (fineTime < other.fineTime) {
    return -1;
  }
 else   if (id > other.id) {
    return 1;
  }
 else   if (id < other.id) {
    return -1;
  }
 else {
    boolean isServer=((flags & IS_SERVER) != 0);
    boolean otherIsServer=((other.flags & IS_SERVER) != 0);
    if (isServer && !otherIsServer) {
      return 1;
    }
 else     if (!isServer && otherIsServer) {
      return -1;
    }
    return 0;
  }
}",0.1741496598639455
153008,"@Override public void writeTo(DataOutputStream out) throws IOException, InterruptedException {
  LockStep step=outgoing.take();
  out.writeByte(step.events.size());
  out.writeInt(step.coarseTime);
  for (int i=0, count=step.events.size(); i < count; i++) {
    Event event=step.events.get(i);
    out.writeByte(event.type | event.flags);
    out.writeInt(event.fineTime);
    out.writeFloat(event.x);
    out.writeFloat(event.y);
    out.writeByte(event.code);
  }
}","@Override public void writeTo(DataOutputStream out) throws IOException, InterruptedException {
  LockStep step=outgoing.take();
  out.writeByte(step.events.size());
  out.writeInt(step.coarseTime);
  for (int i=0, count=step.events.size(); i < count; i++) {
    Event event=step.events.get(i);
    out.writeInt(event.id);
    out.writeByte(event.type | event.flags);
    out.writeInt(event.fineTime);
    out.writeFloat(event.x);
    out.writeFloat(event.y);
    out.writeByte(event.code);
  }
}",0.9708939708939708
153009,"@Override public void readFrom(DataInputStream in) throws IOException, InterruptedException {
  LockStep step=new LockStep();
  int count=in.readByte();
  step.coarseTime=in.readInt();
  for (int i=0; i < count; i++) {
    Event event=new Event();
    int type=in.readByte();
    event.type=type & 0x03;
    event.flags=type & 0xF8;
    event.fineTime=in.readInt();
    event.x=in.readFloat();
    event.y=in.readFloat();
    event.code=in.readByte();
    step.events.add(event);
  }
  incoming.put(step);
}","@Override public void readFrom(DataInputStream in) throws IOException, InterruptedException {
  LockStep step=new LockStep();
  int count=in.readByte();
  step.coarseTime=in.readInt();
  for (int i=0; i < count; i++) {
    Event event=new Event();
    event.id=in.readInt();
    int type=in.readByte();
    event.type=type & 0x03;
    event.flags=type & 0xF8;
    event.fineTime=in.readInt();
    event.x=in.readFloat();
    event.y=in.readFloat();
    event.code=in.readByte();
    step.events.add(event);
  }
  incoming.put(step);
}",0.9740634005763688
153010,"/** 
 * Helper function for recordTap*() functions.
 */
private final Event makeEvent(float x,float y,int type,boolean isHold,boolean isOnBeat,int code){
  Event event=new Event();
  event.type=type;
  event.flags=(isServer ? Event.IS_SERVER : 0) | (isHold ? Event.IS_HOLD : 0) | (isOnBeat ? Event.IS_ON_BEAT : 0);
  event.fineTime=currentFineTimestep + coarseLag * finePerCoarse;
  event.x=x;
  event.y=y;
  event.code=code;
  return event;
}","/** 
 * Helper function for recordTap*() functions.
 */
private final Event makeEvent(float x,float y,int type,boolean isHold,boolean isOnBeat,int code){
  Event event=new Event();
  event.id=nextID++;
  event.type=type;
  event.flags=(isServer ? Event.IS_SERVER : 0) | (isHold ? Event.IS_HOLD : 0) | (isOnBeat ? Event.IS_ON_BEAT : 0);
  event.fineTime=currentFineTimestep + coarseLag * finePerCoarse;
  event.x=x;
  event.y=y;
  event.code=code;
  return event;
}",0.9768467475192943
153011,"public final void onUpdate(float seconds){
  accumulatedSeconds+=seconds;
  LockStep step;
  while ((step=protocol.readLockStep()) != null) {
    incomingRemoteSteps.add(step);
  }
  for (int i=0; i < 10 && accumulatedSeconds > 0; i++) {
    boolean isCoarse=(currentFineTimestep % finePerCoarse) == 0;
    if (isCoarse) {
      LockStep nextRemoteStep=incomingRemoteSteps.peek();
      LockStep nextLocalStep=incomingLocalSteps.peek();
      if (nextLocalStep == null || nextRemoteStep == null || nextLocalStep.coarseTime != currentCoarseTimestep || nextRemoteStep.coarseTime != currentCoarseTimestep) {
        return;
      }
      nextLocalStep=incomingLocalSteps.remove();
      nextRemoteStep=incomingRemoteSteps.remove();
      if (isServer) {
        nextLocalStep.addEventsToQueue(incomingEvents);
        nextRemoteStep.addEventsToQueue(incomingEvents);
      }
 else {
        nextRemoteStep.addEventsToQueue(incomingEvents);
        nextLocalStep.addEventsToQueue(incomingEvents);
      }
    }
    Event event;
    while ((event=incomingEvents.peek()) != null && event.fineTime == currentFineTimestep) {
      dispatchEvent(incomingEvents.remove());
    }
    if (event != null && event.fineTime < currentFineTimestep) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + event.fineTime + ""String_Node_Str""+ currentFineTimestep);
      System.exit(0);
    }
    update(secondsPerFine);
    if ((++currentFineTimestep % finePerCoarse) == 0) {
      endCurrentTimestep();
      currentCoarseTimestep++;
    }
    accumulatedSeconds-=secondsPerFine;
  }
}","public final void onUpdate(float seconds){
  accumulatedSeconds+=seconds;
  LockStep step;
  while ((step=protocol.readLockStep()) != null) {
    incomingRemoteSteps.add(step);
  }
  for (int i=0; i < 10 && accumulatedSeconds > 0; i++) {
    boolean isCoarse=(currentFineTimestep % finePerCoarse) == 0;
    if (isCoarse) {
      LockStep nextRemoteStep=incomingRemoteSteps.peek();
      LockStep nextLocalStep=incomingLocalSteps.peek();
      if (nextLocalStep == null || nextRemoteStep == null || nextLocalStep.coarseTime != currentCoarseTimestep || nextRemoteStep.coarseTime != currentCoarseTimestep) {
        return;
      }
      nextLocalStep=incomingLocalSteps.remove();
      nextRemoteStep=incomingRemoteSteps.remove();
      nextLocalStep.addEventsToQueue(incomingEvents);
      nextRemoteStep.addEventsToQueue(incomingEvents);
    }
    Event event;
    while ((event=incomingEvents.peek()) != null && event.fineTime == currentFineTimestep) {
      dispatchEvent(incomingEvents.remove());
    }
    if (event != null && event.fineTime < currentFineTimestep) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + event.fineTime + ""String_Node_Str""+ currentFineTimestep);
      System.exit(0);
    }
    update(secondsPerFine);
    if ((++currentFineTimestep % finePerCoarse) == 0) {
      endCurrentTimestep();
      currentCoarseTimestep++;
    }
    accumulatedSeconds-=secondsPerFine;
  }
}",0.9450252951096122
153012,"@Override protected void update(float seconds){
  entireTickTimer.start();
  timestep++;
  accelTickTimer.start();
  accel.clearUnits();
  accel.insertUnits(serverPlayer.units);
  accel.insertUnits(clientPlayer.units);
  accelTickTimer.stop();
  aiTickTimer.start();
  aiControllerTimer.start();
  aiController.update();
  aiControllerTimer.stop();
  serverPlayerTimer.start();
  serverPlayer.update(seconds);
  serverPlayerTimer.stop();
  clientPlayerTimer.start();
  clientPlayer.update(seconds);
  clientPlayerTimer.stop();
  aiTickTimer.stop();
  PARTICLES.tick(seconds);
  RectF sr=serverPlayer.base.getRect();
  RectF cr=clientPlayer.base.getRect();
  accel.getUnitsInAABB(sr.left,sr.top,sr.right,sr.bottom,cachedUnits);
  for (  Unit u : cachedUnits) {
    if (u.getTeam() == Team.CLIENT) {
      serverPlayer.adjustHealth(-10);
    }
    this.notifyUnitDead(u);
  }
  accel.getUnitsInAABB(cr.left,cr.top,cr.right,cr.bottom,cachedUnits);
  for (  Unit u : cachedUnits) {
    if (u.getTeam() == Team.SERVER) {
      clientPlayer.adjustHealth(-10);
    }
    this.notifyUnitDead(u);
  }
  entireTickTimer.stop();
}","@Override protected void update(float seconds){
  if (!self_ready) {
    tutorial.update();
    if (tutorial.isFinished()) {
      recordCustomEvent(0,0,TUTORIAL_DONE);
    }
  }
 else   if (!other_ready) {
    tutorial.displayWait();
  }
 else {
    tutorial.hide();
  }
  if (other_ready && self_ready) {
    entireTickTimer.start();
    timestep++;
    accelTickTimer.start();
    accel.clearUnits();
    accel.insertUnits(serverPlayer.units);
    accel.insertUnits(clientPlayer.units);
    accelTickTimer.stop();
    aiTickTimer.start();
    aiControllerTimer.start();
    aiController.update();
    aiControllerTimer.stop();
    serverPlayerTimer.start();
    serverPlayer.update(seconds);
    serverPlayerTimer.stop();
    clientPlayerTimer.start();
    clientPlayer.update(seconds);
    clientPlayerTimer.stop();
    aiTickTimer.stop();
    PARTICLES.tick(seconds);
    RectF sr=serverPlayer.base.getRect();
    RectF cr=clientPlayer.base.getRect();
    accel.getUnitsInAABB(sr.left,sr.top,sr.right,sr.bottom,cachedUnits);
    for (    Unit u : cachedUnits) {
      if (u.getTeam() == Team.CLIENT) {
        serverPlayer.adjustHealth(-10);
      }
      this.notifyUnitDead(u);
    }
    accel.getUnitsInAABB(cr.left,cr.top,cr.right,cr.bottom,cachedUnits);
    for (    Unit u : cachedUnits) {
      if (u.getTeam() == Team.SERVER) {
        clientPlayer.adjustHealth(-10);
      }
      this.notifyUnitDead(u);
    }
    entireTickTimer.stop();
  }
}",0.8684516880093132
153013,"public void draw(Canvas canvas){
  drawGrid(canvas);
  localPlayer.draw(canvas);
  remotePlayer.draw(canvas);
  PARTICLES.draw(canvas,PARTICLE_PAINT);
}","public void draw(Canvas canvas){
  drawGrid(canvas);
  localPlayer.draw(canvas);
  remotePlayer.draw(canvas);
  PARTICLES.draw(canvas,PARTICLE_PAINT);
  localPlayer.postDraw(canvas);
  remotePlayer.postDraw(canvas);
}",0.8238482384823849
153014,"@Override protected void simulateCustomEvent(float x,float y,int code,boolean isServer){
  Player player=playerMap.get(isServer);
  UnitType type=UnitType.fromInt(code);
  if (type != null)   player.setUnitType(type);
}","@Override protected void simulateCustomEvent(float x,float y,int code,boolean isServer){
  Player player=playerMap.get(isServer);
  UnitType type=UnitType.fromInt(code);
  if (type != null) {
    player.setUnitType(type);
  }
 else   if (code == TUTORIAL_DONE) {
    if (player == remotePlayer) {
      other_ready=true;
    }
 else {
      self_ready=true;
    }
  }
}",0.7414965986394558
153015,"public BBTHSimulation(Team localTeam,LockStepProtocol protocol,boolean isServer){
  super(3,0.1f,2,protocol,isServer);
  random.setSeed(0);
  aiController=new AIController();
  accel=new GridAcceleration(GAME_WIDTH,GAME_HEIGHT,GAME_WIDTH / 10);
  team=localTeam;
  serverPlayer=new Player(Team.SERVER,aiController,this);
  clientPlayer=new Player(Team.CLIENT,aiController,this);
  localPlayer=(team == Team.SERVER) ? serverPlayer : clientPlayer;
  remotePlayer=(team == Team.SERVER) ? clientPlayer : serverPlayer;
  playerMap=new HashMap<Boolean,Player>();
  playerMap.put(true,serverPlayer);
  playerMap.put(false,clientPlayer);
  graphGen=new FastGraphGenerator(15.0f,GAME_WIDTH,GAME_HEIGHT);
  accel.insertWalls(graphGen.walls);
  pathFinder=new Pathfinder(graphGen.graph);
  tester=new FastLineOfSightTester(15.f,accel);
  aiController.setPathfinder(pathFinder,graphGen.graph,tester,accel);
  aiController.setUpdateFraction(.1f);
  cachedUnits=new HashSet<Unit>();
}","public BBTHSimulation(Team localTeam,LockStepProtocol protocol,boolean isServer){
  super(3,0.1f,2,protocol,isServer);
  random.setSeed(0);
  tutorial=new Tutorial();
  other_ready=true;
  self_ready=false;
  aiController=new AIController();
  accel=new GridAcceleration(GAME_WIDTH,GAME_HEIGHT,GAME_WIDTH / 10);
  team=localTeam;
  serverPlayer=new Player(Team.SERVER,aiController,this);
  clientPlayer=new Player(Team.CLIENT,aiController,this);
  localPlayer=(team == Team.SERVER) ? serverPlayer : clientPlayer;
  remotePlayer=(team == Team.SERVER) ? clientPlayer : serverPlayer;
  playerMap=new HashMap<Boolean,Player>();
  playerMap.put(true,serverPlayer);
  playerMap.put(false,clientPlayer);
  graphGen=new FastGraphGenerator(15.0f,GAME_WIDTH,GAME_HEIGHT);
  accel.insertWalls(graphGen.walls);
  pathFinder=new Pathfinder(graphGen.graph);
  tester=new FastLineOfSightTester(15.f,accel);
  aiController.setPathfinder(pathFinder,graphGen.graph,tester,accel);
  aiController.setUpdateFraction(.1f);
  cachedUnits=new HashSet<Unit>();
}",0.966616841056303
153016,"public InGameScreen(Team playerTeam,Bluetooth bluetooth,Song song,LockStepProtocol protocol){
  super(null);
  this.team=playerTeam;
  paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  serverHealthPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  clientHealthPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  serverHealthPaint.setColor(Team.SERVER.getBaseColor());
  clientHealthPaint.setColor(Team.CLIENT.getBaseColor());
  this.setSize(BBTHGame.WIDTH,BBTHGame.HEIGHT);
  this.setPosition(0,0);
  this.setScrolls(false);
  label=new UILabel(""String_Node_Str"",null);
  label.setTextSize(10);
  label.setPosition(10,10);
  label.setSize(BBTHGame.WIDTH - 20,10);
  label.setTextAlign(Align.CENTER);
  addSubview(label);
  this.setContentRect(0,0,BBTHSimulation.GAME_WIDTH,BBTHSimulation.GAME_HEIGHT);
  this.bluetooth=bluetooth;
  sim=new BBTHSimulation(playerTeam,protocol,team == Team.SERVER);
  sim.setupSubviews(this);
  if (this.team == Team.SERVER) {
    this.scrollTo(0,BBTHSimulation.GAME_HEIGHT / 2 - BBTHGame.HEIGHT);
  }
 else {
    this.scrollTo(0,BBTHSimulation.GAME_HEIGHT / 2);
  }
  beatTrack=new BeatTrack(song,this);
  beatTrack.startMusic();
  paint=new Paint();
  paint.setAntiAlias(true);
  paint.setStrokeWidth(2.0f);
  paint.setStrokeJoin(Join.ROUND);
  paint.setTextSize(20);
  paint.setAntiAlias(true);
  paint.setStrokeWidth(2.f);
  particles=new ParticleSystem(200,0.5f);
  minimapRect=new RectF(BBTHGame.WIDTH - 50,BBTHGame.HEIGHT / 2 + HEALTHBAR_HEIGHT,BBTHGame.WIDTH,BBTHGame.HEIGHT - HEALTHBAR_HEIGHT);
  serverHealthRect=new RectF(minimapRect.left,minimapRect.top - HEALTHBAR_HEIGHT,minimapRect.right,minimapRect.top);
  clientHealthRect=new RectF(minimapRect.left,minimapRect.bottom,minimapRect.right,minimapRect.bottom + HEALTHBAR_HEIGHT);
}","public InGameScreen(Team playerTeam,Bluetooth bluetooth,Song song,LockStepProtocol protocol){
  super(null);
  this.team=playerTeam;
  paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  serverHealthPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  clientHealthPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  serverHealthPaint.setColor(Team.SERVER.getBaseColor());
  clientHealthPaint.setColor(Team.CLIENT.getBaseColor());
  this.setSize(BBTHGame.WIDTH,BBTHGame.HEIGHT);
  this.setPosition(0,0);
  this.setScrolls(false);
  label=new UILabel(""String_Node_Str"",null);
  label.setTextSize(10);
  label.setPosition(10,10);
  label.setSize(BBTHGame.WIDTH - 20,10);
  label.setTextAlign(Align.CENTER);
  addSubview(label);
  this.setContentRect(0,0,BBTHSimulation.GAME_WIDTH,BBTHSimulation.GAME_HEIGHT);
  this.bluetooth=bluetooth;
  sim=new BBTHSimulation(playerTeam,protocol,team == Team.SERVER);
  sim.setupSubviews(this);
  if (this.team == Team.SERVER) {
    this.scrollTo(0,BBTHSimulation.GAME_HEIGHT / 2 - BBTHGame.HEIGHT);
  }
 else {
    this.scrollTo(0,BBTHSimulation.GAME_HEIGHT / 2);
  }
  beatTrack=new BeatTrack(song,this);
  paint=new Paint();
  paint.setAntiAlias(true);
  paint.setStrokeWidth(2.0f);
  paint.setStrokeJoin(Join.ROUND);
  paint.setTextSize(20);
  paint.setAntiAlias(true);
  paint.setStrokeWidth(2.f);
  particles=new ParticleSystem(200,0.5f);
  minimapRect=new RectF(BBTHGame.WIDTH - 50,BBTHGame.HEIGHT / 2 + HEALTHBAR_HEIGHT,BBTHGame.WIDTH,BBTHGame.HEIGHT - HEALTHBAR_HEIGHT);
  serverHealthRect=new RectF(minimapRect.left,minimapRect.top - HEALTHBAR_HEIGHT,minimapRect.right,minimapRect.top);
  clientHealthRect=new RectF(minimapRect.left,minimapRect.bottom,minimapRect.right,minimapRect.bottom + HEALTHBAR_HEIGHT);
}",0.9925115207373272
153017,"@Override public void onUpdate(float seconds){
  entireUpdateTimer.start();
  label.setText(""String_Node_Str"" + sim.getTimestep());
  if (bluetooth.getState() != State.CONNECTED) {
    beatTrack.stopMusic();
    nextScreen=new GameStatusMessageScreen.DisconnectScreen();
  }
  simUpdateTimer.start();
  sim.onUpdate(seconds);
  simUpdateTimer.stop();
  clientHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.localPlayer.getHealth());
  serverHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.remotePlayer.getHealth());
  if (sim.localPlayer.getHealth() <= 0.f) {
  }
  if (sim.remotePlayer.getHealth() <= 0.f) {
  }
  beatTrack.refreshBeats();
  Unit mostAdvanced=sim.getOpponentsMostAdvancedUnit();
  if (mostAdvanced != null) {
    this.scrollTo(mostAdvanced.getX(),mostAdvanced.getY() - BBTHGame.HEIGHT / 2);
  }
  particles.tick(seconds);
  entireUpdateTimer.stop();
}","@Override public void onUpdate(float seconds){
  entireUpdateTimer.start();
  label.setText(""String_Node_Str"" + sim.getTimestep());
  if (bluetooth.getState() != State.CONNECTED) {
    beatTrack.stopMusic();
    nextScreen=new GameStatusMessageScreen.DisconnectScreen();
  }
  simUpdateTimer.start();
  sim.onUpdate(seconds);
  simUpdateTimer.stop();
  if (sim.isReady() && !beatTrack.isPlaying()) {
    beatTrack.startMusic();
  }
  clientHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.localPlayer.getHealth());
  serverHealthRect.right=MathUtils.scale(0,100,minimapRect.left + 1,minimapRect.right - 1,sim.remotePlayer.getHealth());
  if (sim.localPlayer.getHealth() <= 0.f) {
  }
  if (sim.remotePlayer.getHealth() <= 0.f) {
  }
  beatTrack.refreshBeats();
  Unit mostAdvanced=sim.getOpponentsMostAdvancedUnit();
  if (mostAdvanced != null) {
    this.scrollTo(mostAdvanced.getX(),mostAdvanced.getY() - BBTHGame.HEIGHT / 2);
  }
  particles.tick(seconds);
  entireUpdateTimer.stop();
}",0.958904109589041
153018,"public Player(Team team,AIController controller,UnitManager unitManager){
  this.team=team;
  this.unitManager=unitManager;
  units=new ArrayList<Unit>();
  base=new Base(this,team);
  _health=100;
  setCombo(0);
  paint=new Paint();
  paint.setStrokeWidth(2.0f);
  paint.setStrokeJoin(Join.ROUND);
  paint.setTextSize(20);
  paint.setAntiAlias(true);
  paint.setColor(team.getUnitColor());
  paint.setStrokeCap(Cap.ROUND);
switch (team) {
case CLIENT:
    base.setAnchor(Anchor.BOTTOM_LEFT);
  base.setPosition(0,BBTHSimulation.GAME_HEIGHT);
break;
case SERVER:
base.setAnchor(Anchor.TOP_LEFT);
base.setPosition(0,0);
break;
}
this.aiController=controller;
selector=new UnitSelector(team,unitManager);
walls=new ArrayList<WallUnit>();
}","public Player(Team team,AIController controller,UnitManager unitManager){
  this.team=team;
  this.unitManager=unitManager;
  units=new ArrayList<Unit>();
  base=new Base(this,team);
  _health=100;
  setCombo(0);
  paint=new Paint();
  paint.setStrokeWidth(2.0f);
  paint.setStrokeJoin(Join.ROUND);
  paint.setTextSize(20);
  paint.setAntiAlias(true);
  paint.setColor(team.getUnitColor());
  paint.setStrokeCap(Cap.ROUND);
switch (team) {
case CLIENT:
    base.setAnchor(Anchor.BOTTOM_LEFT);
  base.setPosition(0,BBTHSimulation.GAME_HEIGHT);
break;
case SERVER:
base.setAnchor(Anchor.TOP_LEFT);
base.setPosition(0,0);
break;
}
this.aiController=controller;
selector=new UnitSelector(team,unitManager,BBTHSimulation.PARTICLES);
walls=new ArrayList<WallUnit>();
}",0.9833222148098733
153019,"public void draw(Canvas canvas){
  base.onDraw(canvas);
  paint.setColor(team.getWallColor());
  for (int i=0; i < walls.size(); i++) {
    walls.get(i).draw(canvas);
  }
  paint.setStyle(Style.STROKE);
  paint.setColor(team.getUnitColor());
  for (int i=0; i < units.size(); i++) {
    units.get(i).draw(canvas);
  }
  paint.setStyle(Style.FILL);
}","public void draw(Canvas canvas){
  base.onDraw(canvas);
  paint.setColor(team.getWallColor());
  for (int i=0; i < walls.size(); i++) {
    walls.get(i).drawChassis(canvas);
  }
  paint.setStyle(Style.STROKE);
  paint.setColor(team.getUnitColor());
  for (int i=0; i < units.size(); i++) {
    units.get(i).drawChassis(canvas);
  }
  for (int i=0; i < units.size(); i++) {
    units.get(i).drawEffects(canvas);
  }
}",0.8392156862745098
153020,"public void drawForMiniMap(Canvas canvas){
  paint.setStyle(Style.FILL);
  paint.setColor(team.getUnitColor());
  for (int i=0; i < units.size(); i++) {
    units.get(i).drawForMiniMap(canvas);
  }
  paint.setColor(team.getWallColor());
  for (int i=0; i < walls.size(); i++) {
    walls.get(i).draw(canvas);
  }
}","public void drawForMiniMap(Canvas canvas){
  paint.setStyle(Style.FILL);
  paint.setColor(team.getUnitColor());
  for (int i=0; i < units.size(); i++) {
    units.get(i).drawForMiniMap(canvas);
  }
  paint.setColor(team.getWallColor());
  for (int i=0; i < walls.size(); i++) {
    walls.get(i).drawChassis(canvas);
  }
}",0.988976377952756
153021,"public Wall endWall(float x,float y){
  currentWall.b.set(x,y);
  currentWall.updateLength();
  if (currentWall.length < BBTHSimulation.MIN_WALL_LENGTH) {
    return null;
  }
  walls.add(new WallUnit(currentWall,unitManager,team,paint));
  Wall toReturn=currentWall;
  currentWall=null;
  return toReturn;
}","public Wall endWall(float x,float y){
  currentWall.b.set(x,y);
  currentWall.updateLength();
  if (currentWall.length < BBTHSimulation.MIN_WALL_LENGTH) {
    return null;
  }
  walls.add(new WallUnit(currentWall,unitManager,team,paint,BBTHSimulation.PARTICLES));
  Wall toReturn=currentWall;
  currentWall=null;
  return toReturn;
}",0.9204368174726988
153022,"public void spawnUnit(float x,float y){
  for (int i=0; i < 10; ++i) {
    float angle=MathUtils.randInRange(0,2 * MathUtils.PI);
    float xVel=MathUtils.randInRange(25.f,50.f) * FloatMath.cos(angle);
    float yVel=MathUtils.randInRange(25.f,50.f) * FloatMath.sin(angle);
    BBTHSimulation.PARTICLES.createParticle().circle().velocity(xVel,yVel).shrink(0.1f,0.15f).radius(3.0f).position(x,y).color(team.getRandomShade());
  }
  Unit newUnit=null;
  if (_combo != 0 && _combo % BBTHSimulation.UBER_UNIT_THRESHOLD == 0) {
    newUnit=UnitType.UBER.createUnit(unitManager,team,paint);
  }
 else {
    newUnit=selector.getUnitType().createUnit(unitManager,team,paint);
  }
  newUnit.setPosition(x,y);
  if (team == Team.SERVER) {
    newUnit.setVelocity(BBTHSimulation.randInRange(30,70),MathUtils.PI / 2.f);
  }
 else {
    newUnit.setVelocity(BBTHSimulation.randInRange(30,70),-MathUtils.PI / 2.f);
  }
  aiController.addEntity(newUnit);
  units.add(newUnit);
}","public void spawnUnit(float x,float y){
  for (int i=0; i < 10; ++i) {
    float angle=MathUtils.randInRange(0,2 * MathUtils.PI);
    float xVel=MathUtils.randInRange(25.f,50.f) * FloatMath.cos(angle);
    float yVel=MathUtils.randInRange(25.f,50.f) * FloatMath.sin(angle);
    BBTHSimulation.PARTICLES.createParticle().circle().velocity(xVel,yVel).shrink(0.1f,0.15f).radius(3.0f).position(x,y).color(team.getRandomShade());
  }
  Unit newUnit=null;
  if (_combo != 0 && _combo % BBTHSimulation.UBER_UNIT_THRESHOLD == 0) {
    newUnit=UnitType.UBER.createUnit(unitManager,team,paint,BBTHSimulation.PARTICLES);
  }
 else {
    newUnit=selector.getUnitType().createUnit(unitManager,team,paint,BBTHSimulation.PARTICLES);
  }
  newUnit.setPosition(x,y);
  if (team == Team.SERVER) {
    newUnit.setVelocity(BBTHSimulation.randInRange(30,70),MathUtils.PI / 2.f);
  }
 else {
    newUnit.setVelocity(BBTHSimulation.randInRange(30,70),-MathUtils.PI / 2.f);
  }
  aiController.addEntity(newUnit);
  units.add(newUnit);
}",0.9746707193515703
153023,"public UnitSelector(Team team,UnitManager mom){
  currentUnitType=UnitType.ATTACKING;
  rectPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  rectPaint.setARGB(127,0,0,0);
  unitPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  unitPaint.setStrokeWidth(2.0f);
  unitPaint.setStrokeJoin(Join.ROUND);
  unitPaint.setStyle(Style.STROKE);
  unitPaint.setAntiAlias(true);
  unitPaint.setStrokeCap(Cap.ROUND);
  attacker=UnitType.ATTACKING.createUnit(mom,team,unitPaint);
  attacker.setPosition(DIMENSIONS.centerX(),UNIT_HEIGHT / 2);
  defender=UnitType.DEFENDING.createUnit(mom,team,unitPaint);
  defender.setPosition(DIMENSIONS.centerX(),UNIT_HEIGHT + UNIT_HEIGHT / 2);
}","public UnitSelector(Team team,UnitManager mom,ParticleSystem particles){
  currentUnitType=UnitType.ATTACKING;
  rectPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  rectPaint.setARGB(127,0,0,0);
  unitPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  unitPaint.setStrokeWidth(2.0f);
  unitPaint.setStrokeJoin(Join.ROUND);
  unitPaint.setStyle(Style.STROKE);
  unitPaint.setAntiAlias(true);
  unitPaint.setStrokeCap(Cap.ROUND);
  attacker=UnitType.ATTACKING.createUnit(mom,team,unitPaint,particles);
  attacker.setPosition(DIMENSIONS.centerX(),UNIT_HEIGHT / 2);
  defender=UnitType.DEFENDING.createUnit(mom,team,unitPaint,particles);
  defender.setPosition(DIMENSIONS.centerX(),UNIT_HEIGHT + UNIT_HEIGHT / 2);
}",0.9665924276169264
153024,"public void draw(Canvas canvas){
  canvas.drawRect(DIMENSIONS,rectPaint);
  if (this.currentUnitType == UnitType.ATTACKING) {
    unitPaint.setColor(Color.WHITE);
    attacker.draw(canvas);
    unitPaint.setColor(Color.GRAY);
    defender.draw(canvas);
  }
 else   if (this.currentUnitType == UnitType.DEFENDING) {
    unitPaint.setColor(Color.WHITE);
    defender.draw(canvas);
    unitPaint.setColor(Color.GRAY);
    attacker.draw(canvas);
  }
}","public void draw(Canvas canvas){
  canvas.drawRect(DIMENSIONS,rectPaint);
  if (this.currentUnitType == UnitType.ATTACKING) {
    unitPaint.setColor(Color.WHITE);
    attacker.drawChassis(canvas);
    unitPaint.setColor(Color.GRAY);
    defender.drawChassis(canvas);
  }
 else   if (this.currentUnitType == UnitType.DEFENDING) {
    unitPaint.setColor(Color.WHITE);
    defender.drawChassis(canvas);
    unitPaint.setColor(Color.GRAY);
    attacker.drawChassis(canvas);
  }
}",0.9696312364425164
153025,"public void draw(Canvas canvas){
  drawGrid(canvas);
  paint.setColor(Color.YELLOW);
  for (int i=0; i < graphGen.walls.size(); i++) {
    Wall w=graphGen.walls.get(i);
    canvas.drawLine(w.a.x,w.a.y,w.b.x,w.b.y,paint);
  }
  localPlayer.draw(canvas);
  remotePlayer.draw(canvas);
}","public void draw(Canvas canvas){
  drawGrid(canvas);
  localPlayer.draw(canvas);
  remotePlayer.draw(canvas);
}",0.5634517766497462
153026,"public BBTHSimulation(Team localTeam,LockStepProtocol protocol,boolean isServer){
  super(6,0.1f,2,protocol,isServer);
  aiController=new AIController();
  accel=new GridAcceleration(GAME_WIDTH,GAME_HEIGHT,GAME_WIDTH / 10);
  team=localTeam;
  serverPlayer=new Player(Team.SERVER,aiController);
  clientPlayer=new Player(Team.CLIENT,aiController);
  localPlayer=(team == Team.SERVER) ? serverPlayer : clientPlayer;
  remotePlayer=(team == Team.SERVER) ? clientPlayer : serverPlayer;
  playerMap=new HashMap<Boolean,Player>();
  playerMap.put(true,serverPlayer);
  playerMap.put(false,clientPlayer);
  graphGen=new FastGraphGenerator(15.0f,GAME_WIDTH - 10,GAME_HEIGHT - 10);
  accel.insertWalls(graphGen.walls);
  pathFinder=new Pathfinder(graphGen.graph);
  tester=new FastLineOfSightTester(15.f,accel);
  aiController.setPathfinder(pathFinder,graphGen.graph,tester,accel);
  aiController.setUpdateFraction(.3f);
  cachedUnits=new HashSet<Unit>();
}","public BBTHSimulation(Team localTeam,LockStepProtocol protocol,boolean isServer){
  super(6,0.1f,2,protocol,isServer);
  aiController=new AIController();
  accel=new GridAcceleration(GAME_WIDTH,GAME_HEIGHT,GAME_WIDTH / 10);
  team=localTeam;
  serverPlayer=new Player(Team.SERVER,aiController);
  clientPlayer=new Player(Team.CLIENT,aiController);
  localPlayer=(team == Team.SERVER) ? serverPlayer : clientPlayer;
  remotePlayer=(team == Team.SERVER) ? clientPlayer : serverPlayer;
  playerMap=new HashMap<Boolean,Player>();
  playerMap.put(true,serverPlayer);
  playerMap.put(false,clientPlayer);
  graphGen=new FastGraphGenerator(15.0f,GAME_WIDTH,GAME_HEIGHT);
  accel.insertWalls(graphGen.walls);
  pathFinder=new Pathfinder(graphGen.graph);
  tester=new FastLineOfSightTester(15.f,accel);
  aiController.setPathfinder(pathFinder,graphGen.graph,tester,accel);
  aiController.setUpdateFraction(.3f);
  cachedUnits=new HashSet<Unit>();
}",0.9947033898305084
153027,"public void spawnUnit(float x,float y){
  for (int i=0; i < 40; ++i) {
    float angle=MathUtils.randInRange(0,2 * MathUtils.PI);
    float xVel=MathUtils.randInRange(25.f,50.f) * FloatMath.cos(angle);
    float yVel=MathUtils.randInRange(25.f,50.f) * FloatMath.sin(angle);
    particles.createParticle().circle().velocity(xVel,yVel).shrink(0.1f,0.15f).radius(3.0f).position(x,y).color(team.getRandomShade());
  }
  Unit newUnit=selector.getUnitType().createUnit(team,paint);
  newUnit.setPosition(x,y);
  if (team == Team.SERVER) {
    newUnit.setVelocity(MathUtils.randInRange(30,70),MathUtils.PI / 2.f);
  }
 else {
    newUnit.setVelocity(MathUtils.randInRange(30,70),-MathUtils.PI / 2.f);
  }
  aiController.addEntity(newUnit);
  units.add(newUnit);
}","public void spawnUnit(float x,float y){
  for (int i=0; i < 10; ++i) {
    float angle=MathUtils.randInRange(0,2 * MathUtils.PI);
    float xVel=MathUtils.randInRange(25.f,50.f) * FloatMath.cos(angle);
    float yVel=MathUtils.randInRange(25.f,50.f) * FloatMath.sin(angle);
    particles.createParticle().circle().velocity(xVel,yVel).shrink(0.1f,0.15f).radius(3.0f).position(x,y).color(team.getRandomShade());
  }
  Unit newUnit=selector.getUnitType().createUnit(team,paint);
  newUnit.setPosition(x,y);
  if (team == Team.SERVER) {
    newUnit.setVelocity(MathUtils.randInRange(30,70),MathUtils.PI / 2.f);
  }
 else {
    newUnit.setVelocity(MathUtils.randInRange(30,70),-MathUtils.PI / 2.f);
  }
  aiController.addEntity(newUnit);
  units.add(newUnit);
}",0.9986772486772488
153028,"private void update(ArrayList<Unit> entities,FlockRulesCalculator flock,Team team){
  int size=entities.size();
  int num_to_update=(int)((size * m_fraction_to_update) + 1);
  if (size == 0) {
    return;
  }
  int last_updated=m_last_updated.get(team);
  if (last_updated > size - 1) {
    last_updated=0;
  }
  int i=last_updated;
  while (num_to_update > 0) {
    Unit entity=entities.get(i);
    if (entity.getType() == UnitType.DEFENDING) {
      m_defensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.ATTACKING) {
      m_offensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.UBER) {
      m_uber.update(entity,this,flock);
    }
    num_to_update--;
    if (i >= size - 1) {
      i=0;
    }
 else {
      i++;
    }
  }
  if (i >= size - 1) {
    m_last_updated.put(team,0);
  }
 else {
    m_last_updated.put(team,i);
  }
  if (m_tester != null) {
    for (int c=0; c < size; c++) {
      Unit entity=entities.get(c);
      float start_x=entity.getX();
      float start_y=entity.getY();
      float heading=entity.getHeading();
      float startheading=heading;
      boolean clear=false;
      int tries=0;
      while (!clear) {
        if (tries > 100) {
          heading=startheading + MathUtils.PI;
          break;
        }
        float s_x=start_x + 3.0f * FloatMath.cos(heading);
        float s_y=start_y + 3.0f * FloatMath.sin(heading);
        float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
        float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
        float leftx1=s_x + stickoffsetx;
        float lefty1=s_y + stickoffsety;
        float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
        float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
        float rightx1=s_x - stickoffsetx;
        float righty1=s_y - stickoffsety;
        float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
        float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
        Wall result=m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2);
        Wall result2=m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2);
        if (result == null && result2 == null) {
          clear=true;
        }
 else {
          if (result != null) {
            getTurnVector(entity,result,heading);
          }
 else           if (result2 != null) {
            getTurnVector(entity,result2,heading);
          }
          if (m_vec_result.x == 0 && m_vec_result.y == 0) {
            clear=true;
          }
 else {
            float otherangle=MathUtils.getAngle(0,0,m_vec_result.x,m_vec_result.y);
            if (MathUtils.normalizeAngle(otherangle,startheading) - startheading > 0) {
              heading+=.08f;
            }
 else {
              heading-=.08f;
            }
          }
          tries++;
        }
      }
      entity.setVelocity(entity.getSpeed(),heading);
    }
  }
}","private void update(ArrayList<Unit> entities,FlockRulesCalculator flock,Team team){
  int size=entities.size();
  int num_to_update=(int)((size * m_fraction_to_update) + 1);
  if (size == 0) {
    return;
  }
  int last_updated=m_last_updated.get(team);
  if (last_updated > size - 1) {
    last_updated=0;
  }
  int i=last_updated;
  while (num_to_update > 0) {
    Unit entity=entities.get(i);
    if (entity.getType() == UnitType.DEFENDING) {
      m_defensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.ATTACKING) {
      m_offensive.update(entity,this,flock);
    }
 else     if (entity.getType() == UnitType.UBER) {
      m_uber.update(entity,this,flock);
    }
    num_to_update--;
    if (i >= size - 1) {
      i=0;
    }
 else {
      i++;
    }
  }
  if (i >= size - 1) {
    m_last_updated.put(team,0);
  }
 else {
    m_last_updated.put(team,i);
  }
  if (m_tester != null) {
    for (int c=0; c < size; c++) {
      Unit entity=entities.get(c);
      float start_x=entity.getX();
      float start_y=entity.getY();
      float heading=entity.getHeading();
      float startheading=heading;
      boolean clear=false;
      int tries=0;
      while (!clear) {
        if (tries > 100) {
          heading=startheading + MathUtils.PI;
          break;
        }
        float s_x=start_x + 3.0f * FloatMath.cos(heading);
        float s_y=start_y + 3.0f * FloatMath.sin(heading);
        float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
        float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
        float leftx1=s_x + stickoffsetx;
        float lefty1=s_y + stickoffsety;
        float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
        float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
        float rightx1=s_x - stickoffsetx;
        float righty1=s_y - stickoffsety;
        float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
        float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
        Wall result=m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2);
        Wall result2=m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2);
        if (result == null && result2 == null) {
          clear=true;
        }
 else {
          if (result != null) {
            getTurnVector(entity,result,heading);
          }
 else           if (result2 != null) {
            getTurnVector(entity,result2,heading);
          }
          if (m_vec_result.x == 0 && m_vec_result.y == 0) {
            m_vec_result.x=0.01f;
            m_vec_result.y=0.01f;
          }
          float otherangle=MathUtils.getAngle(0,0,m_vec_result.x,m_vec_result.y);
          if (MathUtils.normalizeAngle(otherangle,startheading) - startheading > 0) {
            heading+=.08f;
          }
 else {
            heading-=.08f;
          }
          tries++;
        }
      }
      entity.setVelocity(entity.getSpeed(),heading);
    }
  }
}",0.984137475214805
153029,"public void removeEntity(Unit u){
  m_entities.get(u.getTeam()).add(u);
  m_flocks.get(u.getTeam()).addObject(u);
}","public void removeEntity(Unit u){
  m_entities.get(u.getTeam()).remove(u);
  m_flocks.get(u.getTeam()).removeObject(u);
}",0.923728813559322
153030,"private void do_movement(Unit entity,AIController c,FlockRulesCalculator flock){
  float xcomp=0;
  float ycomp=0;
  float start_x=entity.getX();
  float start_y=entity.getY();
  calculateFlocking(entity,c,flock,m_flock_dir);
  xcomp=m_flock_dir.x;
  ycomp=m_flock_dir.y;
  if (!flock.hasLeader(entity)) {
    Unit enemy=entity.getTarget();
    if (enemy != null) {
      float goal_x=enemy.getX();
      float goal_y=enemy.getY();
      start_point.set(start_x,start_y);
      end_point.set(goal_x,goal_y);
      if (m_tester != null && !m_tester.isLineOfSightClear(start_point,end_point)) {
        PointF start=getClosestNode(start_point);
        PointF end=getClosestNode(end_point);
        ArrayList<PointF> path=null;
        if (start != null && end != null) {
          m_pathfinder.clearPath();
          m_pathfinder.findPath(start,end);
        }
        path=m_pathfinder.getPath();
        path.add(end_point);
        if (path.size() > 1) {
          PointF goal_point=path.get(0);
          if (path.size() > 1 && m_tester.isLineOfSightClear(start_point,path.get(1))) {
            goal_point=path.get(1);
          }
          goal_x=goal_point.x;
          goal_y=goal_point.y;
        }
      }
      float angle=MathUtils.getAngle(entity.getX(),entity.getY(),goal_x,goal_y);
      float objectiveweighting=getObjectiveWeighting();
      xcomp+=objectiveweighting * FloatMath.cos(angle);
      ycomp+=objectiveweighting * FloatMath.sin(angle);
    }
  }
  float wanteddir=MathUtils.getAngle(0,0,xcomp,ycomp);
  float wantedchange=MathUtils.normalizeAngle(wanteddir,entity.getHeading()) - entity.getHeading();
  float actualchange=wantedchange;
  float maxvelchange=getMaxVelChange();
  if (actualchange > maxvelchange) {
    actualchange=maxvelchange;
  }
  if (actualchange < -1.0f * maxvelchange) {
    actualchange=-1.0f * maxvelchange;
  }
  float heading=entity.getHeading() + actualchange;
  boolean clear=false;
  int tries=0;
  while (!clear) {
    if (tries > 150) {
      break;
    }
    float s_x=start_x + 3.0f * FloatMath.cos(heading);
    float s_y=start_y + 3.0f * FloatMath.sin(heading);
    float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
    float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
    float leftx1=s_x + stickoffsetx;
    float lefty1=s_y + stickoffsety;
    float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
    float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
    float rightx1=s_x - stickoffsetx;
    float righty1=s_y - stickoffsety;
    float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
    float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
    if (m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2) && m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2)) {
      clear=true;
    }
 else {
      heading+=.05f * (actualchange > 0 ? 1 : -1);
      tries++;
    }
  }
  entity.setVelocity(getMaxVel(),heading);
}","private void do_movement(Unit entity,AIController c,FlockRulesCalculator flock){
  float xcomp=0;
  float ycomp=0;
  float start_x=entity.getX();
  float start_y=entity.getY();
  calculateFlocking(entity,c,flock,m_flock_dir);
  xcomp=m_flock_dir.x;
  ycomp=m_flock_dir.y;
  if (!flock.hasLeader(entity)) {
    Unit enemy=entity.getTarget();
    if (enemy != null) {
      float goal_x=enemy.getX();
      float goal_y=enemy.getY();
      start_point.set(start_x,start_y);
      end_point.set(goal_x,goal_y);
      if (m_tester != null && !m_tester.isLineOfSightClear(start_point,end_point)) {
        PointF start=getClosestNode(start_point);
        PointF end=getClosestNode(end_point);
        ArrayList<PointF> path=null;
        if (start != null && end != null) {
          m_pathfinder.clearPath();
          m_pathfinder.findPath(start,end);
        }
        path=m_pathfinder.getPath();
        path.add(end_point);
        if (path.size() > 1) {
          PointF goal_point=path.get(0);
          if (path.size() > 1 && m_tester.isLineOfSightClear(start_point,path.get(1))) {
            goal_point=path.get(1);
          }
          goal_x=goal_point.x;
          goal_y=goal_point.y;
        }
      }
      float angle=MathUtils.getAngle(entity.getX(),entity.getY(),goal_x,goal_y);
      float objectiveweighting=getObjectiveWeighting();
      xcomp+=objectiveweighting * FloatMath.cos(angle);
      ycomp+=objectiveweighting * FloatMath.sin(angle);
    }
  }
  float wanteddir=MathUtils.getAngle(0,0,xcomp,ycomp);
  float wantedchange=MathUtils.normalizeAngle(wanteddir,entity.getHeading()) - entity.getHeading();
  float actualchange=wantedchange;
  float maxvelchange=getMaxVelChange();
  if (actualchange > maxvelchange) {
    actualchange=maxvelchange;
  }
  if (actualchange < -1.0f * maxvelchange) {
    actualchange=-1.0f * maxvelchange;
  }
  float heading=entity.getHeading() + actualchange;
  boolean clear=false;
  int tries=0;
  while (!clear) {
    if (tries > 150) {
      break;
    }
    float s_x=start_x + 3.0f * FloatMath.cos(heading);
    float s_y=start_y + 3.0f * FloatMath.sin(heading);
    float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
    float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
    float leftx1=s_x + stickoffsetx;
    float lefty1=s_y + stickoffsety;
    float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
    float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
    float rightx1=s_x - stickoffsetx;
    float righty1=s_y - stickoffsety;
    float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
    float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
    if (m_tester != null && m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2) && m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2)) {
      clear=true;
    }
 else {
      heading+=.05f * (actualchange > 0 ? 1 : -1);
      tries++;
    }
  }
  entity.setVelocity(getMaxVel(),heading);
}",0.9967159277504104
153031,"private void do_movement(Unit entity,AIController c,FlockRulesCalculator flock){
  float xcomp=0;
  float ycomp=0;
  float start_x=entity.getX();
  float start_y=entity.getY();
  calculateFlocking(entity,c,flock,m_flock_dir);
  xcomp=m_flock_dir.x;
  ycomp=m_flock_dir.y;
  if (!flock.hasLeader(entity)) {
    float goal_x=BBTHGame.WIDTH / 2.0f;
    float goal_y=0;
    if (entity.getTeam() == Team.CLIENT) {
      goal_y=BBTHGame.HEIGHT;
    }
    start_point.set(start_x,start_y);
    end_point.set(goal_x,goal_y);
    if (m_tester != null && !m_tester.isLineOfSightClear(start_point,end_point)) {
      PointF start=getClosestNode(start_point);
      PointF end=getClosestNode(end_point);
      ArrayList<PointF> path=null;
      if (start != null && end != null) {
        m_pathfinder.clearPath();
        m_pathfinder.findPath(start,end);
      }
      path=m_pathfinder.getPath();
      path.add(end_point);
      if (path.size() > 1) {
        PointF goal_point=path.get(0);
        if (path.size() > 1 && m_tester.isLineOfSightClear(start_point,path.get(1))) {
          goal_point=path.get(1);
        }
        goal_x=goal_point.x;
        goal_y=goal_point.y;
      }
    }
    float angle=MathUtils.getAngle(entity.getX(),entity.getY(),goal_x,goal_y);
    float objectiveweighting=getObjectiveWeighting();
    xcomp+=objectiveweighting * FloatMath.cos(angle);
    ycomp+=objectiveweighting * FloatMath.sin(angle);
  }
  float wanteddir=MathUtils.getAngle(0,0,xcomp,ycomp);
  float wantedchange=MathUtils.normalizeAngle(wanteddir,entity.getHeading()) - entity.getHeading();
  float actualchange=wantedchange;
  float maxvelchange=getMaxVelChange();
  if (actualchange > maxvelchange) {
    actualchange=maxvelchange;
  }
  if (actualchange < -1.0f * maxvelchange) {
    actualchange=-1.0f * maxvelchange;
  }
  float heading=entity.getHeading() + actualchange;
  boolean clear=false;
  int tries=0;
  while (!clear) {
    if (tries > 150) {
      break;
    }
    float s_x=start_x + 3.0f * FloatMath.cos(heading);
    float s_y=start_y + 3.0f * FloatMath.sin(heading);
    float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
    float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
    float leftx1=s_x + stickoffsetx;
    float lefty1=s_y + stickoffsety;
    float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
    float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
    float rightx1=s_x - stickoffsetx;
    float righty1=s_y - stickoffsety;
    float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
    float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
    if (m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2) && m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2)) {
      clear=true;
    }
 else {
      heading+=.05f * (actualchange > 0 ? 1 : -1);
      tries++;
    }
  }
  entity.setVelocity(getMaxVel(),heading);
}","private void do_movement(Unit entity,AIController c,FlockRulesCalculator flock){
  float xcomp=0;
  float ycomp=0;
  float start_x=entity.getX();
  float start_y=entity.getY();
  calculateFlocking(entity,c,flock,m_flock_dir);
  xcomp=m_flock_dir.x;
  ycomp=m_flock_dir.y;
  if (!flock.hasLeader(entity)) {
    float goal_x=BBTHGame.WIDTH / 2.0f;
    float goal_y=0;
    if (entity.getTeam() == Team.CLIENT) {
      goal_y=BBTHGame.HEIGHT;
    }
    start_point.set(start_x,start_y);
    end_point.set(goal_x,goal_y);
    if (m_tester != null && !m_tester.isLineOfSightClear(start_point,end_point)) {
      PointF start=getClosestNode(start_point);
      PointF end=getClosestNode(end_point);
      ArrayList<PointF> path=null;
      if (start != null && end != null) {
        m_pathfinder.clearPath();
        m_pathfinder.findPath(start,end);
      }
      path=m_pathfinder.getPath();
      path.add(end_point);
      if (path.size() > 1) {
        PointF goal_point=path.get(0);
        if (path.size() > 1 && m_tester.isLineOfSightClear(start_point,path.get(1))) {
          goal_point=path.get(1);
        }
        goal_x=goal_point.x;
        goal_y=goal_point.y;
      }
    }
    float angle=MathUtils.getAngle(entity.getX(),entity.getY(),goal_x,goal_y);
    float objectiveweighting=getObjectiveWeighting();
    xcomp+=objectiveweighting * FloatMath.cos(angle);
    ycomp+=objectiveweighting * FloatMath.sin(angle);
  }
  float wanteddir=MathUtils.getAngle(0,0,xcomp,ycomp);
  float wantedchange=MathUtils.normalizeAngle(wanteddir,entity.getHeading()) - entity.getHeading();
  float actualchange=wantedchange;
  float maxvelchange=getMaxVelChange();
  if (actualchange > maxvelchange) {
    actualchange=maxvelchange;
  }
  if (actualchange < -1.0f * maxvelchange) {
    actualchange=-1.0f * maxvelchange;
  }
  float heading=entity.getHeading() + actualchange;
  boolean clear=false;
  int tries=0;
  while (!clear) {
    if (tries > 150) {
      break;
    }
    float s_x=start_x + 3.0f * FloatMath.cos(heading);
    float s_y=start_y + 3.0f * FloatMath.sin(heading);
    float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
    float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
    float leftx1=s_x + stickoffsetx;
    float lefty1=s_y + stickoffsety;
    float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
    float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
    float rightx1=s_x - stickoffsetx;
    float righty1=s_y - stickoffsety;
    float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
    float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
    if (m_tester != null && m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2) && m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2)) {
      clear=true;
    }
 else {
      heading+=.05f * (actualchange > 0 ? 1 : -1);
      tries++;
    }
  }
  entity.setVelocity(getMaxVel(),heading);
}",0.9966688874083944
153032,"private void do_movement(Unit entity,AIController c,FlockRulesCalculator flock){
  float xcomp=0;
  float ycomp=0;
  float start_x=entity.getX();
  float start_y=entity.getY();
  calculateFlocking(entity,c,flock,m_flock_dir);
  xcomp=m_flock_dir.x;
  ycomp=m_flock_dir.y;
  if (!flock.hasLeader(entity)) {
    Unit enemy=entity.getTarget();
    if (enemy != null) {
      float goal_x=enemy.getX();
      float goal_y=enemy.getY();
      start_point.set(start_x,start_y);
      end_point.set(goal_x,goal_y);
      if (m_tester != null && !m_tester.isLineOfSightClear(start_point,end_point)) {
        PointF start=getClosestNode(start_point);
        PointF end=getClosestNode(end_point);
        ArrayList<PointF> path=null;
        if (start != null && end != null) {
          m_pathfinder.clearPath();
          m_pathfinder.findPath(start,end);
        }
        path=m_pathfinder.getPath();
        path.add(end_point);
        if (path.size() > 1) {
          PointF goal_point=path.get(0);
          if (path.size() > 1 && m_tester.isLineOfSightClear(start_point,path.get(1))) {
            goal_point=path.get(1);
          }
          goal_x=goal_point.x;
          goal_y=goal_point.y;
        }
      }
      float angle=MathUtils.getAngle(entity.getX(),entity.getY(),goal_x,goal_y);
      float objectiveweighting=getObjectiveWeighting();
      xcomp+=objectiveweighting * FloatMath.cos(angle);
      ycomp+=objectiveweighting * FloatMath.sin(angle);
    }
  }
  float wanteddir=MathUtils.getAngle(0,0,xcomp,ycomp);
  float wantedchange=MathUtils.normalizeAngle(wanteddir,entity.getHeading()) - entity.getHeading();
  float actualchange=wantedchange;
  float maxvelchange=getMaxVelChange();
  if (actualchange > maxvelchange) {
    actualchange=maxvelchange;
  }
  if (actualchange < -1.0f * maxvelchange) {
    actualchange=-1.0f * maxvelchange;
  }
  float heading=entity.getHeading() + actualchange;
  boolean clear=false;
  int tries=0;
  while (!clear) {
    if (tries > 150) {
      break;
    }
    float s_x=start_x + 3.0f * FloatMath.cos(heading);
    float s_y=start_y + 3.0f * FloatMath.sin(heading);
    float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
    float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
    float leftx1=s_x + stickoffsetx;
    float lefty1=s_y + stickoffsety;
    float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
    float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
    float rightx1=s_x - stickoffsetx;
    float righty1=s_y - stickoffsety;
    float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
    float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
    if (m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2) && m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2)) {
      clear=true;
    }
 else {
      heading+=.05f * (actualchange > 0 ? 1 : -1);
      tries++;
    }
  }
  entity.setVelocity(getMaxVel(),heading);
}","private void do_movement(Unit entity,AIController c,FlockRulesCalculator flock){
  float xcomp=0;
  float ycomp=0;
  float start_x=entity.getX();
  float start_y=entity.getY();
  calculateFlocking(entity,c,flock,m_flock_dir);
  xcomp=m_flock_dir.x;
  ycomp=m_flock_dir.y;
  if (!flock.hasLeader(entity)) {
    Unit enemy=entity.getTarget();
    if (enemy != null) {
      float goal_x=enemy.getX();
      float goal_y=enemy.getY();
      start_point.set(start_x,start_y);
      end_point.set(goal_x,goal_y);
      if (m_tester != null && !m_tester.isLineOfSightClear(start_point,end_point)) {
        PointF start=getClosestNode(start_point);
        PointF end=getClosestNode(end_point);
        ArrayList<PointF> path=null;
        if (start != null && end != null) {
          m_pathfinder.clearPath();
          m_pathfinder.findPath(start,end);
        }
        path=m_pathfinder.getPath();
        path.add(end_point);
        if (path.size() > 1) {
          PointF goal_point=path.get(0);
          if (path.size() > 1 && m_tester.isLineOfSightClear(start_point,path.get(1))) {
            goal_point=path.get(1);
          }
          goal_x=goal_point.x;
          goal_y=goal_point.y;
        }
      }
      float angle=MathUtils.getAngle(entity.getX(),entity.getY(),goal_x,goal_y);
      float objectiveweighting=getObjectiveWeighting();
      xcomp+=objectiveweighting * FloatMath.cos(angle);
      ycomp+=objectiveweighting * FloatMath.sin(angle);
    }
  }
  float wanteddir=MathUtils.getAngle(0,0,xcomp,ycomp);
  float wantedchange=MathUtils.normalizeAngle(wanteddir,entity.getHeading()) - entity.getHeading();
  float actualchange=wantedchange;
  float maxvelchange=getMaxVelChange();
  if (actualchange > maxvelchange) {
    actualchange=maxvelchange;
  }
  if (actualchange < -1.0f * maxvelchange) {
    actualchange=-1.0f * maxvelchange;
  }
  float heading=entity.getHeading() + actualchange;
  boolean clear=false;
  int tries=0;
  while (!clear) {
    if (tries > 150) {
      break;
    }
    float s_x=start_x + 3.0f * FloatMath.cos(heading);
    float s_y=start_y + 3.0f * FloatMath.sin(heading);
    float stickoffsetx=6.0f * FloatMath.cos(heading - MathUtils.PI / 2.0f);
    float stickoffsety=6.0f * FloatMath.sin(heading - MathUtils.PI / 2.0f);
    float leftx1=s_x + stickoffsetx;
    float lefty1=s_y + stickoffsety;
    float leftx2=leftx1 + 12.0f * FloatMath.cos(heading + MathUtils.PI / 6.0f);
    float lefty2=lefty1 + 12.0f * FloatMath.sin(heading + MathUtils.PI / 6.0f);
    float rightx1=s_x - stickoffsetx;
    float righty1=s_y - stickoffsety;
    float rightx2=rightx1 + 12.0f * FloatMath.cos(heading - MathUtils.PI / 6.0f);
    float righty2=righty1 + 12.0f * FloatMath.sin(heading - MathUtils.PI / 6.0f);
    if (m_tester != null && m_tester.isLineOfSightClear(leftx1,lefty1,leftx2,lefty2) && m_tester.isLineOfSightClear(rightx1,righty1,rightx2,righty2)) {
      clear=true;
    }
 else {
      heading+=.05f * (actualchange > 0 ? 1 : -1);
      tries++;
    }
  }
  entity.setVelocity(getMaxVel(),heading);
}",0.9967159277504104
153033,"@Override protected void update(float seconds){
  timestep++;
  aiController.update();
  localPlayer.update(seconds);
  remotePlayer.update(seconds);
}","@Override protected void update(float seconds){
  timestep++;
  aiController.update();
  if (team == Team.TEAM_1) {
    localPlayer.update(seconds);
    remotePlayer.update(seconds);
  }
 else {
    remotePlayer.update(seconds);
    localPlayer.update(seconds);
  }
}",0.430622009569378
153034,"public void draw(Canvas canvas){
  localPlayer.draw(canvas);
  remotePlayer.draw(canvas);
}","public void draw(Canvas canvas){
  if (team == Team.TEAM_0) {
    remotePlayer.draw(canvas);
    localPlayer.draw(canvas);
  }
 else {
    localPlayer.draw(canvas);
    remotePlayer.draw(canvas);
  }
}",0.2602739726027397
153035,"public InGameScreen(Team playerTeam,Bluetooth bluetooth,LockStepProtocol protocol){
  super(null);
  this.team=playerTeam;
  this.setSize(BBTHGame.WIDTH,BBTHGame.HEIGHT);
  this.setPosition(0,0);
  this.setScrolls(false);
  label=new UILabel(""String_Node_Str"",null);
  label.setTextSize(10);
  label.setPosition(10,10);
  label.setSize(BBTHGame.WIDTH - 20,10);
  label.setTextAlign(Align.CENTER);
  addSubview(label);
  this.bluetooth=bluetooth;
  sim=new BBTHSimulation(playerTeam,protocol);
  sim.setupSubviews(this);
}","public InGameScreen(Team playerTeam,Bluetooth bluetooth,LockStepProtocol protocol){
  super(null);
  MathUtils.resetRandom(0);
  this.team=playerTeam;
  this.setSize(BBTHGame.WIDTH,BBTHGame.HEIGHT);
  this.setPosition(0,0);
  this.setScrolls(false);
  label=new UILabel(""String_Node_Str"",null);
  label.setTextSize(10);
  label.setPosition(10,10);
  label.setSize(BBTHGame.WIDTH - 20,10);
  label.setTextAlign(Align.CENTER);
  addSubview(label);
  this.bluetooth=bluetooth;
  sim=new BBTHSimulation(playerTeam,protocol);
  sim.setupSubviews(this);
}",0.9738317757009346
153036,"public void spawnUnit(float x,float y){
  Unit u=new Unit(team);
switch (this.team) {
case TEAM_0:
    u.setVelocity(MathUtils.randInRange(5,10),(float)Math.PI * 3f / 2f);
  break;
case TEAM_1:
u.setVelocity(MathUtils.randInRange(-10,-5),(float)Math.PI * 3f / 2f);
break;
}
u.setPosition(x,y);
aiController.addEntity(u);
units.add(u);
}","public void spawnUnit(float x,float y){
  Unit u=new Unit(team);
  u.setPosition(x,y);
  aiController.addEntity(u);
  units.add(u);
}",0.5501066098081023
153037,"public void update(float seconds){
  this.update(seconds);
  view.setPosition(this.getX(),this.getY());
}","public void update(float seconds){
  super.update(seconds);
  view.setPosition(this.getX(),this.getY());
}",0.966824644549763
153038,"private void enhanceApplicationArchive(Archive<?> appArchive,TestClass testClass,Manifest manifest){
  if (ClassContainer.class.isAssignableFrom(appArchive.getClass()) == false)   throw new IllegalArgumentException(""String_Node_Str"" + appArchive);
  Class<?> javaClass=testClass.getJavaClass();
  String path=javaClass.getName().replace('.','/') + ""String_Node_Str"";
  if (appArchive.contains(path) == false)   ((ClassContainer<?>)appArchive).addClass(javaClass);
  final OSGiManifestBuilder builder=OSGiManifestBuilder.newInstance();
  Attributes attributes=manifest.getMainAttributes();
  for (  Entry<Object,Object> entry : attributes.entrySet()) {
    String key=entry.getKey().toString();
    String value=(String)entry.getValue();
    if (key.equals(""String_Node_Str""))     continue;
    if (key.equals(Constants.IMPORT_PACKAGE)) {
      String[] imports=value.split(""String_Node_Str"");
      builder.addImportPackages(imports);
      continue;
    }
    if (key.equals(Constants.EXPORT_PACKAGE)) {
      String[] exports=value.split(""String_Node_Str"");
      builder.addExportPackages(exports);
      continue;
    }
    builder.addManifestHeader(key,value);
  }
  builder.addExportPackages(javaClass);
  addImportsForClass(builder,javaClass);
  builder.addImportPackages(""String_Node_Str"",""String_Node_Str"");
  builder.addImportPackages(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  builder.addImportPackages(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  appArchive.delete(ArchivePaths.create(JarFile.MANIFEST_NAME));
  appArchive.add(new Asset(){
    public InputStream openStream(){
      return builder.openStream();
    }
  }
,JarFile.MANIFEST_NAME);
}","private void enhanceApplicationArchive(Archive<?> appArchive,TestClass testClass,Manifest manifest){
  if (ClassContainer.class.isAssignableFrom(appArchive.getClass()) == false)   throw new IllegalArgumentException(""String_Node_Str"" + appArchive);
  Class<?> javaClass=testClass.getJavaClass();
  String path=javaClass.getName().replace('.','/') + ""String_Node_Str"";
  if (appArchive.contains(path) == false)   ((ClassContainer<?>)appArchive).addClass(javaClass);
  final OSGiManifestBuilder builder=OSGiManifestBuilder.newInstance();
  Attributes attributes=manifest.getMainAttributes();
  for (  Entry<Object,Object> entry : attributes.entrySet()) {
    String key=entry.getKey().toString();
    String value=(String)entry.getValue();
    if (key.equals(""String_Node_Str""))     continue;
    if (key.equals(Constants.IMPORT_PACKAGE)) {
      String[] imports=value.split(""String_Node_Str"");
      builder.addImportPackages(imports);
      continue;
    }
    if (key.equals(Constants.EXPORT_PACKAGE)) {
      String[] exports=value.split(""String_Node_Str"");
      builder.addExportPackages(exports);
      continue;
    }
    builder.addManifestHeader(key,value);
  }
  builder.addExportPackages(javaClass);
  addImportsForClass(builder,javaClass);
  builder.addImportPackages(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  builder.addImportPackages(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  builder.addImportPackages(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  appArchive.delete(ArchivePaths.create(JarFile.MANIFEST_NAME));
  appArchive.add(new Asset(){
    public InputStream openStream(){
      return builder.openStream();
    }
  }
,JarFile.MANIFEST_NAME);
}",0.9947521865889212
153039,"@Override public TestResult invoke(TestMethodExecutor testMethodExecutor){
  if (testMethodExecutor == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String testClass=testMethodExecutor.getInstance().getClass().getName();
  String testMethod=testMethodExecutor.getMethod().getName();
  TestResult result=null;
  try {
    MBeanServer mbeanServer=getMBeanServer();
    ObjectName objectName=new ObjectName(JMXTestRunnerMBean.OBJECT_NAME);
    JMXTestRunnerMBean testRunner=getMBeanProxy(mbeanServer,objectName,JMXTestRunnerMBean.class);
    InputStream resultStream=testRunner.runTestMethodRemote(testClass,testMethod);
    ObjectInputStream ois=new ObjectInputStream(resultStream);
    result=(TestResult)ois.readObject();
  }
 catch (  final Throwable e) {
    result=new TestResult(Status.FAILED);
    result.setThrowable(e);
  }
 finally {
    result.setEnd(System.currentTimeMillis());
  }
  return result;
}","@Override public TestResult invoke(TestMethodExecutor testMethodExecutor){
  if (testMethodExecutor == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String testClass=testMethodExecutor.getInstance().getClass().getName();
  String testMethod=testMethodExecutor.getMethod().getName();
  TestResult result=null;
  try {
    MBeanServer mbeanServer=findOrCreateMBeanServer();
    ObjectName objectName=new ObjectName(JMXTestRunnerMBean.OBJECT_NAME);
    JMXTestRunnerMBean testRunner=getMBeanProxy(mbeanServer,objectName,JMXTestRunnerMBean.class);
    InputStream resultStream=testRunner.runTestMethodRemote(testClass,testMethod);
    ObjectInputStream ois=new ObjectInputStream(resultStream);
    result=(TestResult)ois.readObject();
  }
 catch (  final Throwable e) {
    result=new TestResult(Status.FAILED);
    result.setThrowable(e);
  }
 finally {
    result.setEnd(System.currentTimeMillis());
  }
  return result;
}",0.9919743178170144
153040,"public void onStart(){
  History.newItem(url.build(P.USERS_LIST),false);
}","public void onStart(){
  if (History.getToken().isEmpty()) {
    History.newItem(url.build(P.USERS_LIST),false);
  }
}",0.7708333333333334
153041,"@Override protected void convertFromUrl(PortalUrl url,Portal view,UserEventBus eventBus){
switch (P.by(view)) {
case USERS_LIST:
    eventBus.users(url.param(0));
  break;
case USER_SHOW:
eventBus.show(Integer.parseInt(url.param(0)));
}
}","@Override protected void convertFromUrl(PortalUrl url,Portal view,UserEventBus eventBus){
switch (P.by(view)) {
case USERS_LIST:
    eventBus.users(url.param(0));
  break;
case USER_SHOW:
eventBus.show(Integer.parseInt(url.param(0)));
break;
}
}",0.9855072463768116
153042,"@Override protected boolean layout(Portal view,Layout layout,State state,UserEventBus eventBus){
switch (P.by(view)) {
case USERS_LIST:
{
      eventBus.plugUsersList(O.A);
      eventBus.plugUserAvatar(O.B);
      eventBus.plugUserDetails(O.C);
    }
  return true;
case USER_SHOW:
{
  eventBus.plugUserInfo(O.A);
  eventBus.plugUserAvatar(O.B);
  eventBus.plugUserDetails(O.C);
}
}
return false;
}","@Override protected boolean layout(Portal view,Layout layout,State state,UserEventBus eventBus){
switch (P.by(view)) {
case USERS_LIST:
{
      eventBus.plugUsersList(O.A);
      eventBus.plugUserAvatar(O.B);
      eventBus.plugUserDetails(O.C);
    }
  return true;
case USER_SHOW:
{
  eventBus.plugUserInfo(O.A);
  eventBus.plugUserAvatar(O.B);
  eventBus.plugUserDetails(O.C);
}
return true;
}
return false;
}",0.9839704069050554
153043,"@Override protected void ensureOutletsLoaded(){
  super.ensureOutletsLoaded();
  if (!has(statusPlace))   throw new IllegalStateException(""String_Node_Str"");
}","@Override protected void ensureOutletsLoaded(){
  super.ensureOutletsLoaded();
  if (!outlets.containsKey(statusPlace))   throw new IllegalStateException(""String_Node_Str"");
}",0.9461077844311376
153044,"protected Layout(LayoutId id,Place[] places){
  this.id=id;
  this.places=places;
}","protected Layout(LayoutId id,List<Place> places){
  this(id,places.toArray(new Place[places.size()]));
}",0.7165775401069518
153045,"@SuppressWarnings(""String_Node_Str"") public static <T>T[] concat(T[] first,T[] second){
  List<T> list=new ArrayList<T>();
  list.addAll(Arrays.asList(first));
  list.addAll(Arrays.asList(second));
  return (T[])list.toArray();
}","public static <T>List<T> concat(T[] first,T[] second){
  List<T> list=new ArrayList<T>();
  list.addAll(Arrays.asList(first));
  list.addAll(Arrays.asList(second));
  return list;
}",0.8536585365853658
153046,"public LayoutEdit(){
  super(L.EDIT,new Place[]{O.A,O.B,O.C,O.D,O.STATUS});
  initWidget(uiBinder.createAndBindUi(this));
}","public LayoutEdit(){
  super(L.EDIT,new Place[]{O.A,O.B,O.C,O.D},O.STATUS);
  initWidget(uiBinder.createAndBindUi(this));
}",0.991869918699187
153047,"public LayoutItem(){
  super(L.ITEM,new Place[]{O.A,O.B,O.C,O.STATUS});
  initWidget(uiBinder.createAndBindUi(this));
}","public LayoutItem(){
  super(L.ITEM,new Place[]{O.A,O.B,O.C},O.STATUS);
  initWidget(uiBinder.createAndBindUi(this));
}",0.9915966386554622
153048,"@Event(name=""String_Node_Str"",navigationEvent=true) public void companies();",@Event() public void companies();,0.6055045871559633
153049,"@Event(name=""String_Node_Str"",navigationEvent=true) public void edit(int cid);",@Event() public void edit(int cid);,0.6194690265486725
153050,"@Event(name=""String_Node_Str"",navigationEvent=true) public void show(int cid);",@Event() public void show(int cid);,0.6194690265486725
153051,"@Event(name=""String_Node_Str"",navigationEvent=true) public void news();",@Event() public void news();,0.5656565656565656
153052,"@Event(name=""String_Node_Str"",navigationEvent=true) public void edit(int nid);",@Event() public void edit(int nid);,0.6194690265486725
153053,"@Event(name=""String_Node_Str"",navigationEvent=true) public void show(int nid);",@Event() public void show(int nid);,0.6194690265486725
153054,"@Event(name=""String_Node_Str"",navigationEvent=true) public void edit(int uid);",@Event() public void edit(int uid);,0.6194690265486725
153055,"@Event(name=""String_Node_Str"",navigationEvent=true) public void show(int uid);",@Event() public void show(int uid);,0.6194690265486725
153056,"@Override public void showUsers(Set<User> users){
}","@Override public void showUsers(Set<User> users){
  usersHolder.clear();
  for (  User user : users) {
    usersHolder.add(new Label(user.name + ""String_Node_Str"" + user.familyName));
  }
}",0.425
153057,"protected void unregisterHandlers(){
  for (  HandlerRegistration handler : handlers) {
    handler.removeHandler();
  }
}","protected void unregisterHandlers(){
  for (  HandlerRegistration handler : handlers) {
    handler.removeHandler();
  }
  handlers.clear();
}",0.9242424242424242
153058,"public void keyPressed(KeyEvent e){
  System.out.println(""String_Node_Str"" + e.getKeyCode());
  System.out.println(e.getModifiersEx());
  System.out.println(e.isShiftDown());
}","public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_0) {
    frame.add(new SamplePanel());
  }
}",0.50814332247557
153059,"public void keyPressed(KeyEvent e){
  p.keyPressed(e);
}","public void keyPressed(KeyEvent e){
  p.keyPressed(e);
  System.out.println(""String_Node_Str"");
}",0.7320261437908496
153060,"public SamplePanel(){
  p=new Player(""String_Node_Str"");
  addKeyListener(new AL());
  setFocusable(true);
  ImageIcon i=new ImageIcon(""String_Node_Str"");
  img=i.getImage();
  time=new Timer(5,this);
  time.start();
}","public SamplePanel(){
  p=new Player(""String_Node_Str"");
  addKeyListener(new AL());
  setFocusable(true);
  setVisible(true);
  ImageIcon i=new ImageIcon(""String_Node_Str"");
  img=i.getImage();
  time=new Timer(5,this);
  time.start();
}",0.956140350877193
153061,"public void move(){
  x+=dx;
}","public void move(){
  x+=dx;
  y+=dy;
}",0.8695652173913043
153062,"public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=-1;
 else   if (key == KeyEvent.VK_RIGHT)   dx=1;
}","public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=-1;
 else   if (key == KeyEvent.VK_RIGHT)   dx=1;
 else   if (key == KeyEvent.VK_UP)   dy=-1;
 else   if (key == KeyEvent.VK_DOWN)   dy=1;
}",0.7700258397932817
153063,"public void keyReleased(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=0;
 else   if (key == KeyEvent.VK_RIGHT)   dx=0;
}","public void keyReleased(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=0;
 else   if (key == KeyEvent.VK_RIGHT)   dx=0;
 else   if (key == KeyEvent.VK_UP)   dy=0;
 else   if (key == KeyEvent.VK_DOWN)   dy=0;
}",0.772020725388601
153064,"public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_0) {
    frame.add(new SamplePanel());
  }
}","public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_0) {
    SamplePanel sp=new SamplePanel();
    frame.getContentPane().add(sp);
    sp.requestFocusInWindow();
    frame.setVisible(true);
  }
}",0.6149584487534626
153065,"public void actionPerformed(ActionEvent e){
  System.out.println(""String_Node_Str"" + e.getActionCommand());
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int n=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (n == 0) {
      save(game);
      System.exit(0);
    }
 else     if (n == 1)     System.exit(0);
  }
}","public void actionPerformed(ActionEvent e){
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int n=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (n == 0) {
      save(game);
      System.exit(0);
    }
 else     if (n == 1)     System.exit(0);
  }
}",0.9650273224043716
153066,"public void mouseClicked(MouseEvent e){
  System.out.println(""String_Node_Str"" + e.getComponent().getName());
}","public void mouseClicked(MouseEvent e){
}",0.5394736842105263
153067,"public void actionPerformed(ActionEvent e){
  System.out.println(""String_Node_Str"" + e.getActionCommand());
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
      System.out.println(""String_Node_Str"");
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
    game.testInit(""String_Node_Str"",125);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    System.exit(0);
  }
}","public void actionPerformed(ActionEvent e){
  System.out.println(""String_Node_Str"" + e.getActionCommand());
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
      System.out.println(""String_Node_Str"");
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    System.exit(0);
  }
}",0.8395953757225434
153068,"/** 
 * Grabs users groups. <br /><br />
 * @param userName
 * @return Array
 */
@Override public String[] getGroups(String world,String userName){
  return this.permissionManager.getUser(userName).getGroupsNames();
}","/** 
 * Grabs users groups. <br /><br />
 * @param userName
 * @return Array
 */
@Override public String[] getGroups(String world,String userName){
  return this.permissionManager.getUser(userName).getGroupsNames(world);
}",0.9886104783599088
153069,"/** 
 * Grabs users groups. <br /><br />
 * @param userName
 * @return Array
 */
@Override public String[] getGroups(String world,String userName){
  return this.permissionManager.getUser(userName).getGroupsNames(world);
}","/** 
 * Grabs users groups. <br /><br />
 * @param userName
 * @return Array
 */
@Override public String[] getGroups(String world,String userName){
  PermissionUser user=this.permissionManager.getUser(userName);
  if (user == null) {
    return new String[]{this.permissionManager.getDefaultGroup(world).getName()};
  }
  return user.getGroupsNames(world);
}",0.7103448275862069
153070,"@Override public Map<String,Map<String,String>> getAllOptions(){
  Map<String,Map<String,String>> allOptions=new HashMap<String,Map<String,String>>();
  for (  String world : this.worldNodes.keySet()) {
    allOptions.put(world,this.getOptions(world,false));
  }
  return allOptions;
}","@Override public Map<String,Map<String,String>> getAllOptions(){
  Map<String,Map<String,String>> allOptions=new HashMap<String,Map<String,String>>();
  for (  String world : this.worldNodes.keySet()) {
    if (world.equals(this.backend.getDefaultWorld())) {
      world=""String_Node_Str"";
    }
    allOptions.put(world,this.getOptions(world,false));
  }
  return allOptions;
}",0.6787330316742082
153071,"@Override public Map<String,String[]> getAllPermissions(){
  Map<String,String[]> permissions=new HashMap<String,String[]>();
  for (  String world : this.worldNodes.keySet()) {
    permissions.put(world,this.getPermissions(world,false));
  }
  return permissions;
}","@Override public Map<String,String[]> getAllPermissions(){
  Map<String,String[]> permissions=new HashMap<String,String[]>();
  for (  String world : this.worldNodes.keySet()) {
    if (world.equals(this.backend.getDefaultWorld())) {
      world=""String_Node_Str"";
    }
    permissions.put(world,this.getPermissions(world,false));
  }
  return permissions;
}",0.7808
153072,"@Override public void onEnable(){
  try {
    Security=new ru.tehkode.permissions.PermissionHandler(PermissionsEx.getPermissionManager());
  }
 catch (  RuntimeException e) {
    Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"");
  }
}","@Override public void onEnable(){
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"");
}",0.5549132947976878
153073,"public void onClickDeleteBtn(View v){
  if (adapter.items.size() != fthreads.size()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  final CharSequence[] items={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  AlertDialog.Builder dlg;
  dlg=new AlertDialog.Builder(Catalog.this);
  dlg.setTitle(""String_Node_Str"");
  dlg.setCancelable(true);
  dlg.setSingleChoiceItems(items,0,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int item){
      Catalog.this.delete_option=item;
    }
  }
);
  dlg.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      Catalog.this.deleteThreads();
    }
  }
);
  dlg.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
    }
  }
);
  dlg.show();
}","public void onClickDeleteBtn(View v){
  if (adapter.items.size() != fthreads.size()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  delete_option=0;
  final CharSequence[] items={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  AlertDialog.Builder dlg;
  dlg=new AlertDialog.Builder(Catalog.this);
  dlg.setTitle(""String_Node_Str"");
  dlg.setCancelable(true);
  dlg.setSingleChoiceItems(items,0,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int item){
      Catalog.this.delete_option=item;
    }
  }
);
  dlg.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      Catalog.this.deleteThreads();
    }
  }
);
  dlg.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
    }
  }
);
  dlg.show();
}",0.9901093180635084
153074,"protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  try {
    FLog.d(""String_Node_Str"" + requestCode);
    if (requestCode == TO_IMAGECATALOG) {
      String imgURL=(String)intent.getSerializableExtra(""String_Node_Str"");
      for (int i=0; i < statuses.size(); ++i) {
        if (imgURL.equals(statuses.get(i).bigImgURL)) {
          listView.setSelection(Math.min(i,listView.getCount()));
          break;
        }
      }
    }
 else     if (requestCode == TO_POST) {
      String posted=""String_Node_Str"";
      try {
        posted=(String)intent.getSerializableExtra(""String_Node_Str"");
      }
 catch (      Exception e) {
      }
      this.onClickReloadBtn(null);
    }
 else {
      FLog.d(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}","protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  try {
    FLog.d(""String_Node_Str"" + requestCode);
    if (requestCode == TO_IMAGECATALOG) {
      String imgURL=(String)intent.getSerializableExtra(""String_Node_Str"");
      for (int i=0; i < statuses.size(); ++i) {
        if (imgURL.equals(statuses.get(i).bigImgURL)) {
          listView.setSelection(Math.min(i,listView.getCount()));
          break;
        }
      }
    }
 else     if (requestCode == TO_POST) {
      String posted=""String_Node_Str"";
      try {
        posted=(String)intent.getSerializableExtra(""String_Node_Str"");
      }
 catch (      Exception e) {
      }
      if (!posted.equals(""String_Node_Str"")) {
        this.onClickReloadBtn(null);
      }
    }
 else {
      FLog.d(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}",0.9665296535525544
153075,"public void run(){
  if (saved_file_f != null) {
    FutabaThread fthread=(FutabaThread)adapter.getContext();
    if (fthread.toast != null) {
      fthread.toast.cancel();
    }
    fthread.toast=Toast.makeText(fthread,saved_file_f.getAbsolutePath() + ""String_Node_Str"",Toast.LENGTH_SHORT);
    fthread.toast.show();
    String mimeType=StringUtil.getMIMEType(saved_file_f.getName());
    FLog.d(""String_Node_Str"" + saved_file_f.getName());
    FLog.d(""String_Node_Str"" + mimeType);
    ContentResolver contentResolver=getContentResolver();
    ContentValues values=new ContentValues(7);
    values.put(Images.Media.TITLE,saved_file_f.getName());
    values.put(Images.Media.DISPLAY_NAME,saved_file_f.getName());
    values.put(Images.Media.DATE_TAKEN,System.currentTimeMillis());
    values.put(Images.Media.MIME_TYPE,mimeType);
    values.put(Images.Media.ORIENTATION,0);
    values.put(Images.Media.DATA,saved_file_f.getPath());
    values.put(Images.Media.SIZE,saved_file_f.length());
    contentResolver.insert(Images.Media.EXTERNAL_CONTENT_URI,values);
  }
 else {
    Toast.makeText(adapter.getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}","public void run(){
  FutabaThread fthread=(FutabaThread)adapter.getContext();
  if (saved_file_f != null) {
    if (fthread.toast != null) {
      fthread.toast.cancel();
    }
    fthread.toast=Toast.makeText(fthread,saved_file_f.getAbsolutePath() + ""String_Node_Str"",Toast.LENGTH_SHORT);
    fthread.toast.show();
    String mimeType=StringUtil.getMIMEType(saved_file_f.getName());
    FLog.d(""String_Node_Str"" + saved_file_f.getName());
    FLog.d(""String_Node_Str"" + mimeType);
    ContentResolver contentResolver=getContentResolver();
    ContentValues values=new ContentValues(7);
    values.put(Images.Media.TITLE,saved_file_f.getName());
    values.put(Images.Media.DISPLAY_NAME,saved_file_f.getName());
    values.put(Images.Media.DATE_TAKEN,System.currentTimeMillis());
    values.put(Images.Media.MIME_TYPE,mimeType);
    values.put(Images.Media.ORIENTATION,0);
    values.put(Images.Media.DATA,saved_file_f.getPath());
    values.put(Images.Media.SIZE,saved_file_f.length());
    contentResolver.insert(Images.Media.EXTERNAL_CONTENT_URI,values);
  }
 else {
    if (fthread.toast != null) {
      fthread.toast.cancel();
    }
    fthread.toast=Toast.makeText(fthread,""String_Node_Str"",Toast.LENGTH_SHORT);
    fthread.toast.show();
  }
}",0.8968089515126398
153076,"private boolean isAnonymousThread(String url){
  return url.contains(""String_Node_Str"") || url.contains(""String_Node_Str"") || url.contains(""String_Node_Str"");
}","private boolean isAnonymousThread(String url){
  return url.contains(""String_Node_Str"") || url.contains(""String_Node_Str"") || url.contains(""String_Node_Str"")|| url.contains(""String_Node_Str"");
}",0.903954802259887
153077,"public void onClickSearchButton(View v){
  FLog.d(""String_Node_Str"");
  if (true) {
    EditText searchEdit=(EditText)findViewById(id.searchinput);
    String searchText=searchEdit.getText().toString();
    String[] queries=StringUtil.querySplit(searchText);
    adapter.searchQueries=queries;
    boolean found=false;
    for (int i=listView.getFirstVisiblePosition() + 1; i < statuses.size(); ++i) {
      String text=statuses.get(i).text;
      if (StringUtil.isQueryMatch(text,queries)) {
        listView.setSelection(i);
        found=true;
        break;
      }
    }
    if (!found) {
      for (int i=0; i < Math.min(listView.getFirstVisiblePosition() + 1,statuses.size()); ++i) {
        String text=statuses.get(i).text;
        if (StringUtil.isQueryMatch(text,queries)) {
          listView.setSelection(i);
          found=true;
          if (true) {
            Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          break;
        }
      }
    }
    if (!found) {
      Toast.makeText(this,""String_Node_Str"" + searchText + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
    InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    imm.hideSoftInputFromWindow(v.getWindowToken(),0);
  }
}","public void onClickSearchButton(View v){
  FLog.d(""String_Node_Str"");
  if (true) {
    EditText searchEdit=(EditText)findViewById(id.searchinput);
    String searchText=searchEdit.getText().toString();
    String[] queries=StringUtil.querySplit(searchText);
    adapter.searchQueries=queries;
    boolean found=false;
    for (int i=listView.getFirstVisiblePosition() + 1; i < statuses.size(); ++i) {
      String text=statuses.get(i).text;
      if (StringUtil.isQueryMatchOr(text,queries,false)) {
        listView.setSelection(i);
        found=true;
        break;
      }
    }
    if (!found) {
      for (int i=0; i < Math.min(listView.getFirstVisiblePosition() + 1,statuses.size()); ++i) {
        String text=statuses.get(i).text;
        if (StringUtil.isQueryMatchOr(text,queries,false)) {
          listView.setSelection(i);
          found=true;
          if (true) {
            Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          break;
        }
      }
    }
    if (!found) {
      Toast.makeText(this,""String_Node_Str"" + searchText + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
    InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    imm.hideSoftInputFromWindow(v.getWindowToken(),0);
  }
}",0.9937548790007806
153078,"private boolean isAnonymousThread(String url){
  return url.contains(""String_Node_Str"") || url.contains(""String_Node_Str"");
}","private boolean isAnonymousThread(String url){
  return url.contains(""String_Node_Str"") || url.contains(""String_Node_Str"") || url.contains(""String_Node_Str"");
}",0.8771929824561403
153079,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  try {
    if (view == null) {
      view=inflater.inflate(R.layout.futaba_thread_row,null);
    }
    FutabaThread activity=(FutabaThread)getContext();
    FutabaStatus item=(FutabaStatus)items.get(position);
    if (item != null) {
      TextView title=(TextView)view.findViewById(R.id.title);
      title.setTextSize(StateMan.getDescFontSize(getContext()));
      TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
      bottomtext.setTextSize(StateMan.getDescFontSize(getContext()));
      TextView text=(TextView)view.findViewById(R.id.maintext);
      bottomtext.setTextSize(StateMan.getMainFontSize(getContext()));
      if (FutabaStatus.isBlank(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        text.setText(""String_Node_Str"");
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        Button saveButton=(Button)view.findViewById(R.id.savebutton);
        saveButton.setVisibility(View.GONE);
      }
 else       if (FutabaStatus.isEndTime(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        String text_html=item.text;
        CharSequence cs=Html.fromHtml(text_html);
        text.setText(cs);
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        Button saveButton=(Button)view.findViewById(R.id.savebutton);
        saveButton.setVisibility(View.GONE);
      }
 else {
        String title_base=item.title;
        if (item.name != null) {
          title_base+=""String_Node_Str"" + item.name + ""String_Node_Str"";
          if (item.mailTo != null && !item.mailTo.equals(""String_Node_Str"")) {
            title_base+=""String_Node_Str"" + item.mailTo + ""String_Node_Str"";
          }
          if (item.imgURL != null) {
            File imgFile=new File(item.bigImgURL);
            title_base+=""String_Node_Str"" + imgFile.getName() + ""String_Node_Str"";
          }
          if (activity.currentSize != 0 && position >= activity.prevSize) {
            title_base+=""String_Node_Str"";
            if (position != 0) {
              title_base=""String_Node_Str"" + (position - 1) + ""String_Node_Str""+ title_base;
            }
          }
 else {
            if (position != 0) {
              title_base=""String_Node_Str"" + position + ""String_Node_Str""+ title_base;
            }
          }
        }
 else {
          if (position != 0) {
            title_base=""String_Node_Str"" + position + ""String_Node_Str""+ title_base;
          }
        }
        CharSequence cs_title=Html.fromHtml(title_base);
        title.setText(cs_title);
        text.setTextSize(StateMan.getMainFontSize(getContext()));
        bottomtext.setTextSize(StateMan.getDescFontSize(getContext()));
        if (item.datestr != null) {
          bottomtext.setText(item.datestr + ""String_Node_Str"" + item.id);
        }
        if (position == 0) {
          view.setBackgroundColor(Color.rgb(255,255,238));
        }
 else {
          if (item.id != 0 && item.id == shioriPosition) {
            setShioriStatus(view);
          }
 else {
            view.setBackgroundColor(Color.rgb(240,224,214));
          }
        }
        text.setGravity(Gravity.LEFT);
        title.setVisibility(View.VISIBLE);
        bottomtext.setVisibility(View.VISIBLE);
        Bitmap bm=null;
        LinearLayout imageframe=(LinearLayout)view.findViewById(R.id.imageframe);
        Button saveButton=(Button)view.findViewById(R.id.savebutton);
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(bm);
        try {
          if (item.imgURL != null) {
            iv.setTag(item.bigImgURL);
            bm=Bitmap.createBitmap(item.width,item.height,Bitmap.Config.ALPHA_8);
            iv.setImageBitmap(bm);
            ImageGetTask task=new ImageGetTask(view);
            SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getContext());
            boolean enableSaveButton=preferences.getBoolean(getContext().getString(R.string.enablesavebutton),true);
            if (enableSaveButton) {
              saveButton.setVisibility(View.VISIBLE);
            }
 else {
              saveButton.setVisibility(View.GONE);
            }
            view.setLongClickable(true);
            task.execute(item.imgURL);
          }
 else {
            saveButton.setVisibility(View.GONE);
          }
        }
 catch (        Exception e) {
          FLog.d(""String_Node_Str"",e);
        }
        if (text != null) {
          String text_html=item.text;
          CharSequence cs=Html.fromHtml(text_html);
          text.setText(cs);
        }
      }
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  try {
    if (view == null) {
      view=inflater.inflate(R.layout.futaba_thread_row,null);
    }
    FutabaThread activity=(FutabaThread)getContext();
    FutabaStatus item=(FutabaStatus)items.get(position);
    if (item != null) {
      TextView title=(TextView)view.findViewById(R.id.title);
      title.setTextSize(StateMan.getDescFontSize(getContext()));
      TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
      bottomtext.setTextSize(StateMan.getDescFontSize(getContext()));
      TextView text=(TextView)view.findViewById(R.id.maintext);
      bottomtext.setTextSize(StateMan.getMainFontSize(getContext()));
      if (FutabaStatus.isBlank(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        text.setText(""String_Node_Str"");
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        Button saveButton=(Button)view.findViewById(R.id.savebutton);
        saveButton.setVisibility(View.GONE);
      }
 else       if (FutabaStatus.isEndTime(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        String text_html=item.text;
        CharSequence cs=Html.fromHtml(text_html);
        text.setText(cs);
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        Button saveButton=(Button)view.findViewById(R.id.savebutton);
        saveButton.setVisibility(View.GONE);
      }
 else {
        String title_base=item.title;
        if (item.name != null) {
          title_base+=""String_Node_Str"" + item.name + ""String_Node_Str"";
          if (item.mailTo != null && !item.mailTo.equals(""String_Node_Str"")) {
            title_base+=""String_Node_Str"" + item.mailTo + ""String_Node_Str"";
          }
          if (item.imgURL != null) {
            File imgFile=new File(item.bigImgURL);
            title_base+=""String_Node_Str"" + imgFile.getName() + ""String_Node_Str"";
          }
          if (activity.currentSize != 0 && position >= activity.prevSize) {
            title_base+=""String_Node_Str"";
            if (position != 0) {
              title_base=""String_Node_Str"" + (position - 1) + ""String_Node_Str""+ title_base;
            }
          }
 else {
            if (position != 0) {
              title_base=""String_Node_Str"" + position + ""String_Node_Str""+ title_base;
            }
          }
        }
 else {
          if (position != 0) {
            title_base=""String_Node_Str"" + position + ""String_Node_Str""+ title_base;
          }
          if (item.mailTo != null && !item.mailTo.equals(""String_Node_Str"")) {
            title_base+=""String_Node_Str"" + item.mailTo + ""String_Node_Str"";
          }
        }
        CharSequence cs_title=Html.fromHtml(title_base);
        title.setText(cs_title);
        text.setTextSize(StateMan.getMainFontSize(getContext()));
        bottomtext.setTextSize(StateMan.getDescFontSize(getContext()));
        if (item.datestr != null) {
          bottomtext.setText(item.datestr + ""String_Node_Str"" + item.id);
        }
        if (position == 0) {
          view.setBackgroundColor(Color.rgb(255,255,238));
        }
 else {
          if (item.id != 0 && item.id == shioriPosition) {
            setShioriStatus(view);
          }
 else {
            view.setBackgroundColor(Color.rgb(240,224,214));
          }
        }
        text.setGravity(Gravity.LEFT);
        title.setVisibility(View.VISIBLE);
        bottomtext.setVisibility(View.VISIBLE);
        Bitmap bm=null;
        LinearLayout imageframe=(LinearLayout)view.findViewById(R.id.imageframe);
        Button saveButton=(Button)view.findViewById(R.id.savebutton);
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(bm);
        try {
          if (item.imgURL != null) {
            iv.setTag(item.bigImgURL);
            bm=Bitmap.createBitmap(item.width,item.height,Bitmap.Config.ALPHA_8);
            iv.setImageBitmap(bm);
            ImageGetTask task=new ImageGetTask(view);
            SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getContext());
            boolean enableSaveButton=preferences.getBoolean(getContext().getString(R.string.enablesavebutton),true);
            if (enableSaveButton) {
              saveButton.setVisibility(View.VISIBLE);
            }
 else {
              saveButton.setVisibility(View.GONE);
            }
            view.setLongClickable(true);
            task.execute(item.imgURL);
          }
 else {
            saveButton.setVisibility(View.GONE);
          }
        }
 catch (        Exception e) {
          FLog.d(""String_Node_Str"",e);
        }
        if (text != null) {
          String text_html=item.text;
          CharSequence cs=Html.fromHtml(text_html);
          text.setText(cs);
        }
      }
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  return view;
}",0.984111972763382
153080,"public void parse(String allData,boolean anonymous){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textAttrPattern=Pattern.compile(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Pattern.DOTALL);
    Pattern imgTextAttrPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern endTimePattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Matcher mc=honbunPattern.matcher(allData);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=thumbPattern.matcher(honbun);
    if (mcImg.find()) {
      statusTop.imgURL=mcImg.group(1);
      statusTop.width=Integer.parseInt(mcImg.group(2));
      statusTop.height=Integer.parseInt(mcImg.group(3));
    }
    Matcher mcBigImg=imgPattern.matcher(honbun);
    if (mcBigImg.find()) {
      statusTop.bigImgURL=mcBigImg.group(1);
    }
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    if (!anonymous) {
      Matcher mcTextAttr=textAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.title=mcTextAttr.group(1);
        statusTop.name=normalize(mcTextAttr.group(2));
        statusTop.datestr=mcTextAttr.group(3);
        statusTop.id=Integer.parseInt(mcTextAttr.group(4));
      }
    }
 else {
      Matcher mcTextAttr=imgTextAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.datestr=mcTextAttr.group(1);
        statusTop.id=Integer.parseInt(mcTextAttr.group(2));
      }
    }
    String text=mcText.group(1);
    statusTop.text=text;
    Matcher mcEndTime=endTimePattern.matcher(honbun);
    if (mcEndTime.find()) {
      statusTop.endTime=mcEndTime.group(1);
    }
 else {
      FLog.d(""String_Node_Str"");
    }
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      FutabaStatus status=new FutabaStatus();
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      if (!anonymous) {
        Matcher mcTextAttr=textAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.title=mcTextAttr.group(1);
          status.name=normalize(mcTextAttr.group(2));
          status.mailTo=extractMailTo(mcTextAttr.group(2));
          status.datestr=mcTextAttr.group(3);
          status.id=Integer.parseInt(mcTextAttr.group(4));
        }
      }
 else {
        Matcher mcTextAttr=imgTextAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.datestr=mcTextAttr.group(1);
          status.id=Integer.parseInt(mcTextAttr.group(2));
        }
      }
      text=mcText.group(1);
      status.text=text;
      mcImg=thumbPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.imgURL=mcImg.group(1);
        status.width=Integer.parseInt(mcImg.group(2));
        status.height=Integer.parseInt(mcImg.group(3));
      }
      mcBigImg=imgPattern.matcher(mcRes.group(1));
      if (mcBigImg.find()) {
        status.bigImgURL=mcBigImg.group(1);
      }
      statuses.add(status);
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}","public void parse(String allData,boolean anonymous){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textAttrPattern=Pattern.compile(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Pattern.DOTALL);
    Pattern imgTextAttrPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern endTimePattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Matcher mc=honbunPattern.matcher(allData);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=thumbPattern.matcher(honbun);
    if (mcImg.find()) {
      statusTop.imgURL=mcImg.group(1);
      statusTop.width=Integer.parseInt(mcImg.group(2));
      statusTop.height=Integer.parseInt(mcImg.group(3));
    }
    Matcher mcBigImg=imgPattern.matcher(honbun);
    if (mcBigImg.find()) {
      statusTop.bigImgURL=mcBigImg.group(1);
    }
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    if (!anonymous) {
      Matcher mcTextAttr=textAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.title=mcTextAttr.group(1);
        statusTop.name=normalize(mcTextAttr.group(2));
        statusTop.datestr=mcTextAttr.group(3);
        statusTop.id=Integer.parseInt(mcTextAttr.group(4));
      }
    }
 else {
      Matcher mcTextAttr=imgTextAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.datestr=normalize(mcTextAttr.group(1));
        statusTop.mailTo=extractMailTo(mcTextAttr.group(1));
        statusTop.id=Integer.parseInt(mcTextAttr.group(2));
      }
    }
    String text=mcText.group(1);
    statusTop.text=text;
    Matcher mcEndTime=endTimePattern.matcher(honbun);
    if (mcEndTime.find()) {
      statusTop.endTime=mcEndTime.group(1);
    }
 else {
      FLog.d(""String_Node_Str"");
    }
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      FutabaStatus status=new FutabaStatus();
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      if (!anonymous) {
        Matcher mcTextAttr=textAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.title=mcTextAttr.group(1);
          status.name=normalize(mcTextAttr.group(2));
          status.mailTo=extractMailTo(mcTextAttr.group(2));
          status.datestr=mcTextAttr.group(3);
          status.id=Integer.parseInt(mcTextAttr.group(4));
        }
      }
 else {
        Matcher mcTextAttr=imgTextAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.datestr=normalize(mcTextAttr.group(1));
          status.mailTo=extractMailTo(mcTextAttr.group(1));
          if (!status.mailTo.equals(""String_Node_Str"")) {
            FLog.d(""String_Node_Str"" + status.mailTo);
          }
          status.id=Integer.parseInt(mcTextAttr.group(2));
        }
      }
      text=mcText.group(1);
      status.text=text;
      mcImg=thumbPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.imgURL=mcImg.group(1);
        status.width=Integer.parseInt(mcImg.group(2));
        status.height=Integer.parseInt(mcImg.group(3));
      }
      mcBigImg=imgPattern.matcher(mcRes.group(1));
      if (mcBigImg.find()) {
        status.bigImgURL=mcBigImg.group(1);
      }
      statuses.add(status);
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}",0.962468723936614
153081,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setWait();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initialStart=false;
  setWait();
}",0.9098360655737704
153082,"public void onClick(View v){
  FLog.d(""String_Node_Str"");
  Intent intent=new Intent();
  Catalog activity=(Catalog)getContext();
  try {
    FutabaThreadContent thread=item;
    if (!activity.mode.equals(""String_Node_Str"")) {
      thread.baseUrl=activity.baseUrl;
    }
    Calendar calendar=Calendar.getInstance();
    thread.lastAccessed=calendar.getTimeInMillis();
    HistoryManager man=new HistoryManager();
    man.Load();
    int maxHistoryNum=5;
    try {
      SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);
      maxHistoryNum=Integer.parseInt(preferences.getString(activity.getString(R.string.historynum),""String_Node_Str""));
    }
 catch (    Exception e) {
      FLog.d(""String_Node_Str"",e);
    }
    man.addThread(thread,maxHistoryNum);
    man.Save();
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  if (!activity.mode.equals(""String_Node_Str"")) {
    String baseUrl=activity.baseUrl;
    intent.putExtra(""String_Node_Str"",baseUrl);
    FLog.d(""String_Node_Str"");
  }
 else {
    String baseUrl=item.baseUrl;
    intent.putExtra(""String_Node_Str"",baseUrl);
    FLog.d(""String_Node_Str"");
  }
  intent.putExtra(""String_Node_Str"",threadNum);
  intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
  activity.startActivity(intent);
}","public void onClick(View v){
  FLog.d(""String_Node_Str"");
  Intent intent=new Intent();
  Catalog activity=(Catalog)getContext();
  try {
    FutabaThreadContent thread=item;
    if (!activity.mode.equals(""String_Node_Str"")) {
      thread.baseUrl=activity.baseUrl;
    }
    Calendar calendar=Calendar.getInstance();
    thread.lastAccessed=calendar.getTimeInMillis();
    HistoryManager man=new HistoryManager();
    man.Load();
    int maxHistoryNum=5;
    try {
      SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);
      maxHistoryNum=Integer.parseInt(preferences.getString(activity.getString(R.string.historynum),""String_Node_Str""));
    }
 catch (    Exception e) {
      FLog.d(""String_Node_Str"",e);
    }
    FLog.d(""String_Node_Str"" + maxHistoryNum);
    FLog.d(""String_Node_Str"" + thread.toString());
    man.addThread(thread,maxHistoryNum);
    man.Save();
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  if (!activity.mode.equals(""String_Node_Str"")) {
    String baseUrl=activity.baseUrl;
    intent.putExtra(""String_Node_Str"",baseUrl);
    FLog.d(""String_Node_Str"");
  }
 else {
    String baseUrl=item.baseUrl;
    intent.putExtra(""String_Node_Str"",baseUrl);
    FLog.d(""String_Node_Str"");
  }
  intent.putExtra(""String_Node_Str"",threadNum);
  intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
  activity.startActivity(intent);
}",0.9653710247349824
153083,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_catalog_row,null);
  }
  try {
    final FutabaThreadContent item=(FutabaThreadContent)items.get(position);
    final String threadNum=""String_Node_Str"" + item.threadNum;
    if (true) {
      view.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          FLog.d(""String_Node_Str"");
          Intent intent=new Intent();
          Catalog activity=(Catalog)getContext();
          try {
            FutabaThreadContent thread=item;
            if (!activity.mode.equals(""String_Node_Str"")) {
              thread.baseUrl=activity.baseUrl;
            }
            Calendar calendar=Calendar.getInstance();
            thread.lastAccessed=calendar.getTimeInMillis();
            HistoryManager man=new HistoryManager();
            man.Load();
            int maxHistoryNum=5;
            try {
              SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);
              maxHistoryNum=Integer.parseInt(preferences.getString(activity.getString(R.string.historynum),""String_Node_Str""));
            }
 catch (            Exception e) {
              FLog.d(""String_Node_Str"",e);
            }
            man.addThread(thread,maxHistoryNum);
            man.Save();
          }
 catch (          Exception e) {
            FLog.d(""String_Node_Str"",e);
          }
          if (!activity.mode.equals(""String_Node_Str"")) {
            String baseUrl=activity.baseUrl;
            intent.putExtra(""String_Node_Str"",baseUrl);
            FLog.d(""String_Node_Str"");
          }
 else {
            String baseUrl=item.baseUrl;
            intent.putExtra(""String_Node_Str"",baseUrl);
            FLog.d(""String_Node_Str"");
          }
          intent.putExtra(""String_Node_Str"",threadNum);
          intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
          activity.startActivity(intent);
        }
      }
);
    }
    Bitmap bm=null;
    ImageView iv=(ImageView)view.findViewById(R.id.image);
    iv.setImageBitmap(bm);
    Catalog activity=(Catalog)getContext();
    final int pos=position;
    if (item != null) {
      TextView text=(TextView)view.findViewById(R.id.bottomtext);
      if (item.text != null) {
        CharSequence cs=Html.fromHtml(item.text);
        text.setText(cs);
      }
      TextView resNum=(TextView)view.findViewById(R.id.resnum);
      resNum.setText(item.resNum + ""String_Node_Str"");
      if (activity.mode.equals(""String_Node_Str"")) {
        TextView BBSName=(TextView)view.findViewById(R.id.bbsname);
        BBSName.setText(""String_Node_Str"" + item.BBSName + ""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
        checkbox.setChecked(item.isChecked);
        checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            FLog.d(""String_Node_Str"" + buttonView.isShown());
            FLog.d(""String_Node_Str"" + pos + ""String_Node_Str""+ isChecked);
            if (buttonView.isShown()) {
              items.get(pos).isChecked=isChecked;
            }
          }
        }
);
      }
 else {
        CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
        checkbox.setVisibility(View.GONE);
        TextView nonclickableblank=(TextView)view.findViewById(id.nonclickableblank);
        nonclickableblank.setVisibility(View.GONE);
      }
      bm=Bitmap.createBitmap(50,50,Bitmap.Config.ALPHA_8);
      iv.setImageBitmap(bm);
      try {
        if (item.imgURL != null) {
          iv.setTag(item.imgURL);
          ImageGetTask task=new ImageGetTask(iv);
          task.execute(item.imgURL);
        }
 else {
        }
      }
 catch (      Exception e) {
        FLog.d(""String_Node_Str"",e);
      }
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_catalog_row,null);
  }
  try {
    final FutabaThreadContent item=(FutabaThreadContent)items.get(position);
    final String threadNum=""String_Node_Str"" + item.threadNum;
    if (true) {
      view.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          FLog.d(""String_Node_Str"");
          Intent intent=new Intent();
          Catalog activity=(Catalog)getContext();
          try {
            FutabaThreadContent thread=item;
            if (!activity.mode.equals(""String_Node_Str"")) {
              thread.baseUrl=activity.baseUrl;
            }
            Calendar calendar=Calendar.getInstance();
            thread.lastAccessed=calendar.getTimeInMillis();
            HistoryManager man=new HistoryManager();
            man.Load();
            int maxHistoryNum=5;
            try {
              SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);
              maxHistoryNum=Integer.parseInt(preferences.getString(activity.getString(R.string.historynum),""String_Node_Str""));
            }
 catch (            Exception e) {
              FLog.d(""String_Node_Str"",e);
            }
            FLog.d(""String_Node_Str"" + maxHistoryNum);
            FLog.d(""String_Node_Str"" + thread.toString());
            man.addThread(thread,maxHistoryNum);
            man.Save();
          }
 catch (          Exception e) {
            FLog.d(""String_Node_Str"",e);
          }
          if (!activity.mode.equals(""String_Node_Str"")) {
            String baseUrl=activity.baseUrl;
            intent.putExtra(""String_Node_Str"",baseUrl);
            FLog.d(""String_Node_Str"");
          }
 else {
            String baseUrl=item.baseUrl;
            intent.putExtra(""String_Node_Str"",baseUrl);
            FLog.d(""String_Node_Str"");
          }
          intent.putExtra(""String_Node_Str"",threadNum);
          intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
          activity.startActivity(intent);
        }
      }
);
    }
    Bitmap bm=null;
    ImageView iv=(ImageView)view.findViewById(R.id.image);
    iv.setImageBitmap(bm);
    Catalog activity=(Catalog)getContext();
    final int pos=position;
    if (item != null) {
      TextView text=(TextView)view.findViewById(R.id.bottomtext);
      if (item.text != null) {
        CharSequence cs=Html.fromHtml(item.text);
        text.setText(cs);
      }
      TextView resNum=(TextView)view.findViewById(R.id.resnum);
      resNum.setText(item.resNum + ""String_Node_Str"");
      if (activity.mode.equals(""String_Node_Str"")) {
        TextView BBSName=(TextView)view.findViewById(R.id.bbsname);
        BBSName.setText(""String_Node_Str"" + item.BBSName + ""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
        CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
        checkbox.setChecked(item.isChecked);
        checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            FLog.d(""String_Node_Str"" + buttonView.isShown());
            FLog.d(""String_Node_Str"" + pos + ""String_Node_Str""+ isChecked);
            if (buttonView.isShown()) {
              items.get(pos).isChecked=isChecked;
            }
          }
        }
);
      }
 else {
        CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
        checkbox.setVisibility(View.GONE);
        TextView nonclickableblank=(TextView)view.findViewById(id.nonclickableblank);
        nonclickableblank.setVisibility(View.GONE);
      }
      bm=Bitmap.createBitmap(50,50,Bitmap.Config.ALPHA_8);
      iv.setImageBitmap(bm);
      try {
        if (item.imgURL != null) {
          iv.setTag(item.imgURL);
          ImageGetTask task=new ImageGetTask(iv);
          task.execute(item.imgURL);
        }
 else {
        }
      }
 catch (      Exception e) {
        FLog.d(""String_Node_Str"",e);
      }
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  return view;
}",0.986572438162544
153084,"public static String createDigest(String source){
  FLog.d(""String_Node_Str"" + source + ""String_Node_Str""+ isHTMLName(source));
  MessageDigest md;
  try {
    md=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  byte[] data=source.getBytes();
  md.update(data);
  byte[] digest=md.digest();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < digest.length; i++) {
    sb.append(Integer.toHexString(0xff & digest[i]));
  }
  if (FutabaCrypt.isHTMLName(source)) {
    return sb.toString() + ""String_Node_Str"";
  }
  return sb.toString();
}","public static String createDigest(String source){
  MessageDigest md;
  try {
    md=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  byte[] data=source.getBytes();
  md.update(data);
  byte[] digest=md.digest();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < digest.length; i++) {
    sb.append(Integer.toHexString(0xff & digest[i]));
  }
  if (FutabaCrypt.isHTMLName(source)) {
    return sb.toString() + ""String_Node_Str"";
  }
  return sb.toString();
}",0.2142857142857142
153085,"public void run(){
  adapter.items.clear();
  for (int i=0; i < statuses_ref.size(); ++i) {
    FLog.d(statuses_ref.get(i).toString());
    adapter.items.add(statuses_ref.get(i));
  }
  Toast.makeText(adapter.getContext(),toast_text_f,Toast.LENGTH_SHORT).show();
  setTitle(title);
  waitDialog.dismiss();
  adapter.notifyDataSetChanged();
  listView.invalidate();
  if (position != 0) {
    listView.setSelectionFromTop(Math.min(position,listView.getCount()),positionY);
  }
}","public void run(){
  adapter.items.clear();
  for (int i=0; i < statuses_ref.size(); ++i) {
    adapter.items.add(statuses_ref.get(i));
  }
  Toast.makeText(adapter.getContext(),toast_text_f,Toast.LENGTH_SHORT).show();
  setTitle(title);
  waitDialog.dismiss();
  adapter.notifyDataSetChanged();
  listView.invalidate();
  if (position != 0) {
    listView.setSelectionFromTop(Math.min(position,listView.getCount()),positionY);
  }
}",0.9516483516483516
153086,"public void Load(){
  try {
    if (SDCard.existSeriarized(OPT_HISTORY)) {
      threads=(TreeMap<Integer,FutabaThreadContent>)SDCard.getSerialized(OPT_HISTORY).readObject();
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}","public void Load(){
  try {
    if (SDCard.existSeriarized(OPT_HISTORY)) {
      threads=(LinkedHashMap<Integer,FutabaThreadContent>)SDCard.getSerialized(OPT_HISTORY).readObject();
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}",0.9721115537848606
153087,"public void addThread(FutabaThreadContent thread,int maxHistoryNum){
  if (!threads.containsKey(thread.threadNum)) {
    threads.put(thread.threadNum,thread);
  }
 else {
    threads.put(thread.threadNum,thread);
  }
  FLog.d(""String_Node_Str"" + maxHistoryNum);
  if (threads.size() > maxHistoryNum) {
    threads.remove(threads.lastKey());
  }
}","public void addThread(FutabaThreadContent thread,int maxHistoryNum){
  if (!threads.containsKey(thread.threadNum)) {
    threads.put(thread.threadNum,thread);
  }
 else {
    threads.put(thread.threadNum,thread);
  }
  FLog.d(""String_Node_Str"" + maxHistoryNum);
  if (threads.size() > maxHistoryNum) {
    for (    Object key : threads.keySet()) {
      threads.remove(key);
      break;
    }
  }
}",0.8617449664429531
153088,"public void clear(){
  threads=new TreeMap<Integer,FutabaThreadContent>();
}","public void clear(){
  threads=new LinkedHashMap<Integer,FutabaThreadContent>();
}",0.9240506329113924
153089,"public static String getCacheDir(){
  String sdcard_dir=Environment.getExternalStorageDirectory().getPath();
  FLog.d(""String_Node_Str"" + sdcard_dir);
  String cacheDir=sdcard_dir + ""String_Node_Str"";
  File file=new File(cacheDir);
  file.mkdir();
  return cacheDir;
}","public static String getCacheDir(){
  String sdcard_dir=Environment.getExternalStorageDirectory().getPath();
  String cacheDir=sdcard_dir + ""String_Node_Str"";
  File file=new File(cacheDir);
  file.mkdir();
  return cacheDir;
}",0.9153225806451613
153090,"public void onClickGridViewBtn(View v){
  FLog.d(""String_Node_Str"");
  Intent intent=new Intent();
  ArrayList<String> thumbURLs=getThumbURLs();
  int pos=listView.getFirstVisiblePosition();
  int imagepos=0;
  for (int i=0; i <= pos; ++i) {
    FutabaStatus status=(FutabaStatus)adapter.items.get(i);
    if (status.imgURL != null && !status.imgURL.equals(""String_Node_Str"")) {
      imagepos++;
    }
  }
  intent.putExtra(""String_Node_Str"",imagepos);
  intent.putExtra(""String_Node_Str"",getImageURLs());
  intent.putExtra(""String_Node_Str"",thumbURLs);
  intent.setClassName(getPackageName(),getClass().getPackage().getName() + ""String_Node_Str"");
  startActivity(intent);
}","public void onClickGridViewBtn(View v){
  FLog.d(""String_Node_Str"");
  Intent intent=new Intent();
  ArrayList<String> thumbURLs=getThumbURLs();
  if (thumbURLs.size() == 0) {
    return;
  }
  int pos=listView.getFirstVisiblePosition();
  int imagepos=0;
  for (int i=0; i <= pos; ++i) {
    FutabaStatus status=(FutabaStatus)adapter.items.get(i);
    if (status.imgURL != null && !status.imgURL.equals(""String_Node_Str"")) {
      imagepos++;
    }
  }
  imagepos=Math.max(0,imagepos - 1);
  intent.putExtra(""String_Node_Str"",imagepos);
  intent.putExtra(""String_Node_Str"",getImageURLs());
  intent.putExtra(""String_Node_Str"",thumbURLs);
  intent.setClassName(getPackageName(),getClass().getPackage().getName() + ""String_Node_Str"");
  startActivity(intent);
}",0.3927576601671309
153091,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Intent intent;
switch (item.getItemId()) {
case R.id.post:
    onClickPostBtn(null);
  return true;
case R.id.possave:
{
  int position=listView.getFirstVisiblePosition();
  registerShiori(position);
}
return true;
case R.id.posload:
try {
HistoryManager man=new HistoryManager();
man.Load();
FutabaThreadContent thread=man.get(threadNum);
int position=thread.pointAt;
if (position != 0) {
listView.setSelection(Math.min(position,adapter.items.size() - 1));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
 else {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
}
 catch (Exception e) {
FLog.d(""String_Node_Str"",e);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
return true;
case R.id.share:
intent=new Intent(Intent.ACTION_SEND);
intent.setType(""String_Node_Str"");
intent.putExtra(Intent.EXTRA_TEXT,threadURL);
try {
startActivityForResult(intent,0);
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
return true;
case R.id.tweet:
String thread_title=statuses.get(0).title;
thread_title=FutabaThreadParser.removeTag(thread_title);
thread_title=""String_Node_Str"" + thread_title.substring(0,Math.min(30,thread_title.length()));
if (thread_title.length() == 30) {
thread_title=thread_title + ""String_Node_Str"";
}
String status_encoded=thread_title + ""String_Node_Str"" + threadURL;
intent=new Intent(Intent.ACTION_SEND);
intent.setType(""String_Node_Str"");
intent.putExtra(Intent.EXTRA_TEXT,status_encoded + getString(R.string.hashtagstr));
try {
startActivityForResult(intent,0);
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
return true;
case R.id.settings:
intent=new Intent();
intent.setClassName(getPackageName(),getClass().getPackage().getName() + ""String_Node_Str"");
startActivity(intent);
return true;
case R.id.about:
Uri uri=Uri.parse(getString(R.string.helpurl));
intent=new Intent(Intent.ACTION_VIEW,uri);
intent.setClassName(""String_Node_Str"",""String_Node_Str"");
try {
startActivity(intent);
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
return true;
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  Intent intent;
switch (item.getItemId()) {
case R.id.post:
    onClickPostBtn(null);
  return true;
case R.id.possave:
{
  int position=listView.getFirstVisiblePosition();
  registerShiori(position);
}
return true;
case R.id.posload:
searchShiori();
return true;
case R.id.share:
intent=new Intent(Intent.ACTION_SEND);
intent.setType(""String_Node_Str"");
intent.putExtra(Intent.EXTRA_TEXT,threadURL);
try {
startActivityForResult(intent,0);
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
return true;
case R.id.tweet:
String thread_title=statuses.get(0).title;
thread_title=FutabaThreadParser.removeTag(thread_title);
thread_title=""String_Node_Str"" + thread_title.substring(0,Math.min(30,thread_title.length()));
if (thread_title.length() == 30) {
thread_title=thread_title + ""String_Node_Str"";
}
String status_encoded=thread_title + ""String_Node_Str"" + threadURL;
intent=new Intent(Intent.ACTION_SEND);
intent.setType(""String_Node_Str"");
intent.putExtra(Intent.EXTRA_TEXT,status_encoded + getString(R.string.hashtagstr));
try {
startActivityForResult(intent,0);
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
return true;
case R.id.settings:
intent=new Intent();
intent.setClassName(getPackageName(),getClass().getPackage().getName() + ""String_Node_Str"");
startActivity(intent);
return true;
case R.id.about:
Uri uri=Uri.parse(getString(R.string.helpurl));
intent=new Intent(Intent.ACTION_VIEW,uri);
intent.setClassName(""String_Node_Str"",""String_Node_Str"");
try {
startActivity(intent);
}
 catch (android.content.ActivityNotFoundException ex) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
return true;
}
return false;
}",0.8801711840228246
153092,"public void registerShiori(int position){
  try {
    if (position == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
 else {
      HistoryManager man=new HistoryManager();
      man.Load();
      FutabaThreadContent thread=new FutabaThreadContent();
      thread.pointAt=position;
      thread.threadNum=threadNum;
      FLog.d(thread.toString());
      man.updateThread(thread);
      man.Save();
      View view=listView.getChildAt(0);
      adapter.shioriPosition=position;
      adapter.setShioriStatus(view);
      adapter.notifyDataSetChanged();
      listView.invalidate();
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}","public void registerShiori(int position){
  try {
    if (position == 0) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
 else {
      FutabaStatus item=(FutabaStatus)adapter.items.get(position);
      if (FutabaStatus.isBlank(item)) {
        position+=1;
        item=(FutabaStatus)adapter.items.get(position);
      }
      HistoryManager man=new HistoryManager();
      man.Load();
      FutabaThreadContent thread=new FutabaThreadContent();
      thread.pointAt=item.id;
      thread.threadNum=threadNum;
      FLog.d(thread.toString());
      man.updateThread(thread);
      man.Save();
      View view=listView.getChildAt(0);
      adapter.shioriPosition=item.id;
      adapter.setShioriStatus(view);
      adapter.notifyDataSetChanged();
      listView.invalidate();
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}",0.8704784130688448
153093,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  try {
    if (view == null) {
      view=inflater.inflate(R.layout.futaba_thread_row,null);
    }
    FutabaThread activity=(FutabaThread)getContext();
    FutabaStatus item=(FutabaStatus)items.get(position);
    FLog.d(""String_Node_Str"" + position + ""String_Node_Str""+ item.datestr);
    if (item != null) {
      if (FutabaStatus.isBlank(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        TextView title=(TextView)view.findViewById(R.id.title);
        TextView text=(TextView)view.findViewById(R.id.maintext);
        TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
        text.setText(""String_Node_Str"");
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      }
 else       if (FutabaStatus.isEndTime(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        TextView title=(TextView)view.findViewById(R.id.title);
        TextView text=(TextView)view.findViewById(R.id.maintext);
        TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
        String text_html=item.text;
        CharSequence cs=Html.fromHtml(text_html);
        text.setText(cs);
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      }
 else {
        TextView title=(TextView)view.findViewById(R.id.title);
        String title_base=item.title;
        if (item.name != null) {
          title_base+=""String_Node_Str"" + item.name + ""String_Node_Str"";
          if (item.mailTo != null && !item.mailTo.equals(""String_Node_Str"")) {
            title_base+=""String_Node_Str"" + item.mailTo + ""String_Node_Str"";
          }
          if (activity.currentSize != 0 && position >= activity.prevSize) {
            title_base+=""String_Node_Str"";
            if (position != 0) {
              title_base=""String_Node_Str"" + (position - 1) + ""String_Node_Str""+ title_base;
            }
          }
 else {
            if (position != 0) {
              title_base=""String_Node_Str"" + position + ""String_Node_Str""+ title_base;
            }
          }
        }
        CharSequence cs_title=Html.fromHtml(title_base);
        title.setText(cs_title);
        TextView text=(TextView)view.findViewById(R.id.maintext);
        TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
        if (item.datestr != null) {
          bottomtext.setText(item.datestr + ""String_Node_Str"" + item.id);
        }
        if (position == 0) {
          view.setBackgroundColor(Color.rgb(255,255,238));
        }
 else {
          if (position == shioriPosition) {
            setShioriStatus(view);
          }
 else {
            view.setBackgroundColor(Color.rgb(240,224,214));
          }
        }
        text.setGravity(Gravity.LEFT);
        title.setVisibility(View.VISIBLE);
        bottomtext.setVisibility(View.VISIBLE);
        Bitmap bm=null;
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(bm);
        try {
          if (item.imgURL != null) {
            iv.setTag(item.bigImgURL);
            bm=Bitmap.createBitmap(item.width,item.height,Bitmap.Config.ALPHA_8);
            iv.setImageBitmap(bm);
            ImageGetTask task=new ImageGetTask(iv);
            task.execute(item.imgURL);
          }
 else {
          }
        }
 catch (        Exception e) {
          FLog.d(""String_Node_Str"",e);
        }
        if (text != null) {
          String text_html=item.text;
          CharSequence cs=Html.fromHtml(text_html);
          text.setText(cs);
        }
      }
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  try {
    if (view == null) {
      view=inflater.inflate(R.layout.futaba_thread_row,null);
    }
    FutabaThread activity=(FutabaThread)getContext();
    FutabaStatus item=(FutabaStatus)items.get(position);
    FLog.d(""String_Node_Str"" + position + ""String_Node_Str""+ item.datestr);
    if (item != null) {
      if (FutabaStatus.isBlank(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        TextView title=(TextView)view.findViewById(R.id.title);
        TextView text=(TextView)view.findViewById(R.id.maintext);
        TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
        text.setText(""String_Node_Str"");
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      }
 else       if (FutabaStatus.isEndTime(item)) {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(null);
        TextView title=(TextView)view.findViewById(R.id.title);
        TextView text=(TextView)view.findViewById(R.id.maintext);
        TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
        String text_html=item.text;
        CharSequence cs=Html.fromHtml(text_html);
        text.setText(cs);
        text.setGravity(Gravity.CENTER);
        title.setVisibility(View.GONE);
        bottomtext.setVisibility(View.GONE);
        bottomtext.setText(""String_Node_Str"");
        view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      }
 else {
        TextView title=(TextView)view.findViewById(R.id.title);
        String title_base=item.title;
        if (item.name != null) {
          title_base+=""String_Node_Str"" + item.name + ""String_Node_Str"";
          if (item.mailTo != null && !item.mailTo.equals(""String_Node_Str"")) {
            title_base+=""String_Node_Str"" + item.mailTo + ""String_Node_Str"";
          }
          if (activity.currentSize != 0 && position >= activity.prevSize) {
            title_base+=""String_Node_Str"";
            if (position != 0) {
              title_base=""String_Node_Str"" + (position - 1) + ""String_Node_Str""+ title_base;
            }
          }
 else {
            if (position != 0) {
              title_base=""String_Node_Str"" + position + ""String_Node_Str""+ title_base;
            }
          }
        }
        CharSequence cs_title=Html.fromHtml(title_base);
        title.setText(cs_title);
        TextView text=(TextView)view.findViewById(R.id.maintext);
        TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
        if (item.datestr != null) {
          bottomtext.setText(item.datestr + ""String_Node_Str"" + item.id);
        }
        if (position == 0) {
          view.setBackgroundColor(Color.rgb(255,255,238));
        }
 else {
          if (item.id != 0 && item.id == shioriPosition) {
            setShioriStatus(view);
          }
 else {
            view.setBackgroundColor(Color.rgb(240,224,214));
          }
        }
        text.setGravity(Gravity.LEFT);
        title.setVisibility(View.VISIBLE);
        bottomtext.setVisibility(View.VISIBLE);
        Bitmap bm=null;
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        iv.setImageBitmap(bm);
        try {
          if (item.imgURL != null) {
            iv.setTag(item.bigImgURL);
            bm=Bitmap.createBitmap(item.width,item.height,Bitmap.Config.ALPHA_8);
            iv.setImageBitmap(bm);
            ImageGetTask task=new ImageGetTask(iv);
            task.execute(item.imgURL);
          }
 else {
          }
        }
 catch (        Exception e) {
          FLog.d(""String_Node_Str"",e);
        }
        if (text != null) {
          String text_html=item.text;
          CharSequence cs=Html.fromHtml(text_html);
          text.setText(cs);
        }
      }
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
  return view;
}",0.996258298129149
153094,"public boolean onItemLongClick(AdapterView<?> arg0,View view,int arg2,long arg3){
  TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
  if (bottomtext.length() < 5) {
    return false;
  }
  fthread=(FutabaThread)view.getContext();
  FLog.d(""String_Node_Str"" + arg2 + ""String_Node_Str""+ arg3);
  AlertDialog.Builder dlg;
  dlg=new AlertDialog.Builder(fthread);
  dlg.setTitle(""String_Node_Str"");
  String[] strs_temp=null;
  if (arg2 == 0) {
    String[] temp={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    strs_temp=temp;
  }
 else   if (arg2 != fthread.adapter.shioriPosition) {
    String[] temp={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    strs_temp=temp;
  }
 else {
    String[] temp={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    strs_temp=temp;
  }
  currentPosition=arg2;
  final String[] strs=strs_temp;
  final View view_f=view;
  dlg.setSingleChoiceItems(strs,0,this);
  dlg.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      FLog.d(""String_Node_Str"" + id + ""String_Node_Str""+ chosen);
      if (chosen == 0) {
        processDeleteDialog(view_f);
      }
 else       if (chosen == 1) {
        processQuoteDialog(view_f);
      }
 else       if (chosen == 2) {
        processShareDialog(view_f);
      }
 else       if (chosen == 3) {
        modifyShiori(view_f);
      }
    }
  }
);
  dlg.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
    }
  }
);
  dlg.show();
  return false;
}","public boolean onItemLongClick(AdapterView<?> arg0,View view,int arg2,long arg3){
  if (view == null) {
    FLog.d(""String_Node_Str"");
    return false;
  }
  TextView bottomtext=(TextView)view.findViewById(R.id.bottomtext);
  if (bottomtext.length() < 5) {
    return false;
  }
  fthread=(FutabaThread)view.getContext();
  FLog.d(""String_Node_Str"" + arg2 + ""String_Node_Str""+ arg3);
  AlertDialog.Builder dlg;
  dlg=new AlertDialog.Builder(fthread);
  dlg.setTitle(""String_Node_Str"");
  String[] strs_temp=null;
  FutabaStatus item=(FutabaStatus)fthread.adapter.items.get(arg2);
  if (arg2 == 0) {
    String[] temp={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    strs_temp=temp;
  }
 else   if (item != null && item.id != fthread.adapter.shioriPosition) {
    String[] temp={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    strs_temp=temp;
  }
 else {
    String[] temp={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    strs_temp=temp;
  }
  currentPosition=arg2;
  final String[] strs=strs_temp;
  final View view_f=view;
  dlg.setSingleChoiceItems(strs,0,this);
  dlg.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      FLog.d(""String_Node_Str"" + id + ""String_Node_Str""+ chosen);
      if (chosen == 0) {
        processDeleteDialog(view_f);
      }
 else       if (chosen == 1) {
        processQuoteDialog(view_f);
      }
 else       if (chosen == 2) {
        processShareDialog(view_f);
      }
 else       if (chosen == 3) {
        modifyShiori(view_f);
      }
    }
  }
);
  dlg.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
    }
  }
);
  dlg.show();
  return false;
}",0.951974992895709
153095,"public void modifyShiori(View view){
  if (currentPosition == fthread.adapter.shioriPosition) {
    fthread.removeShiori(currentPosition);
  }
 else {
    fthread.registerShiori(currentPosition);
  }
}","public void modifyShiori(View view){
  FutabaStatus item=(FutabaStatus)fthread.adapter.items.get(currentPosition);
  if (item.id == fthread.adapter.shioriPosition) {
    fthread.removeShiori(currentPosition);
  }
 else {
    fthread.registerShiori(currentPosition);
  }
}",0.7711864406779662
153096,"public void parse(String allData,boolean anonymous){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textAttrPattern=Pattern.compile(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Pattern.DOTALL);
    Pattern imgTextAttrPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern endTimePattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Matcher mc=honbunPattern.matcher(allData);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=thumbPattern.matcher(honbun);
    if (mcImg.find()) {
      statusTop.imgURL=mcImg.group(1);
      statusTop.width=Integer.parseInt(mcImg.group(2));
      statusTop.height=Integer.parseInt(mcImg.group(3));
    }
    Matcher mcBigImg=imgPattern.matcher(honbun);
    if (mcBigImg.find()) {
      statusTop.bigImgURL=mcBigImg.group(1);
    }
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    if (!anonymous) {
      Matcher mcTextAttr=textAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.title=mcTextAttr.group(1);
        statusTop.name=normalize(mcTextAttr.group(2));
        statusTop.datestr=mcTextAttr.group(3);
        statusTop.id=Integer.parseInt(mcTextAttr.group(4));
      }
    }
 else {
      Matcher mcTextAttr=imgTextAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.datestr=mcTextAttr.group(1);
      }
    }
    String text=mcText.group(1);
    statusTop.text=text;
    Matcher mcEndTime=endTimePattern.matcher(honbun);
    if (mcEndTime.find()) {
      statusTop.endTime=mcEndTime.group(1);
    }
 else {
      FLog.d(""String_Node_Str"");
    }
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      FutabaStatus status=new FutabaStatus();
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      if (!anonymous) {
        Matcher mcTextAttr=textAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.title=mcTextAttr.group(1);
          status.name=normalize(mcTextAttr.group(2));
          status.mailTo=extractMailTo(mcTextAttr.group(2));
          status.datestr=mcTextAttr.group(3);
          status.id=Integer.parseInt(mcTextAttr.group(4));
        }
      }
 else {
        Matcher mcTextAttr=imgTextAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.datestr=mcTextAttr.group(1);
        }
      }
      text=mcText.group(1);
      status.text=text;
      mcImg=thumbPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.imgURL=mcImg.group(1);
        status.width=Integer.parseInt(mcImg.group(2));
        status.height=Integer.parseInt(mcImg.group(3));
      }
      mcBigImg=imgPattern.matcher(mcRes.group(1));
      if (mcBigImg.find()) {
        status.bigImgURL=mcBigImg.group(1);
      }
      statuses.add(status);
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}","public void parse(String allData,boolean anonymous){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textAttrPattern=Pattern.compile(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Pattern.DOTALL);
    Pattern imgTextAttrPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern endTimePattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Matcher mc=honbunPattern.matcher(allData);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=thumbPattern.matcher(honbun);
    if (mcImg.find()) {
      statusTop.imgURL=mcImg.group(1);
      statusTop.width=Integer.parseInt(mcImg.group(2));
      statusTop.height=Integer.parseInt(mcImg.group(3));
    }
    Matcher mcBigImg=imgPattern.matcher(honbun);
    if (mcBigImg.find()) {
      statusTop.bigImgURL=mcBigImg.group(1);
    }
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    if (!anonymous) {
      Matcher mcTextAttr=textAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.title=mcTextAttr.group(1);
        statusTop.name=normalize(mcTextAttr.group(2));
        statusTop.datestr=mcTextAttr.group(3);
        statusTop.id=Integer.parseInt(mcTextAttr.group(4));
      }
    }
 else {
      Matcher mcTextAttr=imgTextAttrPattern.matcher(honbun);
      if (mcTextAttr.find()) {
        statusTop.datestr=mcTextAttr.group(1);
        statusTop.id=Integer.parseInt(mcTextAttr.group(2));
      }
    }
    String text=mcText.group(1);
    statusTop.text=text;
    Matcher mcEndTime=endTimePattern.matcher(honbun);
    if (mcEndTime.find()) {
      statusTop.endTime=mcEndTime.group(1);
    }
 else {
      FLog.d(""String_Node_Str"");
    }
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      FutabaStatus status=new FutabaStatus();
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      if (!anonymous) {
        Matcher mcTextAttr=textAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.title=mcTextAttr.group(1);
          status.name=normalize(mcTextAttr.group(2));
          status.mailTo=extractMailTo(mcTextAttr.group(2));
          status.datestr=mcTextAttr.group(3);
          status.id=Integer.parseInt(mcTextAttr.group(4));
        }
      }
 else {
        Matcher mcTextAttr=imgTextAttrPattern.matcher(mcRes.group(1));
        if (mcTextAttr.find()) {
          status.datestr=mcTextAttr.group(1);
          status.id=Integer.parseInt(mcTextAttr.group(2));
        }
      }
      text=mcText.group(1);
      status.text=text;
      mcImg=thumbPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.imgURL=mcImg.group(1);
        status.width=Integer.parseInt(mcImg.group(2));
        status.height=Integer.parseInt(mcImg.group(3));
      }
      mcBigImg=imgPattern.matcher(mcRes.group(1));
      if (mcBigImg.find()) {
        status.bigImgURL=mcBigImg.group(1);
      }
      statuses.add(status);
    }
  }
 catch (  Exception e) {
    FLog.d(""String_Node_Str"",e);
  }
}",0.9825179961804024
153097,"private void loading(){
  Intent intent=getIntent();
  baseUrl=(String)intent.getSerializableExtra(""String_Node_Str"");
  BBSName=(String)intent.getSerializableExtra(""String_Node_Str"");
  mode=(String)intent.getSerializableExtra(""String_Node_Str"");
  catalogURL=baseUrl + ""String_Node_Str"";
  setContentView(R.layout.futaba_catalog);
  listView=(ListView)findViewById(id.cataloglistview);
  adapter=new CatalogAdapter(this,R.layout.futaba_catalog_row,fthreads);
  listView.setAdapter(adapter);
  new Thread(new Runnable(){
    public void run(){
      handler2.post(new FutabaCatalogContentGetter());
    }
  }
).start();
}","private void loading(){
  Intent intent=getIntent();
  baseUrl=(String)intent.getSerializableExtra(""String_Node_Str"");
  BBSName=(String)intent.getSerializableExtra(""String_Node_Str"");
  mode=(String)intent.getSerializableExtra(""String_Node_Str"");
  catalogURL=baseUrl + ""String_Node_Str"";
  setContentView(R.layout.futaba_catalog);
  listView=(ListView)findViewById(id.cataloglistview);
  adapter=new CatalogAdapter(this,R.layout.futaba_catalog_row,fthreads);
  adapter.items.clear();
  listView.setAdapter(adapter);
  new Thread(new Runnable(){
    public void run(){
      handler2.post(new FutabaCatalogContentGetter());
    }
  }
).start();
}",0.9802994483845549
153098,"private void loading(){
  statuses=new ArrayList<FutabaStatus>();
  setContentView(R.layout.futaba_thread);
  listView=(ListView)findViewById(id.threadlistview);
  adapter=new FutabaThreadAdapter(this,R.layout.futaba_thread_row,statuses);
  listView.setAdapter(adapter);
  FutabaThreadContentGetter getterThread=new FutabaThreadContentGetter();
  getterThread.start();
}","private void loading(){
  statuses=new ArrayList<FutabaStatus>();
  setContentView(R.layout.futaba_thread);
  listView=(ListView)findViewById(id.threadlistview);
  adapter=new FutabaThreadAdapter(this,R.layout.futaba_thread_row,statuses);
  adapter.items.clear();
  listView.setAdapter(adapter);
  FutabaThreadContentGetter getterThread=new FutabaThreadContentGetter();
  getterThread.start();
}",0.9673202614379084
153099,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  baseURL=(String)intent.getSerializableExtra(""String_Node_Str"");
  threadNum=(String)intent.getSerializableExtra(""String_Node_Str"");
  threadURL=baseURL + threadNum;
  Log.d(""String_Node_Str"",""String_Node_Str"" + threadURL);
  setWait();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  baseURL=(String)intent.getSerializableExtra(""String_Node_Str"");
  threadNum=(String)intent.getSerializableExtra(""String_Node_Str"");
  threadURL=baseURL + threadNum;
  Log.d(""String_Node_Str"",""String_Node_Str"" + threadURL);
  statuses=new ArrayList<FutabaStatus>();
  setContentView(R.layout.futaba_thread);
  listView=(ListView)findViewById(id.threadlistview);
  adapter=new FutabaThreadAdapter(this,R.layout.futaba_thread_row,statuses);
  listView.setAdapter(adapter);
  setWait();
}",0.7471852610030706
153100,"public void run(){
  Toast.makeText(adapter.getContext(),toast_text_f,Toast.LENGTH_SHORT).show();
  setTitle(title);
  waitDialog.dismiss();
  adapter.notifyDataSetChanged();
  listView.invalidate();
}","public void run(){
  Toast.makeText(adapter.getContext(),toast_text_f,Toast.LENGTH_SHORT).show();
  setTitle(title);
  waitDialog.dismiss();
  adapter.notifyDataSetChanged();
  listView.invalidate();
  if (position != 0) {
    listView.setSelectionFromTop(Math.min(position,listView.getCount()),positionY);
  }
}",0.783625730994152
153101,"private void loading(){
  statuses=new ArrayList<FutabaStatus>();
  setContentView(R.layout.futaba_thread);
  listView=(ListView)findViewById(id.threadlistview);
  adapter=new FutabaThreadAdapter(this,R.layout.futaba_thread_row,statuses);
  listView.setAdapter(adapter);
  FutabaThreadContentGetter getterThread=new FutabaThreadContentGetter();
  getterThread.start();
}","private void loading(){
  FutabaThreadContentGetter getterThread=new FutabaThreadContentGetter();
  getterThread.start();
}",0.4989858012170385
153102,"public void onClickDeleteBtn(View v){
  final CharSequence[] items={""String_Node_Str"",""String_Node_Str""};
  AlertDialog.Builder dlg;
  dlg=new AlertDialog.Builder(Catalog.this);
  dlg.setTitle(""String_Node_Str"");
  dlg.setCancelable(true);
  dlg.setSingleChoiceItems(items,0,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int item){
      Catalog.this.delete_option=item;
    }
  }
);
  dlg.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      Catalog.this.deleteThreads();
    }
  }
);
  dlg.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
    }
  }
);
  dlg.show();
}","public void onClickDeleteBtn(View v){
  final CharSequence[] items={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  AlertDialog.Builder dlg;
  dlg=new AlertDialog.Builder(Catalog.this);
  dlg.setTitle(""String_Node_Str"");
  dlg.setCancelable(true);
  dlg.setSingleChoiceItems(items,0,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int item){
      Catalog.this.delete_option=item;
    }
  }
);
  dlg.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      Catalog.this.deleteThreads();
    }
  }
);
  dlg.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
    }
  }
);
  dlg.show();
}",0.988861386138614
153103,"public void deleteThreads(){
  try {
    ListView listView=(ListView)findViewById(id.cataloglistview);
    Log.d(""String_Node_Str"",""String_Node_Str"" + delete_option);
    if (delete_option == DELETE_CHECKED) {
      for (int i=listView.getChildCount() - 1; i >= 0; --i) {
        View view=listView.getChildAt(i);
        CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
        if (checkbox.isChecked()) {
          Log.d(""String_Node_Str"",""String_Node_Str"" + i);
          adapter.items.remove(i);
        }
      }
    }
 else     if (delete_option == DELETE_NONCHECKED) {
      for (int i=listView.getChildCount() - 1; i >= 0; --i) {
        View view=listView.getChildAt(i);
        CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
        if (!checkbox.isChecked()) {
          Log.d(""String_Node_Str"",""String_Node_Str"" + i);
          adapter.items.remove(i);
        }
      }
    }
    HistoryManager man=new HistoryManager();
    man.set(adapter.items);
    man.Save();
    adapter.notifyDataSetChanged();
    listView.invalidateViews();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}","public void deleteThreads(){
  try {
    ListView listView=(ListView)findViewById(id.cataloglistview);
    Log.d(""String_Node_Str"",""String_Node_Str"" + listView.getCount());
    Log.d(""String_Node_Str"",""String_Node_Str"" + delete_option);
    int firstPosition=listView.getFirstVisiblePosition();
    if (delete_option == DELETE_CHECKED) {
      for (int i=listView.getChildCount() - 1; i >= 0; --i) {
        View view=listView.getChildAt(i);
        if (view != null) {
          CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
          if (checkbox.isChecked()) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + i);
            adapter.items.remove(i + firstPosition);
          }
        }
      }
    }
 else     if (delete_option == DELETE_NONCHECKED) {
      for (int i=listView.getChildCount() - 1; i >= 0; --i) {
        View view=listView.getChildAt(i);
        if (view != null) {
          CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
          if (!checkbox.isChecked()) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + i);
            adapter.items.remove(i + firstPosition);
          }
        }
      }
    }
 else     if (delete_option == DELETE_ALL) {
      adapter.items.clear();
    }
    HistoryManager man=new HistoryManager();
    man.set(adapter.items);
    man.Save();
    adapter.notifyDataSetChanged();
    listView.invalidateViews();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.8695324283559578
153104,"public void deleteThreads(){
  try {
    ListView listView=(ListView)findViewById(id.cataloglistview);
    Log.d(""String_Node_Str"",""String_Node_Str"" + listView.getCount());
    Log.d(""String_Node_Str"",""String_Node_Str"" + delete_option);
    if (delete_option == DELETE_ALL) {
      adapter.items.clear();
    }
 else {
      if (delete_option == DELETE_CHECKED) {
        for (int i=adapter.items.size() - 1; i >= 0; --i) {
          Log.d(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ adapter.items.get(i).isChecked);
          if (adapter.items.get(i).isChecked) {
            adapter.items.remove(i);
          }
        }
      }
 else {
        for (int i=adapter.items.size() - 1; i >= 0; --i) {
          if (!adapter.items.get(i).isChecked) {
            adapter.items.remove(i);
          }
        }
      }
    }
    HistoryManager man=new HistoryManager();
    man.set(adapter.items);
    man.Save();
    adapter.notifyDataSetChanged();
    listView.invalidateViews();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}","public void deleteThreads(){
  try {
    ListView listView=(ListView)findViewById(id.cataloglistview);
    Log.d(""String_Node_Str"",""String_Node_Str"" + listView.getCount());
    Log.d(""String_Node_Str"",""String_Node_Str"" + delete_option);
    if (delete_option == DELETE_ALL) {
      adapter.items.clear();
    }
 else {
      if (delete_option == DELETE_CHECKED) {
        for (int i=adapter.items.size() - 1; i >= 0; --i) {
          Log.d(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ adapter.items.get(i).isChecked);
          if (adapter.items.get(i).isChecked) {
            adapter.items.remove(i);
          }
 else {
            adapter.items.get(i).isChecked=false;
          }
        }
      }
 else {
        for (int i=adapter.items.size() - 1; i >= 0; --i) {
          if (!adapter.items.get(i).isChecked) {
            adapter.items.remove(i);
          }
 else {
            adapter.items.get(i).isChecked=false;
          }
        }
      }
    }
    HistoryManager man=new HistoryManager();
    man.set(adapter.items);
    man.Save();
    adapter.notifyDataSetChanged();
    listView.invalidateViews();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.9391304347826088
153105,"public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  Log.d(""String_Node_Str"",""String_Node_Str"" + pos + ""String_Node_Str""+ isChecked);
  if (buttonView.isShown()) {
    items.get(pos).isChecked=isChecked;
  }
}","public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  Log.d(""String_Node_Str"",""String_Node_Str"" + buttonView.isShown());
  Log.d(""String_Node_Str"",""String_Node_Str"" + pos + ""String_Node_Str""+ isChecked);
  if (buttonView.isShown()) {
    items.get(pos).isChecked=isChecked;
  }
}",0.8710280373831776
153106,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  final FutabaThreadContent item=(FutabaThreadContent)items.get(position);
  final String threadNum=item.threadNum;
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_catalog_row,null);
  }
  if (true) {
    view.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Intent intent=new Intent();
        Catalog activity=(Catalog)getContext();
        try {
          FutabaThreadContent thread=item;
          if (!activity.mode.equals(""String_Node_Str"")) {
            thread.baseUrl=activity.baseUrl;
          }
          Calendar calendar=Calendar.getInstance();
          thread.lastAccessed=calendar.getTimeInMillis();
          HistoryManager man=new HistoryManager();
          man.Load();
          int maxHistoryNum=5;
          try {
            SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);
            maxHistoryNum=Integer.parseInt(preferences.getString(activity.getString(R.string.historynum),""String_Node_Str""));
          }
 catch (          Exception e) {
            Log.d(""String_Node_Str"",""String_Node_Str"",e);
          }
          man.addThread(thread,maxHistoryNum);
          man.Save();
        }
 catch (        Exception e) {
          Log.i(""String_Node_Str"",""String_Node_Str"",e);
        }
        if (!activity.mode.equals(""String_Node_Str"")) {
          String baseUrl=activity.baseUrl;
          intent.putExtra(""String_Node_Str"",baseUrl);
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          String baseUrl=item.baseUrl;
          intent.putExtra(""String_Node_Str"",baseUrl);
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
        intent.putExtra(""String_Node_Str"",threadNum);
        intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
        activity.startActivity(intent);
      }
    }
);
  }
  Bitmap bm=null;
  ImageView iv=(ImageView)view.findViewById(R.id.image);
  iv.setImageBitmap(bm);
  Catalog activity=(Catalog)getContext();
  final int pos=position;
  if (item != null) {
    TextView text=(TextView)view.findViewById(R.id.bottomtext);
    if (item.text != null) {
      CharSequence cs=Html.fromHtml(item.text);
      text.setText(cs);
    }
    TextView resNum=(TextView)view.findViewById(R.id.resnum);
    resNum.setText(item.resNum + ""String_Node_Str"");
    if (activity.mode.equals(""String_Node_Str"")) {
      TextView BBSName=(TextView)view.findViewById(R.id.bbsname);
      BBSName.setText(""String_Node_Str"" + item.BBSName + ""String_Node_Str"");
      view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
      checkbox.setChecked(item.isChecked);
      checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
        public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          Log.d(""String_Node_Str"",""String_Node_Str"" + pos + ""String_Node_Str""+ isChecked);
          if (buttonView.isShown()) {
            items.get(pos).isChecked=isChecked;
          }
        }
      }
);
    }
 else {
      CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
      checkbox.setVisibility(View.GONE);
      TextView nonclickableblank=(TextView)view.findViewById(id.nonclickableblank);
      nonclickableblank.setVisibility(View.GONE);
    }
    bm=Bitmap.createBitmap(50,50,Bitmap.Config.ALPHA_8);
    iv.setImageBitmap(bm);
    try {
      if (item.imgURL != null) {
        iv.setTag(item.imgURL);
        ImageGetTask task=new ImageGetTask(iv);
        task.execute(item.imgURL);
      }
 else {
      }
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  final FutabaThreadContent item=(FutabaThreadContent)items.get(position);
  final String threadNum=item.threadNum;
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_catalog_row,null);
  }
  if (true) {
    view.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Intent intent=new Intent();
        Catalog activity=(Catalog)getContext();
        try {
          FutabaThreadContent thread=item;
          if (!activity.mode.equals(""String_Node_Str"")) {
            thread.baseUrl=activity.baseUrl;
          }
          Calendar calendar=Calendar.getInstance();
          thread.lastAccessed=calendar.getTimeInMillis();
          HistoryManager man=new HistoryManager();
          man.Load();
          int maxHistoryNum=5;
          try {
            SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(activity);
            maxHistoryNum=Integer.parseInt(preferences.getString(activity.getString(R.string.historynum),""String_Node_Str""));
          }
 catch (          Exception e) {
            Log.d(""String_Node_Str"",""String_Node_Str"",e);
          }
          man.addThread(thread,maxHistoryNum);
          man.Save();
        }
 catch (        Exception e) {
          Log.i(""String_Node_Str"",""String_Node_Str"",e);
        }
        if (!activity.mode.equals(""String_Node_Str"")) {
          String baseUrl=activity.baseUrl;
          intent.putExtra(""String_Node_Str"",baseUrl);
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          String baseUrl=item.baseUrl;
          intent.putExtra(""String_Node_Str"",baseUrl);
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
        intent.putExtra(""String_Node_Str"",threadNum);
        intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
        activity.startActivity(intent);
      }
    }
);
  }
  Bitmap bm=null;
  ImageView iv=(ImageView)view.findViewById(R.id.image);
  iv.setImageBitmap(bm);
  Catalog activity=(Catalog)getContext();
  final int pos=position;
  if (item != null) {
    TextView text=(TextView)view.findViewById(R.id.bottomtext);
    if (item.text != null) {
      CharSequence cs=Html.fromHtml(item.text);
      text.setText(cs);
    }
    TextView resNum=(TextView)view.findViewById(R.id.resnum);
    resNum.setText(item.resNum + ""String_Node_Str"");
    if (activity.mode.equals(""String_Node_Str"")) {
      TextView BBSName=(TextView)view.findViewById(R.id.bbsname);
      BBSName.setText(""String_Node_Str"" + item.BBSName + ""String_Node_Str"");
      view.setBackgroundColor(Color.parseColor(""String_Node_Str""));
      CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
      checkbox.setChecked(item.isChecked);
      checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
        public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          Log.d(""String_Node_Str"",""String_Node_Str"" + buttonView.isShown());
          Log.d(""String_Node_Str"",""String_Node_Str"" + pos + ""String_Node_Str""+ isChecked);
          if (buttonView.isShown()) {
            items.get(pos).isChecked=isChecked;
          }
        }
      }
);
    }
 else {
      CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
      checkbox.setVisibility(View.GONE);
      TextView nonclickableblank=(TextView)view.findViewById(id.nonclickableblank);
      nonclickableblank.setVisibility(View.GONE);
    }
    bm=Bitmap.createBitmap(50,50,Bitmap.Config.ALPHA_8);
    iv.setImageBitmap(bm);
    try {
      if (item.imgURL != null) {
        iv.setTag(item.imgURL);
        ImageGetTask task=new ImageGetTask(iv);
        task.execute(item.imgURL);
      }
 else {
      }
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
  return view;
}",0.990368980612883
153107,"private void loading(){
  TextView name_v=(TextView)findViewById(id.name);
  String name=name_v.getText().toString();
  TextView email_v=(TextView)findViewById(id.email);
  String email=email_v.getText().toString();
  TextView comment_v=(TextView)findViewById(id.comment);
  String comment=comment_v.getText().toString();
  TextView deletekey_v=(TextView)findViewById(id.deletekey);
  String deletekey=deletekey_v.getText().toString();
  Log.d(""String_Node_Str"",""String_Node_Str"" + threadNum);
  Log.d(""String_Node_Str"",""String_Node_Str"" + urlStr);
  Log.d(""String_Node_Str"",""String_Node_Str"" + comment);
  Log.d(""String_Node_Str"",""String_Node_Str"" + deletekey);
  Log.d(""String_Node_Str"",""String_Node_Str"" + email);
  Log.d(""String_Node_Str"",""String_Node_Str"" + name);
  Log.d(""String_Node_Str"",""String_Node_Str"" + threadURL);
  if (false) {
    return;
  }
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    FutabaCookieManager.loadCookie(httpClient);
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    try {
{
        List<Cookie> cookies=httpClient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          for (int i=0; i < cookies.size(); i++) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + cookies.get(i).toString());
          }
        }
      }
    }
 catch (    Exception e) {
      Log.i(""String_Node_Str"",""String_Node_Str"",e);
    }
    HttpPost httppost=new HttpPost(urlStr);
    if (false) {
    }
    MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
    Charset sjisCharset=Charset.forName(""String_Node_Str"");
    entity.addPart(""String_Node_Str"",new StringBody(email,sjisCharset));
    entity.addPart(""String_Node_Str"",new StringBody(name,sjisCharset));
    entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
    entity.addPart(""String_Node_Str"",new StringBody(threadNum));
    entity.addPart(""String_Node_Str"",new StringBody(comment,sjisCharset));
    entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
    entity.addPart(""String_Node_Str"",new StringBody(deletekey));
    if (imageContent != null) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + imageContent);
      Log.d(""String_Node_Str"",""String_Node_Str"" + imageContent.getPath());
      FileBody fileBody=new FileBody(new File(imageContent.getPath()));
      entity.addPart(""String_Node_Str"",fileBody);
    }
    httppost.setEntity(entity);
    httppost.addHeader(""String_Node_Str"",threadURL);
    HttpResponse response=httpClient.execute(httppost);
    FutabaCookieManager.saveCookie(httpClient);
    ByteArrayOutputStream byteArrayOutputStream2=new ByteArrayOutputStream();
    response.getEntity().writeTo(byteArrayOutputStream2);
    String retData2=byteArrayOutputStream2.toString(""String_Node_Str"");
    Log.v(""String_Node_Str"",retData2);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    PostParser parser=new PostParser();
    String contents=parser.parse(this,retData2);
    if (!contents.equals(""String_Node_Str"")) {
      Toast.makeText(this,contents,Toast.LENGTH_LONG).show();
    }
 else {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
  waitDialog.dismiss();
  finish();
}","private void loading(){
  TextView name_v=(TextView)findViewById(id.name);
  String name=name_v.getText().toString();
  TextView email_v=(TextView)findViewById(id.email);
  String email=email_v.getText().toString();
  TextView comment_v=(TextView)findViewById(id.comment);
  String comment=comment_v.getText().toString();
  TextView deletekey_v=(TextView)findViewById(id.deletekey);
  String deletekey=deletekey_v.getText().toString();
  Log.d(""String_Node_Str"",""String_Node_Str"" + threadNum);
  Log.d(""String_Node_Str"",""String_Node_Str"" + urlStr);
  Log.d(""String_Node_Str"",""String_Node_Str"" + comment);
  Log.d(""String_Node_Str"",""String_Node_Str"" + deletekey);
  Log.d(""String_Node_Str"",""String_Node_Str"" + email);
  Log.d(""String_Node_Str"",""String_Node_Str"" + name);
  Log.d(""String_Node_Str"",""String_Node_Str"" + threadURL);
  if (false) {
    return;
  }
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    FutabaCookieManager.loadCookie(httpClient);
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    try {
{
        List<Cookie> cookies=httpClient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          for (int i=0; i < cookies.size(); i++) {
            Log.d(""String_Node_Str"",""String_Node_Str"" + cookies.get(i).toString());
          }
        }
      }
    }
 catch (    Exception e) {
      Log.i(""String_Node_Str"",""String_Node_Str"",e);
    }
    HttpPost httppost=new HttpPost(urlStr);
    if (false) {
    }
    MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
    Charset sjisCharset=Charset.forName(""String_Node_Str"");
    entity.addPart(""String_Node_Str"",new StringBody(email,sjisCharset));
    entity.addPart(""String_Node_Str"",new StringBody(name,sjisCharset));
    entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
    entity.addPart(""String_Node_Str"",new StringBody(threadNum));
    entity.addPart(""String_Node_Str"",new StringBody(comment,sjisCharset));
    entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
    entity.addPart(""String_Node_Str"",new StringBody(deletekey));
    if (imageContent != null) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + imageContent);
      Log.d(""String_Node_Str"",""String_Node_Str"" + imageContent.getPath());
      Cursor c=getContentResolver().query(imageContent,null,null,null,null);
      c.moveToFirst();
      String filename=c.getString(c.getColumnIndex(MediaStore.MediaColumns.DATA));
      Log.d(""String_Node_Str"",""String_Node_Str"" + filename);
      FileBody fileBody=new FileBody(new File(filename));
      entity.addPart(""String_Node_Str"",fileBody);
    }
    httppost.setEntity(entity);
    httppost.addHeader(""String_Node_Str"",threadURL);
    HttpResponse response=httpClient.execute(httppost);
    FutabaCookieManager.saveCookie(httpClient);
    ByteArrayOutputStream byteArrayOutputStream2=new ByteArrayOutputStream();
    response.getEntity().writeTo(byteArrayOutputStream2);
    String retData2=byteArrayOutputStream2.toString(""String_Node_Str"");
    Log.v(""String_Node_Str"",retData2);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    PostParser parser=new PostParser();
    String contents=parser.parse(this,retData2);
    if (!contents.equals(""String_Node_Str"")) {
      Toast.makeText(this,contents,Toast.LENGTH_LONG).show();
    }
 else {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
  waitDialog.dismiss();
  finish();
}",0.9632904608788854
153108,"public void zoomImageToWindow(){
  if (bm.getWidth() < width && bm.getHeight() < height) {
    bx=bm.getWidth();
    by=bm.getHeight();
  }
 else {
    float scale=Math.min((float)width / (float)bm.getWidth(),(float)height / (float)bm.getHeight());
    Log.d(""String_Node_Str"",""String_Node_Str"" + scale);
    matrix.setScale(scale,scale);
    bx=bm.getWidth() * scale;
    by=bm.getHeight() * scale;
  }
  float[] values=new float[9];
  matrix.getValues(values);
  values[Matrix.MTRANS_X]=(width - bx) / 2;
  values[Matrix.MTRANS_Y]=(height - by) / 2;
  matrix.setValues(values);
}","public void zoomImageToWindow(){
  if (bm.getWidth() < width && bm.getHeight() < height) {
    matrix.setScale(1f,1f);
    bx=bm.getWidth();
    by=bm.getHeight();
  }
 else {
    float scale=Math.min((float)width / (float)bm.getWidth(),(float)height / (float)bm.getHeight());
    Log.d(""String_Node_Str"",""String_Node_Str"" + scale);
    matrix.setScale(scale,scale);
    bx=bm.getWidth() * scale;
    by=bm.getHeight() * scale;
  }
  float[] values=new float[9];
  matrix.getValues(values);
  values[Matrix.MTRANS_X]=(width - bx) / 2;
  values[Matrix.MTRANS_Y]=(height - by) / 2;
  matrix.setValues(values);
}",0.976470588235294
153109,"public void parse(){
  try {
    Pattern BBSPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    String allData=""String_Node_Str"";
    try {
      SDCard.saveFromURL(FutabaCrypt.createDigest(urlStr),new URL(urlStr),true);
      allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      network_ok=false;
      if (SDCard.cacheExist(FutabaCrypt.createDigest(urlStr))) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
      }
 else {
        cache_ok=false;
      }
    }
    Matcher mcBBS=BBSPattern.matcher(allData);
    while (mcBBS.find()) {
      FutabaBBS bbs=new FutabaBBS();
      bbs.url=mcBBS.group(1);
      bbs.name=mcBBS.group(2);
      BBSs.add(bbs);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}","public void parse(){
  try {
    Pattern BBSPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    String allData=""String_Node_Str"";
    try {
      SDCard.saveFromURL(FutabaCrypt.createDigest(urlStr),new URL(urlStr),true);
      allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
      network_ok=true;
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      network_ok=false;
      if (SDCard.cacheExist(FutabaCrypt.createDigest(urlStr))) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
      }
 else {
        cache_ok=false;
      }
    }
    Matcher mcBBS=BBSPattern.matcher(allData);
    while (mcBBS.find()) {
      FutabaBBS bbs=new FutabaBBS();
      bbs.url=mcBBS.group(1);
      bbs.name=mcBBS.group(2);
      BBSs.add(bbs);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.9878499735868992
153110,"public void parse(Context context){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern threadNumPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern tagPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    CookieManager.getInstance().setAcceptCookie(true);
    CookieManager.getInstance().removeExpiredCookie();
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    FutabaCookieManager.loadCookie(httpClient);
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    HttpPost httppost=new HttpPost(urlStr);
    List<NameValuePair> nameValuePair=new ArrayList<NameValuePair>(3);
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    urlStr=urlStr + ""String_Node_Str"";
    String data=null;
    try {
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePair));
      HttpResponse response=httpClient.execute(httppost);
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      response.getEntity().writeTo(byteArrayOutputStream);
      HttpGet httpget=new HttpGet(urlStr);
      HttpResponse httpResponse=null;
      httpResponse=httpClient.execute(httpget);
      FutabaCookieManager.saveCookie(httpClient);
      int status=httpResponse.getStatusLine().getStatusCode();
      if (HttpStatus.SC_OK == status) {
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        httpResponse.getEntity().writeTo(outputStream);
        SDCard.saveBin(FutabaCrypt.createDigest(urlStr),outputStream.toByteArray(),true);
        data=outputStream.toString(""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + status);
        throw new Exception(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"",e);
      network_ok=false;
      if (SDCard.cacheExist(FutabaCrypt.createDigest(urlStr))) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + FutabaCrypt.createDigest(urlStr));
        data=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + FutabaCrypt.createDigest(urlStr) + ""String_Node_Str"");
        cache_ok=false;
      }
    }
    Matcher mc=honbunPattern.matcher(data);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      Matcher mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaThread thread=new FutabaThread();
      String text=mcText.group(1);
      String resNum=mcText.group(2);
      text=tagPattern.matcher(text).replaceAll(""String_Node_Str"");
      thread.text=text;
      thread.resNum=resNum;
      Matcher mcThreadNum=threadNumPattern.matcher(mcRes.group(1));
      mcThreadNum.find();
      String threadNum=mcThreadNum.group(1);
      thread.threadNum=threadNum;
      Matcher mcImg=imgPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        thread.imgURL=mcImg.group(1);
      }
      fthreads.add(thread);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}","public void parse(Context context){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern threadNumPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern tagPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    CookieManager.getInstance().setAcceptCookie(true);
    CookieManager.getInstance().removeExpiredCookie();
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    FutabaCookieManager.loadCookie(httpClient);
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    HttpPost httppost=new HttpPost(urlStr);
    List<NameValuePair> nameValuePair=new ArrayList<NameValuePair>(3);
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    urlStr=urlStr + ""String_Node_Str"";
    String data=null;
    try {
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePair));
      HttpResponse response=httpClient.execute(httppost);
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      response.getEntity().writeTo(byteArrayOutputStream);
      HttpGet httpget=new HttpGet(urlStr);
      HttpResponse httpResponse=null;
      httpResponse=httpClient.execute(httpget);
      FutabaCookieManager.saveCookie(httpClient);
      int status=httpResponse.getStatusLine().getStatusCode();
      if (HttpStatus.SC_OK == status) {
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        httpResponse.getEntity().writeTo(outputStream);
        SDCard.saveBin(FutabaCrypt.createDigest(urlStr),outputStream.toByteArray(),true);
        data=outputStream.toString(""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + status);
        throw new Exception(""String_Node_Str"");
      }
      network_ok=true;
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"",e);
      network_ok=false;
      if (SDCard.cacheExist(FutabaCrypt.createDigest(urlStr))) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + FutabaCrypt.createDigest(urlStr));
        data=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"" + FutabaCrypt.createDigest(urlStr) + ""String_Node_Str"");
        cache_ok=false;
      }
    }
    Matcher mc=honbunPattern.matcher(data);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      Matcher mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaThread thread=new FutabaThread();
      String text=mcText.group(1);
      String resNum=mcText.group(2);
      text=tagPattern.matcher(text).replaceAll(""String_Node_Str"");
      thread.text=text;
      thread.resNum=resNum;
      Matcher mcThreadNum=threadNumPattern.matcher(mcRes.group(1));
      mcThreadNum.find();
      String threadNum=mcThreadNum.group(1);
      thread.threadNum=threadNum;
      Matcher mcImg=imgPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        thread.imgURL=mcImg.group(1);
      }
      fthreads.add(thread);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}",0.9970418006430868
153111,"public void parse(){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    String allData=""String_Node_Str"";
    try {
      SDCard.saveFromURL(FutabaCrypt.createDigest(urlStr),new URL(urlStr),true);
      allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
    }
 catch (    Exception e) {
      network_ok=false;
      Log.d(""String_Node_Str"",""String_Node_Str"");
      if (SDCard.cacheExist(FutabaCrypt.createDigest(urlStr))) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
        cache_ok=true;
      }
 else {
        cache_ok=false;
      }
    }
    Matcher mc=honbunPattern.matcher(allData);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=thumbPattern.matcher(honbun);
    mcImg.find();
    statusTop.imgURL=mcImg.group(1);
    statusTop.width=Integer.parseInt(mcImg.group(2));
    statusTop.height=Integer.parseInt(mcImg.group(3));
    Matcher mcBigImg=imgPattern.matcher(honbun);
    mcBigImg.find();
    statusTop.bigImgURL=mcBigImg.group(1);
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    statusTop.title=mcText.group(1);
    statusTop.name=mcText.group(2);
    statusTop.datestr=mcText.group(3);
    statusTop.idstr=mcText.group(4);
    String text=mcText.group(5);
    text=normalize(text);
    statusTop.text=text;
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaStatus status=new FutabaStatus();
      status.title=mcText.group(1);
      status.name=normalize(mcText.group(2));
      status.datestr=mcText.group(3);
      status.idstr=mcText.group(4);
      text=mcText.group(5);
      text=normalize(text);
      status.text=text;
      mcImg=thumbPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.imgURL=mcImg.group(1);
        status.width=Integer.parseInt(mcImg.group(2));
        status.height=Integer.parseInt(mcImg.group(3));
      }
      mcBigImg=imgPattern.matcher(mcRes.group(1));
      if (mcBigImg.find()) {
        status.bigImgURL=mcBigImg.group(1);
      }
      statuses.add(status);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}","public void parse(){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    String allData=""String_Node_Str"";
    try {
      SDCard.saveFromURL(FutabaCrypt.createDigest(urlStr),new URL(urlStr),true);
      allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
      network_ok=true;
    }
 catch (    Exception e) {
      network_ok=false;
      Log.d(""String_Node_Str"",""String_Node_Str"");
      if (SDCard.cacheExist(FutabaCrypt.createDigest(urlStr))) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        allData=SDCard.loadTextCache(FutabaCrypt.createDigest(urlStr));
        cache_ok=true;
      }
 else {
        cache_ok=false;
      }
    }
    Matcher mc=honbunPattern.matcher(allData);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=thumbPattern.matcher(honbun);
    mcImg.find();
    statusTop.imgURL=mcImg.group(1);
    statusTop.width=Integer.parseInt(mcImg.group(2));
    statusTop.height=Integer.parseInt(mcImg.group(3));
    Matcher mcBigImg=imgPattern.matcher(honbun);
    mcBigImg.find();
    statusTop.bigImgURL=mcBigImg.group(1);
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    statusTop.title=mcText.group(1);
    statusTop.name=mcText.group(2);
    statusTop.datestr=mcText.group(3);
    statusTop.idstr=mcText.group(4);
    String text=mcText.group(5);
    text=normalize(text);
    statusTop.text=text;
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaStatus status=new FutabaStatus();
      status.title=mcText.group(1);
      status.name=normalize(mcText.group(2));
      status.datestr=mcText.group(3);
      status.idstr=mcText.group(4);
      text=mcText.group(5);
      text=normalize(text);
      status.text=text;
      mcImg=thumbPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.imgURL=mcImg.group(1);
        status.width=Integer.parseInt(mcImg.group(2));
        status.height=Integer.parseInt(mcImg.group(3));
      }
      mcBigImg=imgPattern.matcher(mcRes.group(1));
      if (mcBigImg.find()) {
        status.bigImgURL=mcBigImg.group(1);
      }
      statuses.add(status);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.9958128527216458
153112,"public static void setImage(String url){
  String urlHash=FutabaCrypt.createDigest(url);
  try {
    SDCard.saveFromURL(urlHash,new URL(url),true);
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}","public static boolean setImage(String url){
  String urlHash=FutabaCrypt.createDigest(url);
  try {
    SDCard.saveFromURL(urlHash,new URL(url),true);
    return true;
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",""String_Node_Str"",e);
  }
  return false;
}",0.908
153113,"@Override protected Bitmap doInBackground(String... urls){
  Bitmap bm=null;
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"" + urls[0]);
    bm=ImageCache.getImage(urls[0]);
    if (bm == null) {
      ImageCache.setImage(urls[0]);
      bm=ImageCache.getImage(urls[0]);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
  return bm;
}","@Override protected Bitmap doInBackground(String... urls){
  Bitmap bm=null;
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"" + urls[0]);
    bm=ImageCache.getImage(urls[0]);
    if (bm == null) {
      boolean network_result=ImageCache.setImage(urls[0]);
      if (!network_result) {
        Toast.makeText(getContext(),""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
      bm=ImageCache.getImage(urls[0]);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
  return bm;
}",0.824295010845987
153114,"@Override protected Bitmap doInBackground(String... urls){
  Bitmap bm=ImageCache.getImage(urls[0]);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  while (bm == null) {
    try {
      HttpGet httpRequest=new HttpGet(new URI(urls[0]));
      HttpClient httpclient=new DefaultHttpClient();
      HttpResponse response=(HttpResponse)httpclient.execute(httpRequest);
      HttpEntity entity=response.getEntity();
      BufferedHttpEntity bufHttpEntity=new BufferedHttpEntity(entity);
      InputStream is=bufHttpEntity.getContent();
      if (is != null) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      bm=BitmapFactory.decodeStream(is);
      if (bm == null) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",String.valueOf(bm.getWidth()) + ""String_Node_Str"" + String.valueOf(bm.getHeight()));
      }
      float s_x=Math.max(1.0f,(float)bm.getWidth() / (float)width);
      float s_y=Math.max(1.0f,(float)bm.getHeight() / (float)height);
      float scale=Math.max(s_x,s_y);
      int new_x=(int)(bm.getWidth() / scale);
      int new_y=(int)(bm.getHeight() / scale);
      bm=Bitmap.createScaledBitmap(bm,new_x,new_y,true);
      ImageCache.setImage(urls[0],bm);
    }
 catch (    Exception e) {
      Log.i(""String_Node_Str"",""String_Node_Str"",e);
      Log.d(""String_Node_Str"",""String_Node_Str"" + urls[0]);
      try {
        Thread.sleep(1 * 1000);
      }
 catch (      Exception e2) {
        Log.i(""String_Node_Str"",""String_Node_Str"",e2);
      }
    }
  }
  return bm;
}","@Override protected Bitmap doInBackground(String... urls){
  Bitmap bm=ImageCache.getImage(urls[0]);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (bm == null) {
synchronized (FutabaAdapter.lock) {
      try {
        URL imgURL=new URL(urls[0]);
        InputStream is=imgURL.openStream();
        bm=BitmapFactory.decodeStream(is);
        if (bm == null) {
          return null;
        }
        float s_x=Math.max(1.0f,(float)bm.getWidth() / (float)width);
        float s_y=Math.max(1.0f,(float)bm.getHeight() / (float)height);
        float scale=Math.max(s_x,s_y);
        int new_x=(int)(bm.getWidth() / scale);
        int new_y=(int)(bm.getHeight() / scale);
        bm=Bitmap.createScaledBitmap(bm,new_x,new_y,true);
        ImageCache.setImage(urls[0],bm);
      }
 catch (      Exception e) {
        Log.i(""String_Node_Str"",""String_Node_Str"",e);
        Log.d(""String_Node_Str"",""String_Node_Str"" + urls[0]);
        try {
          Thread.sleep(1 * 1000);
        }
 catch (        Exception e2) {
          Log.i(""String_Node_Str"",""String_Node_Str"",e2);
        }
      }
    }
  }
  return bm;
}",0.7028849756463095
153115,"@Override protected void onPostExecute(Bitmap result){
  Log.d(""String_Node_Str"",""String_Node_Str"" + tag + ""String_Node_Str""+ image.getTag().toString());
  if (tag.equals(image.getTag())) {
    image.setImageBitmap(result);
    if (true) {
      image.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          Log.d(""String_Node_Str"",""String_Node_Str"");
          Intent intent=new Intent();
          fthread activity=(fthread)getContext();
          intent.putExtra(""String_Node_Str"",activity.getImageURLs());
          intent.putExtra(""String_Node_Str"",tag);
          intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
          activity.startActivity(intent);
        }
      }
);
    }
  }
}","@Override protected void onPostExecute(Bitmap result){
  Log.d(""String_Node_Str"",""String_Node_Str"" + tag + ""String_Node_Str""+ image.getTag().toString());
  if (tag.equals(image.getTag())) {
    if (result == null) {
      TextView screenName=(TextView)image.findViewById(R.id.toptext);
      if (screenName != null) {
        screenName.setText(""String_Node_Str"");
      }
      return;
    }
    image.setImageBitmap(result);
    if (true) {
      image.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          Log.d(""String_Node_Str"",""String_Node_Str"");
          Intent intent=new Intent();
          fthread activity=(fthread)getContext();
          intent.putExtra(""String_Node_Str"",activity.getImageURLs());
          intent.putExtra(""String_Node_Str"",tag);
          intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
          activity.startActivity(intent);
        }
      }
);
    }
  }
}",0.8887671232876713
153116,"public void parse(Context context){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern threadNumPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern tagPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    CookieSyncManager.createInstance(context);
    CookieSyncManager.getInstance().startSync();
    CookieManager.getInstance().setAcceptCookie(true);
    CookieManager.getInstance().removeExpiredCookie();
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    HttpPost httppost=new HttpPost(urlStr);
    List<NameValuePair> nameValuePair=new ArrayList<NameValuePair>(3);
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    try {
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePair));
      HttpResponse response=httpClient.execute(httppost);
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      response.getEntity().writeTo(byteArrayOutputStream);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    HttpGet httpget=new HttpGet(urlStr + ""String_Node_Str"");
    HttpResponse httpResponse=null;
    try {
      httpResponse=httpClient.execute(httpget);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    int status=httpResponse.getStatusLine().getStatusCode();
    String data=null;
    if (HttpStatus.SC_OK == status) {
      try {
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        httpResponse.getEntity().writeTo(outputStream);
        data=outputStream.toString(""String_Node_Str"");
      }
 catch (      Exception e) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + status);
    }
    Matcher mc=honbunPattern.matcher(data);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      Matcher mcText=textPattern.matcher(mcRes.group(1));
      Log.d(""String_Node_Str"",mcRes.group(1));
      mcText.find();
      FutabaThread thread=new FutabaThread();
      String text=mcText.group(1);
      text=tagPattern.matcher(text).replaceAll(""String_Node_Str"");
      thread.setText(text);
      Matcher mcThreadNum=threadNumPattern.matcher(mcRes.group(1));
      mcThreadNum.find();
      String threadNum=mcThreadNum.group(1);
      thread.setThreadNum(threadNum);
      Matcher mcImg=imgPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        thread.setImgURL(mcImg.group(1));
        Log.d(""String_Node_Str"",mcImg.group(1));
      }
      fthreads.add(thread);
    }
    Log.d(""String_Node_Str"",String.valueOf(fthreads.size()));
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",e.toString());
    throw new RuntimeException(e);
  }
}","public void parse(Context context){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern threadNumPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern tagPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    CookieSyncManager.createInstance(context);
    CookieSyncManager.getInstance().startSync();
    CookieManager.getInstance().setAcceptCookie(true);
    CookieManager.getInstance().removeExpiredCookie();
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    HttpPost httppost=new HttpPost(urlStr);
    List<NameValuePair> nameValuePair=new ArrayList<NameValuePair>(3);
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    try {
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePair));
      HttpResponse response=httpClient.execute(httppost);
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      response.getEntity().writeTo(byteArrayOutputStream);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    HttpGet httpget=new HttpGet(urlStr + ""String_Node_Str"");
    HttpResponse httpResponse=null;
    try {
      httpResponse=httpClient.execute(httpget);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    int status=httpResponse.getStatusLine().getStatusCode();
    String data=null;
    if (HttpStatus.SC_OK == status) {
      try {
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        httpResponse.getEntity().writeTo(outputStream);
        data=outputStream.toString(""String_Node_Str"");
      }
 catch (      Exception e) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + status);
    }
    Matcher mc=honbunPattern.matcher(data);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      Matcher mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaThread thread=new FutabaThread();
      String text=mcText.group(1);
      text=tagPattern.matcher(text).replaceAll(""String_Node_Str"");
      thread.setText(text);
      Matcher mcThreadNum=threadNumPattern.matcher(mcRes.group(1));
      mcThreadNum.find();
      String threadNum=mcThreadNum.group(1);
      thread.setThreadNum(threadNum);
      Matcher mcImg=imgPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        thread.setImgURL(mcImg.group(1));
      }
      fthreads.add(thread);
    }
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",e.toString());
    throw new RuntimeException(e);
  }
}",0.9776077097505668
153117,"public void parse(){
  XmlPullParser parser=Xml.newPullParser();
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    byte[] data=HttpClient.getByteArrayFromURL(urlStr);
    Matcher mc=honbunPattern.matcher(new String(data,""String_Node_Str""));
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=imgPattern.matcher(honbun);
    mcImg.find();
    Log.d(""String_Node_Str"",""String_Node_Str"");
    statusTop.setImgURL(mcImg.group(1));
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    String text=mcText.group(1);
    text=normalize(text);
    statusTop.setText(text);
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaStatus status=new FutabaStatus();
      text=mcText.group(1);
      text=normalize(text);
      status.setText(text);
      mcImg=imgPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.setImgURL(mcImg.group(1));
        Log.d(""String_Node_Str"",mcImg.group(1));
      }
      statuses.add(status);
    }
    Log.d(""String_Node_Str"",String.valueOf(statuses.size()));
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}","public void parse(){
  XmlPullParser parser=Xml.newPullParser();
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern thumbPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    byte[] data=HttpClient.getByteArrayFromURL(urlStr);
    Matcher mc=honbunPattern.matcher(new String(data,""String_Node_Str""));
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    FutabaStatus statusTop=new FutabaStatus();
    Matcher mcImg=imgPattern.matcher(honbun);
    mcImg.find();
    statusTop.setImgURL(mcImg.group(1));
    Matcher mcText=textPattern.matcher(honbun);
    mcText.find();
    String text=mcText.group(1);
    text=normalize(text);
    statusTop.setText(text);
    statuses.add(statusTop);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaStatus status=new FutabaStatus();
      text=mcText.group(1);
      text=normalize(text);
      status.setText(text);
      mcImg=imgPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.setImgURL(mcImg.group(1));
      }
      statuses.add(status);
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.892141266306077
153118,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  String threadURL=""String_Node_Str"" + (String)intent.getSerializableExtra(""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + threadURL);
  statuses=new ArrayList<FutabaStatus>();
  FutabaThreadParser parser=new FutabaThreadParser(threadURL);
  parser.parse();
  statuses=parser.getStatuses();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  adapter=new FutabaAdapter(this,R.layout.futaba_row,statuses);
  setListAdapter(adapter);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    Intent intent=getIntent();
    String threadURL=""String_Node_Str"" + (String)intent.getSerializableExtra(""String_Node_Str"");
    Log.d(""String_Node_Str"",""String_Node_Str"" + threadURL);
    statuses=new ArrayList<FutabaStatus>();
    FutabaThreadParser parser=new FutabaThreadParser(threadURL);
    parser.parse();
    statuses=parser.getStatuses();
    Log.d(""String_Node_Str"",""String_Node_Str"");
    adapter=new FutabaAdapter(this,R.layout.futaba_row,statuses);
    setListAdapter(adapter);
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.8862370723945903
153119,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  FutabaThread item=(FutabaThread)items.get(position);
  final String threadNum=item.getThreadNum();
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_catalog_row,null);
    view.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Intent intent=new Intent();
        Activity activity=(Activity)getContext();
        intent.putExtra(""String_Node_Str"",threadNum);
        intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
        activity.startActivity(intent);
      }
    }
);
  }
  Bitmap bm=null;
  ImageView iv=(ImageView)view.findViewById(R.id.image);
  iv.setImageBitmap(bm);
  if (item != null) {
    TextView text=(TextView)view.findViewById(R.id.bottomtext);
    try {
      if (item.getImgURL() != null) {
        iv.setTag(item.getImgURL());
        ImageGetTask task=new ImageGetTask(iv);
        task.execute(item.getImgURL());
      }
 else {
      }
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",e.toString());
    }
    if (text != null) {
      text.setText(item.getText());
    }
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  FutabaThread item=(FutabaThread)items.get(position);
  final String threadNum=item.getThreadNum();
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_catalog_row,null);
  }
  if (true) {
    view.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Intent intent=new Intent();
        Activity activity=(Activity)getContext();
        intent.putExtra(""String_Node_Str"",threadNum);
        intent.setClassName(activity.getPackageName(),activity.getClass().getPackage().getName() + ""String_Node_Str"");
        activity.startActivity(intent);
      }
    }
);
  }
  Bitmap bm=null;
  ImageView iv=(ImageView)view.findViewById(R.id.image);
  iv.setImageBitmap(bm);
  if (item != null) {
    TextView text=(TextView)view.findViewById(R.id.bottomtext);
    try {
      if (item.getImgURL() != null) {
        iv.setTag(item.getImgURL());
        ImageGetTask task=new ImageGetTask(iv);
        task.execute(item.getImgURL());
      }
 else {
      }
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",e.toString());
    }
    if (text != null) {
      text.setText(item.getText());
    }
  }
  return view;
}",0.9932279909706546
153120,"@Override protected void onPostExecute(Bitmap result){
  Log.d(""String_Node_Str"",""String_Node_Str"" + tag + ""String_Node_Str""+ image.getTag().toString());
  if (tag.equals(image.getTag())) {
    image.doDraw();
  }
}","@Override protected void onPostExecute(Bitmap result){
  Log.d(""String_Node_Str"",""String_Node_Str"" + tag + ""String_Node_Str""+ image.getTag().toString());
  if (tag.equals(image.getTag())) {
    if (image) {
      image.doDraw();
    }
  }
}",0.945054945054945
153121,"@Override protected Bitmap doInBackground(URLs... urls){
  URL imgURL=urls[0];
  Bitmap bm=ImageCache.getImage(imgURL);
  if (bm == null) {
    InputStream is=imgURL.openStream();
    Bitmap bm=BitmapFactory.decodeStream(is);
    float s_x=Math.max(1.0f,(float)bm.getWidth() / (float)Math.min(width,height));
    float s_y=Math.max(1.0f,(float)bm.getHeight() / (float)Math.min(width,height));
    float scale=Math.max(s_x,s_y);
    int new_x=(int)(bm.getWidth() / scale);
    int new_y=(int)(bm.getHeight() / scale);
    bm=Bitmap.createScaledBitmap(bm,new_x,new_y,false);
    ImageCache.setImage(imgURL,bm);
  }
  return bm;
}","@Override protected Bitmap doInBackground(String... urls){
  Bitmap bm=ImageCache.getImage(urls[0]);
  if (bm == null) {
    try {
      URL imgURL=new URL(urls[0]);
      InputStream is=imgURL.openStream();
      bm=BitmapFactory.decodeStream(is);
      float s_x=Math.max(1.0f,(float)bm.getWidth() / (float)Math.min(width,height));
      float s_y=Math.max(1.0f,(float)bm.getHeight() / (float)Math.min(width,height));
      float scale=Math.max(s_x,s_y);
      int new_x=(int)(bm.getWidth() / scale);
      int new_y=(int)(bm.getHeight() / scale);
      bm=Bitmap.createScaledBitmap(bm,new_x,new_y,false);
      ImageCache.setImage(urls[0],bm);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",e.toString());
    }
  }
  return bm;
}",0.1104651162790697
153122,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_row,null);
  }
  FutabaStatus item=(FutabaStatus)items.get(position);
  if (item != null) {
    TextView screenName=(TextView)view.findViewById(R.id.toptext);
    screenName.setTypeface(Typeface.DEFAULT_BOLD);
    TextView text=(TextView)view.findViewById(R.id.bottomtext);
    if (screenName != null) {
      screenName.setText(""String_Node_Str"");
    }
    try {
      URL imgURL=new URL(item.getImgURL());
      if (item.getImgURL() != ""String_Node_Str"") {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        GetImageTask task=new GetImageTask(iv);
        task.execute(imgURL);
        screenName.setText(""String_Node_Str"");
      }
 else {
      }
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",e.toString());
    }
    if (text != null) {
      text.setText(item.getText());
    }
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  if (view == null) {
    view=inflater.inflate(R.layout.futaba_row,null);
  }
  FutabaStatus item=(FutabaStatus)items.get(position);
  if (item != null) {
    TextView screenName=(TextView)view.findViewById(R.id.toptext);
    screenName.setTypeface(Typeface.DEFAULT_BOLD);
    TextView text=(TextView)view.findViewById(R.id.bottomtext);
    if (screenName != null) {
      screenName.setText(""String_Node_Str"");
    }
    try {
      if (item.getImgURL() != ""String_Node_Str"") {
        ImageView iv=(ImageView)view.findViewById(R.id.image);
        ImageGetTask task=new ImageGetTask(iv);
        task.execute(item.getImgURL());
        screenName.setText(""String_Node_Str"");
      }
 else {
      }
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",e.toString());
    }
    if (text != null) {
      text.setText(item.getText());
    }
  }
  return view;
}",0.62134944612286
153123,"public FutabaCatalogParser(String urlStr){
  this.urlStr=urlStr;
  title=""String_Node_Str"";
  statuses=new ArrayList<FutabaThread>();
}","public FutabaCatalogParser(String urlStr){
  this.urlStr=urlStr;
  title=""String_Node_Str"";
  fthreads=new ArrayList<FutabaThread>();
}",0.9629629629629628
153124,"public void parse(){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern tagPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    cookieSyncManager.createInstance(this);
    CookieSyncManager.getInstance().startSync();
    CookieManager.getInstance().setAcceptCookie(true);
    CookieManager.getInstance().removeExpiredCookie();
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    HttpPost httppost=new HttpPost(urlStr);
    List<NameValuePair> nameValuePair=new ArrayList<NameValuePair>(3);
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    try {
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePair));
      HttpResponse response=httpClient.execute(httppost);
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      response.getEntity().writeTo(byteArrayOutputStream);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    byte[] data=httpClient.getByteArrayFromURL(urlStr);
    Matcher mc=honbunPattern.matcher(new String(data,""String_Node_Str""));
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      Matcher mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaStatus status=new FutabaStatus();
      String text=mcText.group(1);
      text=tagPattern.matcher(text).replaceAll(""String_Node_Str"");
      status.setText(text);
      Matcher mcImg=thumbPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        status.setImgURL(mcImg.group(1));
        Log.d(""String_Node_Str"",mcImg.group(1));
      }
      statuses.add(status);
    }
    Log.d(""String_Node_Str"",String.valueOf(statuses.size()));
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",e.toString());
    throw new RuntimeException(e);
  }
}","public void parse(Context context){
  try {
    Pattern honbunPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern resPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern textPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern imgPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Pattern tagPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    CookieSyncManager.createInstance(context);
    CookieSyncManager.getInstance().startSync();
    CookieManager.getInstance().setAcceptCookie(true);
    CookieManager.getInstance().removeExpiredCookie();
    DefaultHttpClient httpClient;
    httpClient=new DefaultHttpClient();
    httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY);
    httpClient.getParams().setParameter(""String_Node_Str"",5000);
    httpClient.getParams().setParameter(""String_Node_Str"",3000);
    HttpPost httppost=new HttpPost(urlStr);
    List<NameValuePair> nameValuePair=new ArrayList<NameValuePair>(3);
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePair.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    try {
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePair));
      HttpResponse response=httpClient.execute(httppost);
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      response.getEntity().writeTo(byteArrayOutputStream);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    HttpGet httpget=new HttpGet(urlStr);
    HttpResponse httpResponse=null;
    try {
      httpResponse=httpClient.execute(httpget);
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
    int status=httpResponse.getStatusLine().getStatusCode();
    String data=null;
    if (HttpStatus.SC_OK == status) {
      try {
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        httpResponse.getEntity().writeTo(outputStream);
        data=outputStream.toString();
      }
 catch (      Exception e) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + status);
    }
    Matcher mc=honbunPattern.matcher(data);
    mc.find();
    mc.find();
    String honbun=mc.group(0);
    Matcher mcRes=resPattern.matcher(honbun);
    while (mcRes.find()) {
      Matcher mcText=textPattern.matcher(mcRes.group(1));
      mcText.find();
      FutabaThread thread=new FutabaThread();
      String text=mcText.group(1);
      text=tagPattern.matcher(text).replaceAll(""String_Node_Str"");
      thread.setText(text);
      Matcher mcImg=imgPattern.matcher(mcRes.group(1));
      if (mcImg.find()) {
        thread.setImgURL(mcImg.group(1));
        Log.d(""String_Node_Str"",mcImg.group(1));
      }
      fthreads.add(thread);
    }
    Log.d(""String_Node_Str"",String.valueOf(fthreads.size()));
  }
 catch (  Exception e) {
    Log.d(""String_Node_Str"",e.toString());
    throw new RuntimeException(e);
  }
}",0.6441150828247603
153125,"public void setMonitoredResource(Resource<?> monitoredResource){
  this.monitoredResource=monitoredResource;
  loaded=monitoredResource.isLoaded();
  unloaded=!loaded;
}","public void setMonitoredResource(Resource<?> monitoredResource){
  this.monitoredResource=monitoredResource;
  loaded=monitoredResource.isLoaded();
  wasLoaded=false;
  wasUnloaded=false;
}",0.9106145251396648
153126,"/** 
 * Returns true whenever the Resource was loaded.
 */
public boolean wasUnloaded(){
  return unloaded;
}","/** 
 * Returns true whenever the Resource was loaded.
 */
public boolean wasUnloaded(){
  return wasUnloaded;
}",0.9773755656108596
153127,"/** 
 * Returns true whenever the Resource was loaded.
 */
public boolean wasLoaded(){
  return loaded;
}","/** 
 * Returns true whenever the Resource was loaded.
 */
public boolean wasLoaded(){
  return wasLoaded;
}",0.976525821596244
153128,"/** 
 * Call to update the monitor by checking the Resource latest status and to know if it was loaded or unloaded.
 */
public void checkChanges(){
  loaded=!loaded && monitoredResource.isLoaded();
  unloaded=!unloaded && !monitoredResource.isLoaded();
}","/** 
 * Call to update the monitor by checking the Resource latest status and to know if it was loaded or unloaded.
 */
public void checkChanges(){
  wasLoaded=!loaded && monitoredResource.isLoaded();
  wasUnloaded=loaded && !monitoredResource.isLoaded();
  loaded=monitoredResource.isLoaded();
}",0.8690909090909091
153129,"@Test public void shouldDetectWhenResourceWasLoadedOnlyOnce(){
  MockResource resource=new MockResource(new MockDataLoader(""String_Node_Str""));
  ResourceStatusMonitor resourceStatusMonitor=new ResourceStatusMonitor(resource);
  resource.load();
  resourceStatusMonitor.checkChanges();
  resourceStatusMonitor.checkChanges();
  assertThat(resourceStatusMonitor.wasLoaded(),IsEqual.equalTo(false));
}","@Test public void shouldDetectWhenResourceWasLoadedOnlyOnce(){
  MockResource resource=new MockResource(new MockDataLoader(""String_Node_Str""));
  ResourceStatusMonitor resourceStatusMonitor=new ResourceStatusMonitor(resource);
  resource.load();
  resourceStatusMonitor.checkChanges();
  resourceStatusMonitor.checkChanges();
  assertThat(resourceStatusMonitor.wasLoaded(),IsEqual.equalTo(false));
  resourceStatusMonitor.checkChanges();
  assertThat(resourceStatusMonitor.wasLoaded(),IsEqual.equalTo(false));
}",0.8769230769230769
153130,"@Test public void shouldDetectWhenResourceWasUnloadedOnlyOnce(){
  MockResource resource=new MockResource(new MockDataLoader(""String_Node_Str""));
  resource.load();
  ResourceStatusMonitor resourceStatusMonitor=new ResourceStatusMonitor(resource);
  resource.unload();
  resourceStatusMonitor.checkChanges();
  resourceStatusMonitor.checkChanges();
  assertThat(resourceStatusMonitor.wasUnloaded(),IsEqual.equalTo(false));
}","@Test public void shouldDetectWhenResourceWasUnloadedOnlyOnce(){
  MockResource resource=new MockResource(new MockDataLoader(""String_Node_Str""));
  resource.load();
  ResourceStatusMonitor resourceStatusMonitor=new ResourceStatusMonitor(resource);
  resource.unload();
  resourceStatusMonitor.checkChanges();
  resourceStatusMonitor.checkChanges();
  assertThat(resourceStatusMonitor.wasUnloaded(),IsEqual.equalTo(false));
  resourceStatusMonitor.checkChanges();
  assertThat(resourceStatusMonitor.wasUnloaded(),IsEqual.equalTo(false));
}",0.8814968814968815
153131,"@Override public void unloadAll(){
  for (int i=0; i < resources.size(); i++)   resources.get(i).unload();
}","@Override public void unloadAll(){
  for (  Resource resource : resources)   resource.unload();
}",0.7707317073170732
153132,"public void addWodSort(WOD currWod){
  boolean inserted=false;
  int left=0;
  int right=wods.size() - 1;
  int mid=wods.size() / 2;
  while (inserted == false) {
    WOD nowWod=wods.get(mid);
    if (currWod.getYear() < nowWod.getYear()) {
      right=mid;
      mid=(right + left) / 2;
      if (left == mid || right == mid) {
        inserted=true;
      }
    }
 else     if (currWod.getYear() == nowWod.getYear()) {
      if (currWod.getMonth() < nowWod.getMonth()) {
        right=mid;
        mid=(right + left) / 2;
        if (left == mid || right == mid) {
          wods.add(mid,currWod);
          inserted=true;
        }
      }
 else       if (currWod.getMonth() == nowWod.getMonth()) {
        if (currWod.getDay() < nowWod.getDay()) {
          right=mid;
          mid=(right + left) / 2;
          if (left == mid || right == mid) {
            wods.add(mid,currWod);
            inserted=true;
          }
        }
 else         if (currWod.getDay() > nowWod.getDay()) {
          if (j == wods.size() - 1) {
            left=mid;
            mid=(right + left) / 2;
            if (left == mid || right == mid) {
              wods.add(mid + 1,currWod);
              inserted=true;
            }
          }
        }
      }
 else       if (currWod.getMonth() > nowWod.getMonth()) {
        left=mid;
        mid=(right + left) / 2;
        if (left == mid || right == mid) {
          wods.add(mid + 1,currWod);
          inserted=true;
        }
      }
    }
 else     if (currWod.getYear() > nowWod.getYear()) {
      left=mid;
      mid=(right + left) / 2;
      if (left == mid || right == mid) {
        wods.add(mid + 1,currWod);
        inserted=true;
      }
    }
  }
}","public void addWodSort(WOD currWod){
  boolean inserted=false;
  int left=0;
  int right=wods.size() - 1;
  int mid=wods.size() / 2;
  if (wods.size() == 0) {
    wods.add(currWod);
    return;
  }
  while (inserted == false) {
    WOD nowWod=wods.get(mid);
    if (currWod.getYear() < nowWod.getYear()) {
      right=mid;
      mid=(right + left) / 2;
      if (left == mid || right == mid) {
        inserted=true;
      }
    }
 else     if (currWod.getYear() == nowWod.getYear()) {
      if (currWod.getMonth() < nowWod.getMonth()) {
        right=mid;
        mid=(right + left) / 2;
        if (left == mid || right == mid) {
          wods.add(mid,currWod);
          inserted=true;
        }
      }
 else       if (currWod.getMonth() == nowWod.getMonth()) {
        if (currWod.getDay() < nowWod.getDay()) {
          right=mid;
          mid=(right + left) / 2;
          if (left == mid || right == mid) {
            wods.add(mid,currWod);
            inserted=true;
          }
        }
 else         if (currWod.getDay() > nowWod.getDay()) {
          left=mid;
          mid=(right + left) / 2;
          if (left == mid || right == mid) {
            wods.add(mid + 1,currWod);
            inserted=true;
          }
        }
      }
 else       if (currWod.getMonth() > nowWod.getMonth()) {
        left=mid;
        mid=(right + left) / 2;
        if (left == mid || right == mid) {
          wods.add(mid + 1,currWod);
          inserted=true;
        }
      }
    }
 else     if (currWod.getYear() > nowWod.getYear()) {
      left=mid;
      mid=(right + left) / 2;
      if (left == mid || right == mid) {
        wods.add(mid + 1,currWod);
        inserted=true;
      }
    }
  }
}",0.94869539724421
153133,"/** 
 * Method to get a LinkedList of WODs in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<WOD> getWODsFromTo(String from,String to){
  LinkedList<WOD> resultList=new LinkedList<WOD>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (wods.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (wods.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(wods.get(start));
  }
  WOD checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getYear() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}","/** 
 * Method to get a LinkedList of WODs in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<WOD> getWODsFromTo(String from,String to){
  LinkedList<WOD> resultList=new LinkedList<WOD>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (wods.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (wods.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(wods.get(start));
  }
  WOD checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}",0.9977255496588324
153134,"/** 
 * Method to get a LinkedList of Notes in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<Notes> getNotesFromTo(String from,String to){
  LinkedList<Notes> resultList=new LinkedList<Notes>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (notes.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < notes.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (notes.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(notes.get(start));
  }
  Notes checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getYear() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}","/** 
 * Method to get a LinkedList of Notes in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<Notes> getNotesFromTo(String from,String to){
  LinkedList<Notes> resultList=new LinkedList<Notes>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (notes.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < notes.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (notes.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(notes.get(start));
  }
  Notes checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}",0.9977505623594102
153135,"/** 
 * Method to get a LinkedList of biometrics in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of biometrics within the range
 */
public LinkedList<Biometric> getBIOsFromTo(String from,String to){
  LinkedList<Biometric> resultList=new LinkedList<Biometric>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < biometrics.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(biometrics.get(start));
  }
  Biometric checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getYear() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}","/** 
 * Method to get a LinkedList of biometrics in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of biometrics within the range
 */
public LinkedList<Biometric> getBIOsFromTo(String from,String to){
  LinkedList<Biometric> resultList=new LinkedList<Biometric>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < biometrics.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(biometrics.get(start));
  }
  Biometric checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}",0.99784327821711
153136,"/** 
 * Method to get an array of recorded body weights within a date range Used for graphing purposes
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of weights from biometrics
 */
public double[] returnWeightRange(String from,String to){
}","/** 
 * Method to get an array of recorded body weights within a date range Used for graphing purposes
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of weights from biometrics
 */
public double[] returnWeightRange(String from,String to){
  LinkedList<Biometric> resultList=getBIOsFromTo(from,to);
  double[] weights=new double[resultList.size()];
  for (int i=0; i < resultList.size(); i++) {
    weights[i]=resultList.get(i).getWeight();
  }
  return weights;
}",0.728380024360536
153137,"/** 
 * Method to get a LinkedList of WODs in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<WOD> getWODsFromTo(String from,String to){
  LinkedList<WOD> resultList=new LinkedList<WOD>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (wods.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (wods.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(wods.get(start));
  }
  WOD checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}","/** 
 * Method to get a LinkedList of WODs in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<WOD> getWODsFromTo(String from,String to){
  LinkedList<WOD> resultList=new LinkedList<WOD>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(from.substring(0,2))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(from.substring(0,2))) {
        if (wods.get(i).getDay() >= Integer.parseInt(from.substring(2,4))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < wods.size(); i++) {
    if (wods.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (wods.get(i).getMonth() > Integer.parseInt(to.substring(0,2))) {
        break;
      }
 else       if (wods.get(i).getMonth() == Integer.parseInt(to.substring(0,2))) {
        if (wods.get(i).getDay() >= Integer.parseInt(to.substring(2,4))) {
          break;
        }
      }
    }
    if (wods.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=start; i <= end; i++) {
    resultList.add(wods.get(i));
  }
  WOD checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}",0.4222784810126582
153138,"/** 
 * Method to get a LinkedList of Notes in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<Notes> getNotesFromTo(String from,String to){
  LinkedList<Notes> resultList=new LinkedList<Notes>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (notes.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < notes.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (notes.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(notes.get(start));
  }
  Notes checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}","/** 
 * Method to get a LinkedList of Notes in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of WODs within the range
 */
public LinkedList<Notes> getNotesFromTo(String from,String to){
  LinkedList<Notes> resultList=new LinkedList<Notes>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(from.substring(0,2))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(from.substring(0,2))) {
        if (notes.get(i).getDay() >= Integer.parseInt(from.substring(2,4))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < notes.size(); i++) {
    if (notes.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (notes.get(i).getMonth() > Integer.parseInt(to.substring(0,2))) {
        break;
      }
 else       if (notes.get(i).getMonth() == Integer.parseInt(to.substring(0,2))) {
        if (notes.get(i).getDay() >= Integer.parseInt(to.substring(2,4))) {
          break;
        }
      }
    }
    if (notes.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=start; i <= end; i++) {
    resultList.add(notes.get(i));
  }
  Notes checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}",0.4151226840260391
153139,"/** 
 * Method to get a LinkedList of biometrics in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of biometrics within the range
 */
public LinkedList<Biometric> getBIOsFromTo(String from,String to){
  LinkedList<Biometric> resultList=new LinkedList<Biometric>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(from.substring(2,4))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(from.substring(2,4))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(from.substring(0,2))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < biometrics.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(to.substring(2,4))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(to.substring(2,4))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(to.substring(0,2))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=0; start <= end; start++) {
    resultList.add(biometrics.get(start));
  }
  Biometric checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}","/** 
 * Method to get a LinkedList of biometrics in a range of dates
 * @param (String from) - start of date range
 * @param (String to) - end of date range
 * @return - list of biometrics within the range
 */
public LinkedList<Biometric> getBIOsFromTo(String from,String to){
  LinkedList<Biometric> resultList=new LinkedList<Biometric>();
  int start, i=0;
  int end=0;
  for (i=0; i < wods.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(from.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(from.substring(0,2))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(from.substring(0,2))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(from.substring(2,4))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(from.substring(4,8))) {
      break;
    }
  }
  start=i;
  for (i=0; i < biometrics.size(); i++) {
    if (biometrics.get(i).getYear() == Integer.parseInt(to.substring(4,8))) {
      if (biometrics.get(i).getMonth() > Integer.parseInt(to.substring(0,2))) {
        break;
      }
 else       if (biometrics.get(i).getMonth() == Integer.parseInt(to.substring(0,2))) {
        if (biometrics.get(i).getDay() >= Integer.parseInt(to.substring(2,4))) {
          break;
        }
      }
    }
    if (biometrics.get(i).getYear() > Integer.parseInt(to.substring(4,8))) {
      break;
    }
  }
  end=i;
  for (i=start; i <= end; i++) {
    resultList.add(biometrics.get(i));
  }
  Biometric checkFirst=resultList.get(0);
  if (checkFirst.getYear() < Integer.parseInt(from.substring(4,8))) {
    resultList.clear();
  }
 else   if (checkFirst.getYear() == Integer.parseInt(from.substring(4,8))) {
    if (checkFirst.getMonth() < Integer.parseInt(from.substring(0,2))) {
      resultList.clear();
    }
 else     if (checkFirst.getMonth() == Integer.parseInt(from.substring(0,2))) {
      if (checkFirst.getDay() < Integer.parseInt(from.substring(2,4))) {
        resultList.clear();
      }
    }
  }
  return resultList;
}",0.4066250600096015
153140,"/** 
 * Method to convert date from MMDDYY to MM/DD/YY
 * @return - date (MM/DD/YY)
 */
public String toDate(){
  String newDate=""String_Node_Str"";
  newDate+=date.charAt(0) + date.charAt(1) + ""String_Node_Str"";
  newDate+=date.charAt(2) + date.charAt(3) + ""String_Node_Str"";
  newDate+=date.charAt(4) + date.charAt(5);
  return newDate;
}","/** 
 * Method to convert date from MMDDYY to MM/DD/YYYY
 * @return - date (MM/DD/YYYY)
 */
public String toDate(){
  String newDate=""String_Node_Str"";
  newDate+=date.substring(0,2) + ""String_Node_Str"";
  newDate+=date.substring(2,4) + ""String_Node_Str"";
  newDate+=date.substring(4,8);
  return newDate;
}",0.7244582043343654
153141,"/** 
 * Method to autotag info stored in Biometrics
 * @return - true if autotag was successful, false otherwise
 */
public boolean autoTag(){
  if (tags.add(Double.toString(weight)) && tags.add(Double.toString(bodyFat)) && tags.add(Double.toString(heartRate))&& tags.add(Double.toString(bMI))&& tags.add(date)) {
    return true;
  }
  return false;
}","/** 
 * Method to autotag info stored in Biometrics
 * @return - true if autotag was successful, false otherwise
 */
public boolean autoTag(){
  if (tags.add(Double.toString(weight)) && tags.add(Double.toString(bodyFat)) && tags.add(Double.toString(heartRate))&& tags.add(Double.toString(bMI))&& tags.add(date.toDate())) {
    return true;
  }
  return false;
}",0.9873772791023844
153142,"/** 
 * Method to sort the list of Notes by their dates (increasing index for later dates)
 */
public void sortNotesByDate(){
  LinkedList<Notes> resultNote=new LinkedList<Notes>();
  resultNote.add(notes.get(i));
  for (int i=1; i < notes.size(); i++) {
    Notes currNote=notes.get(i);
    for (int j=0; j < resultNote.size(); j++) {
      Notes nowNote=resultNote.get(j);
      if (currNote.getYear() < nowNote.getYear()) {
        resultNote.add(j,currNote);
      }
 else       if (currNote.getYear() == currNote.getYear()) {
        if (currNote.getMonth() < nowNote.getMonth()) {
          resultNote.add(j,currNote);
        }
 else         if (currNote.getMonth() == currNote.getMonth()) {
          if (currNote.getDay() < nowNote.getDay()) {
            resultNote.add(j,currNote);
          }
 else           if (currNote.getDay() > currNote.getDay()) {
            if (j == resultNote.size() - 1) {
              resultNote.add(currNote);
            }
          }
        }
 else         if (currNote.getMonth() > currNote.getMonth() && j == resultNote.size() - 1) {
          resultNote.add(currNote);
        }
      }
 else       if (currNote.getYear() > currNote.getYear() && j == resultNote.size() - 1) {
        resultNote.add(currNote);
      }
    }
  }
}","/** 
 * Method to sort the list of Notes by their dates (increasing index for later dates)
 */
public void sortNotesByDate(){
  LinkedList<Notes> resultNote=new LinkedList<Notes>();
  resultNote.add(notes.get(i));
  for (int i=1; i < notes.size(); i++) {
    Notes currNote=notes.get(i);
    for (int j=0; j < resultNote.size(); j++) {
      Notes nowNote=resultNote.get(j);
      if (currNote.getYear() < nowNote.getYear()) {
        resultNote.add(j,currNote);
      }
 else       if (currNote.getYear() == nowNote.getYear()) {
        if (currNote.getMonth() < nowNote.getMonth()) {
          resultNote.add(j,currNote);
        }
 else         if (currNote.getMonth() == nowNote.getMonth()) {
          if (currNote.getDay() < nowNote.getDay()) {
            resultNote.add(j,currNote);
          }
 else           if (currNote.getDay() > nowNote.getDay()) {
            if (j == resultNote.size() - 1) {
              resultNote.add(currNote);
            }
          }
        }
 else         if (currNote.getMonth() > nowNote.getMonth() && j == resultNote.size() - 1) {
          resultNote.add(currNote);
        }
      }
 else       if (currNote.getYear() > nowNote.getYear() && j == resultNote.size() - 1) {
        resultNote.add(currNote);
      }
    }
  }
}",0.9862691251471164
153143,"/** 
 * Method to sort the list of Biometricss by their dates (increasing index for later dates)
 */
public void sortBiomByDate(){
  LinkedList<Biometric> resultBiom=new LinkedList<Biometric>();
  resultBiom.add(biometrics.get(i));
  for (int i=1; i < biometrics.size(); i++) {
    Biometric currBiom=biometrics.get(i);
    for (int j=0; j < resultBiom.size(); j++) {
      Biometric nowBiom=resultBiom.get(j);
      if (currBiom.getYear() < nowBiom.getYear()) {
        resultBiom.add(j,currBiom);
      }
 else       if (currBiom.getYear() == currBiom.getYear()) {
        if (currBiom.getMonth() < nowBiom.getMonth()) {
          resultBiom.add(j,currBiom);
        }
 else         if (currBiom.getMonth() == currBiom.getMonth()) {
          if (currBiom.getDay() < nowBiom.getDay()) {
            resultBiom.add(j,currBiom);
          }
 else           if (currBiom.getDay() > currBiom.getDay()) {
            if (j == resultBiom.size() - 1) {
              resultBiom.add(currBiom);
            }
          }
        }
 else         if (currBiom.getMonth() > currBiom.getMonth() && j == resultBiom.size() - 1) {
          resultBiom.add(currBiom);
        }
      }
 else       if (currBiom.getYear() > currBiom.getYear() && j == resultBiom.size() - 1) {
        resultBiom.add(currBiom);
      }
    }
  }
}","/** 
 * Method to sort the list of Biometricss by their dates (increasing index for later dates)
 */
public void sortBiomByDate(){
  LinkedList<Biometric> resultBiom=new LinkedList<Biometric>();
  resultBiom.add(biometrics.get(i));
  for (int i=1; i < biometrics.size(); i++) {
    Biometric currBiom=biometrics.get(i);
    for (int j=0; j < resultBiom.size(); j++) {
      Biometric nowBiom=resultBiom.get(j);
      if (currBiom.getYear() < nowBiom.getYear()) {
        resultBiom.add(j,currBiom);
      }
 else       if (currBiom.getYear() == nowBiom.getYear()) {
        if (currBiom.getMonth() < nowBiom.getMonth()) {
          resultBiom.add(j,currBiom);
        }
 else         if (currBiom.getMonth() == nowBiom.getMonth()) {
          if (currBiom.getDay() < nowBiom.getDay()) {
            resultBiom.add(j,currBiom);
          }
 else           if (currBiom.getDay() > nowBiom.getDay()) {
            if (j == resultBiom.size() - 1) {
              resultBiom.add(currBiom);
            }
          }
        }
 else         if (currBiom.getMonth() > nowBiom.getMonth() && j == resultBiom.size() - 1) {
          resultBiom.add(currBiom);
        }
      }
 else       if (currBiom.getYear() > nowBiom.getYear() && j == resultBiom.size() - 1) {
        resultBiom.add(currBiom);
      }
    }
  }
}",0.9866463181991606
153144,"/** 
 * Method to sort the list of WODs by their dates (increasing index for later dates)
 */
public void sortWodByDate(){
  LinkedList<WOD> resultWod=new LinkedList<WOD>();
  resultWod.add(wods.get(i));
  for (int i=1; i < wods.size(); i++) {
    WOD currWod=wods.get(i);
    for (int j=0; j < resultWod.size(); j++) {
      WOD nowWod=resultWod.get(j);
      if (currWod.getYear() < nowWod.getYear()) {
        resultWod.add(j,currWod);
      }
 else       if (currWod.getYear() == currWod.getYear()) {
        if (currWod.getMonth() < nowWod.getMonth()) {
          resultWod.add(j,currWod);
        }
 else         if (currWod.getMonth() == currWod.getMonth()) {
          if (currWod.getDay() < nowWod.getDay()) {
            resultWod.add(j,currWod);
          }
 else           if (currWod.getDay() > currWod.getDay()) {
            if (j == resultWod.size() - 1) {
              resultWod.add(currWod);
            }
          }
        }
 else         if (currWod.getMonth() > currWod.getMonth() && j == resultWod.size() - 1) {
          resultWod.add(currWod);
        }
      }
 else       if (currWod.getYear() > currWod.getYear() && j == resultWod.size() - 1) {
        resultWod.add(currWod);
      }
    }
  }
}","/** 
 * Method to sort the list of WODs by their dates (increasing index for later dates)
 */
public void sortWodByDate(){
  LinkedList<WOD> resultWod=new LinkedList<WOD>();
  resultWod.add(wods.get(i));
  for (int i=1; i < wods.size(); i++) {
    WOD currWod=wods.get(i);
    for (int j=0; j < resultWod.size(); j++) {
      WOD nowWod=resultWod.get(j);
      if (currWod.getYear() < nowWod.getYear()) {
        resultWod.add(j,currWod);
      }
 else       if (currWod.getYear() == nowWod.getYear()) {
        if (currWod.getMonth() < nowWod.getMonth()) {
          resultWod.add(j,currWod);
        }
 else         if (currWod.getMonth() == nowWod.getMonth()) {
          if (currWod.getDay() < nowWod.getDay()) {
            resultWod.add(j,currWod);
          }
 else           if (currWod.getDay() > nowWod.getDay()) {
            if (j == resultWod.size() - 1) {
              resultWod.add(currWod);
            }
          }
        }
 else         if (currWod.getMonth() > nowWod.getMonth() && j == resultWod.size() - 1) {
          resultWod.add(currWod);
        }
      }
 else       if (currWod.getYear() > nowWod.getYear() && j == resultWod.size() - 1) {
        resultWod.add(currWod);
      }
    }
  }
}",0.9856967715570086
153145,"public LinkedList<WOD> searchWODTags(String[] tags){
  LinkedList<WOD> results=new LinkedList<WOD>();
  int findTags, infoIndex, infoTags, found=0;
  for (infoIndex=0; infoIndex < wods.size(); infoIndex++) {
    for (findTags=0; findTags < tags.length; findTags++) {
      for (infoTags=0; infoTags < wods.get(infoIndex).getTags().size(); infoTags++) {
        if (wods.get(infoIndex).getTags().get(infoTags) == tags[findTags]) {
          found++;
          break;
        }
      }
    }
    if (found == tags.length) {
      results.add(wods.get(infoIndex));
    }
  }
  return results;
}","/** 
 * Method to search through WOD, Notes, and Biometrics by tags and return all relevant info
 * @param (String logType) - type of log info to search through
 * @param (String[] tags) - list of tags to search for
 * @return - list of WODs, Notes, and Biometrics with said tags
 */
public LinkedList<WOD> searchWODTags(String[] tags){
  LinkedList<WOD> results=new LinkedList<WOD>();
  int findTags, infoIndex, infoTags, found=0;
  for (infoIndex=0; infoIndex < wods.size(); infoIndex++) {
    for (findTags=0; findTags < tags.length; findTags++) {
      for (infoTags=0; infoTags < wods.get(infoIndex).getTags().size(); infoTags++) {
        if (wods.get(infoIndex).getTags().get(infoTags) == tags[findTags]) {
          found++;
          break;
        }
      }
    }
    if (found == tags.length) {
      results.add(wods.get(infoIndex));
    }
  }
  return results;
}",0.8062755798090041
153146,"/** 
 * Method to convert date from MMDDYY to MM/DD/YY
 * @return - date (MM/DD/YY)
 */
public String toDate(){
  String newDate=""String_Node_Str"";
  newDate+=date.substring(0,2) + ""String_Node_Str"";
  newDate+=date.substring(2,4) + ""String_Node_Str"";
  newDate+=date.substring(4,8);
  return newDate;
}","/** 
 * Method to convert date from MMDDYYYY to MM/DD/YYYY
 * @return - date (MM/DD/YYYY)
 */
public String toDate(){
  String newDate=""String_Node_Str"";
  newDate+=date.substring(0,2) + ""String_Node_Str"";
  newDate+=date.substring(2,4) + ""String_Node_Str"";
  newDate+=date.substring(4,8);
  return newDate;
}",0.9575163398692812
153147,"/** 
 * Method to convert date from MMDDYY to MM/DD/YY
 * @return - date (MM/DD/YY)
 */
public String toDate(){
  String newDate=""String_Node_Str"";
  newDate+=date.substring(0,2) + ""String_Node_Str"";
  newDate+=date.substring(2,4) + ""String_Node_Str"";
  newDate+=date.substring(4,8);
  return newDate;
}","/** 
 * Method to convert date from MMDDYYYY to MM/DD/YYYY
 * @return - date (MM/DD/YYYY)
 */
public String toDate(){
  String newDate=""String_Node_Str"";
  newDate+=date.substring(0,2) + ""String_Node_Str"";
  newDate+=date.substring(2,4) + ""String_Node_Str"";
  newDate+=date.substring(4,8);
  return newDate;
}",0.9575163398692812
153148,"public void sortNotesByDate(){
  LinkedList<Notes> resultNote=new LinkedList<Notes>();
  resultNote.add(notes.get(i));
  for (int i=1; i < notes.size(); i++) {
    Notes currNote=notes.get(i);
    for (int j=0; j < resultNote.size(); j++) {
      Notes nowNote=resultNote.get(j);
      if (currNote.getYear() < nowNote.getYear()) {
        resultNote.add(j,currNote);
      }
 else       if (currNote.getYear() == currNote.getYear()) {
        if (currNote.getMonth() < nowNote.getMonth()) {
          resultNote.add(j,currNote);
        }
 else         if (currNote.getMonth() == currNote.getMonth()) {
          if (currNote.getDay() < nowNote.getDay()) {
            resultNote.add(j,currNote);
          }
 else           if (currNote.getDay() > currNote.getDay()) {
            if (j == resultNote.size() - 1) {
              resultNote.add(currNote);
            }
          }
        }
 else         if (currNote.getMonth() > currNote.getMonth() && j == resultNote.size() - 1) {
          resultNote.add(currNote);
        }
      }
 else       if (currNote.getYear() > currNote.getYear() && j == resultNote.size() - 1) {
        resultNote.add(currNote);
      }
    }
  }
}","public void sortNotesByDate(){
  LinkedList<Notes> resultNote=new LinkedList<Notes>();
  resultNote.add(notes.get(i));
  for (int i=1; i < notes.size(); i++) {
    Notes currNote=notes.get(i);
    for (int j=0; j < resultNote.size(); j++) {
      Notes nowNote=resultNote.get(j);
      if (currNote.getYear() < nowNote.getYear()) {
        resultNote.add(j,currNote);
      }
 else       if (currNote.getYear() == nowNote.getYear()) {
        if (currNote.getMonth() < nowNote.getMonth()) {
          resultNote.add(j,currNote);
        }
 else         if (currNote.getMonth() == nowNote.getMonth()) {
          if (currNote.getDay() < nowNote.getDay()) {
            resultNote.add(j,currNote);
          }
 else           if (currNote.getDay() > nowNote.getDay()) {
            if (j == resultNote.size() - 1) {
              resultNote.add(currNote);
            }
          }
        }
 else         if (currNote.getMonth() > nowNote.getMonth() && j == resultNote.size() - 1) {
          resultNote.add(currNote);
        }
      }
 else       if (currNote.getYear() > nowNote.getYear() && j == resultNote.size() - 1) {
        resultNote.add(currNote);
      }
    }
  }
  notes=resultNote;
}",0.976881042454813
153149,"public void sortBiomByDate(){
  LinkedList<Biometric> resultBiom=new LinkedList<Biometric>();
  resultBiom.add(biometrics.get(i));
  for (int i=1; i < biometrics.size(); i++) {
    Biometric currBiom=biometrics.get(i);
    for (int j=0; j < resultBiom.size(); j++) {
      Biometric nowBiom=resultBiom.get(j);
      if (currBiom.getYear() < nowBiom.getYear()) {
        resultBiom.add(j,currBiom);
      }
 else       if (currBiom.getYear() == currBiom.getYear()) {
        if (currBiom.getMonth() < nowBiom.getMonth()) {
          resultBiom.add(j,currBiom);
        }
 else         if (currBiom.getMonth() == currBiom.getMonth()) {
          if (currBiom.getDay() < nowBiom.getDay()) {
            resultBiom.add(j,currBiom);
          }
 else           if (currBiom.getDay() > currBiom.getDay()) {
            if (j == resultBiom.size() - 1) {
              resultBiom.add(currBiom);
            }
          }
        }
 else         if (currBiom.getMonth() > currBiom.getMonth() && j == resultBiom.size() - 1) {
          resultBiom.add(currBiom);
        }
      }
 else       if (currBiom.getYear() > currBiom.getYear() && j == resultBiom.size() - 1) {
        resultBiom.add(currBiom);
      }
    }
  }
}","public void sortBiomByDate(){
  LinkedList<Biometric> resultBiom=new LinkedList<Biometric>();
  resultBiom.add(biometrics.get(i));
  for (int i=1; i < biometrics.size(); i++) {
    Biometric currBiom=biometrics.get(i);
    for (int j=0; j < resultBiom.size(); j++) {
      Biometric nowBiom=resultBiom.get(j);
      if (currBiom.getYear() < nowBiom.getYear()) {
        resultBiom.add(j,currBiom);
      }
 else       if (currBiom.getYear() == nowBiom.getYear()) {
        if (currBiom.getMonth() < nowBiom.getMonth()) {
          resultBiom.add(j,currBiom);
        }
 else         if (currBiom.getMonth() == nowBiom.getMonth()) {
          if (currBiom.getDay() < nowBiom.getDay()) {
            resultBiom.add(j,currBiom);
          }
 else           if (currBiom.getDay() > nowBiom.getDay()) {
            if (j == resultBiom.size() - 1) {
              resultBiom.add(currBiom);
            }
          }
        }
 else         if (currBiom.getMonth() > nowBiom.getMonth() && j == resultBiom.size() - 1) {
          resultBiom.add(currBiom);
        }
      }
 else       if (currBiom.getYear() > nowBiom.getYear() && j == resultBiom.size() - 1) {
        resultBiom.add(currBiom);
      }
    }
  }
  biometrics=resultBiom;
}",0.9754500818330606
153150,"public void sortWodByDate(){
  LinkedList<WOD> resultWod=new LinkedList<WOD>();
  resultWod.add(wods.get(i));
  for (int i=1; i < wods.size(); i++) {
    WOD currWod=wods.get(i);
    for (int j=0; j < resultWod.size(); j++) {
      WOD nowWod=resultWod.get(j);
      if (currWod.getYear() < nowWod.getYear()) {
        resultWod.add(j,currWod);
      }
 else       if (currWod.getYear() == currWod.getYear()) {
        if (currWod.getMonth() < nowWod.getMonth()) {
          resultWod.add(j,currWod);
        }
 else         if (currWod.getMonth() == currWod.getMonth()) {
          if (currWod.getDay() < nowWod.getDay()) {
            resultWod.add(j,currWod);
          }
 else           if (currWod.getDay() > currWod.getDay()) {
            if (j == resultWod.size() - 1) {
              resultWod.add(currWod);
            }
          }
        }
 else         if (currWod.getMonth() > currWod.getMonth() && j == resultWod.size() - 1) {
          resultWod.add(currWod);
        }
      }
 else       if (currWod.getYear() > currWod.getYear() && j == resultWod.size() - 1) {
        resultWod.add(currWod);
      }
    }
  }
}","public void sortWodByDate(){
  LinkedList<WOD> resultWod=new LinkedList<WOD>();
  resultWod.add(wods.get(i));
  for (int i=1; i < wods.size(); i++) {
    WOD currWod=wods.get(i);
    for (int j=0; j < resultWod.size(); j++) {
      WOD nowWod=resultWod.get(j);
      if (currWod.getYear() < nowWod.getYear()) {
        resultWod.add(j,currWod);
      }
 else       if (currWod.getYear() == nowWod.getYear()) {
        if (currWod.getMonth() < nowWod.getMonth()) {
          resultWod.add(j,currWod);
        }
 else         if (currWod.getMonth() == nowWod.getMonth()) {
          if (currWod.getDay() < nowWod.getDay()) {
            resultWod.add(j,currWod);
          }
 else           if (currWod.getDay() > nowWod.getDay()) {
            if (j == resultWod.size() - 1) {
              resultWod.add(currWod);
            }
          }
        }
 else         if (currWod.getMonth() > nowWod.getMonth() && j == resultWod.size() - 1) {
          resultWod.add(currWod);
        }
      }
 else       if (currWod.getYear() > nowWod.getYear() && j == resultWod.size() - 1) {
        resultWod.add(currWod);
      }
    }
  }
  wods=resultWod;
}",0.976723759332455
153151,"@Override protected String getRuleName(AbstractElement element){
  if (nameMappings == null) {
    nameMappings=new HashMap<AbstractElement,String>(){
      private static final long serialVersionUID=1L;
{
        put(grammarAccess.getFXPropertyAccess().getAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getCursorPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getEffectAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getBlendPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineCapPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineJoinPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getTextAlignmentPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getTextOriginPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getTextOverrunPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getVPositionValueAccess().getVAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getBlurValueAccess().getVAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getAlternatives_1(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getDimensionAlternatives_1_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelxAlternatives_0_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAlternatives_1(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelyAlternatives_1_1_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAlternatives_1_0_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getV2Alternatives_1_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getAlternatives_0_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getPredefinedAlternatives_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLocationAlternatives_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getAlternatives_2_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getMiterPredefinedAlternatives_2_1_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLineCapAlternatives_3_1_0(),""String_Node_Str"");
        put(grammarAccess.getDashStyleValueAccess().getVAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getStyleOrWeightAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontStyleValueAccess().getValueAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getFontWeightValueAccess().getValueAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getPaintValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getAlternatives_14(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getAlternatives_6(),""String_Node_Str"");
        put(grammarAccess.getColorValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getNamedColorAccess().getValueAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getHexDigitAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBooleanValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getHPositionValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getFXPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getCursorPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEffectPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBlendPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getSizePropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineCapPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineJoinPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextAlignmentPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextOriginPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getShapePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextOverrunPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEchoCharPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getHorizontalGridLineStrokeDashArrayPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getVerticalGridLineStrokeDashArrayPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getGroup_1_0(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getGroup_1_1(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup_2(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup_2_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getSizeFillAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getGroup_13(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup_5(),""String_Node_Str"");
        put(grammarAccess.getStopValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_4(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getGroup_1_5(),""String_Node_Str"");
        put(grammarAccess.getHexDigitAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getJFXCssAccess().getDefinitionsAssignment(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getIdAssignment_0_1(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getPropertiesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getCursorPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEffectPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getBlurAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getColorAssignment_4(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getBlurRadiusAssignment_6(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getSpreadAssignment_8(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getOffsetXAssignment_10(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getOffsetYAssignment_12(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getBlurAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getColorAssignment_3(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getBlurRadiusAssignment_5(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getChokeAssignment_7(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getOffsetXAssignment_9(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getOffsetYAssignment_11(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBlendPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getSizePropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizePropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineCapPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineJoinPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextAlignmentPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextOriginPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getShapePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextOverrunPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEchoCharPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_0_2(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_3(),""String_Node_Str"");
        put(grammarAccess.getHorizontalGridLineStrokeDashArrayPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getVerticalGridLineStrokeDashArrayPropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getVerticalGridLineStrokeDashArrayPropertyAccess().getValuesAssignment_3(),""String_Node_Str"");
        put(grammarAccess.getVPositionValueAccess().getVAssignment(),""String_Node_Str"");
        put(grammarAccess.getBlurValueAccess().getVAssignment(),""String_Node_Str"");
        put(grammarAccess.getIntegerValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getAddressAssignment_1_0_1(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getAddressAssignment_1_1_1(),""String_Node_Str"");
        put(grammarAccess.getAddressValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getValueAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getDimensionAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_3(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAbsxAssignment_0_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelxAssignment_0_1(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAbsyAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelyAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getV2Assignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getXsizeAssignment_0_0_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getXautoAssignment_0_0_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getYsizeAssignment_0_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getYautoAssignment_0_1_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getPredefinedAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getMultiPaintValueAccess().getValuesAssignment(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getDashStyleAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLocationAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getMiterAbsAssignment_2_1_0_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getMiterPredefinedAssignment_2_1_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLineCapAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getDashStyleValueAccess().getVAssignment(),""String_Node_Str"");
        put(grammarAccess.getSizeFillAccess().getValueAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizeFillAccess().getFillAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getStyleOrWeightAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getSizeAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getFamilyAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontStyleValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getFontWeightValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getX1Assignment_2(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getY1Assignment_4(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getX2Assignment_8(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getY2Assignment_10(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getStopsAssignment_13_1(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getCxAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getCyAssignment_1_3(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getRadiusAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getFxAssignment_3_2(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getFyAssignment_3_4(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getStopsAssignment_5_1(),""String_Node_Str"");
        put(grammarAccess.getStopValueAccess().getPosAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getStopValueAccess().getColorAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getNamedColorAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getHexAssignment_0_1(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGAssignment_1_4(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBAssignment_1_6(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRpAssignment_2_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGpAssignment_2_5(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBpAssignment_2_8(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRAssignment_3_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGAssignment_3_4(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBAssignment_3_6(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getAlphaAssignment_3_8(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRpAssignment_4_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGpAssignment_4_5(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBpAssignment_4_8(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getAlphaAssignment_4_11(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getHueAssignment_0_2(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getSaturationAssignment_0_4(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getBrightnessAssignment_0_7(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getHueAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getSaturationAssignment_1_4(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getBrightnessAssignment_1_7(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getAlphaAssignment_1_10(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getOrigAssignment_0_2(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getModAssignment_0_4(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getOrigAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getStopNumbersAssignment_1_5_1(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getStopColorsAssignment_1_5_3(),""String_Node_Str"");
      }
    }
;
  }
  return nameMappings.get(element);
}","@Override protected String getRuleName(AbstractElement element){
  if (nameMappings == null) {
    nameMappings=new HashMap<AbstractElement,String>(){
      private static final long serialVersionUID=1L;
{
        put(grammarAccess.getFXPropertyAccess().getAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getCursorPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getEffectAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getBlendPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getPropertyAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineCapPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineJoinPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getTextAlignmentPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getTextOriginPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getTextOverrunPropertyAccess().getValueAlternatives_2_0(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getVPositionValueAccess().getVAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getBlurValueAccess().getVAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getDimensionAlternatives_1_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelxAlternatives_0_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAlternatives_1(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelyAlternatives_1_1_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAlternatives_1_0_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getV2Alternatives_1_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getAlternatives_0_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getPredefinedAlternatives_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLocationAlternatives_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getAlternatives_2_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getMiterPredefinedAlternatives_2_1_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLineCapAlternatives_3_1_0(),""String_Node_Str"");
        put(grammarAccess.getDashStyleValueAccess().getVAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getStyleOrWeightAlternatives_0_0(),""String_Node_Str"");
        put(grammarAccess.getFontStyleValueAccess().getValueAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getFontWeightValueAccess().getValueAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getPaintValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getAlternatives_14(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getAlternatives_6(),""String_Node_Str"");
        put(grammarAccess.getColorValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getNamedColorAccess().getValueAlternatives_0(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getHexDigitAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getBooleanValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getHPositionValueAccess().getAlternatives(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getFXPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getCursorPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEffectPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBlendPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getSizePropertiesAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineCapPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineJoinPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextAlignmentPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextOriginPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getShapePropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getTextOverrunPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getEchoCharPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getHorizontalGridLineStrokeDashArrayPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getVerticalGridLineStrokeDashArrayPropertyAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup_2(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup_2_1_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getSizeFillAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getGroup_13(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getGroup_5(),""String_Node_Str"");
        put(grammarAccess.getStopValueAccess().getGroup(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_3(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGroup_4(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getGroup_0(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getGroup_1_5(),""String_Node_Str"");
        put(grammarAccess.getHexDigitAccess().getGroup_1(),""String_Node_Str"");
        put(grammarAccess.getJFXCssAccess().getDefinitionsAssignment(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getIdAssignment_0_1(),""String_Node_Str"");
        put(grammarAccess.getDefinitionAccess().getPropertiesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontSizePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontStylePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontWeightPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getCursorPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEffectPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getBlurAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getColorAssignment_4(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getBlurRadiusAssignment_6(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getSpreadAssignment_8(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getOffsetXAssignment_10(),""String_Node_Str"");
        put(grammarAccess.getEffectDropShadowAccess().getOffsetYAssignment_12(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getBlurAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getColorAssignment_3(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getBlurRadiusAssignment_5(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getChokeAssignment_7(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getOffsetXAssignment_9(),""String_Node_Str"");
        put(grammarAccess.getEffectInnerShadowAccess().getOffsetYAssignment_11(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getBooleanPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getNumberPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getIntegerPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getPaintPropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBlendPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getHPositionPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getVPositionPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSidePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getBarPolicyPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getUrlPropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getRepeatPropertiesAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertyAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getSizePropertiesAccess().getPropertyAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizePropertiesAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineCapPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getStrokeLineJoinPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextAlignmentPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextOriginPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImagePositionPropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBackgroundImageSizePropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBorderColorPropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBorderStylePropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getBorderImageSlicePropertyAccess().getValuesAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getShapePropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getTextOverrunPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getEchoCharPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_0_2(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getInsetsPropertyAccess().getValueAssignment_1_3(),""String_Node_Str"");
        put(grammarAccess.getHorizontalGridLineStrokeDashArrayPropertyAccess().getValueAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getVerticalGridLineStrokeDashArrayPropertyAccess().getValuesAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getVerticalGridLineStrokeDashArrayPropertyAccess().getValuesAssignment_3(),""String_Node_Str"");
        put(grammarAccess.getVPositionValueAccess().getVAssignment(),""String_Node_Str"");
        put(grammarAccess.getBlurValueAccess().getVAssignment(),""String_Node_Str"");
        put(grammarAccess.getIntegerValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getUrlValueAccess().getAddressAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getAddressValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getValueAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizeValueAccess().getDimensionAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getMultiSizeValueAccess().getValuesAssignment_1_3(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAbsxAssignment_0_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelxAssignment_0_1(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getAbsyAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgPositionValueAccess().getRelyAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getVAssignment_1_0(),""String_Node_Str"");
        put(grammarAccess.getRepeatStyleValueAccess().getV2Assignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getXsizeAssignment_0_0_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getXautoAssignment_0_0_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getYsizeAssignment_0_1_0(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getYautoAssignment_0_1_1(),""String_Node_Str"");
        put(grammarAccess.getBgSizeValueAccess().getPredefinedAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getMultiPaintValueAccess().getValuesAssignment(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getDashStyleAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLocationAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getMiterAbsAssignment_2_1_0_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getMiterPredefinedAssignment_2_1_1(),""String_Node_Str"");
        put(grammarAccess.getBorderStyleValueAccess().getLineCapAssignment_3_1(),""String_Node_Str"");
        put(grammarAccess.getDashStyleValueAccess().getVAssignment(),""String_Node_Str"");
        put(grammarAccess.getSizeFillAccess().getValueAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getSizeFillAccess().getFillAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getStyleOrWeightAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getSizeAssignment_1(),""String_Node_Str"");
        put(grammarAccess.getFontValueAccess().getFamilyAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getFontStyleValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getFontWeightValueAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getFontFamilyAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getX1Assignment_2(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getY1Assignment_4(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getX2Assignment_8(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getY2Assignment_10(),""String_Node_Str"");
        put(grammarAccess.getLinearGradientAccess().getStopsAssignment_13_1(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getCxAssignment_1_1(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getCyAssignment_1_3(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getRadiusAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getFxAssignment_3_2(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getFyAssignment_3_4(),""String_Node_Str"");
        put(grammarAccess.getRadialGradientAccess().getStopsAssignment_5_1(),""String_Node_Str"");
        put(grammarAccess.getStopValueAccess().getPosAssignment_0(),""String_Node_Str"");
        put(grammarAccess.getStopValueAccess().getColorAssignment_2(),""String_Node_Str"");
        put(grammarAccess.getNamedColorAccess().getValueAssignment(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getHexAssignment_0_1(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGAssignment_1_4(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBAssignment_1_6(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRpAssignment_2_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGpAssignment_2_5(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBpAssignment_2_8(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRAssignment_3_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGAssignment_3_4(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBAssignment_3_6(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getAlphaAssignment_3_8(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getRpAssignment_4_2(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getGpAssignment_4_5(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getBpAssignment_4_8(),""String_Node_Str"");
        put(grammarAccess.getRGBColorAccess().getAlphaAssignment_4_11(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getHueAssignment_0_2(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getSaturationAssignment_0_4(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getBrightnessAssignment_0_7(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getHueAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getSaturationAssignment_1_4(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getBrightnessAssignment_1_7(),""String_Node_Str"");
        put(grammarAccess.getHSBColorAccess().getAlphaAssignment_1_10(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getOrigAssignment_0_2(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getModAssignment_0_4(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getOrigAssignment_1_2(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getStopNumbersAssignment_1_5_1(),""String_Node_Str"");
        put(grammarAccess.getColorFunctionAccess().getStopColorsAssignment_1_5_3(),""String_Node_Str"");
      }
    }
;
  }
  return nameMappings.get(element);
}",0.9943061549316574
153152,"@Override public Object createWidget(MUIElement element,Object parent){
  JToolBar bar=new JToolBar();
  bar.setRollover(true);
  bar.setFloatable(false);
  bar.setMargin(new Insets(10,10,10,10));
  return bar;
}","@Override public Object createWidget(MUIElement element,Object parent){
  System.err.println(""String_Node_Str"" + element);
  JToolBar bar=new JToolBar();
  bar.setRollover(true);
  bar.setFloatable(false);
  bar.setMargin(new Insets(10,10,10,10));
  return bar;
}",0.8926315789473684
153153,"@Override public Object createWidget(MUIElement element,Object parent){
  JPanel bar=new JPanel();
  bar.setLayout(new SwingFillLayout());
  ((JPanel)parent).add(bar,BorderLayout.PAGE_START);
  return bar;
}","@Override public Object createWidget(MUIElement element,Object parent){
  JPanel bar=new JPanel();
  bar.setLayout(new BoxLayout(bar,BoxLayout.X_AXIS));
  ((JPanel)parent).add(bar,BorderLayout.PAGE_START);
  return bar;
}",0.897196261682243
153154,"public void enableGuard(){
  IntentFilter filter=new IntentFilter(Constants.ACTION_PKG_STATE_CHANGED);
  mContext.registerReceiver(mDownloadReceiver,filter);
}","public void enableGuard(){
  IntentFilter filter=new IntentFilter(Constants.ACTION_PKG_STATE_CHANGED);
  mContext.registerReceiver(mDownloadReceiver,filter);
  updateAppState();
}",0.940828402366864
153155,"private void downloadApp(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  boolean bAppExistsInDb=false;
  PackageState pkgState=PackageState.unknown;
  String downloadUri=null;
  Cursor cursor=null;
  try {
    String[] columns={InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_STATE,InstalledAppDb.COLUMN_DOWNLOAD_URI};
    String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
    String[] whereValue={appInfo.mAppCode};
    cursor=getContentResolver().query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereValue,null);
    bAppExistsInDb=(cursor.getCount() == 1);
    cursor.moveToFirst();
    int index=cursor.getColumnIndexOrThrow(InstalledAppDb.COLUMN_STATE);
    pkgState=PackageState.valueOf(cursor.getString(index));
    index=cursor.getColumnIndexOrThrow(InstalledAppDb.COLUMN_DOWNLOAD_URI);
    downloadUri=cursor.getString(index);
  }
 catch (  Throwable tr) {
    tr.printStackTrace();
  }
 finally {
    if (null != cursor) {
      cursor.close();
    }
  }
  if (bAppExistsInDb && isDownloadingOrInstalling(pkgState)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,pkgState.name());
  }
 else {
    try {
      URI uri=getURI(url);
      Log.i(TAG,""String_Node_Str"" + uri.toString());
      ContentValues values=new ContentValues();
      values.put(Downloads.COLUMN_URI,uri.toString());
      values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
      values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
      values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
      values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
      values.put(Downloads.COLUMN_DESCRIPTION,appInfo.mAppCode);
      values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
      values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
      values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
      Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
      if (null != uriInserted) {
        Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
        ContentValues valuesLocal=new ContentValues(10);
        valuesLocal.put(InstalledAppDb.COLUMN_VERSION,appInfo.mAppVersion);
        valuesLocal.put(InstalledAppDb.COLUMN_APP_NAME,appInfo.mAppName);
        valuesLocal.put(InstalledAppDb.COLUMN_AUTHOR,appInfo.mAppAuthor);
        valuesLocal.put(InstalledAppDb.COLUMN_DESC,appInfo.mAppShortDesc);
        valuesLocal.put(InstalledAppDb.COLUMN_STATE,PackageState.downloading.name());
        valuesLocal.put(InstalledAppDb.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
        valuesLocal.put(InstalledAppDb.COLUMN_DOWNLOAD_URI,uriInserted.toString());
        if (bAppExistsInDb) {
          try {
            getContentResolver().delete(Uri.parse(downloadUri),null,null);
          }
 catch (          Throwable tr) {
          }
          String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
          String[] whereValue={appInfo.mAppCode};
          getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,valuesLocal,where,whereValue);
        }
 else {
          valuesLocal.put(InstalledAppDb.COLUMN_CODE,appInfo.mAppCode);
          getContentResolver().insert(BehooProvider.INSTALLED_APP_CONTENT_URI,valuesLocal);
        }
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,InstalledAppDb.PackageState.downloading.name());
      }
 else {
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,InstalledAppDb.PackageState.download_failed.name());
      }
    }
 catch (    Throwable tr) {
      tr.printStackTrace();
    }
  }
}","private void downloadApp(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  boolean bAppExistsInDb=false;
  PackageState pkgState=PackageState.unknown;
  String downloadUri=null;
  Cursor cursor=null;
  try {
    String[] columns={InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_STATE,InstalledAppDb.COLUMN_DOWNLOAD_URI};
    String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
    String[] whereValue={appInfo.mAppCode};
    cursor=getContentResolver().query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereValue,null);
    bAppExistsInDb=(cursor.getCount() == 1);
    if (cursor.moveToFirst()) {
      int index=cursor.getColumnIndexOrThrow(InstalledAppDb.COLUMN_STATE);
      pkgState=PackageState.valueOf(cursor.getString(index));
      index=cursor.getColumnIndexOrThrow(InstalledAppDb.COLUMN_DOWNLOAD_URI);
      downloadUri=cursor.getString(index);
    }
  }
 catch (  Throwable tr) {
    tr.printStackTrace();
  }
 finally {
    if (null != cursor) {
      cursor.close();
    }
  }
  if (bAppExistsInDb && isDownloadingOrInstalling(pkgState)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,pkgState.name());
  }
 else {
    try {
      URI uri=getURI(url);
      Log.i(TAG,""String_Node_Str"" + uri.toString());
      ContentValues values=new ContentValues();
      values.put(Downloads.COLUMN_URI,uri.toString());
      values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
      values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
      values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
      values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
      values.put(Downloads.COLUMN_DESCRIPTION,appInfo.mAppCode);
      values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
      values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
      values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
      Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
      if (null != uriInserted) {
        Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
        ContentValues valuesLocal=new ContentValues(10);
        valuesLocal.put(InstalledAppDb.COLUMN_VERSION,appInfo.mAppVersion);
        valuesLocal.put(InstalledAppDb.COLUMN_APP_NAME,appInfo.mAppName);
        valuesLocal.put(InstalledAppDb.COLUMN_AUTHOR,appInfo.mAppAuthor);
        valuesLocal.put(InstalledAppDb.COLUMN_DESC,appInfo.mAppShortDesc);
        valuesLocal.put(InstalledAppDb.COLUMN_STATE,PackageState.downloading.name());
        valuesLocal.put(InstalledAppDb.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
        valuesLocal.put(InstalledAppDb.COLUMN_DOWNLOAD_URI,uriInserted.toString());
        if (bAppExistsInDb) {
          try {
            getContentResolver().delete(Uri.parse(downloadUri),null,null);
          }
 catch (          Throwable tr) {
          }
          String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
          String[] whereValue={appInfo.mAppCode};
          getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,valuesLocal,where,whereValue);
        }
 else {
          valuesLocal.put(InstalledAppDb.COLUMN_CODE,appInfo.mAppCode);
          getContentResolver().insert(BehooProvider.INSTALLED_APP_CONTENT_URI,valuesLocal);
        }
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,InstalledAppDb.PackageState.downloading.name());
      }
 else {
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,InstalledAppDb.PackageState.download_failed.name());
      }
    }
 catch (    Throwable tr) {
      tr.printStackTrace();
    }
  }
}",0.9969788519637462
153156,"private void checkUpdate(Map<String,String> codesVersionMap){
  if (0 == codesVersionMap.size()) {
    return;
  }
  AppListParser appListParser=new AppListParser();
  String reqStr=UrlHelpers.getUpdateRequestString(codesVersionMap);
  Log.d(TAG,""String_Node_Str"" + reqStr);
  try {
    String token=TokenWrapper.getToken(mContext);
    String url=UrlHelpers.getUpdateUrl(token);
    Log.d(TAG,""String_Node_Str"" + url);
    ArrayList<AppInfo> appList=appListParser.getUpdateList(url,reqStr,codesVersionMap.size());
    Log.i(TAG,""String_Node_Str"" + Integer.toString(appList.size()));
    ContentValues cv=new ContentValues();
    for (int i=0; i < appList.size(); ++i) {
      AppInfo appInfo=appList.get(i);
      cv.put(InstalledAppDb.COLUMN_STATE,PackageState.need_update.name());
      cv.put(InstalledAppDb.COLUMN_AUTHOR,appInfo.mAppAuthor);
      cv.put(InstalledAppDb.COLUMN_DESC,appInfo.mAppShortDesc);
      cv.put(InstalledAppDb.COLUMN_VERSION,appInfo.mAppVersion);
      cv.put(InstalledAppDb.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
      cv.put(InstalledAppDb.COLUMN_APP_NAME,appInfo.mAppName);
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] selectionArgs={appInfo.mAppCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,selectionArgs);
    }
    Intent intent=new Intent(Constants.ACTION_PKG_UPDATE_FINISHED);
    intent.putExtra(Constants.EXTRA_SIZE,appList.size());
    mContext.sendBroadcast(intent);
  }
 catch (  Throwable tr) {
    tr.printStackTrace();
  }
 finally {
    appListParser.cancel();
  }
}","private void checkUpdate(Map<String,String> codesVersionMap){
  if (0 == codesVersionMap.size()) {
    notifyCheckUpdateCompleted(null);
    return;
  }
  AppListParser appListParser=new AppListParser();
  String reqStr=UrlHelpers.getUpdateRequestString(codesVersionMap);
  try {
    String token=TokenWrapper.getToken(mContext);
    String url=UrlHelpers.getUpdateUrl(token);
    Log.d(TAG,""String_Node_Str"" + url);
    ArrayList<AppInfo> appList=appListParser.getUpdateList(url,reqStr,codesVersionMap.size());
    Log.i(TAG,""String_Node_Str"" + Integer.toString(appList.size()));
    ContentValues cv=new ContentValues();
    for (int i=0; i < appList.size(); ++i) {
      AppInfo appInfo=appList.get(i);
      cv.put(InstalledAppDb.COLUMN_STATE,PackageState.need_update.name());
      cv.put(InstalledAppDb.COLUMN_AUTHOR,appInfo.mAppAuthor);
      cv.put(InstalledAppDb.COLUMN_DESC,appInfo.mAppShortDesc);
      cv.put(InstalledAppDb.COLUMN_VERSION,appInfo.mAppVersion);
      cv.put(InstalledAppDb.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
      cv.put(InstalledAppDb.COLUMN_APP_NAME,appInfo.mAppName);
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] selectionArgs={appInfo.mAppCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,selectionArgs);
    }
    notifyCheckUpdateCompleted(appList);
  }
 catch (  Throwable tr) {
    notifyCheckUpdateCompleted(null);
  }
 finally {
    appListParser.cancel();
  }
}",0.8998060762766645
153157,"public Object getItem(int position){
  if (mCursor.moveToPosition(position)) {
    return mAppLib.get(position).mAppCode;
  }
  return null;
}","public Object getItem(int position){
  if (mCursor.moveToPosition(position)) {
    return mCursor.getString(mCodeId);
  }
  return null;
}",0.8785714285714286
153158,"public void onItemSelected(AdapterView<?> arg0,View arg1,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  if (null != code) {
    AppInfo appInfo=mAppLib.get(code);
    mButtonGuard.setAppInfo(appInfo);
    updateUIState(appInfo);
  }
 else {
    mButtonGuard.setAppInfo(null);
  }
}","public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  if (null != code) {
    AppInfo appInfo=mAppLib.get(code);
    mButtonGuard.setAppInfo(appInfo);
    updateUIState(appInfo);
  }
 else {
    mButtonGuard.setAppInfo(null);
  }
}",0.97196261682243
153159,"private void updateButtonAndUIs(String code){
  if (null != code) {
    AppInfo appInfo=mAppLib.get(code);
    mButtonGuard.setAppInfo(appInfo);
    updateUIState(appInfo);
  }
 else {
    mButtonGuard.setAppInfo(null);
  }
}","private void updateButtonAndUIs(String code){
  if (null != code) {
    AppInfo appInfo=mAppLib.get(code);
    if (null != appInfo) {
      mButtonGuard.setAppInfo(appInfo);
      updateUIState(appInfo);
    }
 else {
      mButtonGuard.setAppInfo(null);
    }
  }
 else {
    mButtonGuard.setAppInfo(null);
  }
}",0.7881040892193308
153160,"private void updateImage(AppInfo appInfo){
  if (null == ImageLib.inst().getBitmap(appInfo.mAppImageUrl)) {
    if (false == ImageLib.inst().isImageDownloading(appInfo.mAppImageUrl)) {
      executeImageTask(appInfo.mAppImageUrl,appInfo.mAppCode);
    }
 else {
      mAppImage.setImageResource(R.drawable.appicon_default);
    }
  }
 else {
    mAppImage.setImageBitmap(ImageLib.inst().getBitmap(appInfo.mAppImageUrl));
  }
}","private void updateImage(AppInfo appInfo){
  if (null != appInfo) {
    mAppImage.setVisibility(View.VISIBLE);
    if (null == ImageLib.inst().getBitmap(appInfo.mAppImageUrl)) {
      if (false == ImageLib.inst().isImageDownloading(appInfo.mAppImageUrl)) {
        executeImageTask(appInfo.mAppImageUrl,appInfo.mAppCode);
      }
 else {
        mAppImage.setImageResource(R.drawable.appicon_default);
      }
    }
 else {
      mAppImage.setImageBitmap(ImageLib.inst().getBitmap(appInfo.mAppImageUrl));
    }
  }
 else {
    mAppImage.setVisibility(View.INVISIBLE);
  }
}",0.7987987987987988
153161,"public void onResume(){
  super.onResume();
  mInstallButtonGuard.enableGuard();
  IntentFilter filter=new IntentFilter(Constants.ACTION_PKG_STATE_CHANGED);
  registerReceiver(mReceiver,filter);
}","public void onResume(){
  super.onResume();
  mInstallButtonGuard.enableGuard();
  IntentFilter filter=new IntentFilter(Constants.ACTION_PKG_STATE_CHANGED);
  registerReceiver(mReceiver,filter);
  String code=(String)mListView.getSelectedItem();
  updateButtonAndUIs(code);
}",0.832271762208068
153162,"public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  if (null != code) {
    AppInfo appInfo=mCodeAppInfoMap.get(code);
    if (null != appInfo) {
      mInstallButtonGuard.setAppInfo(appInfo);
      updateUIState(appInfo);
    }
  }
}","public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  updateButtonAndUIs(code);
}",0.6292585170340681
153163,"private void updateUIState(AppInfo appInfo){
  TextView tv=(TextView)findViewById(R.id.main_app_title);
  tv.setText(appInfo.mAppName);
  tv=(TextView)findViewById(R.id.main_app_author);
  tv.setText(appInfo.mAppAuthor);
  tv=(TextView)findViewById(R.id.main_app_version);
  tv.setText(appInfo.mAppVersion);
  if (mCodeSizeMap.containsKey(appInfo.mAppCode)) {
    mTextViewSize.setVisibility(View.VISIBLE);
    mTextViewSize.setText(mCodeSizeMap.get(appInfo.mAppCode));
  }
 else {
    mTextViewSize.setVisibility(View.GONE);
  }
  tv=(TextView)findViewById(R.id.downloadpage_desc);
  tv.setText(appInfo.mAppShortDesc);
  updateImage(appInfo);
}","private void updateUIState(AppInfo appInfo){
  TextView tvTitle=(TextView)findViewById(R.id.main_app_title);
  TextView tvAuthor=(TextView)findViewById(R.id.main_app_author);
  TextView tvVersion=(TextView)findViewById(R.id.main_app_version);
  TextView tvDesc=(TextView)findViewById(R.id.downloadpage_desc);
  if (null != appInfo) {
    tvTitle.setText(appInfo.mAppName);
    tvAuthor.setText(appInfo.mAppAuthor);
    tvVersion.setText(appInfo.mAppVersion);
    if (mCodeSizeMap.containsKey(appInfo.mAppCode)) {
      mTextViewSize.setVisibility(View.VISIBLE);
      mTextViewSize.setText(mCodeSizeMap.get(appInfo.mAppCode));
    }
 else {
      mTextViewSize.setVisibility(View.GONE);
    }
    tvDesc.setText(appInfo.mAppShortDesc);
  }
 else {
    tvTitle.setText(""String_Node_Str"");
    tvAuthor.setText(""String_Node_Str"");
    tvVersion.setText(""String_Node_Str"");
    mTextViewSize.setVisibility(View.GONE);
    tvDesc.setText(""String_Node_Str"");
  }
  updateImage(appInfo);
}",0.5614250614250614
153164,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DESC};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={InstalledAppDb.PackageState.install_succeeded.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  i.setAction(Constants.ACTION_START_CHECK_UPDATE);
  startService(i);
  showDialog(WAITING_DIALOG);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DESC};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={PackageState.need_update.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  i.setAction(Constants.ACTION_START_CHECK_UPDATE);
  startService(i);
  showDialog(WAITING_DIALOG);
}",0.98180279305967
153165,"public void onResume(){
  super.onResume();
  mButtonGuard.enableGuard();
  registerReceiver(mReceiver,new IntentFilter(Constants.ACTION_PKG_UPDATE_FINISHED));
}","public void onResume(){
  super.onResume();
  mButtonGuard.enableGuard();
  registerReceiver(mReceiver,new IntentFilter(Constants.ACTION_PKG_UPDATE_FINISHED));
  String code=(String)mListView.getSelectedItem();
  updateButtonAndUIs(code);
}",0.8029925187032418
153166,"public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  if (null != code) {
    AppInfo appInfo=mAppLib.get(code);
    mButtonGuard.setAppInfo(appInfo);
    updateUIState(appInfo);
  }
 else {
    mButtonGuard.setAppInfo(null);
  }
}","public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  updateButtonAndUIs(code);
}",0.6356275303643725
153167,"private void checkUpdate(Map<String,String> codesVersionMap){
  if (0 == codesVersionMap.size()) {
    return;
  }
  AppListParser appListParser=new AppListParser();
  String reqStr=UrlHelpers.getUpdateRequestString(codesVersionMap);
  try {
    String token=TokenWrapper.getToken(mContext);
    String url=UrlHelpers.getUpdateUrl(token);
    ArrayList<AppInfo> appList=appListParser.getUpdateList(url,reqStr,codesVersionMap.size());
    Log.i(TAG,""String_Node_Str"" + Integer.toString(appList.size()));
    ContentValues cv=new ContentValues();
    for (int i=0; i < appList.size(); ++i) {
      AppInfo appInfo=appList.get(i);
      cv.put(InstalledAppDb.COLUMN_STATE,PackageState.need_update.name());
      cv.put(InstalledAppDb.COLUMN_AUTHOR,appInfo.mAppAuthor);
      cv.put(InstalledAppDb.COLUMN_DESC,appInfo.mAppShortDesc);
      cv.put(InstalledAppDb.COLUMN_VERSION,appInfo.mAppVersion);
      cv.put(InstalledAppDb.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
      cv.put(InstalledAppDb.COLUMN_APP_NAME,appInfo.mAppName);
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] selectionArgs={appInfo.mAppCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,selectionArgs);
    }
    Intent intent=new Intent(Constants.ACTION_PKG_UPDATE_FINISHED);
    intent.putExtra(Constants.EXTRA_SIZE,appList.size());
    mContext.sendBroadcast(intent);
  }
 catch (  Throwable tr) {
    tr.printStackTrace();
  }
 finally {
    appListParser.cancel();
  }
}","private void checkUpdate(Map<String,String> codesVersionMap){
  if (0 == codesVersionMap.size()) {
    return;
  }
  AppListParser appListParser=new AppListParser();
  String reqStr=UrlHelpers.getUpdateRequestString(codesVersionMap);
  Log.d(TAG,""String_Node_Str"" + reqStr);
  try {
    String token=TokenWrapper.getToken(mContext);
    String url=UrlHelpers.getUpdateUrl(token);
    Log.d(TAG,""String_Node_Str"" + url);
    ArrayList<AppInfo> appList=appListParser.getUpdateList(url,reqStr,codesVersionMap.size());
    Log.i(TAG,""String_Node_Str"" + Integer.toString(appList.size()));
    ContentValues cv=new ContentValues();
    for (int i=0; i < appList.size(); ++i) {
      AppInfo appInfo=appList.get(i);
      cv.put(InstalledAppDb.COLUMN_STATE,PackageState.need_update.name());
      cv.put(InstalledAppDb.COLUMN_AUTHOR,appInfo.mAppAuthor);
      cv.put(InstalledAppDb.COLUMN_DESC,appInfo.mAppShortDesc);
      cv.put(InstalledAppDb.COLUMN_VERSION,appInfo.mAppVersion);
      cv.put(InstalledAppDb.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
      cv.put(InstalledAppDb.COLUMN_APP_NAME,appInfo.mAppName);
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] selectionArgs={appInfo.mAppCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,selectionArgs);
    }
    Intent intent=new Intent(Constants.ACTION_PKG_UPDATE_FINISHED);
    intent.putExtra(Constants.EXTRA_SIZE,appList.size());
    mContext.sendBroadcast(intent);
  }
 catch (  Throwable tr) {
    tr.printStackTrace();
  }
 finally {
    appListParser.cancel();
  }
}",0.97408
153168,"private void installApp(String uri,String code){
  boolean bDownloadRet=false;
  String filename=""String_Node_Str"";
  if (PkgsProviderWrapper.isAppExists(this,code)) {
    String[] projects={Downloads._DATA,Downloads.COLUMN_STATUS};
    Cursor c=this.getContentResolver().query(Uri.parse(uri),projects,null,null,null);
    if (null != c && c.moveToFirst()) {
      int filenameId=c.getColumnIndexOrThrow(Downloads._DATA);
      int statusId=c.getColumnIndexOrThrow(Downloads.COLUMN_STATUS);
      int status=c.getInt(statusId);
      if (Downloads.isStatusSuccess(status)) {
        bDownloadRet=true;
        filename=""String_Node_Str"" + c.getString(filenameId);
      }
    }
    if (null != c) {
      c.close();
    }
  }
  ContentValues cv=new ContentValues();
  String statusStr=null;
  if (bDownloadRet) {
    statusStr=PackageState.download_succeeded.name();
  }
 else {
    statusStr=PackageState.download_failed.name();
  }
  cv.put(InstalledAppDb.COLUMN_STATE,statusStr);
  String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
  String[] selectionArgs={code};
  getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,selectionArgs);
  PackageStateSender.sendPackageStateBroadcast(this,code,statusStr);
  if (bDownloadRet) {
    InstallThread thrd=new InstallThread(this,code,filename);
    thrd.start();
  }
}","private void installApp(String uri,String code){
  boolean bDownloadRet=false;
  String filename=""String_Node_Str"";
  if (PkgsProviderWrapper.isAppExists(this,code)) {
    String[] projects={Downloads._DATA,Downloads.COLUMN_STATUS};
    Cursor c=this.getContentResolver().query(Uri.parse(uri),projects,null,null,null);
    if (null != c && c.moveToFirst()) {
      int filenameId=c.getColumnIndexOrThrow(Downloads._DATA);
      int statusId=c.getColumnIndexOrThrow(Downloads.COLUMN_STATUS);
      int status=c.getInt(statusId);
      if (Downloads.isStatusSuccess(status)) {
        bDownloadRet=true;
        filename=""String_Node_Str"" + c.getString(filenameId);
      }
    }
    if (null != c) {
      c.close();
    }
  }
  ContentValues cv=new ContentValues();
  String statusStr=null;
  if (bDownloadRet) {
    statusStr=PackageState.download_succeeded.name();
  }
 else {
    statusStr=PackageState.download_failed.name();
  }
  cv.put(InstalledAppDb.COLUMN_STATE,statusStr);
  String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
  String[] selectionArgs={code};
  getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,selectionArgs);
  PackageStateSender.sendPackageStateBroadcast(this,code,statusStr);
  if (bDownloadRet) {
    AppInfo appInfo=PkgsProviderWrapper.getAppInfo(this,code);
    InstallThread thrd=new InstallThread(this,appInfo,filename);
    thrd.start();
  }
}",0.9472161966738972
153169,"public void run(){
synchronized (SYNC_OBJ) {
    boolean ret=false;
    try {
      ContentValues cv=new ContentValues();
      cv.put(InstalledAppDb.COLUMN_STATE,InstalledAppDb.PackageState.installing.name());
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] whereArgs={mPkgCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,whereArgs);
      PackageStateSender.sendPackageStateBroadcast(mContext,mPkgCode,InstalledAppDb.PackageState.installing.name());
      PackageInstaller installer=new PackageInstaller(mContext);
      ret=installer.installPackage(Uri.parse(mPkgSrcUri));
    }
 catch (    Throwable tr) {
      ret=false;
    }
    try {
      String status=(ret ? PackageState.install_succeeded.name() : PackageState.install_failed.name());
      ContentValues cv2=new ContentValues();
      cv2.put(InstalledAppDb.COLUMN_STATE,status);
      Date date=new Date();
      cv2.put(InstalledAppDb.COLUMN_INSTALL_DATE,date.getTime());
      if (ret) {
        PackageParser.Package pkgInfo=PackageUtils.getPackageInfo(Uri.parse(mPkgSrcUri));
        cv2.put(InstalledAppDb.COLUMN_PKG_NAME,pkgInfo.packageName);
      }
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] whereArgs={mPkgCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv2,where,whereArgs);
      PackageStateSender.sendPackageStateBroadcast(mContext,mPkgCode,status);
      File srcFile=new File(Uri.parse(mPkgSrcUri).getPath());
      if (srcFile.exists()) {
        srcFile.delete();
      }
    }
 catch (    Throwable tr) {
      tr.printStackTrace();
    }
    if (ret) {
      try {
        ContentValues values=new ContentValues();
        Date now=new Date();
        values.put(MessageDb.COLUMN_FEEDBACK_SN,-1);
        values.put(MessageDb.COLUMN_INTENT_ACTION,Intent.ACTION_VIEW);
        values.put(MessageDb.COLUMN_INTENT_DATA,AppInfo.makeUri(mPkgCode).toString());
        values.put(MessageDb.COLUMN_DATE,(int)(now.getTime() / 1000));
        values.put(MessageDb.COLUMN_MSG_BODY,""String_Node_Str"");
        values.put(MessageDb.COLUMN_MSG_TITLE,""String_Node_Str"");
        values.put(MessageDb.COLUMN_MSG_PIC_URL,""String_Node_Str"");
        mContext.getContentResolver().insert(BehooProvider.MESSAGE_CONTENT_URI,values);
      }
 catch (      Throwable tr) {
        tr.printStackTrace();
      }
    }
  }
}","public void run(){
synchronized (SYNC_OBJ) {
    boolean ret=false;
    try {
      ContentValues cv=new ContentValues();
      cv.put(InstalledAppDb.COLUMN_STATE,InstalledAppDb.PackageState.installing.name());
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] whereArgs={mAppInfo.mAppCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv,where,whereArgs);
      PackageStateSender.sendPackageStateBroadcast(mContext,mAppInfo.mAppCode,InstalledAppDb.PackageState.installing.name());
      PackageInstaller installer=new PackageInstaller(mContext);
      ret=installer.installPackage(Uri.parse(mPkgSrcUri));
    }
 catch (    Throwable tr) {
      ret=false;
    }
    try {
      String status=(ret ? PackageState.install_succeeded.name() : PackageState.install_failed.name());
      ContentValues cv2=new ContentValues();
      cv2.put(InstalledAppDb.COLUMN_STATE,status);
      Date date=new Date();
      cv2.put(InstalledAppDb.COLUMN_INSTALL_DATE,date.getTime());
      if (ret) {
        PackageParser.Package pkgInfo=PackageUtils.getPackageInfo(Uri.parse(mPkgSrcUri));
        cv2.put(InstalledAppDb.COLUMN_PKG_NAME,pkgInfo.packageName);
      }
      String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
      String[] whereArgs={mAppInfo.mAppCode};
      mContext.getContentResolver().update(BehooProvider.INSTALLED_APP_CONTENT_URI,cv2,where,whereArgs);
      PackageStateSender.sendPackageStateBroadcast(mContext,mAppInfo.mAppCode,status);
      File srcFile=new File(Uri.parse(mPkgSrcUri).getPath());
      if (srcFile.exists()) {
        srcFile.delete();
      }
    }
 catch (    Throwable tr) {
      tr.printStackTrace();
    }
    if (ret) {
      try {
        String appCode=mAppInfo.mAppCode;
        ContentValues values=new ContentValues();
        Date now=new Date();
        values.put(MessageDb.COLUMN_INTENT_ACTION,Intent.ACTION_VIEW);
        values.put(MessageDb.COLUMN_INTENT_DATA,AppInfo.makeUri(appCode).toString());
        values.put(MessageDb.COLUMN_DATE,(int)(now.getTime() / 1000));
        values.put(MessageDb.COLUMN_MSG_BODY,""String_Node_Str"");
        values.put(MessageDb.COLUMN_MSG_TITLE,""String_Node_Str"");
        values.put(MessageDb.COLUMN_MSG_PIC_URL,UrlHelpers.getImageUrl(mAppInfo.mAppImageUrl));
        mContext.getContentResolver().insert(BehooProvider.MESSAGE_CONTENT_URI,values);
      }
 catch (      Throwable tr) {
        tr.printStackTrace();
      }
    }
  }
}",0.8532740501212611
153170,"public InstallThread(Context context,String code,String uri){
  mContext=context;
  mPkgCode=code;
  mPkgSrcUri=uri;
}","public InstallThread(Context context,AppInfo appInfo,String uri){
  mContext=context;
  mAppInfo=appInfo;
  mPkgSrcUri=uri;
}",0.831275720164609
153171,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DOWNLOAD_URI,InstalledAppDb.COLUMN_PKG_NAME};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={InstalledAppDb.PackageState.install_succeeded.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  i.setAction(Constants.ACTION_START_CHECK_UPDATE);
  startService(i);
  showDialog(WAITING_DIALOG);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DESC};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={InstalledAppDb.PackageState.install_succeeded.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  i.setAction(Constants.ACTION_START_CHECK_UPDATE);
  startService(i);
  showDialog(WAITING_DIALOG);
}",0.2971522905489063
153172,"private Map<String,String> shouldBeCheckedAppMap(){
  Map<String,String> codesVersionMap=new HashMap<String,String>();
  String[] columns={InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_STATE,InstalledAppDb.COLUMN_PKG_NAME};
  try {
    ContentResolver cr=mContext.getContentResolver();
    Cursor c=cr.query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,null,null,null);
    if (null != c) {
      int codeId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_CODE);
      int versionId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_VERSION);
      int stateId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_STATE);
      int pkgNameId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_PKG_NAME);
      String code=null;
      String version=null;
      String state=null;
      String pkgName=null;
      PackageManager pm=mContext.getPackageManager();
      for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
        code=c.getString(codeId);
        version=c.getString(versionId);
        state=c.getString(stateId);
        pkgName=c.getString(pkgNameId);
        PackageState pkgstate=Constants.getStateByString(state);
        if (pkgUninstalled(pm,pkgName,pkgstate)) {
          String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
          String[] selectionArgs={code};
          cr.delete(BehooProvider.INSTALLED_APP_CONTENT_URI,where,selectionArgs);
        }
 else         if (PackageState.install_succeeded == pkgstate && -1 != getPkgVersionCode(pm,pkgName)) {
          codesVersionMap.put(code,version);
        }
      }
      c.close();
    }
  }
 catch (  Throwable tr) {
    tr.printStackTrace();
  }
  Log.i(TAG,""String_Node_Str"" + Integer.toString(codesVersionMap.size()));
  return codesVersionMap;
}","private Map<String,String> shouldBeCheckedAppMap(){
  Map<String,String> codesVersionMap=new HashMap<String,String>();
  String[] columns={InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_STATE,InstalledAppDb.COLUMN_PKG_NAME};
  try {
    ContentResolver cr=mContext.getContentResolver();
    Cursor c=cr.query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,null,null,null);
    if (null != c) {
      int codeId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_CODE);
      int stateId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_STATE);
      int pkgNameId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_PKG_NAME);
      String code=null;
      String state=null;
      String pkgName=null;
      PackageManager pm=mContext.getPackageManager();
      for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
        code=c.getString(codeId);
        state=c.getString(stateId);
        pkgName=c.getString(pkgNameId);
        PackageState pkgstate=Constants.getStateByString(state);
        if (pkgUninstalled(pm,pkgName,pkgstate)) {
          String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
          String[] selectionArgs={code};
          cr.delete(BehooProvider.INSTALLED_APP_CONTENT_URI,where,selectionArgs);
        }
 else         if (PackageState.install_succeeded == pkgstate) {
          int versionCode=getPkgVersionCode(pm,pkgName);
          if (-1 != versionCode) {
            codesVersionMap.put(code,Integer.toString(versionCode));
          }
        }
      }
      c.close();
    }
  }
 catch (  Throwable tr) {
    tr.printStackTrace();
  }
  Log.i(TAG,""String_Node_Str"" + Integer.toString(codesVersionMap.size()));
  return codesVersionMap;
}",0.7956246401842256
153173,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_download_page);
  String order=""String_Node_Str"" + ""String_Node_Str"";
  mDownloadCursor=managedQuery(Downloads.CONTENT_URI,new String[]{""String_Node_Str"",Downloads.COLUMN_TITLE,Downloads.COLUMN_STATUS,Downloads.COLUMN_TOTAL_BYTES,Downloads.COLUMN_CURRENT_BYTES,Downloads._DATA,Downloads.COLUMN_DESCRIPTION},null,null,order);
  Button button=(Button)findViewById(R.id.downloadpage_btn_to_install);
  mInstallButtonGuard=new InstallButtonGuard(this,button,null);
  mInstallButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  mDownloadProgressBar=(ProgressBar)findViewById(R.id.downloadpage_progress);
  mDownloadProgressBar.setVisibility(View.GONE);
  mTextViewSize=(TextView)findViewById(R.id.main_app_size);
  mListView=(ListView)findViewById(R.id.downloadpage_list);
  mListApater=new ListAdapter(this,R.layout.applist_item_layout,mDownloadCursor);
  mListView.setAdapter(mListApater);
  mListView.setOnItemSelectedListener(this);
  mListView.requestFocus();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_download_page);
  String order=""String_Node_Str"" + ""String_Node_Str"";
  mDownloadCursor=managedQuery(Downloads.CONTENT_URI,new String[]{""String_Node_Str"",Downloads.COLUMN_TITLE,Downloads.COLUMN_STATUS,Downloads.COLUMN_TOTAL_BYTES,Downloads.COLUMN_CURRENT_BYTES,Downloads._DATA,Downloads.COLUMN_DESCRIPTION},null,null,order);
  Button button=(Button)findViewById(R.id.downloadpage_btn_to_install);
  mInstallButtonGuard=new InstallButtonGuard(this,button,null);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  mDownloadProgressBar=(ProgressBar)findViewById(R.id.downloadpage_progress);
  mDownloadProgressBar.setVisibility(View.GONE);
  mTextViewSize=(TextView)findViewById(R.id.main_app_size);
  mListView=(ListView)findViewById(R.id.downloadpage_list);
  mListApater=new ListAdapter(this,R.layout.applist_item_layout,mDownloadCursor);
  mListView.setAdapter(mListApater);
  mListView.setOnItemSelectedListener(this);
  mListView.setOnItemClickListener(this);
  mListView.requestFocus();
}",0.5473965287049399
153174,"protected void onTaskCompleted(boolean result){
  if (result) {
    mListAdapter.notifyDataSetChanged();
    if (mListView.getCount() > 0) {
      mListView.setSelection(0);
    }
    mListView.requestFocus();
    updateUIState();
  }
}","protected void onTaskCompleted(boolean result){
  if (result) {
    mListAdapter.notifyDataSetChanged();
    mListView.requestFocus();
    updateUIState();
  }
}",0.8110831234256927
153175,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DESC};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={PackageState.need_update.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  i.setAction(Constants.ACTION_START_CHECK_UPDATE);
  startService(i);
  showDialog(WAITING_DIALOG);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DESC};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={PackageState.need_update.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  mListView.setOnItemClickListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  i.setAction(Constants.ACTION_START_CHECK_UPDATE);
  startService(i);
  showDialog(WAITING_DIALOG);
}",0.9823825503355704
153176,"public void onClick(View v){
switch (mAppState) {
case unknown:
case need_update:
case install_failed:
case download_failed:
    try {
      String url=UrlHelpers.getDownloadUrl(TokenWrapper.getToken(mContext),mAppInfo.mAppCode);
      Intent i=new Intent();
      i.setClass(mContext,DownloadInstallService.class);
      i.setAction(DownloadInstallService.ACTION_INSTALL_APP);
      i.putExtra(DownloadInstallService.EXTRA_HTTP_URL,url);
      i.putExtra(DownloadInstallService.EXTRA_MIME,AppInfo.MIMETYPE);
      i.putExtra(DownloadInstallService.EXTRA_APP_CODE,mAppInfo.mAppCode);
      i.putExtra(DownloadInstallService.EXTRA_APP_VERSION,mAppInfo.mAppVersion);
      i.putExtra(DownloadInstallService.EXTRA_APP_NAME,mAppInfo.mAppName);
      i.putExtra(DownloadInstallService.EXTRA_APP_IMAGE_URL,mAppInfo.mAppImageUrl);
      i.putExtra(DownloadInstallService.EXTRA_APP_AUTHOR,mAppInfo.mAppAuthor);
      i.putExtra(DownloadInstallService.EXTRA_APP_SHORTDESC,mAppInfo.mAppShortDesc);
      mContext.startService(i);
      mListener.onInstallClicked(mAppInfo);
    }
 catch (    Throwable tr) {
      tr.printStackTrace();
    }
  break;
case install_succeeded:
try {
  String pkgName=PkgsProviderWrapper.getAppPkgName(mContext,mAppInfo.mAppCode);
  PackageManager pm=mContext.getPackageManager();
  Intent intent=pm.getLaunchIntentForPackage(pkgName);
  mContext.startActivity(intent);
}
 catch (Throwable tr) {
  tr.printStackTrace();
}
break;
case downloading:
case download_succeeded:
case installing:
default :
Log.e(TAG,""String_Node_Str"");
break;
}
}","public void onClick(View v){
switch (mAppState) {
case unknown:
case need_update:
case install_failed:
case download_failed:
    installApp();
  break;
case install_succeeded:
openApp();
break;
case downloading:
case download_succeeded:
case installing:
default :
Log.e(TAG,""String_Node_Str"");
break;
}
}",0.2716049382716049
153177,"public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  if (null != code) {
    mInstallButtonGuard.setAppInfo(mCodeAppInfoMap.get(code));
    updateUIState(mCodeAppInfoMap.get(code));
  }
}","public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String code=(String)mListView.getItemAtPosition(position);
  if (null != code) {
    AppInfo appInfo=mCodeAppInfoMap.get(code);
    if (null != appInfo) {
      mInstallButtonGuard.setAppInfo(appInfo);
      updateUIState(appInfo);
    }
  }
}",0.7557755775577558
153178,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_list_page);
  mListAdapter=new AppListAdapter(this);
  mListView=(ListView)findViewById(R.id.app_list);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  mListView.setOnKeyListener(this);
  Button button=(Button)findViewById(R.id.applist_btn_detail);
  button.setOnClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  mHttpTask=new HttpTask(mHandler);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_list_page);
  mListAdapter=new AppListAdapter(this);
  mListView=(ListView)findViewById(R.id.app_list);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  mListView.setOnKeyListener(this);
  Button button=(Button)findViewById(R.id.applist_btn_detail);
  button.setOnClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  mHttpTask=new HttpTask(mHandler);
  executeTask(mHttpTask);
  showDialog(WAITING_DIALOG);
}",0.95
153179,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DOWNLOAD_URI,InstalledAppDb.COLUMN_PKG_NAME};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={InstalledAppDb.PackageState.install_succeeded.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  startService(i);
  showDialog(WAITING_DIALOG);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.app_update_page);
  String[] columns={InstalledAppDb.COLUMN_ID,InstalledAppDb.COLUMN_CODE,InstalledAppDb.COLUMN_APP_NAME,InstalledAppDb.COLUMN_AUTHOR,InstalledAppDb.COLUMN_VERSION,InstalledAppDb.COLUMN_IMAGE_URL,InstalledAppDb.COLUMN_DOWNLOAD_URI,InstalledAppDb.COLUMN_PKG_NAME};
  String where=InstalledAppDb.COLUMN_STATE + ""String_Node_Str"";
  String[] whereArgs={InstalledAppDb.PackageState.install_succeeded.name()};
  mCursor=managedQuery(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  mListView=(ListView)findViewById(R.id.app_update_list);
  mListAdapter=new ListAdapter(this,R.layout.applist_item_layout,mCursor);
  mListView.setAdapter(mListAdapter);
  mListView.setOnItemSelectedListener(this);
  Button button=(Button)findViewById(R.id.appupdate_btn_update);
  mButtonGuard=new InstallButtonGuard(this,button,null);
  mButtonGuard.setOnInstallClickListener(this);
  mAppImage=(ImageView)findViewById(R.id.main_app_logo);
  Intent i=new Intent(this,DownloadInstallService.class);
  i.setAction(Constants.ACTION_START_CHECK_UPDATE);
  startService(i);
  showDialog(WAITING_DIALOG);
}",0.9784232365145228
153180,"public void uninstall(String code){
  String[] columns={InstalledAppDb.COLUMN_PKG_NAME,InstalledAppDb.COLUMN_DOWNLOAD_URI};
  String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
  String[] whereArgs={code};
  Cursor c=this.getContentResolver().query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  String pkgName=null;
  String downloadUri=null;
  if (null != c) {
    c.moveToFirst();
    int pkgNameId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_PKG_NAME);
    int downloadUriId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_DOWNLOAD_URI);
    pkgName=c.getString(pkgNameId);
    downloadUri=c.getString(downloadUriId);
    c.close();
    Log.i(TAG,""String_Node_Str"" + code + ""String_Node_Str""+ downloadUriId);
    String token=null;
    if (null != ServiceManager.inst().getSyncHandler()) {
      token=ServiceManager.inst().getSyncHandler().getToken();
    }
    UninstallThread thrd=new UninstallThread(this,code,pkgName,downloadUri,token);
    thrd.start();
  }
 else {
    String tempPkgName=(null != pkgName ? pkgName : ""String_Node_Str"");
    PackageStateSender.sendPackageUninstallBroadcast(this,code,tempPkgName,false);
  }
}","public void uninstall(String code){
  String[] columns={InstalledAppDb.COLUMN_PKG_NAME,InstalledAppDb.COLUMN_DOWNLOAD_URI};
  String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
  String[] whereArgs={code};
  Cursor c=this.getContentResolver().query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  String pkgName=null;
  String downloadUri=null;
  if (null != c) {
    c.moveToFirst();
    int pkgNameId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_PKG_NAME);
    int downloadUriId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_DOWNLOAD_URI);
    pkgName=c.getString(pkgNameId);
    downloadUri=c.getString(downloadUriId);
    c.close();
    Log.i(TAG,""String_Node_Str"" + code + ""String_Node_Str""+ downloadUriId);
    String token=null;
    try {
      if (null != ServiceManager.inst().getSyncHandler()) {
        token=ServiceManager.inst().getSyncHandler().getToken();
      }
    }
 catch (    Throwable tr) {
      Log.w(TAG,tr.getLocalizedMessage());
    }
    UninstallThread thrd=new UninstallThread(this,code,pkgName,downloadUri,token);
    thrd.start();
  }
 else {
    String tempPkgName=(null != pkgName ? pkgName : ""String_Node_Str"");
    PackageStateSender.sendPackageUninstallBroadcast(this,code,tempPkgName,false);
  }
}",0.8833401555464593
153181,"public void onClick(View v){
  if (v.getId() == R.id.applist_btn_detail) {
    int pos=mListView.getSelectedItemPosition();
    Log.i(TAG,""String_Node_Str"" + Integer.toString(pos));
    if (ListView.INVALID_POSITION != pos) {
      Intent intent=new Intent();
      intent.setClass(AppListPage.this,AppDetailsPage.class);
      String[] value={mAppList.get(pos).mAppName,mAppList.get(pos).mAppVersion,mAppList.get(pos).mAppCode,mAppList.get(pos).mAppAuthor,mAppList.get(pos).mAppImageUrl,mAppList.get(pos).mAppDesc};
      intent.putExtra(AppDetailsPage.EXTRA_KAY,value);
      startActivity(intent);
    }
  }
}","public void onClick(View v){
  if (v.getId() == R.id.applist_btn_detail) {
    int pos=mListView.getSelectedItemPosition();
    Log.i(TAG,""String_Node_Str"" + Integer.toString(pos));
    if (ListView.INVALID_POSITION != pos) {
      Intent intent=new Intent();
      intent.setClass(AppListPage.this,AppDetailsPage.class);
      String[] value={mAppList.get(pos).mAppName,mAppList.get(pos).mAppVersion,mAppList.get(pos).mAppCode,mAppList.get(pos).mAppAuthor,mAppList.get(pos).mAppImageUrl,mAppList.get(pos).mAppShortDesc};
      intent.putExtra(AppDetailsPage.EXTRA_KAY,value);
      startActivity(intent);
    }
  }
}",0.9959316517493898
153182,"public void onClick(View v){
  if (v.getId() == R.id.main_btn_applist_page) {
    Intent intent=new Intent();
    intent.setClass(this,AppListPage.class);
    startActivity(intent);
  }
 else   if (v.getId() == R.id.main_btn_update_page) {
    Intent intent=new Intent();
    intent.setClass(this,AppUpdatePage.class);
    startActivity(intent);
  }
 else   if (v.getId() == R.id.main_btn_download_page) {
    Intent intent=new Intent();
    intent.setClass(this,AppDownloadPage.class);
    startActivity(intent);
  }
 else {
    for (int i=0; i < mImageViewIds.length; ++i) {
      if (v.getId() == mImageViewIds[i]) {
        Intent intent=new Intent();
        intent.setClass(this,AppDetailsPage.class);
        String[] value={mAppLib.get(i).mAppName,mAppLib.get(i).mAppVersion,mAppLib.get(i).mAppCode,mAppLib.get(i).mAppAuthor,mAppLib.get(i).mAppImageUrl,mAppLib.get(i).mAppDesc};
        intent.putExtra(AppDetailsPage.EXTRA_KAY,value);
        startActivity(intent);
        break;
      }
    }
  }
}","public void onClick(View v){
  if (v.getId() == R.id.main_btn_applist_page) {
    Intent intent=new Intent();
    intent.setClass(this,AppListPage.class);
    startActivity(intent);
  }
 else   if (v.getId() == R.id.main_btn_update_page) {
    Intent intent=new Intent();
    intent.setClass(this,AppUpdatePage.class);
    startActivity(intent);
  }
 else   if (v.getId() == R.id.main_btn_download_page) {
    Intent intent=new Intent();
    intent.setClass(this,AppDownloadPage.class);
    startActivity(intent);
  }
 else {
    for (int i=0; i < mImageViewIds.length; ++i) {
      if (v.getId() == mImageViewIds[i]) {
        Intent intent=new Intent();
        intent.setClass(this,AppDetailsPage.class);
        String[] value={mAppLib.get(i).mAppName,mAppLib.get(i).mAppVersion,mAppLib.get(i).mAppCode,mAppLib.get(i).mAppAuthor,mAppLib.get(i).mAppImageUrl,mAppLib.get(i).mAppShortDesc};
        intent.putExtra(AppDetailsPage.EXTRA_KAY,value);
        startActivity(intent);
        break;
      }
    }
  }
}",0.9975284231339596
153183,"public void downloadAndInstall(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  boolean bExists=false;
  String statusStr=null;
  PackageState state=PackageState.unknown;
  String downloadUri=null;
  String[] columns={PackageDbHelper.COLUMN_CODE,PackageDbHelper.COLUMN_STATE,PackageDbHelper.COLUMN_DOWNLOAD_URI};
  String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
  String[] whereValue={appInfo.mAppCode};
  Cursor c=mPkgDBHelper.select(columns,where,whereValue,null);
  if (null != c) {
    Assert.assertTrue(c.getCount() >= 0 && c.getCount() <= 1);
    bExists=(c.getCount() == 1 && c.moveToFirst());
    if (bExists) {
      int index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_STATE);
      statusStr=c.getString(index);
      state=PackageState.valueOf(statusStr);
      index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_DOWNLOAD_URI);
      downloadUri=c.getString(index);
    }
    c.close();
  }
  if (bExists && isDownloadingOrInstalling(state)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,state.name());
  }
 else {
    try {
      URI uri=getURI(url);
      Log.i(TAG,""String_Node_Str"" + uri.toString());
      ContentValues values=new ContentValues();
      values.put(Downloads.COLUMN_URI,uri.toString());
      values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
      values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
      values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
      values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
      values.put(Downloads.COLUMN_DESCRIPTION,appInfo.mAppCode);
      values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
      values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
      values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
      Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
      if (null != uriInserted) {
        Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
        Log.i(TAG,""String_Node_Str"" + appInfo.mAppShortDesc);
        ContentValues valuesLocal=new ContentValues(10);
        valuesLocal.put(PackageDbHelper.COLUMN_VERSION,appInfo.mAppVersion);
        valuesLocal.put(PackageDbHelper.COLUMN_APP_NAME,appInfo.mAppName);
        valuesLocal.put(PackageDbHelper.COLUMN_AUTHOR,appInfo.mAppAuthor);
        valuesLocal.put(PackageDbHelper.COLUMN_DESC,appInfo.mAppShortDesc);
        valuesLocal.put(PackageDbHelper.COLUMN_SRC_PATH,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_PKG_NAME,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.downloading.name());
        valuesLocal.put(PackageDbHelper.COLUMN_DOWNLOAD_URI,uriInserted.toString());
        valuesLocal.put(PackageDbHelper.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
        if (bExists) {
          try {
            getContentResolver().delete(Uri.parse(downloadUri),null,null);
          }
 catch (          Throwable tr) {
          }
          mPkgDBHelper.update(appInfo.mAppCode,valuesLocal);
        }
 else {
          valuesLocal.put(PackageDbHelper.COLUMN_CODE,appInfo.mAppCode);
          mPkgDBHelper.insert(valuesLocal);
        }
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.downloading.name());
      }
 else {
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.download_failed.name());
      }
    }
 catch (    Throwable tr) {
      Log.w(TAG,""String_Node_Str"" + tr.getLocalizedMessage());
    }
  }
}","public void downloadAndInstall(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  boolean bExists=false;
  String statusStr=null;
  PackageState state=PackageState.unknown;
  String downloadUri=null;
  String[] columns={PackageDbHelper.COLUMN_CODE,PackageDbHelper.COLUMN_STATE,PackageDbHelper.COLUMN_DOWNLOAD_URI};
  String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
  String[] whereValue={appInfo.mAppCode};
  Cursor c=mPkgDBHelper.select(columns,where,whereValue,null);
  if (null != c) {
    Assert.assertTrue(c.getCount() >= 0 && c.getCount() <= 1);
    bExists=(c.getCount() == 1 && c.moveToFirst());
    if (bExists) {
      int index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_STATE);
      statusStr=c.getString(index);
      state=PackageState.valueOf(statusStr);
      index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_DOWNLOAD_URI);
      downloadUri=c.getString(index);
    }
    c.close();
  }
  if (bExists && isDownloadingOrInstalling(state)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,state.name());
  }
 else {
    try {
      URI uri=getURI(url);
      Log.i(TAG,""String_Node_Str"" + uri.toString());
      ContentValues values=new ContentValues();
      values.put(Downloads.COLUMN_URI,uri.toString());
      values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
      values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
      values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
      values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
      values.put(Downloads.COLUMN_DESCRIPTION,appInfo.mAppCode);
      values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
      values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
      values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
      Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
      if (null != uriInserted) {
        Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
        ContentValues valuesLocal=new ContentValues(10);
        valuesLocal.put(PackageDbHelper.COLUMN_VERSION,appInfo.mAppVersion);
        valuesLocal.put(PackageDbHelper.COLUMN_APP_NAME,appInfo.mAppName);
        valuesLocal.put(PackageDbHelper.COLUMN_AUTHOR,appInfo.mAppAuthor);
        valuesLocal.put(PackageDbHelper.COLUMN_DESC,appInfo.mAppShortDesc);
        valuesLocal.put(PackageDbHelper.COLUMN_SRC_PATH,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_PKG_NAME,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.downloading.name());
        valuesLocal.put(PackageDbHelper.COLUMN_DOWNLOAD_URI,uriInserted.toString());
        valuesLocal.put(PackageDbHelper.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
        if (bExists) {
          try {
            getContentResolver().delete(Uri.parse(downloadUri),null,null);
          }
 catch (          Throwable tr) {
          }
          mPkgDBHelper.update(appInfo.mAppCode,valuesLocal);
        }
 else {
          valuesLocal.put(PackageDbHelper.COLUMN_CODE,appInfo.mAppCode);
          mPkgDBHelper.insert(valuesLocal);
        }
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.downloading.name());
      }
 else {
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.download_failed.name());
      }
    }
 catch (    Throwable tr) {
      Log.w(TAG,""String_Node_Str"" + tr.getLocalizedMessage());
    }
  }
}",0.992020592020592
153184,"public void uninstall(String code){
  String[] columns={InstalledAppDb.COLUMN_PKG_NAME,InstalledAppDb.COLUMN_DOWNLOAD_URI};
  String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
  String[] whereArgs={code};
  Cursor c=this.getContentResolver().query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  String pkgName=null;
  String downloadUri=null;
  if (null != c) {
    c.moveToFirst();
    int pkgNameId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_PKG_NAME);
    int downloadUriId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_DOWNLOAD_URI);
    pkgName=c.getString(pkgNameId);
    downloadUri=c.getString(downloadUriId);
    c.close();
    Log.i(TAG,""String_Node_Str"" + code + ""String_Node_Str""+ downloadUriId);
    UninstallThread thrd=new UninstallThread(this,code,pkgName,downloadUri);
    thrd.start();
  }
 else {
    String tempPkgName=(null != pkgName ? pkgName : ""String_Node_Str"");
    PackageStateSender.sendPackageUninstallBroadcast(this,code,tempPkgName,false);
  }
}","public void uninstall(String code){
  String[] columns={InstalledAppDb.COLUMN_PKG_NAME,InstalledAppDb.COLUMN_DOWNLOAD_URI};
  String where=InstalledAppDb.COLUMN_CODE + ""String_Node_Str"";
  String[] whereArgs={code};
  Cursor c=this.getContentResolver().query(BehooProvider.INSTALLED_APP_CONTENT_URI,columns,where,whereArgs,null);
  String pkgName=null;
  String downloadUri=null;
  if (null != c) {
    c.moveToFirst();
    int pkgNameId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_PKG_NAME);
    int downloadUriId=c.getColumnIndexOrThrow(InstalledAppDb.COLUMN_DOWNLOAD_URI);
    pkgName=c.getString(pkgNameId);
    downloadUri=c.getString(downloadUriId);
    c.close();
    Log.i(TAG,""String_Node_Str"" + code + ""String_Node_Str""+ downloadUriId);
    String token=null;
    if (null != ServiceManager.inst().getSyncHandler()) {
      token=ServiceManager.inst().getSyncHandler().getToken();
    }
    UninstallThread thrd=new UninstallThread(this,code,pkgName,downloadUri,token);
    thrd.start();
  }
 else {
    String tempPkgName=(null != pkgName ? pkgName : ""String_Node_Str"");
    PackageStateSender.sendPackageUninstallBroadcast(this,code,tempPkgName,false);
  }
}",0.8802559414990859
153185,"public View getView(int position,View convertView,ViewGroup parent){
  View view=null;
  if (convertView == null) {
    view=mInflater.inflate(R.layout.applist_item_layout,parent,false);
    view.setFocusable(true);
  }
 else {
    view=convertView;
  }
  AppInfo appInfo=mAppList.get(position);
  TextView titleView=(TextView)view.findViewById(R.id.applist_item_title);
  titleView.setText(appInfo.mAppName);
  TextView subTitleView=(TextView)view.findViewById(R.id.applist_item_subtitle);
  subTitleView.setText(appInfo.mAppAuthor);
  return view;
}","public View getView(int position,View convertView,ViewGroup parent){
  View view=null;
  if (convertView == null) {
    view=mInflater.inflate(R.layout.applist_item_layout,parent,false);
  }
 else {
    view=convertView;
  }
  AppInfo appInfo=mAppList.get(position);
  TextView titleView=(TextView)view.findViewById(R.id.applist_item_title);
  titleView.setText(appInfo.mAppName);
  TextView subTitleView=(TextView)view.findViewById(R.id.applist_item_subtitle);
  subTitleView.setText(appInfo.mAppAuthor);
  return view;
}",0.972972972972973
153186,"public View getView(int position,View convertView,ViewGroup parent){
  View view=null;
  if (convertView == null) {
    view=mInflater.inflate(R.layout.applist_item_layout,parent,false);
    view.setFocusable(true);
  }
 else {
    view=convertView;
  }
  AppInfo appInfo=mAppLib.get(position);
  TextView titleView=(TextView)view.findViewById(R.id.applist_item_title);
  titleView.setText(appInfo.mAppName);
  TextView subTitleView=(TextView)view.findViewById(R.id.applist_item_subtitle);
  subTitleView.setText(appInfo.mAppAuthor);
  return view;
}","public View getView(int position,View convertView,ViewGroup parent){
  View view=null;
  if (convertView == null) {
    view=mInflater.inflate(R.layout.applist_item_layout,parent,false);
  }
 else {
    view=convertView;
  }
  AppInfo appInfo=mAppLib.get(position);
  TextView titleView=(TextView)view.findViewById(R.id.applist_item_title);
  titleView.setText(appInfo.mAppName);
  TextView subTitleView=(TextView)view.findViewById(R.id.applist_item_subtitle);
  subTitleView.setText(appInfo.mAppAuthor);
  return view;
}",0.972922502334267
153187,"public void downloadAndInstall(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  String[] columns={PackageDbHelper.COLUMN_CODE,PackageDbHelper.COLUMN_STATE};
  String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
  String[] whereValue={appInfo.mAppCode};
  Cursor c=mPkgDBHelper.select(columns,where,whereValue,null);
  Assert.assertTrue(c.getCount() >= 0 && c.getCount() <= 1);
  boolean bExists=(c.getCount() == 1);
  String statusStr=null;
  PackageState state=PackageState.unknown;
  if (bExists) {
    int index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_STATE);
    statusStr=c.getString(index);
    try {
      state=PackageState.valueOf(statusStr);
    }
 catch (    Throwable tr) {
    }
  }
  c.close();
  if (bExists && isDownloadingOrInstalling(state)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,state.name());
  }
 else {
    URI uri=getURI(url);
    ContentValues valuesLocal=new ContentValues();
    valuesLocal.put(PackageDbHelper.COLUMN_VERSION,appInfo.mAppVersion);
    valuesLocal.put(PackageDbHelper.COLUMN_APP_NAME,appInfo.mAppName);
    valuesLocal.put(PackageDbHelper.COLUMN_AUTHOR,appInfo.mAppAuthor);
    valuesLocal.put(PackageDbHelper.COLUMN_DESC,appInfo.mAppDesc);
    valuesLocal.put(PackageDbHelper.COLUMN_SRC_PATH,""String_Node_Str"");
    valuesLocal.put(PackageDbHelper.COLUMN_PKG_NAME,""String_Node_Str"");
    valuesLocal.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.downloading.name());
    valuesLocal.put(PackageDbHelper.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
    if (bExists) {
      mPkgDBHelper.update(appInfo.mAppCode,valuesLocal);
    }
 else {
      valuesLocal.put(PackageDbHelper.COLUMN_CODE,appInfo.mAppCode);
      mPkgDBHelper.insert(valuesLocal);
    }
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.downloading.name());
    int delCount=getContentResolver().delete(Downloads.CONTENT_URI,where,whereValue);
    Log.i(TAG,""String_Node_Str"" + code + ""String_Node_Str""+ Integer.toString(delCount));
    ContentValues values=new ContentValues();
    values.put(Downloads.COLUMN_URI,uri.toString());
    values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
    values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
    values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
    values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
    values.put(Downloads.COLUMN_DESCRIPTION,BEHOO_APP_MARKET);
    values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
    values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
    values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
    Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
    Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
  }
}","public void downloadAndInstall(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  String[] columns={PackageDbHelper.COLUMN_CODE,PackageDbHelper.COLUMN_STATE};
  String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
  String[] whereValue={appInfo.mAppCode};
  Cursor c=mPkgDBHelper.select(columns,where,whereValue,null);
  Assert.assertTrue(c.getCount() >= 0 && c.getCount() <= 1);
  boolean bExists=(c.getCount() == 1);
  String statusStr=null;
  PackageState state=PackageState.unknown;
  if (bExists) {
    int index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_STATE);
    statusStr=c.getString(index);
    try {
      state=PackageState.valueOf(statusStr);
    }
 catch (    Throwable tr) {
    }
  }
  c.close();
  if (bExists && isDownloadingOrInstalling(state)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,state.name());
  }
 else {
    URI uri=getURI(url);
    ContentValues valuesLocal=new ContentValues();
    valuesLocal.put(PackageDbHelper.COLUMN_VERSION,appInfo.mAppVersion);
    valuesLocal.put(PackageDbHelper.COLUMN_APP_NAME,appInfo.mAppName);
    valuesLocal.put(PackageDbHelper.COLUMN_AUTHOR,appInfo.mAppAuthor);
    valuesLocal.put(PackageDbHelper.COLUMN_DESC,appInfo.mAppDesc);
    valuesLocal.put(PackageDbHelper.COLUMN_SRC_PATH,""String_Node_Str"");
    valuesLocal.put(PackageDbHelper.COLUMN_PKG_NAME,""String_Node_Str"");
    valuesLocal.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.downloading.name());
    valuesLocal.put(PackageDbHelper.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
    if (bExists) {
      mPkgDBHelper.update(appInfo.mAppCode,valuesLocal);
    }
 else {
      valuesLocal.put(PackageDbHelper.COLUMN_CODE,appInfo.mAppCode);
      mPkgDBHelper.insert(valuesLocal);
    }
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.downloading.name());
    int delCount=getContentResolver().delete(Downloads.CONTENT_URI,where,whereValue);
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode + ""String_Node_Str""+ Integer.toString(delCount));
    ContentValues values=new ContentValues();
    values.put(Downloads.COLUMN_URI,uri.toString());
    values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
    values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
    values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
    values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
    values.put(Downloads.COLUMN_DESCRIPTION,BEHOO_APP_MARKET);
    values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
    values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
    values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
    Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
    Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
  }
}",0.9977834072197592
153188,"public void run(){
synchronized (SYNC_OBJ) {
    boolean ret=false;
    try {
      Log.i(TAG,""String_Node_Str"" + mPkgSrcUri);
      ContentValues cv=new ContentValues();
      cv.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.installing.name());
      mPkgDBHelper.update(mPkgCode,cv);
      PackageStateSender.sendPackageStateBroadcast(mContext,mPkgCode,Constants.PackageState.installing.name());
      PackageInstaller installer=new PackageInstaller(mContext);
      ret=installer.installPackage(Uri.parse(mPkgSrcUri));
    }
 catch (    Throwable tr) {
      ret=false;
    }
    String status=(ret ? Constants.PackageState.install_succeeded.name() : Constants.PackageState.install_failed.name());
    ContentValues cv2=new ContentValues();
    cv2.put(PackageDbHelper.COLUMN_STATE,status);
    if (ret) {
      PackageParser.Package pkgInfo=PackageUtils.getPackageInfo(Uri.parse(mPkgSrcUri));
      cv2.put(PackageDbHelper.COLUMN_PKG_NAME,pkgInfo.packageName);
      String where=Downloads.COLUMN_NOTIFICATION_EXTRAS + ""String_Node_Str"";
      String[] whereArgs={mPkgCode};
      int delCount=mContext.getContentResolver().delete(Downloads.CONTENT_URI,where,whereArgs);
      Log.i(TAG,""String_Node_Str"" + mPkgCode + ""String_Node_Str""+ Integer.toString(delCount));
    }
    mPkgDBHelper.update(mPkgCode,cv);
    PackageStateSender.sendPackageStateBroadcast(mContext,mPkgCode,status);
    Log.i(TAG,""String_Node_Str"" + status + ""String_Node_Str""+ mPkgSrcUri);
  }
}","public void run(){
synchronized (SYNC_OBJ) {
    boolean ret=false;
    try {
      Log.i(TAG,""String_Node_Str"" + mPkgSrcUri);
      ContentValues cv=new ContentValues();
      cv.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.installing.name());
      mPkgDBHelper.update(mPkgCode,cv);
      PackageStateSender.sendPackageStateBroadcast(mContext,mPkgCode,Constants.PackageState.installing.name());
      PackageInstaller installer=new PackageInstaller(mContext);
      ret=installer.installPackage(Uri.parse(mPkgSrcUri));
    }
 catch (    Throwable tr) {
      ret=false;
    }
    String status=(ret ? Constants.PackageState.install_succeeded.name() : Constants.PackageState.install_failed.name());
    ContentValues cv2=new ContentValues();
    cv2.put(PackageDbHelper.COLUMN_STATE,status);
    if (ret) {
      PackageParser.Package pkgInfo=PackageUtils.getPackageInfo(Uri.parse(mPkgSrcUri));
      cv2.put(PackageDbHelper.COLUMN_PKG_NAME,pkgInfo.packageName);
      String where=Downloads.COLUMN_NOTIFICATION_EXTRAS + ""String_Node_Str"";
      String[] whereArgs={mPkgCode};
      int delCount=mContext.getContentResolver().delete(Downloads.CONTENT_URI,where,whereArgs);
      Log.i(TAG,""String_Node_Str"" + mPkgCode + ""String_Node_Str""+ Integer.toString(delCount));
    }
    mPkgDBHelper.update(mPkgCode,cv2);
    PackageStateSender.sendPackageStateBroadcast(mContext,mPkgCode,status);
    Log.i(TAG,""String_Node_Str"" + status + ""String_Node_Str""+ mPkgSrcUri);
  }
}",0.999662276258021
153189,"private void addAppInfo(String code){
  if (!mCodeAppInfoMap.containsKey(code)) {
    String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
    String[] whereArgs={code};
    ArrayList<AppInfo> appList=ServiceManager.inst().getDownloadHandler().getAppList(where,whereArgs);
    Assert.assertTrue(null != appList && appList.size() == 1);
    mCodeAppInfoMap.put(code,appList.get(0));
  }
}","private void addAppInfo(String code){
  if (!mCodeAppInfoMap.containsKey(code)) {
    String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
    String[] whereArgs={code};
    ArrayList<AppInfo> appList=ServiceManager.inst().getDownloadHandler().getAppList(where,whereArgs);
    if (null != appList && appList.size() == 1) {
      mCodeAppInfoMap.put(code,appList.get(0));
    }
  }
}",0.9580686149936468
153190,"public boolean doTask(){
  try {
    String url=UrlHelpers.getAppListUrl(ServiceManager.inst().getSyncHandler().getToken(),mAppList.size() + 1,PAGE_SIZE);
    Log.i(TAG,""String_Node_Str"" + url);
    ArrayList<AppInfo> appLib=mAppListProxy.getAppList(url,PAGE_SIZE);
    if (null != appLib) {
      mAppList.addAll(appLib);
      mContinueDownload=(appLib.size() > 0);
      return true;
    }
  }
 catch (  Throwable tr) {
    Log.w(TAG,""String_Node_Str"" + tr.getLocalizedMessage());
  }
  return false;
}","public boolean doTask(){
  try {
    String url=UrlHelpers.getAppListUrl(ServiceManager.inst().getSyncHandler().getToken(),mAppList.size() + 1,PAGE_SIZE);
    Log.i(TAG,""String_Node_Str"" + url);
    ArrayList<AppInfo> appLib=mAppListProxy.getAppList(url,PAGE_SIZE);
    mAppList.addAll(appLib);
    mContinueDownload=(mAppListProxy.getAppListTotal() > mAppList.size());
    return (appLib.size() > 0);
  }
 catch (  Throwable tr) {
    Log.w(TAG,""String_Node_Str"" + tr.getLocalizedMessage());
  }
  return false;
}",0.8478900883218842
153191,"protected void onTaskCanceled(DialogInterface dlg){
  mHttpTask.cancel();
}","protected void onTaskCanceled(DialogInterface dlg){
  mHttpTask.setHandler(null);
  mHttpTask.cancel();
}",0.8333333333333334
153192,"protected void onTaskCompleted(boolean result){
  if (result) {
    if (mAppLib.size() > 0) {
      mCurrentSelection=0;
    }
    for (int i=0; i < mImageViewIds.length; ++i) {
      ImageView iv=(ImageView)findViewById(mImageViewIds[i]);
      if (i < mAppLib.size()) {
        mCodeIndexMap.put(mAppLib.get(i).mAppCode,i);
        iv.setVisibility(View.VISIBLE);
        iv.setImageResource(R.drawable.appicon_default);
        iv.setFocusable(true);
        iv.setOnFocusChangeListener(this);
        iv.setTag(new Integer(i));
        iv.setPadding(5,5,5,5);
        if (i == mCurrentSelection) {
          iv.requestFocus();
          updateInstallButtonGuard();
        }
        executeImageTask(mAppLib.get(i).mAppImageUrl,mAppLib.get(i).mAppCode);
      }
 else {
        iv.setVisibility(View.INVISIBLE);
      }
    }
  }
}","protected void onTaskCompleted(boolean result){
  if (result) {
    if (mAppLib.size() > 0) {
      mCurrentSelection=0;
    }
    for (int i=0; i < mImageViewIds.length; ++i) {
      ImageView iv=(ImageView)findViewById(mImageViewIds[i]);
      if (i < mAppLib.size()) {
        mCodeIndexMap.put(mAppLib.get(i).mAppCode,i);
        iv.setVisibility(View.VISIBLE);
        iv.setImageResource(R.drawable.appicon_default);
        iv.setFocusable(true);
        iv.setOnFocusChangeListener(this);
        iv.setTag(new Integer(i));
        iv.setPadding(8,8,8,8);
        if (i == mCurrentSelection) {
          iv.requestFocus();
          updateInstallButtonGuard();
        }
        executeImageTask(mAppLib.get(i).mAppImageUrl,mAppLib.get(i).mAppCode);
      }
 else {
        iv.setVisibility(View.INVISIBLE);
      }
    }
  }
}",0.9952095808383232
153193,"protected boolean doTask(){
  try {
    String url=UrlHelpers.getPromotionUrl(ServiceManager.inst().getSyncHandler().getToken());
    Log.i(TAG,""String_Node_Str"" + url);
    ArrayList<AppInfo> appLib=mAppListProxy.getAppList(url,APP_PROMOTION_NUM);
    if (null != appLib) {
      mAppLib=appLib;
      return true;
    }
  }
 catch (  RemoteException e) {
    Log.w(TAG,""String_Node_Str"" + e.getLocalizedMessage());
    return false;
  }
  return false;
}","protected boolean doTask(){
  try {
    String url=UrlHelpers.getPromotionUrl(ServiceManager.inst().getSyncHandler().getToken());
    Log.i(TAG,""String_Node_Str"" + url);
    ArrayList<AppInfo> appLib=mAppListProxy.getPromotionList(url,APP_PROMOTION_NUM);
    mAppLib=appLib;
    return (mAppLib.size() > 0);
  }
 catch (  RemoteException e) {
    Log.w(TAG,""String_Node_Str"" + e.getLocalizedMessage());
    return false;
  }
}",0.8979591836734694
153194,"protected void onTaskCanceled(DialogInterface dlg){
  mHttpTask.cancel();
}","protected void onTaskCanceled(DialogInterface dlg){
  mHttpTask.setHandler(null);
  mHttpTask.cancel();
}",0.8333333333333334
153195,"public void onDestroy(){
  super.onDestroy();
  mThreadPool.resume();
  mThreadPool.shutdown();
}","public void onDestroy(){
  super.onDestroy();
  mExiting=true;
  mThreadPool.resume();
  mThreadPool.shutdown();
}",0.919431279620853
153196,"public void handleMessage(Message msg){
switch (msg.what) {
case DownloadConstants.MSG_PROTOCOL_SUCCEED:
    AsyncTaskActivity.this.dismissDialog(AsyncTaskActivity.WAITING_DIALOG);
  AsyncTaskActivity.this.onTaskCompleted(true);
break;
case DownloadConstants.MSG_PROTOCOL_FAILURE:
Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
AsyncTaskActivity.this.dismissDialog(AsyncTaskActivity.WAITING_DIALOG);
AsyncTaskActivity.this.onTaskCompleted(false);
showDialog(TASK_ERROR_DIALOG);
break;
case DownloadConstants.MSG_IMG_SUCCEED:
{
Bundle data=msg.getData();
AsyncTaskActivity.this.onImageCompleted(true,data.getString(DownloadConstants.MSG_DATA_URL),data.getString(DownloadConstants.MSG_DATA_APPCODE));
break;
}
case DownloadConstants.MSG_IMG_FAILURE:
{
Bundle data=msg.getData();
AsyncTaskActivity.this.onImageCompleted(false,data.getString(DownloadConstants.MSG_DATA_URL),data.getString(DownloadConstants.MSG_DATA_APPCODE));
break;
}
default :
break;
}
super.handleMessage(msg);
}","public void handleMessage(Message msg){
  Log.i(TAG,""String_Node_Str"" + msg.what + ""String_Node_Str""+ (AsyncTaskActivity.this.mExiting ? ""String_Node_Str"" : ""String_Node_Str""));
switch (msg.what) {
case DownloadConstants.MSG_PROTOCOL_SUCCEED:
    if (!mExiting) {
      AsyncTaskActivity.this.dismissDialog(AsyncTaskActivity.WAITING_DIALOG);
      AsyncTaskActivity.this.onTaskCompleted(true);
    }
  break;
case DownloadConstants.MSG_PROTOCOL_FAILURE:
if (!mExiting) {
  Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
  AsyncTaskActivity.this.dismissDialog(AsyncTaskActivity.WAITING_DIALOG);
  AsyncTaskActivity.this.onTaskCompleted(false);
  showDialog(TASK_ERROR_DIALOG);
}
break;
case DownloadConstants.MSG_IMG_SUCCEED:
if (!mExiting) {
Bundle data=msg.getData();
AsyncTaskActivity.this.onImageCompleted(true,data.getString(DownloadConstants.MSG_DATA_URL),data.getString(DownloadConstants.MSG_DATA_APPCODE));
break;
}
case DownloadConstants.MSG_IMG_FAILURE:
if (!mExiting) {
Bundle data=msg.getData();
AsyncTaskActivity.this.onImageCompleted(false,data.getString(DownloadConstants.MSG_DATA_URL),data.getString(DownloadConstants.MSG_DATA_APPCODE));
break;
}
default :
break;
}
super.handleMessage(msg);
}",0.8950729927007299
153197,"public void run(){
  while (!mExit) {
    String[] columns={PackageDbHelper.COLUMN_CODE,PackageDbHelper.COLUMN_VERSION,PackageDbHelper.COLUMN_STATE,PackageDbHelper.COLUMN_PKG_NAME};
    Cursor c=mPkgDBHelper.select(columns,null,null,null);
    Log.i(TAG,""String_Node_Str"" + Integer.toString(c.getCount()));
    int codeId=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_CODE);
    int versionId=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_VERSION);
    int stateId=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_STATE);
    int pkgNameId=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_PKG_NAME);
    String code=null;
    String version=null;
    String state=null;
    String pkgName=null;
    PackageManager pm=mContext.getPackageManager();
    ArrayList<String> codes=new ArrayList<String>();
    ArrayList<String> versions=new ArrayList<String>();
    for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
      code=c.getString(codeId);
      version=c.getString(versionId);
      state=c.getString(stateId);
      pkgName=c.getString(pkgNameId);
      PackageState pkgstate=Constants.getStateByString(state);
      if (pkgUninstalled(pm,pkgName,pkgstate)) {
        mPkgDBHelper.delete(code);
      }
 else       if (PackageState.install_succeeded == pkgstate) {
        codes.add(code);
        versions.add(version);
      }
    }
    c.close();
    Log.i(TAG,""String_Node_Str"" + Integer.toString(codes.size()));
    HttpUtil httpUtil=new HttpUtil();
    try {
      String reqStr=UrlHelpers.getUpdateRequestString(codes,versions);
      Log.i(TAG,""String_Node_Str"" + reqStr);
      String url=UrlHelpers.getUpdateUrl(mSyncService.getToken());
      Log.i(TAG,""String_Node_Str"" + url);
      InputStream stream=httpUtil.httpPost(url,reqStr);
      ArrayList<AppInfo> appList=AppListParser.parse(stream,codes.size());
      Log.i(TAG,""String_Node_Str"" + Integer.toString(appList.size()));
      ContentValues cv=new ContentValues();
      for (int i=0; i < appList.size(); ++i) {
        AppInfo appInfo=appList.get(i);
        cv.put(PackageDbHelper.COLUMN_STATE,PackageState.need_update.name());
        mPkgDBHelper.update(appInfo.mAppCode,cv);
      }
      if (0 < appList.size()) {
        Intent intent=new Intent(Constants.ACTION_UPDATE_STATE);
        mContext.sendBroadcast(intent);
      }
    }
 catch (    Throwable tr) {
      Log.w(TAG,""String_Node_Str"" + tr.getMessage());
    }
 finally {
      httpUtil.disconnect();
    }
synchronized (mSyncObject) {
      try {
        if (!mExit) {
          mSyncObject.wait(1000 * 60 * 30);
        }
      }
 catch (      InterruptedException e) {
      }
    }
  }
}","public void run(){
  while (!mExit) {
    Log.i(TAG,""String_Node_Str"");
    Map<String,String> codesVersionMap=shouldBeCheckedAppMap();
    Log.i(TAG,""String_Node_Str"" + Integer.toString(codesVersionMap.size()));
    if (0 < codesVersionMap.size()) {
      AppListParser appListParser=new AppListParser();
      String reqStr=UrlHelpers.getUpdateRequestString(codesVersionMap);
      Log.i(TAG,""String_Node_Str"" + reqStr);
      try {
        String url=UrlHelpers.getUpdateUrl(mSyncService.getToken());
        ArrayList<AppInfo> appList=appListParser.getUpdateList(url,reqStr,codesVersionMap.size());
        Log.i(TAG,""String_Node_Str"" + Integer.toString(appList.size()));
        ContentValues cv=new ContentValues();
        for (int i=0; i < appList.size(); ++i) {
          AppInfo appInfo=appList.get(i);
          cv.put(PackageDbHelper.COLUMN_STATE,PackageState.need_update.name());
          mPkgDBHelper.update(appInfo.mAppCode,cv);
        }
        if (0 < appList.size()) {
          Intent intent=new Intent(Constants.ACTION_UPDATE_STATE);
          mContext.sendBroadcast(intent);
        }
      }
 catch (      Throwable tr) {
        Log.w(TAG,""String_Node_Str"" + tr.getMessage());
      }
 finally {
        appListParser.cancel();
      }
    }
synchronized (mSyncObject) {
      try {
        if (!mExit) {
          mSyncObject.wait(1000 * 60 * 30);
        }
      }
 catch (      InterruptedException e) {
      }
    }
  }
}",0.2567865003668378
153198,"public void downloadAndInstall(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  boolean bExists=false;
  String statusStr=null;
  PackageState state=PackageState.unknown;
  String downloadUri=null;
  String[] columns={PackageDbHelper.COLUMN_CODE,PackageDbHelper.COLUMN_STATE,PackageDbHelper.COLUMN_DOWNLOAD_URI};
  String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
  String[] whereValue={appInfo.mAppCode};
  Cursor c=mPkgDBHelper.select(columns,where,whereValue,null);
  if (null != c) {
    Assert.assertTrue(c.getCount() >= 0 && c.getCount() <= 1);
    bExists=(c.getCount() == 1 && c.moveToFirst());
    if (bExists) {
      int index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_STATE);
      statusStr=c.getString(index);
      state=PackageState.valueOf(statusStr);
      index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_DOWNLOAD_URI);
      downloadUri=c.getString(index);
    }
    c.close();
  }
  if (bExists && isDownloadingOrInstalling(state)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,state.name());
  }
 else {
    try {
      URI uri=getURI(url);
      Log.i(TAG,""String_Node_Str"" + uri.toString());
      ContentValues values=new ContentValues();
      values.put(Downloads.COLUMN_URI,uri.toString());
      values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
      values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
      values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
      values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
      values.put(Downloads.COLUMN_DESCRIPTION,appInfo.mAppCode);
      values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
      values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
      values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
      Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
      if (null != uriInserted) {
        Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
        ContentValues valuesLocal=new ContentValues();
        valuesLocal.put(PackageDbHelper.COLUMN_VERSION,appInfo.mAppVersion);
        valuesLocal.put(PackageDbHelper.COLUMN_APP_NAME,appInfo.mAppName);
        valuesLocal.put(PackageDbHelper.COLUMN_AUTHOR,appInfo.mAppAuthor);
        valuesLocal.put(PackageDbHelper.COLUMN_DESC,appInfo.mAppShortDesc);
        valuesLocal.put(PackageDbHelper.COLUMN_SRC_PATH,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_PKG_NAME,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.downloading.name());
        valuesLocal.put(PackageDbHelper.COLUMN_DOWNLOAD_URI,uriInserted.toString());
        valuesLocal.put(PackageDbHelper.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
        if (bExists) {
          try {
            getContentResolver().delete(Uri.parse(downloadUri),null,null);
          }
 catch (          Throwable tr) {
          }
          mPkgDBHelper.update(appInfo.mAppCode,valuesLocal);
        }
 else {
          valuesLocal.put(PackageDbHelper.COLUMN_CODE,appInfo.mAppCode);
          mPkgDBHelper.insert(valuesLocal);
        }
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.downloading.name());
      }
 else {
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.download_failed.name());
      }
    }
 catch (    Throwable tr) {
      Log.w(TAG,""String_Node_Str"" + tr.getLocalizedMessage());
    }
  }
}","public void downloadAndInstall(String url,String mimetype,AppInfo appInfo){
  if (null == url || null == mimetype || null == appInfo) {
    throw new NullPointerException();
  }
  if (null == appInfo.mAppCode || null == appInfo.mAppVersion || null == appInfo.mAppName) {
    throw new IllegalArgumentException();
  }
  boolean bExists=false;
  String statusStr=null;
  PackageState state=PackageState.unknown;
  String downloadUri=null;
  String[] columns={PackageDbHelper.COLUMN_CODE,PackageDbHelper.COLUMN_STATE,PackageDbHelper.COLUMN_DOWNLOAD_URI};
  String where=PackageDbHelper.COLUMN_CODE + ""String_Node_Str"";
  String[] whereValue={appInfo.mAppCode};
  Cursor c=mPkgDBHelper.select(columns,where,whereValue,null);
  if (null != c) {
    Assert.assertTrue(c.getCount() >= 0 && c.getCount() <= 1);
    bExists=(c.getCount() == 1 && c.moveToFirst());
    if (bExists) {
      int index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_STATE);
      statusStr=c.getString(index);
      state=PackageState.valueOf(statusStr);
      index=c.getColumnIndexOrThrow(PackageDbHelper.COLUMN_DOWNLOAD_URI);
      downloadUri=c.getString(index);
    }
    c.close();
  }
  if (bExists && isDownloadingOrInstalling(state)) {
    Log.i(TAG,""String_Node_Str"" + appInfo.mAppCode);
    PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,state.name());
  }
 else {
    try {
      URI uri=getURI(url);
      Log.i(TAG,""String_Node_Str"" + uri.toString());
      ContentValues values=new ContentValues();
      values.put(Downloads.COLUMN_URI,uri.toString());
      values.put(Downloads.COLUMN_NOTIFICATION_PACKAGE,this.getPackageName());
      values.put(Downloads.COLUMN_NOTIFICATION_CLASS,DownloadReceiver.class.getCanonicalName());
      values.put(Downloads.COLUMN_VISIBILITY,Downloads.VISIBILITY_HIDDEN);
      values.put(Downloads.COLUMN_MIME_TYPE,mimetype);
      values.put(Downloads.COLUMN_DESCRIPTION,appInfo.mAppCode);
      values.put(Downloads.COLUMN_NOTIFICATION_EXTRAS,appInfo.mAppCode);
      values.put(Downloads.COLUMN_DESTINATION,Downloads.DESTINATION_CACHE_PARTITION_PURGEABLE);
      values.put(Downloads.COLUMN_TOTAL_BYTES,-1);
      Uri uriInserted=getContentResolver().insert(Downloads.CONTENT_URI,values);
      if (null != uriInserted) {
        Log.i(TAG,""String_Node_Str"" + uriInserted.toString());
        Log.i(TAG,""String_Node_Str"" + appInfo.mAppShortDesc);
        ContentValues valuesLocal=new ContentValues(10);
        valuesLocal.put(PackageDbHelper.COLUMN_VERSION,appInfo.mAppVersion);
        valuesLocal.put(PackageDbHelper.COLUMN_APP_NAME,appInfo.mAppName);
        valuesLocal.put(PackageDbHelper.COLUMN_AUTHOR,appInfo.mAppAuthor);
        valuesLocal.put(PackageDbHelper.COLUMN_DESC,appInfo.mAppShortDesc);
        valuesLocal.put(PackageDbHelper.COLUMN_SRC_PATH,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_PKG_NAME,""String_Node_Str"");
        valuesLocal.put(PackageDbHelper.COLUMN_STATE,Constants.PackageState.downloading.name());
        valuesLocal.put(PackageDbHelper.COLUMN_DOWNLOAD_URI,uriInserted.toString());
        valuesLocal.put(PackageDbHelper.COLUMN_IMAGE_URL,appInfo.mAppImageUrl);
        if (bExists) {
          try {
            getContentResolver().delete(Uri.parse(downloadUri),null,null);
          }
 catch (          Throwable tr) {
          }
          mPkgDBHelper.update(appInfo.mAppCode,valuesLocal);
        }
 else {
          valuesLocal.put(PackageDbHelper.COLUMN_CODE,appInfo.mAppCode);
          mPkgDBHelper.insert(valuesLocal);
        }
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.downloading.name());
      }
 else {
        PackageStateSender.sendPackageStateBroadcast(this,appInfo.mAppCode,Constants.PackageState.download_failed.name());
      }
    }
 catch (    Throwable tr) {
      Log.w(TAG,""String_Node_Str"" + tr.getLocalizedMessage());
    }
  }
}",0.991761071060762
153199,"public void onServiceConnected(ComponentName cname,IBinder binder){
  mInstallService=((DownloadInstallService.LocalServiceBinder)binder).getService();
  mInstallButtonGuard=new InstallButtonGuard(mInstallButton,null,mInstallService);
}","public void onServiceConnected(ComponentName cname,IBinder binder){
  mInstallService=((DownloadInstallService.LocalServiceBinder)binder).getService();
  int pos=mListView.getSelectedItemPosition();
  if (ListView.INVALID_POSITION != pos) {
    String code=(String)mListView.getItemAtPosition(pos);
    if (null != code) {
      mInstallButtonGuard=new InstallButtonGuard(mInstallButton,mAppMap.get(code),mInstallService);
    }
  }
}",0.6925373134328359
153200,"protected void onTaskCompleted(boolean result){
  Log.i(TAG,String.format(""String_Node_Str"",result,mAppList.size()));
  mListView.invalidate();
  if (mListView.getCount() > 0)   mListView.setSelection(0);
  updateUIState();
}","protected void onTaskCompleted(boolean result){
  Log.i(TAG,String.format(""String_Node_Str"",result ? 1 : 0,mAppList.size()));
  mListView.invalidate();
  if (mListView.getCount() > 0)   mListView.setSelection(0);
  updateUIState();
}",0.982532751091703
153201,"public void onServiceConnected(ComponentName cname,IBinder binder){
  mInstallService=((DownloadInstallService.LocalServiceBinder)binder).getService();
  if (-1 != mCurrentSelection) {
    mInstallButtonGuard=new InstallButtonGuard(mButtonInstall,mAppLib.get(mCurrentSelection),mInstallService);
    mInstallButtonGuard.setOnInstallListener(AppMarket.this);
  }
}","public void onServiceConnected(ComponentName cname,IBinder binder){
  mInstallService=((DownloadInstallService.LocalServiceBinder)binder).getService();
  createInstallButtonGuard();
}",0.663003663003663
153202,"public void onFocusChange(View v,boolean hasFocus){
  Integer index=-1;
  int min=mImageViewIds[0];
  int max=mImageViewIds[mImageViewIds.length - 1];
  if (v.getId() <= max && v.getId() >= min) {
    index=(Integer)v.getTag();
    mCurrentSelection=index;
    if (hasFocus) {
      updateUIState();
      v.setBackgroundResource(R.drawable.focus);
      mButtonInstall.setNextFocusDownId(v.getId());
      mButtonAppList.setNextFocusUpId(v.getId());
      mButtonUpdate.setNextFocusUpId(v.getId());
      mButtonDownloadMgr.setNextFocusUpId(v.getId());
      mInstallButtonGuard.setAppInfo(mAppLib.get(index));
    }
 else {
      v.setBackgroundResource(0);
    }
  }
}","public void onFocusChange(View v,boolean hasFocus){
  Integer index=(Integer)v.getTag();
  if (0 <= index && index < mImageViewIds.length) {
    if (hasFocus) {
      mCurrentSelection=index;
      Log.i(TAG,""String_Node_Str"" + Integer.toString(index));
      updateUIState();
      v.setBackgroundResource(R.drawable.focus);
      mButtonInstall.setNextFocusDownId(v.getId());
      mButtonAppList.setNextFocusUpId(v.getId());
      mButtonUpdate.setNextFocusUpId(v.getId());
      mButtonDownloadMgr.setNextFocusUpId(v.getId());
    }
 else {
      v.setBackgroundResource(0);
    }
  }
}",0.1998413957176844
153203,"protected void onTaskCompleted(boolean result){
  if (mAppLib.size() > 0) {
    mCurrentSelection=0;
  }
  for (int i=0; i < mImageViewIds.length; ++i) {
    ImageView iv=(ImageView)findViewById(mImageViewIds[i]);
    if (i < mAppLib.size()) {
      iv.setImageResource(R.drawable.test);
      iv.setFocusable(true);
      iv.setOnFocusChangeListener(this);
      iv.setTag(new Integer(i));
      iv.setPadding(5,5,5,5);
      if (i == mCurrentSelection) {
        iv.requestFocus();
      }
      if (null != mAppLib.get(i).mAppImageUrl) {
        executeImageTask(mAppLib.get(i));
      }
    }
 else {
      iv.setVisibility(View.INVISIBLE);
    }
  }
  updateUIState();
}","protected void onTaskCompleted(boolean result){
  if (mAppLib.size() > 0) {
    mCurrentSelection=0;
  }
  for (int i=0; i < mImageViewIds.length; ++i) {
    ImageView iv=(ImageView)findViewById(mImageViewIds[i]);
    if (i < mAppLib.size()) {
      iv.setImageResource(R.drawable.test);
      iv.setFocusable(true);
      iv.setOnFocusChangeListener(this);
      iv.setTag(new Integer(i));
      iv.setPadding(5,5,5,5);
      if (i == mCurrentSelection) {
        iv.requestFocus();
        createInstallButtonGuard();
      }
      if (null != mAppLib.get(i).mAppImageUrl) {
        executeImageTask(mAppLib.get(i));
      }
    }
 else {
      iv.setVisibility(View.INVISIBLE);
    }
  }
  updateUIState();
}",0.974025974025974
153204,"private void updateUIState(){
  if (mAppLib.size() > 0) {
    assert(mCurrentSelection >= 0 && mCurrentSelection < mAppLib.size());
    AppInfo appInfo=mAppLib.get(mCurrentSelection);
    TextView tv=(TextView)findViewById(R.id.main_app_title);
    tv.setText(appInfo.mAppName);
    tv=(TextView)findViewById(R.id.main_app_author);
    tv.setText(appInfo.mAppAuthor);
    tv=(TextView)findViewById(R.id.main_app_version);
    tv.setText(appInfo.mAppVersion);
    tv=(TextView)findViewById(R.id.main_app_desc);
    tv.setText(appInfo.mAppShortDesc);
    if (appInfo.getDrawable() != null) {
      ImageView iv=(ImageView)findViewById(mImageViewIds[mCurrentSelection]);
      Assert.assertTrue(true);
      iv.setImageDrawable(appInfo.getDrawable());
    }
  }
}","private void updateUIState(){
  if (mAppLib.size() > 0) {
    assert(mCurrentSelection >= 0 && mCurrentSelection < mAppLib.size());
    AppInfo appInfo=mAppLib.get(mCurrentSelection);
    TextView tv=(TextView)findViewById(R.id.main_app_title);
    tv.setText(appInfo.mAppName);
    tv=(TextView)findViewById(R.id.main_app_author);
    tv.setText(appInfo.mAppAuthor);
    tv=(TextView)findViewById(R.id.main_app_version);
    tv.setText(appInfo.mAppVersion);
    tv=(TextView)findViewById(R.id.main_app_desc);
    tv.setText(appInfo.mAppShortDesc);
    if (appInfo.getDrawable() != null) {
      ImageView iv=(ImageView)findViewById(mImageViewIds[mCurrentSelection]);
      Assert.assertTrue(true);
      iv.setImageDrawable(appInfo.getDrawable());
      iv=(ImageView)findViewById(R.id.main_app_logo);
      iv.setImageDrawable(appInfo.getDrawable());
    }
  }
}",0.9359605911330048
153205,"public void updateListView(){
  mAppLib=mInstallService.getUpdateList();
  mListView.invalidate();
  if (ListView.INVALID_POSITION == mListView.getSelectedItemPosition() && mListView.getCount() > 0) {
    mListView.setSelection(0);
  }
 else {
    updateUIState();
  }
}","public void updateListView(){
  ArrayList<AppInfo> appLib=mInstallService.getUpdateList();
  if (null != appLib) {
    mAppLib=appLib;
    mListView.invalidate();
    if (ListView.INVALID_POSITION == mListView.getSelectedItemPosition() && mListView.getCount() > 0) {
      mListView.setSelection(0);
    }
 else {
      updateUIState();
    }
  }
}",0.8705501618122977
153206,"@Override public TaskFlow toNextColumn() throws IOException {
  TaskFlow taskFlow;
  try {
    taskFlow=to(TaskLocation.NEXT);
  }
 catch (  InternalServerErrorKanbaneryException e) {
    throw new TaskAlreadyInLastColumnException(""String_Node_Str"",e);
  }
  return taskFlow;
}","@Override public TaskFlow toNextColumn() throws IOException {
  TaskFlow taskFlow;
  taskFlow=to(TaskLocation.NEXT);
  return taskFlow;
}",0.6618357487922706
153207,"/** 
 * This will give you back the position of a repository which is stored inside the <b>target</b> directory.
 * @return The directory where the repository has been stored.
 */
public String getRepositoryDirectory(){
  return getTargetDir() + File.separatorChar + ""String_Node_Str"";
}","public String getRepositoryDirectory(String supplemental){
  return getTargetDir() + File.separatorChar + ""String_Node_Str""+ supplemental;
}",0.5011709601873536
153208,"/** 
 * This will give you back the position of an index directory which is stored inside the <b>target</b> directory.
 * @return The directory where the index is stored.
 */
public String getIndexDirectory(){
  return getTargetDir() + File.separatorChar + ""String_Node_Str"";
}","public String getIndexDirectory(String supplemental){
  return getTargetDir() + File.separatorChar + ""String_Node_Str""+ supplemental+ ""String_Node_Str"";
}",0.4733178654292343
153209,"public void scanEndRevision(Long revision,Integer changeSetSize){
}","public void scanEndRevision(Long revision,Integer changeSetSize){
  System.out.print(""String_Node_Str"");
}",0.7745664739884393
153210,"public void scanBeginRevision(Long revision,Integer changeSetSize){
  Long div=revision * 100 / numberOfRevisions;
  System.out.printf(""String_Node_Str"",div,numberOfRevisions,changeSetSize,revision);
}","public void scanBeginRevision(Long revision,Integer changeSetSize){
  Long div=revision * 100 / numberOfRevisions;
  System.out.printf(""String_Node_Str"",div,numberOfRevisions,revision,changeSetSize);
}",0.9552238805970148
153211,"/** 
 * This will do the command argument extraction and give the parameter to the scanRepository class which will do the real repository scan.
 * @param scanCommand The command line.
 */
private static void runScan(ScanCommand scanCommand){
  String url=scanCommand.getURL(commandLine);
  long fromRev=scanCommand.getFromRev(commandLine);
  long toRev=scanCommand.getToRev(commandLine);
  String indexDirectory=scanCommand.getIndexDir(commandLine);
  boolean create=scanCommand.getCreate(commandLine);
  String username=scanCommand.getUsername(commandLine);
  String password=scanCommand.getPassword(commandLine);
  Index index=new Index();
  Analyzer analyzer=new StandardAnalyzer();
  index.setAnalyzer(analyzer);
  index.setCreate(create);
  IndexWriter indexWriter=index.createIndexWriter(indexDirectory);
  ISVNAuthenticationManager authManager=SVNWCUtil.createDefaultAuthenticationManager(username,password);
  Repository repository=new Repository(url,authManager);
  CLIInterceptor interceptor=new CLIInterceptor();
  scanRepository.registerScanInterceptor(interceptor);
  CLILogEntryInterceptor logEntryInterceptor=new CLILogEntryInterceptor();
  scanRepository.registerLogEntryInterceptor(logEntryInterceptor);
  scanRepository.setRepository(repository);
  scanRepository.setStartRevision(fromRev);
  scanRepository.setEndRevision(toRev);
  LOGGER.info(""String_Node_Str"");
  scanRepository.scan(indexWriter);
  LOGGER.info(""String_Node_Str"");
  try {
    indexWriter.optimize();
    indexWriter.close();
  }
 catch (  CorruptIndexException e) {
    System.err.println(""String_Node_Str"" + e);
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
  }
}","/** 
 * This will do the command argument extraction and give the parameter to the scanRepository class which will do the real repository scan.
 * @param scanCommand The command line.
 */
private static void runScan(ScanCommand scanCommand){
  String url=scanCommand.getURL(commandLine);
  long fromRev=scanCommand.getFromRev(commandLine);
  long toRev=scanCommand.getToRev(commandLine);
  String indexDirectory=scanCommand.getIndexDir(commandLine);
  boolean create=scanCommand.getCreate(commandLine);
  String username=scanCommand.getUsername(commandLine);
  String password=scanCommand.getPassword(commandLine);
  Index index=new Index();
  Analyzer analyzer=new StandardAnalyzer();
  index.setAnalyzer(analyzer);
  index.setCreate(create);
  IndexWriter indexWriter=index.createIndexWriter(indexDirectory);
  ISVNAuthenticationManager authManager=SVNWCUtil.createDefaultAuthenticationManager(username,password);
  Repository repository=new Repository(url,authManager);
  CLIInterceptor interceptor=new CLIInterceptor();
  scanRepository.registerScanInterceptor(interceptor);
  CLILogEntryInterceptor logEntryInterceptor=new CLILogEntryInterceptor();
  scanRepository.registerLogEntryInterceptor(logEntryInterceptor);
  CLIChangeSetInterceptor changeSetInterceptor=new CLIChangeSetInterceptor();
  scanRepository.registerChangeSetInterceptor(changeSetInterceptor);
  scanRepository.setRepository(repository);
  scanRepository.setStartRevision(fromRev);
  scanRepository.setEndRevision(toRev);
  LOGGER.info(""String_Node_Str"");
  scanRepository.scan(indexWriter);
  LOGGER.info(""String_Node_Str"");
  try {
    indexWriter.optimize();
    indexWriter.close();
  }
 catch (  CorruptIndexException e) {
    System.err.println(""String_Node_Str"" + e);
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
  }
}",0.9581792318634424
153212,"private static void runSearch(SearchCommand searchCommand){
  LOGGER.info(""String_Node_Str"");
  String indexDirectory=searchCommand.getIndexDir(commandLine);
  String queryLine=searchCommand.getQuery(commandLine);
  List<String> cliFields=searchCommand.getFields(commandLine);
  System.out.println(""String_Node_Str"" + queryLine + ""String_Node_Str"");
  for (int i=0; i < cliFields.size(); i++) {
    System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ cliFields.get(i)+ ""String_Node_Str"");
  }
  List<String> cliDFields=new ArrayList<String>();
  for (  String fieldName : cliFields) {
    if (fieldName.equals(FieldNames.FILENAME)) {
      cliDFields.add(FieldNames.DFILENAME);
    }
    if (fieldName.equals(FieldNames.PATH)) {
      cliDFields.add(FieldNames.DPATH);
    }
  }
  System.out.println(""String_Node_Str"");
  SearchRepository searchRepository=new SearchRepository(indexDirectory);
  TopDocs result=searchRepository.getQueryResult(queryLine);
  if (result == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  System.out.println(""String_Node_Str"" + result.totalHits);
  try {
    for (int i=0; i < result.scoreDocs.length; i++) {
      Document hit;
      hit=searchRepository.getSearcher().doc(result.scoreDocs[i].doc);
      List<Field> fieldList=hit.getFields();
      System.out.print((i + 1) + ""String_Node_Str"");
      for (int k=0; k < fieldList.size(); k++) {
        Field field=(Field)fieldList.get(k);
        if ((cliDFields.size() > 0) && cliDFields.contains(field.name())) {
          System.out.print(field.name() + ""String_Node_Str"" + field.stringValue()+ ""String_Node_Str"");
        }
 else {
          if (FieldNames.DPATH.equals(field.name())) {
            System.out.print(""String_Node_Str"" + field.stringValue() + ""String_Node_Str"");
          }
          if (FieldNames.DFILENAME.equals(field.name())) {
            System.out.print(""String_Node_Str"" + field.stringValue() + ""String_Node_Str"");
          }
          if (FieldNames.REVISION.equals(field.name())) {
            long rev=Long.parseLong(field.stringValue());
            System.out.print(""String_Node_Str"" + rev + ""String_Node_Str"");
          }
          if (FieldNames.KIND.equals(field.name())) {
            System.out.print(""String_Node_Str"" + field.stringValue() + ""String_Node_Str"");
          }
        }
      }
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  CorruptIndexException e) {
    LOGGER.error(""String_Node_Str"" + e.getLocalizedMessage());
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + e.getLocalizedMessage());
  }
 finally {
    IndexReader reader=searchRepository.getReader();
    try {
      reader.close();
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
}","private static void runSearch(SearchCommand searchCommand){
  LOGGER.info(""String_Node_Str"");
  String indexDirectory=searchCommand.getIndexDir(commandLine);
  String queryLine=searchCommand.getQuery(commandLine);
  List<String> cliFields=searchCommand.getFields(commandLine);
  System.out.println(""String_Node_Str"" + queryLine + ""String_Node_Str"");
  for (int i=0; i < cliFields.size(); i++) {
    System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ cliFields.get(i)+ ""String_Node_Str"");
  }
  List<String> cliDFields=new ArrayList<String>();
  for (  String fieldName : cliFields) {
    if (fieldName.equals(FieldNames.FILENAME)) {
      cliDFields.add(FieldNames.DFILENAME);
    }
    if (fieldName.equals(FieldNames.PATH)) {
      cliDFields.add(FieldNames.DPATH);
    }
  }
  System.out.println(""String_Node_Str"");
  SearchRepository searchRepository=new SearchRepository(indexDirectory);
  TopDocs result=searchRepository.getQueryResult(queryLine);
  if (result == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  System.out.println(""String_Node_Str"" + result.totalHits);
  try {
    for (int i=0; i < result.scoreDocs.length; i++) {
      Document hit;
      hit=searchRepository.getSearcher().doc(result.scoreDocs[i].doc);
      List<Field> fieldList=hit.getFields();
      System.out.print((i + 1) + ""String_Node_Str"");
      for (int k=0; k < fieldList.size(); k++) {
        Field field=(Field)fieldList.get(k);
        if ((cliDFields.size() > 0) && cliDFields.contains(field.name())) {
          System.out.print(field.name() + ""String_Node_Str"" + field.stringValue()+ ""String_Node_Str"");
        }
 else {
          if (FieldNames.DPATH.equals(field.name())) {
            System.out.print(""String_Node_Str"" + field.stringValue() + ""String_Node_Str"");
          }
          if (FieldNames.DFILENAME.equals(field.name())) {
            System.out.print(""String_Node_Str"" + field.stringValue() + ""String_Node_Str"");
          }
          if (FieldNames.REVISION.equals(field.name())) {
            long rev=Long.parseLong(field.stringValue());
            System.out.print(""String_Node_Str"" + rev + ""String_Node_Str"");
          }
          if (FieldNames.KIND.equals(field.name())) {
            System.out.print(""String_Node_Str"" + field.stringValue() + ""String_Node_Str"");
          }
        }
      }
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  CorruptIndexException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    IndexReader reader=searchRepository.getReader();
    try {
      reader.close();
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.9848320693391116
153213,"public ConfigurationRepositories(String configFile){
  setConfigFile(configFile);
  try {
    iniFile=new Ini(new FileInputStream(configFile));
  }
 catch (  InvalidFileFormatException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
}","public ConfigurationRepositories(String configFile){
  setConfigFile(configFile);
  try {
    iniFile=new Ini(new FileInputStream(configFile));
  }
 catch (  InvalidFileFormatException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9868852459016394
153214,"public RepositoryJobConfiguration(String configFile,RepositoryConfiguration reposConfig) throws Exception {
  setConfigFile(configFile);
  setReposConfig(reposConfig);
  File f=new File(configFile);
  if (f.exists()) {
    setNewCreated(false);
    try {
      FileInputStream fin=new FileInputStream(f);
      iniFile=new Ini(fin);
      configData=iniFile.get(REPOSITORY_CONFIG_SECTION).as(IReposConfig.class);
    }
 catch (    InvalidFileFormatException e) {
      LOGGER.error(""String_Node_Str"" + e);
      throw e;
    }
catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + e);
      throw e;
    }
  }
 else {
    LOGGER.debug(""String_Node_Str"" + configFile);
    setNewCreated(true);
    iniFile=new Ini();
    iniFile.add(REPOSITORY_CONFIG_SECTION);
    configData=iniFile.get(REPOSITORY_CONFIG_SECTION).as(IReposConfig.class);
    configData.setFromrev(Long.toString(reposConfig.getFromRev()));
    configData.setTorev(reposConfig.getToRev());
    try {
      if (f.createNewFile()) {
        FileWriter out=new FileWriter(f);
        iniFile.store(out);
        out.close();
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + e);
    }
  }
}","public RepositoryJobConfiguration(String configFile,RepositoryConfiguration reposConfig) throws Exception {
  setConfigFile(configFile);
  setReposConfig(reposConfig);
  File f=new File(configFile);
  if (f.exists()) {
    setNewCreated(false);
    try {
      FileInputStream fin=new FileInputStream(f);
      iniFile=new Ini(fin);
      configData=iniFile.get(REPOSITORY_CONFIG_SECTION).as(IReposConfig.class);
    }
 catch (    InvalidFileFormatException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw e;
    }
catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
      throw e;
    }
  }
 else {
    LOGGER.debug(""String_Node_Str"" + configFile);
    setNewCreated(true);
    iniFile=new Ini();
    iniFile.add(REPOSITORY_CONFIG_SECTION);
    configData=iniFile.get(REPOSITORY_CONFIG_SECTION).as(IReposConfig.class);
    configData.setFromrev(Long.toString(reposConfig.getFromRev()));
    configData.setTorev(reposConfig.getToRev());
    try {
      if (f.createNewFile()) {
        FileWriter out=new FileWriter(f);
        iniFile.store(out);
        out.close();
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.9949664429530202
153215,"public void save(){
  try {
    LOGGER.debug(""String_Node_Str"");
    FileWriter out=new FileWriter(new File(getConfigFile()));
    Section sec=iniFile.get(REPOSITORY_CONFIG_SECTION);
    sec.from(configData);
    iniFile.store(out);
    out.close();
    LOGGER.debug(""String_Node_Str"" + getConfigFile() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
}","public void save(){
  try {
    LOGGER.debug(""String_Node_Str"");
    FileWriter out=new FileWriter(new File(getConfigFile()));
    Section sec=iniFile.get(REPOSITORY_CONFIG_SECTION);
    sec.from(configData);
    iniFile.store(out);
    out.close();
    LOGGER.debug(""String_Node_Str"" + getConfigFile() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9949874686716792
153216,"public IndexWriter createIndexWriter(String indexDirectory){
  LOGGER.debug(""String_Node_Str"" + indexDirectory + ""String_Node_Str"");
  setIndexDirectory(indexDirectory);
  File indexDir=new File(getIndexDirectory());
  IndexWriter writer=null;
  try {
    LOGGER.debug(""String_Node_Str"");
    if (isCreate()) {
      LOGGER.debug(""String_Node_Str"");
      writer=new IndexWriter(indexDir,getAnalyzer(),true,MaxFieldLength.UNLIMITED);
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      writer=new IndexWriter(indexDir,getAnalyzer(),MaxFieldLength.UNLIMITED);
    }
    LOGGER.debug(""String_Node_Str"");
    writer.setUseCompoundFile(isUseCompoundFile());
    writer.setMergeFactor(getMergeFactor());
    writer.setMaxBufferedDocs(getMaxBufferedDocs());
  }
 catch (  CorruptIndexException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
catch (  LockObtainFailedException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
  return writer;
}","public IndexWriter createIndexWriter(String indexDirectory){
  LOGGER.debug(""String_Node_Str"" + indexDirectory + ""String_Node_Str"");
  setIndexDirectory(indexDirectory);
  File indexDir=new File(getIndexDirectory());
  IndexWriter writer=null;
  try {
    LOGGER.debug(""String_Node_Str"");
    if (isCreate()) {
      LOGGER.debug(""String_Node_Str"");
      writer=new IndexWriter(indexDir,getAnalyzer(),true,MaxFieldLength.UNLIMITED);
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      writer=new IndexWriter(indexDir,getAnalyzer(),MaxFieldLength.UNLIMITED);
    }
    LOGGER.debug(""String_Node_Str"");
    writer.setUseCompoundFile(isUseCompoundFile());
    writer.setMergeFactor(getMergeFactor());
    writer.setMaxBufferedDocs(getMaxBufferedDocs());
  }
 catch (  CorruptIndexException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  LockObtainFailedException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return writer;
}",0.9940944881889764
153217,"/** 
 * Merge all given indexes together to a single index.
 * @param destination This will define the destination directoryof the index where all other indexes will be merged to.
 * @param indexList This is the list of indexes which aremerged into the destination index.
 */
public static void mergeIndex(String destination,List<String> indexList){
  LOGGER.debug(""String_Node_Str"" + destination);
  Index index=new Index();
  index.setCreate(false);
  IndexWriter indexWriter=index.createIndexWriter(destination);
  try {
    LOGGER.info(""String_Node_Str"");
    FSDirectory[] fsDirs=new FSDirectory[indexList.size()];
    for (int i=0; i < indexList.size(); i++) {
      fsDirs[i]=FSDirectory.getDirectory(indexList.get(i));
    }
    indexWriter.addIndexesNoOptimize(fsDirs);
    indexWriter.optimize();
    indexWriter.close();
    LOGGER.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
}","/** 
 * Merge all given indexes together to a single index.
 * @param destination This will define the destination directoryof the index where all other indexes will be merged to.
 * @param indexList This is the list of indexes which aremerged into the destination index.
 */
public static void mergeIndex(String destination,List<String> indexList){
  LOGGER.debug(""String_Node_Str"" + destination);
  Index index=new Index();
  index.setCreate(false);
  IndexWriter indexWriter=index.createIndexWriter(destination);
  try {
    LOGGER.info(""String_Node_Str"");
    FSDirectory[] fsDirs=new FSDirectory[indexList.size()];
    for (int i=0; i < indexList.size(); i++) {
      fsDirs[i]=FSDirectory.getDirectory(indexList.get(i));
    }
    indexWriter.addIndexesNoOptimize(fsDirs);
    indexWriter.optimize();
    indexWriter.close();
    LOGGER.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9978768577494692
153218,"private void subexecute(JobExecutionContext context) throws Exception {
  LOGGER.info(""String_Node_Str"" + context.getJobDetail().getName() + ""String_Node_Str""+ context.getJobDetail().getFullName()+ ""String_Node_Str"");
  JobDataMap jobDataMap=context.getJobDetail().getJobDataMap();
  Repository repos=(Repository)jobDataMap.get(JobDataNames.REPOSITORY);
  RepositoryConfiguration reposConfig=(RepositoryConfiguration)jobDataMap.get(JobDataNames.REPOSITORYCONFIGURATION);
  String baseDir=(String)jobDataMap.get(JobDataNames.BASEDIR);
  LOGGER.info(""String_Node_Str"" + baseDir + ""String_Node_Str""+ repos.getUrl()+ ""String_Node_Str""+ reposConfig.getRepositoryName());
  jobConfig=new RepositoryJobConfiguration(baseDir + File.separator + reposConfig.getRepositoryName()+ ""String_Node_Str"",reposConfig);
  String jobIndexName=baseDir + File.separator + ""String_Node_Str""+ reposConfig.getRepositoryName();
  String resultIndexName=baseDir + File.separator + reposConfig.getResultIndex();
  LOGGER.info(""String_Node_Str"" + repos.getRepository().getLatestRevision() + ""String_Node_Str""+ jobConfig.getConfigData().getFromrev());
  long fromRev=Long.parseLong(jobConfig.getConfigData().getFromrev());
  if (repos.getRepository().getLatestRevision() > fromRev) {
    long startRev=0;
    if (jobConfig.isNewCreated()) {
      LOGGER.info(""String_Node_Str"");
      startRev=jobConfig.getReposConfig().getFromRev();
    }
 else {
      LOGGER.info(""String_Node_Str"");
      startRev+=jobConfig.getReposConfig().getFromRev();
    }
    long endRev=repos.getRepository().getLatestRevision();
    scanRepos.setRepository(repos);
    scanRepos.setStartRevision(startRev);
    scanRepos.setEndRevision(endRev);
    scanRepos.setName(reposConfig.getRepositoryName());
    Index index=new Index();
    index.setCreate(true);
    IndexWriter indexWriter=index.createIndexWriter(jobIndexName);
    scanRepos.scan(indexWriter);
    try {
      indexWriter.optimize();
      indexWriter.close();
    }
 catch (    CorruptIndexException e) {
      LOGGER.error(""String_Node_Str"" + e);
    }
catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + e);
    }
    IndexHelper.mergeIndex(resultIndexName,jobIndexName);
    jobConfig.getConfigData().setFromrev(Long.toString(endRev));
    LOGGER.info(""String_Node_Str"" + jobConfig.getConfigData().getFromrev() + ""String_Node_Str""+ jobConfig.getConfigData().getTorev());
    jobConfig.save();
  }
 else {
    LOGGER.info(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"");
}","private void subexecute(JobExecutionContext context) throws Exception {
  LOGGER.info(""String_Node_Str"" + context.getJobDetail().getName() + ""String_Node_Str""+ context.getJobDetail().getFullName()+ ""String_Node_Str"");
  JobDataMap jobDataMap=context.getJobDetail().getJobDataMap();
  Repository repos=(Repository)jobDataMap.get(JobDataNames.REPOSITORY);
  RepositoryConfiguration reposConfig=(RepositoryConfiguration)jobDataMap.get(JobDataNames.REPOSITORYCONFIGURATION);
  String baseDir=(String)jobDataMap.get(JobDataNames.BASEDIR);
  LOGGER.info(""String_Node_Str"" + baseDir + ""String_Node_Str""+ repos.getUrl()+ ""String_Node_Str""+ reposConfig.getRepositoryName());
  jobConfig=new RepositoryJobConfiguration(baseDir + File.separator + reposConfig.getRepositoryName()+ ""String_Node_Str"",reposConfig);
  String jobIndexName=baseDir + File.separator + ""String_Node_Str""+ reposConfig.getRepositoryName();
  String resultIndexName=baseDir + File.separator + reposConfig.getResultIndex();
  LOGGER.info(""String_Node_Str"" + repos.getRepository().getLatestRevision() + ""String_Node_Str""+ jobConfig.getConfigData().getFromrev());
  long fromRev=Long.parseLong(jobConfig.getConfigData().getFromrev());
  if (repos.getRepository().getLatestRevision() > fromRev) {
    long startRev=0;
    if (jobConfig.isNewCreated()) {
      LOGGER.info(""String_Node_Str"");
      startRev=jobConfig.getReposConfig().getFromRev();
    }
 else {
      LOGGER.info(""String_Node_Str"");
      startRev+=jobConfig.getReposConfig().getFromRev();
    }
    long endRev=repos.getRepository().getLatestRevision();
    scanRepos.setRepository(repos);
    scanRepos.setStartRevision(startRev);
    scanRepos.setEndRevision(endRev);
    scanRepos.setName(reposConfig.getRepositoryName());
    Index index=new Index();
    index.setCreate(true);
    IndexWriter indexWriter=index.createIndexWriter(jobIndexName);
    scanRepos.scan(indexWriter);
    try {
      indexWriter.optimize();
      indexWriter.close();
    }
 catch (    CorruptIndexException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      LOGGER.error(""String_Node_Str"",e);
    }
    IndexHelper.mergeIndex(resultIndexName,jobIndexName);
    jobConfig.getConfigData().setFromrev(Long.toString(endRev));
    LOGGER.info(""String_Node_Str"" + jobConfig.getConfigData().getFromrev() + ""String_Node_Str""+ jobConfig.getConfigData().getTorev());
    jobConfig.save();
  }
 else {
    LOGGER.info(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"");
}",0.998406374501992
153219,"public void execute(JobExecutionContext context) throws JobExecutionException {
  try {
    subexecute(context);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
}","public void execute(JobExecutionContext context) throws JobExecutionException {
  try {
    subexecute(context);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9893048128342246
153220,"/** 
 * This will initialize the repository access, based on the given  <code>repositoryURL</code>.
 */
private void initRepository(){
  try {
    LOGGER.info(""String_Node_Str"");
    repository=SVNRepositoryFactory.create(SVNURL.parseURIEncoded(getUrl()));
  }
 catch (  SVNException svne) {
    LOGGER.error(""String_Node_Str"" + getUrl() + ""String_Node_Str""+ svne);
  }
}","/** 
 * This will initialize the repository access, based on the given  <code>repositoryURL</code>.
 */
private void initRepository(){
  try {
    LOGGER.info(""String_Node_Str"");
    repository=SVNRepositoryFactory.create(SVNURL.parseURIEncoded(getUrl()));
  }
 catch (  SVNException svne) {
    LOGGER.error(""String_Node_Str"" + getUrl() + ""String_Node_Str"",svne);
  }
}",0.9959514170040484
153221,"/** 
 * This will try to do a connection to the repository. This is used to check the the user name/password combination.
 * @return If true the connection could be established success fullfalse otherwise.
 */
public boolean validConnection(){
  LOGGER.debug(""String_Node_Str"");
  try {
    repository.testConnection();
    setUuid(repository.getRepositoryUUID(false));
  }
 catch (  SVNException e) {
    LOGGER.error(""String_Node_Str"" + e.getMessage());
    return false;
  }
  LOGGER.info(""String_Node_Str"");
  return true;
}","/** 
 * This will try to do a connection to the repository. This is used to check the the user name/password combination.
 * @return If true the connection could be established success fullfalse otherwise.
 */
public boolean validConnection(){
  LOGGER.debug(""String_Node_Str"");
  try {
    repository.testConnection();
    setUuid(repository.getRepositoryUUID(false));
  }
 catch (  SVNException e) {
    LOGGER.error(""String_Node_Str"",e);
    return false;
  }
  LOGGER.info(""String_Node_Str"");
  return true;
}",0.9817483189241114
153222,"public void execute(Repository repository,SVNDirEntry dirEntry,String path,long revision){
  FileName fn=new FileName(path);
  if (fn.getExt().length() > 0) {
    try {
      String className=FileExtensionProperty.getInstance().getProperty(fn.getExt());
      try {
        Class handlerClass=Class.forName(className);
        AScanDocument dh=(AScanDocument)handlerClass.newInstance();
        dh.setProperties(getFileProperties());
        dh.setDocument(doc);
        dh.indexDocument(repository,dirEntry,path,revision);
      }
 catch (      ClassNotFoundException e) {
        LOGGER.error(""String_Node_Str"" + className + ""String_Node_Str""+ e);
      }
catch (      InstantiationException e) {
        LOGGER.error(""String_Node_Str"" + className + ""String_Node_Str""+ e);
      }
catch (      IllegalAccessException e) {
        LOGGER.error(""String_Node_Str"" + className + ""String_Node_Str""+ e);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + fn.getExt() + ""String_Node_Str"");
      indexDefaultDoc(repository,dirEntry,path,revision);
    }
  }
 else {
    LOGGER.warn(""String_Node_Str"" + path + ""String_Node_Str"");
    indexDefaultDoc(repository,dirEntry,path,revision);
  }
}","public void execute(Repository repository,SVNDirEntry dirEntry,String path,long revision){
  FileName fn=new FileName(path);
  if (fn.getExt().length() > 0) {
    try {
      String className=FileExtensionProperty.getInstance().getProperty(fn.getExt());
      try {
        Class handlerClass=Class.forName(className);
        AScanDocument dh=(AScanDocument)handlerClass.newInstance();
        dh.setProperties(getFileProperties());
        dh.setDocument(doc);
        dh.indexDocument(repository,dirEntry,path,revision);
      }
 catch (      ClassNotFoundException e) {
        LOGGER.error(""String_Node_Str"" + className,e);
      }
catch (      InstantiationException e) {
        LOGGER.error(""String_Node_Str"" + className,e);
      }
catch (      IllegalAccessException e) {
        LOGGER.error(""String_Node_Str"" + className,e);
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + fn.getExt() + ""String_Node_Str"",e);
      indexDefaultDoc(repository,dirEntry,path,revision);
    }
  }
 else {
    LOGGER.warn(""String_Node_Str"" + path + ""String_Node_Str"");
    indexDefaultDoc(repository,dirEntry,path,revision);
  }
}",0.9700042247570764
153223,"public static SVNDirEntry getInformationAboutEntry(Repository repository,long revision,String path){
  SVNDirEntry dirEntry=null;
  try {
    LOGGER.debug(""String_Node_Str"" + path + ""String_Node_Str""+ revision);
    dirEntry=repository.getRepository().info(path,revision);
  }
 catch (  SVNException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
  return dirEntry;
}","public static SVNDirEntry getInformationAboutEntry(Repository repository,long revision,String path){
  SVNDirEntry dirEntry=null;
  try {
    LOGGER.debug(""String_Node_Str"" + path + ""String_Node_Str""+ revision);
    dirEntry=repository.getRepository().info(path,revision);
  }
 catch (  SVNException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
  return dirEntry;
}",0.994579945799458
153224,"/** 
 * This method will do the real scanning of the whole repository. It will extract all log entries as first step and go on with scanning every change set.
 * @param writer The index where the result of the scanningwill be written to.
 */
@SuppressWarnings(""String_Node_Str"") public void scan(IndexWriter writer){
  LOGGER.debug(""String_Node_Str"" + endRevision);
  try {
    LogEntryStart();
    repository.getRepository().log(new String[]{""String_Node_Str""},startRevision,endRevision,true,true,new ISVNLogEntryHandler(){
      public void handleLogEntry(      SVNLogEntry logEntry){
        logEntries.add(logEntry);
        LogEntry(logEntry);
      }
    }
);
    LogEntryStop();
  }
 catch (  SVNException svne) {
    LOGGER.error(""String_Node_Str"" + repository.getUrl() + ""String_Node_Str""+ svne);
    return;
  }
  LOGGER.debug(""String_Node_Str"" + logEntries.size() + ""String_Node_Str"");
  scanStart(logEntries.size());
  for (Iterator entries=logEntries.iterator(); entries.hasNext(); ) {
    SVNLogEntry logEntry=(SVNLogEntry)entries.next();
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"");
      LOGGER.debug(""String_Node_Str"" + logEntry.getRevision());
      LOGGER.debug(""String_Node_Str"" + logEntry.getAuthor());
      LOGGER.debug(""String_Node_Str"" + logEntry.getDate());
      LOGGER.debug(""String_Node_Str"" + logEntry.getMessage());
    }
    if (logEntry.getChangedPaths().size() > 0) {
      LOGGER.debug(""String_Node_Str"");
      try {
        scanBeginRevision(logEntry.getRevision(),logEntry.getChangedPaths().size());
        workOnChangeSet(writer,repository,logEntry);
        scanEndRevision(logEntry.getRevision(),logEntry.getChangedPaths().size());
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"" + e);
      }
    }
 else {
      LOGGER.debug(""String_Node_Str"");
    }
    if (isAbbort()) {
      LOGGER.warn(""String_Node_Str"");
      break;
    }
  }
  scanStop();
  repository.close();
}","/** 
 * This method will do the real scanning of the whole repository. It will extract all log entries as first step and go on with scanning every change set.
 * @param writer The index where the result of the scanningwill be written to.
 */
@SuppressWarnings(""String_Node_Str"") public void scan(IndexWriter writer){
  LOGGER.debug(""String_Node_Str"" + endRevision);
  try {
    LogEntryStart();
    repository.getRepository().log(new String[]{""String_Node_Str""},startRevision,endRevision,true,true,new ISVNLogEntryHandler(){
      public void handleLogEntry(      SVNLogEntry logEntry){
        logEntries.add(logEntry);
        LogEntry(logEntry);
      }
    }
);
    LogEntryStop();
  }
 catch (  SVNException svne) {
    LOGGER.error(""String_Node_Str"" + repository.getUrl() + ""String_Node_Str"",svne);
    return;
  }
  LOGGER.debug(""String_Node_Str"" + logEntries.size() + ""String_Node_Str"");
  scanStart(logEntries.size());
  for (Iterator entries=logEntries.iterator(); entries.hasNext(); ) {
    SVNLogEntry logEntry=(SVNLogEntry)entries.next();
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"");
      LOGGER.debug(""String_Node_Str"" + logEntry.getRevision());
      LOGGER.debug(""String_Node_Str"" + logEntry.getAuthor());
      LOGGER.debug(""String_Node_Str"" + logEntry.getDate());
      LOGGER.debug(""String_Node_Str"" + logEntry.getMessage());
    }
    if (logEntry.getChangedPaths().size() > 0) {
      LOGGER.debug(""String_Node_Str"");
      try {
        scanBeginRevision(logEntry.getRevision(),logEntry.getChangedPaths().size());
        workOnChangeSet(writer,repository,logEntry);
        scanEndRevision(logEntry.getRevision(),logEntry.getChangedPaths().size());
      }
 catch (      Exception e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
 else {
      LOGGER.debug(""String_Node_Str"");
    }
    if (isAbbort()) {
      LOGGER.warn(""String_Node_Str"");
      break;
    }
  }
  scanStop();
  repository.close();
}",0.9982238010657194
153225,"/** 
 * Here we have a single ChangeSet which will be analyzed separate.
 * @param indexWriter 
 * @param repository
 * @param logEntry
 */
private void workOnChangeSet(IndexWriter indexWriter,Repository repository,SVNLogEntry logEntry){
  Set changedPathsSet=logEntry.getChangedPaths().keySet();
  TagBranchRecognition tbr=new TagBranchRecognition(repository);
  TagBranch res=null;
  if (changedPathsSet.size() == 1) {
    res=tbr.checkForTagOrBranch(logEntry,changedPathsSet);
  }
 else {
    res=tbr.checkForMavenTag(logEntry,changedPathsSet);
    if (res == null) {
      res=tbr.checkForSubverisonTag(logEntry,changedPathsSet);
    }
  }
  int count=0;
  LOGGER.debug(""String_Node_Str"" + changedPathsSet.size());
  for (Iterator changedPaths=changedPathsSet.iterator(); changedPaths.hasNext(); ) {
    count++;
    Document doc=new Document();
    if (res != null) {
switch (res.getType()) {
case BRANCH:
        addUnTokenizedField(doc,FieldNames.BRANCH,res.getName());
      break;
case TAG:
    addUnTokenizedField(doc,FieldNames.TAG,res.getName());
switch (res.getTagType()) {
case NONE:
    break;
case TAG:
  break;
case MAVENTAG:
addUnTokenizedField(doc,FieldNames.MAVENTAG,res.getName());
break;
case SUBVERSIONTAG:
addUnTokenizedField(doc,FieldNames.SUBVERSIONTAG,res.getName());
break;
}
break;
default :
break;
}
}
SVNLogEntryPath entryPath=(SVNLogEntryPath)logEntry.getChangedPaths().get(changedPaths.next());
LOGGER.debug(""String_Node_Str"" + entryPath.getType() + ""String_Node_Str""+ entryPath.getPath()+ ((entryPath.getCopyPath() != null) ? ""String_Node_Str"" + entryPath.getCopyPath() + ""String_Node_Str""+ entryPath.getCopyRevision()+ ""String_Node_Str"" : ""String_Node_Str""));
SVNDirEntry dirEntry=tbr.getEntryCache().getEntry(logEntry.getRevision(),entryPath.getPath());
try {
indexFile(doc,indexWriter,dirEntry,repository,logEntry,entryPath);
}
 catch (IOException e) {
LOGGER.error(""String_Node_Str"" + e);
}
catch (SVNException e) {
LOGGER.error(""String_Node_Str"" + e);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"" + e);
}
}
}","/** 
 * Here we have a single ChangeSet which will be analyzed separate.
 * @param indexWriter 
 * @param repository
 * @param logEntry
 */
private void workOnChangeSet(IndexWriter indexWriter,Repository repository,SVNLogEntry logEntry){
  Set changedPathsSet=logEntry.getChangedPaths().keySet();
  TagBranchRecognition tbr=new TagBranchRecognition(repository);
  TagBranch res=null;
  if (changedPathsSet.size() == 1) {
    res=tbr.checkForTagOrBranch(logEntry,changedPathsSet);
  }
 else {
    res=tbr.checkForMavenTag(logEntry,changedPathsSet);
    if (res == null) {
      res=tbr.checkForSubverisonTag(logEntry,changedPathsSet);
    }
  }
  int count=0;
  LOGGER.debug(""String_Node_Str"" + changedPathsSet.size());
  startIndexChangeSet();
  for (Iterator changedPaths=changedPathsSet.iterator(); changedPaths.hasNext(); ) {
    count++;
    Document doc=new Document();
    if (res != null) {
switch (res.getType()) {
case BRANCH:
        addUnTokenizedField(doc,FieldNames.BRANCH,res.getName());
      break;
case TAG:
    addUnTokenizedField(doc,FieldNames.TAG,res.getName());
switch (res.getTagType()) {
case NONE:
    break;
case TAG:
  break;
case MAVENTAG:
addUnTokenizedField(doc,FieldNames.MAVENTAG,res.getName());
break;
case SUBVERSIONTAG:
addUnTokenizedField(doc,FieldNames.SUBVERSIONTAG,res.getName());
break;
}
break;
default :
break;
}
}
SVNLogEntryPath entryPath=(SVNLogEntryPath)logEntry.getChangedPaths().get(changedPaths.next());
LOGGER.debug(""String_Node_Str"" + entryPath.getType() + ""String_Node_Str""+ entryPath.getPath()+ ((entryPath.getCopyPath() != null) ? ""String_Node_Str"" + entryPath.getCopyPath() + ""String_Node_Str""+ entryPath.getCopyRevision()+ ""String_Node_Str"" : ""String_Node_Str""));
SVNDirEntry dirEntry=tbr.getEntryCache().getEntry(logEntry.getRevision(),entryPath.getPath());
try {
beginIndexChangeSetItem(dirEntry);
indexFile(doc,indexWriter,dirEntry,repository,logEntry,entryPath);
endIndexChangeSetItem(dirEntry);
}
 catch (IOException e) {
LOGGER.error(""String_Node_Str"",e);
}
catch (SVNException e) {
LOGGER.error(""String_Node_Str"",e);
}
catch (Exception e) {
LOGGER.error(""String_Node_Str"",e);
}
}
stopIndexChangeSet();
}",0.9699265924698082
153226,"public ScanRepositoryBase(){
  setInterceptors(new ArrayList<ScanInterceptor>());
}","public ScanRepositoryBase(){
  super();
  setInterceptors(new ArrayList<ScanInterceptor>());
}",0.9378531073446328
153227,"public ScanRepositoryBaseLogEntry(){
  setLogEntryInterceptors(new ArrayList<LogEntryInterceptor>());
}","public ScanRepositoryBaseLogEntry(){
  super();
  setLogEntryInterceptors(new ArrayList<LogEntryInterceptor>());
}",0.9493087557603688
153228,"@Override public void indexDocument(Repository repository,SVNDirEntry dirEntry,String path,long revision){
  LOGGER.debug(""String_Node_Str"");
  try {
    if (isBinary()) {
      LOGGER.debug(""String_Node_Str"");
      addTokenizedField(FieldNames.CONTENTS,""String_Node_Str"");
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      if (dirEntry.getSize() > 10 * 1024 * 1024) {
        LOGGER.warn(""String_Node_Str"");
      }
 else {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        repository.getRepository().getFile(path,revision,null,baos);
        addTokenizedField(FieldNames.CONTENTS,baos.toString());
      }
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
}","@Override public void indexDocument(Repository repository,SVNDirEntry dirEntry,String path,long revision){
  LOGGER.debug(""String_Node_Str"");
  try {
    if (isBinary()) {
      LOGGER.debug(""String_Node_Str"");
      addTokenizedField(FieldNames.CONTENTS,""String_Node_Str"");
    }
 else {
      LOGGER.debug(""String_Node_Str"");
      if (dirEntry.getSize() > 10 * 1024 * 1024) {
        LOGGER.warn(""String_Node_Str"");
      }
 else {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        repository.getRepository().getFile(path,revision,null,baos);
        addTokenizedField(FieldNames.CONTENTS,baos.toString());
      }
    }
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
  }
}",0.9972222222222222
153229,"private void indexFile(Document doc,IndexWriter indexWriter,SVNDirEntry dirEntry,Repository repository,SVNLogEntry logEntry,SVNLogEntryPath entryPath) throws SVNException, IOException {
  SVNProperties fileProperties=new SVNProperties();
  SVNNodeKind nodeKind=repository.getRepository().checkPath(entryPath.getPath(),logEntry.getRevision());
  addUnTokenizedField(doc,FieldNames.REVISION,NumberUtils.pad(logEntry.getRevision()));
  boolean isDir=nodeKind == SVNNodeKind.DIR;
  boolean isFile=nodeKind == SVNNodeKind.FILE;
  FileName fileName=new FileName(entryPath.getPath(),isDir);
  LOGGER.info(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
  addUnTokenizedField(doc,FieldNames.PATH,fileName.getPath().toLowerCase());
  addUnTokenizedField(doc,FieldNames.DPATH,fileName.getPath());
  if (isDir) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
    addUnTokenizedField(doc,FieldNames.NODE,""String_Node_Str"");
  }
 else   if (isFile) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
    addUnTokenizedField(doc,FieldNames.NODE,""String_Node_Str"");
  }
 else {
    addUnTokenizedField(doc,FieldNames.NODE,""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
  }
  if (entryPath.getCopyPath() != null) {
    addUnTokenizedField(doc,FieldNames.FROM,entryPath.getCopyPath());
    addUnTokenizedField(doc,FieldNames.FROMREV,entryPath.getCopyRevision());
  }
  addUnTokenizedField(doc,FieldNames.FILENAME,fileName.getBaseName().toLowerCase());
  addUnTokenizedField(doc,FieldNames.DFILENAME,fileName.getBaseName());
  addUnTokenizedField(doc,FieldNames.AUTHOR,logEntry.getAuthor() == null ? ""String_Node_Str"" : logEntry.getAuthor());
  addTokenizedField(doc,FieldNames.MESSAGE,logEntry.getMessage() == null ? ""String_Node_Str"" : logEntry.getMessage());
  addUnTokenizedField(doc,FieldNames.DATE,logEntry.getDate());
  addUnTokenizedField(doc,FieldNames.KIND,entryPath.getType());
  addUnTokenizedField(doc,FieldNames.REPOSITORYUUID,repository.getRepository().getRepositoryUUID(false));
  addUnTokenizedField(doc,FieldNames.REPOSITORY,getName());
  if (nodeKind == SVNNodeKind.NONE) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
  }
 else   if (nodeKind == SVNNodeKind.DIR) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
    Collection<SVNDirEntry> dirEntries=null;
    repository.getRepository().getDir(entryPath.getPath(),logEntry.getRevision(),fileProperties,dirEntries);
    indexProperties(fileProperties,doc);
  }
 else   if (nodeKind == SVNNodeKind.FILE) {
    repository.getRepository().getFile(entryPath.getPath(),logEntry.getRevision(),fileProperties,null);
    indexProperties(fileProperties,doc);
    FileExtensionHandler feh=new FileExtensionHandler();
    feh.setFileProperties(fileProperties);
    feh.setDoc(doc);
    feh.execute(repository,dirEntry,entryPath.getPath(),logEntry.getRevision());
  }
  indexWriter.addDocument(doc);
  LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
}","private void indexFile(Document doc,IndexWriter indexWriter,SVNDirEntry dirEntry,Repository repository,SVNLogEntry logEntry,SVNLogEntryPath entryPath) throws SVNException, IOException {
  SVNProperties fileProperties=new SVNProperties();
  SVNNodeKind nodeKind=repository.getRepository().checkPath(entryPath.getPath(),logEntry.getRevision());
  addUnTokenizedField(doc,FieldNames.REVISION,NumberUtils.pad(logEntry.getRevision()));
  boolean isDir=nodeKind == SVNNodeKind.DIR;
  boolean isFile=nodeKind == SVNNodeKind.FILE;
  FileName fileName=new FileName(entryPath.getPath(),isDir);
  LOGGER.info(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
  addUnTokenizedField(doc,FieldNames.PATH,fileName.getPath().toLowerCase());
  addUnTokenizedField(doc,FieldNames.DPATH,fileName.getPath());
  if (isDir) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
    addUnTokenizedField(doc,FieldNames.NODE,""String_Node_Str"");
  }
 else   if (isFile) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
    addUnTokenizedField(doc,FieldNames.NODE,""String_Node_Str"");
  }
 else {
    addUnTokenizedField(doc,FieldNames.NODE,""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
  }
  if (entryPath.getCopyPath() != null) {
    addUnTokenizedField(doc,FieldNames.FROM,entryPath.getCopyPath());
    addUnTokenizedField(doc,FieldNames.FROMREV,entryPath.getCopyRevision());
  }
  addUnTokenizedField(doc,FieldNames.FILENAME,fileName.getBaseName().toLowerCase());
  addUnTokenizedField(doc,FieldNames.DFILENAME,fileName.getBaseName());
  addUnTokenizedField(doc,FieldNames.AUTHOR,logEntry.getAuthor() == null ? ""String_Node_Str"" : logEntry.getAuthor());
  addTokenizedField(doc,FieldNames.MESSAGE,logEntry.getMessage() == null ? ""String_Node_Str"" : logEntry.getMessage());
  addUnTokenizedField(doc,FieldNames.DATE,logEntry.getDate());
  addUnTokenizedField(doc,FieldNames.KIND,String.valueOf(entryPath.getType()).toLowerCase());
  addUnTokenizedField(doc,FieldNames.REPOSITORYUUID,repository.getRepository().getRepositoryUUID(false));
  addUnTokenizedField(doc,FieldNames.REPOSITORY,getName());
  if (nodeKind == SVNNodeKind.NONE) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
  }
 else   if (nodeKind == SVNNodeKind.DIR) {
    LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
    Collection<SVNDirEntry> dirEntries=null;
    repository.getRepository().getDir(entryPath.getPath(),logEntry.getRevision(),fileProperties,dirEntries);
    indexProperties(fileProperties,doc);
  }
 else   if (nodeKind == SVNNodeKind.FILE) {
    repository.getRepository().getFile(entryPath.getPath(),logEntry.getRevision(),fileProperties,null);
    indexProperties(fileProperties,doc);
    FileExtensionHandler feh=new FileExtensionHandler();
    feh.setFileProperties(fileProperties);
    feh.setDoc(doc);
    feh.execute(repository,dirEntry,entryPath.getPath(),logEntry.getRevision());
  }
  indexWriter.addDocument(doc);
  LOGGER.debug(""String_Node_Str"" + entryPath.getPath() + ""String_Node_Str"");
}",0.9952046035805626
153230,"public TopDocs getQueryResult(String queryLine){
  IndexReader reader=null;
  TopDocs result=null;
  try {
    reader=IndexReader.open(getIndexDirectory());
    setReader(reader);
    BooleanQuery.setMaxClauseCount(Integer.MAX_VALUE);
    Searcher searcher=new IndexSearcher(reader);
    setSearcher(searcher);
    SortField[] sf={new SortField(FieldNames.REVISION),new SortField(FieldNames.DFILENAME)};
    Sort sort=new Sort(sf);
    QueryParser parser=new CustomQueryParser(FieldNames.CONTENTS,getAnalyzer());
    parser.setAllowLeadingWildcard(true);
    parser.setLowercaseExpandedTerms(true);
    Query query=parser.parse(queryLine);
    TopDocs tmp=searcher.search(query,null,20,sort);
    result=searcher.search(query,null,tmp.totalHits,sort);
  }
 catch (  CorruptIndexException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
  return result;
}","public TopDocs getQueryResult(String queryLine){
  IndexReader reader=null;
  TopDocs result=null;
  try {
    reader=IndexReader.open(getIndexDirectory());
    setReader(reader);
    BooleanQuery.setMaxClauseCount(Integer.MAX_VALUE);
    Searcher searcher=new IndexSearcher(reader);
    setSearcher(searcher);
    SortField[] sf={new SortField(FieldNames.REVISION),new SortField(FieldNames.DFILENAME)};
    Sort sort=new Sort(sf);
    QueryParser parser=new CustomQueryParser(FieldNames.CONTENTS,getAnalyzer());
    parser.setAllowLeadingWildcard(true);
    parser.setLowercaseExpandedTerms(true);
    Query query=parser.parse(queryLine);
    LOGGER.info(""String_Node_Str"" + query.toString());
    TopDocs tmp=searcher.search(query,null,20,sort);
    result=searcher.search(query,null,tmp.totalHits,sort);
  }
 catch (  CorruptIndexException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e);
  }
  return result;
}",0.9731314118221788
153231,"public NPCEntity spawnNPC(String name,Location l){
  BWorld world=new BWorld(l.getWorld());
  NPCEntity npcEntity=new NPCEntity(server.getMCServer(),world.getWorldServer(),name,new ItemInWorldManager(world.getWorldServer()));
  npcEntity.setPositionRotation(l.getBlockX(),l.getBlockY(),l.getBlockZ(),l.getYaw(),l.getPitch());
  world.getWorldServer().getChunkAt(l.getWorld().getChunkAt(l).getX(),l.getWorld().getChunkAt(l).getZ()).a(npcEntity);
  world.getWorldServer().addEntity(npcEntity);
  npcs.put(name,npcEntity);
  return npcEntity;
}","public NPCEntity spawnNPC(String name,Location l){
  if (name.length() > 16) {
    String tmp=name.substring(0,16);
    server.getLogger().log(Level.WARNING,""String_Node_Str"");
    server.getLogger().log(Level.WARNING,name + ""String_Node_Str"" + tmp);
    name=tmp;
  }
  BWorld world=new BWorld(l.getWorld());
  NPCEntity npcEntity=new NPCEntity(server.getMCServer(),world.getWorldServer(),name,new ItemInWorldManager(world.getWorldServer()));
  npcEntity.setPositionRotation(l.getBlockX(),l.getBlockY(),l.getBlockZ(),l.getYaw(),l.getPitch());
  world.getWorldServer().getChunkAt(l.getWorld().getChunkAt(l).getX(),l.getWorld().getChunkAt(l).getZ()).a(npcEntity);
  world.getWorldServer().addEntity(npcEntity);
  npcs.put(name,npcEntity);
  return npcEntity;
}",0.8323076923076923
153232,"public void despawn(String npcName){
  NPCEntity npc=npcs.get(npcName);
  if (npc != null) {
    npcs.remove(npcName);
    try {
      npc.world.removeEntity(npcNpc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void despawn(String npcName){
  if (npcName.length() > 16) {
    npcName=npcName.substring(0,16);
  }
  NPCEntity npc=npcs.get(npcName);
  if (npc != null) {
    npcs.remove(npcName);
    try {
      npc.world.removeEntity(npc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.8623853211009175
153233,"private IndexInput wrapInput(String name) throws IOException {
  return new CompressedIndexInput(name,_directory,_compression,_blockSize);
}","private IndexInput wrapInput(String name) throws IOException {
  return new CompressedIndexInput(name,_directory,_compression);
}",0.9591078066914498
153234,"public CompressedIndexOutput(String name,Directory directory,CompressionCodec compression,int blockSize) throws IOException {
  _compression=compression;
  _directory=directory;
  _name=name;
  _output=directory.createOutput(name);
  _tmpOutput=directory.createOutput(name + Z_TMP);
  _buffer=new byte[blockSize];
  _compressedBuffer=new byte[blockSize * 2];
}","public CompressedIndexOutput(String name,Directory directory,CompressionCodec compression,int blockSize) throws IOException {
  _compression=compression;
  _directory=directory;
  _name=name;
  _output=directory.createOutput(name);
  _tmpOutput=directory.createOutput(name + Z_TMP);
  _buffer=new byte[blockSize];
  _compressedBuffer=new byte[blockSize * 2];
  System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ blockSize+ ""String_Node_Str"");
}",0.8801955990220048
153235,"private void readMetaData() throws IOException {
  _indexInput.seek(_realLength - 20);
  long metaDataLength=_indexInput.readLong();
  int blockCount=_indexInput.readInt();
  _origLength=_indexInput.readLong();
  _blockLengths=new int[blockCount];
  _blockPositions=new long[blockCount];
  _indexInput.seek(_realLength - 20 - metaDataLength);
  for (int i=0; i < blockCount; i++) {
    _blockPositions[i]=_indexInput.readVLong();
    _blockLengths[i]=_indexInput.readVInt();
  }
}","private void readMetaData() throws IOException {
  _indexInput.seek(_realLength - _SIZES_META_DATA);
  long metaDataLength=_indexInput.readLong();
  int blockCount=_indexInput.readInt();
  _blockSize=_indexInput.readInt();
  _origLength=_indexInput.readLong();
  _blockLengths=new int[blockCount];
  _blockPositions=new long[blockCount];
  _indexInput.seek(_realLength - _SIZES_META_DATA - metaDataLength);
  for (int i=0; i < blockCount; i++) {
    _blockPositions[i]=_indexInput.readVLong();
    _blockLengths[i]=_indexInput.readVInt();
  }
}",0.9296875
153236,"public CompressedIndexInput(String name,Directory directory,CompressionCodec compression,int blockSize) throws IOException {
  _compression=compression;
  _indexInput=directory.openInput(name);
  _realLength=_indexInput.length();
  _blockBuffer=new byte[blockSize];
  _decompressionBuffer=new byte[blockSize * 2];
  _blockSize=blockSize;
  readMetaData();
}","public CompressedIndexInput(String name,Directory directory,CompressionCodec compression) throws IOException {
  _compression=compression;
  _indexInput=directory.openInput(name);
  _realLength=_indexInput.length();
  readMetaData();
  _blockBuffer=new byte[_blockSize];
  _decompressionBuffer=new byte[_blockSize * 2];
  System.out.println(""String_Node_Str"" + _origLength + ""String_Node_Str""+ _realLength);
}",0.8015665796344648
153237,"public CompressedFieldDataDirectory(Directory dir,CompressionCodec compression,int blockSize){
  _directory=dir;
  if (compression == null) {
    _compression=DEFAULT_COMPRESSION;
  }
 else {
    _compression=compression;
  }
  _blockSize=blockSize;
}","public CompressedFieldDataDirectory(Directory dir,CompressionCodec compression,int blockSize){
  _directory=dir;
  if (compression == null) {
    _compression=DEFAULT_COMPRESSION;
  }
 else {
    _compression=compression;
  }
  _writingBlockSize=blockSize;
}",0.9469548133595284
153238,"private IndexOutput wrapOutput(String name) throws IOException {
  return new CompressedIndexOutput(name,_directory,_compression,_blockSize);
}","private IndexOutput wrapOutput(String name) throws IOException {
  return new CompressedIndexOutput(name,_directory,_compression,_writingBlockSize);
}",0.969283276450512
153239,"public void readBytes(byte[] b,int offset,int len) throws IOException {
synchronized (_indexInput) {
    while (len > 0) {
      int blockId=getBlockId();
      if (blockId != _currentBlockId) {
        fetchBlock(blockId);
      }
      int blockPosition=getBlockPosition();
      int length=Math.min(_blockBufferLength - blockPosition,len);
      System.arraycopy(_blockBuffer,blockPosition,b,offset,length);
      _pos+=length;
      len-=length;
    }
  }
}","public void readBytes(byte[] b,int offset,int len) throws IOException {
synchronized (_indexInput) {
    while (len > 0) {
      int blockId=getBlockId();
      if (blockId != _currentBlockId) {
        fetchBlock(blockId);
      }
      int blockPosition=getBlockPosition();
      int length=Math.min(_blockBufferLength - blockPosition,len);
      System.arraycopy(_blockBuffer,blockPosition,b,offset,length);
      _pos+=length;
      len-=length;
      offset+=length;
    }
  }
}",0.9766949152542372
153240,"public void actionPerformed(ActionEvent action){
  if (action.getSource().equals(connect)) {
    try {
      pf.setString(""String_Node_Str"",serverName.getText());
      pf.setInt(""String_Node_Str"",Integer.parseInt(portNum.getText()));
      pf.setInt(""String_Node_Str"",Integer.parseInt(localServerPortnum.getText()));
      pf.save();
    }
 catch (    NumberFormatException nfe) {
    }
    if (serverMainThread == null || !serverMainThread.isAlive()) {
      safeSetButton(""String_Node_Str"");
      final String distantServer=serverName.getText() + ""String_Node_Str"" + portNum.getText();
      final String localServer=localServerPortnum.getText();
      serverMainThread=new Thread(new Runnable(){
        public void run(){
          String[] args={localServer,distantServer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          Main.main(args,false);
        }
      }
);
      serverMainThread.start();
    }
 else {
      safeSetButton(""String_Node_Str"");
      serverMainThread.interrupt();
    }
  }
}","public void actionPerformed(ActionEvent action){
  if (action.getSource().equals(connect)) {
    int desired=48;
    try {
      pf.setString(""String_Node_Str"",serverName.getText());
      pf.setInt(""String_Node_Str"",Integer.parseInt(portNum.getText()));
      pf.setInt(""String_Node_Str"",Integer.parseInt(localServerPortnum.getText()));
      try {
        desired=Integer.parseInt(desiredSize.getText());
      }
 catch (      NumberFormatException nfe) {
        desired=48;
        desiredSize.setText(""String_Node_Str"");
      }
      pf.setInt(""String_Node_Str"",desired);
      desiredSize.setEditable(false);
      pf.save();
    }
 catch (    NumberFormatException nfe) {
    }
    if (serverMainThread == null || !serverMainThread.isAlive()) {
      safeSetButton(""String_Node_Str"");
      final String distantServer=serverName.getText() + ""String_Node_Str"" + portNum.getText();
      final String localServer=localServerPortnum.getText();
      final String cacheSize=Integer.toString(desired * 1024 * 1024);
      serverMainThread=new Thread(new Runnable(){
        public void run(){
          String[] args={localServer,distantServer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",cacheSize};
          Main.main(args,false);
        }
      }
);
      serverMainThread.start();
    }
 else {
      safeSetButton(""String_Node_Str"");
      serverMainThread.interrupt();
      desiredSize.setEditable(true);
    }
  }
}",0.8171174808235769
153241,"public CraftProxyGUI(){
  pf=new MyPropertiesFile(""String_Node_Str"");
  pf.load();
  String defaultHostname=pf.getString(""String_Node_Str"",""String_Node_Str"");
  int defaultPort=pf.getInt(""String_Node_Str"",20000);
  int listenPort=pf.getInt(""String_Node_Str"",25565);
  setTitle(""String_Node_Str"");
  setSize(375,250);
  setLocation(40,150);
  topPanel.setLayout(new BorderLayout());
  topPanel.setBorder(new TitledBorder(""String_Node_Str""));
  topPanel.setBackground(Color.WHITE);
  secondPanel.setLayout(new BorderLayout());
  secondPanel.setBorder(new TitledBorder(""String_Node_Str""));
  secondPanel.setBackground(Color.WHITE);
  serverName=new JTextField(defaultHostname,20);
  TitledBorder border=new TitledBorder(""String_Node_Str"");
  serverName.setBorder(border);
  serverName.addActionListener(this);
  portNum=new JTextField(Integer.toString(defaultPort),6);
  border=new TitledBorder(""String_Node_Str"");
  portNum.setBorder(border);
  portNum.addActionListener(this);
  localServerName=new JLabel(""String_Node_Str"");
  localServerName.setBackground(Color.GRAY);
  border=new TitledBorder(""String_Node_Str"");
  localServerName.setBorder(border);
  localServerPortnum=new JTextField(Integer.toString(listenPort),6);
  border=new TitledBorder(""String_Node_Str"");
  localServerPortnum.setBorder(border);
  localServerPortnum.addActionListener(this);
  topPanel.add(serverName,BorderLayout.CENTER);
  topPanel.add(portNum,BorderLayout.LINE_END);
  secondPanel.setLayout(new BorderLayout());
  secondPanel.add(localServerName,BorderLayout.CENTER);
  secondPanel.add(localServerPortnum,BorderLayout.LINE_END);
  combinedTop.setLayout(new BorderLayout());
  combinedTop.add(topPanel,BorderLayout.CENTER);
  combinedTop.add(secondPanel,BorderLayout.SOUTH);
  info=new JLabel();
  border=new TitledBorder(""String_Node_Str"");
  info.setBorder(border);
  connect=new JButton(buttonText);
  connect.addActionListener(this);
  setLayout(new BorderLayout());
  add(combinedTop,BorderLayout.PAGE_START);
  add(info,BorderLayout.CENTER);
  add(connect,BorderLayout.PAGE_END);
  this.setResizable(false);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  this.addWindowListener(this);
}","public CraftProxyGUI(){
  pf=new MyPropertiesFile(""String_Node_Str"");
  pf.load();
  String defaultHostname=pf.getString(""String_Node_Str"",""String_Node_Str"");
  int defaultPort=pf.getInt(""String_Node_Str"",20000);
  int listenPort=pf.getInt(""String_Node_Str"",25565);
  int desired=pf.getInt(""String_Node_Str"",48);
  setTitle(""String_Node_Str"");
  setSize(450,325);
  setLocation(40,150);
  topPanel.setLayout(new BorderLayout());
  topPanel.setBorder(new TitledBorder(""String_Node_Str""));
  topPanel.setBackground(Color.WHITE);
  secondPanel.setLayout(new BorderLayout());
  secondPanel.setBorder(new TitledBorder(""String_Node_Str""));
  secondPanel.setBackground(Color.WHITE);
  serverName=new JTextField(defaultHostname,20);
  TitledBorder border=new TitledBorder(""String_Node_Str"");
  serverName.setBorder(border);
  serverName.addActionListener(this);
  portNum=new JTextField(Integer.toString(defaultPort),6);
  border=new TitledBorder(""String_Node_Str"");
  portNum.setBorder(border);
  portNum.addActionListener(this);
  localServerName=new JLabel(""String_Node_Str"");
  localServerName.setBackground(Color.GRAY);
  border=new TitledBorder(""String_Node_Str"");
  localServerName.setBorder(border);
  localServerPortnum=new JTextField(Integer.toString(listenPort),6);
  border=new TitledBorder(""String_Node_Str"");
  localServerPortnum.setBorder(border);
  localServerPortnum.addActionListener(this);
  topPanel.add(serverName,BorderLayout.CENTER);
  topPanel.add(portNum,BorderLayout.LINE_END);
  secondPanel.setLayout(new BorderLayout());
  secondPanel.add(localServerName,BorderLayout.CENTER);
  secondPanel.add(localServerPortnum,BorderLayout.LINE_END);
  combinedTop.setLayout(new BorderLayout());
  combinedTop.add(topPanel,BorderLayout.CENTER);
  combinedTop.add(secondPanel,BorderLayout.SOUTH);
  currentSize=new JTextField(""String_Node_Str"");
  currentSize.setBorder(new TitledBorder(""String_Node_Str""));
  currentSize.setEditable(false);
  desiredSize=new JTextField(Integer.toString(desired));
  desiredSize.setBorder(new TitledBorder(""String_Node_Str""));
  connect=new JButton(buttonText);
  connect.addActionListener(this);
  filePanel=new JPanel();
  filePanel.setLayout(new BorderLayout());
  JPanel fileLinePanel=new JPanel();
  fileLinePanel.setBorder(new TitledBorder(""String_Node_Str""));
  fileLinePanel.setLayout(new GridLayout(1,2));
  fileLinePanel.add(currentSize);
  fileLinePanel.add(desiredSize);
  filePanel.add(fileLinePanel,BorderLayout.CENTER);
  filePanel.add(connect,BorderLayout.PAGE_END);
  info=new JLabel();
  border=new TitledBorder(""String_Node_Str"");
  info.setBorder(border);
  setLayout(new BorderLayout());
  add(combinedTop,BorderLayout.PAGE_START);
  add(info,BorderLayout.CENTER);
  add(filePanel,BorderLayout.PAGE_END);
  this.setResizable(false);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  this.addWindowListener(this);
}",0.7751139290667723
153242,"public void run(){
  String[] args={localServer,distantServer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Main.main(args,false);
}","public void run(){
  String[] args={localServer,distantServer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",cacheSize};
  Main.main(args,false);
}",0.9113924050632912
153243,"public static void pruneCache(){
synchronized (dirSyncObject) {
    int limit=Globals.getCacheLimit();
    while (!fileList.isEmpty() && limit > 0 && directorySize > limit) {
      File oldest=fileList.removeFirst();
      removeFile(oldest);
    }
  }
}","public static void pruneCache(){
synchronized (dirSyncObject) {
    int limit=Globals.getCacheLimit();
    while (!fileList.isEmpty() && limit > 0 && directorySize > limit) {
      File oldest=fileList.removeFirst();
      removeFile(oldest);
    }
    if (Main.craftGUI != null) {
      Main.craftGUI.safeSetFileSize(Integer.toString(directorySize / 1024 / 1024));
    }
  }
}",0.8050713153724247
153244,"public static Socket openSocket(String hostname,int port,PassthroughConnection ptc){
  Socket socket=null;
  try {
    if (hostname.trim().startsWith(""String_Node_Str"") && Globals.varyLocalhost()) {
      String fakeLocalIP=LocalhostIPFactory.getNextIP();
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"" + hostname + ""String_Node_Str""+ port+ ""String_Node_Str""+ fakeLocalIP);
      }
      socket=new Socket(hostname,port,InetAddress.getByName(fakeLocalIP),0);
    }
 else {
      socket=new Socket(hostname,port);
    }
  }
 catch (  UnknownHostException e) {
    ptc.printLogMessage(""String_Node_Str"" + hostname);
    return null;
  }
catch (  IOException e) {
    if (hostname.trim().startsWith(""String_Node_Str"")) {
      List<String> hostnames=getLocalIPs();
      for (      String h : hostnames) {
        try {
          socket=new Socket(h,port);
        }
 catch (        IOException ioe) {
          continue;
        }
        ptc.printLogMessage(""String_Node_Str"" + h);
        break;
      }
    }
    if (socket == null) {
      ptc.printLogMessage(""String_Node_Str"" + hostname + ""String_Node_Str""+ port);
      return null;
    }
  }
  try {
    socket.setSoTimeout(1000);
  }
 catch (  SocketException e) {
    ptc.printLogMessage(""String_Node_Str"");
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException ioe) {
        return null;
      }
    }
    return null;
  }
  return socket;
}","public static Socket openSocket(String hostname,int port,PassthroughConnection ptc){
  Socket socket=null;
  try {
    if (hostname.trim().startsWith(""String_Node_Str"") && Globals.varyLocalhost()) {
      String fakeLocalIP=LocalhostIPFactory.getNextIP();
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"" + hostname + ""String_Node_Str""+ port+ ""String_Node_Str""+ fakeLocalIP);
      }
      socket=new Socket(hostname,port,InetAddress.getByName(fakeLocalIP),0);
    }
 else {
      socket=new Socket(hostname,port);
    }
  }
 catch (  UnknownHostException e) {
    ptc.printLogMessage(""String_Node_Str"" + hostname);
    return null;
  }
catch (  IOException e) {
    if (hostname.trim().startsWith(""String_Node_Str"")) {
      List<String> hostnames=getLocalIPs();
      for (      String h : hostnames) {
        try {
          socket=new Socket(h,port);
        }
 catch (        IOException ioe) {
          continue;
        }
        ptc.printLogMessage(""String_Node_Str"" + h);
        ptc.printLogMessage(""String_Node_Str"" + h);
        ptc.printLogMessage(""String_Node_Str"" + h);
        ptc.printLogMessage(""String_Node_Str"" + h);
        ptc.printLogMessage(""String_Node_Str"" + h);
        ptc.printLogMessage(""String_Node_Str"" + h);
        ptc.printLogMessage(""String_Node_Str"");
        break;
      }
    }
    if (socket == null) {
      ptc.printLogMessage(""String_Node_Str"" + hostname + ""String_Node_Str""+ port);
      return null;
    }
  }
  try {
    socket.setSoTimeout(1000);
  }
 catch (  SocketException e) {
    ptc.printLogMessage(""String_Node_Str"");
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException ioe) {
        return null;
      }
    }
    return null;
  }
  return socket;
}",0.9054054054054054
153245,"public static void main(String[] args){
  if (args.length == 0 && craftGUI == null) {
    craftGUI=new CraftProxyGUI();
    craftGUI.setVisible(true);
    return;
  }
  Logging.log(""String_Node_Str"" + VersionNumbering.version);
  String listenHostname=null;
  String defaultHostname=null;
  String usageString=""String_Node_Str"";
  if (args.length < 2) {
    Logging.log(""String_Node_Str"" + usageString);
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (consoleInput) {
      System.exit(0);
    }
    return;
  }
 else {
    try {
      listenHostname=args[0];
      defaultHostname=args[1];
      for (int pos=2; pos < args.length; pos++) {
        if (args[pos].equals(""String_Node_Str""))         Globals.setVerbose(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setInfo(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setDebug(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setBridgingConnection(true);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setClientVersion(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setPassword(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setQuiet(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setFlood(false);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCacheLimit(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          ReconnectCache.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          BanList.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setlocalCache(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCompressInfo(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setDimension(Byte.parseByte(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setMonitor(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setSeed(Long.parseLong(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Logging.setFilename(args[pos + 1]);
          pos++;
        }
 else {
          System.out.println(""String_Node_Str"" + args[pos]);
          System.exit(0);
        }
      }
    }
 catch (    NumberFormatException nfe) {
      Logging.log(""String_Node_Str"");
      Logging.log(""String_Node_Str"" + usageString);
      System.exit(0);
      return;
    }
  }
  if (!Globals.isAuth()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
 else {
    Logging.log(""String_Node_Str"");
  }
  if (!ReconnectCache.isSet()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
  cacheDir.mkdirs();
  Logging.log(""String_Node_Str"");
  server=new ProxyListener(listenHostname,defaultHostname);
  server.start();
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  if (consoleInput) {
    try {
      while (!in.readLine().equals(""String_Node_Str"")) {
      }
    }
 catch (    IOException e) {
    }
    try {
      in.close();
    }
 catch (    IOException e) {
    }
    ReconnectCache.save();
    server.interrupt();
  }
 else {
    Logging.log(""String_Node_Str"");
    boolean enabled=true;
    while (enabled) {
      try {
        server.join();
      }
 catch (      InterruptedException ie) {
        server.interrupt();
        enabled=false;
      }
      ReconnectCache.save();
    }
  }
  Logging.log(""String_Node_Str"");
  server.interrupt();
  try {
    server.join();
  }
 catch (  InterruptedException e) {
    Logging.log(""String_Node_Str"");
  }
  ReconnectCache.save();
  Logging.flush();
  if (Main.craftGUI != null) {
    craftGUI.safeSetStatus(""String_Node_Str"");
    craftGUI.safeSetButton(""String_Node_Str"");
  }
}","public static void main(String[] args){
  if (args.length == 0 && craftGUI == null) {
    craftGUI=new CraftProxyGUI();
    craftGUI.setVisible(true);
    return;
  }
  Logging.log(""String_Node_Str"" + VersionNumbering.version);
  String listenHostname=null;
  String defaultHostname=null;
  String usageString=""String_Node_Str"";
  if (args.length < 2) {
    Logging.log(""String_Node_Str"" + usageString);
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (consoleInput) {
      System.exit(0);
    }
    return;
  }
 else {
    try {
      listenHostname=args[0];
      defaultHostname=args[1];
      for (int pos=2; pos < args.length; pos++) {
        if (args[pos].equals(""String_Node_Str""))         Globals.setVerbose(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setInfo(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setDebug(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setBridgingConnection(true);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setClientVersion(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setPassword(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setQuiet(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setFlood(false);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCacheLimit(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          ReconnectCache.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          BanList.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setlocalCache(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCompressInfo(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setDimension(Byte.parseByte(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setMonitor(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setSeed(Long.parseLong(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Logging.setFilename(args[pos + 1]);
          pos++;
        }
 else {
          System.out.println(""String_Node_Str"" + args[pos]);
          System.exit(0);
        }
      }
    }
 catch (    NumberFormatException nfe) {
      Logging.log(""String_Node_Str"");
      Logging.log(""String_Node_Str"" + usageString);
      System.exit(0);
      return;
    }
  }
  if (!Globals.isAuth()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
 else {
    Logging.log(""String_Node_Str"");
  }
  if (!ReconnectCache.isSet()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
  cacheDir.mkdirs();
  Logging.log(""String_Node_Str"");
  server=new ProxyListener(listenHostname,defaultHostname);
  server.start();
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  if (consoleInput) {
    try {
      while (!in.readLine().equals(""String_Node_Str"")) {
      }
    }
 catch (    IOException e) {
    }
    try {
      in.close();
    }
 catch (    IOException e) {
    }
    ReconnectCache.save();
    server.interrupt();
  }
 else {
    Logging.log(""String_Node_Str"");
    boolean enabled=true;
    while (enabled && server.isAlive()) {
      try {
        server.join();
      }
 catch (      InterruptedException ie) {
        server.interrupt();
        enabled=false;
      }
      ReconnectCache.save();
    }
  }
  Logging.log(""String_Node_Str"");
  server.interrupt();
  try {
    server.join();
  }
 catch (  InterruptedException e) {
    Logging.log(""String_Node_Str"");
  }
  ReconnectCache.save();
  Logging.flush();
  if (Main.craftGUI != null) {
    craftGUI.safeSetStatus(""String_Node_Str"");
    craftGUI.safeSetButton(""String_Node_Str"");
  }
}",0.998172514619883
153246,"public void run(){
  boolean connected=true;
  clientInfo.setForward(false);
  clientInfo.setHostname(null);
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=null;
  ;
  if (Globals.localCache() || Globals.bridgingConnection()) {
    Packet02Handshake initialHandshake=new Packet02Handshake(clientSocket.in,this,this);
    if (initialHandshake.packetId == null || initialHandshake.read(clientSocket.in,this,this,true,null) == null) {
      kickMessage=""String_Node_Str"";
    }
 else {
      kickMessage=null;
    }
    clientInfo.setUsername(initialHandshake.getUsername());
  }
 else {
    kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth(),clientInfo);
  }
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kickAndClose(clientSocket,this,this,kickMessage);
    connected=false;
    return;
  }
  if (clientInfo.getUsername() == null || BanList.banned(clientInfo.getUsername())) {
    if (clientInfo.getUsername() != null) {
      printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
    connected=false;
    return;
  }
  if (connected && clientInfo.getHostname() == null) {
    clientInfo.setHostname(ReconnectCache.get(clientInfo.getUsername()));
    if (clientInfo.getHostname() == null || clientInfo.getHostname().equals(""String_Node_Str"")) {
      clientInfo.setHostname(defaultHostname);
    }
  }
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      clientInfo.setHostname(redirectLocal);
    }
    printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    String nextHostname=RedirectManager.getNextHostname(listenHostname,clientInfo.getHostname(),clientInfo.getForward());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,clientInfo.getHostname(),clientInfo.getForward());
    if (nextHostname == null || nextPortnum == null) {
      printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"" + clientInfo.getHostname());
      LocalSocket.closeSocket(clientSocket.socket,this);
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
      return;
    }
    Socket serverBasicSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    Boolean proxyLogin=RedirectManager.isNextProxy(listenHostname,clientInfo.getHostname(),clientInfo.getForward());
    if (proxyLogin == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
      return;
    }
    if (!Globals.localCache() && !Globals.bridgingConnection()) {
      kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    }
 else {
      kickMessage=Packet01Login.bridgingLogin(clientSocket.in,clientSocket.out,serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    }
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
    }
    if (connected) {
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        if (serverLoginPacket.packetId == 0x01) {
          clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        }
 else         if (serverLoginPacket.packetId == (byte)0xFF) {
          PacketFFKick.kickAndClose(clientSocket,this,this,((UnitString)serverLoginPacket.fields[0]).getValue());
          return;
        }
 else {
          PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
          return;
        }
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!clientInfo.getForward()) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          if (Globals.getSeed() != null) {
            clientLoginPacket.setMapSeed(Globals.getSeed());
          }
 else {
            clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          }
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (!Globals.isQuiet()) {
            if (clientInfo.getForward()) {
              printLogMessage(""String_Node_Str"");
            }
 else {
              printLogMessage(""String_Node_Str"");
            }
          }
          if (Main.craftGUI != null) {
            Main.craftGUI.safeSetStatus(""String_Node_Str"" + clientInfo.getUsername() + ""String_Node_Str""+ clientInfo.getIP()+ ""String_Node_Str"");
          }
          ReconnectCache.store(clientInfo.getUsername(),clientInfo.getHostname());
          if (clientInfo.getForward()) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
synchronized (hashThreadSyncObject) {
                  if (hashThreads != null) {
                    for (                    HashThread h : hashThreads) {
                      h.interrupt();
                    }
                  }
                }
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
synchronized (hashThreadSyncObject) {
      hashThreads=null;
    }
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
  if (Globals.localCache()) {
    HashCache.pruneCache();
  }
}","public void run(){
  boolean connected=true;
  clientInfo.setForward(false);
  clientInfo.setHostname(null);
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=null;
  ;
  if (Globals.localCache() || Globals.bridgingConnection()) {
    Packet02Handshake initialHandshake=new Packet02Handshake(clientSocket.in,this,this);
    if (initialHandshake.packetId == null || initialHandshake.read(clientSocket.in,this,this,true,null) == null) {
      kickMessage=""String_Node_Str"";
    }
 else {
      kickMessage=null;
    }
    clientInfo.setUsername(initialHandshake.getUsername());
  }
 else {
    kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth(),clientInfo);
  }
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kickAndClose(clientSocket,this,this,kickMessage);
    connected=false;
    return;
  }
  if (clientInfo.getUsername() == null || BanList.banned(clientInfo.getUsername())) {
    if (clientInfo.getUsername() != null) {
      printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
    connected=false;
    return;
  }
  if (connected && clientInfo.getHostname() == null) {
    clientInfo.setHostname(ReconnectCache.get(clientInfo.getUsername()));
    if (clientInfo.getHostname() == null || clientInfo.getHostname().equals(""String_Node_Str"")) {
      clientInfo.setHostname(defaultHostname);
    }
  }
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      clientInfo.setHostname(redirectLocal);
    }
    printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    String nextHostname=RedirectManager.getNextHostname(listenHostname,clientInfo.getHostname(),clientInfo.getForward());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,clientInfo.getHostname(),clientInfo.getForward());
    if (nextHostname == null || nextPortnum == null) {
      printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"" + clientInfo.getHostname());
      LocalSocket.closeSocket(clientSocket.socket,this);
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
      return;
    }
    Socket serverBasicSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    Boolean proxyLogin=RedirectManager.isNextProxy(listenHostname,clientInfo.getHostname(),clientInfo.getForward());
    if (proxyLogin == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
      return;
    }
    if (!Globals.localCache() && !Globals.bridgingConnection()) {
      kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    }
 else {
      kickMessage=Packet01Login.bridgingLogin(clientSocket.in,clientSocket.out,serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    }
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
      if (firstConnection) {
        ReconnectCache.remove(clientInfo.getUsername());
      }
    }
    if (connected) {
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        if (serverLoginPacket.packetId == 0x01) {
          clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        }
 else         if (serverLoginPacket.packetId == (byte)0xFF) {
          PacketFFKick.kickAndClose(clientSocket,this,this,((UnitString)serverLoginPacket.fields[0]).getValue());
          return;
        }
 else {
          PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
          return;
        }
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!clientInfo.getForward()) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          if (Globals.getSeed() != null) {
            clientLoginPacket.setMapSeed(Globals.getSeed());
          }
 else {
            clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          }
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (!Globals.isQuiet()) {
            if (clientInfo.getForward()) {
              printLogMessage(""String_Node_Str"");
            }
 else {
              printLogMessage(""String_Node_Str"");
            }
          }
          if (Main.craftGUI != null) {
            Main.craftGUI.safeSetStatus(""String_Node_Str"" + clientInfo.getUsername() + ""String_Node_Str""+ clientInfo.getIP()+ ""String_Node_Str"");
          }
          ReconnectCache.store(clientInfo.getUsername(),clientInfo.getHostname());
          if (clientInfo.getForward()) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
synchronized (hashThreadSyncObject) {
                  if (hashThreads != null) {
                    for (                    HashThread h : hashThreads) {
                      h.interrupt();
                    }
                  }
                }
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
synchronized (hashThreadSyncObject) {
      hashThreads=null;
    }
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
  if (Globals.localCache()) {
    HashCache.pruneCache();
  }
  for (  KillableThread hashThread : hashThreads) {
    if (hashThread != null) {
      hashThread.interrupt();
    }
  }
  for (  KillableThread hashThread : hashThreads) {
    if (hashThread != null) {
      try {
        hashThread.join();
      }
 catch (      InterruptedException e) {
      }
    }
  }
}",0.9840483196530896
153247,"@Override public void run(){
  ServerSocket listener=null;
  try {
    listener=new ServerSocket(port);
    listener.setSoTimeout(1000);
  }
 catch (  BindException be) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (Main.craftGUI != null) {
      Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
    }
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    kill();
    interruptConnections();
    return;
  }
catch (  IOException ioe) {
    Logging.log(""String_Node_Str"");
    ioe.printStackTrace();
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    return;
  }
  Logging.log(""String_Node_Str"" + port);
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
  }
  while (!killed()) {
    if (this.isInterrupted()) {
      System.out.println(""String_Node_Str"");
      kill();
    }
    Socket socket=null;
    try {
      socket=listener.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (socket != null) {
        Logging.log(""String_Node_Str"");
      }
      continue;
    }
catch (    IOException e) {
      Logging.log(""String_Node_Str"");
      e.printStackTrace();
      continue;
    }
    if (socket == null) {
      continue;
    }
    try {
      socket.setSoTimeout(1000);
    }
 catch (    SocketException e) {
      Logging.log(""String_Node_Str"");
      if (socket != null) {
        try {
          socket.close();
        }
 catch (        IOException e1) {
          Logging.log(""String_Node_Str"");
        }
        continue;
      }
    }
    String address=socket.getInetAddress().getHostAddress().toString();
    int port=socket.getPort();
    Logging.log(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    long currentTime=System.currentTimeMillis();
    Long lastConnect=lastLogin.get(address);
    boolean floodProtection=!address.equals(""String_Node_Str"") && Globals.isFlood() && lastConnect != null && lastConnect + 5000 > currentTime;
    lastLogin.put(address,currentTime);
    if (floodProtection) {
      Logging.log(""String_Node_Str"");
      try {
        DataOutputStream outputStream=new DataOutputStream(socket.getOutputStream());
        PacketFFKick.kick(outputStream,null,null,""String_Node_Str"");
        outputStream.flush();
        socket.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
 else {
      try {
        PassthroughConnection ptc=new PassthroughConnection(socket,defaultHostname,listenHostname);
        ptc.start();
        if (Main.craftGUI != null) {
          Main.craftGUI.safeSetStatus(""String_Node_Str"" + address + ""String_Node_Str""+ port);
        }
        addPassthroughConnection(ptc);
      }
 catch (      Exception e) {
        kill();
        e.printStackTrace();
      }
    }
  }
  System.out.println(""String_Node_Str"" + listener);
  if (listener != null) {
    try {
      listener.close();
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
    }
  }
  interruptConnections();
}","@Override public void run(){
  ServerSocket listener=null;
  try {
    listener=new ServerSocket(port);
    listener.setSoTimeout(1000);
  }
 catch (  BindException be) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (Main.craftGUI != null) {
      Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
    }
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    kill();
    interruptConnections();
    return;
  }
catch (  IOException ioe) {
    Logging.log(""String_Node_Str"");
    ioe.printStackTrace();
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    return;
  }
  Logging.log(""String_Node_Str"" + port);
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
  }
  while (!killed()) {
    if (this.isInterrupted()) {
      System.out.println(""String_Node_Str"");
      kill();
    }
    Socket socket=null;
    try {
      socket=listener.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (socket != null) {
        Logging.log(""String_Node_Str"");
      }
      continue;
    }
catch (    IOException e) {
      Logging.log(""String_Node_Str"");
      e.printStackTrace();
      continue;
    }
    if (socket == null) {
      continue;
    }
    try {
      socket.setSoTimeout(1000);
    }
 catch (    SocketException e) {
      Logging.log(""String_Node_Str"");
      if (socket != null) {
        try {
          socket.close();
        }
 catch (        IOException e1) {
          Logging.log(""String_Node_Str"");
        }
        continue;
      }
    }
    String address=socket.getInetAddress().getHostAddress().toString();
    int port=socket.getPort();
    Logging.log(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    long currentTime=System.currentTimeMillis();
    Long lastConnect=lastLogin.get(address);
    boolean floodProtection=!address.equals(""String_Node_Str"") && Globals.isFlood() && lastConnect != null && lastConnect + 5000 > currentTime;
    lastLogin.put(address,currentTime);
    if (floodProtection) {
      Logging.log(""String_Node_Str"");
      try {
        DataOutputStream outputStream=new DataOutputStream(socket.getOutputStream());
        PacketFFKick.kick(outputStream,null,null,""String_Node_Str"");
        outputStream.flush();
        socket.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
 else {
      try {
        PassthroughConnection ptc=new PassthroughConnection(socket,defaultHostname,listenHostname);
        ptc.start();
        if (Main.craftGUI != null) {
          Main.craftGUI.safeSetStatus(""String_Node_Str"" + address + ""String_Node_Str""+ port);
        }
        addPassthroughConnection(ptc);
      }
 catch (      Exception e) {
        kill();
        e.printStackTrace();
      }
    }
  }
  if (listener != null) {
    try {
      listener.close();
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
    }
  }
  interruptConnections();
}",0.9923776018762828
153248,"public HashCache(PassthroughConnection ptc){
  ptc.hashQueue=new ConcurrentLinkedQueue<Long>();
  if (!Main.cacheDir.isDirectory()) {
    return;
  }
  File[] files=Main.cacheDir.listFiles();
  Arrays.sort(files,fileCompare);
  if (files.length > 0) {
    fileId=getIntFromName(files[files.length - 1]) + 1;
  }
  for (  File file : files) {
    readSingleFile(file,false,ptc);
  }
  ptc.hashesReceivedThisConnection=new ConcurrentHashMap<Long,Boolean>();
}","public HashCache(PassthroughConnection ptc){
  System.out.println(""String_Node_Str"");
  ptc.hashQueue=new ConcurrentLinkedQueue<Long>();
  if (!Main.cacheDir.isDirectory()) {
    return;
  }
  File[] files=Main.cacheDir.listFiles();
  Arrays.sort(files,fileCompare);
  if (files.length > 0) {
    fileId=getIntFromName(files[files.length - 1]) + 1;
  }
  for (  File file : files) {
    readSingleFile(file,false,ptc);
  }
  ptc.hashesReceivedThisConnection=new ConcurrentHashMap<Long,Boolean>();
}",0.9570680628272252
153249,"public static void main(String[] args){
  if (args.length == 0 && craftGUI == null) {
    craftGUI=new CraftProxyGUI();
    craftGUI.setVisible(true);
    return;
  }
  Logging.log(""String_Node_Str"" + VersionNumbering.version);
  String listenHostname=null;
  String defaultHostname=null;
  String usageString=""String_Node_Str"";
  if (args.length < 2) {
    Logging.log(""String_Node_Str"" + usageString);
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (consoleInput) {
      System.exit(0);
    }
    return;
  }
 else {
    try {
      listenHostname=args[0];
      defaultHostname=args[1];
      for (int pos=2; pos < args.length; pos++) {
        if (args[pos].equals(""String_Node_Str""))         Globals.setVerbose(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setInfo(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setDebug(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setBridgingConnection(true);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setClientVersion(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setPassword(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setQuiet(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setFlood(false);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCacheLimit(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          ReconnectCache.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          BanList.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setlocalCache(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCompressInfo(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setDimension(Byte.parseByte(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setMonitor(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setSeed(Long.parseLong(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Logging.setFilename(args[pos + 1]);
          pos++;
        }
 else {
          System.out.println(""String_Node_Str"" + args[pos]);
          System.exit(0);
        }
      }
    }
 catch (    NumberFormatException nfe) {
      Logging.log(""String_Node_Str"");
      Logging.log(""String_Node_Str"" + usageString);
      System.exit(0);
      return;
    }
  }
  if (!Globals.isAuth()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
 else {
    Logging.log(""String_Node_Str"");
  }
  if (!ReconnectCache.isSet()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
  cacheDir.mkdirs();
  Logging.log(""String_Node_Str"");
  ProxyListener server=new ProxyListener(listenHostname,defaultHostname);
  server.start();
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  if (consoleInput) {
    try {
      while (!in.readLine().equals(""String_Node_Str"")) {
      }
    }
 catch (    IOException e) {
    }
    try {
      in.close();
    }
 catch (    IOException e) {
    }
    ReconnectCache.save();
    server.interrupt();
  }
 else {
    Logging.log(""String_Node_Str"");
    boolean enabled=true;
    while (enabled) {
      try {
synchronized (sleeper) {
          while (serverEnabled) {
            sleeper.wait();
          }
        }
      }
 catch (      InterruptedException ie) {
        ReconnectCache.save();
        server.interrupt();
        enabled=false;
      }
    }
  }
  Logging.log(""String_Node_Str"");
  try {
    server.join();
  }
 catch (  InterruptedException e) {
    Logging.log(""String_Node_Str"");
  }
  ReconnectCache.save();
  Logging.flush();
  if (Main.craftGUI != null) {
    craftGUI.safeSetStatus(""String_Node_Str"");
    craftGUI.safeSetButton(""String_Node_Str"");
  }
}","public static void main(String[] args){
  if (args.length == 0 && craftGUI == null) {
    craftGUI=new CraftProxyGUI();
    craftGUI.setVisible(true);
    return;
  }
  Logging.log(""String_Node_Str"" + VersionNumbering.version);
  String listenHostname=null;
  String defaultHostname=null;
  String usageString=""String_Node_Str"";
  if (args.length < 2) {
    Logging.log(""String_Node_Str"" + usageString);
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (consoleInput) {
      System.exit(0);
    }
    return;
  }
 else {
    try {
      listenHostname=args[0];
      defaultHostname=args[1];
      for (int pos=2; pos < args.length; pos++) {
        if (args[pos].equals(""String_Node_Str""))         Globals.setVerbose(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setInfo(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setAuth(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(false);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setVaryLocalhost(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setDebug(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setBridgingConnection(true);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setClientVersion(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setPassword(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setQuiet(true);
 else         if (args[pos].equals(""String_Node_Str""))         Globals.setFlood(false);
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCacheLimit(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          ReconnectCache.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          BanList.init(args[pos + 1]);
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setlocalCache(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setCompressInfo(true);
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setDimension(Byte.parseByte(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setMonitor(Integer.parseInt(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Globals.setSeed(Long.parseLong(args[pos + 1]));
          pos++;
        }
 else         if (args[pos].equals(""String_Node_Str"")) {
          Logging.setFilename(args[pos + 1]);
          pos++;
        }
 else {
          System.out.println(""String_Node_Str"" + args[pos]);
          System.exit(0);
        }
      }
    }
 catch (    NumberFormatException nfe) {
      Logging.log(""String_Node_Str"");
      Logging.log(""String_Node_Str"" + usageString);
      System.exit(0);
      return;
    }
  }
  if (!Globals.isAuth()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
 else {
    Logging.log(""String_Node_Str"");
  }
  if (!ReconnectCache.isSet()) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
  }
  cacheDir.mkdirs();
  Logging.log(""String_Node_Str"");
  server=new ProxyListener(listenHostname,defaultHostname);
  server.start();
  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
  if (consoleInput) {
    try {
      while (!in.readLine().equals(""String_Node_Str"")) {
      }
    }
 catch (    IOException e) {
    }
    try {
      in.close();
    }
 catch (    IOException e) {
    }
    ReconnectCache.save();
    server.interrupt();
  }
 else {
    Logging.log(""String_Node_Str"");
    boolean enabled=true;
    while (enabled) {
      try {
        server.join();
      }
 catch (      InterruptedException ie) {
        server.interrupt();
        enabled=false;
      }
      ReconnectCache.save();
    }
  }
  Logging.log(""String_Node_Str"");
  server.interrupt();
  try {
    server.join();
  }
 catch (  InterruptedException e) {
    Logging.log(""String_Node_Str"");
  }
  ReconnectCache.save();
  Logging.flush();
  if (Main.craftGUI != null) {
    craftGUI.safeSetStatus(""String_Node_Str"");
    craftGUI.safeSetButton(""String_Node_Str"");
  }
}",0.9721919302071974
153250,"public static void killServer(){
  Logging.log(""String_Node_Str"");
synchronized (sleeper) {
    serverEnabled=false;
    sleeper.notifyAll();
  }
}","public static void killServer(){
  Logging.log(""String_Node_Str"");
  if (server != null) {
    server.interrupt();
  }
  try {
    server.join();
  }
 catch (  InterruptedException e) {
    Logging.log(""String_Node_Str"");
  }
}",0.3796791443850267
153251,"@Override public void run(){
  ServerSocket listener=null;
  try {
    listener=new ServerSocket(port);
    listener.setSoTimeout(1000);
  }
 catch (  BindException be) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (Main.craftGUI != null) {
      Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
    }
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    kill();
    interruptConnections();
    return;
  }
catch (  IOException ioe) {
    Logging.log(""String_Node_Str"");
    ioe.printStackTrace();
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    return;
  }
  Logging.log(""String_Node_Str"" + port);
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
  }
  while (!killed()) {
    if (this.isInterrupted()) {
      kill();
    }
    Socket socket=null;
    try {
      socket=listener.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (socket != null) {
        Logging.log(""String_Node_Str"");
      }
      continue;
    }
catch (    IOException e) {
      Logging.log(""String_Node_Str"");
      e.printStackTrace();
      continue;
    }
    if (socket == null) {
      continue;
    }
    try {
      socket.setSoTimeout(1000);
    }
 catch (    SocketException e) {
      Logging.log(""String_Node_Str"");
      if (socket != null) {
        try {
          socket.close();
        }
 catch (        IOException e1) {
          Logging.log(""String_Node_Str"");
        }
        continue;
      }
    }
    String address=socket.getInetAddress().getHostAddress().toString();
    int port=socket.getPort();
    Logging.log(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    long currentTime=System.currentTimeMillis();
    Long lastConnect=lastLogin.get(address);
    boolean floodProtection=!address.equals(""String_Node_Str"") && Globals.isFlood() && lastConnect != null && lastConnect + 5000 > currentTime;
    lastLogin.put(address,currentTime);
    if (floodProtection) {
      Logging.log(""String_Node_Str"");
      try {
        DataOutputStream outputStream=new DataOutputStream(socket.getOutputStream());
        PacketFFKick.kick(outputStream,null,null,""String_Node_Str"");
        outputStream.flush();
        socket.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
 else {
      try {
        PassthroughConnection ptc=new PassthroughConnection(socket,defaultHostname,listenHostname);
        ptc.start();
        if (Main.craftGUI != null) {
          Main.craftGUI.safeSetStatus(""String_Node_Str"" + address + ""String_Node_Str""+ port);
        }
        addPassthroughConnection(ptc);
      }
 catch (      Exception e) {
        kill();
        e.printStackTrace();
      }
    }
  }
  if (listener != null) {
    try {
      listener.close();
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
    }
  }
  interruptConnections();
}","@Override public void run(){
  ServerSocket listener=null;
  try {
    listener=new ServerSocket(port);
    listener.setSoTimeout(1000);
  }
 catch (  BindException be) {
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    Logging.log(""String_Node_Str"");
    if (Main.craftGUI != null) {
      Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
    }
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    kill();
    interruptConnections();
    return;
  }
catch (  IOException ioe) {
    Logging.log(""String_Node_Str"");
    ioe.printStackTrace();
    if (listener != null) {
      try {
        listener.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
    return;
  }
  Logging.log(""String_Node_Str"" + port);
  if (Main.craftGUI != null) {
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + port + ""String_Node_Str"");
  }
  while (!killed()) {
    if (this.isInterrupted()) {
      System.out.println(""String_Node_Str"");
      kill();
    }
    Socket socket=null;
    try {
      socket=listener.accept();
    }
 catch (    SocketTimeoutException ste) {
      if (socket != null) {
        Logging.log(""String_Node_Str"");
      }
      continue;
    }
catch (    IOException e) {
      Logging.log(""String_Node_Str"");
      e.printStackTrace();
      continue;
    }
    if (socket == null) {
      continue;
    }
    try {
      socket.setSoTimeout(1000);
    }
 catch (    SocketException e) {
      Logging.log(""String_Node_Str"");
      if (socket != null) {
        try {
          socket.close();
        }
 catch (        IOException e1) {
          Logging.log(""String_Node_Str"");
        }
        continue;
      }
    }
    String address=socket.getInetAddress().getHostAddress().toString();
    int port=socket.getPort();
    Logging.log(""String_Node_Str"" + address + ""String_Node_Str""+ port);
    long currentTime=System.currentTimeMillis();
    Long lastConnect=lastLogin.get(address);
    boolean floodProtection=!address.equals(""String_Node_Str"") && Globals.isFlood() && lastConnect != null && lastConnect + 5000 > currentTime;
    lastLogin.put(address,currentTime);
    if (floodProtection) {
      Logging.log(""String_Node_Str"");
      try {
        DataOutputStream outputStream=new DataOutputStream(socket.getOutputStream());
        PacketFFKick.kick(outputStream,null,null,""String_Node_Str"");
        outputStream.flush();
        socket.close();
      }
 catch (      IOException e) {
        Logging.log(""String_Node_Str"");
      }
    }
 else {
      try {
        PassthroughConnection ptc=new PassthroughConnection(socket,defaultHostname,listenHostname);
        ptc.start();
        if (Main.craftGUI != null) {
          Main.craftGUI.safeSetStatus(""String_Node_Str"" + address + ""String_Node_Str""+ port);
        }
        addPassthroughConnection(ptc);
      }
 catch (      Exception e) {
        kill();
        e.printStackTrace();
      }
    }
  }
  System.out.println(""String_Node_Str"" + listener);
  if (listener != null) {
    try {
      listener.close();
    }
 catch (    IOException ioe) {
      System.out.println(""String_Node_Str"");
    }
  }
  interruptConnections();
}",0.9856868821012248
153252,"public Integer recompressChunkData(byte[] buffer,boolean overwriteInput,long[] hashes){
  if (buffer.length < 131072) {
    return null;
  }
  int inputOffset=32768;
  int inputSize=81920;
  int outputOffset=overwriteInput ? 0 : 16384;
  int outputSize=overwriteInput ? 32768 : 16384;
  ;
  if (hashes != null) {
    int pos=inputSize + inputOffset;
    for (int a=0; a < 40; a++) {
      long hash=hashes[a];
      for (int b=0; b < 8; b++) {
        buffer[pos++]=(byte)hash;
        hash=hash >> 8;
      }
    }
    inputSize+=8 * 40;
  }
  deflate.reset();
  deflate.setInput(buffer,inputOffset,inputSize);
  deflate.finish();
  int compressedLength=deflate.deflate(buffer,outputOffset,outputSize);
  if (!deflate.finished()) {
    return null;
  }
 else {
    return compressedLength;
  }
}","public Integer recompressChunkData(byte[] buffer,boolean overwriteInput,long[] hashes){
  if (buffer.length < 163840) {
    return null;
  }
  int inputOffset=65536;
  int inputSize=81920;
  int outputOffset=overwriteInput ? 0 : 32768;
  int outputSize=overwriteInput ? 65536 : 32768;
  if (hashes != null) {
    int pos=inputSize + inputOffset;
    for (int a=0; a < 40; a++) {
      long hash=hashes[a];
      for (int b=0; b < 8; b++) {
        buffer[pos++]=(byte)hash;
        hash=hash >> 8;
      }
    }
    inputSize+=8 * 40;
  }
  deflate.reset();
  deflate.setInput(buffer,inputOffset,inputSize);
  deflate.finish();
  int compressedLength=deflate.deflate(buffer,outputOffset,outputSize);
  if (!deflate.finished()) {
    return null;
  }
 else {
    return compressedLength;
  }
}",0.8551637279596978
153253,"public long[] extractHashes(byte[] buffer,long[] hashes){
  int inputOffset=32768;
  int inputSize=81920;
  int pos=inputSize + inputOffset;
  for (int a=0; a < 40; a++) {
    long hash=0;
    for (int b=0; b < 8; b++) {
      byte value=buffer[pos++];
      hash=(hash >> 8) & 0x00FFFFFFFFFFFFFFL;
      hash|=((long)value) << 56;
    }
    hashes[a]=hash;
  }
  return hashes;
}","public long[] extractHashes(byte[] buffer,long[] hashes){
  int inputOffset=65536;
  int inputSize=81920;
  int pos=inputSize + inputOffset;
  for (int a=0; a < 40; a++) {
    long hash=0;
    for (int b=0; b < 8; b++) {
      byte value=buffer[pos++];
      hash=(hash >> 8) & 0x00FFFFFFFFFFFFFFL;
      hash|=((long)value) << 56;
    }
    hashes[a]=hash;
  }
  return hashes;
}",0.9921052631578948
153254,"public long[] generateHashes(PassthroughConnection ptc,byte[] buffer){
synchronized (ptc.hashThreadSyncObject) {
    if (ptc.hashThreads == null) {
      ptc.hashThreads=new HashThread[4];
      for (int cnt=0; cnt < 4; cnt++) {
        ptc.hashThreads[cnt]=new HashThread(ptc);
        ptc.hashThreads[cnt].start();
      }
    }
  }
  HashThread[] hashThreads=ptc.hashThreads;
  for (int cnt=0; cnt < 40; cnt+=10) {
    hashThreads[cnt / 10].init(buffer,32768,cnt,cnt + 10,ptc.hashes,dontWipe);
  }
  for (int cnt=0; cnt < 4; cnt++) {
    hashThreads[cnt].doneJoin();
  }
  return ptc.hashes;
}","public long[] generateHashes(PassthroughConnection ptc,byte[] buffer){
synchronized (ptc.hashThreadSyncObject) {
    if (ptc.hashThreads == null) {
      ptc.hashThreads=new HashThread[4];
      for (int cnt=0; cnt < 4; cnt++) {
        ptc.hashThreads[cnt]=new HashThread(ptc);
        ptc.hashThreads[cnt].start();
      }
    }
  }
  HashThread[] hashThreads=ptc.hashThreads;
  for (int cnt=0; cnt < 40; cnt+=10) {
    hashThreads[cnt / 10].init(buffer,65536,cnt,cnt + 10,ptc.hashes,dontWipe);
  }
  for (int cnt=0; cnt < 4; cnt++) {
    hashThreads[cnt].doneJoin();
  }
  return ptc.hashes;
}",0.9949664429530202
153255,"byte[] expandChunkData(byte[] input,int inputLength,byte[] buffer){
  if (buffer.length < 131072 || inputLength > 16384) {
    return null;
  }
  inflate.reset();
  inflate.setInput(input,0,inputLength);
  int outputOffset=32768;
  int outputLength=131072 - outputOffset;
  int expandedLength=-1;
  try {
    expandedLength=inflate.inflate(buffer,outputOffset,outputLength);
  }
 catch (  DataFormatException e) {
    return null;
  }
  if (expandedLength != 81920 && expandedLength != 81920 + 320) {
    return null;
  }
  return buffer;
}","byte[] expandChunkData(byte[] input,int inputLength,byte[] buffer){
  if (buffer.length < 163840 || inputLength > 32768) {
    return null;
  }
  inflate.reset();
  inflate.setInput(input,0,inputLength);
  int outputOffset=65536;
  int outputLength=163840 - outputOffset;
  int expandedLength=-1;
  try {
    expandedLength=inflate.inflate(buffer,outputOffset,outputLength);
  }
 catch (  DataFormatException e) {
    return null;
  }
  if (expandedLength != 81920 && expandedLength != 81920 + 320) {
    return null;
  }
  return buffer;
}",0.7592592592592593
153256,"public void wipeBuffer(PassthroughConnection ptc,byte[] buffer,boolean[] wipe){
  HashThread[] hashThreads=ptc.hashThreads;
  for (int cnt=0; cnt < 40; cnt+=10) {
    hashThreads[cnt / 10].init(buffer,32768,cnt,cnt + 10,ptc.hashes,wipe);
  }
  for (int cnt=0; cnt < 4; cnt++) {
    hashThreads[cnt].doneJoin();
  }
}","public void wipeBuffer(PassthroughConnection ptc,byte[] buffer,boolean[] wipe){
  HashThread[] hashThreads=ptc.hashThreads;
  for (int cnt=0; cnt < 40; cnt+=10) {
    hashThreads[cnt / 10].init(buffer,65536,cnt,cnt + 10,ptc.hashes,wipe);
  }
  for (int cnt=0; cnt < 4; cnt++) {
    hashThreads[cnt].doneJoin();
  }
}",0.990506329113924
153257,"public void run(){
  ByteCircleBuffer bcb=new ByteCircleBuffer(20);
  boolean eof=false;
  byte[] buffer=new byte[131072];
  resetCounters();
  long startTime=System.currentTimeMillis();
  long lastTime=startTime;
  period=Globals.monitorBandwidth();
  boolean monitor=period > 0;
  while (!eof && !super.killed()) {
    long currentTime=System.currentTimeMillis();
    if (monitor && currentTime > lastTime + period) {
      lastTime=currentTime;
      printBandwidth(ptc,currentTime - startTime);
    }
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (packetId == (byte)0xFF) {
      PacketFFKick kickPacket=new PacketFFKick((byte)0xFF);
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + packetId);
      }
      if (kickPacket.read(in,ptc,this,true,linkState) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      String reason=kickPacket.getMessage();
      String redirect=PacketFFKick.redirectDetected(reason,ptc);
      if (redirect != null) {
        ptc.printLogMessage(""String_Node_Str"" + redirect);
        ptc.setRedirect(redirect);
        Packet46ServerState serverState=new Packet46ServerState(out,ptc,this);
        serverState.setState((byte)2);
        if (serverState.packetId == null || serverState.write(out,ptc,this,true) == null) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.setRedirect(null);
          eof=true;
          continue;
        }
        if (!destroyEntities()) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.setRedirect(null);
          eof=true;
          continue;
        }
 else {
          if (!Globals.isQuiet()) {
            ptc.printLogMessage(""String_Node_Str"");
          }
        }
        if (!unloadChunks()) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.setRedirect(null);
          eof=true;
          continue;
        }
 else {
          if (!Globals.isQuiet()) {
            ptc.printLogMessage(""String_Node_Str"");
          }
        }
        eof=true;
        continue;
      }
 else {
        UnitByte.writeByte(out,packetId,ptc,this);
        kickPacket.write(out,ptc,this,true);
      }
    }
 else {
      if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      Packet currentPacket=new Packet(packetId);
      bcb.write(packetId);
      if (currentPacket.critical) {
        ptc.printLogMessage(""String_Node_Str"" + bcb);
      }
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId & 0xFF));
      }
      if (currentPacket.packetId == null || currentPacket.pass(in,out,ptc,this,true,buffer,linkState) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
    }
  }
  ptc.interrupt();
}","public void run(){
  ByteCircleBuffer bcb=new ByteCircleBuffer(20);
  boolean eof=false;
  byte[] buffer=new byte[163840];
  resetCounters();
  long startTime=System.currentTimeMillis();
  long lastTime=startTime;
  period=Globals.monitorBandwidth();
  boolean monitor=period > 0;
  while (!eof && !super.killed()) {
    long currentTime=System.currentTimeMillis();
    if (monitor && currentTime > lastTime + period) {
      lastTime=currentTime;
      printBandwidth(ptc,currentTime - startTime);
    }
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (packetId == (byte)0xFF) {
      PacketFFKick kickPacket=new PacketFFKick((byte)0xFF);
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + packetId);
      }
      if (kickPacket.read(in,ptc,this,true,linkState) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      String reason=kickPacket.getMessage();
      String redirect=PacketFFKick.redirectDetected(reason,ptc);
      if (redirect != null) {
        ptc.printLogMessage(""String_Node_Str"" + redirect);
        ptc.setRedirect(redirect);
        Packet46ServerState serverState=new Packet46ServerState(out,ptc,this);
        serverState.setState((byte)2);
        if (serverState.packetId == null || serverState.write(out,ptc,this,true) == null) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.setRedirect(null);
          eof=true;
          continue;
        }
        if (!destroyEntities()) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.setRedirect(null);
          eof=true;
          continue;
        }
 else {
          if (!Globals.isQuiet()) {
            ptc.printLogMessage(""String_Node_Str"");
          }
        }
        if (!unloadChunks()) {
          ptc.printLogMessage(""String_Node_Str"");
          ptc.setRedirect(null);
          eof=true;
          continue;
        }
 else {
          if (!Globals.isQuiet()) {
            ptc.printLogMessage(""String_Node_Str"");
          }
        }
        eof=true;
        continue;
      }
 else {
        UnitByte.writeByte(out,packetId,ptc,this);
        kickPacket.write(out,ptc,this,true);
      }
    }
 else {
      if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      Packet currentPacket=new Packet(packetId);
      bcb.write(packetId);
      if (currentPacket.critical) {
        ptc.printLogMessage(""String_Node_Str"" + bcb);
      }
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId & 0xFF));
      }
      if (currentPacket.packetId == null || currentPacket.pass(in,out,ptc,this,true,buffer,linkState) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
    }
  }
  ptc.interrupt();
}",0.9990633780830472
153258,"public void run(){
  boolean sendHashUpdates=Globals.localCache();
  System.out.println(""String_Node_Str"");
  ByteCircleBuffer bcb=new ByteCircleBuffer(20);
  boolean eof=false;
  byte[] buffer=new byte[131072];
  while (!eof && !super.killed()) {
    if (sendHashUpdates && !ptc.hashQueue.isEmpty()) {
      Long hash;
      UnitByte fakeId=new UnitByte();
      fakeId.setValue((byte)0x50);
      if (fakeId.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      while ((hash=ptc.hashQueue.poll()) != null && synced.size() < 2048) {
        synced.add(hash);
        ptc.hashesSentThisConnection.put(hash,true);
      }
      UnitShort length=new UnitShort();
      length.setValue((short)synced.size());
      if (length.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      UnitLong hashUnit=new UnitLong();
      while ((hash=synced.poll()) != null) {
        hashUnit.setValue(hash);
        if (hashUnit.write(out,ptc,this,false) == null) {
          eof=true;
          continue;
        }
      }
      ptc.savedData.addAndGet(-length.getValue() * 8);
    }
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (packetId == (byte)0x50) {
      UnitShort length=new UnitShort();
      if (length.read(in,ptc,this,false,null) == null) {
        eof=true;
        continue;
      }
      short lengthPrim=length.getValue();
      UnitLong hashUnit=new UnitLong();
      for (short cnt=0; cnt < lengthPrim && !eof; cnt++) {
        if (hashUnit.read(in,ptc,this,false,null) == null) {
          eof=true;
        }
 else         if (ptc.setHashes.size() < 100000) {
          ptc.setHashes.add(hashUnit.getValue());
        }
      }
      if (eof) {
        continue;
      }
    }
 else {
      if (packetId == 0xFF) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
      }
      if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
        continue;
      }
      Packet currentPacket=new Packet(packetId);
      bcb.write(packetId);
      if (currentPacket.critical) {
        ptc.printLogMessage(""String_Node_Str"" + bcb);
      }
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId & 0xFF));
      }
      if (currentPacket.packetId == null || currentPacket.pass(in,out,ptc,this,false,buffer,null) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      if (packetId == 0x10) {
        Short holding=(Short)((UnitShort)(currentPacket.fields[0])).getValue();
        ptc.setHolding(holding);
      }
    }
  }
  ptc.interrupt();
}","public void run(){
  boolean sendHashUpdates=Globals.localCache();
  System.out.println(""String_Node_Str"");
  ByteCircleBuffer bcb=new ByteCircleBuffer(20);
  boolean eof=false;
  byte[] buffer=new byte[163840];
  while (!eof && !super.killed()) {
    if (sendHashUpdates && !ptc.hashQueue.isEmpty()) {
      Long hash;
      UnitByte fakeId=new UnitByte();
      fakeId.setValue((byte)0x50);
      if (fakeId.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      while ((hash=ptc.hashQueue.poll()) != null && synced.size() < 2048) {
        synced.add(hash);
        ptc.hashesSentThisConnection.put(hash,true);
      }
      UnitShort length=new UnitShort();
      length.setValue((short)synced.size());
      if (length.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      UnitLong hashUnit=new UnitLong();
      while ((hash=synced.poll()) != null) {
        hashUnit.setValue(hash);
        if (hashUnit.write(out,ptc,this,false) == null) {
          eof=true;
          continue;
        }
      }
      ptc.savedData.addAndGet(-length.getValue() * 8);
    }
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (packetId == (byte)0x50) {
      UnitShort length=new UnitShort();
      if (length.read(in,ptc,this,false,null) == null) {
        eof=true;
        continue;
      }
      short lengthPrim=length.getValue();
      UnitLong hashUnit=new UnitLong();
      for (short cnt=0; cnt < lengthPrim && !eof; cnt++) {
        if (hashUnit.read(in,ptc,this,false,null) == null) {
          eof=true;
        }
 else         if (ptc.setHashes.size() < 100000) {
          ptc.setHashes.add(hashUnit.getValue());
        }
      }
      if (eof) {
        continue;
      }
    }
 else {
      if (packetId == 0xFF) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
      }
      if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
        continue;
      }
      Packet currentPacket=new Packet(packetId);
      bcb.write(packetId);
      if (currentPacket.critical) {
        ptc.printLogMessage(""String_Node_Str"" + bcb);
      }
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId & 0xFF));
      }
      if (currentPacket.packetId == null || currentPacket.pass(in,out,ptc,this,false,buffer,null) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      if (packetId == 0x10) {
        Short holding=(Short)((UnitShort)(currentPacket.fields[0])).getValue();
        ptc.setHolding(holding);
      }
    }
  }
  ptc.interrupt();
}",0.998968008255934
153259,"@Override public byte[] write(DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient){
  if (!serverToClient || (!ptc.clientInfo.getLocalCache())) {
    return super.write(out,ptc,thread,serverToClient);
  }
 else {
    int length=super.lengthUnit.getValue();
    byte[] buffer=super.getValue();
    if (Globals.compressInfo()) {
      ptc.printLogMessage(""String_Node_Str"" + ptc.setHashes.size());
      ptc.printLogMessage(""String_Node_Str"" + length);
    }
    ChunkScan chunkScan=ptc.chunkScan;
    chunkScan.expandChunkData(buffer,length,buffer);
    chunkScan.generateHashes(ptc,buffer);
    boolean[] matches=new boolean[40];
    for (int cnt=0; cnt < 40; cnt++) {
      Long hash=ptc.hashes[cnt];
      matches[cnt]=ptc.setHashes.contains(hash);
      ptc.setHashes.add(hash);
    }
    chunkScan.wipeBuffer(ptc,buffer,matches);
    Integer newLength=chunkScan.recompressChunkData(buffer,true,ptc.hashes);
    if (newLength == null) {
      return null;
    }
    super.lengthUnit.setValue(-newLength);
    if (Globals.compressInfo()) {
      ptc.printLogMessage(""String_Node_Str"" + newLength);
    }
    return super.write(out,ptc,thread,serverToClient);
  }
}","@Override public byte[] write(DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient){
  if (!serverToClient || (!ptc.clientInfo.getLocalCache())) {
    return super.write(out,ptc,thread,serverToClient);
  }
 else {
    int length=super.lengthUnit.getValue();
    byte[] buffer=super.getValue();
    if (Globals.compressInfo()) {
      ptc.printLogMessage(""String_Node_Str"" + ptc.setHashes.size());
      ptc.printLogMessage(""String_Node_Str"" + length);
    }
    ChunkScan chunkScan=ptc.chunkScan;
    if (chunkScan.expandChunkData(buffer,length,buffer) == null) {
      if (Globals.compressInfo()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      return super.write(out,ptc,thread,serverToClient);
    }
    chunkScan.generateHashes(ptc,buffer);
    boolean[] matches=new boolean[40];
    for (int cnt=0; cnt < 40; cnt++) {
      Long hash=ptc.hashes[cnt];
      matches[cnt]=ptc.setHashes.contains(hash);
      ptc.setHashes.add(hash);
    }
    chunkScan.wipeBuffer(ptc,buffer,matches);
    Integer newLength=chunkScan.recompressChunkData(buffer,true,ptc.hashes);
    if (newLength == null) {
      if (Globals.compressInfo()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      return super.write(out,ptc,thread,serverToClient);
    }
    super.lengthUnit.setValue(-newLength);
    if (Globals.compressInfo()) {
      ptc.printLogMessage(""String_Node_Str"" + newLength);
    }
    return super.write(out,ptc,thread,serverToClient);
  }
}",0.8808557727775729
153260,"@Override public byte[] write(DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient){
  length=lengthUnit.write(out,ptc,thread,serverToClient);
  if (length == null) {
    return null;
  }
  incrementCounter(serverToClient,Math.abs(length),ptc);
  while (true) {
    try {
      out.write(value,0,Math.abs(length));
      out.flush();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    super.timeout=0;
    return value;
  }
}","@Override public byte[] write(DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient){
  if ((length=lengthUnit.getValue()) < 0) {
    lengthUnit.setValue(length);
  }
  length=lengthUnit.write(out,ptc,thread,serverToClient);
  if (length == null) {
    return null;
  }
  incrementCounter(serverToClient,Math.abs(length),ptc);
  while (true) {
    try {
      out.write(value,0,Math.abs(length));
      out.flush();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    super.timeout=0;
    return value;
  }
}",0.9366692728694292
153261,"private byte[] readStandard(DataInputStream in,PassthroughConnection ptc,KillableThread thread,byte[] buffer){
  if (length == null) {
    return null;
  }
  if (length < 0) {
    compressed=true;
    length=-length;
  }
  setupBuffer(buffer);
  int pos=0;
  while (pos < length) {
    try {
      pos+=in.read(value,pos,length - pos);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
  }
  if (!compressed) {
    return value;
  }
 else   if (value == null) {
    return null;
  }
  ChunkScan chunkScan=ptc.chunkScan;
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + length);
  }
  if (chunkScan.expandChunkData(buffer,length,buffer) == null) {
    return null;
  }
  chunkScan.extractHashes(buffer,ptc.hashes);
  int miss=0;
  int hit=0;
  int blockSize=Globals.getBlockSize();
  for (int cnt=0; cnt < 40; cnt++) {
    long hash=ptc.hashes[cnt];
    byte[] cachedHash=ptc.hashCache.getArray(hash,0,ptc);
    byte[] hashArray=cachedHash;
    if (cachedHash == null) {
      miss++;
      hashArray=new byte[2048];
      HashThread.transferArray(buffer,32768,cnt,hashArray,0,false);
      ptc.hashCache.addArray(hash,hashArray);
    }
 else {
      hit++;
      HashThread.transferArray(buffer,32768,cnt,cachedHash,0,true);
    }
    if (!ptc.hashesReceivedThisConnection.containsKey(hash)) {
      int ptcPos=ptc.hashBlockReceivedPos;
      ptc.hashesReceivedThisConnection.put(hash,true);
      ptc.hashBlockReceived[ptcPos]=hash;
      ptc.hashBlockReceivedFull[ptcPos]=hashArray;
      ptcPos++;
      if (ptcPos == blockSize) {
        ptcPos=0;
        ptc.hashCache.saveHashBlockToDisk(ptc.hashBlockReceived,ptc.hashBlockReceivedFull,blockSize,false);
      }
      ptc.hashBlockReceivedPos=ptcPos;
    }
  }
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + hit + ""String_Node_Str""+ miss);
  }
  Integer newLength=chunkScan.recompressChunkData(buffer,true,null);
  if (newLength == null) {
    return null;
  }
  lengthUnit.setValue(newLength);
  int saved=ptc.savedData.addAndGet(newLength - length);
  if (Main.craftGUI != null) {
    int percent=(100 * saved) / (ptc.packetCounter);
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + ptc.clientInfo.getUsername() + ""String_Node_Str""+ saved / 1024 + ""String_Node_Str"" + percent + ""String_Node_Str"");
  }
  return value;
}","private byte[] readStandard(DataInputStream in,PassthroughConnection ptc,KillableThread thread,byte[] buffer){
  if (length == null) {
    return null;
  }
  if (length < 0) {
    compressed=true;
    length=-length;
  }
  setupBuffer(buffer);
  int pos=0;
  while (pos < length) {
    try {
      pos+=in.read(value,pos,length - pos);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
  }
  if (!compressed) {
    return value;
  }
 else   if (value == null) {
    return null;
  }
  ChunkScan chunkScan=ptc.chunkScan;
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + length);
  }
  if (chunkScan.expandChunkData(buffer,length,buffer) == null) {
    return null;
  }
  chunkScan.extractHashes(buffer,ptc.hashes);
  int miss=0;
  int hit=0;
  int blockSize=Globals.getBlockSize();
  for (int cnt=0; cnt < 40; cnt++) {
    long hash=ptc.hashes[cnt];
    byte[] cachedHash=ptc.hashCache.getArray(hash,0,ptc);
    byte[] hashArray=cachedHash;
    if (cachedHash == null) {
      miss++;
      hashArray=new byte[2048];
      HashThread.transferArray(buffer,65536,cnt,hashArray,0,false);
      ptc.hashCache.addArray(hash,hashArray);
    }
 else {
      hit++;
      HashThread.transferArray(buffer,65536,cnt,cachedHash,0,true);
    }
    if (!ptc.hashesReceivedThisConnection.containsKey(hash)) {
      int ptcPos=ptc.hashBlockReceivedPos;
      ptc.hashesReceivedThisConnection.put(hash,true);
      ptc.hashBlockReceived[ptcPos]=hash;
      ptc.hashBlockReceivedFull[ptcPos]=hashArray;
      ptcPos++;
      if (ptcPos == blockSize) {
        ptcPos=0;
        ptc.hashCache.saveHashBlockToDisk(ptc.hashBlockReceived,ptc.hashBlockReceivedFull,blockSize,false);
      }
      ptc.hashBlockReceivedPos=ptcPos;
    }
  }
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + hit + ""String_Node_Str""+ miss);
  }
  Integer newLength=chunkScan.recompressChunkData(buffer,true,null);
  if (newLength == null) {
    return null;
  }
  lengthUnit.setValue(newLength);
  int saved=ptc.savedData.addAndGet(newLength - length);
  if (Main.craftGUI != null) {
    int percent=(100 * saved) / (ptc.packetCounter);
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + ptc.clientInfo.getUsername() + ""String_Node_Str""+ saved / 1024 + ""String_Node_Str"" + percent + ""String_Node_Str"");
  }
  return value;
}",0.9977307110438728
153262,"public CraftProxyGUI(){
  pf=new MyPropertiesFile(""String_Node_Str"");
  pf.load();
  String defaultHostname=pf.getString(""String_Node_Str"",""String_Node_Str"");
  int defaultPort=pf.getInt(""String_Node_Str"",20000);
  int listenPort=pf.getInt(""String_Node_Str"",25565);
  setTitle(""String_Node_Str"");
  setSize(375,200);
  setLocation(40,150);
  topPanel.setLayout(new BorderLayout());
  secondPanel.setLayout(new BorderLayout());
  serverName=new JTextField(defaultHostname,20);
  TitledBorder border=new TitledBorder(""String_Node_Str"");
  serverName.setBorder(border);
  serverName.addActionListener(this);
  portNum=new JTextField(Integer.toString(defaultPort),6);
  border=new TitledBorder(""String_Node_Str"");
  portNum.setBorder(border);
  portNum.addActionListener(this);
  localServerName=new JLabel(""String_Node_Str"");
  border=new TitledBorder(""String_Node_Str"");
  localServerName.setBorder(border);
  localServerPortnum=new JTextField(Integer.toString(listenPort),6);
  border=new TitledBorder(""String_Node_Str"");
  localServerPortnum.setBorder(border);
  localServerPortnum.addActionListener(this);
  topPanel.add(serverName,BorderLayout.CENTER);
  topPanel.add(portNum,BorderLayout.LINE_END);
  secondPanel.setLayout(new BorderLayout());
  secondPanel.add(localServerName,BorderLayout.CENTER);
  secondPanel.add(localServerPortnum,BorderLayout.LINE_END);
  combinedTop.setLayout(new BorderLayout());
  combinedTop.add(topPanel,BorderLayout.CENTER);
  combinedTop.add(secondPanel,BorderLayout.SOUTH);
  info=new JLabel();
  border=new TitledBorder(""String_Node_Str"");
  info.setBorder(border);
  connect=new JButton(buttonText);
  connect.addActionListener(this);
  setLayout(new BorderLayout());
  add(combinedTop,BorderLayout.PAGE_START);
  add(info,BorderLayout.CENTER);
  add(connect,BorderLayout.PAGE_END);
  this.setResizable(false);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  this.addWindowListener(this);
}","public CraftProxyGUI(){
  pf=new MyPropertiesFile(""String_Node_Str"");
  pf.load();
  String defaultHostname=pf.getString(""String_Node_Str"",""String_Node_Str"");
  int defaultPort=pf.getInt(""String_Node_Str"",20000);
  int listenPort=pf.getInt(""String_Node_Str"",25565);
  setTitle(""String_Node_Str"");
  setSize(375,250);
  setLocation(40,150);
  topPanel.setLayout(new BorderLayout());
  topPanel.setBorder(new TitledBorder(""String_Node_Str""));
  topPanel.setBackground(Color.WHITE);
  secondPanel.setLayout(new BorderLayout());
  secondPanel.setBorder(new TitledBorder(""String_Node_Str""));
  secondPanel.setBackground(Color.WHITE);
  serverName=new JTextField(defaultHostname,20);
  TitledBorder border=new TitledBorder(""String_Node_Str"");
  serverName.setBorder(border);
  serverName.addActionListener(this);
  portNum=new JTextField(Integer.toString(defaultPort),6);
  border=new TitledBorder(""String_Node_Str"");
  portNum.setBorder(border);
  portNum.addActionListener(this);
  localServerName=new JLabel(""String_Node_Str"");
  localServerName.setBackground(Color.GRAY);
  border=new TitledBorder(""String_Node_Str"");
  localServerName.setBorder(border);
  localServerPortnum=new JTextField(Integer.toString(listenPort),6);
  border=new TitledBorder(""String_Node_Str"");
  localServerPortnum.setBorder(border);
  localServerPortnum.addActionListener(this);
  topPanel.add(serverName,BorderLayout.CENTER);
  topPanel.add(portNum,BorderLayout.LINE_END);
  secondPanel.setLayout(new BorderLayout());
  secondPanel.add(localServerName,BorderLayout.CENTER);
  secondPanel.add(localServerPortnum,BorderLayout.LINE_END);
  combinedTop.setLayout(new BorderLayout());
  combinedTop.add(topPanel,BorderLayout.CENTER);
  combinedTop.add(secondPanel,BorderLayout.SOUTH);
  info=new JLabel();
  border=new TitledBorder(""String_Node_Str"");
  info.setBorder(border);
  connect=new JButton(buttonText);
  connect.addActionListener(this);
  setLayout(new BorderLayout());
  add(combinedTop,BorderLayout.PAGE_START);
  add(info,BorderLayout.CENTER);
  add(connect,BorderLayout.PAGE_END);
  this.setResizable(false);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  this.addWindowListener(this);
}",0.9392831016825164
153263,"public void run(){
  boolean sendHashUpdates=Globals.localCache();
  System.out.println(""String_Node_Str"");
  ByteCircleBuffer bcb=new ByteCircleBuffer(20);
  boolean eof=false;
  byte[] buffer=new byte[131072];
  while (!eof && !super.killed()) {
    if (sendHashUpdates && !ptc.hashQueue.isEmpty()) {
      Long hash;
      UnitByte fakeId=new UnitByte();
      fakeId.setValue((byte)0x50);
      if (fakeId.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      while ((hash=ptc.hashQueue.poll()) != null && synced.size() < 2048) {
        synced.add(hash);
      }
      UnitShort length=new UnitShort();
      length.setValue((short)synced.size());
      if (length.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      UnitLong hashUnit=new UnitLong();
      while ((hash=synced.poll()) != null) {
        hashUnit.setValue(hash);
        if (hashUnit.write(out,ptc,this,false) == null) {
          eof=true;
          continue;
        }
      }
      ptc.savedData.addAndGet(-length.getValue() * 8);
    }
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (packetId == (byte)0x50) {
      UnitShort length=new UnitShort();
      if (length.read(in,ptc,this,false,null) == null) {
        eof=true;
        continue;
      }
      short lengthPrim=length.getValue();
      UnitLong hashUnit=new UnitLong();
      for (short cnt=0; cnt < lengthPrim && !eof; cnt++) {
        if (hashUnit.read(in,ptc,this,false,null) == null) {
          eof=true;
        }
 else         if (ptc.setHashes.size() < 100000) {
          ptc.setHashes.add(hashUnit.getValue());
        }
      }
      if (eof) {
        continue;
      }
    }
 else {
      if (packetId == 0xFF) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
      }
      if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
        continue;
      }
      Packet currentPacket=new Packet(packetId);
      bcb.write(packetId);
      if (currentPacket.critical) {
        ptc.printLogMessage(""String_Node_Str"" + bcb);
      }
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId & 0xFF));
      }
      if (currentPacket.packetId == null || currentPacket.pass(in,out,ptc,this,false,buffer,null) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      if (packetId == 0x10) {
        Short holding=(Short)((UnitShort)(currentPacket.fields[0])).getValue();
        ptc.setHolding(holding);
      }
    }
  }
  ptc.interrupt();
}","public void run(){
  boolean sendHashUpdates=Globals.localCache();
  System.out.println(""String_Node_Str"");
  ByteCircleBuffer bcb=new ByteCircleBuffer(20);
  boolean eof=false;
  byte[] buffer=new byte[131072];
  while (!eof && !super.killed()) {
    if (sendHashUpdates && !ptc.hashQueue.isEmpty()) {
      Long hash;
      UnitByte fakeId=new UnitByte();
      fakeId.setValue((byte)0x50);
      if (fakeId.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      while ((hash=ptc.hashQueue.poll()) != null && synced.size() < 2048) {
        synced.add(hash);
        ptc.hashesSentThisConnection.put(hash,true);
      }
      UnitShort length=new UnitShort();
      length.setValue((short)synced.size());
      if (length.write(out,ptc,this,false) == null) {
        eof=true;
        continue;
      }
      UnitLong hashUnit=new UnitLong();
      while ((hash=synced.poll()) != null) {
        hashUnit.setValue(hash);
        if (hashUnit.write(out,ptc,this,false) == null) {
          eof=true;
          continue;
        }
      }
      ptc.savedData.addAndGet(-length.getValue() * 8);
    }
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (packetId == (byte)0x50) {
      UnitShort length=new UnitShort();
      if (length.read(in,ptc,this,false,null) == null) {
        eof=true;
        continue;
      }
      short lengthPrim=length.getValue();
      UnitLong hashUnit=new UnitLong();
      for (short cnt=0; cnt < lengthPrim && !eof; cnt++) {
        if (hashUnit.read(in,ptc,this,false,null) == null) {
          eof=true;
        }
 else         if (ptc.setHashes.size() < 100000) {
          ptc.setHashes.add(hashUnit.getValue());
        }
      }
      if (eof) {
        continue;
      }
    }
 else {
      if (packetId == 0xFF) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
      }
      if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
        ptc.printLogMessage(""String_Node_Str"");
        eof=true;
        continue;
      }
      Packet currentPacket=new Packet(packetId);
      bcb.write(packetId);
      if (currentPacket.critical) {
        ptc.printLogMessage(""String_Node_Str"" + bcb);
      }
      if (Globals.isVerbose()) {
        ptc.printLogMessage(""String_Node_Str"" + Integer.toHexString(packetId & 0xFF));
      }
      if (currentPacket.packetId == null || currentPacket.pass(in,out,ptc,this,false,buffer,null) == null) {
        if (!Globals.isQuiet()) {
          ptc.printLogMessage(""String_Node_Str"");
        }
        eof=true;
        continue;
      }
      if (packetId == 0x10) {
        Short holding=(Short)((UnitShort)(currentPacket.fields[0])).getValue();
        ptc.setHolding(holding);
      }
    }
  }
  ptc.interrupt();
}",0.9908002082971706
153264,"public boolean readSingleFile(File file,boolean all,PassthroughConnection ptc){
  FileInputStream in;
  try {
    in=new FileInputStream(file);
  }
 catch (  FileNotFoundException e) {
    return false;
  }
  int blockSize;
  long blockHash;
  long[] hashes;
  byte[][] hashData;
  int requiredUpdates=0;
  int skippedUpdates=0;
  try {
    GZIPInputStream gzIn;
    try {
      gzIn=new GZIPInputStream(in);
    }
 catch (    IOException e1) {
      return false;
    }
    DataInputStream inData=new DataInputStream(gzIn);
    try {
      blockHash=inData.readLong();
      blockSize=inData.readInt();
      hashes=new long[blockSize];
      hashData=new byte[blockSize][];
      for (int cnt=0; cnt < blockSize; cnt++) {
        hashes[cnt]=inData.readLong();
        if (ptc.hashesReceivedThisConnection != null && !ptc.hashesReceivedThisConnection.containsKey(hashes[cnt])) {
          ptc.hashQueue.offer(hashes[cnt]);
        }
      }
      if (all) {
        for (int cnt=0; cnt < blockSize; cnt++) {
          if (!cache.containsKey(hashes[cnt])) {
            int skip=skippedUpdates * 2048;
            if (inData.skip(skip) != skip) {
              System.out.println(""String_Node_Str"");
              return false;
            }
            hashData[cnt]=new byte[2048];
            inData.readFully(hashData[cnt]);
            requiredUpdates++;
            skippedUpdates=0;
          }
 else {
            hashData[cnt]=null;
            skippedUpdates++;
          }
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + file.getName());
      return false;
    }
  }
  finally {
    try {
      in.close();
    }
 catch (    IOException e) {
    }
  }
  if (all) {
    for (int cnt=0; cnt < blockSize; cnt++) {
      if (hashData[cnt] != null) {
        cache.put(hashes[cnt],new SoftReference<byte[]>(hashData[cnt]));
        hardReferencesLoop.addLast(hashData[cnt]);
        if (hardReferencesLoop.size() > 32768) {
          hardReferencesLoop.removeFirst();
        }
      }
    }
  }
 else {
    blockHashList.put(blockHash,hashes);
    for (int cnt=0; cnt < blockSize; cnt++) {
      File current=FAT.get(hashes[cnt]);
      if (current == null) {
        FAT.put(hashes[cnt],file);
      }
    }
  }
  return true;
}","public boolean readSingleFile(File file,boolean all,PassthroughConnection ptc){
  FileInputStream in;
  try {
    in=new FileInputStream(file);
  }
 catch (  FileNotFoundException e) {
    return false;
  }
  int blockSize;
  long blockHash;
  long[] hashes;
  byte[][] hashData;
  int requiredUpdates=0;
  int skippedUpdates=0;
  try {
    GZIPInputStream gzIn;
    try {
      gzIn=new GZIPInputStream(in);
    }
 catch (    IOException e1) {
      return false;
    }
    DataInputStream inData=new DataInputStream(gzIn);
    try {
      blockHash=inData.readLong();
      blockSize=inData.readInt();
      hashes=new long[blockSize];
      hashData=new byte[blockSize][];
      for (int cnt=0; cnt < blockSize; cnt++) {
        hashes[cnt]=inData.readLong();
        if (all && ptc.hashesSentThisConnection != null && !ptc.hashesSentThisConnection.containsKey(hashes[cnt])) {
          ptc.hashQueue.offer(hashes[cnt]);
        }
      }
      if (all) {
        for (int cnt=0; cnt < blockSize; cnt++) {
          if (!cache.containsKey(hashes[cnt])) {
            int skip=skippedUpdates * 2048;
            if (inData.skip(skip) != skip) {
              System.out.println(""String_Node_Str"");
              return false;
            }
            hashData[cnt]=new byte[2048];
            inData.readFully(hashData[cnt]);
            requiredUpdates++;
            skippedUpdates=0;
          }
 else {
            hashData[cnt]=null;
            skippedUpdates++;
          }
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      System.out.println(""String_Node_Str"" + file.getName());
      return false;
    }
  }
  finally {
    try {
      in.close();
    }
 catch (    IOException e) {
    }
  }
  if (all) {
    for (int cnt=0; cnt < blockSize; cnt++) {
      if (hashData[cnt] != null) {
        cache.put(hashes[cnt],new SoftReference<byte[]>(hashData[cnt]));
        hardReferencesLoop.addLast(hashData[cnt]);
        if (hardReferencesLoop.size() > 32768) {
          hardReferencesLoop.removeFirst();
        }
      }
    }
  }
 else {
    blockHashList.put(blockHash,hashes);
    for (int cnt=0; cnt < blockSize; cnt++) {
      File current=FAT.get(hashes[cnt]);
      if (current == null) {
        FAT.put(hashes[cnt],file);
      }
    }
  }
  return true;
}",0.9889825016202204
153265,"public HashCache(PassthroughConnection ptc){
  System.out.println(""String_Node_Str"");
  ptc.hashQueue=new ConcurrentLinkedQueue<Long>();
  if (!Main.cacheDir.isDirectory()) {
    return;
  }
  File[] files=Main.cacheDir.listFiles();
  Arrays.sort(files,fileCompare);
  if (files.length > 0) {
    fileId=getIntFromName(files[files.length - 1]) + 1;
  }
  for (  File file : files) {
    readSingleFile(file,false,ptc);
  }
  ptc.hashesReceivedThisConnection=new ConcurrentHashMap<Long,Boolean>();
}","public HashCache(PassthroughConnection ptc){
  ptc.hashQueue=new ConcurrentLinkedQueue<Long>();
  if (!Main.cacheDir.isDirectory()) {
    return;
  }
  File[] files=Main.cacheDir.listFiles();
  Arrays.sort(files,fileCompare);
  if (files.length > 0) {
    fileId=getIntFromName(files[files.length - 1]) + 1;
  }
  for (  File file : files) {
    readSingleFile(file,false,ptc);
  }
  ptc.hashesReceivedThisConnection=new ConcurrentHashMap<Long,Boolean>();
  ptc.hashesSentThisConnection=new ConcurrentHashMap<Long,Boolean>();
}",0.8917073170731707
153266,"private byte[] readStandard(DataInputStream in,PassthroughConnection ptc,KillableThread thread,byte[] buffer){
  if (length == null) {
    return null;
  }
  if (length < 0) {
    compressed=true;
    length=-length;
  }
  setupBuffer(buffer);
  int pos=0;
  while (pos < length) {
    try {
      pos+=in.read(value,pos,length - pos);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
  }
  if (!compressed) {
    return value;
  }
 else   if (value == null) {
    return null;
  }
  ChunkScan chunkScan=ptc.chunkScan;
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + length);
  }
  if (chunkScan.expandChunkData(buffer,length,buffer) == null) {
    return null;
  }
  chunkScan.extractHashes(buffer,ptc.hashes);
  int miss=0;
  int hit=0;
  int blockSize=Globals.getBlockSize();
  for (int cnt=0; cnt < 40; cnt++) {
    long hash=ptc.hashes[cnt];
    byte[] cachedHash=ptc.hashCache.getArray(hash,0,ptc);
    byte[] hashArray=cachedHash;
    if (cachedHash == null) {
      miss++;
      hashArray=new byte[2048];
      HashThread.transferArray(buffer,32768,cnt,hashArray,0,false);
      ptc.hashCache.addArray(hash,hashArray);
    }
 else {
      hit++;
      HashThread.transferArray(buffer,32768,cnt,cachedHash,0,true);
    }
    if (!ptc.hashesReceivedThisConnection.contains(hash)) {
      int ptcPos=ptc.hashBlockReceivedPos;
      ptc.hashesReceivedThisConnection.put(hash,true);
      ptc.hashBlockReceived[ptcPos]=hash;
      ptc.hashBlockReceivedFull[ptcPos]=hashArray;
      ptcPos++;
      if (ptcPos == blockSize) {
        ptcPos=0;
        ptc.hashCache.saveHashBlockToDisk(ptc.hashBlockReceived,ptc.hashBlockReceivedFull,blockSize,false);
      }
      ptc.hashBlockReceivedPos=ptcPos;
    }
  }
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + hit + ""String_Node_Str""+ miss);
  }
  Integer newLength=chunkScan.recompressChunkData(buffer,true,null);
  if (newLength == null) {
    return null;
  }
  lengthUnit.setValue(newLength);
  int saved=ptc.savedData.addAndGet(newLength - length);
  if (Main.craftGUI != null) {
    int percent=(100 * saved) / (ptc.packetCounter);
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + ptc.clientInfo.getUsername() + ""String_Node_Str""+ saved / 1024 + ""String_Node_Str"" + percent + ""String_Node_Str"");
  }
  return value;
}","private byte[] readStandard(DataInputStream in,PassthroughConnection ptc,KillableThread thread,byte[] buffer){
  if (length == null) {
    return null;
  }
  if (length < 0) {
    compressed=true;
    length=-length;
  }
  setupBuffer(buffer);
  int pos=0;
  while (pos < length) {
    try {
      pos+=in.read(value,pos,length - pos);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
  }
  if (!compressed) {
    return value;
  }
 else   if (value == null) {
    return null;
  }
  ChunkScan chunkScan=ptc.chunkScan;
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + length);
  }
  if (chunkScan.expandChunkData(buffer,length,buffer) == null) {
    return null;
  }
  chunkScan.extractHashes(buffer,ptc.hashes);
  int miss=0;
  int hit=0;
  int blockSize=Globals.getBlockSize();
  for (int cnt=0; cnt < 40; cnt++) {
    long hash=ptc.hashes[cnt];
    byte[] cachedHash=ptc.hashCache.getArray(hash,0,ptc);
    byte[] hashArray=cachedHash;
    if (cachedHash == null) {
      miss++;
      hashArray=new byte[2048];
      HashThread.transferArray(buffer,32768,cnt,hashArray,0,false);
      ptc.hashCache.addArray(hash,hashArray);
    }
 else {
      hit++;
      HashThread.transferArray(buffer,32768,cnt,cachedHash,0,true);
    }
    if (!ptc.hashesReceivedThisConnection.containsKey(hash)) {
      int ptcPos=ptc.hashBlockReceivedPos;
      ptc.hashesReceivedThisConnection.put(hash,true);
      ptc.hashBlockReceived[ptcPos]=hash;
      ptc.hashBlockReceivedFull[ptcPos]=hashArray;
      ptcPos++;
      if (ptcPos == blockSize) {
        ptcPos=0;
        ptc.hashCache.saveHashBlockToDisk(ptc.hashBlockReceived,ptc.hashBlockReceivedFull,blockSize,false);
      }
      ptc.hashBlockReceivedPos=ptcPos;
    }
  }
  if (Globals.compressInfo()) {
    ptc.printLogMessage(""String_Node_Str"" + hit + ""String_Node_Str""+ miss);
  }
  Integer newLength=chunkScan.recompressChunkData(buffer,true,null);
  if (newLength == null) {
    return null;
  }
  lengthUnit.setValue(newLength);
  int saved=ptc.savedData.addAndGet(newLength - length);
  if (Main.craftGUI != null) {
    int percent=(100 * saved) / (ptc.packetCounter);
    Main.craftGUI.safeSetStatus(""String_Node_Str"" + ptc.clientInfo.getUsername() + ""String_Node_Str""+ saved / 1024 + ""String_Node_Str"" + percent + ""String_Node_Str"");
  }
  return value;
}",0.9994323557237464
153267,"@Override public String read(DataInputStream in,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,DownlinkState linkState){
  while (true) {
    try {
      value=in.readUTF();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
  }
}","@Override public String read(DataInputStream in,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,DownlinkState linkState){
  while (true) {
    try {
      value=in.readUTF();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    super.timeout=0;
    return value;
  }
}",0.9443757725587144
153268,"@Override public String write(DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient){
  while (true) {
    try {
      out.writeUTF(value);
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
  }
}","@Override public String write(DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient){
  while (true) {
    try {
      out.writeUTF(value);
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    super.timeout=0;
    return value;
  }
}",0.94148244473342
153269,"public static Integer getPort(String fullHostname){
  int pos=fullHostname.lastIndexOf(""String_Node_Str"");
  if (pos == -1) {
    try {
      return Integer.parseInt(fullHostname);
    }
 catch (    NumberFormatException nfe) {
      return null;
    }
  }
 else {
    try {
      return Integer.parseInt(fullHostname.substring(pos + 1));
    }
 catch (    NumberFormatException nfe) {
      return null;
    }
  }
}","public static Integer getPort(String fullHostname){
  int pos=fullHostname.lastIndexOf(""String_Node_Str"");
  int pos2=fullHostname.lastIndexOf(""String_Node_Str"");
  int lastMarker=Math.max(pos,pos2);
  if (lastMarker == -1) {
    try {
      return Integer.parseInt(fullHostname);
    }
 catch (    NumberFormatException nfe) {
      return null;
    }
  }
 else {
    try {
      return Integer.parseInt(fullHostname.substring(lastMarker + 1));
    }
 catch (    NumberFormatException nfe) {
      return null;
    }
  }
}",0.8668796592119276
153270,"static String serverLogin(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean loginToProxy,ClientInfo clientInfo){
  ptc.printLogMessage(""String_Node_Str"");
  Packet02Handshake CtSHandshake=new Packet02Handshake(out,ptc,thread);
  CtSHandshake.setUsername(ptc.clientInfo.getUsername());
  if (CtSHandshake.packetId == null || CtSHandshake.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(in,ptc,thread);
  if (StCHandshake.packetId == null || StCHandshake.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  Packet01Login clientLogin=new Packet01Login(out,ptc,thread);
  if (!loginToProxy) {
    clientLogin.setVersion(Globals.getClientVersion());
  }
 else {
    clientLogin.setVersion(Globals.getFakeVersion());
  }
  clientLogin.setUsername(ptc.clientInfo.getUsername());
  clientLogin.setDimension((byte)0);
  clientLogin.setMapSeed(0);
  if (clientLogin.packetId == null || clientLogin.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  if (loginToProxy) {
    PacketFFKick fakeKick=new PacketFFKick(in,ptc,thread);
    if (fakeKick.packetId == null || fakeKick.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    if (!fakeKick.getMessage().equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    String hashString=StCHandshake.getUsername();
    String password=Globals.getPassword();
    String toHash=hashString + password;
    String reply=sha1Hash(toHash).substring(0,24);
    Packet02Handshake hashReply=new Packet02Handshake(out,ptc,thread);
    hashReply.setUsername(reply);
    if (hashReply.packetId == null || hashReply.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hostnameForwarding=new Packet02Handshake(out,ptc,thread);
    hostnameForwarding.setUsername(clientInfo.getHostname());
    if (hostnameForwarding.packetId == null || hostnameForwarding.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
  }
  return null;
}","static String serverLogin(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean loginToProxy,ClientInfo clientInfo){
  ptc.printLogMessage(""String_Node_Str"");
  Packet02Handshake CtSHandshake=new Packet02Handshake(out,ptc,thread);
  CtSHandshake.setUsername(ptc.clientInfo.getUsername());
  if (CtSHandshake.packetId == null || CtSHandshake.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(in,ptc,thread);
  if (StCHandshake.packetId == null || StCHandshake.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  Packet01Login clientLogin=new Packet01Login(out,ptc,thread);
  if (!loginToProxy) {
    clientLogin.setVersion(Globals.getClientVersion());
  }
 else {
    clientLogin.setVersion(Globals.getFakeVersion());
  }
  clientLogin.setUsername(ptc.clientInfo.getUsername());
  clientLogin.setDimension((byte)0);
  clientLogin.setMapSeed(0);
  if (clientLogin.packetId == null || clientLogin.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  if (loginToProxy) {
    PacketFFKick fakeKick=new PacketFFKick(in,ptc,thread);
    if (fakeKick.packetId == null || fakeKick.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    if (!fakeKick.getMessage().equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    String hashString=StCHandshake.getUsername();
    String password=Globals.getPassword();
    String toHash=hashString + password;
    String reply=sha1Hash(toHash).substring(0,24);
    Packet02Handshake hashReply=new Packet02Handshake(out,ptc,thread);
    hashReply.setUsername(reply);
    if (hashReply.packetId == null || hashReply.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hostnameForwarding=new Packet02Handshake(out,ptc,thread);
    hostnameForwarding.setUsername(clientInfo.getHostname());
    if (hostnameForwarding.packetId == null || hostnameForwarding.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    if (!Globals.isQuiet()) {
      ptc.printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    }
  }
  return null;
}",0.96918511755307
153271,"public void run(){
  boolean connected=true;
  clientInfo.setForward(false);
  clientInfo.setHostname(null);
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth(),clientInfo);
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
    connected=false;
  }
  if (BanList.banned(clientInfo.getUsername())) {
    printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
    connected=false;
  }
  clientInfo.setHostname(ReconnectCache.get(clientInfo.getUsername()));
  if (clientInfo.getHostname() == null || clientInfo.getHostname().equals(""String_Node_Str"")) {
    clientInfo.setHostname(defaultHostname);
  }
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      clientInfo.setHostname(redirectLocal);
    }
    printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    String nextHostname=RedirectManager.getNextHostname(listenHostname,clientInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,clientInfo.getHostname());
    if (nextHostname == null || nextPortnum == null) {
      printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"" + clientInfo.getHostname());
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    Socket serverBasicSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    Boolean proxyLogin=RedirectManager.isNextProxy(listenHostname,clientInfo.getHostname());
    if (proxyLogin == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        if (serverLoginPacket.packetId == 0x01) {
          clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        }
 else         if (serverLoginPacket.packetId == (byte)0xFF) {
          PacketFFKick.kickAndClose(clientSocket,this,this,((UnitString)serverLoginPacket.fields[0]).getValue());
          return;
        }
 else {
          PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
          return;
        }
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!clientInfo.getForward()) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (!Globals.isQuiet()) {
            if (clientInfo.getForward()) {
              printLogMessage(""String_Node_Str"");
            }
 else {
              printLogMessage(""String_Node_Str"");
            }
          }
          ReconnectCache.store(clientInfo.getUsername(),clientInfo.getHostname());
          if (clientInfo.getForward()) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}","public void run(){
  boolean connected=true;
  clientInfo.setForward(false);
  clientInfo.setHostname(null);
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth(),clientInfo);
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
    connected=false;
  }
  if (BanList.banned(clientInfo.getUsername())) {
    printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
    connected=false;
  }
  if (clientInfo.getHostname() == null) {
    clientInfo.setHostname(ReconnectCache.get(clientInfo.getUsername()));
    if (clientInfo.getHostname() == null || clientInfo.getHostname().equals(""String_Node_Str"")) {
      clientInfo.setHostname(defaultHostname);
    }
  }
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      clientInfo.setHostname(redirectLocal);
    }
    printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    String nextHostname=RedirectManager.getNextHostname(listenHostname,clientInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,clientInfo.getHostname());
    if (nextHostname == null || nextPortnum == null) {
      printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"" + clientInfo.getHostname());
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    Socket serverBasicSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    Boolean proxyLogin=RedirectManager.isNextProxy(listenHostname,clientInfo.getHostname());
    if (proxyLogin == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        if (serverLoginPacket.packetId == 0x01) {
          clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        }
 else         if (serverLoginPacket.packetId == (byte)0xFF) {
          PacketFFKick.kickAndClose(clientSocket,this,this,((UnitString)serverLoginPacket.fields[0]).getValue());
          return;
        }
 else {
          PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
          return;
        }
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!clientInfo.getForward()) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (!Globals.isQuiet()) {
            if (clientInfo.getForward()) {
              printLogMessage(""String_Node_Str"");
            }
 else {
              printLogMessage(""String_Node_Str"");
            }
          }
          ReconnectCache.store(clientInfo.getUsername(),clientInfo.getHostname());
          if (clientInfo.getForward()) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}",0.9867363344051449
153272,"static String processLogin(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean auth,ClientInfo clientInfo){
  Packet02Handshake CtSHandshake=new Packet02Handshake(in,ptc,thread);
  if (CtSHandshake.packetId == null || CtSHandshake.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  ptc.clientInfo.setUsername(CtSHandshake.getUsername());
  ptc.printLogMessage(CtSHandshake.getUsername() + ""String_Node_Str"");
  Packet02Handshake StCHandshake=new Packet02Handshake(out,ptc,thread);
  String hashString;
  if (auth) {
    hashString=getHashString();
    if (!Globals.isQuiet()) {
      ptc.printLogMessage(""String_Node_Str"" + hashString);
    }
  }
 else {
    hashString=""String_Node_Str"";
  }
  StCHandshake.setUsername(hashString);
  if (StCHandshake.packetId == null || StCHandshake.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  Packet01Login clientLogin=new Packet01Login(in,ptc,thread);
  if (clientLogin.packetId == null || clientLogin.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  String password=Globals.getPassword();
  boolean canSkipAuth=false;
  if (password != null && clientLogin.getVersion() == Globals.getFakeVersion()) {
    PacketFFKick fakeKickPacket=new PacketFFKick(out,ptc,thread);
    fakeKickPacket.setMessage(""String_Node_Str"");
    if (fakeKickPacket.packetId == null || fakeKickPacket.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hashReply=new Packet02Handshake(in,ptc,thread);
    if (hashReply.packetId == null || hashReply.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    String toHash=hashString + password;
    String replyIdeal=sha1Hash(toHash).substring(0,24);
    String reply=hashReply.getUsername();
    if (!reply.equals(replyIdeal)) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hostnameForward=new Packet02Handshake(in,ptc,thread);
    if (hostnameForward.packetId == null || hostnameForward.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    clientInfo.setForward(true);
    clientInfo.setHostname(hostnameForward.getUsername());
    canSkipAuth=true;
  }
 else   if (clientLogin.getVersion() != Globals.getClientVersion()) {
    return ""String_Node_Str"";
  }
  if (auth && !canSkipAuth) {
    if (!authenticate(ptc.clientInfo.getUsername(),hashString,ptc)) {
      return ""String_Node_Str"";
    }
  }
  return null;
}","static String processLogin(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean auth,ClientInfo clientInfo){
  Packet02Handshake CtSHandshake=new Packet02Handshake(in,ptc,thread);
  if (CtSHandshake.packetId == null || CtSHandshake.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  ptc.clientInfo.setUsername(CtSHandshake.getUsername());
  ptc.printLogMessage(CtSHandshake.getUsername() + ""String_Node_Str"");
  Packet02Handshake StCHandshake=new Packet02Handshake(out,ptc,thread);
  String hashString;
  if (auth) {
    hashString=getHashString();
    if (!Globals.isQuiet()) {
      ptc.printLogMessage(""String_Node_Str"" + hashString);
    }
  }
 else {
    hashString=""String_Node_Str"";
  }
  StCHandshake.setUsername(hashString);
  if (StCHandshake.packetId == null || StCHandshake.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  Packet01Login clientLogin=new Packet01Login(in,ptc,thread);
  if (clientLogin.packetId == null || clientLogin.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  String password=Globals.getPassword();
  boolean canSkipAuth=false;
  if (password != null && clientLogin.getVersion() == Globals.getFakeVersion()) {
    PacketFFKick fakeKickPacket=new PacketFFKick(out,ptc,thread);
    fakeKickPacket.setMessage(""String_Node_Str"");
    if (fakeKickPacket.packetId == null || fakeKickPacket.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hashReply=new Packet02Handshake(in,ptc,thread);
    if (hashReply.packetId == null || hashReply.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    String toHash=hashString + password;
    String replyIdeal=sha1Hash(toHash).substring(0,16);
    String reply=hashReply.getUsername();
    if (!reply.equals(replyIdeal)) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hostnameForward=new Packet02Handshake(in,ptc,thread);
    if (hostnameForward.packetId == null || hostnameForward.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    clientInfo.setForward(true);
    clientInfo.setHostname(hostnameForward.getUsername());
    canSkipAuth=true;
  }
 else   if (clientLogin.getVersion() != Globals.getClientVersion()) {
    return ""String_Node_Str"";
  }
  if (auth && !canSkipAuth) {
    if (!authenticate(ptc.clientInfo.getUsername(),hashString,ptc)) {
      return ""String_Node_Str"";
    }
  }
  return null;
}",0.9992076069730588
153273,"static String serverLogin(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean loginToProxy,ClientInfo clientInfo){
  ptc.printLogMessage(""String_Node_Str"");
  Packet02Handshake CtSHandshake=new Packet02Handshake(out,ptc,thread);
  CtSHandshake.setUsername(ptc.clientInfo.getUsername());
  if (CtSHandshake.packetId == null || CtSHandshake.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(in,ptc,thread);
  if (StCHandshake.packetId == null || StCHandshake.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  Packet01Login clientLogin=new Packet01Login(out,ptc,thread);
  if (!loginToProxy) {
    clientLogin.setVersion(Globals.getClientVersion());
  }
 else {
    clientLogin.setVersion(Globals.getFakeVersion());
  }
  clientLogin.setUsername(ptc.clientInfo.getUsername());
  clientLogin.setDimension((byte)0);
  clientLogin.setMapSeed(0);
  if (clientLogin.packetId == null || clientLogin.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  if (loginToProxy) {
    PacketFFKick fakeKick=new PacketFFKick(in,ptc,thread);
    if (fakeKick.packetId == null || fakeKick.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    if (!fakeKick.getMessage().equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    String hashString=StCHandshake.getUsername();
    String password=Globals.getPassword();
    String toHash=hashString + password;
    String reply=sha1Hash(toHash).substring(0,24);
    Packet02Handshake hashReply=new Packet02Handshake(out,ptc,thread);
    hashReply.setUsername(reply);
    if (hashReply.packetId == null || hashReply.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hostnameForwarding=new Packet02Handshake(out,ptc,thread);
    hostnameForwarding.setUsername(clientInfo.getHostname());
    if (hostnameForwarding.packetId == null || hostnameForwarding.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    if (!Globals.isQuiet()) {
      ptc.printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    }
  }
  return null;
}","static String serverLogin(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean loginToProxy,ClientInfo clientInfo){
  if (loginToProxy) {
    ptc.printLogMessage(""String_Node_Str"");
  }
 else {
    ptc.printLogMessage(""String_Node_Str"");
  }
  Packet02Handshake CtSHandshake=new Packet02Handshake(out,ptc,thread);
  CtSHandshake.setUsername(ptc.clientInfo.getUsername());
  if (CtSHandshake.packetId == null || CtSHandshake.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  Packet02Handshake StCHandshake=new Packet02Handshake(in,ptc,thread);
  if (StCHandshake.packetId == null || StCHandshake.read(in,ptc,thread,true,null) == null) {
    return ""String_Node_Str"";
  }
  Packet01Login clientLogin=new Packet01Login(out,ptc,thread);
  if (!loginToProxy) {
    clientLogin.setVersion(Globals.getClientVersion());
  }
 else {
    clientLogin.setVersion(Globals.getFakeVersion());
  }
  clientLogin.setUsername(ptc.clientInfo.getUsername());
  clientLogin.setDimension((byte)0);
  clientLogin.setMapSeed(0);
  if (clientLogin.packetId == null || clientLogin.write(out,ptc,thread,false) == null) {
    return ""String_Node_Str"";
  }
  if (loginToProxy) {
    PacketFFKick fakeKick=new PacketFFKick(in,ptc,thread);
    if (fakeKick.packetId == null || fakeKick.read(in,ptc,thread,true,null) == null) {
      return ""String_Node_Str"";
    }
    if (!fakeKick.getMessage().equals(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    String hashString=StCHandshake.getUsername();
    String password=Globals.getPassword();
    String toHash=hashString + password;
    String reply=sha1Hash(toHash).substring(0,16);
    Packet02Handshake hashReply=new Packet02Handshake(out,ptc,thread);
    hashReply.setUsername(reply);
    if (hashReply.packetId == null || hashReply.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    Packet02Handshake hostnameForwarding=new Packet02Handshake(out,ptc,thread);
    hostnameForwarding.setUsername(clientInfo.getHostname());
    if (hostnameForwarding.packetId == null || hostnameForwarding.write(out,ptc,thread,false) == null) {
      return ""String_Node_Str"";
    }
    if (!Globals.isQuiet()) {
      ptc.printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    }
  }
  return null;
}",0.9807608220376038
153274,"public void run(){
  boolean connected=true;
  clientInfo.setForward(false);
  clientInfo.setHostname(null);
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth(),clientInfo);
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
    connected=false;
  }
  if (BanList.banned(clientInfo.getUsername())) {
    printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
    connected=false;
  }
  if (clientInfo.getHostname() == null) {
    clientInfo.setHostname(ReconnectCache.get(clientInfo.getUsername()));
    if (clientInfo.getHostname() == null || clientInfo.getHostname().equals(""String_Node_Str"")) {
      clientInfo.setHostname(defaultHostname);
    }
  }
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      clientInfo.setHostname(redirectLocal);
    }
    printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    String nextHostname=RedirectManager.getNextHostname(listenHostname,clientInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,clientInfo.getHostname());
    if (nextHostname == null || nextPortnum == null) {
      printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"" + clientInfo.getHostname());
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    Socket serverBasicSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    Boolean proxyLogin=RedirectManager.isNextProxy(listenHostname,clientInfo.getHostname());
    if (proxyLogin == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        if (serverLoginPacket.packetId == 0x01) {
          clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        }
 else         if (serverLoginPacket.packetId == (byte)0xFF) {
          PacketFFKick.kickAndClose(clientSocket,this,this,((UnitString)serverLoginPacket.fields[0]).getValue());
          return;
        }
 else {
          PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
          return;
        }
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!clientInfo.getForward()) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (!Globals.isQuiet()) {
            if (clientInfo.getForward()) {
              printLogMessage(""String_Node_Str"");
            }
 else {
              printLogMessage(""String_Node_Str"");
            }
          }
          ReconnectCache.store(clientInfo.getUsername(),clientInfo.getHostname());
          if (clientInfo.getForward()) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}","public void run(){
  boolean connected=true;
  clientInfo.setForward(false);
  clientInfo.setHostname(null);
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth(),clientInfo);
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kickAndClose(clientSocket,this,this,kickMessage);
    connected=false;
    return;
  }
  if (clientInfo.getUsername() == null || BanList.banned(clientInfo.getUsername())) {
    if (clientInfo.getUsername() != null) {
      printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    }
 else {
      printLogMessage(""String_Node_Str"");
    }
    PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
    connected=false;
    return;
  }
  if (connected && clientInfo.getHostname() == null) {
    clientInfo.setHostname(ReconnectCache.get(clientInfo.getUsername()));
    if (clientInfo.getHostname() == null || clientInfo.getHostname().equals(""String_Node_Str"")) {
      clientInfo.setHostname(defaultHostname);
    }
  }
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      clientInfo.setHostname(redirectLocal);
    }
    printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
    String nextHostname=RedirectManager.getNextHostname(listenHostname,clientInfo.getHostname());
    Integer nextPortnum=RedirectManager.getNextPort(listenHostname,clientInfo.getHostname());
    if (nextHostname == null || nextPortnum == null) {
      printLogMessage(""String_Node_Str"" + clientInfo.getHostname());
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"" + clientInfo.getHostname());
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    Socket serverBasicSocket=LocalSocket.openSocket(nextHostname,nextPortnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    Boolean proxyLogin=RedirectManager.isNextProxy(listenHostname,clientInfo.getHostname());
    if (proxyLogin == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this,proxyLogin,clientInfo);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        if (serverLoginPacket.packetId == 0x01) {
          clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        }
 else         if (serverLoginPacket.packetId == (byte)0xFF) {
          PacketFFKick.kickAndClose(clientSocket,this,this,((UnitString)serverLoginPacket.fields[0]).getValue());
          return;
        }
 else {
          PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
          return;
        }
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!clientInfo.getForward()) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (!Globals.isQuiet()) {
            if (clientInfo.getForward()) {
              printLogMessage(""String_Node_Str"");
            }
 else {
              printLogMessage(""String_Node_Str"");
            }
          }
          ReconnectCache.store(clientInfo.getUsername(),clientInfo.getHostname());
          if (clientInfo.getForward()) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}",0.9760727704172434
153275,"synchronized void printLogMessage(String message){
  String username=clientInfo.getUsername();
  if (username == null) {
    Logging.log(""String_Node_Str"" + shortTime.format(new Date()) + ""String_Node_Str""+ clientInfo.getIP()+ ""String_Node_Str""+ clientInfo.getPort()+ ""String_Node_Str""+ message);
  }
 else {
    Logging.log(""String_Node_Str"" + shortTime.format(new Date()) + ""String_Node_Str""+ clientInfo.getIP()+ ""String_Node_Str""+ clientInfo.getPort()+ ""String_Node_Str""+ username+ ""String_Node_Str""+ message);
  }
}","synchronized void printLogMessage(String message){
  String username=(clientInfo == null) ? null : (clientInfo.getUsername());
  if (username == null) {
    Logging.log(""String_Node_Str"" + shortTime.format(new Date()) + ""String_Node_Str""+ clientInfo.getIP()+ ""String_Node_Str""+ clientInfo.getPort()+ ""String_Node_Str""+ message);
  }
 else {
    Logging.log(""String_Node_Str"" + shortTime.format(new Date()) + ""String_Node_Str""+ clientInfo.getIP()+ ""String_Node_Str""+ clientInfo.getPort()+ ""String_Node_Str""+ username+ ""String_Node_Str""+ message);
  }
}",0.8953271028037383
153276,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  boolean first=true;
  if (!full) {
    for (int cnt2=0; cnt2 < cnt; cnt2++) {
      if (first) {
        first=false;
        sb.append(buffer[cnt2]);
      }
 else {
        sb.append(""String_Node_Str"" + buffer[cnt2]);
      }
    }
  }
 else {
    int cntHigh=cnt + size;
    for (int cnt2=cnt; (cnt2 != cnt && cnt2 != cntHigh) || first; cnt2++) {
      if (cnt2 >= size) {
        cnt2=0;
      }
      System.out.println(cnt + ""String_Node_Str"" + cnt2);
      if (first) {
        first=false;
        sb.append(buffer[cnt2]);
      }
 else {
        sb.append(""String_Node_Str"" + buffer[cnt2]);
      }
    }
  }
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  boolean first=true;
  if (!full) {
    for (int cnt2=0; cnt2 < cnt; cnt2++) {
      if (first) {
        first=false;
        sb.append(buffer[cnt2]);
      }
 else {
        sb.append(""String_Node_Str"" + buffer[cnt2]);
      }
    }
  }
 else {
    int cntHigh=cnt + size;
    for (int cnt2=cnt; (cnt2 != cnt && cnt2 != cntHigh) || first; cnt2++) {
      if (cnt2 >= size) {
        cnt2=0;
      }
      if (first) {
        first=false;
        sb.append(buffer[cnt2]);
      }
 else {
        sb.append(""String_Node_Str"" + buffer[cnt2]);
      }
    }
  }
  return sb.toString();
}",0.7369942196531792
153277,"public void run(){
  boolean connected=true;
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth());
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
    connected=false;
  }
  if (BanList.banned(clientInfo.getUsername())) {
    printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
    connected=false;
  }
  String hostname=ReconnectCache.get(clientInfo.getUsername());
  int portnum=ReconnectCache.getPort(hostname,defaultPort);
  hostname=ReconnectCache.getHost(hostname,""String_Node_Str"");
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      String[] split=redirectLocal.split(""String_Node_Str"");
      if (split.length != 2) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        hostname=split[0];
        try {
          portnum=Integer.parseInt(split[1]);
        }
 catch (        NumberFormatException nfe) {
          printLogMessage(""String_Node_Str"");
          connected=false;
        }
      }
    }
    printLogMessage(""String_Node_Str"" + hostname + ""String_Node_Str""+ portnum);
    Socket serverBasicSocket=LocalSocket.openSocket(hostname,portnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      ReconnectCache.store(clientInfo.getUsername(),hostname,portnum);
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!forward) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (forward) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}","public void run(){
  boolean connected=true;
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth());
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
    connected=false;
  }
  if (BanList.banned(clientInfo.getUsername())) {
    printLogMessage(clientInfo.getUsername() + ""String_Node_Str"");
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
    connected=false;
  }
  String hostname=ReconnectCache.get(clientInfo.getUsername());
  int portnum=ReconnectCache.getPort(hostname,defaultPort);
  hostname=ReconnectCache.getHost(hostname,""String_Node_Str"");
  boolean firstConnection=true;
  while (connected && !killed()) {
    String redirectLocal=getRedirect();
    setRedirect(null);
    if (redirectLocal != null) {
      String[] split=redirectLocal.split(""String_Node_Str"");
      if (split.length != 2) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        hostname=split[0];
        try {
          portnum=Integer.parseInt(split[1]);
        }
 catch (        NumberFormatException nfe) {
          printLogMessage(""String_Node_Str"");
          connected=false;
        }
      }
    }
    printLogMessage(""String_Node_Str"" + hostname + ""String_Node_Str""+ portnum);
    Socket serverBasicSocket=LocalSocket.openSocket(hostname,portnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      ReconnectCache.store(clientInfo.getUsername(),hostname,portnum);
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        if (serverLoginPacket.packetId == 0x01) {
          clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        }
 else         if (serverLoginPacket.packetId == (byte)0xFF) {
          PacketFFKick.kickAndClose(clientSocket,this,this,((UnitString)serverLoginPacket.fields[0]).getValue());
          return;
        }
 else {
          PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
          return;
        }
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!forward) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
 else {
          short holdingLocal=getHolding();
          if (holdingLocal != 0) {
            if (!Globals.isQuiet()) {
              printLogMessage(""String_Node_Str"" + holding);
            }
            Packet10HoldingChange holdingChange=new Packet10HoldingChange(serverSocket.out,this,this);
            holdingChange.setSlot(holding);
            if (holdingChange.packetId == null || holdingChange.write(serverSocket.out,this,this,false) == null) {
              printLogMessage(""String_Node_Str"");
              connected=false;
            }
          }
        }
        if (connected) {
          if (forward) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
            connected=getRedirect() != null;
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
    if (connected) {
      if (Globals.isVerbose()) {
        printLogMessage(""String_Node_Str"");
      }
      revive();
    }
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}",0.9705450328565908
153278,"@Override public byte[] pass(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,byte[] buffer,DownlinkState linkState){
  length=lengthUnit.read(in,ptc,thread,serverToClient,linkState);
  if (length == null) {
    return null;
  }
  if (length > 262144) {
    ptc.printLogMessage(""String_Node_Str"" + length + ""String_Node_Str"");
    return null;
  }
  length=lengthUnit.write(out,ptc,thread,serverToClient);
  if (length == null) {
    return null;
  }
  if (buffer == null || buffer.length < length) {
    setupBuffer(buffer);
  }
 else   if (value == null) {
    value=buffer;
  }
  buffer=value;
  int pos=0;
  int bufLength=buffer.length;
  while (pos < length) {
    int read;
    bufLength=Math.min(bufLength,length - pos);
    try {
      read=in.read(value,0,bufLength);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
    try {
      out.write(value,0,read);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
    pos+=read;
  }
  return buffer;
}","@Override public byte[] pass(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,byte[] buffer,DownlinkState linkState){
  length=lengthUnit.read(in,ptc,thread,serverToClient,linkState);
  if (length == null) {
    return null;
  }
  if (length > 262144) {
    ptc.printLogMessage(""String_Node_Str"" + length + ""String_Node_Str"");
    return null;
  }
  length=lengthUnit.write(out,ptc,thread,serverToClient);
  if (length == null) {
    return null;
  }
  if (buffer == null || buffer.length < length) {
    setupBuffer(buffer);
  }
 else   if (value == null) {
    value=buffer;
  }
  setupBuffer(null);
  buffer=value;
  int pos=0;
  int bufLength=buffer.length;
  while (pos < length) {
    int read;
    bufLength=Math.min(bufLength,length - pos);
    try {
      read=in.read(value,0,bufLength);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
    try {
      out.write(value,0,read);
    }
 catch (    SocketTimeoutException ste) {
      if (!thread.killed()) {
        timeout++;
        if (timeout > 20) {
          ptc.printLogMessage(""String_Node_Str"");
          return null;
        }
        continue;
      }
      return null;
    }
catch (    IOException e) {
      ptc.printLogMessage(""String_Node_Str"");
      return null;
    }
    pos+=read;
  }
  return buffer;
}",0.9936111956191056
153279,"@Override public ItemStack read(DataInputStream in,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,DownlinkState linkState){
  while (true) {
    try {
      value.blockId=in.readShort();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    if (value.blockId < 0) {
      return value;
    }
    try {
      value.amount=in.readByte();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    try {
      value.damage=in.readShort();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    super.timeout=0;
    return value;
  }
}","@Override public ItemStack read(DataInputStream in,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,DownlinkState linkState){
  if (value == null) {
    value=new ItemStack();
  }
  while (true) {
    try {
      value.blockId=in.readShort();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    if (value.blockId < 0) {
      return value;
    }
    try {
      value.amount=in.readByte();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    try {
      value.damage=in.readShort();
    }
 catch (    SocketTimeoutException toe) {
      if (timedOut(thread)) {
        continue;
      }
      return null;
    }
catch (    IOException e) {
      return null;
    }
    super.timeout=0;
    return value;
  }
}",0.9722222222222222
153280,"public void run(){
  boolean eof=false;
  byte[] buffer=new byte[131072];
  DownlinkState linkState=new DownlinkState();
  while (!eof && !super.killed()) {
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
      continue;
    }
    if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
      continue;
    }
    Packet currentPacket=new Packet(packetId);
    if (Globals.isVerbose()) {
      ptc.printLogMessage(""String_Node_Str"" + packetId);
    }
    if (currentPacket.pass(in,out,ptc,this,true,buffer,linkState) == null) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
      continue;
    }
  }
  ptc.interrupt();
}","public void run(){
  boolean eof=false;
  byte[] buffer=new byte[131072];
  DownlinkState linkState=new DownlinkState();
  while (!eof && !super.killed()) {
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    Packet currentPacket=new Packet(packetId);
    if (Globals.isVerbose()) {
      ptc.printLogMessage(""String_Node_Str"" + packetId);
    }
    if (currentPacket.pass(in,out,ptc,this,true,buffer,linkState) == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
  }
  ptc.interrupt();
}",0.8708920187793427
153281,"public void run(){
  boolean eof=false;
  byte[] buffer=new byte[131072];
  while (!eof && !super.killed()) {
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
      continue;
    }
    if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
      continue;
    }
    Packet currentPacket=new Packet(packetId);
    if (Globals.isVerbose()) {
      ptc.printLogMessage(""String_Node_Str"" + packetId);
    }
    if (currentPacket.pass(in,out,ptc,this,false,buffer,null) == null) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
      continue;
    }
  }
  ptc.interrupt();
}","public void run(){
  boolean eof=false;
  byte[] buffer=new byte[131072];
  while (!eof && !super.killed()) {
    Byte packetId=UnitByte.getByte(in,ptc,this);
    if (packetId == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
    if (packetId == 0xFF) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
    }
    if (UnitByte.writeByte(out,packetId,ptc,this) == null) {
      ptc.printLogMessage(""String_Node_Str"");
      eof=true;
      continue;
    }
    Packet currentPacket=new Packet(packetId);
    if (Globals.isVerbose()) {
      ptc.printLogMessage(""String_Node_Str"" + packetId);
    }
    if (currentPacket.pass(in,out,ptc,this,false,buffer,null) == null) {
      if (!Globals.isQuiet()) {
        ptc.printLogMessage(""String_Node_Str"");
      }
      eof=true;
      continue;
    }
  }
  ptc.interrupt();
}",0.8079710144927537
153282,"@Override public Packet pass(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,byte[] buffer,DownlinkState linkState){
  if (!setupFields()) {
    ptc.printLogMessage(""String_Node_Str"" + packetId);
  }
  if (Globals.isVerbose()) {
    ptc.printLogMessage((serverToClient ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + packetId);
  }
  int length=fields.length;
  for (int cnt=0; cnt < length; cnt++) {
    if (Globals.isVerbose()) {
      ptc.printLogMessage((serverToClient ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + fields[cnt].getClass().toString());
    }
    Object val=fields[cnt].pass(in,out,ptc,null,serverToClient,buffer,linkState);
    if (Globals.isVerbose()) {
      ptc.printLogMessage(cnt + ""String_Node_Str"" + val);
    }
    if (val == null) {
      return null;
    }
  }
  entityDestroyCheck(linkState);
  return this;
}","@Override public Packet pass(DataInputStream in,DataOutputStream out,PassthroughConnection ptc,KillableThread thread,boolean serverToClient,byte[] buffer,DownlinkState linkState){
  if (!setupFields()) {
    ptc.printLogMessage(""String_Node_Str"" + packetId);
  }
  if (Globals.isVerbose()) {
    ptc.printLogMessage((serverToClient ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + packetId);
  }
  int length=fields.length;
  for (int cnt=0; cnt < length; cnt++) {
    if (Globals.isVerbose()) {
      ptc.printLogMessage((serverToClient ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + fields[cnt].getClass().toString());
    }
    Object val=fields[cnt].pass(in,out,ptc,thread,serverToClient,buffer,linkState);
    if (Globals.isVerbose()) {
      ptc.printLogMessage(cnt + ""String_Node_Str"" + val);
    }
    if (val == null) {
      return null;
    }
  }
  entityDestroyCheck(linkState);
  return this;
}",0.9946581196581196
153283,"public void run(){
  boolean connected=true;
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth());
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
    connected=false;
  }
  String hostname=ReconnectCache.get(clientInfo.getUsername());
  int portnum=ReconnectCache.getPort(hostname,defaultPort);
  hostname=ReconnectCache.getHost(hostname,""String_Node_Str"");
  boolean firstConnection=true;
  while (connected && !killed()) {
    Socket serverBasicSocket=LocalSocket.openSocket(hostname,portnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      ReconnectCache.store(clientInfo.getUsername(),hostname,portnum);
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!forward) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            printLogMessage(""String_Node_Str"" + Globals.getDimension());
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            printLogMessage(""String_Node_Str"");
            connected=false;
          }
        }
        if (connected) {
          if (forward) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}","public void run(){
  boolean connected=true;
  LocalSocket clientSocket=new LocalSocket(socketToClient,this);
  if (!clientSocket.success) {
    printLogMessage(""String_Node_Str"");
    return;
  }
  String kickMessage=Packet01Login.processLogin(clientSocket.in,clientSocket.out,this,this,Globals.isAuth());
  if (kickMessage != null) {
    printLogMessage(kickMessage);
    PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
    connected=false;
  }
  String hostname=ReconnectCache.get(clientInfo.getUsername());
  int portnum=ReconnectCache.getPort(hostname,defaultPort);
  hostname=ReconnectCache.getHost(hostname,""String_Node_Str"");
  boolean firstConnection=true;
  while (connected && !killed()) {
    Socket serverBasicSocket=LocalSocket.openSocket(hostname,portnum,this);
    if (serverBasicSocket == null) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
      LocalSocket.closeSocket(clientSocket.socket,this);
      return;
    }
    LocalSocket serverSocket=new LocalSocket(serverBasicSocket,this);
    if (!serverSocket.success) {
      printLogMessage(""String_Node_Str"");
      PacketFFKick.kickAndClose(clientSocket,this,this,""String_Node_Str"");
      return;
    }
    kickMessage=Packet01Login.serverLogin(serverSocket.in,serverSocket.out,this,this);
    if (kickMessage != null) {
      printLogMessage(kickMessage);
      PacketFFKick.kick(clientSocket.out,this,this,kickMessage);
      connected=false;
    }
    if (connected) {
      ReconnectCache.store(clientInfo.getUsername(),hostname,portnum);
      Packet01Login serverLoginPacket=new Packet01Login(serverSocket.in,this,this);
      if (serverLoginPacket.packetId == null || serverLoginPacket.read(serverSocket.in,this,this,true,null) == null) {
        printLogMessage(""String_Node_Str"");
        connected=false;
      }
 else {
        clientInfo.setPlayerEntityId(serverLoginPacket.getVersion());
        if (firstConnection) {
          firstConnection=false;
          Packet01Login clientLoginPacket=new Packet01Login(clientSocket.out,this,this);
          if (!forward) {
            clientLoginPacket.setVersion(Globals.getDefaultPlayerId());
          }
 else {
            clientLoginPacket.setVersion(serverLoginPacket.getVersion());
          }
          if (Globals.getDimension() == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + serverLoginPacket.getDimension());
            }
            clientLoginPacket.setDimension(serverLoginPacket.getDimension());
          }
 else {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"" + Globals.getDimension());
            }
            clientLoginPacket.setDimension(Globals.getDimension());
          }
          clientLoginPacket.setMapSeed(serverLoginPacket.getMapSeed());
          clientLoginPacket.setUsername(serverLoginPacket.getUsername());
          if (clientLoginPacket.packetId == null || clientLoginPacket.write(clientSocket.out,this,this,true) == null) {
            if (Globals.isVerbose()) {
              printLogMessage(""String_Node_Str"");
            }
            connected=false;
          }
        }
        if (connected) {
          if (forward) {
            serverToClient=new DataStreamBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
 else {
            serverToClient=new DataStreamDownLinkBridge(serverSocket.in,clientSocket.out,this);
            clientToServer=new DataStreamUpLinkBridge(clientSocket.in,serverSocket.out,this);
            connected=false;
          }
          boolean localEnabled;
synchronized (enabledSync) {
            localEnabled=enabled;
            if (enabled) {
              serverToClient.start();
              clientToServer.start();
            }
          }
          if (localEnabled) {
            while ((clientToServer.isAlive() || serverToClient.isAlive())) {
              try {
                clientToServer.join(500);
                serverToClient.join(500);
              }
 catch (              InterruptedException ie) {
                kill();
              }
              if (killed() || (!(clientToServer.isAlive() && serverToClient.isAlive()))) {
                clientToServer.interrupt();
                serverToClient.interrupt();
              }
            }
          }
        }
      }
    }
    printLogMessage(""String_Node_Str"");
    LocalSocket.closeSocket(serverSocket.socket,this);
  }
  if (!getKickMessageSent()) {
    PacketFFKick.kick(clientSocket.out,this,this,""String_Node_Str"");
  }
  printLogMessage(""String_Node_Str"");
  LocalSocket.closeSocket(clientSocket.socket,this);
}",0.9825415299968258
153284,"boolean timedOut(KillableThread thread){
  if (thread == null || (!thread.killed)) {
    timeout++;
    if (timeout >= 20) {
      return false;
    }
 else {
      return true;
    }
  }
 else {
    return false;
  }
}","boolean timedOut(KillableThread thread){
  if (thread == null || (!thread.killed())) {
    timeout++;
    if (timeout >= 20) {
      return false;
    }
 else {
      return true;
    }
  }
 else {
    return false;
  }
}",0.9954545454545456
153285,"public static ApiException create(StatusLine statusLine,Object jsonResponse){
  int statusCode=statusLine.getStatusCode();
  Map<String,Object> response=(Map<String,Object>)jsonResponse;
  return new ApiException(statusCode,response.get(""String_Node_Str"").toString(),jsonResponse);
}","public static ApiException create(StatusLine statusLine,Map<String,Object> jsonResponse){
  if (jsonResponse == null) {
    jsonResponse=new HashMap<String,Object>();
  }
  final String errorMessage=jsonResponse.get(ERRORMSG) == null ? ""String_Node_Str"" : jsonResponse.get(ERRORMSG).toString();
  return new ApiException(statusLine.getStatusCode(),errorMessage,jsonResponse);
}",0.4696969696969697
153286,"public ApiException(int statusCode,String reason,Object jsonResponse){
  super(reason);
  logger.warn(""String_Node_Str"",statusCode,reason);
  this.jsonResponse=(Map<String,Object>)jsonResponse;
  this.statusCode=statusCode;
}","public ApiException(int statusCode,String reason,Map<String,Object> jsonResponse){
  super(reason);
  logger.warn(""String_Node_Str"",statusCode,reason);
  this.jsonResponse=jsonResponse;
  this.statusCode=statusCode;
}",0.9276018099547512
153287,"public ResourceNotFoundException(int statusCode,String reason,Object jsonResponse){
  super(statusCode,reason,jsonResponse);
}","public ResourceNotFoundException(int statusCode,String reason,Map<String,Object> jsonResponse){
  super(statusCode,reason,jsonResponse);
}",0.9545454545454546
153288,"public UnAuthorizedException(int statusCode,String reason,Object jsonResponse){
  super(statusCode,reason,jsonResponse);
}","public UnAuthorizedException(int statusCode,String reason,Map<String,Object> jsonResponse){
  super(statusCode,reason,jsonResponse);
}",0.953125
153289,"public synchronized String read(String regionFilePath,String sequenceNameRequested) throws IOException {
  File regionFile=new File(regionFilePath);
  BufferedReader fileReader=NonDatabaseDataSourceIndexBuilder.getReader(regionFile);
  try {
    String line=""String_Node_Str"";
    boolean currentSequenceMatches=false;
    while ((line=fileReader.readLine()) != null) {
      if (line.startsWith(""String_Node_Str"")) {
        String sequenceName=line.substring(1);
        int spacePos=sequenceName.indexOf(""String_Node_Str"");
        if (spacePos != -1) {
          sequenceName=sequenceName.substring(0,spacePos);
        }
        currentSequenceMatches=sequenceName.equals(sequenceNameRequested);
        logger.info(String.format(""String_Node_Str"",sequenceName));
      }
 else       if (currentSequenceMatches) {
        sequenceStringbuffer.append(line);
      }
    }
  }
  finally {
    fileReader.close();
  }
  logger.info(String.format(""String_Node_Str"",sequenceStringbuffer.length()));
  return sequenceStringbuffer.toString();
}","public synchronized String read(String regionFilePath,String sequenceNameRequested) throws IOException {
  File regionFile=new File(regionFilePath);
  BufferedReader fileReader=NonDatabaseDataSourceIndexBuilder.getReader(regionFile);
  StringBuffer sequenceStringbuffer=new StringBuffer();
  try {
    String line=""String_Node_Str"";
    boolean currentSequenceMatches=false;
    while ((line=fileReader.readLine()) != null) {
      if (line.startsWith(""String_Node_Str"")) {
        String sequenceName=line.substring(1);
        int spacePos=sequenceName.indexOf(""String_Node_Str"");
        if (spacePos != -1) {
          sequenceName=sequenceName.substring(0,spacePos);
        }
        currentSequenceMatches=sequenceName.equals(sequenceNameRequested);
        logger.info(String.format(""String_Node_Str"",sequenceName));
      }
 else       if (currentSequenceMatches) {
        sequenceStringbuffer.append(line);
      }
    }
  }
  finally {
    fileReader.close();
  }
  logger.info(String.format(""String_Node_Str"",sequenceStringbuffer.length()));
  return sequenceStringbuffer.toString();
}",0.9738317757009346
153290,"@Override public Sequence sequenceLength(String region){
  return sequence(region);
}","@Override public Sequence sequenceLength(String region){
  Sequence sequence=sequence(region);
  sequence.dna=""String_Node_Str"";
  return sequence;
}",0.7008547008547008
153291,"@Override public Sequence sequence(String region){
  Sequence sequence=(Sequence)Hazelcast.getMap(""String_Node_Str"").get(region);
  if (sequence != null)   return sequence;
  sequence=new Sequence();
  sequence.dna=""String_Node_Str"";
  sequence.length=0;
  sequence.organism_id=-1;
  Feature regionFeature=this.getInfo(region,null,null);
  String regionFilePath=null;
  for (  Property prop : regionFeature.properties) {
    if (prop.name.equals(""String_Node_Str"")) {
      regionFilePath=prop.value;
    }
  }
  if (regionFilePath != null) {
    try {
      sequence.dna=extractor.read(regionFilePath,region);
      ;
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"" + region);
    }
  }
  sequence.length=sequence.dna.length();
  sequence.organism_id=regionFeature.organism_id;
  Hazelcast.getMap(""String_Node_Str"").put(region,sequence);
  return sequence;
}","@Override public Sequence sequence(String region){
  Sequence sequenceCached=(Sequence)Hazelcast.getMap(""String_Node_Str"").get(region);
  if (sequenceCached != null) {
    return clone(sequenceCached);
  }
  Sequence sequence=new Sequence();
  sequence.dna=""String_Node_Str"";
  sequence.organism_id=-1;
  Feature regionFeature=this.getInfo(region,null,null);
  String regionFilePath=null;
  if (regionFeature != null) {
    sequence.organism_id=regionFeature.organism_id;
    for (    Property prop : regionFeature.properties) {
      if (prop.name.equals(""String_Node_Str"")) {
        regionFilePath=prop.value;
      }
    }
    if (regionFilePath != null) {
      try {
        sequence.dna=extractor.read(regionFilePath,region);
        ;
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"" + region);
      }
    }
  }
  sequence.length=sequence.dna.length();
  Hazelcast.getMap(""String_Node_Str"").put(region,sequence);
  return clone(sequence);
}",0.7801494130202775
153292,"@Override public Sequence sequenceTrimmed(String region,Integer start,Integer end){
  Sequence s=sequence(region);
  if (start == null && end == null) {
    s.start=0;
    s.end=s.length - 1;
    s.region=region;
    return s;
  }
  int max=s.dna.length() - 1;
  int actualStart=start - 1;
  int actualEnd=(end < max) ? end : max;
  s.dna=s.dna.substring(actualStart,actualEnd);
  s.start=start;
  s.end=end;
  return s;
}","@Override public Sequence sequenceTrimmed(String region,Integer start,Integer end){
  logger.info(String.format(""String_Node_Str"",region,start,end));
  Sequence sequence=sequence(region);
  if (start == null && end == null) {
    sequence.start=0;
    sequence.end=sequence.length - 1;
    sequence.region=region;
    return sequence;
  }
  int max=sequence.dna.length() - 1;
  if (max < 0) {
    sequence.start=0;
    sequence.end=0;
    return sequence;
  }
  int actualStart=start;
  int actualEnd=(end < max) ? end : max;
  logger.info(String.format(""String_Node_Str"",max,actualStart,actualEnd));
  sequence.dna=sequence.dna.substring(actualStart,actualEnd);
  sequence.start=start;
  sequence.end=end;
  return sequence;
}",0.5395996518711923
153293,"/** 
 * The exclude parameter works in this form: &exclude=repeat_region&exclude=gene but not this form : &exclude[]=repeat_region&exclude[]=gene which JQuery would typically send. I think we can resolve this by setting  jQuery.ajaxSettings.traditional = true; or $.ajaxSetup({ traditional: true });  in Web-Artemis.
 * @param region
 * @param start
 * @param end
 * @param exclude
 * @return
 * @throws CrawlException
 */
@RequestMapping(method=RequestMethod.GET,value={""String_Node_Str"",""String_Node_Str""}) @ResourceDescription(""String_Node_Str"") public List<LocatedFeature> locations(@RequestParam(""String_Node_Str"") String region,@RequestParam(value=""String_Node_Str"",required=false) Integer start,@RequestParam(value=""String_Node_Str"",required=false) Integer end,@RequestParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") Boolean exclude,@RequestParam(value=""String_Node_Str"",required=false) @ResourceDescription(""String_Node_Str"") List<String> types) throws CrawlException {
  if (exclude == null)   exclude=true;
  if (start == null)   start=0;
  if (end == null)   end=regionsMapper.sequence(region).dna.length();
  Set<String> geneTypes=new HashSet<String>();
  if (types != null) {
    geneTypes.addAll(types);
  }
  if (!geneTypes.contains(""String_Node_Str"")) {
    geneTypes.add(""String_Node_Str"");
  }
  if (!geneTypes.contains(""String_Node_Str"")) {
    geneTypes.add(""String_Node_Str"");
  }
  logger.info(String.format(""String_Node_Str"",region,start,end,exclude));
  logger.info(""String_Node_Str"" + geneTypes);
  int actualStart=start;
  int actualEnd=end;
  LocationBoundaries expandedBoundaries=regionsMapper.locationsMinAndMaxBoundaries(region,start,end,exclude,new ArrayList<String>(geneTypes));
  if (expandedBoundaries != null) {
    if (expandedBoundaries.start != null && expandedBoundaries.start < start) {
      actualStart=expandedBoundaries.start;
    }
    if (expandedBoundaries.end != null && expandedBoundaries.end > end) {
      actualEnd=expandedBoundaries.end;
    }
  }
  logger.debug(String.format(""String_Node_Str"",region,actualStart,actualEnd,exclude));
  return regionsMapper.locations(region,actualStart,actualEnd,exclude,new ArrayList<String>(geneTypes));
}","/** 
 * The exclude parameter works in this form: &exclude=repeat_region&exclude=gene but not this form : &exclude[]=repeat_region&exclude[]=gene which JQuery would typically send. I think we can resolve this by setting  jQuery.ajaxSettings.traditional = true; or $.ajaxSetup({ traditional: true });  in Web-Artemis.
 * @param region
 * @param start
 * @param end
 * @param exclude
 * @return
 * @throws CrawlException
 */
@RequestMapping(method=RequestMethod.GET,value={""String_Node_Str"",""String_Node_Str""}) @ResourceDescription(""String_Node_Str"") public List<LocatedFeature> locations(@RequestParam(""String_Node_Str"") String region,@RequestParam(value=""String_Node_Str"",required=false) Integer start,@RequestParam(value=""String_Node_Str"",required=false) Integer end,@RequestParam(value=""String_Node_Str"") Boolean exclude,@RequestParam(value=""String_Node_Str"",required=false) @ResourceDescription(""String_Node_Str"") List<String> types) throws CrawlException {
  if (exclude == null)   exclude=true;
  if (start == null)   start=0;
  if (end == null)   end=regionsMapper.sequence(region).dna.length();
  Set<String> geneTypes=new HashSet<String>();
  if (types != null) {
    geneTypes.addAll(types);
  }
  Set<String> boundaryTypes=new HashSet<String>(geneTypes);
  if (exclude) {
    boundaryTypes.remove(""String_Node_Str"");
    boundaryTypes.remove(""String_Node_Str"");
  }
 else {
    boundaryTypes.add(""String_Node_Str"");
    boundaryTypes.add(""String_Node_Str"");
  }
  logger.info(String.format(""String_Node_Str"",region,start,end,exclude));
  logger.info(""String_Node_Str"" + geneTypes);
  int actualStart=start;
  int actualEnd=end;
  LocationBoundaries expandedBoundaries=regionsMapper.locationsMinAndMaxBoundaries(region,start,end,exclude,new ArrayList<String>(boundaryTypes));
  logger.debug(expandedBoundaries.start);
  logger.debug(expandedBoundaries.end);
  if (expandedBoundaries != null) {
    if (expandedBoundaries.start != null && expandedBoundaries.start < start) {
      actualStart=expandedBoundaries.start;
    }
    if (expandedBoundaries.end != null && expandedBoundaries.end > end) {
      actualEnd=expandedBoundaries.end;
    }
  }
  logger.debug(String.format(""String_Node_Str"",region,actualStart,actualEnd,exclude));
  return regionsMapper.locations(region,actualStart,actualEnd,exclude,new ArrayList<String>(geneTypes));
}",0.7928916191311979
153294,"@Override public Sequence sequenceTrimmed(String region,Integer start,Integer end){
  Sequence s=sequence(region);
  if (start == null && end == null) {
    s.start=0;
    s.end=s.length - 1;
    s.region=region;
    return s;
  }
  int actualStart=start - 1;
  int actualEnd=end - 1;
  s.dna=s.dna.substring(actualStart,actualEnd);
  return s;
}","@Override public Sequence sequenceTrimmed(String region,Integer start,Integer end){
  Sequence s=sequence(region);
  if (start == null && end == null) {
    s.start=0;
    s.end=s.length - 1;
    s.region=region;
    return s;
  }
  int actualStart=start - 1;
  int actualEnd=end;
  s.dna=s.dna.substring(actualStart,actualEnd);
  return s;
}",0.994186046511628
153295,"public void put(String key,String obj){
  if (obj.contains(""String_Node_Str"") && obj.contains(""String_Node_Str"")) {
    GFFAttributeMapList list=new GFFAttributeMapList();
    list.parseAttributes(obj);
    map.put(key,list);
  }
 else {
    String quote=""String_Node_Str"";
    String quote2=""String_Node_Str"";
    if ((obj.startsWith(quote) && obj.endsWith(quote)) || (obj.startsWith(quote2) && obj.endsWith(quote2))) {
      String oldObj=obj;
      obj=obj.substring(1,obj.length() - 2);
    }
    map.put(key,obj);
    if (key.equals(""String_Node_Str"")) {
      if (this.feature != null) {
        this.feature.id=obj;
      }
    }
  }
}","public void put(String key,String obj){
  if (obj == null || obj.length() == 0) {
    return;
  }
  if (obj.contains(""String_Node_Str"") && obj.contains(""String_Node_Str"")) {
    GFFAttributeMapList list=new GFFAttributeMapList();
    list.parseAttributes(obj);
    map.put(key,list);
  }
 else {
    String quote=""String_Node_Str"";
    String quote2=""String_Node_Str"";
    if ((obj.startsWith(quote) && obj.endsWith(quote)) || (obj.startsWith(quote2) && obj.endsWith(quote2))) {
      if (obj.length() <= 2)       return;
      obj=obj.substring(1,obj.length() - 1);
    }
    map.put(key,obj);
    if (key.equals(""String_Node_Str"")) {
      if (this.feature != null) {
        this.feature.id=obj;
      }
    }
  }
}",0.9176470588235294
153296,"public static LocatedFeature fromFeature(Feature feature){
  LocatedFeature lFeature=new LocatedFeature();
  for (  Field field : Feature.class.getFields()) {
    try {
      Object o=field.get(feature);
      if (o != null) {
        field.set(lFeature,o);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  Coordinates c=feature.coordinates.get(0);
  lFeature.fmax=c.fmax;
  lFeature.fmin=c.fmin;
  lFeature.region=c.region;
  lFeature.phase=c.phase;
  lFeature.strand=c.strand;
  return lFeature;
}","public static LocatedFeature fromFeature(Feature feature){
  LocatedFeature lFeature=new LocatedFeature();
  for (  Field field : Feature.class.getFields()) {
    try {
      Object o=field.get(feature);
      if (o != null) {
        field.set(lFeature,o);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  boolean found=false;
  if (feature.coordinates != null) {
    for (    Coordinates c : feature.coordinates) {
      if (c.toplevel) {
        lFeature.fmax=c.fmax;
        lFeature.fmin=c.fmin;
        lFeature.region=c.region;
        lFeature.phase=c.phase;
        lFeature.strand=c.strand;
        found=true;
        break;
      }
    }
  }
  if (!found) {
    logger.warn(""String_Node_Str"" + feature.uniqueName + ""String_Node_Str"");
  }
  return lFeature;
}",0.5887573964497042
153297,"void run() throws CrawlException, ParseException, IOException {
  setupIndex();
  setupSession();
  organismMapper=session.getMapper(OrganismsMapper.class);
  featuresMapper=session.getMapper(FeaturesMapper.class);
  featureMapper=session.getMapper(FeatureMapper.class);
  regionsMapper=session.getMapper(RegionsMapper.class);
  termsMapper=session.getMapper(TermsMapper.class);
  esOrganismMapper=new ElasticSearchOrganismsMapper();
  esOrganismMapper.setConnection(connection);
  esFeatureMapper=new ElasticSearchFeatureMapper();
  esFeatureMapper.setConnection(connection);
  esRegionsMapper=new ElasticSearchRegionsMapper();
  esRegionsMapper.setConnection(connection);
  List<LocatedFeature> features=null;
  if (region != null) {
    makeRegion(region);
    int start=0;
    int end=regionsMapper.sequence(region).length;
    features=regionsMapper.locations(region,start,end,false,null);
    for (    LocatedFeature f : features) {
      f.region=region;
    }
  }
 else   if (since != null) {
    List<Feature> modifiedFeatures=null;
    if (organismCommonName != null) {
      Organism o=organismMapper.getByCommonName(organismCommonName);
      modifiedFeatures=featuresMapper.timelastmodified(getDate(since),o.ID);
    }
 else {
      modifiedFeatures=featuresMapper.timelastmodified(getDate(since),null);
    }
    List<String> modifiedFeatureNames=new ArrayList<String>();
    for (    Feature f : modifiedFeatures) {
      modifiedFeatureNames.add(f.uniqueName);
    }
    int chunk=20;
    features=new ArrayList<LocatedFeature>();
    for (int i=0; i <= modifiedFeatureNames.size(); i+=chunk) {
      int ii=i + chunk;
      if (ii > modifiedFeatureNames.size()) {
        ii=modifiedFeatureNames.size();
      }
      List<String> sublist=modifiedFeatureNames.subList(i,ii);
      List<Feature> featuresWithCoordinates=featuresMapper.coordinates(sublist,null);
      for (      Feature f : featuresWithCoordinates) {
        LocatedFeature lf=LocatedFeatureUtil.fromFeature(f);
        features.add(lf);
      }
    }
  }
 else {
    if (organismCommonName != null) {
      Organism o=organismMapper.getByCommonName(organismCommonName);
      createOrganism(o);
    }
 else {
      for (      Organism o : organismMapper.list()) {
        createOrganism(o);
      }
    }
    return;
  }
  FeatureFiller filler=new FeatureFiller(featureMapper,featuresMapper,termsMapper,features);
  filler.fill();
  generateAllOrganisms(features);
  generateAllSequences(features);
  for (  Feature f : features) {
    esFeatureMapper.createOrUpdate(f);
  }
}","void run() throws CrawlException, ParseException, IOException {
  setupIndex();
  setupSession();
  organismMapper=session.getMapper(OrganismsMapper.class);
  featuresMapper=session.getMapper(FeaturesMapper.class);
  featureMapper=session.getMapper(FeatureMapper.class);
  regionsMapper=session.getMapper(RegionsMapper.class);
  termsMapper=session.getMapper(TermsMapper.class);
  auditMapper=session.getMapper(AuditMapper.class);
  relationships.add(CvtermUtil.makeTerm(termsMapper,""String_Node_Str"",""String_Node_Str""));
  relationships.add(CvtermUtil.makeTerm(termsMapper,""String_Node_Str"",""String_Node_Str""));
  esOrganismMapper=new ElasticSearchOrganismsMapper();
  esOrganismMapper.setConnection(connection);
  esFeatureMapper=new ElasticSearchFeatureMapper();
  esFeatureMapper.setConnection(connection);
  esRegionsMapper=new ElasticSearchRegionsMapper();
  esRegionsMapper.setConnection(connection);
  SQLIndexer indexer=new SQLIndexer();
  indexer.featureMapper=featureMapper;
  indexer.featuresMapper=featuresMapper;
  indexer.regionsMapper=regionsMapper;
  indexer.organismMapper=organismMapper;
  indexer.termsMapper=termsMapper;
  indexer.esFeatureMapper=esFeatureMapper;
  indexer.esOrganismMapper=esOrganismMapper;
  indexer.esRegionsMapper=esRegionsMapper;
  indexer.relationships=relationships;
  indexer.auditMapper=auditMapper;
  indexer.types=types;
  indexer.exclude=exclude;
  logger.info(String.format(""String_Node_Str"",indexer.exclude,indexer.types));
  Organism o=null;
  if (organismCommonName != null) {
    o=organismMapper.getByCommonName(organismCommonName);
  }
  if (region != null) {
    if (features) {
      indexer.indexRegionContents(region);
    }
 else {
      indexer.indexRegion(region);
    }
  }
 else   if (since != null) {
    indexer.indexFeaturesSince(getDate(since),o);
  }
 else {
    if (o == null) {
      if (features) {
        throw new RuntimeException(""String_Node_Str"");
      }
 else {
        indexer.indexOrganisms();
      }
    }
 else {
      if (features) {
        indexer.indexOrganismContents(o);
      }
 else {
        indexer.indexOrganism(o);
      }
    }
  }
}",0.3558491370125719
153298,"public String getActualSequenceName(int fileID,String sequenceName) throws Exception {
  Alignment alignment=alignmentStore.getAlignment(fileID);
  SAMFileReader file=alignment.getReader();
  List<AlignmentSequenceAlias> sequences=alignmentStore.getSequences();
  for (  SAMSequenceRecord ssr : file.getFileHeader().getSequenceDictionary().getSequences()) {
    String currentName=ssr.getSequenceName();
    logger.info(String.format(""String_Node_Str"",currentName,sequenceName));
    if (currentName.equals(sequenceName)) {
      return currentName;
    }
    for (    AlignmentSequenceAlias sequenceAlias : sequences) {
      logger.info(String.format(""String_Node_Str"",sequenceAlias.alias,sequenceName));
      if (sequenceAlias.alias.equals(sequenceName)) {
        return sequenceAlias.name;
      }
    }
  }
  return null;
}","public String getActualSequenceName(int fileID,String sequenceName) throws Exception {
  Alignment alignment=alignmentStore.getAlignment(fileID);
  SAMFileReader file=alignment.getReader();
  List<AlignmentSequenceAlias> sequences=alignmentStore.getSequences();
  for (  SAMSequenceRecord ssr : file.getFileHeader().getSequenceDictionary().getSequences()) {
    String currentName=ssr.getSequenceName();
    if (currentName.equals(sequenceName)) {
      return currentName;
    }
    for (    AlignmentSequenceAlias sequenceAlias : sequences) {
      if (sequenceAlias.alias.equals(sequenceName)) {
        return sequenceAlias.name;
      }
    }
  }
  return null;
}",0.5901201602136181
153299,"public List<FileInfo> listwithsequence(String sequence) throws Exception {
  Map<Integer,Alignment> map=new HashMap<Integer,Alignment>();
  for (  Alignment alignment : alignmentStore.getAlignments()) {
    SAMFileReader file=alignment.getReader();
    Integer fileID=alignment.fileID;
    if (map.containsKey(fileID)) {
      continue;
    }
    for (    SAMSequenceRecord ssr : file.getFileHeader().getSequenceDictionary().getSequences()) {
      if (ssr.getSequenceName().equals(sequence) || this.getActualSequenceName(fileID,sequence) != null) {
        map.put(fileID,alignment);
        continue;
      }
    }
  }
  return list(new ArrayList<Alignment>(map.values()));
}","public List<FileInfo> listwithsequence(String sequence) throws Exception {
  Map<Integer,Alignment> map=new HashMap<Integer,Alignment>();
  for (  Alignment alignment : alignmentStore.getAlignments()) {
    SAMFileReader file=alignment.getReader();
    Integer fileID=alignment.fileID;
    if (map.containsKey(fileID)) {
      continue;
    }
    String actualSequenceName=getActualSequenceName(fileID,sequence);
    for (    SAMSequenceRecord ssr : file.getFileHeader().getSequenceDictionary().getSequences()) {
      if (actualSequenceName == null) {
        continue;
      }
      if (actualSequenceName.equals(ssr.getSequenceName())) {
        map.put(fileID,alignment);
      }
    }
  }
  return list(new ArrayList<Alignment>(map.values()));
}",0.716187806587246
153300,"@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,332,500);
  view=new ImageView();
  container.getChildren().add(view);
  service=new Service<Image>(){
    @Override protected Task createTask(){
      return new Task<Image>(){
        @Override protected Image call() throws Exception {
          return new Image(""String_Node_Str"",332.0,500.0,true,true);
        }
      }
;
    }
  }
;
  service.stateProperty().addListener(new ChangeListener<Worker.State>(){
    public void changed(    ObservableValue<? extends Worker.State> state,    Worker.State oldValue,    Worker.State newValue){
      if (newValue == Worker.State.SUCCEEDED) {
        Image image=service.getValue();
        view.setImage(image);
      }
    }
  }
);
  service.start();
  stage.setScene(scene);
  stage.show();
}","@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,332,500);
  view=new ImageView();
  container.getChildren().add(view);
  service=new Service<Image>(){
    @Override protected Task createTask(){
      return new Task<Image>(){
        @Override protected Image call() throws Exception {
          return new Image(""String_Node_Str"",332.0,500.0,true,true);
        }
      }
;
    }
  }
;
  service.stateProperty().addListener(new ChangeListener<State>(){
    @Override public void changed(    ObservableValue<? extends State> state,    State oldValue,    State newValue){
      if (newValue == State.SUCCEEDED) {
        Image image=service.getValue();
        view.setImage(image);
      }
    }
  }
);
  service.start();
  stage.setScene(scene);
  stage.show();
}",0.9742120343839542
153301,"public void changed(ObservableValue<? extends Worker.State> state,Worker.State oldValue,Worker.State newValue){
  if (newValue == Worker.State.SUCCEEDED) {
    Image image=service.getValue();
    view.setImage(image);
  }
}","@Override public void changed(ObservableValue<? extends State> state,State oldValue,State newValue){
  if (newValue == State.SUCCEEDED) {
    Image image=service.getValue();
    view.setImage(image);
  }
}",0.794392523364486
153302,"@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,100);
  Rectangle rect=new Rectangle(50,10,50,30);
  rect.setFill(Color.RED);
  container.getChildren().add(rect);
  Slider slider=new Slider(50,300,0);
  slider.setPrefSize(300,30);
  slider.setLayoutX(50);
  slider.setLayoutY(60);
  container.getChildren().add(slider);
  rect.xProperty().bind(slider.valueProperty());
  stage.setScene(scene);
  stage.show();
}","@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,100);
  Rectangle rect=new Rectangle(50,10,50,30);
  rect.setFill(Color.RED);
  container.getChildren().add(rect);
  rect.xProperty().bind(x);
  Slider slider=new Slider(50,300,0);
  slider.setPrefSize(300,30);
  slider.setLayoutX(50);
  slider.setLayoutY(60);
  container.getChildren().add(slider);
  x.bind(slider.valueProperty());
  stage.setScene(scene);
  stage.show();
}",0.923671497584541
153303,"@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,400);
  Random random=new Random();
  for (int i=0; i < 50; i++) {
    Circle circle=new Circle(random.nextInt(400),random.nextInt(400),random.nextInt(100));
    circle.setFill(new Color(random.nextDouble() * 0.5 + 0.5,random.nextDouble() * 0.5 + 0.5,random.nextDouble() * 0.5 + 0.5,random.nextDouble() * 0.8));
    circle.setEffect(new BoxBlur(10,10,1));
    container.getChildren().add(circle);
    FadeTransition transition=new FadeTransition(new Duration(random.nextInt(4000) + 1000),circle);
    transition.setAutoReverse(true);
    transition.setCycleCount(FadeTransition.INDEFINITE);
    transition.setFromValue(1.0);
    transition.setToValue(0.0);
    transition.play();
  }
  stage.setScene(scene);
  stage.show();
}","@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,400);
  Random random=new Random();
  for (int i=0; i < 50; i++) {
    Circle circle=new Circle(random.nextInt(400),random.nextInt(400),random.nextInt(100));
    circle.setFill(new Color(random.nextDouble() * 0.5 + 0.5,random.nextDouble() * 0.5 + 0.5,random.nextDouble() * 0.5 + 0.5,random.nextDouble() * 0.8));
    circle.setEffect(new BoxBlur(10,10,1));
    container.getChildren().add(circle);
    FadeTransition transition=new FadeTransition(new Duration(random.nextInt(4000) + 1000),circle);
    transition.setAutoReverse(true);
    transition.setCycleCount(FadeTransition.INDEFINITE);
    transition.setInterpolator(Interpolator.EASE_BOTH);
    transition.setFromValue(1.0);
    transition.setToValue(0.0);
    transition.play();
  }
  stage.setScene(scene);
  stage.show();
}",0.9689578713968958
153304,"@Override public void start(Stage stage){
  Group container=new Group();
  Scene scene=new Scene(container,100,20);
  stage.setScene(scene);
  Label label=new Label(""String_Node_Str"");
  container.getChildren().add(label);
  stage.show();
}","@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,100,20);
  stage.setScene(scene);
  Label label=new Label(""String_Node_Str"");
  container.getChildren().add(label);
  stage.show();
}",0.9284332688588008
153305,"@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,200);
  Rectangle rect=new Rectangle(50,10,300,70);
  rect.setStroke(Color.BLACK);
  container.getChildren().add(rect);
  Label redLabel=new Label(""String_Node_Str"");
  redLabel.setPrefSize(40,30);
  redLabel.setLayoutX(20);
  redLabel.setLayoutY(100);
  container.getChildren().add(redLabel);
  Label greenLabel=new Label(""String_Node_Str"");
  greenLabel.setPrefSize(40,30);
  greenLabel.setLayoutX(20);
  greenLabel.setLayoutY(130);
  container.getChildren().add(greenLabel);
  Label blueLabel=new Label(""String_Node_Str"");
  blueLabel.setPrefSize(40,30);
  blueLabel.setLayoutX(20);
  blueLabel.setLayoutY(160);
  container.getChildren().add(blueLabel);
  final Slider red=new Slider(0,254,254);
  red.setPrefSize(300,30);
  red.setLayoutX(50);
  red.setLayoutY(100);
  container.getChildren().add(red);
  final Slider green=new Slider(0,254,254);
  green.setPrefSize(300,30);
  green.setLayoutX(50);
  green.setLayoutY(130);
  container.getChildren().add(green);
  final Slider blue=new Slider(0,254,254);
  blue.setPrefSize(300,30);
  blue.setLayoutX(50);
  blue.setLayoutY(160);
  container.getChildren().add(blue);
  ObjectBinding<Color> binding=new ObjectBinding<Color>(){
{
      super.bind(red.valueProperty());
      super.bind(green.valueProperty());
      super.bind(blue.valueProperty());
    }
    @Override protected Color computeValue(){
      return Color.rgb((int)red.getValue(),(int)green.getValue(),(int)blue.getValue());
    }
  }
;
  rect.fillProperty().bind(binding);
  stage.setScene(scene);
  stage.show();
}","@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,200);
  Rectangle rect=new Rectangle(50,10,300,70);
  rect.setStroke(Color.BLACK);
  container.getChildren().add(rect);
  Label redLabel=new Label(""String_Node_Str"");
  redLabel.setPrefSize(40,30);
  redLabel.setLayoutX(20);
  redLabel.setLayoutY(100);
  container.getChildren().add(redLabel);
  Label greenLabel=new Label(""String_Node_Str"");
  greenLabel.setPrefSize(40,30);
  greenLabel.setLayoutX(20);
  greenLabel.setLayoutY(130);
  container.getChildren().add(greenLabel);
  Label blueLabel=new Label(""String_Node_Str"");
  blueLabel.setPrefSize(40,30);
  blueLabel.setLayoutX(20);
  blueLabel.setLayoutY(160);
  container.getChildren().add(blueLabel);
  final Slider red=new Slider(0,254,254);
  red.setPrefSize(300,30);
  red.setLayoutX(50);
  red.setLayoutY(100);
  container.getChildren().add(red);
  final Slider green=new Slider(0,254,254);
  green.setPrefSize(300,30);
  green.setLayoutX(50);
  green.setLayoutY(130);
  container.getChildren().add(green);
  final Slider blue=new Slider(0,254,254);
  blue.setPrefSize(300,30);
  blue.setLayoutX(50);
  blue.setLayoutY(160);
  container.getChildren().add(blue);
  binding=new ObjectBinding<Color>(){
{
      super.bind(red.valueProperty());
      super.bind(green.valueProperty());
      super.bind(blue.valueProperty());
    }
    @Override protected Color computeValue(){
      return Color.rgb((int)red.getValue(),(int)green.getValue(),(int)blue.getValue());
    }
  }
;
  rect.fillProperty().bind(binding);
  stage.setScene(scene);
  stage.show();
}",0.9937182171702064
153306,"@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,100);
  rect=new Rectangle(10,60,50,30);
  rect.setFill(Color.RED);
  container.getChildren().add(rect);
  timeline=new Timeline();
  timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,new KeyValue(rect.translateXProperty(),0.0)),new KeyFrame(new Duration(1000),new KeyValue(rect.translateXProperty(),320.0)));
  Button button=new Button(""String_Node_Str"");
  button.setLayoutX(180);
  button.setLayoutY(10);
  container.getChildren().add(button);
  button.setOnAction(new EventHandler<ActionEvent>(){
    public void handle(    ActionEvent event){
      timeline.playFromStart();
    }
  }
);
  stage.setScene(scene);
  stage.show();
}","@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  Group container=new Group();
  Scene scene=new Scene(container,400,100);
  rect=new Rectangle(10,60,50,30);
  rect.setFill(Color.RED);
  container.getChildren().add(rect);
  timeline=new Timeline();
  timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,new KeyValue(rect.translateXProperty(),0.0)),new KeyFrame(new Duration(1000),new KeyValue(rect.translateXProperty(),320.0)));
  Button button=new Button(""String_Node_Str"");
  button.setLayoutX(180);
  button.setLayoutY(10);
  container.getChildren().add(button);
  button.setOnAction(new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent event){
      timeline.playFromStart();
    }
  }
);
  stage.setScene(scene);
  stage.show();
}",0.993718592964824
153307,"public void handle(ActionEvent event){
  timeline.playFromStart();
}","@Override public void handle(ActionEvent event){
  timeline.playFromStart();
}",0.9315068493150684
153308,"@Override public void start(Stage stage){
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        initSwing();
      }
    }
);
  }
 catch (  InvocationTargetException ex) {
    return;
  }
catch (  InterruptedException ex) {
    return;
  }
  FlowPane container=new FlowPane(10,10);
  container.setAlignment(Pos.CENTER);
  Scene scene=new Scene(container);
  Label label=new Label(""String_Node_Str"");
  TextField textField=new TextField(""String_Node_Str"");
  Button button=new Button(""String_Node_Str"");
  container.getChildren().addAll(label,textField,button);
  jfxPanel.setScene(scene);
}","@Override public void start(Stage stage){
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        initSwing();
      }
    }
);
  }
 catch (  InvocationTargetException ex) {
    return;
  }
catch (  InterruptedException ex) {
    return;
  }
  FlowPane container=new FlowPane(10,10);
  container.setAlignment(Pos.CENTER);
  Scene scene=new Scene(container);
  Label label=new Label(""String_Node_Str"");
  TextField textField=new TextField(""String_Node_Str"");
  Button button=new Button(""String_Node_Str"");
  container.getChildren().addAll(label,textField,button);
  jfxPanel.setScene(scene);
}",0.9920760697305864
153309,"public void run(){
  initSwing();
}","@Override public void run(){
  initSwing();
}",0.875
153310,"@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  BorderPane borderPane=new BorderPane();
  borderPane.setLayoutY(10);
  borderPane.setLayoutX(10);
  Scene scene=new Scene(borderPane);
  stage.setScene(scene);
  WebView view=new WebView();
  engine=view.getEngine();
  view.setPrefSize(600,500);
  borderPane.setCenter(view);
  Reflection reflection=new Reflection();
  reflection.setFraction(0.5);
  view.setEffect(reflection);
  Worker worker=engine.getLoadWorker();
  worker.stateProperty().addListener(new ChangeListener<Worker.State>(){
    @Override public void changed(    ObservableValue<? extends Worker.State> state,    Worker.State oldValue,    Worker.State newValue){
      if (newValue == Worker.State.SUCCEEDED) {
        String url=engine.getLocation();
        if (url != null && !url.isEmpty()) {
          urlField.setText(url);
        }
      }
    }
  }
);
  HBox hbox=new HBox(10);
  hbox.setPrefHeight(40);
  hbox.setAlignment(Pos.BASELINE_CENTER);
  borderPane.setTop(hbox);
  EventHandler<ActionEvent> handler=new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      loadUrl();
    }
  }
;
  urlField=new TextField();
  urlField.setPrefColumnCount(40);
  urlField.setStyle(""String_Node_Str"");
  hbox.getChildren().add(urlField);
  urlField.setOnAction(handler);
  Button button=new Button(""String_Node_Str"");
  button.setFont(new Font(""String_Node_Str"",16));
  hbox.getChildren().add(button);
  button.setOnAction(handler);
  stage.show();
}","@Override public void start(Stage stage){
  stage.setTitle(""String_Node_Str"");
  BorderPane borderPane=new BorderPane();
  borderPane.setLayoutY(10);
  borderPane.setLayoutX(10);
  Scene scene=new Scene(borderPane);
  stage.setScene(scene);
  WebView view=new WebView();
  engine=view.getEngine();
  view.setPrefSize(600,500);
  borderPane.setCenter(view);
  Reflection reflection=new Reflection();
  reflection.setFraction(0.5);
  view.setEffect(reflection);
  Worker worker=engine.getLoadWorker();
  worker.stateProperty().addListener(new ChangeListener<Worker.State>(){
    @Override public void changed(    ObservableValue<? extends Worker.State> state,    Worker.State oldValue,    Worker.State newValue){
      if (newValue == Worker.State.SUCCEEDED) {
        String url=engine.getLocation();
        if (url != null && !url.isEmpty()) {
          urlField.setText(url);
        }
      }
    }
  }
);
  HBox hbox=new HBox(10);
  hbox.setPrefHeight(40);
  hbox.setAlignment(Pos.BASELINE_CENTER);
  borderPane.setTop(hbox);
  EventHandler<ActionEvent> handler=new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent t){
      loadUrl();
    }
  }
;
  urlField=new TextField();
  urlField.setPrefColumnCount(40);
  urlField.setStyle(""String_Node_Str"");
  hbox.getChildren().add(urlField);
  urlField.setOnAction(handler);
  Button button=new Button(""String_Node_Str"");
  button.setStyle(""String_Node_Str"");
  hbox.getChildren().add(button);
  button.setOnAction(handler);
  stage.show();
}",0.9927916120576672
153311,"@PreDestroy public void stop(){
  future.cancel(true);
}","@PreDestroy public synchronized void stop(){
  future.cancel(true);
}",0.896
153312,"@PostConstruct public void start(){
  future=executor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      synchronize();
    }
  }
,0,(long)replicationInterval.toMillis(),TimeUnit.MILLISECONDS);
}","@PostConstruct public synchronized void start(){
  future=executor.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      synchronize();
    }
  }
,0,(long)replicationInterval.toMillis(),TimeUnit.MILLISECONDS);
}",0.9711751662971176
153313,"@Inject public CassandraDynamicStore(CassandraStoreConfig config,CassandraServerInfo cassandraInfo,DiscoveryConfig discoveryConfig,NodeInfo nodeInfo,Provider<DateTime> currentTime){
  this.currentTime=currentTime;
  maxAge=discoveryConfig.getMaxAge();
  Cluster cluster=HFactory.getOrCreateCluster(CLUSTER,format(""String_Node_Str"",InetAddresses.toUriString(nodeInfo.getPublicIp()),cassandraInfo.getRpcPort()));
  String keyspaceName=config.getKeyspace();
  KeyspaceDefinition definition=cluster.describeKeyspace(keyspaceName);
  if (definition == null) {
    cluster.addKeyspace(new ThriftKsDef(keyspaceName));
  }
  if (cluster.describeKeyspace(keyspaceName).getCfDefs().isEmpty()) {
    cluster.addColumnFamily(new ThriftCfDef(keyspaceName,COLUMN_FAMILY));
  }
  keyspace=HFactory.createKeyspace(keyspaceName,cluster);
  keyspace.setConsistencyLevelPolicy(new AllOneConsistencyLevelPolicy());
}","@Inject public CassandraDynamicStore(CassandraStoreConfig config,CassandraServerInfo cassandraInfo,DiscoveryConfig discoveryConfig,NodeInfo nodeInfo,Provider<DateTime> currentTime){
  this.currentTime=currentTime;
  maxAge=discoveryConfig.getMaxAge();
  Cluster cluster=HFactory.getOrCreateCluster(CLUSTER,format(""String_Node_Str"",InetAddresses.toUriString(nodeInfo.getPublicIp()),cassandraInfo.getRpcPort()));
  String keyspaceName=config.getKeyspace();
  KeyspaceDefinition definition=cluster.describeKeyspace(keyspaceName);
  if (definition == null) {
    cluster.addKeyspace(new ThriftKsDef(keyspaceName));
  }
  boolean exists=false;
  for (  ColumnFamilyDefinition columnFamily : cluster.describeKeyspace(keyspaceName).getCfDefs()) {
    if (columnFamily.getName().equals(COLUMN_FAMILY)) {
      exists=true;
      break;
    }
  }
  if (!exists) {
    cluster.addColumnFamily(new ThriftCfDef(keyspaceName,COLUMN_FAMILY));
  }
  keyspace=HFactory.createKeyspace(keyspaceName,cluster);
  keyspace.setConsistencyLevelPolicy(new AllOneConsistencyLevelPolicy());
}",0.8460754332313966
153314,"@Inject public CassandraStaticStore(CassandraStoreConfig config,CassandraServerInfo cassandraInfo,NodeInfo nodeInfo){
  Cluster cluster=HFactory.getOrCreateCluster(CLUSTER,format(""String_Node_Str"",InetAddresses.toUriString(nodeInfo.getPublicIp()),cassandraInfo.getRpcPort()));
  String keyspaceName=config.getKeyspace();
  KeyspaceDefinition definition=cluster.describeKeyspace(keyspaceName);
  if (definition == null) {
    cluster.addKeyspace(new ThriftKsDef(keyspaceName));
  }
  if (cluster.describeKeyspace(keyspaceName).getCfDefs().isEmpty()) {
    cluster.addColumnFamily(new ThriftCfDef(keyspaceName,COLUMN_FAMILY));
  }
  keyspace=HFactory.createKeyspace(keyspaceName,cluster);
  keyspace.setConsistencyLevelPolicy(new QuorumAllConsistencyLevelPolicy());
}","@Inject public CassandraStaticStore(CassandraStoreConfig config,CassandraServerInfo cassandraInfo,NodeInfo nodeInfo){
  Cluster cluster=HFactory.getOrCreateCluster(CLUSTER,format(""String_Node_Str"",InetAddresses.toUriString(nodeInfo.getPublicIp()),cassandraInfo.getRpcPort()));
  String keyspaceName=config.getKeyspace();
  KeyspaceDefinition definition=cluster.describeKeyspace(keyspaceName);
  if (definition == null) {
    cluster.addKeyspace(new ThriftKsDef(keyspaceName));
  }
  boolean exists=false;
  for (  ColumnFamilyDefinition columnFamily : cluster.describeKeyspace(keyspaceName).getCfDefs()) {
    if (columnFamily.getName().equals(COLUMN_FAMILY)) {
      exists=true;
      break;
    }
  }
  if (!exists) {
    cluster.addColumnFamily(new ThriftCfDef(keyspaceName,COLUMN_FAMILY));
  }
  keyspace=HFactory.createKeyspace(keyspaceName,cluster);
  keyspace.setConsistencyLevelPolicy(new QuorumAllConsistencyLevelPolicy());
}",0.8176470588235294
153315,"public Set<Service> getAll(){
  List<Row<String,Long,String>> result=HFactory.createRangeSlicesQuery(keyspace,StringSerializer.get(),LongSerializer.get(),StringSerializer.get()).setColumnFamily(COLUMN_FAMILY).setKeys(""String_Node_Str"",""String_Node_Str"").setRange(Long.MAX_VALUE,System.currentTimeMillis() - (long)maxAge.toMillis(),true,1).execute().get().getList();
  ImmutableSet.Builder<Service> builder=new ImmutableSet.Builder<Service>();
  for (  Row<String,Long,String> row : result) {
    List<HColumn<Long,String>> columns=row.getColumnSlice().getColumns();
    if (!columns.isEmpty()) {
      builder.addAll(codec.fromJson(columns.iterator().next().getValue()));
    }
  }
  return builder.build();
}","public Set<Service> getAll(){
  List<Row<String,Long,String>> result=HFactory.createRangeSlicesQuery(keyspace,StringSerializer.get(),LongSerializer.get(),StringSerializer.get()).setColumnFamily(COLUMN_FAMILY).setKeys(""String_Node_Str"",""String_Node_Str"").setRange(Long.MAX_VALUE,expirationCutoff().getMillis(),true,1).execute().get().getList();
  ImmutableSet.Builder<Service> builder=new ImmutableSet.Builder<Service>();
  for (  Row<String,Long,String> row : result) {
    List<HColumn<Long,String>> columns=row.getColumnSlice().getColumns();
    if (!columns.isEmpty()) {
      builder.addAll(codec.fromJson(columns.iterator().next().getValue()));
    }
  }
  return builder.build();
}",0.9541547277936964
153316,"@Inject public CassandraStore(CassandraStoreConfig config,CassandraServerInfo cassandraInfo,DiscoveryConfig discoveryConfig,NodeInfo nodeInfo){
  maxAge=discoveryConfig.getMaxAge();
  Cluster cluster=HFactory.getOrCreateCluster(CLUSTER,format(""String_Node_Str"",InetAddresses.toUriString(nodeInfo.getPublicIp()),cassandraInfo.getRpcPort()));
  String keyspaceName=config.getKeyspace();
  KeyspaceDefinition definition=cluster.describeKeyspace(keyspaceName);
  if (definition == null) {
    cluster.addKeyspace(new ThriftKsDef(keyspaceName));
  }
  if (cluster.describeKeyspace(keyspaceName).getCfDefs().isEmpty()) {
    cluster.addColumnFamily(new ThriftCfDef(keyspaceName,COLUMN_FAMILY));
  }
  keyspace=HFactory.createKeyspace(keyspaceName,cluster);
  keyspace.setConsistencyLevelPolicy(new AllOneConsistencyLevelPolicy());
}","@Inject public CassandraStore(CassandraStoreConfig config,CassandraServerInfo cassandraInfo,DiscoveryConfig discoveryConfig,NodeInfo nodeInfo,Provider<DateTime> currentTime){
  this.currentTime=currentTime;
  maxAge=discoveryConfig.getMaxAge();
  Cluster cluster=HFactory.getOrCreateCluster(CLUSTER,format(""String_Node_Str"",InetAddresses.toUriString(nodeInfo.getPublicIp()),cassandraInfo.getRpcPort()));
  String keyspaceName=config.getKeyspace();
  KeyspaceDefinition definition=cluster.describeKeyspace(keyspaceName);
  if (definition == null) {
    cluster.addKeyspace(new ThriftKsDef(keyspaceName));
  }
  if (cluster.describeKeyspace(keyspaceName).getCfDefs().isEmpty()) {
    cluster.addColumnFamily(new ThriftCfDef(keyspaceName,COLUMN_FAMILY));
  }
  keyspace=HFactory.createKeyspace(keyspaceName,cluster);
  keyspace.setConsistencyLevelPolicy(new AllOneConsistencyLevelPolicy());
}",0.963265306122449
153317,"private boolean exists(UUID nodeId){
  ColumnSlice<Long,String> slice=HFactory.createSliceQuery(keyspace,StringSerializer.get(),LongSerializer.get(),StringSerializer.get()).setColumnFamily(COLUMN_FAMILY).setKey(nodeId.toString()).setRange(System.currentTimeMillis() - (long)maxAge.toMillis(),Long.MAX_VALUE,false,1).execute().get();
  return !slice.getColumns().isEmpty();
}","private boolean exists(UUID nodeId){
  ColumnSlice<Long,String> slice=HFactory.createSliceQuery(keyspace,StringSerializer.get(),LongSerializer.get(),StringSerializer.get()).setColumnFamily(COLUMN_FAMILY).setKey(nodeId.toString()).setRange(expirationCutoff().getMillis(),Long.MAX_VALUE,false,1).execute().get();
  return !slice.getColumns().isEmpty();
}",0.9118457300275482
153318,"private void removeExpired(){
  OrderedRows<String,Long,String> rows=HFactory.createRangeSlicesQuery(keyspace,StringSerializer.get(),LongSerializer.get(),StringSerializer.get()).setColumnFamily(COLUMN_FAMILY).setKeys(""String_Node_Str"",""String_Node_Str"").setRange(-Long.MAX_VALUE,System.currentTimeMillis() - (long)maxAge.toMillis(),false,Integer.MAX_VALUE).execute().get();
  Mutator<String> mutator=HFactory.createMutator(keyspace,StringSerializer.get());
  for (  Row<String,Long,String> row : rows) {
    for (    HColumn<Long,String> column : row.getColumnSlice().getColumns()) {
      mutator.addDeletion(row.getKey(),COLUMN_FAMILY,column.getName());
    }
  }
  mutator.execute();
}","private void removeExpired(){
  OrderedRows<String,Long,String> rows=HFactory.createRangeSlicesQuery(keyspace,StringSerializer.get(),LongSerializer.get(),StringSerializer.get()).setColumnFamily(COLUMN_FAMILY).setKeys(""String_Node_Str"",""String_Node_Str"").setRange(0L,expirationCutoff().getMillis(),false,Integer.MAX_VALUE).execute().get();
  Mutator<String> mutator=HFactory.createMutator(keyspace,StringSerializer.get());
  for (  Row<String,Long,String> row : rows) {
    for (    HColumn<Long,String> column : row.getColumnSlice().getColumns()) {
      mutator.addDeletion(row.getKey(),COLUMN_FAMILY,column.getName());
    }
  }
  mutator.execute();
}",0.9038031319910514
153319,"@Override public boolean put(UUID nodeId,Set<Service> descriptors){
  boolean exists=exists(nodeId);
  String value=codec.toJson(ImmutableList.copyOf(descriptors));
  HFactory.createMutator(keyspace,StringSerializer.get()).addInsertion(nodeId.toString(),COLUMN_FAMILY,HFactory.createColumn(System.currentTimeMillis(),value,LongSerializer.get(),StringSerializer.get())).execute();
  return !exists;
}","@Override public boolean put(UUID nodeId,Set<Service> descriptors){
  boolean exists=exists(nodeId);
  String value=codec.toJson(ImmutableList.copyOf(descriptors));
  HFactory.createMutator(keyspace,StringSerializer.get()).addInsertion(nodeId.toString(),COLUMN_FAMILY,HFactory.createColumn(currentTime.get().getMillis(),value,LongSerializer.get(),StringSerializer.get())).execute();
  return !exists;
}",0.9538077403245944
153320,"public void configure(Binder binder){
  binder.bind(AnnouncementResource.class).in(Scopes.SINGLETON);
  binder.bind(ServiceResource.class).in(Scopes.SINGLETON);
  binder.bind(Store.class).to(CassandraStore.class).in(Scopes.SINGLETON);
  ConfigurationModule.bindConfig(binder).to(DiscoveryConfig.class);
  ConfigurationModule.bindConfig(binder).to(CassandraStoreConfig.class);
}","public void configure(Binder binder){
  binder.bind(AnnouncementResource.class).in(Scopes.SINGLETON);
  binder.bind(ServiceResource.class).in(Scopes.SINGLETON);
  binder.bind(Store.class).to(CassandraStore.class).in(Scopes.SINGLETON);
  binder.bind(DateTime.class).toProvider(RealTimeProvider.class).in(Scopes.SINGLETON);
  ConfigurationModule.bindConfig(binder).to(DiscoveryConfig.class);
  ConfigurationModule.bindConfig(binder).to(CassandraStoreConfig.class);
}",0.896551724137931
153321,"@Override public Set<Service> getAll(){
  return ImmutableSet.copyOf(concat(descriptors.values()));
}","@Override public synchronized Set<Service> getAll(){
  removeExpired();
  ImmutableSet.Builder<Service> builder=new ImmutableSet.Builder<Service>();
  for (  Entry entry : descriptors.values()) {
    builder.addAll(entry.getServices());
  }
  return builder.build();
}",0.3252032520325203
153322,"@Override public Set<Service> get(String type,String pool){
  Preconditions.checkNotNull(type,""String_Node_Str"");
  Preconditions.checkNotNull(pool,""String_Node_Str"");
  return ImmutableSet.copyOf(filter(concat(descriptors.values()),and(matchesType(type),matchesPool(pool))));
}","@Override public synchronized Set<Service> get(String type,String pool){
  Preconditions.checkNotNull(type,""String_Node_Str"");
  Preconditions.checkNotNull(pool,""String_Node_Str"");
  return ImmutableSet.copyOf(filter(getAll(),and(matchesType(type),matchesPool(pool))));
}",0.9143897996357012
153323,"@Inject public InMemoryStore(DiscoveryConfig config){
  descriptors=new MapMaker().expireAfterWrite((long)config.getMaxAge().toMillis(),TimeUnit.MILLISECONDS).makeMap();
}","@Inject public InMemoryStore(DiscoveryConfig config,Provider<DateTime> timeSource){
  this.currentTime=timeSource;
  this.maxAge=config.getMaxAge();
}",0.5233644859813084
153324,"@Override public boolean delete(UUID nodeId){
  Preconditions.checkNotNull(nodeId,""String_Node_Str"");
  return descriptors.remove(nodeId) != null;
}","@Override public synchronized boolean delete(UUID nodeId){
  Preconditions.checkNotNull(nodeId,""String_Node_Str"");
  return descriptors.remove(nodeId) != null;
}",0.9579288025889968
153325,"@Override public boolean put(UUID nodeId,Set<Service> descriptors){
  Preconditions.checkNotNull(nodeId,""String_Node_Str"");
  Preconditions.checkNotNull(descriptors,""String_Node_Str"");
  Set<Service> old=this.descriptors.put(nodeId,ImmutableSet.copyOf(descriptors));
  return old == null;
}","@Override public synchronized boolean put(UUID nodeId,Set<Service> services){
  Preconditions.checkNotNull(nodeId,""String_Node_Str"");
  Preconditions.checkNotNull(services,""String_Node_Str"");
  DateTime expiration=currentTime.get().plusMillis((int)maxAge.toMillis());
  Entry old=descriptors.put(nodeId,new Entry(expiration,ImmutableSet.copyOf(services)));
  return old == null;
}",0.6447761194029851
153326,"@BeforeMethod public void setup(){
  store=new InMemoryStore(new DiscoveryConfig());
  resource=new AnnouncementResource(store,new NodeInfo(""String_Node_Str""));
}","@BeforeMethod public void setup(){
  store=new InMemoryStore(new DiscoveryConfig(),new RealTimeProvider());
  resource=new AnnouncementResource(store,new NodeInfo(""String_Node_Str""));
}",0.9337175792507204
153327,"@BeforeMethod protected void setUp(){
  store=new InMemoryStore(new DiscoveryConfig());
  resource=new ServiceResource(store,new NodeInfo(""String_Node_Str""));
}","@BeforeMethod protected void setUp(){
  store=new InMemoryStore(new DiscoveryConfig(),new TestingTimeProvider());
  resource=new ServiceResource(store,new NodeInfo(""String_Node_Str""));
}",0.9248554913294798
153328,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFileName=Environment.getExternalStorageDirectory().getAbsolutePath();
  mFileName+=""String_Node_Str"";
  LinearLayout ll=new LinearLayout(this);
  mRecordButton=new RecordButton(this);
  ll.addView(mRecordButton,new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,0));
  mPlayButton=new PlayButton(this);
  ll.addView(mPlayButton,new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,0));
  setContentView(ll);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFileName=data.GetNewAudioURL();
  LinearLayout ll=new LinearLayout(this);
  mRecordButton=new RecordButton(this);
  ll.addView(mRecordButton,new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,0));
  mPlayButton=new PlayButton(this);
  ll.addView(mPlayButton,new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,0));
  setContentView(ll);
}",0.9041811846689896
153329,"public void AudioRecordTest(){
  mFileName=Environment.getExternalStorageDirectory().getAbsolutePath();
  mFileName+=""String_Node_Str"";
}","public void AudioRecordTest(){
  mFileName=data.GetNewAudioURL();
}",0.5294117647058824
153330,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.camera);
  imageFilePath=Interview.data.GetPhotoURL();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.camera);
  imageFilePath=data.GetNewPhotoURL();
}",0.9629629629629628
153331,"private void getDrawables(){
  String[] images=Interview.data.GetPhotoURLs();
  imagePaths=new String[images.length];
  for (int i=0; i < images.length; i++) {
    DrawableManager dm=new DrawableManager();
    imagePaths[i]=images[i];
  }
}","private void getDrawables(){
  String[] images=data.GetPhotoURLs();
  imagePaths=new String[images.length];
  for (int i=0; i < images.length; i++) {
    DrawableManager dm=new DrawableManager();
    imagePaths[i]=images[i];
  }
}",0.9787234042553192
153332,"public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String subjectName=parent.getItemAtPosition(position).toString();
  data.SetSubject(subjectName);
  TextView subjectview=(TextView)findViewById(R.id.subjectname);
  subjectview.setText(subjectName);
  Interview.data.SetSubject(subjectName);
}","public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String subjectName=parent.getItemAtPosition(position).toString();
  data.SetSubject(subjectName);
  TextView subjectview=(TextView)findViewById(R.id.subjectname);
  subjectview.setText(subjectName);
  data.SetSubject(subjectName);
}",0.9844236760124612
153333,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  data=com.android.interview.utilities.Data.getInstance();
  data.SetRoot(Environment.getExternalStorageDirectory());
  setContentView(R.layout.dashboard);
  this.flipper=(ViewFlipper)findViewById(R.id.subject_views);
  Button subjectCreateButton=(Button)findViewById(R.id.subject_create_button);
  subjectCreateButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_CREATE_VIEW);
    }
  }
);
  Button subjectListButton=(Button)findViewById(R.id.subject_list_button);
  subjectListButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_LIST_VIEW);
    }
  }
);
  Button subjectCreateSaveButton=(Button)findViewById(R.id.subject_create_save_button);
  subjectCreateSaveButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      EditText newSubjectField=(EditText)findViewById(R.id.subject_create_name);
      String currentSubjectName=newSubjectField.getText().toString();
      createSubject(currentSubjectName);
      Spinner spinner=(Spinner)findViewById(R.id.subject_list_dropdown);
      populateSpinner(spinner);
      TextView subjectview=(TextView)findViewById(R.id.subjectname);
      subjectview.setText(currentSubjectName);
      Interview.data.SetSubject(currentSubjectName);
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectCreateBackButton=(Button)findViewById(R.id.subject_create_back_button);
  subjectCreateBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  Spinner spinner=(Spinner)findViewById(R.id.subject_list_dropdown);
  populateSpinner(spinner);
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String subjectName=parent.getItemAtPosition(position).toString();
      data.SetSubject(subjectName);
      TextView subjectview=(TextView)findViewById(R.id.subjectname);
      subjectview.setText(subjectName);
      Interview.data.SetSubject(subjectName);
    }
    public void onNothingSelected(    AdapterView parent){
    }
  }
);
  Button subjectListViewButton=(Button)findViewById(R.id.subject_list_view_button);
  subjectListViewButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectListBackButton=(Button)findViewById(R.id.subject_list_back_button);
  subjectListBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  Button subjectViewBackButton=(Button)findViewById(R.id.subject_dashboard_button);
  subjectViewBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.dashboard);
  this.flipper=(ViewFlipper)findViewById(R.id.subject_views);
  Button subjectCreateButton=(Button)findViewById(R.id.subject_create_button);
  subjectCreateButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_CREATE_VIEW);
    }
  }
);
  Button subjectListButton=(Button)findViewById(R.id.subject_list_button);
  subjectListButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_LIST_VIEW);
    }
  }
);
  Button subjectCreateSaveButton=(Button)findViewById(R.id.subject_create_save_button);
  subjectCreateSaveButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      EditText newSubjectField=(EditText)findViewById(R.id.subject_create_name);
      String currentSubjectName=newSubjectField.getText().toString();
      createSubject(currentSubjectName);
      Spinner spinner=(Spinner)findViewById(R.id.subject_list_dropdown);
      populateSpinner(spinner);
      TextView subjectview=(TextView)findViewById(R.id.subjectname);
      subjectview.setText(currentSubjectName);
      data.SetSubject(currentSubjectName);
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectCreateBackButton=(Button)findViewById(R.id.subject_create_back_button);
  subjectCreateBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  Spinner spinner=(Spinner)findViewById(R.id.subject_list_dropdown);
  populateSpinner(spinner);
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String subjectName=parent.getItemAtPosition(position).toString();
      data.SetSubject(subjectName);
      TextView subjectview=(TextView)findViewById(R.id.subjectname);
      subjectview.setText(subjectName);
      data.SetSubject(subjectName);
    }
    public void onNothingSelected(    AdapterView parent){
    }
  }
);
  Button subjectListViewButton=(Button)findViewById(R.id.subject_list_view_button);
  subjectListViewButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectListBackButton=(Button)findViewById(R.id.subject_list_back_button);
  subjectListBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  Button subjectViewBackButton=(Button)findViewById(R.id.subject_dashboard_button);
  subjectViewBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
}",0.9790400972053463
153334,"public List<String> GetVideoURLs(){
  return null;
}","public String[] GetVideoURLs(){
  return GetListOfFilesInPath(Data.imageFolderPath());
}",0.6285714285714286
153335,"public String[] GetPhotoURLs(){
  File files=new File(imageFolderPath());
  String[] photos=files.list();
  for (int i=0; i < photos.length; i++) {
    photos[i]=Data.imageFolderPath() + ""String_Node_Str"" + photos[i];
  }
  return photos;
}","public String[] GetPhotoURLs(){
  return GetListOfFilesInPath(Data.imageFolderPath());
}",0.4268292682926829
153336,"private void createFolder(String folderPath){
  boolean success=(new File(folderPath)).mkdir();
}","private void createFolder(String folderPath){
  (new File(folderPath)).mkdir();
}",0.9101123595505618
153337,"public String GetNote(){
  return null;
}","public String GetNote(){
  return ""String_Node_Str"";
}",0.8
153338,"public List<String> GetAudioURLs(){
  return null;
}","public String[] GetAudioURLs(){
  return GetListOfFilesInPath(Data.imageFolderPath());
}",0.6285714285714286
153339,"private static String subjectPath(){
  return root.getAbsolutePath() + ""String_Node_Str"" + Data.subject;
}","private static String subjectPath(){
  return root() + ""String_Node_Str"" + Data.subject;
}",0.9183673469387756
153340,"public String[] GetSubjects(){
  File files=new File(root.getAbsolutePath());
  return files.list();
}","public String[] GetSubjects(){
  File files=new File(root());
  return files.list();
}",0.9148936170212766
153341,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.dashboard);
  this.baseDirectory=getFilesDir();
  this.flipper=(ViewFlipper)findViewById(R.id.subject_views);
  Button subjectCreateButton=(Button)findViewById(R.id.subject_create_button);
  subjectCreateButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_CREATE_VIEW);
    }
  }
);
  Button subjectListButton=(Button)findViewById(R.id.subject_list_button);
  subjectListButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_LIST_VIEW);
    }
  }
);
  Button subjectCreateSaveButton=(Button)findViewById(R.id.subject_create_save_button);
  subjectCreateSaveButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      EditText newSubjectField=(EditText)findViewById(R.id.subject_create_name);
      String currentSubjectName=newSubjectField.getText().toString();
      String subjectDirectory=baseDirectory.getAbsolutePath() + File.separator + currentSubjectName;
      currentSubjectDirectory=new File(subjectDirectory);
      if (currentSubjectDirectory.exists()) {
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      currentSubjectDirectory.mkdirs();
      String message=""String_Node_Str"" + currentSubjectName + ""String_Node_Str"";
      Toast.makeText(getApplicationContext(),message,Toast.LENGTH_SHORT).show();
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectCreateBackButton=(Button)findViewById(R.id.subject_create_back_button);
  subjectCreateBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  ArrayAdapter<String> subjectListAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_dropdown_item,this.baseDirectory.list());
  Spinner spinner=(Spinner)findViewById(R.id.subject_list_dropdown);
  spinner.setAdapter(subjectListAdapter);
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String subjectName=parent.getItemAtPosition(position).toString();
      currentSubjectDirectory=new File(baseDirectory.getAbsolutePath() + File.separator + subjectName);
    }
    public void onNothingSelected(    AdapterView parent){
    }
  }
);
  Button subjectListViewButton=(Button)findViewById(R.id.subject_list_view_button);
  subjectListViewButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectListBackButton=(Button)findViewById(R.id.subject_list_back_button);
  subjectListBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  Button subjectViewBackButton=(Button)findViewById(R.id.subject_dashboard_button);
  subjectViewBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.dashboard);
  this.baseDirectory=getFilesDir();
  this.flipper=(ViewFlipper)findViewById(R.id.subject_views);
  Button subjectCreateButton=(Button)findViewById(R.id.subject_create_button);
  subjectCreateButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_CREATE_VIEW);
    }
  }
);
  Button subjectListButton=(Button)findViewById(R.id.subject_list_button);
  subjectListButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_LIST_VIEW);
    }
  }
);
  Button subjectCreateSaveButton=(Button)findViewById(R.id.subject_create_save_button);
  subjectCreateSaveButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      EditText newSubjectField=(EditText)findViewById(R.id.subject_create_name);
      String currentSubjectName=newSubjectField.getText().toString();
      createSubject(currentSubjectName);
      Spinner spinner=(Spinner)findViewById(R.id.subject_list_dropdown);
      populateSpinner(spinner);
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectCreateBackButton=(Button)findViewById(R.id.subject_create_back_button);
  subjectCreateBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  Spinner spinner=(Spinner)findViewById(R.id.subject_list_dropdown);
  populateSpinner(spinner);
  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      String subjectName=parent.getItemAtPosition(position).toString();
      currentSubjectDirectory=new File(baseDirectory.getAbsolutePath() + File.separator + subjectName);
    }
    public void onNothingSelected(    AdapterView parent){
    }
  }
);
  Button subjectListViewButton=(Button)findViewById(R.id.subject_list_view_button);
  subjectListViewButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DETAILS_VIEW);
    }
  }
);
  Button subjectListBackButton=(Button)findViewById(R.id.subject_list_back_button);
  subjectListBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
  Button subjectViewBackButton=(Button)findViewById(R.id.subject_dashboard_button);
  subjectViewBackButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      flipper.setDisplayedChild(Interview.SUBJECT_DASHBOARD_VIEW);
    }
  }
);
}",0.8508505467800729
153342,"public void createSubject(String currentSubjectName){
}","public void createSubject(String currentSubjectName){
  String subjectDirectory=baseDirectory.getAbsolutePath() + File.separator + currentSubjectName;
  currentSubjectDirectory=new File(subjectDirectory);
  if (currentSubjectDirectory.exists()) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  if (currentSubjectDirectory.mkdirs()) {
    String message=""String_Node_Str"" + currentSubjectName + ""String_Node_Str"";
    Toast.makeText(getApplicationContext(),message,Toast.LENGTH_SHORT).show();
  }
 else {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}",0.1542776998597475
153343,"@Override public void addDelegate(Triple obj){
  try {
    sesameGraph.add(RDFGraph2SesameGraph.extractAsSesameStatement(obj,null));
  }
 catch (  Exception e) {
  }
}","@Override public void addDelegate(Triple obj){
  try {
    sesameGraph.add(RDFGraph2SesameGraph.extractAsSesameStatement(obj,null,new ValueFactoryImpl()));
  }
 catch (  Exception e) {
  }
}",0.9355742296918768
153344,"public static Graph extract(Iterable<Triple> triples,String namedGraph){
  final Graph aGraph=new GraphImpl();
  for (  Triple triple : triples) {
    Statement aStatement=extractAsSesameStatement(triple,namedGraph);
    if (aStatement != null) {
      aGraph.add(aStatement);
    }
  }
  return aGraph;
}","public static Graph extract(Iterable<Triple> triples,String namedGraph){
  final Graph aGraph=new GraphImpl();
  final ValueFactory valueFactory=new ValueFactoryImpl();
  for (  Triple triple : triples) {
    Statement aStatement=extractAsSesameStatement(triple,namedGraph,valueFactory);
    if (aStatement != null) {
      aGraph.add(aStatement);
    }
  }
  return aGraph;
}",0.895741556534508
153345,"private static org.openrdf.model.Resource asSesameResource(URIElement aNode){
  return sesameFactory.createURI(aNode.getURI());
}","private static org.openrdf.model.Resource asSesameResource(URIElement aNode,ValueFactory valueFactory){
  return valueFactory.createURI(aNode.getURI());
}",0.8833922261484098
153346,"public static Statement extractAsSesameStatement(Triple triple,String namedGraph){
  final org.openrdf.model.Resource aResource=asSesameResource(triple.getSubject());
  final URI aURI=asSesameURI(triple.getPredicate());
  final Value aValue=asSesameValue(triple.getObject());
  return (aResource != null && aURI != null && aValue != null) ? (namedGraph == null) ? sesameFactory.createStatement(aResource,aURI,aValue) : sesameFactory.createStatement(aResource,aURI,aValue,sesameFactory.createURI(namedGraph)) : null;
}","public static Statement extractAsSesameStatement(Triple triple,String namedGraph,ValueFactory valueFactory){
  final org.openrdf.model.Resource aResource=asSesameResource(triple.getSubject(),valueFactory);
  final URI aURI=asSesameURI(triple.getPredicate());
  final Value aValue=asSesameValue(triple.getObject(),valueFactory);
  return (aResource != null && aURI != null && aValue != null) ? (namedGraph == null) ? valueFactory.createStatement(aResource,aURI,aValue) : valueFactory.createStatement(aResource,aURI,aValue,valueFactory.createURI(namedGraph)) : null;
}",0.840258541089566
153347,"private static Value asSesameValue(Node aNode){
  Value value=null;
  if (aNode instanceof Resource || aNode instanceof NamedGraph || aNode instanceof TripleNode) {
    value=asSesameResource((URIElement)aNode);
  }
 else   if (aNode instanceof BlankNode) {
    value=sesameFactory.createBNode();
  }
 else   if (aNode instanceof Literal) {
    Literal aLiteral=(Literal)aNode;
    if (aLiteral.getLang() != null && !aLiteral.getLang().trim().isEmpty()) {
      value=sesameFactory.createLiteral(aLiteral.getLexicalForm(),aLiteral.getLang());
    }
 else     if (aLiteral.getDatatype() != null) {
      value=sesameFactory.createLiteral(aLiteral.getLexicalForm(),sesameFactory.createURI(aLiteral.getDatatype().getURI()));
    }
 else {
      value=sesameFactory.createLiteral(aLiteral.getLexicalForm());
    }
  }
  return value;
}","private static Value asSesameValue(Node aNode,ValueFactory valueFactory){
  Value value=null;
  if (aNode instanceof Resource || aNode instanceof NamedGraph || aNode instanceof TripleNode) {
    value=asSesameResource((URIElement)aNode,valueFactory);
  }
 else   if (aNode instanceof BlankNode) {
    value=valueFactory.createBNode();
  }
 else   if (aNode instanceof Literal) {
    Literal aLiteral=(Literal)aNode;
    if (aLiteral.getLang() != null && !aLiteral.getLang().trim().isEmpty()) {
      value=valueFactory.createLiteral(aLiteral.getLexicalForm(),aLiteral.getLang());
    }
 else     if (aLiteral.getDatatype() != null) {
      value=valueFactory.createLiteral(aLiteral.getLexicalForm(),valueFactory.createURI(aLiteral.getDatatype().getURI()));
    }
 else {
      value=valueFactory.createLiteral(aLiteral.getLexicalForm());
    }
  }
  return value;
}",0.8443396226415094
153348,"@Override public void apply(ExecEnv execEnv,Map<String,Object> options){
  Operation convertToOperation=new Operation(2,""String_Node_Str""){
    @Override public Object exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      if (localVars[1] instanceof String) {
        String var1=(String)localVars[1];
        if (localVars[0] instanceof String) {
          String var2=(String)localVars[0];
          Object ret=DatatypeConverter.convert(var1,var2);
          if (ret == null) {
            return DatatypeConverter.convert(var1,""String_Node_Str"");
          }
          return ret;
        }
      }
      return null;
    }
  }
;
  execEnv.registerOperation(Object.class,convertToOperation);
  Operation asStringOperation=new Operation(2,""String_Node_Str""){
    @Override public Object exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      Object object=localVars[0];
      if (localVars[1] instanceof String) {
        return DatatypeConverter.toString((String)localVars[1],object);
      }
      return localVars[1].toString();
    }
  }
;
  execEnv.registerOperation(Object.class,asStringOperation);
  Operation getEcoreIdOperation=new Operation(1,""String_Node_Str""){
    @Override public String exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      if (localVars[0] instanceof EObject) {
        String generatedId=EcoreUtil.getIdentification((EObject)localVars[0]);
        String cut=generatedId.substring(generatedId.indexOf(""String_Node_Str""),generatedId.length() - 1);
        if (cut.startsWith(""String_Node_Str""))         cut=cut.substring(3);
        return cut;
      }
      throw new IllegalArgumentException(""String_Node_Str"" + localVars[0]);
    }
  }
;
  execEnv.registerOperation(Object.class,getEcoreIdOperation);
  Operation split_annotation=new Operation(1,""String_Node_Str""){
    @Override public List<String> exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      if (localVars[0] instanceof String) {
        return split_annotation((String)localVars[0]);
      }
      throw new IllegalArgumentException(""String_Node_Str"" + localVars[0]);
    }
    private List<String> split_annotation(    String object){
      List<String> list=new ArrayList<String>();
      boolean in=false;
      String tmp=""String_Node_Str"";
      for (int i=0; i < object.length(); i++) {
        char c=object.charAt(i);
        if (c == ',' && !in) {
          list.add(tmp);
          tmp=""String_Node_Str"";
        }
 else         if (c == '(') {
          tmp=tmp + c;
          in=true;
        }
 else         if (c == ')') {
          tmp=tmp + c;
          in=false;
        }
 else {
          tmp=tmp + c;
        }
      }
      list.add(tmp);
      return list;
    }
  }
;
  execEnv.registerOperation(Object.class,split_annotation);
}","@Override public void apply(ExecEnv execEnv,Map<String,Object> options){
  Operation convertToOperation=new Operation(2,""String_Node_Str""){
    @Override public Object exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      if (localVars[1] instanceof String) {
        String var1=(String)localVars[1];
        if (localVars[0] instanceof String) {
          String var2=(String)localVars[0];
          Object ret=DatatypeConverter.convert(var1,var2);
          if (ret == null) {
            return DatatypeConverter.convert(var1,""String_Node_Str"");
          }
          return ret;
        }
      }
      return null;
    }
  }
;
  execEnv.registerOperation(Object.class,convertToOperation);
  Operation asStringOperation=new Operation(2,""String_Node_Str""){
    @Override public Object exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      Object object=localVars[0];
      if (localVars[1] instanceof String) {
        return DatatypeConverter.toString((String)localVars[1],object);
      }
      return localVars[1].toString();
    }
  }
;
  execEnv.registerOperation(Object.class,asStringOperation);
  Operation getEcoreIdOperation=new Operation(1,""String_Node_Str""){
    @Override public String exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      if (localVars[0] instanceof EObject) {
        return EcoreUtil.generateUUID();
      }
      throw new IllegalArgumentException(""String_Node_Str"" + localVars[0]);
    }
  }
;
  execEnv.registerOperation(Object.class,getEcoreIdOperation);
  Operation split_annotation=new Operation(1,""String_Node_Str""){
    @Override public List<String> exec(    AbstractStackFrame frame){
      Object[] localVars=frame.getLocalVars();
      if (localVars[0] instanceof String) {
        return split_annotation((String)localVars[0]);
      }
      throw new IllegalArgumentException(""String_Node_Str"" + localVars[0]);
    }
    private List<String> split_annotation(    String object){
      List<String> list=new ArrayList<String>();
      boolean in=false;
      String tmp=""String_Node_Str"";
      for (int i=0; i < object.length(); i++) {
        char c=object.charAt(i);
        if (c == ',' && !in) {
          list.add(tmp);
          tmp=""String_Node_Str"";
        }
 else         if (c == '(') {
          tmp=tmp + c;
          in=true;
        }
 else         if (c == ')') {
          tmp=tmp + c;
          in=false;
        }
 else {
          tmp=tmp + c;
        }
      }
      list.add(tmp);
      return list;
    }
  }
;
  execEnv.registerOperation(Object.class,split_annotation);
}",0.7953068592057762
153349,"@Configuration public static Option[] configuration(){
}","@Configuration public static Option[] configuration(){
  return options(felix(),mavenConfiguration(),wrappedBundle(mavenBundle(""String_Node_Str"",""String_Node_Str"").version(""String_Node_Str"")));
}",0.446215139442231
153350,"@SuppressWarnings(""String_Node_Str"") private void archiveWorkspace(final AbstractBuild build,FilePath ws) throws IOException, InterruptedException {
  File archiveFile=getArchiveFile(build);
  final OutputStream os=new RemoteOutputStream(new FileOutputStream(archiveFile));
  ws.act(new FileCallable<Void>(){
    public Void invoke(    File ws,    VirtualChannel channel) throws IOException {
      ZipOutputStream zos=new ZipOutputStream(new BufferedOutputStream(os));
      if (flatten) {
        archive(ws,ParamUtils.populateParamValues(getModuleLocations()[0].getModule(),build.getBuildVariables()),zos,true);
      }
 else {
        for (        ModuleLocation moduleLocation : getModuleLocations()) {
          String module=ParamUtils.populateParamValues(moduleLocation.getLocalDir(),build.getBuildVariables());
          File mf=new File(ws,module);
          if (!mf.exists()) {
            continue;
          }
          if (!mf.isDirectory()) {
            int idx=module.lastIndexOf('/');
            if (idx == -1) {
              throw new Error(""String_Node_Str"" + module);
            }
            module=module.substring(0,idx);
            mf=mf.getParentFile();
          }
          archive(mf,module,zos,true);
        }
      }
      zos.close();
      return null;
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") private void archiveWorkspace(final AbstractBuild build,FilePath ws) throws IOException, InterruptedException {
  File archiveFile=getArchiveFile(build);
  final OutputStream os=new RemoteOutputStream(new FileOutputStream(archiveFile));
  ws.act(new FileCallable<Void>(){
    public Void invoke(    File ws,    VirtualChannel channel) throws IOException {
      ZipOutputStream zos=new ZipOutputStream(new BufferedOutputStream(os));
      if (flatten) {
        archive(ws,getModuleLocations()[0].getModule(),zos,true);
      }
 else {
        for (        ModuleLocation moduleLocation : getModuleLocations()) {
          File mf=new File(ws,moduleLocation.getLocalDir());
          if (!mf.exists()) {
            continue;
          }
          if (!mf.isDirectory()) {
            int idx=module.lastIndexOf('/');
            if (idx == -1) {
              throw new Error(""String_Node_Str"" + module);
            }
            module=module.substring(0,idx);
            mf=mf.getParentFile();
          }
          archive(mf,module,zos,true);
        }
      }
      zos.close();
      return null;
    }
  }
);
}",0.8196588139723802
153351,"@DataBoundConstructor public CVSSCM(String cvsRoot,String allModules,String branch,String cvsRsh,boolean canUseUpdate,boolean legacy,boolean isTag,String excludedRegions){
  if (fixNull(branch).equals(""String_Node_Str"")) {
    branch=null;
  }
  this.cvsroot=fixNull(cvsRoot).trim();
  this.module=allModules.trim();
  this.branch=nullify(branch);
  this.cvsRsh=nullify(cvsRsh);
  this.canUseUpdate=canUseUpdate;
  this.flatten=!legacy && getAllModulesNormalized().length == 1;
  this.isTag=isTag;
  this.excludedRegions=excludedRegions;
}","@DataBoundConstructor public CVSSCM(String cvsRoot,String allModules,String branch,String cvsRsh,boolean canUseUpdate,boolean legacy,boolean isTag,String excludedRegions,boolean preventLineEndingConversion){
  if (fixNull(branch).equals(""String_Node_Str"")) {
    branch=null;
  }
  this.cvsroot=fixNull(cvsRoot).trim();
  this.module=allModules.trim();
  this.branch=nullify(branch);
  this.cvsRsh=nullify(cvsRsh);
  this.canUseUpdate=canUseUpdate;
  this.flatten=!legacy && getAllModulesNormalized().length == 1;
  this.isTag=isTag;
  this.excludedRegions=excludedRegions;
  this.preventLineEndingConversion=preventLineEndingConversion;
}",0.9151103565365024
153352,"/** 
 * Updates the workspace as well as locate changes.
 * @return List of affected file names, relative to the workspace directory.Null if the operation failed.
 */
private List<String> update(boolean dryRun,Launcher launcher,FilePath workspace,TaskListener listener,Date date) throws IOException, InterruptedException {
  List<String> changedFileNames=new ArrayList<String>();
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getDescriptor().getCvsExeOrDefault(),debug ? ""String_Node_Str"" : ""String_Node_Str"",compression());
  if (dryRun) {
    cmd.add(""String_Node_Str"");
  }
  cmd.add(""String_Node_Str"",""String_Node_Str"");
  if (branch != null) {
    cmd.add(""String_Node_Str"",branch);
  }
  configureDate(cmd,date);
  if (flatten) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    if (!run(launcher,cmd,listener,workspace,new ForkOutputStream(baos,listener.getLogger()))) {
      return null;
    }
    Future<Void> task=workspace.actAsync(new StickyDateCleanUpTask());
    parseUpdateOutput(""String_Node_Str"",baos,changedFileNames);
    join(task);
  }
 else {
    @SuppressWarnings(""String_Node_Str"") final Set<String> moduleNames=new TreeSet(Arrays.asList(getAllModulesNormalized()));
    moduleNames.addAll(workspace.act(new FileCallable<Set<String>>(){
      public Set<String> invoke(      File ws,      VirtualChannel channel) throws IOException {
        File[] subdirs=ws.listFiles();
        if (subdirs != null) {
          SUBDIR:           for (          File s : subdirs) {
            if (new File(s,""String_Node_Str"").isDirectory()) {
              String top=s.getName();
              for (              String mod : moduleNames) {
                if (mod.startsWith(top + ""String_Node_Str"")) {
                  continue SUBDIR;
                }
              }
              moduleNames.add(top);
            }
          }
        }
        return moduleNames;
      }
    }
));
    for (    String moduleName : moduleNames) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      FilePath modulePath=new FilePath(workspace,moduleName);
      ArgumentListBuilder actualCmd=cmd;
      String baseName=moduleName;
      if (!modulePath.isDirectory()) {
        actualCmd=cmd.clone();
        actualCmd.add(modulePath.getName());
        modulePath=modulePath.getParent();
        int slash=baseName.lastIndexOf('/');
        if (slash > 0) {
          baseName=baseName.substring(0,slash);
        }
      }
      if (!run(launcher,actualCmd,listener,modulePath,new ForkOutputStream(baos,listener.getLogger()))) {
        return null;
      }
      Future<Void> task=modulePath.actAsync(new StickyDateCleanUpTask());
      parseUpdateOutput(baseName + '/',baos,changedFileNames);
      join(task);
    }
  }
  return changedFileNames;
}","/** 
 * Updates the workspace as well as locate changes.
 * @return List of affected file names, relative to the workspace directory.Null if the operation failed.
 */
private List<String> update(boolean dryRun,Launcher launcher,FilePath workspace,TaskListener listener,Date date) throws IOException, InterruptedException {
  List<String> changedFileNames=new ArrayList<String>();
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getDescriptor().getCvsExeOrDefault(),debug ? ""String_Node_Str"" : ""String_Node_Str"",compression());
  if (dryRun) {
    cmd.add(""String_Node_Str"");
  }
  cmd.add(""String_Node_Str"",""String_Node_Str"");
  if (branch != null) {
    cmd.add(""String_Node_Str"",branch);
  }
  configureDate(cmd,date);
  if (preventLineEndingConversion) {
    cmd.add(""String_Node_Str"");
  }
  if (flatten) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    if (!run(launcher,cmd,listener,workspace,new ForkOutputStream(baos,listener.getLogger()))) {
      return null;
    }
    Future<Void> task=workspace.actAsync(new StickyDateCleanUpTask());
    parseUpdateOutput(""String_Node_Str"",baos,changedFileNames);
    join(task);
  }
 else {
    @SuppressWarnings(""String_Node_Str"") final Set<String> moduleNames=new TreeSet(Arrays.asList(getAllModulesNormalized()));
    moduleNames.addAll(workspace.act(new FileCallable<Set<String>>(){
      public Set<String> invoke(      File ws,      VirtualChannel channel) throws IOException {
        File[] subdirs=ws.listFiles();
        if (subdirs != null) {
          SUBDIR:           for (          File s : subdirs) {
            if (new File(s,""String_Node_Str"").isDirectory()) {
              String top=s.getName();
              for (              String mod : moduleNames) {
                if (mod.startsWith(top + ""String_Node_Str"")) {
                  continue SUBDIR;
                }
              }
              moduleNames.add(top);
            }
          }
        }
        return moduleNames;
      }
    }
));
    for (    String moduleName : moduleNames) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      FilePath modulePath=new FilePath(workspace,moduleName);
      ArgumentListBuilder actualCmd=cmd;
      String baseName=moduleName;
      if (!modulePath.isDirectory()) {
        actualCmd=cmd.clone();
        actualCmd.add(modulePath.getName());
        modulePath=modulePath.getParent();
        int slash=baseName.lastIndexOf('/');
        if (slash > 0) {
          baseName=baseName.substring(0,slash);
        }
      }
      if (!run(launcher,actualCmd,listener,modulePath,new ForkOutputStream(baos,listener.getLogger()))) {
        return null;
      }
      Future<Void> task=modulePath.actAsync(new StickyDateCleanUpTask());
      parseUpdateOutput(baseName + '/',baos,changedFileNames);
      join(task);
    }
  }
  return changedFileNames;
}",0.9871546718282596
153353,"private boolean checkout(Launcher launcher,FilePath dir,TaskListener listener,Date dt) throws IOException, InterruptedException {
  dir.deleteContents();
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getDescriptor().getCvsExeOrDefault(),noQuiet ? null : (debug ? ""String_Node_Str"" : ""String_Node_Str""),compression(),""String_Node_Str"",cvsroot,""String_Node_Str"",""String_Node_Str"");
  if (branch != null) {
    cmd.add(""String_Node_Str"",branch);
  }
  if (flatten) {
    cmd.add(""String_Node_Str"",dir.getName());
  }
  configureDate(cmd,dt);
  cmd.add(getAllModulesNormalized());
  if (!run(launcher,cmd,listener,flatten ? dir.getParent() : dir)) {
    return false;
  }
  if (flatten) {
    dir.act(new StickyDateCleanUpTask());
  }
 else {
    for (    String module : getAllModulesNormalized()) {
      dir.child(module).act(new StickyDateCleanUpTask());
    }
  }
  return true;
}","private boolean checkout(Launcher launcher,FilePath dir,TaskListener listener,Date dt) throws IOException, InterruptedException {
  dir.deleteContents();
  ArgumentListBuilder cmd=new ArgumentListBuilder();
  cmd.add(getDescriptor().getCvsExeOrDefault(),noQuiet ? null : (debug ? ""String_Node_Str"" : ""String_Node_Str""),compression(),""String_Node_Str"",cvsroot,""String_Node_Str"",""String_Node_Str"");
  if (branch != null) {
    cmd.add(""String_Node_Str"",branch);
  }
  if (flatten) {
    cmd.add(""String_Node_Str"",dir.getName());
  }
  configureDate(cmd,dt);
  if (preventLineEndingConversion) {
    cmd.add(""String_Node_Str"");
  }
  cmd.add(getAllModulesNormalized());
  if (!run(launcher,cmd,listener,flatten ? dir.getParent() : dir)) {
    return false;
  }
  if (flatten) {
    dir.act(new StickyDateCleanUpTask());
  }
 else {
    for (    String module : getAllModulesNormalized()) {
      dir.child(module).act(new StickyDateCleanUpTask());
    }
  }
  return true;
}",0.9609416800428036
153354,"public Descriptor<TagAction> getDescriptor(){
  return Hudson.getInstance().getDescriptorOrDie(getClass());
}","public Descriptor<TagAction> getDescriptor(){
  return Hudson.getInstance().getDescriptorOrDie(TagAction.class);
}",0.9417040358744396
153355,"public void requestReload(){
  hideRefreshView();
  Log.d(""String_Node_Str"",(getActivity() == null) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!manager.isRunning() || canRepeat) {
    setSelection(1);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    initValue();
    manager.request(getContext(),request(),REQUEST_RELOAD,this);
    nextValue();
  }
}","public void requestReload(){
  hideRefreshView();
  Log.d(""String_Node_Str"",(getActivity() == null) ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!manager.isRunning() || canRepeat) {
    setSelection(1);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    initValue();
    manager.request(reloadSpinner,request(),REQUEST_RELOAD,this);
    nextValue();
  }
}",0.9651324965132496
153356,"private void init(){
  setContentView(R.layout.activity_search);
  title=(HomeTitle)findViewById(R.id.Titlebar);
  title.setTitle(R.string.default_string_search);
  searchInputBar=(MainSearchInputBar)findViewById(R.id.main_search_input_bar);
  String i=getIntent().getStringExtra(KEYWORD);
  if (i != null) {
    searchInputBar.setText(i);
    searchInputBar.setKeyboardState(true);
    searchInputBar.showKeyboard();
  }
  tabHost=(RoundTabHost)getTabHost();
  tabHost.setOnTabChangedListener(new OnTabChangeListener(){
    @Override public void onTabChanged(    String str){
      int index=getTabHost().getCurrentTab();
      now=index;
      Searchable searchable=(Searchable)getCurrentActivity();
      if (index == STORE) {
        searchInputBar.changeSearchType(MainSearchInputBar.STORE,searchable);
      }
 else       if (index == POST) {
        searchInputBar.changeSearchType(MainSearchInputBar.POST,searchable);
      }
 else       if (index == USER) {
        searchInputBar.changeSearchType(MainSearchInputBar.USER,searchable);
      }
    }
  }
);
  Intent storeSearchIntent=new Intent(this,StoreSearchActivity.class);
  Intent postSearchIntent=new Intent(this,PostSearchActivity.class);
  Intent userSearchIntent=new Intent(this,UserSearchActivity.class);
  tabHost.addLeftTab(""String_Node_Str"",R.string.default_string_store,storeSearchIntent);
  tabHost.addCenterTab(""String_Node_Str"",R.string.default_string_post,postSearchIntent);
  tabHost.addRightTab(""String_Node_Str"",R.string.default_string_user,userSearchIntent);
  contentWrapper=(RelativeLayoutThatDetectsSoftKeyboard)findViewById(R.id.activity_search);
  contentWrapper.setBackgroundColor(MatjiConstants.color(R.color.matji_white));
  contentWrapper.setListener(this);
  searchInputBar.setSearchView((FrameLayout)findViewById(R.id.search_wrapper));
  tabHost.setCurrentTab(getIntent().getIntExtra(PAGE,STORE));
  title.setVisibility(View.GONE);
}","private void init(){
  setContentView(R.layout.activity_search);
  title=(HomeTitle)findViewById(R.id.Titlebar);
  title.setTitle(R.string.default_string_search);
  searchInputBar=(MainSearchInputBar)findViewById(R.id.main_search_input_bar);
  String keyword=getIntent().getStringExtra(KEYWORD);
  if (keyword != null) {
    searchInputBar.setText(keyword);
    searchInputBar.showKeyboard();
  }
  tabHost=(RoundTabHost)getTabHost();
  tabHost.setOnTabChangedListener(new OnTabChangeListener(){
    @Override public void onTabChanged(    String str){
      int index=getTabHost().getCurrentTab();
      Searchable searchable=(Searchable)getCurrentActivity();
      if (index == STORE) {
        searchInputBar.changeSearchType(MainSearchInputBar.STORE,searchable);
      }
 else       if (index == POST) {
        searchInputBar.changeSearchType(MainSearchInputBar.POST,searchable);
      }
 else       if (index == USER) {
        searchInputBar.changeSearchType(MainSearchInputBar.USER,searchable);
      }
    }
  }
);
  Intent storeSearchIntent=new Intent(this,StoreSearchActivity.class);
  Intent postSearchIntent=new Intent(this,PostSearchActivity.class);
  Intent userSearchIntent=new Intent(this,UserSearchActivity.class);
  tabHost.addLeftTab(""String_Node_Str"",R.string.default_string_store,storeSearchIntent);
  tabHost.addCenterTab(""String_Node_Str"",R.string.default_string_post,postSearchIntent);
  tabHost.addRightTab(""String_Node_Str"",R.string.default_string_user,userSearchIntent);
  contentWrapper=(RelativeLayoutThatDetectsSoftKeyboard)findViewById(R.id.activity_search);
  contentWrapper.setBackgroundColor(MatjiConstants.color(R.color.matji_white));
  contentWrapper.setListener(this);
  searchInputBar.setSearchView((FrameLayout)findViewById(R.id.search_wrapper));
  tabHost.setCurrentTab(getIntent().getIntExtra(PAGE,STORE));
  title.setVisibility(View.GONE);
}",0.9779411764705882
153357,"@Override public void onTabChanged(String str){
  int index=getTabHost().getCurrentTab();
  now=index;
  Searchable searchable=(Searchable)getCurrentActivity();
  if (index == STORE) {
    searchInputBar.changeSearchType(MainSearchInputBar.STORE,searchable);
  }
 else   if (index == POST) {
    searchInputBar.changeSearchType(MainSearchInputBar.POST,searchable);
  }
 else   if (index == USER) {
    searchInputBar.changeSearchType(MainSearchInputBar.USER,searchable);
  }
}","@Override public void onTabChanged(String str){
  int index=getTabHost().getCurrentTab();
  Searchable searchable=(Searchable)getCurrentActivity();
  if (index == STORE) {
    searchInputBar.changeSearchType(MainSearchInputBar.STORE,searchable);
  }
 else   if (index == POST) {
    searchInputBar.changeSearchType(MainSearchInputBar.POST,searchable);
  }
 else   if (index == USER) {
    searchInputBar.changeSearchType(MainSearchInputBar.USER,searchable);
  }
}",0.9861554845580404
153358,"public View getView(int position,View convertView,ViewGroup parent){
  DefaultElement defaultElement;
  SearchToken store=(SearchToken)data.get(position);
  if (convertView == null) {
    defaultElement=new DefaultElement();
    convertView=getLayoutInflater().inflate(R.layout.row_simple,null);
    defaultElement.text=(TextView)convertView.findViewById(R.id.row_simple_text);
    convertView.setTag(defaultElement);
  }
 else {
    defaultElement=(DefaultElement)convertView.getTag();
  }
  defaultElement.text.setText(store.getSeed());
  return convertView;
}","public View getView(int position,View convertView,ViewGroup parent){
  DefaultElement defaultElement;
  RecentSearchToken store=(RecentSearchToken)data.get(position);
  if (convertView == null) {
    defaultElement=new DefaultElement();
    convertView=getLayoutInflater().inflate(R.layout.row_simple,null);
    defaultElement.text=(TextView)convertView.findViewById(R.id.row_simple_text);
    convertView.setTag(defaultElement);
  }
 else {
    defaultElement=(DefaultElement)convertView.getTag();
  }
  defaultElement.text.setText(store.getSeed());
  return convertView;
}",0.98943661971831
153359,"private void saveRecentQueue(LinkedList<SearchToken> queue){
  try {
    preferenceProvider.setObject(SessionIndex.RECENT_STORE_SEARCH,queue);
    preferenceProvider.commit(contextRef.get());
  }
 catch (  NotSerializableException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
}","private void saveRecentQueue(LinkedList<RecentSearchToken> queue){
  try {
    preferenceProvider.setObject(SessionIndex.RECENT_STORE_SEARCH,queue);
    preferenceProvider.commit(contextRef.get());
  }
 catch (  NotSerializableException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9905362776025236
153360,"private LinkedList<SearchToken> getRecentQueue(){
  @SuppressWarnings(""String_Node_Str"") LinkedList<SearchToken> queue=(LinkedList<SearchToken>)preferenceProvider.getObject(SessionIndex.RECENT_STORE_SEARCH);
  if (queue == null) {
    return new LinkedList<SearchToken>();
  }
 else {
    return queue;
  }
}","private LinkedList<RecentSearchToken> getRecentQueue(){
  @SuppressWarnings(""String_Node_Str"") LinkedList<RecentSearchToken> queue=(LinkedList<RecentSearchToken>)preferenceProvider.getObject(SessionIndex.RECENT_STORE_SEARCH);
  if (queue == null) {
    return new LinkedList<RecentSearchToken>();
  }
 else {
    return queue;
  }
}",0.9625
153361,"public ArrayList<SearchToken> getRecentList(){
  return new ArrayList<SearchToken>(getRecentQueue());
}","public ArrayList<RecentSearchToken> getRecentList(){
  return new ArrayList<RecentSearchToken>(getRecentQueue());
}",0.944954128440367
153362,"private boolean isOverCapacity(LinkedList<SearchToken> recentQueue){
  return recentQueue.size() > CAPACITY;
}","private boolean isOverCapacity(LinkedList<RecentSearchToken> recentQueue){
  return recentQueue.size() > CAPACITY;
}",0.9734513274336284
153363,"public ArrayList<SearchToken> push(SearchToken searchToken){
  LinkedList<SearchToken> queue=getRecentQueue();
  for (  SearchToken token : queue) {
    if (token.equals(searchToken)) {
      queue.remove(token);
      queue.addFirst(searchToken);
      return new ArrayList<SearchToken>(queue);
    }
  }
  queue.addFirst(searchToken);
  if (isOverCapacity(queue))   queue.removeLast();
  saveRecentQueue(queue);
  return new ArrayList<SearchToken>(queue);
}","public ArrayList<RecentSearchToken> push(RecentSearchToken searchToken){
  LinkedList<RecentSearchToken> queue=getRecentQueue();
  for (  RecentSearchToken token : queue) {
    if (token.equals(searchToken)) {
      queue.remove(token);
      queue.addFirst(searchToken);
      return new ArrayList<RecentSearchToken>(queue);
    }
  }
  queue.addFirst(searchToken);
  if (isOverCapacity(queue))   queue.removeLast();
  saveRecentQueue(queue);
  return new ArrayList<RecentSearchToken>(queue);
}",0.9622641509433962
153364,"@Override public void onListItemClick(int position){
  SearchToken data=(SearchToken)getAdapter().getItem(position + 1);
  this.keyword=data.getSeed();
  search(keyword);
}","@Override public void onListItemClick(int position){
  RecentSearchToken data=(RecentSearchToken)getAdapter().getItem(position + 1);
  this.keyword=data.getSeed();
  search(keyword);
}",0.9662921348314608
153365,"@Override public void onListItemClick(int position){
  SearchToken data=(SearchToken)getAdapter().getItem(position + 1);
  this.keyword=data.getSeed();
  Intent intent=new Intent(getActivity(),SearchActivity.class);
  intent.putExtra(SearchActivity.KEYWORD,keyword);
  if (getActivity().getLocalClassName().equals(""String_Node_Str"")) {
    intent.putExtra(SearchActivity.PAGE,0);
  }
 else   if (getActivity().getLocalClassName().equals(""String_Node_Str"")) {
    intent.putExtra(SearchActivity.PAGE,1);
  }
 else   if (getActivity().getLocalClassName().equals(""String_Node_Str"")) {
    intent.putExtra(SearchActivity.PAGE,2);
  }
  getActivity().startActivity(intent);
  getActivity().finish();
}","@Override public void onListItemClick(int position){
  RecentSearchToken data=(RecentSearchToken)getAdapter().getItem(position + 1);
  this.keyword=data.getSeed();
  Intent intent=new Intent(getActivity(),SearchActivity.class);
  intent.putExtra(SearchActivity.KEYWORD,keyword);
  if (getActivity().getLocalClassName().equals(""String_Node_Str"")) {
    intent.putExtra(SearchActivity.PAGE,0);
  }
 else   if (getActivity().getLocalClassName().equals(""String_Node_Str"")) {
    intent.putExtra(SearchActivity.PAGE,1);
  }
 else   if (getActivity().getLocalClassName().equals(""String_Node_Str"")) {
    intent.putExtra(SearchActivity.PAGE,2);
  }
  getActivity().startActivity(intent);
  getActivity().finish();
}",0.9914529914529916
153366,"private Bitmap applyConvert(File f){
  Bitmap bitmap=ImageUtil.decodeFile(f,false);
  if (convertable != null) {
    bitmap=convertable.convert(bitmap);
    try {
      FileOutputStream out=new FileOutputStream(f);
      bitmap.compress(Bitmap.CompressFormat.JPEG,100,out);
      out.close();
    }
 catch (    IOException e) {
    }
  }
  return bitmap;
}","private Bitmap applyConvert(File f){
  Bitmap bitmap=ImageUtil.decodeFile(f,false);
  if (convertable != null) {
    bitmap=convertable.convert(bitmap);
    try {
      FileOutputStream out=new FileOutputStream(f);
      bitmap.compress(Bitmap.CompressFormat.PNG,100,out);
      out.close();
    }
 catch (    IOException e) {
    }
  }
  return bitmap;
}",0.9957805907172996
153367,"public SimpleHttpResponse post(String url,Map<String,String> headerValues,Map<String,Object> postParameters,HttpRequest request){
  HttpURLConnection connection=null;
  connectionPool.put(request,connection);
  try {
    URL u=new URL(url);
    if (u.getProtocol().toLowerCase().equals(""String_Node_Str"")) {
      trustAllHosts();
      HttpsURLConnection https=(HttpsURLConnection)u.openConnection();
      https.setHostnameVerifier(DO_NOT_VERIFY);
      connection=https;
    }
 else {
      connection=(HttpURLConnection)u.openConnection();
    }
    connection.setRequestMethod(""String_Node_Str"");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.setUseCaches(getUseCaches());
    connection.setConnectTimeout(getConnectionTimeout());
    connection.setReadTimeout(getReadTimeout());
    connectionPool.put(request,connection);
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.toString());
    if (connection != null)     disconnectConnection(request);
    return null;
  }
  if (headerValues != null)   for (  String key : headerValues.keySet())   connection.setRequestProperty(key,headerValues.get(key));
  if (postParameters != null) {
    boolean fileExists=false;
    for (    String key : postParameters.keySet()) {
      if (postParameters.get(key).getClass() == (Object)File.class) {
        fileExists=true;
        break;
      }
    }
    try {
      DataOutputStream dos=null;
      if (fileExists) {
        String boundary=""String_Node_Str"";
        String startBoundary=""String_Node_Str"" + boundary + ""String_Node_Str"";
        String endBoundary=""String_Node_Str"";
        String finalEndBoundary=""String_Node_Str"" + boundary + ""String_Node_Str"";
        connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + boundary);
        dos=new DataOutputStream(connection.getOutputStream());
        for (        String key : postParameters.keySet()) {
          dos.writeBytes(startBoundary);
          Object value=postParameters.get(key);
          if (value.getClass() == File.class) {
            File file=(File)value;
            File compressedFile=ImageUtil.decodeFileToFile(file,80,false);
            if (compressedFile != null) {
              file=compressedFile;
            }
            dos.writeBytes(""String_Node_Str"" + key + ""String_Node_Str""+ file.getName()+ ""String_Node_Str"");
            dos.writeBytes(""String_Node_Str"" + getMimeType((File)value) + ""String_Node_Str"");
            dos.writeBytes(""String_Node_Str"");
            FileInputStream fis=new FileInputStream(file);
            int totalSize=fis.available();
            byte[] buffer=new byte[FILE_BUFFER_SIZE];
            int bytesRead=0;
            while ((bytesRead=fis.read(buffer,0,FILE_BUFFER_SIZE)) > 0) {
              dos.write(buffer,0,bytesRead);
              if (progressListener != null) {
                progressListener.onWritten(progressTag,totalSize,bytesRead);
              }
            }
            fis.close();
          }
 else {
            dos.writeBytes(""String_Node_Str"" + key + ""String_Node_Str"");
            dos.writeBytes(value.toString());
          }
          dos.writeBytes(endBoundary);
        }
        dos.writeBytes(finalEndBoundary);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
        dos=new DataOutputStream(connection.getOutputStream());
        StringBuffer buffer=new StringBuffer();
        for (        String key : postParameters.keySet()) {
          if (buffer.length() > 0)           buffer.append(""String_Node_Str"");
          buffer.append(urlencode(key));
          buffer.append(""String_Node_Str"");
          buffer.append(urlencode(postParameters.get(key).toString()));
        }
        dos.writeBytes(buffer.toString());
      }
      dos.flush();
      dos.close();
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
      Log.e(""String_Node_Str"",e.toString());
      disconnectConnection(request);
      return null;
    }
  }
 else {
    DataOutputStream dos=null;
    try {
      dos=new DataOutputStream(connection.getOutputStream());
      dos.flush();
      dos.close();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",e.toString());
      disconnectConnection(request);
      return null;
    }
  }
  try {
    InputStream is=connection.getInputStream();
    byte[] responseBody=readBytesFromInputStream(is);
    is.close();
    SimpleHttpResponse result=new SimpleHttpResponse(connection.getResponseCode(),responseBody,connection.getHeaderFields());
    disconnectConnection(request);
    return result;
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.toString());
    try {
      int responseCode=connection.getResponseCode();
      if (responseCode != -1) {
        SimpleHttpResponse result=new SimpleHttpResponse(responseCode,connection.getResponseMessage());
        disconnectConnection(request);
        return result;
      }
    }
 catch (    IOException ioe) {
      Log.e(""String_Node_Str"",ioe.toString());
    }
  }
 finally {
    disconnectConnection(request);
  }
  return null;
}","public SimpleHttpResponse post(String url,Map<String,String> headerValues,Map<String,Object> postParameters,HttpRequest request){
  HttpURLConnection connection=null;
  connectionPool.put(request,connection);
  try {
    URL u=new URL(url);
    if (u.getProtocol().toLowerCase().equals(""String_Node_Str"")) {
      trustAllHosts();
      HttpsURLConnection https=(HttpsURLConnection)u.openConnection();
      https.setHostnameVerifier(DO_NOT_VERIFY);
      connection=https;
    }
 else {
      connection=(HttpURLConnection)u.openConnection();
    }
    connection.setRequestMethod(""String_Node_Str"");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.setUseCaches(getUseCaches());
    connection.setConnectTimeout(getConnectionTimeout());
    connection.setReadTimeout(getReadTimeout());
    connectionPool.put(request,connection);
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.toString());
    if (connection != null)     disconnectConnection(request);
    return null;
  }
  if (headerValues != null)   for (  String key : headerValues.keySet())   connection.setRequestProperty(key,headerValues.get(key));
  if (postParameters != null) {
    boolean fileExists=false;
    for (    String key : postParameters.keySet()) {
      if (postParameters.get(key).getClass() == (Object)File.class) {
        fileExists=true;
        break;
      }
    }
    try {
      DataOutputStream dos=null;
      if (fileExists) {
        String boundary=""String_Node_Str"";
        String startBoundary=""String_Node_Str"" + boundary + ""String_Node_Str"";
        String endBoundary=""String_Node_Str"";
        String finalEndBoundary=""String_Node_Str"" + boundary + ""String_Node_Str"";
        connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + boundary);
        dos=new DataOutputStream(connection.getOutputStream());
        for (        String key : postParameters.keySet()) {
          dos.writeBytes(startBoundary);
          Object value=postParameters.get(key);
          if (value.getClass() == File.class) {
            File file=(File)value;
            File compressedFile=ImageUtil.compressFile(file,80);
            if (compressedFile != null) {
              file=compressedFile;
            }
            dos.writeBytes(""String_Node_Str"" + key + ""String_Node_Str""+ file.getName()+ ""String_Node_Str"");
            dos.writeBytes(""String_Node_Str"" + getMimeType((File)value) + ""String_Node_Str"");
            dos.writeBytes(""String_Node_Str"");
            FileInputStream fis=new FileInputStream(file);
            int totalSize=fis.available();
            byte[] buffer=new byte[FILE_BUFFER_SIZE];
            int bytesRead=0;
            while ((bytesRead=fis.read(buffer,0,FILE_BUFFER_SIZE)) > 0) {
              dos.write(buffer,0,bytesRead);
              if (progressListener != null) {
                progressListener.onWritten(progressTag,totalSize,bytesRead);
              }
            }
            fis.close();
          }
 else {
            dos.writeBytes(""String_Node_Str"" + key + ""String_Node_Str"");
            dos.writeBytes(value.toString());
          }
          dos.writeBytes(endBoundary);
        }
        dos.writeBytes(finalEndBoundary);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
        dos=new DataOutputStream(connection.getOutputStream());
        StringBuffer buffer=new StringBuffer();
        for (        String key : postParameters.keySet()) {
          if (buffer.length() > 0)           buffer.append(""String_Node_Str"");
          buffer.append(urlencode(key));
          buffer.append(""String_Node_Str"");
          buffer.append(urlencode(postParameters.get(key).toString()));
        }
        dos.writeBytes(buffer.toString());
      }
      dos.flush();
      dos.close();
    }
 catch (    Exception e) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + e.toString());
      Log.e(""String_Node_Str"",e.toString());
      disconnectConnection(request);
      return null;
    }
  }
 else {
    DataOutputStream dos=null;
    try {
      dos=new DataOutputStream(connection.getOutputStream());
      dos.flush();
      dos.close();
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",e.toString());
      disconnectConnection(request);
      return null;
    }
  }
  try {
    InputStream is=connection.getInputStream();
    byte[] responseBody=readBytesFromInputStream(is);
    is.close();
    SimpleHttpResponse result=new SimpleHttpResponse(connection.getResponseCode(),responseBody,connection.getHeaderFields());
    disconnectConnection(request);
    return result;
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e.toString());
    try {
      int responseCode=connection.getResponseCode();
      if (responseCode != -1) {
        SimpleHttpResponse result=new SimpleHttpResponse(responseCode,connection.getResponseMessage());
        disconnectConnection(request);
        return result;
      }
    }
 catch (    IOException ioe) {
      Log.e(""String_Node_Str"",ioe.toString());
    }
  }
 finally {
    disconnectConnection(request);
  }
  return null;
}",0.9974693400817598
153368,"public static Bitmap rotate(Bitmap bitmap,int angle){
  Matrix matrix=new Matrix();
  matrix.postRotate(angle);
  return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
}","public static Bitmap rotate(Bitmap bitmap,int angle){
  if (angle == 0) {
    return bitmap;
  }
  Matrix matrix=new Matrix();
  matrix.postRotate(angle);
  return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
}",0.9046563192904656
153369,"public static Bitmap decodeFile(File f,boolean isScalable){
  try {
    BitmapFactory.Options o=new BitmapFactory.Options();
    o.inJustDecodeBounds=true;
    BitmapFactory.decodeStream(new FileInputStream(f),null,o);
    final int REQUIRED_SIZE=70;
    int width_tmp=o.outWidth, height_tmp=o.outHeight;
    int scale=1;
    if (isScalable) {
      while (true) {
        if (width_tmp / 2 < REQUIRED_SIZE || height_tmp / 2 < REQUIRED_SIZE)         break;
        width_tmp/=2;
        height_tmp/=2;
        scale*=2;
      }
    }
    BitmapFactory.Options o2=new BitmapFactory.Options();
    o2.inSampleSize=scale;
    Bitmap result=BitmapFactory.decodeStream(new FileInputStream(f),null,o2);
    int rotateAngle=getRotateAngle(f);
    if (rotateAngle != 0) {
      result=rotate(result,rotateAngle);
    }
    return result;
  }
 catch (  FileNotFoundException e) {
  }
  return null;
}","public static Bitmap decodeFile(File f,boolean isScalable){
  try {
    BitmapFactory.Options o=new BitmapFactory.Options();
    o.inJustDecodeBounds=true;
    BitmapFactory.decodeStream(new FileInputStream(f),null,o);
    final int REQUIRED_SIZE=70;
    int width_tmp=o.outWidth, height_tmp=o.outHeight;
    int scale=1;
    if (isScalable) {
      while (true) {
        if (width_tmp / 2 < REQUIRED_SIZE || height_tmp / 2 < REQUIRED_SIZE)         break;
        width_tmp/=2;
        height_tmp/=2;
        scale*=2;
      }
    }
    BitmapFactory.Options o2=new BitmapFactory.Options();
    o2.inSampleSize=scale;
    int rotateAngle=getRotateAngle(f);
    return rotate(BitmapFactory.decodeStream(new FileInputStream(f),null,o2),rotateAngle);
  }
 catch (  FileNotFoundException e) {
  }
  return null;
}",0.8265726043503822
153370,"@Override public void requestCallBack(int tag,ArrayList<MatjiData> data){
  StoreFood dummy=new StoreFood();
  Food dummyFood=new Food();
  dummyFood.setName(StoreFoodAdapter.ADD_STORE_FOOD);
  dummy.setFood(dummyFood);
  data.add(dummy);
  super.requestCallBack(tag,data);
}","@Override public void requestCallBack(int tag,ArrayList<MatjiData> data){
  StoreFood dummy=new StoreFood();
  Food dummyFood=new Food();
  dummyFood.setName(StoreFoodAdapter.ADD_STORE_FOOD);
  dummy.setFood(dummyFood);
  dummy.setAccuracy(true);
  data.add(dummy);
  super.requestCallBack(tag,data);
}",0.9532062391681108
153371,"@Override protected void onPreExecute(){
  super.onPreExecute();
  dialog.show();
}",public void onPreExecute(int tag);,0.4273504273504273
153372,"@Override protected Boolean doInBackground(Object... arg0){
  try {
    data=request.request();
    return true;
  }
 catch (  MatjiException e) {
    exception=e;
    return false;
  }
}","@Override protected Boolean doInBackground(Object... arg0){
  boolean result=true;
  if (listenerRef != null && listenerRef.get() != null) {
    listenerRef.get().onStartBackground(tag);
  }
  try {
    data=request.request();
    result=true;
  }
 catch (  MatjiException e) {
    exception=e;
    result=false;
  }
  if (listenerRef != null && listenerRef.get() != null) {
    listenerRef.get().onEndBackground(tag);
  }
  return result;
}",0.5636942675159236
153373,"@Override protected void onPostExecute(Boolean isSuccess){
  super.onPostExecute(isSuccess);
  dialog.dismiss();
  if (isSuccess) {
    requestableRef.get().requestCallBack(tag,data);
  }
 else {
    requestableRef.get().requestExceptionCallBack(tag,exception);
  }
}",public void onPostExecute(int tag);,0.1920529801324503
153374,"public HttpRequest(Context context){
  cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  Session session=Session.getInstance(context);
  postHashtable=new Hashtable<String,Object>();
  getHashtable=new Hashtable<String,String>();
}","public HttpRequest(Context context){
  cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  session=Session.getInstance(context);
  postHashtable=new Hashtable<String,Object>();
  getHashtable=new Hashtable<String,String>();
}",0.9845559845559846
153375,"private SimpleHttpResponse requestHttpResponse(String url,Map<String,String> header,Map<String,Object> postMap,Map<String,String> getMap,int method) throws HttpConnectMatjiException {
  SimpleHttpResponse httpResponse=null;
  NetworkInfo netInfo_mobile=cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
  NetworkInfo netInfo_wifi=cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
  Map<String,String> getParam=(getMap == null) ? null : (new Hashtable(getMap));
  Map<String,Object> postParam=(postMap == null) ? null : (new Hashtable(postMap));
  if ((netInfo_mobile.getState() == NetworkInfo.State.CONNECTED) || (netInfo_wifi.getState() == NetworkInfo.State.CONNECTED)) {
    Map<String,String> baseHeader=new HashMap<String,String>();
    if (header != null) {
      baseHeader.putAll(header);
    }
    if (postParam != null) {
      if (session != null && session.isLogin())       postParam.put(""String_Node_Str"",""String_Node_Str"" + session.getToken());
      postParam.put(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (getParam != null) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      if (session != null && session.isLogin()) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + session.getToken());
        getParam.put(""String_Node_Str"",""String_Node_Str"" + session.getToken());
      }
      getParam.put(""String_Node_Str"",""String_Node_Str"");
    }
    if (method == HttpUtility.ASYNC_METHOD_POST) {
      HttpUtility utility=HttpUtility.getInstance();
      httpResponse=utility.post(url,baseHeader,postParam,this);
    }
 else {
      httpResponse=HttpUtility.getInstance().get(url,baseHeader,getParam,this);
    }
  }
 else {
    httpResponse=null;
  }
  if (httpResponse == null) {
    throw new HttpConnectMatjiException();
  }
 else   return httpResponse;
}","private SimpleHttpResponse requestHttpResponse(String url,Map<String,String> header,Map<String,Object> postMap,Map<String,String> getMap,int method) throws HttpConnectMatjiException {
  SimpleHttpResponse httpResponse=null;
  NetworkInfo netInfo_mobile=cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
  NetworkInfo netInfo_wifi=cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
  Map<String,String> getParam=(getMap == null) ? null : (new Hashtable(getMap));
  Map<String,Object> postParam=(postMap == null) ? null : (new Hashtable(postMap));
  if ((netInfo_mobile.getState() == NetworkInfo.State.CONNECTED) || (netInfo_wifi.getState() == NetworkInfo.State.CONNECTED)) {
    Map<String,String> baseHeader=new HashMap<String,String>();
    if (header != null) {
      baseHeader.putAll(header);
    }
    if (postParam != null) {
      if (session.isLogin())       postParam.put(""String_Node_Str"",""String_Node_Str"" + session.getToken());
      postParam.put(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (getParam != null) {
      if (session.isLogin())       getParam.put(""String_Node_Str"",""String_Node_Str"" + session.getToken());
      getParam.put(""String_Node_Str"",""String_Node_Str"");
    }
    if (method == HttpUtility.ASYNC_METHOD_POST) {
      HttpUtility utility=HttpUtility.getInstance();
      httpResponse=utility.post(url,baseHeader,postParam,this);
    }
 else {
      httpResponse=HttpUtility.getInstance().get(url,baseHeader,getParam,this);
    }
  }
 else {
    httpResponse=null;
  }
  if (httpResponse == null) {
    throw new HttpConnectMatjiException();
  }
 else   return httpResponse;
}",0.8365019011406845
153376,"public void requestExceptionCallBack(int tag,MatjiException e){
  if (tag == HttpRequestManager.AUTHORIZE) {
    if (mLoginableRef != null && mLoginableRef.get() != null)     mLoginableRef.get().loginFailed();
  }
}","public void requestExceptionCallBack(int tag,MatjiException e){
  if (tag == HttpRequestManager.AUTHORIZE) {
    e.performExceptionHandling(mContextRef.get());
    if (mLoginableRef != null && mLoginableRef.get() != null)     mLoginableRef.get().loginFailed();
  }
}",0.893970893970894
153377,"public void requestCallBack(int tag,ArrayList<MatjiData> data){
switch (tag) {
case HttpRequestManager.AUTHORIZE:
    Me me=(Me)data.get(0);
  saveMe(me);
if (mLoginableRef != null && mLoginableRef.get() != null) mLoginableRef.get().loginCompleted();
postLogin();
break;
}
}","public void requestCallBack(int tag,ArrayList<MatjiData> data){
switch (tag) {
case HttpRequestManager.AUTHORIZE:
    Me me=(Me)data.get(0);
  saveMe(me);
if (mLoginableRef != null && mLoginableRef.get() != null) {
  mLoginableRef.get().loginCompleted();
}
postLogin();
break;
}
}",0.9891696750902528
153378,"public void login(Loginable loginable){
  this.loginableRef=new WeakReference(loginable);
  if (idField.getText().toString().trim().equals(""String_Node_Str"") || pwdField.getText().toString().trim().equals(""String_Node_Str"")) {
    toast.show();
  }
 else {
    if (saveidCheckBox.isChecked()) {
      privateUtil.setSavedUserId(idField.getText().toString());
    }
    MeHttpRequest request=new MeHttpRequest(getContext());
    request.actionAuthorize(idField.getText().toString(),pwdField.getText().toString());
    DialogAsyncTask dialogTask=new DialogAsyncTask(getContext(),this,request,REQUEST_LOGIN);
    dialogTask.execute();
  }
}","public void login(Loginable loginable){
  this.loginableRef=new WeakReference(loginable);
  if (idField.getText().toString().trim().equals(""String_Node_Str"") || pwdField.getText().toString().trim().equals(""String_Node_Str"")) {
    toast.show();
  }
 else {
    if (saveidCheckBox.isChecked()) {
      privateUtil.setSavedUserId(idField.getText().toString());
    }
    session.loginWithDialog(getContext(),idField.getText().toString(),pwdField.getText().toString(),loginable);
  }
}",0.8007149240393209
153379,"/** 
 * 이 UserCell에 user 정보를 저장하고 해당 유저의 변하지 않는 정보들을 뷰에 뿌려준다.
 * @param user
 */
public void setUser(User user){
  this.user=user;
  profile.setUserId(user.getId());
  nick.setText(user.getNick());
  if (user.getMileage() != null)   point.setText(user.getMileage().getTotalPoint() + ""String_Node_Str"");
 else   point.setText(""String_Node_Str"");
  area.setText(MatjiConstants.countryName(user.getCountryCode()));
  likeList.setOnClickListener(new LikeStoreListListener(getContext(),user));
  followingListener.setUser(user);
}","/** 
 * 이 UserCell에 user 정보를 저장하고 해당 유저의 변하지 않는 정보들을 뷰에 뿌려준다.
 * @param user
 */
public void setUser(User user){
  this.user=user;
  profile.setUserId(user.getId());
  nick.setText(user.getNick());
  if (user.getMileage() != null)   point.setText(user.getMileage().getTotalPoint() + ""String_Node_Str"");
 else   point.setText(""String_Node_Str"");
  area.setText(MatjiConstants.countryName(user.getCountryCode()));
  likeList.setText(user.getLikeStoreCount() + ""String_Node_Str"");
  likeList.setOnClickListener(new LikeStoreListListener(getContext(),user));
  followingListener.setUser(user);
}",0.9408602150537636
153380,"protected StoreFood getMatjiData(JsonObject object) throws MatjiException {
  if (object == null)   return null;
  StoreFood storeFood=new StoreFood();
  storeFood.setId(getInt(object,""String_Node_Str""));
  storeFood.setUserId(getInt(object,""String_Node_Str""));
  storeFood.setFoodId(getInt(object,""String_Node_Str""));
  storeFood.setStoreId(getInt(object,""String_Node_Str""));
  storeFood.setLikeCount(getInt(object,""String_Node_Str""));
  storeFood.setAccuracy(getInt(object,""String_Node_Str"") != 0);
  StoreParser storeParser=new StoreParser(context);
  storeFood.setStore(storeParser.getMatjiData(getObject(object,""String_Node_Str"")));
  FoodParser foodParser=new FoodParser(context);
  storeFood.setFood(foodParser.getMatjiData(getObject(object,""String_Node_Str"")));
  UserParser userParser=new UserParser(context);
  storeFood.setUser(userParser.getMatjiData(getObject(object,""String_Node_Str"")));
  Log.d(""String_Node_Str"",""String_Node_Str"");
  return storeFood;
}","protected StoreFood getMatjiData(JsonObject object) throws MatjiException {
  if (object == null)   return null;
  StoreFood storeFood=new StoreFood();
  storeFood.setId(getInt(object,""String_Node_Str""));
  storeFood.setUserId(getInt(object,""String_Node_Str""));
  storeFood.setFoodId(getInt(object,""String_Node_Str""));
  storeFood.setStoreId(getInt(object,""String_Node_Str""));
  storeFood.setLikeCount(getInt(object,""String_Node_Str""));
  storeFood.setAccuracy(getBoolean(object,""String_Node_Str""));
  StoreParser storeParser=new StoreParser(context);
  storeFood.setStore(storeParser.getMatjiData(getObject(object,""String_Node_Str"")));
  FoodParser foodParser=new FoodParser(context);
  storeFood.setFood(foodParser.getMatjiData(getObject(object,""String_Node_Str"")));
  UserParser userParser=new UserParser(context);
  storeFood.setUser(userParser.getMatjiData(getObject(object,""String_Node_Str"")));
  Log.d(""String_Node_Str"",""String_Node_Str"");
  return storeFood;
}",0.738255033557047
153381,"@Override protected void onPreExecute(){
  super.onPreExecute();
  request.setProgressListener(tag,this);
  progressDialog.setMax(request.getRequestCount());
  progressDialog.show();
}","@Override protected void onPreExecute(){
  super.onPreExecute();
  request.setProgressListener(tag,this);
  progressDialog.show();
}",0.8354430379746836
153382,"public void onUnitWritten(int tag,int totalCount,int readCount){
  publishProgress(PRIMARY,tag,totalCount,readCount);
}","public void onUnitWritten(int tag,int totalCount,int readCount){
}",0.7135135135135136
153383,"public void onWritten(int tag,int totalBytes,int readBytes){
  publishProgress(SECONDARY,tag,totalBytes,readBytes);
}","public void onWritten(int tag,int totalBytes,int readBytes){
  publishProgress(PRIMARY,tag,totalBytes,readBytes);
}",0.956896551724138
153384,"public void onStart(AsyncTask task){
}","public void onStart(Threadable task){
}",0.8051948051948052
153385,"public void run(){
  Session session=Session.getInstance(IntroActivity.this);
  if (session.isLogin())   session.unsyncSessionValidate();
  session.notificationValidate();
  ImageLoader.clearCache(getApplicationContext());
  startActivity(new Intent(IntroActivity.this,MainTabActivity.class));
  finish();
}","public void run(){
  Session session=Session.getInstance(IntroActivity.this);
  if (session.isLogin())   session.unsyncSessionValidate();
  session.notificationValidate();
  ImageLoader.clearCache(getApplicationContext());
  startActivity(new Intent(IntroActivity.this,MainTabActivity.class));
}",0.9800664451827242
153386,"public void onFinish(AsyncTask task){
  timeAsyncTask.setTimeListener(null);
  if (lastElapsedTime < LOADING_MIN_TIME) {
    try {
      Thread.sleep(LOADING_MIN_TIME - lastElapsedTime);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  dialog.dismiss();
}","public void onFinish(Threadable task){
  timeAsyncTask.setTimeListener(null);
  if (lastElapsedTime < LOADING_MIN_TIME) {
    try {
      Thread.sleep(LOADING_MIN_TIME - lastElapsedTime);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  dialog.dismiss();
  finish();
}",0.9475465313028764
153387,"protected void onPreExecute(){
  if (listener != null)   listener.onStartRequest(this);
}","public void onPreExecute(){
  if (listener != null)   listener.onStartRequest(this);
}",0.9371428571428572
153388,"public void execute(){
  execute(command);
}","public void execute(){
  super.execute(command);
}",0.9361702127659576
153389,public void onStart(AsyncTask task);,public void onStart(Threadable task);,0.7945205479452054
153390,public void onFinish(AsyncTask task);,public void onFinish(Threadable task);,0.8
153391,"public void execute(){
  execute(new Object());
}","public void execute(){
  if (listener != null)   listener.onStart(this);
  start();
}",0.5671641791044776
153392,"public void requestCallBack(int tag,ArrayList<MatjiData> data){
switch (tag) {
case REQUEST_GEOCODING:
    GeocodeAddress address=(GeocodeAddress)data.get(0);
  Intent result=new Intent();
int addrLat=address.getLocationLat();
int addrLng=address.getLocationLng();
result.putExtra(INTENT_KEY_LATITUDE,addrLat);
result.putExtra(INTENT_KEY_LONGITUDE,addrLng);
result.putExtra(INTENT_KEY_LOCATION_NAME,lastSearchSeed);
setResult(Activity.RESULT_OK,result);
Log.d(""String_Node_Str"",""String_Node_Str"");
finish();
}
}","public void requestCallBack(int tag,ArrayList<MatjiData> data){
switch (tag) {
case REQUEST_GEOCODING:
    GeocodeAddress address=(GeocodeAddress)data.get(0);
  Intent result=new Intent();
int addrLat=address.getLocationLat();
int addrLng=address.getLocationLng();
result.putExtra(INTENT_KEY_LATITUDE,addrLat);
result.putExtra(INTENT_KEY_LONGITUDE,addrLng);
result.putExtra(INTENT_KEY_LOCATION_NAME,lastSearchSeed);
setResult(Activity.RESULT_OK,result);
finish();
}
}",0.9550102249488752
153393,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_map);
  context=getApplicationContext();
  sessionLocationUtil=new SessionRecentLocationUtil(context);
  addressView=(TextView)findViewById(R.id.map_title_bar_address);
  mapView=(MainMatjiMapView)findViewById(R.id.map_view);
  mapView.init(addressView,this);
  storeListView=(StoreMapNearListView)findViewById(R.id.main_map_store_list);
  storeListView.init(addressView,this);
  flipButton=findViewById(R.id.map_title_bar_flip_button);
  isFlow=false;
  currentViewIsMap=true;
  flipMapViewBackground=getResources().getDrawable(R.drawable.map_titlebar_flip_mapview_btn);
  flipNearStoreBackground=getResources().getDrawable(R.drawable.map_titlebar_flip_btn);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_map);
  context=getApplicationContext();
  sessionLocationUtil=new SessionRecentLocationUtil(context);
  addressView=(TextView)findViewById(R.id.map_title_bar_address);
  mapView=(MainMatjiMapView)findViewById(R.id.map_view);
  mapView.init(addressView,this);
  storeListView=(StoreMapNearListView)findViewById(R.id.main_map_store_list);
  storeListView.init(addressView,this);
  flipButton=findViewById(R.id.map_title_bar_flip_button);
  currentViewIsMap=true;
  flipMapViewBackground=getResources().getDrawable(R.drawable.map_titlebar_flip_mapview_btn);
  flipNearStoreBackground=getResources().getDrawable(R.drawable.map_titlebar_flip_btn);
}",0.9897435897435898
153394,"protected void onResume(){
  super.onResume();
  mapView.startMapCenterThread();
  if (!isFlow) {
    storeListView.requestReload();
  }
 else {
    isFlow=false;
  }
}","protected void onResume(){
  super.onResume();
  mapView.startMapCenterThread();
}",0.656
153395,"public String putSectionName(int position){
  if (position >= nearByStoreIndex) {
    return SECTION_STORE;
  }
 else {
    return SECTION_BOOKMARK_STORE;
  }
}","public String putSectionName(int position){
  return SECTION_STORE;
}",0.6026200873362445
153396,"public View getItemView(int position,View convertView,ViewGroup parent){
  StoreElement storeElement;
  Store store=(Store)data.get(position);
  if (convertView == null) {
    storeElement=new StoreElement();
    convertView=getLayoutInflater().inflate(R.layout.adapter_near_store,null);
    storeElement.name=(TextView)convertView.findViewById(R.id.adapter_near_store_name);
    storeElement.likeCount=(TextView)convertView.findViewById(R.id.adapter_near_store_like_count);
    storeElement.postCount=(TextView)convertView.findViewById(R.id.adapter_near_store_post_count);
    storeElement.bookmarkToggle=(BookmarkStarToggleView)convertView.findViewById(R.id.adapter_near_store_bookmark);
    convertView.setTag(storeElement);
  }
 else {
    storeElement=(StoreElement)convertView.getTag();
  }
  storeElement.name.setText(store.getName());
  storeElement.likeCount.setText(""String_Node_Str"" + store.getLikeCount());
  storeElement.postCount.setText(""String_Node_Str"" + store.getPostCount());
  storeElement.bookmarkToggle.init(this,bookmarkedList,store);
  return convertView;
}","public View getItemView(int position,View convertView,ViewGroup parent){
  StoreElement storeElement;
  Store store=(Store)data.get(position);
  if (convertView == null) {
    storeElement=new StoreElement();
    convertView=getLayoutInflater().inflate(R.layout.adapter_near_store,null);
    storeElement.name=(TextView)convertView.findViewById(R.id.adapter_near_store_name);
    storeElement.likeCount=(TextView)convertView.findViewById(R.id.adapter_near_store_like_count);
    storeElement.postCount=(TextView)convertView.findViewById(R.id.adapter_near_store_post_count);
    storeElement.bookmarkToggle=(BookmarkStarToggleView)convertView.findViewById(R.id.adapter_near_store_bookmark);
    storeElement.listener=new StoreClickListener(context);
    convertView.setTag(storeElement);
  }
 else {
    storeElement=(StoreElement)convertView.getTag();
  }
  storeElement.name.setText(store.getName());
  storeElement.likeCount.setText(""String_Node_Str"" + store.getLikeCount());
  storeElement.postCount.setText(""String_Node_Str"" + store.getPostCount());
  storeElement.bookmarkToggle.init(this,bookmarkedList,store);
  storeElement.listener.setStore(store);
  convertView.setOnClickListener(storeElement.listener);
  return convertView;
}",0.9271237602414834
153397,"public ArrayList<MatjiData> request() throws MatjiException {
  if (!isBookmarkListEnded && session.isLogin()) {
    isBookmarkListEnded=true;
    storeRequest.actionNearbyBookmarkedList(user_id,lat_sw,lat_ne,lng_sw,lng_ne,page);
    bookmarkList=storeRequest.request();
    nearByStoreIndex=bookmarkList.size();
    storeRequest.actionNearbyList(lat_sw,lat_ne,lng_sw,lng_ne,page,limit);
    storeList=storeRequest.request();
    resultList.addAll(bookmarkList);
    resultList.addAll(storeList);
    return resultList;
  }
 else {
    storeRequest.actionNearbyList(lat_sw,lat_ne,lng_sw,lng_ne,page,limit);
    resultList=storeRequest.request();
    return resultList;
  }
}","public ArrayList<MatjiData> request() throws MatjiException {
  if (!isBookmarkListEnded && session.isLogin()) {
    isBookmarkListEnded=true;
    storeRequest.actionNearbyBookmarkedList(user_id,lat_sw,lat_ne,lng_sw,lng_ne,page);
    bookmarkList=storeRequest.request();
    nearByStoreIndex=bookmarkList.size();
    storeRequest.actionNearbyList(lat_sw,lat_ne,lng_sw,lng_ne,page,limit);
    storeList=storeRequest.request();
    resultList.addAll(storeList);
    return resultList;
  }
 else {
    storeRequest.actionNearbyList(lat_sw,lat_ne,lng_sw,lng_ne,page,limit);
    resultList=storeRequest.request();
    return resultList;
  }
}",0.9717772692601068
153398,"private void saveRecentQueue(LinkedList<LocationSearchToken> queue){
  try {
    preferenceProvider.setObject(SessionIndex.RECENT_CHANGED_LOCATION,queue);
  }
 catch (  NotSerializableException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
}","private void saveRecentQueue(LinkedList<LocationSearchToken> queue){
  try {
    preferenceProvider.setObject(SessionIndex.RECENT_CHANGED_LOCATION,queue);
    preferenceProvider.commit();
  }
 catch (  NotSerializableException e) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
}",0.9437819420783644
153399,"public void onClick(View v){
  if (requestManager.isRunning()) {
    return;
  }
  if (isUnchecked) {
    if (session.isLogin()) {
      bookmarkedList.add(store);
      adapter.notifyDataSetChanged();
      requestBookmark(store);
      isUnchecked=false;
    }
 else {
      confirmLogin();
    }
  }
 else {
    removeBookmarkedList(store);
    adapter.notifyDataSetChanged();
    requestUnBookmark(store);
    isUnchecked=true;
  }
}","public void onClick(View v){
  if (requestManager.isRunning()) {
    return;
  }
  if (isUnchecked) {
    if (session.isLogin()) {
      bookmarkedList.add(store);
      requestBookmark(store);
      showCheckedView();
      isUnchecked=false;
    }
 else {
      confirmLogin();
    }
  }
 else {
    removeBookmarkedList(store);
    requestUnBookmark(store);
    showUncheckedView();
    isUnchecked=true;
  }
}",0.8047058823529412
153400,"public void onListItemClick(int position){
  activity.setIsFlow(true);
  Store store=(Store)getAdapterData().get(position);
  Intent intent=new Intent(getActivity(),StoreMainActivity.class);
  intent.putExtra(StoreMainActivity.STORE,(Parcelable)store);
  getActivity().startActivity(intent);
}","public void onListItemClick(int position){
}",0.2611275964391691
153401,"public void actionCurrentUserBookmarkedList(int page,int limit){
  Session session=Session.getInstance(context);
  actionBookmarkedList(session.getCurrentUser().getId(),page,limit);
}","public void actionCurrentUserBookmarkedList(int page,int limit){
  Session session=Session.getInstance(context);
  actionBookmarkList(session.getCurrentUser().getId(),page,limit);
}",0.9945054945054944
153402,"@SuppressWarnings(""String_Node_Str"") private HashMap<String,Object> getSharedObjectPreferences(){
  HashMap<String,Object> hmap=null;
  FileInputStream fis=null;
  ObjectInputStream ois=null;
  try {
    fis=context.openFileInput(OBJECT_PREFERENCE_NAME);
    ois=new ObjectInputStream(fis);
    hmap=(HashMap<String,Object>)ois.readObject();
    if (hmap == null) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      hmap=new HashMap<String,Object>();
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + hmap.size());
    }
  }
 catch (  Throwable e) {
    hmap=new HashMap<String,Object>();
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (ois != null)     ois.close();
    if (fis != null)     fis.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return hmap;
}","@SuppressWarnings(""String_Node_Str"") private HashMap<String,Object> getSharedObjectPreferences(){
  HashMap<String,Object> hmap=null;
  FileInputStream fis=null;
  ObjectInputStream ois=null;
  try {
    fis=context.openFileInput(OBJECT_PREFERENCE_NAME);
    ois=new ObjectInputStream(fis);
    hmap=(HashMap<String,Object>)ois.readObject();
    if (hmap == null) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      hmap=new HashMap<String,Object>();
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + hmap.size());
    }
  }
 catch (  Throwable e) {
    Log.d(""String_Node_Str"",e.getMessage());
    hmap=new HashMap<String,Object>();
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (ois != null)     ois.close();
    if (fis != null)     fis.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return hmap;
}",0.973325429756965
153403,"public void requestCallBack(int tag,ArrayList<MatjiData> data){
  if (data.size() == 0 || data.size() < limit) {
    scrollListener.requestSetOff();
  }
 else {
    scrollListener.requestSetOn();
  }
  adapter.addAll(data);
  if (data.size() > 0)   adapter.notifyDataSetChanged();
  onRefreshComplete();
}","public void requestCallBack(int tag,ArrayList<MatjiData> data){
  if (tag == REQUEST_RELOAD) {
    clearAdapter();
  }
  if (data.size() == 0 || data.size() < limit) {
    scrollListener.requestSetOff();
  }
 else {
    scrollListener.requestSetOn();
  }
  adapter.addAll(data);
  if (data.size() > 0)   adapter.notifyDataSetChanged();
  onRefreshComplete();
}",0.8842105263157894
153404,"public void initValue(){
  adapter.clear();
  page=1;
}","public void initValue(){
  page=1;
}",0.7912087912087912
153405,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_map);
  mMapView=(MatjiMapView)findViewById(R.id.map_view);
  mMapController=mMapView.getController();
  mMapView.setMapCenterListener(this);
  mContext=getApplicationContext();
  mGpsManager=new GpsManager(mContext,this);
  mSearchView=(EditText)findViewById(R.id.main_map_search_box);
  mRequestManager=HttpRequestManager.getInstance(mContext);
  storeItemizedOverlay=new StoreItemizedOverlay(mContext,this,mMapView);
  bookmarkButton=(Button)findViewById(R.id.bookmark_button);
  session=Session.getInstance(mContext);
  mSearchView.setOnKeyListener(this);
  mGpsManager.start();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_map);
  mMapView=(MatjiMapView)findViewById(R.id.map_view);
  mMapController=mMapView.getController();
  mMapView.setMapCenterListener(this);
  mMapView.setOnTouchListener(this);
  mContext=getApplicationContext();
  mGpsManager=new GpsManager(mContext,this);
  mSearchView=(EditText)findViewById(R.id.main_map_search_box);
  mRequestManager=HttpRequestManager.getInstance(mContext);
  storeItemizedOverlay=new StoreItemizedOverlay(mContext,this,mMapView);
  bookmarkButton=(Button)findViewById(R.id.bookmark_button);
  session=Session.getInstance(mContext);
  mSearchView.setOnKeyListener(this);
  mGpsManager.start();
}",0.9746401644962304
153406,"private void drawOverlays(){
  storeItemizedOverlay.getOverlayItems().clear();
  for (  MatjiData storeData : stores) {
    Store store=(Store)storeData;
    storeItemizedOverlay.addOverlay(store);
  }
  mMapView.postInvalidate();
}","private void drawOverlays(){
  mMapView.getOverlays().clear();
  storeItemizedOverlay.getOverlayItems().clear();
  for (  MatjiData storeData : stores) {
    Store store=(Store)storeData;
    storeItemizedOverlay.addOverlay(store);
  }
  mMapView.postInvalidate();
}",0.931726907630522
153407,"protected void onResume(){
  super.onResume();
  mMapView.startMapCenterThread();
}","protected void onResume(){
  super.onResume();
}",0.732824427480916
153408,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_map);
  mMapView=(MatjiMapView)findViewById(R.id.map_view);
  mMapController=mMapView.getController();
  mMapView.setMapCenterListener(this);
  mContext=getApplicationContext();
  mGpsManager=new GpsManager(mContext,this);
  mRequestManager=HttpRequestManager.getInstance(mContext);
  storeItemizedOverlay=new StoreItemizedOverlay(mContext,mMapView);
  session=Session.getInstance(mContext);
  mGpsManager.start();
  mMapView.startMapCenterThread();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_map);
  mMapView=(MatjiMapView)findViewById(R.id.map_view);
  mMapController=mMapView.getController();
  mMapView.setMapCenterListener(this);
  mContext=getApplicationContext();
  mGpsManager=new GpsManager(mContext,this);
  mRequestManager=HttpRequestManager.getInstance(mContext);
  storeItemizedOverlay=new StoreItemizedOverlay(mContext,mMapView);
  session=Session.getInstance(mContext);
  mGpsManager.start();
}",0.9687778768956288
153409,"protected void onResume(){
  super.onResume();
}","protected void onResume(){
  super.onResume();
  mMapView.startMapCenterThread();
}",0.732824427480916
153410,"public boolean isRequestAlreadyExecute(HttpRequest request){
  Iterator itr=tasks.iterator();
  boolean result=false;
  HttpAsyncTask task;
  HttpRequest prevRequest;
  while (itr.hasNext() && !result) {
    task=(HttpAsyncTask)itr.next();
    prevRequest=task.getRequest();
    result=(prevRequest.getTag() == request.getTag());
  }
  return result;
}","public boolean isRequestAlreadyExecute(HttpRequest request){
  Iterator itr=tasks.iterator();
  boolean result=false;
  HttpAsyncTask task;
  HttpRequest prevRequest;
  while (itr.hasNext() && !result) {
    task=(HttpAsyncTask)itr.next();
    prevRequest=task.getRequest();
    result=prevRequest.isEqual(request);
  }
  return result;
}",0.936231884057971
153411,"public ArrayList<MatjiData> request() throws MatjiException {
  SimpleHttpResponse response=(httpMethod == HttpMethod.HTTP_POST) ? requestHttpResponsePost(serverDomain + controller + ""String_Node_Str""+ action,null,postHashtable) : requestHttpResponseGet(serverDomain + controller + ""String_Node_Str""+ action,null,getHashtable);
  String resultBody=response.getHttpResponseBodyAsString();
  String resultCode=response.getHttpStatusCode() + ""String_Node_Str"";
  Log.d(""String_Node_Str"",""String_Node_Str"" + resultBody);
  Log.d(""String_Node_Str"",""String_Node_Str"" + resultCode);
  ArrayList<MatjiData> attachFiles=parser.parseToMatjiDataList(resultBody);
  ArrayList<MatjiData> result=new ArrayList<MatjiData>();
  for (int i=0; i < attachFiles.size(); i=i + capacity) {
    int[] ids=new int[capacity];
    for (int j=0; j < ids.length; j++) {
      ids[j]=ImageAdapter.IMAGE_IS_NULL;
    }
    for (int j=0; (j < ids.length) && (i + j < attachFiles.size()); j++) {
      ids[j]=((AttachFile)attachFiles.get(i + j)).getId();
    }
    AttachFileIds attachFileIds=new AttachFileIds();
    attachFileIds.setIds(ids);
    result.add(attachFileIds);
  }
  return result;
}","public ArrayList<MatjiData> request() throws MatjiException {
  SimpleHttpResponse response=(httpMethod == HttpMethod.HTTP_POST) ? requestHttpResponsePost(null,postHashtable) : requestHttpResponseGet(null,getHashtable);
  String resultBody=response.getHttpResponseBodyAsString();
  String resultCode=response.getHttpStatusCode() + ""String_Node_Str"";
  Log.d(""String_Node_Str"",""String_Node_Str"" + resultBody);
  Log.d(""String_Node_Str"",""String_Node_Str"" + resultCode);
  ArrayList<MatjiData> attachFiles=parser.parseToMatjiDataList(resultBody);
  ArrayList<MatjiData> result=new ArrayList<MatjiData>();
  for (int i=0; i < attachFiles.size(); i=i + capacity) {
    int[] ids=new int[capacity];
    for (int j=0; j < ids.length; j++) {
      ids[j]=ImageAdapter.IMAGE_IS_NULL;
    }
    for (int j=0; (j < ids.length) && (i + j < attachFiles.size()); j++) {
      ids[j]=((AttachFile)attachFiles.get(i + j)).getId();
    }
    AttachFileIds attachFileIds=new AttachFileIds();
    attachFileIds.setIds(ids);
    result.add(attachFileIds);
  }
  return result;
}",0.947841726618705
153412,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_chat);
  manager=HttpRequestManager.getInstance(this);
  message=(Message)SharedMatjiData.getInstance().top();
  User me=Session.getInstance(this).getCurrentUser();
  user_id=(message.getSentUserId() == me.getId()) ? message.getReceivedUserId() : message.getSentUserId();
  listView=(ChatView)findViewById(R.id.chat);
  listView.setThreadId(message.getThreadId());
  listView.setActivity(this);
  listView.requestReload();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_chat);
  manager=HttpRequestManager.getInstance(this);
  message=(Message)SharedMatjiData.getInstance().top();
  User me=Session.getInstance(this).getCurrentUser();
  user_id=(message.getSentUserId() == me.getId()) ? message.getReceivedUserId() : message.getSentUserId();
  listView=(ChatView)findViewById(R.id.chat);
  listView.setThreadId(message.getThreadId());
  listView.setActivity(this);
}",0.9736842105263158
153413,"public void finishWithMatjiData(){
  SharedMatjiData.getInstance().pop();
  super.finish();
}","public void finishWithMatjiData(){
  preFinish();
  super.finish();
}",0.8024691358024691
153414,"public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityForResult(intent,requestCode);
}","public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityForResult(intent,requestCode);
}",0.905027932960894
153415,"public void finishActivityWithMatjiData(int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivity(requestCode);
}","public void finishActivityWithMatjiData(int requestCode){
  preFinish();
  super.finishActivity(requestCode);
}",0.8699186991869918
153416,"public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityFromChild(child,intent,requestCode);
}","public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityFromChild(child,intent,requestCode);
}",0.915
153417,"public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  return super.startActivityIfNeeded(intent,requestCode);
}","public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  return super.startActivityIfNeeded(intent,requestCode);
}",0.9090909090909092
153418,"public void startActivityWithMatjiData(Intent intent,MatjiData data){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  SharedMatjiData.getInstance().push(data);
  super.startActivity(intent);
}","public void startActivityWithMatjiData(Intent intent,MatjiData data){
  preStart(data);
  super.startActivity(intent);
}",0.75
153419,"public void finishFromChildWithMatjiData(Activity child){
  SharedMatjiData.getInstance().pop();
  super.finishFromChild(child);
}","public void finishFromChildWithMatjiData(Activity child){
  preFinish();
  super.finishFromChild(child);
}",0.864406779661017
153420,"public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivityFromChild(child,requestCode);
}","public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  preFinish();
  super.finishActivityFromChild(child,requestCode);
}",0.9012345679012346
153421,"public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityForResult(intent,requestCode);
}","public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityForResult(intent,requestCode);
}",0.905027932960894
153422,"public void finishActivityWithMatjiData(int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivity(requestCode);
}","public void finishActivityWithMatjiData(int requestCode){
  preFinish();
  super.finishActivity(requestCode);
}",0.8699186991869918
153423,"public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityFromChild(child,intent,requestCode);
}","public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityFromChild(child,intent,requestCode);
}",0.915
153424,"public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  return super.startActivityIfNeeded(intent,requestCode);
}","public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  return super.startActivityIfNeeded(intent,requestCode);
}",0.9090909090909092
153425,"public void startActivityWithMatjiData(Intent intent,MatjiData data){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  SharedMatjiData.getInstance().push(data);
  super.startActivity(intent);
}","public void startActivityWithMatjiData(Intent intent,MatjiData data){
  preFinish();
  super.startActivity(intent);
}",0.7378640776699029
153426,"public void finishFromChildWithMatjiData(Activity child){
  SharedMatjiData.getInstance().pop();
  super.finishFromChild(child);
}","public void finishFromChildWithMatjiData(Activity child){
  preFinish();
  super.finishFromChild(child);
}",0.864406779661017
153427,"public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivityFromChild(child,requestCode);
}","public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  preFinish();
  super.finishActivityFromChild(child,requestCode);
}",0.9012345679012346
153428,"public void finishWithMatjiData(){
  SharedMatjiData.getInstance().pop();
  super.finish();
}","public void finishWithMatjiData(){
  preFinish();
  super.finish();
}",0.8024691358024691
153429,"public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityForResult(intent,requestCode);
}","public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityForResult(intent,requestCode);
}",0.905027932960894
153430,"public void finishActivityWithMatjiData(int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivity(requestCode);
}","public void finishActivityWithMatjiData(int requestCode){
  preFinish();
  super.finishActivity(requestCode);
}",0.8699186991869918
153431,"public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityFromChild(child,intent,requestCode);
}","public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityFromChild(child,intent,requestCode);
}",0.915
153432,"public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  return super.startActivityIfNeeded(intent,requestCode);
}","public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  return super.startActivityIfNeeded(intent,requestCode);
}",0.9090909090909092
153433,"public void startActivityWithMatjiData(Intent intent,MatjiData data){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  SharedMatjiData.getInstance().push(data);
  super.startActivity(intent);
}","public void startActivityWithMatjiData(Intent intent,MatjiData data){
  preStart(data);
  super.startActivity(intent);
}",0.75
153434,"public void finishFromChildWithMatjiData(Activity child){
  SharedMatjiData.getInstance().pop();
  super.finishFromChild(child);
}","public void finishFromChildWithMatjiData(Activity child){
  preFinish();
  super.finishFromChild(child);
}",0.864406779661017
153435,"public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivityFromChild(child,requestCode);
}","public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  preFinish();
  super.finishActivityFromChild(child,requestCode);
}",0.9012345679012346
153436,"public void finishWithMatjiData(){
  SharedMatjiData.getInstance().pop();
  super.finish();
}","public void finishWithMatjiData(){
  preFinish();
  super.finish();
}",0.8024691358024691
153437,"public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityForResult(intent,requestCode);
}","public void startActivityForResultWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityForResult(intent,requestCode);
}",0.905027932960894
153438,"public void finishActivityWithMatjiData(int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivity(requestCode);
}","public void finishActivityWithMatjiData(int requestCode){
  preFinish();
  super.finishActivity(requestCode);
}",0.8699186991869918
153439,"public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  super.startActivityFromChild(child,intent,requestCode);
}","public void startActivityFromChildWithMatjiData(Activity child,Intent intent,int requestCode,MatjiData data){
  preStart(data);
  super.startActivityFromChild(child,intent,requestCode);
}",0.915
153440,"public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  SharedMatjiData.getInstance().push(data);
  return super.startActivityIfNeeded(intent,requestCode);
}","public boolean startActivityIfNeededWithMatjiData(Intent intent,int requestCode,MatjiData data){
  preStart(data);
  return super.startActivityIfNeeded(intent,requestCode);
}",0.9090909090909092
153441,"public void startActivityWithMatjiData(Intent intent,MatjiData data){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  SharedMatjiData.getInstance().push(data);
  super.startActivity(intent);
}","public void startActivityWithMatjiData(Intent intent,MatjiData data){
  preStart(data);
  super.startActivity(intent);
}",0.75
153442,"public void finishFromChildWithMatjiData(Activity child){
  SharedMatjiData.getInstance().pop();
  super.finishFromChild(child);
}","public void finishFromChildWithMatjiData(Activity child){
  preFinish();
  super.finishFromChild(child);
}",0.864406779661017
153443,"public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  SharedMatjiData.getInstance().pop();
  super.finishActivityFromChild(child,requestCode);
}","public void finishActivityFromChildWithMatjiData(Activity child,int requestCode){
  preFinish();
  super.finishActivityFromChild(child,requestCode);
}",0.9012345679012346
153444,"public void swipeAnimation(int position,Animation inAnim,Animation outAnim,Animation prevInAnim){
  int currentViewPosition=getChildAtPosition(position);
  int prevViewPositoin=getChildAtPosition(prevPosition);
  if (!hasAnimationStarted) {
    currentFront=listView.getChildAt(currentViewPosition).findViewById(frontId);
    currentRear=listView.getChildAt(currentViewPosition).findViewById(rearId);
switch (currentFront.getVisibility()) {
case View.GONE:
      currentFront.startAnimation(inAnim);
    if (prevPosition == position) {
      prevPosition=-1;
    }
  break;
case View.VISIBLE:
if (prevPosition > 0 && (prevPosition < listView.getFirstVisiblePosition() || prevPosition > listView.getLastVisiblePosition())) {
  prevPosition=-1;
}
currentFront.startAnimation(outAnim);
if (prevPosition > 0 && prevPosition != position) {
prevFront=listView.getChildAt(prevViewPositoin).findViewById(frontId);
prevRear=listView.getChildAt(prevViewPositoin).findViewById(rearId);
if (prevFront.getVisibility() != View.VISIBLE) {
prevFront.startAnimation(prevInAnim);
}
}
prevPosition=position;
break;
}
}
}","public void swipeAnimation(int position,Animation inAnim,Animation outAnim,Animation prevInAnim){
  int currentViewPosition=getChildAtPosition(position);
  int prevViewPositoin=getChildAtPosition(prevPosition);
  if (isMyItem(position - headerPos - 1) && !hasAnimationStarted) {
    currentFront=listView.getChildAt(currentViewPosition).findViewById(frontId);
    currentRear=listView.getChildAt(currentViewPosition).findViewById(rearId);
switch (currentFront.getVisibility()) {
case View.GONE:
      currentFront.startAnimation(inAnim);
    if (prevPosition == position) {
      prevPosition=-1;
    }
  break;
case View.VISIBLE:
if (prevPosition > 0 && (prevPosition < listView.getFirstVisiblePosition() || prevPosition > listView.getLastVisiblePosition())) {
  prevPosition=-1;
}
currentFront.startAnimation(outAnim);
if (prevPosition > 0 && prevPosition != position) {
prevFront=listView.getChildAt(prevViewPositoin).findViewById(frontId);
prevRear=listView.getChildAt(prevViewPositoin).findViewById(rearId);
if (prevFront.getVisibility() != View.VISIBLE) {
prevFront.startAnimation(prevInAnim);
}
}
prevPosition=position;
break;
}
}
}",0.9830357142857142
153445,"public CommentListView(Context context,AttributeSet attrs){
  super(context,attrs,new CommentAdapter(context),10);
  request=new CommentHttpRequest(context);
  session=Session.getInstance(context);
  setPage(1);
  listener=new ListItemSwipeListener(context,this,R.id.comment_adapter_wrap,R.id.adapter_swipe_rear,1){
    @Override public void onListItemClicked(    int position){
    }
  }
;
  setOnTouchListener(listener);
  setCanRepeat(true);
}","public CommentListView(Context context,AttributeSet attrs){
  super(context,attrs,new CommentAdapter(context),10);
  request=new CommentHttpRequest(context);
  session=Session.getInstance(context);
  setPage(1);
  listener=new ListItemSwipeListener(context,this,R.id.comment_adapter_wrap,R.id.adapter_swipe_rear,1){
    @Override public void onListItemClicked(    int position){
    }
    @Override public boolean isMyItem(    int position){
      return session.isLogin() && ((Comment)getAdapterData().get(position)).getUserId() == session.getCurrentUser().getId();
    }
  }
;
  setOnTouchListener(listener);
  setCanRepeat(true);
}",0.825925925925926
153446,"public void onClick(View v){
switch (v.getId()) {
case R.id.comment_adapter_thumnail:
case R.id.comment_adapter_nick:
    gotoUserPage(Integer.parseInt((String)v.getTag()));
  break;
case R.id.delete_btn:
if (session.isLogin()) {
  curDeletePos=Integer.parseInt((String)v.getTag());
  Comment comment=(Comment)getAdapterData().get(curDeletePos);
  getHttpRequestManager().request(getActivity(),deleteRequest(comment.getId()),COMMENT_DELETE_REQUEST,this);
}
break;
}
}","public void onClick(View v){
switch (v.getId()) {
case R.id.comment_adapter_thumnail:
case R.id.comment_adapter_nick:
    gotoUserPage(Integer.parseInt((String)v.getTag()));
  break;
case R.id.delete_btn:
if (session.isLogin() && !getHttpRequestManager().isRunning(getActivity())) {
  curDeletePos=Integer.parseInt((String)v.getTag());
  Comment comment=(Comment)getAdapterData().get(curDeletePos);
  getHttpRequestManager().request(getActivity(),deleteRequest(comment.getId()),COMMENT_DELETE_REQUEST,this);
}
break;
}
}",0.9463019250253292
153447,"public void putAndRunRequest(Activity activity,HttpRequest request,Requestable requestable){
  Log.d(""String_Node_Str"",""String_Node_Str"" + isRequestAlreadyExecute(activity,request));
  if (!isRequestAlreadyExecute(activity,request)) {
    HttpAsyncTask task=new HttpAsyncTask(activity,request,requestable);
    putHttpAsyncTask(activity,task);
    task.execute();
  }
}","public void putAndRunRequest(Activity activity,HttpRequest request,Requestable requestable){
  if (!isRequestAlreadyExecute(activity,request)) {
    HttpAsyncTask task=new HttpAsyncTask(activity,request,requestable);
    putHttpAsyncTask(activity,task);
    task.execute();
  }
}",0.4814814814814814
153448,"public void requestStartSpinner(){
}","public void requestStartSpinner(){
  spinnerCount++;
  spinner.start(parent);
}",0.6260869565217392
153449,"public void onViewScrollFinished(int currentPage){
  if (mCurrentPage != currentPage) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    try {
      mCurrentPage=currentPage;
      session.getPreferenceProvider().setInt(Session.POST_SLIDER_INDEX,mCurrentPage);
      control.setCurrentPage(currentPage);
      View view=mContentViews.get(currentPage);
      if (view instanceof RequestableMListView) {
        RequestableMListView listView=(RequestableMListView)view;
        listView.requestConditionally();
      }
    }
 catch (    IndexOutOfBoundsException e) {
      e.printStackTrace();
    }
  }
}","public void onViewScrollFinished(int currentPage){
  if (mCurrentPage != currentPage) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    try {
      mCurrentPage=currentPage;
      session.getPreferenceProvider().setInt(Session.POST_SLIDER_INDEX,mCurrentPage);
      control.setCurrentPage(currentPage);
      View view=mContentViews.get(currentPage);
      if (view instanceof RequestableMListView && !(view instanceof Searchable)) {
        RequestableMListView listView=(RequestableMListView)view;
        listView.requestConditionally();
      }
    }
 catch (    IndexOutOfBoundsException e) {
      e.printStackTrace();
    }
  }
}",0.9735364875701684
153450,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  tabHost=getTabHost();
  tabHost.addTab(tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(new Intent(this,MainMapActivity.class)));
  tabHost.addTab(tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(new Intent(this,StoreSliderActivity.class)));
  tabHost.addTab(tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(new Intent(this,UserTabActivity.class)));
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  tabHost=getTabHost();
  tabHost.addTab(tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(new Intent(this,MainMapActivity.class)));
  tabHost.addTab(tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(new Intent(this,StoreSliderActivity.class)));
}",0.8497854077253219
153451,"public HttpRequest request(){
  ((PostHttpRequest)request).actionList(getPage(),getLimit());
  return request;
}","public HttpRequest request(){
  ((PostHttpRequest)request).actionList(getPage(),getLimit());
  Log.d(""String_Node_Str"",""String_Node_Str"");
  return request;
}",0.8296296296296296
153452,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.post_adapter_nick:
    Post post=(Post)getAdapterData().get(Integer.parseInt((String)v.getTag()));
  Log.d(""String_Node_Str"",""String_Node_Str"" + post.getUser().getNick());
Intent intent=new Intent(getActivity(),UserTabActivity.class);
Log.d(""String_Node_Str"",""String_Node_Str"" + post.getUser());
intent.putExtra(""String_Node_Str"",post.getUser());
getActivity().startActivity(intent);
break;
case R.id.post_adapter_store_name:
Log.d(""String_Node_Str"",""String_Node_Str"");
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.post_adapter_nick:
    Post post=(Post)getAdapterData().get(Integer.parseInt((String)v.getTag()));
  Log.d(""String_Node_Str"",""String_Node_Str"" + post.getUser().getNick());
Intent intent=new Intent(getActivity(),PostInfoActivity.class);
Log.d(""String_Node_Str"",""String_Node_Str"" + post.getUser());
intent.putExtra(""String_Node_Str"",post);
getActivity().startActivity(intent);
break;
case R.id.post_adapter_store_name:
Log.d(""String_Node_Str"",""String_Node_Str"");
break;
}
}",0.9770852428964252
153453,"public void requestCallBack(int tag,ArrayList<? extends MatjiData> data){
  if (data.size() == 0 || data.size() < limit)   scrollListener.requestSetOff();
  adapterData=getListByT(data);
  ((MBaseAdapter)adapter).notifyDataSetChanged();
  if (adapterData.size() <= limit)   onRefreshComplete();
}","public void requestCallBack(int tag,ArrayList<? extends MatjiData> data){
  if (data.size() == 0 || data.size() < limit)   scrollListener.requestSetOff();
  for (int i=0; i < data.size(); i++) {
    adapterData.add((MatjiData)data.get(i));
  }
  ((MBaseAdapter)adapter).notifyDataSetChanged();
  if (adapterData.size() <= limit)   onRefreshComplete();
}",0.8351309707241911
153454,"public HttpRequest request(){
  storeRequest.actionList(getPage(),getLimit());
  return storeRequest;
}","public HttpRequest request(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  storeRequest.actionList(getPage(),getLimit());
  return storeRequest;
}",0.8174603174603174
153455,"public HttpRequest request(){
  storeRequest.actionNearbyList(lat_sw,lat_ne,lng_sw,lng_ne,getPage(),getLimit());
  return storeRequest;
}","public HttpRequest request(){
  storeRequest.actionNearbyList(lat_sw,lat_ne,lng_sw,lng_ne,getPage(),getLimit());
  Log.d(""String_Node_Str"",""String_Node_Str"");
  return storeRequest;
}",0.85625
153456,"@Test public void shouldEnsureGetTalkMessagesReturnsMessages() throws Exception {
  TalkServer talkImpl=new TalkServer();
  ITalkJsonConverter jsonConv=mock(ITalkJsonConverter.class);
  ISiteAuth siteauth=mock(ISiteAuth.class);
  when(siteauth.get(anyString(),anyMap())).thenReturn(""String_Node_Str"");
  setHiddenField(talkImpl,""String_Node_Str"",siteauth);
  List<GeoCamTalkMessage> expectedList=new ArrayList<GeoCamTalkMessage>();
  expectedList.add(new GeoCamTalkMessage());
  when(jsonConv.deserializeList(anyString())).thenReturn(expectedList);
  setHiddenField(talkImpl,""String_Node_Str"",jsonConv);
  MessageStore ms=mock(MessageStore.class);
  setHiddenField(talkImpl,""String_Node_Str"",ms);
  IIntentHelper intentHelper=mock(IIntentHelper.class);
  setHiddenField(talkImpl,""String_Node_Str"",intentHelper);
  talkImpl.getTalkMessages();
  verify(ms).addMessage(anyList());
  verify(jsonConv).deserializeList(anyString());
}","@Test public void shouldEnsureGetTalkMessagesReturnsMessages() throws Exception {
  TalkServer talkImpl=new TalkServer();
  ITalkJsonConverter jsonConv=mock(ITalkJsonConverter.class);
  ISiteAuth siteauth=mock(ISiteAuth.class);
  when(siteauth.get(anyString(),anyMap())).thenReturn(new ServerResponse(200,""String_Node_Str""));
  setHiddenField(talkImpl,""String_Node_Str"",siteauth);
  List<GeoCamTalkMessage> expectedList=new ArrayList<GeoCamTalkMessage>();
  expectedList.add(new GeoCamTalkMessage());
  when(jsonConv.deserializeList(anyString())).thenReturn(expectedList);
  setHiddenField(talkImpl,""String_Node_Str"",jsonConv);
  MessageStore ms=mock(MessageStore.class);
  setHiddenField(talkImpl,""String_Node_Str"",ms);
  IIntentHelper intentHelper=mock(IIntentHelper.class);
  setHiddenField(talkImpl,""String_Node_Str"",intentHelper);
  talkImpl.getTalkMessages();
  verify(ms).addMessage(anyList());
  verify(jsonConv).deserializeList(anyString());
}",0.9872340425531916
153457,"@Test public void shouldEnsureCreateTalkMessagePostsTalkMessage() throws Exception {
  ITalkServer talkImpl=new TalkServer();
  ITalkJsonConverter jsonConv=mock(TalkJsonConverter.class);
  ISiteAuth siteauth=mock(ISiteAuth.class);
  when(siteauth.post(anyString(),anyMap(),any(byte[].class))).thenReturn(200);
  setHiddenField(talkImpl,""String_Node_Str"",siteauth);
  when(jsonConv.serialize((GeoCamTalkMessage)anyObject())).thenReturn(""String_Node_Str"");
  setHiddenField(talkImpl,""String_Node_Str"",jsonConv);
  talkImpl.createTalkMessage(new GeoCamTalkMessage());
  verify(siteauth).post(anyString(),anyMap(),any(byte[].class));
}","@Test public void shouldEnsureCreateTalkMessagePostsTalkMessage() throws Exception {
  ITalkServer talkImpl=new TalkServer();
  ITalkJsonConverter jsonConv=mock(TalkJsonConverter.class);
  ISiteAuth siteauth=mock(ISiteAuth.class);
  when(siteauth.post(anyString(),anyMap(),any(byte[].class))).thenReturn(new ServerResponse(200,""String_Node_Str""));
  setHiddenField(talkImpl,""String_Node_Str"",siteauth);
  when(jsonConv.serialize((GeoCamTalkMessage)anyObject())).thenReturn(""String_Node_Str"");
  setHiddenField(talkImpl,""String_Node_Str"",jsonConv);
  talkImpl.createTalkMessage(new GeoCamTalkMessage());
  verify(siteauth).post(anyString(),anyMap(),any(byte[].class));
}",0.9707692307692308
153458,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.create_talk_message);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.create_talk_message);
  sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
}",0.8469601677148847
153459,"public void onSendClick(View v){
  GeoCamTalkMessage message=new GeoCamTalkMessage();
  message.setContent(newTalkTextView.getText().toString());
  message.setContentTimestamp(new Date());
  message.setLocation(appState.getLocation());
  if (filename != null) {
    message.setAudio(createByteArray());
  }
  try {
    messageStore.addMessage(message);
    intentHelper.Synchronize();
    UIUtils.goHome(this);
  }
 catch (  Exception e) {
    UIUtils.displayException(this,e,""String_Node_Str"");
  }
}","public void onSendClick(View v){
  GeoCamTalkMessage message=new GeoCamTalkMessage();
  message.setContent(newTalkTextView.getText().toString());
  message.setContentTimestamp(new Date());
  message.setLocation(appState.getLocation());
  message.setAuthorUsername(sharedPreferences.getString(""String_Node_Str"",null));
  if (filename != null) {
    message.setAudio(createByteArray());
  }
  try {
    messageStore.addMessage(message);
    intentHelper.Synchronize();
    UIUtils.goHome(this);
  }
 catch (  Exception e) {
    UIUtils.displayException(this,e,""String_Node_Str"");
  }
}",0.9243542435424354
153460,"@Inject public SiteAuthCookie(Context context){
  this.context=context;
}","@Inject public SiteAuthCookie(Context context){
  this.context=context;
  this.sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
}",0.6431718061674009
153461,"private void ensureAuthenticated() throws AuthenticationFailedException, ClientProtocolException, IOException {
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String username=prefs.getString(""String_Node_Str"",null);
  String password=prefs.getString(""String_Node_Str"",null);
  if (username == null || password == null) {
    throw new AuthenticationFailedException(""String_Node_Str"");
  }
 else {
    Date now=new Date();
    if (sessionIdCookie == null || sessionIdCookie.isExpired(now)) {
      login(username,password);
    }
  }
}","private void ensureAuthenticated() throws AuthenticationFailedException, ClientProtocolException, IOException {
  String username=sharedPreferences.getString(""String_Node_Str"",null);
  String password=sharedPreferences.getString(""String_Node_Str"",null);
  if (username == null || password == null) {
    throw new AuthenticationFailedException(""String_Node_Str"");
  }
 else {
    Date now=new Date();
    if (sessionIdCookie == null || sessionIdCookie.isExpired(now)) {
      login(username,password);
    }
  }
}",0.8929889298892989
153462,"@Override public void createTalkMessage(GeoCamTalkMessage message) throws ClientProtocolException, AuthenticationFailedException, IOException, SQLException {
  HashMap<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",jsonConverter.serialize(message));
  ServerResponse sr=siteAuth.post(urlCreateMessage,map,message.getAudio());
  if (sr.getResponseCode() == 401) {
    siteAuth.reAuthenticate();
    sr=siteAuth.post(urlCreateMessage,map,message.getAudio());
  }
  if (sr.getResponseCode() != 200) {
    throw new ClientProtocolException(""String_Node_Str"" + sr.getResponseCode() + ""String_Node_Str"");
  }
}","@Override public void createTalkMessage(GeoCamTalkMessage message) throws ClientProtocolException, AuthenticationFailedException, IOException, SQLException {
  HashMap<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",jsonConverter.serialize(message));
  ServerResponse sr=siteAuth.post(urlCreateMessage,map,message.getAudio());
  if (sr.getResponseCode() == 401) {
    siteAuth.reAuthenticate();
    sr=siteAuth.post(urlCreateMessage,map,message.getAudio());
  }
  if (sr.getResponseCode() == 200) {
    Map<String,String> result=jsonConverter.createMap(sr.getContent());
    try {
      message.setMessageId(Integer.parseInt(result.get(""String_Node_Str"")));
      message.setAuthorFullname(result.get(""String_Node_Str""));
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
    message.setSynchronized(true);
    messageStore.updateMessage(message);
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    throw new ClientProtocolException(""String_Node_Str"" + sr.getResponseCode() + ""String_Node_Str"");
  }
}",0.710128055878929
153463,"@Test public void shouldProperlyDisplayGeolocaionStatus() throws Exception {
  List<GeoCamTalkMessage> msgs=new ArrayList<GeoCamTalkMessage>();
  msgs.add(FakeGeoCamTalkMessageFactory.getMessage(""String_Node_Str"",""String_Node_Str"",true));
  msgs.add(FakeGeoCamTalkMessageFactory.getMessage(""String_Node_Str"",""String_Node_Str"",false));
  GeoCamTalkMessageArrayAdapter adapter=new GeoCamTalkMessageArrayAdapter(Robolectric.application.getApplicationContext());
  adapter.setTalkMessages(msgs);
  View temp1=View.inflate(Robolectric.application.getApplicationContext(),R.layout.list_item,null);
  View temp2=View.inflate(Robolectric.application.getApplicationContext(),R.layout.list_item,null);
  LinearLayout geoLocatedMsgView=(LinearLayout)adapter.getView(0,temp1,null);
  LinearLayout nonGeoLocatedMsgView=(LinearLayout)adapter.getView(1,temp2,null);
  assertTrue(((ImageView)geoLocatedMsgView.findViewById(R.id.hasGeoLocation)).getVisibility() == View.VISIBLE);
  assertTrue(((ImageView)nonGeoLocatedMsgView.findViewById(R.id.hasGeoLocation)).getVisibility() == View.INVISIBLE);
}","@Test public void shouldProperlyDisplayGeolocaionStatus() throws Exception {
  List<GeoCamTalkMessage> msgs=new ArrayList<GeoCamTalkMessage>();
  msgs.add(FakeGeoCamTalkMessageFactory.getMessage(""String_Node_Str"",""String_Node_Str"",true));
  msgs.add(FakeGeoCamTalkMessageFactory.getMessage(""String_Node_Str"",""String_Node_Str"",false));
  GeoCamTalkMessageAdapter adapter=new GeoCamTalkMessageAdapter(Robolectric.application.getApplicationContext());
  adapter.setTalkMessages(msgs);
  View temp1=View.inflate(Robolectric.application.getApplicationContext(),R.layout.list_item,null);
  View temp2=View.inflate(Robolectric.application.getApplicationContext(),R.layout.list_item,null);
  LinearLayout geoLocatedMsgView=(LinearLayout)adapter.getView(0,temp1,null);
  LinearLayout nonGeoLocatedMsgView=(LinearLayout)adapter.getView(1,temp2,null);
  assertTrue(((ImageView)geoLocatedMsgView.findViewById(R.id.hasGeoLocation)).getVisibility() == View.VISIBLE);
  assertTrue(((ImageView)nonGeoLocatedMsgView.findViewById(R.id.hasGeoLocation)).getVisibility() == View.INVISIBLE);
}",0.9953531598513012
153464,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
}",0.7777777777777778
153465,"public void newMessages(){
  try {
    talkMessages=messageStore.getAllMessages();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
  if (talkMessages != null) {
    adapter.setTalkMessages(talkMessages);
    talkListView.setAdapter(adapter);
  }
}","public void newMessages(){
  populateListView();
}",0.2651296829971181
153466,"public void onGoHomeClick(View v){
  List<GeoCamTalkMessage> talkMessages=null;
  try {
    talkMessages=messageStore.getAllMessages();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
  if (talkMessages != null) {
    adapter.setTalkMessages(talkMessages);
    talkListView.setAdapter(adapter);
  }
}","public void onGoHomeClick(View v){
  populateListView();
}",0.2745098039215686
153467,"@Override protected void onResume(){
  super.onResume();
  IntentFilter filter=new IntentFilter();
  filter.addAction(TalkServerIntent.INTENT_NEW_MESSAGES.toString());
  registerReceiver(receiver,filter);
  setContentView(R.layout.main);
  talkListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parentView,    View childView,    int position,    long id){
      GeoCamTalkMessage msg=adapter.getTalkMessage(position);
      if (msg.hasAudio()) {
        try {
          UIUtils.playAudio(getApplicationContext(),msg,player,siteAuth);
        }
 catch (        Exception e) {
          UIUtils.displayException(getApplicationContext(),e,""String_Node_Str"");
        }
      }
    }
  }
);
  try {
    talkMessages=messageStore.getAllMessages();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
  if (talkMessages != null) {
    adapter.setTalkMessages(talkMessages);
    talkListView.setAdapter(adapter);
  }
 else {
    Toast.makeText(this.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}","@Override protected void onResume(){
  IntentFilter filter=new IntentFilter();
  filter.addAction(TalkServerIntent.INTENT_NEW_MESSAGES.toString());
  registerReceiver(receiver,filter);
  setContentView(R.layout.main);
  talkListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parentView,    View childView,    int position,    long id){
      GeoCamTalkMessage msg=adapter.getTalkMessage(position);
      if (msg.hasAudio()) {
        try {
          UIUtils.playAudio(getApplicationContext(),msg,player,siteAuth);
        }
 catch (        Exception e) {
          UIUtils.displayException(getApplicationContext(),e,""String_Node_Str"");
        }
      }
    }
  }
);
  populateListView();
  super.onResume();
}",0.7752983912817851
153468,"@Override protected void configure(){
  bind(IDjangoTalk.class).to(DjangoTalk.class);
  bind(IDatabaseHelper.class).to(DatabaseHelper.class);
  bind(IMessageStore.class).to(MessageStore.class);
  bind(IAudioRecorder.class).to(AudioRecorder.class);
  bind(IAudioPlayer.class).to(AudioPlayer.class);
  bind(IDjangoTalkJsonConverter.class).to(DjangoTalkJsonConverter.class);
  bind(ISiteAuth.class).toInstance(new SiteAuthCookie(application.getApplicationContext()));
  bind(IIntentHelper.class).to(IntentHelper.class);
}","@Override protected void configure(){
  bind(IDjangoTalk.class).to(DjangoTalk.class);
  bind(IDatabaseHelper.class).to(DatabaseHelper.class);
  bind(IMessageStore.class).to(MessageStore.class);
  bind(IAudioRecorder.class).to(AudioRecorder.class);
  bind(IAudioPlayer.class).to(AudioPlayer.class);
  bind(IDjangoTalkJsonConverter.class).to(DjangoTalkJsonConverter.class);
  bind(ISiteAuth.class).toInstance(new SiteAuthCookie(application.getApplicationContext()));
  bind(IIntentHelper.class).to(IntentHelper.class);
  bind(IGeoCamSynchronizationTimerTask.class).to(GeoCamSynchronizationTimerTask.class);
}",0.9217081850533808
153469,"public DjangoTalk(){
  super(""String_Node_Str"");
  Timer timer=new Timer();
  timer.schedule(geoCamSynchronizationTimerTask,0,60 * 10 * 1000);
}","public DjangoTalk(){
  super(""String_Node_Str"");
}",0.5154639175257731
153470,"@Inject public GeoCamSynchronizationTimerTask(IIntentHelper intentHelper){
  this.intentHelper=intentHelper;
}","@Inject public GeoCamSynchronizationTimerTask(IIntentHelper intentHelper){
  this.intentHelper=intentHelper;
  this.timer.schedule(this,0,60 * 10 * 1000);
}",0.8270676691729323
153471,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  setDefaultSettings();
  List<GeoCamTalkMessage> talkMessages=djangoTalk.getTalkMessages();
  if (talkMessages != null) {
    adapter.setTalkMessages(talkMessages);
    talkListView.setAdapter(adapter);
  }
 else {
    Toast.makeText(this.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  String username=prefs.getString(""String_Node_Str"",null);
  String password=prefs.getString(""String_Node_Str"",null);
  djangoTalk.setAuth(username,password);
  List<GeoCamTalkMessage> talkMessages=djangoTalk.getTalkMessages();
  if (talkMessages != null) {
    adapter.setTalkMessages(talkMessages);
    talkListView.setAdapter(adapter);
  }
 else {
    Toast.makeText(this.getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}",0.8092105263157895
153472,"protected void dispatchToGetSibling(final Location location,final PutOptions options,final SiblingHandler handler,final CountDownRiakFuture future){
  LOG.debug(Markers.DETAIL,""String_Node_Str"");
  GetOptions go=new GetOptions(){
    @Override public Quorum getReadQuorum(){
      return options.getReadQuorum();
    }
    @Override public String getIfNoneMatch(){
      return options.getIfNoneMatch();
    }
    @Override public String getIfMatch(){
      return options.getIfMatch();
    }
    @Override public Date getIfModifiedSince(){
      return options.getIfModifiedSince();
    }
  }
;
  HttpRequest request=this.factory.newGetRequst(location,go);
  request.setHeader(HttpHeaders.Names.ACCEPT,RiakHttpHeaders.MULTI_PART);
  final String procedure=""String_Node_Str"";
  future.setName(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    String vclock;
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          try {
            handler.onError(new RestErrorResponse(response));
          }
  finally {
            future.finished();
            RestRiakOperations.this.support.responseComplete();
          }
        }
 else {
          this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
          handler.begin();
        }
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
        if (done) {
          try {
            handler.end();
            future.setSuccess();
          }
  finally {
            RestRiakOperations.this.support.responseComplete();
          }
        }
 else {
          RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
          handler.handle(RestRiakOperations.this.support.newResponse(ro));
        }
      }
    }
  }
;
  this.support.handle(procedure,request,handler,internal,future);
}","protected void dispatchToGetSibling(final Location location,final PutOptions options,final SiblingHandler handler,final CountDownRiakFuture future){
  LOG.debug(Markers.DETAIL,""String_Node_Str"");
  GetOptions go=new GetOptions(){
    @Override public Quorum getReadQuorum(){
      return options.getReadQuorum();
    }
    @Override public String getIfNoneMatch(){
      return options.getIfNoneMatch();
    }
    @Override public String getIfMatch(){
      return options.getIfMatch();
    }
    @Override public Date getIfModifiedSince(){
      return options.getIfModifiedSince();
    }
  }
;
  HttpRequest request=this.factory.newGetRequst(location,go);
  request.setHeader(HttpHeaders.Names.ACCEPT,RiakHttpHeaders.MULTI_PART);
  final String procedure=""String_Node_Str"";
  future.setName(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    String vclock;
    Exception failed;
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          try {
            handler.onError(new RestErrorResponse(response));
          }
  finally {
            future.finished();
            RestRiakOperations.this.support.responseComplete();
          }
        }
 else {
          this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
          handler.begin();
        }
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
        if (done) {
          try {
            handler.end();
            if (this.failed == null) {
              future.setSuccess();
            }
 else {
              future.setFailure(this.failed);
            }
          }
  finally {
            RestRiakOperations.this.support.responseComplete();
          }
        }
 else {
          RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
          try {
            handler.handle(RestRiakOperations.this.support.newResponse(ro));
          }
 catch (          Exception ex) {
            this.failed=ex;
            LOG.error(Markers.DESIGN,ex.getMessage(),ex);
          }
        }
      }
    }
  }
;
  this.support.handle(procedure,request,handler,internal,future);
}",0.9369997947876052
153473,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object receive=e.getMessage();
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    if (NettyUtil.isError(response.getStatus())) {
      try {
        handler.onError(new RestErrorResponse(response));
      }
  finally {
        future.finished();
        RestRiakOperations.this.support.responseComplete();
      }
    }
 else {
      this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
      handler.begin();
    }
  }
 else   if (receive instanceof PartMessage) {
    PartMessage part=(PartMessage)receive;
    boolean done=part.isLast();
    part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
    if (done) {
      try {
        handler.end();
        future.setSuccess();
      }
  finally {
        RestRiakOperations.this.support.responseComplete();
      }
    }
 else {
      RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
      handler.handle(RestRiakOperations.this.support.newResponse(ro));
    }
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object receive=e.getMessage();
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    if (NettyUtil.isError(response.getStatus())) {
      try {
        handler.onError(new RestErrorResponse(response));
      }
  finally {
        future.finished();
        RestRiakOperations.this.support.responseComplete();
      }
    }
 else {
      this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
      handler.begin();
    }
  }
 else   if (receive instanceof PartMessage) {
    PartMessage part=(PartMessage)receive;
    boolean done=part.isLast();
    part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
    if (done) {
      try {
        handler.end();
        if (this.failed == null) {
          future.setSuccess();
        }
 else {
          future.setFailure(this.failed);
        }
      }
  finally {
        RestRiakOperations.this.support.responseComplete();
      }
    }
 else {
      RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
      try {
        handler.handle(RestRiakOperations.this.support.newResponse(ro));
      }
 catch (      Exception ex) {
        this.failed=ex;
        LOG.error(Markers.DESIGN,ex.getMessage(),ex);
      }
    }
  }
}",0.8959421454399357
153474,"/** 
 * Stores a new object in a bucket with a random Riak-assigned key.<br/> set Location key as empty string.
 */
RiakFuture post(RiakObject<byte[]> content,PutOptions options,RiakResponseHandler<RiakObject<byte[]>> handler);","/** 
 * Stores a new object in a bucket with a random Riak-assigned key.<br/> set Location key as empty string.
 */
RiakFuture post(RiakObject<byte[]> content,PostOptions options,RiakResponseHandler<RiakObject<byte[]>> handler);",0.9934065934065934
153475,"@Override public RiakFuture post(RiakObject<byte[]> content,PutOptions options,final RiakResponseHandler<RiakObject<byte[]>> handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbPutReq.Builder builder=buildPostRequest(content,options);
  if (options.getReturnBody() == false) {
    return _post(""String_Node_Str"",content,handler,builder);
  }
  final Location location=content.getLocation();
  final String procedure=""String_Node_Str"";
  return handle(procedure,builder.build(),handler,new MessageHandler(){
    @Override public boolean handle(    Object receive,    CountDownRiakFuture future) throws Exception {
      if (receive instanceof RpbPutResp) {
        RpbPutResp resp=(RpbPutResp)receive;
        Location newloc=location;
        if (resp.hasKey()) {
          newloc=new Location(location.getBucket(),resp.getKey().toStringUtf8());
        }
        String vclock=toVclock(resp.getVclock());
        if (0 < resp.getContentCount()) {
          RpbContent c=resp.getContent(0);
          RiakObject<byte[]> ro=convert(newloc,vclock,c);
          handler.handle(ProtoBufRiakOperations.this.support.newResponse(ro));
        }
        future.setSuccess();
        return true;
      }
      return false;
    }
  }
);
}","@Override public RiakFuture post(RiakObject<byte[]> content,PostOptions options,final RiakResponseHandler<RiakObject<byte[]>> handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbPutReq.Builder builder=buildPostRequest(content,options);
  if (options.getReturnBody() == false) {
    return _post(""String_Node_Str"",content,handler,builder);
  }
  final Location location=content.getLocation();
  final String procedure=""String_Node_Str"";
  return handle(procedure,builder.build(),handler,new MessageHandler(){
    @Override public boolean handle(    Object receive,    CountDownRiakFuture future) throws Exception {
      if (receive instanceof RpbPutResp) {
        RpbPutResp resp=(RpbPutResp)receive;
        Location newloc=location;
        if (resp.hasKey()) {
          newloc=new Location(location.getBucket(),resp.getKey().toStringUtf8());
        }
        String vclock=toVclock(resp.getVclock());
        if (0 < resp.getContentCount()) {
          RpbContent c=resp.getContent(0);
          RiakObject<byte[]> ro=convert(newloc,vclock,c);
          handler.handle(ProtoBufRiakOperations.this.support.newResponse(ro));
        }
        future.setSuccess();
        return true;
      }
      return false;
    }
  }
);
}",0.9988527724665393
153476,"protected void merge(PutOptions options,RpbPutReq.Builder builder){
  if (StringUtil.isEmpty(options.getVectorClock()) == false) {
    ByteString clock=fromVclock(options.getVectorClock());
    builder.setVclock(clock);
  }
  if (options.getWriteQuorum() != null) {
    builder.setW(options.getWriteQuorum().getInteger());
  }
  if (options.getDurableWriteQuorum() != null) {
    builder.setDw(options.getDurableWriteQuorum().getInteger());
  }
  if (options.getReturnBody()) {
    builder.setReturnBody(options.getReturnBody());
  }
}","protected void merge(StoreOptions options,RpbPutReq.Builder builder){
  if (options.getWriteQuorum() != null) {
    builder.setW(options.getWriteQuorum().getInteger());
  }
  if (options.getDurableWriteQuorum() != null) {
    builder.setDw(options.getDurableWriteQuorum().getInteger());
  }
  if (options.getReturnBody()) {
    builder.setReturnBody(options.getReturnBody());
  }
}",0.7794759825327511
153477,"protected RpbPutReq.Builder buildPostRequest(RiakObject<byte[]> content,PutOptions options){
  RpbPutReq.Builder builder=buildPostRequest(content);
  merge(options,builder);
  return builder;
}","protected RpbPutReq.Builder buildPostRequest(RiakObject<byte[]> content,PostOptions options){
  RpbPutReq.Builder builder=buildPostRequest(content);
  merge(options,builder);
  return builder;
}",0.992248062015504
153478,"protected RpbPutReq.Builder buildPutRequest(RiakObject<byte[]> content,PutOptions options){
  RpbPutReq.Builder builder=buildPutRequest(content);
  merge(options,builder);
  return builder;
}","protected RpbPutReq.Builder buildPutRequest(RiakObject<byte[]> content,PutOptions options){
  RpbPutReq.Builder builder=buildPutRequest(content);
  if (StringUtil.isEmpty(content.getVectorClock()) == false) {
    builder.setVclock(fromVclock(content.getVectorClock()));
  }
  merge(options,builder);
  return builder;
}",0.7411764705882353
153479,"@Override public RiakFuture post(RiakObject<byte[]> content,PutOptions options,final RiakResponseHandler<RiakObject<byte[]>> handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPostRequest(content,options);
  if (options.getReturnBody() == false) {
    return _post(""String_Node_Str"",content,handler,request);
  }
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new ChunkedMessageAggregator(procedure,new MessageHandler(){
    @Override public boolean handle(    Object receive,    CountDownRiakFuture future) throws Exception {
      HttpResponse response=(HttpResponse)receive;
      Location location=to(response);
      RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(response,response.getContent(),location);
      handler.handle(RestRiakOperations.this.support.newResponse(ro));
      future.setSuccess();
      return true;
    }
  }
));
}","@Override public RiakFuture post(RiakObject<byte[]> content,PostOptions options,final RiakResponseHandler<RiakObject<byte[]>> handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPostRequest(content,options);
  if (options.getReturnBody() == false) {
    return _post(""String_Node_Str"",content,handler,request);
  }
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new ChunkedMessageAggregator(procedure,new MessageHandler(){
    @Override public boolean handle(    Object receive,    CountDownRiakFuture future) throws Exception {
      HttpResponse response=(HttpResponse)receive;
      Location location=to(response);
      RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(response,response.getContent(),location);
      handler.handle(RestRiakOperations.this.support.newResponse(ro));
      future.setSuccess();
      return true;
    }
  }
));
}",0.9985126425384234
153480,"protected void dispatchToGetSibling(final Location location,final PutOptions options,final SiblingHandler handler,final CountDownRiakFuture future){
  LOG.debug(Markers.DETAIL,""String_Node_Str"");
  GetOptions go=new GetOptions(){
    @Override public Quorum getReadQuorum(){
      return options.getReadQuorum();
    }
    @Override public String getIfNoneMatch(){
      return options.getIfNoneMatch();
    }
    @Override public String getIfMatch(){
      return options.getIfMatch();
    }
    @Override public Date getIfModifiedSince(){
      return options.getIfModifiedSince();
    }
  }
;
  HttpRequest request=this.factory.newGetRequst(location,go);
  request.setHeader(HttpHeaders.Names.ACCEPT,RiakHttpHeaders.MULTI_PART);
  final String procedure=""String_Node_Str"";
  future.setName(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    String vclock;
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          handler.onError(new RestErrorResponse(response));
          future.finished();
        }
 else {
          this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
          handler.begin();
        }
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
        if (done) {
          handler.end();
          future.setSuccess();
        }
 else {
          RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
          handler.handle(RestRiakOperations.this.support.newResponse(ro));
        }
      }
    }
  }
;
  this.support.handle(procedure,request,handler,internal,future);
}","protected void dispatchToGetSibling(final Location location,final PutOptions options,final SiblingHandler handler,final CountDownRiakFuture future){
  LOG.debug(Markers.DETAIL,""String_Node_Str"");
  GetOptions go=new DefaultGetOptions(){
    @Override public String getIfNoneMatch(){
      return options.getIfNoneMatch();
    }
    @Override public String getIfMatch(){
      return options.getIfMatch();
    }
    @Override public Date getIfModifiedSince(){
      return options.getIfModifiedSince();
    }
  }
;
  HttpRequest request=this.factory.newGetRequst(location,go);
  request.setHeader(HttpHeaders.Names.ACCEPT,RiakHttpHeaders.MULTI_PART);
  final String procedure=""String_Node_Str"";
  future.setName(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    String vclock;
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          handler.onError(new RestErrorResponse(response));
          future.finished();
        }
 else {
          this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
          handler.begin();
        }
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
        if (done) {
          handler.end();
          future.setSuccess();
        }
 else {
          RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
          handler.handle(RestRiakOperations.this.support.newResponse(ro));
        }
      }
    }
  }
;
  this.support.handle(procedure,request,handler,internal,future);
}",0.976023976023976
153481,"public HttpRequest newPostRequest(RiakObject<byte[]> content,PutOptions options){
  HttpRequest request=newPostRequest(content);
  QueryStringEncoder params=to(options,request);
  request.setUri(params.toString());
  return request;
}","public HttpRequest newPostRequest(RiakObject<byte[]> content,PostOptions options){
  HttpRequest request=newPostRequest(content);
  QueryStringEncoder params=to(options,request);
  request.setUri(params.toString());
  return request;
}",0.9936034115138592
153482,"protected QueryStringEncoder to(PutOptions options,HttpRequest request){
  QueryStringEncoder params=new QueryStringEncoder(request.getUri());
  if (options.getReadQuorum() != null) {
    params.addParam(""String_Node_Str"",options.getReadQuorum().getString());
  }
  if (options.getWriteQuorum() != null) {
    params.addParam(""String_Node_Str"",options.getWriteQuorum().getString());
  }
  if (options.getDurableWriteQuorum() != null) {
    params.addParam(""String_Node_Str"",options.getDurableWriteQuorum().getString());
  }
  if (options.getReturnBody()) {
    params.addParam(""String_Node_Str"",String.valueOf(options.getReturnBody()));
  }
  return params;
}","protected QueryStringEncoder to(StoreOptions options,HttpRequest request){
  QueryStringEncoder params=new QueryStringEncoder(request.getUri());
  if (options.getWriteQuorum() != null) {
    params.addParam(""String_Node_Str"",options.getWriteQuorum().getString());
  }
  if (options.getDurableWriteQuorum() != null) {
    params.addParam(""String_Node_Str"",options.getDurableWriteQuorum().getString());
  }
  if (options.getReturnBody()) {
    params.addParam(""String_Node_Str"",String.valueOf(options.getReturnBody()));
  }
  return params;
}",0.8323603002502085
153483,"public HttpRequest newPutRequest(RiakObject<byte[]> content,PutOptions options){
  HttpRequest request=newPutRequest(content);
  QueryStringEncoder params=to(options,request);
  request.setUri(params.toString());
  return request;
}","public HttpRequest newPutRequest(RiakObject<byte[]> content,PutOptions options){
  HttpRequest request=newPutRequest(content);
  if (StringUtil.isEmpty(options.getIfNoneMatch()) == false) {
    request.addHeader(HttpHeaders.Names.IF_NONE_MATCH,options.getIfNoneMatch());
  }
  if (StringUtil.isEmpty(options.getIfMatch()) == false) {
    request.addHeader(HttpHeaders.Names.IF_MATCH,options.getIfMatch());
  }
  if (options.getIfModifiedSince() != null) {
    request.addHeader(HttpHeaders.Names.IF_MODIFIED_SINCE,HttpUtil.format(options.getIfModifiedSince()));
  }
  if (options.getIfUnmodifiedSince() != null) {
    request.addHeader(HttpHeaders.Names.IF_UNMODIFIED_SINCE,HttpUtil.format(options.getIfUnmodifiedSince()));
  }
  QueryStringEncoder params=to(options,request);
  request.setUri(params.toString());
  return request;
}",0.4356807511737089
153484,"public Location testPostWithReturn(final Location location,final String testdata) throws Exception {
  DefaultRiakObject ro=new DefaultRiakObject(location);
  ro.setContent(testdata.getBytes());
  PutOptions options=new DefaultPutOptions(){
    @Override public boolean getReturnBody(){
      return true;
    }
  }
;
  final Location[] loc=new Location[1];
  RiakFuture waiter=this.target.post(ro,options,new TestingHandler<RiakObject<byte[]>>(){
    @Override public void handle(    RiakContentsResponse<RiakObject<byte[]>> response) throws Exception {
      RiakObject<byte[]> returned=response.getContents();
      assertNotNull(returned.getLocation());
      Location l=returned.getLocation();
      assertEquals(location.getBucket(),l.getBucket());
      assertFalse(l.getKey().isEmpty());
      loc[0]=l;
    }
  }
);
  waitFor(waiter);
  return loc[0];
}","public Location testPostWithReturn(final Location location,final String testdata) throws Exception {
  DefaultRiakObject ro=new DefaultRiakObject(location);
  ro.setContent(testdata.getBytes());
  PostOptions options=new DefaultPostOptions(){
    @Override public boolean getReturnBody(){
      return true;
    }
  }
;
  final Location[] loc=new Location[1];
  RiakFuture waiter=this.target.post(ro,options,new TestingHandler<RiakObject<byte[]>>(){
    @Override public void handle(    RiakContentsResponse<RiakObject<byte[]>> response) throws Exception {
      RiakObject<byte[]> returned=response.getContents();
      assertNotNull(returned.getLocation());
      Location l=returned.getLocation();
      assertEquals(location.getBucket(),l.getBucket());
      assertFalse(l.getKey().isEmpty());
      loc[0]=l;
    }
  }
);
  waitFor(waiter);
  return loc[0];
}",0.996523754345307
153485,"@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  this.support.decrementProgress(this.name);
  LOG.error(Markers.BOUNDARY,e.getCause().getMessage(),e.getCause());
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
  }
);
  this.future.setFailure(e.getCause());
  this.support.invokeNext();
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  LOG.error(Markers.BOUNDARY,e.getCause().getMessage(),e.getCause());
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
  }
);
  this.future.setFailure(e.getCause());
  this.support.invokeNext();
}",0.9455864570737604
153486,"public void decrementProgress(String name){
  this.inProgress.remove(name);
}","public void decrementProgress(String name){
  this.channel.getPipeline().remove(name);
  this.inProgress.remove(name);
}",0.7817258883248731
153487,"public CountDownRiakFuture newRiakFuture(String name){
  ChannelPipeline pipeline=this.channel.getPipeline();
  return new CountDownRiakFuture(name,pipeline);
}","public CountDownRiakFuture newRiakFuture(String name){
  return new CountDownRiakFuture(name,this);
}",0.7509578544061303
153488,"protected void completeOnError(String name,ChannelPipeline pipeline){
  pipeline.remove(name);
  operationComplete();
}","protected void completeOnError(String name,ChannelPipeline pipeline){
  decrementProgress(name);
  operationComplete();
}",0.9166666666666666
153489,"public CountDownRiakFuture(String name,ChannelPipeline pipeline){
  this.latch=new CountDownLatch(1);
  this.name=name;
  this.pipeline=pipeline;
}","public CountDownRiakFuture(String name,CompletionSupport support){
  this.latch=new CountDownLatch(1);
  this.name=name;
  this.support=support;
}",0.7986348122866894
153490,"public void finished(){
  LOG.debug(Markers.LIFECYCLE,Messages.Finished,this.name);
  this.pipeline.remove(this.name);
  this.latch.countDown();
}","public void finished(){
  LOG.debug(Markers.LIFECYCLE,Messages.Finished,this.name);
  this.support.decrementProgress(this.name);
  this.latch.countDown();
}",0.9205298013245032
153491,"@Override public boolean isSuccess(){
  this.latch.countDown();
  return this.success;
}","@Override public boolean isSuccess(){
  return this.success;
}",0.8266666666666667
153492,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive,this.future)) {
      this.support.decrementProgress(this.name);
      this.support.invokeNext();
    }
  }
 catch (  Exception ex) {
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
 finally {
    this.support.responseComplete();
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive,this.future)) {
      this.support.invokeNext();
    }
  }
 catch (  Exception ex) {
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
 finally {
    this.support.responseComplete();
  }
}",0.6112702960840497
153493,"/** 
 * if returning body has sibling then call get with sibling call automatically.
 */
@Override public RiakFuture put(final RiakObject<byte[]> content,final PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPutRequest(content,options);
  final String procedure=""String_Node_Str"";
  final CountDownRiakFuture future=this.support.newRiakFuture(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          handler.onError(new RestErrorResponse(response,RestRiakOperations.this.support));
          future.finished();
        }
 else         if (NettyUtil.isSuccessful(response.getStatus())) {
          try {
            handler.begin();
            RiakObject<byte[]> ro=content;
            if (options.getReturnBody()) {
              ro=RestRiakOperations.this.factory.convert(response,response.getContent(),content.getLocation());
            }
            handler.handle(RestRiakOperations.this.support.newResponse(ro));
          }
  finally {
            handler.end(RestRiakOperations.this.support.newResponse());
            RestRiakOperations.this.support.decrementProgress(procedure);
          }
          future.setSuccess();
        }
 else         if (response.getStatus().getCode() == 300) {
          RestRiakOperations.this.support.decrementProgress(procedure);
          ChannelPipeline pipeline=ctx.getPipeline();
          pipeline.remove(procedure);
          dispatchToGetSibling(content.getLocation(),options,handler,future);
        }
      }
    }
  }
;
  return this.support.handle(procedure,request,handler,internal,future);
}","/** 
 * if returning body has sibling then call get with sibling call automatically.
 */
@Override public RiakFuture put(final RiakObject<byte[]> content,final PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPutRequest(content,options);
  final String procedure=""String_Node_Str"";
  final CountDownRiakFuture future=this.support.newRiakFuture(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          handler.onError(new RestErrorResponse(response,RestRiakOperations.this.support));
          future.finished();
        }
 else         if (NettyUtil.isSuccessful(response.getStatus())) {
          try {
            handler.begin();
            RiakObject<byte[]> ro=content;
            if (options.getReturnBody()) {
              ro=RestRiakOperations.this.factory.convert(response,response.getContent(),content.getLocation());
            }
            handler.handle(RestRiakOperations.this.support.newResponse(ro));
          }
  finally {
            handler.end(RestRiakOperations.this.support.newResponse());
          }
          future.setSuccess();
        }
 else         if (response.getStatus().getCode() == 300) {
          RestRiakOperations.this.support.decrementProgress(procedure);
          dispatchToGetSibling(content.getLocation(),options,handler,future);
        }
      }
    }
  }
;
  return this.support.handle(procedure,request,handler,internal,future);
}",0.8904927824788452
153494,"@Before public void setUp() throws Exception {
  this.bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));
  this.bootstrap.setPipelineFactory(new ProtoBufPipelineFactory());
  ChannelFuture future=this.bootstrap.connect(config.getRiakAddress());
  this.channel=future.awaitUninterruptibly().getChannel();
  this.target=new ProtoBufRiakOperations(this.channel);
}","@Before public void setUp() throws Exception {
  this.bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));
  this.bootstrap.setPipelineFactory(new ProtoBufPipelineFactory());
  ChannelFuture future=this.bootstrap.connect(config.getRiakAddress());
  this.channel=future.awaitUninterruptibly().getChannel();
  this.target=new ProtoBufRiakOperations(this.channel);
  deleteFromBucket();
}",0.9756637168141592
153495,"@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  this.support.remove(this.name);
  this.future.setFailure(e.getCause());
  LOG.error(Markers.BOUNDARY,e.getCause().getMessage(),e.getCause());
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
    @Override public void operationComplete(){
      AbstractCompletionChannelHandler.this.support.complete();
    }
  }
);
  this.support.invokeNext();
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  this.support.decrementProgress(this.name);
  LOG.error(Markers.BOUNDARY,e.getCause().getMessage(),e.getCause());
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
    @Override public void operationComplete(){
      AbstractCompletionChannelHandler.this.support.complete();
    }
  }
);
  this.future.setFailure(e.getCause());
  this.support.invokeNext();
}",0.9114155251141552
153496,"public ChunkedMessageAggregator(String procedure,ChunkedMessageHandler handler){
  this.procedure=procedure;
  this.handler=handler;
}","public ChunkedMessageAggregator(String procedure,MessageHandler handler){
  this.procedure=procedure;
  this.handler=handler;
}",0.9731800766283524
153497,"@Override public boolean handle(Object receive) throws Exception {
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    if (NettyUtil.isSuccessful(response.getStatus())) {
      if (response.isChunked()) {
        this.chunkBuffer=ChannelBuffers.dynamicBuffer(2048);
        this.chunkedResponse=response;
      }
 else {
        this.handler.handle(response,response.getContent());
        return true;
      }
    }
  }
 else   if (receive instanceof HttpChunk) {
    HttpChunk chunk=(HttpChunk)receive;
    boolean done=chunk.isLast();
    if (done) {
      this.handler.handle(this.chunkedResponse,this.chunkBuffer);
    }
 else {
      this.chunkBuffer.writeBytes(chunk.getContent());
    }
    return done;
  }
  return false;
}","@Override public boolean handle(Object receive,CountDownRiakFuture future) throws Exception {
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    if (NettyUtil.isSuccessful(response.getStatus())) {
      if (response.isChunked()) {
        this.chunkedBuffer=response.getContent();
        this.chunkedResponse=response;
      }
 else {
        this.handler.handle(response,future);
        return true;
      }
    }
  }
 else   if (receive instanceof HttpChunk) {
    HttpChunk chunk=(HttpChunk)receive;
    boolean done=chunk.isLast();
    if (done) {
      this.chunkedResponse.setChunked(false);
      this.chunkedResponse.setContent(this.chunkedBuffer);
      this.handler.handle(this.chunkedResponse,future);
    }
 else {
      this.chunkedBuffer=ChannelBuffers.wrappedBuffer(this.chunkedBuffer,chunk.getContent());
    }
    return done;
  }
  return false;
}",0.3655786350148368
153498,"public void setFailure(Throwable cause){
  this.cause=cause;
  finished();
}","public void setFailure(){
  this.failure=true;
  finished();
}",0.8115942028985508
153499,"@Override public boolean isDone(){
  return this.success || this.canceled || this.cause != null;
}","@Override public boolean isDone(){
  return this.latch.getCount() < 1;
}",0.6470588235294118
153500,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive)) {
      this.future.setSuccess();
      this.support.remove(this.name);
      this.support.invokeNext();
    }
    e.getFuture().addListener(this.support);
  }
 catch (  Exception ex) {
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive,this.future)) {
      this.support.decrementProgress(this.name);
      this.support.invokeNext();
    }
    e.getFuture().addListener(this.support);
  }
 catch (  Exception ex) {
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
}",0.92942254812099
153501,"/** 
 * @param receive
 * @return true : handle finished / false : do more handle.
 */
boolean handle(Object receive) throws Exception ;","/** 
 * @param receive
 * @return true : handle finished / false : do more handle.
 */
boolean handle(Object receive,CountDownRiakFuture future) throws Exception ;",0.9096989966555185
153502,"@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  this.support.decrementProgress(this.name);
  LOG.error(Markers.BOUNDARY,e.getCause().getMessage(),e.getCause());
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
    @Override public void operationComplete(){
      AbstractCompletionChannelHandler.this.support.complete();
    }
  }
);
  this.future.setFailure(e.getCause());
  this.support.invokeNext();
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  this.support.decrementProgress(this.name);
  LOG.error(Markers.BOUNDARY,e.getCause().getMessage(),e.getCause());
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
  }
);
  this.future.setFailure(e.getCause());
  this.support.invokeNext();
}",0.7340748230535895
153503,"@Override public void execute(RiakAction<OP> action){
  notNull(action,""String_Node_Str"");
  ClientBootstrap bootstrap=new ClientBootstrap(this.channelFactory);
  Integer i=this.config.getTimeout();
  if (i != null) {
    bootstrap.setOption(""String_Node_Str"",i);
  }
  bootstrap.setPipelineFactory(this.pipelineFactory);
  ChannelFuture future=bootstrap.connect(this.config.getRiakAddress());
  future=future.awaitUninterruptibly();
  Channel channel=future.getChannel();
  OP op=newOperations(channel);
  action.execute(op);
}","@Override public void execute(RiakAction<OP> action){
  notNull(action,""String_Node_Str"");
  ClientBootstrap bootstrap=new ClientBootstrap(this.channelFactory);
  Integer i=this.config.getTimeout();
  if (i != null) {
    bootstrap.setOption(""String_Node_Str"",i);
  }
  bootstrap.setPipelineFactory(this.pipelineFactory);
  ChannelFuture future=bootstrap.connect(this.config.getRiakAddress());
  future=future.awaitUninterruptibly();
  Channel channel=future.getChannel();
  OP op=newOperations(channel);
  try {
    action.execute(op);
  }
  finally {
    op.complete();
  }
}",0.9556561085972852
153504,"public <T>RiakFuture handle(String name,Object send,RiakResponseHandler<T> users,ChannelHandler handler,RiakFuture future){
  ChannelPipeline pipeline=this.channel.getPipeline();
  Command cmd=new Command(this.channel,send,name,handler);
  try {
    if (this.inProgress.add(cmd.name)) {
      cmd.execute();
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Markers.DETAIL,Messages.Queue,name);
      }
      this.waitQueue.add(cmd);
    }
    return future;
  }
 catch (  Exception e) {
    complete(name,pipeline);
    throw new RiakException(e);
  }
catch (  Error e) {
    complete(name,pipeline);
    throw e;
  }
}","public <T>RiakFuture handle(String name,Object send,RiakResponseHandler<T> users,ChannelHandler handler,RiakFuture future){
  ChannelPipeline pipeline=this.channel.getPipeline();
  Command cmd=new Command(this.channel,send,name,handler);
  try {
    if (this.inProgress.add(cmd.name)) {
      cmd.execute();
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Markers.DETAIL,Messages.Queue,name);
      }
      this.waitQueue.add(cmd);
    }
    return future;
  }
 catch (  Exception e) {
    completeOnError(name,pipeline);
    throw new RiakException(e);
  }
catch (  Error e) {
    completeOnError(name,pipeline);
    throw e;
  }
}",0.989113530326594
153505,"protected void complete(String name,ChannelPipeline pipeline){
  pipeline.remove(name);
  complete();
  close(this.channel);
}","protected void complete(){
  if (LOG.isDebugEnabled()) {
    LOG.debug(Markers.DETAIL,""String_Node_Str"",new Object[]{this.waitQueue.size(),this.inProgress.size(),this.operationComplete.get()});
  }
  if (this.operationComplete.get() && this.waitQueue.size() < 1 && this.inProgress.size() < 1) {
    close(this.channel);
  }
}",0.1906873614190687
153506,"protected void close(Channel channel){
  if (channel.isOpen()) {
    LOG.debug(Markers.BOUNDARY,Messages.CloseChannel);
    channel.close();
  }
}","protected void close(Channel channel){
  if (this.lock.tryLock()) {
    try {
      if (channel.isOpen()) {
        LOG.debug(Markers.BOUNDARY,Messages.CloseChannel);
        channel.close();
      }
    }
  finally {
      this.lock.unlock();
    }
  }
 else {
    LOG.debug(Markers.DETAIL,""String_Node_Str"");
  }
}",0.6190476190476191
153507,"@Override public void operationComplete(){
  complete();
}","public void operationComplete(){
  this.operationComplete.compareAndSet(false,true);
  complete();
}",0.6075949367088608
153508,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive,this.future)) {
      this.support.decrementProgress(this.name);
      this.support.invokeNext();
    }
    e.getFuture().addListener(this.support);
  }
 catch (  Exception ex) {
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive,this.future)) {
      this.support.decrementProgress(this.name);
      this.support.invokeNext();
    }
  }
 catch (  Exception ex) {
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
 finally {
    this.support.responseComplete();
  }
}",0.7566574839302111
153509,"@Ignore @Test public void testMove() throws Exception {
  final boolean[] is={false};
  final String from=""String_Node_Str"";
  final String to=""String_Node_Str"";
  for (int i=0; i < 10; i++) {
    testPut(new Location(from,String.valueOf(i)),""String_Node_Str"" + i);
  }
  RiakFuture waiter=this.target.listKeys(from,new RiakResponseHandler<KeyResponse>(){
    @Override public void onError(    RiakResponse response) throws Exception {
      response.operationComplete();
      fail(response.getMessage());
    }
    @Override public void handle(    RiakContentsResponse<KeyResponse> response) throws Exception {
      KeyResponse kr=response.getContents();
      if (kr.getDone()) {
        return;
      }
      final AtomicInteger counter=new AtomicInteger(kr.getKeys().size());
      for (      final String k : kr.getKeys()) {
        RiakFuture deleteRF=RiakOperationsTest.this.target.delete(new Location(from,k),new RiakResponseHandler<_>(){
          @Override public void onError(          RiakResponse response) throws Exception {
            fail(response.getMessage());
          }
          @Override public void handle(          RiakContentsResponse<_> response) throws Exception {
            DefaultRiakObject ro=new DefaultRiakObject(new Location(to,k));
            ro.setContent(""String_Node_Str"".getBytes());
            RiakFuture putRF=RiakOperationsTest.this.target.put(ro,new RiakResponseHandler<_>(){
              @Override public void onError(              RiakResponse response) throws Exception {
                fail(response.getMessage());
              }
              @Override public void handle(              RiakContentsResponse<_> response) throws Exception {
                int i=counter.decrementAndGet();
                if (i < 1) {
                  is[0]=true;
                }
              }
            }
);
            putRF.await(3,TimeUnit.SECONDS);
          }
        }
);
        deleteRF.await(3,TimeUnit.SECONDS);
      }
    }
  }
);
  try {
    assertTrue(""String_Node_Str"",waiter.await(20,TimeUnit.SECONDS));
    assertTrue(is[0]);
  }
  finally {
    for (int i=0; i < 10; i++) {
      testDelete(new Location(from,String.valueOf(i)));
      testDelete(new Location(to,String.valueOf(i)));
    }
  }
}","@Ignore @Test public void testMove() throws Exception {
  final boolean[] is={false};
  final String from=""String_Node_Str"";
  final String to=""String_Node_Str"";
  for (int i=0; i < 10; i++) {
    testPut(new Location(from,String.valueOf(i)),""String_Node_Str"" + i);
  }
  RiakFuture waiter=this.target.listKeys(from,new RiakResponseHandler<KeyResponse>(){
    @Override public void onError(    RiakResponse response) throws Exception {
      fail(response.getMessage());
    }
    @Override public void handle(    RiakContentsResponse<KeyResponse> response) throws Exception {
      KeyResponse kr=response.getContents();
      if (kr.getDone()) {
        return;
      }
      final AtomicInteger counter=new AtomicInteger(kr.getKeys().size());
      for (      final String k : kr.getKeys()) {
        RiakFuture deleteRF=RiakOperationsTest.this.target.delete(new Location(from,k),new RiakResponseHandler<_>(){
          @Override public void onError(          RiakResponse response) throws Exception {
            fail(response.getMessage());
          }
          @Override public void handle(          RiakContentsResponse<_> response) throws Exception {
            DefaultRiakObject ro=new DefaultRiakObject(new Location(to,k));
            ro.setContent(""String_Node_Str"".getBytes());
            RiakFuture putRF=RiakOperationsTest.this.target.put(ro,new RiakResponseHandler<_>(){
              @Override public void onError(              RiakResponse response) throws Exception {
                fail(response.getMessage());
              }
              @Override public void handle(              RiakContentsResponse<_> response) throws Exception {
                int i=counter.decrementAndGet();
                if (i < 1) {
                  is[0]=true;
                }
              }
            }
);
            putRF.await(3,TimeUnit.SECONDS);
          }
        }
);
        deleteRF.await(3,TimeUnit.SECONDS);
      }
    }
  }
);
  try {
    assertTrue(""String_Node_Str"",waiter.await(20,TimeUnit.SECONDS));
    assertTrue(is[0]);
  }
  finally {
    for (int i=0; i < 10; i++) {
      testDelete(new Location(from,String.valueOf(i)));
      testDelete(new Location(to,String.valueOf(i)));
    }
  }
}",0.9919750334373608
153510,"public AbstractRiakClient(CONF config,ChannelPipelineFactory pipelineFactory){
  this.channelFactory=new NioClientSocketChannelFactory(config.getBossExecutor(),config.getWorkerExecutor());
  this.pipelineFactory=pipelineFactory;
  this.config=config;
}","public AbstractRiakClient(CONF config,ChannelPipelineFactory pipelineFactory){
  this.externalResources[0]=config.getActionExecutor();
  this.externalResources[1]=config.getBossExecutor();
  this.externalResources[2]=config.getWorkerExecutor();
  this.actionExecutor=this.externalResources[0];
  this.channelFactory=new NioClientSocketChannelFactory(this.externalResources[1],this.externalResources[2]);
  this.pipelineFactory=pipelineFactory;
  this.config=config;
}",0.4784422809457579
153511,"@Override public void dispose(){
  this.channelFactory.releaseExternalResources();
}","@Override public void dispose(){
  ExecutorUtil.terminate(this.externalResources);
}",0.7261904761904762
153512,"@Override public void execute(RiakAction<OP> action){
  notNull(action,""String_Node_Str"");
  ClientBootstrap bootstrap=new ClientBootstrap(this.channelFactory);
  Integer i=this.config.getTimeout();
  if (i != null) {
    bootstrap.setOption(""String_Node_Str"",i);
  }
  bootstrap.setPipelineFactory(this.pipelineFactory);
  ChannelFuture future=bootstrap.connect(this.config.getRiakAddress());
  future=future.awaitUninterruptibly();
  Channel channel=future.getChannel();
  OP op=newOperations(channel);
  try {
    action.execute(op);
  }
  finally {
    op.complete();
  }
}","@Override public void execute(final RiakAction<OP> action){
  notNull(action,""String_Node_Str"");
  ClientBootstrap bootstrap=new ClientBootstrap(this.channelFactory);
  Integer i=this.config.getTimeout();
  if (i != null) {
    bootstrap.setOption(""String_Node_Str"",i);
  }
  bootstrap.setPipelineFactory(this.pipelineFactory);
  ChannelFuture future=bootstrap.connect(this.config.getRiakAddress());
  future.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (future.isSuccess()) {
        final Channel channel=future.getChannel();
        AbstractRiakClient.this.actionExecutor.execute(new Runnable(){
          @Override public void run(){
            OP op=newOperations(channel);
            try {
              action.execute(op);
            }
  finally {
              op.complete();
            }
          }
        }
);
      }
    }
  }
);
}",0.6807109940750494
153513,"@Test public void testExecute() throws Exception {
  this.target.execute(new RiakAction<OP>(){
    @Override public void execute(    OP operations){
      final String[] actual=new String[1];
      RiakFuture waiter=operations.ping(new TestingHandler<String>(){
        @Override public void handle(        RiakContentsResponse<String> response) throws Exception {
          actual[0]=response.getContents();
        }
      }
);
      try {
        assertTrue(""String_Node_Str"",waiter.await(3,TimeUnit.SECONDS));
        assertEquals(""String_Node_Str"",actual[0]);
      }
 catch (      InterruptedException e) {
        fail(e.getMessage());
      }
    }
  }
);
}","@Test public void testExecute() throws Exception {
  this.target.execute(new RiakAction<OP>(){
    @Override public void execute(    OP operations){
      final String[] actual=new String[1];
      RiakFuture waiter=operations.ping(new TestingHandler<String>(){
        @Override public void handle(        RiakContentsResponse<String> response) throws Exception {
          actual[0]=response.getContents();
        }
      }
);
      try {
        assertTrue(""String_Node_Str"",waiter.await(3,TimeUnit.SECONDS));
        assertEquals(""String_Node_Str"",actual[0]);
        fail();
      }
 catch (      InterruptedException e) {
        fail(e.getMessage());
      }
    }
  }
);
}",0.9881129271916792
153514,"@Test public void testExecute3() throws Exception {
  final String[] actual=new String[1];
  final CountDownLatch latch=new CountDownLatch(1);
  this.target.execute(new RiakAction<OP>(){
    @Override public void execute(    OP operations){
      RiakFuture waiter=operations.ping(new TestingHandler<String>(){
        @Override public void handle(        RiakContentsResponse<String> response) throws Exception {
          actual[0]=response.getContents();
        }
      }
);
      latch.countDown();
      try {
        assertTrue(""String_Node_Str"",waiter.await(3,TimeUnit.SECONDS));
      }
 catch (      InterruptedException e) {
        fail(e.getMessage());
      }
    }
  }
);
  assertTrue(""String_Node_Str"",latch.await(3,TimeUnit.SECONDS));
  assertEquals(""String_Node_Str"",actual[0]);
}","@Test public void testExecute3() throws Exception {
  final String[] actual=new String[1];
  final CountDownLatch latch=new CountDownLatch(1);
  System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
  this.target.execute(new RiakAction<OP>(){
    @Override public void execute(    OP operations){
      System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
      RiakFuture waiter=operations.ping(new TestingHandler<String>(){
        @Override public void handle(        RiakContentsResponse<String> response) throws Exception {
          System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
          actual[0]=response.getContents();
        }
      }
);
      try {
        assertTrue(""String_Node_Str"",waiter.await(3,TimeUnit.SECONDS));
        latch.countDown();
      }
 catch (      InterruptedException e) {
        fail(e.getMessage());
      }
    }
  }
);
  assertTrue(""String_Node_Str"",latch.await(3,TimeUnit.SECONDS));
  assertEquals(""String_Node_Str"",actual[0]);
}",0.8411316648531012
153515,"@Override public void handle(RiakContentsResponse<String> response) throws Exception {
  actual[0]=response.getContents();
}","@Override public void handle(RiakContentsResponse<String> response) throws Exception {
  System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
  actual[0]=response.getContents();
}",0.7654320987654321
153516,"@Override public void execute(OP operations){
  RiakFuture waiter=operations.ping(new TestingHandler<String>(){
    @Override public void handle(    RiakContentsResponse<String> response) throws Exception {
      actual[0]=response.getContents();
    }
  }
);
  latch.countDown();
  try {
    assertTrue(""String_Node_Str"",waiter.await(3,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
}","@Override public void execute(OP operations){
  System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
  RiakFuture waiter=operations.ping(new TestingHandler<String>(){
    @Override public void handle(    RiakContentsResponse<String> response) throws Exception {
      System.out.println(""String_Node_Str"" + Thread.currentThread().getName());
      actual[0]=response.getContents();
    }
  }
);
  try {
    assertTrue(""String_Node_Str"",waiter.await(3,TimeUnit.SECONDS));
    latch.countDown();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
}",0.8027613412228797
153517,"public <T>RiakFuture handle(String name,Object send,RiakResponseHandler<T> users,ChannelHandler handler,RiakFuture future){
  ChannelPipeline pipeline=this.channel.getPipeline();
  Command cmd=new Command(this.channel,send,name,handler);
  try {
    if (this.inProgress.add(cmd.name)) {
      cmd.execute();
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Markers.LIFECYCLE,Messages.Queue,name);
      }
      this.waitQueue.add(cmd);
    }
    return future;
  }
 catch (  Exception e) {
    complete(name,pipeline);
    throw new RiakException(e);
  }
catch (  Error e) {
    complete(name,pipeline);
    throw e;
  }
}","public <T>RiakFuture handle(String name,Object send,RiakResponseHandler<T> users,ChannelHandler handler,RiakFuture future){
  ChannelPipeline pipeline=this.channel.getPipeline();
  Command cmd=new Command(this.channel,send,name,handler);
  try {
    if (this.inProgress.add(cmd.name)) {
      cmd.execute();
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(Markers.DETAIL,Messages.Queue,name);
      }
      this.waitQueue.add(cmd);
    }
    return future;
  }
 catch (  Exception e) {
    complete(name,pipeline);
    throw new RiakException(e);
  }
catch (  Error e) {
    complete(name,pipeline);
    throw e;
  }
}",0.9898039215686274
153518,"protected void invokeNext(){
  for (Iterator<Command> i=this.waitQueue.iterator(); i.hasNext(); ) {
    Command cmd=i.next();
    if (this.inProgress.add(cmd.name)) {
      i.remove();
      cmd.execute();
    }
  }
}","protected void invokeNext(){
  for (Iterator<Command> i=this.waitQueue.iterator(); i.hasNext(); ) {
    Command cmd=i.next();
    if (this.inProgress.add(cmd.name)) {
      i.remove();
      cmd.execute();
      break;
    }
  }
}",0.970917225950783
153519,"protected void complete(String name,ChannelPipeline pipeline){
  pipeline.remove(name);
  complete();
  this.channel.close();
}","protected void complete(String name,ChannelPipeline pipeline){
  pipeline.remove(name);
  complete();
  close(this.channel);
}",0.9486166007905138
153520,"public PartMessage parse(ChannelBuffer buffer){
  DefaultPartMessage multipart=new DefaultPartMessage();
  for (; ; ) {
switch (state) {
case SKIP_CONTROL_CHARS:
{
        skipControlCharacters(buffer);
        state=State.READ_BOUNDARY;
        break;
      }
case READ_BOUNDARY:
{
      state=readBoundary(buffer);
      break;
    }
case READ_HEADERS:
{
    readHeaders(buffer,multipart);
    break;
  }
case READ_CHUNKD_CONTENT:
{
  return multipart;
}
case READ_CONTENT:
{
int length=seekNextBoundary(buffer);
multipart.setContent(buffer.readBytes(length));
return multipart;
}
case EPILOGUE:
{
multipart.setLast(true);
state=State.SKIP_CONTROL_CHARS;
return multipart;
}
default :
{
throw new IllegalStateException(""String_Node_Str"" + state);
}
}
}
}","public PartMessage parse(ChannelBuffer buffer){
  DefaultPartMessage multipart=new DefaultPartMessage();
  for (; ; ) {
switch (state) {
case SKIP_CONTROL_CHARS:
{
        skipControlCharacters(buffer);
        state=State.READ_BOUNDARY;
        break;
      }
case READ_BOUNDARY:
{
      state=readBoundary(buffer);
      break;
    }
case READ_HEADERS:
{
    readHeaders(buffer,multipart);
    break;
  }
case READ_CHUNKD_CONTENT:
{
  return multipart;
}
case READ_CONTENT:
{
int length=seekNextBoundary(buffer);
ChannelBuffer newone=buffer.readBytes(length);
if (this.readContinue != null) {
  ChannelBuffer cb=readContinue.getContent();
  newone=ChannelBuffers.copiedBuffer(cb.array(),newone.array());
}
multipart.setContent(newone);
if (State.READ_CONTENT.equals(this.state)) {
  this.readContinue=multipart;
}
 else {
  this.readContinue=null;
}
return multipart;
}
case EPILOGUE:
{
multipart.setLast(true);
state=State.SKIP_CONTROL_CHARS;
return multipart;
}
default :
{
throw new IllegalStateException(""String_Node_Str"" + state);
}
}
}
}",0.8139922265408107
153521,"protected void splitMultipart(ChannelHandlerContext ctx,MessageEvent e,ChannelBuffer buffer){
  while (buffer.readable()) {
    PartMessage msg=parse(buffer);
    Channels.fireMessageReceived(ctx,msg,e.getRemoteAddress());
    if (State.READ_CHUNKD_CONTENT.equals(state)) {
      break;
    }
  }
}","protected void splitMultipart(ChannelHandlerContext ctx,MessageEvent e,ChannelBuffer buffer){
  while (buffer.readable()) {
    PartMessage msg=parse(buffer);
    if (State.READ_CONTENT.equals(this.state)) {
      break;
    }
    Channels.fireMessageReceived(ctx,msg,e.getRemoteAddress());
    if (State.READ_CHUNKD_CONTENT.equals(this.state)) {
      break;
    }
  }
}",0.890881913303438
153522,"private int seekNextBoundary(ChannelBuffer buffer){
  int readerIndex=buffer.readerIndex();
  int length=0;
  String line=""String_Node_Str"";
  while (buffer.readable()) {
    line=readLine(buffer);
    if (line.isEmpty() && buffer.readable() == false) {
      state=State.EPILOGUE;
      break;
    }
 else     if (this.dashBoundary.equals(line)) {
      length-=this.dashBoundary.length();
      length-=4;
      state=State.SKIP_CONTROL_CHARS;
      break;
    }
 else     if (this.closeBoundary.equals(line)) {
      length-=this.closeBoundary.length();
      length-=4;
      state=State.SKIP_CONTROL_CHARS;
      break;
    }
  }
  length+=(buffer.readerIndex() - readerIndex);
  if (LOG.isDebugEnabled()) {
    LOG.debug(Markers.DETAIL,""String_Node_Str"" + length + ""String_Node_Str""+ state);
  }
  buffer.readerIndex(readerIndex);
  return length;
}","private int seekNextBoundary(ChannelBuffer buffer){
  int readerIndex=buffer.readerIndex();
  int length=0;
  String line=""String_Node_Str"";
  while (buffer.readable()) {
    line=readLine(buffer);
    if (line.isEmpty() && buffer.readable() == false) {
      state=State.READ_CONTENT;
      break;
    }
 else     if (this.dashBoundary.equals(line)) {
      length-=this.dashBoundary.length();
      length-=4;
      state=State.SKIP_CONTROL_CHARS;
      break;
    }
 else     if (this.closeBoundary.equals(line)) {
      length-=this.closeBoundary.length();
      length-=4;
      state=State.SKIP_CONTROL_CHARS;
      break;
    }
  }
  length+=(buffer.readerIndex() - readerIndex);
  if (LOG.isDebugEnabled()) {
    LOG.debug(Markers.DETAIL,""String_Node_Str"" + length + ""String_Node_Str""+ state);
  }
  buffer.readerIndex(readerIndex);
  return length;
}",0.9918319719953326
153523,"@Test public void testSibling() throws Exception {
  final Location location=new Location(""String_Node_Str"",""String_Node_Str"");
  testPut(location,""String_Node_Str"");
  try {
    Bucket bucket=testBucketGet(location.getBucket());
    bucket.setAllowMulti(true);
    testBucketSet(bucket);
    testDelete(location);
    List<String> testdatas=new ArrayList<String>();
    Random r=new Random();
    byte[] bytes=new byte[20];
    r.nextBytes(bytes);
    testdatas.add(Arrays.toString(bytes));
    r.nextBytes(bytes);
    testdatas.add(Arrays.toString(bytes));
    r.nextBytes(bytes);
    testdatas.add(Arrays.toString(bytes));
    testSetClientId(""String_Node_Str"");
    testPut(location,testdatas.get(0));
    testSetClientId(""String_Node_Str"");
    testPut(location,testdatas.get(1));
    testSetClientId(""String_Node_Str"");
    testPutWithSibling(location,testdatas.get(2),testdatas);
    testGetWithSibling(location,testdatas);
  }
  finally {
  }
}","@Test public void testSibling() throws Exception {
  final Location location=new Location(""String_Node_Str"",""String_Node_Str"");
  testPut(location,""String_Node_Str"");
  try {
    Bucket bucket=testBucketGet(location.getBucket());
    bucket.setAllowMulti(true);
    testBucketSet(bucket);
    testDelete(location);
    List<String> testdatas=new ArrayList<String>();
    Random r=new Random();
    byte[] bytes=new byte[1024 * 128];
    r.nextBytes(bytes);
    testdatas.add(Arrays.toString(bytes));
    r.nextBytes(bytes);
    testdatas.add(Arrays.toString(bytes));
    r.nextBytes(bytes);
    testdatas.add(Arrays.toString(bytes));
    testSetClientId(""String_Node_Str"");
    testPut(location,testdatas.get(0));
    testSetClientId(""String_Node_Str"");
    testPut(location,testdatas.get(1));
    testSetClientId(""String_Node_Str"");
    Thread.sleep(1000 * 10);
    testPutWithSibling(location,testdatas.get(2),testdatas);
    testGetWithSibling(location,testdatas);
  }
  finally {
  }
}",0.613086038124678
153524,"protected void testGetWithSibling(final Location location,final List<String> testdatas) throws InterruptedException {
  final boolean[] is={false};
  final boolean[] beginEnd=new boolean[2];
  final List<String> actuals=new ArrayList<String>();
  RiakFuture waiter=this.target.get(location,new DefaultGetOptions(),new SiblingHandler(){
    @Override public void begin(){
      beginEnd[0]=true;
    }
    @Override public void onError(    RiakResponse response) throws RiakException {
      fail(response.getMessage());
    }
    @Override public void handle(    RiakContentsResponse<RiakObject<byte[]>> response) throws RiakException {
      RiakObject<byte[]> ro=response.getContents();
      assertEquals(location,ro.getLocation());
      actuals.add(new String(ro.getContent()));
      is[0]=true;
    }
    @Override public void end(    RiakResponse response){
      beginEnd[1]=true;
    }
  }
);
  wait(waiter,is);
  assertEquals(3,actuals.size());
  for (  String s : testdatas) {
    assertTrue(s,actuals.contains(s));
  }
  assertTrue(""String_Node_Str"",beginEnd[0]);
  assertTrue(""String_Node_Str"",beginEnd[1]);
}","protected void testGetWithSibling(final Location location,final List<String> testdatas) throws InterruptedException {
  final boolean[] is={false};
  final boolean[] beginEnd=new boolean[2];
  final List<String> actuals=new ArrayList<String>();
  RiakFuture waiter=this.target.get(location,new DefaultGetOptions(),new SiblingHandler(){
    @Override public void begin(){
      beginEnd[0]=true;
    }
    @Override public void onError(    RiakResponse response) throws RiakException {
      fail(response.getMessage());
    }
    @Override public void handle(    RiakContentsResponse<RiakObject<byte[]>> response) throws RiakException {
      RiakObject<byte[]> ro=response.getContents();
      assertEquals(location,ro.getLocation());
      actuals.add(new String(ro.getContent()));
      is[0]=true;
    }
    @Override public void end(    RiakResponse response){
      beginEnd[1]=true;
    }
  }
);
  assertTrue(""String_Node_Str"",waiter.await(10,TimeUnit.SECONDS));
  assertTrue(is[0]);
  assertEquals(3,actuals.size());
  for (  String s : testdatas) {
    assertTrue(s,actuals.contains(s));
  }
  assertTrue(""String_Node_Str"",beginEnd[0]);
  assertTrue(""String_Node_Str"",beginEnd[1]);
}",0.8526997840172786
153525,"protected void testPutWithSibling(final Location location,final String testdata,final List<String> testdatas) throws Exception {
  final boolean[] is={false};
  final boolean[] beginEnd=new boolean[2];
  RiakObject<byte[]> ro=new DefaultRiakObject(location){
    @Override public byte[] getContent(){
      return testdata.getBytes();
    }
  }
;
  final List<String> actuals=new ArrayList<String>();
  RiakFuture waiter=this.target.put(ro,new DefaultPutOptions(){
    @Override public boolean getReturnBody(){
      return true;
    }
  }
,new SiblingHandler(){
    @Override public void onError(    RiakResponse response) throws Exception {
      fail(response.getMessage());
    }
    @Override public void begin(){
      beginEnd[0]=true;
    }
    @Override public void handle(    RiakContentsResponse<RiakObject<byte[]>> response) throws Exception {
      RiakObject<byte[]> ro=response.getContents();
      assertEquals(location,ro.getLocation());
      actuals.add(new String(ro.getContent()));
      is[0]=true;
    }
    @Override public void end(    RiakResponse response){
      beginEnd[1]=true;
    }
  }
);
  wait(waiter,is);
  assertEquals(3,actuals.size());
  for (  String s : testdatas) {
    assertTrue(s,actuals.contains(s));
  }
  assertTrue(""String_Node_Str"",beginEnd[0]);
  assertTrue(""String_Node_Str"",beginEnd[1]);
}","protected void testPutWithSibling(final Location location,final String testdata,final List<String> testdatas) throws Exception {
  final boolean[] is={false};
  final boolean[] beginEnd=new boolean[2];
  RiakObject<byte[]> ro=new DefaultRiakObject(location){
    @Override public byte[] getContent(){
      return testdata.getBytes();
    }
  }
;
  final List<String> actuals=new ArrayList<String>();
  RiakFuture waiter=this.target.put(ro,new DefaultPutOptions(){
    @Override public boolean getReturnBody(){
      return true;
    }
  }
,new SiblingHandler(){
    @Override public void onError(    RiakResponse response) throws Exception {
      fail(response.getMessage());
    }
    @Override public void begin(){
      beginEnd[0]=true;
    }
    @Override public void handle(    RiakContentsResponse<RiakObject<byte[]>> response) throws Exception {
      RiakObject<byte[]> ro=response.getContents();
      assertEquals(location,ro.getLocation());
      actuals.add(new String(ro.getContent()));
      is[0]=true;
    }
    @Override public void end(    RiakResponse response){
      beginEnd[1]=true;
    }
  }
);
  assertTrue(""String_Node_Str"",waiter.await(10,TimeUnit.SECONDS));
  assertTrue(is[0]);
  assertEquals(3,actuals.size());
  for (  String s : testdatas) {
    assertTrue(s,actuals.contains(s));
  }
  assertTrue(""String_Node_Str"",beginEnd[0]);
  assertTrue(""String_Node_Str"",beginEnd[1]);
}",0.8761351253178351
153526,"@Override public RiakFuture listKeys(String bucket,final RiakResponseHandler<KeyResponse> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbListKeysReq request=RpbListKeysReq.newBuilder().setBucket(ByteString.copyFromUtf8(bucket)).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbListKeysResp) {
        RpbListKeysResp resp=(RpbListKeysResp)receive;
        boolean done=resp.getDone();
        List<String> list=new ArrayList<String>(resp.getKeysCount());
        for (        ByteString bs : resp.getKeysList()) {
          list.add(to(bs));
        }
        KeyResponse kr=new KeyResponse(list,done);
        handler.handle(support.newResponse(kr));
        return done;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture listKeys(String bucket,final RiakResponseHandler<KeyResponse> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbListKeysReq request=RpbListKeysReq.newBuilder().setBucket(ByteString.copyFromUtf8(bucket)).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbListKeysResp) {
        RpbListKeysResp resp=(RpbListKeysResp)receive;
        boolean done=resp.getDone();
        List<String> list=new ArrayList<String>(resp.getKeysCount());
        for (        ByteString bs : resp.getKeysList()) {
          list.add(to(bs));
        }
        KeyResponse kr=new KeyResponse(list,done);
        handler.handle(PbcRiakOperations.this.support.newResponse(kr));
        return done;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.9884596086302058
153527,"@Override public RiakFuture listBuckets(final RiakResponseHandler<List<String>> handler){
  notNull(handler,""String_Node_Str"");
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbListBucketsReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbListBucketsResp) {
        RpbListBucketsResp resp=(RpbListBucketsResp)receive;
        List<String> list=new ArrayList<String>(resp.getBucketsCount());
        for (        ByteString bs : resp.getBucketsList()) {
          list.add(to(bs));
        }
        handler.handle(support.newResponse(list));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture listBuckets(final RiakResponseHandler<List<String>> handler){
  notNull(handler,""String_Node_Str"");
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbListBucketsReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbListBucketsResp) {
        RpbListBucketsResp resp=(RpbListBucketsResp)receive;
        List<String> list=new ArrayList<String>(resp.getBucketsCount());
        for (        ByteString bs : resp.getBucketsList()) {
          list.add(to(bs));
        }
        handler.handle(PbcRiakOperations.this.support.newResponse(list));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.98556183301946
153528,"/** 
 * Get the client id used for this connection. Client ids are used for conflict resolution and each unique actor in the system should be assigned one. A client id is assigned randomly when the socket is connected and can be changed using SetClientId below.
 * @param handler
 * @return
 */
public RiakFuture getClientId(final RiakResponseHandler<String> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbGetClientIdReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetClientIdResp) {
        RpbGetClientIdResp resp=(RpbGetClientIdResp)receive;
        String cid=to(resp.getClientId());
        handler.handle(support.newResponse(cid));
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","/** 
 * Get the client id used for this connection. Client ids are used for conflict resolution and each unique actor in the system should be assigned one. A client id is assigned randomly when the socket is connected and can be changed using SetClientId below.
 * @param handler
 * @return
 */
public RiakFuture getClientId(final RiakResponseHandler<String> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbGetClientIdReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetClientIdResp) {
        RpbGetClientIdResp resp=(RpbGetClientIdResp)receive;
        String cid=to(resp.getClientId());
        handler.handle(PbcRiakOperations.this.support.newResponse(cid));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.9676339285714286
153529,"@Override public RiakFuture ping(final RiakResponseHandler<String> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbPingReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbPingResp.equals(receive)) {
        handler.handle(support.newResponse(""String_Node_Str""));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture ping(final RiakResponseHandler<String> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbPingReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbPingResp.equals(receive)) {
        handler.handle(PbcRiakOperations.this.support.newResponse(""String_Node_Str""));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.97790585975024
153530,"@Override public RiakFuture setBucket(Bucket bucket,final RiakResponseHandler<_> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbBucketProps props=RpbBucketProps.newBuilder().setNVal(bucket.getNumberOfReplicas()).setAllowMult(bucket.getAllowMulti()).build();
  RpbSetBucketReq request=RpbSetBucketReq.newBuilder().setBucket(ByteString.copyFromUtf8(bucket.getName())).setProps(props).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbSetBucketResp.equals(receive)) {
        handler.handle(support.newResponse());
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture setBucket(Bucket bucket,final RiakResponseHandler<_> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbBucketProps props=RpbBucketProps.newBuilder().setNVal(bucket.getNumberOfReplicas()).setAllowMult(bucket.getAllowMulti()).build();
  RpbSetBucketReq request=RpbSetBucketReq.newBuilder().setBucket(ByteString.copyFromUtf8(bucket.getName())).setProps(props).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbSetBucketResp.equals(receive)) {
        handler.handle(PbcRiakOperations.this.support.newResponse());
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.9864626250735729
153531,"@Override public RiakFuture put(RiakObject<byte[]> content,PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  final Location location=content.getLocation();
  RpbPutReq.Builder builder=buildPutRequest(content,location,options);
  final String procedure=""String_Node_Str"";
  return handle(procedure,builder.build(),handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbPutResp) {
        RpbPutResp resp=(RpbPutResp)receive;
        try {
          handler.begin();
          if (0 < resp.getContentCount()) {
            String vclock=toVclock(resp.getVclock());
            for (            RpbContent c : resp.getContentList()) {
              RiakObject<byte[]> ro=convert(location,vclock,c);
              handler.handle(support.newResponse(ro));
            }
          }
        }
  finally {
          handler.end();
        }
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture put(RiakObject<byte[]> content,PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  final Location location=content.getLocation();
  RpbPutReq.Builder builder=buildPutRequest(content,location,options);
  final String procedure=""String_Node_Str"";
  return handle(procedure,builder.build(),handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbPutResp) {
        RpbPutResp resp=(RpbPutResp)receive;
        try {
          handler.begin();
          if (0 < resp.getContentCount()) {
            String vclock=toVclock(resp.getVclock());
            for (            RpbContent c : resp.getContentList()) {
              RiakObject<byte[]> ro=convert(location,vclock,c);
              handler.handle(PbcRiakOperations.this.support.newResponse(ro));
            }
          }
        }
  finally {
          handler.end();
        }
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.9900733707380232
153532,"@Override public RiakFuture getBucket(final String bucket,final RiakResponseHandler<Bucket> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbGetBucketReq request=RpbGetBucketReq.newBuilder().setBucket(ByteString.copyFromUtf8(bucket)).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetBucketResp) {
        RpbGetBucketResp resp=(RpbGetBucketResp)receive;
        RpbBucketProps props=resp.getProps();
        Bucket pb=new PbcBucket(bucket);
        pb.setNumberOfReplicas(props.getNVal());
        pb.setAllowMulti(props.getAllowMult());
        handler.handle(support.newResponse(pb));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture getBucket(final String bucket,final RiakResponseHandler<Bucket> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbGetBucketReq request=RpbGetBucketReq.newBuilder().setBucket(ByteString.copyFromUtf8(bucket)).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetBucketResp) {
        RpbGetBucketResp resp=(RpbGetBucketResp)receive;
        RpbBucketProps props=resp.getProps();
        Bucket pb=new PbcBucket(bucket);
        pb.setNumberOfReplicas(props.getNVal());
        pb.setAllowMulti(props.getAllowMult());
        handler.handle(PbcRiakOperations.this.support.newResponse(pb));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.9876675603217158
153533,"@Override public RiakFuture get(final Location location,GetOptions options,final SiblingHandler handler){
  notNull(location,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbGetReq.Builder builder=from(options);
  return _get(""String_Node_Str"",builder,location,handler,new GetHandler(){
    @Override public void handle(    RpbGetResp resp,    String vclock) throws Exception {
      try {
        handler.begin();
        for (        RpbContent c : resp.getContentList()) {
          RiakObject<byte[]> ro=convert(location,vclock,c);
          handler.handle(support.newResponse(ro));
        }
      }
  finally {
        handler.end();
      }
    }
  }
);
}","@Override public RiakFuture get(final Location location,GetOptions options,final SiblingHandler handler){
  notNull(location,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  RpbGetReq.Builder builder=from(options);
  return _get(""String_Node_Str"",builder,location,handler,new GetHandler(){
    @Override public void handle(    RpbGetResp resp,    String vclock) throws Exception {
      try {
        handler.begin();
        for (        RpbContent c : resp.getContentList()) {
          RiakObject<byte[]> ro=convert(location,vclock,c);
          handler.handle(PbcRiakOperations.this.support.newResponse(ro));
        }
      }
  finally {
        handler.end();
      }
    }
  }
);
}",0.974500344589938
153534,"protected RiakFuture _delete(final String name,final RiakResponseHandler<_> handler,RpbDelReq.Builder builder){
  return handle(name,builder.build(),handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbDelResp.equals(receive)) {
        handler.handle(support.newResponse());
        return true;
      }
      throw new IncomprehensibleProtocolException(name);
    }
  }
);
}","protected RiakFuture _delete(final String name,final RiakResponseHandler<_> handler,RpbDelReq.Builder builder){
  return handle(name,builder.build(),handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbDelResp.equals(receive)) {
        handler.handle(PbcRiakOperations.this.support.newResponse());
        return true;
      }
      throw new IncomprehensibleProtocolException(name);
    }
  }
);
}",0.9758149316508938
153535,"@Override public void operationComplete(){
  support.complete();
}","@Override public void operationComplete(){
  PbcRiakOperations.this.support.complete();
}",0.8516129032258064
153536,"/** 
 * get server information.
 * @param handler
 * @return
 */
public RiakFuture getServerInfo(final RiakResponseHandler<ServerInfo> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbGetServerInfoReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetServerInfoResp) {
        RpbGetServerInfoResp resp=(RpbGetServerInfoResp)receive;
        ServerInfo info=new ServerInfo(to(resp.getNode()),to(resp.getServerVersion()));
        handler.handle(support.newResponse(info));
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","/** 
 * get server information.
 * @param handler
 * @return
 */
public RiakFuture getServerInfo(final RiakResponseHandler<ServerInfo> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,MessageCodes.RpbGetServerInfoReq,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetServerInfoResp) {
        RpbGetServerInfoResp resp=(RpbGetServerInfoResp)receive;
        ServerInfo info=new ServerInfo(to(resp.getNode()),to(resp.getServerVersion()));
        handler.handle(PbcRiakOperations.this.support.newResponse(info));
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.9696969696969696
153537,"protected RiakFuture getSingle(RpbGetReq.Builder builder,final Location location,final RiakResponseHandler<RiakObject<byte[]>> handler){
  return _get(""String_Node_Str"",builder,location,handler,new GetHandler(){
    @Override public void handle(    RpbGetResp resp,    String vclock) throws Exception {
      int size=resp.getContentCount();
      if (1 < size) {
        LOG.warn(Markers.BOUNDARY,Messages.SiblingExists,vclock,size);
      }
      RiakObject<byte[]> ro=convert(location,vclock,resp.getContent(0));
      handler.handle(support.newResponse(ro));
    }
  }
);
}","protected RiakFuture getSingle(RpbGetReq.Builder builder,final Location location,final RiakResponseHandler<RiakObject<byte[]>> handler){
  return _get(""String_Node_Str"",builder,location,handler,new GetHandler(){
    @Override public void handle(    RpbGetResp resp,    String vclock) throws Exception {
      int size=resp.getContentCount();
      if (1 < size) {
        LOG.warn(Markers.BOUNDARY,Messages.SiblingExists,vclock,size);
      }
      RiakObject<byte[]> ro=convert(location,vclock,resp.getContent(0));
      handler.handle(PbcRiakOperations.this.support.newResponse(ro));
    }
  }
);
}",0.9804587935429055
153538,"protected RiakFuture mapReduce(RpbMapRedReq request,final RiakResponseHandler<MapReduceResponse> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbMapRedResp) {
        RpbMapRedResp resp=(RpbMapRedResp)receive;
        MapReduceResponse response=new PbcMapReduceResponse(resp);
        handler.handle(support.newResponse(response));
        return resp.getDone();
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","protected RiakFuture mapReduce(RpbMapRedReq request,final RiakResponseHandler<MapReduceResponse> handler){
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbMapRedResp) {
        RpbMapRedResp resp=(RpbMapRedResp)receive;
        MapReduceResponse response=new PbcMapReduceResponse(resp);
        handler.handle(PbcRiakOperations.this.support.newResponse(response));
        return resp.getDone();
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.9821843532145624
153539,"protected RiakFuture _get(final String name,RpbGetReq.Builder builder,final Location location,final RiakResponseHandler<RiakObject<byte[]>> handler,final GetHandler getHandler){
  RpbGetReq request=builder.setBucket(ByteString.copyFromUtf8(location.getBucket())).setKey(ByteString.copyFromUtf8(location.getKey())).build();
  return handle(name,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetResp) {
        RpbGetResp resp=(RpbGetResp)receive;
        int size=resp.getContentCount();
        if (size < 1) {
          handler.onError(new PbcErrorResponse(null){
            public String getMessage(){
              return String.format(Messages.NoContents,location);
            }
            public int getResponseCode(){
              return 1;
            }
          }
);
        }
 else {
          String vclock=toVclock(resp.getVclock());
          getHandler.handle(resp,vclock);
        }
        return true;
      }
      throw new IncomprehensibleProtocolException(name);
    }
  }
);
}","protected RiakFuture _get(final String name,RpbGetReq.Builder builder,final Location location,final RiakResponseHandler<RiakObject<byte[]>> handler,final GetHandler getHandler){
  RpbGetReq request=builder.setBucket(ByteString.copyFromUtf8(location.getBucket())).setKey(ByteString.copyFromUtf8(location.getKey())).build();
  return handle(name,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof RpbGetResp) {
        RpbGetResp resp=(RpbGetResp)receive;
        int size=resp.getContentCount();
        if (size < 1) {
          handler.onError(new PbcErrorResponse(null){
            @Override public String getMessage(){
              return String.format(Messages.NoContents,location);
            }
            @Override public int getResponseCode(){
              return 1;
            }
          }
);
        }
 else {
          String vclock=toVclock(resp.getVclock());
          getHandler.handle(resp,vclock);
        }
        return true;
      }
      throw new IncomprehensibleProtocolException(name);
    }
  }
);
}",0.9910793933987512
153540,"/** 
 * Set the client id for this connection. A library may want to set the client id if it has a good way to uniquely identify actors across reconnects. This will reduce vector clock bloat.
 * @param id
 * @param handler
 * @return
 * @see <a
	 *      href=""https://github.com/basho/riak_kv/blob/master/src/riak.erl"">riak.erl</a>
 */
public RiakFuture setClientId(String id,final RiakResponseHandler<_> handler){
  byte[] bytes=id.getBytes();
  if (4 < bytes.length) {
    throw new IllegalArgumentException(Messages.IllegalClientId);
  }
  RpbSetClientIdReq request=RpbSetClientIdReq.newBuilder().setClientId(ByteString.copyFromUtf8(id)).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbSetClientIdResp.equals(receive)) {
        handler.handle(support.newResponse());
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","/** 
 * Set the client id for this connection. A library may want to set the client id if it has a good way to uniquely identify actors across reconnects. This will reduce vector clock bloat.
 * @param id
 * @param handler
 * @return
 * @see <a
	 *      href=""https://github.com/basho/riak_kv/blob/master/src/riak.erl"">riak.erl</a>
 */
public RiakFuture setClientId(String id,final RiakResponseHandler<_> handler){
  byte[] bytes=id.getBytes();
  if (4 < bytes.length) {
    throw new IllegalArgumentException(Messages.IllegalClientId);
  }
  RpbSetClientIdReq request=RpbSetClientIdReq.newBuilder().setClientId(ByteString.copyFromUtf8(id)).build();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (MessageCodes.RpbSetClientIdResp.equals(receive)) {
        handler.handle(PbcRiakOperations.this.support.newResponse());
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}",0.97918637653737
153541,"@Test public void testExecute() throws Exception {
  final AtomicBoolean waiter=new AtomicBoolean(false);
  final boolean[] is={false};
  target.execute(new RiakAction<RestRiakOperations>(){
    @Override public void execute(    RestRiakOperations operations){
      operations.ping(new RiakResponseHandler<String>(){
        @Override public void onError(        RiakResponse response) throws RiakException {
          response.operationComplete();
          waiter.compareAndSet(false,true);
        }
        @Override public void handle(        RiakContentsResponse<String> response) throws RiakException {
          try {
            assertEquals(""String_Node_Str"",response.getContents());
            is[0]=true;
          }
  finally {
            response.operationComplete();
            waiter.compareAndSet(false,true);
          }
        }
      }
);
    }
  }
);
  wait(waiter,is);
}","@Test public void testExecute() throws Exception {
  final CountDownLatch waiter=new CountDownLatch(1);
  final boolean[] is={false};
  this.target.execute(new RiakAction<RestRiakOperations>(){
    @Override public void execute(    RestRiakOperations operations){
      operations.ping(new RiakResponseHandler<String>(){
        @Override public void onError(        RiakResponse response) throws RiakException {
          response.operationComplete();
          waiter.countDown();
        }
        @Override public void handle(        RiakContentsResponse<String> response) throws RiakException {
          try {
            assertEquals(""String_Node_Str"",response.getContents());
            is[0]=true;
          }
  finally {
            response.operationComplete();
            waiter.countDown();
          }
        }
      }
);
    }
  }
);
  wait(waiter,is);
}",0.8524590163934426
153542,"protected void wait(final AtomicBoolean waiter,final boolean[] is) throws InterruptedException {
  while (waiter.get() == false) {
    Thread.sleep(10);
  }
  assertTrue(is[0]);
}","protected void wait(final CountDownLatch waiter,final boolean[] is) throws InterruptedException {
  waiter.await(3,TimeUnit.SECONDS);
  assertTrue(is[0]);
}",0.746268656716418
153543,"@Override public void onError(RiakResponse response) throws RiakException {
  response.operationComplete();
  waiter.compareAndSet(false,true);
}","@Override public void onError(RiakResponse response) throws RiakException {
  response.operationComplete();
  waiter.countDown();
}",0.9130434782608696
153544,"@Before public void setUp() throws Exception {
  target=new RestRiakClient(DefaultConfig.newConfig(Hosts.RIAK_HOST,Hosts.RIAK_HTTP_PORT));
}","@Before public void setUp() throws Exception {
  this.target=new RestRiakClient(DefaultConfig.newConfig(Hosts.RIAK_HOST,Hosts.RIAK_HTTP_PORT));
}",0.9824561403508772
153545,"@Override public void handle(RiakContentsResponse<String> response) throws RiakException {
  try {
    assertEquals(""String_Node_Str"",response.getContents());
    is[0]=true;
  }
  finally {
    response.operationComplete();
    waiter.compareAndSet(false,true);
  }
}","@Override public void handle(RiakContentsResponse<String> response) throws RiakException {
  try {
    assertEquals(""String_Node_Str"",response.getContents());
    is[0]=true;
  }
  finally {
    response.operationComplete();
    waiter.countDown();
  }
}",0.942528735632184
153546,"@Override public void execute(RestRiakOperations operations){
  operations.ping(new RiakResponseHandler<String>(){
    @Override public void onError(    RiakResponse response) throws RiakException {
      response.operationComplete();
      waiter.compareAndSet(false,true);
    }
    @Override public void handle(    RiakContentsResponse<String> response) throws RiakException {
      try {
        assertEquals(""String_Node_Str"",response.getContents());
        is[0]=true;
      }
  finally {
        response.operationComplete();
        waiter.compareAndSet(false,true);
      }
    }
  }
);
}","@Override public void execute(RestRiakOperations operations){
  operations.ping(new RiakResponseHandler<String>(){
    @Override public void onError(    RiakResponse response) throws RiakException {
      response.operationComplete();
      waiter.countDown();
    }
    @Override public void handle(    RiakContentsResponse<String> response) throws RiakException {
      try {
        assertEquals(""String_Node_Str"",response.getContents());
        is[0]=true;
      }
  finally {
        response.operationComplete();
        waiter.countDown();
      }
    }
  }
);
}",0.9486301369863014
153547,"@After public void tearDown(){
  target.dispose();
}","@After public void tearDown(){
  this.target.dispose();
}",0.9541284403669724
153548,"@Override public RiakFuture getStats(final RiakResponseHandler<ObjectNode> handler){
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newGetStatsRequest();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          ObjectNode node=to(response.getContent());
          handler.handle(RestRiakOperations.this.support.newResponse(node));
          return true;
        }
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture getStats(final RiakResponseHandler<ObjectNode> handler){
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newGetStatsRequest();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          ObjectNode node=to(response.getContent());
          handler.handle(RestRiakOperations.this.support.newResponse(node));
          return true;
        }
      }
      return false;
    }
  }
);
}",0.9564068692206076
153549,"@Override public RiakFuture postStream(final RiakObject<InputStreamHandler> content,final RiakResponseHandler<String> handler){
  notNull(content,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newStreamRequest(content,""String_Node_Str"",HttpMethod.POST);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        HttpResponseStatus status=response.getStatus();
        if (HttpResponseStatus.CONTINUE.equals(status)) {
          InputStreamHandler ish=content.getContent();
          RestRiakOperations.this.channel.write(new ChunkedStream(ish.open()));
          return false;
        }
 else         if (HttpResponseStatus.CREATED.equals(status)) {
          String loc=response.getHeader(HttpHeaders.Names.LOCATION);
          if (StringUtil.isEmpty(loc) == false && loc.startsWith(""String_Node_Str"" + RestRiakOperations.this.config.getLuwakName() + ""String_Node_Str"")) {
            final String newKey=loc.substring(7);
            handler.handle(RestRiakOperations.this.support.newResponse(newKey));
            return true;
          }
        }
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture postStream(final RiakObject<InputStreamHandler> content,final RiakResponseHandler<String> handler){
  notNull(content,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newStreamRequest(content,""String_Node_Str"",HttpMethod.POST);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        HttpResponseStatus status=response.getStatus();
        if (HttpResponseStatus.CONTINUE.equals(status)) {
          InputStreamHandler ish=content.getContent();
          RestRiakOperations.this.channel.write(new ChunkedStream(ish.open()));
          return false;
        }
 else         if (HttpResponseStatus.CREATED.equals(status)) {
          String loc=response.getHeader(HttpHeaders.Names.LOCATION);
          if (StringUtil.isEmpty(loc) == false && loc.startsWith(""String_Node_Str"" + RestRiakOperations.this.config.getLuwakName() + ""String_Node_Str"")) {
            final String newKey=loc.substring(7);
            handler.handle(RestRiakOperations.this.support.newResponse(newKey));
            return true;
          }
        }
      }
      return false;
    }
  }
);
}",0.9764621968616264
153550,"@Override public RiakFuture listKeys(String bucket,final RiakResponseHandler<KeyResponse> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newListKeysRequest(bucket);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          boolean done=response.isChunked() == false;
          if (done) {
            _listKeys(response.getContent(),handler);
          }
          return done;
        }
      }
 else       if (receive instanceof HttpChunk) {
        HttpChunk chunk=(HttpChunk)receive;
        boolean done=chunk.isLast();
        if (done == false) {
          _listKeys(chunk.getContent(),handler);
        }
        return done;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture listKeys(String bucket,final RiakResponseHandler<KeyResponse> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newListKeysRequest(bucket);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          boolean done=response.isChunked() == false;
          if (done) {
            _listKeys(response.getContent(),handler);
          }
          return done;
        }
      }
 else       if (receive instanceof HttpChunk) {
        HttpChunk chunk=(HttpChunk)receive;
        boolean done=chunk.isLast();
        if (done == false) {
          _listKeys(chunk.getContent(),handler);
        }
        return done;
      }
      return false;
    }
  }
);
}",0.9692451071761417
153551,"@Override public RiakFuture listBuckets(final RiakResponseHandler<List<String>> handler){
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newListBucketsRequest();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        ChannelBuffer buffer=response.getContent();
        ObjectNode node=to(buffer);
        if (node != null) {
          List<String> list=JsonUtil.to(node.get(""String_Node_Str""));
          handler.handle(RestRiakOperations.this.support.newResponse(list));
          return true;
        }
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture listBuckets(final RiakResponseHandler<List<String>> handler){
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newListBucketsRequest();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        ChannelBuffer buffer=response.getContent();
        ObjectNode node=to(buffer);
        if (node != null) {
          List<String> list=JsonUtil.to(node.get(""String_Node_Str""));
          handler.handle(RestRiakOperations.this.support.newResponse(list));
          return true;
        }
      }
      return false;
    }
  }
);
}",0.960620525059666
153552,"@Override public RiakFuture ping(final RiakResponseHandler<String> handler){
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPingRequest();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          handler.handle(RestRiakOperations.this.support.newResponse(""String_Node_Str""));
          return true;
        }
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture ping(final RiakResponseHandler<String> handler){
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPingRequest();
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          handler.handle(RestRiakOperations.this.support.newResponse(""String_Node_Str""));
          return true;
        }
      }
      return false;
    }
  }
);
}",0.9531914893617022
153553,"@Override public RiakFuture putStream(final RiakObject<InputStreamHandler> content,final RiakResponseHandler<_> handler){
  notNull(content,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newStreamRequest(content,content.getLocation().getKey(),HttpMethod.PUT);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        HttpResponseStatus status=response.getStatus();
        if (HttpResponseStatus.CONTINUE.equals(status)) {
          InputStreamHandler ish=content.getContent();
          RestRiakOperations.this.channel.write(new ChunkedStream(ish.open()));
          return false;
        }
 else         if (NettyUtil.isSuccessful(status)) {
          handler.handle(RestRiakOperations.this.support.newResponse());
        }
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture putStream(final RiakObject<InputStreamHandler> content,final RiakResponseHandler<_> handler){
  notNull(content,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newStreamRequest(content,content.getLocation().getKey(),HttpMethod.PUT);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        HttpResponseStatus status=response.getStatus();
        if (HttpResponseStatus.CONTINUE.equals(status)) {
          InputStreamHandler ish=content.getContent();
          RestRiakOperations.this.channel.write(new ChunkedStream(ish.open()));
          return false;
        }
 else         if (NettyUtil.isSuccessful(status)) {
          handler.handle(RestRiakOperations.this.support.newResponse());
          return true;
        }
      }
      return false;
    }
  }
);
}",0.9591555759522716
153554,"/** 
 * if returning body has sibling then call get with sibling call automatically.
 */
@Override public RiakFuture put(final RiakObject<byte[]> content,final PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPutRequest(content,options);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          try {
            handler.begin();
            RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(response,response.getContent(),content.getLocation());
            handler.handle(RestRiakOperations.this.support.newResponse(ro));
          }
  finally {
            handler.end(RestRiakOperations.this.support.newResponse());
          }
        }
 else         if (response.getStatus().getCode() == 300) {
          dispatchToGetSibling(content.getLocation(),options,handler);
        }
        return true;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","/** 
 * if returning body has sibling then call get with sibling call automatically.
 */
@Override public RiakFuture put(final RiakObject<byte[]> content,final PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPutRequest(content,options);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          try {
            handler.begin();
            RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(response,response.getContent(),content.getLocation());
            handler.handle(RestRiakOperations.this.support.newResponse(ro));
          }
  finally {
            handler.end(RestRiakOperations.this.support.newResponse());
          }
        }
 else         if (response.getStatus().getCode() == 300) {
          dispatchToGetSibling(content.getLocation(),options,handler);
        }
        return true;
      }
      return false;
    }
  }
);
}",0.9752808988764043
153555,"private RiakFuture _post(final String procedure,RiakObject<byte[]> content,final RiakResponseHandler<RiakObject<byte[]>> handler,HttpRequest request){
  final RiakObject<byte[]> copied=new DefaultRiakObject(content);
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          Location location=to(response);
          if (location != null) {
            copied.setLocation(location);
            handler.handle(RestRiakOperations.this.support.newResponse(copied));
            return true;
          }
        }
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","private RiakFuture _post(final String procedure,RiakObject<byte[]> content,final RiakResponseHandler<RiakObject<byte[]>> handler,HttpRequest request){
  final RiakObject<byte[]> copied=new DefaultRiakObject(content);
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          Location location=to(response);
          if (location != null) {
            copied.setLocation(location);
            handler.handle(RestRiakOperations.this.support.newResponse(copied));
            return true;
          }
        }
      }
      return false;
    }
  }
);
}",0.9603841536614646
153556,"@Override public RiakFuture getBucket(String bucket,final RiakResponseHandler<Bucket> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newGetBucketRequest(bucket);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          ObjectMapper objectMapper=new ObjectMapper();
          BucketHolder holder=objectMapper.readValue(new ChannelBufferInputStream(response.getContent()),BucketHolder.class);
          handler.handle(RestRiakOperations.this.support.newResponse(holder.props));
          return true;
        }
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture getBucket(String bucket,final RiakResponseHandler<Bucket> handler){
  notNull(bucket,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newGetBucketRequest(bucket);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          ObjectMapper objectMapper=new ObjectMapper();
          BucketHolder holder=objectMapper.readValue(new ChannelBufferInputStream(response.getContent()),BucketHolder.class);
          handler.handle(RestRiakOperations.this.support.newResponse(holder.props));
          return true;
        }
      }
      return false;
    }
  }
);
}",0.96522655426765
153557,"@Override public RiakFuture post(RiakObject<byte[]> content,PutOptions options,final RiakResponseHandler<RiakObject<byte[]>> handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPostRequest(content,options);
  if (options.getReturnBody() == false) {
    return _post(""String_Node_Str"",content,handler,request);
  }
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.ChunkedMessageAggregator(procedure,new NettyUtil.ChunkedMessageHandler(){
    @Override public void handle(    HttpResponse response,    ChannelBuffer buffer) throws Exception {
      Location location=to(response);
      if (location == null) {
        throw new IncomprehensibleProtocolException(procedure);
      }
      RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(response,buffer,location);
      handler.handle(RestRiakOperations.this.support.newResponse(ro));
    }
  }
));
}","@Override public RiakFuture post(RiakObject<byte[]> content,PutOptions options,final RiakResponseHandler<RiakObject<byte[]>> handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPostRequest(content,options);
  if (options.getReturnBody() == false) {
    return _post(""String_Node_Str"",content,handler,request);
  }
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.ChunkedMessageAggregator(procedure,new NettyUtil.ChunkedMessageHandler(){
    @Override public void handle(    HttpResponse response,    ChannelBuffer buffer) throws Exception {
      Location location=to(response);
      if (location == null) {
        throw new IllegalStateException();
      }
      RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(response,buffer,location);
      handler.handle(RestRiakOperations.this.support.newResponse(ro));
    }
  }
));
}",0.9787654320987654
153558,"@Override public RiakFuture get(final Location location,GetOptions options,final SiblingHandler handler){
  notNull(location,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newGetRequst(location,options);
  request.setHeader(HttpHeaders.Names.ACCEPT,RiakHttpHeaders.MULTI_PART);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    String vclock;
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
        handler.begin();
        return false;
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
        if (done) {
          handler.end(RestRiakOperations.this.support.newResponse());
        }
 else {
          RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
          handler.handle(RestRiakOperations.this.support.newResponse(ro));
        }
        return done;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture get(final Location location,GetOptions options,final SiblingHandler handler){
  notNull(location,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newGetRequst(location,options);
  request.setHeader(HttpHeaders.Names.ACCEPT,RiakHttpHeaders.MULTI_PART);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    String vclock;
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
        handler.begin();
        return false;
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
        if (done) {
          handler.end(RestRiakOperations.this.support.newResponse());
        }
 else {
          RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
          handler.handle(RestRiakOperations.this.support.newResponse(ro));
        }
        return done;
      }
      return false;
    }
  }
);
}",0.9760696156635243
153559,"protected RiakFuture _getStream(final String procedure,HttpRequest request,final StreamResponseHandler handler){
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        boolean done=response.isChunked() == false;
        RiakObject<_> ro=new AbstractRiakObject<_>(){
          @Override public _ getContent(){
            return _._;
          }
        }
;
        RestRiakOperations.this.factory.convertHeaders(response,ro);
        handler.begin(ro);
        if (done) {
          try {
            handler.handle(RestRiakOperations.this.support.newResponse(response.getContent()));
          }
  finally {
            handler.end();
          }
        }
        return done;
      }
 else       if (receive instanceof HttpChunk) {
        HttpChunk chunk=(HttpChunk)receive;
        boolean done=chunk.isLast();
        if (done) {
          handler.end();
        }
 else {
          handler.handle(RestRiakOperations.this.support.newResponse(chunk.getContent()));
        }
        return done;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","protected RiakFuture _getStream(final String procedure,HttpRequest request,final StreamResponseHandler handler){
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        boolean done=response.isChunked() == false;
        RiakObject<_> ro=new AbstractRiakObject<_>(){
          @Override public _ getContent(){
            return _._;
          }
        }
;
        RestRiakOperations.this.factory.convertHeaders(response,ro);
        handler.begin(ro);
        if (done) {
          try {
            handler.handle(RestRiakOperations.this.support.newResponse(response.getContent()));
          }
  finally {
            handler.end();
          }
        }
        return done;
      }
 else       if (receive instanceof HttpChunk) {
        HttpChunk chunk=(HttpChunk)receive;
        boolean done=chunk.isLast();
        if (done) {
          handler.end();
        }
 else {
          handler.handle(RestRiakOperations.this.support.newResponse(chunk.getContent()));
        }
        return done;
      }
      return false;
    }
  }
);
}",0.9738924050632912
153560,"@Override public boolean handle(Object receive) throws Exception {
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    HttpResponseStatus status=response.getStatus();
    if (HttpResponseStatus.CONTINUE.equals(status)) {
      InputStreamHandler ish=content.getContent();
      RestRiakOperations.this.channel.write(new ChunkedStream(ish.open()));
      return false;
    }
 else     if (NettyUtil.isSuccessful(status)) {
      handler.handle(RestRiakOperations.this.support.newResponse());
    }
  }
  throw new IncomprehensibleProtocolException(procedure);
}","@Override public boolean handle(Object receive) throws Exception {
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    HttpResponseStatus status=response.getStatus();
    if (HttpResponseStatus.CONTINUE.equals(status)) {
      InputStreamHandler ish=content.getContent();
      RestRiakOperations.this.channel.write(new ChunkedStream(ish.open()));
      return false;
    }
 else     if (NettyUtil.isSuccessful(status)) {
      handler.handle(RestRiakOperations.this.support.newResponse());
      return true;
    }
  }
  return false;
}",0.9280270956816258
153561,"@Override public RiakFuture walk(Location walkbegin,List<LinkCondition> conditions,final RiakResponseHandler<List<RiakObject<byte[]>>> handler){
  notNull(walkbegin,""String_Node_Str"");
  notNull(conditions,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newWalkRequst(walkbegin,conditions);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        return false;
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        if (done == false) {
          notifyStep(part,handler);
        }
        return done;
      }
      throw new IncomprehensibleProtocolException(procedure);
    }
  }
);
}","@Override public RiakFuture walk(Location walkbegin,List<LinkCondition> conditions,final RiakResponseHandler<List<RiakObject<byte[]>>> handler){
  notNull(walkbegin,""String_Node_Str"");
  notNull(conditions,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newWalkRequst(walkbegin,conditions);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        return false;
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        if (done == false) {
          notifyStep(part,handler);
        }
        return done;
      }
      return false;
    }
  }
);
}",0.9631696428571428
153562,"@Override public boolean handle(Object receive) throws Exception {
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    HttpResponseStatus status=response.getStatus();
    if (NettyUtil.isError(status)) {
      users.onError(new RestErrorResponse(response,support));
      return true;
    }
    if (NettyUtil.isSuccessful(status)) {
      users.handle(support.newResponse());
      return true;
    }
  }
  throw new IncomprehensibleProtocolException(name);
}","@Override public boolean handle(Object receive) throws Exception {
  if (receive instanceof HttpResponse) {
    HttpResponse response=(HttpResponse)receive;
    HttpResponseStatus status=response.getStatus();
    if (NettyUtil.isError(status)) {
      this.users.onError(new RestErrorResponse(response,this.support));
      return true;
    }
    if (NettyUtil.isSuccessful(status)) {
      this.users.handle(this.support.newResponse());
      return true;
    }
  }
  return false;
}",0.917766497461929
153563,boolean cancel();,void cancel();,0.7096774193548387
153564,"boolean await(long timeout,TimeUnit unit) throws InterruptedException ;",void await() throws InterruptedException ;,0.6902654867256637
153565,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  ChannelPipeline pipeline=e.getChannel().getPipeline();
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,n,receive);
    }
    if (handler.handle(receive)) {
      pipeline.remove(name);
      CompletionSupport.this.progress.decrementAndGet();
    }
    e.getFuture().addListener(CompletionSupport.this);
  }
 catch (  Exception ex) {
    pipeline.remove(name);
    throw ex;
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive)) {
      this.future.setSuccess();
      CompletionSupport.this.inProgress.remove(this.name);
      invokeNext();
    }
    e.getFuture().addListener(CompletionSupport.this);
  }
 catch (  Exception ex) {
    LOG.error(ex.getMessage(),ex);
    this.future.setFailure(ex);
    invokeNext();
    throw ex;
  }
}",0.5395996518711923
153566,"@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
    @Override public void operationComplete(){
      complete();
    }
  }
);
  LOG.error(e.getCause().getMessage(),e.getCause());
}","@Override public void exceptionCaught(ChannelHandlerContext ctx,final ExceptionEvent e) throws Exception {
  CompletionSupport.this.inProgress.remove(this.name);
  this.future.setFailure(e.getCause());
  LOG.error(e.getCause().getMessage(),e.getCause());
  this.users.onError(new AbstractRiakResponse(){
    @Override public String getMessage(){
      return e.getCause().getMessage();
    }
    @Override public void operationComplete(){
      complete();
    }
  }
);
  invokeNext();
}",0.3916570104287369
153567,"public <T>RiakFuture handle(final String n,Object send,final RiakResponseHandler<T> users,final NettyUtil.MessageHandler handler){
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.SendTo,n,this.channel.getRemoteAddress());
  }
  int prog=this.progress.incrementAndGet();
  final String name=n + prog;
  ChannelPipeline pipeline=this.channel.getPipeline();
  pipeline.addLast(name,new UpstreamHandler<T>(users){
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      ChannelPipeline pipeline=e.getChannel().getPipeline();
      try {
        Object receive=e.getMessage();
        if (LOG.isDebugEnabled()) {
          LOG.debug(Markers.DETAIL,Messages.Receive,n,receive);
        }
        if (handler.handle(receive)) {
          pipeline.remove(name);
          CompletionSupport.this.progress.decrementAndGet();
        }
        e.getFuture().addListener(CompletionSupport.this);
      }
 catch (      Exception ex) {
        pipeline.remove(name);
        throw ex;
      }
    }
  }
);
  try {
    ChannelFuture cf=this.channel.write(send);
    return new NettyUtil.FutureAdapter(cf);
  }
 catch (  Exception e) {
    pipeline.remove(name);
    complete();
    this.channel.close();
    throw new RiakException(e);
  }
}","public <T>RiakFuture handle(String name,Object send,final RiakResponseHandler<T> users,final NettyUtil.MessageHandler handler){
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.SendTo,name,this.channel.getRemoteAddress());
  }
  ChannelPipeline pipeline=this.channel.getPipeline();
  CountDownRiakFuture future=new CountDownRiakFuture(name,pipeline);
  Command cmd=new Command(this.channel,send,name,new UpstreamHandler<T>(name,users,handler,future));
  try {
    if (this.inProgress.add(cmd.name)) {
      cmd.execute();
    }
 else {
      this.waitQueue.add(cmd);
    }
    return future;
  }
 catch (  Exception e) {
    pipeline.remove(name);
    complete();
    this.channel.close();
    throw new RiakException(e);
  }
}",0.4043499752842313
153568,"public UpstreamHandler(RiakResponseHandler<T> users){
  this.users=users;
}","public UpstreamHandler(String name,RiakResponseHandler<T> users,NettyUtil.MessageHandler handler,CountDownRiakFuture future){
  this.name=name;
  this.users=users;
  this.handler=handler;
  this.future=future;
}",0.4475524475524475
153569,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive)) {
      this.future.setSuccess();
      this.support.remove(this.name);
      this.support.invokeNext();
    }
    e.getFuture().addListener(this.support);
  }
 catch (  Exception ex) {
    setFailure(ex);
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  try {
    Object receive=e.getMessage();
    if (LOG.isDebugEnabled()) {
      LOG.debug(Markers.DETAIL,Messages.Receive,this.name,receive);
    }
    if (this.handler.handle(receive)) {
      this.future.setSuccess();
      this.support.remove(this.name);
      this.support.invokeNext();
    }
    e.getFuture().addListener(this.support);
  }
 catch (  Exception ex) {
    throw ex;
  }
catch (  Error ex) {
    setFailure(ex);
    throw ex;
  }
}",0.9125
153570,"/** 
 * if returning body has sibling then call get with sibling call automatically.
 */
@Override public RiakFuture put(final RiakObject<byte[]> content,final PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPutRequest(content,options);
  final String procedure=""String_Node_Str"";
  return handle(procedure,request,handler,new NettyUtil.MessageHandler(){
    @Override public boolean handle(    Object receive) throws Exception {
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isSuccessful(response.getStatus())) {
          try {
            handler.begin();
            RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(response,response.getContent(),content.getLocation());
            handler.handle(RestRiakOperations.this.support.newResponse(ro));
          }
  finally {
            handler.end(RestRiakOperations.this.support.newResponse());
          }
        }
 else         if (response.getStatus().getCode() == 300) {
          dispatchToGetSibling(content.getLocation(),options,handler);
        }
        return true;
      }
      return false;
    }
  }
);
}","/** 
 * if returning body has sibling then call get with sibling call automatically.
 */
@Override public RiakFuture put(final RiakObject<byte[]> content,final PutOptions options,final SiblingHandler handler){
  notNull(content,""String_Node_Str"");
  notNull(options,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=this.factory.newPutRequest(content,options);
  final String procedure=""String_Node_Str"";
  final CountDownRiakFuture future=this.support.newRiakFuture(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          handler.onError(new RestErrorResponse(response,RestRiakOperations.this.support));
          future.finished();
        }
 else         if (NettyUtil.isSuccessful(response.getStatus())) {
          try {
            handler.begin();
            RiakObject<byte[]> ro=content;
            if (options.getReturnBody()) {
              ro=RestRiakOperations.this.factory.convert(response,response.getContent(),content.getLocation());
            }
            handler.handle(RestRiakOperations.this.support.newResponse(ro));
          }
  finally {
            handler.end(RestRiakOperations.this.support.newResponse());
            RestRiakOperations.this.support.remove(procedure);
          }
          future.setSuccess();
        }
 else         if (response.getStatus().getCode() == 300) {
          RestRiakOperations.this.support.remove(procedure);
          ChannelPipeline pipeline=ctx.getPipeline();
          pipeline.remove(procedure);
          dispatchToGetSibling(content.getLocation(),options,handler,future);
        }
      }
    }
  }
;
  return this.support.handle(procedure,request,handler,internal,future);
}",0.4397163120567376
153571,"protected void dispatchToGetSibling(Location location,final PutOptions options,SiblingHandler handler){
  get(location,new GetOptions(){
    @Override public Quorum getReadQuorum(){
      return options.getReadQuorum();
    }
    @Override public String getIfNoneMatch(){
      return options.getIfNoneMatch();
    }
    @Override public String getIfMatch(){
      return options.getIfMatch();
    }
    @Override public Date getIfModifiedSince(){
      return options.getIfModifiedSince();
    }
  }
,handler);
}","protected void dispatchToGetSibling(final Location location,final PutOptions options,final SiblingHandler handler,final CountDownRiakFuture future){
  LOG.debug(Markers.DETAIL,""String_Node_Str"");
  GetOptions go=new GetOptions(){
    @Override public Quorum getReadQuorum(){
      return options.getReadQuorum();
    }
    @Override public String getIfNoneMatch(){
      return options.getIfNoneMatch();
    }
    @Override public String getIfMatch(){
      return options.getIfMatch();
    }
    @Override public Date getIfModifiedSince(){
      return options.getIfModifiedSince();
    }
  }
;
  HttpRequest request=this.factory.newGetRequst(location,go);
  request.setHeader(HttpHeaders.Names.ACCEPT,RiakHttpHeaders.MULTI_PART);
  final String procedure=""String_Node_Str"";
  future.setName(procedure);
  ChannelHandler internal=new AbstractCompletionChannelHandler<RiakObject<byte[]>>(this.support,procedure,handler,future){
    String vclock;
    @Override public void messageReceived(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      Object receive=e.getMessage();
      if (receive instanceof HttpResponse) {
        HttpResponse response=(HttpResponse)receive;
        if (NettyUtil.isError(response.getStatus())) {
          handler.onError(new RestErrorResponse(response,RestRiakOperations.this.support));
          future.finished();
        }
 else {
          this.vclock=response.getHeader(RiakHttpHeaders.VECTOR_CLOCK);
          handler.begin();
        }
      }
 else       if (receive instanceof PartMessage) {
        PartMessage part=(PartMessage)receive;
        boolean done=part.isLast();
        part.setHeader(RiakHttpHeaders.VECTOR_CLOCK,this.vclock);
        if (done) {
          handler.end(RestRiakOperations.this.support.newResponse());
          future.setSuccess();
        }
 else {
          RiakObject<byte[]> ro=RestRiakOperations.this.factory.convert(part,part.getContent(),location);
          handler.handle(RestRiakOperations.this.support.newResponse(ro));
        }
      }
    }
  }
;
  this.support.handle(procedure,request,handler,internal,future);
}",0.3729586023547284
153572,"public <T>RiakFuture handle(String name,Object send,RiakResponseHandler<T> users,NettyUtil.MessageHandler handler){
  CountDownRiakFuture future=newRiakFuture(name);
  ChannelHandler ch=new UpstreamHandler<T>(name,users,handler,future);
  return handle(name,send,users,ch,future);
}","public <T>RiakFuture handle(String name,Object send,RiakResponseHandler<T> users,ChannelHandler handler,RiakFuture future){
  if (LOG.isDebugEnabled()) {
    LOG.debug(Messages.SendTo,name,this.channel.getRemoteAddress());
  }
  ChannelPipeline pipeline=this.channel.getPipeline();
  Command cmd=new Command(this.channel,send,name,handler);
  try {
    if (this.inProgress.add(cmd.name)) {
      cmd.execute();
    }
 else {
      this.waitQueue.add(cmd);
    }
    return future;
  }
 catch (  Exception e) {
    complete(name,pipeline);
    throw new RiakException(e);
  }
catch (  Error e) {
    complete(name,pipeline);
    throw e;
  }
}",0.2683982683982684
153573,"public CountDownRiakFuture newRiakFuture(String name){
  ChannelPipeline pipeline=this.channel.getPipeline();
  CountDownRiakFuture future=new CountDownRiakFuture(name,pipeline);
  return future;
}","public CountDownRiakFuture newRiakFuture(String name){
  ChannelPipeline pipeline=this.channel.getPipeline();
  return new CountDownRiakFuture(name,pipeline);
}",0.8795518207282913
153574,"protected void finished(){
  LOG.debug(Markers.DETAIL,""String_Node_Str"",this.name);
  this.pipeline.remove(this.name);
  this.latch.countDown();
}","public void finished(){
  LOG.debug(Markers.DETAIL,""String_Node_Str"",this.name);
  this.pipeline.remove(this.name);
  this.latch.countDown();
}",0.9619377162629758
153575,"@Override public RiakFuture getStream(String key,Range range,StreamResponseHandler handler){
  notNull(key,""String_Node_Str"");
  notNull(range,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=buildGetStreamRequest(key);
  request.setHeader(HttpHeaders.Names.RANGE,range.toRangeSpec());
  final String procedure=""String_Node_Str"";
  return _getStream(procedure,request,handler);
}","@Override public RiakFuture getStream(String key,Range range,StreamResponseHandler handler){
  notNull(key,""String_Node_Str"");
  notNull(range,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=buildGetStreamRequest(key);
  request.setHeader(HttpHeaders.Names.RANGE,range.toRangeSpec());
  LOG.debug(Markers.BOUNDARY,request.toString());
  final String procedure=""String_Node_Str"";
  return _getStream(procedure,request,handler);
}",0.942528735632184
153576,"public static Range ranges(final Range... ranges){
  notNull(ranges,""String_Node_Str"");
  if (ranges.length < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder stb=new StringBuilder();
  stb.append(BytesUnit);
  for (int i=0, l=ranges.length; i < l; i++) {
    stb.append(ranges[i].toByteRange());
    if (i + 1 < l) {
      stb.append(',');
    }
  }
  final String s=stb.toString();
  return new Range(null,null){
    @Override public String toString(){
      return s;
    }
  }
;
}","public static Range ranges(final Range... ranges){
  notNull(ranges,""String_Node_Str"");
  if (ranges.length < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder stb=new StringBuilder();
  stb.append(BytesUnit);
  for (int i=0, l=ranges.length; i < l; i++) {
    stb.append(ranges[i].toByteRange());
    if (i + 1 < l) {
      stb.append(',');
    }
  }
  final String s=stb.toString();
  return new Range(null,null){
    @Override public String toRangeSpec(){
      return s;
    }
  }
;
}",0.9855907780979828
153577,"private void readHeaders(ChannelBuffer buffer,DefaultPartMessage message){
  String line=readLine(buffer);
  String name=null;
  String value=null;
  do {
    char firstChar=line.charAt(0);
    if (name != null && (firstChar == ' ' || firstChar == '\t')) {
      value=value + ' ' + line.trim();
    }
 else {
      if (name != null) {
        message.addHeader(name,value);
      }
      String[] header=splitHeader(line);
      name=header[0];
      value=header[1];
    }
    line=readLine(buffer);
  }
 while (line.isEmpty() == false && buffer.readable());
  if (name != null) {
    message.addHeader(name,value);
  }
}","private void readHeaders(ChannelBuffer buffer,DefaultPartMessage message){
  String line=readLine(buffer);
  String name=null;
  String value=null;
  do {
    char firstChar=line.charAt(0);
    if (name != null && (firstChar == ' ' || firstChar == '\t')) {
      value=value + ' ' + line.trim();
    }
 else {
      if (name != null) {
        message.addHeader(name,value);
      }
      String[] header=splitHeader(line);
      name=header[0];
      value=header[1];
    }
    line=readLine(buffer);
  }
 while (line.isEmpty() == false && buffer.readable());
  if (name != null) {
    message.addHeader(name,value);
  }
  String rangeHeader=message.getHeader(HttpHeaders.Names.CONTENT_RANGE);
  if (StringUtil.isEmpty(rangeHeader)) {
    state=State.READ_CONTENT;
  }
 else {
    ContentRange cr=parseRange(rangeHeader);
    if (cr == null) {
      state=State.READ_CONTENT;
    }
 else {
      this.contentRange=cr;
      state=State.READ_CHUNKD_CONTENT;
    }
  }
}",0.7826633165829145
153578,"private State readBoundary(ChannelBuffer buffer){
  String line=readLine(buffer);
  if (this.dashBoundary.equals(line)) {
    return State.READ_HEADERS;
  }
 else   if (line.equals(this.closeBoundary)) {
    return State.EPILOGUE;
  }
  throw new UnknownBoundaryException(line);
}","private State readBoundary(ChannelBuffer buffer){
  String line=readLine(buffer);
  if (this.dashBoundary.equals(line)) {
    return State.READ_HEADERS;
  }
 else   if (line.equals(this.closeBoundary)) {
    return State.EPILOGUE;
  }
  LOG.debug(Markers.DETAIL,line);
  LOG.debug(Markers.DETAIL,this.dashBoundary);
  throw new UnknownBoundaryException(line);
}",0.8736349453978159
153579,"public PartMessage parse(ChannelBuffer buffer){
  DefaultPartMessage multipart=new DefaultPartMessage();
  State state=State.SKIP_CONTROL_CHARS;
  for (; ; ) {
switch (state) {
case SKIP_CONTROL_CHARS:
{
        skipControlCharacters(buffer);
        state=State.READ_BOUNDARY;
        break;
      }
case READ_BOUNDARY:
{
      state=readBoundary(buffer);
      break;
    }
case READ_HEADERS:
{
    readHeaders(buffer,multipart);
    state=State.READ_CONTENT;
    break;
  }
case READ_CONTENT:
{
  State[] next=new State[1];
  int length=seekNextBoundary(buffer,next);
  multipart.setContent(buffer.readBytes(length));
  state=next[0];
  return multipart;
}
case EPILOGUE:
{
multipart.setLast(true);
return multipart;
}
default :
{
throw new IllegalStateException(""String_Node_Str"" + state);
}
}
}
}","public PartMessage parse(ChannelBuffer buffer){
  DefaultPartMessage multipart=new DefaultPartMessage();
  for (; ; ) {
switch (state) {
case SKIP_CONTROL_CHARS:
{
        skipControlCharacters(buffer);
        state=State.READ_BOUNDARY;
        break;
      }
case READ_BOUNDARY:
{
      state=readBoundary(buffer);
      break;
    }
case READ_HEADERS:
{
    readHeaders(buffer,multipart);
    break;
  }
case READ_CHUNKD_CONTENT:
{
  return multipart;
}
case READ_CONTENT:
{
int length=seekNextBoundary(buffer);
multipart.setContent(buffer.readBytes(length));
return multipart;
}
case EPILOGUE:
{
multipart.setLast(true);
state=State.SKIP_CONTROL_CHARS;
return multipart;
}
default :
{
throw new IllegalStateException(""String_Node_Str"" + state);
}
}
}
}",0.2170841361592806
153580,"public boolean setUpBoundary(HttpMessage response){
  String b=getBoundary(response);
  if (b != null) {
    this.dashBoundary=""String_Node_Str"" + b;
    this.closeBoundary=this.dashBoundary + ""String_Node_Str"";
    return true;
  }
  return false;
}","public boolean setUpBoundary(HttpMessage response){
  String b=getBoundary(response);
  if (b != null) {
    this.dashBoundary=""String_Node_Str"" + b;
    this.closeBoundary=this.dashBoundary + ""String_Node_Str"";
    state=State.SKIP_CONTROL_CHARS;
    return true;
  }
  return false;
}",0.9328358208955224
153581,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object o=e.getMessage();
  if (o instanceof HttpResponse) {
    this.dashBoundary=null;
    this.closeBoundary=null;
    HttpResponse response=(HttpResponse)o;
    if (response.isChunked()) {
      setUpBoundary(response);
    }
 else     if (setUpBoundary(response)) {
      ChannelBuffer buffer=response.getContent().copy();
      response.setContent(ChannelBuffers.EMPTY_BUFFER);
      Channels.fireMessageReceived(ctx,response,e.getRemoteAddress());
      splitMultipart(ctx,e,buffer);
      return;
    }
  }
 else   if (o instanceof HttpChunk) {
    HttpChunk chunk=(HttpChunk)o;
    if (this.dashBoundary != null) {
      if (chunk.isLast()) {
        clearBoudndary();
      }
 else {
        ChannelBuffer buffer=chunk.getContent();
        splitMultipart(ctx,e,buffer);
      }
      return;
    }
  }
  ctx.sendUpstream(e);
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object o=e.getMessage();
  if (o instanceof HttpResponse) {
    this.dashBoundary=null;
    this.closeBoundary=null;
    HttpResponse response=(HttpResponse)o;
    if (response.isChunked()) {
      setUpBoundary(response);
    }
 else     if (setUpBoundary(response)) {
      ChannelBuffer buffer=response.getContent().copy();
      response.setContent(ChannelBuffers.EMPTY_BUFFER);
      Channels.fireMessageReceived(ctx,response,e.getRemoteAddress());
      splitMultipart(ctx,e,buffer);
      return;
    }
  }
 else   if (o instanceof HttpChunk) {
    HttpChunk chunk=(HttpChunk)o;
    if (this.contentRange != null && State.READ_CHUNKD_CONTENT.equals(state)) {
      if (this.contentRange.pass(chunk.getContent())) {
        ctx.sendUpstream(e);
      }
 else {
        this.contentRange=null;
        this.state=State.SKIP_CONTROL_CHARS;
      }
    }
    if (this.dashBoundary != null) {
      if (chunk.isLast()) {
        clearBoudndary();
      }
 else {
        ChannelBuffer buffer=chunk.getContent();
        if (2 < buffer.readableBytes()) {
          splitMultipart(ctx,e,buffer);
        }
      }
      return;
    }
  }
  ctx.sendUpstream(e);
}",0.8236363636363636
153582,"protected void splitMultipart(ChannelHandlerContext ctx,MessageEvent e,ChannelBuffer buffer){
  while (buffer.readable()) {
    PartMessage msg=parse(buffer);
    Channels.fireMessageReceived(ctx,msg,e.getRemoteAddress());
  }
}","protected void splitMultipart(ChannelHandlerContext ctx,MessageEvent e,ChannelBuffer buffer){
  while (buffer.readable()) {
    PartMessage msg=parse(buffer);
    Channels.fireMessageReceived(ctx,msg,e.getRemoteAddress());
    if (State.READ_CHUNKD_CONTENT.equals(state)) {
      break;
    }
  }
}",0.8669201520912547
153583,"private void skipControlCharacters(ChannelBuffer buffer){
  for (; ; ) {
    char c=(char)buffer.readUnsignedByte();
    if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {
      buffer.readerIndex(buffer.readerIndex() - 1);
      break;
    }
  }
}","private void skipControlCharacters(ChannelBuffer buffer){
  while (buffer.readable()) {
    char c=(char)buffer.readUnsignedByte();
    if (Character.isISOControl(c) == false && Character.isWhitespace(c) == false) {
      buffer.readerIndex(buffer.readerIndex() - 1);
      break;
    }
  }
}",0.9041591320072332
153584,"private int seekNextBoundary(ChannelBuffer buffer,State[] next){
  int readerIndex=buffer.readerIndex();
  int length=0;
  String line=""String_Node_Str"";
  while (buffer.readable()) {
    line=readLine(buffer);
    if (line.isEmpty() && buffer.readable() == false) {
      next[0]=State.EPILOGUE;
      break;
    }
 else     if (this.dashBoundary.equals(line)) {
      length-=this.dashBoundary.length();
      length-=4;
      next[0]=State.READ_BOUNDARY;
      break;
    }
 else     if (this.closeBoundary.equals(line)) {
      length-=this.closeBoundary.length();
      length-=4;
      next[0]=State.READ_BOUNDARY;
      break;
    }
  }
  length+=(buffer.readerIndex() - readerIndex);
  buffer.readerIndex(readerIndex);
  return length;
}","private int seekNextBoundary(ChannelBuffer buffer){
  int readerIndex=buffer.readerIndex();
  int length=0;
  String line=""String_Node_Str"";
  while (buffer.readable()) {
    line=readLine(buffer);
    if (line.isEmpty() && buffer.readable() == false) {
      state=State.EPILOGUE;
      break;
    }
 else     if (this.dashBoundary.equals(line)) {
      length-=this.dashBoundary.length();
      length-=4;
      state=State.SKIP_CONTROL_CHARS;
      break;
    }
 else     if (this.closeBoundary.equals(line)) {
      length-=this.closeBoundary.length();
      length-=4;
      state=State.SKIP_CONTROL_CHARS;
      break;
    }
  }
  length+=(buffer.readerIndex() - readerIndex);
  if (LOG.isDebugEnabled()) {
    LOG.debug(Markers.DETAIL,""String_Node_Str"" + length + ""String_Node_Str""+ state);
  }
  buffer.readerIndex(readerIndex);
  return length;
}",0.84875
153585,"@Override public void end() throws Exception {
  System.out.println(""String_Node_Str"");
  out.close();
  is[0]=true;
  waiter.compareAndSet(false,true);
}","@Override public void end() throws Exception {
  out.close();
  is[0]=true;
  waiter.compareAndSet(false,true);
}",0.846441947565543
153586,"@Test public void testLuwak() throws Exception {
  for (int i=0; i < 1; i++) {
    String key=testPostStream();
    try {
      System.out.println(""String_Node_Str"");
      Thread.sleep(150);
      testGetStream(key);
    }
  finally {
      System.err.println(i);
    }
  }
}","@Test public void testLuwak() throws Exception {
  for (int i=0; i < 1; i++) {
    String key=testPostStream();
    try {
      System.out.println(""String_Node_Str"");
      Thread.sleep(150);
      testGetStream(key);
      testGetRangeStream(key);
    }
  finally {
      testDeleteFromLuwak(key);
      System.err.println(i);
    }
  }
}",0.8975609756097561
153587,"protected void wait(final AtomicBoolean waiter,final boolean[] is) throws InterruptedException {
  int counter=0;
  while (waiter.get() == false) {
    Thread.sleep(10);
    if (300 < counter++) {
    }
  }
  assertTrue(is[0]);
}","protected void wait(final AtomicBoolean waiter,final boolean[] is) throws InterruptedException {
  int counter=0;
  while (waiter.get() == false) {
    Thread.sleep(10);
    if (300 < counter++) {
      fail(""String_Node_Str"");
    }
  }
  assertTrue(is[0]);
}",0.9366053169734152
153588,"/** 
 * at the beginning of streaming.
 */
void begin() throws Exception ;","/** 
 * at the beginning of streaming.
 */
void begin(RiakObject<_> headers) throws Exception ;",0.8757396449704142
153589,"@Override public RiakFuture getStream(String key,Range range,StreamResponseHandler handler){
  return null;
}","@Override public RiakFuture getStream(String key,Range range,StreamResponseHandler handler){
  notNull(key,""String_Node_Str"");
  notNull(range,""String_Node_Str"");
  notNull(handler,""String_Node_Str"");
  HttpRequest request=buildGetStreamRequest(key);
  request.setHeader(HttpHeaders.Names.RANGE,range.toRangeSpec());
  final String procedure=""String_Node_Str"";
  return _getStream(procedure,request,handler);
}",0.3776493256262042
153590,"public String testPostStream() throws Exception {
  final AtomicBoolean waiter=new AtomicBoolean(false);
  final boolean[] is={false};
  URL url=getClass().getClassLoader().getResource(LARGEFILE);
  final File file=new File(url.getFile());
  final String[] key=new String[1];
  RiakObject<InputStreamHandler> ro=new AbstractRiakObject<InputStreamHandler>(){
    @Override public InputStreamHandler getContent(){
      return new InputStreamHandler(){
        @Override public InputStream open() throws IOException {
          return new BufferedInputStream(new FileInputStream(file));
        }
        @Override public long getContentLength(){
          return file.length();
        }
      }
;
    }
  }
;
  ro.setContentType(""String_Node_Str"");
  target.postStream(ro,new RiakResponseHandler<String>(){
    @Override public void onError(    RiakResponse response) throws Exception {
      waiter.compareAndSet(false,true);
      fail(response.getMessage());
    }
    @Override public void handle(    RiakContentsResponse<String> response) throws Exception {
      try {
        key[0]=response.getContents();
        assertNotNull(key[0]);
        is[0]=true;
      }
  finally {
        waiter.compareAndSet(false,true);
      }
    }
  }
);
  wait(waiter,is);
  return key[0];
}","public String testPostStream() throws Exception {
  final AtomicBoolean waiter=new AtomicBoolean(false);
  final boolean[] is={false};
  URL url=getClass().getClassLoader().getResource(LARGEFILE);
  final File file=new File(url.getFile());
  final String[] key=new String[1];
  RiakObject<InputStreamHandler> ro=new AbstractRiakObject<InputStreamHandler>(){
    @Override public InputStreamHandler getContent(){
      return new InputStreamHandler(){
        @Override public InputStream open() throws IOException {
          return new BufferedInputStream(new FileInputStream(file));
        }
        @Override public long getContentLength(){
          return file.length();
        }
      }
;
    }
  }
;
  ro.setContentType(""String_Node_Str"");
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  ro.setUserMetadata(map);
  List<Link> links=new ArrayList<Link>();
  links.add(new Link(new Location(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
  ro.setLinks(links);
  target.postStream(ro,new RiakResponseHandler<String>(){
    @Override public void onError(    RiakResponse response) throws Exception {
      waiter.compareAndSet(false,true);
      fail(response.getMessage());
    }
    @Override public void handle(    RiakContentsResponse<String> response) throws Exception {
      try {
        key[0]=response.getContents();
        assertNotNull(key[0]);
        is[0]=true;
      }
  finally {
        waiter.compareAndSet(false,true);
      }
    }
  }
);
  wait(waiter,is);
  return key[0];
}",0.8998599439775911
153591,"public void testGetStream(String key) throws Exception {
  final AtomicBoolean waiter=new AtomicBoolean(false);
  final boolean[] is={false};
  final File download=new File(""String_Node_Str"");
  if (download.exists()) {
    download.delete();
  }
  target.getStream(key,new StreamResponseHandler(){
    FileOutputStream out;
    @Override public void onError(    RiakResponse response) throws Exception {
      waiter.compareAndSet(false,true);
      fail(response.getMessage());
    }
    @Override public void begin() throws Exception {
      out=new FileOutputStream(download);
    }
    @Override public void handle(    RiakContentsResponse<ChannelBuffer> response) throws Exception {
      System.out.println(""String_Node_Str"");
      ChannelBuffer buffer=response.getContents();
      out.write(buffer.array());
      out.flush();
    }
    @Override public void end() throws Exception {
      System.out.println(""String_Node_Str"");
      out.close();
      is[0]=true;
      waiter.compareAndSet(false,true);
    }
  }
);
  wait(waiter,is);
  URL url=getClass().getClassLoader().getResource(LARGEFILE);
  final File file=new File(url.getFile());
  assertEquals(""String_Node_Str"",file.length(),download.length());
}","public void testGetStream(String key) throws Exception {
  final AtomicBoolean waiter=new AtomicBoolean(false);
  final boolean[] is={false};
  final File download=new File(""String_Node_Str"");
  if (download.exists()) {
    download.delete();
  }
  target.getStream(key,new StreamResponseHandler(){
    FileOutputStream out;
    @Override public void onError(    RiakResponse response) throws Exception {
      waiter.compareAndSet(false,true);
      fail(response.getMessage());
    }
    @Override public void begin(    RiakObject<_> header) throws Exception {
      Map<String,String> map=header.getUserMetadata();
      assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
      out=new FileOutputStream(download);
    }
    @Override public void handle(    RiakContentsResponse<ChannelBuffer> response) throws Exception {
      System.out.println(""String_Node_Str"");
      ChannelBuffer buffer=response.getContents();
      out.write(buffer.array());
      out.flush();
    }
    @Override public void end() throws Exception {
      System.out.println(""String_Node_Str"");
      out.close();
      is[0]=true;
      waiter.compareAndSet(false,true);
    }
  }
);
  wait(waiter,is);
  URL url=getClass().getClassLoader().getResource(LARGEFILE);
  final File file=new File(url.getFile());
  assertEquals(""String_Node_Str"",file.length(),download.length());
}",0.9439505218399692
153592,"public void testDeleteAllFromLuwak() throws Exception {
  final AtomicBoolean waiter=new AtomicBoolean(false);
  final boolean[] is={true};
  final List<String> list=new ArrayList<String>();
  target.listKeys(""String_Node_Str"",new RiakResponseHandler<KeyResponse>(){
    @Override public void onError(    RiakResponse response) throws Exception {
      System.err.println(response.getMessage());
      waiter.compareAndSet(false,true);
    }
    @Override public void handle(    RiakContentsResponse<KeyResponse> response) throws Exception {
      KeyResponse keys=response.getContents();
      for (      String s : keys.getKeys()) {
        list.add(s);
      }
      if (keys.getDone()) {
        waiter.compareAndSet(false,true);
      }
    }
  }
);
  wait(waiter,is);
  for (  String s : list) {
    testDeleteFromLuwak(s);
  }
}","@Test public void testDeleteAllFromLuwak() throws Exception {
  final AtomicBoolean waiter=new AtomicBoolean(false);
  final boolean[] is={true};
  final List<String> list=new ArrayList<String>();
  target.listKeys(""String_Node_Str"",new RiakResponseHandler<KeyResponse>(){
    @Override public void onError(    RiakResponse response) throws Exception {
      System.err.println(response.getMessage());
      waiter.compareAndSet(false,true);
    }
    @Override public void handle(    RiakContentsResponse<KeyResponse> response) throws Exception {
      KeyResponse keys=response.getContents();
      for (      String s : keys.getKeys()) {
        list.add(s);
      }
      if (keys.getDone()) {
        waiter.compareAndSet(false,true);
      }
    }
  }
);
  wait(waiter,is);
  for (  String s : list) {
    testDeleteFromLuwak(s);
  }
}",0.9964200477326968
153593,"@Test public void testLuwak() throws Exception {
  for (int i=0; i < 10; i++) {
    String key=testPostStream();
    try {
      System.out.println(""String_Node_Str"");
      Thread.sleep(150);
      testGetStream(key);
    }
  finally {
      testDeleteFromLuwak(key);
      System.err.println(i);
    }
  }
}","@Test public void testLuwak() throws Exception {
  for (int i=0; i < 1; i++) {
    String key=testPostStream();
    try {
      System.out.println(""String_Node_Str"");
      Thread.sleep(150);
      testGetStream(key);
    }
  finally {
      System.err.println(i);
    }
  }
}",0.8273504273504273
153594,"@Override public void begin() throws Exception {
  out=new FileOutputStream(download);
}","@Override public void begin(RiakObject<_> header) throws Exception {
  Map<String,String> map=header.getUserMetadata();
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  out=new FileOutputStream(download);
}",0.5501618122977346
153595,"private void start(){
  try {
    TServerSocket serverTransport=new TServerSocket(10289);
    MaryJane.Processor processor=new MaryJane.Processor(new MaryJaneServerImpl(writer));
    Factory protFactory=new TBinaryProtocol.Factory(true,true);
    TServer server=new TThreadPoolServer(processor,serverTransport,protFactory);
    log.info(""String_Node_Str"");
    server.serve();
  }
 catch (  TTransportException e) {
    e.printStackTrace();
  }
}","private void start(){
  try {
    TServerSocket serverTransport=new TServerSocket(port);
    MaryJane.Processor processor=new MaryJane.Processor(new MaryJaneServerImpl(writer));
    Factory protFactory=new TBinaryProtocol.Factory(true,true);
    TServer server=new TThreadPoolServer(processor,serverTransport,protFactory);
    log.info(""String_Node_Str"" + port);
    server.serve();
  }
 catch (  TTransportException e) {
    e.printStackTrace();
  }
}",0.9821826280623608
153596,"public StreamHandler(String myName,FileUploader myUploader,String myPrefix,boolean compress,File localDir,boolean noBuffer,RemoteLocation myRemoteLocation) throws IOException {
  name=myName;
  uploader=myUploader;
  namePrefix=myPrefix;
  useCompression=compress;
  noMemoryBuffer=noBuffer;
  remoteLocation=myRemoteLocation;
  if (!localDir.exists())   throw new IOException(""String_Node_Str"" + localDir + ""String_Node_Str"");
  localPath=new File(localDir,namePrefix);
  localPath.mkdirs();
  localDataPath=new File(localPath,""String_Node_Str"");
  localDataPath.mkdirs();
  localStagingPath=new File(localPath,""String_Node_Str"");
  localStagingPath.mkdirs();
  newBufferFile();
}","public StreamHandler(String myName,FileUploader myUploader,String myPrefix,boolean compress,File localDir,boolean noBuffer,RemoteLocation myRemoteLocation) throws IOException {
  name=myName;
  uploader=myUploader;
  namePrefix=myPrefix;
  useCompression=compress;
  noMemoryBuffer=noBuffer;
  remoteLocation=myRemoteLocation;
  if (!localDir.exists())   throw new IOException(""String_Node_Str"" + localDir + ""String_Node_Str"");
  localPath=new File(localDir,myName);
  localPath.mkdirs();
  localDataPath=new File(localPath,""String_Node_Str"");
  localDataPath.mkdirs();
  localStagingPath=new File(localPath,""String_Node_Str"");
  localStagingPath.mkdirs();
  newBufferFile();
}",0.9882179675994108
153597,"void stop(){
  if (userCache != null)   userCache.removeAll();
  if (groupCache != null)   groupCache.removeAll();
}","void stop(){
  if (userCache != null) {
    userCache.removeAll();
  }
  if (groupCache != null) {
    groupCache.removeAll();
  }
}",0.935483870967742
153598,"@Override protected Map<String,Principal> getMembersMap(){
  if (mMembers == null) {
    mMembers=new ConcurrentHashMap<String,Principal>(myProvider.getGroupMembers(getGroupname(),isDynamic()));
    preloadedGroups=true;
  }
  return mMembers;
}","@Override protected Set<Principal> getMembersMap(){
  if (mMembers == null) {
    mMembers=new HashSet<Principal>(myProvider.getGroupMembers(getGroupname(),isDynamic()).values());
    preloadedGroups=true;
  }
  return mMembers;
}",0.5936842105263158
153599,"/** 
 * @throws JahiaException This class need to access the Services Registry and the DB PoolService. If any of this services can't be accessed, a JahiaException is thrown.
 * @param siteID The site id
 * @param dynamic
 */
protected JahiaLDAPGroup(int id,String groupname,String groupKey,int siteID,Map<String,Principal> members,Properties properties,boolean dynamic,boolean preloadedGroups,JahiaGroupManagerLDAPProvider provider) throws JahiaException {
  ServicesRegistry registry=ServicesRegistry.getInstance();
  if (registry == null) {
    throw new JahiaException(""String_Node_Str"",""String_Node_Str"",JahiaException.SERVICE_ERROR,JahiaException.CRITICAL_SEVERITY);
  }
  mID=id;
  mGroupname=groupname;
  mGroupKey=""String_Node_Str"" + provider.getKey() + ""String_Node_Str""+ groupKey;
  mSiteID=siteID;
  if (preloadedGroups || members != null && members.size() > 0) {
    mMembers=members != null ? (members instanceof ConcurrentHashMap ? members : new ConcurrentHashMap<String,Principal>(members)) : new ConcurrentHashMap<String,Principal>();
  }
  if (properties != null) {
    mProperties=properties;
  }
  this.dynamic=dynamic;
  this.preloadedGroups=preloadedGroups;
  this.myProvider=provider;
}","/** 
 * @throws JahiaException This class need to access the Services Registry and the DB PoolService. If any of this services can't be accessed, a JahiaException is thrown.
 * @param siteID The site id
 * @param dynamic
 */
protected JahiaLDAPGroup(int id,String groupname,String groupKey,int siteID,Map<String,Principal> members,Properties properties,boolean dynamic,boolean preloadedGroups,JahiaGroupManagerLDAPProvider provider) throws JahiaException {
  ServicesRegistry registry=ServicesRegistry.getInstance();
  if (registry == null) {
    throw new JahiaException(""String_Node_Str"",""String_Node_Str"",JahiaException.SERVICE_ERROR,JahiaException.CRITICAL_SEVERITY);
  }
  mID=id;
  mGroupname=groupname;
  mGroupKey=""String_Node_Str"" + provider.getKey() + ""String_Node_Str""+ groupKey;
  mSiteID=siteID;
  if (preloadedGroups || members != null && members.size() > 0) {
    mMembers=members != null ? new HashSet<Principal>(members.values()) : new HashSet<Principal>();
  }
  if (properties != null) {
    mProperties=properties;
  }
  this.dynamic=dynamic;
  this.preloadedGroups=preloadedGroups;
  this.myProvider=provider;
}",0.952136752136752
153600,"public String toString(){
  StringBuffer output=new StringBuffer(""String_Node_Str"" + mGroupname + ""String_Node_Str"");
  output.append(""String_Node_Str"" + Integer.toString(mID) + ""String_Node_Str"");
  output.append(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") Iterator<String> names=new EnumerationIterator(mProperties.propertyNames());
  String name;
  if (names.hasNext()) {
    output.append(""String_Node_Str"");
    while (names.hasNext()) {
      name=(String)names.next();
      output.append(""String_Node_Str"" + name + ""String_Node_Str""+ (String)mProperties.getProperty(name)+ ""String_Node_Str"");
    }
  }
 else {
    output.append(""String_Node_Str"");
  }
  output.append(""String_Node_Str"");
  if (mMembers != null) {
    if (mMembers.size() > 0) {
      for (      String member : mMembers.keySet()) {
        output.append(member + ""String_Node_Str"");
      }
    }
 else {
      output.append(""String_Node_Str"");
    }
  }
 else {
    output.append(""String_Node_Str"");
  }
  return output.toString();
}","public String toString(){
  StringBuffer output=new StringBuffer(""String_Node_Str"" + mGroupname + ""String_Node_Str"");
  output.append(""String_Node_Str"" + Integer.toString(mID) + ""String_Node_Str"");
  output.append(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") Iterator<String> names=new EnumerationIterator(mProperties.propertyNames());
  String name;
  if (names.hasNext()) {
    output.append(""String_Node_Str"");
    while (names.hasNext()) {
      name=(String)names.next();
      output.append(""String_Node_Str"" + name + ""String_Node_Str""+ (String)mProperties.getProperty(name)+ ""String_Node_Str"");
    }
  }
 else {
    output.append(""String_Node_Str"");
  }
  output.append(""String_Node_Str"");
  if (mMembers != null) {
    if (mMembers.size() > 0) {
      for (      Principal member : mMembers) {
        output.append((member != null ? member.getName() : null) + ""String_Node_Str"");
      }
    }
 else {
      output.append(""String_Node_Str"");
    }
  }
 else {
    output.append(""String_Node_Str"");
  }
  return output.toString();
}",0.971153846153846
153601,"public void updateSlides(String chapterName,Chapter chapter){
  index=0;
  this.chapterName=chapterName;
  this.chapter=chapter;
  slidesPanel.clear();
  for (  Presentable presentable : chapter) {
    slidesPanel.add(presentable.asWidget());
  }
}","public void updateSlides(String chapterName,Chapter chapter){
  index=0;
  this.chapterName=chapterName;
  this.chapter=chapter;
  slidesPanel.clear();
  for (  Presentable presentable : chapter) {
    Widget slideWidget=presentable.asWidget();
    slideWidget.setStyleName(""String_Node_Str"");
    slidesPanel.add(slideWidget);
  }
}",0.7779690189328744
153602,"@Override protected void buildSlides(){
  addSlide(GWT.create(Titre.class));
  addSlide(GWT.create(AQuoi.class));
  addSlide(GWT.create(Fonctionnement.class));
  addSlide(GWT.create(Compilation.class));
  addPresentable(new TropSimple());
  addSlide(FormationGwt.PLAN);
}","@Override protected void buildSlides(){
  addSlide(GWT.create(Titre.class));
  addSlide(GWT.create(AQuoi.class));
  addSlide(GWT.create(Fonctionnement.class));
  addSlide(GWT.create(Compilation.class));
  addPresentable(new TropSimple(GWT.<UiBinder<Widget,CodeSlide>>create(TropSimpleBinder.class)));
  addSlide(FormationGwt.PLAN);
}",0.8973509933774835
153603,"public TropSimple(){
  initWidget(uiBinder.createAndBindUi(this));
  sourceCode.setText(codeSample.getInnerText());
}","public TropSimple(UiBinder<Widget,CodeSlide> uiBinder){
  super(uiBinder);
}",0.4041450777202072
153604,"@Override public View getView(int position,View convertView,ViewGroup parent){
  BluetoothDevice bd=getItem(position);
  LinearLayout row=new LinearLayout(myContext);
  row.setOrientation(LinearLayout.VERTICAL);
  LinearLayout name_and_icon=new LinearLayout(myContext);
  name_and_icon.setOrientation(LinearLayout.HORIZONTAL);
  TextView friendly_name_tv=new TextView(myContext);
  friendly_name_tv.setText(bd.getFriendlyName());
  friendly_name_tv.setTextSize(TypedValue.COMPLEX_UNIT_MM,12f);
  name_and_icon.addView(friendly_name_tv);
  ImageView saved_img=new ImageView(myContext);
  Bitmap orig=BitmapFactory.decodeResource(myContext.getResources(),android.R.drawable.ic_menu_save);
  saved_img.setImageBitmap(Bitmap.createScaledBitmap(orig,(int)((friendly_name_tv.getTextSize() / orig.getHeight()) * orig.getWidth()),(int)friendly_name_tv.getTextSize(),false));
  if (bd.isSaved())   name_and_icon.addView(saved_img);
  ImageView view_img=new ImageView(myContext);
  orig=BitmapFactory.decodeResource(myContext.getResources(),android.R.drawable.ic_menu_view);
  view_img.setImageBitmap(Bitmap.createScaledBitmap(orig,(int)((friendly_name_tv.getTextSize() / orig.getHeight()) * orig.getWidth()),(int)friendly_name_tv.getTextSize(),false));
  if (bd.getSeenRound() > last_seen_round - 1)   name_and_icon.addView(view_img);
  row.addView(name_and_icon);
  TextView addr_tv=new TextView(myContext);
  addr_tv.setText(bd.getAddr());
  addr_tv.setTextSize(TypedValue.COMPLEX_UNIT_MM,6f);
  row.addView(addr_tv);
  return row;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  BluetoothDevice bd=getItem(position);
  LinearLayout row=new LinearLayout(myContext);
  row.setOrientation(LinearLayout.VERTICAL);
  LinearLayout name_and_icon=new LinearLayout(myContext);
  name_and_icon.setOrientation(LinearLayout.HORIZONTAL);
  TextView friendly_name_tv=new TextView(myContext);
  friendly_name_tv.setText(bd.getFriendlyName());
  friendly_name_tv.setTextSize(TypedValue.COMPLEX_UNIT_MM,12f);
  name_and_icon.addView(friendly_name_tv);
  ImageView saved_img=new ImageView(myContext);
  Bitmap orig=BitmapFactory.decodeResource(myContext.getResources(),android.R.drawable.ic_menu_save);
  saved_img.setImageBitmap(Bitmap.createScaledBitmap(orig,(int)((friendly_name_tv.getTextSize() / orig.getHeight()) * orig.getWidth()),(int)friendly_name_tv.getTextSize(),false));
  if (bd.isSaved())   name_and_icon.addView(saved_img);
  ImageView view_img=new ImageView(myContext);
  orig=BitmapFactory.decodeResource(myContext.getResources(),android.R.drawable.ic_menu_view);
  view_img.setImageBitmap(Bitmap.createScaledBitmap(orig,(int)((friendly_name_tv.getTextSize() / orig.getHeight()) * orig.getWidth()),(int)friendly_name_tv.getTextSize(),false));
  if (bd.getSeenRound() > Math.max(last_seen_round - 1,0))   name_and_icon.addView(view_img);
  row.addView(name_and_icon);
  TextView addr_tv=new TextView(myContext);
  addr_tv.setText(bd.getAddr());
  addr_tv.setTextSize(TypedValue.COMPLEX_UNIT_MM,6f);
  row.addView(addr_tv);
  return row;
}",0.9960835509138382
153605,"public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=urlResolverFactory.createURLResolver(request.getPathInfo(),request.getServerName(),request);
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      boolean isWiki=false;
      if (pageNode != null && pageNode.hasProperty(""String_Node_Str"")) {
        NodeIterator iterator=JCRContentUtils.getDescendantNodes((JCRNodeWrapper)pageNode.getProperty(""String_Node_Str"").getNode(),""String_Node_Str"");
        if (iterator.hasNext()) {
          isWiki=true;
        }
      }
      if (pageNode == null || !isWiki) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          String wikiTitle=request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : URLEncoder.encode(newName,""String_Node_Str"");
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(wikiTitle,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}","public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=urlResolverFactory.createURLResolver(request.getPathInfo(),request.getServerName(),request);
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      boolean isWiki=false;
      if (pageNode != null && pageNode.hasProperty(""String_Node_Str"")) {
        String query=""String_Node_Str"" + pageNode.getPropertyAsString(""String_Node_Str"") + ""String_Node_Str"";
        QueryWrapper q=session.getWorkspace().getQueryManager().createQuery(query,Query.JCR_SQL2);
        QueryResultWrapper result=q.execute();
        if (result.getNodes().hasNext() && JCRContentUtils.getDescendantNodes((JCRNodeWrapper)result.getNodes().next(),""String_Node_Str"").hasNext()) {
          isWiki=true;
        }
      }
      if (pageNode == null || !isWiki) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          String wikiTitle=request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : URLEncoder.encode(newName,""String_Node_Str"");
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(wikiTitle,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}",0.9306418219461696
153606,"public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=new URLResolver(request.getPathInfo(),request.getServerName());
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      if (pageNode == null) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}","public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=new URLResolver(request.getPathInfo(),request.getServerName());
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      boolean isWiki=false;
      if (pageNode.hasProperty(""String_Node_Str"")) {
        NodeIterator iterator=JCRContentUtils.getDescendantNodes((JCRNodeWrapper)pageNode.getProperty(""String_Node_Str"").getNode(),""String_Node_Str"");
        if (iterator.hasNext()) {
          isWiki=true;
        }
      }
      if (pageNode == null || !isWiki) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}",0.9322250639386188
153607,"public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=urlResolverFactory.createURLResolver(request.getPathInfo(),request.getServerName(),request);
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      boolean isWiki=false;
      if (pageNode != null && pageNode.hasProperty(""String_Node_Str"")) {
        NodeIterator iterator=JCRContentUtils.getDescendantNodes((JCRNodeWrapper)pageNode.getProperty(""String_Node_Str"").getNode(),""String_Node_Str"");
        if (iterator.hasNext()) {
          isWiki=true;
        }
      }
      if (pageNode == null || !isWiki) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          String wikiTitle=request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : URLEncoder.encode(newName,""String_Node_Str"");
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(wikiTitle,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}","public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=urlResolverFactory.createURLResolver(request.getPathInfo(),request.getServerName(),request);
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      boolean isWiki=false;
      if (pageNode != null && pageNode.hasProperty(""String_Node_Str"")) {
        String query=""String_Node_Str"" + pageNode.getPropertyAsString(""String_Node_Str"") + ""String_Node_Str"";
        QueryWrapper q=session.getWorkspace().getQueryManager().createQuery(query,Query.JCR_SQL2);
        QueryResultWrapper result=q.execute();
        if (result.getNodes().hasNext() && JCRContentUtils.getDescendantNodes((JCRNodeWrapper)result.getNodes().next(),""String_Node_Str"").hasNext()) {
          isWiki=true;
        }
      }
      if (pageNode == null || !isWiki) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          String wikiTitle=request.getParameter(""String_Node_Str"") != null ? request.getParameter(""String_Node_Str"") : URLEncoder.encode(newName,""String_Node_Str"");
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(wikiTitle,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}",0.9306418219461696
153608,"public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=new URLResolver(request.getPathInfo(),request.getServerName());
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      if (pageNode == null) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}","public boolean handle(Throwable e,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  try {
    if (!(e instanceof PathNotFoundException)) {
      return false;
    }
    URLResolver urlResolver=new URLResolver(request.getPathInfo(),request.getServerName());
    JCRNodeWrapper pageNode;
    String parentPath=StringUtils.substringBeforeLast(urlResolver.getPath(),""String_Node_Str"");
    String newName=StringUtils.substringAfterLast(urlResolver.getPath(),""String_Node_Str"");
    newName=StringUtils.substringBefore(newName,""String_Node_Str"");
    JCRSessionWrapper session=JCRSessionFactory.getInstance().getCurrentUserSession(urlResolver.getWorkspace(),urlResolver.getLocale());
    try {
      JCRNodeWrapper parent=session.getNode(parentPath);
      if (parent.isNodeType(""String_Node_Str"")) {
        pageNode=parent;
      }
 else {
        pageNode=JCRContentUtils.getParentOfType(parent,""String_Node_Str"");
      }
      boolean isWiki=false;
      if (pageNode.hasProperty(""String_Node_Str"")) {
        NodeIterator iterator=JCRContentUtils.getDescendantNodes((JCRNodeWrapper)pageNode.getProperty(""String_Node_Str"").getNode(),""String_Node_Str"");
        if (iterator.hasNext()) {
          isWiki=true;
        }
      }
      if (pageNode == null || !isWiki) {
        return false;
      }
      try {
        JCRNodeWrapper node=pageNode.getNode(newName);
        String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ node.getPath();
        link+=""String_Node_Str"";
        response.sendRedirect(link);
      }
 catch (      PathNotFoundException e1) {
        if (null != pageNode) {
          String link=request.getContextPath() + request.getServletPath() + ""String_Node_Str""+ StringUtils.substringBefore(request.getPathInfo().substring(1),""String_Node_Str"")+ ""String_Node_Str""+ urlResolver.getWorkspace()+ ""String_Node_Str""+ urlResolver.getLocale()+ pageNode.getPath();
          link+=""String_Node_Str"" + URLEncoder.encode(newName,""String_Node_Str"");
          response.sendRedirect(link);
          return true;
        }
        logger.debug(""String_Node_Str"",e1);
      }
    }
 catch (    PathNotFoundException e1) {
      return false;
    }
  }
 catch (  Exception e1) {
    logger.error(e1.getMessage(),e1);
  }
  return false;
}",0.9322250639386188
153609,"public Boolean doInJCR(JCRSessionWrapper session) throws RepositoryException {
  workflowService.startProcess(from.getNode(session),""String_Node_Str"",""String_Node_Str"",args);
  return true;
}","public Boolean doInJCR(JCRSessionWrapper session) throws RepositoryException {
  workflowService.startProcess(Arrays.asList(from.getNode(session).getIdentifier()),session,""String_Node_Str"",""String_Node_Str"",args,null);
  return true;
}",0.8967136150234741
153610,"/** 
 * Starts the workflow process for accepting the social connection between two users. 
 * @param fromUserKey the source user key
 * @param toUserKey the target user key
 * @param connectionType the connection type
 * @throws RepositoryException in case of an error
 */
public void requestSocialConnection(String fromUserKey,String toUserKey,String connectionType) throws RepositoryException {
  final JCRUser from=getJCRUserFromUserKey(fromUserKey);
  if (from == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fromUserKey);
  }
  final Map<String,Object> args=new HashMap<String,Object>();
  args.put(""String_Node_Str"",from.getUsername());
  args.put(""String_Node_Str"",fromUserKey);
  args.put(""String_Node_Str"",toUserKey);
  args.put(""String_Node_Str"",connectionType);
  List<WorkflowVariable> values=new ArrayList<WorkflowVariable>(1);
  values.add(new WorkflowVariable(from.getUsername(),1));
  args.put(""String_Node_Str"",values);
  JCRTemplate.getInstance().doExecuteWithSystemSession(from.getUsername(),null,Locale.ENGLISH,new JCRCallback<Boolean>(){
    public Boolean doInJCR(    JCRSessionWrapper session) throws RepositoryException {
      workflowService.startProcess(from.getNode(session),""String_Node_Str"",""String_Node_Str"",args);
      return true;
    }
  }
);
}","/** 
 * Starts the workflow process for accepting the social connection between two users. 
 * @param fromUserKey the source user key
 * @param toUserKey the target user key
 * @param connectionType the connection type
 * @throws RepositoryException in case of an error
 */
public void requestSocialConnection(String fromUserKey,String toUserKey,String connectionType) throws RepositoryException {
  final JCRUser from=getJCRUserFromUserKey(fromUserKey);
  if (from == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fromUserKey);
  }
  final Map<String,Object> args=new HashMap<String,Object>();
  args.put(""String_Node_Str"",from.getUsername());
  args.put(""String_Node_Str"",fromUserKey);
  args.put(""String_Node_Str"",toUserKey);
  args.put(""String_Node_Str"",connectionType);
  List<WorkflowVariable> values=new ArrayList<WorkflowVariable>(1);
  values.add(new WorkflowVariable(from.getUsername(),1));
  args.put(""String_Node_Str"",values);
  JCRTemplate.getInstance().doExecuteWithSystemSession(from.getUsername(),null,Locale.ENGLISH,new JCRCallback<Boolean>(){
    public Boolean doInJCR(    JCRSessionWrapper session) throws RepositoryException {
      workflowService.startProcess(Arrays.asList(from.getNode(session).getIdentifier()),session,""String_Node_Str"",""String_Node_Str"",args,null);
      return true;
    }
  }
);
}",0.9833836858006042
153611,"public void keyPressed(KeyEvent e){
  System.out.println(""String_Node_Str"" + e.getKeyCode());
  System.out.println(e.getModifiersEx());
  System.out.println(e.isShiftDown());
}","public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_0) {
    frame.add(new SamplePanel());
  }
}",0.50814332247557
153612,"public void keyPressed(KeyEvent e){
  p.keyPressed(e);
}","public void keyPressed(KeyEvent e){
  p.keyPressed(e);
  System.out.println(""String_Node_Str"");
}",0.7320261437908496
153613,"public SamplePanel(){
  p=new Player(""String_Node_Str"");
  addKeyListener(new AL());
  setFocusable(true);
  ImageIcon i=new ImageIcon(""String_Node_Str"");
  img=i.getImage();
  time=new Timer(5,this);
  time.start();
}","public SamplePanel(){
  p=new Player(""String_Node_Str"");
  addKeyListener(new AL());
  setFocusable(true);
  setVisible(true);
  ImageIcon i=new ImageIcon(""String_Node_Str"");
  img=i.getImage();
  time=new Timer(5,this);
  time.start();
}",0.956140350877193
153614,"public void move(){
  x+=dx;
}","public void move(){
  x+=dx;
  y+=dy;
}",0.8695652173913043
153615,"public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=-1;
 else   if (key == KeyEvent.VK_RIGHT)   dx=1;
}","public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=-1;
 else   if (key == KeyEvent.VK_RIGHT)   dx=1;
 else   if (key == KeyEvent.VK_UP)   dy=-1;
 else   if (key == KeyEvent.VK_DOWN)   dy=1;
}",0.7700258397932817
153616,"public void keyReleased(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=0;
 else   if (key == KeyEvent.VK_RIGHT)   dx=0;
}","public void keyReleased(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_LEFT)   dx=0;
 else   if (key == KeyEvent.VK_RIGHT)   dx=0;
 else   if (key == KeyEvent.VK_UP)   dy=0;
 else   if (key == KeyEvent.VK_DOWN)   dy=0;
}",0.772020725388601
153617,"public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_0) {
    frame.add(new SamplePanel());
  }
}","public void keyPressed(KeyEvent e){
  int key=e.getKeyCode();
  if (key == KeyEvent.VK_0) {
    SamplePanel sp=new SamplePanel();
    frame.getContentPane().add(sp);
    sp.requestFocusInWindow();
    frame.setVisible(true);
  }
}",0.6149584487534626
153618,"public void actionPerformed(ActionEvent e){
  System.out.println(""String_Node_Str"" + e.getActionCommand());
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int n=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (n == 0) {
      save(game);
      System.exit(0);
    }
 else     if (n == 1)     System.exit(0);
  }
}","public void actionPerformed(ActionEvent e){
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    Object[] options={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int n=JOptionPane.showOptionDialog(frame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    if (n == 0) {
      save(game);
      System.exit(0);
    }
 else     if (n == 1)     System.exit(0);
  }
}",0.9650273224043716
153619,"public void mouseClicked(MouseEvent e){
  System.out.println(""String_Node_Str"" + e.getComponent().getName());
}","public void mouseClicked(MouseEvent e){
}",0.5394736842105263
153620,"public void actionPerformed(ActionEvent e){
  System.out.println(""String_Node_Str"" + e.getActionCommand());
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
      System.out.println(""String_Node_Str"");
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
    game.testInit(""String_Node_Str"",125);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    System.exit(0);
  }
}","public void actionPerformed(ActionEvent e){
  System.out.println(""String_Node_Str"" + e.getActionCommand());
  if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game == null)     return;
    save(game);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    if (game != null) {
      System.out.println(""String_Node_Str"");
    }
    game=load();
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    game=new Game();
    commandMenu.setEnabled(true);
    gameMenuItems[MENU_SAVE].setEnabled(true);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(e.getActionCommand())) {
    System.exit(0);
  }
}",0.8395953757225434
153621,"public Image(int width,int height){
  this(width,height,""String_Node_Str"");
}","/** 
 * create gray image from signed int spread to gray 0-255
 */
public Image(short[][] shortimage){
  Image imgSpreaded=linearSpreadShort(shortimage);
  this.image=imgSpreaded.getImage();
}",0.2899628252788104
153622,"public static int[][] compute(Image image){
}","public static int[][] compute(Image image){
  int w=image.width();
  int h=image.height();
  int[][] imgIntegral=new int[w][h];
  int integral=0;
  int lx, ly, lxy;
  for (int i=0; i < w; i++)   for (int j=0; j < h; j++) {
    lx=i > 0 ? imgIntegral[i - 1][j] : 0;
    ly=j > 0 ? imgIntegral[i][j - 1] : 0;
    lxy=i > 0 && j > 0 ? imgIntegral[i - 1][j - 1] : 0;
    imgIntegral[i][j]=image.getGray(i,j) + lx + ly - lxy;
  }
  return imgIntegral;
}",0.1825557809330628
153623,"public static short[][] max(short[][] image,int windowsize){
  int w=image.width();
  int h=image.height();
  int[][] imgMax=new int[w][h];
  short max;
  short val;
  for (int i=0; i < w; i++)   for (int j=0; j < h; j++) {
    max=Short.MIN_VALUE;
    Neigborhood neigh=new Neighborhood(Point(i,j),windowsize);
    for (    Point p : neigh) {
      val=(i >= 0 && j >= 0 && i < w && j < h) ? image[p.getX()][p.getY()] : Short.MIN_VALUE;
      if (val > max)       max=val;
    }
    imgMax[i][j]=max;
  }
}","public static short[][] max(short[][] image,int windowsize){
  int w=image.length;
  int h=image[0].length;
  short[][] imgMax=new short[w][h];
  short max;
  short val;
  for (int i=0; i < w; i++)   for (int j=0; j < h; j++) {
    max=Short.MIN_VALUE;
    Neighborhood neigh=new Neighborhood(new Point(i,j),windowsize);
    for (    Point p : neigh) {
      val=(i >= 0 && j >= 0 && i < w && j < h) ? image[p.getX()][p.getY()] : Short.MIN_VALUE;
      if (val > max)       max=val;
    }
    imgMax[i][j]=max;
  }
  return imgMax;
}",0.9019230769230768
153624,"public static void main(String[] args){
  Image original=new Image(args[0]);
  Image sobelx=Convolution.sobel(original,0);
  Image sobely=Convolution.sobel(original,1);
  Painter painterOriginal=new Painter(""String_Node_Str"",original);
  Painter painterSobelX=new Painter(""String_Node_Str"",sobelx);
  Painter painterSobelY=new Painter(""String_Node_Str"",sobely);
}","public static void main(String[] args){
  Image original=new Image(args[0]);
  short[][] sobelx=Convolution.sobel(original,0);
  short[][] sobely=Convolution.sobel(original,1);
  Painter painterOriginal=new Painter(""String_Node_Str"",original);
  Painter painterSobelX=new Painter(""String_Node_Str"",new Image(sobelx));
  Painter painterSobelY=new Painter(""String_Node_Str"",new Image(sobely));
}",0.2804232804232804
153625,"public Color(int color){
  this(fromInt(color).channels);
}","public Color(int gray){
  this.channels=new int[3];
  this.channels[0]=gray;
  this.channels[1]=gray;
  this.channels[2]=gray;
}",0.4171122994652406
153626,"static public Color fromInt(int rgb){
  int c1, c2, c3, reminder;
  c1=rgb / 0x00010000;
  reminder=rgb % 0x00010000;
  c2=reminder / 0x00000100;
  reminder=reminder % 0x00000100;
  c3=reminder;
  return new Color(c1,c2,c3);
}","static public Color fromInt(int rgb){
  int red=(rgb >> 16) & 0xFF;
  int green=(rgb >> 8) & 0xFF;
  int blue=rgb & 0xFF;
  return new Color(red,green,blue);
}",0.4519480519480519
153627,"public void sendNotificationToPosters(AddedNodeFact nodeFact,KnowledgeHelper drools) throws RepositoryException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",nodeFact.getPath());
  }
  try {
    boolean spamDetected=false;
    JCRNodeWrapper node=nodeFact.getNode();
    if (node.isNodeType(SPAM_DETECTED_MIXIN)) {
      spamDetected=true;
      logger.info(""String_Node_Str"",node.getPath());
      if (sendSpamNotificationsToAdministrator) {
        logger.info(""String_Node_Str"");
      }
    }
    User user=(User)drools.getWorkingMemory().getGlobal(""String_Node_Str"");
    List<String> emails=new ArrayList<String>();
    if ((spamDetected && sendSpamNotificationsToAdministrator) || (!spamDetected)) {
      String administratorEmail=toAdministratorMail ? SettingsBean.getInstance().getMail_administrator() : email_to;
      emails.add(administratorEmail);
    }
    Locale defaultLocale=null;
    if (node.getExistingLocales() != null && node.getExistingLocales().size() > 0) {
      defaultLocale=node.getExistingLocales().get(0);
    }
    if (defaultLocale == null) {
      defaultLocale=SettingsBean.getInstance().getDefaultLocale();
    }
    Map<String,Object> bindings=new HashMap<String,Object>();
    bindings.put(""String_Node_Str"",node.getParent());
    bindings.put(""String_Node_Str"",node);
    bindings.put(""String_Node_Str"",node.getParent().getParent());
    bindings.put(""String_Node_Str"",user);
    bindings.put(""String_Node_Str"",new DateTool());
    bindings.put(""String_Node_Str"",new EscapeTool());
    bindings.put(""String_Node_Str"",Calendar.getInstance());
    bindings.put(""String_Node_Str"",defaultLocale);
    bindings.put(""String_Node_Str"",spamDetected);
    bindings.put(""String_Node_Str"",forumHostUrlPart + Jahia.getContextPath() + node.getParent().getUrl());
    Map<String,Locale> preferredLocales=new HashMap<String,Locale>();
    if (sendNotificationsToContributors && !spamDetected) {
      List<JCRNodeWrapper> postList=JCRContentUtils.getChildrenOfType(node.getParent(),""String_Node_Str"");
      Iterator<JCRNodeWrapper> postIterator=postList.iterator();
      JahiaUserManagerService userManager=ServicesRegistry.getInstance().getJahiaUserManagerService();
      String currentUser=user.getName();
      while (postIterator.hasNext()) {
        JCRNodeWrapper post=postIterator.next();
        String creator=post.getCreationUser();
        String email=null;
        if (creator != null) {
          JahiaUser jahiaUser=userManager.lookupUser(creator);
          if (user != null && !(creator).equals(currentUser)) {
            boolean emailNotificationsDisabled=""String_Node_Str"".equals(jahiaUser.getProperty(""String_Node_Str""));
            if (!emailNotificationsDisabled) {
              email=jahiaUser.getProperty(""String_Node_Str"");
              if (email != null && !emails.contains(email) && email.length() > 5) {
                emails.add(email);
                if (getPreferredLocale(jahiaUser) != null) {
                  preferredLocales.put(email,getPreferredLocale(jahiaUser));
                }
              }
            }
          }
        }
      }
    }
    if (emails.size() > 0) {
      Iterator<String> emailIterator=emails.iterator();
      while (emailIterator.hasNext()) {
        String destinationEmail=emailIterator.next();
        try {
          Locale userLocale=defaultLocale;
          if (preferredLocales.containsKey(destinationEmail)) {
            userLocale=preferredLocales.get(destinationEmail);
          }
          mailService.sendMessageWithTemplate(templatePath,bindings,destinationEmail,email_from,""String_Node_Str"",""String_Node_Str"",userLocale,""String_Node_Str"");
          logger.info(""String_Node_Str"" + destinationEmail + ""String_Node_Str""+ userLocale);
        }
 catch (        Exception e) {
          logger.info(""String_Node_Str"",e);
        }
      }
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + nodeFact.getPath() + ""String_Node_Str""+ e.getMessage(),e);
  }
}","public void sendNotificationToPosters(AddedNodeFact nodeFact,KnowledgeHelper drools) throws RepositoryException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",nodeFact.getPath());
  }
  try {
    boolean spamDetected=false;
    JCRNodeWrapper node=nodeFact.getNode();
    if (node.isNodeType(SPAM_DETECTED_MIXIN)) {
      spamDetected=true;
      logger.info(""String_Node_Str"",node.getPath());
      if (sendSpamNotificationsToAdministrator) {
        logger.info(""String_Node_Str"");
      }
    }
    User user=(User)drools.getWorkingMemory().getGlobal(""String_Node_Str"");
    List<String> emails=new ArrayList<String>();
    if ((spamDetected && sendSpamNotificationsToAdministrator) || (!spamDetected)) {
      String administratorEmail=toAdministratorMail ? SettingsBean.getInstance().getMail_administrator() : email_to;
      emails.add(administratorEmail);
    }
    Locale defaultLocale=null;
    if (node.getExistingLocales() != null && node.getExistingLocales().size() > 0) {
      defaultLocale=node.getExistingLocales().get(0);
    }
    if (defaultLocale == null) {
      defaultLocale=SettingsBean.getInstance().getDefaultLocale();
    }
    Map<String,Object> bindings=new HashMap<String,Object>();
    bindings.put(""String_Node_Str"",node.getParent());
    bindings.put(""String_Node_Str"",node);
    bindings.put(""String_Node_Str"",node.getParent().getParent());
    bindings.put(""String_Node_Str"",user);
    bindings.put(""String_Node_Str"",new DateTool());
    bindings.put(""String_Node_Str"",new EscapeTool());
    bindings.put(""String_Node_Str"",Calendar.getInstance());
    bindings.put(""String_Node_Str"",spamDetected);
    bindings.put(""String_Node_Str"",forumHostUrlPart + Jahia.getContextPath() + node.getParent().getUrl());
    Map<String,Locale> preferredLocales=new HashMap<String,Locale>();
    if (sendNotificationsToContributors && !spamDetected) {
      List<JCRNodeWrapper> postList=JCRContentUtils.getChildrenOfType(node.getParent(),""String_Node_Str"");
      Iterator<JCRNodeWrapper> postIterator=postList.iterator();
      JahiaUserManagerService userManager=ServicesRegistry.getInstance().getJahiaUserManagerService();
      String currentUser=user.getName();
      while (postIterator.hasNext()) {
        JCRNodeWrapper post=postIterator.next();
        String creator=post.getCreationUser();
        String email=null;
        if (creator != null) {
          JahiaUser jahiaUser=userManager.lookupUser(creator);
          if (user != null && !(creator).equals(currentUser)) {
            boolean emailNotificationsDisabled=""String_Node_Str"".equals(jahiaUser.getProperty(""String_Node_Str""));
            if (!emailNotificationsDisabled) {
              email=jahiaUser.getProperty(""String_Node_Str"");
              if (email != null && !emails.contains(email) && email.length() > 5) {
                emails.add(email);
                if (getPreferredLocale(jahiaUser) != null) {
                  preferredLocales.put(email,getPreferredLocale(jahiaUser));
                }
              }
            }
          }
        }
      }
    }
    if (emails.size() > 0) {
      Iterator<String> emailIterator=emails.iterator();
      while (emailIterator.hasNext()) {
        String destinationEmail=emailIterator.next();
        try {
          Locale userLocale=defaultLocale;
          if (preferredLocales.containsKey(destinationEmail)) {
            userLocale=preferredLocales.get(destinationEmail);
          }
          bindings.put(""String_Node_Str"",userLocale);
          mailService.sendMessageWithTemplate(templatePath,bindings,destinationEmail,email_from,""String_Node_Str"",""String_Node_Str"",userLocale,""String_Node_Str"");
          logger.info(""String_Node_Str"" + destinationEmail + ""String_Node_Str""+ userLocale);
        }
 catch (        Exception e) {
          logger.info(""String_Node_Str"",e);
        }
      }
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + nodeFact.getPath() + ""String_Node_Str""+ e.getMessage(),e);
  }
}",0.9869256630556592
153628,"public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.isNodeType(""String_Node_Str"")) {
    node.checkout();
    node.addMixin(""String_Node_Str"");
    jcrSessionWrapper.save();
    logger.info(""String_Node_Str"" + node.getPath());
  }
  long topicnbOfViews=node.getProperty(""String_Node_Str"").getLong();
  node.setProperty(""String_Node_Str"",++topicnbOfViews);
  logger.info(""String_Node_Str"" + node.getPath() + ""String_Node_Str""+ topicnbOfViews);
  jcrSessionWrapper.save();
  return new ActionResult(HttpServletResponse.SC_OK,node.getPath(),Render.serializeNodeToJSON(node));
}","public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.isNodeType(""String_Node_Str"")) {
    node.checkout();
    node.addMixin(""String_Node_Str"");
    node.getRealNode().getSession().save();
    logger.info(""String_Node_Str"" + node.getPath());
  }
  long topicnbOfViews=node.getProperty(""String_Node_Str"").getLong();
  node.setProperty(""String_Node_Str"",++topicnbOfViews);
  logger.info(""String_Node_Str"" + node.getPath() + ""String_Node_Str""+ topicnbOfViews);
  node.getRealNode().getSession().save();
  return new ActionResult(HttpServletResponse.SC_OK,node.getPath(),Render.serializeNodeToJSON(node));
}",0.9445727482678984
153629,"public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.isNodeType(""String_Node_Str"")) {
    node.checkout();
    node.addMixin(""String_Node_Str"");
    node.getRealNode().getSession().save();
    logger.info(""String_Node_Str"" + node.getPath());
  }
  long topicnbOfViews=node.getProperty(""String_Node_Str"").getLong();
  node.setProperty(""String_Node_Str"",++topicnbOfViews);
  logger.info(""String_Node_Str"" + node.getPath() + ""String_Node_Str""+ topicnbOfViews);
  node.getRealNode().getSession().save();
  return new ActionResult(HttpServletResponse.SC_OK,node.getPath(),Render.serializeNodeToJSON(node));
}","public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.isNodeType(""String_Node_Str"")) {
    node.checkout();
    node.addMixin(""String_Node_Str"");
    jcrSessionWrapper.save();
    logger.info(""String_Node_Str"" + node.getPath());
  }
  long topicnbOfViews=node.getProperty(""String_Node_Str"").getLong();
  node.setProperty(""String_Node_Str"",++topicnbOfViews);
  logger.info(""String_Node_Str"" + node.getPath() + ""String_Node_Str""+ topicnbOfViews);
  jcrSessionWrapper.save();
  return new ActionResult(HttpServletResponse.SC_OK,node.getPath(),Render.serializeNodeToJSON(node));
}",0.9445727482678984
153630,"@Override public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.isNodeType(""String_Node_Str"")) {
    String topicTitle=parameters.get(""String_Node_Str"").get(0);
    node.checkout();
    node=node.addNode(JCRContentUtils.generateNodeName(topicTitle,32),""String_Node_Str"");
    node.setProperty(""String_Node_Str"",topicTitle);
  }
  JCRNodeWrapper newNode=createNode(req,parameters,jcrSessionWrapper.getNode(node.getPath()),""String_Node_Str"",""String_Node_Str"");
  if (!session.getUser().getUsername().equals(Constants.GUEST_USERNAME)) {
    List<String> roles=Arrays.asList(""String_Node_Str"");
    newNode.grantRoles(""String_Node_Str"" + session.getUser().getUsername(),new HashSet<String>(roles));
  }
  jcrSessionWrapper.save();
  parameters.remove(Render.REDIRECT_TO);
  return new ActionResult(HttpServletResponse.SC_OK,node.getPath(),Render.serializeNodeToJSON(newNode));
}","@Override public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.isNodeType(""String_Node_Str"")) {
    String topicTitle=parameters.get(""String_Node_Str"").get(0);
    node.checkout();
    node=node.addNode(JCRContentUtils.generateNodeName(topicTitle,32),""String_Node_Str"");
    node.setProperty(""String_Node_Str"",topicTitle);
  }
  JCRNodeWrapper newNode=createNode(req,parameters,jcrSessionWrapper.getNode(node.getPath()),""String_Node_Str"",""String_Node_Str"",false);
  if (!session.getUser().getUsername().equals(Constants.GUEST_USERNAME)) {
    List<String> roles=Arrays.asList(""String_Node_Str"");
    newNode.grantRoles(""String_Node_Str"" + session.getUser().getUsername(),new HashSet<String>(roles));
  }
  jcrSessionWrapper.save();
  parameters.remove(Render.REDIRECT_TO);
  return new ActionResult(HttpServletResponse.SC_OK,node.getPath(),Render.serializeNodeToJSON(newNode));
}",0.997398091934085
153631,"/** 
 * Parses an assign or a function call
 * @param getContext Flag to indicate that we need a return value.
 */
private void parseVarsAndFuncs(final boolean getContext){
  boolean first=true, stackCall=false, end=false, oop=false, append=false;
  Variable var;
  if (this.tokenizer.token == Token.RESERVED && this.tokenizer.reserved == ReservedWord.THIS) {
    final Scope s=this.scope.findFunctionScope();
    if (s == null || !s.isOop) {
      throw new WeelException(this.tokenizer.error(""String_Node_Str""));
    }
    var=new Variable();
    var.type=Type.LOCAL;
    var.index=0;
  }
 else   if (this.tokenizer.token == Token.DOUBLE_COLON) {
    var=new Variable();
  }
 else {
    var=this.scope.findVariable(new Variable(),this.tokenizer.string);
  }
  ExpressionType expr=var.type != Type.NONE ? ExpressionType.VARIABLE : ExpressionType.NONE;
  if (this.tokenizer.token != Token.DOUBLE_COLON)   this.tokenizer.next();
  while (!end) {
switch (this.tokenizer.token) {
case DOUBLE_COLON:
{
        int paramc=0;
        this.tokenizer.next();
        this.checkToken(Token.NAME);
        final String name=this.tokenizer.string;
        if (expr == ExpressionType.ARRAY) {
          this.block.callRuntime(""String_Node_Str"");
        }
 else         if (first && expr == ExpressionType.VARIABLE) {
          this.needGetVariable(var);
          this.writeGetVariable(var);
        }
 else         if (first && var.function != null) {
          this.writeGetVariable(var);
        }
 else         if (expr != ExpressionType.FUNCTION) {
          this.syntaxError();
        }
        this.tokenizer.next();
        this.checkToken(Token.BRACE_OPEN);
        this.tokenizer.next();
        while (this.tokenizer.token != Token.BRACE_CLOSE) {
          paramc++;
          this.parseExpression();
          if (this.tokenizer.token == Token.BRACE_CLOSE) {
            break;
          }
          if (this.tokenizer.token == Token.COMMA) {
            this.tokenizer.next();
            continue;
          }
          this.syntaxError();
        }
        this.checkToken(Token.BRACE_CLOSE);
        this.tokenizer.next();
        this.block.writeSpecialCall(name,paramc,getContext || this.wouldNeedReturnValue());
        oop=first=false;
        expr=ExpressionType.FUNCTION;
        break;
      }
case BRACE_OPEN:
{
      int paramc=0;
      final boolean isAssert;
      this.tokenizer.next();
      if (first) {
        isAssert=var.name.equals(""String_Node_Str"");
        if (!isAssert && !var.isFunction()) {
          this.needGetVariable(var,true);
          this.writeGetVariable(var);
          stackCall=true;
        }
      }
 else {
        if (expr == ExpressionType.ARRAY) {
          if (oop) {
            this.block.callRuntime(""String_Node_Str"");
            paramc++;
          }
 else {
            this.block.callRuntime(""String_Node_Str"");
          }
          stackCall=true;
        }
        isAssert=false;
      }
      if (isAssert) {
        this.parseAssert();
        return;
      }
      while (this.tokenizer.token != Token.BRACE_CLOSE) {
        paramc++;
        this.parseExpression();
        if (this.tokenizer.token == Token.BRACE_CLOSE) {
          break;
        }
        if (this.tokenizer.token == Token.COMMA) {
          this.tokenizer.next();
          continue;
        }
        this.syntaxError();
      }
      this.checkToken(Token.BRACE_CLOSE);
      this.tokenizer.next();
      if (first && !stackCall) {
        WeelFunction func=this.weel.findFunction(var.name,paramc);
        if (func == null) {
          throw new WeelException(this.tokenizer.error(""String_Node_Str"" + var.name + ""String_Node_Str""+ paramc+ ""String_Node_Str""));
        }
        this.writeCallFunction(func);
        if (getContext || this.wouldNeedReturnValue()) {
          if (!func.returnsValue) {
            throw new WeelException(this.tokenizer.error(""String_Node_Str"" + func.name + ""String_Node_Str""+ func.arguments+ ""String_Node_Str""));
          }
        }
 else {
          if (func.returnsValue) {
            this.block.callRuntime(""String_Node_Str"");
          }
        }
      }
 else {
        this.block.doStackcall(paramc,getContext | this.wouldNeedReturnValue());
      }
      oop=first=false;
      expr=ExpressionType.FUNCTION;
      break;
    }
case ARROW:
  if (first) {
    this.needGetVariable(var);
    this.writeGetVariable(var);
  }
 else {
    if (expr == ExpressionType.ARRAY)     this.block.callRuntime(""String_Node_Str"");
  }
this.tokenizer.next();
this.checkToken(Token.NAME);
this.block.load(this.tokenizer.string);
this.tokenizer.next();
oop=true;
first=false;
expr=ExpressionType.ARRAY;
break;
case DOT:
if (first) {
this.needGetVariable(var);
this.writeGetVariable(var);
}
 else {
if (expr == ExpressionType.ARRAY) this.block.callRuntime(""String_Node_Str"");
}
this.tokenizer.next();
this.checkToken(Token.NAME);
this.block.load(this.tokenizer.string);
this.tokenizer.next();
oop=first=false;
expr=ExpressionType.ARRAY;
break;
case BRACKET_OPEN:
if (first) {
this.needGetVariable(var);
this.writeGetVariable(var);
}
 else {
if (expr == ExpressionType.ARRAY) this.block.callRuntime(""String_Node_Str"");
}
this.tokenizer.next();
if (!getContext && this.tokenizer.token == Token.BRACKET_CLOSE) {
this.tokenizer.next();
if (this.tokenizer.token != Token.ASSIGN) this.syntaxError();
append=true;
}
 else {
this.parseExpression();
this.checkToken(Token.BRACKET_CLOSE);
this.tokenizer.next();
}
oop=first=false;
expr=ExpressionType.ARRAY;
break;
case ASSIGN_ADD:
case ASSIGN_DIV:
case ASSIGN_AND:
case ASSIGN_MODULO:
case ASSIGN_MUL:
case ASSIGN_OR:
case ASSIGN_SUB:
case ASSIGN_XOR:
case ASSIGN_STRCAT:
if (first) {
this.needGetVariable(var);
expr=ExpressionType.VARIABLE;
}
end=true;
break;
case ASSIGN:
if (first) {
this.needSetVariable(var);
expr=ExpressionType.VARIABLE;
}
end=true;
break;
default :
if (!getContext && first && var.type == Type.NONE) {
this.syntaxError();
}
 else if (getContext && first) {
if (!var.isFunction()) this.needGetVariable(var);
expr=ExpressionType.VARIABLE;
}
end=true;
break;
}
}
switch (this.tokenizer.token) {
case ASSIGN_ADD:
case ASSIGN_DIV:
case ASSIGN_AND:
case ASSIGN_MODULO:
case ASSIGN_MUL:
case ASSIGN_OR:
case ASSIGN_SUB:
case ASSIGN_XOR:
case ASSIGN_STRCAT:
{
final Token op=this.tokenizer.token;
if (first && expr != ExpressionType.ARRAY && var.type == Type.NONE) this.syntaxError();
if (expr == ExpressionType.ARRAY) {
this.block.callRuntime(""String_Node_Str"");
this.block.callRuntime(""String_Node_Str"");
}
 else {
this.writeGetVariable(var);
}
this.tokenizer.next();
this.parseExpression();
switch (op) {
case ASSIGN_ADD:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_DIV:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_AND:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_MODULO:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_MUL:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_OR:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_SUB:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_XOR:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_STRCAT:
this.block.callRuntime(""String_Node_Str"");
break;
default :
break;
}
if (expr == ExpressionType.ARRAY) {
if (getContext) this.block.callRuntime(""String_Node_Str"");
this.block.callRuntime(""String_Node_Str"");
}
 else {
if (getContext) this.block.callRuntime(""String_Node_Str"");
this.writeSetVariable(var);
}
break;
}
case ASSIGN:
this.tokenizer.next();
this.parseExpression();
if (expr == ExpressionType.ARRAY) {
if (getContext) this.block.callRuntime(""String_Node_Str"");
if (append) this.block.callRuntime(""String_Node_Str"");
 else this.block.callRuntime(""String_Node_Str"");
}
 else if (expr == ExpressionType.VARIABLE) {
if (getContext) this.block.callRuntime(""String_Node_Str"");
this.writeSetVariable(var);
}
 else {
this.syntaxError();
}
break;
default :
if (first && getContext && (var.type != Type.NONE || var.function != null)) {
this.writeGetVariable(var);
}
 else if (getContext && expr == ExpressionType.ARRAY) {
this.block.callRuntime(""String_Node_Str"");
}
 else if (expr != ExpressionType.FUNCTION) {
if (getContext && first) {
throw new WeelException(this.tokenizer.error(""String_Node_Str"",var.name));
}
this.syntaxError();
}
break;
}
}","/** 
 * Parses an assign or a function call
 * @param getContext Flag to indicate that we need a return value.
 */
private void parseVarsAndFuncs(final boolean getContext){
  boolean first=true, stackCall=false, end=false, oop=false, append=false;
  Variable var;
  if (this.tokenizer.token == Token.RESERVED && this.tokenizer.reserved == ReservedWord.THIS) {
    final Scope s=this.scope.findFunctionScope();
    if (s == null || !s.isOop) {
      throw new WeelException(this.tokenizer.error(""String_Node_Str""));
    }
    var=new Variable();
    var.type=Type.LOCAL;
    var.index=0;
  }
 else   if (this.tokenizer.token == Token.DOUBLE_COLON) {
    var=new Variable();
  }
 else {
    var=this.scope.findVariable(new Variable(),this.tokenizer.string);
  }
  ExpressionType expr=var.type != Type.NONE ? ExpressionType.VARIABLE : ExpressionType.NONE;
  if (this.tokenizer.token != Token.DOUBLE_COLON)   this.tokenizer.next();
  while (!end) {
switch (this.tokenizer.token) {
case DOUBLE_COLON:
{
        int paramc=0;
        this.tokenizer.next();
        this.checkToken(Token.NAME);
        final String name=this.tokenizer.string;
        if (expr == ExpressionType.ARRAY) {
          this.block.callRuntime(""String_Node_Str"");
        }
 else         if (first && expr == ExpressionType.VARIABLE) {
          this.needGetVariable(var);
          this.writeGetVariable(var);
        }
 else         if (first && var.function != null) {
          this.writeGetVariable(var);
        }
 else         if (expr != ExpressionType.FUNCTION) {
          this.syntaxError();
        }
        this.tokenizer.next();
        this.checkToken(Token.BRACE_OPEN);
        this.tokenizer.next();
        while (this.tokenizer.token != Token.BRACE_CLOSE) {
          paramc++;
          this.parseExpression();
          if (this.tokenizer.token == Token.BRACE_CLOSE) {
            break;
          }
          if (this.tokenizer.token == Token.COMMA) {
            this.tokenizer.next();
            continue;
          }
          this.syntaxError();
        }
        this.checkToken(Token.BRACE_CLOSE);
        this.tokenizer.next();
        this.block.writeSpecialCall(name,paramc,getContext || this.wouldNeedReturnValue());
        oop=first=false;
        expr=ExpressionType.FUNCTION;
        break;
      }
case BRACE_OPEN:
{
      int paramc=0;
      final boolean isAssert;
      this.tokenizer.next();
      if (first) {
        isAssert=var.name.equals(""String_Node_Str"");
        if (!isAssert && !var.isFunction()) {
          this.needGetVariable(var,true);
          this.writeGetVariable(var);
          stackCall=true;
        }
      }
 else {
        if (expr == ExpressionType.ARRAY) {
          if (oop) {
            this.block.callRuntime(""String_Node_Str"");
            paramc++;
          }
 else {
            this.block.callRuntime(""String_Node_Str"");
          }
          stackCall=true;
        }
        isAssert=false;
      }
      if (isAssert) {
        this.parseAssert();
        return;
      }
      while (this.tokenizer.token != Token.BRACE_CLOSE) {
        paramc++;
        this.parseExpression();
        if (this.tokenizer.token == Token.BRACE_CLOSE) {
          break;
        }
        if (this.tokenizer.token == Token.COMMA) {
          this.tokenizer.next();
          continue;
        }
        this.syntaxError();
      }
      this.checkToken(Token.BRACE_CLOSE);
      this.tokenizer.next();
      if (first && !stackCall) {
        WeelFunction func=this.weel.findFunction(var.name,paramc);
        if (func == null) {
          throw new WeelException(this.tokenizer.error(""String_Node_Str"" + var.name + ""String_Node_Str""+ paramc+ ""String_Node_Str""));
        }
        this.writeCallFunction(func);
        if (getContext || this.wouldNeedReturnValue()) {
          if (!func.returnsValue) {
            throw new WeelException(this.tokenizer.error(""String_Node_Str"" + func.name + ""String_Node_Str""+ func.arguments+ ""String_Node_Str""));
          }
        }
 else {
          if (func.returnsValue) {
            this.block.callRuntime(""String_Node_Str"");
          }
        }
      }
 else {
        this.block.doStackcall(paramc,getContext | this.wouldNeedReturnValue());
      }
      oop=first=false;
      expr=ExpressionType.FUNCTION;
      break;
    }
case ARROW:
  if (first) {
    this.needGetVariable(var);
    this.writeGetVariable(var);
  }
 else {
    if (expr == ExpressionType.ARRAY)     this.block.callRuntime(""String_Node_Str"");
  }
this.tokenizer.next();
this.checkToken(Token.NAME);
this.block.load(this.tokenizer.string);
this.tokenizer.next();
oop=true;
first=false;
expr=ExpressionType.ARRAY;
break;
case DOT:
if (first) {
this.needGetVariable(var);
this.writeGetVariable(var);
}
 else {
if (expr == ExpressionType.ARRAY) this.block.callRuntime(""String_Node_Str"");
}
this.tokenizer.next();
this.checkToken(Token.NAME);
this.block.load(this.tokenizer.string);
this.tokenizer.next();
oop=first=false;
expr=ExpressionType.ARRAY;
break;
case BRACKET_OPEN:
if (first) {
this.needGetVariable(var);
this.writeGetVariable(var);
}
 else {
if (expr == ExpressionType.ARRAY) this.block.callRuntime(""String_Node_Str"");
}
this.tokenizer.next();
if (!getContext && this.tokenizer.token == Token.BRACKET_CLOSE) {
this.tokenizer.next();
if (this.tokenizer.token != Token.ASSIGN) this.syntaxError();
append=true;
}
 else {
this.parseExpression();
this.checkToken(Token.BRACKET_CLOSE);
this.tokenizer.next();
}
oop=first=false;
expr=ExpressionType.ARRAY;
break;
case ASSIGN_ADD:
case ASSIGN_DIV:
case ASSIGN_AND:
case ASSIGN_MODULO:
case ASSIGN_MUL:
case ASSIGN_OR:
case ASSIGN_SUB:
case ASSIGN_XOR:
case ASSIGN_STRCAT:
case ASSIGN_MAPCAT:
if (first) {
this.needGetVariable(var);
expr=ExpressionType.VARIABLE;
}
end=true;
break;
case ASSIGN:
if (first) {
this.needSetVariable(var);
expr=ExpressionType.VARIABLE;
}
end=true;
break;
default :
if (!getContext && first && var.type == Type.NONE) {
this.syntaxError();
}
 else if (getContext && first) {
if (!var.isFunction()) this.needGetVariable(var);
expr=ExpressionType.VARIABLE;
}
end=true;
break;
}
}
switch (this.tokenizer.token) {
case ASSIGN_ADD:
case ASSIGN_DIV:
case ASSIGN_AND:
case ASSIGN_MODULO:
case ASSIGN_MUL:
case ASSIGN_OR:
case ASSIGN_SUB:
case ASSIGN_XOR:
case ASSIGN_STRCAT:
case ASSIGN_MAPCAT:
{
final Token op=this.tokenizer.token;
if (first && expr != ExpressionType.ARRAY && var.type == Type.NONE) this.syntaxError();
if (expr == ExpressionType.ARRAY) {
this.block.callRuntime(""String_Node_Str"");
this.block.callRuntime(""String_Node_Str"");
}
 else {
this.writeGetVariable(var);
}
this.tokenizer.next();
this.parseExpression();
switch (op) {
case ASSIGN_ADD:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_DIV:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_AND:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_MODULO:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_MUL:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_OR:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_SUB:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_XOR:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_STRCAT:
this.block.callRuntime(""String_Node_Str"");
break;
case ASSIGN_MAPCAT:
this.block.callRuntime(""String_Node_Str"");
break;
default :
break;
}
if (expr == ExpressionType.ARRAY) {
if (getContext) this.block.callRuntime(""String_Node_Str"");
this.block.callRuntime(""String_Node_Str"");
}
 else {
if (getContext) this.block.callRuntime(""String_Node_Str"");
this.writeSetVariable(var);
}
break;
}
case ASSIGN:
this.tokenizer.next();
this.parseExpression();
if (expr == ExpressionType.ARRAY) {
if (getContext) this.block.callRuntime(""String_Node_Str"");
if (append) this.block.callRuntime(""String_Node_Str"");
 else this.block.callRuntime(""String_Node_Str"");
}
 else if (expr == ExpressionType.VARIABLE) {
if (getContext) this.block.callRuntime(""String_Node_Str"");
this.writeSetVariable(var);
}
 else {
this.syntaxError();
}
break;
default :
if (first && getContext && (var.type != Type.NONE || var.function != null)) {
this.writeGetVariable(var);
}
 else if (getContext && expr == ExpressionType.ARRAY) {
this.block.callRuntime(""String_Node_Str"");
}
 else if (expr != ExpressionType.FUNCTION) {
if (getContext && first) {
throw new WeelException(this.tokenizer.error(""String_Node_Str"",var.name));
}
this.syntaxError();
}
break;
}
}",0.993443795446418
153632,"/** 
 * Opens a FOREACH scope.
 */
private void openForEach(){
  this.addScope(new Scope(this.scope,ScopeType.FOREACH));
  this.tokenizer.next();
  this.checkToken(Token.NAME);
  Variable key=null, val=this.scope.findVariable(new Variable(),this.tokenizer.string);
  this.needSetVariable(val);
  this.tokenizer.next();
  if (this.tokenizer.token == Token.COMMA) {
    this.tokenizer.next();
    this.checkToken(Token.NAME);
    key=val;
    val=this.scope.findVariable(new Variable(),this.tokenizer.string);
    this.needSetVariable(val);
    this.tokenizer.next();
  }
  this.checkReserved(ReservedWord.IN);
  this.tokenizer.next();
  this.checkToken(Token.NAME);
  final Variable map=this.scope.findVariable(new Variable(),this.tokenizer.string);
  this.needGetVariable(map);
  this.writeGetVariable(map);
  this.tokenizer.next();
  this.checkReserved(ReservedWord.DO);
  this.tokenizer.next();
  this.block.callRuntime(""String_Node_Str"");
  this.scope.startPc=this.block.getPc();
  this.block.callRuntime(""String_Node_Str"",""String_Node_Str"");
  this.scope.addBreak(this.block.writeJmp(JvmOp.IFEQ,0));
  this.writeSetVariable(val);
  if (key != null)   this.writeSetVariable(key);
 else   this.block.callRuntime(""String_Node_Str"");
}","/** 
 * Opens a FOREACH scope.
 */
private void openForEach(){
  this.addScope(new Scope(this.scope,ScopeType.FOREACH));
  this.tokenizer.next();
  this.checkToken(Token.NAME);
  Variable key=null, val=this.scope.findVariable(new Variable(),this.tokenizer.string);
  this.needSetVariable(val);
  this.tokenizer.next();
  if (this.tokenizer.token == Token.COMMA) {
    this.tokenizer.next();
    this.checkToken(Token.NAME);
    key=val;
    val=this.scope.findVariable(new Variable(),this.tokenizer.string);
    this.needSetVariable(val);
    this.tokenizer.next();
  }
  this.checkReserved(ReservedWord.IN);
  this.tokenizer.next();
  if (this.tokenizer.token == Token.RESERVED && this.tokenizer.reserved == ReservedWord.THIS) {
    final Scope s=this.scope.findFunctionScope();
    if (s == null || !s.isOop) {
      throw new WeelException(this.tokenizer.error(""String_Node_Str""));
    }
    this.block.callRuntime(""String_Node_Str"",0);
  }
 else {
    this.checkToken(Token.NAME);
    final Variable map=this.scope.findVariable(new Variable(),this.tokenizer.string);
    this.needGetVariable(map);
    this.writeGetVariable(map);
  }
  this.tokenizer.next();
  this.checkReserved(ReservedWord.DO);
  this.tokenizer.next();
  this.block.callRuntime(""String_Node_Str"");
  this.scope.startPc=this.block.getPc();
  this.block.callRuntime(""String_Node_Str"",""String_Node_Str"");
  this.scope.addBreak(this.block.writeJmp(JvmOp.IFEQ,0));
  this.writeSetVariable(val);
  if (key != null)   this.writeSetVariable(key);
 else   this.block.callRuntime(""String_Node_Str"");
}",0.8821428571428571
153633,"/** 
 * Parses a Weel assert.
 */
private void parseAssert(){
  CodeBlock old=this.block;
  if (!this.debugMode) {
    final JvmClassWriter temp=new JvmClassWriter(""String_Node_Str"");
    this.block=this.scope.block=new CodeBlock(temp.createMethod(""String_Node_Str"",""String_Node_Str""));
  }
  int paramc=0;
  while (this.tokenizer.token != Token.BRACE_CLOSE) {
    paramc++;
    this.parseExpression();
    if (this.tokenizer.token == Token.BRACE_CLOSE) {
      break;
    }
    if (this.tokenizer.token == Token.COMMA) {
      this.tokenizer.next();
      continue;
    }
    this.syntaxError();
  }
  if (paramc != 1) {
    throw new WeelException(this.tokenizer.error(""String_Node_Str""));
  }
  this.tokenizer.next();
  if (!this.debugMode) {
    this.block=this.scope.block=old;
  }
 else {
    this.block.code.add(JvmOp.ALOAD_0);
    this.block.ldcStr(this.tokenizer.error(""String_Node_Str""));
    this.block.code.add(JvmOp.INVOKEVIRTUAL);
    this.block.code.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    this.block.pop();
  }
}","/** 
 * Parses a Weel assert.
 */
private void parseAssert(){
  CodeBlock old=this.block;
  if (!this.debugMode) {
    final JvmClassWriter temp=new JvmClassWriter(""String_Node_Str"");
    this.block=this.scope.block=new CodeBlock(temp.createMethod(""String_Node_Str"",""String_Node_Str""));
  }
  this.parseExpression();
  String message=null;
  if (this.tokenizer.token == Token.COMMA) {
    this.tokenizer.next();
    this.checkToken(Token.STRING);
    message=this.tokenizer.string;
    this.tokenizer.next();
  }
  this.checkToken(Token.BRACE_CLOSE);
  this.tokenizer.next();
  if (!this.debugMode) {
    this.block=this.scope.block=old;
  }
 else {
    this.block.code.add(JvmOp.ALOAD_0);
    if (message != null)     this.block.ldcStr(this.tokenizer.error(""String_Node_Str"",message));
 else     this.block.ldcStr(this.tokenizer.error(""String_Node_Str""));
    this.block.code.add(JvmOp.INVOKEVIRTUAL);
    this.block.code.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    this.block.pop();
  }
}",0.6865116279069767
153634,"/** 
 * Compiles a token.
 */
private void compileToken(){
switch (this.tokenizer.token) {
case NAME:
    this.parseVarsAndFuncs(false);
  this.skipSemi();
break;
case CURLY_BRACE_OPEN:
case STRING:
case BRACE_OPEN:
this.tryStaticSupport();
this.skipSemi();
break;
case CURLY_BRACE_CLOSE:
{
if ((this.scope.type == ScopeType.FUNC || this.scope.type == ScopeType.SUB) && this.block.isAnonymousFunction && this.block.isAlternateSyntax) {
this.closeFunction();
}
 else this.syntaxError();
break;
}
case RESERVED:
switch (this.tokenizer.reserved) {
case THIS:
this.parseVarsAndFuncs(false);
this.skipSemi();
break;
case LOCAL:
this.parseLocal();
this.skipSemi();
break;
case OUTER:
this.parseOuter();
this.skipSemi();
break;
case GLOBAL:
this.parseGlobal();
this.skipSemi();
break;
case IF:
this.openIf();
break;
case ELSEIF:
this.addElseIf();
break;
case ELSE:
this.addElse();
break;
case FOR:
this.openFor();
break;
case FOREACH:
this.openForEach();
break;
case BREAK:
this.addBreak();
this.skipSemi();
break;
case CONTINUE:
this.addContinue();
this.skipSemi();
break;
case DO:
this.openDo();
break;
case UNTIL:
this.closeDoUntil();
this.skipSemi();
break;
case WHILE:
this.openWhile();
this.skipSemi();
break;
case SWITCH:
this.openSwitch();
break;
case CASE:
this.addCase();
break;
case DEFAULT:
this.addDefault();
break;
case FUNC:
case SUB:
if (this.scope.findFunctionScope() != null) {
throw new WeelException(this.tokenizer.error(""String_Node_Str""));
}
this.openFunction(false,false);
break;
case EXIT:
this.addExit();
this.skipSemi();
break;
case RETURN:
this.addReturn();
this.skipSemi();
break;
case END:
this.closeScope();
break;
default :
this.syntaxError();
break;
}
break;
case EOF:
break;
default :
this.syntaxError();
break;
}
}","/** 
 * Compiles a token.
 */
private void compileToken(){
switch (this.tokenizer.token) {
case NAME:
    this.parseVarsAndFuncs(false);
  this.skipSemi();
break;
case CURLY_BRACE_OPEN:
case STRING:
case BRACE_OPEN:
case NUMBER:
this.tryStaticSupport();
this.skipSemi();
break;
case CURLY_BRACE_CLOSE:
{
if ((this.scope.type == ScopeType.FUNC || this.scope.type == ScopeType.SUB) && this.block.isAnonymousFunction && this.block.isAlternateSyntax) {
this.closeFunction();
}
 else this.syntaxError();
break;
}
case RESERVED:
switch (this.tokenizer.reserved) {
case NULL:
case TRUE:
case FALSE:
this.tryStaticSupport();
this.skipSemi();
break;
case THIS:
this.parseVarsAndFuncs(false);
this.skipSemi();
break;
case LOCAL:
this.parseLocal();
this.skipSemi();
break;
case OUTER:
this.parseOuter();
this.skipSemi();
break;
case GLOBAL:
this.parseGlobal();
this.skipSemi();
break;
case IF:
this.openIf();
break;
case ELSEIF:
this.addElseIf();
break;
case ELSE:
this.addElse();
break;
case FOR:
this.openFor();
break;
case FOREACH:
this.openForEach();
break;
case BREAK:
this.addBreak();
this.skipSemi();
break;
case CONTINUE:
this.addContinue();
this.skipSemi();
break;
case DO:
this.openDo();
break;
case UNTIL:
this.closeDoUntil();
this.skipSemi();
break;
case WHILE:
this.openWhile();
this.skipSemi();
break;
case SWITCH:
this.openSwitch();
break;
case CASE:
this.addCase();
break;
case DEFAULT:
this.addDefault();
break;
case FUNC:
case SUB:
if (this.scope.findFunctionScope() != null) {
throw new WeelException(this.tokenizer.error(""String_Node_Str""));
}
this.openFunction(false,false);
break;
case EXIT:
this.addExit();
this.skipSemi();
break;
case RETURN:
this.addReturn();
this.skipSemi();
break;
case END:
this.closeScope();
break;
default :
this.syntaxError();
break;
}
break;
case EOF:
break;
default :
this.syntaxError();
break;
}
}",0.9731693683622136
153635,"/** 
 * Checks if the current expression continues with a token that indicates that it needs a return value. Only used in variables and function parsing for non-first expressions.
 * @return <code>true</code> if so.
 */
private boolean wouldNeedReturnValue(){
switch (this.tokenizer.token) {
case BRACE_OPEN:
case BRACKET_OPEN:
case DOT:
case ARROW:
case DOUBLE_COLON:
case ASSIGN:
case ASSIGN_ADD:
case ASSIGN_DIV:
case ASSIGN_AND:
case ASSIGN_MODULO:
case ASSIGN_MUL:
case ASSIGN_OR:
case ASSIGN_SUB:
case ASSIGN_XOR:
case ASSIGN_STRCAT:
    return true;
default :
  return false;
}
}","/** 
 * Checks if the current expression continues with a token that indicates that it needs a return value. Only used in variables and function parsing for non-first expressions.
 * @return <code>true</code> if so.
 */
private boolean wouldNeedReturnValue(){
switch (this.tokenizer.token) {
case BRACE_OPEN:
case BRACKET_OPEN:
case DOT:
case ARROW:
case DOUBLE_COLON:
case ASSIGN:
case ASSIGN_ADD:
case ASSIGN_DIV:
case ASSIGN_AND:
case ASSIGN_MODULO:
case ASSIGN_MUL:
case ASSIGN_OR:
case ASSIGN_SUB:
case ASSIGN_XOR:
case ASSIGN_STRCAT:
case ASSIGN_MAPCAT:
    return true;
default :
  return false;
}
}",0.9832214765100672
153636,"/** 
 * Opens a function.
 * @param anonymous Are we anonymous?
 */
private void openFunction(final boolean anonymous,final boolean alternate){
  if (anonymous)   this.addScope(new Scope(this.scope,ScopeType.BORDER));
  this.addScope(new Scope(this.scope,this.tokenizer.reserved == ReservedWord.SUB ? ScopeType.SUB : ScopeType.FUNC));
  this.block=this.scope.block=new CodeBlock();
  this.block.isAnonymousFunction=anonymous;
  final WeelFunction func=this.block.function=new WeelFunction();
  func.returnsValue=this.tokenizer.reserved == ReservedWord.FUNC;
  this.tokenizer.next();
  if (!anonymous) {
    this.checkToken(Token.NAME);
    func.name=this.tokenizer.string;
    this.tokenizer.next();
    if (this.tokenizer.token == Token.DOT || this.tokenizer.token == Token.COLON) {
      this.scope.isOop=this.tokenizer.token == Token.COLON;
      this.scope.oopVariable=this.scope.parent.findVariable(new Variable(),func.name);
      this.needGetVariable(this.scope.oopVariable);
      this.tokenizer.next();
      this.checkToken(Token.NAME);
      func.name+=(this.scope.isOop ? ""String_Node_Str"" : ""String_Node_Str"") + (this.scope.oopIndex=this.tokenizer.string);
      this.tokenizer.next();
    }
  }
 else {
    func.name=""String_Node_Str"";
  }
  int paramc=0;
  if (this.scope.isOop) {
    this.scope.addLocal(""String_Node_Str"");
    paramc++;
  }
  if ((alternate && this.tokenizer.token == Token.BRACE_OPEN) || !alternate) {
    this.checkToken(Token.BRACE_OPEN);
    this.tokenizer.next();
    while (this.tokenizer.token != Token.BRACE_CLOSE) {
      paramc++;
      this.checkToken(Token.NAME);
      this.scope.addLocal(this.tokenizer.string);
      this.tokenizer.next();
      if (this.tokenizer.token == Token.COMMA) {
        this.tokenizer.next();
        continue;
      }
      if (this.tokenizer.token != Token.BRACE_CLOSE) {
        this.syntaxError();
      }
    }
    this.tokenizer.next();
  }
  func.arguments=paramc;
  if (this.weel.findFunction(func.name,func.arguments) != null) {
    throw new WeelException(this.tokenizer.error(""String_Node_Str"" + func));
  }
  func.clazz=this.classWriter.className;
  func.javaName=anonymous ? ""String_Node_Str"" + anonCounter++ : ""String_Node_Str"" + func.name + ""String_Node_Str""+ func.arguments;
  this.block.setMethodWriter(this.classWriter.createMethod(func.javaName,""String_Node_Str""));
  this.weel.addFunction(func.name + ""String_Node_Str"" + func.arguments,func,!anonymous);
  this.block.isAlternateSyntax=alternate;
}","/** 
 * Opens a function.
 * @param anonymous Are we anonymous?
 */
private void openFunction(final boolean anonymous,final boolean alternate){
  if (anonymous)   this.addScope(new Scope(this.scope,ScopeType.BORDER));
  this.addScope(new Scope(this.scope,this.tokenizer.reserved == ReservedWord.SUB ? ScopeType.SUB : ScopeType.FUNC));
  this.block=this.scope.block=new CodeBlock();
  this.block.isAnonymousFunction=anonymous;
  final WeelFunction func=this.block.function=new WeelFunction();
  func.returnsValue=this.tokenizer.reserved == ReservedWord.FUNC;
  this.tokenizer.next();
  if (!anonymous) {
    this.checkToken(Token.NAME);
    func.name=this.tokenizer.string;
    this.tokenizer.next();
    if (this.tokenizer.token == Token.DOT || this.tokenizer.token == Token.COLON) {
      this.scope.isOop=this.tokenizer.token == Token.COLON;
      this.scope.oopVariable=this.scope.parent.findVariable(new Variable(),func.name);
      this.needGetVariable(this.scope.oopVariable);
      this.tokenizer.next();
      this.checkToken(Token.NAME);
      func.name+=(this.scope.isOop ? ""String_Node_Str"" : ""String_Node_Str"") + (this.scope.oopIndex=this.tokenizer.string);
      this.tokenizer.next();
    }
  }
 else {
    func.name=""String_Node_Str"";
  }
  int paramc=0;
  if (this.scope.isOop) {
    this.scope.addLocal(""String_Node_Str"");
    paramc++;
  }
  if ((alternate && this.tokenizer.token == Token.BRACE_OPEN) || !alternate) {
    this.checkToken(Token.BRACE_OPEN);
    this.tokenizer.next();
    while (this.tokenizer.token != Token.BRACE_CLOSE) {
      paramc++;
      this.checkToken(Token.NAME);
      this.scope.addLocal(this.tokenizer.string);
      this.tokenizer.next();
      if (this.tokenizer.token == Token.COMMA) {
        this.tokenizer.next();
        continue;
      }
      if (this.tokenizer.token != Token.BRACE_CLOSE) {
        this.syntaxError();
      }
    }
    this.tokenizer.next();
  }
  func.arguments=paramc;
  if (this.weel.findFunction(func.name,func.arguments) != null) {
    throw new WeelException(this.tokenizer.error(""String_Node_Str"" + func));
  }
  func.clazz=this.classWriter.className;
  func.javaName=anonymous ? ""String_Node_Str"" + Weel.anonCounter.incrementAndGet() : func.name + ""String_Node_Str"" + func.arguments;
  this.block.setMethodWriter(this.classWriter.createMethod(func.javaName,""String_Node_Str""));
  this.weel.addFunction(func.name + ""String_Node_Str"" + func.arguments,func,!anonymous);
  this.block.isAlternateSyntax=alternate;
}",0.9370489174017642
153637,"/** 
 * Initializes this compiler.
 */
private void initialize(){
  this.classWriter=new JvmClassWriter(""String_Node_Str"" + classCounter++);
  this.weel.scriptClasses.add(this.classWriter.className);
  final Scope s=new Scope(this.weel,ScopeType.STATIC);
  s.block=new CodeBlock(this.classWriter.createMethod(""String_Node_Str"",""String_Node_Str""));
  this.addScope(s);
}","/** 
 * Initializes this compiler.
 */
private void initialize(){
  this.classWriter=new JvmClassWriter(""String_Node_Str"" + Weel.scriptCounter.getAndIncrement());
  this.weel.scriptClasses.add(this.classWriter.className);
  final Scope s=new Scope(this.weel,ScopeType.STATIC);
  s.block=new CodeBlock(this.classWriter.createMethod(""String_Node_Str"",""String_Node_Str""));
  this.addScope(s);
}",0.9526315789473684
153638,"@WeelMethod() public final static void ctor(final ValueMap thiz){
  WeelOop.setInstance(thiz,new StringBuilder());
}","@WeelMethod() public final static void ctor(final ValueMap thiz,final int size){
  WeelOop.setInstance(thiz,new StringBuilder(size));
}",0.9243027888446216
153639,"public static void main(String[] args){
  try {
    final Weel weel=new Weel();
    weel.importFunctions(Main.class);
    weel.compile(Main.class.getResourceAsStream(""String_Node_Str""),""String_Node_Str"");
    weel.compile(Main.class.getResourceAsStream(""String_Node_Str""),""String_Node_Str"");
    for (    WeelLoader.ClassData cd : weel.classLoader.classData) {
      FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + cd.name.substring(cd.name.lastIndexOf('.') + 1) + ""String_Node_Str"");
      fos.write(cd.code);
      fos.close();
    }
    weel.runStatic();
    if (weel.getRuntime().getStackPointer() != -1)     System.err.println(""String_Node_Str"" + weel.getRuntime().getStackPointer() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    throw (e instanceof WeelException) ? (WeelException)e : new WeelException(e);
  }
}","public static void main(String[] args){
  try {
    final Weel weel=new Weel();
    weel.setDebugMode(false);
    weel.importFunctions(Main.class);
    weel.compileResource(""String_Node_Str"");
    weel.compileResource(""String_Node_Str"");
    for (    WeelLoader.ClassData cd : weel.classLoader.classData) {
      FileOutputStream fos=new FileOutputStream(""String_Node_Str"" + cd.name.substring(cd.name.lastIndexOf('.') + 1) + ""String_Node_Str"");
      fos.write(cd.code);
      fos.close();
    }
    weel.runStatic();
    if (weel.getRuntime().getStackPointer() != -1)     System.err.println(""String_Node_Str"" + weel.getRuntime().getStackPointer() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    throw (e instanceof WeelException) ? (WeelException)e : new WeelException(e);
  }
}",0.906519065190652
153640,"/** 
 * Wraps a method.
 * @param m The method to wrap.
 * @return The gerated method name.
 */
public String wrap(final Method m,final WeelFunction func){
  final String mname=m.getName() + ""String_Node_Str"";
  final JvmMethodWriter mw=this.classWriter.createMethod(mname,""String_Node_Str"");
  final ByteList bl=mw.code;
  for (int i=0; i < m.getParameterTypes().length; i++) {
    if (m.getParameterTypes()[i] == com.github.rjeschke.weel.Runtime.class)     func.arguments--;
  }
  mw.maxStack=3;
  bl.add(JvmOp.ALOAD_0);
  mw.ldcInt(func.arguments);
  mw.ldcInt(0);
  bl.add(JvmOp.INVOKEVIRTUAL);
  bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  int sp=m.getParameterTypes().length > 0 ? 2 : 0;
  final boolean returns;
  if (m.getReturnType() != void.class) {
    returns=true;
    bl.add(JvmOp.ALOAD_0);
    sp++;
  }
 else {
    returns=false;
  }
  for (int i=0, p=0; i < m.getParameterTypes().length; i++) {
    final Class<?> t=m.getParameterTypes()[i];
    if (t == com.github.rjeschke.weel.Runtime.class) {
      sp++;
      bl.add(JvmOp.ALOAD_0);
      continue;
    }
    bl.add(JvmOp.ALOAD_0);
    mw.ldcInt(p++);
    bl.add(JvmOp.INVOKEVIRTUAL);
    if (t == double.class) {
      sp+=2;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == int.class) {
      sp+=2;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      bl.add(JvmOp.D2I);
    }
 else     if (t == String.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == WeelFunction.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == Value.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == ValueMap.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      if (t != Object.class) {
        bl.add(JvmOp.CHECKCAST);
        bl.addShort(this.classWriter.addConstant(new JvmConstant(JvmConstant.CONSTANT_Class,this.classWriter.addConstant(new JvmConstant(t.getCanonicalName().replace('.','/'))))));
      }
    }
  }
  mw.maxStack=Math.max(mw.maxStack,sp);
  bl.add(JvmOp.INVOKESTATIC);
  bl.addShort(this.classWriter.addMethodRefConstant(m.getDeclaringClass().getCanonicalName(),m.getName(),""String_Node_Str"" + JvmClassWriter.buildDescriptor(m.getParameterTypes()) + ""String_Node_Str""+ JvmClassWriter.buildDescriptor(m.getReturnType())));
  if (returns) {
    sp=1;
    final Class<?> t=m.getReturnType();
    bl.add(JvmOp.INVOKEVIRTUAL);
    if (t == double.class) {
      sp+=2;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == int.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == String.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == ValueMap.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == Value.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == WeelFunction.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
    mw.maxStack=Math.max(mw.maxStack,sp);
    bl.add(JvmOp.ALOAD_0);
    mw.ldcInt(1);
    bl.add(JvmOp.INVOKEVIRTUAL);
    bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else {
    bl.add(JvmOp.ALOAD_0);
    mw.ldcInt(0);
    bl.add(JvmOp.INVOKEVIRTUAL);
    bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  bl.add(JvmOp.RETURN);
  return mname;
}","/** 
 * Wraps a method.
 * @param m The method to wrap.
 * @return The gerated method name.
 */
public String wrap(final Method m,final WeelFunction func){
  for (int i=0; i < m.getParameterTypes().length; i++) {
    if (m.getParameterTypes()[i] == com.github.rjeschke.weel.Runtime.class)     func.arguments--;
  }
  final String mname=""String_Node_Str"" + m.getName() + ""String_Node_Str""+ func.arguments;
  final JvmMethodWriter mw=this.classWriter.createMethod(mname,""String_Node_Str"");
  final ByteList bl=mw.code;
  mw.maxStack=3;
  bl.add(JvmOp.ALOAD_0);
  mw.ldcInt(func.arguments);
  mw.ldcInt(0);
  bl.add(JvmOp.INVOKEVIRTUAL);
  bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  int sp=m.getParameterTypes().length > 0 ? 2 : 0;
  final boolean returns;
  if (m.getReturnType() != void.class) {
    returns=true;
    bl.add(JvmOp.ALOAD_0);
    sp++;
  }
 else {
    returns=false;
  }
  for (int i=0, p=0; i < m.getParameterTypes().length; i++) {
    final Class<?> t=m.getParameterTypes()[i];
    if (t == com.github.rjeschke.weel.Runtime.class) {
      sp++;
      bl.add(JvmOp.ALOAD_0);
      continue;
    }
    bl.add(JvmOp.ALOAD_0);
    mw.ldcInt(p++);
    bl.add(JvmOp.INVOKEVIRTUAL);
    if (t == double.class) {
      sp+=2;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == int.class) {
      sp+=2;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      bl.add(JvmOp.D2I);
    }
 else     if (t == String.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == WeelFunction.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == Value.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == ValueMap.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      if (t != Object.class) {
        bl.add(JvmOp.CHECKCAST);
        bl.addShort(this.classWriter.addConstant(new JvmConstant(JvmConstant.CONSTANT_Class,this.classWriter.addConstant(new JvmConstant(t.getCanonicalName().replace('.','/'))))));
      }
    }
  }
  mw.maxStack=Math.max(mw.maxStack,sp);
  bl.add(JvmOp.INVOKESTATIC);
  bl.addShort(this.classWriter.addMethodRefConstant(m.getDeclaringClass().getCanonicalName(),m.getName(),""String_Node_Str"" + JvmClassWriter.buildDescriptor(m.getParameterTypes()) + ""String_Node_Str""+ JvmClassWriter.buildDescriptor(m.getReturnType())));
  if (returns) {
    sp=1;
    final Class<?> t=m.getReturnType();
    bl.add(JvmOp.INVOKEVIRTUAL);
    if (t == double.class) {
      sp+=2;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == int.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == String.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == ValueMap.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == Value.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (t == WeelFunction.class) {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sp++;
      bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
    mw.maxStack=Math.max(mw.maxStack,sp);
    bl.add(JvmOp.ALOAD_0);
    mw.ldcInt(1);
    bl.add(JvmOp.INVOKEVIRTUAL);
    bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else {
    bl.add(JvmOp.ALOAD_0);
    mw.ldcInt(0);
    bl.add(JvmOp.INVOKEVIRTUAL);
    bl.addShort(this.classWriter.addMethodRefConstant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  bl.add(JvmOp.RETURN);
  return mname;
}",0.9522489874227243
153641,"/** 
 * Performs a special call. <p> <code>..., value, [arguments] &rArr; ..., [return value]</code> </p>
 * @param name The name of the function.
 * @param args The number of arguments.
 * @param shouldReturn Flags indicating that we need a return value.
 */
public void specialCall(final String name,final int args,final boolean shouldReturn){
  final TypeFunctions funcs=this.typeFunctions[this.stack[this.sp - args].type.ordinal()];
  if (funcs == null) {
    throw new WeelException(""String_Node_Str"" + this.stack[this.sp - args].type);
  }
  final WeelFunction func=funcs.findFunction(name);
  if (func == null) {
    throw new WeelException(""String_Node_Str"" + name.substring(0,name.lastIndexOf('#')) + ""String_Node_Str""+ args+ ""String_Node_Str"");
  }
  func.invoke(this);
  if (func.returnsValue && !shouldReturn) {
    this.sp--;
  }
 else   if (!func.returnsValue && shouldReturn) {
    this.stack[++this.sp].setNull();
  }
}","/** 
 * Performs a special call. <p> <code>..., value, [arguments] &rArr; ..., [return value]</code> </p>
 * @param name The name of the function.
 * @param args The number of arguments.
 * @param shouldReturn Flags indicating that we need a return value.
 */
public void specialCall(final String name,final int args,final boolean shouldReturn){
  final TypeFunctions funcs=this.typeFunctions[this.stack[this.sp - args].type.ordinal()];
  final WeelFunction func=funcs.findFunction(name);
  if (func == null) {
    throw new WeelException(""String_Node_Str"" + name.substring(0,name.lastIndexOf('#')) + ""String_Node_Str""+ args+ ""String_Node_Str"");
  }
  func.invoke(this);
  if (func.returnsValue && !shouldReturn) {
    this.sp--;
  }
 else   if (!func.returnsValue && shouldReturn) {
    this.stack[++this.sp].setNull();
  }
}",0.9381033503691084
153642,"/** 
 * Finds a surrounding function scope.
 * @return The function scope or <code>null</code>
 */
Scope findFunctionScope(){
  Scope current=this;
  while (current != null) {
    if (current.block.function != null)     return current;
    current=current.parent;
  }
  return null;
}","/** 
 * Finds a surrounding function scope.
 * @return The function scope or <code>null</code>
 */
Scope findFunctionScope(){
  Scope current=this;
  while (current != null) {
    if (current.type == ScopeType.FUNC || current.type == ScopeType.SUB)     return current;
    current=current.parent;
  }
  return null;
}",0.8718801996672213
153643,"/** 
 * Reads the next token.
 * @return The next token.
 */
public Token next(){
  if (this.ungot != null) {
    this.token=this.ungot;
    this.ungot=null;
    return this.token;
  }
  try {
    for (; ; ) {
switch (this.current) {
case -1:
        return this.token=Token.EOF;
case '\n':
      this.lineNumber++;
case ' ':
case '\t':
case '\r':
    this.read();
  continue;
case '""':
case '\'':
this.readString();
return this.token=Token.STRING;
case '+':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_ADD;
}
 else if (this.current == '+') {
this.read();
return this.token=Token.MAP_CONCAT;
}
return this.token=Token.ADD;
case '-':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_SUB;
}
 else if (this.current == '>') {
this.read();
return this.token=Token.ARROW;
}
return this.token=Token.SUB;
case '*':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_MUL;
}
return this.token=Token.MUL;
case '%':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_MODULO;
}
return this.token=Token.MODULO;
case '?':
this.read();
return this.token=Token.TERNARY;
case '/':
this.read();
if (this.current == '/') {
while (this.current != '\n' && this.current != -1) this.read();
continue;
}
 else if (this.current == '*') {
this.read();
boolean inComment=true;
while (inComment) {
switch (this.current) {
case -1:
throw new WeelException(this.error(""String_Node_Str""));
case '*':
this.read();
if (this.current == '/') {
this.read();
inComment=false;
}
break;
case '\n':
this.lineNumber++;
default :
this.read();
break;
}
}
continue;
}
 else if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_DIV;
}
return this.token=Token.DIV;
case '(':
this.read();
return this.token=Token.BRACE_OPEN;
case ')':
this.read();
return this.token=Token.BRACE_CLOSE;
case '{':
this.read();
return this.token=Token.CURLY_BRACE_OPEN;
case '}':
this.read();
return this.token=Token.CURLY_BRACE_CLOSE;
case '[':
this.read();
return this.token=Token.BRACKET_OPEN;
case ']':
this.read();
return this.token=Token.BRACKET_CLOSE;
case ',':
this.read();
return this.token=Token.COMMA;
case '.':
this.read();
if (this.current == '.') {
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_STRCAT;
}
return this.token=Token.STRING_CONCAT;
}
 else if (Character.isDigit(this.current)) {
this.readNumber(true);
return this.token=Token.NUMBER;
}
return this.token=Token.DOT;
case ';':
this.read();
return this.token=Token.SEMICOLON;
case '~':
this.read();
return this.token=Token.BINARY_NOT;
case '^':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_XOR;
}
return this.token=Token.BINARY_XOR;
case '=':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.EQUAL;
}
return this.token=Token.ASSIGN;
case '>':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.GREATER_EQUAL;
}
return this.token=Token.GREATER;
case '<':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.LESS_EQUAL;
}
return this.token=Token.LESS;
case '&':
this.read();
if (this.current == '&') {
this.read();
return this.token=Token.LOGICAL_AND;
}
 else if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_AND;
}
return this.token=Token.BINARY_AND;
case '|':
this.read();
if (this.current == '|') {
this.read();
return this.token=Token.LOGICAL_OR;
}
 else if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_OR;
}
return this.token=Token.BINARY_OR;
case '!':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.NOT_EQUAL;
}
return this.token=Token.LOGICAL_NOT;
case '@':
this.read();
if (this.current == '{') {
this.read();
return this.token=Token.ANON_OPEN;
}
return this.token=Token.AT;
case ':':
this.read();
if (this.current == ':') {
this.read();
return this.token=Token.DOUBLE_COLON;
}
return this.token=Token.COLON;
default :
if (Character.isLetter(this.current) || this.current == '_') {
this.readName();
if ((this.reserved=ReservedWord.fromString(this.string)) != null) return this.token=Token.RESERVED;
return this.token=Token.NAME;
}
 else if (Character.isDigit(this.current)) {
this.readNumber(false);
return this.token=Token.NUMBER;
}
throw new WeelException(this.error(""String_Node_Str"",this.current));
}
}
}
 catch (final IOException e) {
throw new WeelException(this.error(e.toString()),e);
}
}","/** 
 * Reads the next token.
 * @return The next token.
 */
public Token next(){
  if (this.ungot != null) {
    this.token=this.ungot;
    this.ungot=null;
    return this.token;
  }
  try {
    for (; ; ) {
switch (this.current) {
case -1:
        return this.token=Token.EOF;
case '\n':
      this.lineNumber++;
case ' ':
case '\t':
case '\r':
    this.read();
  continue;
case '""':
case '\'':
this.readString();
return this.token=Token.STRING;
case '+':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_ADD;
}
 else if (this.current == '+') {
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_MAPCAT;
}
return this.token=Token.MAP_CONCAT;
}
return this.token=Token.ADD;
case '-':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_SUB;
}
 else if (this.current == '>') {
this.read();
return this.token=Token.ARROW;
}
return this.token=Token.SUB;
case '*':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_MUL;
}
return this.token=Token.MUL;
case '%':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_MODULO;
}
return this.token=Token.MODULO;
case '?':
this.read();
return this.token=Token.TERNARY;
case '/':
this.read();
if (this.current == '/') {
while (this.current != '\n' && this.current != -1) this.read();
continue;
}
 else if (this.current == '*') {
this.read();
boolean inComment=true;
while (inComment) {
switch (this.current) {
case -1:
throw new WeelException(this.error(""String_Node_Str""));
case '*':
this.read();
if (this.current == '/') {
this.read();
inComment=false;
}
break;
case '\n':
this.lineNumber++;
default :
this.read();
break;
}
}
continue;
}
 else if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_DIV;
}
return this.token=Token.DIV;
case '(':
this.read();
return this.token=Token.BRACE_OPEN;
case ')':
this.read();
return this.token=Token.BRACE_CLOSE;
case '{':
this.read();
return this.token=Token.CURLY_BRACE_OPEN;
case '}':
this.read();
return this.token=Token.CURLY_BRACE_CLOSE;
case '[':
this.read();
return this.token=Token.BRACKET_OPEN;
case ']':
this.read();
return this.token=Token.BRACKET_CLOSE;
case ',':
this.read();
return this.token=Token.COMMA;
case '.':
this.read();
if (this.current == '.') {
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_STRCAT;
}
return this.token=Token.STRING_CONCAT;
}
 else if (Character.isDigit(this.current)) {
this.readNumber(true);
return this.token=Token.NUMBER;
}
return this.token=Token.DOT;
case ';':
this.read();
return this.token=Token.SEMICOLON;
case '~':
this.read();
return this.token=Token.BINARY_NOT;
case '^':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_XOR;
}
return this.token=Token.BINARY_XOR;
case '=':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.EQUAL;
}
return this.token=Token.ASSIGN;
case '>':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.GREATER_EQUAL;
}
return this.token=Token.GREATER;
case '<':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.LESS_EQUAL;
}
return this.token=Token.LESS;
case '&':
this.read();
if (this.current == '&') {
this.read();
return this.token=Token.LOGICAL_AND;
}
 else if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_AND;
}
return this.token=Token.BINARY_AND;
case '|':
this.read();
if (this.current == '|') {
this.read();
return this.token=Token.LOGICAL_OR;
}
 else if (this.current == '=') {
this.read();
return this.token=Token.ASSIGN_OR;
}
return this.token=Token.BINARY_OR;
case '!':
this.read();
if (this.current == '=') {
this.read();
return this.token=Token.NOT_EQUAL;
}
return this.token=Token.LOGICAL_NOT;
case '@':
this.read();
if (this.current == '{') {
this.read();
return this.token=Token.ANON_OPEN;
}
return this.token=Token.AT;
case ':':
this.read();
if (this.current == ':') {
this.read();
return this.token=Token.DOUBLE_COLON;
}
return this.token=Token.COLON;
default :
if (Character.isLetter(this.current) || this.current == '_') {
this.readName();
if ((this.reserved=ReservedWord.fromString(this.string)) != null) return this.token=Token.RESERVED;
return this.token=Token.NAME;
}
 else if (Character.isDigit(this.current)) {
this.readNumber(false);
return this.token=Token.NUMBER;
}
throw new WeelException(this.error(""String_Node_Str"",this.current));
}
}
}
 catch (final IOException e) {
throw new WeelException(this.error(e.toString()),e);
}
}",0.9910743801652891
153644,"public SeekBarMinMax(Context context,int min,int max){
  super(context);
  this.min=min;
  this.setMax(max - min);
}","public SeekBarMinMax(SeekBar seek_bar,int min,int max){
  mySeekBar=seek_bar;
  this.min=min;
  mySeekBar.setMax(max - min);
}",0.7355371900826446
153645,"@Override public synchronized void setProgress(int progress){
  super.setProgress(progress - min);
}","public synchronized void setProgress(int progress){
  mySeekBar.setProgress(progress - min);
}",0.8969072164948454
153646,"@Override public synchronized int getProgress(){
  return super.getProgress() + min;
}","public synchronized int getProgress(){
  return mySeekBar.getProgress() + min;
}",0.8795180722891566
153647,"public Projectile createNewProjectile(String name){
  Projectile projectile=null;
  if (name.equals(""String_Node_Str"")) {
    name=Helper.getWeightedRandomValue(this.weightedValues);
  }
  if (name.equals(""String_Node_Str"")) {
    projectile=new Ball(this);
  }
 else   if (name.equals(""String_Node_Str"")) {
    projectile=new PaddleSpeedPower(this);
  }
}","public Projectile createNewProjectile(String name){
  Projectile projectile=null;
  if (name.equals(""String_Node_Str"")) {
    name=Helper.getWeightedRandomValue(this.weightedValues);
  }
  if (name.equals(""String_Node_Str"")) {
    projectile=new Ball(this);
  }
 else   if (name.equals(""String_Node_Str"")) {
    projectile=new PaddleSpeedPower(this);
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  return projectile;
}",0.9035532994923858
153648,"/** 
 * build Builds a full data tree based on external data.
 * @param path for file stream
 * @postcondition A full tree of recycling data is constructed.
 */
public void build(String dataPath) throws FileNotFoundException {
  try {
    thisNode.setImagePath(""String_Node_Str"");
    thisNode.setText(""String_Node_Str"");
    thisNode.setTitle(""String_Node_Str"");
    children=new RBTree[6];
    RBTreeNode childNode=children[0].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[1].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[2].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[3].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[4].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[5].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","/** 
 * build Builds a full data tree based on external data.
 * @param path for file stream
 * @postcondition A full tree of recycling data is constructed.
 */
public void build(String dataPath) throws FileNotFoundException {
  try {
    thisNode.setImagePath(""String_Node_Str"");
    thisNode.setText(""String_Node_Str"");
    thisNode.setTitle(""String_Node_Str"");
    children=new RBTree[6];
    for (int i=0; i < children.length; i++) {
      children[i]=new RBTree(this,i);
    }
    RBTreeNode childNode=children[0].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[1].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[2].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[3].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[4].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
    childNode=children[5].getThisNode();
    childNode.setImagePath(""String_Node_Str"");
    childNode.setText(""String_Node_Str"");
    childNode.setTitle(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}",0.9703947368421052
153649,"/** 
 * @see HBaseService#scan(String,String,String,Long,Long,Integer,Integer,Boolean,Integer,String,String)
 */
public Iterable<Result> scan(final String tableName,final String columnFamilyName,final String columnQualifier,final Long timestamp,final Long maxTimestamp,final Integer caching,final boolean cacheBlocks,final int maxVersions,final String startRow,final String stopRow,final int fetchSize){
  return doWithHTable(tableName,new TableCallback<ResultIterable>(){
    public ResultIterable doWithHBaseAdmin(    HTableInterface hTable) throws Exception {
      Scan scan=new Scan();
      if (columnFamilyName != null) {
        if (columnQualifier != null) {
          scan.addColumn(columnFamilyName.getBytes(UTF8),columnQualifier.getBytes(UTF8));
        }
 else {
          scan.addFamily(columnFamilyName.getBytes(UTF8));
        }
      }
      if (timestamp != null) {
        if (maxTimestamp != null) {
          scan.setTimeRange(timestamp,maxTimestamp);
        }
 else {
          scan.setTimeStamp(timestamp);
        }
      }
      if (caching != null) {
        scan.setCaching(caching);
      }
      scan.setCacheBlocks(cacheBlocks);
      scan.setMaxVersions(maxVersions);
      if (startRow != null) {
        scan.setStartRow(startRow.getBytes(UTF8));
      }
      if (stopRow != null) {
        scan.setStopRow(stopRow.getBytes(UTF8));
      }
      return new ResultIterable(scan,fetchSize,hTable);
    }
  }
);
}","/** 
 * @see HBaseService#scan(String,String,String,Long,Long,Integer,Integer,Boolean,Integer,String,String)
 */
public Iterable<Result> scan(final String tableName,final String columnFamilyName,final String columnQualifier,final Long timestamp,final Long maxTimestamp,final Integer caching,final boolean cacheBlocks,final int maxVersions,final String startRow,final String stopRow,final int fetchSize){
  return doWithHTable(tableName,new TableCallback<ResultIterable>(){
    public ResultIterable doWithHBaseAdmin(    HTableInterface hTable) throws Exception {
      Scan scan=new Scan();
      if (columnFamilyName != null) {
        if (columnQualifier != null) {
          scan.addColumn(columnFamilyName.getBytes(UTF8),columnQualifier.getBytes(UTF8));
        }
 else {
          scan.addFamily(columnFamilyName.getBytes(UTF8));
        }
      }
      if (timestamp != null) {
        if (maxTimestamp != null) {
          scan.setTimeRange(timestamp,maxTimestamp);
        }
 else {
          scan.setTimeStamp(timestamp);
        }
      }
      if (caching != null) {
        scan.setCaching(caching);
      }
      scan.setCacheBlocks(cacheBlocks);
      scan.setMaxVersions(maxVersions);
      if (startRow != null) {
        scan.setStartRow(startRow.getBytes(UTF8));
      }
      if (stopRow != null) {
        scan.setStopRow(stopRow.getBytes(UTF8));
      }
      return new ResultIterable(scan,fetchSize,hTable);
    }
  }
,false);
}",0.99792817679558
153650,"/** 
 * Retain and release the   {@link HTable} 
 */
private <T>T doWithHTable(final String tableName,final TableCallback<T> callback){
  Validate.isTrue(StringUtils.isNotBlank(tableName));
  Validate.notNull(callback);
  HTableInterface hTable=null;
  try {
    hTable=createHTable(tableName);
    return callback.doWithHBaseAdmin(hTable);
  }
 catch (  Exception e) {
    throw new HBaseServiceException(e);
  }
 finally {
    if (hTable != null) {
      try {
        hTable.close();
      }
 catch (      IOException e) {
        throw new HBaseServiceException(e);
      }
    }
  }
}","/** 
 * Retain and release the   {@link HTable} 
 */
private <T>T doWithHTable(final String tableName,final TableCallback<T> callback,boolean closeHtable){
  Validate.isTrue(StringUtils.isNotBlank(tableName));
  Validate.notNull(callback);
  HTableInterface hTable=null;
  try {
    hTable=createHTable(tableName);
    return callback.doWithHBaseAdmin(hTable);
  }
 catch (  Exception e) {
    throw new HBaseServiceException(e);
  }
 finally {
    if (hTable != null) {
      try {
        hTable.close();
      }
 catch (      IOException e) {
        throw new HBaseServiceException(e);
      }
    }
  }
}",0.98330550918197
153651,"@Override protected boolean hasNextPage(ScannerAndResults page){
  return page.getResults().length == fetchSize;
}","@Override protected boolean hasNextPage(ScannerAndResults page){
  boolean hasNextPage=page.getResults().length == fetchSize;
  if (!hasNextPage) {
    closeHTable();
  }
  return hasNextPage;
}",0.7142857142857143
153652,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  String commandName=command.getName().toLowerCase();
  Player player=null;
  String playerName=""String_Node_Str"";
  boolean isPlayer=(sender instanceof Player);
  if (isPlayer) {
    player=(Player)sender;
    playerName=player.getName();
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF)) && args.length > 0) {
    Player[] list=getServer().getOnlinePlayers();
    String reason=combineSplit(0,args,""String_Node_Str"");
    if (list != null) {
      for (int x=0; x < list.length; x++) {
        if (list[x] != null)         list[x].kickPlayer(reason);
      }
    }
    this.log(playerName + ""String_Node_Str"" + reason);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    irc.getBot().quitServer(""String_Node_Str"");
    this.ircEnable=false;
    irc.restart=true;
    return true;
  }
  if (isPlayer && hasFlag(player,Flag.JAILED)) {
    if (commandName.equals(""String_Node_Str"")) {
      users.getUser(player).dropFlag(Flag.JAILED);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : rules) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : help) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : motd) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : blacklist) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : intro) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.TRUSTED)) {
    String playersName=player.getName().toLowerCase();
    if (tpProtect.getBoolean(playersName,false)) {
      tpProtect.setBoolean(playersName,false);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      tpProtect.setBoolean(playersName,true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && (hasFlag(player,Flag.FUN))&& args.length > 0) {
    List<Player> inquest=this.minitrue.matchPlayer(args[0],this.hasFlag(player,Flag.ADMIN));
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (minitrue.invisible(inquestion) && !hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!hasFlag(player,Flag.ADMIN) && inquestion != null && (hasFlag(inquestion,Flag.TRUSTED)) && tpProtect.getBoolean(inquestion.getName().toLowerCase(),false)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.teleport(inquestion.getLocation());
        player.sendMessage(""String_Node_Str"");
        this.log(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName());
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    List<Player> inquest=this.minitrue.matchPlayer(args[0],true);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        inquestion.teleport(player.getLocation());
        inquestion.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + inquestion.getName());
        this.sendAdminPlusLog(ChatColor.AQUA + playerName + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.FUN))) {
    if (isPlayer && (!hasFlag(player,Flag.ADMIN) || args.length < 1)) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.teleport(player.getWorld().getSpawnLocation());
    }
 else     if (args.length == 1) {
      List<Player> inquest=this.minitrue.matchPlayer(args[0],true);
      if (inquest.size() == 1) {
        Player inquestion=inquest.get(0);
        inquestion.teleport(inquestion.getWorld().getSpawnLocation());
        inquestion.sendMessage(ChatColor.RED + ""String_Node_Str"");
        this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    if (args.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> inquest=this.minitrue.matchPlayer(args[0],this.hasFlag(player,Flag.ADMIN));
    if (inquest.size() == 1) {
      this.chat.handlePMsg(player,inquest.get(0),this.combineSplit(1,args,""String_Node_Str""));
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && hasFlag(player,Flag.FUN)) {
    if (args.length < 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player playerFor=null;
    Material material=null;
    int count=1;
    String[] gData=null;
    Byte bytedata=null;
    if (args.length >= 1) {
      gData=args[0].split(""String_Node_Str"");
      material=Material.matchMaterial(gData[0]);
      if (gData.length == 2) {
        try {
          bytedata=Byte.valueOf(gData[1]);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(""String_Node_Str"");
        }
      }
    }
    if (args.length >= 2) {
      try {
        count=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException ex) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
        return false;
      }
    }
    if (args.length == 3) {
      playerFor=getServer().getPlayer(args[2]);
      if (playerFor == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[2]+ ""String_Node_Str"");
        return false;
      }
    }
 else {
      playerFor=player;
    }
    if (material == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    if (!hasFlag(player,Flag.ADMIN) && isOnSummonlist(material.getId())) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (bytedata != null) {
      playerFor.getInventory().addItem(new ItemStack(material,count,(short)0,bytedata));
    }
 else {
      playerFor.getInventory().addItem(new ItemStack(material,count));
    }
    player.sendMessage(""String_Node_Str"" + playerFor.getDisplayName() + ""String_Node_Str""+ count+ ""String_Node_Str""+ material.toString());
    this.log(""String_Node_Str"" + playerName + ""String_Node_Str""+ count+ ""String_Node_Str""+ material.toString());
    if ((isOnWatchlist(material.getId())) && (count > 10 || count < 1)) {
      irc.ircAdminMsg(""String_Node_Str"" + count + ""String_Node_Str""+ material.toString()+ ""String_Node_Str""+ playerName);
      this.sendAdminPlusLog(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ count+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ material.toString()+ ""String_Node_Str""+ ChatColor.WHITE+ playerName);
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length != 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    long desired;
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      desired=0;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      desired=13000;
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    long curTime=getServer().getWorlds().get(0).getTime();
    long margin=(desired - curTime) % 24000;
    if (margin < 0) {
      margin+=24000;
    }
    getServer().getWorlds().get(0).setTime(curTime + margin);
    this.sendAdminPlusLog(ChatColor.DARK_AQUA + playerName + ""String_Node_Str"");
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str""))) {
    minitrue.who(sender);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String message=combineSplit(0,args,""String_Node_Str"");
    chat.aMsg(playerName,message);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    if (args.length > 0) {
      String theReport=combineSplit(0,args,""String_Node_Str"");
      if (!this.hasFlag(player,Flag.ADMIN)) {
        Report report=new Report(0,player.getLocation(),player.getName(),theReport,(new Date().getTime()) / 1000,false);
        reports.addReport(report);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        String message=ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ playerName+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ theReport;
        this.sendAdminPlusLog(message);
        this.irc.ircAdminMsg(ChatColor.stripColor(message));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      ArrayList<Report> reps=reports.getReports();
      int size=reps.size();
      if (size == 0) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + size+ ""String_Node_Str"");
      for (      Report r : reps) {
        if (!r.closed()) {
          Location location=r.getLocation();
          String x=ChatColor.GOLD.toString() + location.getBlockX() + ChatColor.DARK_PURPLE+ ""String_Node_Str"";
          String y=ChatColor.GOLD.toString() + location.getBlockY() + ChatColor.DARK_PURPLE+ ""String_Node_Str"";
          String z=ChatColor.GOLD.toString() + location.getBlockZ() + ChatColor.DARK_PURPLE;
          player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + r.getID()+ ""String_Node_Str""+ x+ y+ z+ ""String_Node_Str""+ ChatColor.GOLD+ r.getUser()+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ r.getMessage());
        }
      }
    }
 else {
      String action=args[0].toLowerCase();
      if (action.equals(""String_Node_Str"")) {
        if (args.length > 2) {
          int id=Integer.parseInt(args[1]);
          if (id != 0) {
            this.reports.close(id,playerName,this.combineSplit(2,args,""String_Node_Str""));
            player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
        }
      }
      if (action.equals(""String_Node_Str"")) {
        if (args.length > 1) {
          Report report=this.reports.getReport(Integer.valueOf(args[1]));
          if (report != null) {
            player.teleport(report.getLocation());
            player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
 else {
            player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
        }
      }
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String text=""String_Node_Str"";
    text+=combineSplit(0,args,""String_Node_Str"");
    chat.gMsg(playerName,text);
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 2) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Location loc;
    if (!isPlayer) {
      loc=new Location(getServer().getWorlds().get(0),0,0,0);
    }
 else {
      loc=player.getLocation();
    }
    kickbans.callBan(playerName,args,loc);
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 2) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    kickbans.callKick(args[0],playerName,combineSplit(1,args,""String_Node_Str""));
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 2) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Location loc;
    if (!isPlayer) {
      loc=new Location(getServer().getWorlds().get(0),0,0,0);
    }
 else {
      loc=player.getLocation();
    }
    kickbans.callAddBan(playerName,args,loc);
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String name=args[0];
    kickbans.unban(playerName,name);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    if (this.hasFlag(player,Flag.ADMIN)) {
      if (args.length < 2 || !(args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String name=args[1];
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        users.addFlag(name,Flag.TRUSTED);
      }
 else {
        users.dropFlag(name,Flag.TRUSTED);
      }
      String tolog=ChatColor.RED + player.getName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ args[0]+ ""String_Node_Str""+ Flag.TRUSTED.getDescription();
      this.sendAdminPlusLog(tolog);
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> match=this.minitrue.matchPlayer(args[0],true);
    if (match.size() != 1 || match.get(0) == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str"";
    for (    Flag f : users.getAllFlags(who)) {
      message+=f.getDescription() + ""String_Node_Str"";
    }
    sender.sendMessage(ChatColor.RED + message);
    this.log(playerName + ""String_Node_Str"" + who.getName());
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> match=this.minitrue.matchPlayer(args[0],true);
    if (match.size() != 1 || match.get(0) == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str""+ users.getUser(who).getGroup();
    sender.sendMessage(ChatColor.RED + message);
    this.log(playerName + ""String_Node_Str"" + who.getName());
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && args.length > 0) {
    this.chat.handleChat(player,this.combineSplit(0,args,""String_Node_Str""),true);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    irc.loadIRCAdmins();
    chat.msgByFlag(Flag.SRSTAFF,ChatColor.RED + ""String_Node_Str"" + playerName);
    this.log(playerName + ""String_Node_Str"");
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    loadData();
    chat.msgByFlag(Flag.SRSTAFF,""String_Node_Str"" + playerName);
    this.log(""String_Node_Str"" + playerName);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    if (!maintenance) {
      this.sendAdminPlusLog(ChatColor.AQUA + playerName + ""String_Node_Str"");
      maintenance=true;
      for (      Player p : getServer().getOnlinePlayers()) {
        if (p != null && !hasFlag(p,Flag.ADMIN)) {
          p.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
          p.kickPlayer(""String_Node_Str"");
        }
      }
    }
 else {
      this.sendAdminPlusLog(ChatColor.AQUA + playerName + ""String_Node_Str"");
      maintenance=false;
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    if (args.length < 3) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String action=args[1];
    if (!(action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str""))) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String name=args[0];
    char flag=args[2].charAt(0);
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      users.addFlag(name,Flag.byChar(flag));
    }
 else {
      users.dropFlag(name,Flag.byChar(flag));
    }
    String tolog=ChatColor.RED + playerName + ""String_Node_Str""+ name+ ""String_Node_Str""+ action+ ""String_Node_Str""+ Flag.byChar(flag).getDescription();
    chat.msgByFlag(Flag.ADMIN,tolog);
    this.log(tolog);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      String warps_s=warps.listWarps(player);
      if (!warps_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warps_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      String target=args[0];
      Warp warp=warps.getPublicWarp(target);
      if (warp != null && (hasFlag(player,warp.getFlag()) || warp.getFlag().equals(Flag.Z_SPAREWARP_DESIGNATION))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ target);
        this.log(ChatColor.AQUA + ""String_Node_Str"" + playerName+ ""String_Node_Str""+ target);
        player.teleport(warp.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      String homes_s=warps.listHomes(player.getName());
      if (!homes_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ homes_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      Warp home=warps.getUserWarp(player.getName(),args[0]);
      if (home != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleport(home.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Flag flag=Flag.Z_SPAREWARP_DESIGNATION;
      if (args.length > 1) {
        flag=Flag.byChar(args[1].charAt(0));
      }
      Warp newWarp=new Warp(args[0],player.getName(),player.getLocation(),flag);
      warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Warp newWarp=new Warp(args[0],player.getName(),player.getLocation(),Flag.byChar('0'));
      warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)&& args.length > 0) {
    String toRemove=args[0];
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
    warps.killWarp(warps.getPublicWarp(toRemove));
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      String toRemove=args[0];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
      warps.killWarp(warps.getUserWarp(player.getName(),toRemove));
    }
    if (args.length == 2 && hasFlag(player,Flag.ADMIN)) {
      String toRemove=args[0];
      String plr=args[1];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove+ ""String_Node_Str""+ plr);
      warps.killWarp(warps.getUserWarp(plr,toRemove));
    }
    return true;
  }
  if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    if (args.length == 1) {
      String target=args[0];
      boolean isOnline=users.isOnline(target);
      if (!isOnline) {
        warps.loadPlayer(target);
      }
      player.sendMessage(ChatColor.RED + target + ""String_Node_Str""+ ChatColor.WHITE+ warps.listHomes(target));
      if (!isOnline) {
        warps.dropPlayer(target);
      }
    }
    if (args.length == 2) {
      String target=args[0];
      boolean isOnline=users.isOnline(target);
      if (!isOnline) {
        warps.loadPlayer(target);
      }
      Warp warptarget=warps.getUserWarp(target,args[1]);
      if (warptarget != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleport(warptarget.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!isOnline) {
        warps.dropPlayer(target);
      }
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (isPlayer && args.length == 0) {
      player.getInventory().clear();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      this.log(ChatColor.RED + player.getName() + ""String_Node_Str"");
    }
 else     if (args.length == 1 && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
      List<Player> targets=this.minitrue.matchPlayer(args[0],true);
      if (targets.size() == 1) {
        Player target=targets.get(0);
        PlayerInventory i=player.getInventory();
        i.setBoots(null);
        i.setChestplate(null);
        i.setHelmet(null);
        i.setLeggings(null);
        target.getInventory().clear();
        target.sendMessage(ChatColor.RED + ""String_Node_Str"");
        this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ target.getName());
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + targets.size()+ ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    player.getInventory().clear(player.getInventory().getHeldItemSlot());
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.SRSTAFF)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      CreatureType creat=CreatureType.fromName(args[0]);
      if (creat != null) {
        Block block=player.getTargetBlock(null,50);
        if (block != null) {
          Location bloc=block.getLocation();
          if (bloc.getY() < 126) {
            Location loc=new Location(bloc.getWorld(),bloc.getX(),bloc.getY() + 1,bloc.getZ());
            player.getWorld().spawnCreature(loc,CreatureType.fromName(args[0]));
          }
        }
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
    if (args.length > 0 && args[0].equalsIgnoreCase(""String_Node_Str""))     chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + playerName+ ""String_Node_Str""+ playerName);
    users.getUser(playerName).tempSetColor(ChatColor.RED);
    damage.protect(playerName);
    player.getInventory().setHelmet(new ItemStack(51));
    this.users.addFlagLocal(playerName,Flag.GODMODE);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    String name=player.getName();
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
    users.getUser(name).restoreColor();
    player.getInventory().setHelmet(new ItemStack(Material.GRASS,1));
    if (!safemode) {
      damage.danger(playerName);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    this.users.dropFlagLocal(playerName,Flag.GODMODE);
    return true;
  }
  if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && hasFlag(player,Flag.ADMIN)) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      player.teleport(new Location(player.getWorld(),Double.valueOf(args[0]),Double.valueOf(args[1]),Double.valueOf(args[2]),0,0));
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      List<Player> possible=this.minitrue.matchPlayer(args[0],true);
      if (possible.size() == 1) {
        Player who=possible.get(0);
        Location loc=who.getLocation();
        sender.sendMessage(ChatColor.RED + who.getName() + ""String_Node_Str""+ loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
      }
 else {
        sender.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    this.sendAdminPlusLog(playerName + ""String_Node_Str"");
    if (this.ircEnable) {
      irc.getBot().sendMessage(this.ircAdminChannel,""String_Node_Str"");
      irc.getBot().sendMessage(this.ircChannel,""String_Node_Str"");
      irc.getBot().quitServer(""String_Node_Str"");
    }
    ircEnable=false;
    kickbans.kickAll(""String_Node_Str"");
    this.getServer().dispatchCommand(new ConsoleCommandSender(this.getServer()),""String_Node_Str"");
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && isPlayer && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
      return true;
    }
    String name=args[0];
    this.log(ChatColor.LIGHT_PURPLE + playerName + ""String_Node_Str""+ name);
    this.banCoop.lookup(name,player);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && isPlayer && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
      return true;
    }
    String target=args[0];
    this.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + playerName+ ""String_Node_Str""+ target);
    String x=""String_Node_Str"";
    boolean allbans=false;
    if (args.length > 1 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      allbans=true;
    }
    ArrayList<Ban> bans=this.mysql.getBans(target,allbans);
    ArrayList<String> messages=new ArrayList<String>();
    boolean banned=false;
    for (    Ban ban : bans) {
      if (ban.isBanned()) {
        x=ChatColor.DARK_RED + ""String_Node_Str"";
        banned=true;
      }
 else {
        x=ChatColor.GREEN + ""String_Node_Str"";
      }
      String c=ChatColor.DARK_AQUA.toString();
      messages.add(c + ""String_Node_Str"" + x+ c+ ""String_Node_Str""+ this.shortdateformat.format(new Date(ban.getTimeOfBan() * 1000))+ ""String_Node_Str""+ ChatColor.GOLD+ ban.getReason());
    }
    String c2=ChatColor.GREEN.toString();
    if (banned) {
      c2=ChatColor.RED.toString();
    }
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GOLD+ bans.size()+ ChatColor.AQUA+ ""String_Node_Str""+ c2+ target);
    for (    String message : messages) {
      player.sendMessage(message);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 1) {
      String lastIP=mysql.IPGetLast(args[0]);
      if (!lastIP.isEmpty()) {
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ args[0]+ ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.WHITE+ lastIP);
        HashMap<String,Long> nameDates=mysql.IPGetNamesOnIP(lastIP);
        if (!nameDates.isEmpty()) {
          for (          String key : nameDates.keySet()) {
            if (!key.isEmpty() && key.toLowerCase() != ""String_Node_Str"") {
              Long time=nameDates.get(key);
              Date date=new Date(time);
              player.sendMessage(ChatColor.AQUA + key + ""String_Node_Str""+ ChatColor.BLUE+ date);
            }
          }
        }
      }
 else {
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> results=this.minitrue.matchPlayer(args[0],true);
    if (results.size() == 1) {
      Player target=results.get(0);
      boolean weather=target.getWorld().isThundering();
      this.damage.danger(target.getName());
      this.damage.addToTimer(target.getName());
      target.getWorld().strikeLightning(target.getLocation());
      this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ target.getName());
      target.sendMessage(ChatColor.RED + ""String_Node_Str"");
      target.getWorld().setStorm(weather);
    }
 else     if (results.size() > 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (isPlayer) && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      player.getWorld().setStorm(true);
      this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
      this.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"");
    }
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      player.getWorld().setStorm(false);
      this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
      this.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) {
    kickbans.ixrai(playerName,commandName);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && !isPlayer) {
    if (args.length < 2) {
      return false;
    }
    irc.getBot().sendMessage(args[0],this.combineSplit(1,args,""String_Node_Str""));
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF) || playerName.equalsIgnoreCase(""String_Node_Str""))) {
    String message=""String_Node_Str"" + ChatColor.GOLD;
switch (this.random.nextInt(5)) {
case 0:
      message+=""String_Node_Str"" + playerName + ""String_Node_Str"";
    break;
case 1:
  message+=""String_Node_Str"" + playerName + ""String_Node_Str"";
break;
case 2:
message+=""String_Node_Str"" + playerName + ""String_Node_Str"";
break;
case 3:
message+=playerName + ""String_Node_Str"";
break;
case 4:
message+=playerName + ""String_Node_Str"";
break;
}
if (playerName.equalsIgnoreCase(""String_Node_Str"") && random.nextBoolean()) {
if (random.nextBoolean()) message=ChatColor.GOLD + ""String_Node_Str"";
 else message=ChatColor.GOLD + ""String_Node_Str"";
}
chat.msgAll(message);
this.log(ChatColor.GOLD + playerName + ""String_Node_Str"");
return true;
}
if (commandName.equals(""String_Node_Str"") && isPlayer && hasFlag(player,Flag.ADMIN)) {
if (hasFlag(player,Flag.THOR)) {
player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
users.dropFlagLocal(playerName,Flag.THOR);
}
 else {
player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
users.addFlagLocal(playerName,Flag.THOR);
}
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
if (args.length == 0) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
List<Player> list=this.minitrue.matchPlayer(args[0],true);
if (list.size() == 0) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (list.size() > 1) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player target=list.get(0);
if (target != null) {
target.damage(9001);
target.sendMessage(ChatColor.RED + ""String_Node_Str"");
this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ target.getName());
}
return true;
}
if (commandName.equals(""String_Node_Str"")) {
if (!isPlayer || this.hasFlag(player,Flag.ADMIN)) {
sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}
 else {
if (hasFlag(player,Flag.TRUSTED)) {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}
 else {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}
}
return true;
}
if (isPlayer && commandName.equals(""String_Node_Str"")) {
if (hasFlag(player,Flag.ADMIN)) minitrue.vanish(player);
return true;
}
if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
if (hasFlag(player,Flag.TOOLS)) {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
users.dropFlagLocal(playerName,Flag.TOOLS);
}
 else {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
users.addFlagLocal(playerName,Flag.TOOLS);
}
return true;
}
if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str""))) {
Location loc=player.getLocation();
String x=""String_Node_Str"" + ChatColor.GOLD + (int)loc.getX()+ ChatColor.DARK_AQUA;
String y=""String_Node_Str"" + ChatColor.GOLD + (int)loc.getY()+ ChatColor.DARK_AQUA;
String z=""String_Node_Str"" + ChatColor.GOLD + (int)loc.getZ();
player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"" + x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z);
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
if (args.length < 3) {
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
player.getWorld().setSpawnLocation(Integer.valueOf(args[0]),Integer.valueOf(args[1]),Integer.valueOf(args[2]));
this.sendAdminPlusLog(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str""+ args[1]+ ""String_Node_Str""+ args[2]+ ""String_Node_Str""+ playerName);
return true;
}
if (isPlayer && commandName.equals(""String_Node_Str"")) {
User user=users.getUser(player);
if (user != null && args.length == 1) {
String safeword=user.getSafeWord();
if (!safeword.equalsIgnoreCase(""String_Node_Str"") && safeword.equals(args[0])) {
this.users.clear(playerName);
this.sendAdminPlusLog(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + playerName+ ""String_Node_Str"");
return true;
}
}
if (users.isCleared(playerName)) {
this.sendAdminPlusLog(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + playerName+ ""String_Node_Str"");
}
this.users.playerReset(playerName);
this.minitrue.vanish.updateInvisible(player);
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
if (args.length != 1) {
sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
return true;
}
List<Player> listy=this.getServer().matchPlayer(args[0]);
if (listy.size() != 1) {
sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
return true;
}
Player target=listy.get(0);
this.panda.harass(target);
this.sendAdminPlusLog(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ChatColor.AQUA+ ""String_Node_Str""+ playerName+ ""String_Node_Str"");
this.irc.ircAdminMsg(""String_Node_Str"" + target.getName() + ""String_Node_Str""+ playerName+ ""String_Node_Str"");
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
String messageBit;
if (this.chat.muteAll) {
messageBit=""String_Node_Str"";
}
 else {
messageBit=""String_Node_Str"";
}
this.sendAdminPlusLog(ChatColor.YELLOW + playerName + messageBit);
this.chat.msgByFlagless(Flag.ADMIN,ChatColor.YELLOW + ""String_Node_Str"" + messageBit);
this.chat.muteAll=!this.chat.muteAll;
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
String messageBit=""String_Node_Str"";
if (args.length < 1) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
String targetString=args[0];
List<Player> matches=this.getServer().matchPlayer(targetString);
if (matches == null || matches.size() == 0) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + targetString);
return true;
}
if (matches.size() > 1) {
sender.sendMessage(ChatColor.RED + String.valueOf(matches.size()) + ""String_Node_Str""+ targetString);
return true;
}
Player target=matches.get(0);
String targetName=target.getName();
boolean muted=this.hasFlag(targetName,Flag.MUTED);
if (muted) {
messageBit=""String_Node_Str"";
this.users.dropFlagLocal(targetName,Flag.MUTED);
}
 else {
this.users.addFlagLocal(targetName,Flag.MUTED);
}
target.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + messageBit.toUpperCase()+ ""String_Node_Str"");
this.sendAdminPlusLog(ChatColor.YELLOW + playerName + ""String_Node_Str""+ messageBit+ ""String_Node_Str""+ targetName);
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
if (args.length < 1) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
String message=ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + this.combineSplit(0,args,""String_Node_Str"");
this.log(message);
this.chat.msgAll(message);
return true;
}
if (commandName.equals(""String_Node_Str"") && isPlayer && this.hasFlag(player,Flag.ADMIN)) {
String message;
if (this.hasFlag(player,Flag.NSA)) {
message=ChatColor.DARK_AQUA + playerName + ChatColor.AQUA+ ""String_Node_Str"";
this.users.dropFlagLocal(playerName,Flag.NSA);
}
 else {
message=ChatColor.DARK_AQUA + playerName + ChatColor.AQUA+ ""String_Node_Str"";
this.users.addFlagLocal(playerName,Flag.NSA);
}
this.sendAdminPlusLog(message);
return true;
}
if (this.servernumber == 2 && commandName.equals(""String_Node_Str"")) {
Warp target=this.warps.getClosestWarp(player.getLocation());
String name=target.getName();
if (args.length == 1 && args[0].equalsIgnoreCase(""String_Node_Str"")) {
player.teleport(target.getLocation());
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
}
 else {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
}
}
return true;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  String commandName=command.getName().toLowerCase();
  Player player=null;
  String playerName=""String_Node_Str"";
  boolean isPlayer=(sender instanceof Player);
  if (isPlayer) {
    player=(Player)sender;
    playerName=player.getName();
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF)) && args.length > 0) {
    Player[] list=getServer().getOnlinePlayers();
    String reason=combineSplit(0,args,""String_Node_Str"");
    if (list != null) {
      for (int x=0; x < list.length; x++) {
        if (list[x] != null)         list[x].kickPlayer(reason);
      }
    }
    this.log(playerName + ""String_Node_Str"" + reason);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    irc.getBot().quitServer(""String_Node_Str"");
    this.ircEnable=false;
    irc.restart=true;
    return true;
  }
  if (isPlayer && hasFlag(player,Flag.JAILED)) {
    if (commandName.equals(""String_Node_Str"")) {
      users.getUser(player).dropFlag(Flag.JAILED);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : rules) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : help) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : motd) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : blacklist) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    for (    String line : intro) {
      player.sendMessage(line);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.TRUSTED)) {
    String playersName=player.getName().toLowerCase();
    if (tpProtect.getBoolean(playersName,false)) {
      tpProtect.setBoolean(playersName,false);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      tpProtect.setBoolean(playersName,true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && (hasFlag(player,Flag.FUN))&& args.length > 0) {
    List<Player> inquest=this.minitrue.matchPlayer(args[0],this.hasFlag(player,Flag.ADMIN));
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (minitrue.invisible(inquestion) && !hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!hasFlag(player,Flag.ADMIN) && inquestion != null && (hasFlag(inquestion,Flag.TRUSTED)) && tpProtect.getBoolean(inquestion.getName().toLowerCase(),false)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.teleport(inquestion.getLocation());
        player.sendMessage(""String_Node_Str"");
        this.log(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName());
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    List<Player> inquest=this.minitrue.matchPlayer(args[0],true);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        inquestion.teleport(player.getLocation());
        inquestion.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + inquestion.getName());
        this.sendAdminPlusLog(ChatColor.AQUA + playerName + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.FUN))) {
    if (isPlayer && (!hasFlag(player,Flag.ADMIN) || args.length < 1)) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.teleport(player.getWorld().getSpawnLocation());
    }
 else     if (args.length == 1) {
      List<Player> inquest=this.minitrue.matchPlayer(args[0],true);
      if (inquest.size() == 1) {
        Player inquestion=inquest.get(0);
        inquestion.teleport(inquestion.getWorld().getSpawnLocation());
        inquestion.sendMessage(ChatColor.RED + ""String_Node_Str"");
        this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    if (args.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> inquest=this.minitrue.matchPlayer(args[0],this.hasFlag(player,Flag.ADMIN));
    if (inquest.size() == 1) {
      this.chat.handlePMsg(player,inquest.get(0),this.combineSplit(1,args,""String_Node_Str""));
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && hasFlag(player,Flag.FUN)) {
    if (args.length < 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player playerFor=null;
    Material material=null;
    int count=1;
    String[] gData=null;
    Byte bytedata=null;
    if (args.length >= 1) {
      gData=args[0].split(""String_Node_Str"");
      material=Material.matchMaterial(gData[0]);
      if (gData.length == 2) {
        try {
          bytedata=Byte.valueOf(gData[1]);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(""String_Node_Str"");
        }
      }
    }
    if (args.length >= 2) {
      try {
        count=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException ex) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
        return false;
      }
    }
    if (args.length == 3) {
      playerFor=getServer().getPlayer(args[2]);
      if (playerFor == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[2]+ ""String_Node_Str"");
        return false;
      }
    }
 else {
      playerFor=player;
    }
    if (material == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    if (!hasFlag(player,Flag.ADMIN) && isOnSummonlist(material.getId())) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (bytedata != null) {
      playerFor.getInventory().addItem(new ItemStack(material,count,(short)0,bytedata));
    }
 else {
      playerFor.getInventory().addItem(new ItemStack(material,count));
    }
    player.sendMessage(""String_Node_Str"" + playerFor.getDisplayName() + ""String_Node_Str""+ count+ ""String_Node_Str""+ material.toString());
    this.log(""String_Node_Str"" + playerName + ""String_Node_Str""+ count+ ""String_Node_Str""+ material.toString());
    if ((isOnWatchlist(material.getId())) && (count > 10 || count < 1)) {
      irc.ircAdminMsg(""String_Node_Str"" + count + ""String_Node_Str""+ material.toString()+ ""String_Node_Str""+ playerName);
      this.sendAdminPlusLog(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ count+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ material.toString()+ ""String_Node_Str""+ ChatColor.WHITE+ playerName);
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length != 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    long desired;
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      desired=0;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      desired=13000;
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    long curTime=getServer().getWorlds().get(0).getTime();
    long margin=(desired - curTime) % 24000;
    if (margin < 0) {
      margin+=24000;
    }
    getServer().getWorlds().get(0).setTime(curTime + margin);
    this.sendAdminPlusLog(ChatColor.DARK_AQUA + playerName + ""String_Node_Str"");
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str""))) {
    minitrue.who(sender);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String message=combineSplit(0,args,""String_Node_Str"");
    chat.aMsg(playerName,message);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    if (args.length > 0) {
      String theReport=combineSplit(0,args,""String_Node_Str"");
      if (!this.hasFlag(player,Flag.ADMIN)) {
        Report report=new Report(0,player.getLocation(),player.getName(),theReport,(new Date().getTime()) / 1000,false);
        reports.addReport(report);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        String message=ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ playerName+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ theReport;
        this.sendAdminPlusLog(message);
        this.irc.ircAdminMsg(ChatColor.stripColor(message));
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      ArrayList<Report> reps=reports.getReports();
      int size=reps.size();
      if (size == 0) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + size+ ""String_Node_Str"");
      for (      Report r : reps) {
        if (!r.closed()) {
          Location location=r.getLocation();
          String x=ChatColor.GOLD.toString() + location.getBlockX() + ChatColor.DARK_PURPLE+ ""String_Node_Str"";
          String y=ChatColor.GOLD.toString() + location.getBlockY() + ChatColor.DARK_PURPLE+ ""String_Node_Str"";
          String z=ChatColor.GOLD.toString() + location.getBlockZ() + ChatColor.DARK_PURPLE;
          player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + r.getID()+ ""String_Node_Str""+ x+ y+ z+ ""String_Node_Str""+ ChatColor.GOLD+ r.getUser()+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ r.getMessage());
        }
      }
    }
 else {
      String action=args[0].toLowerCase();
      if (action.equals(""String_Node_Str"")) {
        if (args.length > 2) {
          int id=Integer.parseInt(args[1]);
          if (id != 0) {
            this.reports.close(id,playerName,this.combineSplit(2,args,""String_Node_Str""));
            player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
        }
      }
      if (action.equals(""String_Node_Str"")) {
        if (args.length > 1) {
          Report report=this.reports.getReport(Integer.valueOf(args[1]));
          if (report != null) {
            player.teleport(report.getLocation());
            player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
 else {
            player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
        }
      }
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String text=""String_Node_Str"";
    text+=combineSplit(0,args,""String_Node_Str"");
    chat.gMsg(playerName,text);
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 2) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Location loc;
    if (!isPlayer) {
      loc=new Location(getServer().getWorlds().get(0),0,0,0);
    }
 else {
      loc=player.getLocation();
    }
    kickbans.callBan(playerName,args,loc);
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 2) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    kickbans.callKick(args[0],playerName,combineSplit(1,args,""String_Node_Str""));
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 2) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Location loc;
    if (!isPlayer) {
      loc=new Location(getServer().getWorlds().get(0),0,0,0);
    }
 else {
      loc=player.getLocation();
    }
    kickbans.callAddBan(playerName,args,loc);
    return true;
  }
  if ((commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length < 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String name=args[0];
    kickbans.unban(playerName,name);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    if (this.hasFlag(player,Flag.ADMIN)) {
      if (args.length < 2 || !(args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      String name=args[1];
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        users.addFlag(name,Flag.TRUSTED);
      }
 else {
        users.dropFlag(name,Flag.TRUSTED);
      }
      String tolog=ChatColor.RED + player.getName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ args[0]+ ""String_Node_Str""+ Flag.TRUSTED.getDescription();
      this.sendAdminPlusLog(tolog);
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> match=this.minitrue.matchPlayer(args[0],true);
    if (match.size() != 1 || match.get(0) == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str"";
    for (    Flag f : users.getAllFlags(who)) {
      message+=f.getDescription() + ""String_Node_Str"";
    }
    sender.sendMessage(ChatColor.RED + message);
    this.log(playerName + ""String_Node_Str"" + who.getName());
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> match=this.minitrue.matchPlayer(args[0],true);
    if (match.size() != 1 || match.get(0) == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str""+ users.getUser(who).getGroup();
    sender.sendMessage(ChatColor.RED + message);
    this.log(playerName + ""String_Node_Str"" + who.getName());
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && args.length > 0) {
    this.chat.handleChat(player,this.combineSplit(0,args,""String_Node_Str""),true);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    irc.loadIRCAdmins();
    chat.msgByFlag(Flag.SRSTAFF,ChatColor.RED + ""String_Node_Str"" + playerName);
    this.log(playerName + ""String_Node_Str"");
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    loadData();
    chat.msgByFlag(Flag.SRSTAFF,""String_Node_Str"" + playerName);
    this.log(""String_Node_Str"" + playerName);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    if (!maintenance) {
      this.sendAdminPlusLog(ChatColor.AQUA + playerName + ""String_Node_Str"");
      maintenance=true;
      for (      Player p : getServer().getOnlinePlayers()) {
        if (p != null && !hasFlag(p,Flag.ADMIN)) {
          p.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
          p.kickPlayer(""String_Node_Str"");
        }
      }
    }
 else {
      this.sendAdminPlusLog(ChatColor.AQUA + playerName + ""String_Node_Str"");
      maintenance=false;
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    if (args.length < 3) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String action=args[1];
    if (!(action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str""))) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    String name=args[0];
    char flag=args[2].charAt(0);
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      users.addFlag(name,Flag.byChar(flag));
    }
 else {
      users.dropFlag(name,Flag.byChar(flag));
    }
    String tolog=ChatColor.RED + playerName + ""String_Node_Str""+ name+ ""String_Node_Str""+ action+ ""String_Node_Str""+ Flag.byChar(flag).getDescription();
    chat.msgByFlag(Flag.ADMIN,tolog);
    this.log(tolog);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      String warps_s=warps.listWarps(player);
      if (!warps_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warps_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      String target=args[0];
      Warp warp=warps.getPublicWarp(target);
      if (warp != null && (hasFlag(player,warp.getFlag()) || warp.getFlag().equals(Flag.Z_SPAREWARP_DESIGNATION))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ target);
        this.log(ChatColor.AQUA + ""String_Node_Str"" + playerName+ ""String_Node_Str""+ target);
        player.teleport(warp.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      String homes_s=warps.listHomes(player.getName());
      if (!homes_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ homes_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      Warp home=warps.getUserWarp(player.getName(),args[0]);
      if (home != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleport(home.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Flag flag=Flag.Z_SPAREWARP_DESIGNATION;
      if (args.length > 1) {
        flag=Flag.byChar(args[1].charAt(0));
      }
      Warp newWarp=new Warp(args[0],player.getName(),player.getLocation(),flag);
      warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Warp newWarp=new Warp(args[0],player.getName(),player.getLocation(),Flag.byChar('0'));
      warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)&& args.length > 0) {
    String toRemove=args[0];
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
    warps.killWarp(warps.getPublicWarp(toRemove));
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    if (args.length == 1) {
      String toRemove=args[0];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
      warps.killWarp(warps.getUserWarp(player.getName(),toRemove));
    }
    if (args.length == 2 && hasFlag(player,Flag.ADMIN)) {
      String toRemove=args[0];
      String plr=args[1];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove+ ""String_Node_Str""+ plr);
      warps.killWarp(warps.getUserWarp(plr,toRemove));
    }
    return true;
  }
  if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    if (args.length == 1) {
      String target=args[0];
      boolean isOnline=users.isOnline(target);
      if (!isOnline) {
        warps.loadPlayer(target);
      }
      player.sendMessage(ChatColor.RED + target + ""String_Node_Str""+ ChatColor.WHITE+ warps.listHomes(target));
      if (!isOnline) {
        warps.dropPlayer(target);
      }
    }
    if (args.length == 2) {
      String target=args[0];
      boolean isOnline=users.isOnline(target);
      if (!isOnline) {
        warps.loadPlayer(target);
      }
      Warp warptarget=warps.getUserWarp(target,args[1]);
      if (warptarget != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleport(warptarget.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!isOnline) {
        warps.dropPlayer(target);
      }
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.FUN)) {
    if (isPlayer && args.length == 0) {
      player.getInventory().clear();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      this.log(ChatColor.RED + player.getName() + ""String_Node_Str"");
    }
 else     if (args.length == 1 && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
      List<Player> targets=this.minitrue.matchPlayer(args[0],true);
      if (targets.size() == 1) {
        Player target=targets.get(0);
        PlayerInventory i=player.getInventory();
        i.setBoots(null);
        i.setChestplate(null);
        i.setHelmet(null);
        i.setLeggings(null);
        target.getInventory().clear();
        target.sendMessage(ChatColor.RED + ""String_Node_Str"");
        this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ target.getName());
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + targets.size()+ ""String_Node_Str"");
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"")) {
    player.getInventory().clear(player.getInventory().getHeldItemSlot());
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.SRSTAFF)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      CreatureType creat=CreatureType.fromName(args[0]);
      if (creat != null) {
        Block block=player.getTargetBlock(null,50);
        if (block != null) {
          Location bloc=block.getLocation();
          if (bloc.getY() < 126) {
            Location loc=new Location(bloc.getWorld(),bloc.getX(),bloc.getY() + 1,bloc.getZ());
            player.getWorld().spawnCreature(loc,CreatureType.fromName(args[0]));
          }
        }
      }
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
    if (args.length > 0 && args[0].equalsIgnoreCase(""String_Node_Str""))     chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + playerName+ ""String_Node_Str""+ playerName);
    users.getUser(playerName).tempSetColor(ChatColor.RED);
    damage.protect(playerName);
    player.getInventory().setHelmet(new ItemStack(51));
    this.users.addFlagLocal(playerName,Flag.GODMODE);
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    String name=player.getName();
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
    users.getUser(name).restoreColor();
    player.getInventory().setHelmet(new ItemStack(Material.GRASS,1));
    if (!safemode) {
      damage.danger(playerName);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    this.users.dropFlagLocal(playerName,Flag.GODMODE);
    return true;
  }
  if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) && hasFlag(player,Flag.ADMIN)) {
    if (args.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      player.teleport(new Location(player.getWorld(),Double.valueOf(args[0]),Double.valueOf(args[1]),Double.valueOf(args[2]),0,0));
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      List<Player> possible=this.minitrue.matchPlayer(args[0],true);
      if (possible.size() == 1) {
        Player who=possible.get(0);
        Location loc=who.getLocation();
        sender.sendMessage(ChatColor.RED + who.getName() + ""String_Node_Str""+ loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
      }
 else {
        sender.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
    this.madagascar(playerName);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && isPlayer && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
      return true;
    }
    String name=args[0];
    this.log(ChatColor.LIGHT_PURPLE + playerName + ""String_Node_Str""+ name);
    this.banCoop.lookup(name,player);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && isPlayer && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"");
      return true;
    }
    String target=args[0];
    this.log(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + playerName+ ""String_Node_Str""+ target);
    String x=""String_Node_Str"";
    boolean allbans=false;
    if (args.length > 1 && args[1].equalsIgnoreCase(""String_Node_Str"")) {
      allbans=true;
    }
    ArrayList<Ban> bans=this.mysql.getBans(target,allbans);
    ArrayList<String> messages=new ArrayList<String>();
    boolean banned=false;
    for (    Ban ban : bans) {
      if (ban.isBanned()) {
        x=ChatColor.DARK_RED + ""String_Node_Str"";
        banned=true;
      }
 else {
        x=ChatColor.GREEN + ""String_Node_Str"";
      }
      String c=ChatColor.DARK_AQUA.toString();
      messages.add(c + ""String_Node_Str"" + x+ c+ ""String_Node_Str""+ this.shortdateformat.format(new Date(ban.getTimeOfBan() * 1000))+ ""String_Node_Str""+ ChatColor.GOLD+ ban.getReason());
    }
    String c2=ChatColor.GREEN.toString();
    if (banned) {
      c2=ChatColor.RED.toString();
    }
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GOLD+ bans.size()+ ChatColor.AQUA+ ""String_Node_Str""+ c2+ target);
    for (    String message : messages) {
      player.sendMessage(message);
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 1) {
      String lastIP=mysql.IPGetLast(args[0]);
      if (!lastIP.isEmpty()) {
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ args[0]+ ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.WHITE+ lastIP);
        HashMap<String,Long> nameDates=mysql.IPGetNamesOnIP(lastIP);
        if (!nameDates.isEmpty()) {
          for (          String key : nameDates.keySet()) {
            if (!key.isEmpty() && key.toLowerCase() != ""String_Node_Str"") {
              Long time=nameDates.get(key);
              Date date=new Date(time);
              player.sendMessage(ChatColor.AQUA + key + ""String_Node_Str""+ ChatColor.BLUE+ date);
            }
          }
        }
      }
 else {
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
    if (args.length == 0) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    List<Player> results=this.minitrue.matchPlayer(args[0],true);
    if (results.size() == 1) {
      Player target=results.get(0);
      boolean weather=target.getWorld().isThundering();
      this.damage.danger(target.getName());
      this.damage.addToTimer(target.getName());
      target.getWorld().strikeLightning(target.getLocation());
      this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ target.getName());
      target.sendMessage(ChatColor.RED + ""String_Node_Str"");
      target.getWorld().setStorm(weather);
    }
 else     if (results.size() > 1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (isPlayer) && hasFlag(player,Flag.ADMIN)) {
    if (args.length == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      player.getWorld().setStorm(true);
      this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
      this.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"");
    }
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      player.getWorld().setStorm(false);
      this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str"");
      this.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"");
    }
    return true;
  }
  if (isPlayer && commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str"")) {
    kickbans.ixrai(playerName,commandName);
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && !isPlayer) {
    if (args.length < 2) {
      return false;
    }
    irc.getBot().sendMessage(args[0],this.combineSplit(1,args,""String_Node_Str""));
    return true;
  }
  if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF) || playerName.equalsIgnoreCase(""String_Node_Str""))) {
    String message=""String_Node_Str"" + ChatColor.GOLD;
switch (this.random.nextInt(5)) {
case 0:
      message+=""String_Node_Str"" + playerName + ""String_Node_Str"";
    break;
case 1:
  message+=""String_Node_Str"" + playerName + ""String_Node_Str"";
break;
case 2:
message+=""String_Node_Str"" + playerName + ""String_Node_Str"";
break;
case 3:
message+=playerName + ""String_Node_Str"";
break;
case 4:
message+=playerName + ""String_Node_Str"";
break;
}
if (playerName.equalsIgnoreCase(""String_Node_Str"") && random.nextBoolean()) {
if (random.nextBoolean()) message=ChatColor.GOLD + ""String_Node_Str"";
 else message=ChatColor.GOLD + ""String_Node_Str"";
}
chat.msgAll(message);
this.log(ChatColor.GOLD + playerName + ""String_Node_Str"");
return true;
}
if (commandName.equals(""String_Node_Str"") && isPlayer && hasFlag(player,Flag.ADMIN)) {
if (hasFlag(player,Flag.THOR)) {
player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
users.dropFlagLocal(playerName,Flag.THOR);
}
 else {
player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
users.addFlagLocal(playerName,Flag.THOR);
}
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
if (args.length == 0) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
List<Player> list=this.minitrue.matchPlayer(args[0],true);
if (list.size() == 0) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
if (list.size() > 1) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
Player target=list.get(0);
if (target != null) {
target.damage(9001);
target.sendMessage(ChatColor.RED + ""String_Node_Str"");
this.sendAdminPlusLog(ChatColor.RED + playerName + ""String_Node_Str""+ target.getName());
}
return true;
}
if (commandName.equals(""String_Node_Str"")) {
if (!isPlayer || this.hasFlag(player,Flag.ADMIN)) {
sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}
 else {
if (hasFlag(player,Flag.TRUSTED)) {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}
 else {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
}
}
return true;
}
if (isPlayer && commandName.equals(""String_Node_Str"")) {
if (hasFlag(player,Flag.ADMIN)) minitrue.vanish(player);
return true;
}
if (isPlayer && commandName.equals(""String_Node_Str"") && hasFlag(player,Flag.ADMIN)) {
if (hasFlag(player,Flag.TOOLS)) {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
users.dropFlagLocal(playerName,Flag.TOOLS);
}
 else {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
users.addFlagLocal(playerName,Flag.TOOLS);
}
return true;
}
if (isPlayer && (commandName.equals(""String_Node_Str"") || commandName.equals(""String_Node_Str""))) {
Location loc=player.getLocation();
String x=""String_Node_Str"" + ChatColor.GOLD + (int)loc.getX()+ ChatColor.DARK_AQUA;
String y=""String_Node_Str"" + ChatColor.GOLD + (int)loc.getY()+ ChatColor.DARK_AQUA;
String z=""String_Node_Str"" + ChatColor.GOLD + (int)loc.getZ();
player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"" + x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z);
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
if (args.length < 3) {
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
player.getWorld().setSpawnLocation(Integer.valueOf(args[0]),Integer.valueOf(args[1]),Integer.valueOf(args[2]));
this.sendAdminPlusLog(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str""+ args[1]+ ""String_Node_Str""+ args[2]+ ""String_Node_Str""+ playerName);
return true;
}
if (isPlayer && commandName.equals(""String_Node_Str"")) {
User user=users.getUser(player);
if (user != null && args.length == 1) {
String safeword=user.getSafeWord();
if (!safeword.equalsIgnoreCase(""String_Node_Str"") && safeword.equals(args[0])) {
this.users.clear(playerName);
this.sendAdminPlusLog(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + playerName+ ""String_Node_Str"");
return true;
}
}
if (users.isCleared(playerName)) {
this.sendAdminPlusLog(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + playerName+ ""String_Node_Str"");
}
this.users.playerReset(playerName);
this.minitrue.vanish.updateInvisible(player);
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
if (args.length != 1) {
sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
return true;
}
List<Player> listy=this.getServer().matchPlayer(args[0]);
if (listy.size() != 1) {
sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
return true;
}
Player target=listy.get(0);
this.panda.harass(target);
this.sendAdminPlusLog(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ target.getName()+ ChatColor.AQUA+ ""String_Node_Str""+ playerName+ ""String_Node_Str"");
this.irc.ircAdminMsg(""String_Node_Str"" + target.getName() + ""String_Node_Str""+ playerName+ ""String_Node_Str"");
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
String messageBit;
if (this.chat.muteAll) {
messageBit=""String_Node_Str"";
}
 else {
messageBit=""String_Node_Str"";
}
this.sendAdminPlusLog(ChatColor.YELLOW + playerName + messageBit);
this.chat.msgByFlagless(Flag.ADMIN,ChatColor.YELLOW + ""String_Node_Str"" + messageBit);
this.chat.muteAll=!this.chat.muteAll;
return true;
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.ADMIN))) {
String messageBit=""String_Node_Str"";
if (args.length < 1) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
String targetString=args[0];
List<Player> matches=this.getServer().matchPlayer(targetString);
if (matches == null || matches.size() == 0) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + targetString);
return true;
}
if (matches.size() > 1) {
sender.sendMessage(ChatColor.RED + String.valueOf(matches.size()) + ""String_Node_Str""+ targetString);
return true;
}
Player target=matches.get(0);
String targetName=target.getName();
boolean muted=this.hasFlag(targetName,Flag.MUTED);
if (muted) {
messageBit=""String_Node_Str"";
this.users.dropFlagLocal(targetName,Flag.MUTED);
}
 else {
this.users.addFlagLocal(targetName,Flag.MUTED);
}
target.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + messageBit.toUpperCase()+ ""String_Node_Str"");
this.sendAdminPlusLog(ChatColor.YELLOW + playerName + ""String_Node_Str""+ messageBit+ ""String_Node_Str""+ targetName);
}
if (commandName.equals(""String_Node_Str"") && (!isPlayer || hasFlag(player,Flag.SRSTAFF))) {
if (args.length < 1) {
sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
String message=ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + this.combineSplit(0,args,""String_Node_Str"");
this.log(message);
this.chat.msgAll(message);
return true;
}
if (commandName.equals(""String_Node_Str"") && isPlayer && this.hasFlag(player,Flag.ADMIN)) {
String message;
if (this.hasFlag(player,Flag.NSA)) {
message=ChatColor.DARK_AQUA + playerName + ChatColor.AQUA+ ""String_Node_Str"";
this.users.dropFlagLocal(playerName,Flag.NSA);
}
 else {
message=ChatColor.DARK_AQUA + playerName + ChatColor.AQUA+ ""String_Node_Str"";
this.users.addFlagLocal(playerName,Flag.NSA);
}
this.sendAdminPlusLog(message);
return true;
}
if (isPlayer && this.servernumber == 2 && commandName.equals(""String_Node_Str"")) {
Warp target=this.warps.getClosestWarp(player.getLocation());
String name=target.getName();
if (args.length == 1 && args[0].equalsIgnoreCase(""String_Node_Str"")) {
player.teleport(target.getLocation());
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
}
 else {
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str""+ name);
player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
}
}
return true;
}",0.9944891396602632
153653,"public void processJoin(Player player){
  String name=player.getName();
  HashMap<String,String> mcbans=j2.banCoop.mcbans_user_connect(name);
  this.dox(name);
  String mcbans_disputes=mcbans.get(""String_Node_Str"");
  String is_mcbans_mod=mcbans.get(""String_Node_Str"");
  BanCoopDossier dox=this.record.get(""String_Node_Str"");
  if (dox.totalBans() > 0) {
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ name+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ dox.totalBans()+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ dox.getMCBansRep()+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str"");
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ name);
    if (!j2.hasFlag(name,Flag.QUIETERJOIN)) {
      j2.irc.ircAdminMsg(""String_Node_Str"" + name + ""String_Node_Str""+ dox.totalBans()+ ""String_Node_Str""+ dox.getMCBansRep()+ ""String_Node_Str"");
    }
  }
  if (is_mcbans_mod.equals(""String_Node_Str"")) {
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    j2.irc.ircAdminMsg(""String_Node_Str"" + name + ""String_Node_Str"");
    j2.log(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ mcbans_disputes+ ChatColor.GREEN+ ""String_Node_Str"");
  }
 else   if (j2.hasFlag(name,Flag.SRSTAFF) && (Integer.parseInt(mcbans_disputes) > 0)) {
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ mcbans_disputes+ ChatColor.GREEN+ ""String_Node_Str"");
  }
}","public void processJoin(Player player){
  String name=player.getName();
  HashMap<String,String> mcbans=j2.banCoop.mcbans_user_connect(name);
  this.dox(name);
  String mcbans_disputes=mcbans.get(""String_Node_Str"");
  String is_mcbans_mod=mcbans.get(""String_Node_Str"");
  BanCoopDossier dox=this.record.get(name);
  if (dox.totalBans() > 0) {
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ name+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ dox.totalBans()+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ dox.getMCBansRep()+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str"");
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.WHITE+ name);
    if (!j2.hasFlag(name,Flag.QUIETERJOIN)) {
      j2.irc.ircAdminMsg(""String_Node_Str"" + name + ""String_Node_Str""+ dox.totalBans()+ ""String_Node_Str""+ dox.getMCBansRep()+ ""String_Node_Str"");
    }
  }
  if (is_mcbans_mod.equals(""String_Node_Str"")) {
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    j2.irc.ircAdminMsg(""String_Node_Str"" + name + ""String_Node_Str"");
    j2.log(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ mcbans_disputes+ ChatColor.GREEN+ ""String_Node_Str"");
  }
 else   if (j2.hasFlag(name,Flag.SRSTAFF) && (Integer.parseInt(mcbans_disputes) > 0)) {
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ mcbans_disputes+ ChatColor.GREEN+ ""String_Node_Str"");
  }
}",0.9934477379095163
153654,"public void processJoin(Player player){
  if (!player.isOnline()) {
    return;
  }
  String name=player.getName();
  j2.irc.processJoin(name);
  j2.ip.processJoin(name);
  j2.warps.processJoin(name);
  j2.damage.processJoin(name);
  j2.jail.processJoin(player);
  this.playerReset(name);
  if (player.getInventory().getHelmet().getTypeId() == Material.FIRE.getId()) {
    player.getInventory().setHelmet(new ItemStack(Material.GRASS));
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  if (j2.maintenance) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
  try {
    j2.banCoop.processJoin(player);
  }
 catch (  Exception e) {
  }
  for (  String line : j2.motd) {
    player.sendMessage(line);
  }
  if (j2.reallyHasFlag(name,Flag.ADMIN)) {
    int count=this.j2.reports.numReports();
    player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + count+ ""String_Node_Str"");
  }
  j2.minitrue.processJoin(player);
  if (j2.hasFlag(player,Flag.CONTRIBUTOR)) {
    player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
    player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
  }
}","public void processJoin(Player player){
  if (!player.isOnline()) {
    return;
  }
  String name=player.getName();
  j2.irc.processJoin(name);
  j2.ip.processJoin(name);
  j2.warps.processJoin(name);
  j2.damage.processJoin(name);
  j2.jail.processJoin(player);
  this.playerReset(name);
  if (player.getInventory().getHelmet().getTypeId() == Material.FIRE.getId()) {
    player.getInventory().setHelmet(new ItemStack(Material.GRASS));
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  if (j2.maintenance) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
  j2.banCoop.processJoin(player);
  for (  String line : j2.motd) {
    player.sendMessage(line);
  }
  if (j2.reallyHasFlag(name,Flag.ADMIN)) {
    int count=this.j2.reports.numReports();
    player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + count+ ""String_Node_Str"");
  }
  j2.minitrue.processJoin(player);
  if (j2.hasFlag(player,Flag.CONTRIBUTOR)) {
    player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str"");
    player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
  }
}",0.9819555182543012
153655,"public void onDisconnect(){
  if (ircman.getJ2().ircEnable) {
    ircman.restart=true;
    ircman.getJ2().ircEnable=false;
    this.dispose();
  }
}","public void onDisconnect(){
  if (irc.getJ2().ircEnable) {
    irc.restart=true;
    irc.getJ2().ircEnable=false;
    this.dispose();
  }
}",0.9686411149825784
153656,"public void doMsg(String channel,String sender,String message){
  this.ircman.getJ2().chat.handleIRCChat(sender,message,false,channel);
}","public void doMsg(String channel,String sender,String message){
  this.irc.getJ2().chat.handleIRCChat(sender,message,false,channel);
}",0.988929889298893
153657,"protected void onPrivateMessage(String sender,String login,String hostname,String message){
  if (ircman.ircCommand(hostname,sender,message.split(""String_Node_Str""))) {
    sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
  }
 else {
    sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
  }
}","protected void onPrivateMessage(String sender,String login,String hostname,String message){
  if (irc.ircCommand(hostname,sender,message.split(""String_Node_Str""))) {
    sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
  }
 else {
    sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
  }
}",0.9952305246422892
153658,"public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.charAt(0) == '!') {
    String[] parts=message.split(""String_Node_Str"");
    if (message.equalsIgnoreCase(""String_Node_Str"")) {
      sendMessage(channel,sender + ""String_Node_Str"");
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"") || message.equalsIgnoreCase(""String_Node_Str"")) {
      String curPlayers=""String_Node_Str"";
      int cPlayers=0;
      Player[] players;
      if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
        players=ircman.getJ2().getServer().getOnlinePlayers();
      }
 else {
        players=ircman.getJ2().minitrue.getOnlinePlayers();
      }
      for (      Player p : players) {
        if (p != null) {
          if (curPlayers.equals(""String_Node_Str"")) {
            curPlayers+=p.getName();
          }
 else {
            curPlayers+=""String_Node_Str"" + p.getName();
          }
          cPlayers++;
        }
      }
      if (curPlayers == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else {
        if (message.equalsIgnoreCase(""String_Node_Str""))         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ ircman.getJ2().playerLimit+ ""String_Node_Str"");
 else         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ ircman.getJ2().playerLimit+ ""String_Node_Str""+ curPlayers);
      }
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"")) {
      String curAdmins=""String_Node_Str"";
      for (      Player p : ircman.getJ2().getServer().getOnlinePlayers()) {
        if (p != null && (ircman.getJ2().hasFlag(p,Flag.ADMIN))) {
          if (curAdmins == ""String_Node_Str"") {
            curAdmins+=p.getName();
          }
 else {
            curAdmins+=""String_Node_Str"" + p.getName();
          }
        }
      }
      if (curAdmins == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else       if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel))       sendMessage(channel,curAdmins);
 else       sendMessage(channel,""String_Node_Str"");
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
 else {
        String damessage=""String_Node_Str"";
        for (int $x=1; $x < parts.length; $x++) {
          damessage+=""String_Node_Str"" + parts[$x];
        }
        doMsg(channel,sender,damessage);
      }
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
 else {
        String damessage=""String_Node_Str"";
        for (int $x=1; $x < parts.length; $x++) {
          damessage+=""String_Node_Str"" + parts[$x];
        }
        this.ircman.getJ2().chat.handleBroadcastFromIRC(sender,damessage);
      }
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
 else {
        String damessage=""String_Node_Str"";
        int size=ircman.getJ2().reports.getReports().size();
        damessage=""String_Node_Str"" + size + ""String_Node_Str"";
        if (size > 5) {
          damessage+=""String_Node_Str"";
        }
        sendMessage(channel,damessage);
      }
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMeMsg(channel,sender,damessage);
    }
    return;
  }
  if (message.charAt(0) == '.' && channel.equalsIgnoreCase(ircman.getJ2().ircChannel)) {
    String[] parts=message.split(""String_Node_Str"");
    if (ircman.ircCommand(hostname,sender,parts)) {
      sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
    }
 else {
      if (!ircMsg) {
        doMsg(channel,sender,""String_Node_Str"" + message);
      }
    }
    return;
  }
  if (!ircMsg) {
    doMsg(channel,sender,""String_Node_Str"" + message);
  }
}","public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.charAt(0) == '!') {
    String[] parts=message.split(""String_Node_Str"");
    if (message.equalsIgnoreCase(""String_Node_Str"")) {
      sendMessage(channel,sender + ""String_Node_Str"");
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"") || message.equalsIgnoreCase(""String_Node_Str"")) {
      String curPlayers=""String_Node_Str"";
      int cPlayers=0;
      Player[] players;
      if (channel.equalsIgnoreCase(irc.getJ2().ircAdminChannel)) {
        players=irc.getJ2().getServer().getOnlinePlayers();
      }
 else {
        players=irc.getJ2().minitrue.getOnlinePlayers();
      }
      for (      Player p : players) {
        if (p != null) {
          if (curPlayers.equals(""String_Node_Str"")) {
            curPlayers+=p.getName();
          }
 else {
            curPlayers+=""String_Node_Str"" + p.getName();
          }
          cPlayers++;
        }
      }
      if (curPlayers == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else {
        if (message.equalsIgnoreCase(""String_Node_Str""))         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ irc.getJ2().playerLimit+ ""String_Node_Str"");
 else         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ irc.getJ2().playerLimit+ ""String_Node_Str""+ curPlayers);
      }
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"")) {
      String curAdmins=""String_Node_Str"";
      for (      Player p : irc.getJ2().getServer().getOnlinePlayers()) {
        if (p != null && (irc.getJ2().hasFlag(p,Flag.ADMIN))) {
          if (curAdmins == ""String_Node_Str"") {
            curAdmins+=p.getName();
          }
 else {
            curAdmins+=""String_Node_Str"" + p.getName();
          }
        }
      }
      if (curAdmins == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else       if (channel.equalsIgnoreCase(irc.getJ2().ircAdminChannel))       sendMessage(channel,curAdmins);
 else       sendMessage(channel,""String_Node_Str"");
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (channel.equalsIgnoreCase(irc.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
 else {
        String damessage=""String_Node_Str"";
        for (int $x=1; $x < parts.length; $x++) {
          damessage+=""String_Node_Str"" + parts[$x];
        }
        doMsg(channel,sender,damessage);
      }
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!channel.equalsIgnoreCase(irc.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
 else {
        String damessage=""String_Node_Str"";
        for (int $x=1; $x < parts.length; $x++) {
          damessage+=""String_Node_Str"" + parts[$x];
        }
        this.irc.getJ2().chat.handleBroadcastFromIRC(sender,damessage);
      }
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!channel.equalsIgnoreCase(irc.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
 else {
        String damessage=""String_Node_Str"";
        int size=irc.getJ2().reports.getReports().size();
        damessage=""String_Node_Str"" + size + ""String_Node_Str"";
        if (size > 5) {
          damessage+=""String_Node_Str"";
        }
        sendMessage(channel,damessage);
      }
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (channel.equalsIgnoreCase(irc.getJ2().ircAdminChannel)) {
        sendMessage(channel,""String_Node_Str"");
      }
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMeMsg(channel,sender,damessage);
    }
    return;
  }
  if (message.charAt(0) == '.' && channel.equalsIgnoreCase(irc.getJ2().ircChannel)) {
    String[] parts=message.split(""String_Node_Str"");
    if (irc.ircCommand(hostname,sender,parts)) {
      sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
    }
 else {
      if (!ircMsg) {
        doMsg(channel,sender,""String_Node_Str"" + message);
      }
    }
    return;
  }
  if (message.equals(""String_Node_Str"") && channel.equalsIgnoreCase(irc.getJ2().ircChannel)) {
    this.irc.cough(hostname);
  }
  if (!ircMsg) {
    doMsg(channel,sender,""String_Node_Str"" + message);
  }
}",0.9799569697655984
153659,"public void doMeMsg(String channel,String sender,String message){
  this.ircman.getJ2().chat.handleIRCChat(sender,message,true,channel);
}","public void doMeMsg(String channel,String sender,String message){
  this.irc.getJ2().chat.handleIRCChat(sender,message,true,channel);
}",0.989010989010989
153660,"public ircBot(String mah_name,boolean msgenabled,IRC j){
  this.setName(mah_name);
  this.setAutoNickChange(true);
  ircMsg=msgenabled;
  ircman=j;
  this.setMessageDelay(1100);
}","public ircBot(String mah_name,boolean msgenabled,IRC j){
  this.setName(mah_name);
  this.setAutoNickChange(true);
  ircMsg=msgenabled;
  irc=j;
  this.setMessageDelay(1100);
}",0.991549295774648
153661,"public void onInvite(String targetNick,String sourceNick,String sourceLogin,String sourceHostname,String channel){
  if (targetNick.equalsIgnoreCase(this.getNick()) && channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
    this.joinChannel(channel);
  }
}","public void onInvite(String targetNick,String sourceNick,String sourceLogin,String sourceHostname,String channel){
  if (targetNick.equalsIgnoreCase(this.getNick()) && channel.equalsIgnoreCase(irc.getJ2().ircAdminChannel)) {
    this.joinChannel(channel);
  }
}",0.9942857142857144
153662,"public Player[] getOnlinePlayers(){
  Player[] players=j2.getServer().getOnlinePlayers();
  ArrayList<Player> toreturn=new ArrayList<Player>();
  for (  Player p : players) {
    if (!this.invisible(p)) {
      toreturn.add(p);
    }
  }
  return (Player[])toreturn.toArray();
}","public Player[] getOnlinePlayers(){
  Player[] players=j2.getServer().getOnlinePlayers();
  Player[] toreturn=new Player[players.length - this.numinvis()];
  int cur=0;
  for (  Player p : players) {
    if (!this.invisible(p)) {
      toreturn[cur]=p;
      cur++;
    }
  }
  return toreturn;
}",0.7212543554006968
153663,"public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.charAt(0) == '!') {
    String[] parts=message.split(""String_Node_Str"");
    if (message.equalsIgnoreCase(""String_Node_Str"")) {
      sendMessage(channel,sender + ""String_Node_Str"");
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"") || message.equalsIgnoreCase(""String_Node_Str"")) {
      String curPlayers=""String_Node_Str"";
      int cPlayers=0;
      Player[] players;
      if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
        players=ircman.getJ2().getServer().getOnlinePlayers();
      }
 else {
        players=ircman.getJ2().minitrue.getOnlinePlayers();
      }
      for (      Player p : players) {
        if (p != null) {
          if (curPlayers == ""String_Node_Str"") {
            curPlayers+=p.getName();
          }
 else {
            curPlayers+=""String_Node_Str"" + p.getName();
          }
          cPlayers++;
        }
      }
      if (curPlayers == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else {
        if (message.equalsIgnoreCase(""String_Node_Str""))         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ ircman.getJ2().playerLimit+ ""String_Node_Str"");
 else         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ ircman.getJ2().playerLimit+ ""String_Node_Str""+ curPlayers);
      }
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"")) {
      String curAdmins=""String_Node_Str"";
      for (      Player p : ircman.getJ2().getServer().getOnlinePlayers()) {
        if (p != null && (ircman.getJ2().hasFlag(p,Flag.ADMIN))) {
          if (curAdmins == ""String_Node_Str"") {
            curAdmins+=p.getName();
          }
 else {
            curAdmins+=""String_Node_Str"" + p.getName();
          }
        }
      }
      if (curAdmins == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else       if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel))       sendMessage(channel,curAdmins);
 else       sendMessage(channel,""String_Node_Str"");
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMsg(channel,sender,damessage);
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMeMsg(channel,sender,damessage);
    }
    return;
  }
  if (message.charAt(0) == '.' && channel.equalsIgnoreCase(ircman.getJ2().ircChannel)) {
    String[] parts=message.split(""String_Node_Str"");
    if (ircman.ircCommand(hostname,sender,parts)) {
      sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
    }
 else {
      if (!ircMsg) {
        doMsg(channel,sender,""String_Node_Str"" + message);
      }
    }
    return;
  }
  if (!ircMsg) {
    doMsg(channel,sender,""String_Node_Str"" + message);
  }
}","public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.charAt(0) == '!') {
    String[] parts=message.split(""String_Node_Str"");
    if (message.equalsIgnoreCase(""String_Node_Str"")) {
      sendMessage(channel,sender + ""String_Node_Str"");
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"") || message.equalsIgnoreCase(""String_Node_Str"")) {
      String curPlayers=""String_Node_Str"";
      int cPlayers=0;
      Player[] players;
      if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel)) {
        players=ircman.getJ2().getServer().getOnlinePlayers();
      }
 else {
        players=ircman.getJ2().minitrue.getOnlinePlayers();
      }
      for (      Player p : players) {
        if (p != null) {
          if (curPlayers.equals(""String_Node_Str"")) {
            curPlayers+=p.getName();
          }
 else {
            curPlayers+=""String_Node_Str"" + p.getName();
          }
          cPlayers++;
        }
      }
      if (curPlayers == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else {
        if (message.equalsIgnoreCase(""String_Node_Str""))         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ ircman.getJ2().playerLimit+ ""String_Node_Str"");
 else         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ ircman.getJ2().playerLimit+ ""String_Node_Str""+ curPlayers);
      }
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"")) {
      String curAdmins=""String_Node_Str"";
      for (      Player p : ircman.getJ2().getServer().getOnlinePlayers()) {
        if (p != null && (ircman.getJ2().hasFlag(p,Flag.ADMIN))) {
          if (curAdmins == ""String_Node_Str"") {
            curAdmins+=p.getName();
          }
 else {
            curAdmins+=""String_Node_Str"" + p.getName();
          }
        }
      }
      if (curAdmins == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else       if (channel.equalsIgnoreCase(ircman.getJ2().ircAdminChannel))       sendMessage(channel,curAdmins);
 else       sendMessage(channel,""String_Node_Str"");
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMsg(channel,sender,damessage);
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMeMsg(channel,sender,damessage);
    }
    return;
  }
  if (message.charAt(0) == '.' && channel.equalsIgnoreCase(ircman.getJ2().ircChannel)) {
    String[] parts=message.split(""String_Node_Str"");
    if (ircman.ircCommand(hostname,sender,parts)) {
      sendRawLine(""String_Node_Str"" + sender + ""String_Node_Str"");
    }
 else {
      if (!ircMsg) {
        doMsg(channel,sender,""String_Node_Str"" + message);
      }
    }
    return;
  }
  if (!ircMsg) {
    doMsg(channel,sender,""String_Node_Str"" + message);
  }
}",0.9925123466624184
153664,"public void onEnable(){
  log=Logger.getLogger(""String_Node_Str"");
  protectedUsers=new ArrayList<String>();
  loadData();
  if (debug)   log.info(""String_Node_Str"");
  if (ircEnable)   irc.prepIRC();
  if (debug)   log.info(""String_Node_Str"");
  loadTips();
  if (debug)   log.info(""String_Node_Str"");
  startTipsTimer();
  if (debug)   log.info(""String_Node_Str"");
  this.blogger=new managerBlockLog(this.mysql.getConnection(),this.mysql.servnum());
  if (debug)   log.info(""String_Node_Str"");
  new Thread(blogger).start();
  if (debug)   log.info(""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_COMMAND,plrlisCommands,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,plrlisChat,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,plrlisItem,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_CANBUILD,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_RIGHTCLICKED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.SIGN_CHANGE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_EXPLODE,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,plrlisJoinQuit,Priority.Normal,this);
  if (debug)   log.info(""String_Node_Str"");
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  log=Logger.getLogger(""String_Node_Str"");
  protectedUsers=new ArrayList<String>();
  loadData();
  if (debug)   log.info(""String_Node_Str"");
  if (ircEnable)   irc.prepIRC();
  if (debug)   log.info(""String_Node_Str"");
  loadTips();
  if (debug)   log.info(""String_Node_Str"");
  startTipsTimer();
  if (debug)   log.info(""String_Node_Str"");
  this.blogger=new managerBlockLog(this.mysql.getConnection(),this.mysql.servnum());
  if (debug)   log.info(""String_Node_Str"");
  new Thread(blogger).start();
  if (debug)   log.info(""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_COMMAND,plrlisCommands,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,plrlisChat,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,plrlisItem,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_CANBUILD,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_RIGHTCLICKED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.SIGN_CHANGE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_EXPLODE,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,plrlisJoinQuit,Priority.Normal,this);
  if (debug)   log.info(""String_Node_Str"");
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}",0.9825347066726378
153665,"public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.charAt(0) == '!') {
    String[] parts=message.split(""String_Node_Str"");
    if (message.equalsIgnoreCase(""String_Node_Str"")) {
      sendMessage(channel,sender + ""String_Node_Str"");
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"") || message.equalsIgnoreCase(""String_Node_Str"")) {
      String curPlayers=""String_Node_Str"";
      int cPlayers=0;
      for (      Player p : plug.getJ2().getServer().getOnlinePlayers()) {
        if (p != null) {
          if (curPlayers == ""String_Node_Str"") {
            curPlayers+=p.getName();
          }
 else {
            curPlayers+=""String_Node_Str"" + p.getName();
          }
          cPlayers++;
        }
      }
      if (curPlayers == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else {
        if (message.equalsIgnoreCase(""String_Node_Str""))         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ plug.getJ2().playerLimit+ ""String_Node_Str"");
 else         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ plug.getJ2().playerLimit+ ""String_Node_Str""+ curPlayers);
      }
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"")) {
      String curAdmins=""String_Node_Str"";
      for (      Player p : plug.getJ2().getServer().getOnlinePlayers()) {
        if (p != null && (plug.getJ2().hasFlag(p,Flag.ADMIN))) {
          if (curAdmins == ""String_Node_Str"") {
            curAdmins+=p.getName();
          }
 else {
            curAdmins+=""String_Node_Str"" + p.getName();
          }
        }
      }
      if (curAdmins == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else       if (channel.equalsIgnoreCase(plug.getJ2().ircAdminChannel))       sendMessage(channel,curAdmins);
 else       sendMessage(channel,""String_Node_Str"");
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMsg(channel,sender,damessage);
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMeMsg(channel,sender,damessage);
    }
    return;
  }
  if (message.charAt(0) == '.' && channel.equalsIgnoreCase(plug.getJ2().ircChannel)) {
    String[] parts=message.split(""String_Node_Str"");
    if (plug.ircCommand(hostname,sender,parts)) {
      sendMessage(channel,""String_Node_Str"");
    }
 else {
      sendMessage(channel,""String_Node_Str"");
    }
    return;
  }
  if (!ircMsg) {
    doMsg(channel,sender,""String_Node_Str"" + message);
  }
}","public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.charAt(0) == '!') {
    String[] parts=message.split(""String_Node_Str"");
    if (message.equalsIgnoreCase(""String_Node_Str"")) {
      sendMessage(channel,sender + ""String_Node_Str"");
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"") || message.equalsIgnoreCase(""String_Node_Str"")) {
      String curPlayers=""String_Node_Str"";
      int cPlayers=0;
      for (      Player p : plug.getJ2().getServer().getOnlinePlayers()) {
        if (p != null) {
          if (curPlayers == ""String_Node_Str"") {
            curPlayers+=p.getName();
          }
 else {
            curPlayers+=""String_Node_Str"" + p.getName();
          }
          cPlayers++;
        }
      }
      if (curPlayers == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else {
        if (message.equalsIgnoreCase(""String_Node_Str""))         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ plug.getJ2().playerLimit+ ""String_Node_Str"");
 else         sendMessage(channel,""String_Node_Str"" + cPlayers + ""String_Node_Str""+ plug.getJ2().playerLimit+ ""String_Node_Str""+ curPlayers);
      }
    }
 else     if (message.equalsIgnoreCase(""String_Node_Str"")) {
      String curAdmins=""String_Node_Str"";
      for (      Player p : plug.getJ2().getServer().getOnlinePlayers()) {
        if (p != null && (plug.getJ2().hasFlag(p,Flag.ADMIN))) {
          if (curAdmins == ""String_Node_Str"") {
            curAdmins+=p.getName();
          }
 else {
            curAdmins+=""String_Node_Str"" + p.getName();
          }
        }
      }
      if (curAdmins == ""String_Node_Str"")       sendMessage(channel,""String_Node_Str"");
 else       if (channel.equalsIgnoreCase(plug.getJ2().ircAdminChannel))       sendMessage(channel,curAdmins);
 else       sendMessage(channel,""String_Node_Str"");
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMsg(channel,sender,damessage);
    }
 else     if (ircMsg && parts[0].equalsIgnoreCase(""String_Node_Str"")) {
      String damessage=""String_Node_Str"";
      for (int $x=1; $x < parts.length; $x++) {
        damessage+=""String_Node_Str"" + parts[$x];
      }
      doMeMsg(channel,sender,damessage);
    }
    return;
  }
  if (message.charAt(0) == '.' && channel.equalsIgnoreCase(plug.getJ2().ircChannel)) {
    String[] parts=message.split(""String_Node_Str"");
    if (plug.ircCommand(hostname,sender,parts)) {
      sendMessage(channel,""String_Node_Str"");
    }
 else {
      if (!ircMsg) {
        doMsg(channel,sender,""String_Node_Str"" + message);
      }
    }
    return;
  }
  if (!ircMsg) {
    doMsg(channel,sender,""String_Node_Str"" + message);
  }
}",0.978782608695652
153666,"@Override public void onBlockIgnite(BlockIgniteEvent event){
  if (j2.safemode && !event.getCause().equals(IgniteCause.FLINT_AND_STEEL)) {
    event.setCancelled(true);
  }
}","@Override public void onBlockIgnite(BlockIgniteEvent event){
  if (j2.safemode && !(event.getCause().equals(IgniteCause.FLINT_AND_STEEL))) {
    event.setCancelled(true);
  }
}",0.9942857142857144
153667,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (j2.safemode) {
    event.setCancelled(true);
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (j2.safemode && event.getEntity() != null && event.getEntity() instanceof Player) {
    event.setCancelled(true);
  }
}",0.7777777777777778
153668,"@Override public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (j2.hasFlag(player,Flag.JAILED)) {
    if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
      j2.users.getUser(player).dropFlag(Flag.JAILED);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.rules) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.help) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.motd) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.blacklist) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.intro) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.TRUSTED)) {
    String playerName=player.getName().toLowerCase();
    if (j2.tpProtect.getBoolean(playerName,false)) {
      j2.tpProtect.setBoolean(playerName,false);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      j2.tpProtect.setBoolean(playerName,true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && (j2.hasFlag(player,Flag.FUN))) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (!j2.hasFlag(player,Flag.ADMIN) && inquestion != null && (j2.hasFlag(inquestion,Flag.TRUSTED)) && j2.tpProtect.getBoolean(inquestion.getName().toLowerCase(),false)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.teleportTo(inquestion.getLocation());
        player.sendMessage(""String_Node_Str"");
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName());
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        inquestion.teleportTo(player.getLocation());
        inquestion.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + inquestion.getName());
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (!j2.hasFlag(player,Flag.ADMIN) || split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.teleportTo(player.getWorld().getSpawnLocation());
    }
 else {
      List<Player> inquest=j2.getServer().matchPlayer(split[1]);
      if (inquest.size() == 1) {
        Player inquestion=inquest.get(0);
        inquestion.teleportTo(inquestion.getWorld().getSpawnLocation());
        inquestion.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      player.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      inquestion.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      j2.log.info(""String_Node_Str"" + inquestion.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.FUN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String item=""String_Node_Str"";
    int amount=1;
    int dataType=-1;
    try {
      if (split[1].contains(""String_Node_Str"")) {
        String[] data=split[1].split(""String_Node_Str"");
        try {
          dataType=Integer.valueOf(data[1]);
        }
 catch (        NumberFormatException e) {
          dataType=-1;
        }
        item=data[0];
      }
 else {
        item=split[1];
      }
      if (split.length > 2) {
        amount=Integer.valueOf(split[2]);
      }
 else {
        amount=1;
      }
    }
 catch (    NumberFormatException e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Material toDrop=Material.matchMaterial(item);
    int itemid=0;
    if (toDrop != null) {
      itemid=toDrop.getId();
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (dataType != -1) {
      player.getInventory().addItem(new ItemStack(itemid,amount,((byte)dataType)));
    }
 else {
      player.getInventory().addItem(new ItemStack(itemid,amount));
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ amount+ ""String_Node_Str""+ toDrop.toString());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length != 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long desired;
    if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=0;
    }
 else     if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=13000;
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long curTime=j2.getServer().getWorlds().get(0).getTime();
    long margin=(desired - curTime) % 24000;
    if (margin < 0) {
      margin+=24000;
    }
    j2.getServer().getWorlds().get(0).setTime(curTime + margin);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player[] players=j2.getServer().getOnlinePlayers();
    String msg=""String_Node_Str"" + players.length + ""String_Node_Str"";
    for (    Player p : players) {
      msg+=""String_Node_Str"" + p.getName();
    }
    player.sendMessage(msg);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String message=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.aMsg(playerName,message);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String playerName=player.getName();
      String theReport=j2.combineSplit(1,split,""String_Node_Str"");
      String message=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      String ircmessage=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      j2.chat.msgByFlag(Flag.ADMIN,message);
      j2.irc.ircAdminMsg(ircmessage);
      j2.log.info(ircmessage);
      Report report=new Report(0,player.getLocation(),player.getName(),theReport,(new Date().getTime()) / 1000);
      j2.reports.addReport(report);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    ArrayList<Report> reps=j2.reports.getReports();
    int size=reps.size();
    if (size == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + size+ ""String_Node_Str"");
    for (    Report r : reps) {
      player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + r.getID()+ ""String_Node_Str""+ ChatColor.WHITE+ r.getUser()+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ r.getMessage());
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String text=""String_Node_Str"";
    text+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.gMsg(playerName,text);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callKick(split[1],adminName,j2.combineSplit(2,split,""String_Node_Str""));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callAddBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String adminName=player.getName();
    j2.mysql.unban(name);
    j2.log.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ adminName);
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ adminName);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> match=j2.getServer().matchPlayer(split[1]);
    if (match.size() != 1 || match.get(0) == null) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str"";
    for (    Flag f : j2.users.getAllFlags(who)) {
      message+=f.getDescription() + ""String_Node_Str"";
    }
    player.sendMessage(message);
    j2.log.info(player.getName() + ""String_Node_Str"" + who.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1) {
    String message=""String_Node_Str"";
    message+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.addChat(player.getName(),message);
    j2.irc.ircMsg(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String reason=""String_Node_Str"";
    String admin=player.getName();
    if (split.length > 2)     reason=j2.combineSplit(2,split,""String_Node_Str"");
    j2.kickbans.forceKick(name,reason);
    j2.log.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + name + ""String_Node_Str""+ reason+ ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.irc.loadIRCAdmins();
    j2.chat.msgByFlag(Flag.SRSTAFF,ChatColor.RED + ""String_Node_Str"" + player.getName());
    j2.log.info(player.getName() + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.loadData();
    j2.chat.msgByFlag(Flag.SRSTAFF,""String_Node_Str"" + player.getName());
    j2.log.info(""String_Node_Str"" + player.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    if (!j2.maintenance) {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.maintenance=true;
      for (      Player p : j2.getServer().getOnlinePlayers()) {
        if (p != null && !j2.hasFlag(player,Flag.ADMIN)) {
          p.sendMessage(""String_Node_Str"");
          p.kickPlayer(""String_Node_Str"");
        }
      }
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
    }
 else {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
      j2.maintenance=false;
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    player.sendMessage(""String_Node_Str"");
    j2.log.info(player.getName() + ""String_Node_Str"");
    j2.OneByOne=player;
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    String action=split[2];
    if (split.length < 4 || !(action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str""))) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    char flag=split[3].charAt(0);
    User user=j2.users.getUser(name);
    if (user == null) {
      user=j2.mysql.getUser(name);
    }
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      user.addFlag(Flag.byChar(flag));
    }
 else {
      user.dropFlag(Flag.byChar(flag));
    }
    String log=ChatColor.RED + player.getName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ action+ ""String_Node_Str""+ Flag.byChar(flag).getDescription();
    j2.chat.msgByFlag(Flag.ADMIN,log);
    j2.log.info(log);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Location p_loc=event.getPlayer().getLocation();
    event.getPlayer().sendMessage(""String_Node_Str"" + p_loc.getBlockX() + ""String_Node_Str""+ p_loc.getBlockY()+ ""String_Node_Str""+ p_loc.getBlockZ());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String warps_s=j2.warps.listWarps(player);
      if (!warps_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warps_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      Warp warp=j2.warps.getPublicWarp(split[1]);
      if (warp != null && (j2.hasFlag(player,warp.getFlag()) || warp.getFlag().equals(Flag.Z_SPAREWARP_DESIGNATION))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warp.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String homes_s=j2.warps.listHomes(player.getName());
      if (!homes_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ homes_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      Warp home=j2.warps.getUserWarp(player.getName(),split[1]);
      if (home != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(home.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Flag flag=Flag.Z_SPAREWARP_DESIGNATION;
      if (split.length > 2) {
        flag=Flag.byChar(split[2].charAt(0));
      }
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),flag);
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),Flag.byChar('0'));
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN) && split.length > 1) {
    String toRemove=split[1];
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
    j2.warps.killWarp(j2.warps.getPublicWarp(toRemove));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (j2.hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    if (split.length == 2) {
      String toRemove=split[1];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
      j2.warps.killWarp(j2.warps.getUserWarp(player.getName(),toRemove));
    }
    if (split.length == 3 && j2.hasFlag(player,Flag.ADMIN)) {
      String toRemove=split[1];
      String plr=split[2];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove+ ""String_Node_Str""+ plr);
      j2.warps.killWarp(j2.warps.getUserWarp(plr,toRemove));
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    if (split.length == 2) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      player.sendMessage(ChatColor.RED + target + ""String_Node_Str""+ ChatColor.WHITE+ j2.warps.listHomes(target));
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    if (split.length == 3) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      Warp warptarget=j2.warps.getUserWarp(target,split[2]);
      if (warptarget != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warptarget.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    event.setCancelled(true);
    return;
  }
}","@Override public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (j2.hasFlag(player,Flag.JAILED)) {
    if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
      j2.users.getUser(player).dropFlag(Flag.JAILED);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.rules) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.help) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.motd) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.blacklist) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.intro) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.TRUSTED)) {
    String playerName=player.getName().toLowerCase();
    if (j2.tpProtect.getBoolean(playerName,false)) {
      j2.tpProtect.setBoolean(playerName,false);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      j2.tpProtect.setBoolean(playerName,true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && (j2.hasFlag(player,Flag.FUN))) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (!j2.hasFlag(player,Flag.ADMIN) && inquestion != null && (j2.hasFlag(inquestion,Flag.TRUSTED)) && j2.tpProtect.getBoolean(inquestion.getName().toLowerCase(),false)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.teleportTo(inquestion.getLocation());
        player.sendMessage(""String_Node_Str"");
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName());
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        inquestion.teleportTo(player.getLocation());
        inquestion.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + inquestion.getName());
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (!j2.hasFlag(player,Flag.ADMIN) || split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.teleportTo(player.getWorld().getSpawnLocation());
    }
 else {
      List<Player> inquest=j2.getServer().matchPlayer(split[1]);
      if (inquest.size() == 1) {
        Player inquestion=inquest.get(0);
        inquestion.teleportTo(inquestion.getWorld().getSpawnLocation());
        inquestion.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      player.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      inquestion.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      j2.log.info(""String_Node_Str"" + inquestion.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.FUN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String item=""String_Node_Str"";
    int amount=1;
    int dataType=-1;
    try {
      if (split[1].contains(""String_Node_Str"")) {
        String[] data=split[1].split(""String_Node_Str"");
        try {
          dataType=Integer.valueOf(data[1]);
        }
 catch (        NumberFormatException e) {
          dataType=-1;
        }
        item=data[0];
      }
 else {
        item=split[1];
      }
      if (split.length > 2) {
        amount=Integer.valueOf(split[2]);
      }
 else {
        amount=1;
      }
    }
 catch (    NumberFormatException e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Material toDrop=Material.matchMaterial(item);
    int itemid=0;
    if (toDrop != null) {
      itemid=toDrop.getId();
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (dataType != -1) {
      player.getInventory().addItem(new ItemStack(itemid,amount,((byte)dataType)));
    }
 else {
      player.getInventory().addItem(new ItemStack(itemid,amount));
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ amount+ ""String_Node_Str""+ toDrop.toString());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length != 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long desired;
    if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=0;
    }
 else     if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=13000;
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long curTime=j2.getServer().getWorlds().get(0).getTime();
    long margin=(desired - curTime) % 24000;
    if (margin < 0) {
      margin+=24000;
    }
    j2.getServer().getWorlds().get(0).setTime(curTime + margin);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player[] players=j2.getServer().getOnlinePlayers();
    String msg=""String_Node_Str"" + players.length + ""String_Node_Str"";
    for (    Player p : players) {
      msg+=""String_Node_Str"" + p.getName();
    }
    player.sendMessage(msg);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String message=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.aMsg(playerName,message);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String playerName=player.getName();
      String theReport=j2.combineSplit(1,split,""String_Node_Str"");
      String message=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      String ircmessage=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      j2.chat.msgByFlag(Flag.ADMIN,message);
      j2.irc.ircAdminMsg(ircmessage);
      j2.log.info(ircmessage);
      Report report=new Report(0,player.getLocation(),player.getName(),theReport,(new Date().getTime()) / 1000);
      j2.reports.addReport(report);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    ArrayList<Report> reps=j2.reports.getReports();
    int size=reps.size();
    if (size == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + size+ ""String_Node_Str"");
    for (    Report r : reps) {
      player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + r.getID()+ ""String_Node_Str""+ ChatColor.WHITE+ r.getUser()+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ r.getMessage());
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String text=""String_Node_Str"";
    text+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.gMsg(playerName,text);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callKick(split[1],adminName,j2.combineSplit(2,split,""String_Node_Str""));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callAddBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String adminName=player.getName();
    j2.kickbans.unban(adminName,name);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> match=j2.getServer().matchPlayer(split[1]);
    if (match.size() != 1 || match.get(0) == null) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str"";
    for (    Flag f : j2.users.getAllFlags(who)) {
      message+=f.getDescription() + ""String_Node_Str"";
    }
    player.sendMessage(message);
    j2.log.info(player.getName() + ""String_Node_Str"" + who.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1) {
    String message=""String_Node_Str"";
    message+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.addChat(player.getName(),message);
    j2.irc.ircMsg(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String reason=""String_Node_Str"";
    String admin=player.getName();
    if (split.length > 2)     reason=j2.combineSplit(2,split,""String_Node_Str"");
    j2.kickbans.forceKick(name,reason);
    j2.log.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + name + ""String_Node_Str""+ reason+ ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.irc.loadIRCAdmins();
    j2.chat.msgByFlag(Flag.SRSTAFF,ChatColor.RED + ""String_Node_Str"" + player.getName());
    j2.log.info(player.getName() + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.loadData();
    j2.chat.msgByFlag(Flag.SRSTAFF,""String_Node_Str"" + player.getName());
    j2.log.info(""String_Node_Str"" + player.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    if (!j2.maintenance) {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.maintenance=true;
      for (      Player p : j2.getServer().getOnlinePlayers()) {
        if (p != null && !j2.hasFlag(player,Flag.ADMIN)) {
          p.sendMessage(""String_Node_Str"");
          p.kickPlayer(""String_Node_Str"");
        }
      }
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
    }
 else {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
      j2.maintenance=false;
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    player.sendMessage(""String_Node_Str"");
    j2.log.info(player.getName() + ""String_Node_Str"");
    j2.OneByOne=player;
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    String action=split[2];
    if (split.length < 4 || !(action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str""))) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    char flag=split[3].charAt(0);
    User user=j2.users.getUser(name);
    if (user == null) {
      user=j2.mysql.getUser(name);
    }
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      user.addFlag(Flag.byChar(flag));
    }
 else {
      user.dropFlag(Flag.byChar(flag));
    }
    String log=ChatColor.RED + player.getName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ action+ ""String_Node_Str""+ Flag.byChar(flag).getDescription();
    j2.chat.msgByFlag(Flag.ADMIN,log);
    j2.log.info(log);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Location p_loc=event.getPlayer().getLocation();
    event.getPlayer().sendMessage(""String_Node_Str"" + p_loc.getBlockX() + ""String_Node_Str""+ p_loc.getBlockY()+ ""String_Node_Str""+ p_loc.getBlockZ());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String warps_s=j2.warps.listWarps(player);
      if (!warps_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warps_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      Warp warp=j2.warps.getPublicWarp(split[1]);
      if (warp != null && (j2.hasFlag(player,warp.getFlag()) || warp.getFlag().equals(Flag.Z_SPAREWARP_DESIGNATION))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warp.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String homes_s=j2.warps.listHomes(player.getName());
      if (!homes_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ homes_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      Warp home=j2.warps.getUserWarp(player.getName(),split[1]);
      if (home != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(home.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Flag flag=Flag.Z_SPAREWARP_DESIGNATION;
      if (split.length > 2) {
        flag=Flag.byChar(split[2].charAt(0));
      }
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),flag);
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),Flag.byChar('0'));
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN) && split.length > 1) {
    String toRemove=split[1];
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
    j2.warps.killWarp(j2.warps.getPublicWarp(toRemove));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (j2.hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    if (split.length == 2) {
      String toRemove=split[1];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
      j2.warps.killWarp(j2.warps.getUserWarp(player.getName(),toRemove));
    }
    if (split.length == 3 && j2.hasFlag(player,Flag.ADMIN)) {
      String toRemove=split[1];
      String plr=split[2];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove+ ""String_Node_Str""+ plr);
      j2.warps.killWarp(j2.warps.getUserWarp(plr,toRemove));
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    if (split.length == 2) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      player.sendMessage(ChatColor.RED + target + ""String_Node_Str""+ ChatColor.WHITE+ j2.warps.listHomes(target));
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    if (split.length == 3) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      Warp warptarget=j2.warps.getUserWarp(target,split[2]);
      if (warptarget != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warptarget.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!j2.hasFlag(player,Flag.ADMIN) || split.length == 1) {
      player.getInventory().clear();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      j2.log.info(player.getName() + ""String_Node_Str"");
    }
 else {
      List<Player> targets=j2.getServer().matchPlayer(split[1]);
      if (targets.size() == 1) {
        Player target=targets.get(0);
        target.getInventory().clear();
        target.sendMessage(ChatColor.RED + ""String_Node_Str"");
        j2.log.info(player.getName() + ""String_Node_Str"" + target.getName());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + targets.size()+ ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      player.getLocation().getWorld().spawnCreature(player.getLocation(),CreatureType.valueOf(split[1]));
    }
    event.setCancelled(true);
    return;
  }
}",0.9702905074548208
153669,"public boolean ircCommand(String host,String nick,String[] command){
  return true;
}","public boolean ircCommand(String host,String nick,String[] command){
  if (!j2.ircEnable)   return false;
  int lvl=0;
  String adminName=""String_Node_Str"";
synchronized (adminsLock) {
    for (    ircAdmin admin : admins) {
      if (admin != null && admin.getHostname().equals(host)) {
        lvl=admin.getLevel();
        adminName=admin.getUsername();
      }
    }
  }
  if (command[0].charAt(0) == '.') {
    command[0]=command[0].substring(1);
  }
  if (lvl == 0 || (lvl == 2 && !ircLevel2(command[0]))) {
    return false;
  }
  String commands=j2.combineSplit(0,command,""String_Node_Str"");
  String com=command[0];
  boolean done=false;
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.forceKick(command[1],j2.combineSplit(2,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.callBan(adminName,command,new Location(j2.getServer().getWorlds().get(0),0,0,0,0,0));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.chat.gMsg(adminName,j2.combineSplit(1,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.chat.aMsg(adminName,j2.combineSplit(1,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.callAddBan(adminName,command,new Location(j2.getServer().getWorlds().get(0),0,0,0,0,0));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.kickbans.unban(adminName,command[1]);
    done=true;
  }
  if (done) {
    j2.log.log(Level.INFO,""String_Node_Str"" + adminName + ""String_Node_Str""+ nick+ ""String_Node_Str""+ host+ ""String_Node_Str""+ commands);
  }
 else {
    j2.log.log(Level.INFO,""String_Node_Str"" + adminName + ""String_Node_Str""+ nick+ ""String_Node_Str""+ host+ ""String_Node_Str""+ commands);
  }
  return done;
}",0.0769971126082771
153670,"public User getUser(String name){
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    conn=getConnection();
    String state=""String_Node_Str"" + name + ""String_Node_Str"";
    if (j2.debug)     j2.log.info(""String_Node_Str"" + state);
    ps=conn.prepareStatement(state);
    rs=ps.executeQuery();
    if (rs.next()) {
      String Flags=rs.getString(""String_Node_Str"");
      ArrayList<Flag> flags=new ArrayList<Flag>();
      for (int x=0; x < Flags.length(); x++) {
        flags.add(Flag.byChar(Flags.charAt(x)));
      }
      if (j2.debug)       j2.log.info(""String_Node_Str"" + name + ""String_Node_Str""+ rs.getString(""String_Node_Str"")+ ""String_Node_Str""+ Flags);
      return new User(name,toColor(rs.getInt(""String_Node_Str"")),rs.getString(""String_Node_Str""),flags);
    }
 else {
      String state2=""String_Node_Str"" + name + ""String_Node_Str"";
      if (j2.debug)       j2.log.info(""String_Node_Str"" + state2);
      ps=conn.prepareStatement(state2);
      ps.executeUpdate();
      ArrayList<Flag> f=new ArrayList<Flag>();
      f.add(Flag.NEW);
      return new User(name,ChatColor.WHITE,""String_Node_Str"",f);
    }
  }
 catch (  SQLException ex) {
    j2.log.log(Level.SEVERE,""String_Node_Str"",ex);
    j2.maintenance=true;
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (rs != null) {
        rs.close();
      }
      if (conn != null) {
        conn.close();
      }
    }
 catch (    SQLException ex) {
    }
  }
  return null;
}","public User getUser(String name){
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    conn=getConnection();
    String state=""String_Node_Str"" + name + ""String_Node_Str"";
    if (j2.debug)     j2.log.info(""String_Node_Str"" + state);
    ps=conn.prepareStatement(state);
    rs=ps.executeQuery();
    if (rs.next()) {
      String Flags=rs.getString(""String_Node_Str"");
      ArrayList<Flag> flags=new ArrayList<Flag>();
      for (int x=0; x < Flags.length(); x++) {
        flags.add(Flag.byChar(Flags.charAt(x)));
      }
      if (j2.debug)       j2.log.info(""String_Node_Str"" + name + ""String_Node_Str""+ rs.getString(""String_Node_Str"")+ ""String_Node_Str""+ Flags);
      return new User(name,toColor(rs.getInt(""String_Node_Str"")),rs.getString(""String_Node_Str""),flags);
    }
 else {
      String state2=""String_Node_Str"" + name + ""String_Node_Str"";
      if (j2.debug)       j2.log.info(""String_Node_Str"" + state2);
      ps=conn.prepareStatement(state2);
      ps.executeUpdate();
      ArrayList<Flag> f=new ArrayList<Flag>();
      f.add(Flag.NEW);
      return new User(name,ChatColor.GREEN,""String_Node_Str"",f);
    }
  }
 catch (  SQLException ex) {
    j2.log.log(Level.SEVERE,""String_Node_Str"",ex);
    j2.maintenance=true;
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (rs != null) {
        rs.close();
      }
      if (conn != null) {
        conn.close();
      }
    }
 catch (    SQLException ex) {
    }
  }
  return null;
}",0.997364953886693
153671,"BlockRow(String name,int replaced,int type,int x,int y,int z,long timestamp){
  this.name=name;
  this.replaced=replaced;
  this.type=type;
  this.x=x;
  this.y=y;
  this.z=z;
  this.extra=null;
  this.timestamp=timestamp;
}","BlockRow(String name,int replaced,int type,int x,int y,int z,long timestamp,String extra){
  this.name=name;
  this.replaced=replaced;
  this.type=type;
  this.x=x;
  this.y=y;
  this.z=z;
  this.extra=extra;
  this.timestamp=timestamp;
}",0.9523809523809524
153672,"public void onEnable(){
  log=Logger.getLogger(""String_Node_Str"");
  protectedUsers=new ArrayList<String>();
  loadData();
  if (debug)   log.info(""String_Node_Str"");
  if (ircEnable)   irc.prepIRC();
  if (debug)   log.info(""String_Node_Str"");
  loadTips();
  if (debug)   log.info(""String_Node_Str"");
  startTipsTimer();
  if (debug)   log.info(""String_Node_Str"");
  this.blogger=new managerBlockLog(this.mysql.getConnection(),this.mysql.servnum());
  if (debug)   log.info(""String_Node_Str"");
  new Thread(blogger).start();
  if (debug)   log.info(""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_COMMAND,plrlisCommands,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,plrlisChat,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,plrlisItem,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_CANBUILD,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_RIGHTCLICKED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_EXPLODE,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,plrlisJoinQuit,Priority.Normal,this);
  if (debug)   log.info(""String_Node_Str"");
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  log=Logger.getLogger(""String_Node_Str"");
  protectedUsers=new ArrayList<String>();
  loadData();
  if (debug)   log.info(""String_Node_Str"");
  if (ircEnable)   irc.prepIRC();
  if (debug)   log.info(""String_Node_Str"");
  loadTips();
  if (debug)   log.info(""String_Node_Str"");
  startTipsTimer();
  if (debug)   log.info(""String_Node_Str"");
  this.blogger=new managerBlockLog(this.mysql.getConnection(),this.mysql.servnum());
  if (debug)   log.info(""String_Node_Str"");
  new Thread(blogger).start();
  if (debug)   log.info(""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_COMMAND,plrlisCommands,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,plrlisChat,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_ITEM,plrlisItem,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_CANBUILD,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_RIGHTCLICKED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.SIGN_CHANGE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_EXPLODE,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_JOIN,plrlisJoinQuit,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,plrlisJoinQuit,Priority.Normal,this);
  if (debug)   log.info(""String_Node_Str"");
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}",0.9816662798793224
153673,"@Override public void onBlockBreak(BlockBreakEvent event){
  Player player=event.getPlayer();
  if (!j2.hasFlag(player,Flag.MODWORLD)) {
    player.sendMessage(""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  BlockRow changed;
  Block smacked=event.getBlock();
  changed=new BlockRow(player.getDisplayName(),smacked.getTypeId(),0,smacked.getX(),smacked.getY(),smacked.getZ(),(System.currentTimeMillis() / 1000L));
  managerBlockLog.bqueue.offer(changed);
}","@Override public void onBlockBreak(BlockBreakEvent event){
  Player player=event.getPlayer();
  if (!j2.hasFlag(player,Flag.MODWORLD)) {
    player.sendMessage(""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  BlockRow changed;
  Block smacked=event.getBlock();
  changed=new BlockRow(player.getDisplayName(),smacked.getTypeId(),0,smacked.getX(),smacked.getY(),smacked.getZ(),(System.currentTimeMillis() / 1000L),null);
  managerBlockLog.bqueue.offer(changed);
}",0.9947643979057592
153674,"public void onBlockRightClick(BlockRightClickEvent event){
  Player player=event.getPlayer();
  if (event.getItemInHand().getTypeId() == 284 && j2.hasFlag(player,Flag.ADMIN)) {
    if (j2.debug)     j2.log.info(player.getName() + ""String_Node_Str"");
    this.j2.blogger.showBlockHistory(event.getPlayer(),event.getBlock());
  }
  if (event.getItemInHand().getTypeId() == 280 && j2.hasFlag(player,Flag.ADMIN)) {
    if (j2.debug)     j2.log.info(player.getName() + ""String_Node_Str"");
    managerBlockLog.bqueue.offer(new BlockRow(player.getDisplayName(),event.getBlock().getTypeId(),0,event.getBlock().getX(),event.getBlock().getY(),event.getBlock().getZ(),(System.currentTimeMillis() / 1000L)));
    event.getBlock().setTypeId(0);
  }
}","public void onBlockRightClick(BlockRightClickEvent event){
  Player player=event.getPlayer();
  if (event.getItemInHand().getTypeId() == 284 && j2.hasFlag(player,Flag.ADMIN)) {
    if (j2.debug)     j2.log.info(player.getName() + ""String_Node_Str"");
    this.j2.blogger.showBlockHistory(event.getPlayer(),event.getBlock());
  }
  if (event.getItemInHand().getTypeId() == 280 && j2.hasFlag(player,Flag.ADMIN)) {
    if (j2.debug)     j2.log.info(player.getName() + ""String_Node_Str"");
    managerBlockLog.bqueue.offer(new BlockRow(player.getDisplayName(),event.getBlock().getTypeId(),0,event.getBlock().getX(),event.getBlock().getY(),event.getBlock().getZ(),(System.currentTimeMillis() / 1000L),null));
    event.getBlock().setTypeId(0);
  }
}",0.9966193373901284
153675,"@Override public void onBlockPlace(BlockPlaceEvent event){
  Player player=event.getPlayer();
  Block blockPlaced=event.getBlockPlaced();
  int type=blockPlaced.getTypeId();
  if (!j2.hasFlag(player,Flag.MODWORLD)) {
    player.sendMessage(""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  BlockRow test;
  test=new BlockRow(player.getDisplayName(),0,type,blockPlaced.getX(),blockPlaced.getY(),blockPlaced.getZ(),(System.currentTimeMillis() / 1000L));
  managerBlockLog.bqueue.offer(test);
  if (j2.hasFlag(player,Flag.TRUSTED) && !j2.hasFlag(player,Flag.ADMIN) && j2.isOnSuperBlacklist(type)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (!j2.hasFlag(player,Flag.TRUSTED) && (j2.isOnRegularBlacklist(type) || j2.isOnSuperBlacklist(type))) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  double x=player.getLocation().getX() - (blockPlaced.getX() + 0.5D);
  double y=player.getLocation().getY() - (blockPlaced.getY() + 0.5D);
  double z=player.getLocation().getZ() - (blockPlaced.getZ() + 0.5D);
  double dist=x * x + y * y + z * z;
  if (dist > 400.0D) {
    j2.chat.msgByFlag(Flag.ADMIN,player.getName() + ""String_Node_Str"");
    j2.log.info(player.getName() + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    event.setCancelled(true);
  }
}","@Override public void onBlockPlace(BlockPlaceEvent event){
  Player player=event.getPlayer();
  Block blockPlaced=event.getBlockPlaced();
  int type=blockPlaced.getTypeId();
  if (!j2.hasFlag(player,Flag.MODWORLD)) {
    player.sendMessage(""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  BlockRow test;
  test=new BlockRow(player.getDisplayName(),0,type,blockPlaced.getX(),blockPlaced.getY(),blockPlaced.getZ(),(System.currentTimeMillis() / 1000L),null);
  managerBlockLog.bqueue.offer(test);
  if (j2.hasFlag(player,Flag.TRUSTED) && !j2.hasFlag(player,Flag.ADMIN) && j2.isOnSuperBlacklist(type)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (!j2.hasFlag(player,Flag.TRUSTED) && (j2.isOnRegularBlacklist(type) || j2.isOnSuperBlacklist(type))) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  double x=player.getLocation().getX() - (blockPlaced.getX() + 0.5D);
  double y=player.getLocation().getY() - (blockPlaced.getY() + 0.5D);
  double z=player.getLocation().getZ() - (blockPlaced.getZ() + 0.5D);
  double dist=x * x + y * y + z * z;
  if (dist > 400.0D) {
    j2.chat.msgByFlag(Flag.ADMIN,player.getName() + ""String_Node_Str"");
    j2.log.info(player.getName() + ""String_Node_Str"");
    player.kickPlayer(""String_Node_Str"");
    event.setCancelled(true);
  }
}",0.9982250621228256
153676,"@Override public void onPlayerChat(PlayerChatEvent event){
  String name=event.getPlayer().getName();
  String message=event.getMessage();
  j2.chat.addChat(name,message);
  j2.irc.ircMsg(""String_Node_Str"" + name + ""String_Node_Str""+ message);
  if (!j2.randomcolor) {
    return;
  }
  String[] colorlist=j2.chat.getColorlist();
  int rand=j2.random.nextInt(13);
  if (rand < 12) {
    j2.chat.msgAll(ChatColor.WHITE + ""String_Node_Str"" + colorlist[rand]+ name+ ChatColor.WHITE+ ""String_Node_Str""+ message);
  }
 else {
    for (int x=0; x < name.length(); x++) {
      name+=colorlist[j2.random.nextInt(12)] + name.charAt(x);
    }
    j2.chat.msgAll(ChatColor.WHITE + ""String_Node_Str"" + name+ ChatColor.WHITE+ ""String_Node_Str""+ message);
  }
  event.setCancelled(true);
}","@Override public void onPlayerChat(PlayerChatEvent event){
  String name=event.getPlayer().getName();
  String message=event.getMessage();
  j2.chat.addChat(name,message);
  j2.irc.ircMsg(""String_Node_Str"" + name + ""String_Node_Str""+ message);
  j2.chat.msgAll(ChatColor.WHITE + ""String_Node_Str"" + j2.users.getUser(event.getPlayer()).getColorName()+ ChatColor.WHITE+ ""String_Node_Str""+ message);
  event.setCancelled(true);
}",0.5823627287853578
153677,"@Override public void onPlayerItem(PlayerItemEvent event){
  Player player=event.getPlayer();
  int type=event.getMaterial().getId();
  if (!j2.hasFlag(player,Flag.MODWORLD)) {
    player.sendMessage(""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (j2.hasFlag(player,Flag.TRUSTED) && !j2.hasFlag(player,Flag.ADMIN) && j2.isOnSuperBlacklist(type)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (!j2.hasFlag(player,Flag.TRUSTED) && (j2.isOnRegularBlacklist(type) || j2.isOnSuperBlacklist(type))) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  BlockRow changed;
  Block clicked=event.getBlockClicked();
  BlockFace face=event.getBlockFace();
  int x=clicked.getX() + face.getModX();
  int y=clicked.getY() + face.getModY();
  int z=clicked.getZ() + face.getModZ();
  changed=new BlockRow(player.getDisplayName(),event.getItem().getTypeId(),0,x,y,z,(System.currentTimeMillis() / 1000L));
  managerBlockLog.bqueue.offer(changed);
}","@Override public void onPlayerItem(PlayerItemEvent event){
  Player player=event.getPlayer();
  int type=event.getMaterial().getId();
  if (!j2.hasFlag(player,Flag.MODWORLD)) {
    player.sendMessage(""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (j2.hasFlag(player,Flag.TRUSTED) && !j2.hasFlag(player,Flag.ADMIN) && j2.isOnSuperBlacklist(type)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (!j2.hasFlag(player,Flag.TRUSTED) && (j2.isOnRegularBlacklist(type) || j2.isOnSuperBlacklist(type))) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  BlockRow changed;
  Block clicked=event.getBlockClicked();
  BlockFace face=event.getBlockFace();
  int x=clicked.getX() + face.getModX();
  int y=clicked.getY() + face.getModY();
  int z=clicked.getZ() + face.getModZ();
  if (type != 323) {
    changed=new BlockRow(player.getDisplayName(),0,type,x,y,z,(System.currentTimeMillis() / 1000L),null);
    managerBlockLog.bqueue.offer(changed);
  }
}",0.9662817551963048
153678,"public void run(){
  System.out.println(""String_Node_Str"");
  PreparedStatement ps=null;
  BlockRow b;
  int delay=10;
  while (!stop) {
    long start=System.currentTimeMillis() / 1000L;
    int count=0;
    try {
      ps=conn.prepareStatement(""String_Node_Str"");
      while (count < 100 && start + delay > (System.currentTimeMillis() / 1000L)) {
        b=bqueue.poll(1L,TimeUnit.SECONDS);
        if (b == null)         continue;
        ps.setInt(1,servnum);
        ps.setTimestamp(2,new Timestamp(b.timestamp));
        ps.setString(3,b.name);
        ps.setInt(4,b.replaced);
        ps.setInt(5,b.type);
        ps.setInt(6,b.x);
        ps.setInt(7,b.y);
        ps.setInt(8,b.z);
        ps.addBatch();
        count++;
      }
      ps.executeBatch();
    }
 catch (    SQLException ex) {
      System.out.println(""String_Node_Str"" + ex.getMessage());
      System.out.println(""String_Node_Str"" + ex.getSQLState());
      System.out.println(""String_Node_Str"" + ex.getErrorCode());
    }
catch (    InterruptedException ev) {
      System.out.println(""String_Node_Str"");
    }
  }
}","public void run(){
  System.out.println(""String_Node_Str"");
  PreparedStatement ps=null;
  BlockRow b;
  int delay=10;
  while (!stop) {
    long start=System.currentTimeMillis() / 1000L;
    int count=0;
    try {
      ps=conn.prepareStatement(""String_Node_Str"");
      while (count < 100 && start + delay > (System.currentTimeMillis() / 1000L)) {
        b=bqueue.poll(1L,TimeUnit.SECONDS);
        if (b == null)         continue;
        ps.setInt(1,servnum);
        ps.setTimestamp(2,new Timestamp(b.timestamp));
        ps.setString(3,b.name);
        ps.setInt(4,b.replaced);
        ps.setInt(5,b.type);
        ps.setInt(6,b.x);
        ps.setInt(7,b.y);
        ps.setInt(8,b.z);
        ps.setString(9,b.extra);
        ps.addBatch();
        count++;
      }
      ps.executeBatch();
    }
 catch (    SQLException ex) {
      System.out.println(""String_Node_Str"" + ex.getMessage());
      System.out.println(""String_Node_Str"" + ex.getSQLState());
      System.out.println(""String_Node_Str"" + ex.getErrorCode());
    }
catch (    InterruptedException ev) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.985141828005403
153679,"public User getUser(String name){
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    conn=getConnection();
    String state=""String_Node_Str"" + name + ""String_Node_Str"";
    if (j2.debug)     j2.log.info(""String_Node_Str"" + state);
    ps=conn.prepareStatement(state);
    rs=ps.executeQuery();
    if (rs.next()) {
      String Flags=rs.getString(""String_Node_Str"");
      ArrayList<Flag> flags=new ArrayList<Flag>();
      for (int x=0; x < Flags.length(); x++) {
        flags.add(Flag.byChar(Flags.charAt(x)));
      }
      if (j2.debug)       j2.log.info(""String_Node_Str"" + name + ""String_Node_Str""+ rs.getString(""String_Node_Str"")+ ""String_Node_Str""+ Flags);
      return new User(name,ChatColor.getByCode(rs.getInt(""String_Node_Str"")),rs.getString(""String_Node_Str""),flags);
    }
 else {
      String state2=""String_Node_Str"" + name + ""String_Node_Str"";
      if (j2.debug)       j2.log.info(""String_Node_Str"" + state2);
      ps=conn.prepareStatement(state2);
      ps.executeUpdate();
      ArrayList<Flag> f=new ArrayList<Flag>();
      f.add(Flag.NEW);
      return new User(name,ChatColor.WHITE,""String_Node_Str"",f);
    }
  }
 catch (  SQLException ex) {
    j2.log.log(Level.SEVERE,""String_Node_Str"",ex);
    j2.maintenance=true;
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (rs != null) {
        rs.close();
      }
      if (conn != null) {
        conn.close();
      }
    }
 catch (    SQLException ex) {
    }
  }
  return null;
}","public User getUser(String name){
  Connection conn=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    conn=getConnection();
    String state=""String_Node_Str"" + name + ""String_Node_Str"";
    if (j2.debug)     j2.log.info(""String_Node_Str"" + state);
    ps=conn.prepareStatement(state);
    rs=ps.executeQuery();
    if (rs.next()) {
      String Flags=rs.getString(""String_Node_Str"");
      ArrayList<Flag> flags=new ArrayList<Flag>();
      for (int x=0; x < Flags.length(); x++) {
        flags.add(Flag.byChar(Flags.charAt(x)));
      }
      if (j2.debug)       j2.log.info(""String_Node_Str"" + name + ""String_Node_Str""+ rs.getString(""String_Node_Str"")+ ""String_Node_Str""+ Flags);
      return new User(name,toColor(rs.getInt(""String_Node_Str"")),rs.getString(""String_Node_Str""),flags);
    }
 else {
      String state2=""String_Node_Str"" + name + ""String_Node_Str"";
      if (j2.debug)       j2.log.info(""String_Node_Str"" + state2);
      ps=conn.prepareStatement(state2);
      ps.executeUpdate();
      ArrayList<Flag> f=new ArrayList<Flag>();
      f.add(Flag.NEW);
      return new User(name,ChatColor.WHITE,""String_Node_Str"",f);
    }
  }
 catch (  SQLException ex) {
    j2.log.log(Level.SEVERE,""String_Node_Str"",ex);
    j2.maintenance=true;
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (rs != null) {
        rs.close();
      }
      if (conn != null) {
        conn.close();
      }
    }
 catch (    SQLException ex) {
    }
  }
  return null;
}",0.9921259842519684
153680,"@Override public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (j2.hasFlag(player,Flag.JAILED)) {
    if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
      j2.users.getUser(player).dropFlag(Flag.JAILED);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.rules) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.blacklist) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.intro) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.TRUSTED)) {
    String playerName=player.getName().toLowerCase();
    if (j2.tpProtect.getBoolean(playerName,false)) {
      j2.tpProtect.setBoolean(playerName,false);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      j2.tpProtect.setBoolean(playerName,true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && (j2.hasFlag(player,Flag.FUN))) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (!j2.hasFlag(player,Flag.ADMIN) && inquestion != null && (j2.hasFlag(inquestion,Flag.TRUSTED)) && j2.tpProtect.getBoolean(inquestion.getName().toLowerCase(),false)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.teleportTo(inquestion.getLocation());
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName());
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.teleportTo(inquestion.getLocation());
        inquestion.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + inquestion.getName());
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      player.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      inquestion.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      j2.log.info(""String_Node_Str"" + inquestion.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.FUN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    int item=0;
    int amount=1;
    int dataType=-1;
    try {
      if (split[1].contains(""String_Node_Str"")) {
        String[] data=split[1].split(""String_Node_Str"");
        try {
          dataType=Integer.valueOf(data[1]);
        }
 catch (        NumberFormatException e) {
          dataType=-1;
        }
        item=Integer.valueOf(data[0]);
      }
 else {
        item=Integer.valueOf(split[1]);
      }
      if (split.length > 2) {
        amount=Integer.valueOf(split[2]);
      }
 else {
        amount=1;
      }
    }
 catch (    NumberFormatException e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if ((new ItemStack(item)).getType() == null || item == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (dataType != -1) {
      player.getWorld().dropItem(player.getLocation(),new ItemStack(item,amount,((byte)dataType)));
    }
 else {
      player.getWorld().dropItem(player.getLocation(),new ItemStack(item,amount));
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length != 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long desired;
    if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=0;
    }
 else     if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=13000;
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long curTime=j2.getServer().getWorlds().get(0).getTime();
    long margin=(desired - curTime) % 24000;
    if (margin < 0) {
      margin+=24000;
    }
    j2.getServer().getWorlds().get(0).setTime(curTime + margin);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player[] players=j2.getServer().getOnlinePlayers();
    String msg=""String_Node_Str"" + players.length + ""String_Node_Str"";
    for (    Player p : players) {
      msg+=""String_Node_Str"" + p.getName();
    }
    player.sendMessage(msg);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String message=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.aMsg(playerName,message);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String playerName=player.getName();
      String theReport=j2.combineSplit(1,split,""String_Node_Str"");
      String message=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      String ircmessage=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      j2.chat.msgByFlag(Flag.ADMIN,message);
      j2.irc.ircAdminMsg(ircmessage);
      j2.log.info(ircmessage);
      Report report=new Report(0,player.getLocation(),player.getName(),theReport,(new Date().getTime()) / 1000);
      j2.mysql.addReport(report);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    ArrayList<Report> reps=j2.reports.getReports();
    int size=reps.size();
    if (size == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + size+ ""String_Node_Str"");
    for (    Report r : reps) {
      player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + r.getID()+ ""String_Node_Str""+ ChatColor.WHITE+ r.getUser()+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ r.getMessage());
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String text=""String_Node_Str"";
    text+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.gMsg(playerName,text);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callKick(split[1],adminName,j2.combineSplit(2,split,""String_Node_Str""));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callAddBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String adminName=player.getName();
    j2.mysql.unban(name);
    j2.log.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ adminName);
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ adminName);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> match=j2.getServer().matchPlayer(split[1]);
    if (match.size() != 1 || match.get(0) == null) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str"";
    for (    Flag f : j2.users.getAllFlags(who)) {
      message+=f.getDescription() + ""String_Node_Str"";
    }
    player.sendMessage(message);
    j2.log.info(player.getName() + ""String_Node_Str"" + who.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1) {
    String message=""String_Node_Str"";
    message+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.addChat(player.getName(),message);
    j2.irc.ircMsg(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String reason=""String_Node_Str"";
    String admin=player.getName();
    if (split.length > 2)     reason=j2.combineSplit(2,split,""String_Node_Str"");
    j2.kickbans.forceKick(name,reason);
    j2.log.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + name + ""String_Node_Str""+ reason+ ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.irc.loadIRCAdmins();
    j2.chat.msgByFlag(Flag.SRSTAFF,ChatColor.RED + ""String_Node_Str"" + player.getName());
    j2.log.info(player.getName() + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.loadData();
    j2.chat.msgByFlag(Flag.SRSTAFF,""String_Node_Str"" + player.getName());
    j2.log.info(""String_Node_Str"" + player.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    if (!j2.maintenance) {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.maintenance=true;
      for (      Player p : j2.getServer().getOnlinePlayers()) {
        if (p != null && !j2.hasFlag(player,Flag.ADMIN)) {
          p.sendMessage(""String_Node_Str"");
          p.kickPlayer(""String_Node_Str"");
        }
      }
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
    }
 else {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
      j2.maintenance=false;
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    player.sendMessage(""String_Node_Str"");
    j2.log.info(player.getName() + ""String_Node_Str"");
    j2.OneByOne=player;
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    String action=split[2];
    if (split.length < 4 || !(action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str""))) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    char flag=split[3].charAt(0);
    User user=j2.users.getUser(name);
    if (user == null) {
      user=j2.mysql.getUser(name);
    }
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      user.addFlag(Flag.byChar(flag));
    }
 else {
      user.dropFlag(Flag.byChar(flag));
    }
    String log=ChatColor.RED + player.getName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ action+ ""String_Node_Str""+ Flag.byChar(flag).getDescription();
    j2.chat.msgByFlag(Flag.ADMIN,log);
    j2.log.info(log);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Location p_loc=event.getPlayer().getLocation();
    event.getPlayer().sendMessage(""String_Node_Str"" + p_loc.getBlockX() + ""String_Node_Str""+ p_loc.getBlockY()+ ""String_Node_Str""+ p_loc.getBlockZ());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String warps_s=j2.warps.listWarps(player);
      if (warps_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warps_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      Warp warp=j2.warps.getPublicWarp(split[1]);
      if (warp != null && j2.hasFlag(player,warp.getFlag())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warp.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String homes_s=j2.warps.listHomes(player.getName());
      if (!homes_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ homes_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      Warp home=j2.warps.getUserWarp(player.getName(),split[1]);
      if (home != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(home.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Flag flag=null;
      if (split.length > 2) {
        flag=Flag.byChar(split[2].charAt(0));
      }
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),flag);
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),Flag.byChar('0'));
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN) && split.length > 1) {
    String toRemove=split[1];
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
    j2.warps.killWarp(j2.warps.getPublicWarp(toRemove));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (j2.hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    if (split.length == 2) {
      String toRemove=split[1];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
      j2.warps.killWarp(j2.warps.getUserWarp(player.getName(),toRemove));
    }
    if (split.length == 3 && j2.hasFlag(player,Flag.ADMIN)) {
      String toRemove=split[1];
      String plr=split[2];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove+ ""String_Node_Str""+ plr);
      j2.warps.killWarp(j2.warps.getUserWarp(plr,toRemove));
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    if (split.length == 2) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      player.sendMessage(ChatColor.RED + target + ""String_Node_Str""+ ChatColor.WHITE+ j2.warps.listHomes(target));
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    if (split.length == 3) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      Warp warptarget=j2.warps.getUserWarp(target,split[2]);
      if (warptarget != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warptarget.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    event.setCancelled(true);
    return;
  }
}","@Override public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (j2.hasFlag(player,Flag.JAILED)) {
    if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
      j2.users.getUser(player).dropFlag(Flag.JAILED);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.rules) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.blacklist) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String line : j2.intro) {
      player.sendMessage(line);
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.TRUSTED)) {
    String playerName=player.getName().toLowerCase();
    if (j2.tpProtect.getBoolean(playerName,false)) {
      j2.tpProtect.setBoolean(playerName,false);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      j2.tpProtect.setBoolean(playerName,true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && (j2.hasFlag(player,Flag.FUN))) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (!j2.hasFlag(player,Flag.ADMIN) && inquestion != null && (j2.hasFlag(inquestion,Flag.TRUSTED)) && j2.tpProtect.getBoolean(inquestion.getName().toLowerCase(),false)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.teleportTo(inquestion.getLocation());
        player.sendMessage(""String_Node_Str"");
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName());
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      if (inquestion.getName().equalsIgnoreCase(player.getName())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        inquestion.teleportTo(player.getLocation());
        inquestion.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + inquestion.getName());
        j2.log.info(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ inquestion.getName()+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> inquest=j2.getServer().matchPlayer(split[1]);
    if (inquest.size() == 1) {
      Player inquestion=inquest.get(0);
      player.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      inquestion.sendMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
      j2.log.info(""String_Node_Str"" + inquestion.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ j2.combineSplit(2,split,""String_Node_Str""));
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.FUN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    int item=0;
    int amount=1;
    int dataType=-1;
    try {
      if (split[1].contains(""String_Node_Str"")) {
        String[] data=split[1].split(""String_Node_Str"");
        try {
          dataType=Integer.valueOf(data[1]);
        }
 catch (        NumberFormatException e) {
          dataType=-1;
        }
        item=Integer.valueOf(data[0]);
      }
 else {
        item=Integer.valueOf(split[1]);
      }
      if (split.length > 2) {
        amount=Integer.valueOf(split[2]);
      }
 else {
        amount=1;
      }
    }
 catch (    NumberFormatException e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if ((new ItemStack(item)).getType() == null || item == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (dataType != -1) {
      player.getWorld().dropItem(player.getLocation(),new ItemStack(item,amount,((byte)dataType)));
    }
 else {
      player.getWorld().dropItem(player.getLocation(),new ItemStack(item,amount));
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length != 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long desired;
    if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=0;
    }
 else     if (split[1].equalsIgnoreCase(""String_Node_Str"")) {
      desired=13000;
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    long curTime=j2.getServer().getWorlds().get(0).getTime();
    long margin=(desired - curTime) % 24000;
    if (margin < 0) {
      margin+=24000;
    }
    j2.getServer().getWorlds().get(0).setTime(curTime + margin);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player[] players=j2.getServer().getOnlinePlayers();
    String msg=""String_Node_Str"" + players.length + ""String_Node_Str"";
    for (    Player p : players) {
      msg+=""String_Node_Str"" + p.getName();
    }
    player.sendMessage(msg);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String message=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.aMsg(playerName,message);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String playerName=player.getName();
      String theReport=j2.combineSplit(1,split,""String_Node_Str"");
      String message=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      String ircmessage=""String_Node_Str"" + playerName + ""String_Node_Str""+ theReport;
      j2.chat.msgByFlag(Flag.ADMIN,message);
      j2.irc.ircAdminMsg(ircmessage);
      j2.log.info(ircmessage);
      Report report=new Report(0,player.getLocation(),player.getName(),theReport,(new Date().getTime()) / 1000);
      j2.reports.addReport(report);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    ArrayList<Report> reps=j2.reports.getReports();
    int size=reps.size();
    if (size == 0) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + size+ ""String_Node_Str"");
    for (    Report r : reps) {
      player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"" + r.getID()+ ""String_Node_Str""+ ChatColor.WHITE+ r.getUser()+ ChatColor.DARK_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ r.getMessage());
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String playerName=player.getName();
    String text=""String_Node_Str"";
    text+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.gMsg(playerName,text);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callKick(split[1],adminName,j2.combineSplit(2,split,""String_Node_Str""));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 3) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String adminName=player.getName();
    j2.kickbans.callAddBan(adminName,split,player.getLocation());
    event.setCancelled(true);
    return;
  }
  if ((split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String adminName=player.getName();
    j2.mysql.unban(name);
    j2.log.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ adminName);
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ adminName);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    List<Player> match=j2.getServer().matchPlayer(split[1]);
    if (match.size() != 1 || match.get(0) == null) {
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    Player who=match.get(0);
    String message=""String_Node_Str"" + match.get(0).getName() + ""String_Node_Str"";
    for (    Flag f : j2.users.getAllFlags(who)) {
      message+=f.getDescription() + ""String_Node_Str"";
    }
    player.sendMessage(message);
    j2.log.info(player.getName() + ""String_Node_Str"" + who.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && split.length > 1) {
    String message=""String_Node_Str"";
    message+=j2.combineSplit(1,split,""String_Node_Str"");
    j2.chat.addChat(player.getName(),message);
    j2.irc.ircMsg(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    String reason=""String_Node_Str"";
    String admin=player.getName();
    if (split.length > 2)     reason=j2.combineSplit(2,split,""String_Node_Str"");
    j2.kickbans.forceKick(name,reason);
    j2.log.log(Level.INFO,""String_Node_Str"" + name + ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlag(Flag.ADMIN,ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ admin+ ""String_Node_Str""+ reason);
    j2.chat.msgByFlagless(Flag.ADMIN,ChatColor.RED + name + ""String_Node_Str""+ reason+ ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.irc.loadIRCAdmins();
    j2.chat.msgByFlag(Flag.SRSTAFF,ChatColor.RED + ""String_Node_Str"" + player.getName());
    j2.log.info(player.getName() + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    j2.loadData();
    j2.chat.msgByFlag(Flag.SRSTAFF,""String_Node_Str"" + player.getName());
    j2.log.info(""String_Node_Str"" + player.getName());
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    if (!j2.maintenance) {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.maintenance=true;
      for (      Player p : j2.getServer().getOnlinePlayers()) {
        if (p != null && !j2.hasFlag(player,Flag.ADMIN)) {
          p.sendMessage(""String_Node_Str"");
          p.kickPlayer(""String_Node_Str"");
        }
      }
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
    }
 else {
      j2.log.info(player.getName() + ""String_Node_Str"");
      j2.chat.msgByFlag(Flag.ADMIN,""String_Node_Str"" + player.getName());
      j2.maintenance=false;
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    player.sendMessage(""String_Node_Str"");
    j2.log.info(player.getName() + ""String_Node_Str"");
    j2.OneByOne=player;
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.SRSTAFF)) {
    String action=split[2];
    if (split.length < 4 || !(action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str""))) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    String name=split[1];
    char flag=split[3].charAt(0);
    User user=j2.users.getUser(name);
    if (user == null) {
      user=j2.mysql.getUser(name);
    }
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      user.addFlag(Flag.byChar(flag));
    }
 else {
      user.dropFlag(Flag.byChar(flag));
    }
    String log=ChatColor.RED + player.getName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ action+ ""String_Node_Str""+ Flag.byChar(flag).getDescription();
    j2.chat.msgByFlag(Flag.ADMIN,log);
    j2.log.info(log);
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Location p_loc=event.getPlayer().getLocation();
    event.getPlayer().sendMessage(""String_Node_Str"" + p_loc.getBlockX() + ""String_Node_Str""+ p_loc.getBlockY()+ ""String_Node_Str""+ p_loc.getBlockZ());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String warps_s=j2.warps.listWarps(player);
      if (warps_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warps_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      Warp warp=j2.warps.getPublicWarp(split[1]);
      if (warp != null && j2.hasFlag(player,warp.getFlag())) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warp.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      String homes_s=j2.warps.listHomes(player.getName());
      if (!homes_s.equalsIgnoreCase(""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ homes_s);
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      Warp home=j2.warps.getUserWarp(player.getName(),split[1]);
      if (home != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(home.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Flag flag=Flag.Z_SPAREWARP_DESIGNATION;
      if (split.length > 2) {
        flag=Flag.byChar(split[2].charAt(0));
      }
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),flag);
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      Warp newWarp=new Warp(split[1],player.getName(),player.getLocation(),Flag.byChar('0'));
      j2.warps.addWarp(newWarp);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN) && split.length > 1) {
    String toRemove=split[1];
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
    j2.warps.killWarp(j2.warps.getPublicWarp(toRemove));
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.FUN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (j2.hasFlag(player,Flag.ADMIN)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
    if (split.length == 2) {
      String toRemove=split[1];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove);
      j2.warps.killWarp(j2.warps.getUserWarp(player.getName(),toRemove));
    }
    if (split.length == 3 && j2.hasFlag(player,Flag.ADMIN)) {
      String toRemove=split[1];
      String plr=split[2];
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + toRemove+ ""String_Node_Str""+ plr);
      j2.warps.killWarp(j2.warps.getUserWarp(plr,toRemove));
    }
    event.setCancelled(true);
    return;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && j2.hasFlag(player,Flag.ADMIN)) {
    if (split.length == 1) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    if (split.length == 2) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      player.sendMessage(ChatColor.RED + target + ""String_Node_Str""+ ChatColor.WHITE+ j2.warps.listHomes(target));
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    if (split.length == 3) {
      String target=split[1];
      boolean isOnline=j2.users.isOnline(target);
      if (!isOnline) {
        j2.warps.loadPlayer(target);
      }
      Warp warptarget=j2.warps.getUserWarp(target,split[2]);
      if (warptarget != null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.teleportTo(warptarget.getLocation());
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      if (!isOnline) {
        j2.warps.dropPlayer(target);
      }
    }
    event.setCancelled(true);
    return;
  }
}",0.9969820108837718
153681,"public boolean groupHasFlag(String group,Flag flag){
  return this.groups.get(group).contains(flag);
}","public boolean groupHasFlag(String group,Flag flag){
  return (this.groups.get(group) != null ? this.groups.get(group).contains(flag) : false);
}",0.8259109311740891
153682,"@Override public void onPlayerLogin(PlayerLoginEvent event){
  if (j2.debug)   j2.log.info(""String_Node_Str"" + event.getPlayer().getName());
  String reason=j2.mysql.checkBans(event.getPlayer().getName());
  Player player=event.getPlayer();
  boolean isAdmin=j2.hasFlag(player,Flag.ADMIN);
  if (reason != null) {
    event.setKickMessage(reason);
    event.disallow(PlayerLoginEvent.Result.KICK_BANNED,reason);
    return;
  }
  if (j2.maintenance && !isAdmin) {
    reason=j2.maintmessage;
    event.setKickMessage(reason);
    event.disallow(PlayerLoginEvent.Result.KICK_OTHER,reason);
    return;
  }
  if (j2.users.getUser(player) != null) {
    j2.kickbans.callKick(player.getName(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!isAdmin && !j2.hasFlag(player,Flag.DONOR) && j2.getServer().getOnlinePlayers().length >= j2.playerLimit) {
    event.setKickMessage(""String_Node_Str"");
    event.disallow(PlayerLoginEvent.Result.KICK_FULL,""String_Node_Str"");
    return;
  }
  j2.users.addUser(event.getPlayer().getName());
  event.allow();
  if (j2.debug)   j2.log.info(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"");
}","@Override public void onPlayerLogin(PlayerLoginEvent event){
  if (j2.debug)   j2.log.info(""String_Node_Str"" + event.getPlayer().getName());
  String reason=j2.mysql.checkBans(event.getPlayer().getName());
  Player player=event.getPlayer();
  boolean isAdmin=j2.hasFlag(player,Flag.ADMIN);
  if (reason != null) {
    reason=""String_Node_Str"";
    event.setKickMessage(reason);
    event.disallow(PlayerLoginEvent.Result.KICK_BANNED,reason);
    return;
  }
  if (j2.maintenance && !isAdmin) {
    reason=j2.maintmessage;
    event.setKickMessage(reason);
    event.disallow(PlayerLoginEvent.Result.KICK_OTHER,reason);
    return;
  }
  if (j2.users.getUser(player) != null) {
    j2.kickbans.callKick(player.getName(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!isAdmin && !j2.hasFlag(player,Flag.DONOR) && j2.getServer().getOnlinePlayers().length >= j2.playerLimit) {
    event.setKickMessage(""String_Node_Str"");
    event.disallow(PlayerLoginEvent.Result.KICK_FULL,""String_Node_Str"");
    return;
  }
  j2.users.addUser(event.getPlayer().getName());
  event.allow();
  if (j2.debug)   j2.log.info(""String_Node_Str"" + event.getPlayer().getName() + ""String_Node_Str"");
}",0.9872122762148338
153683,"public boolean ircCommand(String host,String nick,String[] command){
  if (!j2.ircEnable)   return false;
  int lvl=0;
  String adminName=""String_Node_Str"";
synchronized (adminsLock) {
    for (    ircAdmin admin : admins) {
      if (admin != null && admin.getHostname().equals(host)) {
        lvl=admin.getLevel();
        adminName=admin.getUsername();
      }
    }
  }
  if (command[0].charAt(0) == '.') {
    command[0]=command[0].substring(1);
  }
  if (lvl == 0 || (lvl == 2 && !ircLevel2(command[0]))) {
    return false;
  }
  String commands=j2.combineSplit(0,command,""String_Node_Str"");
  String com=command[0];
  boolean done=false;
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.forceKick(command[1],j2.combineSplit(2,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.callBan(adminName,command,new Location(j2.getServer().getWorlds().get(0),0,0,0,0,0));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.chat.gMsg(adminName,j2.combineSplit(1,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.chat.aMsg(adminName,j2.combineSplit(1,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.callAddBan(adminName,command,new Location(j2.getServer().getWorlds().get(0),0,0,0,0,0));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.kickbans.unban(adminName,command[1]);
    done=true;
  }
  if (done) {
    j2.log.log(Level.INFO,""String_Node_Str"" + adminName + ""String_Node_Str""+ nick+ ""String_Node_Str""+ host+ ""String_Node_Str""+ commands);
  }
 else {
    j2.log.log(Level.INFO,""String_Node_Str"" + adminName + ""String_Node_Str""+ nick+ ""String_Node_Str""+ host+ ""String_Node_Str""+ commands);
  }
  return done;
}","public boolean ircCommand(String host,String nick,String[] command){
  if (!j2.ircEnable)   return false;
  int lvl=0;
  String adminName=""String_Node_Str"";
synchronized (adminsLock) {
    for (    ircAdmin admin : admins) {
      if (admin != null && admin.getHostname().equals(host)) {
        lvl=admin.getLevel();
        adminName=admin.getUsername();
      }
    }
  }
  if (command[0].charAt(0) == '.') {
    command[0]=command[0].substring(1);
  }
  if (lvl == 0 || (lvl == 2 && !ircLevel2(command[0]))) {
    return false;
  }
  String commands=j2.combineSplit(0,command,""String_Node_Str"");
  String com=command[0];
  boolean done=false;
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.callKick(command[1],adminName,j2.combineSplit(2,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.callBan(adminName,command,new Location(j2.getServer().getWorlds().get(0),0,0,0,0,0));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.chat.gMsg(adminName,j2.combineSplit(1,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.chat.aMsg(adminName,j2.combineSplit(1,command,""String_Node_Str""));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 2) {
    j2.kickbans.callAddBan(adminName,command,new Location(j2.getServer().getWorlds().get(0),0,0,0,0,0));
    done=true;
  }
  if (com.equalsIgnoreCase(""String_Node_Str"") && command.length > 1) {
    j2.kickbans.unban(adminName,command[1]);
    done=true;
  }
  if (done) {
    j2.log.log(Level.INFO,""String_Node_Str"" + adminName + ""String_Node_Str""+ nick+ ""String_Node_Str""+ host+ ""String_Node_Str""+ commands);
  }
 else {
    j2.log.log(Level.INFO,""String_Node_Str"" + adminName + ""String_Node_Str""+ nick+ ""String_Node_Str""+ host+ ""String_Node_Str""+ commands);
  }
  return done;
}",0.995244055068836
153684,"public String stringClean(String toClean){
  return toClean.replace('\""','_').replace('\'','_').replace(';','_');
}","public String stringClean(String toClean){
  return toClean.replace('\""','_').replace('\'','_').replace(';','_').replace(',','_');
}",0.931174089068826
153685,"public void addReport(Report report){
  Connection conn=null;
  PreparedStatement ps=null;
  try {
    conn=getConnection();
    String state=""String_Node_Str"";
    if (j2.debug)     j2.log.info(""String_Node_Str"" + state);
    ps=conn.prepareStatement(state);
    ps.setString(1,stringClean(report.getUser()));
    ps.setString(2,stringClean(report.getMessage()));
    Location loc=report.getLocation();
    ps.setDouble(3,loc.getX());
    ps.setDouble(4,loc.getY());
    ps.setDouble(5,loc.getZ());
    ps.setFloat(6,loc.getPitch());
    ps.setFloat(7,loc.getYaw());
    ps.setInt(8,serverNumber);
    ps.setString(9,loc.getWorld().getName());
    long time=report.getTime();
    ps.setLong(10,time);
    ps.executeUpdate();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setLong(1,time);
    ps.setString(2,report.getMessage());
    ResultSet rs=ps.executeQuery();
    int id=rs.getInt(""String_Node_Str"");
    j2.reports.reportID(time,id);
  }
 catch (  SQLException ex) {
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (conn != null) {
        conn.close();
      }
    }
 catch (    SQLException ex) {
    }
  }
}","public void addReport(Report report){
  Connection conn=null;
  PreparedStatement ps=null;
  try {
    conn=getConnection();
    Location loc=report.getLocation();
    long time=report.getTime();
    String state=""String_Node_Str"" + stringClean(report.getUser()) + ""String_Node_Str""+ stringClean(report.getMessage())+ ""String_Node_Str""+ loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ()+ ""String_Node_Str""+ loc.getPitch()+ ""String_Node_Str""+ loc.getYaw()+ ""String_Node_Str""+ serverNumber+ ""String_Node_Str""+ loc.getWorld().getName()+ ""String_Node_Str""+ time+ ""String_Node_Str"";
    if (j2.debug)     j2.log.info(""String_Node_Str"" + stringClean(report.getUser()) + ""String_Node_Str""+ stringClean(report.getMessage())+ ""String_Node_Str""+ loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ()+ ""String_Node_Str""+ loc.getPitch()+ ""String_Node_Str""+ loc.getYaw()+ ""String_Node_Str""+ serverNumber+ ""String_Node_Str""+ loc.getWorld().getName()+ ""String_Node_Str""+ time+ ""String_Node_Str"");
    ps=conn.prepareStatement(state);
    ps.executeUpdate();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setLong(1,time);
    ps.setString(2,report.getMessage());
    ResultSet rs=ps.executeQuery();
    int id=rs.getInt(""String_Node_Str"");
    j2.reports.reportID(time,id);
  }
 catch (  SQLException ex) {
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (conn != null) {
        conn.close();
      }
    }
 catch (    SQLException ex) {
    }
  }
}",0.5660096690219413
153686,"/** 
 * Serializes individual segment
 * @param obj
 * @param del
 * @param out
 * @throws IOException
 */
private void serializeSegment(EObject obj,Delimiters del,Writer out,String segCode) throws IOException {
  out.write(segCode);
  out.write(del.getField());
  EClass clazz=obj.eClass();
  EList<EStructuralFeature> features=clazz.getEStructuralFeatures();
  boolean compOut=false;
  for (  EStructuralFeature feature : features) {
    if (!metadata.isField(feature)) {
      throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
    }
    if (obj.eIsSet(feature)) {
      if (compOut) {
        out.write(del.getField());
      }
      serializeField(obj.eGet(feature),del,out);
      compOut=true;
    }
  }
  out.write(del.getSegment());
  out.write(""String_Node_Str"");
}","/** 
 * Serializes individual segment
 * @param obj
 * @param del
 * @param out
 * @throws IOException
 */
private void serializeSegment(EObject obj,Delimiters del,Writer out,String segCode) throws IOException {
  out.write(segCode);
  out.write(del.getField());
  EClass clazz=obj.eClass();
  EList<EStructuralFeature> features=clazz.getEStructuralFeatures();
  boolean compOut=false;
  for (  EStructuralFeature feature : features) {
    if (!metadata.isField(feature)) {
      throw new IllegalArgumentException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
    }
    if (compOut) {
      out.write(del.getField());
    }
    compOut=true;
    if (obj.eIsSet(feature)) {
      serializeField(obj.eGet(feature),del,out);
    }
  }
  out.write(del.getSegment());
  out.write(""String_Node_Str"");
}",0.90159901599016
153687,"private Map<String,EdifactModel> loadModel(String uri) throws EDIConfigurationException, IOException, SAXException, URISyntaxException {
  Map<String,EdifactModel> result=new LinkedHashMap<String,EdifactModel>();
  URI platformURI=URI.createURI(uri);
  if (platformURI.isPlatform()) {
    String fragment=platformURI.segment(1);
    URI modelListURI=URI.createURI(""String_Node_Str"" + fragment + ""String_Node_Str""+ EDIUtils.EDI_MAPPING_MODEL_ZIP_LIST_FILE);
    URL url=new URL(CommonPlugin.resolve(modelListURI).toString());
    List<String> mappingModelList=EDIUtils.getMappingModelList(url.openStream());
    EDIUtils.loadMappingModels(result,new java.net.URI(""String_Node_Str""),mappingModelList);
    EdiDirectory dir=createEDIDirectory(result);
    Set<EPackage> packages=ECoreGenerator.INSTANCE.generatePackages(dir);
    for (    EPackage pkg : packages) {
      EPackage.Registry.INSTANCE.put(pkg.getNsURI(),pkg);
    }
  }
  return result;
}","private Map<String,EdifactModel> loadModel(String uri) throws EDIConfigurationException, IOException, SAXException, URISyntaxException {
  Map<String,EdifactModel> result=new LinkedHashMap<String,EdifactModel>();
  URI platformURI=URI.createURI(uri);
  if (platformURI.isPlatform()) {
    String fragment=platformURI.segment(1);
    URI modelListURI=URI.createURI(""String_Node_Str"" + fragment + ""String_Node_Str""+ EDIUtils.EDI_MAPPING_MODEL_ZIP_LIST_FILE);
    URL url=new URL(CommonPlugin.resolve(modelListURI).toString());
    List<String> mappingModelList=EDIUtils.getMappingModelList(url.openStream());
    EDIUtils.loadMappingModels(result,new java.net.URI(""String_Node_Str""),mappingModelList);
    EdiDirectory dir=createEDIDirectory(result);
    Set<EPackage> packages=ECoreGenerator.INSTANCE.generatePackages(dir);
    for (    EPackage pkg : packages) {
      packageRegistry.put(pkg.getNsURI(),pkg);
    }
  }
  return result;
}",0.9740328563857976
153688,"public boolean sendIssueToSubscribers(final JCRNodeWrapper node,final RenderContext renderContext,final Map<String,String> newsletterVersions) throws Exception {
  logger.info(""String_Node_Str"",node.getPath());
  long timer=System.currentTimeMillis();
  final boolean personalized=node.hasProperty(J_PERSONALIZED) && node.getProperty(J_PERSONALIZED).getBoolean();
  JCRTemplate.getInstance().doExecuteWithSystemSession(null,""String_Node_Str"",new JCRCallback<Boolean>(){
    public Boolean doInJCR(    JCRSessionWrapper session) throws RepositoryException {
      boolean saveSession=false;
      PaginatedList<Subscription> l=null;
      int total=0;
      int offset=0;
      JCRNodeWrapper target=node.getParent();
      do {
        l=subscriptionService.getSubscriptions(target.getIdentifier(),true,true,null,false,offset,READ_CHUNK_SIZE,session);
        total=l.getTotalSize();
        for (        Subscription subscription : l.getData()) {
          if (StringUtils.isEmpty(subscription.getEmail())) {
            logger.warn(""String_Node_Str"",subscription.getSubscriber());
            continue;
          }
          String username=JahiaUserManagerService.GUEST_USERNAME;
          JahiaSite site=null;
          try {
            site=siteService.getSiteByKey(node.getResolveSite().getSiteKey());
          }
 catch (          JahiaException ignored) {
          }
          if (personalized && subscription.isRegisteredUser() && subscription.getSubscriber() != null) {
            username=subscription.getName();
          }
          JCRUserNode user=subscription.isRegisteredUser() ? userService.lookupUserByPath(subscription.getSubscriber()) : userService.lookupUserByPath(JahiaUserManagerService.GUEST_USERPATH);
          RenderContext letterContext=new RenderContext(renderContext.getRequest(),renderContext.getResponse(),user.getJahiaUser());
          letterContext.setEditMode(renderContext.isEditMode());
          letterContext.setServletPath(renderContext.getServletPath());
          letterContext.setWorkspace(renderContext.getWorkspace());
          Locale language=subscription.isRegisteredUser() ? UserPreferencesHelper.getPreferredLocale(user,site) : LanguageCodeConverters.languageCodeToLocale(subscription.getProperties().get(J_PREFERRED_LANGUAGE));
          if (language == null) {
            language=LanguageCodeConverters.languageCodeToLocale(site != null ? site.getDefaultLanguage() : SettingsBean.getInstance().getDefaultLanguageCode());
          }
          String confirmationKey=subscription.getConfirmationKey();
          if (confirmationKey == null) {
            try {
              JCRNodeWrapper subscriptionNode=session.getNodeByUUID(subscription.getId());
              confirmationKey=subscriptionService.generateConfirmationKey(subscriptionNode);
              letterContext.getRequest().setAttribute(""String_Node_Str"",UnsubscribeAction.generateUnsubscribeLink(target,confirmationKey,renderContext.getRequest()));
              subscriptionNode.setProperty(SubscriptionService.J_CONFIRMATION_KEY,confirmationKey);
              saveSession=true;
            }
 catch (            RepositoryException e) {
              logger.warn(""String_Node_Str"" + subscription.getSubscriber(),e);
            }
          }
 else {
            letterContext.getRequest().setAttribute(""String_Node_Str"",UnsubscribeAction.generateUnsubscribeLink(target,confirmationKey,renderContext.getRequest()));
          }
          sendIssue(letterContext,node,subscription.getEmail(),username,""String_Node_Str"",language,""String_Node_Str"",newsletterVersions);
        }
        offset+=READ_CHUNK_SIZE;
      }
 while (offset < total);
      if (saveSession) {
        session.save();
      }
      return Boolean.TRUE;
    }
  }
);
  node.checkout();
  node.setProperty(J_SCHEDULED,(Value)null);
  node.setProperty(J_LAST_SENT,Calendar.getInstance());
  node.getSession().save();
  JCRPublicationService publicationService=JCRPublicationService.getInstance();
  if (publicationService != null) {
    publicationService.publish(Collections.singletonList(node.getIdentifier()),node.getSession().getWorkspace().getName(),Constants.LIVE_WORKSPACE,Collections.singletonList(""String_Node_Str""));
  }
  logger.info(""String_Node_Str"",node.getPath(),System.currentTimeMillis() - timer);
  return true;
}","public boolean sendIssueToSubscribers(final JCRNodeWrapper node,final RenderContext renderContext,final Map<String,String> newsletterVersions) throws Exception {
  logger.info(""String_Node_Str"",node.getPath());
  long timer=System.currentTimeMillis();
  final boolean personalized=node.hasProperty(J_PERSONALIZED) && node.getProperty(J_PERSONALIZED).getBoolean();
  JCRTemplate.getInstance().doExecuteWithSystemSession(null,""String_Node_Str"",new JCRCallback<Boolean>(){
    public Boolean doInJCR(    JCRSessionWrapper session) throws RepositoryException {
      boolean saveSession=false;
      PaginatedList<Subscription> l=null;
      int total=0;
      int offset=0;
      JCRNodeWrapper target=node.getParent();
      do {
        l=subscriptionService.getSubscriptions(target.getIdentifier(),true,true,null,false,offset,READ_CHUNK_SIZE,session);
        total=l.getTotalSize();
        for (        Subscription subscription : l.getData()) {
          if (StringUtils.isEmpty(subscription.getEmail())) {
            logger.warn(""String_Node_Str"",subscription.getSubscriber());
            continue;
          }
          JahiaSite site=null;
          try {
            site=siteService.getSiteByKey(node.getResolveSite().getSiteKey());
          }
 catch (          JahiaException ignored) {
          }
          JahiaUser letterUser=personalized && subscription.isRegisteredUser() && subscription.getSubscriber() != null ? userService.lookupUserByPath(subscription.getSubscriber()).getJahiaUser() : userService.lookupUserByPath(JahiaUserManagerService.GUEST_USERPATH).getJahiaUser();
          JCRUserNode contextUser=subscription.isRegisteredUser() ? userService.lookupUserByPath(subscription.getSubscriber()) : userService.lookupUserByPath(JahiaUserManagerService.GUEST_USERPATH);
          RenderContext letterContext=new RenderContext(renderContext.getRequest(),renderContext.getResponse(),contextUser.getJahiaUser());
          letterContext.setEditMode(renderContext.isEditMode());
          letterContext.setServletPath(renderContext.getServletPath());
          letterContext.setWorkspace(renderContext.getWorkspace());
          Locale language=subscription.isRegisteredUser() ? UserPreferencesHelper.getPreferredLocale(contextUser,site) : LanguageCodeConverters.languageCodeToLocale(subscription.getProperties().get(J_PREFERRED_LANGUAGE));
          if (language == null) {
            language=LanguageCodeConverters.languageCodeToLocale(site != null ? site.getDefaultLanguage() : SettingsBean.getInstance().getDefaultLanguageCode());
          }
          String confirmationKey=subscription.getConfirmationKey();
          if (confirmationKey == null) {
            try {
              JCRNodeWrapper subscriptionNode=session.getNodeByUUID(subscription.getId());
              confirmationKey=subscriptionService.generateConfirmationKey(subscriptionNode);
              letterContext.getRequest().setAttribute(""String_Node_Str"",UnsubscribeAction.generateUnsubscribeLink(target,confirmationKey,renderContext.getRequest()));
              subscriptionNode.setProperty(SubscriptionService.J_CONFIRMATION_KEY,confirmationKey);
              saveSession=true;
            }
 catch (            RepositoryException e) {
              logger.warn(""String_Node_Str"" + subscription.getSubscriber(),e);
            }
          }
 else {
            letterContext.getRequest().setAttribute(""String_Node_Str"",UnsubscribeAction.generateUnsubscribeLink(target,confirmationKey,renderContext.getRequest()));
          }
          sendIssue(letterContext,node,subscription.getEmail(),letterUser,""String_Node_Str"",language,""String_Node_Str"",newsletterVersions);
        }
        offset+=READ_CHUNK_SIZE;
      }
 while (offset < total);
      if (saveSession) {
        session.save();
      }
      return Boolean.TRUE;
    }
  }
);
  node.checkout();
  node.setProperty(J_SCHEDULED,(Value)null);
  node.setProperty(J_LAST_SENT,Calendar.getInstance());
  node.getSession().save();
  JCRPublicationService publicationService=JCRPublicationService.getInstance();
  if (publicationService != null) {
    publicationService.publish(Collections.singletonList(node.getIdentifier()),node.getSession().getWorkspace().getName(),Constants.LIVE_WORKSPACE,Collections.singletonList(""String_Node_Str""));
  }
  logger.info(""String_Node_Str"",node.getPath(),System.currentTimeMillis() - timer);
  return true;
}",0.9430372492836676
153689,"public boolean sendIssue(final RenderContext renderContext,final JCRNodeWrapper node,final String email,final String user,final String type,final Locale locale,final String workspace,final Map<String,String> newsletterVersions) throws RepositoryException {
  final String id=node.getIdentifier();
  final String key=locale + user + type;
  if (!newsletterVersions.containsKey(key)) {
    JCRTemplate.getInstance().doExecuteWithUserSession(user,workspace,locale,new JCRCallback<String>(){
      public String doInJCR(      JCRSessionWrapper session) throws RepositoryException {
        RenderContext localRenderContext=new RenderContext(renderContext.getRequest(),renderContext.getResponse(),session.getUser());
        HashMap<String,Object> removedAttributes=new HashMap<String,Object>();
        try {
          localRenderContext.setEditMode(false);
          localRenderContext.setWorkspace(workspace);
          localRenderContext.setServletPath(""String_Node_Str"");
          JCRNodeWrapper node=session.getNodeByIdentifier(id);
          Resource resource=new Resource(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
          localRenderContext.setMainResource(resource);
          localRenderContext.setSite(node.getResolveSite());
          localRenderContext.setSiteInfo(new SiteInfo(node.getResolveSite()));
          @SuppressWarnings(""String_Node_Str"") Enumeration attributeNames=renderContext.getRequest().getAttributeNames();
          while (attributeNames.hasMoreElements()) {
            String attr=(String)attributeNames.nextElement();
            if (!attr.startsWith(""String_Node_Str"")) {
              removedAttributes.put(attr,renderContext.getRequest().getAttribute(attr));
              renderContext.getRequest().removeAttribute(attr);
            }
          }
          String out=renderService.render(resource,localRenderContext);
          out=htmlExternalizationService.externalize(out,localRenderContext);
          newsletterVersions.put(key,out);
          String title=node.getName();
          if (node.hasProperty(""String_Node_Str"")) {
            title=node.getProperty(""String_Node_Str"").getString();
          }
          newsletterVersions.put(key + ""String_Node_Str"",title);
        }
 catch (        RenderException e) {
          throw new RepositoryException(e);
        }
 finally {
          for (          String key : removedAttributes.keySet()) {
            renderContext.getRequest().setAttribute(key,removedAttributes.get(key));
          }
        }
        return null;
      }
    }
);
  }
  String out=newsletterVersions.get(key);
  String subject=newsletterVersions.get(key + ""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + email + ""String_Node_Str""+ subject);
    logger.debug(out);
  }
  return mailService.sendHtmlMessage(mailService.defaultSender(),email,null,null,subject,out);
}","public boolean sendIssue(final RenderContext renderContext,final JCRNodeWrapper node,final String email,final JahiaUser user,final String type,final Locale locale,final String workspace,final Map<String,String> newsletterVersions) throws RepositoryException {
  final String id=node.getIdentifier();
  final String key=locale + user.getName() + type;
  if (!newsletterVersions.containsKey(key)) {
    JCRTemplate.getInstance().doExecute(user,workspace,locale,new JCRCallback<String>(){
      public String doInJCR(      JCRSessionWrapper session) throws RepositoryException {
        RenderContext localRenderContext=new RenderContext(renderContext.getRequest(),renderContext.getResponse(),session.getUser());
        HashMap<String,Object> removedAttributes=new HashMap<String,Object>();
        try {
          localRenderContext.setEditMode(false);
          localRenderContext.setWorkspace(workspace);
          localRenderContext.setServletPath(""String_Node_Str"");
          JCRNodeWrapper node=session.getNodeByIdentifier(id);
          Resource resource=new Resource(node,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
          localRenderContext.setMainResource(resource);
          localRenderContext.setSite(node.getResolveSite());
          localRenderContext.setSiteInfo(new SiteInfo(node.getResolveSite()));
          @SuppressWarnings(""String_Node_Str"") Enumeration attributeNames=renderContext.getRequest().getAttributeNames();
          while (attributeNames.hasMoreElements()) {
            String attr=(String)attributeNames.nextElement();
            if (!attr.startsWith(""String_Node_Str"")) {
              removedAttributes.put(attr,renderContext.getRequest().getAttribute(attr));
              renderContext.getRequest().removeAttribute(attr);
            }
          }
          String out=renderService.render(resource,localRenderContext);
          out=htmlExternalizationService.externalize(out,localRenderContext);
          newsletterVersions.put(key,out);
          String title=node.getName();
          if (node.hasProperty(""String_Node_Str"")) {
            title=node.getProperty(""String_Node_Str"").getString();
          }
          newsletterVersions.put(key + ""String_Node_Str"",title);
        }
 catch (        RenderException e) {
          throw new RepositoryException(e);
        }
 finally {
          for (          String key : removedAttributes.keySet()) {
            renderContext.getRequest().setAttribute(key,removedAttributes.get(key));
          }
        }
        return null;
      }
    }
);
  }
  String out=newsletterVersions.get(key);
  String subject=newsletterVersions.get(key + ""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + email + ""String_Node_Str""+ subject);
    logger.debug(out);
  }
  return mailService.sendHtmlMessage(mailService.defaultSender(),email,null,null,subject,out);
}",0.9931010693342532
153690,"public boolean testIssue(RequestContext ctx,MessageContext msgCtx){
  final Map<String,String> newsletterVersions=new HashMap<String,String>();
  JCRNodeWrapper node=getNodeByUUID(formTestIssue.getIssueUUID(),getCurrentUserSession(ctx));
  boolean testIssueSent=false;
  try {
    testIssueSent=newsletterService.sendIssue(getRenderContext(ctx),node,formTestIssue.getTestmail(),formTestIssue.getUser(),""String_Node_Str"",LanguageCodeConverters.languageCodeToLocale(formTestIssue.getLocale()),""String_Node_Str"",newsletterVersions);
  }
 catch (  RepositoryException e) {
    logger.warn(""String_Node_Str"" + node.getPath(),e);
  }
  setActionMessage(msgCtx,testIssueSent,""String_Node_Str"",""String_Node_Str"",node.getDisplayableName());
  return testIssueSent;
}","public boolean testIssue(RequestContext ctx,MessageContext msgCtx){
  final Map<String,String> newsletterVersions=new HashMap<String,String>();
  JCRNodeWrapper node=getNodeByUUID(formTestIssue.getIssueUUID(),getCurrentUserSession(ctx));
  boolean testIssueSent=false;
  JahiaUser user=userManagerService.lookup(formTestIssue.getUser()).getJahiaUser();
  try {
    testIssueSent=newsletterService.sendIssue(getRenderContext(ctx),node,formTestIssue.getTestmail(),user,""String_Node_Str"",LanguageCodeConverters.languageCodeToLocale(formTestIssue.getLocale()),""String_Node_Str"",newsletterVersions);
  }
 catch (  RepositoryException e) {
    logger.warn(""String_Node_Str"" + node.getPath(),e);
  }
  setActionMessage(msgCtx,testIssueSent,""String_Node_Str"",""String_Node_Str"",node.getDisplayableName());
  return testIssueSent;
}",0.8524382520582647
153691,"public Set<JCRUserNode> searchUsers(String newsletterUUID,SearchCriteria searchCriteria){
  Set<JCRUserNode> notSubscribeUsers=new LinkedHashSet<JCRUserNode>();
  JCRNodeWrapper newsletter=getNodeByUUID(newsletterUUID,getCurrentUserSession(""String_Node_Str""));
  Set<JCRUserNode> searchResult=PrincipalViewHelper.getSearchResult(searchCriteria.getSearchIn(),searchCriteria.getSearchString(),searchCriteria.getProperties(),searchCriteria.getStoredOn(),searchCriteria.getProviders());
  if (newsletter != null) {
    for (    JCRUserNode user : searchResult) {
      try {
        if (subscriptionService.getSubscription(newsletter,user.getPath(),getCurrentUserSession(""String_Node_Str"")) == null) {
          notSubscribeUsers.add(user);
        }
      }
 catch (      RepositoryException e) {
        logger.warn(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ newsletterUUID);
      }
    }
  }
  return notSubscribeUsers;
}","public Set<JCRUserNode> searchUsers(String newsletterUUID,SearchCriteria searchCriteria){
  Set<JCRUserNode> notSubscribeUsers=new LinkedHashSet<JCRUserNode>();
  JCRNodeWrapper newsletter=getNodeByUUID(newsletterUUID,getCurrentUserSession(""String_Node_Str""));
  Set<JCRUserNode> searchResult=null;
  if (newsletter != null) {
    try {
      searchResult=PrincipalViewHelper.getSearchResult(searchCriteria.getSearchIn(),newsletter.getResolveSite().getSiteKey(),searchCriteria.getSearchString(),searchCriteria.getProperties(),searchCriteria.getStoredOn(),searchCriteria.getProviders());
    }
 catch (    RepositoryException e) {
      logger.error(e.getMessage(),e);
    }
    for (    JCRUserNode user : searchResult) {
      try {
        if (subscriptionService.getSubscription(newsletter,user.getPath(),getCurrentUserSession(""String_Node_Str"")) == null) {
          notSubscribeUsers.add(user);
        }
      }
 catch (      RepositoryException e) {
        logger.warn(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ newsletterUUID);
      }
    }
  }
  return notSubscribeUsers;
}",0.6193993106843919
153692,"public boolean sendIssue(final RenderContext renderContext,final JCRNodeWrapper node,final String email,final String user,final String type,final Locale locale,final String workspace,final Map<String,String> newsletterVersions) throws RepositoryException {
  final String id=node.getIdentifier();
  final String key=locale + user + type;
  if (!newsletterVersions.containsKey(key)) {
    JCRTemplate.getInstance().doExecuteWithUserSession(user,workspace,locale,new JCRCallback<String>(){
      public String doInJCR(      JCRSessionWrapper session) throws RepositoryException {
        boolean isEdit=renderContext.isEditMode();
        String previousWorkspace=renderContext.getWorkspace();
        Resource previousResource=renderContext.getMainResource();
        JCRSiteNode previousSite=renderContext.getSite();
        String previousServletPath=renderContext.getServletPath();
        HashMap<String,Object> removedAttributes=new HashMap<String,Object>();
        try {
          renderContext.setEditMode(false);
          renderContext.setWorkspace(workspace);
          renderContext.setServletPath(""String_Node_Str"");
          JCRNodeWrapper node=session.getNodeByIdentifier(id);
          Resource resource=new Resource(node,""String_Node_Str"",null,""String_Node_Str"");
          renderContext.setMainResource(resource);
          renderContext.setSite(node.getResolveSite());
          @SuppressWarnings(""String_Node_Str"") Enumeration attributeNames=renderContext.getRequest().getAttributeNames();
          while (attributeNames.hasMoreElements()) {
            String attr=(String)attributeNames.nextElement();
            if (!attr.startsWith(""String_Node_Str"")) {
              removedAttributes.put(attr,renderContext.getRequest().getAttribute(attr));
              renderContext.getRequest().removeAttribute(attr);
            }
          }
          String out=renderService.render(resource,renderContext);
          out=htmlExternalizationService.externalize(out,renderContext);
          newsletterVersions.put(key,out);
          String title=node.getName();
          if (node.hasProperty(""String_Node_Str"")) {
            title=node.getProperty(""String_Node_Str"").getString();
          }
          newsletterVersions.put(key + ""String_Node_Str"",title);
        }
 catch (        RenderException e) {
          throw new RepositoryException(e);
        }
 finally {
          renderContext.setEditMode(isEdit);
          renderContext.setWorkspace(previousWorkspace);
          renderContext.setMainResource(previousResource);
          renderContext.setSite(previousSite);
          renderContext.setServletPath(previousServletPath);
          for (          String key : removedAttributes.keySet()) {
            renderContext.getRequest().setAttribute(key,removedAttributes.get(key));
          }
        }
        return null;
      }
    }
);
  }
  String out=newsletterVersions.get(key);
  String subject=newsletterVersions.get(key + ""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + email + ""String_Node_Str""+ subject);
    logger.debug(out);
  }
  return mailService.sendHtmlMessage(mailService.defaultSender(),email,null,null,subject,out);
}","public boolean sendIssue(final RenderContext renderContext,final JCRNodeWrapper node,final String email,final String user,final String type,final Locale locale,final String workspace,final Map<String,String> newsletterVersions) throws RepositoryException {
  final String id=node.getIdentifier();
  final String key=locale + user + type;
  if (!newsletterVersions.containsKey(key)) {
    JCRTemplate.getInstance().doExecuteWithUserSession(user,workspace,locale,new JCRCallback<String>(){
      public String doInJCR(      JCRSessionWrapper session) throws RepositoryException {
        boolean isEdit=renderContext.isEditMode();
        String previousWorkspace=renderContext.getWorkspace();
        Resource previousResource=renderContext.getMainResource();
        JCRSiteNode previousSite=renderContext.getSite();
        SiteInfo previousSiteInfo=renderContext.getSiteInfo();
        String previousServletPath=renderContext.getServletPath();
        HashMap<String,Object> removedAttributes=new HashMap<String,Object>();
        try {
          renderContext.setEditMode(false);
          renderContext.setWorkspace(workspace);
          renderContext.setServletPath(""String_Node_Str"");
          JCRNodeWrapper node=session.getNodeByIdentifier(id);
          Resource resource=new Resource(node,""String_Node_Str"",null,""String_Node_Str"");
          renderContext.setMainResource(resource);
          renderContext.setSite(node.getResolveSite());
          renderContext.setSiteInfo(new SiteInfo(node.getResolveSite()));
          @SuppressWarnings(""String_Node_Str"") Enumeration attributeNames=renderContext.getRequest().getAttributeNames();
          while (attributeNames.hasMoreElements()) {
            String attr=(String)attributeNames.nextElement();
            if (!attr.startsWith(""String_Node_Str"")) {
              removedAttributes.put(attr,renderContext.getRequest().getAttribute(attr));
              renderContext.getRequest().removeAttribute(attr);
            }
          }
          String out=renderService.render(resource,renderContext);
          out=htmlExternalizationService.externalize(out,renderContext);
          newsletterVersions.put(key,out);
          String title=node.getName();
          if (node.hasProperty(""String_Node_Str"")) {
            title=node.getProperty(""String_Node_Str"").getString();
          }
          newsletterVersions.put(key + ""String_Node_Str"",title);
        }
 catch (        RenderException e) {
          throw new RepositoryException(e);
        }
 finally {
          renderContext.setEditMode(isEdit);
          renderContext.setWorkspace(previousWorkspace);
          renderContext.setMainResource(previousResource);
          renderContext.setSite(previousSite);
          renderContext.setSiteInfo(previousSiteInfo);
          renderContext.setServletPath(previousServletPath);
          for (          String key : removedAttributes.keySet()) {
            renderContext.getRequest().setAttribute(key,removedAttributes.get(key));
          }
        }
        return null;
      }
    }
);
  }
  String out=newsletterVersions.get(key);
  String subject=newsletterVersions.get(key + ""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + email + ""String_Node_Str""+ subject);
    logger.debug(out);
  }
  return mailService.sendHtmlMessage(mailService.defaultSender(),email,null,null,subject,out);
}",0.9709969788519638
153693,"public String doInJCR(JCRSessionWrapper session) throws RepositoryException {
  boolean isEdit=renderContext.isEditMode();
  String previousWorkspace=renderContext.getWorkspace();
  Resource previousResource=renderContext.getMainResource();
  JCRSiteNode previousSite=renderContext.getSite();
  String previousServletPath=renderContext.getServletPath();
  HashMap<String,Object> removedAttributes=new HashMap<String,Object>();
  try {
    renderContext.setEditMode(false);
    renderContext.setWorkspace(workspace);
    renderContext.setServletPath(""String_Node_Str"");
    JCRNodeWrapper node=session.getNodeByIdentifier(id);
    Resource resource=new Resource(node,""String_Node_Str"",null,""String_Node_Str"");
    renderContext.setMainResource(resource);
    renderContext.setSite(node.getResolveSite());
    @SuppressWarnings(""String_Node_Str"") Enumeration attributeNames=renderContext.getRequest().getAttributeNames();
    while (attributeNames.hasMoreElements()) {
      String attr=(String)attributeNames.nextElement();
      if (!attr.startsWith(""String_Node_Str"")) {
        removedAttributes.put(attr,renderContext.getRequest().getAttribute(attr));
        renderContext.getRequest().removeAttribute(attr);
      }
    }
    String out=renderService.render(resource,renderContext);
    out=htmlExternalizationService.externalize(out,renderContext);
    newsletterVersions.put(key,out);
    String title=node.getName();
    if (node.hasProperty(""String_Node_Str"")) {
      title=node.getProperty(""String_Node_Str"").getString();
    }
    newsletterVersions.put(key + ""String_Node_Str"",title);
  }
 catch (  RenderException e) {
    throw new RepositoryException(e);
  }
 finally {
    renderContext.setEditMode(isEdit);
    renderContext.setWorkspace(previousWorkspace);
    renderContext.setMainResource(previousResource);
    renderContext.setSite(previousSite);
    renderContext.setServletPath(previousServletPath);
    for (    String key : removedAttributes.keySet()) {
      renderContext.getRequest().setAttribute(key,removedAttributes.get(key));
    }
  }
  return null;
}","public String doInJCR(JCRSessionWrapper session) throws RepositoryException {
  boolean isEdit=renderContext.isEditMode();
  String previousWorkspace=renderContext.getWorkspace();
  Resource previousResource=renderContext.getMainResource();
  JCRSiteNode previousSite=renderContext.getSite();
  SiteInfo previousSiteInfo=renderContext.getSiteInfo();
  String previousServletPath=renderContext.getServletPath();
  HashMap<String,Object> removedAttributes=new HashMap<String,Object>();
  try {
    renderContext.setEditMode(false);
    renderContext.setWorkspace(workspace);
    renderContext.setServletPath(""String_Node_Str"");
    JCRNodeWrapper node=session.getNodeByIdentifier(id);
    Resource resource=new Resource(node,""String_Node_Str"",null,""String_Node_Str"");
    renderContext.setMainResource(resource);
    renderContext.setSite(node.getResolveSite());
    renderContext.setSiteInfo(new SiteInfo(node.getResolveSite()));
    @SuppressWarnings(""String_Node_Str"") Enumeration attributeNames=renderContext.getRequest().getAttributeNames();
    while (attributeNames.hasMoreElements()) {
      String attr=(String)attributeNames.nextElement();
      if (!attr.startsWith(""String_Node_Str"")) {
        removedAttributes.put(attr,renderContext.getRequest().getAttribute(attr));
        renderContext.getRequest().removeAttribute(attr);
      }
    }
    String out=renderService.render(resource,renderContext);
    out=htmlExternalizationService.externalize(out,renderContext);
    newsletterVersions.put(key,out);
    String title=node.getName();
    if (node.hasProperty(""String_Node_Str"")) {
      title=node.getProperty(""String_Node_Str"").getString();
    }
    newsletterVersions.put(key + ""String_Node_Str"",title);
  }
 catch (  RenderException e) {
    throw new RepositoryException(e);
  }
 finally {
    renderContext.setEditMode(isEdit);
    renderContext.setWorkspace(previousWorkspace);
    renderContext.setMainResource(previousResource);
    renderContext.setSite(previousSite);
    renderContext.setSiteInfo(previousSiteInfo);
    renderContext.setServletPath(previousServletPath);
    for (    String key : removedAttributes.keySet()) {
      renderContext.getRequest().setAttribute(key,removedAttributes.get(key));
    }
  }
  return null;
}",0.9599631845375056
153694,"private Message handleUnsubscribeMessage(CommandMessage message){
  Channel channel=getChannel((String)message.getClientId());
  if (channel == null)   return handleUnknownClientMessage(message);
  AsyncMessage reply=null;
  ServiceAdapter adapter=adapterFactory.getServiceAdapter(message);
  reply=(AcknowledgeMessage)adapter.manage(channel,message);
  postManage(channel);
  reply.setDestination(message.getDestination());
  reply.setClientId(channel.getId());
  reply.getHeaders().putAll(message.getHeaders());
  return reply;
}","private Message handleUnsubscribeMessage(CommandMessage message){
  Channel channel=getChannel((String)message.getClientId());
  if (channel == null)   return handleUnknownClientMessage(message);
  AsyncMessage reply=null;
  ServiceAdapter adapter=adapterFactory.getServiceAdapter(message);
  if (adapter != null) {
    reply=(AcknowledgeMessage)adapter.manage(channel,message);
  }
 else {
    log.warn(""String_Node_Str"" + message.getDestination());
    reply=new AcknowledgeMessage(message);
  }
  postManage(channel);
  reply.setDestination(message.getDestination());
  reply.setClientId(channel.getId());
  reply.getHeaders().putAll(message.getHeaders());
  return reply;
}",0.8145695364238411
153695,"public ComponentInstance newGraniteChannel(String id,String uri,String context){
  try {
    Dictionary properties=new Hashtable();
    properties.put(""String_Node_Str"",id);
    properties.put(""String_Node_Str"",context);
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",uri);
    return channelBuilder.createComponentInstance(properties);
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"" + id);
    return null;
  }
}","public ComponentInstance newGraniteChannel(String id,String uri,String context){
  try {
    Dictionary properties=new Hashtable();
    properties.put(""String_Node_Str"",id);
    properties.put(""String_Node_Str"",context);
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",uri);
    return graniteChannelBuilder.createComponentInstance(properties);
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"" + id);
    return null;
  }
}",0.9906152241918664
153696,"public ComponentInstance newGravityChannel(String id,String uri,String context){
  try {
    Dictionary properties=new Hashtable();
    properties.put(""String_Node_Str"",id);
    properties.put(""String_Node_Str"",context);
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",uri);
    return channelBuilder.createComponentInstance(properties);
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"" + id);
    return null;
  }
}","public ComponentInstance newGravityChannel(String id,String uri,String context){
  try {
    Dictionary properties=new Hashtable();
    properties.put(""String_Node_Str"",id);
    properties.put(""String_Node_Str"",context);
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",uri);
    return gravityChannelBuilder.createComponentInstance(properties);
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"" + id);
    return null;
  }
}",0.9906152241918664
153697,"@Override public Object readObject() throws IOException {
  OSGiGraniteClassUtil.setDestination(null);
  Object obj=super.readObject();
  if (obj instanceof AbstractMessage && !(obj instanceof CommandMessage)) {
    AbstractMessage message=(AbstractMessage)obj;
    OSGiGraniteClassUtil.setDestination(message.getDestination());
    if (Boolean.TRUE.equals(message.getHeader(Gravity.BYTEARRAY_BODY_HEADER))) {
      byte[] byteArray=(byte[])message.getBody();
      ByteArrayInputStream bais=new ByteArrayInputStream(byteArray);
      AMF3Deserializer deser=new AMF3Deserializer(bais);
      message.setBody(deser.readObject());
    }
  }
  return obj;
}","@Override public Object readObject() throws IOException {
  OSGiGraniteClassUtil.setDestination(null);
  Object obj=super.readObject();
  if (obj instanceof AbstractMessage && !(obj instanceof CommandMessage)) {
    AbstractMessage message=(AbstractMessage)obj;
    OSGiGraniteClassUtil.setDestination(message.getDestination());
    if (Boolean.TRUE.equals(message.getHeader(OSGiConstants.BYTEARRAY_BODY_HEADER))) {
      byte[] byteArray=(byte[])message.getBody();
      ByteArrayInputStream bais=new ByteArrayInputStream(byteArray);
      AMF3Deserializer deser=new AMF3Deserializer(bais);
      message.setBody(deser.readObject());
    }
  }
  return obj;
}",0.9863013698630136
153698,"@Override protected final void doPost(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"",request.getRemoteAddr(),request.getRemotePort());
  if (gravity == null) {
    log.error(""String_Node_Str"");
    return;
  }
  try {
    GravityManager.setGravity(gravity,getServletContext());
    gravity.getGravityConfig().getChannelFactory().init(gravity.getGravityConfig(),getServletConfig());
    GraniteContext context=new HttpGraniteContext(gravity.initThread(),request,response);
    AsyncMessage connect=getConnectMessage(request);
    if (connect != null) {
      try {
        String channelId=(String)connect.getClientId();
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
synchronized (channel) {
          channel.reset();
          channel.runReceived(new AsyncHttpContext(request,response,connect));
        }
      }
  finally {
        removeConnectMessage(request);
      }
      return;
    }
    Message[] amf3Requests=deserialize(gravity,request);
    log.debug(""String_Node_Str"",(Object)amf3Requests);
    Message[] amf3Responses=null;
    boolean accessed=false;
    for (int i=0; i < amf3Requests.length; i++) {
      Message amf3Request=amf3Requests[i];
      Message amf3Response=gravity.handleMessage(amf3Request);
      String channelId=(String)amf3Request.getClientId();
      if (!accessed)       accessed=gravity.access(channelId);
      if (amf3Response == null) {
        if (amf3Requests.length > 1)         throw new IllegalArgumentException(""String_Node_Str"");
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
        if (channel == null)         throw new NullPointerException(""String_Node_Str"");
        if (!channel.runReceived(new AsyncHttpContext(request,response,amf3Request))) {
          setConnectMessage(request,amf3Request);
synchronized (channel) {
            WaitingContinuation continuation=new WaitingContinuation(channel);
            channel.setContinuation(continuation);
            continuation.suspend(gravity.getGravityConfig().getLongPollingTimeoutMillis());
          }
        }
        return;
      }
      if (amf3Responses == null)       amf3Responses=new Message[amf3Requests.length];
      amf3Responses[i]=amf3Response;
    }
    log.debug(""String_Node_Str"",(Object)amf3Responses);
    serialize(gravity,response,amf3Responses);
  }
 catch (  IOException e) {
    log.error(e,""String_Node_Str"");
    throw e;
  }
catch (  ClassNotFoundException e) {
    log.error(e,""String_Node_Str"");
    throw new ServletException(""String_Node_Str"",e);
  }
 finally {
    cleanupRequest(request);
  }
  removeConnectMessage(request);
}","@Override protected final void doPost(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"",request.getRemoteAddr(),request.getRemotePort());
  if (gravity == null) {
    log.error(""String_Node_Str"");
    return;
  }
  try {
    GravityManager.setGravity(gravity,getServletContext());
    gravity.getGravityConfig().getChannelFactory().init(gravity.getGravityConfig(),getServletConfig());
    GraniteContext context=new HttpGraniteContext(gravity.initThread(),request,response);
    GraniteManager.setCurrentInstance(context);
    AsyncMessage connect=getConnectMessage(request);
    if (connect != null) {
      try {
        String channelId=(String)connect.getClientId();
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
synchronized (channel) {
          channel.reset();
          channel.runReceived(new AsyncHttpContext(request,response,connect));
        }
      }
  finally {
        removeConnectMessage(request);
      }
      return;
    }
    Message[] amf3Requests=deserialize(gravity,request);
    log.debug(""String_Node_Str"",(Object)amf3Requests);
    Message[] amf3Responses=null;
    boolean accessed=false;
    for (int i=0; i < amf3Requests.length; i++) {
      Message amf3Request=amf3Requests[i];
      Message amf3Response=gravity.handleMessage(amf3Request);
      String channelId=(String)amf3Request.getClientId();
      if (!accessed)       accessed=gravity.access(channelId);
      if (amf3Response == null) {
        if (amf3Requests.length > 1)         throw new IllegalArgumentException(""String_Node_Str"");
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
        if (channel == null)         throw new NullPointerException(""String_Node_Str"");
        if (!channel.runReceived(new AsyncHttpContext(request,response,amf3Request))) {
          setConnectMessage(request,amf3Request);
synchronized (channel) {
            WaitingContinuation continuation=new WaitingContinuation(channel);
            channel.setContinuation(continuation);
            continuation.suspend(gravity.getGravityConfig().getLongPollingTimeoutMillis());
          }
        }
        return;
      }
      if (amf3Responses == null)       amf3Responses=new Message[amf3Requests.length];
      amf3Responses[i]=amf3Response;
    }
    log.debug(""String_Node_Str"",(Object)amf3Responses);
    serialize(gravity,response,amf3Responses);
  }
 catch (  IOException e) {
    log.error(e,""String_Node_Str"");
    throw e;
  }
catch (  ClassNotFoundException e) {
    log.error(e,""String_Node_Str"");
    throw new ServletException(""String_Node_Str"",e);
  }
 finally {
    cleanupRequest(request);
  }
  removeConnectMessage(request);
}",0.9912663755458516
153699,"@Validate public void start() throws MissingHandlerException, ConfigurationException, UnacceptableConfiguration {
  log.debug(""String_Node_Str"" + toString());
  if (servicesConfig.findChannelById(id) == null) {
    servicesConfig.addChannel(this);
    Dictionary properties=new Hashtable();
    properties.put(""String_Node_Str"",ENDPOINT_URI);
    Dictionary filters=new Hashtable();
    filters.put(""String_Node_Str"",""String_Node_Str"" + CONTEXT + ""String_Node_Str"");
    properties.put(""String_Node_Str"",filters);
    if (className.equalsIgnoreCase(""String_Node_Str"")) {
      servlet=gravityServletBuilder.createComponentInstance(properties);
    }
 else {
      servlet=graniteServletBuilder.createComponentInstance(properties);
    }
    started=true;
  }
 else {
    log.error(""String_Node_Str"" + id + ""String_Node_Str"");
  }
}","@Validate public void start(){
  log.debug(""String_Node_Str"" + toString());
  if (servicesConfig.findChannelById(id) == null) {
    try {
      Dictionary properties=new Hashtable();
      properties.put(""String_Node_Str"",ENDPOINT_URI);
      Dictionary filters=new Hashtable();
      filters.put(""String_Node_Str"",""String_Node_Str"" + CONTEXT + ""String_Node_Str"");
      properties.put(""String_Node_Str"",filters);
      if (className.equalsIgnoreCase(""String_Node_Str"")) {
        servlet=gravityServletBuilder.createComponentInstance(properties);
      }
 else {
        servlet=graniteServletBuilder.createComponentInstance(properties);
      }
      servicesConfig.addChannel(this);
      started=true;
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + id + ""String_Node_Str"");
    }
  }
 else {
    log.error(""String_Node_Str"" + id + ""String_Node_Str"");
  }
}",0.7915936952714536
153700,"@Test public void channel(BundleContext context) throws IOException {
  assertThat(""String_Node_Str"",context,is(notNullValue()));
  setup(context);
  ServiceReference sr=osgi.getServiceReference(""String_Node_Str"");
  ServicesConfig sc=(ServicesConfig)osgi.getServiceObject(sr);
  ServiceReference sr2=osgi.getServiceReference(""String_Node_Str"");
  ConfigurationHelper ch=(ConfigurationHelper)osgi.getServiceObject(sr2);
  assertThat(""String_Node_Str"",sc,is(notNullValue()));
  ComponentInstance channel;
  channel=ch.newGraniteChannel(""String_Node_Str"",""String_Node_Str"");
  assertThat(""String_Node_Str"",sc.findChannelById(""String_Node_Str""),is(notNullValue()));
  assertTrue(""String_Node_Str"",sc.findChannelById(""String_Node_Str"").getEndPoint().getUri().equals(""String_Node_Str""));
  channel.dispose();
  assertThat(""String_Node_Str"",sc.findChannelById(""String_Node_Str""),is(nullValue()));
  unsetup();
}","@Test public void channel(BundleContext context) throws IOException {
  assertThat(""String_Node_Str"",context,is(notNullValue()));
  setup(context);
  ServiceReference sr=osgi.getServiceReference(""String_Node_Str"");
  ServicesConfig sc=(ServicesConfig)osgi.getServiceObject(sr);
  ServiceReference sr2=osgi.getServiceReference(""String_Node_Str"");
  ConfigurationHelper ch=(ConfigurationHelper)osgi.getServiceObject(sr2);
  assertThat(""String_Node_Str"",sc,is(notNullValue()));
  ComponentInstance channel;
  channel=ch.newGraniteChannel(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(""String_Node_Str"",sc.findChannelById(""String_Node_Str""),is(notNullValue()));
  assertTrue(""String_Node_Str"",sc.findChannelById(""String_Node_Str"").getEndPoint().getUri().equals(""String_Node_Str""));
  channel.dispose();
  assertThat(""String_Node_Str"",sc.findChannelById(""String_Node_Str""),is(nullValue()));
  unsetup();
}",0.9901531728665208
153701,"@Test public void destination(BundleContext context) throws IOException {
  assertThat(""String_Node_Str"",context,is(notNullValue()));
  setup(context);
  ServiceReference sr=osgi.getServiceReference(""String_Node_Str"");
  ServicesConfig sc=(ServicesConfig)osgi.getServiceObject(sr);
  ServiceReference sr2=osgi.getServiceReference(""String_Node_Str"");
  ConfigurationHelper ch=(ConfigurationHelper)osgi.getServiceObject(sr2);
  assertThat(""String_Node_Str"",sc,is(notNullValue()));
  ComponentInstance destination1, channel1, service1, adapter1, adapter2, factory;
  adapter1=ch.newAdapter(""String_Node_Str"");
  adapter2=ch.newAdapter(""String_Node_Str"");
  service1=ch.newGravityService(""String_Node_Str"");
  channel1=ch.newGravityChannel(""String_Node_Str"",""String_Node_Str"");
  destination1=ch.newGravityDestination(""String_Node_Str"",""String_Node_Str"");
  Service ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser,is(notNullValue()));
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(notNullValue()));
  destination1.dispose();
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(nullValue()));
  destination1=ch.newGravityDestination(""String_Node_Str"",""String_Node_Str"");
  service1.dispose();
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser,is(nullValue()));
  service1=ch.newGravityService(""String_Node_Str"",""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter(),is(notNullValue()));
  assertTrue(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter().getId().equals(""String_Node_Str""));
  destination1.dispose();
  destination1=ch.newGravityDestination(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter(),is(notNullValue()));
  assertTrue(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter().getId().equals(""String_Node_Str""));
  adapter2.dispose();
  assertThat(""String_Node_Str"",sc.findDestinationById(""String_Node_Str"",""String_Node_Str""),is(nullValue()));
  destination1.dispose();
  service1.dispose();
  service1=ch.newGraniteService(""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser,is(notNullValue()));
  destination1=ch.newGraniteDestination(""String_Node_Str"",""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(notNullValue()));
  destination1.dispose();
  destination1=ch.newGraniteDestination(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ConfigurationHelper.SCOPE.SESSION);
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(nullValue()));
  factory=ch.newFactory(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(notNullValue()));
  destination1.dispose();
  factory.dispose();
  service1.dispose();
  channel1.dispose();
  adapter1.dispose();
}","@Test public void destination(BundleContext context) throws IOException {
  assertThat(""String_Node_Str"",context,is(notNullValue()));
  setup(context);
  ServiceReference sr=osgi.getServiceReference(""String_Node_Str"");
  ServicesConfig sc=(ServicesConfig)osgi.getServiceObject(sr);
  ServiceReference sr2=osgi.getServiceReference(""String_Node_Str"");
  ConfigurationHelper ch=(ConfigurationHelper)osgi.getServiceObject(sr2);
  assertThat(""String_Node_Str"",sc,is(notNullValue()));
  ComponentInstance destination1, channel1, service1, adapter1, adapter2, factory;
  adapter1=ch.newAdapter(""String_Node_Str"");
  adapter2=ch.newAdapter(""String_Node_Str"");
  service1=ch.newGravityService(""String_Node_Str"");
  channel1=ch.newGravityChannel(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  destination1=ch.newGravityDestination(""String_Node_Str"",""String_Node_Str"");
  Service ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser,is(notNullValue()));
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(notNullValue()));
  destination1.dispose();
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(nullValue()));
  destination1=ch.newGravityDestination(""String_Node_Str"",""String_Node_Str"");
  service1.dispose();
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser,is(nullValue()));
  service1=ch.newGravityService(""String_Node_Str"",""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter(),is(notNullValue()));
  assertTrue(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter().getId().equals(""String_Node_Str""));
  destination1.dispose();
  destination1=ch.newGravityDestination(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter(),is(notNullValue()));
  assertTrue(""String_Node_Str"",ser.findDestinationById(""String_Node_Str"").getAdapter().getId().equals(""String_Node_Str""));
  adapter2.dispose();
  assertThat(""String_Node_Str"",sc.findDestinationById(""String_Node_Str"",""String_Node_Str""),is(nullValue()));
  destination1.dispose();
  service1.dispose();
  service1=ch.newGraniteService(""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser,is(notNullValue()));
  destination1=ch.newGraniteDestination(""String_Node_Str"",""String_Node_Str"");
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(notNullValue()));
  destination1.dispose();
  destination1=ch.newGraniteDestination(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ConfigurationHelper.SCOPE.SESSION);
  ser=sc.findServiceById(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(nullValue()));
  factory=ch.newFactory(""String_Node_Str"");
  assertThat(""String_Node_Str"",ser.findDestinationById(""String_Node_Str""),is(notNullValue()));
  destination1.dispose();
  factory.dispose();
  service1.dispose();
  channel1.dispose();
  adapter1.dispose();
}",0.997205836696678
153702,"@Override protected final void doPost(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"",request.getRemoteAddr(),request.getRemotePort());
  if (graniteContext == null || gravity == null) {
    log.error(""String_Node_Str"");
    return;
  }
  try {
    GravityManager.setGravity(gravity,getServletContext());
    gravity.getGravityConfig().getChannelFactory().init(gravity.getGravityConfig(),getServletConfig());
    GraniteContext context=new HttpGraniteContext(graniteContext,request,response);
    if (context == null) {
      throw new ServletException(""String_Node_Str"");
    }
    GraniteManager.setCurrentInstance(context);
    AsyncMessage connect=getConnectMessage(request);
    if (connect != null) {
      try {
        String channelId=(String)connect.getClientId();
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
synchronized (channel) {
          channel.reset();
          channel.runReceived(new AsyncHttpContext(request,response,connect));
        }
      }
  finally {
        removeConnectMessage(request);
      }
      return;
    }
    Message[] amf3Requests=deserialize(gravity,request);
    log.debug(""String_Node_Str"",(Object)amf3Requests);
    Message[] amf3Responses=null;
    boolean accessed=false;
    for (int i=0; i < amf3Requests.length; i++) {
      Message amf3Request=amf3Requests[i];
      Message amf3Response=gravity.handleMessage(amf3Request);
      String channelId=(String)amf3Request.getClientId();
      if (!accessed)       accessed=gravity.access(channelId);
      if (amf3Response == null) {
        if (amf3Requests.length > 1)         throw new IllegalArgumentException(""String_Node_Str"");
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
        if (channel == null)         throw new NullPointerException(""String_Node_Str"");
        if (!channel.runReceived(new AsyncHttpContext(request,response,amf3Request))) {
          setConnectMessage(request,amf3Request);
synchronized (channel) {
            WaitingContinuation continuation=new WaitingContinuation(channel);
            channel.setContinuation(continuation);
            continuation.suspend(gravity.getGravityConfig().getLongPollingTimeoutMillis());
          }
        }
        return;
      }
      if (amf3Responses == null)       amf3Responses=new Message[amf3Requests.length];
      amf3Responses[i]=amf3Response;
    }
    log.debug(""String_Node_Str"",(Object)amf3Responses);
    serialize(gravity,response,amf3Responses);
  }
 catch (  IOException e) {
    log.error(e,""String_Node_Str"");
    throw e;
  }
catch (  ClassNotFoundException e) {
    log.error(e,""String_Node_Str"");
    throw new ServletException(""String_Node_Str"",e);
  }
 finally {
    cleanupRequest(request);
  }
  removeConnectMessage(request);
}","@Override protected final void doPost(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"",request.getRemoteAddr(),request.getRemotePort());
  if (gravity == null) {
    log.error(""String_Node_Str"");
    return;
  }
  try {
    GravityManager.setGravity(gravity,getServletContext());
    gravity.getGravityConfig().getChannelFactory().init(gravity.getGravityConfig(),getServletConfig());
    GraniteContext context=new HttpGraniteContext(gravity.initThread(),request,response);
    if (context == null) {
      throw new ServletException(""String_Node_Str"");
    }
    GraniteManager.setCurrentInstance(context);
    AsyncMessage connect=getConnectMessage(request);
    if (connect != null) {
      try {
        String channelId=(String)connect.getClientId();
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
synchronized (channel) {
          channel.reset();
          channel.runReceived(new AsyncHttpContext(request,response,connect));
        }
      }
  finally {
        removeConnectMessage(request);
      }
      return;
    }
    Message[] amf3Requests=deserialize(gravity,request);
    log.debug(""String_Node_Str"",(Object)amf3Requests);
    Message[] amf3Responses=null;
    boolean accessed=false;
    for (int i=0; i < amf3Requests.length; i++) {
      Message amf3Request=amf3Requests[i];
      Message amf3Response=gravity.handleMessage(amf3Request);
      String channelId=(String)amf3Request.getClientId();
      if (!accessed)       accessed=gravity.access(channelId);
      if (amf3Response == null) {
        if (amf3Requests.length > 1)         throw new IllegalArgumentException(""String_Node_Str"");
        GenericChannel channel=(GenericChannel)gravity.getChannel(channelId);
        if (channel == null)         throw new NullPointerException(""String_Node_Str"");
        if (!channel.runReceived(new AsyncHttpContext(request,response,amf3Request))) {
          setConnectMessage(request,amf3Request);
synchronized (channel) {
            WaitingContinuation continuation=new WaitingContinuation(channel);
            channel.setContinuation(continuation);
            continuation.suspend(gravity.getGravityConfig().getLongPollingTimeoutMillis());
          }
        }
        return;
      }
      if (amf3Responses == null)       amf3Responses=new Message[amf3Requests.length];
      amf3Responses[i]=amf3Response;
    }
    log.debug(""String_Node_Str"",(Object)amf3Responses);
    serialize(gravity,response,amf3Responses);
  }
 catch (  IOException e) {
    log.error(e,""String_Node_Str"");
    throw e;
  }
catch (  ClassNotFoundException e) {
    log.error(e,""String_Node_Str"");
    throw new ServletException(""String_Node_Str"",e);
  }
 finally {
    cleanupRequest(request);
  }
  removeConnectMessage(request);
}",0.9891910739191074
153703,"protected void internalStart(){
  gravityPool=new GravityPool(gravityConfig);
  channelsTimer=new Timer();
  if (graniteConfig.isRegisterMBeans()) {
    try {
      ObjectName name=new ObjectName(""String_Node_Str"" + graniteConfig.getMBeanContextName());
      log.info(""String_Node_Str"",name);
      OpenMBean mBean=OpenMBean.createMBean(this);
      MBeanServerLocator.getInstance().register(mBean,name,true);
    }
 catch (    Exception e) {
      log.error(e,""String_Node_Str"",graniteConfig.getMBeanContextName());
    }
  }
}","protected void internalStart(){
  gravityPool=new GravityPool(gravityConfig);
  channelsTimer=new Timer();
  if (graniteContext.getGraniteConfig().isRegisterMBeans()) {
    try {
      ObjectName name=new ObjectName(""String_Node_Str"" + graniteContext.getGraniteConfig().getMBeanContextName());
      log.info(""String_Node_Str"",name);
      OpenMBean mBean=OpenMBean.createMBean(this);
      MBeanServerLocator.getInstance().register(mBean,name,true);
    }
 catch (    Exception e) {
      log.error(e,""String_Node_Str"",graniteContext.getGraniteConfig().getMBeanContextName());
    }
  }
}",0.9463327370304114
153704,"public GraniteConfig getGraniteConfig(){
  return graniteConfig;
}","public GraniteConfig getGraniteConfig(){
  return graniteContext.getGraniteConfig();
}",0.868421052631579
153705,"public GraniteContext initThread(){
  return null;
}","public GraniteContext initThread(){
  return graniteContext;
}",0.8596491228070176
153706,"public ServicesConfig getServicesConfig(){
  return servicesConfig;
}","public ServicesConfig getServicesConfig(){
  return graniteContext.getServicesConfig();
}",0.8607594936708861
153707,"@Unbind public final synchronized void unbindDestination(final GraniteDestination destination){
  osgiServices.remove(destination.getId());
}","@Unbind public final synchronized void unbindDestination(final GraniteDestination destination){
  osgiServices.remove(destination.getId());
  CacheEntry ce=cacheEntries.remove(destination.getId());
  if (ce != null) {
    log.info(""String_Node_Str"" + ce.entry + ""String_Node_Str""+ destination.getId()+ ""String_Node_Str"");
    ce.cache.remove(ce.entry);
  }
}",0.5651302605210421
153708,"final protected void changeItem(IStaticsPage ip){
  if (ip != null) {
    if (m_widget != null) {
      m_widget.setVisible(false);
      StaticsMain.this.remove(m_widget);
    }
    m_widget=ip.getWidget();
    StaticsMain.this.add(m_widget);
    m_widget.setLocation(20,60);
    m_widget.setSize(480,400);
    m_widget.setVisible(true);
  }
}","final protected void changeItem(IStaticsPage ip){
  if (ip != null) {
    if (m_widget != null) {
      StaticsMain.this.remove(m_widget);
    }
    m_widget=ip.getWidget();
    StaticsMain.this.add(m_widget);
    m_widget.setLocation(20,60);
    m_widget.setSize(480,400);
    m_widget.setVisible(true);
    this.pack();
  }
}",0.9239940387481372
153709,"protected static void Init(){
  if (StaticPages == null) {
    StaticPages=new ArrayList<IStaticsPage>();
    try {
      RegistePage(TestPage.class);
      RegistePage(TestPage2.class);
      RegistePage(HistoryFlowPage.class);
    }
 catch (    InstantiationException ex) {
      Logger.getLogger(StaticsMain.class.getName()).log(Level.SEVERE,null,ex);
    }
catch (    IllegalAccessException ex) {
      Logger.getLogger(StaticsMain.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","protected static void Init(){
  if (StaticPages == null) {
    StaticPages=new ArrayList<IStaticsPage>();
    try {
      RegistePage(TestPage.class);
      RegistePage(TestPage2.class);
      RegistePage(DynamicFlowChartPage.class);
      RegistePage(AnalysisChartPage.class);
      RegistePage(HistoryFlowPage.class);
    }
 catch (    InstantiationException ex) {
      Logger.getLogger(StaticsMain.class.getName()).log(Level.SEVERE,null,ex);
    }
catch (    IllegalAccessException ex) {
      Logger.getLogger(StaticsMain.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}",0.9151910531220876
153710,"final protected void changeItem(IStaticsPage ip){
  if (ip != null) {
    if (m_widget != null) {
      StaticsMain.this.remove(m_widget);
    }
    m_widget=ip.getWidget();
    StaticsMain.this.add(m_widget);
    m_widget.setLocation(20,60);
    m_widget.setSize(480,400);
    m_widget.setVisible(true);
    this.pack();
  }
}","final protected void changeItem(IStaticsPage ip){
  if (ip != null) {
    if (m_widget != null) {
      m_widget.setVisible(false);
      StaticsMain.this.remove(m_widget);
    }
    m_widget=ip.getWidget();
    StaticsMain.this.add(m_widget);
    m_widget.setLocation(20,60);
    m_widget.setSize(480,400);
    m_widget.setVisible(true);
    this.pack();
  }
}",0.9505813953488372
153711,"private void initComponents(){
  try {
    if (SystemTray.isSupported()) {
      SystemTray st=SystemTray.getSystemTray();
      Image image=Toolkit.getDefaultToolkit().getImage(""String_Node_Str"");
      PopupMenu pm=new PopupMenu();
      MenuItem changeUserMenu=new MenuItem(""String_Node_Str"");
      changeUserMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          onStaticsShow();
        }
      }
);
      MenuItem exitMenu=new MenuItem(""String_Node_Str"");
      exitMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          System.exit(0);
        }
      }
);
      pm.add(changeUserMenu);
      pm.addSeparator();
      pm.add(exitMenu);
      TrayIcon ti=new TrayIcon(image,""String_Node_Str"",pm);
      ti.setImageAutoSize(true);
      st.add(ti);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void initComponents(){
  try {
    if (SystemTray.isSupported()) {
      SystemTray st=SystemTray.getSystemTray();
      PopupMenu pm=new PopupMenu();
      MenuItem changeUserMenu=new MenuItem(""String_Node_Str"");
      changeUserMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          onStaticsShow();
        }
      }
);
      MenuItem exitMenu=new MenuItem(""String_Node_Str"");
      exitMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          System.exit(0);
        }
      }
);
      pm.add(changeUserMenu);
      pm.addSeparator();
      pm.add(exitMenu);
      TrayIcon ti=new TrayIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")).getImage(),""String_Node_Str"",pm);
      ti.setImageAutoSize(true);
      st.add(ti);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.5420460632029994
153712,"/** 
 * @param args the command line arguments
 */
public static void main(String args[]){
  CernetPacketFilter.Initialize(""String_Node_Str"");
  INetwork in=Network.Network.Instance();
  in.startListenThreads();
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      new SmallWindow().setVisible(true);
      new TrayIconWindow();
    }
  }
);
}","/** 
 * @param args the command line arguments
 */
public static void main(String args[]){
  CernetPacketFilter.Initialize(""String_Node_Str"");
  INetwork in=Network.Network.Instance();
  in.startListenThreads();
  java.awt.EventQueue.invokeLater(new Runnable(){
    public void run(){
      new SmallWindow().setVisible(true);
      TrayIconWindow.Instance();
    }
  }
);
}",0.9825033647375504
153713,"public void run(){
  new SmallWindow().setVisible(true);
  new TrayIconWindow();
}","public void run(){
  new SmallWindow().setVisible(true);
  TrayIconWindow.Instance();
}",0.9230769230769232
153714,"private void onStaticsShow(){
  if (m_mainWindow == null) {
    StaticsMain wd=new StaticsMain();
    wd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    m_mainWindow=wd;
  }
  m_mainWindow.setVisible(true);
}","static public void onStaticsShow(){
  if (m_mainWindow == null) {
    StaticsMain wd=new StaticsMain();
    wd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    m_mainWindow=wd;
  }
  m_mainWindow.setVisible(true);
}",0.9587155963302753
153715,"public void itemStateChanged(ItemEvent e){
  System.out.printf(""String_Node_Str"");
  IStaticsPage ip=(IStaticsPage)e.getItem();
  changeItem(ip);
}","public void itemStateChanged(ItemEvent e){
  IStaticsPage ip=(IStaticsPage)e.getItem();
  changeItem(ip);
}",0.84251968503937
153716,"/** 
 * Creates new form StaticsMain 
 */
public StaticsMain(){
  Init();
  initComponents();
  for (  IStaticsPage p : StaticPages) {
    this.ui_comboBox.addItem(p);
  }
  this.ui_comboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      System.out.printf(""String_Node_Str"");
      IStaticsPage ip=(IStaticsPage)e.getItem();
      changeItem(ip);
    }
  }
);
  this.changeItem((IStaticsPage)ui_comboBox.getSelectedItem());
}","/** 
 * Creates new form StaticsMain 
 */
public StaticsMain(){
  Init();
  initComponents();
  for (  IStaticsPage p : StaticPages) {
    this.ui_comboBox.addItem(p);
  }
  this.ui_comboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      IStaticsPage ip=(IStaticsPage)e.getItem();
      changeItem(ip);
    }
  }
);
  this.changeItem((IStaticsPage)ui_comboBox.getSelectedItem());
}",0.6391982182628062
153717,"private void onStaticsShow(){
  if (m_mainWindow == null) {
    MainWindow wd=new MainWindow();
    wd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    m_mainWindow=wd;
  }
  m_mainWindow.setVisible(true);
}","void onStaticsShow(){
  SmallWindow.onStaticsShow();
}",0.3071161048689138
153718,"private void initComponents(){
  try {
    if (SystemTray.isSupported()) {
      SystemTray st=SystemTray.getSystemTray();
      PopupMenu pm=new PopupMenu();
      MenuItem changeUserMenu=new MenuItem(""String_Node_Str"");
      changeUserMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          onStaticsShow();
        }
      }
);
      MenuItem exitMenu=new MenuItem(""String_Node_Str"");
      exitMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          System.exit(0);
        }
      }
);
      pm.add(changeUserMenu);
      pm.addSeparator();
      pm.add(exitMenu);
      TrayIcon ti=new TrayIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")).getImage(),""String_Node_Str"",pm);
      ti.setImageAutoSize(true);
      st.add(ti);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void initComponents(){
  try {
    if (SystemTray.isSupported()) {
      SystemTray st=SystemTray.getSystemTray();
      PopupMenu pm=new PopupMenu();
      MenuItem changeUserMenu=new MenuItem(""String_Node_Str"");
      changeUserMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          onStaticsShow();
        }
      }
);
      MenuItem exitMenu=new MenuItem(""String_Node_Str"");
      exitMenu.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          System.exit(0);
        }
      }
);
      pm.add(changeUserMenu);
      pm.addSeparator();
      pm.add(exitMenu);
      TrayIcon ti=new TrayIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")).getImage(),""String_Node_Str"",pm);
      ti.setImageAutoSize(true);
      st.add(ti);
      m_trayIcon=ti;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9888
153719,"public TrayIconWindow(){
  initComponents();
}","private TrayIconWindow(){
  initComponents();
}",0.9032258064516128
153720,"@Override public void run(){
  StringBuilder errorbuffer=new StringBuilder();
  Pcap cap=Pcap.openLive(m_dev.getName(),1024 * 64,Pcap.MODE_PROMISCUOUS,1000 * 30,errorbuffer);
  assert(cap != null);
  PcapPacketHandler<String> jpacketHandler=new PcapPacketHandler<String>(){
    public void nextPacket(    PcapPacket packet,    String user){
      int i=0;
      while (true) {
        Ip4 ip=new Ip4();
        long t=packet.getCaptureHeader().timestampInMillis();
        Tcp tcp=new Tcp();
        Udp udp=new Udp();
        int s=0;
        int d=0;
        int sp=0;
        int tp=0;
        int okcount=0;
        int flag=0;
        Date arriveTime=new Date(t);
        if (packet.hasHeader(ip,i)) {
          s=ip.sourceToInt();
          d=ip.destinationToInt();
          ++okcount;
        }
        if (packet.hasHeader(tcp,i)) {
          sp=tcp.source();
          tp=tcp.destination();
          flag|=IPacket.PacketFlag_TCP;
          ++okcount;
        }
 else         if (packet.hasHeader(udp,i)) {
          sp=udp.source();
          tp=udp.destination();
          flag|=IPacket.PacketFlag_UDP;
          ++okcount;
        }
        if (packet.hasHeader(Http.ID,i)) {
          flag|=IPacket.PacketFlag_HTTP;
        }
        if (packet.hasHeader(Ethernet.ID,i)) {
          flag|=IPacket.PacketFlag_Ethernet;
        }
        if (okcount != 2) {
          break;
        }
 else {
          Packet p=new Packet();
          p.DIP=s;
          p.SIP=d;
          p.DPort=sp;
          p.SPort=tp;
          p.PackLen=packet.getCaptureHeader().caplen();
          p.RecvTime=arriveTime;
          if (s == GetDeviceIpInt(m_dev) || d == GetDeviceIpInt(m_dev)) {
            p.IsUpdate=(GetDeviceIpInt(m_dev) != s);
            p.PacketFlag=flag;
synchronized (ListenThread.this) {
              List<IPacketListener> listeners=m_network.getPacketListeners();
              ListIterator<IPacketListener> it=listeners.listIterator();
              while (it.hasNext()) {
                it.next().onPacketRecv(p);
              }
            }
          }
        }
        ++i;
      }
    }
  }
;
  while (true) {
    cap.loop(Pcap.LOOP_INFINITE,jpacketHandler,m_dev.getDescription());
  }
}","@Override public void run(){
  StringBuilder errorbuffer=new StringBuilder();
  Pcap cap=Pcap.openLive(m_dev.getName(),1024 * 64,Pcap.MODE_PROMISCUOUS,1000 * 30,errorbuffer);
  assert(cap != null);
  PcapPacketHandler<String> jpacketHandler=new PcapPacketHandler<String>(){
    public void nextPacket(    PcapPacket packet,    String user){
      int i=0;
      while (true) {
        Ip4 ip=new Ip4();
        long t=packet.getCaptureHeader().timestampInMillis();
        Tcp tcp=new Tcp();
        Udp udp=new Udp();
        int s=0;
        int d=0;
        int sp=0;
        int tp=0;
        int okcount=0;
        int flag=0;
        Date arriveTime=new Date(t);
        if (packet.hasHeader(ip,i)) {
          s=ip.sourceToInt();
          d=ip.destinationToInt();
          ++okcount;
        }
        if (packet.hasHeader(tcp,i)) {
          sp=tcp.source();
          tp=tcp.destination();
          flag|=IPacket.PacketFlag_TCP;
          ++okcount;
        }
 else         if (packet.hasHeader(udp,i)) {
          sp=udp.source();
          tp=udp.destination();
          flag|=IPacket.PacketFlag_UDP;
          ++okcount;
        }
        if (packet.hasHeader(Http.ID,i)) {
          flag|=IPacket.PacketFlag_HTTP;
        }
        if (packet.hasHeader(Ethernet.ID,i)) {
          flag|=IPacket.PacketFlag_Ethernet;
        }
        if (okcount != 2) {
          break;
        }
 else {
          Packet p=new Packet();
          p.DIP=d;
          p.SIP=s;
          p.DPort=sp;
          p.SPort=tp;
          p.PackLen=packet.getCaptureHeader().caplen();
          p.RecvTime=arriveTime;
          if (s == GetDeviceIpInt(m_dev) || d == GetDeviceIpInt(m_dev)) {
            p.IsUpdate=(GetDeviceIpInt(m_dev) == s);
            p.PacketFlag=flag;
synchronized (ListenThread.this) {
              List<IPacketListener> listeners=m_network.getPacketListeners();
              ListIterator<IPacketListener> it=listeners.listIterator();
              while (it.hasNext()) {
                it.next().onPacketRecv(p);
              }
            }
          }
        }
        ++i;
      }
    }
  }
;
  while (true) {
    cap.loop(Pcap.LOOP_INFINITE,jpacketHandler,m_dev.getDescription());
  }
}",0.998644374152734
153721,"public void nextPacket(PcapPacket packet,String user){
  int i=0;
  while (true) {
    Ip4 ip=new Ip4();
    long t=packet.getCaptureHeader().timestampInMillis();
    Tcp tcp=new Tcp();
    Udp udp=new Udp();
    int s=0;
    int d=0;
    int sp=0;
    int tp=0;
    int okcount=0;
    int flag=0;
    Date arriveTime=new Date(t);
    if (packet.hasHeader(ip,i)) {
      s=ip.sourceToInt();
      d=ip.destinationToInt();
      ++okcount;
    }
    if (packet.hasHeader(tcp,i)) {
      sp=tcp.source();
      tp=tcp.destination();
      flag|=IPacket.PacketFlag_TCP;
      ++okcount;
    }
 else     if (packet.hasHeader(udp,i)) {
      sp=udp.source();
      tp=udp.destination();
      flag|=IPacket.PacketFlag_UDP;
      ++okcount;
    }
    if (packet.hasHeader(Http.ID,i)) {
      flag|=IPacket.PacketFlag_HTTP;
    }
    if (packet.hasHeader(Ethernet.ID,i)) {
      flag|=IPacket.PacketFlag_Ethernet;
    }
    if (okcount != 2) {
      break;
    }
 else {
      Packet p=new Packet();
      p.DIP=s;
      p.SIP=d;
      p.DPort=sp;
      p.SPort=tp;
      p.PackLen=packet.getCaptureHeader().caplen();
      p.RecvTime=arriveTime;
      if (s == GetDeviceIpInt(m_dev) || d == GetDeviceIpInt(m_dev)) {
        p.IsUpdate=(GetDeviceIpInt(m_dev) != s);
        p.PacketFlag=flag;
synchronized (ListenThread.this) {
          List<IPacketListener> listeners=m_network.getPacketListeners();
          ListIterator<IPacketListener> it=listeners.listIterator();
          while (it.hasNext()) {
            it.next().onPacketRecv(p);
          }
        }
      }
    }
    ++i;
  }
}","public void nextPacket(PcapPacket packet,String user){
  int i=0;
  while (true) {
    Ip4 ip=new Ip4();
    long t=packet.getCaptureHeader().timestampInMillis();
    Tcp tcp=new Tcp();
    Udp udp=new Udp();
    int s=0;
    int d=0;
    int sp=0;
    int tp=0;
    int okcount=0;
    int flag=0;
    Date arriveTime=new Date(t);
    if (packet.hasHeader(ip,i)) {
      s=ip.sourceToInt();
      d=ip.destinationToInt();
      ++okcount;
    }
    if (packet.hasHeader(tcp,i)) {
      sp=tcp.source();
      tp=tcp.destination();
      flag|=IPacket.PacketFlag_TCP;
      ++okcount;
    }
 else     if (packet.hasHeader(udp,i)) {
      sp=udp.source();
      tp=udp.destination();
      flag|=IPacket.PacketFlag_UDP;
      ++okcount;
    }
    if (packet.hasHeader(Http.ID,i)) {
      flag|=IPacket.PacketFlag_HTTP;
    }
    if (packet.hasHeader(Ethernet.ID,i)) {
      flag|=IPacket.PacketFlag_Ethernet;
    }
    if (okcount != 2) {
      break;
    }
 else {
      Packet p=new Packet();
      p.DIP=d;
      p.SIP=s;
      p.DPort=sp;
      p.SPort=tp;
      p.PackLen=packet.getCaptureHeader().caplen();
      p.RecvTime=arriveTime;
      if (s == GetDeviceIpInt(m_dev) || d == GetDeviceIpInt(m_dev)) {
        p.IsUpdate=(GetDeviceIpInt(m_dev) == s);
        p.PacketFlag=flag;
synchronized (ListenThread.this) {
          List<IPacketListener> listeners=m_network.getPacketListeners();
          ListIterator<IPacketListener> it=listeners.listIterator();
          while (it.hasNext()) {
            it.next().onPacketRecv(p);
          }
        }
      }
    }
    ++i;
  }
}",0.998108448928121
153722,"public void onPoolRefresh(IPacketPoolEvent e){
  double us=e.getUploadSpeed() / 1024;
  double ds=e.getDownloadSpeed() / 1024;
  this.ui_downloadSpeed.setText(String.format(""String_Node_Str"",us));
  this.ui_uploadSpeed.setText(String.format(""String_Node_Str"",ds));
}","public void onPoolRefresh(IPacketPoolEvent e){
  double us=e.getUploadSpeed() / 1024;
  double ds=e.getDownloadSpeed() / 1024;
  this.ui_downloadSpeed.setText(String.format(""String_Node_Str"",ds));
  this.ui_uploadSpeed.setText(String.format(""String_Node_Str"",us));
}",0.9924812030075189
153723,"private void sendNetworkEvent(NetworkEvent event){
  System.out.println(""String_Node_Str"" + event.classname() + ""String_Node_Str"");
  if (!whitelisted(event.classname())) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String[] tokens=event.serialize();
  StringBuilder sb=new StringBuilder();
  sb.append(event.classname().concat(""String_Node_Str""));
  for (int i=1; i < tokens.length; i++) {
    sb.append(tokens[i].concat(""String_Node_Str""));
  }
  sendMsg(sb.toString());
}","private void sendNetworkEvent(NetworkEvent event){
  System.out.println(""String_Node_Str"" + event.classname() + ""String_Node_Str"");
  if (!whitelisted(event.classname())) {
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str"");
    return;
  }
  String[] tokens=event.serialize();
  StringBuilder sb=new StringBuilder();
  sb.append(event.classname().concat(""String_Node_Str""));
  for (int i=1; i < tokens.length; i++) {
    sb.append(tokens[i].concat(""String_Node_Str""));
  }
  sendMsg(sb.toString());
}",0.973293768545994
153724,"@Override public void post(){
  WorldTile tile=entity.getLayer().get_tile(this.to.getX(),this.to.getY());
  if (tile != null && !tile.is_blocked()) {
    super.post();
  }
}","@Override public void post(){
  WorldTile tile=entity.getLayer().get_tile(this.to.getX(),this.to.getY());
  if (tile != null && !tile.is_blocked()) {
    super.post();
  }
 else {
    System.out.println(""String_Node_Str"" + this.to + ""String_Node_Str"");
  }
}",0.802784222737819
153725,"private void notify_path(Step __step){
  Point __dest=__step.getPoint();
  __dest=ClientGameEnvironment.getWorldLayer(Player.get_zindex()).tile_map.local2world(__dest);
  EEntitySetPath dest_event=new EEntitySetPath(owner,__dest);
  dest_event.post();
}","private void notify_path(Step __step){
  System.out.println(""String_Node_Str"");
  Point __dest=__step.getPoint();
  __dest=ClientGameEnvironment.getWorldLayer(Player.get_zindex()).tile_map.local2world(__dest);
  EEntitySetPath dest_event=new EEntitySetPath(owner,__dest);
  dest_event.setManager(ClientGameEnvironment.getEnvironment().getEventManager());
  System.out.println(""String_Node_Str"");
  dest_event.post();
}",0.7540983606557377
153726,"public void change_tile(int x,int y){
  owner.dx=0.0f;
  owner.dy=0.0f;
  owner.move_to(new Point(x,y));
  step=null;
  if (owner.isPlayerEnt() && path != null) {
    if (path_synch_counter == 0) {
      Step __step=null;
      if (path.getLength() > 0) {
        if (path.getLength() > SYNCH_CHUNK_SIZE) {
          __step=path.getStep(SYNCH_CHUNK_SIZE);
        }
 else {
          __step=path.getStep(path.getLength() - 1);
        }
        notify_path(__step);
      }
    }
    path_synch_counter++;
    if (path_synch_counter >= SYNCH_CHUNK_SIZE) {
      path_synch_counter=0;
    }
  }
  if (path != null && path.getLength() > 0) {
    path.steps.remove(0);
  }
}","public void change_tile(int x,int y){
  Step __step=null;
  System.out.println(""String_Node_Str"" + path_synch_counter + ""String_Node_Str""+ path.getLength());
  if (owner.isPlayerEnt() && path != null) {
    if (path_synch_counter == 0) {
      System.out.println(""String_Node_Str"");
      if (path.getLength() > 0) {
        if (path.getLength() > SYNCH_CHUNK_SIZE) {
          __step=path.getStep(SYNCH_CHUNK_SIZE);
        }
 else {
          __step=path.getStep(path.getLength() - 1);
        }
        notify_path(__step);
      }
    }
    path_synch_counter++;
    if (path_synch_counter >= SYNCH_CHUNK_SIZE) {
      path_synch_counter=0;
    }
  }
  owner.dx=0.0f;
  owner.dy=0.0f;
  owner.move_to(new Point(x,y));
  step=null;
  if (path != null && path.getLength() > 0) {
    path.steps.remove(0);
  }
}",0.784895482130816
153727,"public void update(){
  try {
    Io.update();
  }
 catch (  IOException ex) {
    Logger.getLogger(ModeInGame.class.getName()).log(Level.SEVERE,null,ex);
  }
  Input.update();
  ClientEventManager.update();
  EventManager.update();
  model.update();
  fx.update();
  view.render();
  fx.render();
  get_ui().update();
  get_ui().render();
  DebugOverlay.debugPathfinding();
  overlay.render();
  Main.neServer.update();
}","public void update(){
  try {
    Io.update();
  }
 catch (  IOException ex) {
    Logger.getLogger(ModeInGame.class.getName()).log(Level.SEVERE,null,ex);
  }
  Input.update();
  ClientEventManager.update();
  EventManager.update();
  model.update();
  fx.update();
  view.render();
  fx.render();
  get_ui().update();
  get_ui().render();
  DebugOverlay.debugPathfinding();
  overlay.render();
}",0.9682151589242054
153728,"public void run(){
  IGameMode mode=null;
  Io.init();
  try {
    WindowRender.create();
    while (running) {
      GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
      mode=Game.get_game_mode();
      Timer.tick();
      mode.update();
      Display.sync(60);
      Display.update();
      if (Display.isCloseRequested()) {
        if (Player.get_ent() != null) {
          EPlayerLogout event=new EPlayerLogout();
          event.post();
        }
        running=false;
      }
    }
    System.out.println(""String_Node_Str"");
    WindowRender.destroy();
    Main.neServer.destroy();
    NettyClient.destroy();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  IGameMode mode=null;
  Io.init();
  try {
    WindowRender.create();
    while (running) {
      GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
      mode=Game.get_game_mode();
      Timer.tick();
      mode.update();
      Main.neServer.update();
      Display.sync(60);
      Display.update();
      if (Display.isCloseRequested()) {
        if (Player.get_ent() != null) {
          EPlayerLogout event=new EPlayerLogout();
          event.post();
        }
        running=false;
      }
    }
    System.out.println(""String_Node_Str"");
    WindowRender.destroy();
    Main.neServer.destroy();
    NettyClient.destroy();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9780380673499268
153729,"public static void drawLine(int x1,int y1,int x2,int y2,Color color){
  System.out.println(""String_Node_Str"" + x1 + ""String_Node_Str""+ y1+ ""String_Node_Str""+ x2+ ""String_Node_Str""+ y2+ ""String_Node_Str"");
  glEnable(GL_POINT_SMOOTH);
  glDisable(GL_TEXTURE_2D);
  glLineWidth(4);
  glBegin(GL_LINES);
  glColor3f(color.r,color.g,color.b);
  glVertex2f(x1,y1);
  glVertex2f(x2,y2);
  glEnd();
  glPointSize(8);
  glBegin(GL_POINTS);
  glColor3f(1,0,0);
  glVertex2f(x2,y2);
  glEnd();
  glEnable(GL_TEXTURE_2D);
}","public static void drawLine(int x1,int y1,int x2,int y2,Color color){
  glEnable(GL_POINT_SMOOTH);
  glDisable(GL_TEXTURE_2D);
  glLineWidth(4);
  glBegin(GL_LINES);
  glColor3f(color.r,color.g,color.b);
  glVertex2f(x1,y1);
  glVertex2f(x2,y2);
  glEnd();
  glPointSize(8);
  glBegin(GL_POINTS);
  glColor3f(1,0,0);
  glVertex2f(x2,y2);
  glEnd();
  glEnable(GL_TEXTURE_2D);
}",0.8481439820022497
153730,"public AServerIoLayer(String name){
  this.name=name;
  allChannels=new DefaultChannelGroup(name);
}","public AServerIoLayer(String name){
  this.name=name;
  allChannels=new DefaultChannelGroup(name);
  packets=new ArrayList<NEDataPacket>();
}",0.8298755186721992
153731,"public void update(){
  for (  NEDataPacket packet : packets) {
    handlePacket(packet);
  }
}","public void update(){
  for (  NEDataPacket packet : packets) {
    handlePacket(packet);
  }
  packets.clear();
}",0.9090909090909092
153732,"public void update(){
  gameServer.update();
}","public void update(){
  charServer.update();
  gameServer.update();
}",0.8
153733,"public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=Channels.pipeline();
  pipeline.addLast(""String_Node_Str"",new DelimiterBasedFrameDecoder(8192,Delimiters.lineDelimiter()));
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new StringEncoder());
  pipeline.addLast(""String_Node_Str"",new CharServerHandler(server));
  return pipeline;
}","public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=Channels.pipeline();
  pipeline.addLast(""String_Node_Str"",new DelimiterBasedFrameDecoder(8192,Delimiters.lineDelimiter()));
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new StringEncoder());
  pipeline.addLast(""String_Node_Str"",handler);
  return pipeline;
}",0.955334987593052
153734,"public void run(){
  System.out.println(""String_Node_Str"" + Io.CHAR_SERVER_PORT);
  nio_factory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool());
  bootstrap=new ServerBootstrap(nio_factory);
  factory=new ChannelPipelineFactory(){
    CharServer server=CharServer.this;
    public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=Channels.pipeline();
      pipeline.addLast(""String_Node_Str"",new DelimiterBasedFrameDecoder(8192,Delimiters.lineDelimiter()));
      pipeline.addLast(""String_Node_Str"",new StringDecoder());
      pipeline.addLast(""String_Node_Str"",new StringEncoder());
      pipeline.addLast(""String_Node_Str"",new CharServerHandler(server));
      return pipeline;
    }
  }
;
  bootstrap.setPipelineFactory(factory);
  Channel srvChannel=bootstrap.bind(new InetSocketAddress(Io.CHAR_SERVER_PORT));
  allChannels.add(srvChannel);
}","public void run(){
  System.out.println(""String_Node_Str"" + Io.CHAR_SERVER_PORT);
  nio_factory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool());
  bootstrap=new ServerBootstrap(nio_factory);
  handler=new CharServerHandler(this);
  factory=new ChannelPipelineFactory(){
    public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=Channels.pipeline();
      pipeline.addLast(""String_Node_Str"",new DelimiterBasedFrameDecoder(8192,Delimiters.lineDelimiter()));
      pipeline.addLast(""String_Node_Str"",new StringDecoder());
      pipeline.addLast(""String_Node_Str"",new StringEncoder());
      pipeline.addLast(""String_Node_Str"",handler);
      return pipeline;
    }
  }
;
  bootstrap.setPipelineFactory(factory);
  Channel srvChannel=bootstrap.bind(new InetSocketAddress(Io.CHAR_SERVER_PORT));
  allChannels.add(srvChannel);
}",0.9378407851690296
153735,"@Override protected void handlePacket(NEDataPacket packet){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override protected void handlePacket(NEDataPacket packet){
  String[] data=packet.getData();
  Channel ioChannel=packet.getChannel();
  if (data.length == 0) {
    return;
  }
  String eventType=data[0];
  System.err.println(""String_Node_Str"" + eventType + ""String_Node_Str"");
  if (eventType.equals(""String_Node_Str"")) {
    ServerUserPool.registerUser(ioChannel,""String_Node_Str"");
    handler.sendMsg(""String_Node_Str"",ioChannel);
  }
  if (eventType.equals(""String_Node_Str"")) {
    String gameServerHost=""String_Node_Str"";
    int gameServerPort=Io.GAME_SERVER_PORT;
    User user=ServerUserPool.getUser(ioChannel);
    int user_id=user.getId();
    handler.sendMsg(""String_Node_Str"" + gameServerHost + ""String_Node_Str""+ gameServerPort+ ""String_Node_Str""+ user_id,ioChannel);
  }
}",0.1448957189901207
153736,"public void update(){
  try {
    Io.update();
  }
 catch (  IOException ex) {
    Logger.getLogger(ModeInGame.class.getName()).log(Level.SEVERE,null,ex);
  }
  Input.update();
  EventManager.update();
  model.update();
  fx.update();
  view.render();
  fx.render();
  get_ui().update();
  get_ui().render();
  overlay.render();
}","public void update(){
  try {
    Io.update();
  }
 catch (  IOException ex) {
    Logger.getLogger(ModeInGame.class.getName()).log(Level.SEVERE,null,ex);
  }
  Input.update();
  EventManager.update();
  model.update();
  fx.update();
  view.render();
  fx.render();
  get_ui().update();
  get_ui().render();
  DebugOverlay.debugPathfinding();
  overlay.render();
}",0.9467625899280576
153737,"@Override protected void parse_network_data(String[] data){
  if (data[0].equals(""String_Node_Str"") && data.length == 3) {
    System.out.println(""String_Node_Str"" + data[1] + ""String_Node_Str""+ data[2]);
    EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
    event.post();
  }
  if (data[0].equals(""String_Node_Str"")) {
    int uid=Integer.parseInt(data[1]);
    StringBuilder sb=new StringBuilder();
    for (int i=2; i < data.length; i++) {
      sb.append(data[i].concat(""String_Node_Str""));
    }
    String msg=sb.toString();
    if (uid != Player.character_id) {
      EChatMessage chat_event=new EChatMessage(uid,msg);
      chat_event.dispatch();
      chat_event.post();
    }
  }
  if (data[0].equals(""String_Node_Str"")) {
    int spawn_type=Integer.parseInt(data[1]);
switch (spawn_type) {
case 4:
      Entity mplayer_ent=new EntityNPC();
    mplayer_ent.set_controller(new NpcController());
  mplayer_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
break;
case 0:
Class building=BuildManager.get_building(data[2]);
EntBuilding ent_building;
try {
ent_building=(EntBuilding)building.newInstance();
}
 catch (Exception ex) {
ex.printStackTrace();
return;
}
ent_building.set_combat(new BasicCombat());
ent_building.spawn(54321,new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
break;
}
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
EntityManager.remove_entity(ent);
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
if (ent == null) {
System.err.println(""String_Node_Str"");
return;
}
if (data[2].equals(""String_Node_Str"")) {
if (ent.controller != null) {
((NpcController)ent.controller).set_destination(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
 else {
ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
}","@Override protected void parse_network_data(String[] data){
  if (data[0].equals(""String_Node_Str"") && data.length == 3) {
    System.out.println(""String_Node_Str"" + data[1] + ""String_Node_Str""+ data[2]);
    EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
    event.post();
  }
  if (data[0].equals(""String_Node_Str"")) {
    int uid=Integer.parseInt(data[1]);
    StringBuilder sb=new StringBuilder();
    for (int i=2; i < data.length; i++) {
      sb.append(data[i].concat(""String_Node_Str""));
    }
    String msg=sb.toString();
    if (uid != Player.character_id) {
      EChatMessage chat_event=new EChatMessage(uid,msg);
      chat_event.dispatch();
      chat_event.post();
    }
  }
  if (data[0].equals(""String_Node_Str"")) {
    int spawn_type=Integer.parseInt(data[1]);
switch (spawn_type) {
case 4:
      Entity mplayer_ent=new EntityNPC();
    mplayer_ent.set_controller(new NpcController());
  mplayer_ent.setLayerId(Player.get_zindex());
mplayer_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
break;
case 0:
Class building=BuildManager.get_building(data[2]);
EntBuilding ent_building;
try {
ent_building=(EntBuilding)building.newInstance();
}
 catch (Exception ex) {
ex.printStackTrace();
return;
}
ent_building.set_combat(new BasicCombat());
ent_building.spawn(54321,new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
break;
}
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
EntityManager.remove_entity(ent);
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
if (ent == null) {
System.err.println(""String_Node_Str"");
return;
}
if (data[2].equals(""String_Node_Str"")) {
if (ent.controller != null) {
((NpcController)ent.controller).set_destination(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
 else {
ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
}",0.98894620486367
153738,"public static void render(){
  long total=Runtime.getRuntime().totalMemory();
  long free=Runtime.getRuntime().freeMemory();
  OverlaySystem.ttf.drawString(10,5,""String_Node_Str"" + String.format(""String_Node_Str"",free / (1024.0f * 1024)) + ""String_Node_Str""+ Float.toString(total / (1024.0f * 1024))+ ""String_Node_Str"",Color.white);
  OverlaySystem.ttf.drawString(10,25,""String_Node_Str"" + WorldTimer.datetime.getTime(),Color.white);
  Point tileFrom=new Point(0,0);
  Point tileTo=new Point(0,0);
  Entity[] entList=EntityManager.getEntities(WorldView.get_zindex());
  for (  Entity ent : entList) {
    IEntityController controller=ent.controller;
    if (ent == Player.get_ent() && controller != null && controller instanceof NpcController) {
      NpcController npc_controller=(NpcController)controller;
      if (npc_controller.path == null) {
        continue;
      }
      if (npc_controller.path.steps.size() > 1) {
        System.out.println(""String_Node_Str"" + npc_controller.path.steps.size() + ""String_Node_Str"");
      }
      Step prevStep=new Step(ent.origin.getX(),ent.origin.getY());
      for (      Step step : (ArrayList<Step>)(npc_controller.path).steps) {
        if (step == npc_controller.path.steps.get(0)) {
          continue;
        }
        tileFrom.setLocation(prevStep);
        tileFrom=WorldModel.getWorldLayer(WorldView.get_zindex()).tile_map.local2world(tileFrom);
        tileTo.setLocation(step);
        tileTo=WorldModel.getWorldLayer(WorldView.get_zindex()).tile_map.local2world(tileTo);
        OverlaySystem.drawLine(tileFrom,tileTo,Color.red);
        prevStep=step;
      }
    }
  }
  OverlaySystem.ttf.drawString(10,70,""String_Node_Str"" + Integer.toString(Timer.get_fps()),Color.white);
  OverlaySystem.ttf.drawString(10,90,""String_Node_Str"" + Integer.toString((int)WorldViewCamera.camera_x) + ""String_Node_Str""+ Integer.toString((int)WorldViewCamera.camera_y)+ ""String_Node_Str""+ WorldViewCamera.target.toString(),Color.white);
  OverlaySystem.ttf.drawString(WindowRender.get_window_w() - 100,10,""String_Node_Str"" + WorldView.get_zindex(),Color.white);
}","public static void render(){
  long total=Runtime.getRuntime().totalMemory();
  long free=Runtime.getRuntime().freeMemory();
  OverlaySystem.ttf.drawString(10,5,""String_Node_Str"" + String.format(""String_Node_Str"",free / (1024.0f * 1024)) + ""String_Node_Str""+ Float.toString(total / (1024.0f * 1024))+ ""String_Node_Str"",Color.white);
  OverlaySystem.ttf.drawString(10,25,""String_Node_Str"" + WorldTimer.datetime.getTime(),Color.white);
  OverlaySystem.ttf.drawString(10,70,""String_Node_Str"" + Integer.toString(Timer.get_fps()),Color.white);
  OverlaySystem.ttf.drawString(10,90,""String_Node_Str"" + Integer.toString((int)WorldViewCamera.camera_x) + ""String_Node_Str""+ Integer.toString((int)WorldViewCamera.camera_y)+ ""String_Node_Str""+ WorldViewCamera.target.toString(),Color.white);
  OverlaySystem.ttf.drawString(WindowRender.get_window_w() - 100,10,""String_Node_Str"" + WorldView.get_zindex(),Color.white);
}",0.6024576552640318
153739,"public static void drawLine(int x1,int y1,int x2,int y2,Color color){
  glLineWidth(4.0f);
  glColor3f(color.r,color.g,color.b);
  glBegin(GL_LINE);
  glVertex2d(x1,y1);
  glVertex2d(x2,y2);
  glEnd();
  glLineWidth(1.0f);
}","public static void drawLine(int x1,int y1,int x2,int y2,Color color){
  System.out.println(""String_Node_Str"" + x1 + ""String_Node_Str""+ y1+ ""String_Node_Str""+ x2+ ""String_Node_Str""+ y2+ ""String_Node_Str"");
  glEnable(GL_POINT_SMOOTH);
  glDisable(GL_TEXTURE_2D);
  glLineWidth(4);
  glBegin(GL_LINES);
  glColor3f(color.r,color.g,color.b);
  glVertex2f(x1,y1);
  glVertex2f(x2,y2);
  glEnd();
  glPointSize(8);
  glBegin(GL_POINTS);
  glColor3f(1,0,0);
  glVertex2f(x2,y2);
  glEnd();
  glEnable(GL_TEXTURE_2D);
}",0.4347826086956521
153740,"public void e_on_event(Event event){
  if (event instanceof EEntityMove) {
    EEntityMove move_event=(EEntityMove)event;
    getLayer().move_entity(move_event.entity,move_event.getTo());
    if (move_event.entity.isPlayerEnt()) {
      WorldViewCamera.target.setLocation(move_event.entity.origin);
    }
  }
 else   if (event instanceof EEntitySpawn) {
    EEntitySpawn spawn_event=(EEntitySpawn)event;
    WorldChunk new_chunk=getLayer().get_cached_chunk(WorldChunk.get_chunk_coord(spawn_event.ent.origin));
    EEntityChangeChunk e_change_chunk=new EEntityChangeChunk(spawn_event.ent,null,new_chunk);
    e_change_chunk.post();
    Point ent_origin=spawn_event.ent.origin;
    WorldTile spawn_tile=getLayer().get_tile(ent_origin.getX(),ent_origin.getY());
    Point region_coord=WorldRegion.get_region_coord(ent_origin);
    if (spawn_tile != null) {
      spawn_tile.add_entity(spawn_event.ent);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + ent_origin + ""String_Node_Str"");
    }
    if (spawn_event.ent.light_amt > 0.0f) {
      getLayer().invalidate_light();
    }
  }
 else   if (event instanceof EEntityChangeChunk) {
    EEntityChangeChunk e_change_chunk=(EEntityChangeChunk)event;
    Entity ent=e_change_chunk.ent;
    e_change_chunk.to.add_entity(ent);
    if (ent.isPlayerEnt()) {
      getLayer().update_terrain();
      WorldCluster.locate(e_change_chunk.to.origin);
      getLayer().chunk_gc();
    }
  }
 else   if (event instanceof ETakeDamage) {
    ETakeDamage dmg_event=(ETakeDamage)event;
    if (dmg_event.dmg.type != DamageType.DMG_FIRE && dmg_event.dmg.type != DamageType.DMG_MAGIC) {
      Point dmg_origin=new Point();
      dmg_origin.setLocation(dmg_event.ent.origin);
      WorldTile tile=getLayer().get_tile(dmg_origin.getX(),dmg_origin.getY());
      if (!tile.has_ent(EntDecalBlood.class)) {
        EntDecalBlood blood=new EntDecalBlood();
        blood.spawn(dmg_origin);
      }
 else {
        EntDecalBlood blood=(EntDecalBlood)tile.getEntity(EntDecalBlood.class);
        blood.nextTile();
      }
    }
  }
}","public void e_on_event(Event event){
  if (event instanceof EEntityMove) {
    EEntityMove move_event=(EEntityMove)event;
    getLayer().move_entity(move_event.entity,move_event.getTo());
    if (move_event.entity.isPlayerEnt()) {
      WorldViewCamera.target.setLocation(move_event.entity.origin);
    }
  }
 else   if (event instanceof EEntitySpawn) {
    EEntitySpawn spawn_event=(EEntitySpawn)event;
    WorldChunk new_chunk=getLayer().get_cached_chunk(WorldChunk.get_chunk_coord(spawn_event.ent.origin));
    EEntityChangeChunk e_change_chunk=new EEntityChangeChunk(spawn_event.ent,null,new_chunk);
    e_change_chunk.post();
    Point ent_origin=spawn_event.ent.origin;
    WorldTile spawn_tile=getLayer().get_tile(ent_origin.getX(),ent_origin.getY());
    Point region_coord=WorldRegion.get_region_coord(ent_origin);
    if (spawn_tile != null) {
      spawn_tile.add_entity(spawn_event.ent);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + ent_origin + ""String_Node_Str"");
    }
    if (spawn_event.ent.light_amt > 0.0f) {
      getLayer().invalidate_light();
    }
  }
 else   if (event instanceof EEntityChangeChunk) {
    EEntityChangeChunk e_change_chunk=(EEntityChangeChunk)event;
    Entity ent=e_change_chunk.ent;
    e_change_chunk.to.add_entity(ent);
    if (ent.isPlayerEnt()) {
      getLayer().update_terrain();
      WorldCluster.locate(e_change_chunk.to.origin);
      getLayer().chunk_gc();
    }
  }
 else   if (event instanceof ETakeDamage) {
    ETakeDamage dmg_event=(ETakeDamage)event;
    if (dmg_event.dmg.type != DamageType.DMG_FIRE && dmg_event.dmg.type != DamageType.DMG_MAGIC) {
      Point dmg_origin=new Point();
      dmg_origin.setLocation(dmg_event.ent.origin);
      WorldTile tile=getLayer().get_tile(dmg_origin.getX(),dmg_origin.getY());
      if (!tile.has_ent(EntDecalBlood.class)) {
        EntDecalBlood blood=new EntDecalBlood();
        blood.setLayerId(dmg_event.ent.getLayerId());
        blood.spawn(dmg_origin);
      }
 else {
        EntDecalBlood blood=(EntDecalBlood)tile.getEntity(EntDecalBlood.class);
        blood.nextTile();
      }
    }
  }
}",0.9871244635193132
153741,"private static void e_on_new_hour(){
  if (is_night()) {
    int chance=(int)(Math.random() * 100);
    if (chance < 90) {
      Point spawn_point=new Point(Player.get_ent().origin.getX() + (int)(Math.random() * 60 - 30),Player.get_ent().origin.getY() + (int)(Math.random() * 60 - 30));
      if (WorldCluster.tile_in_cluster(spawn_point.getX(),spawn_point.getY())) {
        if (!WorldViewCamera.tile_in_fov(spawn_point)) {
          return;
        }
      }
 else {
        return;
      }
      WorldTile tile=WorldModel.getWorldLayer(Player.get_zindex()).get_tile(spawn_point.getX(),spawn_point.getY());
      if (tile == null || tile.light_level > 0.5f) {
        return;
      }
      Zombie zombie=new Zombie();
      zombie.setLayerId(WorldLayer.GROUND_LAYER);
      zombie.spawn(spawn_point);
      zombie.set_ai(new BasicMobAI());
    }
  }
}","private static void e_on_new_hour(){
  if (is_night()) {
    int chance=(int)(Math.random() * 100);
    if (chance < 90 && Player.get_ent() != null) {
      Point spawn_point=new Point(Player.get_ent().origin.getX() + (int)(Math.random() * 60 - 30),Player.get_ent().origin.getY() + (int)(Math.random() * 60 - 30));
      if (WorldCluster.tile_in_cluster(spawn_point.getX(),spawn_point.getY())) {
        if (!WorldViewCamera.tile_in_fov(spawn_point)) {
          return;
        }
      }
 else {
        return;
      }
      WorldTile tile=WorldModel.getWorldLayer(Player.get_zindex()).get_tile(spawn_point.getX(),spawn_point.getY());
      if (tile == null || tile.light_level > 0.5f) {
        return;
      }
      Zombie zombie=new Zombie();
      zombie.setLayerId(WorldLayer.GROUND_LAYER);
      zombie.spawn(spawn_point);
      zombie.set_ai(new BasicMobAI());
    }
  }
}",0.983852364475202
153742,"@Override public void post(){
  WorldTile tile=WorldModel.get_tile(this.to.getX(),this.to.getY());
  if (!tile.is_blocked()) {
    super.post();
  }
}","@Override public void post(){
  WorldTile tile=entity.getLayer().get_tile(this.to.getX(),this.to.getY());
  if (!tile.is_blocked()) {
    super.post();
  }
}",0.9185667752442996
153743,"@Override public void post(){
  WorldTile tile=WorldModel.get_tile(this.to.getX(),this.to.getY());
  if (tile != null && !tile.is_blocked()) {
    super.post();
  }
}","@Override public void post(){
  WorldTile tile=entity.getLayer().get_tile(this.to.getX(),this.to.getY());
  if (tile != null && !tile.is_blocked()) {
    super.post();
  }
}",0.9262536873156342
153744,"@Override public void e_on_change_item(){
  if (get_active_item() != null && get_active_item().get_type().equals(""String_Node_Str"")) {
    light_amt=4.0f;
    WorldModel.invalidate_light();
  }
 else {
    if (light_amt != 0.0f) {
      light_amt=0.0f;
      WorldModel.invalidate_light();
    }
  }
}","@Override public void e_on_change_item(){
  if (get_active_item() != null && get_active_item().get_type().equals(""String_Node_Str"")) {
    light_amt=4.0f;
    WorldLayer.invalidate_light();
  }
 else {
    if (light_amt != 0.0f) {
      light_amt=0.0f;
      WorldLayer.invalidate_light();
    }
  }
}",0.9667774086378738
153745,"public EntityPlayer(){
  Combat __combat=new BasicCombat();
  __combat.set_hp(500);
  set_blocking(true);
  set_combat(__combat);
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",16));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",2));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",10));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1).set_slot(""String_Node_Str""));
}","public EntityPlayer(){
  Combat __combat=new BasicCombat();
  __combat.set_hp(500);
  set_blocking(true);
  set_combat(__combat);
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",2));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",10));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1).set_slot(""String_Node_Str""));
}",0.9254066180594503
153746,"public static void init(){
  if (!is_empty()) {
    return;
  }
  links.put(""String_Node_Str"",EntFire.class);
  links.put(""String_Node_Str"",EntFence.class);
  links.put(""String_Node_Str"",EntWoodWall.class);
  links.put(""String_Node_Str"",EntWoodFloor.class);
  links.put(""String_Node_Str"",EntChest.class);
  links.put(""String_Node_Str"",EntSignpost.class);
  links.put(""String_Node_Str"",EntTotem.class);
}","public static void init(){
  if (!is_empty()) {
    return;
  }
  links.put(""String_Node_Str"",EntFire.class);
  links.put(""String_Node_Str"",EntFence.class);
  links.put(""String_Node_Str"",EntWoodWall.class);
  links.put(""String_Node_Str"",EntWoodFloor.class);
  links.put(""String_Node_Str"",EntChest.class);
  links.put(""String_Node_Str"",EntSignpost.class);
  links.put(""String_Node_Str"",EntTotem.class);
  links.put(""String_Node_Str"",EntLadder.class);
}",0.9437939110070258
153747,"@Override public EntityRenderer build_render(){
  final EntFence __owner=this;
  SpriteRenderer __render=new SpriteRenderer(){
    EntFence ent;
{
      this.ent=__owner;
    }
    @Override public void render(){
      tile_id=get_tile_id();
      super.render();
    }
    public int get_tile_id(){
      int id=0;
      boolean t=WorldModel.get_tile(ent.x(),ent.y() - 1).has_ent(EntFence.class);
      boolean b=WorldModel.get_tile(ent.x(),ent.y() + 1).has_ent(EntFence.class);
      boolean l=WorldModel.get_tile(ent.x() - 1,ent.y()).has_ent(EntFence.class);
      boolean r=WorldModel.get_tile(ent.x() + 1,ent.y()).has_ent(EntFence.class);
      if (t) {
        id=1;
        if (r) {
          if (!l && !b) {
            id=4;
          }
 else {
            id=2;
          }
        }
        if (l) {
          if (!r && !b) {
            id=5;
          }
 else {
            id=2;
          }
        }
      }
      if (b) {
        id=1;
        if (r) {
          if (!l && !t) {
            id=3;
          }
 else {
            id=2;
          }
        }
        if (l) {
          if (!r && !t) {
            id=6;
          }
 else {
            id=2;
          }
        }
      }
      return id;
    }
  }
;
  __render.set_texture(""String_Node_Str"");
  __render.get_tileset().sprite_w=60;
  __render.get_tileset().sprite_h=60;
  __render.get_tileset().TILESET_W=3;
  __render.get_tileset().TILESET_H=3;
  return __render;
}","@Override public EntityRenderer build_render(){
  final EntFence __owner=this;
  SpriteRenderer __render=new SpriteRenderer(){
    EntFence ent;
{
      this.ent=__owner;
    }
    @Override public void render(){
      tile_id=get_tile_id();
      super.render();
    }
    public int get_tile_id(){
      int id=0;
      boolean t=getLayer().get_tile(ent.x(),ent.y() - 1).has_ent(EntFence.class);
      boolean b=getLayer().get_tile(ent.x(),ent.y() + 1).has_ent(EntFence.class);
      boolean l=getLayer().get_tile(ent.x() - 1,ent.y()).has_ent(EntFence.class);
      boolean r=getLayer().get_tile(ent.x() + 1,ent.y()).has_ent(EntFence.class);
      if (t) {
        id=1;
        if (r) {
          if (!l && !b) {
            id=4;
          }
 else {
            id=2;
          }
        }
        if (l) {
          if (!r && !b) {
            id=5;
          }
 else {
            id=2;
          }
        }
      }
      if (b) {
        id=1;
        if (r) {
          if (!l && !t) {
            id=3;
          }
 else {
            id=2;
          }
        }
        if (l) {
          if (!r && !t) {
            id=6;
          }
 else {
            id=2;
          }
        }
      }
      return id;
    }
    private WorldLayer getLayer(){
      return WorldModel.getWorldLayer(Player.get_zindex());
    }
  }
;
  __render.set_texture(""String_Node_Str"");
  __render.get_tileset().sprite_w=60;
  __render.get_tileset().sprite_h=60;
  __render.get_tileset().TILESET_W=3;
  __render.get_tileset().TILESET_H=3;
  return __render;
}",0.5305713331105913
153748,"public int get_tile_id(){
  int id=0;
  boolean t=WorldModel.get_tile(ent.x(),ent.y() - 1).has_ent(EntFence.class);
  boolean b=WorldModel.get_tile(ent.x(),ent.y() + 1).has_ent(EntFence.class);
  boolean l=WorldModel.get_tile(ent.x() - 1,ent.y()).has_ent(EntFence.class);
  boolean r=WorldModel.get_tile(ent.x() + 1,ent.y()).has_ent(EntFence.class);
  if (t) {
    id=1;
    if (r) {
      if (!l && !b) {
        id=4;
      }
 else {
        id=2;
      }
    }
    if (l) {
      if (!r && !b) {
        id=5;
      }
 else {
        id=2;
      }
    }
  }
  if (b) {
    id=1;
    if (r) {
      if (!l && !t) {
        id=3;
      }
 else {
        id=2;
      }
    }
    if (l) {
      if (!r && !t) {
        id=6;
      }
 else {
        id=2;
      }
    }
  }
  return id;
}","public int get_tile_id(){
  int id=0;
  boolean t=getLayer().get_tile(ent.x(),ent.y() - 1).has_ent(EntFence.class);
  boolean b=getLayer().get_tile(ent.x(),ent.y() + 1).has_ent(EntFence.class);
  boolean l=getLayer().get_tile(ent.x() - 1,ent.y()).has_ent(EntFence.class);
  boolean r=getLayer().get_tile(ent.x() + 1,ent.y()).has_ent(EntFence.class);
  if (t) {
    id=1;
    if (r) {
      if (!l && !b) {
        id=4;
      }
 else {
        id=2;
      }
    }
    if (l) {
      if (!r && !b) {
        id=5;
      }
 else {
        id=2;
      }
    }
  }
  if (b) {
    id=1;
    if (r) {
      if (!l && !t) {
        id=3;
      }
 else {
        id=2;
      }
    }
    if (l) {
      if (!r && !t) {
        id=6;
      }
 else {
        id=2;
      }
    }
  }
  return id;
}",0.9491094147582696
153749,"@Override public void e_on_obstacle(int x,int y){
  Entity actor=WorldModel.get_tile(x,y).get_actor();
  if (actor != null && owner.get_combat() != null) {
    owner.get_combat().inflict_damage(actor);
  }
}","@Override public void e_on_obstacle(int x,int y){
  Entity actor=WorldModel.getWorldLayer(Player.get_zindex()).get_tile(x,y).get_actor();
  if (actor != null && owner.get_combat() != null) {
    owner.get_combat().inflict_damage(actor);
  }
}",0.9220489977728286
153750,"public void calculate_path(int x,int y){
  Point target=new Point(x,y);
  target=WorldModel.tile_map.world2local(target);
  Point source=new Point(owner.origin);
  source=WorldModel.tile_map.world2local(source);
  try {
    path=finder.findPath(this,source.getX(),source.getY(),target.getX(),target.getY());
  }
 catch (  ArrayIndexOutOfBoundsException ex) {
    path=null;
  }
  step=null;
  if (path != null && path.getLength() >= 1) {
    path.steps.remove(0);
  }
}","public void calculate_path(int x,int y){
  Point target=new Point(x,y);
  target=WorldModel.getWorldLayer(Player.get_zindex()).tile_map.world2local(target);
  Point source=new Point(owner.origin);
  source=WorldModel.getWorldLayer(Player.get_zindex()).tile_map.world2local(source);
  try {
    path=finder.findPath(this,source.getX(),source.getY(),target.getX(),target.getY());
  }
 catch (  ArrayIndexOutOfBoundsException ex) {
    path=null;
  }
  step=null;
  if (path != null && path.getLength() >= 1) {
    path.steps.remove(0);
  }
}",0.9305555555555556
153751,"private void notify_path(Step __step){
  Point __dest=new Point(__step.getX(),__step.getY());
  __dest=WorldModel.tile_map.local2world(__dest);
  EEntitySetPath dest_event=new EEntitySetPath(owner,__dest);
  dest_event.post();
}","private void notify_path(Step __step){
  Point __dest=new Point(__step.getX(),__step.getY());
  __dest=WorldModel.getWorldLayer(Player.get_zindex()).tile_map.local2world(__dest);
  EEntitySetPath dest_event=new EEntitySetPath(owner,__dest);
  dest_event.post();
}",0.9287169042769856
153752,"public void move_ent(int x,int y){
  WorldTile tile=WorldModel.get_tile(x,y);
  if (tile == null) {
    return;
  }
  if (tile.is_blocked()) {
    step=null;
    path=null;
    destination=null;
    e_on_obstacle(x,y);
    return;
  }
  float dx=(float)(x - owner.origin.getX()) * MOVE_SPEED * tile.get_speed_modifier();
  float dy=(float)(y - owner.origin.getY()) * MOVE_SPEED * tile.get_speed_modifier();
  owner.dx+=dx;
  owner.dy+=dy;
  if (owner.dx > 1.0f || owner.dx < -1.0f || owner.dy > 1.0f || owner.dy < -1.0f) {
    change_tile(owner.x() + (int)owner.dx,owner.y() + (int)owner.dy);
    return;
  }
}","public void move_ent(int x,int y){
  WorldTile tile=WorldModel.getWorldLayer(Player.get_zindex()).get_tile(x,y);
  if (tile == null) {
    return;
  }
  if (tile.is_blocked()) {
    step=null;
    path=null;
    destination=null;
    e_on_obstacle(x,y);
    return;
  }
  float dx=(float)(x - owner.origin.getX()) * MOVE_SPEED * tile.get_speed_modifier();
  float dy=(float)(y - owner.origin.getY()) * MOVE_SPEED * tile.get_speed_modifier();
  owner.dx+=dx;
  owner.dy+=dy;
  if (owner.dx > 1.0f || owner.dx < -1.0f || owner.dy > 1.0f || owner.dy < -1.0f) {
    change_tile(owner.x() + (int)owner.dx,owner.y() + (int)owner.dy);
    return;
  }
}",0.9721115537848606
153753,"public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 0) {
    if (step == null || step.equals(owner.origin)) {
      step=path.getStep(0);
    }
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  int dx=0;
  int dy=0;
  if (owner.origin.getX() > __destination.getX()) {
    dx=-1;
    owner.orientation=Orientation.ORIENT_W;
  }
  if (owner.origin.getX() < __destination.getX()) {
    dx=1;
    owner.orientation=Orientation.ORIENT_E;
  }
  if (owner.origin.getY() > __destination.getY()) {
    dy=-1;
    owner.orientation=Orientation.ORIENT_N;
  }
  if (owner.origin.getY() < __destination.getY()) {
    dy=1;
    owner.orientation=Orientation.ORIENT_S;
  }
  move_ent(owner.origin.getX() + dx,owner.origin.getY() + dy);
  if (owner.get_render() instanceof NPCRenderer && owner.origin.equals(destination)) {
    this.destination=null;
    step=null;
    path=null;
    ((NPCRenderer)owner.get_render()).set_frame(0);
  }
}","public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 0) {
    if (step == null || step.equals(owner.origin)) {
      step=path.getStep(0);
    }
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.getWorldLayer(Player.get_zindex()).tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  int dx=0;
  int dy=0;
  if (owner.origin.getX() > __destination.getX()) {
    dx=-1;
    owner.orientation=Orientation.ORIENT_W;
  }
  if (owner.origin.getX() < __destination.getX()) {
    dx=1;
    owner.orientation=Orientation.ORIENT_E;
  }
  if (owner.origin.getY() > __destination.getY()) {
    dy=-1;
    owner.orientation=Orientation.ORIENT_N;
  }
  if (owner.origin.getY() < __destination.getY()) {
    dy=1;
    owner.orientation=Orientation.ORIENT_S;
  }
  move_ent(owner.origin.getX() + dx,owner.origin.getY() + dy);
  if (owner.get_render() instanceof NPCRenderer && owner.origin.equals(destination)) {
    this.destination=null;
    step=null;
    path=null;
    ((NPCRenderer)owner.get_render()).set_frame(0);
  }
}",0.9846153846153848
153754,"@Override public void e_on_obstacle(int x,int y){
  if (!Player.is_combat_mode()) {
    return;
  }
  Entity obstacle=WorldModel.get_tile(x,y).get_obstacle();
  if (obstacle != null && owner.get_combat() != null) {
    owner.get_combat().inflict_damage(obstacle);
  }
}","@Override public void e_on_obstacle(int x,int y){
  if (!Player.is_combat_mode()) {
    return;
  }
  Entity obstacle=WorldModel.getWorldLayer(Player.get_zindex()).get_tile(x,y).get_obstacle();
  if (obstacle != null && owner.get_combat() != null) {
    owner.get_combat().inflict_damage(obstacle);
  }
}",0.9389179755671904
153755,"public void e_on_mouse_click(EMouseClick event){
  Point tile_origin=view.getTileCoord(event.origin);
  if (event.type == MouseInputType.LCLICK) {
    WorldTile tile=WorldModel.get_tile(tile_origin.getX(),tile_origin.getY());
    if (tile == null) {
      return;
    }
    Entity ent=tile.get_actor();
    if (ent != null && ent instanceof EntMonster) {
      Player.attack(ent);
    }
 else {
      Player.move(tile_origin);
    }
  }
}","public void e_on_mouse_click(EMouseClick event){
  Point tile_origin=view.getTileCoord(event.origin);
  if (event.type == MouseInputType.LCLICK) {
    WorldTile tile=WorldModel.getWorldLayer(Player.get_zindex()).get_tile(tile_origin.getX(),tile_origin.getY());
    if (tile == null) {
      return;
    }
    Entity ent=tile.get_actor();
    if (ent != null && ent instanceof EntMonster) {
      Player.attack(ent);
    }
 else {
      Player.move(tile_origin);
    }
  }
}",0.9615806805708014
153756,"@Override protected void parse_network_data(String[] data){
  if (data[0].equals(""String_Node_Str"") && data.length == 3) {
    System.out.println(""String_Node_Str"");
    EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
    event.post();
  }
  if (data[0].equals(""String_Node_Str"")) {
    int uid=Integer.parseInt(data[1]);
    StringBuilder sb=new StringBuilder();
    for (int i=2; i < data.length; i++) {
      sb.append(data[i].concat(""String_Node_Str""));
    }
    String msg=sb.toString();
    if (uid != Player.character_id) {
      EChatMessage chat_event=new EChatMessage(uid,msg);
      chat_event.dispatch();
      chat_event.post();
    }
  }
  if (data[0].equals(""String_Node_Str"")) {
    int spawn_type=Integer.parseInt(data[1]);
switch (spawn_type) {
case 4:
      Entity mplayer_ent=new EntityNPC();
    mplayer_ent.set_controller(new NpcController());
  mplayer_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
break;
case 0:
Class building=BuildManager.get_building(data[2]);
EntBuilding ent_building;
try {
ent_building=(EntBuilding)building.newInstance();
}
 catch (Exception ex) {
ex.printStackTrace();
return;
}
ent_building.set_combat(new BasicCombat());
ent_building.spawn(54321,new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
break;
}
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
EntityManager.remove_entity(ent);
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
if (ent == null) {
System.err.println(""String_Node_Str"");
return;
}
if (data[2].equals(""String_Node_Str"")) {
if (ent.controller != null) {
((NpcController)ent.controller).set_destination(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
 else {
ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
}","@Override protected void parse_network_data(String[] data){
  if (data[0].equals(""String_Node_Str"") && data.length == 3) {
    System.out.println(""String_Node_Str"" + data[1] + ""String_Node_Str""+ data[2]);
    EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
    event.post();
  }
  if (data[0].equals(""String_Node_Str"")) {
    int uid=Integer.parseInt(data[1]);
    StringBuilder sb=new StringBuilder();
    for (int i=2; i < data.length; i++) {
      sb.append(data[i].concat(""String_Node_Str""));
    }
    String msg=sb.toString();
    if (uid != Player.character_id) {
      EChatMessage chat_event=new EChatMessage(uid,msg);
      chat_event.dispatch();
      chat_event.post();
    }
  }
  if (data[0].equals(""String_Node_Str"")) {
    int spawn_type=Integer.parseInt(data[1]);
switch (spawn_type) {
case 4:
      Entity mplayer_ent=new EntityNPC();
    mplayer_ent.set_controller(new NpcController());
  mplayer_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
break;
case 0:
Class building=BuildManager.get_building(data[2]);
EntBuilding ent_building;
try {
ent_building=(EntBuilding)building.newInstance();
}
 catch (Exception ex) {
ex.printStackTrace();
return;
}
ent_building.set_combat(new BasicCombat());
ent_building.spawn(54321,new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
break;
}
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
EntityManager.remove_entity(ent);
}
if (data[0].equals(""String_Node_Str"")) {
Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
if (ent == null) {
System.err.println(""String_Node_Str"");
return;
}
if (data[2].equals(""String_Node_Str"")) {
if (ent.controller != null) {
((NpcController)ent.controller).set_destination(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
 else {
ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
}
}
}",0.9902182091798344
153757,"public static void connect() throws SocketTimeoutException, IOException {
  if (charserv_io != null) {
    return;
  }
  System.out.println(""String_Node_Str"");
  Properties p=new Properties();
  String server_url=null;
  try {
    p.load(new FileInputStream(""String_Node_Str""));
    server_url=p.getProperty(""String_Node_Str"");
  }
 catch (  IOException ex) {
    server_url=""String_Node_Str"";
  }
  System.out.println(""String_Node_Str"" + server_url);
  String[] server_params=server_url.split(""String_Node_Str"");
  if (server_params.length != 2) {
    server_params=new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  charserv_io=new IoLayer(server_params[0],Integer.parseInt(server_params[1])){
{
      String[] whitelist={""String_Node_Str""};
      set_whitelist(whitelist);
    }
    @Override protected void parse_network_data(    String[] data) throws IOException {
      if (data[0].equals(""String_Node_Str"")) {
        Main.game.set_state(Game.GameModes.InGame);
        Player.character_id=Integer.parseInt(data[2]);
        chatserver_io=new IoLayer(data[5],Integer.parseInt(data[6])){
{
            String[] whitelist={""String_Node_Str""};
            set_whitelist(whitelist);
          }
          @Override protected void parse_network_data(          String[] data){
          }
        }
;
        gameserv_io=new GameServerLayer(data[3],Integer.parseInt(data[4]));
        gameserv_io.sock_send(""String_Node_Str"" + Player.character_id);
      }
      if (data[0].equals(""String_Node_Str"")) {
        EPlayerAuthorise event=new EPlayerAuthorise();
        event.post();
      }
    }
  }
;
}","public static void connect() throws SocketTimeoutException, IOException {
  if (charserv_io != null) {
    return;
  }
  System.out.println(""String_Node_Str"");
  Properties p=new Properties();
  String server_url=null;
  try {
    p.load(new FileInputStream(""String_Node_Str""));
    server_url=p.getProperty(""String_Node_Str"");
  }
 catch (  IOException ex) {
    server_url=""String_Node_Str"";
  }
  System.out.println(""String_Node_Str"" + server_url);
  String[] server_params=server_url.split(""String_Node_Str"");
  if (server_params.length != 2) {
    server_params=new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  charserv_io=new IoLayer(server_params[0],Integer.parseInt(server_params[1])){
{
      String[] whitelist={""String_Node_Str"",""String_Node_Str""};
      set_whitelist(whitelist);
    }
    @Override protected void parse_network_data(    String[] data) throws IOException {
      if (data[0].equals(""String_Node_Str"")) {
        Main.game.set_state(Game.GameModes.InGame);
        Player.character_id=Integer.parseInt(data[2]);
        chatserver_io=new IoLayer(data[5],Integer.parseInt(data[6])){
{
            String[] whitelist={""String_Node_Str""};
            set_whitelist(whitelist);
          }
          @Override protected void parse_network_data(          String[] data){
          }
        }
;
        gameserv_io=new GameServerLayer(data[3],Integer.parseInt(data[4]));
        gameserv_io.sock_send(""String_Node_Str"" + Player.character_id);
      }
      if (data[0].equals(""String_Node_Str"")) {
        EPlayerAuthorise event=new EPlayerAuthorise();
        event.post();
      }
    }
  }
;
}",0.9944375772558716
153758,"public NE_GUI_Element get_gui_element(int mx,int my){
  if (is_client_rect(mx,my)) {
    Object[] elem=children.toArray();
    for (int i=0; i < elem.length; i++) {
      NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
      NE_GUI_Element child_subelem=__elem.get_gui_element(mx,my);
      if (child_subelem != null) {
        return child_subelem;
      }
      if (__elem.is_client_rect(mx,my)) {
        return __elem;
      }
    }
    return this;
  }
  return null;
}","public NE_GUI_Element get_gui_element(int mx,int my){
  if (is_client_rect(mx,my)) {
    Object[] elem=children.toArray();
    for (int i=0; i < elem.length; i++) {
      NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
      NE_GUI_Element child_subelem=__elem.get_gui_element(mx,my);
      if (child_subelem != null && child_subelem.visible) {
        return child_subelem;
      }
      if (__elem.is_client_rect(mx,my)) {
        return __elem;
      }
    }
    return this;
  }
  return null;
}",0.9742533470648816
153759,"public EntityPlayer(){
  Combat __combat=new BasicCombat();
  __combat.set_hp(500);
  set_blocking(true);
  set_combat(__combat);
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",16));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",2));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1).set_slot(""String_Node_Str""));
}","public EntityPlayer(){
  Combat __combat=new BasicCombat();
  __combat.set_hp(500);
  set_blocking(true);
  set_combat(__combat);
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",20));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",16));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",2));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",64));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",10));
  this.container.add_item(BaseItem.produce(""String_Node_Str"",1).set_slot(""String_Node_Str""));
}",0.9577287066246056
153760,"public void drop(){
  if (container == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  container.remove_item(this);
}","public void drop(){
  if (container == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  System.err.println(""String_Node_Str"" + container);
  container.remove_item(this);
}",0.8389057750759878
153761,"public void put_from(BaseItem src){
  int to_remove=get_space();
  if (to_remove > src.get_count()) {
    to_remove=src.get_count();
  }
  System.out.println(""String_Node_Str"" + Integer.toString(to_remove));
  System.out.println(""String_Node_Str"" + Integer.toString(src.count));
  src.set_count(src.get_count() - to_remove);
  System.out.println(""String_Node_Str"" + Integer.toString(src.count));
  this.add_count(to_remove);
}","public void put_from(BaseItem src){
  int to_remove=get_space();
  if (to_remove > src.get_count()) {
    to_remove=src.get_count();
  }
  System.out.println(""String_Node_Str"" + Integer.toString(to_remove));
  System.out.println(""String_Node_Str"" + Integer.toString(src.count));
  System.out.println(""String_Node_Str"" + Integer.toString(src.count));
  this.add_count(to_remove);
  src.drop();
}",0.926829268292683
153762,"public void del_count(int count){
  set_count(this.count - count);
  if (this.count <= 0) {
    drop();
  }
}","public void del_count(int count){
  set_count(this.count - count);
  if (this.count <= 0) {
    System.out.println(""String_Node_Str"");
    drop();
  }
}",0.8352490421455939
153763,"public void remove_item(BaseItem item){
  int remove_count=item.count;
  BaseItem[] elem=items.toArray(new BaseItem[0]);
  for (int i=0; i < elem.length; i++) {
    if (elem[i].type.equals(item.type)) {
      if (elem[i].count <= remove_count) {
        remove_count-=elem[i].count;
        items.remove(elem[i]);
      }
 else {
        elem[i].del_count(remove_count);
        remove_count=0;
      }
    }
  }
  on_update();
}","public void remove_item(BaseItem item){
  int remove_count=item.count;
  System.out.println(""String_Node_Str"" + remove_count + ""String_Node_Str"");
  BaseItem[] elem=items.toArray(new BaseItem[0]);
  for (int i=0; i < elem.length; i++) {
    if (elem[i].type.equals(item.type)) {
      if (elem[i].count <= remove_count) {
        remove_count-=elem[i].count;
        items.remove(elem[i]);
      }
 else {
        elem[i].del_count(remove_count);
        remove_count=0;
      }
    }
  }
  on_update();
}",0.9186295503211992
153764,"@Override public void e_on_mouse_click(EMouseClick e){
  if (e.type == MouseInputType.RCLICK) {
    context_popup(e);
  }
}","@Override public void e_on_mouse_click(EMouseClick e){
  if (e.type == MouseInputType.RCLICK) {
    context_popup(e);
  }
  if (e.type == MouseInputType.LCLICK) {
    Game.get_ui_root().remove(get_inventory_ctrl());
    Game.get_ui_root().add(get_inventory_ctrl());
  }
}",0.6243654822335025
153765,"@Override public void e_on_drop(){
  this.w=32;
  this.h=32;
  WorldView.highlight_tile(null);
  NE_GUI_Element __parent=parent.parent;
  NE_GUI_Inventory inventory=(NE_GUI_Inventory)__parent;
  inventory.update(inventory.container);
}","@Override public void e_on_drop(){
  this.w=32;
  this.h=32;
  WorldView.highlight_tile(null);
  NE_GUI_Inventory inventory=get_inventory_ctrl();
  inventory.update(inventory.container);
}",0.8416075650118203
153766,"@Override public void e_on_drag(){
  this.w=24;
  this.h=24;
  int x=Mouse.getX();
  int y=Mouse.getY();
  Point tile_coord=WorldView.getTileCoord(x,y);
  System.out.println(""String_Node_Str"" + tile_coord);
  WorldView.highlight_tile(tile_coord);
}","@Override public void e_on_drag(){
  this.w=24;
  this.h=24;
  int x=Mouse.getX();
  int y=Mouse.getY();
  Point tile_coord=WorldView.getTileCoord(x,y);
  WorldView.highlight_tile(tile_coord);
}",0.8778280542986425
153767,"@Override public void render(){
  area_renderer.render(get_x(),get_y(),w,h);
}","@Override public void render(){
  area_renderer.render(get_x(),get_y(),w,h);
  super.render();
}",0.896551724137931
153768,"public void notify_event(Event e){
  if (!visible) {
    return;
  }
  Object[] elem=children.toArray();
  for (int i=elem.length - 1; i >= 0; i--) {
    NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
    __elem.notify_event(e);
  }
  if (e instanceof EMouseClick) {
    EMouseClick event=(EMouseClick)e;
    if (event.is_dispatched()) {
      e_on_mouse_out_click(event);
      return;
    }
    int mx=event.origin.getX();
    int my=WindowRender.get_window_h() - event.origin.getY();
    if (is_client_rect(mx,my)) {
      if (!solid) {
        return;
      }
      e.dispatch();
      e_on_mouse_click(event);
      drag_start=true;
    }
 else {
      e_on_mouse_out_click(event);
    }
  }
  if (e instanceof EMouseRelease) {
    if (drag_start) {
      drop();
    }
    drag_start=false;
  }
  if (e instanceof EMouseDrag) {
    EMouseDrag event=(EMouseDrag)e;
    if (drag_start && dragable) {
      drag((int)event.dx,(int)event.dy);
    }
  }
  if (e instanceof EGUIDrop) {
    EGUIDrop event=(EGUIDrop)e;
    if (is_client_rect(event.coord.getX(),event.coord.getY())) {
      e_on_grab(event);
    }
  }
  if (e instanceof EKeyPress) {
    EKeyPress event=(EKeyPress)e;
    e_on_key_press(event);
  }
}","public void notify_event(Event e){
  if (!visible) {
    return;
  }
  Object[] elem=children.toArray();
  for (int i=elem.length - 1; i >= 0; i--) {
    NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
    __elem.notify_event(e);
  }
  if (e instanceof EMouseClick) {
    EMouseClick event=(EMouseClick)e;
    if (event.is_dispatched()) {
      e_on_mouse_out_click(event);
      return;
    }
    int mx=event.origin.getX();
    int my=WindowRender.get_window_h() - event.origin.getY();
    if (is_client_rect(mx,my)) {
      if (!solid) {
        return;
      }
      e.dispatch();
      e_on_mouse_click(event);
      drag_start=true;
    }
 else {
      e_on_mouse_out_click(event);
    }
  }
  if (e instanceof EMouseRelease && !e.is_dispatched()) {
    if (drag_start) {
      drop();
    }
    drag_start=false;
  }
  if (e instanceof EMouseDrag && !e.is_dispatched()) {
    EMouseDrag event=(EMouseDrag)e;
    if (drag_start && dragable) {
      drag((int)event.dx,(int)event.dy);
    }
  }
  if (e instanceof EGUIDrop && !e.is_dispatched()) {
    EGUIDrop event=(EGUIDrop)e;
    if (is_client_rect(event.coord.getX(),event.coord.getY())) {
      e_on_grab(event);
    }
  }
  if (e instanceof EKeyPress) {
    EKeyPress event=(EKeyPress)e;
    e_on_key_press(event);
  }
}",0.9455128205128204
153769,"public void render(){
  DebugOverlay.render();
  TileCoordOverlay.render();
}","public void render(){
  DebugOverlay.render();
  TileCoordOverlay.render();
  VersionOverlay.render();
}",0.850828729281768
153770,"public void calculate_path(int x,int y){
  Point target=new Point(x,y);
  target=WorldModel.tile_map.world2local(target);
  Point source=new Point(owner.origin);
  source=WorldModel.tile_map.world2local(source);
  path=finder.findPath(this,source.getX(),source.getY(),target.getX(),target.getY());
  step=null;
}","public void calculate_path(int x,int y){
  Point target=new Point(x,y);
  target=WorldModel.tile_map.world2local(target);
  Point source=new Point(owner.origin);
  source=WorldModel.tile_map.world2local(source);
  path=finder.findPath(this,source.getX(),source.getY(),target.getX(),target.getY());
  step=null;
  if (path != null && path.getLength() >= 1) {
    path.steps.remove(0);
  }
}",0.8901569186875892
153771,"public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 1) {
    if (step == null || step.equals(owner.origin)) {
      step=path.popStep();
    }
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  if (owner.origin.getX() > __destination.getX()) {
    move_ent(owner.origin.getX() - 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_W;
  }
  if (owner.origin.getX() < __destination.getX()) {
    move_ent(owner.origin.getX() + 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_E;
  }
  if (owner.origin.getY() > __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() - 1);
    owner.orientation=Orientation.ORIENT_N;
  }
  if (owner.origin.getY() < __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() + 1);
    owner.orientation=Orientation.ORIENT_S;
  }
  if (owner.origin.equals(destination)) {
    this.destination=null;
    step=null;
    path=null;
    ((NPCRenderer)owner.get_render()).set_frame(0);
  }
}","public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 0) {
    if (step == null || step.equals(owner.origin)) {
      step=path.getStep(0);
    }
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  if (owner.origin.getX() > __destination.getX()) {
    move_ent(owner.origin.getX() - 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_W;
  }
  if (owner.origin.getX() < __destination.getX()) {
    move_ent(owner.origin.getX() + 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_E;
  }
  if (owner.origin.getY() > __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() - 1);
    owner.orientation=Orientation.ORIENT_N;
  }
  if (owner.origin.getY() < __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() + 1);
    owner.orientation=Orientation.ORIENT_S;
  }
  if (owner.origin.equals(destination)) {
    this.destination=null;
    step=null;
    path=null;
    ((NPCRenderer)owner.get_render()).set_frame(0);
  }
}",0.996191282268303
153772,"public void change_tile(int x,int y){
  owner.dx=0.0f;
  owner.dy=0.0f;
  owner.move_to(new Point(x,y));
  step=null;
  System.out.println(""String_Node_Str"");
  if (owner.isPlayerEnt() && path != null) {
    System.out.println(""String_Node_Str"" + path_synch_counter);
    if (path_synch_counter == 0) {
      Point __dest;
      Step __step;
      if (path.getLength() > 0) {
        if (path.getLength() > SYNCH_CHUNK_SIZE) {
          __step=path.getStep(SYNCH_CHUNK_SIZE);
        }
 else {
          __step=path.getStep(path.getLength() - 1);
        }
      }
 else {
        __step=step;
      }
      __dest=new Point(__step.getX(),__step.getY());
      __dest=WorldModel.tile_map.local2world(__dest);
      System.out.println(""String_Node_Str"" + __step + ""String_Node_Str""+ __dest+ ""String_Node_Str""+ path.getLength()+ ""String_Node_Str"");
      System.out.println(path);
      EEntitySetPath dest_event=new EEntitySetPath(owner,__dest);
      dest_event.post();
    }
    path_synch_counter++;
    if (path_synch_counter >= SYNCH_CHUNK_SIZE) {
      path_synch_counter=0;
    }
  }
}","public void change_tile(int x,int y){
  owner.dx=0.0f;
  owner.dy=0.0f;
  owner.move_to(new Point(x,y));
  step=null;
  System.out.println(""String_Node_Str"");
  if (owner.isPlayerEnt() && path != null) {
    System.out.println(""String_Node_Str"" + path_synch_counter);
    System.out.println(path);
    if (path_synch_counter == 0) {
      Step __step=null;
      if (path.getLength() > 0) {
        if (path.getLength() > SYNCH_CHUNK_SIZE) {
          __step=path.getStep(SYNCH_CHUNK_SIZE);
        }
 else {
          __step=path.getStep(path.getLength() - 1);
        }
        notify_path(__step);
      }
    }
    path_synch_counter++;
    if (path_synch_counter >= SYNCH_CHUNK_SIZE) {
      path_synch_counter=0;
    }
  }
  if (path != null && path.getLength() > 0) {
    path.steps.remove(0);
  }
}",0.6905640484976279
153773,"public void sock_send(String msg){
  System.err.println(""String_Node_Str"" + msg + ""String_Node_Str"");
  out.println(msg);
}","public void sock_send(String msg){
  System.err.println(host + ""String_Node_Str"" + msg+ ""String_Node_Str"");
  out.println(msg);
}",0.9682539682539684
153774,"public Point world2local(Point world){
  origin.setLocation(WorldCluster.origin.getX() * WorldChunk.CHUNK_SIZE,WorldCluster.origin.getY() * WorldChunk.CHUNK_SIZE);
  world.setLocation(world.getX() - origin.getX(),world.getY() - origin.getY());
  return world;
}","public synchronized Point world2local(Point world){
  origin.setLocation(WorldCluster.origin.getX() * WorldChunk.CHUNK_SIZE,WorldCluster.origin.getY() * WorldChunk.CHUNK_SIZE);
  world.setLocation(world.getX() - origin.getX(),world.getY() - origin.getY());
  return world;
}",0.9757009345794392
153775,"public Point local2world(Point world){
  origin.setLocation(WorldCluster.origin.getX() * WorldChunk.CHUNK_SIZE,WorldCluster.origin.getY() * WorldChunk.CHUNK_SIZE);
  world.setLocation(world.getX() + origin.getX(),world.getY() + origin.getY());
  return world;
}","public synchronized Point local2world(Point world){
  origin.setLocation(WorldCluster.origin.getX() * WorldChunk.CHUNK_SIZE,WorldCluster.origin.getY() * WorldChunk.CHUNK_SIZE);
  world.setLocation(world.getX() + origin.getX(),world.getY() + origin.getY());
  return world;
}",0.9757009345794392
153776,"public Step popStep(){
  Step step=getStep(1);
  Step __step=new Step(step.getX(),step.getY());
  steps.remove(step);
  return __step;
}","public Step popStep(){
  Step step=getStep(0);
  Step __step=new Step(step.getX(),step.getY());
  steps.remove(step);
  return __step;
}",0.9926470588235294
153777,"public void calculate_path(int x,int y){
  Point target=new Point(x,y);
  target=WorldModel.tile_map.world2local(target);
  Point source=new Point(owner.origin);
  source=WorldModel.tile_map.world2local(source);
  path=finder.findPath(this,source.getX(),source.getY(),target.getX(),target.getY());
}","public void calculate_path(int x,int y){
  Point target=new Point(x,y);
  target=WorldModel.tile_map.world2local(target);
  Point source=new Point(owner.origin);
  source=WorldModel.tile_map.world2local(source);
  path=finder.findPath(this,source.getX(),source.getY(),target.getX(),target.getY());
  step=null;
}",0.9787234042553192
153778,"public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 1) {
    if (step == null) {
      step=path.popStep();
    }
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  if (owner.origin.getX() > __destination.getX()) {
    move_ent(owner.origin.getX() - 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_W;
  }
  if (owner.origin.getX() < __destination.getX()) {
    move_ent(owner.origin.getX() + 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_E;
  }
  if (owner.origin.getY() > __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() - 1);
    owner.orientation=Orientation.ORIENT_N;
  }
  if (owner.origin.getY() < __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() + 1);
    owner.orientation=Orientation.ORIENT_S;
  }
  if (owner.origin.equals(destination)) {
    this.destination=null;
  }
}","public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 1) {
    if (step == null || step.equals(owner.origin)) {
      step=path.popStep();
    }
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  if (owner.origin.getX() > __destination.getX()) {
    move_ent(owner.origin.getX() - 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_W;
  }
  if (owner.origin.getX() < __destination.getX()) {
    move_ent(owner.origin.getX() + 1,owner.origin.getY());
    owner.orientation=Orientation.ORIENT_E;
  }
  if (owner.origin.getY() > __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() - 1);
    owner.orientation=Orientation.ORIENT_N;
  }
  if (owner.origin.getY() < __destination.getY()) {
    move_ent(owner.origin.getX(),owner.origin.getY() + 1);
    owner.orientation=Orientation.ORIENT_S;
  }
  if (owner.origin.equals(destination)) {
    this.destination=null;
    step=null;
    path=null;
  }
}",0.9731696225557072
153779,"@Override protected void parse_network_data(String[] data){
  if (data[0].equals(""String_Node_Str"") && data.length == 3) {
    System.out.println(""String_Node_Str"");
    EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
    event.post();
  }
  if (data[0].equals(""String_Node_Str"")) {
    Entity player_ent=new EntityNPC();
    EntityManager.add(player_ent);
    player_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
  }
  if (data[0].equals(""String_Node_Str"")) {
    Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
    EntityManager.remove_entity(ent);
  }
  if (data[0].equals(""String_Node_Str"")) {
    Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
    if (ent != null) {
      ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
}","@Override protected void parse_network_data(String[] data){
  if (data[0].equals(""String_Node_Str"") && data.length == 3) {
    System.out.println(""String_Node_Str"");
    EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
    event.post();
  }
  if (data[0].equals(""String_Node_Str"")) {
    Entity mplayer_ent=new EntityNPC();
    mplayer_ent.set_controller(new NpcController());
    EntityManager.add(mplayer_ent);
    mplayer_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
  }
  if (data[0].equals(""String_Node_Str"")) {
    Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
    EntityManager.remove_entity(ent);
  }
  if (data[0].equals(""String_Node_Str"")) {
    Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
    if (ent != null) {
      if (ent.controller != null) {
        ((NpcController)ent.controller).set_destination(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
      }
 else {
        ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
      }
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
}",0.889912482726854
153780,"public static void connect(){
  if (charserv_io != null) {
    return;
  }
  System.out.println(""String_Node_Str"");
  charserv_io=new IoLayer(""String_Node_Str"",8022){
    @Override protected void parse_network_data(    String[] data){
      if (data[0].equals(""String_Node_Str"") && data.length == 5) {
        Main.game.set_state(Game.GameModes.InGame);
        Player.character_id=Integer.parseInt(data[2]);
        gameserv_io=new IoLayer(data[3],Integer.parseInt(data[4])){
          @Override protected void parse_network_data(          String[] data){
            if (data[0].equals(""String_Node_Str"") && data.length == 3) {
              System.out.println(""String_Node_Str"");
              EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
              event.post();
            }
            if (data[0].equals(""String_Node_Str"")) {
              Entity player_ent=new EntityNPC();
              EntityManager.add(player_ent);
              player_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
            }
            if (data[0].equals(""String_Node_Str"")) {
              Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
              EntityManager.remove_entity(ent);
            }
            if (data[0].equals(""String_Node_Str"")) {
              Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
              if (ent != null) {
                ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
              }
 else {
                System.err.println(""String_Node_Str"");
              }
            }
          }
        }
;
        gameserv_io.sock_send(""String_Node_Str"" + Player.character_id);
      }
      if (data[0].equals(""String_Node_Str"")) {
        ESelectCharacter event=new ESelectCharacter();
        event.post();
      }
    }
  }
;
}","public static void connect(){
  if (charserv_io != null) {
    return;
  }
  System.out.println(""String_Node_Str"");
  charserv_io=new IoLayer(""String_Node_Str"",8022){
    @Override protected void parse_network_data(    String[] data){
      if (data[0].equals(""String_Node_Str"") && data.length == 5) {
        Main.game.set_state(Game.GameModes.InGame);
        Player.character_id=Integer.parseInt(data[2]);
        gameserv_io=new IoLayer(data[3],Integer.parseInt(data[4])){
          @Override protected void parse_network_data(          String[] data){
            if (data[0].equals(""String_Node_Str"") && data.length == 3) {
              System.out.println(""String_Node_Str"");
              EPlayerLogon event=new EPlayerLogon(new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2])));
              event.post();
            }
            if (data[0].equals(""String_Node_Str"")) {
              Entity mplayer_ent=new EntityNPC();
              mplayer_ent.set_controller(new NpcController());
              EntityManager.add(mplayer_ent);
              mplayer_ent.spawn(Integer.parseInt(data[2]),new Point(Integer.parseInt(data[4]),Integer.parseInt(data[5])));
            }
            if (data[0].equals(""String_Node_Str"")) {
              Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
              EntityManager.remove_entity(ent);
            }
            if (data[0].equals(""String_Node_Str"")) {
              Entity ent=EntityManager.get_entity(Integer.parseInt(data[1]));
              if (ent != null) {
                if (ent.controller != null) {
                  ((NpcController)ent.controller).set_destination(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
                }
 else {
                  ent.move_to(new Point(Integer.parseInt(data[3]),Integer.parseInt(data[4])));
                }
              }
 else {
                System.err.println(""String_Node_Str"");
              }
            }
          }
        }
;
        gameserv_io.sock_send(""String_Node_Str"" + Player.character_id);
      }
      if (data[0].equals(""String_Node_Str"")) {
        ESelectCharacter event=new ESelectCharacter();
        event.post();
      }
    }
  }
;
}",0.9250782943868948
153781,"public static void render(){
  long total=Runtime.getRuntime().totalMemory();
  long free=Runtime.getRuntime().freeMemory();
  OverlaySystem.ttf.drawString(10,5,""String_Node_Str"" + String.format(""String_Node_Str"",free / (1024.0f * 1024)) + ""String_Node_Str""+ Float.toString(total / (1024.0f * 1024))+ ""String_Node_Str"",Color.white);
  OverlaySystem.ttf.drawString(10,50,""String_Node_Str"" + Integer.toString(Timer.get_fps()),Color.white);
  OverlaySystem.ttf.drawString(10,70,""String_Node_Str"" + Integer.toString((int)WorldViewCamera.camera_x) + ""String_Node_Str""+ Integer.toString((int)WorldViewCamera.camera_y)+ ""String_Node_Str""+ WorldViewCamera.target.toString(),Color.white);
}","public static void render(){
  long total=Runtime.getRuntime().totalMemory();
  long free=Runtime.getRuntime().freeMemory();
  OverlaySystem.ttf.drawString(10,5,""String_Node_Str"" + String.format(""String_Node_Str"",free / (1024.0f * 1024)) + ""String_Node_Str""+ Float.toString(total / (1024.0f * 1024))+ ""String_Node_Str"",Color.white);
  if (Player.get_ent() != null) {
    NpcController npc_controller=(NpcController)Player.get_ent().controller;
    OverlaySystem.ttf.drawString(10,25,""String_Node_Str"" + npc_controller.path + ""String_Node_Str""+ ""String_Node_Str""+ npc_controller.step,Color.white);
  }
  OverlaySystem.ttf.drawString(10,50,""String_Node_Str"" + Integer.toString(Timer.get_fps()),Color.white);
  OverlaySystem.ttf.drawString(10,70,""String_Node_Str"" + Integer.toString((int)WorldViewCamera.camera_x) + ""String_Node_Str""+ Integer.toString((int)WorldViewCamera.camera_y)+ ""String_Node_Str""+ WorldViewCamera.target.toString(),Color.white);
}",0.8355828220858895
153782,"public EntityPlayer(){
  BaseItem branch=BaseItem.produce(""String_Node_Str"",1);
  this.container.add_item(branch);
}","public EntityPlayer(){
  BaseItem branch=BaseItem.produce(""String_Node_Str"",1);
  this.container.add_item(branch);
  System.out.println(branch.get_container());
}",0.8345323741007195
153783,"public void drop(){
  container.remove_item(this);
}","public void drop(){
  if (container == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  container.remove_item(this);
}",0.5473684210526316
153784,"public BaseItem getItem(){
  BaseItem item=BaseItem.produce(type,count);
  return item;
}","public BaseItem getItem(){
  BaseItem item=BaseItem.produce(type,count);
  item.set_container(container);
  return item;
}",0.8436018957345972
153785,"public void context_popup(EMouseClick event){
class ActionDrop extends BaseItemAction {
    BaseItem item;
    public ActionDrop(    BaseItem item){
      this.item=item;
      this.name=""String_Node_Str"";
    }
    @Override public void execute(){
      System.out.println(""String_Node_Str"");
      item.drop();
    }
  }
  System.out.println(""String_Node_Str"");
  NE_GUI_Popup __popup=new NE_GUI_Popup();
  add(__popup);
  __popup.x=event.origin.getX();
  __popup.y=event.get_window_y();
  ArrayList action_list=item.get_action_list();
  Iterator<IAction> itr=action_list.iterator();
  while (itr.hasNext()) {
    IAction element=itr.next();
    __popup.add_item(element);
  }
  __popup.add_item(new ActionDrop(item));
}","public void context_popup(EMouseClick event){
class ActionDrop extends BaseItemAction {
    BaseItem item;
    public ActionDrop(    BaseItem item){
      this.item=item;
      this.name=""String_Node_Str"";
    }
    @Override public void execute(){
      System.out.println(""String_Node_Str"");
      if (item != null) {
        item.drop();
      }
    }
  }
  System.out.println(""String_Node_Str"");
  NE_GUI_Popup __popup=new NE_GUI_Popup();
  NE_GUI_System ui=Game.get_game_mode().get_ui().get_nge_ui();
  ui.root.add(__popup);
  __popup.x=event.origin.getX();
  __popup.y=event.get_window_y();
  ArrayList action_list=item.get_action_list();
  Iterator<IAction> itr=action_list.iterator();
  while (itr.hasNext()) {
    IAction element=itr.next();
    __popup.add_item(element);
  }
  __popup.add_item(new ActionDrop(item));
}",0.9168278529980658
153786,"public void update(ItemContainer container){
  if (container != this.container) {
    return;
  }
  inv_layer.clear();
  BaseItem[] items=(BaseItem[])container.items.toArray(new BaseItem[0]);
  for (int i=0; i < items.length; i++) {
    BaseItem item=(BaseItem)items[i];
    NE_GUI_Inventory_Item item_control=new NE_GUI_Inventory_Item(item);
    inv_layer.add(item_control);
    item_control.sprite_name=""String_Node_Str"" + item.get_type() + ""String_Node_Str"";
    item_control.x=get_item_x(i) * 32;
    item_control.y=get_item_y(i) * 32;
    item_control.w=32;
    item_control.h=32;
  }
}","public void update(ItemContainer container){
  if (container != this.container) {
    return;
  }
  inv_layer.clear();
  BaseItem[] items=(BaseItem[])container.items.toArray(new BaseItem[0]);
  for (int i=0; i < items.length; i++) {
    BaseItem item=(BaseItem)items[i];
    if (item.get_container() == null) {
      item.set_container(container);
    }
    NE_GUI_Inventory_Item item_control=new NE_GUI_Inventory_Item(item);
    inv_layer.add(item_control);
    item_control.sprite_name=""String_Node_Str"" + item.get_type() + ""String_Node_Str"";
    item_control.x=get_item_x(i) * 32;
    item_control.y=get_item_y(i) * 32;
    item_control.w=32;
    item_control.h=32;
    item_control.dragable=false;
  }
}",0.9106317411402156
153787,"@Override public void execute(){
  System.out.println(""String_Node_Str"");
  item.drop();
}","@Override public void execute(){
  System.out.println(""String_Node_Str"");
  if (item != null) {
    item.drop();
  }
}",0.8653846153846154
153788,"public static void notify_event(Event event){
  if (event == null) {
    return;
  }
  NE_GUI_System ui=Game.get_game_mode().get_ui().get_nge_ui();
  if (ui != null) {
    ui.e_on_event(event);
  }
  if (event.is_dispatched()) {
    return;
  }
  register_event(event);
synchronized (listeners_sync) {
    for (Iterator iter=listeners_sync.iterator(); iter.hasNext(); ) {
      IEventListener listener=(IEventListener)iter.next();
      listener.e_on_event(event);
    }
  }
}","public static void notify_event(Event event){
  if (event == null) {
    return;
  }
  NE_GUI_System ui=Game.get_game_mode().get_ui().get_nge_ui();
  if (ui != null) {
    ui.e_on_event(event);
  }
  if (event.is_dispatched()) {
    return;
  }
  register_event(event);
  IEventListener[] __listeners=(IEventListener[])listeners_sync.toArray(new IEventListener[0]);
  for (int i=0; i < __listeners.length; i++) {
    __listeners[i].e_on_event(event);
  }
}",0.6587982832618026
153789,"@Override public void think(){
  if (destination != null) {
    follow_path();
  }
  owner.sleep(50);
}","@Override public void think(){
  if (destination != null) {
    follow_path();
  }
}",0.8983957219251337
153790,"public void add_item(BaseItem item){
  Object[] elem=items.toArray();
  for (int i=0; i < elem.length; i++) {
    BaseItem tgt=(BaseItem)elem[i];
    if (tgt.get_type().equals(item.get_type())) {
      tgt.put_from(item);
    }
    if (item.is_empty()) {
      on_update();
      return;
    }
  }
  if (!is_full()) {
    items.add(item.getItem());
    on_update();
  }
}","public void add_item(BaseItem item){
  Object[] elem=items.toArray();
  for (int i=0; i < elem.length; i++) {
    BaseItem tgt=(BaseItem)elem[i];
    if (tgt.get_type().equals(item.get_type())) {
      tgt.put_from(item);
    }
    if (item.is_empty()) {
      on_update();
      return;
    }
  }
  if (!is_full()) {
    items.add(item.getItem());
    item.set_container(this);
    on_update();
  }
}",0.961139896373057
153791,"public void remove_item(BaseItem item){
  int count=item.get_count();
}","public void remove_item(BaseItem item){
  items.remove(item);
  on_update();
}",0.738255033557047
153792,"public void notify_event(Event e){
  if (!visible) {
    return;
  }
  Object[] elem=children.toArray();
  for (int i=0; i < elem.length; i++) {
    NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
    __elem.notify_event(e);
  }
  if (e instanceof EMouseClick) {
    EMouseClick event=(EMouseClick)e;
    if (event.is_dispatched()) {
      e_on_mouse_out_click(event);
      return;
    }
    int mx=event.origin.getX();
    int my=WindowRender.get_window_h() - event.origin.getY();
    if (parent != null) {
      mx=mx - parent.x;
      my=my - parent.y;
    }
    if (mx > x && mx < x + w && my > y && my < y + h) {
      if (!solid) {
        return;
      }
      System.out.println(this.toString() + ""String_Node_Str"");
      System.out.println(event.origin);
      e.dispatch();
      e_on_mouse_click(event);
      drag_start=true;
    }
 else {
      e_on_mouse_out_click(event);
    }
  }
  if (e instanceof EMouseRelease) {
    drag_start=false;
  }
  if (e instanceof EMouseDrag) {
    EMouseDrag event=(EMouseDrag)e;
    if (drag_start && dragable) {
      drag((int)event.dx,(int)event.dy);
    }
  }
  if (e instanceof EKeyPress) {
    EKeyPress event=(EKeyPress)e;
    e_on_key_press(event);
  }
}","public void notify_event(Event e){
  if (!visible) {
    return;
  }
  Object[] elem=children.toArray();
  for (int i=0; i < elem.length; i++) {
    NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
    __elem.notify_event(e);
  }
  if (e instanceof EMouseClick) {
    EMouseClick event=(EMouseClick)e;
    if (event.is_dispatched()) {
      e_on_mouse_out_click(event);
      return;
    }
    int mx=event.origin.getX();
    int my=WindowRender.get_window_h() - event.origin.getY();
    if (mx > get_x() && mx < get_x() + w && my > get_y() && my < get_y() + h) {
      if (!solid) {
        return;
      }
      System.out.println(this.toString() + ""String_Node_Str"");
      System.out.println(event.origin);
      e.dispatch();
      e_on_mouse_click(event);
      drag_start=true;
    }
 else {
      e_on_mouse_out_click(event);
    }
  }
  if (e instanceof EMouseRelease) {
    drag_start=false;
  }
  if (e instanceof EMouseDrag) {
    EMouseDrag event=(EMouseDrag)e;
    if (drag_start && dragable) {
      drag((int)event.dx,(int)event.dy);
    }
  }
  if (e instanceof EKeyPress) {
    EKeyPress event=(EKeyPress)e;
    e_on_key_press(event);
  }
}",0.951858108108108
153793,"public void render(){
  if (children.isEmpty()) {
    return;
  }
  Object[] elem=children.toArray();
  for (int i=0; i < elem.length; i++) {
    NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
    __elem.render();
  }
}","public void render(){
  render_children();
}",0.2813688212927757
153794,"public void e_on_event_rollback(Event event){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void e_on_event_rollback(Event event){
}",0.6025641025641025
153795,"public void update(ItemContainer container){
  if (container != this.container) {
    return;
  }
  inv_layer.children.clear();
  BaseItem[] items=(BaseItem[])container.items.toArray(new BaseItem[0]);
  for (int i=0; i < items.length; i++) {
    BaseItem item=(BaseItem)items[i];
    NE_GUI_Inventory_Item item_control=new NE_GUI_Inventory_Item(item);
    inv_layer.add(item_control);
    item_control.sprite_name=""String_Node_Str"" + item.get_type() + ""String_Node_Str"";
    item_control.x=get_item_x(i) * 32;
    item_control.y=get_item_y(i) * 32;
    item_control.w=32;
    item_control.h=32;
  }
}","public void update(ItemContainer container){
  if (container != this.container) {
    return;
  }
  inv_layer.clear();
  BaseItem[] items=(BaseItem[])container.items.toArray(new BaseItem[0]);
  for (int i=0; i < items.length; i++) {
    BaseItem item=(BaseItem)items[i];
    NE_GUI_Inventory_Item item_control=new NE_GUI_Inventory_Item(item);
    inv_layer.add(item_control);
    item_control.sprite_name=""String_Node_Str"" + item.get_type() + ""String_Node_Str"";
    item_control.x=get_item_x(i) * 32;
    item_control.y=get_item_y(i) * 32;
    item_control.w=32;
    item_control.h=32;
  }
}",0.9924433249370276
153796,"public NE_GUI_Inventory(){
  super(true);
  this.set_tw(7);
  this.set_th(5);
  EventManager.subscribe(this);
  inv_layer=new NE_GUI_Element();
  inv_layer.x=32;
  inv_layer.y=32;
  inv_layer.solid=false;
  add(inv_layer);
}","public NE_GUI_Inventory(){
  super(true);
  this.set_tw(7);
  this.set_th(5);
  EventManager.subscribe(this);
  inv_layer=new NE_GUI_Element(){
    @Override public void e_on_mouse_click(    EMouseClick e){
      System.out.println(""String_Node_Str"");
    }
  }
;
  inv_layer.x=32;
  inv_layer.y=32;
  inv_layer.w=(this.t_window_w - 2) * 32;
  inv_layer.h=(this.t_window_h - 2) * 32;
  inv_layer.dragable=false;
  add(inv_layer);
}",0.6687022900763359
153797,"@Override public void e_on_mouse_click(EMouseClick e){
  action.execute();
}","@Override public void e_on_mouse_click(EMouseClick e){
  action.execute();
  e.dispatch();
}",0.9047619047619048
153798,"public void context_popup(EMouseClick event){
  Point tile_origin=WorldView.getTileCoord(event.origin);
  WorldTile tile=WorldModel.get_tile(tile_origin.getX(),tile_origin.getY());
  Entity ent=tile.get_obstacle();
  if (ent == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  NE_GUI_Popup __popup=new NE_GUI_Popup();
  ui.root.add(__popup);
  __popup.x=event.origin.getX();
  __popup.y=event.get_window_y();
  ArrayList action_list=ent.get_action_list();
  Iterator<IAction> itr=action_list.iterator();
  System.out.println(""String_Node_Str"" + Integer.toString(action_list.size()) + ""String_Node_Str"");
  while (itr.hasNext()) {
    IAction element=itr.next();
    __popup.add_item(element);
  }
}","public void context_popup(EMouseClick event){
class DropItem extends BaseItemAction {
    @Override public void execute(){
      System.out.println(""String_Node_Str"");
      System.out.print(get_owner());
    }
  }
  Point tile_origin=WorldView.getTileCoord(event.origin);
  WorldTile tile=WorldModel.get_tile(tile_origin.getX(),tile_origin.getY());
  Entity ent=tile.get_obstacle();
  if (ent == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  NE_GUI_Popup __popup=new NE_GUI_Popup();
  ui.root.add(__popup);
  __popup.x=event.origin.getX();
  __popup.y=event.get_window_y();
  ArrayList action_list=ent.get_action_list();
  Iterator<IAction> itr=action_list.iterator();
  System.out.println(""String_Node_Str"" + Integer.toString(action_list.size()) + ""String_Node_Str"");
  while (itr.hasNext()) {
    IAction element=itr.next();
    __popup.add_item(element);
  }
}",0.8947040498442368
153799,"public static void main(String[] args){
  game=new Game();
  game.set_state(Game.GameModes.InGame);
  game.run();
}","public static void main(String[] args){
  game=new Game();
  game.set_state(Game.GameModes.MainMenu);
  game.run();
}",0.956896551724138
153800,"public Io(){
  try {
    tcp_sock=new ServerSocket();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public Io(){
}",0.2204724409448819
153801,"public void notify_event(Event e){
  if (!visible) {
    return;
  }
  Object[] elem=children.toArray();
  for (int i=0; i < elem.length; i++) {
    NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
    __elem.notify_event(e);
  }
  if (e instanceof EMouseClick) {
    EMouseClick event=(EMouseClick)e;
    if (event.is_dispatched()) {
      e_on_mouse_out_click(event);
      return;
    }
    int mx=event.origin.getX();
    int my=WindowRender.get_window_h() - event.origin.getY();
    if (mx > get_x() && mx < get_x() + w && my > get_y() && my < get_y() + h) {
      if (!solid) {
        return;
      }
      System.out.println(this.toString() + ""String_Node_Str"");
      System.out.println(event.origin);
      e.dispatch();
      e_on_mouse_click(event);
      drag_start=true;
    }
 else {
      e_on_mouse_out_click(event);
    }
  }
  if (e instanceof EMouseRelease) {
    drag_start=false;
  }
  if (e instanceof EMouseDrag) {
    EMouseDrag event=(EMouseDrag)e;
    if (drag_start && dragable) {
      drag((int)event.dx,(int)event.dy);
    }
  }
  if (e instanceof EKeyPress) {
    EKeyPress event=(EKeyPress)e;
    e_on_key_press(event);
  }
}","public void notify_event(Event e){
  if (!visible) {
    return;
  }
  Object[] elem=children.toArray();
  for (int i=elem.length - 1; i >= 0; i--) {
    NE_GUI_Element __elem=(NE_GUI_Element)elem[i];
    __elem.notify_event(e);
  }
  if (e instanceof EMouseClick) {
    EMouseClick event=(EMouseClick)e;
    if (event.is_dispatched()) {
      e_on_mouse_out_click(event);
      return;
    }
    int mx=event.origin.getX();
    int my=WindowRender.get_window_h() - event.origin.getY();
    if (mx > get_x() && mx < get_x() + w && my > get_y() && my < get_y() + h) {
      if (!solid) {
        return;
      }
      System.out.println(this.toString() + ""String_Node_Str"");
      System.out.println(event.origin);
      e.dispatch();
      e_on_mouse_click(event);
      drag_start=true;
    }
 else {
      e_on_mouse_out_click(event);
    }
  }
  if (e instanceof EMouseRelease) {
    drag_start=false;
  }
  if (e instanceof EMouseDrag) {
    EMouseDrag event=(EMouseDrag)e;
    if (drag_start && dragable) {
      drag((int)event.dx,(int)event.dy);
    }
  }
  if (e instanceof EKeyPress) {
    EKeyPress event=(EKeyPress)e;
    e_on_key_press(event);
  }
}",0.9814415192058696
153802,"@Override public void render(){
  if (!visible) {
    return;
  }
  Render.bind_texture(""String_Node_Str"");
  int tile_id=0;
  for (int i=0; i < t_window_w; i++)   for (int j=0; j < t_window_h; j++) {
    if (j == 0) {
      if (i == 0)       tile_id=0;
 else       if (i == t_window_w - 1)       tile_id=2;
 else       tile_id=1;
    }
 else     if (j == t_window_h - 1) {
      if (i == 0)       tile_id=8;
 else       if (i == t_window_w - 1)       tile_id=10;
 else       tile_id=9;
    }
 else {
      if (i == 0)       tile_id=4;
 else       if (i == t_window_w - 1)       tile_id=6;
 else       tile_id=5;
    }
    render_window_tile(i,j,tile_id);
  }
  super.render();
}","@Override public void render(){
  if (!visible) {
    return;
  }
  Render.bind_texture(""String_Node_Str"");
  glColor3f(1.0f,1.0f,1.0f);
  int tile_id=0;
  for (int i=0; i < t_window_w; i++)   for (int j=0; j < t_window_h; j++) {
    if (j == 0) {
      if (i == 0)       tile_id=0;
 else       if (i == t_window_w - 1)       tile_id=2;
 else       tile_id=1;
    }
 else     if (j == t_window_h - 1) {
      if (i == 0)       tile_id=8;
 else       if (i == t_window_w - 1)       tile_id=10;
 else       tile_id=9;
    }
 else {
      if (i == 0)       tile_id=4;
 else       if (i == t_window_w - 1)       tile_id=6;
 else       tile_id=5;
    }
    render_window_tile(i,j,tile_id);
  }
  super.render();
}",0.9790915645277576
153803,"public static void render(){
  BaseItem[] items=(BaseItem[])Player.get_ent().container.items.toArray(new BaseItem[0]);
  OverlaySystem.ttf.drawString(10,100,""String_Node_Str"",Color.white);
  for (int i=0; i < items.length; i++) {
    OverlaySystem.ttf.drawString(10,120 + i * 20,items[i].get_type() + ""String_Node_Str"" + Integer.toString(items[i].get_count()),Color.white);
  }
}","public static void render(){
  if (Player.get_ent() == null) {
    return;
  }
  BaseItem[] items=(BaseItem[])Player.get_ent().container.items.toArray(new BaseItem[0]);
  OverlaySystem.ttf.drawString(10,100,""String_Node_Str"",Color.white);
  for (int i=0; i < items.length; i++) {
    OverlaySystem.ttf.drawString(10,120 + i * 20,items[i].get_type() + ""String_Node_Str"" + Integer.toString(items[i].get_count()),Color.white);
  }
}",0.938118811881188
153804,"@Override public void e_on_mouse_click(EMouseClick e){
  Main.game.set_state(Game.GameModes.InGame);
}","@Override public void e_on_mouse_click(EMouseClick e){
  Io.connect();
  boolean login_result=Io.login(login_input.text,pass_input.text);
  if (login_result) {
    Main.game.set_state(Game.GameModes.InGame);
  }
 else {
    show_message(""String_Node_Str"");
  }
}",0.5604395604395604
153805,"public void build_ui(){
  NE_GUI_Frame frame=new NE_GUI_Frame(false);
  ui.root.add(frame);
  frame.set_tw(12);
  frame.set_th(6);
  NE_GUI_Input login_input=new NE_GUI_Input();
  frame.add(login_input);
  login_input.x=180;
  login_input.y=50;
  login_input.w=120;
  login_input.dragable=false;
  NE_GUI_Input pass_input=new NE_GUI_Input();
  frame.add(pass_input);
  pass_input.x=180;
  pass_input.y=80;
  pass_input.w=120;
  pass_input.dragable=false;
  NE_GUI_Label label1=new NE_GUI_Label();
  frame.add(label1);
  label1.text=""String_Node_Str"";
  label1.x=100;
  label1.y=50;
  NE_GUI_Label label2=new NE_GUI_Label();
  frame.add(label2);
  label2.text=""String_Node_Str"";
  label2.x=100;
  label2.y=80;
  NE_GUI_Button button=new NE_GUI_Button(){
    @Override public void e_on_mouse_click(    EMouseClick e){
      Main.game.set_state(Game.GameModes.InGame);
    }
  }
;
  frame.add(button);
  button.dragable=false;
  button.x=140;
  button.y=120;
  button.set_tw(3);
}","public void build_ui(){
  NE_GUI_Frame frame=new NE_GUI_Frame(false);
  ui.root.add(frame);
  frame.set_tw(12);
  frame.set_th(6);
  login_input=new NE_GUI_Input();
  frame.add(login_input);
  login_input.x=180;
  login_input.y=50;
  login_input.w=120;
  login_input.dragable=false;
  login_input.text=""String_Node_Str"";
  pass_input=new NE_GUI_Input();
  frame.add(pass_input);
  pass_input.x=180;
  pass_input.y=80;
  pass_input.w=120;
  pass_input.dragable=false;
  pass_input.text=""String_Node_Str"";
  NE_GUI_Label label1=new NE_GUI_Label();
  frame.add(label1);
  label1.text=""String_Node_Str"";
  label1.x=100;
  label1.y=50;
  NE_GUI_Label label2=new NE_GUI_Label();
  frame.add(label2);
  label2.text=""String_Node_Str"";
  label2.x=100;
  label2.y=80;
  NE_GUI_Button button=new NE_GUI_Button(){
    @Override public void e_on_mouse_click(    EMouseClick e){
      Io.connect();
      boolean login_result=Io.login(login_input.text,pass_input.text);
      if (login_result) {
        Main.game.set_state(Game.GameModes.InGame);
      }
 else {
        show_message(""String_Node_Str"");
      }
    }
  }
;
  frame.add(button);
  button.dragable=false;
  button.x=140;
  button.y=120;
  button.set_tw(3);
}",0.6858710562414266
153806,"public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 0) {
    System.out.println(""String_Node_Str"" + Integer.toString(path.getLength()));
    Step step=path.popStep();
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  if (owner.origin.getX() > __destination.getX()) {
    owner.move_to(new Point(owner.origin.getX() - 1,owner.origin.getY()));
  }
  if (owner.origin.getX() < __destination.getX()) {
    owner.move_to(new Point(owner.origin.getX() + 1,owner.origin.getY()));
  }
  if (owner.origin.getY() > __destination.getY()) {
    owner.move_to(new Point(owner.origin.getX(),owner.origin.getY() - 1));
  }
  if (owner.origin.getY() < __destination.getY()) {
    owner.move_to(new Point(owner.origin.getX(),owner.origin.getY() + 1));
  }
  if (owner.origin.equals(destination)) {
    this.destination=null;
  }
}","public void follow_path(){
  Point __destination=new Point(this.destination);
  if (path != null && path.getLength() > 0) {
    for (int i=0; i < path.getLength(); i++) {
      Step tmp_step=path.getStep(i);
      Point tmp=new Point(tmp_step.getX(),tmp_step.getY());
      tmp=WorldModel.tile_map.local2world(tmp);
      System.out.println(""String_Node_Str"" + Integer.toString(i) + tmp.toString());
    }
    Step step=path.popStep();
    Point location=new Point(step.getX(),step.getY());
    location=WorldModel.tile_map.local2world(location);
    __destination.setLocation(location.getX(),location.getY());
  }
  if (owner.origin.getX() > __destination.getX()) {
    owner.move_to(new Point(owner.origin.getX() - 1,owner.origin.getY()));
  }
  if (owner.origin.getX() < __destination.getX()) {
    owner.move_to(new Point(owner.origin.getX() + 1,owner.origin.getY()));
  }
  if (owner.origin.getY() > __destination.getY()) {
    owner.move_to(new Point(owner.origin.getX(),owner.origin.getY() - 1));
  }
  if (owner.origin.getY() < __destination.getY()) {
    owner.move_to(new Point(owner.origin.getX(),owner.origin.getY() + 1));
  }
  if (owner.origin.equals(destination)) {
    this.destination=null;
  }
}",0.8920863309352518
153807,"public boolean blocked(Mover mover,int x,int y){
  WorldTile tile=get_tile(x,y);
  if (tile == null) {
    return true;
  }
  return tile.is_blocked();
}","public boolean blocked(Mover mover,int x,int y){
  temp.setLocation(x,y);
  temp=local2world(temp);
  WorldTile tile=get_tile(temp.getX(),temp.getY());
  if (tile == null) {
    return true;
  }
  return tile.is_blocked();
}",0.7957559681697612
153808,"public synchronized Step popStep(){
  Step step=getStep(1);
  Step __step=new Step(step.getX(),step.getY());
  steps.remove(step);
  return __step;
}","public Step popStep(){
  Step step=getStep(0);
  Step __step=new Step(step.getX(),step.getY());
  steps.remove(step);
  return __step;
}",0.9473684210526316
153809,"public DebugRenderer(){
  tileset=new Tileset();
  tileset.texture_name=""String_Node_Str"";
}","public DebugRenderer(){
  System.out.println(""String_Node_Str"");
  tileset=new Tileset();
  tileset.texture_name=""String_Node_Str"";
}",0.8177777777777778
153810,"@Override public void render(){
  if (ent == null) {
    return;
  }
  this.tileset.render_sprite(ent.origin.getX(),ent.origin.getY(),8);
  Point ent_screen=WorldView.world2local(ent.origin);
  OverlaySystem.ttf.drawString(ent_screen.getX(),ent_screen.getY(),ent.toString(),Color.white);
}","@Override public void render(){
  if (ent == null) {
    return;
  }
  this.tileset.render_sprite(ent.origin.getX(),ent.origin.getY(),8);
}",0.6495327102803738
153811,"public static void build_chunk(Point origin){
  System.out.println(""String_Node_Str"" + origin.toString());
  int x=origin.getX() * WorldChunk.CHUNK_SIZE;
  int y=origin.getY() * WorldChunk.CHUNK_SIZE;
  int size=WorldChunk.CHUNK_SIZE;
  for (int i=x; i < x + size; i++)   for (int j=y; j < y + size; j++) {
    int tile_id=0;
    int height=Terrain.get_height(i,j);
    if (height > 120) {
      tile_id=25;
    }
    WorldTile tile=new WorldTile(tile_id);
    tile.set_height(height);
    if (Terrain.is_tree(tile)) {
      tile.set_tile_id(50);
    }
    tile_data.put(new Point(i,j),tile);
  }
}","public static void build_chunk(Point origin){
  System.out.println(""String_Node_Str"" + origin.toString());
  int x=origin.getX() * WorldChunk.CHUNK_SIZE;
  int y=origin.getY() * WorldChunk.CHUNK_SIZE;
  int size=WorldChunk.CHUNK_SIZE;
  for (int i=x; i < x + size; i++)   for (int j=y; j < y + size; j++) {
    int tile_id=0;
    int height=Terrain.get_height(i,j);
    if (height > 120) {
      tile_id=25;
    }
    WorldTile tile=new WorldTile(tile_id);
    tile.set_height(height);
    if (Terrain.is_tree(tile)) {
      tile.set_tile_id(50);
      Entity tree_ent=new Entity();
      EntityManager.add(tree_ent);
      tree_ent.spawn(1,new Point(i,j));
    }
    tile_data.put(new Point(i,j),tile);
  }
}",0.9150726855394032
153812,"public static WorldChunk precache_chunk(int x,int y){
  WorldChunk chunk=new WorldChunk(x,y);
  build_chunk(chunk.origin);
  chunk_data.put(new Point(x,y),chunk);
  return chunk;
}","public static WorldChunk precache_chunk(int x,int y){
  WorldChunk chunk=new WorldChunk(x,y);
  chunk_data.put(new Point(x,y),chunk);
  build_chunk(chunk.origin);
  return chunk;
}",0.8388888888888889
153813,"public void render_background(){
  int x=WorldCluster.origin.getX() * WorldChunk.CHUNK_SIZE;
  int y=WorldCluster.origin.getY() * WorldChunk.CHUNK_SIZE;
  int size=WorldCluster.CLUSTER_SIZE * WorldChunk.CHUNK_SIZE;
  for (int i=x; i < x + size; i++)   for (int j=y; j < y + size; j++) {
    int chunk_x=(i) / WorldChunk.CHUNK_SIZE;
    int chunk_y=(j) / WorldChunk.CHUNK_SIZE;
    if (WorldModel.get_cached_chunk(chunk_x,chunk_y) != null) {
      WorldTile tile=WorldModel.get_tile(i,j);
      if (tile != null) {
        float g_color=((float)tile.get_height() / 255) * 2;
        GL11.glColor3f(1.0f,g_color,1.0f);
        bg_tileset.render_bg_tile(i,j,tile.get_tile_id());
      }
    }
  }
}","public void render_background(){
  int x=WorldCluster.origin.getX() * WorldChunk.CHUNK_SIZE;
  int y=WorldCluster.origin.getY() * WorldChunk.CHUNK_SIZE;
  int size=WorldCluster.CLUSTER_SIZE * WorldChunk.CHUNK_SIZE;
  for (int i=x; i < x + size; i++)   for (int j=y; j < y + size; j++) {
    int chunk_x=(int)Math.floor((float)i / WorldChunk.CHUNK_SIZE);
    int chunk_y=(int)Math.floor((float)j / WorldChunk.CHUNK_SIZE);
    if (WorldModel.get_cached_chunk(chunk_x,chunk_y) != null) {
      WorldTile tile=WorldModel.get_tile(i,j);
      if (tile != null) {
        float g_color=((float)tile.get_height() / 255) * 2;
        GL11.glColor3f(1.0f,g_color,1.0f);
        bg_tileset.render_bg_tile(i,j,tile.get_tile_id());
      }
    }
  }
}",0.9665271966527196
153814,"public void render_tile(int i,int j,int tile_id){
  Render.bind_texture(texture_name);
  glBegin(GL_QUADS);
  if (i % 16 == 0) {
    tile_id=8;
  }
  if (j % 16 == 0) {
    tile_id=8;
  }
  float tx=get_texture_x(tile_id);
  float ty=get_texture_y(tile_id);
  float ts=get_texture_size();
  glTexCoord2f(tx,ty);
  glVertex2f(i * TILE_SIZE,j * TILE_SIZE);
  glTexCoord2f(tx + ts,ty);
  glVertex2f((i + 1) * TILE_SIZE - 1,j * TILE_SIZE);
  glTexCoord2f(tx + ts,ty + ts);
  glVertex2f((i + 1) * TILE_SIZE - 1,((j + 1) * TILE_SIZE - 1));
  glTexCoord2f(tx,ty + ts);
  glVertex2f(i * TILE_SIZE,((j + 1) * TILE_SIZE - 1));
  glEnd();
}","public void render_tile(int i,int j,int tile_id){
  Render.bind_texture(texture_name);
  glBegin(GL_QUADS);
  if (i % WorldChunk.CHUNK_SIZE == 0) {
    tile_id=8;
  }
  if (j % WorldChunk.CHUNK_SIZE == 0) {
    tile_id=8;
  }
  float tx=get_texture_x(tile_id);
  float ty=get_texture_y(tile_id);
  float ts=get_texture_size();
  glTexCoord2f(tx,ty);
  glVertex2f(i * TILE_SIZE,j * TILE_SIZE);
  glTexCoord2f(tx + ts,ty);
  glVertex2f((i + 1) * TILE_SIZE - 1,j * TILE_SIZE);
  glTexCoord2f(tx + ts,ty + ts);
  glVertex2f((i + 1) * TILE_SIZE - 1,((j + 1) * TILE_SIZE - 1));
  glTexCoord2f(tx,ty + ts);
  glVertex2f(i * TILE_SIZE,((j + 1) * TILE_SIZE - 1));
  glEnd();
}",0.964506172839506
153815,"public static void render(){
  if (!Input.key_state_alt) {
    return;
  }
  int x=Mouse.getX();
  int y=Mouse.getY();
  Point tile_coord=WorldView.getTileCoord(x,y);
  y=WindowRender.get_window_h() - y;
  OverlaySystem.ttf.drawString(x + 20,y - 10,""String_Node_Str"" + Integer.toString(tile_coord.getX()) + ""String_Node_Str""+ Integer.toString(tile_coord.getY())+ ""String_Node_Str"",Color.white);
}","public static void render(){
  if (!Input.key_state_alt) {
    return;
  }
  int x=Mouse.getX();
  int y=Mouse.getY();
  Point tile_coord=WorldView.getTileCoord(x,y);
  Point chunk_coord=WorldModel.get_chunk_coord(tile_coord);
  y=WindowRender.get_window_h() - y;
  OverlaySystem.ttf.drawString(x + 20,y - 10,""String_Node_Str"" + Integer.toString(tile_coord.getX()) + ""String_Node_Str""+ Integer.toString(tile_coord.getY())+ ""String_Node_Str""+ Integer.toString(chunk_coord.getX())+ ""String_Node_Str""+ Integer.toString(chunk_coord.getY())+ ""String_Node_Str"",Color.white);
}",0.8198757763975155
153816,"public void e_on_event(Event event){
  if (event instanceof EEntityMove) {
    EEntityMove move_event=(EEntityMove)event;
    move_entity(move_event.entity,move_event.getTo());
    if (move_event.entity.isPlayerEnt()) {
      WorldViewCamera.target.setLocation(move_event.entity.origin);
    }
  }
 else   if (event instanceof EEntitySpawn) {
    EEntitySpawn spawn_event=(EEntitySpawn)event;
    WorldChunk new_chunk=get_cached_chunk(get_chunk_coord(spawn_event.ent.origin));
    EEntityChangeChunk e_change_chunk=new EEntityChangeChunk(spawn_event.ent,null,new_chunk);
    e_change_chunk.post();
  }
 else   if (event instanceof EEntityChangeChunk) {
    EEntityChangeChunk e_change_chunk=(EEntityChangeChunk)event;
    System.out.println(""String_Node_Str"" + Entity.toString(e_change_chunk.ent));
    Entity ent=e_change_chunk.ent;
    ent.set_chunk(e_change_chunk.to);
    if (ent.isPlayerEnt()) {
      WorldCluster.locate(e_change_chunk.to.origin);
    }
  }
}","public void e_on_event(Event event){
  if (event instanceof EEntityMove) {
    EEntityMove move_event=(EEntityMove)event;
    move_entity(move_event.entity,move_event.getTo());
    if (move_event.entity.isPlayerEnt()) {
      WorldViewCamera.target.setLocation(move_event.entity.origin);
    }
  }
 else   if (event instanceof EEntitySpawn) {
    EEntitySpawn spawn_event=(EEntitySpawn)event;
    WorldChunk new_chunk=get_cached_chunk(get_chunk_coord(spawn_event.ent.origin));
    EEntityChangeChunk e_change_chunk=new EEntityChangeChunk(spawn_event.ent,null,new_chunk);
    e_change_chunk.post();
  }
 else   if (event instanceof EEntityChangeChunk) {
    EEntityChangeChunk e_change_chunk=(EEntityChangeChunk)event;
    System.err.println(""String_Node_Str"" + Entity.toString(e_change_chunk.ent));
    Entity ent=e_change_chunk.ent;
    ent.set_chunk(e_change_chunk.to);
    if (ent.isPlayerEnt()) {
      WorldCluster.locate(e_change_chunk.to.origin);
    }
  }
}",0.9968911917098444
153817,"public static Point get_chunk_coord(Point position){
  int cx=(int)Math.floor(position.getX() / WorldChunk.CHUNK_SIZE);
  int cy=(int)Math.floor(position.getY() / WorldChunk.CHUNK_SIZE);
  return new Point(cx,cy);
}","public static Point get_chunk_coord(Point position){
  int cx=(int)Math.floor((float)position.getX() / WorldChunk.CHUNK_SIZE);
  int cy=(int)Math.floor((float)position.getY() / WorldChunk.CHUNK_SIZE);
  return new Point(cx,cy);
}",0.9684684684684683
153818,"/** 
 * @param st
 */
public void addSkill(SkillsTemplate st){
  ClickablePanel panel=new ClickablePanel(st.getName());
  LeftPane.add(panel);
  System.out.println(""String_Node_Str"" + panel.getName());
}","/** 
 * @param st
 */
public void addSkill(SkillsTemplate st){
  ClickablePanel panel=new ClickablePanel(st);
  LeftPane.add(panel);
  System.out.println(""String_Node_Str"" + panel.getName());
}",0.9747474747474748
153819,"public ClickablePanel(){
  setDimensions();
}","public ClickablePanel(String string){
  this.setName(string);
}",0.6851851851851852
153820,"@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}","@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}",0.9405405405405406
153821,"/** 
 * Process the edit domain form
 */
public void postEditDomain(){
  if (getDomainValidator().isValid()) {
    this.configurationManager.updateDomainConfiguration(this.in(""String_Node_Str""),this.in(""String_Node_Str""),this.in(""String_Node_Str""),this.in(""String_Node_Str""));
    this.redirect(ROOT_URL);
  }
 else {
    this.echo();
    this.invalid(EDIT_DOMAIN_TPL);
  }
}","/** 
 * Process the edit domain form
 */
public void postEditDomain(){
  if (getDomainValidator().isValid()) {
    this.configurationManager.updateDomainConfiguration(this.in(""String_Node_Str""),this.in(""String_Node_Str""),this.in(""String_Node_Str""),this.in(""String_Node_Str"",new SafeStringConverter()));
    this.redirect(ROOT_URL);
  }
 else {
    this.echo();
    this.invalid(EDIT_DOMAIN_TPL);
  }
}",0.9664948453608248
153822,"/** 
 * Process new user form
 */
@AuthenticationRequired(authenticationLevel=AuthenticationLevel.AUTHENTICATE) public void postCreateUser(){
  Validator validator=getUserValidator();
  if (validator.isValid()) {
    this.userManager.createUser(this.currentUser(),in(""String_Node_Str""),in(""String_Node_Str""),in(""String_Node_Str""));
    redirect(getProperty(APPLICATION_BASE_URL));
  }
 else {
    out(""String_Node_Str"",this.currentUser());
    echo();
    invalid(NEW_USER_TPL);
  }
}","/** 
 * Process new user form
 */
@AuthenticationRequired(authenticationLevel=AuthenticationLevel.AUTHENTICATE) public void postCreateUser(){
  Validator validator=getUserValidator();
  if (validator.isValid()) {
    this.userManager.createUser(this.currentUser(),this.in(""String_Node_Str"",safeString()),this.in(""String_Node_Str"",safeString()),this.in(""String_Node_Str"",new SafeStringConverter()));
    redirect(getProperty(APPLICATION_BASE_URL));
  }
 else {
    out(""String_Node_Str"",this.currentUser());
    echo();
    invalid(NEW_USER_TPL);
  }
}",0.8115942028985508
153823,"@AuthenticationRequired @NamespaceRequired @OnlyForNamespace public void getDomainIndex(){
  try {
    out(""String_Node_Str"",this.configurationManager.getDomainConfiguration());
    namespaceManager.changeToGlobalNamespace();
    boolean hasPermission=this.authorizationManager.getActiveUserDomains(this.currentUser()).contains(this.subDomain());
    if (hasPermission) {
      success(DOMAIN_INDEX_TPL);
    }
 else {
      success(DOMAIN_PUBLIC_INDEX_TPL);
    }
  }
  finally {
    namespaceManager.changeToPreviousNamespace();
  }
}","@AuthenticationRequired @NamespaceRequired @OnlyForNamespace public void getDomainIndex(){
  try {
    out(""String_Node_Str"",this.configurationManager.getDomainConfiguration());
    namespaceManager.changeToGlobalNamespace();
    boolean hasPermission=this.authorizationManager.getActiveUserDomains(this.currentUser()).contains(this.subDomain());
    if (hasPermission) {
      success(DOMAIN_INDEX_TPL);
    }
 else {
      success(DOMAIN_PUBLIC_INDEX_TPL);
    }
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
 finally {
    namespaceManager.changeToPreviousNamespace();
  }
}",0.9420035149384886
153824,"/** 
 * @param description
 */
public void setDescription(String description){
  this.description=description;
}","/** 
 * @param description
 */
public void setDescription(String description){
  this.description=new Text(description);
}",0.9572649572649572
153825,"/** 
 * @return description of domain
 */
public String getDescription(){
  return this.description;
}","/** 
 * @return description of domain
 */
public String getDescription(){
  return this.description.getValue();
}",0.9488372093023256
153826,"/** 
 * @return description of domain
 */
public String getDescription(){
  return this.description.getValue();
}","/** 
 * @return description of domain
 */
public String getDescription(){
  if (this.description != null) {
    return this.description.getValue();
  }
  return ""String_Node_Str"";
}",0.7687074829931972
153827,"/** 
 * Posts a transfer between users
 */
public void postTransferBank(){
  Validator input=BankValidators.getTransferValidator();
  Validator amountValidator=BankValidators.getAmountValidator();
  try {
    if (input.isValid() && amountValidator.isValid()) {
      this.accountManager.transact(this.currentUser(),this.in(""String_Node_Str""),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""),TransactionType.valueOf(this.in(""String_Node_Str"")));
      this.redirect(BASE_URL);
    }
 else {
      this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
      this.echo();
      this.invalid(TRANSFER_TPL);
    }
  }
 catch (  DisabledBankAccountException ex) {
    this.handleDisabledAccount(ex.getMessage(),TRANSFER_TPL);
  }
catch (  InsufficientBalanceException e) {
    this.out(INVALID,""String_Node_Str"");
    this.echo();
    this.invalid(TRANSFER_TPL);
  }
}","/** 
 * Posts a transfer between users
 * @throws DisabledBankAccountException 
 */
public void postTransferBank() throws DisabledBankAccountException {
  Validator input=BankValidators.getTransferValidator();
  Validator amountValidator=BankValidators.getAmountValidator();
  try {
    if (input.isValid() && amountValidator.isValid()) {
      this.accountManager.transact(this.currentUser(),this.in(""String_Node_Str""),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""),TransactionType.valueOf(this.in(""String_Node_Str"")));
      this.redirect(BASE_URL);
    }
 else {
      this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
      this.echo();
      this.invalid(TRANSFER_TPL);
    }
  }
 catch (  DisabledBankAccountException ex) {
    this.handleDisabledAccount(ex.getMessage(),TRANSFER_TPL);
  }
catch (  InsufficientBalanceException e) {
    this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
    this.out(""String_Node_Str"",""String_Node_Str"");
    this.echo();
    this.invalid(TRANSFER_TPL);
  }
}",0.907537688442211
153828,"/** 
 * Creates the domain at Rout53
 * @throws Route53Exception if some error occurs when accessing route53 API
 */
public void createDomain(String domainName,String adminID,boolean createDNS){
  if (this.hasApplicationConfiguration()) {
    if (createDNS) {
      ApplicationConfiguration appConf=this.applicationConfigurationDAO.get(APPLICATION_NAME);
      Route53Util.createDomain(domainName,appConf.getRoute53AccessKeyID(),appConf.getRoute53AccessKeySecret(),appConf.getRoute53ZoneID());
    }
    eventBus.publish(new DomainCreatedEvent(domainName,adminID));
  }
 else {
    throw new DataDoesNotExistsException(""String_Node_Str"");
  }
}","/** 
 * Creates the domain at Rout53
 * @throws Route53Exception if some error occurs when accessing route53 API
 */
public void createDomain(String domainName,String adminID,boolean createDNS){
  if (this.hasApplicationConfiguration()) {
    if (createDNS) {
      String fullDomain=domainName + ""String_Node_Str"" + getProperty(""String_Node_Str"");
      ApplicationConfiguration appConf=this.applicationConfigurationDAO.get(APPLICATION_NAME);
      Route53Util.createDomain(fullDomain,appConf.getRoute53AccessKeyID(),appConf.getRoute53AccessKeySecret(),appConf.getRoute53ZoneID());
    }
    eventBus.publish(new DomainCreatedEvent(domainName,adminID));
  }
 else {
    throw new DataDoesNotExistsException(""String_Node_Str"");
  }
}",0.9208424110384896
153829,"/** 
 * Gets some important information about the bank
 * @throws DisabledBankAccountException If the bank account is disabled - This kind of account can't be disabled, if this occurs, indicates an DEFECT
 */
public void getStatsBank() throws DisabledBankAccountException {
  BigDecimal balance=this.accountManager.getBalance(this.domainBankAccount());
  BigDecimal ballast=this.accountManager.getBallast();
  this.out(""String_Node_Str"",balance);
  this.out(""String_Node_Str"",ballast);
  this.out(""String_Node_Str"",ballast.subtract(balance));
  this.out(""String_Node_Str"",this.accountManager.getCurrentAmountTransactions());
  this.out(""String_Node_Str"",this.accountManager.getCurrentAmountCredit());
  this.success(STATS_TPL);
}","/** 
 * Gets some important information about the bank
 * @throws DisabledBankAccountException If the bank account is disabled - This kind of account can't be disabled, if this occurs, indicates an DEFECT
 */
public void getStatsBank() throws DisabledBankAccountException {
  BigDecimal balance=this.accountManager.getBalance(this.domainBankAccount());
  BigDecimal ballast=this.accountManager.getBallast();
  this.out(""String_Node_Str"",balance);
  this.out(""String_Node_Str"",ballast);
  this.out(""String_Node_Str"",this.accountManager.getCurrentAmountTransactions());
  this.out(""String_Node_Str"",this.accountManager.getCurrentCreditAmount(this.domainBankAccount()));
  this.success(STATS_TPL);
}",0.8659649122807017
153830,"/** 
 * Posts parameters to get bank's static information
 */
public void postStatsBank(){
  Validator dateValidator=BankValidators.getDateValidator();
  if (dateValidator.isValid()) {
    Date startDate=this.in(""String_Node_Str"",date(SHORT));
    Date endDate=this.in(""String_Node_Str"",date(SHORT));
    this.out(""String_Node_Str"",this.accountManager.getAmountTransactions(startDate,endDate));
    this.out(""String_Node_Str"",this.accountManager.getAmountCredit(startDate,endDate));
    jsonSuccess();
  }
 else {
    jsonInvalid();
  }
}","/** 
 * Posts parameters to get bank's static information
 */
public void postStatsBank(){
  Validator dateValidator=BankValidators.getDateValidator();
  if (dateValidator.isValid()) {
    Date startDate=this.in(""String_Node_Str"",date(SHORT));
    Date endDate=this.in(""String_Node_Str"",date(SHORT));
    this.out(""String_Node_Str"",this.accountManager.getAmountTransactions(startDate,endDate));
    this.out(""String_Node_Str"",this.accountManager.getCreditAmount(this.domainBankAccount(),startDate,endDate));
    jsonSuccess();
  }
 else {
    jsonInvalid();
  }
}",0.9645776566757494
153831,"/** 
 * Returns the bank amount credit specified by a date range
 * @param accountId accountId of the account
 * @param startDate startDate of the range
 * @param endDate endDate of the range
 * @return an amount representing the sum of all credit transactions of an account
 */
public BigDecimal getAmountCreditByDateRange(String accountId,Date startDate,Date endDate){
  Collection<BankTransaction> transactions=this.getCreditTransactionsByDateRange(accountId,startDate,endDate);
  BigDecimal sum=BigDecimal.ZERO;
  for (  BankTransaction transaction : transactions) {
    sum=sum.add(transaction.getAmount());
  }
  return sum;
}","/** 
 * Returns an account credit amount specified by a date range
 * @param accountId accountId of the account
 * @param startDate startDate of the range
 * @param endDate endDate of the range
 * @return an amount representing the sum of all credit transactions of an account
 */
public BigDecimal getAmountCreditByDateRange(String accountId,Date startDate,Date endDate){
  Collection<BankTransaction> transactions=this.getCreditTransactionsByDateRange(accountId,startDate,endDate);
  BigDecimal sum=BigDecimal.ZERO;
  for (  BankTransaction transaction : transactions) {
    if (!transaction.getAccountOrig().equals(SystemAccount.ID)) {
      sum=sum.add(transaction.getAmount());
    }
  }
  return sum;
}",0.9119402985074628
153832,"/** 
 * Returns the current amount of transactions of the current month.
 * @return an amount representing the sum of all transactions made on the current month
 */
public BigDecimal getCurrentAmountTransactions(){
  return this.transactionDAO.getAmountByDateRange(getFirstDateOfCurrentMonth(),DateUtil.getDate());
}","/** 
 * Returns the current amount of transactions of the current month.
 * @return an amount representing the sum of all transactions made on the current month
 */
public BigDecimal getCurrentAmountTransactions(){
  return this.transactionDAO.getAllAmountByDateRange(getFirstDateOfCurrentMonth(),DateUtil.getDate());
}",0.9952755905511812
153833,"/** 
 * Returns the amount of transactions specified by a date range
 * @param startDate startDate of the range
 * @param endDate endDate of the range
 * @return an amount representing the sum of all transactions made on the date range
 */
public BigDecimal getAmountTransactions(Date startDate,Date endDate){
  return this.transactionDAO.getAmountByDateRange(startDate,endDate);
}","/** 
 * Returns the amount of transactions specified by a date range
 * @param startDate startDate of the range
 * @param endDate endDate of the range
 * @return an amount representing the sum of all transactions made on the date range
 */
public BigDecimal getAmountTransactions(Date startDate,Date endDate){
  return this.transactionDAO.getAllAmountByDateRange(startDate,endDate);
}",0.996078431372549
153834,"/** 
 * Process the edit contract form. Receives the <code>id</code>, <code>status</code>.
 */
public void postEditContract(){
  Validator existentContractStatusValidator=ServiceValidators.getExistentContractStatusValidator();
  if (existentContractStatusValidator.isValid()) {
    try {
      this.servicesManager.updateContractStatus(this.in(""String_Node_Str""),ServiceContractStatus.valueOf(this.in(""String_Node_Str"")),this.currentUser());
      this.redirect(SHOW_CONTRACTS_URL);
    }
 catch (    NotServiceProviderException e) {
      this.echo();
      this.out(""String_Node_Str"",i18n.get(this.locales(),e.getMessage()));
      this.invalid(EDIT_CONTRACT_TPL);
    }
catch (    ServiceContractNotFoundException e) {
      this.notFound();
    }
  }
 else {
    this.jsonInvalid();
  }
}","/** 
 * Process the edit contract form. Receives the <code>id</code>, <code>status</code>.
 */
public void postEditContract(){
  Validator existentContractStatusValidator=ServiceValidators.getExistentContractStatusValidator();
  if (existentContractStatusValidator.isValid()) {
    try {
      this.servicesManager.updateContractStatus(this.in(""String_Node_Str""),ServiceContractStatus.valueOf(this.in(""String_Node_Str"")),this.currentUser());
      this.redirect(SHOW_CONTRACTS_URL);
    }
 catch (    NotServiceProviderException e) {
      this.echo();
      this.out(""String_Node_Str"",i18n.get(this.locales(),e.getMessage()));
      this.invalid(EDIT_CONTRACT_TPL);
    }
catch (    DataDoesNotExistsException e) {
      this.notFound();
    }
  }
 else {
    this.jsonInvalid();
  }
}",0.9784537389100126
153835,"/** 
 * Show the form to edit an service Receives the service id as <code>id</code>
 */
@AuthorizationRequired public void getEditService(){
  try {
    Service service=this.servicesManager.getService(this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",service.getId());
    this.out(""String_Node_Str"",service.getName());
    this.out(""String_Node_Str"",service.getAmount());
    this.out(""String_Node_Str"",service.getCategory());
    this.out(""String_Node_Str"",service.getDescription());
    this.success(EDIT_SERVICE_TPL);
  }
 catch (  ServiceNotFoundException e) {
    this.notFound();
  }
}","/** 
 * Show the form to edit an service Receives the service id as <code>id</code>
 */
@AuthorizationRequired public void getEditService(){
  try {
    Service service=this.servicesManager.getService(this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",service.getId());
    this.out(""String_Node_Str"",service.getName());
    this.out(""String_Node_Str"",service.getAmount());
    this.out(""String_Node_Str"",service.getCategory());
    this.out(""String_Node_Str"",service.getDescription());
    this.success(EDIT_SERVICE_TPL);
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
}",0.9734660033167496
153836,"/** 
 * Process the service edit form Receives <code>name</code>, <code>amount</code>, <code>category</code> and <code>description</code>
 */
@AuthorizationRequired public void postEditService(){
  Validator validator=ServiceValidators.getServiceValidator();
  if (validator.isValid()) {
    try {
      this.servicesManager.updateService(this.in(""String_Node_Str""),this.in(""String_Node_Str"",safeString()),this.in(""String_Node_Str"",bigDecimalNumber()),this.in(""String_Node_Str"",safeString()),this.in(""String_Node_Str"",safeString()));
      this.redirect(BASE_URL);
    }
 catch (    ServiceNotFoundException e) {
      this.notFound();
    }
  }
 else {
    this.echo();
    this.invalid(EDIT_SERVICE_TPL);
  }
}","/** 
 * Process the service edit form Receives <code>name</code>, <code>amount</code>, <code>category</code> and <code>description</code>
 */
@AuthorizationRequired public void postEditService(){
  Validator validator=ServiceValidators.getServiceValidator();
  if (validator.isValid()) {
    try {
      this.servicesManager.updateService(this.in(""String_Node_Str""),this.in(""String_Node_Str"",safeString()),this.in(""String_Node_Str"",bigDecimalNumber()),this.in(""String_Node_Str"",safeString()),this.in(""String_Node_Str"",safeString()));
      this.redirect(BASE_URL);
    }
 catch (    DataDoesNotExistsException e) {
      this.notFound();
    }
  }
 else {
    this.echo();
    this.invalid(EDIT_SERVICE_TPL);
  }
}",0.9817671809256662
153837,"/** 
 * Posts the payment for a contract Receives the contract id as <code>id</code>
 */
public void postPayContract(){
  try {
    this.servicesManager.makePayment(this.in(""String_Node_Str""),this.currentUser());
    this.redirect(SHOW_CONTRACTS_URL);
  }
 catch (  ServiceContractNotFoundException e) {
    this.notFound();
  }
catch (  FiggoException e) {
    this.out(""String_Node_Str"",i18n.get(this.locales(),e.getMessage()));
    this.out(""String_Node_Str"",this.servicesManager.getProvidedContracts(this.currentUser()));
    this.out(""String_Node_Str"",this.servicesManager.getHiredContracts(this.currentUser()));
    this.invalid(LIST_CONTRACTS_TPL);
  }
}","/** 
 * Posts the payment for a contract Receives the contract id as <code>id</code>
 */
public void postPayContract(){
  try {
    this.servicesManager.makePayment(this.in(""String_Node_Str""),this.currentUser());
    this.redirect(SHOW_CONTRACTS_URL);
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
catch (  FiggoException e) {
    this.out(""String_Node_Str"",i18n.get(this.locales(),e.getMessage()));
    this.out(""String_Node_Str"",this.servicesManager.getProvidedContracts(this.currentUser()));
    this.out(""String_Node_Str"",this.servicesManager.getHiredContracts(this.currentUser()));
    this.invalid(LIST_CONTRACTS_TPL);
  }
}",0.9741641337386018
153838,"/** 
 * JSON method Adds a new provider to a service. Receives the service id as <code>id</code> and gets the current user to add as provider.
 */
@AuthorizationRequired public void postAddProvider(){
  try {
    Service service=this.servicesManager.getService(this.in(""String_Node_Str""));
    service.addProvider(this.currentUser());
    this.out(""String_Node_Str"",this.currentUser());
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.jsonSuccess();
  }
 catch (  ServiceNotFoundException e) {
    this.notFound();
  }
}","/** 
 * JSON method Adds a new provider to a service. Receives the service id as <code>id</code> and gets the current user to add as provider.
 */
@AuthorizationRequired public void postAddProvider(){
  try {
    this.servicesManager.addProvider(this.in(""String_Node_Str""),this.currentUser());
    this.out(""String_Node_Str"",this.currentUser());
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.jsonSuccess();
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
}",0.6078619367209971
153839,"/** 
 * JSON method Requests a service from a provides. Receives the service id as <code>id</code> and the service provider as <code>provider</code>
 */
public void postRequestContract(){
  try {
    Validator contractValidator=ServiceValidators.getContractValidator();
    if (contractValidator.isValid()) {
      this.servicesManager.requestContract(this.in(""String_Node_Str""),this.currentUser(),this.in(""String_Node_Str""));
      this.jsonSuccess();
    }
 else {
      this.jsonInvalid();
    }
  }
 catch (  InexistentServiceProviderException e) {
    this.out(""String_Node_Str"",i18n.get(this.locales(),e.getMessage()));
    this.jsonInvalid();
  }
catch (  ServiceNotFoundException e) {
    this.notFound();
  }
}","/** 
 * JSON method Requests a service from a provides. Receives the service id as <code>id</code> and the service provider as <code>provider</code>
 */
public void postRequestContract(){
  try {
    Validator contractValidator=ServiceValidators.getContractValidator();
    if (contractValidator.isValid()) {
      this.servicesManager.requestContract(this.in(""String_Node_Str""),this.currentUser(),this.in(""String_Node_Str""));
      this.jsonSuccess();
    }
 else {
      this.jsonInvalid();
    }
  }
 catch (  NotServiceProviderException e) {
    this.out(""String_Node_Str"",i18n.get(this.locales(),e.getMessage()));
    this.jsonInvalid();
  }
catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
}",0.9741800418702024
153840,"/** 
 * Removes a Service Receives the service id as <code>id</code>
 */
@AuthorizationRequired public void postRemoveService(){
  try {
    this.servicesManager.removeService(this.in(""String_Node_Str""));
    this.redirect(BASE_URL);
  }
 catch (  ServiceNotFoundException e) {
    this.notFound();
  }
}","/** 
 * Removes a Service Receives the service id as <code>id</code>
 */
@AuthorizationRequired public void postRemoveService(){
  try {
    this.servicesManager.removeService(this.in(""String_Node_Str""));
    this.redirect(BASE_URL);
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
}",0.9573770491803278
153841,"/** 
 * JSON method Removes a provider. Receives the service id as <code>id</code> and gets the current user to remove as provider.
 */
@AuthorizationRequired public void postRemoveProvider(){
  try {
    this.out(""String_Node_Str"",this.servicesManager.removeProvider(this.in(""String_Node_Str""),this.currentUser()));
    this.jsonSuccess();
  }
 catch (  ServiceNotFoundException e) {
    this.notFound();
  }
}","/** 
 * JSON method Removes a provider. Receives the service id as <code>id</code> and gets the current user to remove as provider.
 */
@AuthorizationRequired public void postRemoveProvider(){
  try {
    this.out(""String_Node_Str"",this.servicesManager.removeProvider(this.in(""String_Node_Str""),this.currentUser()));
    this.jsonSuccess();
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
}",0.9684466019417476
153842,"/** 
 * Shows the form tho edit a contract Receives the contract id as <code>id</code>
 */
public void getEditContract(){
  try {
    ServiceContract serviceContract=this.servicesManager.getServiceContract(this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",serviceContract);
    this.out(""String_Node_Str"",serviceContract.getStatus());
    this.success(EDIT_CONTRACT_TPL);
  }
 catch (  ServiceContractNotFoundException e) {
    this.notFound();
  }
}","/** 
 * Shows the form tho edit a contract Receives the contract id as <code>id</code>
 */
public void getEditContract(){
  try {
    ServiceContract serviceContract=this.servicesManager.getServiceContract(this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",serviceContract);
    this.out(""String_Node_Str"",serviceContract.getStatus());
    this.success(EDIT_CONTRACT_TPL);
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
}",0.962800875273523
153843,"/** 
 * Shows service details Receives the service id as <code>id</code>
 */
@AuthorizationRequired public void getShowService(){
  try {
    Service service=this.servicesManager.getService(this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",service);
    this.success(SHOW_SERVICE_TPL);
  }
 catch (  ServiceNotFoundException e) {
    this.notFound();
  }
}","/** 
 * Shows service details Receives the service id as <code>id</code>
 */
@AuthorizationRequired public void getShowService(){
  try {
    Service service=this.servicesManager.getService(this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",service);
    this.success(SHOW_SERVICE_TPL);
  }
 catch (  DataDoesNotExistsException e) {
    this.notFound();
  }
}",0.9645776566757494
153844,"@Override public void eventPublished(Event event){
  BankPaymentNotPerformedEvent bankEvt=(BankPaymentNotPerformedEvent)event;
  try {
    this.serviceManager.rollbackPayment(bankEvt.getContractId());
  }
 catch (  ServiceContractNotFoundException e) {
    logger.error(e,""String_Node_Str"",bankEvt.getContractId());
  }
  PersistenceManagerPool.forceClose();
}","@Override public void eventPublished(Event event){
  BankPaymentNotPerformedEvent bankEvt=(BankPaymentNotPerformedEvent)event;
  try {
    this.serviceManager.rollbackPayment(bankEvt.getContractId());
  }
 catch (  DataDoesNotExistsException e) {
    logger.error(e,""String_Node_Str"",bankEvt.getContractId());
  }
  PersistenceManagerPool.forceClose();
}",0.9523809523809524
153845,"/** 
 * Remove an activity from a role <b>AjaxMethod</b>
 */
public void postRemoveRoleActivity(){
  this.authorizationManager.removeActivitiesToRole(this.in(""String_Node_Str""),this.in(""String_Node_Str""));
  this.jsonSuccess();
}","/** 
 * Remove an activity from a role <b>AjaxMethod</b>
 */
public void postRemoveRoleActivity(){
  this.authorizationManager.removeActivitiesToRole(this.in(""String_Node_Str"",safeStringConverter),this.in(""String_Node_Str""));
  this.jsonSuccess();
}",0.9539748953974896
153846,"/** 
 * Removes a role from an user <b>AjaxMethod</b>
 */
public void postRemoveUserRole(){
  this.authorizationManager.removeUserFromRole(this.in(""String_Node_Str""),this.in(""String_Node_Str""),this.subDomain());
  this.jsonSuccess();
}","/** 
 * Removes a role from an user <b>AjaxMethod</b>
 */
public void postRemoveUserRole(){
  this.authorizationManager.removeUserFromRole(this.in(""String_Node_Str"",safeStringConverter),this.in(""String_Node_Str""),this.subDomain());
  this.jsonSuccess();
}",0.9591836734693876
153847,"/** 
 * Removes an role
 */
public void postRemoveRole(){
  this.authorizationManager.removeRole(this.in(""String_Node_Str""));
  this.redirect(BASE_ROLES_URL);
}","/** 
 * Removes an role
 */
public void postRemoveRole(){
  this.authorizationManager.removeRole(this.in(""String_Node_Str"",safeStringConverter));
  this.redirect(BASE_ROLES_URL);
}",0.9411764705882352
153848,"/** 
 * Adds an user to a role <b>AjaxMethod</b>
 */
public void postAddUserRole(){
  this.authorizationManager.addUsersToRole(this.in(""String_Node_Str""),this.in(""String_Node_Str""));
  this.jsonSuccess();
}","/** 
 * Adds an user to a role <b>AjaxMethod</b>
 */
public void postAddUserRole(){
  this.authorizationManager.addUsersToRole(this.in(""String_Node_Str"",safeStringConverter),this.in(""String_Node_Str""));
  this.jsonSuccess();
}",0.9537037037037036
153849,"/** 
 * Add activity to a role. <b>AjaxMethod</b>
 */
public void postAddRoleActivity(){
  this.authorizationManager.addActivitiesToRole(this.in(""String_Node_Str""),this.in(""String_Node_Str""));
  this.jsonSuccess();
}","/** 
 * Add activity to a role. <b>AjaxMethod</b>
 */
public void postAddRoleActivity(){
  this.authorizationManager.addActivitiesToRole(this.in(""String_Node_Str"",safeStringConverter),this.in(""String_Node_Str""));
  this.jsonSuccess();
}",0.9513274336283186
153850,"public ModuleConfiguration(String moduleName){
  this.moduleName=moduleName;
  this.timestamp=new Date();
}","public ModuleConfiguration(String moduleName){
  this.moduleName=moduleName;
  this.timestamp=getTime();
}",0.9577464788732394
153851,"/** 
 * TODO
 * @param module
 * @param properties
 */
public void setModuleProperties(Module module,Map<String,String> properties){
  DomainConfiguration domainConf=this.getDomainConfiguration();
  if (domainConf.isModuleEnabled(module.name())) {
    ModuleConfiguration moduleConf=this.moduleDAO.get(module.name());
    for (    String propertyKey : properties.keySet()) {
      this.setModuleProperty(moduleConf,propertyKey,properties.get(propertyKey));
    }
    moduleConf.setTimestamp(new Date());
    this.moduleDAO.save(moduleConf);
  }
 else {
    throw new DataDoesNotExistsException(""String_Node_Str"" + module.name() + ""String_Node_Str"");
  }
}","/** 
 * TODO
 * @param module
 * @param properties
 */
public void setModuleProperties(Module module,Map<String,String> properties){
  DomainConfiguration domainConf=this.getDomainConfiguration();
  if (domainConf.isModuleEnabled(module.name())) {
    ModuleConfiguration moduleConf=this.moduleDAO.get(module.name());
    for (    String propertyKey : properties.keySet()) {
      this.setModuleProperty(moduleConf,propertyKey,properties.get(propertyKey));
    }
    moduleConf.setTimestamp(getTime());
    this.moduleDAO.save(moduleConf);
  }
 else {
    throw new DataDoesNotExistsException(""String_Node_Str"" + module.name() + ""String_Node_Str"");
  }
}",0.9900687547746372
153852,"/** 
 * Return the last transactions for an account, with id greater with the given last used transaction id. This method ensures that the list's last element will be the one with the greater id. However, there is no order guarantee for elements.
 * @param accountId the account id
 * @param lastUsedTransactionId the last  {@link BankTransaction}. All   {@link BankTransaction} returned will haveid greater than this id. If you want to get all transactions for an account, lastUsedTransactionId should be <code>null</code>;
 * @return A list that contains all transactions for the given user, starting from the given{@link BankTransaction} id.
 */
public Collection<BankTransaction> getLastTransactions(String accountId,Long lastUsedTransactioId);","/** 
 * Return the last transactions for an account, starting at the given date (inclusive).
 * @param accountId the account id
 * @param startDate the last  {@link BankTransaction} timestamp (as long). All results timestamp willbe equals or greater than the given start date. If you want to get all transactions for an account, lastUsedTransactionId should be <code>null</code>;
 * @return A list that contains all transactions for the given user, starting from the given{@link BankTransaction} startDate (inclusive).
 */
public Collection<BankTransaction> getLastTransactions(String accountId,Long startDate);",0.6857983811626196
153853,"/** 
 * @return the balance's value
 */
public BigDecimal getBalance(){
  if (this.transactionInfoService == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Collection<BankTransaction> transactions=this.transactionInfoService.getLastTransactions(this.ownerId,this.lastTransactionId);
  if (!transactions.isEmpty()) {
    BigDecimal transactionsBalance=new BigDecimal(0);
    for (    BankTransaction bankTransaction : transactions) {
      if (bankTransaction.isOrigin(this.ownerId)) {
        transactionsBalance=transactionsBalance.subtract(bankTransaction.getAmount());
      }
 else {
        transactionsBalance=transactionsBalance.add(bankTransaction.getAmount());
      }
    }
    this.value=this.value.add(transactionsBalance);
    Object[] tArray=transactions.toArray();
    this.lastTransactionId=((BankTransaction)tArray[tArray.length - 1]).getId();
  }
  return this.value;
}","/** 
 * @return the balance's value
 */
public BigDecimal getBalance(){
  if (this.transactionInfoService == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Collection<BankTransaction> transactions=this.transactionInfoService.getLastTransactions(this.ownerId,this.lastTimestamp);
  if (!transactions.isEmpty()) {
    BigDecimal transactionsBalance=new BigDecimal(0);
    for (    BankTransaction bankTransaction : transactions) {
      if (!this.lastTransactionId.contains(bankTransaction.getId())) {
        if (bankTransaction.isOrigin(this.ownerId)) {
          transactionsBalance=transactionsBalance.subtract(bankTransaction.getAmount());
        }
 else {
          transactionsBalance=transactionsBalance.add(bankTransaction.getAmount());
        }
        this.updateLastTransactionData(bankTransaction);
      }
    }
    this.value=this.value.add(transactionsBalance);
    if (value.compareTo(BigDecimal.ZERO) < 0) {
      logger.error(""String_Node_Str"",this.ownerId,this.value);
    }
  }
  return this.value;
}",0.7799385875127943
153854,"public BankAccount(String ownerId){
  this.ownerId=ownerId;
  this.value=new BigDecimal(0);
  this.lastTransactionId=null;
  this.enabled=true;
}","public BankAccount(String ownerId){
  this.ownerId=ownerId;
  this.value=new BigDecimal(0);
  this.lastTimestamp=null;
  this.enabled=true;
}",0.9370629370629372
153855,"/** 
 * Created only for tests purposes
 * @param accountOrig
 * @param accountDest
 * @param value
 * @param type
 * @param comment
 */
public BankTransaction(String accountOrig,String accountDest,BigDecimal value,TransactionType type,String comment,Long transactionId){
  this(accountOrig,accountDest,value,type,comment);
  this.id=transactionId;
}","/** 
 * To be used by tests
 */
protected BankTransaction(String accountOrig,String accountDest,BigDecimal value,TransactionType type,String comment,Date date){
  this.accountOrig=accountOrig;
  this.accountDest=accountDest;
  this.amount=value;
  this.type=type;
  this.comment=comment;
  this.timestamp=date.getTime();
}",0.4166666666666667
153856,"/** 
 * @return the id
 */
public Long getId(){
  return this.id;
}","/** 
 * @return the id
 */
public Long getId(){
  if (this.id == null && Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
    return Long.parseLong(this.comment);
  }
  return this.id;
}",0.3970037453183521
153857,"/** 
 * @return the date
 */
public Date getDate(){
  return this.date;
}","/** 
 * @return the date
 */
public Date getDate(){
  return new Date(this.timestamp);
}",0.8695652173913043
153858,"@SuppressWarnings(""String_Node_Str"") protected Collection<BankTransaction> getDebitTransactionsByDateRange(String accountId,Date startDate,Date endDate){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  return (List<BankTransaction>)query.execute(accountId,startDate,endDate);
}","@SuppressWarnings(""String_Node_Str"") protected Collection<BankTransaction> getDebitTransactionsByDateRange(String accountId,Date startDate,Date endDate){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  return (List<BankTransaction>)query.execute(accountId,startDate.getTime(),endDate.getTime());
}",0.9720670391061452
153859,"/** 
 * Returns the amount of transactions specified by a date range
 * @param startDate startDate of the range
 * @param endDate endDate of the range
 * @return an amount representing the sum of all transactions made on the date range
 */
@SuppressWarnings(""String_Node_Str"") public BigDecimal getAmountByDateRange(Date startDate,Date endDate){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  List<BankTransaction> transactions=(List<BankTransaction>)query.execute(startDate,endDate);
  BigDecimal sum=BigDecimal.ZERO;
  for (  BankTransaction transaction : transactions) {
    sum=sum.add(transaction.getAmount());
  }
  return sum;
}","/** 
 * Returns the amount of transactions specified by a date range
 * @param startDate startDate of the range
 * @param endDate endDate of the range
 * @return an amount representing the sum of all transactions made on the date range
 */
@SuppressWarnings(""String_Node_Str"") public BigDecimal getAmountByDateRange(Date startDate,Date endDate){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  List<BankTransaction> transactions=(List<BankTransaction>)query.execute(startDate.getTime(),endDate.getTime());
  BigDecimal sum=BigDecimal.ZERO;
  for (  BankTransaction transaction : transactions) {
    sum=sum.add(transaction.getAmount());
  }
  return sum;
}",0.9860529986052998
153860,"/** 
 * Get last transactions with id greater than the given lastUsedTransactionId
 */
@SuppressWarnings(""String_Node_Str"") private Collection<BankTransaction> getLastTransactionsFrom(String accountId,Long lastUsedTransactionId){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  query.setOrdering(""String_Node_Str"");
  List<BankTransaction> transactions1=(List<BankTransaction>)query.execute(lastUsedTransactionId,accountId);
  query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  query.setOrdering(""String_Node_Str"");
  List<BankTransaction> transactions2=(List<BankTransaction>)query.execute(lastUsedTransactionId,accountId);
  return this.mergeTransactions(transactions1,transactions2,Long.MIN_VALUE);
}","/** 
 * Get last transactions older than the given lastUsedTransaction
 */
@SuppressWarnings(""String_Node_Str"") private Collection<BankTransaction> getLastTransactionsFrom(String accountId,Long lastUsedTransaction){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  query.setOrdering(""String_Node_Str"");
  List<BankTransaction> transactions1=(List<BankTransaction>)query.execute(lastUsedTransaction,accountId);
  query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  query.setOrdering(""String_Node_Str"");
  List<BankTransaction> transactions2=(List<BankTransaction>)query.execute(lastUsedTransaction,accountId);
  return this.mergeTransactions(transactions1,transactions2,Long.MIN_VALUE);
}",0.9793939393939394
153861,"@Override public Collection<BankTransaction> getLastTransactions(String accountId,Long lastUsedTransactionId){
  if (lastUsedTransactionId == null) {
    return this.getAllTransactions(accountId,Long.MIN_VALUE);
  }
 else {
    return this.getLastTransactionsFrom(accountId,lastUsedTransactionId);
  }
}","@Override public Collection<BankTransaction> getLastTransactions(String accountId,Long startDate){
  if (startDate == null) {
    return this.getAllTransactions(accountId,Long.MIN_VALUE);
  }
 else {
    return this.getLastTransactionsFrom(accountId,startDate);
  }
}",0.8421052631578947
153862,"@SuppressWarnings(""String_Node_Str"") protected Collection<BankTransaction> getCreditTransactionsByDateRange(String accountId,Date startDate,Date endDate){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  return (List<BankTransaction>)query.execute(accountId,startDate,endDate);
}","@SuppressWarnings(""String_Node_Str"") protected Collection<BankTransaction> getCreditTransactionsByDateRange(String accountId,Date startDate,Date endDate){
  Query query=this.datastoreFacade.createQueryForClass(BankTransaction.class);
  query.setFilter(""String_Node_Str"");
  return (List<BankTransaction>)query.execute(accountId,startDate.getTime(),endDate.getTime());
}",0.9721448467966574
153863,"/** 
 * Gets the   {@link BankAccount} ID for the current subdomain. It will only works properly whenthe controller is in a subdomain.
 * @return The {@link BankAccount} ID for the current subdomain account.
 */
protected String domainBankAccount(){
  return generateDomainBankAccountID(this.subDomain());
}","/** 
 * Gets the   {@link BankAccount} ID for the current subdomain. It will only works properly whenthe controller is in a subdomain.
 * @return The {@link BankAccount} ID for the current subdomain account.
 */
protected String domainBankAccount(){
  return generateDomainUserID(this.subDomain());
}",0.9752883031301482
153864,"@Override public Set<Class<? extends Subscriber>> getSubscribers(){
  Set<Class<? extends Subscriber>> subscribers=new TreeSet<Class<? extends Subscriber>>();
  subscribers.add(UsersUploadSubscriber.class);
  return subscribers;
}","@Override public Set<Class<? extends Subscriber>> getSubscribers(){
  Set<Class<? extends Subscriber>> subscribers=new TreeSet<Class<? extends Subscriber>>();
  subscribers.add(UsersUploadSubscriber.class);
  subscribers.add(DomainUserSubscriber.class);
  return subscribers;
}",0.9072978303747534
153865,"public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str""));
  return actions;
}","public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str""));
  return actions;
}",0.9969604863221884
153866,"/** 
 * @param namespaceManager the namespaceManager to set
 */
public void setNamespaceManager(NamespaceManager namespaceManager){
  this.namespaceManager=namespaceManager;
  this.domain=namespaceManager.currentNamespace();
}","/** 
 * @param namespaceManager the namespaceManager to set
 */
public void setNamespaceManager(NamespaceManager namespaceManager){
  this.namespaceManager=namespaceManager;
}",0.8728179551122195
153867,"public AuthorizationHelper(String userId){
  this.userId=userId;
}","public AuthorizationHelper(String userId,String domain){
  this.userId=userId;
  this.domain=domain;
}",0.7857142857142857
153868,"@Override public void preRender(TemplateResponse response){
  response.addOutput(""String_Node_Str"",new AuthorizationHelper(this.currentUser()));
}","@Override public void preRender(TemplateResponse response){
  response.addOutput(""String_Node_Str"",new AuthorizationHelper(this.currentUser(),this.subDomain()));
}",0.9449838187702264
153869,"/** 
 * POST /user/request/reject
 */
@AuthenticationRequired public void postRejectRequestUser(){
  this.authorizationManager.removeDomainUser(this.subDomain(),this.in(""String_Node_Str""));
  this.redirect(BASE_USERS_URL);
}","/** 
 * POST /user/request/reject
 */
@AuthorizationRequired public void postRejectRequestUser(){
  this.authorizationManager.removeDomainUser(this.subDomain(),this.in(""String_Node_Str""));
  this.redirect(BASE_USERS_URL);
}",0.9798657718120806
153870,"/** 
 * POST /user/request/accept
 */
@AuthenticationRequired public void postAcceptRequestUser(){
  this.authorizationManager.activateDomainUser(this.subDomain(),this.in(""String_Node_Str""));
  this.redirect(BASE_USERS_URL);
}","/** 
 * POST /user/request/accept
 */
@AuthorizationRequired public void postAcceptRequestUser(){
  this.authorizationManager.activateDomainUser(this.subDomain(),this.in(""String_Node_Str""));
  this.redirect(BASE_USERS_URL);
}",0.9800443458980044
153871,"/** 
 * GET /users
 */
@AuthenticationRequired public void getListUsers(){
  this.out(""String_Node_Str"",this.authorizationManager.getActiveUsers(this.subDomain()));
  this.out(""String_Node_Str"",this.authorizationManager.getNonActiveUsers(this.subDomain()));
  this.success(LIST_USER_TPL);
}","/** 
 * GET /users
 */
public void getListUsers(){
  this.out(""String_Node_Str"",this.authorizationManager.getActiveUsers(this.subDomain()));
  this.out(""String_Node_Str"",this.authorizationManager.getNonActiveUsers(this.subDomain()));
  this.success(LIST_USER_TPL);
}",0.9568345323741008
153872,"/** 
 * Checks if username belongs to a specific role of a specific domain.
 * @return <code>true</code> if the given user is authorized to perform the given activity,<code>false</code> otherwise.
 */
public boolean isAuthorized(String username,String activityName){
  return this.googleAuthorizer.isApplicationAdmin() || this.roleDAO.existsRoleFor(username,activityName);
}","/** 
 * Checks if username belongs to a specific role of a specific domain.
 * @return <code>true</code> if the given user is authorized to perform the given activity,<code>false</code> otherwise.
 */
public boolean isAuthorized(String username,String activityName){
  boolean authorized=this.googleAuthorizer.isApplicationAdmin() || this.roleDAO.existsRoleFor(username,activityName);
  logger.debug(""String_Node_Str"",username,activityName,authorized);
  return authorized;
}",0.8645465253239105
153873,"/** 
 * Shows user edit form
 */
@OnlyForGlobal @AuthenticationRequired public void getEditUser(){
  User user=this.userManager.getUser(this.currentUser());
  out(""String_Node_Str"",user.getName());
  out(""String_Node_Str"",user.getPhoneNumber());
  out(""String_Node_Str"",user.getDescription());
  success(EDIT_USER_TPL);
}","/** 
 * Shows user edit form
 */
@OnlyForGlobal @AuthenticationRequired public void getEditUser(){
  User user=this.userManager.getUser(this.currentUser());
  out(""String_Node_Str"",user.getName());
  out(""String_Node_Str"",user.getPhoneNumber());
  out(""String_Node_Str"",user.getDescription());
  out(""String_Node_Str"",this.authorizationManager.getActiveUserDomains(this.currentUser()));
  success(EDIT_USER_TPL);
}",0.8734693877551021
153874,"public DomainUser(String userId,String domain,boolean isActive2){
  this.userId=userId;
}","public DomainUser(String userId,String domain,boolean isActive){
  this.userId=userId;
  this.isActive=isActive;
}",0.8669950738916257
153875,"/** 
 * A validator that check if the transfer's amount is positive 
 */
public static synchronized Validator getAmountValidator(){
  if (valueValidator == null) {
    valueValidator=new Validator();
    valueValidator.add(""String_Node_Str"",new AmountRule());
  }
  return valueValidator;
}","/** 
 * A validator that check if the transfer's amount is positive 
 */
public static synchronized Validator getAmountValidator(){
  if (valueValidator == null) {
    valueValidator=new Validator();
  }
  return valueValidator;
}",0.7884615384615384
153876,"/** 
 * A validator that check if the destination account exists and has authorization at the specified domain
 */
public static synchronized Validator getDestinationValidator(){
  if (destinationValidator == null) {
    destinationValidator=new Validator();
    destinationValidator.add(""String_Node_Str"",new DestinationRule());
  }
  return destinationValidator;
}","/** 
 * A validator that check if the destination account exists and has authorization at the specified domain
 */
public static synchronized Validator getDestinationValidator(){
  if (destinationValidator == null) {
    destinationValidator=new Validator();
  }
  return destinationValidator;
}",0.7987897125567323
153877,"/** 
 * Updates the activities of a specific role of a specific domain.
 * @param domain domain that the role belongs to
 * @param roleName roleName to have its activities updated
 * @param activities activities to be set on role
 */
public void updateRoleActivities(String domain,String roleName,Collection<String> activities){
  Role role=this.getRole(domain,roleName);
  role.updateActivities(activities);
}","/** 
 * Updates the activities of a specific role of a specific domain.
 * @param domain domain that the role belongs to
 * @param roleName roleName to have its activities updated
 * @param activities activities to be set on role
 */
public void updateRoleActivities(String domain,String roleName,Collection<String> activities){
  Role role=this.getRole(domain,roleName);
  role.updateActivities(activities);
  this.roleDAO.save(role);
}",0.9681227863046044
153878,"public void postShareBank(){
  Validator requiredValidator=BankValidators.getRequiredValidator();
  Validator destinationValidator=BankValidators.getDestinationValidator();
  if (requiredValidator.isValid() && destinationValidator.isValid()) {
    this.accountManager.transact(this.subDomain(),this.in(""String_Node_Str""),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""),TransactionType.valueOf(this.in(""String_Node_Str"")));
    this.redirect(ADMIN_URL);
  }
 else {
    this.out(""String_Node_Str"",this.accountManager.getBalance(this.subDomain()));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.invalid(ADMIN_TPL);
  }
}","/** 
 * Transfer from bank account to a user account
 */
public void postShareBank(){
  Validator requiredValidator=BankValidators.getRequiredValidator();
  Validator destinationValidator=BankValidators.getDestinationValidator();
  if (requiredValidator.isValid() && destinationValidator.isValid()) {
    this.accountManager.transact(this.subDomain(),this.in(""String_Node_Str""),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""),TransactionType.valueOf(this.in(""String_Node_Str"")));
    this.redirect(ADMIN_URL);
  }
 else {
    this.echo();
    this.out(""String_Node_Str"",this.accountManager.getBalance(this.subDomain()));
    this.invalid(ADMIN_TPL);
  }
}",0.7934210526315789
153879,"public void setAccountManager(AccountManager accountManager){
  this.accountManager=accountManager;
}","/** 
 * Method used by the Injector
 */
public void setAccountManager(AccountManager accountManager){
  this.accountManager=accountManager;
}",0.8347107438016529
153880,"public void getStatementBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
  this.success(STATEMENT_TPL);
}","/** 
 * Gets the current user current balance
 */
public void getStatementBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
  this.success(STATEMENT_TPL);
}",0.8538011695906432
153881,"public void getAdminBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.subDomain()));
  this.success(ADMIN_TPL);
}","/** 
 * Gets the bank admin interface
 */
public void getAdminBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.subDomain()));
  this.success(ADMIN_TPL);
}",0.8662420382165605
153882,"public void postBallastBank(){
  Validator requiredValidator=BankValidators.getRequiredValidator();
  Validator comparableValidator=BankValidators.getAmountValidator();
  if (requiredValidator.isValid() && comparableValidator.isValid()) {
    this.accountManager.insertBallast(this.subDomain(),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""));
    this.redirect(ADMIN_URL);
  }
 else {
    this.out(""String_Node_Str"",this.accountManager.getBalance(this.subDomain()));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.invalid(ADMIN_TPL);
  }
}","/** 
 * Transfer from system account to bank account
 */
public void postBallastBank(){
  Validator requiredValidator=BankValidators.getRequiredValidator();
  Validator comparableValidator=BankValidators.getAmountValidator();
  if (requiredValidator.isValid() && comparableValidator.isValid()) {
    this.accountManager.insertBallast(this.subDomain(),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""));
    this.redirect(ADMIN_URL);
  }
 else {
    this.echo();
    this.out(""String_Node_Str"",this.accountManager.getBalance(this.subDomain()));
    this.invalid(ADMIN_TPL);
  }
}",0.7694566813509545
153883,"public void getIndexBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
  this.out(""String_Node_Str"",this.accountManager.getLastNTransactions(this.currentUser(),5));
  this.success(INDEX_TPL);
}","/** 
 * Shows the initial bank page for a user
 */
public void getIndexBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
  this.out(""String_Node_Str"",this.accountManager.getLastNTransactions(this.currentUser(),5));
  this.success(INDEX_TPL);
}",0.9009708737864076
153884,"public void getTransferBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
  this.out(""String_Node_Str"",this.accountManager.getLastNTransactions(this.currentUser(),5));
  this.success(TRANSFER_TPL);
}","/** 
 * Shows the page for transfers between users
 */
public void getTransferBank(){
  this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
  this.out(""String_Node_Str"",this.accountManager.getLastNTransactions(this.currentUser(),5));
  this.success(TRANSFER_TPL);
}",0.896421845574388
153885,"public void postTransactionsBank(){
  List<BankTransaction> transactions=new LinkedList<BankTransaction>();
  transactions.add(new BankTransaction(""String_Node_Str"",""String_Node_Str"",new BigDecimal(50),TransactionType.DEPOSIT,""String_Node_Str""));
  transactions.add(new BankTransaction(""String_Node_Str"",""String_Node_Str"",new BigDecimal(50),TransactionType.DEPOSIT,""String_Node_Str""));
  out(""String_Node_Str"",""String_Node_Str"");
  out(""String_Node_Str"",""String_Node_Str"");
  out(""String_Node_Str"",transactions);
  jsonSuccess();
}","/** 
 * Posts parameters to get user's transactions
 */
public void postTransactionsBank(){
  this.out(""String_Node_Str"",this.accountManager.getTransactionsByDateRange(currentUser(),Formatter.parse(in(""String_Node_Str"")),Formatter.parse(in(""String_Node_Str""))));
  jsonSuccess();
}",0.1182266009852216
153886,"public void postTransfer(){
  Validator requiredValidator=BankValidators.getRequiredValidator();
  Validator destinationValidator=BankValidators.getDestinationValidator();
  if (requiredValidator.isValid() && destinationValidator.isValid()) {
    this.accountManager.transact(this.currentUser(),this.in(""String_Node_Str""),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""),TransactionType.valueOf(this.in(""String_Node_Str"")));
    this.redirect(BASE_URL);
  }
 else {
    this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.out(""String_Node_Str"",this.in(""String_Node_Str""));
    this.invalid(TRANSFER_TPL);
  }
}","/** 
 * Posts a transfer between users
 */
public void postTransfer(){
  Validator requiredValidator=BankValidators.getRequiredValidator();
  Validator destinationValidator=BankValidators.getDestinationValidator();
  if (requiredValidator.isValid() && destinationValidator.isValid()) {
    this.accountManager.transact(this.currentUser(),this.in(""String_Node_Str""),new BigDecimal(this.in(""String_Node_Str"")),this.in(""String_Node_Str""),TransactionType.valueOf(this.in(""String_Node_Str"")));
    this.redirect(BASE_URL);
  }
 else {
    this.out(""String_Node_Str"",this.accountManager.getBalance(this.currentUser()));
    this.echo();
    this.invalid(TRANSFER_TPL);
  }
}",0.8179419525065963
153887,"public static synchronized Validator getRequiredValidator(){
  if (requiredValidator == null) {
    requiredValidator=new Validator();
    requiredValidator.add(""String_Node_Str"",new RequiredRule(),""String_Node_Str"");
    requiredValidator.add(""String_Node_Str"",new RequiredRule(),""String_Node_Str"");
    requiredValidator.add(""String_Node_Str"",new RequiredRule(),""String_Node_Str"");
  }
  return requiredValidator;
}","/** 
 * A validator for transfers that checks the required fields
 */
public static synchronized Validator getRequiredValidator(){
  if (requiredValidator == null) {
    requiredValidator=new Validator();
    requiredValidator.add(""String_Node_Str"",new RequiredRule(),""String_Node_Str"");
    requiredValidator.add(""String_Node_Str"",new RequiredRule(),""String_Node_Str"");
    requiredValidator.add(""String_Node_Str"",new RequiredRule(),""String_Node_Str"");
  }
  return requiredValidator;
}",0.8849557522123894
153888,"public static synchronized Validator getDestinationValidator(){
  if (destinationValidator == null) {
    destinationValidator=new Validator();
    destinationValidator.add(""String_Node_Str"",new DestinationRule(),""String_Node_Str"");
  }
  return destinationValidator;
}","/** 
 * A validator that check if the destination account exists and has authorization at the specified domain
 */
public static synchronized Validator getDestinationValidator(){
  if (destinationValidator == null) {
    destinationValidator=new Validator();
    destinationValidator.add(""String_Node_Str"",new DestinationRule(),""String_Node_Str"");
  }
  return destinationValidator;
}",0.8238897396630934
153889,"public static synchronized Validator getAmountValidator(){
  if (valueValidator == null) {
    valueValidator=new Validator();
    valueValidator.add(""String_Node_Str"",new AmountRule(),""String_Node_Str"");
  }
  return valueValidator;
}","/** 
 * A validator that check if the transfer's amount is positive 
 */
public static synchronized Validator getAmountValidator(){
  if (valueValidator == null) {
    valueValidator=new Validator();
    valueValidator.add(""String_Node_Str"",new AmountRule(),""String_Node_Str"");
  }
  return valueValidator;
}",0.8655616942909761
153890,"public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new TreeSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}","public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}",0.976470588235294
153891,"@Override public void eventPublished(Event event){
  DomainCreatedEvent domainEvent=(DomainCreatedEvent)event;
  String domainName=domainEvent.getNamespace();
  String domainAdmin=domainEvent.getAdminID();
  logger.info(""String_Node_Str"" + domainName + ""String_Node_Str""+ domainAdmin);
  this.authorizationManager.createRole(domainName,USERS_ROLE_NAME);
  this.authorizationManager.createRole(domainName,ADMINS_ROLE_NAME);
  for (  Module m : Module.values()) {
    ModuleSpec moduleSpec=m.getModuleSpec();
    if (moduleSpec.getModuleType() == Type.DOMAIN || moduleSpec.getModuleType() == Type.APPLICATION_DOMAIN) {
      logger.debug(""String_Node_Str"",m.name(),domainName);
      ApplicationDomainModuleSpec spec=(ApplicationDomainModuleSpec)moduleSpec;
      for (      ActionSpec action : spec.getModuleActions()) {
        String name=action.getAction();
        logger.debug(""String_Node_Str"",m.toString(),name);
        this.authorizationManager.addActivitiesToRole(domainName,ADMINS_ROLE_NAME,name);
        if (!action.isAdministrativeOnly()) {
          this.authorizationManager.addActivitiesToRole(domainName,USERS_ROLE_NAME,name);
        }
      }
    }
  }
  logger.info(""String_Node_Str"",domainName,domainAdmin);
  this.authorizationManager.addUsersToRole(domainName,ADMINS_ROLE_NAME,domainAdmin);
  this.authorizationManager.addUsersToRole(domainName,USERS_ROLE_NAME,domainAdmin);
}","@Override public void eventPublished(Event event){
  DomainCreatedEvent domainEvent=(DomainCreatedEvent)event;
  String domainName=domainEvent.getNamespace();
  String domainAdmin=domainEvent.getAdminID();
  logger.info(""String_Node_Str"" + domainName + ""String_Node_Str""+ domainAdmin);
  this.authorizationManager.createRole(domainName,USERS_ROLE_NAME);
  this.authorizationManager.createRole(domainName,ADMINS_ROLE_NAME);
  for (  Module m : Module.values()) {
    ModuleSpec moduleSpec=m.getModuleSpec();
    if (moduleSpec.getModuleType() == Type.DOMAIN || moduleSpec.getModuleType() == Type.APPLICATION_DOMAIN) {
      logger.debug(""String_Node_Str"",m.name(),domainName);
      ApplicationDomainModuleSpec spec=(ApplicationDomainModuleSpec)moduleSpec;
      for (      ActionSpec action : spec.getModuleActions()) {
        String name=action.getAction();
        logger.debug(""String_Node_Str"",m.toString(),name);
        this.authorizationManager.addActivitiesToRole(domainName,ADMINS_ROLE_NAME,name);
        if (!action.isAdministrativeOnly()) {
          this.authorizationManager.addActivitiesToRole(domainName,USERS_ROLE_NAME,name);
        }
      }
    }
  }
  logger.info(""String_Node_Str"",domainName,domainAdmin);
  this.authorizationManager.addUsersToRole(domainName,ADMINS_ROLE_NAME,domainAdmin);
  this.authorizationManager.addUsersToRole(domainName,USERS_ROLE_NAME,domainAdmin);
  PersistenceManagerPool.forceClose();
}",0.9862530842439196
153892,"@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new TreeSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}","@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}",0.9918367346938776
153893,"@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new TreeSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}","@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}",0.986206896551724
153894,"@Override protected void processEvent(Event event){
  String namespace=((NamespaceEvent)event).getNamespace();
  log.info(""String_Node_Str"" + namespace);
  this.configurationManager.createDomainConfiguration(namespace);
  for (  Module m : Module.values()) {
    ModuleSpec moduleSpec=m.getModuleSpec();
    if (moduleSpec.getModuleType() == Type.DOMAIN) {
      log.debug(""String_Node_Str"",m.name(),namespace);
      this.configurationManager.enableModule(m);
    }
  }
}","@Override protected void processEvent(Event event){
  String namespace=((NamespaceEvent)event).getNamespace();
  log.info(""String_Node_Str"" + namespace);
  this.configurationManager.createDomainConfiguration(namespace);
  for (  Module m : Module.values()) {
    ModuleSpec moduleSpec=m.getModuleSpec();
    if (moduleSpec.getModuleType() == Type.DOMAIN) {
      log.debug(""String_Node_Str"",m.name(),namespace);
      this.configurationManager.enableModule(m);
    }
  }
  PersistenceManagerPool.forceClose();
}",0.960325534079349
153895,"@Override public void processEvent(Event event){
  DomainUploadEvent uploadEvent=(DomainUploadEvent)event;
  this.configurationManager.updateAvatarKey(uploadEvent.getBlobKey());
}","@Override public void processEvent(Event event){
  DomainUploadEvent uploadEvent=(DomainUploadEvent)event;
  this.configurationManager.updateAvatarKey(uploadEvent.getBlobKey());
  PersistenceManagerPool.forceClose();
}",0.9017632241813602
153896,"@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new TreeSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}","@Override public Set<ActionSpec> getModuleActions(){
  Set<ActionSpec> actions=new HashSet<ActionSpec>();
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str""));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  actions.add(new ActionSpec(""String_Node_Str"",true));
  return actions;
}",0.9918367346938776
153897,"@Override public void eventPublished(Event event){
  UserUploadEvent uploadEvent=(UserUploadEvent)event;
  log.debug(""String_Node_Str"",uploadEvent.getTarget(),uploadEvent.getBlobKey());
  this.usersManager.updateAvatarKey(uploadEvent.getTarget(),uploadEvent.getBlobKey());
}","@Override public void eventPublished(Event event){
  UserUploadEvent uploadEvent=(UserUploadEvent)event;
  this.usersManager.updateAvatarKey(uploadEvent.getTarget(),uploadEvent.getBlobKey());
  PersistenceManagerPool.forceClose();
}",0.6758893280632411
153898,"/** 
 * Creates the domain at Rout53
 * @throws Route53Exception if some error occurs when accessing route53 API
 */
public void createDomain(String domainName,String adminID){
  if (this.hasApplicationConfiguration()) {
    ApplicationConfiguration appConf=this.applicationConfigurationDAO.get(APPLICATION_NAME);
    Route53Util.createDomain(domainName,appConf.getRoute53AccessKeyID(),appConf.getRoute53AccessKeySecret(),appConf.getRoute53ZoneID());
    eventBus.publish(new DomainCreatedEvent(domainName,adminID));
  }
 else {
    if (Boolean.parseBoolean(getProperty(NOT_ROUTE53_PROPERTY))) {
      log.info(""String_Node_Str"",NOT_ROUTE53_PROPERTY);
      eventBus.publish(new DomainCreatedEvent(domainName,adminID));
    }
 else {
      throw new DataDoesNotExistsException(""String_Node_Str"");
    }
  }
}","/** 
 * Creates the domain at Rout53
 * @throws Route53Exception if some error occurs when accessing route53 API
 */
public void createDomain(String domainName,String adminID){
  if (this.hasApplicationConfiguration()) {
    if (!Boolean.parseBoolean(getProperty(NOT_ROUTE53_PROPERTY))) {
      ApplicationConfiguration appConf=this.applicationConfigurationDAO.get(APPLICATION_NAME);
      Route53Util.createDomain(domainName,appConf.getRoute53AccessKeyID(),appConf.getRoute53AccessKeySecret(),appConf.getRoute53ZoneID());
    }
 else {
      log.info(""String_Node_Str"",NOT_ROUTE53_PROPERTY);
    }
    eventBus.publish(new DomainCreatedEvent(domainName,adminID));
  }
 else {
    throw new DataDoesNotExistsException(""String_Node_Str"");
  }
}",0.6576402321083172
153899,"/** 
 * Changes current namespace to global namespace, storing the actual namespace to be restored later.
 */
public static void changeToGlobalNamespace(){
  changeToNamespace(getGlobalNamespace());
}","/** 
 * Changes current namespace to global namespace, storing the actual namespace to be restored later.
 */
public static void changeToGlobalNamespace(){
  changeToNamespace(GLOBAL_NAMESPACE);
}",0.9191919191919192
153900,"/** 
 * Updates an model property's value. If the given module hasn't any property if the the given propertyKey an  {@link IllegalArgumentException} will be thrown.This method performs an verification using the  {@link ModuleProperty} regex. If the givenvalue doesn't satisfy the regex, an  {@link IllegalArgumentException} will be thrown.If the given module isn't enabled for the given domain, nothing happens.
 * @param module The module
 * @param propertyKey The property key to be updated
 * @param propertyValue The new property value
 */
public void setModuleProperty(Module module,String propertyKey,String propertyValue){
  DomainConfiguration domainConf=this.getDomainConfiguration();
  if (domainConf.isModuleEnabled(module.name())) {
    DomainSpecificModuleConfiguration moduleConf=this.moduleDAO.get(module.name());
    if (moduleConf.existsProperty(propertyKey)) {
      String regex=moduleConf.getPropertyRegex(propertyKey);
      if (!regex.isEmpty()) {
        if (!propertyValue.matches(regex)) {
          throw new IllegalArgumentException(""String_Node_Str"" + propertyKey + ""String_Node_Str""+ module.name()+ ""String_Node_Str"");
        }
      }
      moduleConf.setConfigurationValue(propertyKey,propertyValue);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + module.name() + ""String_Node_Str""+ propertyKey);
    }
  }
 else {
    throw new DataDoesNotExistsException(""String_Node_Str"" + module.name() + ""String_Node_Str"");
  }
}","public void setModuleProperty(Module module,String propertyKey,String propertyValue){
  DomainConfiguration domainConf=this.getDomainConfiguration();
  if (domainConf.isModuleEnabled(module.name())) {
    DomainSpecificModuleConfiguration moduleConf=this.moduleDAO.get(module.name());
    if (moduleConf.existsProperty(propertyKey)) {
      String regex=moduleConf.getPropertyRegex(propertyKey);
      if (!regex.isEmpty()) {
        if (!propertyValue.matches(regex)) {
          throw new IllegalArgumentException(""String_Node_Str"" + propertyKey + ""String_Node_Str""+ module.name()+ ""String_Node_Str"");
        }
      }
      moduleConf.setConfigurationValue(propertyKey,propertyValue);
      moduleDAO.save(moduleConf);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + module.name() + ""String_Node_Str""+ propertyKey);
    }
  }
 else {
    throw new DataDoesNotExistsException(""String_Node_Str"" + module.name() + ""String_Node_Str"");
  }
}",0.1096563011456628
153901,"@Test public void restorePropertiesTest() throws DataDoesNotExistsException {
  this.domain.enableModule(""String_Node_Str"");
  expect(this.domainDAO.count()).andReturn(1).anyTimes();
  expect(this.domainDAO.getAll()).andReturn(this.result).anyTimes();
  DomainSpecificModuleConfiguration moduleConf=Module.getModuleSpec(Module.BANK).getDomainSpecificModuleConfiguration();
  expect(this.moduleDAO.get(""String_Node_Str"")).andReturn(moduleConf).anyTimes();
  replay(this.domainDAO,this.moduleDAO);
  this.configurationManager.setModuleProperty(Module.BANK,""String_Node_Str"",""String_Node_Str"");
  DomainSpecificModuleConfigurationView moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  this.configurationManager.restoreModuleProperties(Module.BANK);
  moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  verify(this.domainDAO,this.moduleDAO);
}","@Test public void restorePropertiesTest() throws DataDoesNotExistsException {
  this.domain.enableModule(""String_Node_Str"");
  expect(this.domainDAO.count()).andReturn(1).anyTimes();
  expect(this.domainDAO.getAll()).andReturn(this.result).anyTimes();
  DomainSpecificModuleConfiguration moduleConf=Module.getModuleSpec(Module.BANK).getDomainSpecificModuleConfiguration();
  this.moduleDAO.save(moduleConf);
  expect(this.moduleDAO.get(""String_Node_Str"")).andReturn(moduleConf).anyTimes();
  replay(this.domainDAO,this.moduleDAO);
  this.configurationManager.setModuleProperty(Module.BANK,""String_Node_Str"",""String_Node_Str"");
  DomainSpecificModuleConfigurationView moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  this.configurationManager.restoreModuleProperties(Module.BANK);
  moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  verify(this.domainDAO,this.moduleDAO);
}",0.9836677554829678
153902,"@Test public void setPropertyTest(){
  this.domain.enableModule(""String_Node_Str"");
  expect(this.domainDAO.count()).andReturn(1).anyTimes();
  expect(this.domainDAO.getAll()).andReturn(this.result).anyTimes();
  DomainSpecificModuleConfiguration moduleConf=Module.getModuleSpec(Module.BANK).getDomainSpecificModuleConfiguration();
  expect(this.moduleDAO.get(""String_Node_Str"")).andReturn(moduleConf).anyTimes();
  replay(this.domainDAO,this.moduleDAO);
  DomainSpecificModuleConfigurationView moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  this.configurationManager.setModuleProperty(Module.BANK,""String_Node_Str"",""String_Node_Str"");
  moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  verify(this.domainDAO,this.moduleDAO);
}","@Test public void setPropertyTest(){
  this.domain.enableModule(""String_Node_Str"");
  expect(this.domainDAO.count()).andReturn(1).anyTimes();
  expect(this.domainDAO.getAll()).andReturn(this.result).anyTimes();
  DomainSpecificModuleConfiguration moduleConf=Module.getModuleSpec(Module.BANK).getDomainSpecificModuleConfiguration();
  this.moduleDAO.save(moduleConf);
  expect(this.moduleDAO.get(""String_Node_Str"")).andReturn(moduleConf).anyTimes();
  replay(this.domainDAO,this.moduleDAO);
  DomainSpecificModuleConfigurationView moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  this.configurationManager.setModuleProperty(Module.BANK,""String_Node_Str"",""String_Node_Str"");
  moduleInfo=this.configurationManager.getModuleConfiguration(Module.BANK);
  assertEquals(""String_Node_Str"",moduleInfo.getPropertyValue(""String_Node_Str""));
  verify(this.domainDAO,this.moduleDAO);
}",0.9818558838776568
153903,"public static void createDomain(String domain,String accessId,String accessKey,String hostedZoneId) throws Route53Exception {
  try {
    HTTPRequest request=new HTTPRequest(new URL(ROUTE53_SERVER + VERSION_SPEC + HOSTED_ZONE_COMMAND+ hostedZoneId),HTTPMethod.POST);
    String requestBody=generateRequestBody(domain);
    logger.fine(requestBody);
    request.setPayload(requestBody.getBytes());
    signRequest(request,accessId,accessKey);
    HTTPResponse response=urlFetchService.fetch(request);
    if (response.getResponseCode() != 200) {
      String out=new String(response.getContent());
      logger.fine(""String_Node_Str"" + domain + ""String_Node_Str""+ out);
      throw new Route53Exception(out);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    throw new RuntimeException(e);
  }
}","public static void createDomain(String domain,String accessId,String accessKey,String hostedZoneId) throws Route53Exception {
  try {
    HTTPRequest request=new HTTPRequest(new URL(ROUTE53_SERVER + VERSION_SPEC + HOSTED_ZONE_COMMAND+ hostedZoneId+ RRSET),HTTPMethod.POST);
    String requestBody=generateRequestBody(domain);
    logger.fine(requestBody);
    request.setPayload(requestBody.getBytes());
    signRequest(request,accessId,accessKey);
    HTTPResponse response=urlFetchService.fetch(request);
    if (response.getResponseCode() != 200) {
      String out=new String(response.getContent());
      logger.fine(""String_Node_Str"" + domain + ""String_Node_Str""+ out);
      throw new Route53Exception(out);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + e.getMessage(),e);
    throw new RuntimeException(e);
  }
}",0.9958992384299942
153904,"protected static String sign(String content,String key) throws InvalidKeySpecException, NoSuchAlgorithmException, InvalidKeyException {
  SecretKey skey=new SecretKeySpec(key.getBytes(),KEY_ALGORITHM);
  Mac mac=Mac.getInstance(MAC_ALGORITHM);
  mac.init(skey);
  mac.update(content.getBytes());
  return new String(Base64.encodeBase64(mac.doFinal()));
}","protected static String sign(String content,String key) throws InvalidKeySpecException, NoSuchAlgorithmException, InvalidKeyException, IllegalStateException {
  Mac mac=Mac.getInstance(MAC_ALGORITHM);
  SecretKey skey=new SecretKeySpec(key.getBytes(),KEY_ALGORITHM);
  mac.init(skey);
  mac.update(content.getBytes());
  return new String(Base64.encodeBase64((mac.doFinal())));
}",0.7858117326057299
153905,"protected static void signRequest(HTTPRequest request,String accessID,String key) throws IOException, InvalidKeyException, InvalidKeySpecException, NoSuchAlgorithmException {
  String date=fetchDate();
  logger.fine(""String_Node_Str"" + date);
  String sign=sign(date,key);
  String signature=AUTH_TOKEN.replace(ACCESS_ID_TOKEN,accessID);
  signature=signature.replace(SIGNATURE_TOKEN,sign);
  request.addHeader(new HTTPHeader(SUBMIT_DATE_HEADER,date));
  request.addHeader(new HTTPHeader(AUTHORIZATION_HEADER,signature));
  request.addHeader(new HTTPHeader(""String_Node_Str"",""String_Node_Str""));
}","protected static void signRequest(HTTPRequest request,String accessID,String key) throws IOException, InvalidKeyException, InvalidKeySpecException, NoSuchAlgorithmException {
  String date=fetchDate();
  String sign=sign(date,key);
  String signature=AUTH_TOKEN.replace(ACCESS_ID_TOKEN,accessID);
  signature=signature.replace(SIGNATURE_TOKEN,sign);
  request.addHeader(new HTTPHeader(SUBMIT_DATE_HEADER,date));
  request.addHeader(new HTTPHeader(AUTHORIZATION_HEADER,signature));
  request.addHeader(new HTTPHeader(""String_Node_Str"",""String_Node_Str""));
}",0.9644405897658282
153906,"protected static String fetchDate() throws IOException {
  HttpURLConnection connection=(HttpURLConnection)new URL(ROUTE53_SERVER + DATE_COMMAND).openConnection();
  if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
    Map<String,List<String>> headers=connection.getHeaderFields();
    return new Date(connection.getHeaderFieldDate(FETCH_DATE_HEADER,0)).toGMTString();
  }
 else {
    return null;
  }
}","protected static String fetchDate() throws IOException {
  HttpURLConnection connection=(HttpURLConnection)new URL(ROUTE53_SERVER + DATE_COMMAND).openConnection();
  if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
    return formatter.format(new Date(connection.getHeaderFieldDate(FETCH_DATE_HEADER,0)));
  }
 else {
    return null;
  }
}",0.8335483870967741
153907,"@Override public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.hasNode(""String_Node_Str"")) {
    node.checkout();
    node=node.addNode(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    node=node.getNode(""String_Node_Str"");
  }
  JCRNodeWrapper newNode=createNode(req,parameters,node,""String_Node_Str"",""String_Node_Str"");
  jcrSessionWrapper.save();
  return new ActionResult(HttpServletResponse.SC_OK,newNode.getPath(),Render.serializeNodeToJSON(newNode));
}","@Override public ActionResult doExecute(HttpServletRequest req,RenderContext renderContext,Resource resource,JCRSessionWrapper session,Map<String,List<String>> parameters,URLResolver urlResolver) throws Exception {
  JCRSessionWrapper jcrSessionWrapper=resource.getNode().getSession();
  JCRNodeWrapper node=resource.getNode();
  if (!node.hasNode(""String_Node_Str"")) {
    node.checkout();
    node=node.addNode(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    node=node.getNode(""String_Node_Str"");
  }
  JCRNodeWrapper newNode=createNode(req,parameters,node,""String_Node_Str"",""String_Node_Str"",false);
  jcrSessionWrapper.save();
  return new ActionResult(HttpServletResponse.SC_OK,newNode.getPath(),Render.serializeNodeToJSON(newNode));
}",0.9959623149394348
153908,"@Override public void actionPerformed(final ActionEvent e){
  actionCommands actionCommand=actionCommands.valueOf(e.getActionCommand());
switch (actionCommand) {
case ADD_PRODUCT:
    acquirePermit();
  addProduct();
isChanged=true;
releasePermit();
break;
case ON_OFFLINE:
if (view.isOnline()) {
setStatus(""String_Node_Str"");
if (model.getUserdata() == null) {
String[] userdata=PopupDialog.showDialog(view);
model.setUserdata(userdata);
}
view.setOnline(view.isOnline());
try {
model.setOnline(view.isOnline());
}
 catch (UnknownHostException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
model.setUserdata(null);
view.setOnline(false);
}
catch (IOException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
model.setUserdata(null);
view.setOnline(false);
}
if (model.getUserdata() != null && (worker == null || worker.getState() == SwingWorker.StateValue.DONE)) {
try {
worker=new DateWorker(view,model.getUserdata()[2],6667);
worker.execute();
}
 catch (SocketException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"");
}
catch (UnknownHostException e2) {
JOptionPane.showMessageDialog(view,""String_Node_Str"");
}
}
setStatus(""String_Node_Str"");
}
 else {
setStatus(""String_Node_Str"");
if (worker != null) {
worker.cancel(false);
}
view.setDate(""String_Node_Str"");
view.setOnline(view.isOnline());
try {
model.setOnline(view.isOnline());
}
 catch (UnknownHostException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
catch (IOException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
setStatus(""String_Node_Str"");
}
break;
case SAVE:
if (isChanged) {
acquirePermit();
productListDelegate.saveProductList(model.getStorage());
}
break;
case SAVE_AS:
acquirePermit();
productListDelegate.saveProductListAs(model.getStorage());
break;
case OPEN:
if (isChanged) {
int choice=JOptionPane.showConfirmDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
if (choice == JOptionPane.OK_OPTION) {
acquirePermit();
productListDelegate.saveProductList(model.getStorage());
}
}
acquirePermit();
productListDelegate.openProductList();
break;
case INSERT:
acquirePermit();
dbDelegate.insertIntoDB();
break;
case QUERY:
if (isChanged) {
int choice=JOptionPane.showConfirmDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
if (choice == JOptionPane.OK_OPTION) {
acquirePermit();
productListDelegate.saveProductList(model.getStorage());
}
}
acquirePermit();
dbDelegate.readFromDB();
break;
}
}","@Override public void actionPerformed(final ActionEvent e){
  actionCommands actionCommand=actionCommands.valueOf(e.getActionCommand());
switch (actionCommand) {
case ADD_PRODUCT:
    acquirePermit();
  addProduct();
isChanged=true;
releasePermit();
break;
case ON_OFFLINE:
if (view.isOnline()) {
setStatus(""String_Node_Str"");
if (model.getUserdata() == null) {
String[] userdata=PopupDialog.showDialog(view);
model.setUserdata(userdata);
}
view.setOnline(view.isOnline());
try {
model.setOnline(view.isOnline());
}
 catch (UnknownHostException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
model.setUserdata(null);
view.setOnline(false);
}
catch (IOException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
model.setUserdata(null);
view.setOnline(false);
}
if (model.isOnline() && (worker == null || worker.getState() == SwingWorker.StateValue.DONE)) {
try {
String[] userdata=model.getUserdata();
if (userdata == null || userdata.length < 2) {
  userdata=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}
worker=new DateWorker(view,userdata[2],6667);
worker.execute();
}
 catch (SocketException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"");
}
catch (UnknownHostException e2) {
JOptionPane.showMessageDialog(view,""String_Node_Str"");
}
}
setStatus(""String_Node_Str"");
}
 else {
setStatus(""String_Node_Str"");
if (worker != null) {
worker.cancel(false);
}
view.setDate(""String_Node_Str"");
view.setOnline(view.isOnline());
try {
model.setOnline(view.isOnline());
}
 catch (UnknownHostException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
catch (IOException e1) {
JOptionPane.showMessageDialog(view,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
setStatus(""String_Node_Str"");
}
break;
case SAVE:
if (isChanged) {
acquirePermit();
productListDelegate.saveProductList(model.getStorage());
}
break;
case SAVE_AS:
acquirePermit();
productListDelegate.saveProductListAs(model.getStorage());
break;
case OPEN:
if (isChanged) {
int choice=JOptionPane.showConfirmDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
if (choice == JOptionPane.OK_OPTION) {
acquirePermit();
productListDelegate.saveProductList(model.getStorage());
}
}
acquirePermit();
productListDelegate.openProductList();
break;
case INSERT:
acquirePermit();
dbDelegate.insertIntoDB();
break;
case QUERY:
if (isChanged) {
int choice=JOptionPane.showConfirmDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
if (choice == JOptionPane.OK_OPTION) {
acquirePermit();
productListDelegate.saveProductList(model.getStorage());
}
}
acquirePermit();
dbDelegate.readFromDB();
break;
}
}",0.9600141542816704
153909,"public QuantityCellEditor(final CustomerTableModel tableModel){
  this.tableModel=tableModel;
  SpinnerNumberModel smodel=new SpinnerNumberModel(0,0,Integer.MAX_VALUE,1);
  buySpinner=new JSpinner(smodel);
  JFormattedTextField tf=((JSpinner.DefaultEditor)buySpinner.getEditor()).getTextField();
  tf.setFocusLostBehavior(JFormattedTextField.COMMIT);
}","public QuantityCellEditor(final CustomerTableModel tableModel){
  this.tableModel=tableModel;
  SpinnerNumberModel smodel=new SpinnerNumberModel(0,0,Integer.MAX_VALUE,1);
  buySpinner=new JSpinner(smodel);
  addCellEditorListener(this);
  final JFormattedTextField tf=((JSpinner.DefaultEditor)buySpinner.getEditor()).getTextField();
  tf.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      try {
        tf.commitEdit();
      }
 catch (      ParseException e1) {
        tf.setValue(0);
        try {
          tf.commitEdit();
        }
 catch (        ParseException e2) {
        }
      }
    }
  }
);
}",0.6087824351297405
153910,"/** 
 * Gets the JVM Options used to launch the slave JVM.
 * @return
 */
public String getJvmOptions(){
  return jvmOptions;
}","/** 
 * Gets the JVM Options used to launch the slave JVM.
 * @return
 */
public String getJvmOptions(){
  return jvmOptions == null ? ""String_Node_Str"" : jvmOptions;
}",0.8610169491525423
153911,"private void reportEnvironment(StreamTaskListener listener) throws IOException {
  Session session=connection.openSession();
  try {
    session.execCommand(""String_Node_Str"");
    StreamGobbler out=new StreamGobbler(session.getStdout());
    StreamGobbler err=new StreamGobbler(session.getStderr());
    try {
      BufferedReader r1=new BufferedReader(new InputStreamReader(out));
      BufferedReader r2=new BufferedReader(new InputStreamReader(err));
      String line;
      outer:       for (      BufferedReader r : new BufferedReader[]{r1,r2}) {
        while (null != (line=r.readLine())) {
          listener.getLogger().println(line);
        }
      }
    }
  finally {
      out.close();
      err.close();
    }
  }
  finally {
    session.close();
  }
}","private void reportEnvironment(StreamTaskListener listener) throws IOException {
  listener.getLogger().println(Messages._SSHLauncher_RemoteUserEnvironment(getTimestamp()));
  Session session=connection.openSession();
  try {
    session.execCommand(""String_Node_Str"");
    StreamGobbler out=new StreamGobbler(session.getStdout());
    StreamGobbler err=new StreamGobbler(session.getStderr());
    try {
      BufferedReader r1=new BufferedReader(new InputStreamReader(out));
      BufferedReader r2=new BufferedReader(new InputStreamReader(err));
      String line;
      outer:       for (      BufferedReader r : new BufferedReader[]{r1,r2}) {
        while (null != (line=r.readLine())) {
          listener.getLogger().println(line);
        }
      }
    }
  finally {
      out.close();
      err.close();
      listener.getLogger().println();
    }
  }
  finally {
    session.close();
  }
}",0.9214157168566288
153912,"/** 
 * Starts the slave process.
 * @param computer         The computer.
 * @param listener         The listener.
 * @param java             The full path name of the java executable to use.
 * @param workingDirectory The working directory from which to start the java process.
 * @throws IOException If something goes wrong.
 */
private void startSlave(SlaveComputer computer,final StreamTaskListener listener,String java,String workingDirectory) throws IOException {
  final Session session=connection.openSession();
  session.execCommand(""String_Node_Str"" + workingDirectory + ""String_Node_Str""+ java+ (jvmOptions == null ? ""String_Node_Str"" : ""String_Node_Str"" + jvmOptions)+ ""String_Node_Str"");
  final StreamGobbler out=new StreamGobbler(session.getStdout());
  final StreamGobbler err=new StreamGobbler(session.getStderr());
  new StreamCopyThread(""String_Node_Str"" + computer.getDisplayName(),err,listener.getLogger()).start();
  try {
    computer.setChannel(out,session.getStdin(),listener.getLogger(),new Channel.Listener(){
      public void onClosed(      Channel channel,      IOException cause){
        if (cause != null) {
          cause.printStackTrace(listener.error(hudson.model.Messages.Slave_Terminated(getTimestamp())));
        }
        try {
          session.close();
        }
 catch (        Throwable t) {
          t.printStackTrace(listener.error(Messages.SSHLauncher_ErrorWhileClosingConnection()));
        }
        try {
          out.close();
        }
 catch (        Throwable t) {
          t.printStackTrace(listener.error(Messages.SSHLauncher_ErrorWhileClosingConnection()));
        }
        try {
          err.close();
        }
 catch (        Throwable t) {
          t.printStackTrace(listener.error(Messages.SSHLauncher_ErrorWhileClosingConnection()));
        }
      }
    }
);
  }
 catch (  InterruptedException e) {
    session.close();
    throw new IOException2(Messages.SSHLauncher_AbortedDuringConnectionOpen(),e);
  }
}","/** 
 * Starts the slave process.
 * @param computer         The computer.
 * @param listener         The listener.
 * @param java             The full path name of the java executable to use.
 * @param workingDirectory The working directory from which to start the java process.
 * @throws IOException If something goes wrong.
 */
private void startSlave(SlaveComputer computer,final StreamTaskListener listener,String java,String workingDirectory) throws IOException {
  final Session session=connection.openSession();
  String cmd=""String_Node_Str"" + workingDirectory + ""String_Node_Str""+ java+ (jvmOptions == null ? ""String_Node_Str"" : ""String_Node_Str"" + jvmOptions)+ ""String_Node_Str"";
  listener.getLogger().println(Messages.SSHLauncher_StartingSlaveProcess(getTimestamp(),cmd));
  session.execCommand(cmd);
  final StreamGobbler out=new StreamGobbler(session.getStdout());
  final StreamGobbler err=new StreamGobbler(session.getStderr());
  new StreamCopyThread(""String_Node_Str"" + computer.getDisplayName(),err,listener.getLogger()).start();
  try {
    computer.setChannel(out,session.getStdin(),listener.getLogger(),new Channel.Listener(){
      public void onClosed(      Channel channel,      IOException cause){
        if (cause != null) {
          cause.printStackTrace(listener.error(hudson.model.Messages.Slave_Terminated(getTimestamp())));
        }
        try {
          session.close();
        }
 catch (        Throwable t) {
          t.printStackTrace(listener.error(Messages.SSHLauncher_ErrorWhileClosingConnection()));
        }
        try {
          out.close();
        }
 catch (        Throwable t) {
          t.printStackTrace(listener.error(Messages.SSHLauncher_ErrorWhileClosingConnection()));
        }
        try {
          err.close();
        }
 catch (        Throwable t) {
          t.printStackTrace(listener.error(Messages.SSHLauncher_ErrorWhileClosingConnection()));
        }
      }
    }
);
  }
 catch (  InterruptedException e) {
    session.close();
    throw new IOException2(Messages.SSHLauncher_AbortedDuringConnectionOpen(),e);
  }
}",0.9624539877300612
153913,"private String checkJavaVersion(StreamTaskListener listener,String javaCommand) throws IOException {
  listener.getLogger().println(Messages.SSHLauncher_CheckingDefaultJava(getTimestamp()));
  String line=null;
  Session session=connection.openSession();
  try {
    session.execCommand(javaCommand + ""String_Node_Str"");
    StreamGobbler out=new StreamGobbler(session.getStdout());
    StreamGobbler err=new StreamGobbler(session.getStderr());
    try {
      BufferedReader r1=new BufferedReader(new InputStreamReader(out));
      BufferedReader r2=new BufferedReader(new InputStreamReader(err));
      outer:       for (      BufferedReader r : new BufferedReader[]{r1,r2}) {
        while (null != (line=r.readLine())) {
          if (line.startsWith(""String_Node_Str"")) {
            break outer;
          }
        }
      }
    }
  finally {
      out.close();
      err.close();
    }
  }
  finally {
    session.close();
  }
  if (line == null || !line.startsWith(""String_Node_Str"")) {
    throw new IOException(""String_Node_Str"");
  }
  line=line.substring(line.indexOf('\""') + 1,line.lastIndexOf('\""'));
  listener.getLogger().println(Messages.SSHLauncher_JavaVersionResult(getTimestamp(),java,line));
  if (line.compareTo(""String_Node_Str"") < 0) {
    throw new IOException(Messages.SSHLauncher_NoJavaFound());
  }
  return javaCommand;
}","private String checkJavaVersion(StreamTaskListener listener,String javaCommand) throws IOException {
  listener.getLogger().println(Messages.SSHLauncher_CheckingDefaultJava(getTimestamp()));
  String line=null;
  Session session=connection.openSession();
  try {
    session.execCommand(javaCommand + ""String_Node_Str"");
    StreamGobbler out=new StreamGobbler(session.getStdout());
    StreamGobbler err=new StreamGobbler(session.getStderr());
    try {
      BufferedReader r1=new BufferedReader(new InputStreamReader(out));
      BufferedReader r2=new BufferedReader(new InputStreamReader(err));
      outer:       for (      BufferedReader r : new BufferedReader[]{r1,r2}) {
        while (null != (line=r.readLine())) {
          if (line.startsWith(""String_Node_Str"")) {
            break outer;
          }
        }
      }
    }
  finally {
      out.close();
      err.close();
    }
  }
  finally {
    session.close();
  }
  if (line == null || !line.startsWith(""String_Node_Str"")) {
    throw new IOException(""String_Node_Str"");
  }
  line=line.substring(line.indexOf('\""') + 1,line.lastIndexOf('\""'));
  listener.getLogger().println(Messages.SSHLauncher_JavaVersionResult(getTimestamp(),javaCommand,line));
  if (line.compareTo(""String_Node_Str"") < 0) {
    throw new IOException(Messages.SSHLauncher_NoJavaFound());
  }
  return javaCommand;
}",0.9974160206718348
153914,"/** 
 * Instantiates a new close frame.
 */
public CloseFrame(){
  FrameHeader header=FrameBuilderRfc6455.createFrameHeader(null,false,Opcode.CONNECTION_CLOSE);
  setHeader(header);
}","/** 
 * Instantiates a new close frame.
 */
public CloseFrame(){
  FrameHeader header=FrameBuilderRfc6455.createFrameHeader(0,false,Opcode.CONNECTION_CLOSE);
  setHeader(header);
}",0.9862258953168044
153915,"/** 
 * Instantiates a new ping frame.
 */
public PingFrame(){
  FrameHeader header=FrameBuilderRfc6455.createFrameHeader(null,false,Opcode.PING);
  setHeader(header);
}","/** 
 * Instantiates a new ping frame.
 */
public PingFrame(){
  FrameHeader header=FrameBuilderRfc6455.createFrameHeader(0,false,Opcode.PING);
  setHeader(header);
}",0.9850746268656716
153916,"/** 
 * Instantiates a new pong frame.
 */
public PongFrame(){
  FrameHeader header=FrameBuilderRfc6455.createFrameHeader(null,false,Opcode.PONG);
  setHeader(header);
}","/** 
 * Instantiates a new pong frame.
 */
public PongFrame(){
  FrameHeader header=FrameBuilderRfc6455.createFrameHeader(0,false,Opcode.PONG);
  setHeader(header);
}",0.9850746268656716
153917,"@Override protected void closeWebSocket() throws WebSocketException {
  pipeline.sendUpstream(this,null,new CloseFrame());
  transitionTo(State.CLOSING);
}","@Override protected void closeWebSocket() throws WebSocketException {
  transitionTo(State.CLOSING);
  pipeline.sendUpstream(this,null,new CloseFrame());
}",0.8
153918,"@Override protected void closeWebSocket() throws WebSocketException {
  pipeline.sendUpstream(this,null,new CloseFrame());
  transitionTo(State.CLOSING);
}","@Override protected void closeWebSocket() throws WebSocketException {
  transitionTo(State.CLOSING);
  pipeline.sendUpstream(this,null,new CloseFrame());
}",0.8
153919,"/** 
 * Gets the response header map.
 * @return the response header map
 */
public HttpHeader getResponseHeader(){
  if (isDone()) {
    return httpResponseHeaderParser.getResponseHeader();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Gets the response header map.
 * @return the response header map
 */
public HttpHeader getResponseHeader(){
  return httpResponseHeaderParser.getResponseHeader();
}",0.7889908256880734
153920,"/** 
 * Gets the response status.
 * @return the response status
 */
public int getResponseStatus(){
  if (isDone()) {
    return responseStatus;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Gets the response status.
 * @return the response status
 */
public int getResponseStatus(){
  return responseStatus;
}",0.7341040462427746
153921,"/** 
 * Gets the response header map.
 * @return the response header map
 */
public HttpHeader getResponseHeader(){
  if (isDone()) {
    return httpResponseHeaderParser.getResponseHeader();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Gets the response header map.
 * @return the response header map
 */
public HttpHeader getResponseHeader(){
  return httpResponseHeaderParser.getResponseHeader();
}",0.7889908256880734
153922,"/** 
 * Gets the response status.
 * @return the response status
 */
public int getResponseStatus(){
  if (isDone()) {
    return responseStatus;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Gets the response status.
 * @return the response status
 */
public int getResponseStatus(){
  return responseStatus;
}",0.7341040462427746
153923,"public void run(){
  try {
    while (!quit) {
      selector.select(connectionReadTimeout);
      for (      SelectionKey key : selector.selectedKeys()) {
        if (key.isValid() && key.isWritable() && upstreamQueue.peek() != null) {
          SocketChannel channel=(SocketChannel)key.channel();
          channel.write(upstreamQueue.poll());
        }
 else         if (key.isValid() && key.isReadable()) {
          read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
            pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
          if (getHandshake().isDone()) {
            if (downstreamBuffer.hasRemaining()) {
              processBuffer(downstreamBuffer);
            }
          }
        break;
case WAIT:
      processBuffer(downstreamBuffer);
    break;
case CLOSED:
  break;
}
}
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3000,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}","public void run(){
  try {
    while (!quit) {
      selector.select(connectionReadTimeout);
      for (      SelectionKey key : selector.selectedKeys()) {
        if (key.isValid() && key.isWritable() && upstreamQueue.peek() != null) {
          SocketChannel channel=(SocketChannel)key.channel();
          channel.write(upstreamQueue.poll());
        }
 else         if (key.isValid() && key.isReadable()) {
          read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
            pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
          if (getHandshake().isDone()) {
            if (downstreamBuffer.hasRemaining()) {
              processBuffer(downstreamBuffer);
            }
          }
        break;
case WAIT:
      processBuffer(downstreamBuffer);
    break;
case CLOSED:
  break;
}
}
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3043,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}",0.9982300884955752
153924,"public void nextHandshakeUpstreamHandler(WebSocket ws,ByteBuffer buffer,StreamHandlerChain chain) throws WebSocketException {
  try {
    upstreamQueue.put(buffer);
  }
 catch (  InterruptedException e) {
    throw new WebSocketException(3012,e);
  }
}","public void nextHandshakeUpstreamHandler(WebSocket ws,ByteBuffer buffer,StreamHandlerChain chain) throws WebSocketException {
  if (!upstreamQueue.offer(buffer)) {
    throw new WebSocketException(3031,""String_Node_Str"");
  }
}",0.6847599164926931
153925,"public void connect() throws WebSocketException {
  try {
    if (!state.canTransitionTo(State.CONNECTED)) {
      throw new WebSocketException(3000,""String_Node_Str"" + state);
    }
    URI proxyUri=new URI(""String_Node_Str"",null,location.getHost(),location.getPort(),null,null,null);
    List<Proxy> proxyList=ProxySelector.getDefault().select(proxyUri);
    proxyList.get(0).address();
    socket=SocketChannel.open();
    socket.configureBlocking(false);
    selector=Selector.open();
    socket.register(selector,OP_READ | OP_WRITE);
    long start=System.currentTimeMillis();
    if (socket.connect(endpoint)) {
      throw new WebSocketException(3000,""String_Node_Str"");
    }
    while (!socket.finishConnect()) {
      if ((System.currentTimeMillis() - start) > connectionTimeout) {
        throw new WebSocketException(3004,""String_Node_Str"");
      }
    }
    transitionTo(State.CONNECTED);
    pipeline.sendHandshakeUpstream(this,null);
    socket.write(upstreamQueue.take());
    transitionTo(State.HANDSHAKE);
    Runnable worker=new Runnable(){
      public void run(){
        try {
          while (!quit) {
            selector.select(connectionReadTimeout);
            for (            SelectionKey key : selector.selectedKeys()) {
              if (key.isValid() && key.isWritable() && upstreamQueue.peek() != null) {
                SocketChannel channel=(SocketChannel)key.channel();
                channel.write(upstreamQueue.poll());
              }
 else               if (key.isValid() && key.isReadable()) {
                read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
                  pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
                if (getHandshake().isDone()) {
                  if (downstreamBuffer.hasRemaining()) {
                    processBuffer(downstreamBuffer);
                  }
                }
              break;
case WAIT:
            processBuffer(downstreamBuffer);
          break;
case CLOSED:
        break;
    }
  }
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3000,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}
}
;
quit=false;
if (blockingMode) {
worker.run();
}
 else {
ExecutorService executorService=Executors.newCachedThreadPool();
executorService.submit(worker);
}
}
 catch (WebSocketException we) {
handler.onError(this,we);
}
catch (Exception e) {
handler.onError(this,new WebSocketException(3100,e));
}
}","public void connect() throws WebSocketException {
  try {
    if (!state.canTransitionTo(State.CONNECTED)) {
      throw new WebSocketException(3040,""String_Node_Str"" + state);
    }
    URI proxyUri=new URI(""String_Node_Str"",null,location.getHost(),location.getPort(),null,null,null);
    List<Proxy> proxyList=ProxySelector.getDefault().select(proxyUri);
    proxyList.get(0).address();
    socket=SocketChannel.open();
    socket.configureBlocking(false);
    selector=Selector.open();
    socket.register(selector,OP_READ | OP_WRITE);
    long start=System.currentTimeMillis();
    if (socket.connect(endpoint)) {
      throw new WebSocketException(3041,""String_Node_Str"");
    }
    while (!socket.finishConnect()) {
      if ((System.currentTimeMillis() - start) > connectionTimeout) {
        throw new WebSocketException(3042,""String_Node_Str"");
      }
    }
    transitionTo(State.CONNECTED);
    pipeline.sendHandshakeUpstream(this,null);
    socket.write(upstreamQueue.take());
    transitionTo(State.HANDSHAKE);
    Runnable worker=new Runnable(){
      public void run(){
        try {
          while (!quit) {
            selector.select(connectionReadTimeout);
            for (            SelectionKey key : selector.selectedKeys()) {
              if (key.isValid() && key.isWritable() && upstreamQueue.peek() != null) {
                SocketChannel channel=(SocketChannel)key.channel();
                channel.write(upstreamQueue.poll());
              }
 else               if (key.isValid() && key.isReadable()) {
                read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
                  pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
                if (getHandshake().isDone()) {
                  if (downstreamBuffer.hasRemaining()) {
                    processBuffer(downstreamBuffer);
                  }
                }
              break;
case WAIT:
            processBuffer(downstreamBuffer);
          break;
case CLOSED:
        break;
    }
  }
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3043,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}
}
;
quit=false;
if (blockingMode) {
worker.run();
}
 else {
ExecutorService executorService=Executors.newCachedThreadPool();
executorService.submit(worker);
}
}
 catch (WebSocketException we) {
handler.onError(this,we);
}
catch (Exception e) {
handler.onError(this,new WebSocketException(3044,e));
}
}",0.9969593310528316
153926,"public void nextUpstreamHandler(WebSocket ws,ByteBuffer buffer,Frame frame,StreamHandlerChain chain) throws WebSocketException {
  try {
    upstreamQueue.put(buffer);
    selector.wakeup();
  }
 catch (  InterruptedException e) {
    throw new WebSocketException(3011,e);
  }
}","public void nextUpstreamHandler(WebSocket ws,ByteBuffer buffer,Frame frame,StreamHandlerChain chain) throws WebSocketException {
  if (!upstreamQueue.offer(buffer)) {
    throw new WebSocketException(3030,""String_Node_Str"");
  }
  selector.wakeup();
}",0.5973534971644613
153927,"protected void read(SocketChannel socket,ByteBuffer buffer) throws WebSocketException {
  try {
    buffer.clear();
    if (socket.read(buffer) < 0) {
      throw new WebSocketException(3001,""String_Node_Str"");
    }
    buffer.flip();
  }
 catch (  IOException ioe) {
    throw new WebSocketException(3002,""String_Node_Str"",ioe);
  }
}","protected void read(SocketChannel socket,ByteBuffer buffer) throws WebSocketException {
  try {
    buffer.clear();
    if (socket.read(buffer) < 0) {
      throw new WebSocketException(3020,""String_Node_Str"");
    }
    buffer.flip();
  }
 catch (  IOException ioe) {
    throw new WebSocketException(3021,""String_Node_Str"",ioe);
  }
}",0.9940476190476192
153928,"public WebSocketBase(String url,WebSocketHandler handler,String... protocols) throws URISyntaxException, IOException {
  this.protocols=protocols;
  this.handler=handler;
  this.origin=System.getProperty(""String_Node_Str"");
  int downstreamBufferSize=Integer.getInteger(""String_Node_Str"",8192);
  this.downstreamBuffer=ByteBuffer.allocate(downstreamBufferSize);
  this.packatdumpMode=Integer.getInteger(""String_Node_Str"",0);
  parseUrl(url);
  this.pipeline=new WebSocketPipeline();
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      try {
        upstreamQueue.put(buffer);
        selector.wakeup();
      }
 catch (      InterruptedException e) {
        throw new WebSocketException(3011,e);
      }
    }
    public void nextHandshakeUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      try {
        upstreamQueue.put(buffer);
      }
 catch (      InterruptedException e) {
        throw new WebSocketException(3012,e);
      }
    }
  }
);
  if (packatdumpMode > 0) {
    this.pipeline.addStreamHandler(new PacketDumpStreamHandler(packatdumpMode));
  }
  initializePipeline(pipeline);
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      WebSocketBase.this.handler.onMessage(ws,frame);
    }
    public void nextHandshakeDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      responseHeaderMap=getHandshake().getResponseHeaderMap();
      responseStatus=getHandshake().getResponseStatus();
      transitionTo(State.WAIT);
      WebSocketBase.this.handler.onOpen(WebSocketBase.this);
    }
  }
);
}","public WebSocketBase(String url,WebSocketHandler handler,String... protocols) throws WebSocketException {
  this.protocols=protocols;
  this.handler=handler;
  this.origin=System.getProperty(""String_Node_Str"");
  int downstreamBufferSize=Integer.getInteger(""String_Node_Str"",0x7FFF);
  int upstreamQueueSize=Integer.getInteger(""String_Node_Str"",500);
  this.upstreamQueue=new LinkedBlockingQueue<ByteBuffer>(upstreamQueueSize);
  this.downstreamBuffer=ByteBuffer.allocate(downstreamBufferSize);
  int packatdumpMode=Integer.getInteger(""String_Node_Str"",0);
  parseUrl(url);
  this.pipeline=new WebSocketPipeline();
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      if (!upstreamQueue.offer(buffer)) {
        throw new WebSocketException(3030,""String_Node_Str"");
      }
      selector.wakeup();
    }
    public void nextHandshakeUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      if (!upstreamQueue.offer(buffer)) {
        throw new WebSocketException(3031,""String_Node_Str"");
      }
    }
  }
);
  if (packatdumpMode > 0) {
    this.pipeline.addStreamHandler(new PacketDumpStreamHandler(packatdumpMode));
  }
  initializePipeline(pipeline);
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      WebSocketBase.this.handler.onMessage(ws,frame);
    }
    public void nextHandshakeDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      responseHeaderMap=getHandshake().getResponseHeaderMap();
      responseStatus=getHandshake().getResponseStatus();
      transitionTo(State.WAIT);
      WebSocketBase.this.handler.onOpen(WebSocketBase.this);
    }
  }
);
}",0.7639097744360902
153929,"private void parseUrl(String urlStr) throws URISyntaxException {
  URI uri=new URI(urlStr);
  if (!(uri.getScheme().equals(""String_Node_Str"") || uri.getScheme().equals(""String_Node_Str""))) {
    throw new IllegalArgumentException(""String_Node_Str"" + uri.toString());
  }
  path=uri.getPath();
  int port=uri.getPort();
  if (port < 0) {
    if (uri.getScheme().equals(""String_Node_Str"")) {
      port=80;
    }
 else     if (uri.getScheme().equals(""String_Node_Str"")) {
      port=443;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + uri.toString());
    }
  }
  endpoint=new InetSocketAddress(uri.getHost(),port);
  location=uri;
}","private void parseUrl(String urlStr) throws WebSocketException {
  try {
    URI uri=new URI(urlStr);
    if (!(uri.getScheme().equals(""String_Node_Str"") || uri.getScheme().equals(""String_Node_Str""))) {
      throw new WebSocketException(3007,""String_Node_Str"" + uri.toString());
    }
    path=uri.getPath();
    int port=uri.getPort();
    if (port < 0) {
      if (uri.getScheme().equals(""String_Node_Str"")) {
        port=80;
      }
 else       if (uri.getScheme().equals(""String_Node_Str"")) {
        port=443;
      }
 else {
        throw new WebSocketException(3008,""String_Node_Str"" + uri.toString());
      }
    }
    endpoint=new InetSocketAddress(uri.getHost(),port);
    location=uri;
  }
 catch (  URISyntaxException e) {
    throw new WebSocketException(3009,e);
  }
}",0.7894736842105263
153930,"/** 
 * check handshake response server => client HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= Sec-WebSocket-Protocol: chat
 * @param buffer
 */
@Override protected boolean parseHandshakeResponseHeader(ByteBuffer buffer) throws WebSocketException {
  if (!super.parseHandshakeResponseHeader(buffer)) {
    return false;
  }
  if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
    throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
    throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  if (!responseHeaderMap.containsKey(""String_Node_Str"")) {
    throw new WebSocketException(3101,""String_Node_Str"");
  }
  String protocolStr=responseHeaderMap.get(""String_Node_Str"");
  if (protocolStr != null) {
    serverProtocols=protocolStr.split(""String_Node_Str"");
  }
  String extensionsStr=responseHeaderMap.get(""String_Node_Str"");
  if (extensionsStr != null) {
    serverExtentions=extensionsStr.split(""String_Node_Str"");
  }
  return true;
}","/** 
 * check handshake response <pre> server => client HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= Sec-WebSocket-Protocol: chat </pre>
 * @param buffer
 */
@Override protected boolean parseHandshakeResponseHeader(ByteBuffer buffer) throws WebSocketException {
  if (!super.parseHandshakeResponseHeader(buffer)) {
    return false;
  }
  if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
    throw new WebSocketException(3600,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
    throw new WebSocketException(3601,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  if (!responseHeaderMap.containsKey(""String_Node_Str"")) {
    throw new WebSocketException(3602,""String_Node_Str"");
  }
  String protocolStr=responseHeaderMap.get(""String_Node_Str"");
  if (protocolStr != null) {
    serverProtocols=protocolStr.split(""String_Node_Str"");
  }
  String extensionsStr=responseHeaderMap.get(""String_Node_Str"");
  if (extensionsStr != null) {
    serverExtentions=extensionsStr.split(""String_Node_Str"");
  }
  return true;
}",0.6002410606669345
153931,"@Override protected Handshake newHandshakeInstance(){
  return new Handshake(){
    /** 
 * Create a handshake requtest Sample (Draft06) client => server GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version:6
 * @param socket
 */
    @Override public ByteBuffer createHandshakeRequest() throws WebSocketException {
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",endpoint.getHostName());
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",generateWebSocketKey());
      if (origin != null) {
        addHeader(sb,""String_Node_Str"",origin);
      }
      if (protocols != null && protocols.length > 0) {
        addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
      }
      if (extensions.size() > 0) {
        addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",extensions));
      }
      addHeader(sb,""String_Node_Str"",String.valueOf(getWebSocketVersion()));
      sb.append(""String_Node_Str"");
      return ByteBuffer.wrap(sb.toString().getBytes());
    }
    /** 
 * check handshake response server => client HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= Sec-WebSocket-Protocol: chat
 * @param buffer
 */
    @Override protected boolean parseHandshakeResponseHeader(    ByteBuffer buffer) throws WebSocketException {
      if (!super.parseHandshakeResponseHeader(buffer)) {
        return false;
      }
      if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
        throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
        throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      if (!responseHeaderMap.containsKey(""String_Node_Str"")) {
        throw new WebSocketException(3101,""String_Node_Str"");
      }
      String protocolStr=responseHeaderMap.get(""String_Node_Str"");
      if (protocolStr != null) {
        serverProtocols=protocolStr.split(""String_Node_Str"");
      }
      String extensionsStr=responseHeaderMap.get(""String_Node_Str"");
      if (extensionsStr != null) {
        serverExtentions=extensionsStr.split(""String_Node_Str"");
      }
      return true;
    }
  }
;
}","@Override protected Handshake newHandshakeInstance(){
  return new Handshake(){
    /** 
 * Create a handshake requtest <pre> Sample (Draft06) client => server GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version:6 </pre>
 * @param socket
 */
    @Override public ByteBuffer createHandshakeRequest() throws WebSocketException {
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",endpoint.getHostName());
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",generateWebSocketKey());
      if (origin != null) {
        addHeader(sb,""String_Node_Str"",origin);
      }
      if (protocols != null && protocols.length > 0) {
        addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
      }
      if (extensions.size() > 0) {
        addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",extensions));
      }
      addHeader(sb,""String_Node_Str"",String.valueOf(getWebSocketVersion()));
      sb.append(""String_Node_Str"");
      return ByteBuffer.wrap(sb.toString().getBytes());
    }
    /** 
 * check handshake response <pre> server => client HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= Sec-WebSocket-Protocol: chat </pre>
 * @param buffer
 */
    @Override protected boolean parseHandshakeResponseHeader(    ByteBuffer buffer) throws WebSocketException {
      if (!super.parseHandshakeResponseHeader(buffer)) {
        return false;
      }
      if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
        throw new WebSocketException(3600,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      if (!""String_Node_Str"".equalsIgnoreCase(responseHeaderMap.get(""String_Node_Str""))) {
        throw new WebSocketException(3601,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      if (!responseHeaderMap.containsKey(""String_Node_Str"")) {
        throw new WebSocketException(3602,""String_Node_Str"");
      }
      String protocolStr=responseHeaderMap.get(""String_Node_Str"");
      if (protocolStr != null) {
        serverProtocols=protocolStr.split(""String_Node_Str"");
      }
      String extensionsStr=responseHeaderMap.get(""String_Node_Str"");
      if (extensionsStr != null) {
        serverExtentions=extensionsStr.split(""String_Node_Str"");
      }
      return true;
    }
  }
;
}",0.801622418879056
153932,"/** 
 * Create a handshake requtest Sample (Draft06) client => server GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version:6
 * @param socket
 */
@Override public ByteBuffer createHandshakeRequest() throws WebSocketException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",endpoint.getHostName());
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",generateWebSocketKey());
  if (origin != null) {
    addHeader(sb,""String_Node_Str"",origin);
  }
  if (protocols != null && protocols.length > 0) {
    addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
  }
  if (extensions.size() > 0) {
    addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",extensions));
  }
  addHeader(sb,""String_Node_Str"",String.valueOf(getWebSocketVersion()));
  sb.append(""String_Node_Str"");
  return ByteBuffer.wrap(sb.toString().getBytes());
}","/** 
 * Create a handshake requtest <pre> Sample (Draft06) client => server GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version:6 </pre>
 * @param socket
 */
@Override public ByteBuffer createHandshakeRequest() throws WebSocketException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",endpoint.getHostName());
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",generateWebSocketKey());
  if (origin != null) {
    addHeader(sb,""String_Node_Str"",origin);
  }
  if (protocols != null && protocols.length > 0) {
    addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
  }
  if (extensions.size() > 0) {
    addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",extensions));
  }
  addHeader(sb,""String_Node_Str"",String.valueOf(getWebSocketVersion()));
  sb.append(""String_Node_Str"");
  return ByteBuffer.wrap(sb.toString().getBytes());
}",0.9945583926329008
153933,"public WebSocketDraft06(String url,WebSocketHandler handler,String... protocols) throws URISyntaxException, IOException {
  super(url,handler,protocols);
  this.origin=System.getProperty(""String_Node_Str"");
}","public WebSocketDraft06(String url,WebSocketHandler handler,String... protocols) throws WebSocketException {
  super(url,handler,protocols);
}",0.7714285714285715
153934,"/** 
 * check handshake response server => client HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa-
 * @param buffer
 */
@Override protected boolean parseHandshakeResponseHeader(ByteBuffer buffer) throws WebSocketException {
  if (!super.parseHandshakeResponseHeader(buffer)) {
    return false;
  }
  if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
    throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
    throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  String serverOrigin=this.getResponseHeaderMap().get(""String_Node_Str"");
  if (origin != null && serverOrigin != null && !serverOrigin.equals(origin)) {
    throw new WebSocketException(3101,""String_Node_Str"" + origin + ""String_Node_Str""+ serverOrigin);
  }
  String serverLocation=this.getResponseHeaderMap().get(""String_Node_Str"");
  try {
    URI uri=new URI(location.getScheme(),location.getHost(),location.getPath(),location.getFragment());
    if (serverLocation != null && !serverLocation.equals(uri.toString())) {
      throw new WebSocketException(3101,""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ serverLocation);
    }
  }
 catch (  URISyntaxException e) {
    ;
  }
  String protocolStr=this.getResponseHeaderMap().get(""String_Node_Str"");
  if (protocolStr != null) {
    serverProtocols=protocolStr.split(""String_Node_Str"");
  }
  return true;
}","/** 
 * check handshake response <pre> server => client HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>
 * @param buffer
 */
@Override protected boolean parseHandshakeResponseHeader(ByteBuffer buffer) throws WebSocketException {
  if (!super.parseHandshakeResponseHeader(buffer)) {
    return false;
  }
  if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
    throw new WebSocketException(3500,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
    throw new WebSocketException(3501,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
  }
  String serverOrigin=this.getResponseHeaderMap().get(""String_Node_Str"");
  if (origin != null && serverOrigin != null && !serverOrigin.equals(origin)) {
    throw new WebSocketException(3502,""String_Node_Str"" + origin + ""String_Node_Str""+ serverOrigin);
  }
  String serverLocation=this.getResponseHeaderMap().get(""String_Node_Str"");
  try {
    URI uri=new URI(location.getScheme(),location.getHost(),location.getPath(),location.getFragment());
    if (serverLocation != null && !serverLocation.equals(uri.toString())) {
      throw new WebSocketException(3503,""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ serverLocation);
    }
  }
 catch (  URISyntaxException e) {
    ;
  }
  String protocolStr=this.getResponseHeaderMap().get(""String_Node_Str"");
  if (protocolStr != null) {
    serverProtocols=protocolStr.split(""String_Node_Str"");
  }
  return true;
}",0.800458058975093
153935,"public WebSocketDraft76(String url,WebSocketHandler handler,String... protocols) throws URISyntaxException, IOException {
  super(url,handler,protocols);
  this.origin=System.getProperty(""String_Node_Str"");
}","public WebSocketDraft76(String url,WebSocketHandler handler,String... protocols) throws WebSocketException {
  super(url,handler,protocols);
}",0.7714285714285715
153936,"@Override protected Handshake newHandshakeInstance(){
  return new Handshake(){
    private ByteBuffer bodyBuf=ByteBuffer.allocate(16);
    /** 
 * Create a handshake requtest Sample (Draft76) client => server GET /demo HTTP/1.1 Host: example.com Connection: Upgrade Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 Sec-WebSocket-Protocol: sample Upgrade: WebSocket Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Origin: http://example.com ^n:ds[4U
 * @param socket
 */
    @Override public ByteBuffer createHandshakeRequest(){
      bodyBuf.clear();
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",endpoint.getHostName());
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
      addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
      if (origin != null) {
        addHeader(sb,""String_Node_Str"",origin);
      }
      if (protocols != null && protocols.length > 0) {
        addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
      }
      sb.append(""String_Node_Str"");
      ByteBuffer buf=ByteBuffer.allocate(512);
      buf.put(sb.toString().getBytes());
      buf.put(SecWebSocketKey.generateKey3());
      buf.put((byte)0xd);
      buf.put((byte)0xa);
      buf.flip();
      return buf;
    }
    /** 
 * check handshake response server => client HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa-
 * @param buffer
 */
    @Override protected boolean parseHandshakeResponseHeader(    ByteBuffer buffer) throws WebSocketException {
      if (!super.parseHandshakeResponseHeader(buffer)) {
        return false;
      }
      if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
        throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
        throw new WebSocketException(3101,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      String serverOrigin=this.getResponseHeaderMap().get(""String_Node_Str"");
      if (origin != null && serverOrigin != null && !serverOrigin.equals(origin)) {
        throw new WebSocketException(3101,""String_Node_Str"" + origin + ""String_Node_Str""+ serverOrigin);
      }
      String serverLocation=this.getResponseHeaderMap().get(""String_Node_Str"");
      try {
        URI uri=new URI(location.getScheme(),location.getHost(),location.getPath(),location.getFragment());
        if (serverLocation != null && !serverLocation.equals(uri.toString())) {
          throw new WebSocketException(3101,""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ serverLocation);
        }
      }
 catch (      URISyntaxException e) {
        ;
      }
      String protocolStr=this.getResponseHeaderMap().get(""String_Node_Str"");
      if (protocolStr != null) {
        serverProtocols=protocolStr.split(""String_Node_Str"");
      }
      return true;
    }
    @Override protected boolean parseHandshakeResponseBody(    ByteBuffer buffer) throws WebSocketException {
      if (!super.parseHandshakeResponseBody(buffer)) {
        return false;
      }
      if (buffer.remaining() < bodyBuf.capacity()) {
        return false;
      }
      buffer.get(bodyBuf.array(),0,bodyBuf.capacity());
      return true;
    }
  }
;
}","@Override protected Handshake newHandshakeInstance(){
  return new Handshake(){
    private ByteBuffer bodyBuf=ByteBuffer.allocate(16);
    /** 
 * Create a handshake requtest <pre> Sample (Draft76) client => server GET /demo HTTP/1.1 Host: example.com Connection: Upgrade Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 Sec-WebSocket-Protocol: sample Upgrade: WebSocket Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Origin: http://example.com ^n:ds[4U </pre>
 * @param socket
 */
    @Override public ByteBuffer createHandshakeRequest(){
      bodyBuf.clear();
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",endpoint.getHostName());
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",""String_Node_Str"");
      addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
      addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
      if (origin != null) {
        addHeader(sb,""String_Node_Str"",origin);
      }
      if (protocols != null && protocols.length > 0) {
        addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
      }
      sb.append(""String_Node_Str"");
      ByteBuffer buf=ByteBuffer.allocate(512);
      buf.put(sb.toString().getBytes());
      buf.put(SecWebSocketKey.generateKey3());
      buf.put((byte)0xd);
      buf.put((byte)0xa);
      buf.flip();
      return buf;
    }
    /** 
 * check handshake response <pre> server => client HTTP/1.1 101 WebSocket Protocol Handshake Upgrade: WebSocket Connection: Upgrade Sec-WebSocket-Origin: http://example.com Sec-WebSocket-Location: ws://example.com/demo Sec-WebSocket-Protocol: sample 8jKS'y:G*Co,Wxa- </pre>
 * @param buffer
 */
    @Override protected boolean parseHandshakeResponseHeader(    ByteBuffer buffer) throws WebSocketException {
      if (!super.parseHandshakeResponseHeader(buffer)) {
        return false;
      }
      if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
        throw new WebSocketException(3500,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      if (!""String_Node_Str"".equalsIgnoreCase(this.getResponseHeaderMap().get(""String_Node_Str""))) {
        throw new WebSocketException(3501,""String_Node_Str"" + responseHeaderMap.get(""String_Node_Str""));
      }
      String serverOrigin=this.getResponseHeaderMap().get(""String_Node_Str"");
      if (origin != null && serverOrigin != null && !serverOrigin.equals(origin)) {
        throw new WebSocketException(3502,""String_Node_Str"" + origin + ""String_Node_Str""+ serverOrigin);
      }
      String serverLocation=this.getResponseHeaderMap().get(""String_Node_Str"");
      try {
        URI uri=new URI(location.getScheme(),location.getHost(),location.getPath(),location.getFragment());
        if (serverLocation != null && !serverLocation.equals(uri.toString())) {
          throw new WebSocketException(3503,""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ serverLocation);
        }
      }
 catch (      URISyntaxException e) {
        ;
      }
      String protocolStr=this.getResponseHeaderMap().get(""String_Node_Str"");
      if (protocolStr != null) {
        serverProtocols=protocolStr.split(""String_Node_Str"");
      }
      return true;
    }
    @Override protected boolean parseHandshakeResponseBody(    ByteBuffer buffer) throws WebSocketException {
      if (!super.parseHandshakeResponseBody(buffer)) {
        return false;
      }
      if (buffer.remaining() < bodyBuf.capacity()) {
        return false;
      }
      buffer.get(bodyBuf.array(),0,bodyBuf.capacity());
      return true;
    }
  }
;
}",0.8984015172040097
153937,"/** 
 * Create a handshake requtest Sample (Draft76) client => server GET /demo HTTP/1.1 Host: example.com Connection: Upgrade Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 Sec-WebSocket-Protocol: sample Upgrade: WebSocket Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Origin: http://example.com ^n:ds[4U
 * @param socket
 */
@Override public ByteBuffer createHandshakeRequest(){
  bodyBuf.clear();
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",endpoint.getHostName());
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
  addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
  if (origin != null) {
    addHeader(sb,""String_Node_Str"",origin);
  }
  if (protocols != null && protocols.length > 0) {
    addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
  }
  sb.append(""String_Node_Str"");
  ByteBuffer buf=ByteBuffer.allocate(512);
  buf.put(sb.toString().getBytes());
  buf.put(SecWebSocketKey.generateKey3());
  buf.put((byte)0xd);
  buf.put((byte)0xa);
  buf.flip();
  return buf;
}","/** 
 * Create a handshake requtest <pre> Sample (Draft76) client => server GET /demo HTTP/1.1 Host: example.com Connection: Upgrade Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 Sec-WebSocket-Protocol: sample Upgrade: WebSocket Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Origin: http://example.com ^n:ds[4U </pre>
 * @param socket
 */
@Override public ByteBuffer createHandshakeRequest(){
  bodyBuf.clear();
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + path + ""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",endpoint.getHostName());
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",""String_Node_Str"");
  addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
  addHeader(sb,""String_Node_Str"",SecWebSocketKey.generateKey());
  if (origin != null) {
    addHeader(sb,""String_Node_Str"",origin);
  }
  if (protocols != null && protocols.length > 0) {
    addHeader(sb,""String_Node_Str"",join(""String_Node_Str"",protocols));
  }
  sb.append(""String_Node_Str"");
  ByteBuffer buf=ByteBuffer.allocate(512);
  buf.put(sb.toString().getBytes());
  buf.put(SecWebSocketKey.generateKey3());
  buf.put((byte)0xd);
  buf.put((byte)0xa);
  buf.flip();
  return buf;
}",0.994639175257732
153938,"protected boolean parseHandshakeResponseHeader(ByteBuffer buffer) throws WebSocketException {
  if (State.METHOD.equals(state)) {
    String line=readLine(buffer);
    if (line == null) {
      return false;
    }
    if (!line.startsWith(""String_Node_Str"")) {
      throw new WebSocketException(3001,""String_Node_Str"" + line);
    }
    responseStatus=Integer.valueOf(line.substring(9,12));
    if (responseStatus != 101) {
      throw new WebSocketException(3001,""String_Node_Str"" + line);
    }
    transitionTo(State.HEADER);
  }
  if (State.HEADER.equals(state)) {
    do {
      String line=readLine(buffer);
      if (line == null) {
        return false;
      }
      if (line.indexOf(':') > 0) {
        String[] keyValue=line.split(""String_Node_Str"",2);
        if (keyValue.length > 1) {
          responseHeaderMap.put(keyValue[0].trim().toLowerCase(),keyValue[1].trim().toLowerCase());
        }
      }
      if (""String_Node_Str"".compareTo(line) == 0) {
        return true;
      }
      if (!buffer.hasRemaining()) {
        return false;
      }
    }
 while (true);
  }
  return true;
}","protected boolean parseHandshakeResponseHeader(ByteBuffer buffer) throws WebSocketException {
  if (State.METHOD.equals(state)) {
    String line=readLine(buffer);
    if (line == null) {
      return false;
    }
    if (!line.startsWith(""String_Node_Str"")) {
      throw new WebSocketException(3101,""String_Node_Str"" + line);
    }
    responseStatus=Integer.valueOf(line.substring(9,12));
    if (responseStatus != 101) {
      throw new WebSocketException(3102,""String_Node_Str"" + line);
    }
    transitionTo(State.HEADER);
  }
  if (State.HEADER.equals(state)) {
    do {
      String line=readLine(buffer);
      if (line == null) {
        return false;
      }
      if (line.indexOf(':') > 0) {
        String[] keyValue=line.split(""String_Node_Str"",2);
        if (keyValue.length > 1) {
          responseHeaderMap.put(keyValue[0].trim().toLowerCase(),keyValue[1].trim().toLowerCase());
        }
      }
      if (""String_Node_Str"".compareTo(line) == 0) {
        return true;
      }
      if (!buffer.hasRemaining()) {
        return false;
      }
    }
 while (true);
  }
  return true;
}",0.9972875226039783
153939,"public void handshake(SocketChannel socket) throws WebSocketException {
  try {
    ByteBuffer request=createHandshakeRequest();
    socket.write(request);
  }
 catch (  IOException ioe) {
    throw new WebSocketException(3000,ioe);
  }
}","public void handshake(SocketChannel socket) throws WebSocketException {
  try {
    ByteBuffer request=createHandshakeRequest();
    socket.write(request);
  }
 catch (  IOException ioe) {
    throw new WebSocketException(3100,ioe);
  }
}",0.9957983193277312
153940,"@Override public void onError(WebSocket socket,WebSocketException e){
  log.error(""String_Node_Str"",e);
}","@Override public void onError(WebSocket socket,WebSocketException e){
  fireException(e);
}",0.8061224489795918
153941,"public static void main(String[] args) throws Exception {
  WSCSubscriber sub=new WSCSubscriber();
  sub.setLocation(""String_Node_Str"");
  sub.start();
  sub.addExceptionListener(new ExceptionListener(){
    public void onException(    ExceptionEvent e){
      e.getException().printStackTrace();
    }
  }
);
  sub.addMessageListener(new MessageListener(){
    public void onMessage(    MessageEvent e){
      Message msg=e.getMessage();
      RateBean dto=(RateBean)msg.getBody();
      System.out.println(dto.getBid());
    }
  }
);
  while (true) {
    Thread.sleep(1000);
  }
}","public static void main(String[] args) throws Exception {
  System.setProperty(""String_Node_Str"",String.valueOf(PacketDumpStreamHandler.HS_UP | PacketDumpStreamHandler.HS_DOWN | PacketDumpStreamHandler.FR_UP));
  WSCSubscriber sub=new WSCSubscriber();
  sub.setLocation(""String_Node_Str"");
  sub.setConnectionTimeout(600000);
  sub.start();
  sub.addExceptionListener(new ExceptionListener(){
    public void onException(    ExceptionEvent e){
      e.getException().printStackTrace();
    }
  }
);
  sub.addMessageListener(new MessageListener(){
    public void onMessage(    MessageEvent e){
      Message msg=e.getMessage();
      RateBean dto=(RateBean)msg.getBody();
      System.out.println(dto.getBid());
    }
  }
);
  while (true) {
    Thread.sleep(1000);
    sub.websocket.send(sub.websocket.createFrame(""String_Node_Str""));
    System.out.println(""String_Node_Str"");
  }
}",0.7939972714870396
153942,"@Override public void onClose(WebSocket websocket){
  log.debug(""String_Node_Str"");
}","@Override public void onClose(WebSocket websocket){
  fireDisconnected();
}",0.7625
153943,"@Override public void onOpen(WebSocket socket){
  log.debug(""String_Node_Str"");
}","@Override public void onOpen(WebSocket socket){
  fireConnected();
}",0.7651006711409396
153944,"public void run(){
  try {
    while (!quit) {
      selector.select(connectionReadTimeout);
      for (      SelectionKey key : selector.selectedKeys()) {
        if (key.isValid() && key.isWritable()) {
          SocketChannel channel=(SocketChannel)key.channel();
          channel.write(upstreamQueue.take());
        }
 else         if (key.isValid() && key.isReadable()) {
          read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
            pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
          if (getHandshake().isDone()) {
            if (downstreamBuffer.hasRemaining()) {
              processBuffer(downstreamBuffer);
            }
          }
        break;
case WAIT:
      processBuffer(downstreamBuffer);
    break;
case CLOSED:
  break;
}
}
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3000,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}","public void run(){
  try {
    while (!quit) {
      selector.select(connectionReadTimeout);
      for (      SelectionKey key : selector.selectedKeys()) {
        if (key.isValid() && key.isWritable() && upstreamQueue.peek() != null) {
          SocketChannel channel=(SocketChannel)key.channel();
          channel.write(upstreamQueue.poll());
        }
 else         if (key.isValid() && key.isReadable()) {
          read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
            pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
          if (getHandshake().isDone()) {
            if (downstreamBuffer.hasRemaining()) {
              processBuffer(downstreamBuffer);
            }
          }
        break;
case WAIT:
      processBuffer(downstreamBuffer);
    break;
case CLOSED:
  break;
}
}
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3000,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}",0.9012567324955116
153945,"public void connect() throws WebSocketException {
  try {
    if (!state.canTransitionTo(State.CONNECTED)) {
      throw new WebSocketException(3000,""String_Node_Str"" + state);
    }
    URI proxyUri=new URI(""String_Node_Str"",null,location.getHost(),location.getPort(),null,null,null);
    List<Proxy> proxyList=ProxySelector.getDefault().select(proxyUri);
    proxyList.get(0).address();
    socket=SocketChannel.open();
    socket.configureBlocking(false);
    selector=Selector.open();
    socket.register(selector,SelectionKey.OP_READ);
    long start=System.currentTimeMillis();
    if (socket.connect(endpoint)) {
      throw new WebSocketException(3000,""String_Node_Str"");
    }
    while (!socket.finishConnect()) {
      if ((System.currentTimeMillis() - start) > connectionTimeout) {
        throw new WebSocketException(3004,""String_Node_Str"");
      }
    }
    transitionTo(State.CONNECTED);
    socket.register(selector,SelectionKey.OP_READ);
    getHandshake().init();
    pipeline.sendHandshakeUpstream(this,null);
    socket.write(upstreamQueue.take());
    transitionTo(State.HANDSHAKE);
    Runnable worker=new Runnable(){
      public void run(){
        try {
          while (!quit) {
            selector.select(connectionReadTimeout);
            for (            SelectionKey key : selector.selectedKeys()) {
              if (key.isValid() && key.isWritable()) {
                SocketChannel channel=(SocketChannel)key.channel();
                channel.write(upstreamQueue.take());
              }
 else               if (key.isValid() && key.isReadable()) {
                read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
                  pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
                if (getHandshake().isDone()) {
                  if (downstreamBuffer.hasRemaining()) {
                    processBuffer(downstreamBuffer);
                  }
                }
              break;
case WAIT:
            processBuffer(downstreamBuffer);
          break;
case CLOSED:
        break;
    }
  }
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3000,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}
}
;
quit=false;
if (blockingMode) {
worker.run();
}
 else {
ExecutorService executorService=Executors.newCachedThreadPool();
executorService.submit(worker);
}
}
 catch (WebSocketException we) {
handler.onError(this,we);
}
catch (Exception e) {
handler.onError(this,new WebSocketException(3100,e));
}
}","public void connect() throws WebSocketException {
  try {
    if (!state.canTransitionTo(State.CONNECTED)) {
      throw new WebSocketException(3000,""String_Node_Str"" + state);
    }
    URI proxyUri=new URI(""String_Node_Str"",null,location.getHost(),location.getPort(),null,null,null);
    List<Proxy> proxyList=ProxySelector.getDefault().select(proxyUri);
    proxyList.get(0).address();
    socket=SocketChannel.open();
    socket.configureBlocking(false);
    selector=Selector.open();
    socket.register(selector,SelectionKey.OP_READ | OP_WRITE);
    long start=System.currentTimeMillis();
    if (socket.connect(endpoint)) {
      throw new WebSocketException(3000,""String_Node_Str"");
    }
    while (!socket.finishConnect()) {
      if ((System.currentTimeMillis() - start) > connectionTimeout) {
        throw new WebSocketException(3004,""String_Node_Str"");
      }
    }
    transitionTo(State.CONNECTED);
    getHandshake().init();
    pipeline.sendHandshakeUpstream(this,null);
    socket.write(upstreamQueue.take());
    transitionTo(State.HANDSHAKE);
    Runnable worker=new Runnable(){
      public void run(){
        try {
          while (!quit) {
            selector.select(connectionReadTimeout);
            for (            SelectionKey key : selector.selectedKeys()) {
              if (key.isValid() && key.isWritable() && upstreamQueue.peek() != null) {
                SocketChannel channel=(SocketChannel)key.channel();
                channel.write(upstreamQueue.poll());
              }
 else               if (key.isValid() && key.isReadable()) {
                read(socket,downstreamBuffer);
switch (state) {
case HANDSHAKE:
                  pipeline.sendHandshakeDownstream(WebSocketBase.this,downstreamBuffer);
                if (getHandshake().isDone()) {
                  if (downstreamBuffer.hasRemaining()) {
                    processBuffer(downstreamBuffer);
                  }
                }
              break;
case WAIT:
            processBuffer(downstreamBuffer);
          break;
case CLOSED:
        break;
    }
  }
}
}
}
 catch (WebSocketException we) {
handler.onError(WebSocketBase.this,we);
}
catch (Exception e) {
handler.onError(WebSocketBase.this,new WebSocketException(3000,e));
}
 finally {
try {
socket.close();
}
 catch (IOException e) {
;
}
try {
selector.close();
}
 catch (IOException e) {
;
}
}
}
}
;
quit=false;
if (blockingMode) {
worker.run();
}
 else {
ExecutorService executorService=Executors.newCachedThreadPool();
executorService.submit(worker);
}
}
 catch (WebSocketException we) {
handler.onError(this,we);
}
catch (Exception e) {
handler.onError(this,new WebSocketException(3100,e));
}
}",0.9426275462530368
153946,"public void nextUpstreamHandler(WebSocket ws,ByteBuffer buffer,Frame frame,StreamHandlerChain chain) throws WebSocketException {
  try {
    upstreamQueue.put(buffer);
    socket.register(selector,OP_READ | OP_WRITE);
  }
 catch (  InterruptedException e) {
    throw new WebSocketException(3011,e);
  }
catch (  ClosedChannelException e) {
    throw new WebSocketException(3010,e);
  }
}","public void nextUpstreamHandler(WebSocket ws,ByteBuffer buffer,Frame frame,StreamHandlerChain chain) throws WebSocketException {
  try {
    upstreamQueue.put(buffer);
    selector.wakeup();
  }
 catch (  InterruptedException e) {
    throw new WebSocketException(3011,e);
  }
}",0.7927927927927928
153947,"public WebSocketBase(String url,WebSocketHandler handler,String... protocols) throws URISyntaxException, IOException {
  this.protocols=protocols;
  this.handler=handler;
  parseUrl(url);
  this.pipeline=new WebSocketPipeline();
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      try {
        upstreamQueue.put(buffer);
        socket.register(selector,OP_READ | OP_WRITE);
      }
 catch (      InterruptedException e) {
        throw new WebSocketException(3011,e);
      }
catch (      ClosedChannelException e) {
        throw new WebSocketException(3010,e);
      }
    }
    public void nextHandshakeUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      try {
        upstreamQueue.put(buffer);
      }
 catch (      InterruptedException e) {
        throw new WebSocketException(3012,e);
      }
    }
  }
);
  initializePipeline(pipeline);
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      WebSocketBase.this.handler.onMessage(ws,frame);
    }
    public void nextHandshakeDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      responseHeaderMap=getHandshake().getResponseHeaderMap();
      responseStatus=getHandshake().getResponseStatus();
      getFrameParser().init();
      transitionTo(State.WAIT);
      WebSocketBase.this.handler.onOpen(WebSocketBase.this);
    }
  }
);
  this.origin=System.getProperty(""String_Node_Str"");
  int downstreamBufferSize=Integer.getInteger(""String_Node_Str"",8192);
  this.downstreamBuffer=ByteBuffer.allocate(downstreamBufferSize);
}","public WebSocketBase(String url,WebSocketHandler handler,String... protocols) throws URISyntaxException, IOException {
  this.protocols=protocols;
  this.handler=handler;
  this.origin=System.getProperty(""String_Node_Str"");
  int downstreamBufferSize=Integer.getInteger(""String_Node_Str"",8192);
  this.downstreamBuffer=ByteBuffer.allocate(downstreamBufferSize);
  this.packatdumpMode=Integer.getInteger(""String_Node_Str"");
  parseUrl(url);
  this.pipeline=new WebSocketPipeline();
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      try {
        upstreamQueue.put(buffer);
        selector.wakeup();
      }
 catch (      InterruptedException e) {
        throw new WebSocketException(3011,e);
      }
    }
    public void nextHandshakeUpstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      try {
        upstreamQueue.put(buffer);
      }
 catch (      InterruptedException e) {
        throw new WebSocketException(3012,e);
      }
    }
  }
);
  if (packatdumpMode > 0) {
    this.pipeline.addStreamHandler(new PacketDumpStreamHandler(packatdumpMode));
  }
  initializePipeline(pipeline);
  this.pipeline.addStreamHandler(new StreamHandlerAdapter(){
    public void nextDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    Frame frame,    StreamHandlerChain chain) throws WebSocketException {
      WebSocketBase.this.handler.onMessage(ws,frame);
    }
    public void nextHandshakeDownstreamHandler(    WebSocket ws,    ByteBuffer buffer,    StreamHandlerChain chain) throws WebSocketException {
      responseHeaderMap=getHandshake().getResponseHeaderMap();
      responseStatus=getHandshake().getResponseStatus();
      getFrameParser().init();
      transitionTo(State.WAIT);
      WebSocketBase.this.handler.onOpen(WebSocketBase.this);
    }
  }
);
}",0.1842639593908629
153948,"public ByteBuffer toByteBuffer(){
  ByteBuffer buf=ByteBuffer.allocate(1 + body.length + 1);
  buf.put(header.toByteBuffer());
  buf.put(body);
  buf.put((byte)0xFF);
  return buf;
}","public ByteBuffer toByteBuffer(){
  ByteBuffer buf=ByteBuffer.allocate(1 + body.length + 1);
  buf.put(header.toByteBuffer());
  buf.put(body);
  buf.put((byte)0xFF);
  buf.flip();
  return buf;
}",0.9629629629629628
153949,"public Config(WhoAreYou instance){
  this.plugin=instance;
  this.config=plugin.getConfiguration();
  config.load();
  if (config.getKeys(""String_Node_Str"") == null) {
    World[] worlds=(World[])plugin.getServer().getWorlds().toArray(new World[0]);
    for (    World world : worlds)     config.setProperty(""String_Node_Str"" + world.getName(),world.getName());
  }
  String[] worlds=(String[])config.getKeys(""String_Node_Str"").toArray(new String[0]);
  for (  String world : worlds)   aliases.put(world,config.getString(""String_Node_Str"" + world));
  if (!config.save())   Util.sendMessage(""String_Node_Str"",""String_Node_Str"");
}","public Config(WhoAreYou instance){
  this.plugin=instance;
  this.config=plugin.getConfiguration();
  config.load();
  if (config.getKeys(""String_Node_Str"") == null) {
    World[] worlds=(World[])plugin.getServer().getWorlds().toArray(new World[0]);
    for (    World world : worlds)     config.setProperty(""String_Node_Str"" + world.getName(),world.getName());
  }
  String[] worlds=(String[])config.getKeys(""String_Node_Str"").toArray(new String[0]);
  for (  String world : worlds)   aliases.put(world,config.getString(""String_Node_Str"" + world));
  if (!config.save())   Util.log.severe(""String_Node_Str"");
}",0.9701853344077356
153950,"public String getPrefix(Player player){
switch (handler) {
case PERMISSIONS:
    PermissionHandler handler=((Permissions)permissionPlugin).getHandler();
  String group=handler.getGroup(player.getWorld().getName(),player.getName());
return handler.getGroupPrefix(player.getWorld().getName(),group);
case OP:
if (player.isOp()) return ""String_Node_Str"";
return ""String_Node_Str"";
}
return null;
}","public String getPrefix(Player player){
  String prefix=""String_Node_Str"";
switch (handler) {
case PERMISSIONS:
    prefix=permissionPlugin.getGroupPrefix(player.getWorld().getName(),getGroup(player));
  break;
case OP:
if (player.isOp()) prefix=""String_Node_Str"";
break;
}
return (prefix == ""String_Node_Str"" ? ""String_Node_Str"" : prefix);
}",0.2635869565217391
153951,"private boolean hasPermission(Player player,String node){
switch (handler) {
case PERMISSIONS:
    return ((Permissions)permissionPlugin).getHandler().has(player,node);
case OP:
  return player.isOp();
}
return false;
}","private boolean hasPermission(Player player,String node){
switch (handler) {
case PERMISSIONS:
    return permissionPlugin.has(player,node);
case OP:
  return player.isOp();
}
return false;
}",0.9317073170731708
153952,"public Permission(WhoAreYou instance){
  plugin=instance;
  Plugin permissions=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (permissions != null) {
    permissionPlugin=permissions;
    handler=PermissionPlugin.PERMISSIONS;
    Util.sendMessage(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Util.sendMessage(""String_Node_Str"",""String_Node_Str"");
  }
}","public Permission(WhoAreYou instance){
  plugin=instance;
  Plugin permissions=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (permissions != null) {
    permissionPlugin=((Permissions)permissions).getHandler();
    handler=PermissionPlugin.PERMISSIONS;
    Util.log.info(""String_Node_Str"");
  }
 else {
    Util.log.info(""String_Node_Str"");
  }
}",0.7710526315789473
153953,"private static String replaceColors(String str){
  str=str.replace(""String_Node_Str"",ChatColor.RED.toString());
  str=str.replace(""String_Node_Str"",ChatColor.DARK_RED.toString());
  str=str.replace(""String_Node_Str"",ChatColor.YELLOW.toString());
  str=str.replace(""String_Node_Str"",ChatColor.GOLD.toString());
  str=str.replace(""String_Node_Str"",ChatColor.GREEN.toString());
  str=str.replace(""String_Node_Str"",ChatColor.DARK_GREEN.toString());
  str=str.replace(""String_Node_Str"",ChatColor.AQUA.toString());
  str=str.replace(""String_Node_Str"",ChatColor.DARK_AQUA.toString());
  str=str.replace(""String_Node_Str"",ChatColor.BLUE.toString());
  str=str.replace(""String_Node_Str"",ChatColor.DARK_BLUE.toString());
  str=str.replace(""String_Node_Str"",ChatColor.LIGHT_PURPLE.toString());
  str=str.replace(""String_Node_Str"",ChatColor.DARK_PURPLE.toString());
  str=str.replace(""String_Node_Str"",ChatColor.BLACK.toString());
  str=str.replace(""String_Node_Str"",ChatColor.DARK_GRAY.toString());
  str=str.replace(""String_Node_Str"",ChatColor.GRAY.toString());
  str=str.replace(""String_Node_Str"",ChatColor.WHITE.toString());
  return str;
}","public static String replaceColors(String str){
  for (  CustomColor color : CustomColor.values())   str=str.replace(color.getCustom(),color.getString());
  return str;
}",0.1858678955453149
153954,"private static String getLastColor(String str){
  int i=0;
  String lastColor=ChatColor.WHITE.toString();
  while (i < str.length() - 3) {
    for (    ChatColor color : ChatColor.values()) {
      if (str.substring(i,i + 3) == color.toString())       lastColor=color.toString();
    }
    i=i + 3;
  }
  return lastColor;
}","public static CustomColor getLastColor(String str){
  int i=0;
  CustomColor lastColor=CustomColor.WHITE;
  while (i < str.length() - 2) {
    for (    CustomColor color : CustomColor.values()) {
      if (str.substring(i,i + 2).equalsIgnoreCase(color.getCustom()))       lastColor=color;
    }
    i=i + 2;
  }
  return lastColor;
}",0.5601217656012176
153955,"public static void sendMessage(String level,String msg){
  msg=""String_Node_Str"" + WhoAreYou.name + ""String_Node_Str""+ msg;
  if (level == ""String_Node_Str"")   log.info(msg);
 else   log.severe(msg);
}","public static void sendMessage(Player player,String msg){
  int i;
  String part;
  CustomColor lastColor=CustomColor.WHITE;
  for (  String line : msg.split(""String_Node_Str"")) {
    i=0;
    while (i < line.length()) {
      part=getMaxString(line.substring(i));
      if (i + part.length() < line.length() && part.contains(""String_Node_Str""))       part=part.substring(0,part.lastIndexOf(""String_Node_Str""));
      part=lastColor.getCustom() + part;
      player.sendMessage(replaceColors(part));
      lastColor=getLastColor(part);
      i=i + part.length() - 1;
    }
  }
}",0.2747111681643132
153956,"public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String args[]){
  String prefix=cmd.getName();
  Player player=(Player)sender;
  if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 0) {
      String name=args[0];
      if (permissions.world(player)) {
        for (        World world : getServer().getWorlds().toArray(new World[0])) {
          if (name.equalsIgnoreCase(config.getAliasFromWorld(world))) {
            sendPlayerList(player,""String_Node_Str"" + world.getName() + ""String_Node_Str""+ world.getPlayers().size()+ ""String_Node_Str""+ getServer().getMaxPlayers()+ ""String_Node_Str"",world.getPlayers());
            return true;
          }
        }
      }
      if (permissions.player(player)) {
        for (        World world : getServer().getWorlds().toArray(new World[0])) {
          for (          Player playerInfo : world.getPlayers().toArray(new Player[0])) {
            if (playerInfo.getName().equalsIgnoreCase(name)) {
              Location loc=playerInfo.getLocation();
              Util.sendMessage(player,""String_Node_Str"" + playerInfo.getName());
              Util.sendMessage(player,""String_Node_Str"" + playerInfo.getAddress().getAddress().getHostAddress().toString());
              Util.sendMessage(player,""String_Node_Str"" + loc.getX() + ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
              Util.sendMessage(player,""String_Node_Str"" + config.getAliasFromWorld(playerInfo.getWorld()));
              Util.sendMessage(player,""String_Node_Str"" + playerInfo.getHealth() + ""String_Node_Str"");
              Util.sendMessage(player,""String_Node_Str"" + (player.isOp() ? ""String_Node_Str"" : ""String_Node_Str""));
              return true;
            }
          }
        }
      }
    }
 else     if (permissions.list(player)) {
      List<Player> players=new ArrayList<Player>();
      for (      World world : getServer().getWorlds().toArray(new World[0]))       players.addAll(world.getPlayers());
      sendPlayerList(player,""String_Node_Str"" + players.size() + ""String_Node_Str""+ getServer().getMaxPlayers()+ ""String_Node_Str"",players);
      return true;
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String args[]){
  String prefix=cmd.getName();
  Player player=(Player)sender;
  if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 0) {
      String name=args[0];
      if (permissions.world(player)) {
        for (        World world : getServer().getWorlds().toArray(new World[0])) {
          if (name.equalsIgnoreCase(config.getAliasFromWorld(world))) {
            sendPlayerList(player,""String_Node_Str"" + world.getName() + ""String_Node_Str""+ world.getPlayers().size()+ ""String_Node_Str""+ getServer().getMaxPlayers()+ ""String_Node_Str"",world.getPlayers());
            return true;
          }
        }
      }
      if (permissions.player(player)) {
        for (        World world : getServer().getWorlds().toArray(new World[0])) {
          for (          Player playerInfo : world.getPlayers().toArray(new Player[0])) {
            if (playerInfo.getName().equalsIgnoreCase(name)) {
              Location loc=Util.getSimpleLocation(playerInfo.getLocation());
              Util.sendMessage(player,""String_Node_Str"" + playerInfo.getName());
              Util.sendMessage(player,""String_Node_Str"" + playerInfo.getAddress().getAddress().getHostAddress().toString());
              Util.sendMessage(player,""String_Node_Str"" + loc.getX() + ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
              Util.sendMessage(player,""String_Node_Str"" + config.getAliasFromWorld(playerInfo.getWorld()));
              Util.sendMessage(player,""String_Node_Str"" + playerInfo.getHealth() + ""String_Node_Str"");
              Util.sendMessage(player,""String_Node_Str"" + permissions.getPrefix(player) + permissions.getGroup(player));
              Util.sendMessage(player,""String_Node_Str"" + (player.isOp() ? ""String_Node_Str"" : ""String_Node_Str""));
              return true;
            }
          }
        }
      }
    }
 else     if (permissions.list(player)) {
      List<Player> players=new ArrayList<Player>();
      for (      World world : getServer().getWorlds().toArray(new World[0]))       players.addAll(world.getPlayers());
      sendPlayerList(player,""String_Node_Str"" + players.size() + ""String_Node_Str""+ getServer().getMaxPlayers()+ ""String_Node_Str"",players);
      return true;
    }
  }
  return false;
}",0.9679982343853454
153957,"public void onEnable(){
  name=this.getDescription().getName();
  version=this.getDescription().getVersion();
  config=new Config(this);
  permissions=new Permission(this);
  Util.sendMessage(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str"");
}","public void onEnable(){
  name=this.getDescription().getName();
  version=this.getDescription().getVersion();
  config=new Config(this);
  permissions=new Permission(this);
  Util.log.info(""String_Node_Str"" + version + ""String_Node_Str"");
}",0.8063872255489022
153958,"public void onDisable(){
  Util.sendMessage(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str"");
}","public void onDisable(){
  Util.log.info(""String_Node_Str"" + version + ""String_Node_Str"");
}",0.848780487804878
153959,"public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String args[]){
  String prefix=cmd.getName();
  Player player=(Player)sender;
  if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 0) {
      String name=args[0];
      if (permissions.world(player)) {
        for (        World world : getServer().getWorlds().toArray(new World[0])) {
          if (name.equalsIgnoreCase(config.getAliasFromWorld(world))) {
            sendPlayerList(player,""String_Node_Str"" + world.getName() + ""String_Node_Str""+ world.getPlayers().size()+ ""String_Node_Str""+ getServer().getMaxPlayers()+ ""String_Node_Str"",world.getPlayers());
            return true;
          }
        }
        if (!permissions.player(player))         Util.sendMessage(player,""String_Node_Str"" + name);
      }
      if (permissions.player(player)) {
        List<Player> matchPlayers=getServer().matchPlayer(name);
        if (matchPlayers.size() == 1) {
          Player playerInfo=matchPlayers.get(1);
          Location loc=Util.getSimpleLocation(playerInfo.getLocation());
          Util.sendMessage(player,""String_Node_Str"" + playerInfo.getName());
          Util.sendMessage(player,""String_Node_Str"" + playerInfo.getAddress().getAddress().getHostAddress().toString());
          Util.sendMessage(player,""String_Node_Str"" + loc.getX() + ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
          Util.sendMessage(player,""String_Node_Str"" + config.getAliasFromWorld(playerInfo.getWorld()));
          Util.sendMessage(player,""String_Node_Str"" + playerInfo.getHealth() + ""String_Node_Str"");
          Util.sendMessage(player,""String_Node_Str"" + permissions.getPrefix(playerInfo) + permissions.getGroup(playerInfo));
          Util.sendMessage(player,""String_Node_Str"" + (playerInfo.isOp() ? ""String_Node_Str"" : ""String_Node_Str""));
          return true;
        }
        if (!permissions.world(player))         Util.sendMessage(player,""String_Node_Str"" + name);
 else         Util.sendMessage(player,""String_Node_Str"" + name);
      }
    }
 else     if (permissions.list(player)) {
      who(player);
      return true;
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String args[]){
  String prefix=cmd.getName();
  Player player=(Player)sender;
  if (prefix.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length > 0) {
      String name=args[0];
      if (permissions.world(player)) {
        for (        World world : getServer().getWorlds().toArray(new World[0])) {
          if (name.equalsIgnoreCase(config.getAliasFromWorld(world))) {
            sendPlayerList(player,""String_Node_Str"" + world.getName() + ""String_Node_Str""+ world.getPlayers().size()+ ""String_Node_Str""+ getServer().getMaxPlayers()+ ""String_Node_Str"",world.getPlayers());
            return true;
          }
        }
        if (!permissions.player(player))         Util.sendMessage(player,""String_Node_Str"" + name);
      }
      if (permissions.player(player)) {
        List<Player> matchPlayers=getServer().matchPlayer(name);
        if (matchPlayers.size() == 1) {
          Player playerInfo=matchPlayers.get(0);
          Location loc=Util.getSimpleLocation(playerInfo.getLocation());
          Util.sendMessage(player,""String_Node_Str"" + playerInfo.getName());
          Util.sendMessage(player,""String_Node_Str"" + playerInfo.getAddress().getAddress().getHostAddress().toString());
          Util.sendMessage(player,""String_Node_Str"" + loc.getX() + ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ());
          Util.sendMessage(player,""String_Node_Str"" + config.getAliasFromWorld(playerInfo.getWorld()));
          Util.sendMessage(player,""String_Node_Str"" + playerInfo.getHealth() + ""String_Node_Str"");
          Util.sendMessage(player,""String_Node_Str"" + permissions.getPrefix(playerInfo) + permissions.getGroup(playerInfo));
          Util.sendMessage(player,""String_Node_Str"" + (playerInfo.isOp() ? ""String_Node_Str"" : ""String_Node_Str""));
          return true;
        }
        if (!permissions.world(player))         Util.sendMessage(player,""String_Node_Str"" + name);
 else         Util.sendMessage(player,""String_Node_Str"" + name);
      }
    }
 else     if (permissions.list(player)) {
      who(player);
      return true;
    }
  }
  return false;
}",0.9995402298850574
153960,"private void loadConfiguration(){
}","private void loadConfiguration(){
  getDataFolder().mkdirs();
  configLL=new Configuration(new File(this.getDataFolder(),LIGHT_LEVEL_CONFIG));
  configLL.load();
  if ((configLL.getProperty(WAND_ENABLE_KEY) == null) || !(configLL.getProperty(WAND_ENABLE_KEY) instanceof Boolean)) {
    configLL.setProperty(WAND_ENABLE_KEY,true);
    configLL.save();
  }
  if ((configLL.getProperty(WAND_KEY) == null) || !(configLL.getProperty(WAND_KEY) instanceof Integer)) {
    configLL.setProperty(WAND_KEY,TORCH_ITEM);
    configLL.save();
  }
  if ((configLL.getProperty(WAND_ENABLE_DEFAULT_KEY) == null) || !(configLL.getProperty(WAND_ENABLE_DEFAULT_KEY) instanceof Boolean)) {
    configLL.setProperty(WAND_ENABLE_DEFAULT_KEY,true);
    configLL.save();
  }
}",0.089058524173028
153961,"protected void getLightLevel(Player p){
  if (hasPermission((Player)p,""String_Node_Str"")) {
    ArrayList<Block> target=(ArrayList<Block>)p.getLastTwoTargetBlocks(null,50);
    if (!target.get(1).getType().equals(Material.matchMaterial(""String_Node_Str"")) && target.size() >= 2) {
      String numbercolor=getColorFromLightLevel(target.get(0).getLightLevel()).toString();
      p.sendMessage(target.get(1).getType().name().toUpperCase() + ""String_Node_Str"" + numbercolor+ target.get(0).getLightLevel());
    }
 else {
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","protected void getLightLevel(Player p){
  if (hasPermission((Player)p,""String_Node_Str"")) {
    ArrayList<Block> target=(ArrayList<Block>)p.getLastTwoTargetBlocks(null,50);
    if (target.size() >= 2 && !target.get(1).getType().equals(Material.matchMaterial(""String_Node_Str""))) {
      String numbercolor=getColorFromLightLevel(target.get(0).getLightLevel()).toString();
      p.sendMessage(target.get(1).getType().name().toUpperCase() + ""String_Node_Str"" + numbercolor+ target.get(0).getLightLevel());
    }
 else {
      p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.9623931623931624
153962,"protected boolean playerHasWandEnabled(Player p){
  if (this.configLL.getBoolean(WAND_ENABLE_KEY,true))   return wandEnabled.contains(p);
}","protected boolean playerHasWandEnabled(Player p){
  if (this.configLL.getBoolean(WAND_ENABLE_DEFAULT_KEY,true)) {
    return !wandEnabled.contains(p);
  }
  return wandEnabled.contains(p);
}",0.8449848024316109
153963,"/** 
 * Toggle whether or not a player wants to use the wand
 * @param p
 */
protected void togglePlayerWand(Player p){
  if (wandEnabled.contains(p)) {
    wandEnabled.remove(p);
  }
 else {
    wandEnabled.add(p);
  }
}","/** 
 * Toggle whether or not a player wants to use the wand
 * @param p
 */
protected void togglePlayerWand(Player p){
  if (wandEnabled.contains(p)) {
    wandEnabled.remove(p);
  }
 else {
    wandEnabled.add(p);
  }
  if (playerHasWandEnabled(p)) {
    p.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
 else {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.7321131447587355
153964,"/** 
 * All of the users who declined their invitation to this event <p/>  {@sample.xml ../../../doc/mule-module-facebook.xml.sample facebook:getEventDeclined}
 * @param eventId Represents the ID of the event object.
 * @param since A unix timestamp or any date accepted by strtotime
 * @param until A unix timestamp or any date accepted by strtotime
 * @param limit Limit the number of items returned.
 * @param offset An offset to the response. Useful for paging.
 * @return A list of events
 */
@Processor @OAuthProtected public List<Event> getEventDeclined(String eventId,@Optional @Default(""String_Node_Str"") String since,@Optional @Default(""String_Node_Str"") String until,@Optional @Default(""String_Node_Str"") String limit,@Optional @Default(""String_Node_Str"") String offset){
  URI uri=UriBuilder.fromPath(FACEBOOK_URI).path(""String_Node_Str"").build(eventId);
  WebResource resource=this.newWebResource(uri,accessToken);
  return mapper.toJavaList(resource.queryParam(""String_Node_Str"",since).queryParam(""String_Node_Str"",until).queryParam(""String_Node_Str"",limit).queryParam(""String_Node_Str"",offset).get(String.class),Event.class);
}","/** 
 * All of the users who declined their invitation to this event <p/>  {@sample.xml ../../../doc/mule-module-facebook.xml.sample facebook:getEventDeclined}
 * @param eventId Represents the ID of the event object.
 * @param since A unix timestamp or any date accepted by strtotime
 * @param until A unix timestamp or any date accepted by strtotime
 * @param limit Limit the number of items returned.
 * @param offset An offset to the response. Useful for paging.
 * @return A list of events
 */
@Processor @OAuthProtected public List<User> getEventDeclined(String eventId,@Optional @Default(""String_Node_Str"") String since,@Optional @Default(""String_Node_Str"") String until,@Optional @Default(""String_Node_Str"") String limit,@Optional @Default(""String_Node_Str"") String offset){
  URI uri=UriBuilder.fromPath(FACEBOOK_URI).path(""String_Node_Str"").build(eventId);
  WebResource resource=this.newWebResource(uri,accessToken);
  return mapper.toJavaList(resource.queryParam(""String_Node_Str"",since).queryParam(""String_Node_Str"",until).queryParam(""String_Node_Str"",limit).queryParam(""String_Node_Str"",offset).get(String.class),User.class);
}",0.9921121822962312
153965,"protected List<String> getExpectedLikes() throws IOException {
  List<String> music=getExpectedMovies();
  List<String> television=getExpectedTelevision();
  List<String> books=getExpectedBooks();
  List<String> movies=getExpectedMovies();
  List<String> finalList=new ArrayList<String>();
  finalList.addAll(music);
  finalList.addAll(television);
  finalList.addAll(books);
  finalList.addAll(movies);
  return finalList;
}","protected List<String> getExpectedLikes() throws IOException {
  List<String> music=getExpectedMusic();
  List<String> television=getExpectedTelevision();
  List<String> books=getExpectedBooks();
  List<String> movies=getExpectedMovies();
  List<String> finalList=new ArrayList<String>();
  finalList.addAll(music);
  finalList.addAll(television);
  finalList.addAll(books);
  finalList.addAll(movies);
  return finalList;
}",0.9893992932862192
153966,"public TSource next(){
  if (onCheckedMatch) {
    onCheckedMatch=false;
    return currentItem;
  }
 else   if (sourceIterator.hasNext()) {
    currentItem=sourceIterator.next();
    if (predicate.check(currentItem,index++)) {
      onCheckedMatch=false;
      return currentItem;
    }
  }
  throw new NoSuchElementException();
}","public TSource next(){
  if (onCheckedMatch) {
    onCheckedMatch=false;
    return currentItem;
  }
 else   if (sourceIterator.hasNext()) {
    currentItem=sourceIterator.next();
    if (predicate.check(currentItem,index++)) {
      return currentItem;
    }
  }
  throw new NoSuchElementException();
}",0.9558359621451104
153967,"public boolean hasNext(){
  if (onCheckedMatch) {
    return true;
  }
  if (sourceIterator.hasNext()) {
    if (!onCheckedMatch) {
      currentItem=sourceIterator.next();
    }
    if (predicate.check(currentItem,index++)) {
      onCheckedMatch=true;
      return true;
    }
  }
  return false;
}","public boolean hasNext(){
  if (onCheckedMatch) {
    return true;
  }
 else {
    if (sourceIterator.hasNext()) {
      if (!onCheckedMatch) {
        currentItem=sourceIterator.next();
      }
      if (predicate.check(currentItem,index++)) {
        onCheckedMatch=true;
        return true;
      }
    }
  }
  return false;
}",0.907936507936508
153968,"public TSource next(){
  while (onCheckedMatch || sourceIterator.hasNext()) {
    if (!onCheckedMatch) {
      currentItem=sourceIterator.next();
    }
    if (predicate.check(currentItem,index++)) {
      onCheckedMatch=false;
      return currentItem;
    }
  }
  throw new NoSuchElementException();
}","public TSource next(){
  if (onCheckedMatch) {
    onCheckedMatch=false;
    return currentItem;
  }
 else {
    while (sourceIterator.hasNext()) {
      currentItem=sourceIterator.next();
      if (predicate.check(currentItem,index++)) {
        return currentItem;
      }
    }
  }
  throw new NoSuchElementException();
}",0.5582137161084529
153969,"public boolean hasNext(){
  while (sourceIterator.hasNext()) {
    if (!onCheckedMatch) {
      currentItem=sourceIterator.next();
    }
    if (predicate.check(currentItem,index++)) {
      onCheckedMatch=true;
      return true;
    }
  }
  return false;
}","public boolean hasNext(){
  if (onCheckedMatch) {
    return true;
  }
 else {
    while (sourceIterator.hasNext()) {
      currentItem=sourceIterator.next();
      if (predicate.check(currentItem,index++)) {
        onCheckedMatch=true;
        return true;
      }
    }
  }
  return false;
}",0.7789855072463768
153970,"@Action(value=""String_Node_Str"",results={@Result(name=SUCCESS,type=""String_Node_Str"",location=""String_Node_Str""),@Result(name=INPUT,type=""String_Node_Str"",location=""String_Node_Str""),@Result(name=ERROR,location=""String_Node_Str"")}) @Validations(requiredStrings={@RequiredStringValidator(fieldName=""String_Node_Str"",message=""String_Node_Str"",trim=true),@RequiredStringValidator(fieldName=""String_Node_Str"",message=""String_Node_Str"",trim=true)}) public String execute(){
  ProductDAO dao=new ProductDAO();
  if (!dao.update(getProduct()))   return ERROR;
  return SUCCESS;
}","@Action(value=""String_Node_Str"",results={@Result(name=SUCCESS,type=""String_Node_Str"",location=""String_Node_Str""),@Result(name=INPUT,location=""String_Node_Str""),@Result(name=ERROR,location=""String_Node_Str"")}) @Validations(requiredStrings={@RequiredStringValidator(fieldName=""String_Node_Str"",message=""String_Node_Str"",trim=true),@RequiredStringValidator(fieldName=""String_Node_Str"",message=""String_Node_Str"",trim=true)}) public String execute(){
  ProductDAO dao=new ProductDAO();
  if (!dao.update(getProduct()))   return ERROR;
  return SUCCESS;
}",0.9794826048171276
153971,"public static void main(String[] args) throws IOException {
  if (args.length != 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(gatherWords(FileUtils.readFileToString(new File(args[0]))));
  System.out.println(gatherWords(FileUtils.readFileToString(new File(args[0]))));
  System.out.println(gatherWords(FileUtils.readFileToString(new File(args[0]))));
  System.out.println(countWords(gatherWords(FileUtils.readFileToString(new File(args[0])))));
  System.out.println(sortCountedWords(countWords(gatherWords(FileUtils.readFileToString(new File(args[0]))))));
  System.out.println(histogram(sortCountedWords(countWords(gatherWords(FileUtils.readFileToString(new File(args[0])))))));
}","public static void main(String[] args) throws IOException {
  if (args.length != 1) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  System.out.println(gatherWords(FileUtils.readFileToString(new File(args[0]))));
  System.out.println(gatherWords(FileUtils.readFileToString(new File(args[0]))));
  System.out.println(gatherWords(FileUtils.readFileToString(new File(args[0]))));
  System.out.println(countWords(gatherWords(FileUtils.readFileToString(new File(args[0])))));
  System.out.println(sortCountedWords(countWords(gatherWords(FileUtils.readFileToString(new File(args[0]))))));
  System.out.println(sortCountedWords(countWords(gatherWords(FileUtils.readFileToString(new File(args[0]))))));
  System.out.println(sortCountedWords(countWords(gatherWords(FileUtils.readFileToString(new File(args[0]))))));
  System.out.println(histogram(sortCountedWords(countWords(gatherWords(FileUtils.readFileToString(new File(args[0])))))));
}",0.8537455410225921
153972,"@Test public void foldWithTimesShouldMultiplyInitialValueWithAllNumbers(){
  Function2<Integer,Integer,Integer> times=new Function2<Integer,Integer,Integer>(){
    public Integer apply(    Integer accum,    Integer next){
      return accum * next;
    }
  }
;
  assertThat(fold(Arrays.asList(1,2,3,4),2,times),is(48));
}","@Test public void foldWithTimesShouldMultiplyInitialValueWithAllNumbers(){
  Function2<Integer,Integer,Integer> times=new Function2<Integer,Integer,Integer>(){
    public Integer apply(    Integer accum,    Integer next){
      return accum * next;
    }
  }
;
  assertThat(Collections3.fold(Arrays.asList(1,2,3,4),2,times),is(48));
}",0.9801526717557252
153973,"@Test public void reduceWithPlusShouldAddAllNumbers(){
  Function2<Integer,Integer,Integer> plus=new Function2<Integer,Integer,Integer>(){
    public Integer apply(    Integer accum,    Integer next){
      return accum + next;
    }
  }
;
  assertThat(reduce(Arrays.asList(1,2,3,4),plus),is(10));
}","@Test public void reduceWithPlusShouldAddAllNumbers(){
  Function2<Integer,Integer,Integer> plus=new Function2<Integer,Integer,Integer>(){
    public Integer apply(    Integer accum,    Integer next){
      return accum + next;
    }
  }
;
  assertThat(Collections3.reduce(Arrays.asList(1,2,3,4),plus),is(10));
}",0.9787234042553192
153974,"@Test public void reduceWithEmptyCollectionThrowsException(){
  try {
    reduce(Collections.emptyList(),null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException expected) {
  }
}","@Test public void reduceWithEmptyCollectionThrowsException(){
  try {
    Collections3.reduce(Collections.emptyList(),null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException expected) {
  }
}",0.968058968058968
153975,"@Test public void foldWithAddFirstShouldReverseListIntoEmptyList(){
  Function2<Deque<Integer>,Integer,Deque<Integer>> reverse=new Function2<Deque<Integer>,Integer,Deque<Integer>>(){
    public Deque<Integer> apply(    Deque<Integer> accum,    Integer next){
      accum.addFirst(next);
      return accum;
    }
  }
;
  Deque<Integer> expected=new LinkedList<Integer>(Arrays.asList(3,2,1));
  assertThat(fold(Arrays.asList(1,2,3),new LinkedList<Integer>(),reverse),is(expected));
}","@Test public void foldWithAddFirstShouldReverseListIntoEmptyList(){
  Function2<Deque<Integer>,Integer,Deque<Integer>> reverse=new Function2<Deque<Integer>,Integer,Deque<Integer>>(){
    public Deque<Integer> apply(    Deque<Integer> accum,    Integer next){
      accum.addFirst(next);
      return accum;
    }
  }
;
  Deque<Integer> expected=new LinkedList<Integer>(Arrays.asList(3,2,1));
  assertThat(Collections3.fold(Arrays.asList(1,2,3),new LinkedList<Integer>(),reverse),is(expected));
}",0.9866939611054248
153976,"@Test public void reduceWithOneElementReturnsThatElement(){
  String result=reduce(Collections.singletonList(""String_Node_Str""),null);
  assertThat(result,is(""String_Node_Str""));
}","@Test public void reduceWithOneElementReturnsThatElement(){
  String result=Collections3.reduce(Collections.singletonList(""String_Node_Str""),null);
  assertThat(result,is(""String_Node_Str""));
}",0.96514745308311
153977,"@Test public void foldWithEmptyCollectionsReturnsInitialValue(){
  assertThat(fold(Collections.emptyList(),""String_Node_Str"",null),is(""String_Node_Str""));
}","@Test public void foldWithEmptyCollectionsReturnsInitialValue(){
  assertThat(Collections3.fold(Collections.emptyList(),""String_Node_Str"",null),is(""String_Node_Str""));
}",0.96
153978,"@Test public void reduceWithTimesShouldMultiplyAllNumbers(){
  Function2<Integer,Integer,Integer> times=new Function2<Integer,Integer,Integer>(){
    public Integer apply(    Integer accum,    Integer next){
      return accum * next;
    }
  }
;
  assertThat(reduce(Arrays.asList(1,2,3,4),times),is(24));
}","@Test public void reduceWithTimesShouldMultiplyAllNumbers(){
  Function2<Integer,Integer,Integer> times=new Function2<Integer,Integer,Integer>(){
    public Integer apply(    Integer accum,    Integer next){
      return accum * next;
    }
  }
;
  assertThat(Collections3.reduce(Arrays.asList(1,2,3,4),times),is(24));
}",0.9792663476874004
153979,"/** 
 * Creates and add to panel used components
 */
protected void initComponent(){
  paramFields=new ArrayList<JTextField>();
  jlbParameters=new JLabel(""String_Node_Str"");
  jtfExpectedValue=new JTextField(10);
  jlbExpectedValue=new JLabel(""String_Node_Str"");
  jlbExpectedValueError=new JLabel(""String_Node_Str"");
  jlbExpectedValueError.setForeground(Color.red);
  jlbMethodDescription=new JLabel();
  topPanel=new JPanel(new FlowLayout());
  bottomPanel=new JPanel(new FlowLayout());
  List<Method> methodsList=model.getMethods().getList();
  jcbMethods=new JComboBox(createComboBoxArray(methodsList));
  jcbMethods.addActionListener(this);
  topPanel.add(jcbMethods);
  topPanel.add(jlbExpectedValue);
  topPanel.add(jlbExpectedValueError);
  topPanel.add(jtfExpectedValue);
  topPanel.add(jlbParameters);
  add(topPanel);
  add(bottomPanel);
}","/** 
 * Creates and add to panel used components
 */
protected void initComponent(){
  paramFields=new ArrayList<JTextField>(10);
  jlbParameters=new JLabel(""String_Node_Str"");
  jtfExpectedValue=new JTextField(10);
  jlbExpectedValue=new JLabel(""String_Node_Str"");
  jlbExpectedValueError=new JLabel(""String_Node_Str"");
  jlbExpectedValueError.setForeground(Color.red);
  jlbMethodDescription=new JLabel();
  topPanel=new JPanel(new FlowLayout());
  bottomPanel=new JPanel(new FlowLayout());
  List<Method> methodsList=model.getMethods().getList();
  jcbMethods=new JComboBox(createComboBoxArray(methodsList));
  jcbMethods.addActionListener(this);
  topPanel.add(jcbMethods);
  topPanel.add(jlbExpectedValue);
  topPanel.add(jlbExpectedValueError);
  topPanel.add(jtfExpectedValue);
  topPanel.add(jlbParameters);
  add(topPanel);
  add(bottomPanel);
}",0.9988276670574444
153980,"public void setDefaultValues(Condition condition){
  String className=condition.getConditionObject().getClass().getName();
  String selectedItem=className.substring(className.lastIndexOf(""String_Node_Str"") + 1) + ""String_Node_Str"" + condition.getFunctionName();
  jcbMethods.setSelectedItem(selectedItem);
  jtfExpectedValue.setText(condition.getExpectedValue());
  for (int i=0; i < paramFields.size(); i++) {
    JTextField jTextField=paramFields.get(i);
    jTextField.setText(condition.getParams().get(i));
  }
}","public void setDefaultValues(Condition condition){
  String className=condition.getConditionObject().getClass().getName();
  String selectedItem=className.substring(className.lastIndexOf(""String_Node_Str"") + 1) + ""String_Node_Str"" + condition.getFunctionName();
  jcbMethods.setSelectedItem(selectedItem);
  jtfExpectedValue.setText(condition.getExpectedValue());
  model.setExpected(jtfExpectedValue.getText());
  model.setParams(condition.getParams());
  for (int i=0; i < paramFields.size(); i++) {
    JTextField jTextField=paramFields.get(i);
    jTextField.setText(condition.getParams().get(i));
  }
}",0.918967052537845
153981,"@Action public void initAnalyzerDomainsToAnalyze(){
  TreeMap<String,Integer> map=getCrawledDomains();
  List<String> hosts=new ArrayList<String>();
  hosts.add(""String_Node_Str"");
  for (  Map.Entry<String,Integer> en : map.entrySet()) {
    hosts.add(en.getKey());
  }
  jcbAnalyzerStep1DomainsToAnalyze.setModel(new DefaultComboBoxModel(hosts.toArray()));
  jcbAnalyzerStep1DomainsToAnalyze.revalidate();
  if (hosts.size() > 0) {
    displayFlashMessage(""String_Node_Str"",FlashMessageType.INFO);
  }
 else {
    displayFlashMessage(""String_Node_Str"",FlashMessageType.INFO);
  }
}","@Action public void initAnalyzerDomainsToAnalyze(){
  TreeMap<String,Integer> map=getCrawledDomains();
  List<String> hosts=new ArrayList<String>();
  hosts.add(""String_Node_Str"");
  for (  Map.Entry<String,Integer> en : map.entrySet()) {
    hosts.add(en.getKey());
  }
  jcbAnalyzerStep1DomainsToAnalyze.setModel(new DefaultComboBoxModel(hosts.toArray()));
  jcbAnalyzerStep1DomainsToAnalyze.revalidate();
  if (hosts.size() > 1) {
    displayFlashMessage(""String_Node_Str"",FlashMessageType.INFO);
  }
 else {
    displayFlashMessage(""String_Node_Str"",FlashMessageType.INFO);
  }
}",0.9982847341337908
153982,"/** 
 * Saves crawled content into db
 * @param query
 */
public void processResource(Query query){
  CrawlerConsole.print(""String_Node_Str"" + query.getOriginalURL().toString());
  if (query.getResource().getContentMimeSubType().equals(""String_Node_Str"")) {
    String html=getCrawledHtml(query);
    String url=query.getOriginalURL().toString();
    String host=query.getHost();
    if (url.split(""String_Node_Str"").length < 4) {
      url=url + ""String_Node_Str"";
    }
    String baseUrl=url.substring(0,url.lastIndexOf('/') + 1);
    Document doc=Jsoup.parse(html,baseUrl);
    LinksExtractor extractor=new LinksExtractor(doc);
    Set<String> links=extractor.getInternalLinks(host);
    for (    String link : links) {
      pool.addURL(link);
    }
    ContentExtractor contentExtractor=new ContentExtractor(doc);
    Page page=new Page(query.getOriginalURL().toString(),host);
    if (contentExtractor.hasMetaDescription()) {
      page.setDescription(contentExtractor.getMetaDescription());
    }
    if (contentExtractor.hasMetaKeywords()) {
      page.setKeywords(contentExtractor.getMetaKeywords());
    }
    if (contentExtractor.hasMetaCharset()) {
      page.setCharset(contentExtractor.getMetaCharset());
    }
    String bodyText=doc.body().text();
    String bodyHtml=doc.body().toString();
    BodyContent bodyContent=new BodyContent(page.getUrl(),bodyHtml,bodyText);
    DbConnector conn=new DbConnector();
    CrawledPageController controller=new CrawledPageController(conn.getConnection());
    controller.save(page,bodyContent);
  }
}","/** 
 * Saves crawled content into db
 * @param query
 */
public void processResource(Query query){
  CrawlerConsole.print(""String_Node_Str"" + query.getOriginalURL().toString());
  if (query.getResource().getContentMimeSubType() != null) {
    if (query.getResource().getContentMimeSubType().contains(""String_Node_Str"")) {
      String html=getCrawledHtml(query);
      String url=query.getOriginalURL().toString();
      String host=query.getHost();
      if (url.split(""String_Node_Str"").length < 4) {
        url=url + ""String_Node_Str"";
      }
      String baseUrl=url.substring(0,url.lastIndexOf('/') + 1);
      Document doc=Jsoup.parse(html,baseUrl);
      LinksExtractor extractor=new LinksExtractor(doc);
      Set<String> links=extractor.getInternalLinks(host);
      for (      String link : links) {
        pool.addURL(link);
      }
      ContentExtractor contentExtractor=new ContentExtractor(doc);
      Page page=new Page(query.getOriginalURL().toString(),host);
      if (contentExtractor.hasMetaDescription()) {
        page.setDescription(contentExtractor.getMetaDescription());
      }
      if (contentExtractor.hasMetaKeywords()) {
        page.setKeywords(contentExtractor.getMetaKeywords());
      }
      if (contentExtractor.hasMetaCharset()) {
        page.setCharset(contentExtractor.getMetaCharset());
      }
      String bodyText=doc.body().text();
      String bodyHtml=doc.body().toString();
      BodyContent bodyContent=new BodyContent(page.getUrl(),bodyHtml,bodyText);
      DbConnector conn=new DbConnector();
      CrawledPageController controller=new CrawledPageController(conn.getConnection());
      controller.save(page,bodyContent);
    }
 else {
      System.out.println(query.getResource().getContentMimeSubType());
    }
  }
}",0.932132132132132
153983,"/** 
 * Saves crawled content into db
 * @param query
 */
public void processResource(Query query){
  CrawlerConsole.print(""String_Node_Str"" + query.getOriginalURL().toString());
  byte[] bytes=query.getResource().getBytes();
  String html=new String(bytes);
  String host=query.getHost();
  String hostUrl=""String_Node_Str"" + host;
  Document doc=Jsoup.parse(html,hostUrl);
  LinksExtractor extractor=new LinksExtractor(doc);
  Set<String> links=extractor.getInternalLinks(host);
  for (  String link : links) {
    pool.addURL(link);
  }
  if (!html.isEmpty()) {
    Page page=new Page(query.getOriginalURL(),host);
    HtmlContent htmlContent=new HtmlContent(html);
    page.addContent(htmlContent);
    DbConnector conn=new DbConnector();
    conn.getConnector().create(page);
  }
}","/** 
 * Saves crawled content into db
 * @param query
 */
public void processResource(Query query){
  CrawlerConsole.print(""String_Node_Str"" + query.getOriginalURL().toString());
  byte[] bytes=query.getResource().getBytes();
  String html=new String(bytes);
  String url=query.getOriginalURL().toString();
  String host=query.getHost();
  if (url.split(""String_Node_Str"").length < 4) {
    url=url + ""String_Node_Str"";
  }
  String baseUrl=url.substring(0,url.lastIndexOf('/') + 1);
  Document doc=Jsoup.parse(html,baseUrl);
  LinksExtractor extractor=new LinksExtractor(doc);
  Set<String> links=extractor.getInternalLinks(host);
  for (  String link : links) {
    pool.addURL(link);
  }
  if (!html.isEmpty()) {
    Page page=new Page(query.getOriginalURL(),host);
    HtmlContent htmlContent=new HtmlContent(html);
    page.addContent(htmlContent);
    DbConnector conn=new DbConnector();
    conn.getConnector().create(page);
  }
}",0.551363900174115
153984,"private static Scene getSceneOne(JavaRayConfiguration configuration){
  Scene scene=new Scene(configuration);
  scene.add(new Sphere(new Vector3(4,3,-5),newMat(0,0,0,6,6,6,10,10,10),2.5));
  scene.add(new Sphere(new Vector3(2.75,4,-1),newMat(2,0,0,5,0,0,0,0,2),0.5));
  scene.add(new Sphere(new Vector3(5.25,4,-1),newMat(0,2,0,0,5,0,0,2,0),0.5));
  scene.add(new Light(new Vector3(4,3,10),5,1));
  return scene;
}","private static Scene getSceneOne(JavaRayConfiguration configuration){
  Scene scene=new Scene(configuration);
  scene.add(new Light(new Vector3(4,3,10),5,1));
  scene.add(new Sphere(new Vector3(4,3,-5),newMat(0,0,0,6,6,6,10,10,10),2.5));
  scene.add(new Sphere(new Vector3(2.75,4,-1),newMat(2,0,0,5,0,0,0,0,2),0.5));
  scene.add(new Sphere(new Vector3(5.25,4,-1),newMat(0,2,0,0,5,0,0,2,0),0.5));
  return scene;
}",0.8813559322033898
153985,"public static void main(String[] args){
  logger.info(""String_Node_Str"");
  ApplicationContext appContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  JavaRayConfiguration configuration=(JavaRayConfiguration)appContext.getBean(""String_Node_Str"");
  View view=new View(configuration);
  logger.debug(""String_Node_Str"",new Object[]{configuration.getViewWidth(),configuration.getViewHeight(),configuration.getAntiAlias()});
  Camera camera=new Camera(new Vector3(4,3,3));
  Scene scene=getSceneTwo(configuration);
  long t=new Date().getTime();
  try {
    new RayTracer(configuration).render(scene,view,camera);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  logger.debug(""String_Node_Str"",((new Date().getTime() - t) / 1000));
}","public static void main(String[] args){
  logger.info(""String_Node_Str"");
  ApplicationContext appContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  JavaRayConfiguration configuration=(JavaRayConfiguration)appContext.getBean(""String_Node_Str"");
  View view=new View(configuration);
  logger.debug(""String_Node_Str"",new Object[]{configuration.getViewWidth(),configuration.getViewHeight(),configuration.getAntiAlias()});
  Camera camera=new Camera(new Vector3(4,3,3));
  Scene scene=getSceneThree(configuration);
  long t=new Date().getTime();
  new RayTracer(configuration).render(scene,view,camera);
  logger.debug(""String_Node_Str"",((new Date().getTime() - t) / 1000));
}",0.9393939393939394
153986,"public HitResult(double t,Vector3 hitPoint){
  this.t=t;
  this.hitPoint=hitPoint;
}","public HitResult(double t,Vector3 hitPoint){
  this.t=t;
  this.hitPoint=hitPoint != null ? new Vector3(hitPoint) : null;
}",0.8115942028985508
153987,"public Light(Vector3 position,double intensity,double radius){
  super(position,new Material(new ColorMagnitude(intensity,intensity,intensity)),radius);
}","public Light(Vector3 position,ColorMagnitude emissivity,double radius){
  super(position,new Material(emissivity),radius);
}",0.7410071942446043
153988,"public Vector3 getPosition(){
  return new Vector3(position);
}","public Vector3 getPosition(){
  return position;
}",0.8849557522123894
153989,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof PlaneGeometry))   return false;
  PlaneGeometry that=(PlaneGeometry)o;
  return !(planeNormal != null ? !planeNormal.equals(that.planeNormal) : that.planeNormal != null) && !(position != null ? !position.equals(that.position) : that.position != null);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PlaneGeometry)) {
    return false;
  }
  PlaneGeometry that=(PlaneGeometry)o;
  return !(planeNormal != null ? !planeNormal.equals(that.planeNormal) : that.planeNormal != null) && !(position != null ? !position.equals(that.position) : that.position != null);
}",0.9775910364145658
153990,"/** 
 * Constructs a <code>TiledImage</code> equivalent to a given <code>RenderedImage</code>.  Actual copying of the pixel data from the <code>RenderedImage</code> will be deferred until the first time they are requested from the <code>TiledImage</code>.  The tiles of the <code>TiledImage</code> may optionally share <code>DataBuffer</code>s with the tiles of the source image but it should be realized in this case that data written into the <code>TiledImage</code> will be visible in the source image.
 * @param source The source <code>RenderedImage</code>.
 * @param areBuffersShared Whether the tile <code>DataBuffer</code>sof the source are re-used in the tiles of this image.  If <code>false</code> new <code>WritableRaster</code>s will be created.
 * @since JAI 1.1
 */
public TiledImage(RenderedImage source,boolean areBuffersShared){
  this(source,source.getTileWidth(),source.getTileHeight());
  this.areBuffersShared=areBuffersShared;
}","/** 
 * Constructs a <code>TiledImage</code> equivalent to a given <code>RenderedImage</code>.  Actual copying of the pixel data from the <code>RenderedImage</code> will be deferred until the first time they are requested from the <code>TiledImage</code>.  The tiles of the <code>TiledImage</code> may optionally share <code>DataBuffer</code>s with the tiles of the source image but it should be realized in this case that data written into the <code>TiledImage</code> will be visible in the source image.
 * @param source The source <code>RenderedImage</code>.
 * @param areBuffersShared Whether the tile <code>DataBuffer</code>sof the source are re-used in the tiles of this image.  If <code>false</code> new <code>WritableRaster</code>s will be created.
 * @since JAI 1.1
 */
public TiledImage(RenderedImage source,boolean areBuffersShared){
  this(source,source.getTileWidth(),source.getTileHeight());
  RenderedImage sourceRendering=source instanceof RenderedOp ? ((RenderedOp)source).getRendering() : source;
  boolean suppressBufferSharing=sourceRendering instanceof OpImage && !((OpImage)sourceRendering).computesUniqueTiles();
  this.areBuffersShared=areBuffersShared && !suppressBufferSharing;
}",0.871866295264624
153991,"/** 
 * Constructor for BMPImage
 * @param stream
 */
public BMPImage(InputStream stream){
  if (stream instanceof BufferedInputStream) {
    inputStream=(BufferedInputStream)stream;
  }
 else {
    inputStream=new BufferedInputStream(stream);
  }
  try {
    if (!(readUnsignedByte(inputStream) == 'B' && readUnsignedByte(inputStream) == 'M')) {
      throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
    }
    bitmapFileSize=readDWord(inputStream);
    readWord(inputStream);
    readWord(inputStream);
    bitmapOffset=readDWord(inputStream);
    long size=readDWord(inputStream);
    if (size == 12) {
      width=readWord(inputStream);
      height=readWord(inputStream);
    }
 else {
      width=readLong(inputStream);
      height=readLong(inputStream);
    }
    int planes=readWord(inputStream);
    bitsPerPixel=readWord(inputStream);
    properties.put(""String_Node_Str"",new Integer(planes));
    properties.put(""String_Node_Str"",new Integer(bitsPerPixel));
    numBands=3;
    if (size == 12) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      if (bitsPerPixel == 1) {
        imageType=VERSION_2_1_BIT;
      }
 else       if (bitsPerPixel == 4) {
        imageType=VERSION_2_4_BIT;
      }
 else       if (bitsPerPixel == 8) {
        imageType=VERSION_2_8_BIT;
      }
 else       if (bitsPerPixel == 24) {
        imageType=VERSION_2_24_BIT;
      }
      int numberOfEntries=(int)((bitmapOffset - 14 - size) / 3);
      int sizeOfPalette=numberOfEntries * 3;
      palette=new byte[sizeOfPalette];
      inputStream.read(palette,0,sizeOfPalette);
      properties.put(""String_Node_Str"",palette);
    }
 else {
      compression=readDWord(inputStream);
      imageSize=readDWord(inputStream);
      long xPelsPerMeter=readLong(inputStream);
      long yPelsPerMeter=readLong(inputStream);
      long colorsUsed=readDWord(inputStream);
      long colorsImportant=readDWord(inputStream);
switch ((int)compression) {
case BI_RGB:
        properties.put(""String_Node_Str"",""String_Node_Str"");
      break;
case BI_RLE8:
    properties.put(""String_Node_Str"",""String_Node_Str"");
  break;
case BI_RLE4:
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
case BI_BITFIELDS:
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
}
properties.put(""String_Node_Str"",new Long(xPelsPerMeter));
properties.put(""String_Node_Str"",new Long(yPelsPerMeter));
properties.put(""String_Node_Str"",new Long(colorsUsed));
properties.put(""String_Node_Str"",new Long(colorsImportant));
if (size == 40) {
switch ((int)compression) {
case BI_RGB:
case BI_RLE8:
case BI_RLE4:
int numberOfEntries=(int)((bitmapOffset - 14 - size) / 4);
int sizeOfPalette=numberOfEntries * 4;
palette=new byte[sizeOfPalette];
inputStream.read(palette,0,sizeOfPalette);
properties.put(""String_Node_Str"",palette);
if (bitsPerPixel == 1) {
imageType=VERSION_3_1_BIT;
}
 else if (bitsPerPixel == 4) {
imageType=VERSION_3_4_BIT;
}
 else if (bitsPerPixel == 8) {
imageType=VERSION_3_8_BIT;
}
 else if (bitsPerPixel == 24) {
imageType=VERSION_3_24_BIT;
}
 else if (bitsPerPixel == 16) {
imageType=VERSION_3_NT_16_BIT;
redMask=0x7C00;
greenMask=0x3E0;
blueMask=0x1F;
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
}
 else if (bitsPerPixel == 32) {
imageType=VERSION_3_NT_32_BIT;
redMask=0x00FF0000;
greenMask=0x0000FF00;
blueMask=0x000000FF;
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
}
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
case BI_BITFIELDS:
if (bitsPerPixel == 16) {
imageType=VERSION_3_NT_16_BIT;
}
 else if (bitsPerPixel == 32) {
imageType=VERSION_3_NT_32_BIT;
}
redMask=(int)readDWord(inputStream);
greenMask=(int)readDWord(inputStream);
blueMask=(int)readDWord(inputStream);
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
if (colorsUsed != 0) {
sizeOfPalette=(int)colorsUsed * 4;
palette=new byte[sizeOfPalette];
inputStream.read(palette,0,sizeOfPalette);
properties.put(""String_Node_Str"",palette);
}
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
default :
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
}
 else if (size == 108) {
properties.put(""String_Node_Str"",""String_Node_Str"");
redMask=(int)readDWord(inputStream);
greenMask=(int)readDWord(inputStream);
blueMask=(int)readDWord(inputStream);
alphaMask=(int)readDWord(inputStream);
long csType=readDWord(inputStream);
int redX=readLong(inputStream);
int redY=readLong(inputStream);
int redZ=readLong(inputStream);
int greenX=readLong(inputStream);
int greenY=readLong(inputStream);
int greenZ=readLong(inputStream);
int blueX=readLong(inputStream);
int blueY=readLong(inputStream);
int blueZ=readLong(inputStream);
long gammaRed=readDWord(inputStream);
long gammaGreen=readDWord(inputStream);
long gammaBlue=readDWord(inputStream);
int numberOfEntries=(int)((bitmapOffset - 14 - size) / 4);
int sizeOfPalette=numberOfEntries * 4;
palette=new byte[sizeOfPalette];
inputStream.read(palette,0,sizeOfPalette);
if (palette != null || palette.length != 0) {
properties.put(""String_Node_Str"",palette);
}
switch ((int)csType) {
case LCS_CALIBRATED_RGB:
properties.put(""String_Node_Str"",""String_Node_Str"");
properties.put(""String_Node_Str"",new Integer(redX));
properties.put(""String_Node_Str"",new Integer(redY));
properties.put(""String_Node_Str"",new Integer(redZ));
properties.put(""String_Node_Str"",new Integer(greenX));
properties.put(""String_Node_Str"",new Integer(greenY));
properties.put(""String_Node_Str"",new Integer(greenZ));
properties.put(""String_Node_Str"",new Integer(blueX));
properties.put(""String_Node_Str"",new Integer(blueY));
properties.put(""String_Node_Str"",new Integer(blueZ));
properties.put(""String_Node_Str"",new Long(gammaRed));
properties.put(""String_Node_Str"",new Long(gammaGreen));
properties.put(""String_Node_Str"",new Long(gammaBlue));
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
case LCS_sRGB:
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
case LCS_CMYK:
properties.put(""String_Node_Str"",""String_Node_Str"");
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
if (bitsPerPixel == 1) {
imageType=VERSION_4_1_BIT;
}
 else if (bitsPerPixel == 4) {
imageType=VERSION_4_4_BIT;
}
 else if (bitsPerPixel == 8) {
imageType=VERSION_4_8_BIT;
}
 else if (bitsPerPixel == 16) {
imageType=VERSION_4_16_BIT;
if ((int)compression == BI_RGB) {
redMask=0x7C00;
greenMask=0x3E0;
blueMask=0x1F;
}
}
 else if (bitsPerPixel == 24) {
imageType=VERSION_4_24_BIT;
}
 else if (bitsPerPixel == 32) {
imageType=VERSION_4_32_BIT;
if ((int)compression == BI_RGB) {
redMask=0x00FF0000;
greenMask=0x0000FF00;
blueMask=0x000000FF;
}
}
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
properties.put(""String_Node_Str"",new Integer(alphaMask));
}
 else {
properties.put(""String_Node_Str"",""String_Node_Str"");
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
}
}
 catch (IOException ioe) {
String message=JaiI18N.getString(""String_Node_Str"");
ImagingListenerProxy.errorOccurred(message,new ImagingException(message,ioe),this,false);
}
if (height > 0) {
isBottomUp=true;
}
 else {
isBottomUp=false;
height=Math.abs(height);
}
tileWidth=width;
tileHeight=height;
if (bitsPerPixel == 1 || bitsPerPixel == 4 || bitsPerPixel == 8) {
numBands=1;
if (bitsPerPixel == 8) {
sampleModel=RasterFactory.createPixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,numBands);
}
 else {
sampleModel=new MultiPixelPackedSampleModel(DataBuffer.TYPE_BYTE,width,height,bitsPerPixel);
}
byte r[], g[], b[];
int size;
if (imageType == VERSION_2_1_BIT || imageType == VERSION_2_4_BIT || imageType == VERSION_2_8_BIT) {
size=palette.length / 3;
if (size > 256) {
size=256;
}
int off;
r=new byte[size];
g=new byte[size];
b=new byte[size];
for (int i=0; i < size; i++) {
off=3 * i;
b[i]=palette[off];
g[i]=palette[off + 1];
r[i]=palette[off + 2];
}
}
 else {
size=palette.length / 4;
if (size > 256) {
size=256;
}
int off;
r=new byte[size];
g=new byte[size];
b=new byte[size];
for (int i=0; i < size; i++) {
off=4 * i;
b[i]=palette[off];
g[i]=palette[off + 1];
r[i]=palette[off + 2];
}
}
if (ImageCodec.isIndicesForGrayscale(r,g,b)) colorModel=ImageCodec.createComponentColorModel(sampleModel);
 else colorModel=new IndexColorModel(bitsPerPixel,size,r,g,b);
}
 else if (bitsPerPixel == 16) {
numBands=3;
sampleModel=new SinglePixelPackedSampleModel(DataBuffer.TYPE_USHORT,width,height,new int[]{redMask,greenMask,blueMask});
colorModel=new DirectColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),16,redMask,greenMask,blueMask,0,false,DataBuffer.TYPE_USHORT);
}
 else if (bitsPerPixel == 32) {
numBands=alphaMask == 0 ? 3 : 4;
int[] bitMasks=numBands == 3 ? new int[]{redMask,greenMask,blueMask} : new int[]{redMask,greenMask,blueMask,alphaMask};
sampleModel=new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT,width,height,bitMasks);
colorModel=new DirectColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),32,redMask,greenMask,blueMask,alphaMask,false,DataBuffer.TYPE_INT);
}
 else {
numBands=3;
sampleModel=RasterFactory.createPixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,numBands);
colorModel=ImageCodec.createComponentColorModel(sampleModel);
}
}","/** 
 * Constructor for BMPImage
 * @param stream
 */
public BMPImage(InputStream stream){
  if (stream instanceof BufferedInputStream) {
    inputStream=(BufferedInputStream)stream;
  }
 else {
    inputStream=new BufferedInputStream(stream);
  }
  try {
    inputStream.mark(Integer.MAX_VALUE);
    if (!(readUnsignedByte(inputStream) == 'B' && readUnsignedByte(inputStream) == 'M')) {
      throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
    }
    bitmapFileSize=readDWord(inputStream);
    readWord(inputStream);
    readWord(inputStream);
    bitmapOffset=readDWord(inputStream);
    long size=readDWord(inputStream);
    if (size == 12) {
      width=readWord(inputStream);
      height=readWord(inputStream);
    }
 else {
      width=readLong(inputStream);
      height=readLong(inputStream);
    }
    int planes=readWord(inputStream);
    bitsPerPixel=readWord(inputStream);
    properties.put(""String_Node_Str"",new Integer(planes));
    properties.put(""String_Node_Str"",new Integer(bitsPerPixel));
    numBands=3;
    if (size == 12) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      if (bitsPerPixel == 1) {
        imageType=VERSION_2_1_BIT;
      }
 else       if (bitsPerPixel == 4) {
        imageType=VERSION_2_4_BIT;
      }
 else       if (bitsPerPixel == 8) {
        imageType=VERSION_2_8_BIT;
      }
 else       if (bitsPerPixel == 24) {
        imageType=VERSION_2_24_BIT;
      }
      int numberOfEntries=(int)((bitmapOffset - 14 - size) / 3);
      int sizeOfPalette=numberOfEntries * 3;
      palette=new byte[sizeOfPalette];
      inputStream.read(palette,0,sizeOfPalette);
      properties.put(""String_Node_Str"",palette);
    }
 else {
      compression=readDWord(inputStream);
      imageSize=readDWord(inputStream);
      long xPelsPerMeter=readLong(inputStream);
      long yPelsPerMeter=readLong(inputStream);
      long colorsUsed=readDWord(inputStream);
      long colorsImportant=readDWord(inputStream);
switch ((int)compression) {
case BI_RGB:
        properties.put(""String_Node_Str"",""String_Node_Str"");
      break;
case BI_RLE8:
    properties.put(""String_Node_Str"",""String_Node_Str"");
  break;
case BI_RLE4:
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
case BI_BITFIELDS:
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
}
properties.put(""String_Node_Str"",new Long(xPelsPerMeter));
properties.put(""String_Node_Str"",new Long(yPelsPerMeter));
properties.put(""String_Node_Str"",new Long(colorsUsed));
properties.put(""String_Node_Str"",new Long(colorsImportant));
if (size == 40) {
switch ((int)compression) {
case BI_RGB:
case BI_RLE8:
case BI_RLE4:
int numberOfEntries=(int)((bitmapOffset - 14 - size) / 4);
int sizeOfPalette=numberOfEntries * 4;
palette=new byte[sizeOfPalette];
inputStream.read(palette,0,sizeOfPalette);
properties.put(""String_Node_Str"",palette);
if (bitsPerPixel == 1) {
imageType=VERSION_3_1_BIT;
}
 else if (bitsPerPixel == 4) {
imageType=VERSION_3_4_BIT;
}
 else if (bitsPerPixel == 8) {
imageType=VERSION_3_8_BIT;
}
 else if (bitsPerPixel == 24) {
imageType=VERSION_3_24_BIT;
}
 else if (bitsPerPixel == 16) {
imageType=VERSION_3_NT_16_BIT;
redMask=0x7C00;
greenMask=0x3E0;
blueMask=0x1F;
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
}
 else if (bitsPerPixel == 32) {
imageType=VERSION_3_NT_32_BIT;
redMask=0x00FF0000;
greenMask=0x0000FF00;
blueMask=0x000000FF;
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
}
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
case BI_BITFIELDS:
if (bitsPerPixel == 16) {
imageType=VERSION_3_NT_16_BIT;
}
 else if (bitsPerPixel == 32) {
imageType=VERSION_3_NT_32_BIT;
}
redMask=(int)readDWord(inputStream);
greenMask=(int)readDWord(inputStream);
blueMask=(int)readDWord(inputStream);
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
if (colorsUsed != 0) {
sizeOfPalette=(int)colorsUsed * 4;
palette=new byte[sizeOfPalette];
inputStream.read(palette,0,sizeOfPalette);
properties.put(""String_Node_Str"",palette);
}
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
default :
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
}
 else if (size == 108) {
properties.put(""String_Node_Str"",""String_Node_Str"");
redMask=(int)readDWord(inputStream);
greenMask=(int)readDWord(inputStream);
blueMask=(int)readDWord(inputStream);
alphaMask=(int)readDWord(inputStream);
long csType=readDWord(inputStream);
int redX=readLong(inputStream);
int redY=readLong(inputStream);
int redZ=readLong(inputStream);
int greenX=readLong(inputStream);
int greenY=readLong(inputStream);
int greenZ=readLong(inputStream);
int blueX=readLong(inputStream);
int blueY=readLong(inputStream);
int blueZ=readLong(inputStream);
long gammaRed=readDWord(inputStream);
long gammaGreen=readDWord(inputStream);
long gammaBlue=readDWord(inputStream);
int numberOfEntries=(int)((bitmapOffset - 14 - size) / 4);
int sizeOfPalette=numberOfEntries * 4;
palette=new byte[sizeOfPalette];
inputStream.read(palette,0,sizeOfPalette);
if (palette != null || palette.length != 0) {
properties.put(""String_Node_Str"",palette);
}
switch ((int)csType) {
case LCS_CALIBRATED_RGB:
properties.put(""String_Node_Str"",""String_Node_Str"");
properties.put(""String_Node_Str"",new Integer(redX));
properties.put(""String_Node_Str"",new Integer(redY));
properties.put(""String_Node_Str"",new Integer(redZ));
properties.put(""String_Node_Str"",new Integer(greenX));
properties.put(""String_Node_Str"",new Integer(greenY));
properties.put(""String_Node_Str"",new Integer(greenZ));
properties.put(""String_Node_Str"",new Integer(blueX));
properties.put(""String_Node_Str"",new Integer(blueY));
properties.put(""String_Node_Str"",new Integer(blueZ));
properties.put(""String_Node_Str"",new Long(gammaRed));
properties.put(""String_Node_Str"",new Long(gammaGreen));
properties.put(""String_Node_Str"",new Long(gammaBlue));
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
case LCS_sRGB:
properties.put(""String_Node_Str"",""String_Node_Str"");
break;
case LCS_CMYK:
properties.put(""String_Node_Str"",""String_Node_Str"");
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
if (bitsPerPixel == 1) {
imageType=VERSION_4_1_BIT;
}
 else if (bitsPerPixel == 4) {
imageType=VERSION_4_4_BIT;
}
 else if (bitsPerPixel == 8) {
imageType=VERSION_4_8_BIT;
}
 else if (bitsPerPixel == 16) {
imageType=VERSION_4_16_BIT;
if ((int)compression == BI_RGB) {
redMask=0x7C00;
greenMask=0x3E0;
blueMask=0x1F;
}
}
 else if (bitsPerPixel == 24) {
imageType=VERSION_4_24_BIT;
}
 else if (bitsPerPixel == 32) {
imageType=VERSION_4_32_BIT;
if ((int)compression == BI_RGB) {
redMask=0x00FF0000;
greenMask=0x0000FF00;
blueMask=0x000000FF;
}
}
properties.put(""String_Node_Str"",new Integer(redMask));
properties.put(""String_Node_Str"",new Integer(greenMask));
properties.put(""String_Node_Str"",new Integer(blueMask));
properties.put(""String_Node_Str"",new Integer(alphaMask));
}
 else {
properties.put(""String_Node_Str"",""String_Node_Str"");
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
}
}
 catch (IOException ioe) {
String message=JaiI18N.getString(""String_Node_Str"");
ImagingListenerProxy.errorOccurred(message,new ImagingException(message,ioe),this,false);
}
if (height > 0) {
isBottomUp=true;
}
 else {
isBottomUp=false;
height=Math.abs(height);
}
tileWidth=width;
tileHeight=height;
if (bitsPerPixel == 1 || bitsPerPixel == 4 || bitsPerPixel == 8) {
numBands=1;
if (bitsPerPixel == 8) {
sampleModel=RasterFactory.createPixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,numBands);
}
 else {
sampleModel=new MultiPixelPackedSampleModel(DataBuffer.TYPE_BYTE,width,height,bitsPerPixel);
}
byte r[], g[], b[];
int size;
if (imageType == VERSION_2_1_BIT || imageType == VERSION_2_4_BIT || imageType == VERSION_2_8_BIT) {
size=palette.length / 3;
if (size > 256) {
size=256;
}
int off;
r=new byte[size];
g=new byte[size];
b=new byte[size];
for (int i=0; i < size; i++) {
off=3 * i;
b[i]=palette[off];
g[i]=palette[off + 1];
r[i]=palette[off + 2];
}
}
 else {
size=palette.length / 4;
if (size > 256) {
size=256;
}
int off;
r=new byte[size];
g=new byte[size];
b=new byte[size];
for (int i=0; i < size; i++) {
off=4 * i;
b[i]=palette[off];
g[i]=palette[off + 1];
r[i]=palette[off + 2];
}
}
if (ImageCodec.isIndicesForGrayscale(r,g,b)) colorModel=ImageCodec.createComponentColorModel(sampleModel);
 else colorModel=new IndexColorModel(bitsPerPixel,size,r,g,b);
}
 else if (bitsPerPixel == 16) {
numBands=3;
sampleModel=new SinglePixelPackedSampleModel(DataBuffer.TYPE_USHORT,width,height,new int[]{redMask,greenMask,blueMask});
colorModel=new DirectColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),16,redMask,greenMask,blueMask,0,false,DataBuffer.TYPE_USHORT);
}
 else if (bitsPerPixel == 32) {
numBands=alphaMask == 0 ? 3 : 4;
int[] bitMasks=numBands == 3 ? new int[]{redMask,greenMask,blueMask} : new int[]{redMask,greenMask,blueMask,alphaMask};
sampleModel=new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT,width,height,bitMasks);
colorModel=new DirectColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),32,redMask,greenMask,blueMask,alphaMask,false,DataBuffer.TYPE_INT);
}
 else {
numBands=3;
sampleModel=RasterFactory.createPixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,numBands);
colorModel=ImageCodec.createComponentColorModel(sampleModel);
}
try {
inputStream.reset();
inputStream.skip(bitmapOffset);
}
 catch (IOException ioe) {
String message=JaiI18N.getString(""String_Node_Str"");
ImagingListenerProxy.errorOccurred(message,new ImagingException(message,ioe),this,false);
}
}",0.9859688652191724
153992,"/** 
 * Returns the image's bounds as a <code>Rectangle</code>. <p> The image's bounds are defined by the values returned by <code>getMinX()</code>, <code>getMinY()</code>, <code>getWidth()</code>, and <code>getHeight()</code>. A <code>Rectangle</code> is created based on these four methods and cached in this class.  Each time that this method is invoked, the bounds of this <code>Rectangle</code> are updated with the values returned by the four aforementioned accessors. <p> Because this method returns the <code>bounds</code> variable by reference, the caller should not change the settings of the <code>Rectangle</code>.  Otherwise, unexpected errors may occur. Likewise, if the caller expects this variable to be immutable it should clone the returned <code>Rectangle</code> if there is any possibility that it might be changed by the <code>PlanarImage</code>. This may generally occur only for instances of <code>RenderedOp</code>.
 */
public Rectangle getBounds(){
  if (bounds == null) {
synchronized (this) {
      bounds=new Rectangle(getMinX(),getMinY(),getWidth(),getHeight());
    }
  }
 else {
synchronized (bounds) {
      bounds.setBounds(getMinX(),getMinY(),getWidth(),getHeight());
    }
  }
  return bounds;
}","/** 
 * Returns the image's bounds as a <code>Rectangle</code>. <p> The image's bounds are defined by the values returned by <code>getMinX()</code>, <code>getMinY()</code>, <code>getWidth()</code>, and <code>getHeight()</code>. A <code>Rectangle</code> is created based on these four methods and cached in this class.  Each time that this method is invoked, the bounds of this <code>Rectangle</code> are updated with the values returned by the four aforementioned accessors. <p> Because this method returns the <code>bounds</code> variable by reference, the caller should not change the settings of the <code>Rectangle</code>.  Otherwise, unexpected errors may occur. Likewise, if the caller expects this variable to be immutable it should clone the returned <code>Rectangle</code> if there is any possibility that it might be changed by the <code>PlanarImage</code>. This may generally occur only for instances of <code>RenderedOp</code>.
 */
public Rectangle getBounds(){
synchronized (bounds) {
    bounds.setBounds(getMinX(),getMinY(),getWidth(),getHeight());
  }
  return bounds;
}",0.9101899827288428
153993,"private int encode(RenderedImage im,TIFFEncodeParam encodeParam,int ifdOffset,boolean isLast) throws IOException {
  if (CodecUtils.isPackedByteImage(im)) {
    ColorModel sourceCM=im.getColorModel();
    ColorModel destCM=RasterFactory.createComponentColorModel(DataBuffer.TYPE_BYTE,sourceCM.getColorSpace(),sourceCM.hasAlpha(),sourceCM.isAlphaPremultiplied(),sourceCM.getTransparency());
    Point origin=new Point(im.getMinX(),im.getMinY());
    WritableRaster raster=Raster.createWritableRaster(destCM.createCompatibleSampleModel(im.getWidth(),im.getHeight()),origin);
    raster.setRect(im.getData());
    im=new SingleTileRenderedImage(raster,destCM);
  }
  int compression=encodeParam.getCompression();
  boolean isTiled=encodeParam.getWriteTiled();
  int minX=im.getMinX();
  int minY=im.getMinY();
  int width=im.getWidth();
  int height=im.getHeight();
  SampleModel sampleModel=im.getSampleModel();
  int sampleSize[]=sampleModel.getSampleSize();
  for (int i=1; i < sampleSize.length; i++) {
    if (sampleSize[i] != sampleSize[0]) {
      throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
    }
  }
  int numBands=sampleModel.getNumBands();
  if ((sampleSize[0] == 1 || sampleSize[0] == 4) && numBands != 1) {
    throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
  }
  int dataType=sampleModel.getDataType();
switch (dataType) {
case DataBuffer.TYPE_BYTE:
    if (sampleSize[0] != 1 && sampleSize[0] != 4 && sampleSize[0] != 8) {
      throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
    }
  break;
case DataBuffer.TYPE_SHORT:
case DataBuffer.TYPE_USHORT:
if (sampleSize[0] != 16) {
  throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
break;
case DataBuffer.TYPE_INT:
case DataBuffer.TYPE_FLOAT:
if (sampleSize[0] != 32) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
break;
default :
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
boolean dataTypeIsShort=dataType == DataBuffer.TYPE_SHORT || dataType == DataBuffer.TYPE_USHORT;
ColorModel colorModel=im.getColorModel();
if (colorModel != null && colorModel instanceof IndexColorModel && dataType != DataBuffer.TYPE_BYTE) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
IndexColorModel icm=null;
int sizeOfColormap=0;
int colormap[]=null;
int imageType=TIFF_UNSUPPORTED;
int numExtraSamples=0;
int extraSampleType=EXTRA_SAMPLE_UNSPECIFIED;
if (colorModel instanceof IndexColorModel) {
icm=(IndexColorModel)colorModel;
int mapSize=icm.getMapSize();
if (sampleSize[0] == 1 && numBands == 1) {
if (mapSize != 2) {
throw new IllegalArgumentException(JaiI18N.getString(""String_Node_Str""));
}
byte r[]=new byte[mapSize];
icm.getReds(r);
byte g[]=new byte[mapSize];
icm.getGreens(g);
byte b[]=new byte[mapSize];
icm.getBlues(b);
if ((r[0] & 0xff) == 0 && (r[1] & 0xff) == 255 && (g[0] & 0xff) == 0 && (g[1] & 0xff) == 255 && (b[0] & 0xff) == 0 && (b[1] & 0xff) == 255) {
imageType=TIFF_BILEVEL_BLACK_IS_ZERO;
}
 else if ((r[0] & 0xff) == 255 && (r[1] & 0xff) == 0 && (g[0] & 0xff) == 255 && (g[1] & 0xff) == 0 && (b[0] & 0xff) == 255 && (b[1] & 0xff) == 0) {
imageType=TIFF_BILEVEL_WHITE_IS_ZERO;
}
 else {
imageType=TIFF_PALETTE;
}
}
 else if (numBands == 1) {
imageType=TIFF_PALETTE;
}
}
 else if (colorModel == null) {
if (sampleSize[0] == 1 && numBands == 1) {
imageType=TIFF_BILEVEL_BLACK_IS_ZERO;
}
 else {
imageType=TIFF_GENERIC;
if (numBands > 1) {
numExtraSamples=numBands - 1;
}
}
}
 else {
ColorSpace colorSpace=colorModel.getColorSpace();
switch (colorSpace.getType()) {
case ColorSpace.TYPE_CMYK:
imageType=TIFF_CMYK;
break;
case ColorSpace.TYPE_GRAY:
imageType=TIFF_GRAY;
break;
case ColorSpace.TYPE_Lab:
imageType=TIFF_CIELAB;
break;
case ColorSpace.TYPE_RGB:
if (compression == COMP_JPEG_TTN2 && encodeParam.getJPEGCompressRGBToYCbCr()) {
imageType=TIFF_YCBCR;
}
 else {
imageType=TIFF_RGB;
}
break;
case ColorSpace.TYPE_YCbCr:
imageType=TIFF_YCBCR;
break;
default :
imageType=TIFF_GENERIC;
break;
}
if (imageType == TIFF_GENERIC) {
numExtraSamples=numBands - 1;
}
 else if (numBands > 1) {
numExtraSamples=numBands - colorSpace.getNumComponents();
}
if (numExtraSamples == 1 && colorModel.hasAlpha()) {
extraSampleType=colorModel.isAlphaPremultiplied() ? EXTRA_SAMPLE_ASSOCIATED_ALPHA : EXTRA_SAMPLE_UNASSOCIATED_ALPHA;
}
}
if (imageType == TIFF_UNSUPPORTED) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
if (compression == COMP_JPEG_TTN2) {
if (imageType == TIFF_PALETTE) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
 else if (!(sampleSize[0] == 8 && (imageType == TIFF_GRAY || imageType == TIFF_RGB || imageType == TIFF_YCBCR))) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
}
if ((imageType != TIFF_BILEVEL_WHITE_IS_ZERO && imageType != TIFF_BILEVEL_BLACK_IS_ZERO) && (compression == COMP_GROUP3_1D || compression == COMP_GROUP3_2D || compression == COMP_GROUP4)) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
int photometricInterpretation=-1;
switch (imageType) {
case TIFF_BILEVEL_WHITE_IS_ZERO:
photometricInterpretation=0;
break;
case TIFF_BILEVEL_BLACK_IS_ZERO:
photometricInterpretation=1;
break;
case TIFF_GRAY:
case TIFF_GENERIC:
photometricInterpretation=1;
break;
case TIFF_PALETTE:
photometricInterpretation=3;
icm=(IndexColorModel)colorModel;
sizeOfColormap=icm.getMapSize();
byte r[]=new byte[sizeOfColormap];
icm.getReds(r);
byte g[]=new byte[sizeOfColormap];
icm.getGreens(g);
byte b[]=new byte[sizeOfColormap];
icm.getBlues(b);
int redIndex=0, greenIndex=sizeOfColormap;
int blueIndex=2 * sizeOfColormap;
colormap=new int[sizeOfColormap * 3];
for (int i=0; i < sizeOfColormap; i++) {
colormap[redIndex++]=(r[i] << 8) & 0xffff;
colormap[greenIndex++]=(g[i] << 8) & 0xffff;
colormap[blueIndex++]=(b[i] << 8) & 0xffff;
}
sizeOfColormap*=3;
break;
case TIFF_RGB:
photometricInterpretation=2;
break;
case TIFF_CMYK:
photometricInterpretation=5;
break;
case TIFF_YCBCR:
photometricInterpretation=6;
break;
case TIFF_CIELAB:
photometricInterpretation=8;
break;
default :
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
int tileWidth;
int tileHeight;
if (isTiled) {
tileWidth=encodeParam.getTileWidth() > 0 ? encodeParam.getTileWidth() : im.getTileWidth();
tileHeight=encodeParam.getTileHeight() > 0 ? encodeParam.getTileHeight() : im.getTileHeight();
}
 else {
tileWidth=width;
tileHeight=encodeParam.getTileHeight() > 0 ? encodeParam.getTileHeight() : DEFAULT_ROWS_PER_STRIP;
}
JPEGEncodeParam jep=null;
if (compression == COMP_JPEG_TTN2) {
jep=encodeParam.getJPEGEncodeParam();
int maxSubH=jep.getHorizontalSubsampling(0);
int maxSubV=jep.getVerticalSubsampling(0);
for (int i=1; i < numBands; i++) {
int subH=jep.getHorizontalSubsampling(i);
if (subH > maxSubH) {
maxSubH=subH;
}
int subV=jep.getVerticalSubsampling(i);
if (subV > maxSubV) {
maxSubV=subV;
}
}
int factorV=8 * maxSubV;
tileHeight=(int)((float)tileHeight / (float)factorV + 0.5F) * factorV;
if (tileHeight < factorV) {
tileHeight=factorV;
}
if (isTiled) {
int factorH=8 * maxSubH;
tileWidth=(int)((float)tileWidth / (float)factorH + 0.5F) * factorH;
if (tileWidth < factorH) {
tileWidth=factorH;
}
}
}
int numTiles;
if (isTiled) {
numTiles=((width + tileWidth - 1) / tileWidth) * ((height + tileHeight - 1) / tileHeight);
}
 else {
numTiles=(int)Math.ceil((double)height / (double)tileHeight);
}
long tileByteCounts[]=new long[numTiles];
long bytesPerRow=(long)Math.ceil((sampleSize[0] / 8.0) * tileWidth * numBands);
long bytesPerTile=bytesPerRow * tileHeight;
for (int i=0; i < numTiles; i++) {
tileByteCounts[i]=bytesPerTile;
}
if (!isTiled) {
long lastStripRows=height - (tileHeight * (numTiles - 1));
tileByteCounts[numTiles - 1]=lastStripRows * bytesPerRow;
}
long totalBytesOfData=bytesPerTile * (numTiles - 1) + tileByteCounts[numTiles - 1];
long tileOffsets[]=new long[numTiles];
SortedSet fields=new TreeSet();
fields.add(new TIFFField(TIFFImageDecoder.TIFF_IMAGE_WIDTH,TIFFField.TIFF_LONG,1,(Object)(new long[]{(long)width})));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_IMAGE_LENGTH,TIFFField.TIFF_LONG,1,new long[]{(long)height}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_BITS_PER_SAMPLE,TIFFField.TIFF_SHORT,numBands,intsToChars(sampleSize)));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_COMPRESSION,TIFFField.TIFF_SHORT,1,new char[]{(char)compression}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_PHOTOMETRIC_INTERPRETATION,TIFFField.TIFF_SHORT,1,new char[]{(char)photometricInterpretation}));
if (!isTiled) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_STRIP_OFFSETS,TIFFField.TIFF_LONG,numTiles,(long[])tileOffsets));
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_SAMPLES_PER_PIXEL,TIFFField.TIFF_SHORT,1,new char[]{(char)numBands}));
if (!isTiled) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_ROWS_PER_STRIP,TIFFField.TIFF_LONG,1,new long[]{(long)tileHeight}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_STRIP_BYTE_COUNTS,TIFFField.TIFF_LONG,numTiles,(long[])tileByteCounts));
}
if (colormap != null) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_COLORMAP,TIFFField.TIFF_SHORT,sizeOfColormap,intsToChars(colormap)));
}
if (isTiled) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_WIDTH,TIFFField.TIFF_LONG,1,new long[]{(long)tileWidth}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_LENGTH,TIFFField.TIFF_LONG,1,new long[]{(long)tileHeight}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_OFFSETS,TIFFField.TIFF_LONG,numTiles,(long[])tileOffsets));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_BYTE_COUNTS,TIFFField.TIFF_LONG,numTiles,(long[])tileByteCounts));
}
if (numExtraSamples > 0) {
int[] extraSamples=new int[numExtraSamples];
for (int i=0; i < numExtraSamples; i++) {
extraSamples[i]=extraSampleType;
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_EXTRA_SAMPLES,TIFFField.TIFF_SHORT,numExtraSamples,intsToChars(extraSamples)));
}
if (dataType != DataBuffer.TYPE_BYTE) {
int[] sampleFormat=new int[numBands];
if (dataType == DataBuffer.TYPE_FLOAT) {
sampleFormat[0]=3;
}
 else if (dataType == DataBuffer.TYPE_USHORT) {
sampleFormat[0]=1;
}
 else {
sampleFormat[0]=2;
}
for (int b=1; b < numBands; b++) {
sampleFormat[b]=sampleFormat[0];
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_SAMPLE_FORMAT,TIFFField.TIFF_SHORT,numBands,intsToChars(sampleFormat)));
}
boolean inverseFill=encodeParam.getReverseFillOrder();
boolean T4encode2D=encodeParam.getT4Encode2D();
boolean T4PadEOLs=encodeParam.getT4PadEOLs();
TIFFFaxEncoder faxEncoder=null;
if ((imageType == TIFF_BILEVEL_BLACK_IS_ZERO || imageType == TIFF_BILEVEL_WHITE_IS_ZERO) && (compression == COMP_GROUP3_1D || compression == COMP_GROUP3_2D || compression == COMP_GROUP4)) {
faxEncoder=new TIFFFaxEncoder(inverseFill);
fields.add(new TIFFField(TIFFImageDecoder.TIFF_FILL_ORDER,TIFFField.TIFF_SHORT,1,new char[]{inverseFill ? (char)2 : (char)1}));
if (compression == COMP_GROUP3_2D) {
long T4Options=0x00000000;
if (T4encode2D) {
T4Options|=0x00000001;
}
if (T4PadEOLs) {
T4Options|=0x00000004;
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_T4_OPTIONS,TIFFField.TIFF_LONG,1,new long[]{T4Options}));
}
 else if (compression == COMP_GROUP4) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_T6_OPTIONS,TIFFField.TIFF_LONG,1,new long[]{(long)0x00000000}));
}
}
com.sun.image.codec.jpeg.JPEGEncodeParam jpegEncodeParam=null;
com.sun.image.codec.jpeg.JPEGImageEncoder jpegEncoder=null;
int jpegColorID=0;
if (compression == COMP_JPEG_TTN2) {
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_UNKNOWN;
switch (imageType) {
case TIFF_GRAY:
case TIFF_PALETTE:
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_GRAY;
break;
case TIFF_RGB:
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_RGB;
break;
case TIFF_YCBCR:
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_YCbCr;
break;
}
Raster tile00=im.getTile(0,0);
jpegEncodeParam=com.sun.image.codec.jpeg.JPEGCodec.getDefaultJPEGEncodeParam(tile00,jpegColorID);
JPEGImageEncoder.modifyEncodeParam(jep,jpegEncodeParam,numBands);
if (jep.getWriteImageOnly()) {
jpegEncodeParam.setImageInfoValid(false);
jpegEncodeParam.setTableInfoValid(true);
ByteArrayOutputStream tableStream=new ByteArrayOutputStream();
jpegEncoder=com.sun.image.codec.jpeg.JPEGCodec.createJPEGEncoder(tableStream,jpegEncodeParam);
jpegEncoder.encode(tile00);
byte[] tableData=tableStream.toByteArray();
fields.add(new TIFFField(TIFF_JPEG_TABLES,TIFFField.TIFF_UNDEFINED,tableData.length,tableData));
jpegEncoder=null;
}
}
if (imageType == TIFF_YCBCR) {
int subsampleH=1;
int subsampleV=1;
if (compression == COMP_JPEG_TTN2) {
subsampleH=jep.getHorizontalSubsampling(0);
subsampleV=jep.getVerticalSubsampling(0);
for (int i=1; i < numBands; i++) {
int subH=jep.getHorizontalSubsampling(i);
if (subH > subsampleH) {
subsampleH=subH;
}
int subV=jep.getVerticalSubsampling(i);
if (subV > subsampleV) {
subsampleV=subV;
}
}
}
fields.add(new TIFFField(TIFF_YCBCR_SUBSAMPLING,TIFFField.TIFF_SHORT,2,new char[]{(char)subsampleH,(char)subsampleV}));
fields.add(new TIFFField(TIFF_YCBCR_POSITIONING,TIFFField.TIFF_SHORT,1,new char[]{compression == COMP_JPEG_TTN2 ? (char)1 : (char)2}));
long[][] refbw;
if (compression == COMP_JPEG_TTN2) {
refbw=new long[][]{{0,1},{255,1},{128,1},{255,1},{128,1},{255,1}};
}
 else {
refbw=new long[][]{{15,1},{235,1},{128,1},{240,1},{128,1},{240,1}};
}
fields.add(new TIFFField(TIFF_REF_BLACK_WHITE,TIFFField.TIFF_RATIONAL,6,refbw));
}
TIFFField[] extraFields=encodeParam.getExtraFields();
if (extraFields != null) {
ArrayList extantTags=new ArrayList(fields.size());
Iterator fieldIter=fields.iterator();
while (fieldIter.hasNext()) {
TIFFField fld=(TIFFField)fieldIter.next();
extantTags.add(new Integer(fld.getTag()));
}
int numExtraFields=extraFields.length;
for (int i=0; i < numExtraFields; i++) {
TIFFField fld=extraFields[i];
Integer tagValue=new Integer(fld.getTag());
if (!extantTags.contains(tagValue)) {
fields.add(fld);
extantTags.add(tagValue);
}
}
}
int dirSize=getDirectorySize(fields);
tileOffsets[0]=ifdOffset + dirSize;
OutputStream outCache=null;
byte[] compressBuf=null;
File tempFile=null;
int nextIFDOffset=0;
boolean skipByte=false;
Deflater deflater=null;
int deflateLevel=Deflater.DEFAULT_COMPRESSION;
boolean jpegRGBToYCbCr=false;
if (compression == COMP_NONE) {
int numBytesPadding=0;
if (sampleSize[0] == 16 && tileOffsets[0] % 2 != 0) {
numBytesPadding=1;
tileOffsets[0]++;
}
 else if (sampleSize[0] == 32 && tileOffsets[0] % 4 != 0) {
numBytesPadding=(int)(4 - tileOffsets[0] % 4);
tileOffsets[0]+=numBytesPadding;
}
for (int i=1; i < numTiles; i++) {
tileOffsets[i]=tileOffsets[i - 1] + tileByteCounts[i - 1];
}
if (!isLast) {
nextIFDOffset=(int)(tileOffsets[0] + totalBytesOfData);
if (nextIFDOffset % 2 != 0) {
nextIFDOffset++;
skipByte=true;
}
}
writeDirectory(ifdOffset,fields,nextIFDOffset);
if (numBytesPadding != 0) {
for (int padding=0; padding < numBytesPadding; padding++) {
output.write((byte)0);
}
}
}
 else {
if ((output instanceof SeekableOutputStream)) {
((SeekableOutputStream)output).seek(tileOffsets[0]);
}
 else {
outCache=output;
try {
tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
tempFile.deleteOnExit();
RandomAccessFile raFile=new RandomAccessFile(tempFile,""String_Node_Str"");
output=new SeekableOutputStream(raFile);
}
 catch (Exception e) {
tempFile=null;
output=new ByteArrayOutputStream((int)totalBytesOfData);
}
}
int bufSize=0;
switch (compression) {
case COMP_GROUP3_1D:
bufSize=(int)Math.ceil((((tileWidth + 1) / 2) * 9 + 2) / 8.0);
break;
case COMP_GROUP3_2D:
case COMP_GROUP4:
bufSize=(int)Math.ceil((((tileWidth + 1) / 2) * 9 + 2) / 8.0);
bufSize=tileHeight * (bufSize + 2) + 12;
break;
case COMP_PACKBITS:
bufSize=(int)(bytesPerTile + ((bytesPerRow + 127) / 128) * tileHeight);
break;
case COMP_JPEG_TTN2:
bufSize=0;
if (imageType == TIFF_YCBCR && colorModel != null && colorModel.getColorSpace().getType() == ColorSpace.TYPE_RGB) {
jpegRGBToYCbCr=true;
}
break;
case COMP_DEFLATE:
bufSize=(int)bytesPerTile;
deflater=new Deflater(encodeParam.getDeflateLevel());
break;
default :
bufSize=0;
}
if (bufSize != 0) {
compressBuf=new byte[bufSize];
}
}
int[] pixels=null;
float[] fpixels=null;
boolean checkContiguous=((sampleSize[0] == 1 && sampleModel instanceof MultiPixelPackedSampleModel && dataType == DataBuffer.TYPE_BYTE) || (sampleSize[0] == 8 && sampleModel instanceof ComponentSampleModel));
byte[] bpixels=null;
if (compression != COMP_JPEG_TTN2) {
if (dataType == DataBuffer.TYPE_BYTE) {
bpixels=new byte[tileHeight * tileWidth * numBands];
}
 else if (dataTypeIsShort) {
bpixels=new byte[2 * tileHeight * tileWidth* numBands];
}
 else if (dataType == DataBuffer.TYPE_INT || dataType == DataBuffer.TYPE_FLOAT) {
bpixels=new byte[4 * tileHeight * tileWidth* numBands];
}
}
int lastRow=minY + height;
int lastCol=minX + width;
int tileNum=0;
for (int row=minY; row < lastRow; row+=tileHeight) {
int rows=isTiled ? tileHeight : Math.min(tileHeight,lastRow - row);
int size=rows * tileWidth * numBands;
for (int col=minX; col < lastCol; col+=tileWidth) {
Raster src=im.getData(new Rectangle(col,row,tileWidth,rows));
boolean useDataBuffer=false;
if (compression != COMP_JPEG_TTN2) {
if (checkContiguous) {
if (sampleSize[0] == 8) {
ComponentSampleModel csm=(ComponentSampleModel)src.getSampleModel();
int[] bankIndices=csm.getBankIndices();
int[] bandOffsets=csm.getBandOffsets();
int pixelStride=csm.getPixelStride();
int lineStride=csm.getScanlineStride();
if (pixelStride != numBands || lineStride != bytesPerRow) {
useDataBuffer=false;
}
 else {
useDataBuffer=true;
for (int i=0; useDataBuffer && i < numBands; i++) {
if (bankIndices[i] != 0 || bandOffsets[i] != i) {
useDataBuffer=false;
}
}
}
}
 else {
MultiPixelPackedSampleModel mpp=(MultiPixelPackedSampleModel)src.getSampleModel();
if (mpp.getNumBands() == 1 && mpp.getDataBitOffset() == 0 && mpp.getPixelBitStride() == 1) {
useDataBuffer=true;
}
}
}
if (!useDataBuffer) {
if (dataType == DataBuffer.TYPE_FLOAT) {
fpixels=src.getPixels(col,row,tileWidth,rows,fpixels);
}
 else {
pixels=src.getPixels(col,row,tileWidth,rows,pixels);
}
}
}
int index;
int pixel=0;
;
int k=0;
switch (sampleSize[0]) {
case 1:
if (useDataBuffer) {
byte[] btmp=((DataBufferByte)src.getDataBuffer()).getData();
MultiPixelPackedSampleModel mpp=(MultiPixelPackedSampleModel)src.getSampleModel();
int lineStride=mpp.getScanlineStride();
int inOffset=mpp.getOffset(col - src.getSampleModelTranslateX(),row - src.getSampleModelTranslateY());
if (lineStride == (int)bytesPerRow) {
System.arraycopy(btmp,inOffset,bpixels,0,(int)bytesPerRow * rows);
}
 else {
int outOffset=0;
for (int j=0; j < rows; j++) {
System.arraycopy(btmp,inOffset,bpixels,outOffset,(int)bytesPerRow);
inOffset+=lineStride;
outOffset+=(int)bytesPerRow;
}
}
}
 else {
index=0;
for (int i=0; i < rows; i++) {
for (int j=0; j < tileWidth / 8; j++) {
pixel=(pixels[index++] << 7) | (pixels[index++] << 6) | (pixels[index++] << 5)| (pixels[index++] << 4)| (pixels[index++] << 3)| (pixels[index++] << 2)| (pixels[index++] << 1)| pixels[index++];
bpixels[k++]=(byte)pixel;
}
if (tileWidth % 8 > 0) {
pixel=0;
for (int j=0; j < tileWidth % 8; j++) {
pixel|=(pixels[index++] << (7 - j));
}
bpixels[k++]=(byte)pixel;
}
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,rows * ((tileWidth + 7) / 8));
}
 else if (compression == COMP_GROUP3_1D) {
int rowStride=(tileWidth + 7) / 8;
int rowOffset=0;
int numCompressedBytes=0;
for (int tileRow=0; tileRow < rows; tileRow++) {
int numCompressedBytesInRow=faxEncoder.encodeRLE(bpixels,rowOffset,0,tileWidth,compressBuf);
output.write(compressBuf,0,numCompressedBytesInRow);
rowOffset+=rowStride;
numCompressedBytes+=numCompressedBytesInRow;
}
tileByteCounts[tileNum++]=numCompressedBytes;
}
 else if (compression == COMP_GROUP3_2D) {
int numCompressedBytes=faxEncoder.encodeT4(!T4encode2D,T4PadEOLs,bpixels,(tileWidth + 7) / 8,0,tileWidth,rows,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_GROUP4) {
int numCompressedBytes=faxEncoder.encodeT6(bpixels,(tileWidth + 7) / 8,0,tileWidth,rows,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 4:
index=0;
for (int i=0; i < rows; i++) {
for (int j=0; j < tileWidth / 2; j++) {
pixel=(pixels[index++] << 4) | pixels[index++];
bpixels[k++]=(byte)pixel;
}
if ((tileWidth % 2) == 1) {
pixel=pixels[index++] << 4;
bpixels[k++]=(byte)pixel;
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,rows * ((tileWidth + 1) / 2));
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 8:
if (compression != COMP_JPEG_TTN2) {
if (useDataBuffer) {
byte[] btmp=((DataBufferByte)src.getDataBuffer()).getData();
ComponentSampleModel csm=(ComponentSampleModel)src.getSampleModel();
int inOffset=csm.getOffset(col - src.getSampleModelTranslateX(),row - src.getSampleModelTranslateY());
int lineStride=csm.getScanlineStride();
if (lineStride == (int)bytesPerRow) {
System.arraycopy(btmp,inOffset,bpixels,0,(int)bytesPerRow * rows);
}
 else {
int outOffset=0;
for (int j=0; j < rows; j++) {
System.arraycopy(btmp,inOffset,bpixels,outOffset,(int)bytesPerRow);
inOffset+=lineStride;
outOffset+=(int)bytesPerRow;
}
}
}
 else {
for (int i=0; i < size; i++) {
bpixels[i]=(byte)pixels[i];
}
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,size);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_JPEG_TTN2) {
long startPos=getOffset(output);
if (jpegEncoder == null || jpegEncodeParam.getWidth() != src.getWidth() || jpegEncodeParam.getHeight() != src.getHeight()) {
jpegEncodeParam=com.sun.image.codec.jpeg.JPEGCodec.getDefaultJPEGEncodeParam(src,jpegColorID);
JPEGImageEncoder.modifyEncodeParam(jep,jpegEncodeParam,numBands);
jpegEncoder=com.sun.image.codec.jpeg.JPEGCodec.createJPEGEncoder(output,jpegEncodeParam);
}
if (jpegRGBToYCbCr) {
WritableRaster wRas=null;
if (src instanceof WritableRaster) {
wRas=(WritableRaster)src;
}
 else {
wRas=src.createCompatibleWritableRaster();
wRas.setRect(src);
}
if (wRas.getMinX() != 0 || wRas.getMinY() != 0) {
wRas=wRas.createWritableTranslatedChild(0,0);
}
BufferedImage bi=new BufferedImage(colorModel,wRas,false,null);
jpegEncoder.encode(bi);
}
 else {
jpegEncoder.encode(src.createTranslatedChild(0,0));
}
long endPos=getOffset(output);
tileByteCounts[tileNum++]=(int)(endPos - startPos);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 16:
int ls=0;
for (int i=0; i < size; i++) {
short value=(short)pixels[i];
bpixels[ls++]=(byte)((value & 0xff00) >> 8);
bpixels[ls++]=(byte)(value & 0x00ff);
}
if (compression == COMP_NONE) {
output.write(bpixels,0,size * 2);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 32:
if (dataType == DataBuffer.TYPE_INT) {
int li=0;
for (int i=0; i < size; i++) {
int value=pixels[i];
bpixels[li++]=(byte)((value & 0xff000000) >> 24);
bpixels[li++]=(byte)((value & 0x00ff0000) >> 16);
bpixels[li++]=(byte)((value & 0x0000ff00) >> 8);
bpixels[li++]=(byte)(value & 0x000000ff);
}
}
 else {
int lf=0;
for (int i=0; i < size; i++) {
int value=Float.floatToIntBits(fpixels[i]);
bpixels[lf++]=(byte)((value & 0xff000000) >> 24);
bpixels[lf++]=(byte)((value & 0x00ff0000) >> 16);
bpixels[lf++]=(byte)((value & 0x0000ff00) >> 8);
bpixels[lf++]=(byte)(value & 0x000000ff);
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,size * 4);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
}
}
}
if (compression == COMP_NONE) {
if (skipByte) {
output.write((byte)0);
}
}
 else {
int totalBytes=0;
for (int i=1; i < numTiles; i++) {
int numBytes=(int)tileByteCounts[i - 1];
totalBytes+=numBytes;
tileOffsets[i]=tileOffsets[i - 1] + numBytes;
}
totalBytes+=(int)tileByteCounts[numTiles - 1];
nextIFDOffset=isLast ? 0 : ifdOffset + dirSize + totalBytes;
if (nextIFDOffset % 2 != 0) {
nextIFDOffset++;
skipByte=true;
}
if (outCache == null) {
if (skipByte) {
output.write((byte)0);
}
SeekableOutputStream sos=(SeekableOutputStream)output;
long savePos=sos.getFilePointer();
sos.seek(ifdOffset);
writeDirectory(ifdOffset,fields,nextIFDOffset);
sos.seek(savePos);
}
 else if (tempFile != null) {
output.close();
FileInputStream fileStream=new FileInputStream(tempFile);
output=outCache;
writeDirectory(ifdOffset,fields,nextIFDOffset);
byte[] copyBuffer=new byte[8192];
int bytesCopied=0;
while (bytesCopied < totalBytes) {
int bytesRead=fileStream.read(copyBuffer);
if (bytesRead == -1) {
break;
}
output.write(copyBuffer,0,bytesRead);
bytesCopied+=bytesRead;
}
fileStream.close();
tempFile.delete();
if (skipByte) {
output.write((byte)0);
}
}
 else if (output instanceof ByteArrayOutputStream) {
ByteArrayOutputStream memoryStream=(ByteArrayOutputStream)output;
output=outCache;
writeDirectory(ifdOffset,fields,nextIFDOffset);
memoryStream.writeTo(output);
if (skipByte) {
output.write((byte)0);
}
}
 else {
throw new IllegalStateException();
}
}
return nextIFDOffset;
}","private int encode(RenderedImage im,TIFFEncodeParam encodeParam,int ifdOffset,boolean isLast) throws IOException {
  if (CodecUtils.isPackedByteImage(im)) {
    ColorModel sourceCM=im.getColorModel();
    ColorModel destCM=RasterFactory.createComponentColorModel(DataBuffer.TYPE_BYTE,sourceCM.getColorSpace(),sourceCM.hasAlpha(),sourceCM.isAlphaPremultiplied(),sourceCM.getTransparency());
    Point origin=new Point(im.getMinX(),im.getMinY());
    WritableRaster raster=Raster.createWritableRaster(destCM.createCompatibleSampleModel(im.getWidth(),im.getHeight()),origin);
    raster.setRect(im.getData());
    im=new SingleTileRenderedImage(raster,destCM);
  }
  int compression=encodeParam.getCompression();
  boolean isTiled=encodeParam.getWriteTiled();
  int minX=im.getMinX();
  int minY=im.getMinY();
  int width=im.getWidth();
  int height=im.getHeight();
  SampleModel sampleModel=im.getSampleModel();
  int sampleSize[]=sampleModel.getSampleSize();
  for (int i=1; i < sampleSize.length; i++) {
    if (sampleSize[i] != sampleSize[0]) {
      throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
    }
  }
  int numBands=sampleModel.getNumBands();
  if ((sampleSize[0] == 1 || sampleSize[0] == 4) && numBands != 1) {
    throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
  }
  int dataType=sampleModel.getDataType();
switch (dataType) {
case DataBuffer.TYPE_BYTE:
    if (sampleSize[0] != 1 && sampleSize[0] != 4 && sampleSize[0] != 8) {
      throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
    }
  break;
case DataBuffer.TYPE_SHORT:
case DataBuffer.TYPE_USHORT:
if (sampleSize[0] != 16) {
  throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
break;
case DataBuffer.TYPE_INT:
case DataBuffer.TYPE_FLOAT:
if (sampleSize[0] != 32) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
break;
default :
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
boolean dataTypeIsShort=dataType == DataBuffer.TYPE_SHORT || dataType == DataBuffer.TYPE_USHORT;
ColorModel colorModel=im.getColorModel();
if (colorModel != null && colorModel instanceof IndexColorModel && dataType != DataBuffer.TYPE_BYTE) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
IndexColorModel icm=null;
int sizeOfColormap=0;
int colormap[]=null;
int imageType=TIFF_UNSUPPORTED;
int numExtraSamples=0;
int extraSampleType=EXTRA_SAMPLE_UNSPECIFIED;
if (colorModel instanceof IndexColorModel) {
icm=(IndexColorModel)colorModel;
int mapSize=icm.getMapSize();
if (sampleSize[0] == 1 && numBands == 1) {
if (mapSize != 2) {
throw new IllegalArgumentException(JaiI18N.getString(""String_Node_Str""));
}
byte r[]=new byte[mapSize];
icm.getReds(r);
byte g[]=new byte[mapSize];
icm.getGreens(g);
byte b[]=new byte[mapSize];
icm.getBlues(b);
if ((r[0] & 0xff) == 0 && (r[1] & 0xff) == 255 && (g[0] & 0xff) == 0 && (g[1] & 0xff) == 255 && (b[0] & 0xff) == 0 && (b[1] & 0xff) == 255) {
imageType=TIFF_BILEVEL_BLACK_IS_ZERO;
}
 else if ((r[0] & 0xff) == 255 && (r[1] & 0xff) == 0 && (g[0] & 0xff) == 255 && (g[1] & 0xff) == 0 && (b[0] & 0xff) == 255 && (b[1] & 0xff) == 0) {
imageType=TIFF_BILEVEL_WHITE_IS_ZERO;
}
 else {
imageType=TIFF_PALETTE;
}
}
 else if (numBands == 1) {
imageType=TIFF_PALETTE;
}
}
 else if (colorModel == null) {
if (sampleSize[0] == 1 && numBands == 1) {
imageType=TIFF_BILEVEL_BLACK_IS_ZERO;
}
 else {
imageType=TIFF_GENERIC;
if (numBands > 1) {
numExtraSamples=numBands - 1;
}
}
}
 else {
ColorSpace colorSpace=colorModel.getColorSpace();
switch (colorSpace.getType()) {
case ColorSpace.TYPE_CMYK:
imageType=TIFF_CMYK;
break;
case ColorSpace.TYPE_GRAY:
imageType=TIFF_GRAY;
break;
case ColorSpace.TYPE_Lab:
imageType=TIFF_CIELAB;
break;
case ColorSpace.TYPE_RGB:
if (compression == COMP_JPEG_TTN2 && encodeParam.getJPEGCompressRGBToYCbCr()) {
imageType=TIFF_YCBCR;
}
 else {
imageType=TIFF_RGB;
}
break;
case ColorSpace.TYPE_YCbCr:
imageType=TIFF_YCBCR;
break;
default :
imageType=TIFF_GENERIC;
break;
}
if (imageType == TIFF_GENERIC) {
numExtraSamples=numBands - 1;
}
 else if (numBands > 1) {
numExtraSamples=numBands - colorSpace.getNumComponents();
}
if (numExtraSamples == 1 && colorModel.hasAlpha()) {
extraSampleType=colorModel.isAlphaPremultiplied() ? EXTRA_SAMPLE_ASSOCIATED_ALPHA : EXTRA_SAMPLE_UNASSOCIATED_ALPHA;
}
}
if (imageType == TIFF_UNSUPPORTED) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
if (compression == COMP_JPEG_TTN2) {
if (imageType == TIFF_PALETTE) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
 else if (!(sampleSize[0] == 8 && (imageType == TIFF_GRAY || imageType == TIFF_RGB || imageType == TIFF_YCBCR))) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
}
if ((imageType != TIFF_BILEVEL_WHITE_IS_ZERO && imageType != TIFF_BILEVEL_BLACK_IS_ZERO) && (compression == COMP_GROUP3_1D || compression == COMP_GROUP3_2D || compression == COMP_GROUP4)) {
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
int photometricInterpretation=-1;
switch (imageType) {
case TIFF_BILEVEL_WHITE_IS_ZERO:
photometricInterpretation=0;
break;
case TIFF_BILEVEL_BLACK_IS_ZERO:
photometricInterpretation=1;
break;
case TIFF_GRAY:
case TIFF_GENERIC:
photometricInterpretation=1;
break;
case TIFF_PALETTE:
photometricInterpretation=3;
icm=(IndexColorModel)colorModel;
sizeOfColormap=icm.getMapSize();
byte r[]=new byte[sizeOfColormap];
icm.getReds(r);
byte g[]=new byte[sizeOfColormap];
icm.getGreens(g);
byte b[]=new byte[sizeOfColormap];
icm.getBlues(b);
int redIndex=0, greenIndex=sizeOfColormap;
int blueIndex=2 * sizeOfColormap;
colormap=new int[sizeOfColormap * 3];
for (int i=0; i < sizeOfColormap; i++) {
colormap[redIndex++]=(r[i] << 8) & 0xffff;
colormap[greenIndex++]=(g[i] << 8) & 0xffff;
colormap[blueIndex++]=(b[i] << 8) & 0xffff;
}
sizeOfColormap*=3;
break;
case TIFF_RGB:
photometricInterpretation=2;
break;
case TIFF_CMYK:
photometricInterpretation=5;
break;
case TIFF_YCBCR:
photometricInterpretation=6;
break;
case TIFF_CIELAB:
photometricInterpretation=8;
break;
default :
throw new RuntimeException(JaiI18N.getString(""String_Node_Str""));
}
int tileWidth;
int tileHeight;
if (isTiled) {
tileWidth=encodeParam.getTileWidth() > 0 ? encodeParam.getTileWidth() : im.getTileWidth();
tileHeight=encodeParam.getTileHeight() > 0 ? encodeParam.getTileHeight() : im.getTileHeight();
}
 else {
tileWidth=width;
tileHeight=encodeParam.getTileHeight() > 0 ? encodeParam.getTileHeight() : DEFAULT_ROWS_PER_STRIP;
}
JPEGEncodeParam jep=null;
if (compression == COMP_JPEG_TTN2) {
jep=encodeParam.getJPEGEncodeParam();
int maxSubH=jep.getHorizontalSubsampling(0);
int maxSubV=jep.getVerticalSubsampling(0);
for (int i=1; i < numBands; i++) {
int subH=jep.getHorizontalSubsampling(i);
if (subH > maxSubH) {
maxSubH=subH;
}
int subV=jep.getVerticalSubsampling(i);
if (subV > maxSubV) {
maxSubV=subV;
}
}
int factorV=8 * maxSubV;
tileHeight=(int)((float)tileHeight / (float)factorV + 0.5F) * factorV;
if (tileHeight < factorV) {
tileHeight=factorV;
}
if (isTiled) {
int factorH=8 * maxSubH;
tileWidth=(int)((float)tileWidth / (float)factorH + 0.5F) * factorH;
if (tileWidth < factorH) {
tileWidth=factorH;
}
}
}
int numTiles;
if (isTiled) {
numTiles=((width + tileWidth - 1) / tileWidth) * ((height + tileHeight - 1) / tileHeight);
}
 else {
numTiles=(int)Math.ceil((double)height / (double)tileHeight);
}
long tileByteCounts[]=new long[numTiles];
long bytesPerRow=(long)Math.ceil((sampleSize[0] / 8.0) * tileWidth * numBands);
long bytesPerTile=bytesPerRow * tileHeight;
for (int i=0; i < numTiles; i++) {
tileByteCounts[i]=bytesPerTile;
}
if (!isTiled) {
long lastStripRows=height - (tileHeight * (numTiles - 1));
tileByteCounts[numTiles - 1]=lastStripRows * bytesPerRow;
}
long totalBytesOfData=bytesPerTile * (numTiles - 1) + tileByteCounts[numTiles - 1];
long tileOffsets[]=new long[numTiles];
SortedSet fields=new TreeSet();
fields.add(new TIFFField(TIFFImageDecoder.TIFF_IMAGE_WIDTH,TIFFField.TIFF_LONG,1,(Object)(new long[]{(long)width})));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_IMAGE_LENGTH,TIFFField.TIFF_LONG,1,new long[]{(long)height}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_BITS_PER_SAMPLE,TIFFField.TIFF_SHORT,numBands,intsToChars(sampleSize)));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_COMPRESSION,TIFFField.TIFF_SHORT,1,new char[]{(char)compression}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_PHOTOMETRIC_INTERPRETATION,TIFFField.TIFF_SHORT,1,new char[]{(char)photometricInterpretation}));
if (!isTiled) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_STRIP_OFFSETS,TIFFField.TIFF_LONG,numTiles,(long[])tileOffsets));
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_SAMPLES_PER_PIXEL,TIFFField.TIFF_SHORT,1,new char[]{(char)numBands}));
if (!isTiled) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_ROWS_PER_STRIP,TIFFField.TIFF_LONG,1,new long[]{(long)tileHeight}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_STRIP_BYTE_COUNTS,TIFFField.TIFF_LONG,numTiles,(long[])tileByteCounts));
}
if (colormap != null) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_COLORMAP,TIFFField.TIFF_SHORT,sizeOfColormap,intsToChars(colormap)));
}
if (isTiled) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_WIDTH,TIFFField.TIFF_LONG,1,new long[]{(long)tileWidth}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_LENGTH,TIFFField.TIFF_LONG,1,new long[]{(long)tileHeight}));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_OFFSETS,TIFFField.TIFF_LONG,numTiles,(long[])tileOffsets));
fields.add(new TIFFField(TIFFImageDecoder.TIFF_TILE_BYTE_COUNTS,TIFFField.TIFF_LONG,numTiles,(long[])tileByteCounts));
}
if (numExtraSamples > 0) {
int[] extraSamples=new int[numExtraSamples];
for (int i=0; i < numExtraSamples; i++) {
extraSamples[i]=extraSampleType;
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_EXTRA_SAMPLES,TIFFField.TIFF_SHORT,numExtraSamples,intsToChars(extraSamples)));
}
if (dataType != DataBuffer.TYPE_BYTE) {
int[] sampleFormat=new int[numBands];
if (dataType == DataBuffer.TYPE_FLOAT) {
sampleFormat[0]=3;
}
 else if (dataType == DataBuffer.TYPE_USHORT) {
sampleFormat[0]=1;
}
 else {
sampleFormat[0]=2;
}
for (int b=1; b < numBands; b++) {
sampleFormat[b]=sampleFormat[0];
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_SAMPLE_FORMAT,TIFFField.TIFF_SHORT,numBands,intsToChars(sampleFormat)));
}
boolean inverseFill=encodeParam.getReverseFillOrder();
boolean T4encode2D=encodeParam.getT4Encode2D();
boolean T4PadEOLs=encodeParam.getT4PadEOLs();
TIFFFaxEncoder faxEncoder=null;
if ((imageType == TIFF_BILEVEL_BLACK_IS_ZERO || imageType == TIFF_BILEVEL_WHITE_IS_ZERO) && (compression == COMP_GROUP3_1D || compression == COMP_GROUP3_2D || compression == COMP_GROUP4)) {
faxEncoder=new TIFFFaxEncoder(inverseFill);
fields.add(new TIFFField(TIFFImageDecoder.TIFF_FILL_ORDER,TIFFField.TIFF_SHORT,1,new char[]{inverseFill ? (char)2 : (char)1}));
if (compression == COMP_GROUP3_2D) {
long T4Options=0x00000000;
if (T4encode2D) {
T4Options|=0x00000001;
}
if (T4PadEOLs) {
T4Options|=0x00000004;
}
fields.add(new TIFFField(TIFFImageDecoder.TIFF_T4_OPTIONS,TIFFField.TIFF_LONG,1,new long[]{T4Options}));
}
 else if (compression == COMP_GROUP4) {
fields.add(new TIFFField(TIFFImageDecoder.TIFF_T6_OPTIONS,TIFFField.TIFF_LONG,1,new long[]{(long)0x00000000}));
}
}
com.sun.image.codec.jpeg.JPEGEncodeParam jpegEncodeParam=null;
com.sun.image.codec.jpeg.JPEGImageEncoder jpegEncoder=null;
int jpegColorID=0;
if (compression == COMP_JPEG_TTN2) {
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_UNKNOWN;
switch (imageType) {
case TIFF_GRAY:
case TIFF_PALETTE:
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_GRAY;
break;
case TIFF_RGB:
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_RGB;
break;
case TIFF_YCBCR:
jpegColorID=com.sun.image.codec.jpeg.JPEGDecodeParam.COLOR_ID_YCbCr;
break;
}
Raster tile00=im.getTile(im.getMinTileX(),im.getMinTileY());
jpegEncodeParam=com.sun.image.codec.jpeg.JPEGCodec.getDefaultJPEGEncodeParam(tile00,jpegColorID);
JPEGImageEncoder.modifyEncodeParam(jep,jpegEncodeParam,numBands);
if (jep.getWriteImageOnly()) {
jpegEncodeParam.setImageInfoValid(false);
jpegEncodeParam.setTableInfoValid(true);
ByteArrayOutputStream tableStream=new ByteArrayOutputStream();
jpegEncoder=com.sun.image.codec.jpeg.JPEGCodec.createJPEGEncoder(tableStream,jpegEncodeParam);
jpegEncoder.encode(tile00);
byte[] tableData=tableStream.toByteArray();
fields.add(new TIFFField(TIFF_JPEG_TABLES,TIFFField.TIFF_UNDEFINED,tableData.length,tableData));
jpegEncoder=null;
}
}
if (imageType == TIFF_YCBCR) {
int subsampleH=1;
int subsampleV=1;
if (compression == COMP_JPEG_TTN2) {
subsampleH=jep.getHorizontalSubsampling(0);
subsampleV=jep.getVerticalSubsampling(0);
for (int i=1; i < numBands; i++) {
int subH=jep.getHorizontalSubsampling(i);
if (subH > subsampleH) {
subsampleH=subH;
}
int subV=jep.getVerticalSubsampling(i);
if (subV > subsampleV) {
subsampleV=subV;
}
}
}
fields.add(new TIFFField(TIFF_YCBCR_SUBSAMPLING,TIFFField.TIFF_SHORT,2,new char[]{(char)subsampleH,(char)subsampleV}));
fields.add(new TIFFField(TIFF_YCBCR_POSITIONING,TIFFField.TIFF_SHORT,1,new char[]{compression == COMP_JPEG_TTN2 ? (char)1 : (char)2}));
long[][] refbw;
if (compression == COMP_JPEG_TTN2) {
refbw=new long[][]{{0,1},{255,1},{128,1},{255,1},{128,1},{255,1}};
}
 else {
refbw=new long[][]{{15,1},{235,1},{128,1},{240,1},{128,1},{240,1}};
}
fields.add(new TIFFField(TIFF_REF_BLACK_WHITE,TIFFField.TIFF_RATIONAL,6,refbw));
}
TIFFField[] extraFields=encodeParam.getExtraFields();
if (extraFields != null) {
ArrayList extantTags=new ArrayList(fields.size());
Iterator fieldIter=fields.iterator();
while (fieldIter.hasNext()) {
TIFFField fld=(TIFFField)fieldIter.next();
extantTags.add(new Integer(fld.getTag()));
}
int numExtraFields=extraFields.length;
for (int i=0; i < numExtraFields; i++) {
TIFFField fld=extraFields[i];
Integer tagValue=new Integer(fld.getTag());
if (!extantTags.contains(tagValue)) {
fields.add(fld);
extantTags.add(tagValue);
}
}
}
int dirSize=getDirectorySize(fields);
tileOffsets[0]=ifdOffset + dirSize;
OutputStream outCache=null;
byte[] compressBuf=null;
File tempFile=null;
int nextIFDOffset=0;
boolean skipByte=false;
Deflater deflater=null;
int deflateLevel=Deflater.DEFAULT_COMPRESSION;
boolean jpegRGBToYCbCr=false;
if (compression == COMP_NONE) {
int numBytesPadding=0;
if (sampleSize[0] == 16 && tileOffsets[0] % 2 != 0) {
numBytesPadding=1;
tileOffsets[0]++;
}
 else if (sampleSize[0] == 32 && tileOffsets[0] % 4 != 0) {
numBytesPadding=(int)(4 - tileOffsets[0] % 4);
tileOffsets[0]+=numBytesPadding;
}
for (int i=1; i < numTiles; i++) {
tileOffsets[i]=tileOffsets[i - 1] + tileByteCounts[i - 1];
}
if (!isLast) {
nextIFDOffset=(int)(tileOffsets[0] + totalBytesOfData);
if (nextIFDOffset % 2 != 0) {
nextIFDOffset++;
skipByte=true;
}
}
writeDirectory(ifdOffset,fields,nextIFDOffset);
if (numBytesPadding != 0) {
for (int padding=0; padding < numBytesPadding; padding++) {
output.write((byte)0);
}
}
}
 else {
if ((output instanceof SeekableOutputStream)) {
((SeekableOutputStream)output).seek(tileOffsets[0]);
}
 else {
outCache=output;
try {
tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
tempFile.deleteOnExit();
RandomAccessFile raFile=new RandomAccessFile(tempFile,""String_Node_Str"");
output=new SeekableOutputStream(raFile);
}
 catch (Exception e) {
tempFile=null;
output=new ByteArrayOutputStream((int)totalBytesOfData);
}
}
int bufSize=0;
switch (compression) {
case COMP_GROUP3_1D:
bufSize=(int)Math.ceil((((tileWidth + 1) / 2) * 9 + 2) / 8.0);
break;
case COMP_GROUP3_2D:
case COMP_GROUP4:
bufSize=(int)Math.ceil((((tileWidth + 1) / 2) * 9 + 2) / 8.0);
bufSize=tileHeight * (bufSize + 2) + 12;
break;
case COMP_PACKBITS:
bufSize=(int)(bytesPerTile + ((bytesPerRow + 127) / 128) * tileHeight);
break;
case COMP_JPEG_TTN2:
bufSize=0;
if (imageType == TIFF_YCBCR && colorModel != null && colorModel.getColorSpace().getType() == ColorSpace.TYPE_RGB) {
jpegRGBToYCbCr=true;
}
break;
case COMP_DEFLATE:
bufSize=(int)bytesPerTile;
deflater=new Deflater(encodeParam.getDeflateLevel());
break;
default :
bufSize=0;
}
if (bufSize != 0) {
compressBuf=new byte[bufSize];
}
}
int[] pixels=null;
float[] fpixels=null;
boolean checkContiguous=((sampleSize[0] == 1 && sampleModel instanceof MultiPixelPackedSampleModel && dataType == DataBuffer.TYPE_BYTE) || (sampleSize[0] == 8 && sampleModel instanceof ComponentSampleModel));
byte[] bpixels=null;
if (compression != COMP_JPEG_TTN2) {
if (dataType == DataBuffer.TYPE_BYTE) {
bpixels=new byte[tileHeight * tileWidth * numBands];
}
 else if (dataTypeIsShort) {
bpixels=new byte[2 * tileHeight * tileWidth* numBands];
}
 else if (dataType == DataBuffer.TYPE_INT || dataType == DataBuffer.TYPE_FLOAT) {
bpixels=new byte[4 * tileHeight * tileWidth* numBands];
}
}
int lastRow=minY + height;
int lastCol=minX + width;
int tileNum=0;
for (int row=minY; row < lastRow; row+=tileHeight) {
int rows=isTiled ? tileHeight : Math.min(tileHeight,lastRow - row);
int size=rows * tileWidth * numBands;
for (int col=minX; col < lastCol; col+=tileWidth) {
Raster src=im.getData(new Rectangle(col,row,tileWidth,rows));
boolean useDataBuffer=false;
if (compression != COMP_JPEG_TTN2) {
if (checkContiguous) {
if (sampleSize[0] == 8) {
ComponentSampleModel csm=(ComponentSampleModel)src.getSampleModel();
int[] bankIndices=csm.getBankIndices();
int[] bandOffsets=csm.getBandOffsets();
int pixelStride=csm.getPixelStride();
int lineStride=csm.getScanlineStride();
if (pixelStride != numBands || lineStride != bytesPerRow) {
useDataBuffer=false;
}
 else {
useDataBuffer=true;
for (int i=0; useDataBuffer && i < numBands; i++) {
if (bankIndices[i] != 0 || bandOffsets[i] != i) {
useDataBuffer=false;
}
}
}
}
 else {
MultiPixelPackedSampleModel mpp=(MultiPixelPackedSampleModel)src.getSampleModel();
if (mpp.getNumBands() == 1 && mpp.getDataBitOffset() == 0 && mpp.getPixelBitStride() == 1) {
useDataBuffer=true;
}
}
}
if (!useDataBuffer) {
if (dataType == DataBuffer.TYPE_FLOAT) {
fpixels=src.getPixels(col,row,tileWidth,rows,fpixels);
}
 else {
pixels=src.getPixels(col,row,tileWidth,rows,pixels);
}
}
}
int index;
int pixel=0;
;
int k=0;
switch (sampleSize[0]) {
case 1:
if (useDataBuffer) {
byte[] btmp=((DataBufferByte)src.getDataBuffer()).getData();
MultiPixelPackedSampleModel mpp=(MultiPixelPackedSampleModel)src.getSampleModel();
int lineStride=mpp.getScanlineStride();
int inOffset=mpp.getOffset(col - src.getSampleModelTranslateX(),row - src.getSampleModelTranslateY());
if (lineStride == (int)bytesPerRow) {
System.arraycopy(btmp,inOffset,bpixels,0,(int)bytesPerRow * rows);
}
 else {
int outOffset=0;
for (int j=0; j < rows; j++) {
System.arraycopy(btmp,inOffset,bpixels,outOffset,(int)bytesPerRow);
inOffset+=lineStride;
outOffset+=(int)bytesPerRow;
}
}
}
 else {
index=0;
for (int i=0; i < rows; i++) {
for (int j=0; j < tileWidth / 8; j++) {
pixel=(pixels[index++] << 7) | (pixels[index++] << 6) | (pixels[index++] << 5)| (pixels[index++] << 4)| (pixels[index++] << 3)| (pixels[index++] << 2)| (pixels[index++] << 1)| pixels[index++];
bpixels[k++]=(byte)pixel;
}
if (tileWidth % 8 > 0) {
pixel=0;
for (int j=0; j < tileWidth % 8; j++) {
pixel|=(pixels[index++] << (7 - j));
}
bpixels[k++]=(byte)pixel;
}
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,rows * ((tileWidth + 7) / 8));
}
 else if (compression == COMP_GROUP3_1D) {
int rowStride=(tileWidth + 7) / 8;
int rowOffset=0;
int numCompressedBytes=0;
for (int tileRow=0; tileRow < rows; tileRow++) {
int numCompressedBytesInRow=faxEncoder.encodeRLE(bpixels,rowOffset,0,tileWidth,compressBuf);
output.write(compressBuf,0,numCompressedBytesInRow);
rowOffset+=rowStride;
numCompressedBytes+=numCompressedBytesInRow;
}
tileByteCounts[tileNum++]=numCompressedBytes;
}
 else if (compression == COMP_GROUP3_2D) {
int numCompressedBytes=faxEncoder.encodeT4(!T4encode2D,T4PadEOLs,bpixels,(tileWidth + 7) / 8,0,tileWidth,rows,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_GROUP4) {
int numCompressedBytes=faxEncoder.encodeT6(bpixels,(tileWidth + 7) / 8,0,tileWidth,rows,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 4:
index=0;
for (int i=0; i < rows; i++) {
for (int j=0; j < tileWidth / 2; j++) {
pixel=(pixels[index++] << 4) | pixels[index++];
bpixels[k++]=(byte)pixel;
}
if ((tileWidth % 2) == 1) {
pixel=pixels[index++] << 4;
bpixels[k++]=(byte)pixel;
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,rows * ((tileWidth + 1) / 2));
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 8:
if (compression != COMP_JPEG_TTN2) {
if (useDataBuffer) {
byte[] btmp=((DataBufferByte)src.getDataBuffer()).getData();
ComponentSampleModel csm=(ComponentSampleModel)src.getSampleModel();
int inOffset=csm.getOffset(col - src.getSampleModelTranslateX(),row - src.getSampleModelTranslateY());
int lineStride=csm.getScanlineStride();
if (lineStride == (int)bytesPerRow) {
System.arraycopy(btmp,inOffset,bpixels,0,(int)bytesPerRow * rows);
}
 else {
int outOffset=0;
for (int j=0; j < rows; j++) {
System.arraycopy(btmp,inOffset,bpixels,outOffset,(int)bytesPerRow);
inOffset+=lineStride;
outOffset+=(int)bytesPerRow;
}
}
}
 else {
for (int i=0; i < size; i++) {
bpixels[i]=(byte)pixels[i];
}
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,size);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_JPEG_TTN2) {
long startPos=getOffset(output);
if (jpegEncoder == null || jpegEncodeParam.getWidth() != src.getWidth() || jpegEncodeParam.getHeight() != src.getHeight()) {
jpegEncodeParam=com.sun.image.codec.jpeg.JPEGCodec.getDefaultJPEGEncodeParam(src,jpegColorID);
JPEGImageEncoder.modifyEncodeParam(jep,jpegEncodeParam,numBands);
jpegEncoder=com.sun.image.codec.jpeg.JPEGCodec.createJPEGEncoder(output,jpegEncodeParam);
}
if (jpegRGBToYCbCr) {
WritableRaster wRas=null;
if (src instanceof WritableRaster) {
wRas=(WritableRaster)src;
}
 else {
wRas=src.createCompatibleWritableRaster();
wRas.setRect(src);
}
if (wRas.getMinX() != 0 || wRas.getMinY() != 0) {
wRas=wRas.createWritableTranslatedChild(0,0);
}
BufferedImage bi=new BufferedImage(colorModel,wRas,false,null);
jpegEncoder.encode(bi);
}
 else {
jpegEncoder.encode(src.createTranslatedChild(0,0));
}
long endPos=getOffset(output);
tileByteCounts[tileNum++]=(int)(endPos - startPos);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 16:
int ls=0;
for (int i=0; i < size; i++) {
short value=(short)pixels[i];
bpixels[ls++]=(byte)((value & 0xff00) >> 8);
bpixels[ls++]=(byte)(value & 0x00ff);
}
if (compression == COMP_NONE) {
output.write(bpixels,0,size * 2);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
case 32:
if (dataType == DataBuffer.TYPE_INT) {
int li=0;
for (int i=0; i < size; i++) {
int value=pixels[i];
bpixels[li++]=(byte)((value & 0xff000000) >> 24);
bpixels[li++]=(byte)((value & 0x00ff0000) >> 16);
bpixels[li++]=(byte)((value & 0x0000ff00) >> 8);
bpixels[li++]=(byte)(value & 0x000000ff);
}
}
 else {
int lf=0;
for (int i=0; i < size; i++) {
int value=Float.floatToIntBits(fpixels[i]);
bpixels[lf++]=(byte)((value & 0xff000000) >> 24);
bpixels[lf++]=(byte)((value & 0x00ff0000) >> 16);
bpixels[lf++]=(byte)((value & 0x0000ff00) >> 8);
bpixels[lf++]=(byte)(value & 0x000000ff);
}
}
if (compression == COMP_NONE) {
output.write(bpixels,0,size * 4);
}
 else if (compression == COMP_PACKBITS) {
int numCompressedBytes=compressPackBits(bpixels,rows,(int)bytesPerRow,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
 else if (compression == COMP_DEFLATE) {
int numCompressedBytes=deflate(deflater,bpixels,compressBuf);
tileByteCounts[tileNum++]=numCompressedBytes;
output.write(compressBuf,0,numCompressedBytes);
}
break;
}
}
}
if (compression == COMP_NONE) {
if (skipByte) {
output.write((byte)0);
}
}
 else {
int totalBytes=0;
for (int i=1; i < numTiles; i++) {
int numBytes=(int)tileByteCounts[i - 1];
totalBytes+=numBytes;
tileOffsets[i]=tileOffsets[i - 1] + numBytes;
}
totalBytes+=(int)tileByteCounts[numTiles - 1];
nextIFDOffset=isLast ? 0 : ifdOffset + dirSize + totalBytes;
if (nextIFDOffset % 2 != 0) {
nextIFDOffset++;
skipByte=true;
}
if (outCache == null) {
if (skipByte) {
output.write((byte)0);
}
SeekableOutputStream sos=(SeekableOutputStream)output;
long savePos=sos.getFilePointer();
sos.seek(ifdOffset);
writeDirectory(ifdOffset,fields,nextIFDOffset);
sos.seek(savePos);
}
 else if (tempFile != null) {
output.close();
FileInputStream fileStream=new FileInputStream(tempFile);
output=outCache;
writeDirectory(ifdOffset,fields,nextIFDOffset);
byte[] copyBuffer=new byte[8192];
int bytesCopied=0;
while (bytesCopied < totalBytes) {
int bytesRead=fileStream.read(copyBuffer);
if (bytesRead == -1) {
break;
}
output.write(copyBuffer,0,bytesRead);
bytesCopied+=bytesRead;
}
fileStream.close();
tempFile.delete();
if (skipByte) {
output.write((byte)0);
}
}
 else if (output instanceof ByteArrayOutputStream) {
ByteArrayOutputStream memoryStream=(ByteArrayOutputStream)output;
output=outCache;
writeDirectory(ifdOffset,fields,nextIFDOffset);
memoryStream.writeTo(output);
if (skipByte) {
output.write((byte)0);
}
}
 else {
throw new IllegalStateException();
}
}
return nextIFDOffset;
}",0.9993673241533308
153994,"/** 
 * Fill the specified rectangle of <code>raster</code> with the provided background values.  Suppose the raster is initialized to 0.  Thus, for binary data, if the provided background values are 0, do nothing.
 */
public static void fillBackground(WritableRaster raster,Rectangle rect,double[] backgroundValues){
  rect=rect.intersection(raster.getBounds());
  int numBands=raster.getSampleModel().getNumBands();
  SampleModel sm=raster.getSampleModel();
  PixelAccessor accessor=new PixelAccessor(sm,null);
  if (isBinary(sm)) {
    byte value=(byte)(((int)backgroundValues[0]) & 1);
    if (value == 0)     return;
    int rectX=rect.x;
    int rectY=rect.y;
    int rectWidth=rect.width;
    int rectHeight=rect.height;
    int dx=rectX - raster.getSampleModelTranslateX();
    int dy=rectY - raster.getSampleModelTranslateY();
    DataBuffer dataBuffer=raster.getDataBuffer();
    MultiPixelPackedSampleModel mpp=(MultiPixelPackedSampleModel)sm;
    int lineStride=mpp.getScanlineStride();
    int eltOffset=dataBuffer.getOffset() + mpp.getOffset(dx,dy);
    int bitOffset=mpp.getBitOffset(dx);
switch (sm.getDataType()) {
case DataBuffer.TYPE_BYTE:
{
        byte[] data=((DataBufferByte)dataBuffer).getData();
        int bits=bitOffset & 7;
        int otherBits=(bits == 0) ? 0 : 8 - bits;
        byte mask=(byte)(255 >> bits);
        int lineLength=(rectWidth - otherBits) / 8;
        int bits1=rectWidth - otherBits & 7;
        byte mask1=(byte)(255 << (8 - bits1));
        for (int y=0; y < rectHeight; y++) {
          int start=eltOffset;
          if (bits != 0)           data[start++]=mask;
          int end=start + lineLength;
          while (start < end)           data[start++]=(byte)255;
          if (bits1 != 0)           data[start++]=mask1;
          eltOffset+=lineStride;
        }
        break;
      }
case DataBuffer.TYPE_SHORT:
case DataBuffer.TYPE_USHORT:
{
      short[] data=((DataBufferShort)dataBuffer).getData();
      int bits=bitOffset & 15;
      int otherBits=(bits == 0) ? 0 : 16 - bits;
      short mask=(short)(65535 >> bits);
      int lineLength=(rectWidth - otherBits) / 16;
      int bits1=rectWidth - otherBits & 15;
      short mask1=(short)(65535 << (16 - bits1));
      for (int y=0; y < rectHeight; y++) {
        int start=eltOffset;
        if (bits != 0)         data[start++]=mask;
        int end=start + lineLength;
        while (start < end)         data[start++]=(short)0xFFFF;
        if (bits1 != 0)         data[start++]=mask1;
        eltOffset+=lineStride;
      }
      break;
    }
case DataBuffer.TYPE_INT:
{
    int[] data=((DataBufferInt)dataBuffer).getData();
    int bits=bitOffset & 31;
    int otherBits=(bits == 0) ? 0 : 32 - bits;
    short mask=(short)(0xFFFFFFFF >> bits);
    int lineLength=(rectWidth - otherBits) / 32;
    int bits1=rectWidth - otherBits & 31;
    short mask1=(short)(0xFFFFFFFF << (32 - bits1));
    for (int y=0; y < rectHeight; y++) {
      int start=eltOffset;
      if (bits != 0)       data[start++]=mask;
      int end=start + lineLength;
      while (start < end)       data[start++]=0xFFFFFFFF;
      if (bits1 != 0)       data[start++]=mask1;
      eltOffset+=lineStride;
    }
    break;
  }
}
}
 else {
int srcSampleType=accessor.sampleType == PixelAccessor.TYPE_BIT ? DataBuffer.TYPE_BYTE : accessor.sampleType;
UnpackedImageData uid=accessor.getPixels(raster,rect,srcSampleType,false);
rect=uid.rect;
int lineStride=uid.lineStride;
int pixelStride=uid.pixelStride;
switch (uid.type) {
case DataBuffer.TYPE_BYTE:
byte[][] bdata=uid.getByteData();
for (int b=0; b < accessor.numBands; b++) {
byte value=(byte)backgroundValues[b];
byte[] bd=bdata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
  int lastPixel=lo + rect.width * pixelStride;
  for (int po=lo; po < lastPixel; po+=pixelStride) {
    bd[po]=value;
  }
}
}
break;
case DataBuffer.TYPE_USHORT:
case DataBuffer.TYPE_SHORT:
short[][] sdata=uid.getShortData();
for (int b=0; b < accessor.numBands; b++) {
short value=(short)backgroundValues[b];
short[] sd=sdata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
sd[po]=value;
}
}
}
break;
case DataBuffer.TYPE_INT:
int[][] idata=uid.getIntData();
for (int b=0; b < accessor.numBands; b++) {
int value=(int)backgroundValues[b];
int[] id=idata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
id[po]=value;
}
}
}
break;
case DataBuffer.TYPE_FLOAT:
float[][] fdata=uid.getFloatData();
for (int b=0; b < accessor.numBands; b++) {
float value=(float)backgroundValues[b];
float[] fd=fdata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
fd[po]=value;
}
}
}
break;
case DataBuffer.TYPE_DOUBLE:
double[][] ddata=uid.getDoubleData();
for (int b=0; b < accessor.numBands; b++) {
double value=backgroundValues[b];
double[] dd=ddata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
dd[po]=value;
}
}
}
break;
}
}
}","/** 
 * Fill the specified rectangle of <code>raster</code> with the provided background values.  Suppose the raster is initialized to 0.  Thus, for binary data, if the provided background values are 0, do nothing.
 */
public static void fillBackground(WritableRaster raster,Rectangle rect,double[] backgroundValues){
  rect=rect.intersection(raster.getBounds());
  int numBands=raster.getSampleModel().getNumBands();
  SampleModel sm=raster.getSampleModel();
  PixelAccessor accessor=new PixelAccessor(sm,null);
  if (isBinary(sm)) {
    byte value=(byte)(((int)backgroundValues[0]) & 1);
    if (value == 0)     return;
    int rectX=rect.x;
    int rectY=rect.y;
    int rectWidth=rect.width;
    int rectHeight=rect.height;
    int dx=rectX - raster.getSampleModelTranslateX();
    int dy=rectY - raster.getSampleModelTranslateY();
    DataBuffer dataBuffer=raster.getDataBuffer();
    MultiPixelPackedSampleModel mpp=(MultiPixelPackedSampleModel)sm;
    int lineStride=mpp.getScanlineStride();
    int eltOffset=dataBuffer.getOffset() + mpp.getOffset(dx,dy);
    int bitOffset=mpp.getBitOffset(dx);
switch (sm.getDataType()) {
case DataBuffer.TYPE_BYTE:
{
        byte[] data=((DataBufferByte)dataBuffer).getData();
        int bits=bitOffset & 7;
        int otherBits=(bits == 0) ? 0 : 8 - bits;
        byte mask=(byte)(255 >> bits);
        int lineLength=(rectWidth - otherBits) / 8;
        int bits1=(rectWidth - otherBits) & 7;
        byte mask1=(byte)(255 << (8 - bits1));
        if (lineLength == 0) {
          mask&=mask1;
          bits1=0;
        }
        for (int y=0; y < rectHeight; y++) {
          int start=eltOffset;
          int end=start + lineLength;
          if (bits != 0)           data[start++]|=mask;
          while (start < end)           data[start++]=(byte)255;
          if (bits1 != 0)           data[start]|=mask1;
          eltOffset+=lineStride;
        }
        break;
      }
case DataBuffer.TYPE_USHORT:
{
      short[] data=((DataBufferUShort)dataBuffer).getData();
      int bits=bitOffset & 15;
      int otherBits=(bits == 0) ? 0 : 16 - bits;
      short mask=(short)(65535 >> bits);
      int lineLength=(rectWidth - otherBits) / 16;
      int bits1=(rectWidth - otherBits) & 15;
      short mask1=(short)(65535 << (16 - bits1));
      if (lineLength == 0) {
        mask&=mask1;
        bits1=0;
      }
      for (int y=0; y < rectHeight; y++) {
        int start=eltOffset;
        int end=start + lineLength;
        if (bits != 0)         data[start++]|=mask;
        while (start < end)         data[start++]=(short)0xFFFF;
        if (bits1 != 0)         data[start++]|=mask1;
        eltOffset+=lineStride;
      }
      break;
    }
case DataBuffer.TYPE_INT:
{
    int[] data=((DataBufferInt)dataBuffer).getData();
    int bits=bitOffset & 31;
    int otherBits=(bits == 0) ? 0 : 32 - bits;
    int mask=0xFFFFFFFF >> bits;
    int lineLength=(rectWidth - otherBits) / 32;
    int bits1=(rectWidth - otherBits) & 31;
    int mask1=0xFFFFFFFF << (32 - bits1);
    if (lineLength == 0) {
      mask&=mask1;
      bits1=0;
    }
    for (int y=0; y < rectHeight; y++) {
      int start=eltOffset;
      int end=start + lineLength;
      if (bits != 0)       data[start++]|=mask;
      while (start < end)       data[start++]=0xFFFFFFFF;
      if (bits1 != 0)       data[start++]|=mask1;
      eltOffset+=lineStride;
    }
    break;
  }
}
}
 else {
int srcSampleType=accessor.sampleType == PixelAccessor.TYPE_BIT ? DataBuffer.TYPE_BYTE : accessor.sampleType;
UnpackedImageData uid=accessor.getPixels(raster,rect,srcSampleType,false);
rect=uid.rect;
int lineStride=uid.lineStride;
int pixelStride=uid.pixelStride;
switch (uid.type) {
case DataBuffer.TYPE_BYTE:
byte[][] bdata=uid.getByteData();
for (int b=0; b < accessor.numBands; b++) {
byte value=(byte)backgroundValues[b];
byte[] bd=bdata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
  int lastPixel=lo + rect.width * pixelStride;
  for (int po=lo; po < lastPixel; po+=pixelStride) {
    bd[po]=value;
  }
}
}
break;
case DataBuffer.TYPE_USHORT:
case DataBuffer.TYPE_SHORT:
short[][] sdata=uid.getShortData();
for (int b=0; b < accessor.numBands; b++) {
short value=(short)backgroundValues[b];
short[] sd=sdata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
sd[po]=value;
}
}
}
break;
case DataBuffer.TYPE_INT:
int[][] idata=uid.getIntData();
for (int b=0; b < accessor.numBands; b++) {
int value=(int)backgroundValues[b];
int[] id=idata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
id[po]=value;
}
}
}
break;
case DataBuffer.TYPE_FLOAT:
float[][] fdata=uid.getFloatData();
for (int b=0; b < accessor.numBands; b++) {
float value=(float)backgroundValues[b];
float[] fd=fdata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
fd[po]=value;
}
}
}
break;
case DataBuffer.TYPE_DOUBLE:
double[][] ddata=uid.getDoubleData();
for (int b=0; b < accessor.numBands; b++) {
double value=backgroundValues[b];
double[] dd=ddata[b];
int lastLine=uid.bandOffsets[b] + rect.height * lineStride;
for (int lo=uid.bandOffsets[b]; lo < lastLine; lo+=lineStride) {
int lastPixel=lo + rect.width * pixelStride;
for (int po=lo; po < lastPixel; po+=pixelStride) {
dd[po]=value;
}
}
}
break;
}
}
}",0.9548398389637668
153995,"/** 
 * @param sourceCoords a double array containing the source coordinatesx_0, y_0, x_1, y_1, ...
 * @param destCoords a double array containing the source coordinatesx_0, y_0, x_1, y_1, ...
 * @return the best-fit coefficients for a bivariate polynomial of thegiven degree mapping the destination points into the source points.  The coefficients for the X polynomial are returned first, followed by those for the Y polynomial.
 */
public static float[] getCoeffs(float[] sourceCoords,int sourceOffset,float[] destCoords,int destOffset,int numCoords,float preScaleX,float preScaleY,float postScaleX,float postScaleY,int degree){
  int i, j, k;
  int equations=numCoords / 2;
  int unknowns=(degree + 1) * (degree + 2) / 2;
  float[] out=new float[2 * unknowns];
  if ((degree == 1) && (numCoords == 3)) {
    double x0, x1, x2, y0, y1, y2;
    double u0, u1, u2, v0, v1, v2;
    x0=sourceCoords[0] * preScaleX;
    y0=sourceCoords[1] * preScaleY;
    x1=sourceCoords[2] * preScaleX;
    y1=sourceCoords[3] * preScaleY;
    x2=sourceCoords[4] * preScaleY;
    y2=sourceCoords[5] * preScaleY;
    u0=destCoords[0] / postScaleX;
    v0=destCoords[1] / postScaleY;
    u1=destCoords[2] / postScaleX;
    v1=destCoords[3] / postScaleY;
    u2=destCoords[4] / postScaleX;
    v2=destCoords[5] / postScaleY;
    double v0mv1=v0 - v1;
    double v1mv2=v1 - v2;
    double v2mv0=v2 - v0;
    double u1mu0=u1 - u0;
    double u2mu1=u2 - u1;
    double u0mu2=u0 - u2;
    double u1v2mu2v1=u1 * v2 - u2 * v1;
    double u2v0mu0v2=u2 * v0 - u0 * v2;
    double u0v1mu1v0=u0 * v1 - u1 * v0;
    double invdet=1.0F / (u0 * (v1mv2) + v0 * (u2mu1) + (u1v2mu2v1));
    out[0]=(float)(((v1mv2) * x0 + (v2mv0) * x1 + (v0mv1) * x2) * invdet);
    out[1]=(float)(((u2mu1) * x0 + (u0mu2) * x1 + (u1mu0) * x2) * invdet);
    out[2]=(float)(((u1v2mu2v1) * x0 + (u2v0mu0v2) * x1 + (u0v1mu1v0) * x2) * invdet);
    out[3]=(float)(((v1mv2) * y0 + (v2mv0) * y1 + (v0mv1) * y2) * invdet);
    out[4]=(float)(((u2mu1) * y0 + (u0mu2) * y1 + (u1mu0) * y2) * invdet);
    out[5]=(float)(((u1v2mu2v1) * y0 + (u2v0mu0v2) * y1 + (u0v1mu1v0) * y2) * invdet);
    return out;
  }
  double[][] A=new double[equations][unknowns];
  double[] xpow=new double[degree + 1];
  double[] ypow=new double[degree + 1];
  for (i=0; i < equations; i++) {
    double[] Ai=A[i];
    double x=destCoords[2 * i + destOffset] / postScaleX;
    double y=destCoords[2 * i + 1 + destOffset] / postScaleY;
    double xtmp=1.0F;
    double ytmp=1.0F;
    for (int d=0; d <= degree; d++) {
      xpow[d]=xtmp;
      ypow[d]=ytmp;
      xtmp*=x;
      ytmp*=y;
    }
    int index=0;
    for (int deg=0; deg <= degree; deg++) {
      for (int ydeg=0; ydeg <= deg; ydeg++) {
        Ai[index++]=xpow[deg - ydeg] * ypow[ydeg];
      }
    }
  }
  double[][] V=new double[unknowns][unknowns];
  double[] W=new double[unknowns];
  double[][] U=new double[equations][unknowns];
  SVD(A,W,U,V);
  for (j=0; j < unknowns; j++) {
    double winv=W[j];
    if (winv != 0.0) {
      winv=1.0F / winv;
    }
    for (i=0; i < unknowns; i++) {
      V[i][j]*=winv;
    }
  }
  double[][] VWINVUT=matmul_t(V,U);
  for (i=0; i < unknowns; i++) {
    double tmp0=0;
    double tmp1=0;
    for (j=0; j < equations; j++) {
      double val=VWINVUT[i][j];
      tmp0+=val * sourceCoords[2 * j + sourceOffset] * preScaleX;
      tmp1+=val * sourceCoords[2 * j + 1 + sourceOffset] * preScaleY;
    }
    out[i]=(float)tmp0;
    out[i + unknowns]=(float)tmp1;
  }
  return out;
}","/** 
 * @param sourceCoords a double array containing the source coordinatesx_0, y_0, x_1, y_1, ...
 * @param destCoords a double array containing the source coordinatesx_0, y_0, x_1, y_1, ...
 * @return the best-fit coefficients for a bivariate polynomial of thegiven degree mapping the destination points into the source points.  The coefficients for the X polynomial are returned first, followed by those for the Y polynomial.
 */
public static float[] getCoeffs(float[] sourceCoords,int sourceOffset,float[] destCoords,int destOffset,int numCoords,float preScaleX,float preScaleY,float postScaleX,float postScaleY,int degree){
  int i, j, k;
  int equations=numCoords / 2;
  int unknowns=(degree + 1) * (degree + 2) / 2;
  float[] out=new float[2 * unknowns];
  if ((degree == 1) && (numCoords == 3)) {
    double x0, x1, x2, y0, y1, y2;
    double u0, u1, u2, v0, v1, v2;
    x0=sourceCoords[0] / postScaleX;
    y0=sourceCoords[1] / postScaleY;
    x1=sourceCoords[2] / postScaleX;
    y1=sourceCoords[3] / postScaleY;
    x2=sourceCoords[4] / postScaleX;
    y2=sourceCoords[5] / postScaleY;
    u0=destCoords[0] * preScaleX;
    v0=destCoords[1] * preScaleY;
    u1=destCoords[2] * preScaleX;
    v1=destCoords[3] * preScaleY;
    u2=destCoords[4] * preScaleX;
    v2=destCoords[5] * preScaleY;
    double v0mv1=v0 - v1;
    double v1mv2=v1 - v2;
    double v2mv0=v2 - v0;
    double u1mu0=u1 - u0;
    double u2mu1=u2 - u1;
    double u0mu2=u0 - u2;
    double u1v2mu2v1=u1 * v2 - u2 * v1;
    double u2v0mu0v2=u2 * v0 - u0 * v2;
    double u0v1mu1v0=u0 * v1 - u1 * v0;
    double invdet=1.0F / (u0 * (v1mv2) + v0 * (u2mu1) + (u1v2mu2v1));
    out[0]=(float)(((v1mv2) * x0 + (v2mv0) * x1 + (v0mv1) * x2) * invdet);
    out[1]=(float)(((u2mu1) * x0 + (u0mu2) * x1 + (u1mu0) * x2) * invdet);
    out[2]=(float)(((u1v2mu2v1) * x0 + (u2v0mu0v2) * x1 + (u0v1mu1v0) * x2) * invdet);
    out[3]=(float)(((v1mv2) * y0 + (v2mv0) * y1 + (v0mv1) * y2) * invdet);
    out[4]=(float)(((u2mu1) * y0 + (u0mu2) * y1 + (u1mu0) * y2) * invdet);
    out[5]=(float)(((u1v2mu2v1) * y0 + (u2v0mu0v2) * y1 + (u0v1mu1v0) * y2) * invdet);
    return out;
  }
  double[][] A=new double[equations][unknowns];
  double[] xpow=new double[degree + 1];
  double[] ypow=new double[degree + 1];
  for (i=0; i < equations; i++) {
    double[] Ai=A[i];
    double x=destCoords[2 * i + destOffset] * preScaleX;
    double y=destCoords[2 * i + 1 + destOffset] * preScaleY;
    double xtmp=1.0F;
    double ytmp=1.0F;
    for (int d=0; d <= degree; d++) {
      xpow[d]=xtmp;
      ypow[d]=ytmp;
      xtmp*=x;
      ytmp*=y;
    }
    int index=0;
    for (int deg=0; deg <= degree; deg++) {
      for (int ydeg=0; ydeg <= deg; ydeg++) {
        Ai[index++]=xpow[deg - ydeg] * ypow[ydeg];
      }
    }
  }
  double[][] V=new double[unknowns][unknowns];
  double[] W=new double[unknowns];
  double[][] U=new double[equations][unknowns];
  SVD(A,W,U,V);
  for (j=0; j < unknowns; j++) {
    double winv=W[j];
    if (winv != 0.0) {
      winv=1.0F / winv;
    }
    for (i=0; i < unknowns; i++) {
      V[i][j]*=winv;
    }
  }
  double[][] VWINVUT=matmul_t(V,U);
  for (i=0; i < unknowns; i++) {
    double tmp0=0;
    double tmp1=0;
    for (j=0; j < equations; j++) {
      double val=VWINVUT[i][j];
      tmp0+=val * sourceCoords[2 * j + sourceOffset] / postScaleX;
      tmp1+=val * sourceCoords[2 * j + 1 + sourceOffset] / postScaleY;
    }
    out[i]=(float)tmp0;
    out[i + unknowns]=(float)tmp1;
  }
  return out;
}",0.6181350114416476
153996,"private static void doTest(int equations,boolean print){
  for (int i=0; i < 6; i++) {
    c0[i]=myRandom.nextDouble() * 100.0F;
    c1[i]=myRandom.nextDouble() * 100.0F;
  }
  float[] destCoords=new float[2 * equations];
  for (int i=0; i < 2 * equations; i++) {
    destCoords[i]=myRandom.nextFloat() * 100.0F;
  }
  float[] sourceCoords=new float[2 * equations];
  for (int i=0; i < equations; i++) {
    sourceCoords[2 * i]=xpoly(destCoords[2 * i],destCoords[2 * i + 1]);
    sourceCoords[2 * i + 1]=ypoly(destCoords[2 * i],destCoords[2 * i + 1]);
  }
  float[] coeffs=getCoeffs(sourceCoords,0,destCoords,0,sourceCoords.length,0.5F,0.5F,2.0F,2.0F,2);
  if (print) {
    System.out.println(""String_Node_Str"" + equations + ""String_Node_Str"");
    for (int i=0; i < 6; i++) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ c0[i]+ ""String_Node_Str""+ coeffs[i]+ ""String_Node_Str""+ (c0[i] / coeffs[i])+ ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ c1[i]+ ""String_Node_Str""+ coeffs[i + 6]+ ""String_Node_Str""+ (c1[i] / coeffs[i + 6])+ ""String_Node_Str"");
    }
  }
}","private static void doTest(int equations,boolean print){
  for (int i=0; i < 6; i++) {
    c0[i]=myRandom.nextDouble() * 100.0F;
    c1[i]=myRandom.nextDouble() * 100.0F;
  }
  preScaleX=myRandom.nextDouble() + 2.0;
  preScaleY=myRandom.nextDouble() + 3.0;
  postScaleX=myRandom.nextDouble() + 4.0;
  postScaleY=myRandom.nextDouble() + 5.0;
  float[] destCoords=new float[2 * equations];
  for (int i=0; i < 2 * equations; i++) {
    destCoords[i]=myRandom.nextFloat() * 100.0F;
  }
  float[] sourceCoords=new float[2 * equations];
  for (int i=0; i < equations; i++) {
    sourceCoords[2 * i]=xpoly(destCoords[2 * i],destCoords[2 * i + 1]);
    sourceCoords[2 * i + 1]=ypoly(destCoords[2 * i],destCoords[2 * i + 1]);
  }
  float[] coeffs=getCoeffs(sourceCoords,0,destCoords,0,sourceCoords.length,(float)preScaleX,(float)preScaleY,(float)postScaleX,(float)postScaleY,2);
  if (print) {
    System.out.println(""String_Node_Str"" + equations + ""String_Node_Str"");
    for (int i=0; i < 6; i++) {
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ c0[i]+ ""String_Node_Str""+ coeffs[i]+ ""String_Node_Str""+ (c0[i] / coeffs[i])+ ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ c1[i]+ ""String_Node_Str""+ coeffs[i + 6]+ ""String_Node_Str""+ (c1[i] / coeffs[i + 6])+ ""String_Node_Str"");
    }
  }
}",0.813614262560778
153997,"private static float ypoly(float x,float y){
  return (float)(c1[0] + c1[1] * x + c1[2] * y + c1[3] * x * x + c1[4] * x * y + c1[5] * y * y + (myRandom.nextDouble() * noise));
}","private static float ypoly(float x,float y){
  x*=(float)preScaleX;
  y*=(float)preScaleY;
  return (float)(postScaleY * (c1[0] + c1[1] * x + c1[2] * y + c1[3] * x * x + c1[4] * x * y + c1[5] * y * y + myRandom.nextDouble() * noise));
}",0.8523002421307506
153998,"private static float xpoly(float x,float y){
  return (float)(c0[0] + c0[1] * x + c0[2] * y + c0[3] * x * x + c0[4] * x * y + c0[5] * y * y + (myRandom.nextDouble() * noise));
}","private static float xpoly(float x,float y){
  x*=(float)preScaleX;
  y*=(float)preScaleY;
  return (float)(postScaleX * (c0[0] + c0[1] * x + c0[2] * y + c0[3] * x * x + c0[4] * x * y + c0[5] * y * y + myRandom.nextDouble() * noise));
}",0.8523002421307506
153999,"public RenderedImage decodeAsRenderedImage(int page) throws IOException {
  if (page != 0) {
    throw new IOException(JaiI18N.getString(""String_Node_Str""));
  }
  return new BMPImage(input);
}","public RenderedImage decodeAsRenderedImage(int page) throws IOException {
  if (page != 0) {
    throw new IOException(JaiI18N.getString(""String_Node_Str""));
  }
  try {
    return new BMPImage(input);
  }
 catch (  Exception e) {
    throw CodecUtils.toIOException(e);
  }
}",0.8205128205128205
154000,"public RenderedImage decodeAsRenderedImage(int page) throws IOException {
  if (page != 0) {
    throw new IOException(JaiI18N.getString(""String_Node_Str""));
  }
  return new FPXImage(input,(FPXDecodeParam)param);
}","public RenderedImage decodeAsRenderedImage(int page) throws IOException {
  if (page != 0) {
    throw new IOException(JaiI18N.getString(""String_Node_Str""));
  }
  try {
    return new FPXImage(input,(FPXDecodeParam)param);
  }
 catch (  Exception e) {
    throw CodecUtils.toIOException(e);
  }
}",0.8359375
