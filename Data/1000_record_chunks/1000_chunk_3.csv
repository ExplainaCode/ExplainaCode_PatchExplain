record_number,buggy_code,fixed_code,code_similarity
2001,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && npc != null) {
      e.setCancelled(true);
    }
    if (npc != null && e.getDamager() instanceof Player && npc.isHealer()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        if (Permission.hasPermission(""String_Node_Str"",(CommandSender)player)) {
          int playerHealth=player.getHealth();
          int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
          if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
            if (playerHealth <= 19) {
              if (healerHealth >= 1) {
                player.setHealth(playerHealth + 1);
                HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              }
 else {
                player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
              }
            }
 else {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            }
          }
 else           if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
            if (playerHealth >= 1) {
              if (healerHealth < HealerPropertyPool.getMaxStrength(npc.getUID())) {
                player.setHealth(playerHealth - 1);
                HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              }
 else {
                player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
              }
            }
 else {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName()));
            }
          }
 else           if (player.getItemInHand().getType() == Material.DIAMOND_BLOCK) {
            if (healerHealth != HealerPropertyPool.getMaxStrength(npc.getUID())) {
              HealerPropertyPool.saveStrength(npc.getUID(),HealerPropertyPool.getMaxStrength(npc.getUID()));
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              int x=player.getItemInHand().getAmount();
              ItemStack diamondBlock=new ItemStack(Material.DIAMOND_BLOCK,x - 1);
              player.setItemInHand(diamondBlock);
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
        }
 else {
          player.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
    }
    if (npc != null && e.getDamager() instanceof Player && npc.isWizard()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        if (Permission.hasPermission(""String_Node_Str"",(CommandSender)player)) {
          if (player.getItemInHand().getTypeId() == Citizens.wizardInteractItem) {
            if (!npc.isWizard()) {
              return;
            }
            if (npc.getWizard().getNrOfLocations() > 0) {
              npc.getWizard().nextLocation();
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getWizard().getCurrentLocationName()));
            }
          }
        }
 else {
          player.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
    }
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && npc != null) {
      e.setCancelled(true);
    }
    if (npc != null && e.getDamager() instanceof Player && npc.isHealer()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        if (Permission.hasPermission(""String_Node_Str"",(CommandSender)player)) {
          int playerHealth=player.getHealth();
          int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
          if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
            if (playerHealth <= 19) {
              if (healerHealth >= 1) {
                player.setHealth(playerHealth + 1);
                HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              }
 else {
                player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
              }
            }
 else {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            }
          }
 else           if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
            if (playerHealth >= 1) {
              if (healerHealth < HealerPropertyPool.getMaxStrength(npc.getUID())) {
                player.setHealth(playerHealth - 1);
                HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              }
 else {
                player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
              }
            }
 else {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName()));
            }
          }
 else           if (player.getItemInHand().getType() == Material.DIAMOND_BLOCK) {
            if (healerHealth != HealerPropertyPool.getMaxStrength(npc.getUID())) {
              HealerPropertyPool.saveStrength(npc.getUID(),HealerPropertyPool.getMaxStrength(npc.getUID()));
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              int amountInHand=player.getItemInHand().getAmount();
              if (amountInHand == 1) {
                ItemStack emptyStack=null;
                player.setItemInHand(emptyStack);
              }
 else {
                player.setItemInHand(new ItemStack(Material.DIAMOND_BLOCK,amountInHand - 1));
              }
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
        }
 else {
          player.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
    }
    if (npc != null && e.getDamager() instanceof Player && npc.isWizard()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        if (Permission.hasPermission(""String_Node_Str"",(CommandSender)player)) {
          if (player.getItemInHand().getTypeId() == Citizens.wizardInteractItem) {
            if (!npc.isWizard()) {
              return;
            }
            if (npc.getWizard().getNrOfLocations() > 0) {
              npc.getWizard().nextLocation();
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getWizard().getCurrentLocationName()));
            }
          }
        }
 else {
          player.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
    }
  }
}",0.9695812651139112
2002,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && npc != null) {
      e.setCancelled(true);
    }
    if (e.getDamager() instanceof Player && npc.isHealer()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        int playerHealth=player.getHealth();
        int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
        if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
          if (playerHealth <= 19) {
            if (healerHealth >= 1) {
              player.setHealth(playerHealth + 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
          if (playerHealth >= 1) {
            if (healerHealth < HealerPropertyPool.getMaxStrength(npc.getUID())) {
              player.setHealth(playerHealth - 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName()));
          }
        }
 else         if (player.getItemInHand().getType() == Material.DIAMOND_BLOCK) {
          if (healerHealth != HealerPropertyPool.getMaxStrength(npc.getUID())) {
            HealerPropertyPool.saveStrength(npc.getUID(),HealerPropertyPool.getMaxStrength(npc.getUID()));
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            int x=player.getItemInHand().getAmount();
            ItemStack diamondBlock=new ItemStack(Material.DIAMOND_BLOCK,x - 1);
            player.setItemInHand(diamondBlock);
          }
 else {
            player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
          }
        }
      }
    }
    if (e.getDamager() instanceof Player && npc.isWizard()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        if (BasicExecutor.hasPermission(""String_Node_Str"",(CommandSender)player)) {
          if (player.getItemInHand().getTypeId() == Citizens.wizardInteractItem) {
            if (!npc.isWizard()) {
              return;
            }
            if (npc.getWizard().getNrOfLocations() > 0) {
              npc.getWizard().nextLocation();
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getWizard().getCurrentLocationName()));
            }
          }
        }
 else {
          player.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
    }
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && npc != null) {
      e.setCancelled(true);
    }
    if (e.getDamager() instanceof Player && npc.isHealer()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        int playerHealth=player.getHealth();
        int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
        if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
          if (playerHealth <= 19) {
            if (healerHealth >= 1) {
              player.setHealth(playerHealth + 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
          if (playerHealth >= 1) {
            if (healerHealth < HealerPropertyPool.getMaxStrength(npc.getUID())) {
              player.setHealth(playerHealth - 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName()));
          }
        }
 else         if (player.getItemInHand().getType() == Material.DIAMOND_BLOCK) {
          if (healerHealth != HealerPropertyPool.getMaxStrength(npc.getUID())) {
            HealerPropertyPool.saveStrength(npc.getUID(),HealerPropertyPool.getMaxStrength(npc.getUID()));
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            int x=player.getItemInHand().getAmount();
            ItemStack diamondBlock=new ItemStack(Material.DIAMOND_BLOCK,x - 1);
            player.setItemInHand(diamondBlock);
          }
 else {
            player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
          }
        }
      }
    }
    if (e.getDamager() instanceof Player && npc.isWizard()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        if (Permission.hasPermission(""String_Node_Str"",(CommandSender)player)) {
          if (player.getItemInHand().getTypeId() == Citizens.wizardInteractItem) {
            if (!npc.isWizard()) {
              return;
            }
            if (npc.getWizard().getNrOfLocations() > 0) {
              npc.getWizard().nextLocation();
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getWizard().getCurrentLocationName()));
            }
          }
        }
 else {
          player.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
    }
  }
}",0.9967836666200532
2003,"@Override public void onEntityTarget(EntityTargetEvent event){
  if (!(event instanceof NPCEntityTargetEvent))   return;
  NPCEntityTargetEvent e=(NPCEntityTargetEvent)event;
  HumanNPC npc=NPCManager.getNPC(e.getEntity());
  if (NPCManager.getNPC(e.getTarget()) != null) {
    if (e.getEntity() instanceof Monster && !(e.getEntity() instanceof Player))     e.setCancelled(true);
  }
  if (npc != null && event.getTarget() instanceof Player) {
    if (e.getNpcReason() == NpcTargetReason.NPC_RIGHTCLICKED) {
      Player p=(Player)event.getTarget();
      boolean found=false;
      if (plugin.validateTool(""String_Node_Str"",p.getItemInHand().getTypeId()) == true) {
        CitizensBasicNPCEvent ev=new CitizensBasicNPCEvent(npc.getName(),MessageUtils.getText(npc,(Player)e.getTarget(),plugin),npc,Reason.RIGHT_CLICK,(Player)e.getTarget());
        plugin.getServer().getPluginManager().callEvent(ev);
        found=true;
      }
      if (npc.isTrader()) {
        TraderInterface.handleRightClick(npc,p);
        found=true;
      }
      if (npc.isWizard()) {
        if (BasicExecutor.hasPermission(""String_Node_Str"",(CommandSender)p)) {
          if (p.getItemInHand().getTypeId() == Citizens.wizardInteractItem) {
            if (npc.getWizard().getNrOfLocations() > 0) {
              this.buyTeleport(p,npc.getWizard(),Operation.WIZARD_TELEPORT);
              found=true;
            }
          }
        }
 else {
          p.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
      if (npc.isQuester()) {
        if (p.getItemInHand().getTypeId() == Citizens.questerInteractItem) {
          p.sendMessage(""String_Node_Str"");
        }
      }
      if (found && !plugin.canSelectAny())       return;
      if (plugin.validateTool(""String_Node_Str"",p.getItemInHand().getTypeId()) == true) {
        if (!NPCManager.validateSelected(p,npc.getUID())) {
          NPCManager.NPCSelected.put(p.getName(),npc.getUID());
          p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str"");
        }
 else         if (!found && plugin.canSelectAny()) {
          p.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
      }
    }
  }
}","@Override public void onEntityTarget(EntityTargetEvent event){
  if (!(event instanceof NPCEntityTargetEvent))   return;
  NPCEntityTargetEvent e=(NPCEntityTargetEvent)event;
  HumanNPC npc=NPCManager.getNPC(e.getEntity());
  if (NPCManager.getNPC(e.getTarget()) != null) {
    if (e.getEntity() instanceof Monster && !(e.getEntity() instanceof Player))     e.setCancelled(true);
  }
  if (npc != null && event.getTarget() instanceof Player) {
    if (e.getNpcReason() == NpcTargetReason.NPC_RIGHTCLICKED) {
      Player p=(Player)event.getTarget();
      boolean found=false;
      if (plugin.validateTool(""String_Node_Str"",p.getItemInHand().getTypeId()) == true) {
        CitizensBasicNPCEvent ev=new CitizensBasicNPCEvent(npc.getName(),MessageUtils.getText(npc,(Player)e.getTarget(),plugin),npc,Reason.RIGHT_CLICK,(Player)e.getTarget());
        plugin.getServer().getPluginManager().callEvent(ev);
        found=true;
      }
      if (npc.isTrader()) {
        TraderInterface.handleRightClick(npc,p);
        found=true;
      }
      if (npc.isWizard()) {
        if (Permission.hasPermission(""String_Node_Str"",(CommandSender)p)) {
          if (p.getItemInHand().getTypeId() == Citizens.wizardInteractItem) {
            if (npc.getWizard().getNrOfLocations() > 0) {
              this.buyTeleport(p,npc.getWizard(),Operation.WIZARD_TELEPORT);
              found=true;
            }
          }
        }
 else {
          p.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
      if (npc.isQuester()) {
        if (p.getItemInHand().getTypeId() == Citizens.questerInteractItem) {
          p.sendMessage(""String_Node_Str"");
        }
      }
      if (found && !plugin.canSelectAny())       return;
      if (plugin.validateTool(""String_Node_Str"",p.getItemInHand().getTypeId()) == true) {
        if (!NPCManager.validateSelected(p,npc.getUID())) {
          NPCManager.NPCSelected.put(p.getName(),npc.getUID());
          p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str"");
        }
 else         if (!found && plugin.canSelectAny()) {
          p.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
      }
    }
  }
}",0.994998912807132
2004,"/** 
 * Handles what happens when an npc gets right clicked.
 * @param npc
 * @param player
 */
public static void handleRightClick(HumanNPC npc,Player player){
  if (npc.getTrader().isFree()) {
    if (!BasicExecutor.hasPermission(""String_Node_Str"",player)) {
      return;
    }
    Mode mode=Mode.NORMAL;
    if (NPCManager.validateOwnership(player,npc.getUID())) {
      mode=Mode.STOCK;
    }
 else     if (npc.getTrader().isUnlimited()) {
      mode=Mode.INFINITE;
    }
    TraderTask task=new TraderTask(npc,player,Citizens.plugin,mode);
    int id=Citizens.plugin.getServer().getScheduler().scheduleSyncRepeatingTask(Citizens.plugin,task,0,1);
    tasks.add(id);
    task.addID(id);
    npc.getTrader().setFree(false);
    showInventory(npc,player);
  }
 else   player.sendMessage(ChatColor.RED + ""String_Node_Str"");
}","/** 
 * Handles what happens when an npc gets right clicked.
 * @param npc
 * @param player
 */
public static void handleRightClick(HumanNPC npc,Player player){
  if (npc.getTrader().isFree()) {
    if (!Permission.hasPermission(""String_Node_Str"",player)) {
      return;
    }
    Mode mode=Mode.NORMAL;
    if (NPCManager.validateOwnership(player,npc.getUID())) {
      mode=Mode.STOCK;
    }
 else     if (npc.getTrader().isUnlimited()) {
      mode=Mode.INFINITE;
    }
    TraderTask task=new TraderTask(npc,player,Citizens.plugin,mode);
    int id=Citizens.plugin.getServer().getScheduler().scheduleSyncRepeatingTask(Citizens.plugin,task,0,1);
    tasks.add(id);
    task.addID(id);
    npc.getTrader().setFree(false);
    showInventory(npc,player);
  }
 else   player.sendMessage(ChatColor.RED + ""String_Node_Str"");
}",0.9860690490611752
2005,"/** 
 * Adds an item to be stocked by the selected trader.
 * @param player
 * @param npc
 * @param item
 * @param price
 * @param selling
 */
private void changeTraderStock(Player player,HumanNPC npc,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String keyword=""String_Node_Str"";
    if (selling)     keyword=""String_Node_Str"";
    if (npc.getTrader().getStockable(mat.getId(),selling) == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + keyword+ ""String_Node_Str"");
      return;
    }
 else {
      npc.getTrader().removeStockable(mat.getId(),selling);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str""+ keyword+ ""String_Node_Str"");
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (cost == null) {
    if (!EconomyHandler.useIconomy()) {
      player.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return;
    }
 else     if (split[0].contains(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (cost != null && cost.getData() != null)   data=cost.getData().getData();
  ItemPrice itemPrice;
  if (cost != null)   itemPrice=new ItemPrice(cost.getAmount(),cost.getTypeId(),data);
 else   itemPrice=new ItemPrice(Integer.parseInt(split[0]));
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  String keyword=""String_Node_Str"";
  if (selling) {
    s.setSelling(true);
    keyword=""String_Node_Str"";
  }
  if (npc.getTrader().isStocked(s)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ MessageUtils.getStockableMessage(s,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  npc.getTrader().addStockable(s);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
}","/** 
 * Adds an item to be stocked by the selected trader.
 * @param player
 * @param npc
 * @param item
 * @param price
 * @param selling
 */
private void changeTraderStock(Player player,HumanNPC npc,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String keyword=""String_Node_Str"";
    if (!selling)     keyword=""String_Node_Str"";
    if (npc.getTrader().getStockable(mat.getId(),selling) == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + keyword+ ""String_Node_Str"");
      return;
    }
 else {
      npc.getTrader().removeStockable(mat.getId(),selling);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str""+ keyword+ ""String_Node_Str"");
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (cost == null) {
    if (!EconomyHandler.useIconomy()) {
      player.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      return;
    }
 else     if (split[0].contains(""String_Node_Str"")) {
      player.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (cost != null && cost.getData() != null)   data=cost.getData().getData();
  ItemPrice itemPrice;
  if (cost != null)   itemPrice=new ItemPrice(cost.getAmount(),cost.getTypeId(),data);
 else   itemPrice=new ItemPrice(Integer.parseInt(split[0]));
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  String keyword=""String_Node_Str"";
  if (!selling) {
    keyword=""String_Node_Str"";
  }
  if (selling) {
    s.setSelling(true);
  }
  if (npc.getTrader().isStocked(s)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ MessageUtils.getStockableMessage(s,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  npc.getTrader().addStockable(s);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
}",0.9864218779881432
2006,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!npc.isTrader()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args.length >= 2 && args[0].contains(""String_Node_Str"") && (args[1].contains(""String_Node_Str"") || args[1].contains(""String_Node_Str""))) {
    if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
      displayList(player,npc,args,args[1].contains(""String_Node_Str""));
    }
 else     player.sendMessage(MessageUtils.noPermissionsMessage);
    returnval=true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    if (!returnval)     player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
 else {
    if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        try {
          if (!EconomyHandler.useIconomy())           player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
 else           changeBalance(player,npc,args);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && (args[0].contains(""String_Node_Str"") || args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeTraderStock(player,npc,args[1],args[2],args[0].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeUnlimited(npc,sender,args[1]);
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        HelpUtils.sendTraderHelp(sender);
      }
 else {
        player.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    TraderPropertyPool.saveState(npc);
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!npc.isTrader()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args.length >= 2 && args[0].contains(""String_Node_Str"") && (args[1].contains(""String_Node_Str"") || args[1].contains(""String_Node_Str""))) {
    if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
      if (!EconomyHandler.useIconomy())       player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
 else       displayList(player,npc,args,args[1].contains(""String_Node_Str""));
    }
 else     player.sendMessage(MessageUtils.noPermissionsMessage);
    returnval=true;
  }
 else   if (args.length == 1 && args[0].contains(""String_Node_Str"")) {
    if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
      displayMoney(player,npc);
    }
 else     player.sendMessage(MessageUtils.noPermissionsMessage);
    returnval=true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    if (!returnval)     player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
 else {
    if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        try {
          if (!EconomyHandler.useIconomy())           player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
 else           changeBalance(player,npc,args);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && (args[0].contains(""String_Node_Str"") || args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeTraderStock(player,npc,args[1],args[2],args[0].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeUnlimited(npc,sender,args[1]);
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        HelpUtils.sendTraderHelp(sender);
      }
 else {
        player.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    TraderPropertyPool.saveState(npc);
  }
  return returnval;
}",0.9365920355494788
2007,"/** 
 * Sets the in-hand item of an npc.
 * @param p
 * @param npc
 * @param material
 */
public void setItemInHand(Player p,HumanNPC npc,String material){
  Material mat=StringUtils.parseMaterial(material);
  if (mat == null) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!p.getInventory().contains(mat)) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  p.getInventory().remove(mat);
  ArrayList<Integer> items=PropertyPool.getItems(npc.getUID());
  int olditem=items.get(0);
  items.set(0,mat.getId());
  NPCDataManager.addItems(npc,items);
  if ((olditem != 0 && items.get(0) == 0)) {
    super.removeNPCForRespawn(npc.getUID());
    super.registerNPC(npc.getName(),npc.getUID(),npc.getOwner());
  }
}","/** 
 * Sets the in-hand item of an npc.
 * @param p
 * @param npc
 * @param material
 */
public void setItemInHand(Player p,HumanNPC npc,String material){
  Material mat=StringUtils.parseMaterial(material);
  if (mat == null) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!p.getInventory().contains(mat)) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (npc.isTrader()) {
    p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    return;
  }
  int slot=p.getInventory().first(mat);
  ItemStack item=p.getInventory().getItem(slot);
  int amount=item.getAmount() - 1;
  if (amount == 0)   item=null;
 else   item.setAmount(amount);
  p.getInventory().setItem(slot,item);
  ArrayList<Integer> items=PropertyPool.getItems(npc.getUID());
  int olditem=items.get(0);
  items.set(0,mat.getId());
  NPCDataManager.addItems(npc,items);
  if ((olditem != 0 && items.get(0) == 0)) {
    super.removeNPCForRespawn(npc.getUID());
    super.registerNPC(npc.getName(),npc.getUID(),npc.getOwner());
  }
}",0.8311258278145696
2008,"private void handlePlayerItemClicked(int slot,PlayerInventory playerInv){
  playerInv.setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=playerInv.getItem(slot);
  Stockable stockable=getStockable(i,""String_Node_Str"",true);
  if (stockable == null)   return;
  if (previousPlayerClickedSlot != slot) {
    previousPlayerClickedSlot=slot;
    sendStockableMessage(""String_Node_Str"",stockable);
    return;
  }
  previousPlayerClickedSlot=slot;
  if (checkMiscellaneous(playerInv,stockable,slot,""String_Node_Str"",false))   return;
  ItemStack selling=stockable.getStocking();
  HashMap<Integer,ItemStack> unsold=new HashMap<Integer,ItemStack>();
  if (mode != Mode.INFINITE) {
    unsold=npc.getInventory().addItem(stockable.getPrice().getItemStack());
  }
  if (unsold.size() >= 1) {
    restorePreviousState();
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + MessageUtils.getStackToString(selling,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!stockable.isiConomy()) {
    unsold=player.getInventory().addItem(stockable.getStocking());
    if (unsold.size() >= 1) {
      restorePreviousState();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + stockable.getString(ChatColor.RED)+ ""String_Node_Str"");
      return;
    }
  }
  if (mode != Mode.INFINITE)   EconomyHandler.pay(new Payment(stockable.getStocking(),false),npc,-1);
  EconomyHandler.pay(new Payment(stockable.getPrice()),player,slot);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","private void handlePlayerItemClicked(int slot,PlayerInventory playerInv){
  playerInv.setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=playerInv.getItem(slot);
  Stockable stockable=getStockable(i,""String_Node_Str"",true);
  if (stockable == null)   return;
  if (previousPlayerClickedSlot != slot) {
    previousPlayerClickedSlot=slot;
    sendStockableMessage(""String_Node_Str"",stockable);
    return;
  }
  previousPlayerClickedSlot=slot;
  if (checkMiscellaneous(playerInv,stockable,slot,""String_Node_Str"",false))   return;
  ItemStack selling=stockable.getStocking();
  HashMap<Integer,ItemStack> unsold=new HashMap<Integer,ItemStack>();
  if (mode != Mode.INFINITE) {
    unsold=npc.getInventory().addItem(stockable.getStocking());
  }
  if (unsold.size() >= 1) {
    restorePreviousState();
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + MessageUtils.getStackToString(selling,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!stockable.isiConomy()) {
    unsold=player.getInventory().addItem(stockable.getPrice().getItemStack());
    if (unsold.size() >= 1) {
      restorePreviousState();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + stockable.getString(ChatColor.RED)+ ""String_Node_Str"");
      return;
    }
  }
  if (mode != Mode.INFINITE)   EconomyHandler.pay(new Payment(stockable.getPrice()),npc,-1);
  EconomyHandler.pay(new Payment(stockable.getStocking(),false),player,slot);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.966022651565623
2009,"/** 
 * Sends the help page for the trader npc type.
 * @param sender
 * @param page
 */
public static void sendTraderHelp(CommandSender sender){
  header(sender,""String_Node_Str"",1,1);
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  footer(sender);
}","/** 
 * Sends the help page for the trader npc type.
 * @param sender
 * @param page
 */
public static void sendTraderHelp(CommandSender sender){
  header(sender,""String_Node_Str"",1,1);
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  formatCommand(sender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  footer(sender);
}",0.9382329945269742
2010,"@Override public void run(){
  log.info(""String_Node_Str"");
  PropertyPool.saveAll();
  TraderPropertyPool.saveAll();
  HealerPropertyPool.saveAll();
  QuesterPropertyPool.saveAll();
  log.info(""String_Node_Str"");
}","@Override public void run(){
  log.info(""String_Node_Str"");
  PropertyPool.saveAll();
  TraderPropertyPool.saveAll();
  HealerPropertyPool.saveAll();
  WizardPropertyPool.saveAll();
  QuesterPropertyPool.saveAll();
  log.info(""String_Node_Str"");
}",0.9307359307359307
2011,"public void onEnable(){
  File file=new File(""String_Node_Str"");
  file.delete();
  file=new File(""String_Node_Str"");
  file.delete();
  BasicExecutor executor=new BasicExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  TraderExecutor traderExecutor=new TraderExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(traderExecutor);
  HealerExecutor healerExecutor=new HealerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(healerExecutor);
  WizardExecutor wizardExecutor=new WizardExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(wizardExecutor);
  QuesterExecutor questerExecutor=new QuesterExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(questerExecutor);
  TogglerExecutor togglerExecutor=new TogglerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(togglerExecutor);
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,cl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,wl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,wl,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,pl,Event.Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  version=pdfFile.getVersion();
  Permission.initialize(getServer());
  setupVariables();
  if (getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      setupNPCs();
    }
  }
) == -1) {
    log.info(""String_Node_Str"");
    setupNPCs();
  }
  setupHelp();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TickTask(this,npcRange),tickDelay,tickDelay);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      log.info(""String_Node_Str"");
      PropertyPool.saveAll();
      TraderPropertyPool.saveAll();
      HealerPropertyPool.saveAll();
      QuesterPropertyPool.saveAll();
      log.info(""String_Node_Str"");
    }
  }
,saveDelay,saveDelay);
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}","public void onEnable(){
  File file=new File(""String_Node_Str"");
  file.delete();
  file=new File(""String_Node_Str"");
  file.delete();
  BasicExecutor executor=new BasicExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  TraderExecutor traderExecutor=new TraderExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(traderExecutor);
  HealerExecutor healerExecutor=new HealerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(healerExecutor);
  WizardExecutor wizardExecutor=new WizardExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(wizardExecutor);
  QuesterExecutor questerExecutor=new QuesterExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(questerExecutor);
  TogglerExecutor togglerExecutor=new TogglerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(togglerExecutor);
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,cl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,wl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,wl,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,pl,Event.Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  version=pdfFile.getVersion();
  Permission.initialize(getServer());
  setupVariables();
  if (getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      setupNPCs();
    }
  }
) == -1) {
    log.info(""String_Node_Str"");
    setupNPCs();
  }
  setupHelp();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TickTask(this,npcRange),tickDelay,tickDelay);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      log.info(""String_Node_Str"");
      PropertyPool.saveAll();
      TraderPropertyPool.saveAll();
      HealerPropertyPool.saveAll();
      WizardPropertyPool.saveAll();
      QuesterPropertyPool.saveAll();
      log.info(""String_Node_Str"");
    }
  }
,saveDelay,saveDelay);
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}",0.9900318979266348
2012,"/** 
 * Schedule a timer to regenerate a healer's health based on their level
 */
private int getHealthRegenRate(){
  int delay=0;
  if (!NPCManager.getNPCList().isEmpty()) {
    for (    Entry<Integer,HumanNPC> entry : NPCManager.getNPCList().entrySet()) {
      int level=HealerPropertyPool.getLevel(entry.getValue().getUID());
      delay=healerHealthRegenIncrement * (11 - level);
      return delay;
    }
  }
 else {
    log.info(""String_Node_Str"");
    return delay;
  }
  log.info(""String_Node_Str"");
  return delay;
}","/** 
 * Schedule a timer to regenerate a healer's health based on their level
 */
private int getHealthRegenRate(){
  int delay=0;
  if (!NPCManager.getNPCList().isEmpty()) {
    for (    Entry<Integer,HumanNPC> entry : NPCManager.getNPCList().entrySet()) {
      int level=HealerPropertyPool.getLevel(entry.getValue().getUID());
      delay=healerHealthRegenIncrement * (11 - level);
      return delay;
    }
  }
 else {
    return 12000;
  }
  return delay;
}",0.9109311740890688
2013,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    sender.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    sender.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isQuester()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        Quest quest=new Quest(player,npc,QuestType.BUILD,false);
        quest.giveiConomyReward(player,10);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    sender.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    sender.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isQuester()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        Quest quest=new Quest(player,npc,QuestType.BUILD,false);
        quest.giveiConomyReward(player,10);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
  }
  return returnval;
}",0.9991423670668954
2014,"/** 
 * Turns the selected NPC into all types of NPCs
 * @param npc
 * @param player
 */
private void toggleAll(HumanNPC npc,Player player,boolean on){
  if (on) {
    if (!npc.isTrader()) {
      toggleState(player,npc.getTrader());
    }
    if (!npc.isHealer()) {
      toggleState(player,npc.getHealer());
    }
    if (!npc.isWizard()) {
      toggleState(player,npc.getWizard());
    }
  }
 else {
    if (npc.isTrader()) {
      toggleState(player,npc.getTrader());
    }
    if (npc.isHealer()) {
      toggleState(player,npc.getHealer());
    }
    if (npc.isWizard()) {
      toggleState(player,npc.getWizard());
    }
  }
}","/** 
 * Turns the selected NPC into all types of NPCs
 * @param npc
 * @param player
 */
private void toggleAll(HumanNPC npc,Player player,boolean on){
  if (on) {
    if (!npc.isTrader()) {
      toggleState(player,npc.getTrader());
    }
    if (!npc.isHealer()) {
      toggleState(player,npc.getHealer());
    }
    if (!npc.isWizard()) {
      toggleState(player,npc.getWizard());
    }
    if (!npc.isQuester()) {
      toggleState(player,npc.getQuester());
    }
  }
 else {
    if (npc.isTrader()) {
      toggleState(player,npc.getTrader());
    }
    if (npc.isHealer()) {
      toggleState(player,npc.getHealer());
    }
    if (npc.isWizard()) {
      toggleState(player,npc.getWizard());
    }
    if (npc.isQuester()) {
      toggleState(player,npc.getQuester());
    }
  }
}",0.8868587491215741
2015,"/** 
 * NPC Wizard Subclass
 * @param npc
 */
public QuesterNPC(HumanNPC npc){
  this.npc=npc;
}","/** 
 * NPC Quester object
 * @param npc
 */
public QuesterNPC(HumanNPC npc){
  this.npc=npc;
}",0.8900523560209425
2016,"public static void saveState(HumanNPC npc){
  if (isQuester(npc.getUID())) {
    saveQuester(npc.getUID(),npc.isHealer());
  }
}","public static void saveState(HumanNPC npc){
  if (isQuester(npc.getUID())) {
    saveQuester(npc.getUID(),npc.isQuester());
  }
}",0.9727626459143968
2017,"public void setQuester(boolean value){
  this.isQuester=value;
}","public void setQuester(boolean enable){
  this.isQuester=enable;
}",0.9230769230769232
2018,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isWizard()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 1000 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        this.displayStatus(player,npc);
      }
 else {
        player.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        HelpUtils.sendWizardHelp(sender);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        this.dislayLocations(player,npc);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        if (npc.getWizard().getNrOfLocations() < Citizens.wizardMaxLocations) {
          this.addLocation(player,npc,args[1]);
        }
 else {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ Citizens.wizardMaxLocations+ ""String_Node_Str"");
        }
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        if (Integer.parseInt(args[1]) <= npc.getWizard().getNrOfLocations()) {
          this.removeLocation(player,npc,Integer.parseInt(args[1]));
        }
 else {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    WizardPropertyPool.saveState(npc);
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isWizard()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 1000 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        this.displayStatus(player,npc);
      }
 else {
        player.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        HelpUtils.sendWizardHelp(sender);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        this.dislayLocations(player,npc);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        if (npc.getWizard().getNrOfLocations() < Citizens.wizardMaxLocations) {
          this.addLocation(player,npc,args[1]);
        }
 else {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ Citizens.wizardMaxLocations+ ""String_Node_Str"");
        }
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        int type=-1;
        try {
          Integer.parseInt(args[1]);
        }
 catch (        Exception e) {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
        if (type != -1) {
          if (type <= npc.getWizard().getNrOfLocations()) {
            this.removeLocation(player,npc,Integer.parseInt(args[1]));
          }
 else {
            sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
          }
        }
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    WizardPropertyPool.saveState(npc);
  }
  return returnval;
}",0.9508522257157042
2019,"public static void saveLocations(int UID,String locationString){
  locations.setString(UID,locationString);
}","public static void saveLocations(int UID,String locationString){
  locations.setString(UID,locationString.replace(""String_Node_Str"",""String_Node_Str""));
}",0.8288973384030418
2020,"public static String getLocations(int UID){
  return locations.getString(UID);
}","public static String getLocations(int UID){
  return locations.getString(UID).replace(""String_Node_Str"",""String_Node_Str"");
}",0.7804878048780488
2021,"public void addLocation(Location location,String locName){
  String addedLoc=""String_Node_Str"";
  addedLoc=""String_Node_Str"" + locName + ""String_Node_Str""+ location.getWorld().getName()+ ""String_Node_Str""+ location.getX()+ ""String_Node_Str""+ location.getY()+ ""String_Node_Str""+ location.getZ()+ ""String_Node_Str""+ location.getYaw()+ ""String_Node_Str""+ location.getPitch()+ ""String_Node_Str"";
  locations=locations + addedLoc;
  nrOfLocations=locations.split(""String_Node_Str"").length;
  if (locations.split(""String_Node_Str"")[0].isEmpty()) {
    nrOfLocations=0;
  }
}","public void addLocation(Location location,String locName){
  String addedLoc=""String_Node_Str"";
  addedLoc=""String_Node_Str"" + locName + ""String_Node_Str""+ location.getWorld().getName()+ ""String_Node_Str""+ location.getX()+ ""String_Node_Str""+ location.getY()+ ""String_Node_Str""+ location.getZ()+ ""String_Node_Str""+ location.getYaw()+ ""String_Node_Str""+ location.getPitch()+ ""String_Node_Str"";
  locations=locations + addedLoc;
  nrOfLocations=locations.split(""String_Node_Str"").length;
  if (locations.split(""String_Node_Str"")[0].isEmpty()) {
    nrOfLocations=0;
  }
  WizardPropertyPool.saveLocations(npc.getUID(),locations);
}",0.9498327759197324
2022,"public void setLocations(String locationsinc){
  locations=locationsinc;
  nrOfLocations=locations.split(""String_Node_Str"").length;
  if (locations.split(""String_Node_Str"")[0].isEmpty()) {
    nrOfLocations=0;
  }
}","public void setLocations(String locationsinc){
  locations=locationsinc;
  nrOfLocations=locations.split(""String_Node_Str"").length;
  if (locations.split(""String_Node_Str"")[0].isEmpty()) {
    nrOfLocations=0;
  }
  WizardPropertyPool.saveLocations(npc.getUID(),locations);
}",0.8775510204081632
2023,"public HumanEntity getPlayer(){
  return (HumanEntity)this.mcEntity.getBukkitEntity();
}","public Player getPlayer(){
  return (Player)this.mcEntity.getBukkitEntity();
}",0.8433734939759037
2024,"/** 
 * Adds an item to be stocked by the selected trader.
 * @param player
 * @param npc
 * @param item
 * @param price
 * @param selling
 */
private void changeTraderStock(Player player,HumanNPC npc,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (selling) {
      if (npc.getTraderNPC().getStockable(mat.getId(),true) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),true);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
 else {
      if (npc.getTraderNPC().getStockable(mat.getId(),false) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),false);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (stack.getData() != null)   data=stack.getData().getData();
  ItemPrice itemPrice=new ItemPrice(stack.getAmount(),stack.getTypeId(),data);
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  String keyword=""String_Node_Str"";
  if (selling) {
    s.setSelling(true);
    keyword=""String_Node_Str"";
  }
  if (npc.getTraderNPC().isStocked(s)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ MessageUtils.getStockableMessage(s,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  npc.getTraderNPC().addStockable(s);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + keyword+ MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
}","/** 
 * Adds an item to be stocked by the selected trader.
 * @param player
 * @param npc
 * @param item
 * @param price
 * @param selling
 */
private void changeTraderStock(Player player,HumanNPC npc,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (selling) {
      if (npc.getTraderNPC().getStockable(mat.getId(),true) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),true);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
 else {
      if (npc.getTraderNPC().getStockable(mat.getId(),false) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),false);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (cost.getData() != null)   data=cost.getData().getData();
  ItemPrice itemPrice=new ItemPrice(cost.getAmount(),cost.getTypeId(),data);
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  String keyword=""String_Node_Str"";
  if (selling) {
    s.setSelling(true);
    keyword=""String_Node_Str"";
  }
  if (npc.getTraderNPC().isStocked(s)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ MessageUtils.getStockableMessage(s,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  npc.getTraderNPC().addStockable(s);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + keyword+ MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
}",0.9924906132665832
2025,"@Override public void toggle(){
  npc.setHealer(!npc.isHealer());
}","@Override public void toggle(){
  npc.setHealer(!npc.isHealer());
  if (npc.isHealer()) {
    HealerPropertyPool.saveStrength(npc.getUID(),20);
  }
}",0.6203703703703703
2026,"private void handleNPCItemClicked(int slot,PlayerInventory npcInv){
  npcInv.setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npcInv.getItem(slot);
  if (!(npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),false))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),false);
  ItemStack buying=stockable.getStocking();
  if (previousNPCClickedSlot != slot) {
    previousNPCClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousNPCClickedSlot=slot;
  int amount=npcInv.getItem(slot).getAmount();
  if (amount - buying.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(buying);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),player);
  EconomyHandler.pay(new Payment(stockable.getStocking(),stockable.getPrice().isiConomy()),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","private void handleNPCItemClicked(int slot,PlayerInventory npcInv){
  npcInv.setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npcInv.getItem(slot);
  if (!(npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),false))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),false);
  ItemStack buying=stockable.getStocking();
  if (previousNPCClickedSlot != slot) {
    previousNPCClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousNPCClickedSlot=slot;
  int amount=npcInv.getItem(slot).getAmount();
  if (amount - buying.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(buying);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> ungiven=npc.getPlayer().getInventory().addItem(stockable.getStocking());
  if (ungiven.size() >= 1) {
    npc.getInventory().setContents(previousNPCInv.getContents());
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(stockable.getStocking().getAmount() + ""String_Node_Str"" + stockable.getStocking().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),player);
  EconomyHandler.pay(new Payment(stockable.getStocking(),stockable.getPrice().isiConomy()),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.8826972605947085
2027,"private void handlePlayerItemClicked(int slot,PlayerInventory playerInv){
  playerInv.setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=playerInv.getItem(slot);
  if (!npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),true)) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),true);
  ItemStack selling=stockable.getStocking();
  if (previousPlayerClickedSlot != slot) {
    previousPlayerClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousPlayerClickedSlot=slot;
  int amount=playerInv.getItem(slot).getAmount();
  if (amount - selling.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unsold=npc.getInventory().addItem(selling);
  if (unsold.size() >= 1) {
    npc.getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),npc);
  EconomyHandler.pay(new Payment(stockable.getStocking(),stockable.getPrice().isiConomy()),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","private void handlePlayerItemClicked(int slot,PlayerInventory playerInv){
  playerInv.setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=playerInv.getItem(slot);
  if (!npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),true)) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),true);
  ItemStack selling=stockable.getStocking();
  if (previousPlayerClickedSlot != slot) {
    previousPlayerClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousPlayerClickedSlot=slot;
  int amount=playerInv.getItem(slot).getAmount();
  if (amount - selling.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unsold=npc.getInventory().addItem(selling);
  if (unsold.size() >= 1) {
    npc.getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> ungiven=player.getInventory().addItem(stockable.getStocking());
  if (ungiven.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    npc.getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(stockable.getStocking().getAmount() + ""String_Node_Str"" + stockable.getStocking().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),npc);
  EconomyHandler.pay(new Payment(stockable.getStocking(),stockable.getPrice().isiConomy()),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.8854215183977643
2028,"public static void saveAll(){
  healers.save();
  strength.save();
}","public static void saveAll(){
  healers.save();
  strength.save();
  levels.save();
}",0.8888888888888888
2029,"public static void saveAll(){
  questers.save();
  questSettings.save();
}","public static void saveAll(){
  questers.save();
}",0.8064516129032258
2030,"public static void removeFromFiles(int UID){
  questers.removeKey(UID);
  questSettings.removeKey(UID);
}","public static void removeFromFiles(int UID){
  questers.removeKey(UID);
}",0.8202247191011236
2031,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  if (NPCManager.validateSelected(player))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,player)) {
        createNPC(args,player);
      }
 else       if (EconomyHandler.useEconomy()) {
        sender.sendMessage(MessageUtils.getNoMoneyMessage(Operation.BASIC_NPC_CREATE,player));
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          moveNPC(sender,npc.getName(),npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          removeNPC(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else     if (hasPermission(""String_Node_Str"",sender)) {
      if (args.length == 2 && args[1].equals(""String_Node_Str"")) {
        removeNPC(args,sender,npc);
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setName(args[1],sender,npc);
          NPCManager.NPCSelected.remove(player.getName());
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"") || NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setColour(args,player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          addText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          resetText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setItemInHand(args[1],sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setArmor(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.teleport((PropertyPool.getLocationFromID(npc.getUID())));
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 2) {
    int page=1;
    if (args.length == 3)     page=Integer.parseInt(args[2]);
    if (args[0].equals(""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
      if (hasPermission(""String_Node_Str"",sender)) {
        sendBasicHelpPage(sender,page);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
 else     if (args[0].equals(""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
      if (hasPermission(""String_Node_Str"",sender)) {
        sendTraderHelpPage(sender,page);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          copyNPC(npc.getUID(),npc.getName(),player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!Character.isDigit(args[1].charAt(0))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(player.getName(),npc.getUID());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(PropertyPool.getOwner(npc.getUID()))+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setOwner(player,npc,args[1]);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          PropertyPool.addOwner(npc.getUID(),args[1],player);
          npc.getNPCData().setOwner(player.getName());
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1])+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeTalkWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeLookWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  if (NPCManager.validateSelected(player))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,player)) {
        createNPC(args,player);
      }
 else       if (EconomyHandler.useEconomy()) {
        sender.sendMessage(MessageUtils.getNoMoneyMessage(Operation.BASIC_NPC_CREATE,player));
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          moveNPC(sender,npc.getName(),npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          removeNPC(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else     if (hasPermission(""String_Node_Str"",sender)) {
      if (args.length == 2 && args[1].equals(""String_Node_Str"")) {
        removeNPC(args,sender,npc);
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setName(args[1],sender,npc);
          NPCManager.NPCSelected.remove(player.getName());
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"") || NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setColour(args,player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          addText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          resetText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setItemInHand(args[1],sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setArmor(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.teleport((PropertyPool.getLocationFromID(npc.getUID())));
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          copyNPC(npc.getUID(),npc.getName(),player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!Character.isDigit(args[1].charAt(0))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(player.getName(),npc.getUID());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(PropertyPool.getOwner(npc.getUID()))+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setOwner(player,npc,args[1]);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          PropertyPool.addOwner(npc.getUID(),args[1],player);
          npc.getNPCData().setOwner(player.getName());
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1])+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeTalkWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeLookWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 2) {
    if (args[1].equals(""String_Node_Str"")) {
      int page=1;
      if (args.length == 3)       page=Integer.parseInt(args[2]);
      if (args[0].equals(""String_Node_Str"")) {
        if (hasPermission(""String_Node_Str"",sender)) {
          sendBasicHelpPage(sender,page);
        }
 else {
          sender.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
 else       if (args[0].equals(""String_Node_Str"")) {
        if (hasPermission(""String_Node_Str"",sender)) {
          sendTraderHelpPage(sender,page);
        }
 else {
          sender.sendMessage(MessageUtils.noPermissionsMessage);
        }
      }
    }
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}",0.9057365416758648
2032,"/** 
 * Copies an npc's data and position to another npc.
 * @param npc
 * @param p
 */
private void copyNPC(int UID,String name,Player p){
  ArrayList<String> texts=PropertyPool.getText(UID);
  String colour=PropertyPool.getColour(UID);
  String owner=PropertyPool.getOwner(UID);
  ArrayList<Integer> items=PropertyPool.getItems(UID);
  boolean lookatplayers=PropertyPool.getLookWhenClose(UID);
  boolean talkwhenclose=PropertyPool.getTalkWhenClose(UID);
  int newUID=plugin.handler.spawnNPC(name,p.getLocation(),p.getName());
  HumanNPC newNPC=NPCManager.getNPC(newUID);
  newNPC.setNPCData(new NPCData(newNPC.getName(),newNPC.getUID(),newNPC.getLocation(),colour,items,texts,lookatplayers,talkwhenclose,owner,newNPC.getBalance()));
  PropertyPool.saveBasicNPCState(newUID,newNPC.getNPCData());
  String newName=newNPC.getName();
  NPCManager.removeNPCForRespawn(newUID);
  plugin.handler.spawnExistingNPC(newName,newUID,newNPC.getOwner());
}","/** 
 * Copies an npc's data and position to another npc.
 * @param npc
 * @param p
 */
private void copyNPC(int UID,String name,Player p){
  ArrayList<String> texts=PropertyPool.getText(UID);
  String colour=PropertyPool.getColour(UID);
  String owner=PropertyPool.getOwner(UID);
  ArrayList<Integer> items=PropertyPool.getItems(UID);
  boolean lookatplayers=PropertyPool.getLookWhenClose(UID);
  boolean talkwhenclose=PropertyPool.getTalkWhenClose(UID);
  int newUID=plugin.handler.spawnNPC(name,p.getLocation(),p.getName());
  HumanNPC newNPC=NPCManager.getNPC(newUID);
  newNPC.setNPCData(new NPCData(newNPC.getName(),newNPC.getUID(),newNPC.getLocation(),colour,items,texts,lookatplayers,talkwhenclose,owner,newNPC.getBalance()));
  PropertyPool.saveState(newUID,newNPC.getNPCData());
  String newName=newNPC.getName();
  NPCManager.removeNPCForRespawn(newUID);
  plugin.handler.spawnExistingNPC(newName,newUID,newNPC.getOwner());
}",0.9957446808510638
2033,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isHealer()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        displayHealerStrength(player,npc);
      }
 else {
        player.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    HealerPropertyPool.saveHealerState(npc);
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isHealer()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        displayHealerStrength(player,npc);
      }
 else {
        player.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    HealerPropertyPool.saveState(npc);
  }
  return returnval;
}",0.9973707274320772
2034,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (args.length == 0) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        if (!TraderPropertyPool.isTrader(npc.getUID())) {
          buyTrader(npc,player);
        }
 else {
          toggleTrader(npc,player);
        }
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        if (!HealerPropertyPool.isHealer(npc.getUID())) {
          buyHealer(npc,player);
        }
 else {
          toggleHealer(npc,player);
        }
        returnval=true;
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (args[1].equals(""String_Node_Str"")) {
        toggleAllOn(npc,player);
      }
 else       if (args[1].equals(""String_Node_Str"")) {
        toggleAllOff(npc,player);
      }
      returnval=true;
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    TraderPropertyPool.saveTraderState(npc);
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (args.length == 0) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        if (!TraderPropertyPool.isTrader(npc.getUID())) {
          buyState(player,npc.getTraderNPC(),Operation.TRADER_NPC_CREATE);
        }
 else {
          toggleState(player,npc.getTraderNPC());
        }
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        if (!HealerPropertyPool.isHealer(npc.getUID())) {
          buyState(player,npc.getHealerNPC(),Operation.HEALER_NPC_CREATE);
        }
 else {
          toggleState(player,npc.getHealerNPC());
        }
        returnval=true;
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
      returnval=true;
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
      returnval=true;
    }
 else     if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      if (args[1].equals(""String_Node_Str""))       toggleAll(npc,player,true);
 else       if (args[1].equals(""String_Node_Str""))       toggleAll(npc,player,false);
      returnval=true;
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  return returnval;
}",0.8859518226390961
2035,"/** 
 * Adds an item to be stocked by the selected trader.
 * @param player
 * @param npc
 * @param item
 * @param price
 * @param selling
 */
private void changeTraderStock(Player player,HumanNPC npc,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (selling) {
      if (npc.getTraderNPC().getStockable(mat.getId(),true) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),true);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
 else {
      if (npc.getTraderNPC().getStockable(mat.getId(),false) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),false);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (stack.getData() != null)   data=stack.getData().getData();
  ItemPrice itemPrice=new ItemPrice(stack.getAmount(),stack.getTypeId(),data);
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  if (npc.getTraderNPC().isStocked(s)) {
    if (selling)     player.sendMessage(ChatColor.RED + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.RED)+ ""String_Node_Str"");
 else     player.sendMessage(ChatColor.RED + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (selling) {
    s.setSelling(true);
    npc.getTraderNPC().addStockable(s);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
  }
 else {
    npc.getTraderNPC().addStockable(s);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
  }
}","/** 
 * Adds an item to be stocked by the selected trader.
 * @param player
 * @param npc
 * @param item
 * @param price
 * @param selling
 */
private void changeTraderStock(Player player,HumanNPC npc,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (selling) {
      if (npc.getTraderNPC().getStockable(mat.getId(),true) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),true);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
 else {
      if (npc.getTraderNPC().getStockable(mat.getId(),false) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),false);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (stack.getData() != null)   data=stack.getData().getData();
  ItemPrice itemPrice=new ItemPrice(stack.getAmount(),stack.getTypeId(),data);
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  String keyword=""String_Node_Str"";
  if (selling) {
    s.setSelling(true);
    keyword=""String_Node_Str"";
  }
  if (npc.getTraderNPC().isStocked(s)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + keyword+ ""String_Node_Str""+ MessageUtils.getStockableMessage(s,ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  npc.getTraderNPC().addStockable(s);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + keyword+ MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
}",0.8759182052809212
2036,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isTrader()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        try {
          if (!EconomyHandler.useIconomy())           player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
 else           changeBalance(player,npc,args);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && (args[0].contains(""String_Node_Str"") || args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeTraderStock(player,npc,args[1],args[2],args[0].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeUnlimited(npc,sender,args[1]);
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && args[0].contains(""String_Node_Str"") && (args[1].contains(""String_Node_Str"") || args[1].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        displayList(player,npc,args,args[1].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
    TraderPropertyPool.saveTraderState(npc);
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isTrader()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        try {
          if (!EconomyHandler.useIconomy())           player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
 else           changeBalance(player,npc,args);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && (args[0].contains(""String_Node_Str"") || args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeTraderStock(player,npc,args[1],args[2],args[0].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeUnlimited(npc,sender,args[1]);
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && args[0].contains(""String_Node_Str"") && (args[1].contains(""String_Node_Str"") || args[1].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        displayList(player,npc,args,args[1].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
    TraderPropertyPool.saveState(npc);
  }
  return returnval;
}",0.9987745098039216
2037,"/** 
 * Gets the currency of a payment (iConomy currency or item name).
 * @param payment
 * @return
 */
public static String getCurrency(Payment payment){
  if (useEconomy) {
    if (payment.isiConomy() && useIconomy())     return IconomyInterface.getCurrency(payment.getPrice());
 else     return ItemInterface.getCurrency(payment);
  }
 else   return ""String_Node_Str"";
}","/** 
 * Gets the currency of a payment (iConomy currency or item name).
 * @param payment
 * @return
 */
public static String getCurrency(Payment payment,ChatColor colour){
  if (useEconomy) {
    if (payment.isiConomy() && useIconomy())     return IconomyInterface.getCurrency(payment.getPrice());
 else     return ItemInterface.getCurrency(payment,colour);
  }
 else   return ""String_Node_Str"";
}",0.9689119170984456
2038,"/** 
 * Gets what item ID or iConomy currency is being used for an operation.
 * @param op
 * @param amount
 * @return
 */
public static String getPaymentType(Operation op,String amount){
  if (useEconomy) {
    if (useIconomy())     return IconomyInterface.getCurrency(amount);
 else     return ItemInterface.getCurrency(op);
  }
 else   return ""String_Node_Str"";
}","/** 
 * Gets what item ID or iConomy currency is being used for an operation.
 * @param op
 * @param amount
 * @return
 */
public static String getPaymentType(Operation op,String amount,ChatColor colour){
  if (useEconomy) {
    if (useIconomy())     return IconomyInterface.getCurrency(amount);
 else     return ItemInterface.getCurrency(op,colour);
  }
 else   return ""String_Node_Str"";
}",0.9682539682539684
2039,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && e.getDamager() instanceof Player && npc != null) {
      e.setCancelled(true);
    }
    if (e.getEntity() instanceof Player && e.getDamager() instanceof Monster) {
      return;
    }
    if (npc.isHealer()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        int playerHealth=player.getHealth();
        int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
        if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
          if (playerHealth <= 19) {
            if (healerHealth >= 1) {
              player.setHealth(playerHealth + 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
          if (playerHealth >= 1) {
            if (healerHealth < HealerPropertyPool.getMaxStrength(npc.getUID())) {
              player.setHealth(playerHealth - 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName()));
          }
        }
 else         if (player.getItemInHand().getType() == Material.DIAMOND_BLOCK) {
          if (healerHealth != HealerPropertyPool.getMaxStrength(npc.getUID())) {
            HealerPropertyPool.saveStrength(npc.getUID(),HealerPropertyPool.getMaxStrength(npc.getUID()));
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            player.setItemInHand(null);
          }
 else {
            player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && e.getDamager() instanceof Player && npc != null) {
      e.setCancelled(true);
      if (npc.isHealer()) {
        Entity entity=e.getDamager();
        if (entity instanceof Player) {
          Player player=(Player)entity;
          int playerHealth=player.getHealth();
          int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
          if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
            if (playerHealth <= 19) {
              if (healerHealth >= 1) {
                player.setHealth(playerHealth + 1);
                HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              }
 else {
                player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
              }
            }
 else {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            }
          }
 else           if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
            if (playerHealth >= 1) {
              if (healerHealth < HealerPropertyPool.getMaxStrength(npc.getUID())) {
                player.setHealth(playerHealth - 1);
                HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
                player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              }
 else {
                player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
              }
            }
 else {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName()));
            }
          }
 else           if (player.getItemInHand().getType() == Material.DIAMOND_BLOCK) {
            if (healerHealth != HealerPropertyPool.getMaxStrength(npc.getUID())) {
              HealerPropertyPool.saveStrength(npc.getUID(),HealerPropertyPool.getMaxStrength(npc.getUID()));
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
              int x=player.getItemInHand().getAmount();
              ItemStack diamondBlock=new ItemStack(Material.DIAMOND_BLOCK,x - 1);
              player.setItemInHand(diamondBlock);
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
        }
      }
    }
  }
}",0.8902309058614565
2040,"/** 
 * Sends the help page for the basic npc type.
 * @param sender
 * @param page
 */
private void sendBasicHelpPage(CommandSender sender,String page){
  int pageNum=Integer.valueOf(page);
switch (pageNum) {
case 1:
    sender.sendMessage(""String_Node_Str"" + Citizens.getVersion() + ""String_Node_Str"");
  sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 2:
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 3:
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 4:
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
default :
sender.sendMessage(""String_Node_Str"" + pageNum + ""String_Node_Str"");
break;
}
}","/** 
 * Sends the help page for the basic npc type.
 * @param sender
 * @param page
 */
private void sendBasicHelpPage(CommandSender sender,int page){
switch (page) {
case 1:
    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + Citizens.getVersion()+ ""String_Node_Str"");
  sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 2:
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 3:
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 4:
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
break;
default :
sender.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + page+ ""String_Node_Str"");
break;
}
}",0.9338432122370935
2041,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  if (NPCManager.validateSelected(player))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,player)) {
        createNPC(args,player);
      }
 else       if (EconomyHandler.useEconomy()) {
        sender.sendMessage(MessageUtils.getNoMoneyMessage(Operation.BASIC_NPC_CREATE,player));
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          moveNPC(sender,npc.getName(),npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          removeNPC(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else     if (hasPermission(""String_Node_Str"",sender)) {
      if (args.length == 2 && args[1].equals(""String_Node_Str"")) {
        removeNPC(args,sender,npc);
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setName(args[1],sender,npc);
          NPCManager.NPCSelected.remove(player.getName());
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"") || NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setColour(args,player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          addText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          resetText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setItemInHand(args[1],sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setArmor(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.teleport((PropertyPool.getLocationFromID(npc.getUID())));
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 3) {
    if (args[0].equals(""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
      if (hasPermission(""String_Node_Str"",sender)) {
        sendBasicHelpPage(sender,args[2]);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
 else     if (args[0].equals(""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
      if (hasPermission(""String_Node_Str"",sender)) {
        sendTraderHelpPage(sender,args[2]);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          copyNPC(npc.getUID(),npc.getName(),player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!Character.isDigit(args[1].charAt(0))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(player.getName(),npc.getUID());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(PropertyPool.getOwner(npc.getUID()))+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          PropertyPool.setOwner(npc.getUID(),args[1]);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(args[1])+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          PropertyPool.addOwner(npc.getUID(),args[1],player);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1])+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeTalkWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeLookWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  if (NPCManager.validateSelected(player))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,player)) {
        createNPC(args,player);
      }
 else       if (EconomyHandler.useEconomy()) {
        sender.sendMessage(MessageUtils.getNoMoneyMessage(Operation.BASIC_NPC_CREATE,player));
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          moveNPC(sender,npc.getName(),npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          removeNPC(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else     if (hasPermission(""String_Node_Str"",sender)) {
      if (args.length == 2 && args[1].equals(""String_Node_Str"")) {
        removeNPC(args,sender,npc);
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setName(args[1],sender,npc);
          NPCManager.NPCSelected.remove(player.getName());
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"") || NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setColour(args,player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          addText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          resetText(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setItemInHand(args[1],sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          setArmor(args,sender,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.teleport((PropertyPool.getLocationFromID(npc.getUID())));
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 2) {
    int page=1;
    if (args.length == 3)     page=Integer.parseInt(args[2]);
    if (args[0].equals(""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
      if (hasPermission(""String_Node_Str"",sender)) {
        sendBasicHelpPage(sender,page);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
 else     if (args[0].equals(""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
      if (hasPermission(""String_Node_Str"",sender)) {
        sendTraderHelpPage(sender,page);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          copyNPC(npc.getUID(),npc.getName(),player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!Character.isDigit(args[1].charAt(0))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(player.getName(),npc.getUID());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(PropertyPool.getOwner(npc.getUID()))+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          PropertyPool.setOwner(npc.getUID(),args[1]);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(args[1])+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          PropertyPool.addOwner(npc.getUID(),args[1],player);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1])+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeTalkWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(player,npc.getUID(),""String_Node_Str"")) {
          changeLookWhenClose(args[1],player,npc);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}",0.9968059121939
2042,"/** 
 * Sends the help page for the trader npc type.
 * @param sender
 * @param page
 */
private void sendTraderHelpPage(CommandSender sender,String page){
  int pageNum=Integer.valueOf(page);
switch (pageNum) {
case 1:
    sender.sendMessage(""String_Node_Str"" + Citizens.getVersion() + ""String_Node_Str"");
  sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 2:
sender.sendMessage(""String_Node_Str"" + Citizens.getVersion() + ""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
default :
sender.sendMessage(""String_Node_Str"" + pageNum + ""String_Node_Str"");
break;
}
}","/** 
 * Sends the help page for the trader npc type.
 * @param sender
 * @param page
 */
private void sendTraderHelpPage(CommandSender sender,int page){
switch (page) {
case 1:
    sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + Citizens.getVersion()+ ""String_Node_Str"");
  sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
break;
case 2:
sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + Citizens.getVersion()+ ""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(""String_Node_Str"");
sender.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
break;
default :
sender.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + page+ ""String_Node_Str"");
break;
}
}",0.87202216066482
2043,"private boolean checkData(MaterialData first,MaterialData second){
  int data=0;
  int data2=0;
  if (first != null)   data=first.getData();
  if (second != null)   data2=second.getData();
  if (data == data2 || data == Citizens.MAGIC_DATA_VALUE)   return true;
  return false;
}","private boolean checkData(MaterialData first,MaterialData second){
  int data=0;
  int data2=0;
  if (first != null)   data=first.getData();
  if (second != null)   data2=second.getData();
  Citizens.log.info(data + ""String_Node_Str"" + data2);
  if (data == data2 || data == Citizens.MAGIC_DATA_VALUE)   return true;
  return false;
}",0.9102773246329527
2044,"/** 
 * Formats the paid message for an operation.
 * @param op
 * @param paid
 * @param npcName
 * @param type
 * @param useType
 * @return
 */
public static String getPaidMessage(Operation op,int paid,String npcName,String type,boolean useType){
  String message=""String_Node_Str"";
  message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(EconomyHandler.getPaymentType(Operation.TRADER_NPC_CREATE,""String_Node_Str"" + paid))+ ""String_Node_Str"";
  if (useType)   message+=StringUtils.yellowify(npcName) + ""String_Node_Str"" + StringUtils.yellowify(type)+ ""String_Node_Str"";
 else   message+=StringUtils.yellowify(npcName) + ""String_Node_Str"";
  return message;
}","/** 
 * Formats the paid message for an operation.
 * @param op
 * @param paid
 * @param npcName
 * @param type
 * @param useType
 * @return
 */
public static String getPaidMessage(Operation op,int paid,String npcName,String type,boolean useType){
  String message=""String_Node_Str"";
  message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(EconomyHandler.getPaymentType(op,""String_Node_Str"" + paid))+ ""String_Node_Str"";
  if (useType)   message+=StringUtils.yellowify(npcName) + ""String_Node_Str"" + StringUtils.yellowify(type)+ ""String_Node_Str"";
 else   message+=StringUtils.yellowify(npcName) + ""String_Node_Str"";
  return message;
}",0.9780801209372638
2045,"public static Location getActualLocationFromName(int UID){
  String[] values=PropertyPool.locations.getString(UID).split(""String_Node_Str"");
  if (values.length != 6) {
    log.info(""String_Node_Str"" + values.length);
    return null;
  }
 else {
    Location loc=new Location(Citizens.plugin.getServer().getWorld(values[0]),NPCManager.getNPC(UID).getX(),NPCManager.getNPC(UID).getY(),NPCManager.getNPC(UID).getZ(),Float.parseFloat(values[4]),Float.parseFloat(values[5]));
    return loc;
  }
}","public static Location getActualLocationFromName(int UID){
  String[] values=PropertyPool.locations.getString(UID).split(""String_Node_Str"");
  if (values.length != 6) {
    log.info(""String_Node_Str"" + values.length);
    return null;
  }
 else {
    Location loc=new Location(Bukkit.getServer().getWorld(values[0]),NPCManager.getNPC(UID).getX(),NPCManager.getNPC(UID).getY(),NPCManager.getNPC(UID).getZ(),Float.parseFloat(values[4]),Float.parseFloat(values[5]));
    return loc;
  }
}",0.9785495403472932
2046,"public static Location getLocationFromID(int UID){
  String[] values=PropertyPool.locations.getString(UID).split(""String_Node_Str"");
  if (values.length != 6) {
    log.info(""String_Node_Str"" + values.length);
    return null;
  }
 else {
    Location loc=new Location(Citizens.plugin.getServer().getWorld(values[0]),Double.parseDouble(values[1]),Double.parseDouble(values[2]),Double.parseDouble(values[3]),Float.parseFloat(values[4]),Float.parseFloat(values[5]));
    return loc;
  }
}","public static Location getLocationFromID(int UID){
  String[] values=PropertyPool.locations.getString(UID).split(""String_Node_Str"");
  if (values.length != 6) {
    log.info(""String_Node_Str"" + values.length);
    return null;
  }
 else {
    Location loc=new Location(Bukkit.getServer().getWorld(values[0]),Double.parseDouble(values[1]),Double.parseDouble(values[2]),Double.parseDouble(values[3]),Float.parseFloat(values[4]),Float.parseFloat(values[5]));
    return loc;
  }
}",0.9781931464174456
2047,"public static void addStockable(int UID,Stockable s){
  String write=""String_Node_Str"";
  write+=s.toString() + ""String_Node_Str"";
  stocking.setString(UID,write);
}","public static void addStockable(int UID,Stockable s){
  String write=""String_Node_Str"";
  write+=s.toString() + ""String_Node_Str"";
  String read=stocking.getString(UID);
  stocking.setString(UID,read + write);
}",0.8776595744680851
2048,"public static ConcurrentHashMap<Check,Stockable> getStockables(int UID){
  ConcurrentHashMap<Check,Stockable> stockables=new ConcurrentHashMap<Check,Stockable>();
  int i=0;
  for (  String s : stocking.getString(UID).split(""String_Node_Str"")) {
    i=0;
    ItemStack stack=new ItemStack(37);
    ItemPrice price=new ItemPrice(0);
    boolean selling=false;
    for (    String main : s.split(""String_Node_Str"")) {
switch (i) {
case 0:
        String[] split=main.split(""String_Node_Str"");
      MaterialData data=new MaterialData(Integer.parseInt(split[2]));
    stack=new ItemStack(Integer.parseInt(split[0]),Integer.parseInt(split[1]));
  if (data != null)   stack.setData(data);
break;
case 1:
String[] parts=main.split(""String_Node_Str"");
if (parts.length == 2) {
price=new ItemPrice(Integer.parseInt(parts[0]));
price.setiConomy(Boolean.parseBoolean(parts[1]));
}
 else {
price=new ItemPrice(Integer.parseInt(parts[0]),Integer.parseInt(parts[1]),Integer.parseInt(parts[2]));
price.setiConomy(Boolean.parseBoolean(parts[3]));
}
break;
case 2:
selling=Boolean.parseBoolean(main);
break;
}
i+=1;
}
Stockable stock=new Stockable(stack,price,selling);
stockables.put(stock.createCheck(),stock);
}
return stockables;
}","public static ConcurrentHashMap<Check,Stockable> getStockables(int UID){
  ConcurrentHashMap<Check,Stockable> stockables=new ConcurrentHashMap<Check,Stockable>();
  int i=0;
  for (  String s : stocking.getString(UID).split(""String_Node_Str"")) {
    if (s.isEmpty())     continue;
    i=0;
    ItemStack stack=new ItemStack(37);
    ItemPrice price=new ItemPrice(0);
    boolean selling=false;
    for (    String main : s.split(""String_Node_Str"")) {
switch (i) {
case 0:
        String[] split=main.split(""String_Node_Str"");
      MaterialData data=new MaterialData(Integer.parseInt(split[2]));
    stack=new ItemStack(Integer.parseInt(split[0]),Integer.parseInt(split[1]));
  if (data != null)   stack.setData(data);
break;
case 1:
String[] parts=main.split(""String_Node_Str"");
if (parts.length == 2) {
price=new ItemPrice(Integer.parseInt(parts[0]));
price.setiConomy(Boolean.parseBoolean(parts[1]));
}
 else {
price=new ItemPrice(Integer.parseInt(parts[0]),Integer.parseInt(parts[1]),Integer.parseInt(parts[2]));
price.setiConomy(Boolean.parseBoolean(parts[3]));
}
break;
case 2:
selling=Boolean.parseBoolean(main);
break;
}
i+=1;
}
Stockable stock=new Stockable(stack,price,selling);
stockables.put(stock.createCheck(),stock);
}
return stockables;
}",0.985847149211484
2049,"private void levelUp(Player player,HumanNPC npc){
  if (EconomyHandler.useEconomy()) {
    int level=HealerPropertyPool.getLevel(npc.getUID()) + 1;
    int paid=EconomyHandler.pay(Operation.HEALER_LEVEL_UP,player);
    if (paid > 0) {
      player.sendMessage(getLevelUpPaidMessage(Operation.HEALER_LEVEL_UP,npc,paid,level));
    }
    HealerPropertyPool.saveLevel(npc.getUID(),level);
  }
}","private void levelUp(Player player,HumanNPC npc){
  if (EconomyHandler.useEconomy()) {
    int level=HealerPropertyPool.getLevel(npc.getUID());
    int paid=EconomyHandler.pay(Operation.HEALER_LEVEL_UP,player);
    if (paid > 0) {
      if (level < 10) {
        HealerPropertyPool.saveLevel(npc.getUID(),level + 1);
        player.sendMessage(getLevelUpPaidMessage(Operation.HEALER_LEVEL_UP,npc,paid,level + 1));
      }
 else {
        player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
      }
    }
  }
 else {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
}",0.4214711729622266
2050,"private String getLevelUpPaidMessage(Operation op,HumanNPC npc,int paid,int level){
  String message=""String_Node_Str"";
  message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(""String_Node_Str"" + HealerPropertyPool.getLevel(npc.getUID()) + 1)+ ""String_Node_Str""+ StringUtils.yellowify(EconomyHandler.getPaymentType(op,""String_Node_Str"" + paid,ChatColor.GREEN) + ""String_Node_Str"");
  return message;
}","private String getLevelUpPaidMessage(Operation op,HumanNPC npc,int paid,int level){
  String message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(""String_Node_Str"" + level)+ ""String_Node_Str""+ StringUtils.yellowify(EconomyHandler.getPaymentType(op,""String_Node_Str"" + paid,ChatColor.GREEN) + ""String_Node_Str"");
  return message;
}",0.920314253647587
2051,"private void displayStatus(Player player,HumanNPC npc){
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName() + ""String_Node_Str"")+ ""String_Node_Str"");
  displayHealerStrength(player,npc);
  displayHealerLevel(player,npc);
}","private void displayStatus(Player player,HumanNPC npc){
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName() + ""String_Node_Str"")+ ""String_Node_Str"");
  displayHealerStrength(player,npc);
  displayHealerLevel(player,npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.9024793388429752
2052,"@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && e.getDamager() instanceof Player && npc != null) {
      e.setCancelled(true);
    }
    if (npc.isHealer()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        int playerHealth=player.getHealth();
        int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
        if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
          if (playerHealth <= 9) {
            if (healerHealth >= 1) {
              player.setHealth(playerHealth + 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
          if (playerHealth >= 1) {
            if (healerHealth <= 9) {
              player.setHealth(playerHealth - 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN));
          }
        }
      }
    }
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    HumanNPC npc=NPCManager.getNPC(e.getEntity());
    if (e.getEntity() instanceof Player && e.getDamager() instanceof Player && npc != null) {
      e.setCancelled(true);
    }
    if (npc.isHealer()) {
      Entity entity=e.getDamager();
      if (entity instanceof Player) {
        Player player=(Player)entity;
        int playerHealth=player.getHealth();
        int healerHealth=HealerPropertyPool.getStrength(npc.getUID());
        if (player.getItemInHand().getTypeId() == Citizens.healerTakeHealthItem) {
          if (playerHealth <= 19) {
            if (healerHealth >= 1) {
              player.setHealth(playerHealth + 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth - 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
 else         if (player.getItemInHand().getTypeId() == Citizens.healerGiveHealthItem) {
          if (playerHealth >= 1) {
            if (healerHealth < HealerPropertyPool.getMaxStrength(npc.getUID())) {
              player.setHealth(playerHealth - 1);
              HealerPropertyPool.saveStrength(npc.getUID(),healerHealth + 1);
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            }
 else {
              player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName()));
          }
        }
 else         if (player.getItemInHand().getType() == Material.DIAMOND_BLOCK) {
          if (healerHealth != HealerPropertyPool.getMaxStrength(npc.getUID())) {
            HealerPropertyPool.saveStrength(npc.getUID(),HealerPropertyPool.getMaxStrength(npc.getUID()));
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
            player.setItemInHand(null);
          }
 else {
            player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
          }
        }
      }
    }
  }
}",0.7016213939776795
2053,"/** 
 * Buys an NPC state.
 * @param player
 * @param toggleable
 * @param op
 */
private void buyState(Player player,Toggleable toggleable,Operation op){
  if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(op,player)) {
    if (EconomyHandler.useEconomy()) {
      int paid=EconomyHandler.pay(op,player);
      if (paid > 0)       player.sendMessage(MessageUtils.getPaidMessage(op,paid,toggleable.getName(),toggleable.getType(),true));
      toggleState(player,toggleable);
      toggleable.saveState();
    }
 else {
      player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
  }
 else   if (EconomyHandler.useEconomy()) {
    player.sendMessage(MessageUtils.getNoMoneyMessage(op,player));
    return;
  }
}","/** 
 * Buys an NPC state.
 * @param player
 * @param toggleable
 * @param op
 */
private void buyState(Player player,Toggleable toggleable,Operation op){
  if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(op,player)) {
    if (EconomyHandler.useEconomy()) {
      int paid=EconomyHandler.pay(op,player);
      if (paid > 0)       player.sendMessage(MessageUtils.getPaidMessage(op,paid,toggleable.getName(),toggleable.getType(),true));
      toggleable.registerState();
      toggleState(player,toggleable);
    }
 else {
      player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
  }
 else   if (EconomyHandler.useEconomy()) {
    player.sendMessage(MessageUtils.getNoMoneyMessage(op,player));
    return;
  }
}",0.956043956043956
2054,"@Override public void run(){
  if (stop)   return;
  if (npc == null || player == null || eplayer.activeContainer == eplayer.defaultContainer) {
    kill();
    return;
  }
  if (mode == Mode.STOCK)   return;
  if (player.getHandle().inventory.j() == null)   return;
  stop=true;
  int count=0;
  boolean found=false;
  for (  ItemStack i : npc.getInventory().getContents()) {
    if (!previousNPCInv.getItem(count).equals(i) && previousNPCInv.getItem(count).getTypeId() == eplayer.inventory.j().id) {
      found=true;
      handleItemClicked((Player)npc.getPlayer(),count,false);
      break;
    }
    count+=1;
  }
  count=0;
  if (!found) {
    for (    ItemStack i : player.getInventory().getContents()) {
      if (!previousPlayerInv.getItem(count).equals(i) && previousPlayerInv.getItem(count).getTypeId() == eplayer.inventory.j().id) {
        handleItemClicked(player,count,true);
        break;
      }
      count+=1;
    }
  }
  clonePlayerInventory(npc.getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  eplayer.inventory.b((net.minecraft.server.ItemStack)null);
  Packet103SetSlot packet=new Packet103SetSlot(-1,-1,null);
  eplayer.netServerHandler.sendPacket(packet);
  stop=false;
}","@Override public void run(){
  if (stop)   return;
  if (npc == null || player == null || eplayer.activeContainer == eplayer.defaultContainer) {
    kill();
    return;
  }
  if (mode == Mode.STOCK)   return;
  if (player.getHandle().inventory.j() == null)   return;
  stop=true;
  int count=0;
  boolean found=false;
  for (  ItemStack i : npc.getInventory().getContents()) {
    if (!previousNPCInv.getItem(count).equals(i) && previousNPCInv.getItem(count).getTypeId() == eplayer.inventory.j().id) {
      found=true;
      handleNPCItemClicked(count,npc.getInventory());
      break;
    }
    count+=1;
  }
  count=0;
  if (!found) {
    for (    ItemStack i : player.getInventory().getContents()) {
      if (!previousPlayerInv.getItem(count).equals(i) && previousPlayerInv.getItem(count).getTypeId() == eplayer.inventory.j().id) {
        handlePlayerItemClicked(count,player.getInventory());
        break;
      }
      count+=1;
    }
  }
  clonePlayerInventory(npc.getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  eplayer.inventory.b((net.minecraft.server.ItemStack)null);
  Packet103SetSlot packet=new Packet103SetSlot(-1,-1,null);
  eplayer.netServerHandler.sendPacket(packet);
  stop=false;
}",0.957176843774782
2055,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    sender.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    sender.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isHealer()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        displayStatus(player,npc);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        levelUp(player,npc);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        HelpUtils.sendHealerHelp(sender);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    HealerPropertyPool.saveState(npc);
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    sender.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(player,npc.getUID())) {
    sender.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isHealer()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        displayStatus(player,npc);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        levelUp(player,npc,1);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        try {
          int levels=Integer.parseInt(args[1]);
          int x=HealerPropertyPool.getLevel(npc.getUID()) + levels;
          if (x < 10) {
            levelUp(player,npc,levels);
          }
 else {
            sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 catch (        NumberFormatException e) {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
 else     if (args.length == 1 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        HelpUtils.sendHealerHelp(sender);
      }
 else {
        sender.sendMessage(MessageUtils.noPermissionsMessage);
      }
      returnval=true;
    }
    HealerPropertyPool.saveState(npc);
  }
  return returnval;
}",0.7545232273838631
2056,"private void levelUp(Player player,HumanNPC npc){
  if (EconomyHandler.useEconomy()) {
    int level=HealerPropertyPool.getLevel(npc.getUID());
    int paid=EconomyHandler.pay(Operation.HEALER_LEVEL_UP,player);
    if (paid > 0) {
      if (level < 10) {
        HealerPropertyPool.saveLevel(npc.getUID(),level + 1);
        plugin.scheduleHealTask();
        player.sendMessage(getLevelUpPaidMessage(Operation.HEALER_LEVEL_UP,npc,paid,level + 1));
      }
 else {
        player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
      }
    }
  }
 else {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
}","private void levelUp(Player player,HumanNPC npc,int multiple){
  if (EconomyHandler.useEconomy()) {
    int level=HealerPropertyPool.getLevel(npc.getUID());
    int paid=EconomyHandler.pay(Operation.HEALER_LEVEL_UP,player,multiple);
    if (paid > 0) {
      if (level < 10) {
        HealerPropertyPool.saveLevel(npc.getUID(),level + multiple);
        plugin.scheduleHealTask();
        player.sendMessage(getLevelUpPaidMessage(Operation.HEALER_LEVEL_UP,npc,paid,level + multiple,multiple));
      }
 else {
        player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
      }
    }
  }
 else {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
}",0.9635687732342008
2057,"private String getLevelUpPaidMessage(Operation op,HumanNPC npc,int paid,int level){
  String message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(""String_Node_Str"" + level)+ ""String_Node_Str""+ StringUtils.yellowify(EconomyHandler.getPaymentType(op,""String_Node_Str"" + paid,ChatColor.GREEN) + ""String_Node_Str"");
  return message;
}","private String getLevelUpPaidMessage(Operation op,HumanNPC npc,int paid,int level,int multiple){
  String message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(""String_Node_Str"" + level)+ ""String_Node_Str""+ StringUtils.yellowify(EconomyHandler.getPaymentType(op,""String_Node_Str"" + paid * multiple,ChatColor.GREEN) + ""String_Node_Str"");
  return message;
}",0.9716312056737588
2058,"/** 
 * Pays for a payment from the player's inventory.
 * @param player
 * @param payment
 * @return
 */
public static int pay(Player player,Payment payment){
  PlayerInventory inv=player.getInventory();
  int currencyID=payment.getItem().getTypeId();
  int current=payment.getPrice();
  int count=0;
  for (  ItemStack i : inv.getContents()) {
    if (i != null && i.getTypeId() == currencyID) {
      int amount=i.getAmount();
      int toChange=0;
      current-=amount;
      if (current < 0) {
        toChange-=current;
      }
      if (toChange == 0)       i=null;
 else {
        i.setAmount(toChange);
      }
      inv.setItem(count,i);
    }
    count+=1;
  }
  return payment.getPrice();
}","/** 
 * Pays for a payment from the player's inventory.
 * @param player
 * @param payment
 * @return
 */
public static int pay(Player player,Payment payment){
  PlayerInventory inv=player.getInventory();
  int currencyID=payment.getItem().getTypeId();
  int current=payment.getPrice();
  int count=0;
  outer:   for (  ItemStack i : inv.getContents()) {
    if (i != null && i.getTypeId() == currencyID) {
      int amount=i.getAmount();
      int toChange=0;
      current-=amount;
      if (current < 0) {
        toChange-=current;
      }
      if (toChange == 0)       i=null;
 else {
        i.setAmount(toChange);
        break outer;
      }
      inv.setItem(count,i);
    }
    count+=1;
  }
  return payment.getPrice();
}",0.979108635097493
2059,"public Payment(ItemPrice price2){
  this.setPrice(price2.getPrice());
  ItemStack stack=new ItemStack(price2.getItemID(),price2.getPrice());
  stack.setData(new MaterialData(price2.getData()));
  this.setItem(stack);
  this.setiConomy(price2.isiConomy());
}","public Payment(ItemStack stocking,boolean iConomy){
  this.setiConomy(iConomy);
  this.setItem(stocking);
  this.setPrice(stocking.getAmount());
}",0.4367245657568238
2060,"private void handleNPCItemClicked(int slot,PlayerInventory npcInv){
  npcInv.setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npcInv.getItem(slot);
  if (!(npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),false))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),false);
  ItemStack buying=stockable.getStocking();
  if (previousNPCClickedSlot != slot) {
    previousNPCClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousNPCClickedSlot=slot;
  int amount=npcInv.getItem(slot).getAmount();
  if (amount - buying.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(buying);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","private void handleNPCItemClicked(int slot,PlayerInventory npcInv){
  npcInv.setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npcInv.getItem(slot);
  if (!(npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),false))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),false);
  ItemStack buying=stockable.getStocking();
  if (previousNPCClickedSlot != slot) {
    previousNPCClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousNPCClickedSlot=slot;
  int amount=npcInv.getItem(slot).getAmount();
  if (amount - buying.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(buying);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buying.getAmount() + ""String_Node_Str"" + buying.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),player);
  EconomyHandler.pay(new Payment(stockable.getStocking(),stockable.getPrice().isiConomy()),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.9735910699700516
2061,"private void handlePlayerItemClicked(int slot,PlayerInventory playerInv){
  playerInv.setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=playerInv.getItem(slot);
  if (!npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),true)) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),true);
  ItemStack selling=stockable.getStocking();
  if (previousPlayerClickedSlot != slot) {
    previousPlayerClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousPlayerClickedSlot=slot;
  int amount=playerInv.getItem(slot).getAmount();
  if (amount - selling.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unsold=npc.getInventory().addItem(selling);
  if (unsold.size() >= 1) {
    npc.getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","private void handlePlayerItemClicked(int slot,PlayerInventory playerInv){
  playerInv.setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=playerInv.getItem(slot);
  if (!npc.getTraderNPC().isStocked(i.getTypeId(),i.getData(),true)) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Stockable stockable=npc.getTraderNPC().getStockable(i.getTypeId(),true);
  ItemStack selling=stockable.getStocking();
  if (previousPlayerClickedSlot != slot) {
    previousPlayerClickedSlot=slot;
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + MessageUtils.getStockableMessage(stockable,ChatColor.AQUA)+ ""String_Node_Str"");
    return;
  }
  previousPlayerClickedSlot=slot;
  int amount=playerInv.getItem(slot).getAmount();
  if (amount - selling.getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(new Payment(stockable.getPrice()),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  HashMap<Integer,ItemStack> unsold=npc.getInventory().addItem(selling);
  if (unsold.size() >= 1) {
    npc.getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(selling.getAmount() + ""String_Node_Str"" + selling.getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(new Payment(stockable.getPrice()),npc);
  EconomyHandler.pay(new Payment(stockable.getStocking(),stockable.getPrice().isiConomy()),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.9729875742841708
2062,"private void setName(String name,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  if (name.length() > 16) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  plugin.handler.setName(n.getUID(),name,n.getOwner());
  sender.sendMessage(ChatColor.GREEN + StringUtils.yellowify(n.getName(),ChatColor.GREEN) + ""String_Node_Str""+ StringUtils.yellowify(name,ChatColor.GREEN)+ ""String_Node_Str"");
  return;
}","private void setName(String name,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  if (name.length() > 16) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  plugin.handler.setName(n.getUID(),name,n.getOwner());
  sender.sendMessage(ChatColor.GREEN + StringUtils.yellowify(n.getName()) + ""String_Node_Str""+ StringUtils.yellowify(name)+ ""String_Node_Str"");
  return;
}",0.9670781893004116
2063,"private void changeLookWhenClose(Player p,String bool){
  boolean look=false;
  if (bool.equals(""String_Node_Str""))   look=true;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  PropertyPool.setLookWhenClose(n.getUID(),look);
  if (look)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
 else   if (!look)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
}","private void changeLookWhenClose(Player p,String bool){
  boolean look=false;
  if (bool.equals(""String_Node_Str""))   look=true;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  PropertyPool.setLookWhenClose(n.getUID(),look);
  if (look)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName())+ ""String_Node_Str"");
 else   if (!look)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName())+ ""String_Node_Str"");
}",0.8619402985074627
2064,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  if (NPCManager.validateSelected(player))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,player)) {
        createNPC(args,player);
      }
 else       if (EconomyHandler.useEconomy()) {
        sender.sendMessage(MessageUtils.getNoMoneyMessage(Operation.BASIC_NPC_CREATE,player));
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          moveNPC(sender,npc.getName(),Integer.valueOf(NPCManager.NPCSelected.get(player.getName())));
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          removeNPC(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else     if (hasPermission(""String_Node_Str"",sender)) {
      if (args.length == 2 && args[1].equals(""String_Node_Str"")) {
        removeNPC(args,sender);
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setName(args[1],sender);
          NPCManager.NPCSelected.remove(player.getName());
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"") || NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setColour(args,player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          addText(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setText(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          resetText(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setItemInHand(sender,args);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setArmor(sender,args);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          player.teleport((PropertyPool.getLocationFromID(npc.getUID())));
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelpPage(sender,args[1]);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          copyNPC(npc,player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID(),ChatColor.GREEN)+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!Character.isDigit(args[1].charAt(0))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(player.getName(),npc.getUID());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(PropertyPool.getOwner(npc.getUID()),ChatColor.GREEN)+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          PropertyPool.setOwner(npc.getUID(),args[1]);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(args[1],ChatColor.GREEN)+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          PropertyPool.addOwner(npc.getUID(),args[1],player);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1],ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          changeTalkWhenClose(player,args[1]);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          changeLookWhenClose(player,args[1]);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  if (NPCManager.validateSelected(player))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,player)) {
        createNPC(args,player);
      }
 else       if (EconomyHandler.useEconomy()) {
        sender.sendMessage(MessageUtils.getNoMoneyMessage(Operation.BASIC_NPC_CREATE,player));
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          moveNPC(sender,npc.getName(),Integer.valueOf(NPCManager.NPCSelected.get(player.getName())));
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          removeNPC(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else     if (hasPermission(""String_Node_Str"",sender)) {
      if (args.length == 2 && args[1].equals(""String_Node_Str"")) {
        removeNPC(args,sender);
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setName(args[1],sender);
          NPCManager.NPCSelected.remove(player.getName());
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"") || NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setColour(args,player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          addText(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setText(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          resetText(args,sender);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setItemInHand(sender,args);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          setArmor(sender,args);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          player.teleport((PropertyPool.getLocationFromID(npc.getUID())));
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelpPage(sender,args[1]);
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          copyNPC(npc,player);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (!Character.isDigit(args[1].charAt(0))) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(player.getName(),npc.getUID());
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + npc.getUID())+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(PropertyPool.getOwner(npc.getUID()))+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          PropertyPool.setOwner(npc.getUID(),args[1]);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(args[1])+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          PropertyPool.addOwner(npc.getUID(),args[1],player);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1])+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          changeTalkWhenClose(player,args[1]);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (npc != null) {
        if (NPCManager.validateOwnership(npc.getUID(),player,""String_Node_Str"")) {
          changeLookWhenClose(player,args[1]);
        }
 else {
          sender.sendMessage(MessageUtils.notOwnerMessage);
        }
      }
 else {
        sender.sendMessage(MessageUtils.mustHaveNPCSelectedMessage);
      }
    }
 else {
      sender.sendMessage(MessageUtils.noPermissionsMessage);
    }
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}",0.8168573071761774
2065,"private void addText(String[] args,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  String text=""String_Node_Str"";
  int i=0;
  for (  String s : args) {
    if (i == 1 && !s.isEmpty() && !s.equals(""String_Node_Str"")) {
      text+=s;
    }
    if (i > 1 && !s.isEmpty() && !s.equals(""String_Node_Str"")) {
      text+=""String_Node_Str"" + s;
    }
    i+=1;
  }
  plugin.handler.addNPCText(n.getUID(),text);
  sender.sendMessage(StringUtils.yellowify(text,ChatColor.GREEN) + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName() + ""String_Node_Str"",ChatColor.GREEN)+ ""String_Node_Str"");
}","private void addText(String[] args,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  String text=""String_Node_Str"";
  int i=0;
  for (  String s : args) {
    if (i == 1 && !s.isEmpty() && !s.equals(""String_Node_Str"")) {
      text+=s;
    }
    if (i > 1 && !s.isEmpty() && !s.equals(""String_Node_Str"")) {
      text+=""String_Node_Str"" + s;
    }
    i+=1;
  }
  plugin.handler.addNPCText(n.getUID(),text);
  sender.sendMessage(StringUtils.yellowify(text) + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName() + ""String_Node_Str"")+ ""String_Node_Str"");
}",0.9755725190839696
2066,"private void createNPC(String[] args,Player player){
  String text=""String_Node_Str"";
  ArrayList<String> texts=new ArrayList<String>();
  if (args.length >= 3) {
    int i=0;
    for (    String s : args) {
      if (i == 2 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=s;
      if (i > 2 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=""String_Node_Str"" + s;
      i+=1;
    }
    texts.add(text);
  }
  if (args[1].length() > 16) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (PropertyPool.getNPCAmountPerPlayer(player.getName()) < PropertyPool.getMaxNPCsPerPlayer() || PropertyPool.settings.getInt(""String_Node_Str"") == 0) {
    int UID=plugin.handler.spawnNPC(args[1],player.getLocation(),player.getName());
    PropertyPool.saveNPCAmountPerPlayer(player.getName(),PropertyPool.getNPCAmountPerPlayer(player.getName()) + 1);
    plugin.handler.setNPCText(UID,texts);
    plugin.handler.setOwner(UID,player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1],ChatColor.GREEN)+ ""String_Node_Str"");
    if (EconomyHandler.useEconomy()) {
      int paid=EconomyHandler.pay(Operation.BASIC_NPC_CREATE,player);
      if (paid > 0)       player.sendMessage(MessageUtils.getPaidMessage(Operation.BASIC_NPC_CREATE,paid,args[1],""String_Node_Str"",false));
    }
    NPCManager.NPCSelected.put(player.getName(),UID);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1],ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(""String_Node_Str"" + UID,ChatColor.GREEN)+ ""String_Node_Str"");
  }
 else {
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + PropertyPool.getMaxNPCsPerPlayer(),ChatColor.GREEN)+ ""String_Node_Str"");
  }
}","private void createNPC(String[] args,Player player){
  String text=""String_Node_Str"";
  ArrayList<String> texts=new ArrayList<String>();
  if (args.length >= 3) {
    int i=0;
    for (    String s : args) {
      if (i == 2 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=s;
      if (i > 2 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=""String_Node_Str"" + s;
      i+=1;
    }
    texts.add(text);
  }
  if (args[1].length() > 16) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (PropertyPool.getNPCAmountPerPlayer(player.getName()) < PropertyPool.getMaxNPCsPerPlayer() || PropertyPool.settings.getInt(""String_Node_Str"") == 0) {
    int UID=plugin.handler.spawnNPC(args[1],player.getLocation(),player.getName());
    PropertyPool.saveNPCAmountPerPlayer(player.getName(),PropertyPool.getNPCAmountPerPlayer(player.getName()) + 1);
    plugin.handler.setNPCText(UID,texts);
    plugin.handler.setOwner(UID,player.getName());
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1])+ ""String_Node_Str"");
    if (EconomyHandler.useEconomy()) {
      int paid=EconomyHandler.pay(Operation.BASIC_NPC_CREATE,player);
      if (paid > 0)       player.sendMessage(MessageUtils.getPaidMessage(Operation.BASIC_NPC_CREATE,paid,args[1],""String_Node_Str"",false));
    }
    NPCManager.NPCSelected.put(player.getName(),UID);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(args[1])+ ""String_Node_Str""+ StringUtils.yellowify(UID)+ ""String_Node_Str"");
  }
 else {
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(""String_Node_Str"" + PropertyPool.getMaxNPCsPerPlayer())+ ""String_Node_Str"");
  }
}",0.8975937325125909
2067,"private void moveNPC(CommandSender sender,String name,int UID){
  Location loc=PropertyPool.getLocationFromID(UID);
  if (loc != null) {
    PropertyPool.saveLocation(name,loc,UID);
  }
  plugin.handler.moveNPC(UID,((Player)sender).getLocation());
  sender.sendMessage(StringUtils.yellowify(name,ChatColor.GREEN) + ""String_Node_Str"");
}","private void moveNPC(CommandSender sender,String name,int UID){
  Location loc=PropertyPool.getLocationFromID(UID);
  if (loc != null) {
    PropertyPool.saveLocation(name,loc,UID);
  }
  plugin.handler.moveNPC(UID,((Player)sender).getLocation());
  sender.sendMessage(StringUtils.yellowify(name) + ""String_Node_Str"");
}",0.975609756097561
2068,"private void resetText(String[] args,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  plugin.handler.resetText(n.getUID());
  sender.sendMessage(StringUtils.yellowify(n.getStrippedName() + ""String_Node_Str"",ChatColor.GREEN) + ""String_Node_Str"");
}","private void resetText(String[] args,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  plugin.handler.resetText(n.getUID());
  sender.sendMessage(StringUtils.yellowify(n.getStrippedName() + ""String_Node_Str"") + ""String_Node_Str"");
}",0.9746031746031746
2069,"private void changeTalkWhenClose(Player p,String bool){
  boolean talk=false;
  if (bool.equals(""String_Node_Str""))   talk=true;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  PropertyPool.setTalkWhenClose(n.getUID(),talk);
  if (talk)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
 else   if (!talk)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str"");
}","private void changeTalkWhenClose(Player p,String bool){
  boolean talk=false;
  if (bool.equals(""String_Node_Str""))   talk=true;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  PropertyPool.setTalkWhenClose(n.getUID(),talk);
  if (talk)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName())+ ""String_Node_Str"");
 else   if (!talk)   p.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(n.getStrippedName())+ ""String_Node_Str"");
}",0.8619402985074627
2070,"private void setText(String[] args,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  String text=""String_Node_Str"";
  if (args.length >= 2) {
    int i=0;
    for (    String s : args) {
      if (i == 1 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=s;
      if (i > 1 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=""String_Node_Str"" + s;
      i+=1;
    }
  }
  ArrayList<String> texts=new ArrayList<String>();
  texts.add(text);
  plugin.handler.setNPCText(n.getUID(),texts);
  sender.sendMessage(ChatColor.GREEN + StringUtils.yellowify(n.getName(),ChatColor.GREEN) + ""String_Node_Str""+ StringUtils.yellowify(text,ChatColor.GREEN)+ ""String_Node_Str"");
}","private void setText(String[] args,CommandSender sender){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  String text=""String_Node_Str"";
  if (args.length >= 2) {
    int i=0;
    for (    String s : args) {
      if (i == 1 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=s;
      if (i > 1 && !s.isEmpty() && !s.equals(""String_Node_Str""))       text+=""String_Node_Str"" + s;
      i+=1;
    }
  }
  ArrayList<String> texts=new ArrayList<String>();
  texts.add(text);
  plugin.handler.setNPCText(n.getUID(),texts);
  sender.sendMessage(ChatColor.GREEN + StringUtils.yellowify(n.getName()) + ""String_Node_Str""+ StringUtils.yellowify(text)+ ""String_Node_Str"");
}",0.9784656796769852
2071,"private void buyTrader(HumanNPC npc,Player player){
  if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.TRADER_NPC_CREATE,player)) {
    if (EconomyHandler.useEconomy()) {
      int paid=EconomyHandler.pay(Operation.TRADER_NPC_CREATE,player);
      if (paid > 0)       player.sendMessage(MessageUtils.getPaidMessage(Operation.TRADER_NPC_CREATE,paid,npc.getStrippedName(),""String_Node_Str"",true));
      toggleTrader(npc,player);
    }
  }
 else   if (EconomyHandler.useEconomy()) {
    player.sendMessage(MessageUtils.getNoMoneyMessage(Operation.TRADER_NPC_CREATE,player));
    return;
  }
}","private void buyTrader(HumanNPC npc,Player player){
  if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.TRADER_NPC_CREATE,player)) {
    if (EconomyHandler.useEconomy()) {
      int paid=EconomyHandler.pay(Operation.TRADER_NPC_CREATE,player);
      if (paid > 0)       player.sendMessage(MessageUtils.getPaidMessage(Operation.TRADER_NPC_CREATE,paid,npc.getStrippedName(),""String_Node_Str"",true));
      toggleTrader(npc,player);
      TraderPropertyPool.saveTrader(npc.getUID(),true);
    }
  }
 else   if (EconomyHandler.useEconomy()) {
    player.sendMessage(MessageUtils.getNoMoneyMessage(Operation.TRADER_NPC_CREATE,player));
    return;
  }
}",0.956043956043956
2072,"private void toggleTrader(HumanNPC npc,Player player){
  npc.setTrader(!npc.isTrader());
  if (npc.isTrader())   player.sendMessage(StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN) + ""String_Node_Str"");
 else   player.sendMessage(StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN) + ""String_Node_Str"");
}","private void toggleTrader(HumanNPC npc,Player player){
  npc.setTrader(!npc.isTrader());
  if (npc.isTrader())   player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
 else   player.sendMessage(StringUtils.yellowify(npc.getStrippedName()) + ""String_Node_Str"");
}",0.9483870967741936
2073,"private void changeBalance(Player player,HumanNPC npc,String[] args) throws NumberFormatException {
  int amount=Integer.valueOf(args[2]);
  if (args[1].equals(""String_Node_Str"")) {
    if (EconomyHandler.canBuy(new Payment(amount,true),player)) {
      EconomyHandler.pay(new Payment(-amount,true),npc);
      EconomyHandler.pay(new Payment(amount,true),player);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(IconomyInterface.getCurrency(amount),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(IconomyInterface.getBalance(player.getName()),ChatColor.GREEN)+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str""+ StringUtils.yellowify(IconomyInterface.getCurrency(amount - IconomyInterface.getBalance(player.getName())),ChatColor.RED)+ ""String_Node_Str"");
    }
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    if (EconomyHandler.canBuy(new Payment(amount,true),npc)) {
      EconomyHandler.pay(new Payment(amount,true),npc);
      EconomyHandler.pay(new Payment(-amount,true),player);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(IconomyInterface.getCurrency(amount),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(IconomyInterface.getBalance(player.getName()),ChatColor.GREEN)+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(IconomyInterface.getCurrency(amount - npc.getTraderNPC().getBalance()),ChatColor.RED)+ ""String_Node_Str"");
    }
  }
 else   player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(args[1],ChatColor.RED)+ ""String_Node_Str"");
}","private void changeBalance(Player player,HumanNPC npc,String[] args) throws NumberFormatException {
  int amount=Integer.valueOf(args[2]);
  if (args[1].equals(""String_Node_Str"")) {
    if (EconomyHandler.canBuy(new Payment(amount,true),player)) {
      EconomyHandler.pay(new Payment(-amount,true),npc);
      EconomyHandler.pay(new Payment(amount,true),player);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(IconomyInterface.getCurrency(amount))+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(IconomyInterface.getBalance(player.getName()),ChatColor.GREEN)+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str""+ StringUtils.yellowify(IconomyInterface.getCurrency(amount - IconomyInterface.getBalance(player.getName())),ChatColor.RED)+ ""String_Node_Str"");
    }
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    if (EconomyHandler.canBuy(new Payment(amount,true),npc)) {
      EconomyHandler.pay(new Payment(amount,true),npc);
      EconomyHandler.pay(new Payment(-amount,true),player);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(IconomyInterface.getCurrency(amount))+ ""String_Node_Str""+ StringUtils.yellowify(npc.getStrippedName())+ ""String_Node_Str""+ StringUtils.yellowify(IconomyInterface.getBalance(player.getName()))+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(IconomyInterface.getCurrency(amount - npc.getTraderNPC().getBalance()),ChatColor.RED)+ ""String_Node_Str"");
    }
  }
 else   player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(args[1],ChatColor.RED)+ ""String_Node_Str"");
}",0.9782016348773842
2074,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(npc.getUID(),player)) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isTrader()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        try {
          if (!EconomyHandler.useIconomy())           player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
 else           changeBalance(player,npc,args);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && (args[0].contains(""String_Node_Str"") || args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeTraderBuySell(npc,player,args[1],args[2],args[0].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeUnlimited(npc,sender,args[1]);
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && args[0].contains(""String_Node_Str"") && (args[1].contains(""String_Node_Str"") || args[1].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeTraderBuySell(npc,player,args[1],args[2],args[0].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
    TraderPropertyPool.saveTraderState(npc);
  }
  return returnval;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(MessageUtils.mustBeIngameMessage);
    return true;
  }
  Player player=(Player)sender;
  HumanNPC npc=null;
  boolean returnval=false;
  if (NPCManager.validateSelected((Player)sender))   npc=NPCManager.getNPC(NPCManager.NPCSelected.get(player.getName()));
 else {
    player.sendMessage(ChatColor.RED + MessageUtils.mustHaveNPCSelectedMessage);
    return true;
  }
  if (!NPCManager.validateOwnership(npc.getUID(),player)) {
    player.sendMessage(MessageUtils.notOwnerMessage);
    return true;
  }
  if (!npc.isTrader()) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    if (args.length == 3 && args[0].equals(""String_Node_Str"")) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        try {
          if (!EconomyHandler.useIconomy())           player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
 else           changeBalance(player,npc,args);
        }
 catch (        NumberFormatException e) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && (args[0].contains(""String_Node_Str"") || args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeTraderBuySell(player,npc,args[1],args[2],args[0].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 2 && (args[0].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        changeUnlimited(npc,sender,args[1]);
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
 else     if (args.length == 3 && args[0].contains(""String_Node_Str"") && (args[1].contains(""String_Node_Str"") || args[1].contains(""String_Node_Str""))) {
      if (BasicExecutor.hasPermission(""String_Node_Str"",sender)) {
        displayList(player,npc,args,args[1].contains(""String_Node_Str""));
      }
 else       player.sendMessage(MessageUtils.noPermissionsMessage);
      returnval=true;
    }
    TraderPropertyPool.saveTraderState(npc);
  }
  return returnval;
}",0.9823350253807108
2075,"private void changeTraderBuySell(HumanNPC npc,Player player,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (selling) {
      if (npc.getTraderNPC().getStockable(mat.getId(),true) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),true);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name(),ChatColor.GREEN)+ ""String_Node_Str"");
      }
    }
 else {
      if (npc.getTraderNPC().getStockable(mat.getId(),false) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),false);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name(),ChatColor.GREEN)+ ""String_Node_Str"");
      }
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (stack.getData() != null)   data=stack.getData().getData();
  ItemPrice itemPrice=new ItemPrice(stack.getAmount(),stack.getTypeId(),data);
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  if (selling) {
    s.setSelling(true);
    npc.getTraderNPC().addStockable(s);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
  }
 else {
    npc.getTraderNPC().addStockable(s);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
  }
}","private void changeTraderBuySell(Player player,HumanNPC npc,String item,String price,boolean selling){
  if (item.contains(""String_Node_Str"")) {
    Material mat=StringUtils.parseMaterial(price);
    if (mat == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (selling) {
      if (npc.getTraderNPC().getStockable(mat.getId(),true) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),true);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
 else {
      if (npc.getTraderNPC().getStockable(mat.getId(),false) == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        npc.traderNPC.removeStockable(mat.getId(),false);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(mat.name())+ ""String_Node_Str"");
      }
    }
    return;
  }
  String[] split=item.split(""String_Node_Str"");
  ItemStack stack=createItemStack(split);
  if (stack == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  split=price.split(""String_Node_Str"");
  ItemStack cost=null;
  if (split.length != 1) {
    cost=createItemStack(split);
    if (cost == null) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int data=Citizens.MAGIC_DATA_VALUE;
  if (stack.getData() != null)   data=stack.getData().getData();
  ItemPrice itemPrice=new ItemPrice(stack.getAmount(),stack.getTypeId(),data);
  itemPrice.setiConomy(cost == null);
  Stockable s=new Stockable(stack,itemPrice,false);
  if (selling) {
    s.setSelling(true);
    npc.getTraderNPC().addStockable(s);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
  }
 else {
    npc.getTraderNPC().addStockable(s);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + MessageUtils.getStockableMessage(s,ChatColor.GREEN)+ ""String_Node_Str"");
  }
}",0.8499769903359411
2076,"public void onEnable(){
  BasicExecutor executor=new BasicExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  TraderExecutor traderExecutor=new TraderExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(traderExecutor);
  TogglerExecutor togglerExecutor=new TogglerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(togglerExecutor);
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,cl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,wl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,wl,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,pl,Event.Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  Permission.initialize(getServer());
  setupVariables();
  if (getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      setupNPCs();
    }
  }
) == -1) {
    log.info(""String_Node_Str"");
    setupNPCs();
  }
  setupHelp();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TickTask(this,npcRange),tickDelay,tickDelay);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      log.info(""String_Node_Str"");
      PropertyPool.saveAll();
      TraderPropertyPool.saveAll();
      log.info(""String_Node_Str"");
    }
  }
,saveDelay,saveDelay);
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}","public void onEnable(){
  File file=new File(""String_Node_Str"");
  file.delete();
  file=new File(""String_Node_Str"");
  file.delete();
  BasicExecutor executor=new BasicExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  TraderExecutor traderExecutor=new TraderExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(traderExecutor);
  TogglerExecutor togglerExecutor=new TogglerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(togglerExecutor);
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,cl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,wl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,wl,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,pl,Event.Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  Permission.initialize(getServer());
  setupVariables();
  if (getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      setupNPCs();
    }
  }
) == -1) {
    log.info(""String_Node_Str"");
    setupNPCs();
  }
  setupHelp();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TickTask(this,npcRange),tickDelay,tickDelay);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    @Override public void run(){
      log.info(""String_Node_Str"");
      PropertyPool.saveAll();
      TraderPropertyPool.saveAll();
      log.info(""String_Node_Str"");
    }
  }
,saveDelay,saveDelay);
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}",0.9706891998943756
2077,"public static String getPaidMessage(Operation op,int paid,String npcName,String type,boolean useType){
  String message=""String_Node_Str"";
  message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(EconomyHandler.getPaymentType(Operation.TRADER_NPC_CREATE,""String_Node_Str"" + paid),ChatColor.GREEN)+ ""String_Node_Str""+ ""String_Node_Str"";
  if (useType)   message+=StringUtils.yellowify(npcName,ChatColor.GREEN) + ""String_Node_Str"" + StringUtils.yellowify(type,ChatColor.GREEN)+ ""String_Node_Str"";
 else   message+=StringUtils.yellowify(npcName,ChatColor.GREEN) + ""String_Node_Str"";
  return message;
}","public static String getPaidMessage(Operation op,int paid,String npcName,String type,boolean useType){
  String message=""String_Node_Str"";
  message=ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(EconomyHandler.getPaymentType(Operation.TRADER_NPC_CREATE,""String_Node_Str"" + paid),ChatColor.GREEN)+ ""String_Node_Str"";
  if (useType)   message+=StringUtils.yellowify(npcName,ChatColor.GREEN) + ""String_Node_Str"" + StringUtils.yellowify(type,ChatColor.GREEN)+ ""String_Node_Str"";
 else   message+=StringUtils.yellowify(npcName,ChatColor.GREEN) + ""String_Node_Str"";
  return message;
}",0.9842323651452282
2078,"public TraderTask(HumanNPC NPC,Player player,Citizens plugin,Mode mode){
  this.npc=NPC;
  this.player=(CraftPlayer)player;
  this.plugin=plugin;
  previousNPCInv=new CraftInventoryPlayer(new InventoryPlayer(null));
  previousPlayerInv=new CraftInventoryPlayer(new InventoryPlayer(null));
  clonePlayerInventory(npc.getBukkitEntity().getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  this.mode=mode;
  sendJoinMessage();
}","public TraderTask(HumanNPC NPC,Player player,Citizens plugin,Mode mode){
  this.npc=NPC;
  this.player=(CraftPlayer)player;
  this.plugin=plugin;
  this.previousNPCInv=new CraftInventoryPlayer(new InventoryPlayer(null));
  this.previousPlayerInv=new CraftInventoryPlayer(new InventoryPlayer(null));
  clonePlayerInventory(npc.getBukkitEntity().getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  this.mode=mode;
  sendJoinMessage();
}",0.9897119341563786
2079,"@Override public void run(){
  if (npc == null || player == null || player.getHandle().activeContainer == player.getHandle().defaultContainer) {
    kill();
    return;
  }
  if (player.getHandle().inventory.j() == null)   return;
  if (mode == Mode.STOCK)   return;
  int count=0;
  boolean found=false;
  for (  ItemStack i : npc.getBukkitEntity().getInventory().getContents()) {
    if (!(previousNPCInv.getItem(count).equals(i))) {
      found=true;
      handleNPCItemClicked(count);
      break;
    }
    count+=1;
  }
  count=0;
  if (!found) {
    for (    ItemStack i : player.getInventory().getContents()) {
      if (!(previousPlayerInv.getItem(count).equals(i))) {
        handlePlayerItemClicked(count);
        break;
      }
      count+=1;
    }
  }
  clonePlayerInventory(npc.getBukkitEntity().getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  player.getHandle().inventory.b((net.minecraft.server.ItemStack)null);
}","@Override public void run(){
  if (npc == null || player == null || player.getHandle().activeContainer == player.getHandle().defaultContainer) {
    kill();
    return;
  }
  if (player.getHandle().inventory.j() == null)   return;
  if (mode == Mode.STOCK)   return;
  int count=0;
  boolean found=false;
  for (  ItemStack i : npc.getBukkitEntity().getInventory().getContents()) {
    if (!previousNPCInv.getItem(count).equals(i)) {
      found=true;
      handleNPCItemClicked(count);
      break;
    }
    count+=1;
  }
  count=0;
  if (!found) {
    for (    ItemStack i : player.getInventory().getContents()) {
      if (!previousPlayerInv.getItem(count).equals(i)) {
        handlePlayerItemClicked(count);
        break;
      }
      count+=1;
    }
  }
  clonePlayerInventory(npc.getBukkitEntity().getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  player.getHandle().inventory.b((net.minecraft.server.ItemStack)null);
}",0.997979797979798
2080,"private void clonePlayerInventory(PlayerInventory source,PlayerInventory target){
  log(""String_Node_Str"");
  StopWatch stopwatch=new StopWatch();
  stopwatch.start();
  ItemStack[] contents=new ItemStack[source.getContents().length];
  System.arraycopy(source.getContents(),0,contents,0,contents.length);
  target.setContents(contents);
  target.setHelmet(cloneItemStack(source.getHelmet()));
  target.setChestplate(cloneItemStack(source.getChestplate()));
  target.setLeggings(cloneItemStack(source.getLeggings()));
  target.setBoots(cloneItemStack(source.getBoots()));
  target.setItemInHand(cloneItemStack(source.getItemInHand()));
  stopwatch.stop();
  log(""String_Node_Str"" + stopwatch.getElapsedTime());
}","private void clonePlayerInventory(PlayerInventory source,PlayerInventory target){
  ItemStack[] contents=new ItemStack[source.getContents().length];
  System.arraycopy(source.getContents(),0,contents,0,contents.length);
  target.setContents(contents);
}",0.5243523316062176
2081,"private void handleNPCItemClicked(int slot){
  npc.getBukkitEntity().getInventory().setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npc.getBukkitEntity().getInventory().getItem(slot);
  if (!(npc.getTraderNPC().isBuyable(i.getTypeId()))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Buyable buyable=npc.getTraderNPC().getBuyable(i.getTypeId());
  int amount=npc.getBukkitEntity().getInventory().getItem(slot).getAmount();
  if (amount - buyable.getBuying().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(buyable.getPrice(),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=buyable.getBuying();
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(transfer);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(buyable.getPrice(),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(buyable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}","private void handleNPCItemClicked(int slot){
  log(""String_Node_Str"" + checkIfContentsNull(previousNPCInv));
  log(""String_Node_Str"" + checkIfContentsNull(npc.getBukkitEntity().getInventory()));
  log(""String_Node_Str"" + (previousNPCInv.getItem(slot) == null || previousNPCInv.getItem(slot).getType() == Material.AIR));
  npc.getBukkitEntity().getInventory().setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npc.getBukkitEntity().getInventory().getItem(slot);
  log(""String_Node_Str"" + (i == null || i.getType() == Material.AIR));
  if (!(npc.getTraderNPC().isBuyable(i.getTypeId()))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Buyable buyable=npc.getTraderNPC().getBuyable(i.getTypeId());
  int amount=npc.getBukkitEntity().getInventory().getItem(slot).getAmount();
  if (amount - buyable.getBuying().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(buyable.getPrice(),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=buyable.getBuying();
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(transfer);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(buyable.getPrice(),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(buyable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}",0.9200184928340268
2082,"private void handlePlayerItemClicked(int slot){
  player.getInventory().setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=player.getInventory().getItem(slot);
  if (!npc.getTraderNPC().isSellable(i.getTypeId())) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Sellable sellable=npc.getTraderNPC().getSellable(i.getTypeId());
  int amount=player.getInventory().getItem(slot).getAmount();
  if (amount - sellable.getSelling().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(sellable.getPrice(),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=sellable.getSelling();
  HashMap<Integer,ItemStack> unsold=npc.getBukkitEntity().getInventory().addItem(transfer);
  if (unsold.size() >= 1) {
    npc.getBukkitEntity().getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(sellable.getPrice(),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(sellable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}","private void handlePlayerItemClicked(int slot){
  log(""String_Node_Str"" + (previousPlayerInv.getItem(slot) == null || previousPlayerInv.getItem(slot).getType() == Material.AIR));
  player.getInventory().setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=player.getInventory().getItem(slot);
  log(""String_Node_Str"" + (i == null || i.getType() == Material.AIR));
  if (!npc.getTraderNPC().isSellable(i.getTypeId())) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Sellable sellable=npc.getTraderNPC().getSellable(i.getTypeId());
  int amount=player.getInventory().getItem(slot).getAmount();
  if (amount - sellable.getSelling().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(sellable.getPrice(),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=sellable.getSelling();
  HashMap<Integer,ItemStack> unsold=npc.getBukkitEntity().getInventory().addItem(transfer);
  if (unsold.size() >= 1) {
    npc.getBukkitEntity().getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(sellable.getPrice(),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(sellable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}",0.951766953199618
2083,"private void setupNPCs(){
  String[] list=PropertyPool.locations.getString(""String_Node_Str"").split(""String_Node_Str"");
  if (list.length > 0 && list[0] != ""String_Node_Str"") {
    for (    String name : list) {
      if (name.split(""String_Node_Str"",2).length == 1 && !name.split(""String_Node_Str"",2)[0].isEmpty()) {
        int UID=PropertyPool.getNewNpcID();
        String oldName=name;
        name=UID + ""String_Node_Str"" + name;
        PropertyPool.locations.setString(UID,PropertyPool.locations.getString(oldName));
        PropertyPool.locations.removeKey(oldName);
        PropertyPool.colours.setString(UID,PropertyPool.colours.getString(oldName));
        PropertyPool.colours.removeKey(oldName);
        PropertyPool.items.setString(UID,PropertyPool.items.getString(oldName));
        PropertyPool.items.removeKey(oldName);
        PropertyPool.texts.setString(UID,PropertyPool.texts.getString(oldName));
        PropertyPool.texts.removeKey(oldName);
        PropertyPool.lookat.setBoolean(UID,true);
        PropertyPool.talkWhenClose.setBoolean(UID,false);
        PropertyPool.locations.setString(""String_Node_Str"",PropertyPool.locations.getString(""String_Node_Str"").replace(oldName,name));
        list=PropertyPool.locations.getString(""String_Node_Str"").split(""String_Node_Str"");
      }
      Location loc=PropertyPool.getLocationFromID(Integer.valueOf(name.split(""String_Node_Str"")[0]));
      if (loc != null) {
        handler.spawnExistingNPC(name.split(""String_Node_Str"",2)[1],Integer.valueOf(name.split(""String_Node_Str"")[0]));
        ArrayList<String> text=PropertyPool.getText(Integer.valueOf(name.split(""String_Node_Str"")[0]));
        if (text != null)         handler.setNPCText(Integer.valueOf(name.split(""String_Node_Str"")[0]),text);
      }
 else {
        PropertyPool.deleteNameFromList(name);
      }
    }
  }
}","private void setupNPCs(){
  String[] list=PropertyPool.locations.getString(""String_Node_Str"").split(""String_Node_Str"");
  if (list.length > 0 && list[0] != ""String_Node_Str"") {
    for (    String name : list) {
      if (name.split(""String_Node_Str"",2).length == 1 && !name.split(""String_Node_Str"",2)[0].isEmpty()) {
        int UID=PropertyPool.getNewNpcID();
        String oldName=name;
        name=UID + ""String_Node_Str"" + name;
        PropertyPool.locations.setString(UID,PropertyPool.locations.getString(oldName));
        PropertyPool.locations.removeKey(oldName);
        PropertyPool.colours.setString(UID,PropertyPool.colours.getString(oldName));
        PropertyPool.colours.removeKey(oldName);
        PropertyPool.items.setString(UID,PropertyPool.items.getString(oldName));
        PropertyPool.items.removeKey(oldName);
        PropertyPool.texts.setString(UID,PropertyPool.texts.getString(oldName));
        PropertyPool.texts.removeKey(oldName);
        PropertyPool.lookat.setBoolean(UID,true);
        PropertyPool.talkWhenClose.setBoolean(UID,false);
        PropertyPool.locations.setString(""String_Node_Str"",PropertyPool.locations.getString(""String_Node_Str"").replace(oldName,name));
        list=PropertyPool.locations.getString(""String_Node_Str"").split(""String_Node_Str"");
      }
      Location loc=PropertyPool.getLocationFromID(Integer.valueOf(name.split(""String_Node_Str"")[0]));
      if (loc != null) {
        handler.spawnExistingNPC(name.split(""String_Node_Str"",2)[1],Integer.valueOf(name.split(""String_Node_Str"")[0]));
        ArrayList<String> text=PropertyPool.getText(Integer.valueOf(name.split(""String_Node_Str"")[0]));
        if (text != null)         handler.setNPCText(Integer.valueOf(name.split(""String_Node_Str"")[0]),text);
      }
 else {
        PropertyPool.deleteNameFromList(name);
      }
    }
  }
  log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ NPCManager.GlobalUIDs.size()+ ""String_Node_Str"");
}",0.965067778936392
2084,"public void onEnable(){
  BasicExecutor executor=new BasicExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  TraderExecutor traderExecutor=new TraderExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(traderExecutor);
  TogglerExecutor togglerExecutor=new TogglerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(togglerExecutor);
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,cl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,wl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,wl,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,pl,Event.Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  Permission.initialize(getServer());
  setupVariables();
  if (getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      setupNPCs();
    }
  }
) == -1) {
    log.info(""String_Node_Str"");
    setupNPCs();
  }
  setupHelp();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TickTask(this,npcRange),5,tickDelay);
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ NPCManager.GlobalUIDs.size()+ ""String_Node_Str"");
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ buildNumber+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}","public void onEnable(){
  BasicExecutor executor=new BasicExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  this.getCommand(""String_Node_Str"").setExecutor(executor);
  TraderExecutor traderExecutor=new TraderExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(traderExecutor);
  TogglerExecutor togglerExecutor=new TogglerExecutor(this);
  this.getCommand(""String_Node_Str"").setExecutor(togglerExecutor);
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,l,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,cl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,wl,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,wl,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLUGIN_ENABLE,pl,Event.Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  Permission.initialize(getServer());
  setupVariables();
  if (getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
    @Override public void run(){
      setupNPCs();
    }
  }
) == -1) {
    log.info(""String_Node_Str"");
    setupNPCs();
  }
  setupHelp();
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TickTask(this,npcRange),5,tickDelay);
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}",0.9428746928746928
2085,"@Override public void onDisable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  handler.despawnAllNPCs();
  PropertyPool.saveFiles();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ buildNumber+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}","@Override public void onDisable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  handler.despawnAllNPCs();
  PropertyPool.saveAll();
  TraderPropertyPool.saveAll();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}",0.8683385579937304
2086,"public void onChunkLoaded(ChunkLoadEvent e){
  for (  Entry<NPCLocation,String> i : toRespawn.entrySet()) {
    if (e.getChunk().getWorld().getChunkAt(i.getKey().getX(),i.getKey().getZ()).equals(e.getChunk())) {
      plugin.handler.spawnNPC(i.getValue(),i.getKey().getLocation());
    }
  }
}","public void onChunkLoaded(ChunkLoadEvent e){
  for (  Entry<NPCLocation,String> i : toRespawn.entrySet()) {
    if (e.getChunk().getWorld().getChunkAt(i.getKey().getX(),i.getKey().getZ()).equals(e.getChunk())) {
      plugin.handler.spawnNPC(i.getValue(),i.getKey().getLocation());
      toRespawn.remove(i.getKey());
    }
  }
}",0.9421221864951768
2087,"@Override public void run(){
  if (npc == null || player == null || player.getHandle().activeContainer == player.getHandle().defaultContainer) {
    kill();
    return;
  }
  if (player.getHandle().inventory.j() == null)   return;
  if (mode == Mode.STOCK)   return;
  int count=0;
  boolean found=false;
  for (  ItemStack i : npc.getBukkitEntity().getInventory().getContents()) {
    if (!previousNPCInv.getItem(count).equals(i)) {
      found=true;
      handleNPCItemClicked(count);
      break;
    }
    count+=1;
  }
  count=0;
  if (!found) {
    for (    ItemStack i : player.getInventory().getContents()) {
      if (!previousPlayerInv.getItem(count).equals(i)) {
        handlePlayerItemClicked(count);
        break;
      }
      count+=1;
    }
  }
  clonePlayerInventory(npc.getBukkitEntity().getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  player.getHandle().inventory.b((net.minecraft.server.ItemStack)null);
}","@Override public void run(){
  if (stop)   return;
  if (npc == null || player == null || player.getHandle().activeContainer == player.getHandle().defaultContainer) {
    kill();
    return;
  }
  if (player.getHandle().inventory.j() == null)   return;
  if (mode == Mode.STOCK)   return;
  int count=0;
  boolean found=false;
  for (  ItemStack i : npc.getBukkitEntity().getInventory().getContents()) {
    if (!previousNPCInv.getItem(count).equals(i) && previousNPCInv.getItem(count).getTypeId() == player.getHandle().inventory.j().id) {
      found=true;
      handleNPCItemClicked(count);
      break;
    }
    count+=1;
  }
  count=0;
  if (!found) {
    for (    ItemStack i : player.getInventory().getContents()) {
      if (!previousPlayerInv.getItem(count).equals(i) && previousPlayerInv.getItem(count).getTypeId() == player.getHandle().inventory.j().id) {
        handlePlayerItemClicked(count);
        break;
      }
      count+=1;
    }
  }
  clonePlayerInventory(npc.getBukkitEntity().getInventory(),this.previousNPCInv);
  clonePlayerInventory(player.getInventory(),this.previousPlayerInv);
  player.getHandle().inventory.b((net.minecraft.server.ItemStack)null);
}",0.4361456892577224
2088,"public void kill(){
  npc.setFree(true);
  plugin.getServer().getScheduler().cancelTask(taskID);
  sendLeaveMessage();
  int index=TraderInterface.tasks.indexOf(taskID);
  if (index != -1)   TraderInterface.tasks.remove(TraderInterface.tasks.indexOf(taskID));
}","public void kill(){
  stop=true;
  npc.setFree(true);
  plugin.getServer().getScheduler().cancelTask(taskID);
  sendLeaveMessage();
  int index=TraderInterface.tasks.indexOf(taskID);
  if (index != -1)   TraderInterface.tasks.remove(TraderInterface.tasks.indexOf(taskID));
}",0.9757009345794392
2089,"private void handleNPCItemClicked(int slot){
  log(""String_Node_Str"" + checkIfContentsNull(previousNPCInv));
  log(""String_Node_Str"" + checkIfContentsNull(npc.getBukkitEntity().getInventory()));
  log(""String_Node_Str"" + (previousNPCInv.getItem(slot) == null || previousNPCInv.getItem(slot).getType() == Material.AIR));
  npc.getBukkitEntity().getInventory().setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npc.getBukkitEntity().getInventory().getItem(slot);
  log(""String_Node_Str"" + (i == null || i.getType() == Material.AIR));
  if (!(npc.getTraderNPC().isBuyable(i.getTypeId()))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Buyable buyable=npc.getTraderNPC().getBuyable(i.getTypeId());
  int amount=npc.getBukkitEntity().getInventory().getItem(slot).getAmount();
  if (amount - buyable.getBuying().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(buyable.getPrice(),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=buyable.getBuying();
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(transfer);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(buyable.getPrice(),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(buyable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}","private void handleNPCItemClicked(int slot){
  npc.getBukkitEntity().getInventory().setItem(slot,previousNPCInv.getItem(slot));
  ItemStack i=npc.getBukkitEntity().getInventory().getItem(slot);
  if (!(npc.getTraderNPC().isBuyable(i.getTypeId()))) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Buyable buyable=npc.getTraderNPC().getBuyable(i.getTypeId());
  int amount=npc.getBukkitEntity().getInventory().getItem(slot).getAmount();
  if (amount - buyable.getBuying().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(buyable.getPrice(),player)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=buyable.getBuying();
  HashMap<Integer,ItemStack> unbought=player.getInventory().addItem(transfer);
  if (unbought.size() >= 1) {
    player.getInventory().setContents(previousPlayerInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(buyable.getPrice(),player);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(buyable.getBuying().getAmount() + ""String_Node_Str"" + buyable.getBuying().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(buyable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}",0.8714748035136385
2090,"private void handlePlayerItemClicked(int slot){
  log(""String_Node_Str"" + (previousPlayerInv.getItem(slot) == null || previousPlayerInv.getItem(slot).getType() == Material.AIR));
  player.getInventory().setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=player.getInventory().getItem(slot);
  log(""String_Node_Str"" + (i == null || i.getType() == Material.AIR));
  if (!npc.getTraderNPC().isSellable(i.getTypeId())) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Sellable sellable=npc.getTraderNPC().getSellable(i.getTypeId());
  int amount=player.getInventory().getItem(slot).getAmount();
  if (amount - sellable.getSelling().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(sellable.getPrice(),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=sellable.getSelling();
  HashMap<Integer,ItemStack> unsold=npc.getBukkitEntity().getInventory().addItem(transfer);
  if (unsold.size() >= 1) {
    npc.getBukkitEntity().getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(sellable.getPrice(),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(sellable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}","private void handlePlayerItemClicked(int slot){
  player.getInventory().setItem(slot,previousPlayerInv.getItem(slot));
  ItemStack i=player.getInventory().getItem(slot);
  if (!npc.getTraderNPC().isSellable(i.getTypeId())) {
    player.sendMessage(StringUtils.yellowify(i.getType().name(),ChatColor.RED) + ""String_Node_Str"");
    return;
  }
  Sellable sellable=npc.getTraderNPC().getSellable(i.getTypeId());
  int amount=player.getInventory().getItem(slot).getAmount();
  if (amount - sellable.getSelling().getAmount() <= 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  if (!EconomyHandler.canBuy(sellable.getPrice(),npc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  ItemStack transfer=sellable.getSelling();
  HashMap<Integer,ItemStack> unsold=npc.getBukkitEntity().getInventory().addItem(transfer);
  if (unsold.size() >= 1) {
    npc.getBukkitEntity().getInventory().setContents(previousNPCInv.getContents());
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.RED)+ ""String_Node_Str"");
    return;
  }
  EconomyHandler.pay(sellable.getPrice(),npc);
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + StringUtils.yellowify(sellable.getSelling().getAmount() + ""String_Node_Str"" + sellable.getSelling().getType().name(),ChatColor.GREEN)+ ""String_Node_Str""+ StringUtils.yellowify(MessageUtils.getPriceMessage(sellable.getPrice()),ChatColor.GREEN)+ ""String_Node_Str"");
  npc.getBukkitEntity().getInventory().setContents(sortInventory(npc.getBukkitEntity().getInventory()));
}",0.951766953199618
2091,"public void setColour(int UID,String colourChange){
  HumanNPC n=super.getNPC(UID);
  PropertyPool.saveColour(UID,colourChange.replace(""String_Node_Str"",""String_Node_Str""));
  super.removeNPCForRespawn(UID);
  super.registerBasicNPC(n.getName(),NPCType.BASIC,UID);
}","public void setColour(int UID,String colourChange){
  HumanNPC n=super.getNPC(UID);
  PropertyPool.saveColour(UID,colourChange.replace(""String_Node_Str"",""String_Node_Str""));
  super.removeNPCForRespawn(UID);
  Citizens.log.info(""String_Node_Str"" + n.getName());
  super.registerBasicNPC(n.getName(),NPCType.BASIC,UID);
}",0.9078498293515358
2092,"public void addNPCText(int UID,String text){
  ArrayList<String> texts=super.getBasicNPCText(UID);
  texts.add(text);
  texts=StringUtils.colourise(texts);
  super.setBasicNPCText(UID,texts);
  PropertyPool.saveText(UID,texts);
}","public void addNPCText(int UID,String text){
  ArrayList<String> texts=super.getBasicNPCText(UID);
  if (texts == null)   texts=new ArrayList<String>();
  texts.add(text);
  texts=StringUtils.colourise(texts);
  super.setBasicNPCText(UID,texts);
  PropertyPool.saveText(UID,texts);
}",0.89453125
2093,"private void copyNPC(HumanNPC NPC,Player p){
  ArrayList<String> texts=PropertyPool.getText(NPC.getUID());
  String colour=PropertyPool.getColour(NPC.getUID());
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(NPC.getUID());
  int newUID=plugin.handler.spawnNPC(NPC.getName(),p.getLocation());
  HumanNPC newNPC=NPCManager.getNPC(newUID);
  PropertyPool.saveColour(newUID,colour);
  PropertyPool.saveText(newUID,texts);
  PropertyPool.saveItems(newUID,items);
  NPCDataManager.addItems(newNPC,items);
}","private void copyNPC(HumanNPC NPC,Player p){
  ArrayList<String> texts=PropertyPool.getText(NPC.getUID());
  String colour=PropertyPool.getColour(NPC.getUID());
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(NPC.getUID());
  boolean lookatplayers=PropertyPool.getNPCLookWhenClose(NPC.getUID());
  boolean talkwhenclose=PropertyPool.getNPCTalkWhenClose(NPC.getUID());
  int newUID=plugin.handler.spawnNPC(NPC.getName(),p.getLocation());
  HumanNPC newNPC=NPCManager.getNPC(newUID);
  PropertyPool.saveColour(newUID,colour);
  PropertyPool.saveText(newUID,texts);
  PropertyPool.saveItems(newUID,items);
  PropertyPool.saveLookWhenClose(newUID,lookatplayers);
  PropertyPool.saveTalkWhenClose(newUID,talkwhenclose);
  NPCDataManager.addItems(newNPC,items);
}",0.799373040752351
2094,"public void moveNPC(int UID,Location loc){
  HumanNPC npc=list.get(UID);
  npc.moveTo(loc.getX(),loc.getY(),loc.getZ(),loc.getYaw(),0.0F);
}","public void moveNPC(int UID,Location loc){
  HumanNPC npc=list.get(UID);
  String location=loc.getWorld().getName() + ""String_Node_Str"" + loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ()+ ""String_Node_Str""+ loc.getYaw()+ ""String_Node_Str""+ loc.getPitch();
  PropertyPool.locations.setString(UID,location);
  npc.moveTo(loc.getX(),loc.getY(),loc.getZ(),loc.getYaw(),0.0F);
}",0.521415270018622
2095,"public String getName(){
  if (Citizens.convertUnderscores == true) {
    String returnName=""String_Node_Str"";
    String[] brokenName=this.name.split(""String_Node_Str"");
    for (int i=0; i < brokenName.length; i++) {
      if (i == 0)       returnName=brokenName[i];
 else       returnName+=""String_Node_Str"" + brokenName[i];
    }
    return returnName;
  }
  return this.name;
}","public String getName(){
  if (Citizens.convertUnderscores == true) {
    String returnName=""String_Node_Str"";
    String[] brokenName=this.name.split(""String_Node_Str"");
    for (int i=0; i < brokenName.length; i++) {
      if (i == 0)       returnName=brokenName[i];
 else       returnName+=""String_Node_Str"" + brokenName[i];
    }
    return ChatColor.stripColor(returnName);
  }
  return ChatColor.stripColor(this.name);
}",0.900990099009901
2096,"public String getSpacedName(){
  return this.name;
}","public String getSpacedName(){
  return ChatColor.stripColor(this.name);
}",0.8253968253968254
2097,"private void copyNPC(HumanNPC NPC,Player p){
  ArrayList<String> texts=PropertyPool.getText(NPC.getUID());
  String colour=PropertyPool.getColour(NPC.getUID());
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(NPC.getUID());
  boolean lookatplayers=PropertyPool.getNPCLookWhenClose(NPC.getUID());
  boolean talkwhenclose=PropertyPool.getNPCTalkWhenClose(NPC.getUID());
  int newUID=plugin.handler.spawnNPC(NPC.getName(),p.getLocation());
  HumanNPC newNPC=NPCManager.getNPC(newUID);
  PropertyPool.saveColour(newUID,colour);
  PropertyPool.saveText(newUID,texts);
  PropertyPool.saveItems(newUID,items);
  PropertyPool.saveLookWhenClose(newUID,lookatplayers);
  PropertyPool.saveTalkWhenClose(newUID,talkwhenclose);
  NPCDataManager.addItems(newNPC,items);
}","private void copyNPC(HumanNPC NPC,Player p){
  ArrayList<String> texts=PropertyPool.getText(NPC.getUID());
  String colour=PropertyPool.getColour(NPC.getUID());
  String owner=PropertyPool.getNPCOwner(NPC.getUID());
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(NPC.getUID());
  boolean lookatplayers=PropertyPool.getNPCLookWhenClose(NPC.getUID());
  boolean talkwhenclose=PropertyPool.getNPCTalkWhenClose(NPC.getUID());
  int newUID=plugin.handler.spawnNPC(NPC.getName(),p.getLocation());
  HumanNPC newNPC=NPCManager.getNPC(newUID);
  PropertyPool.saveColour(newUID,colour);
  PropertyPool.saveText(newUID,texts);
  PropertyPool.saveItems(newUID,items);
  PropertyPool.saveLookWhenClose(newUID,lookatplayers);
  PropertyPool.saveTalkWhenClose(newUID,talkwhenclose);
  PropertyPool.setNPCOwner(newUID,owner);
  NPCDataManager.addItems(newNPC,items);
}",0.9404542664211172
2098,"public void setItemInHand(int UID,String material){
  Material mat=StringUtils.parseMaterial(material);
  if (mat == null)   mat=StringUtils.parseMaterial(PropertyPool.itemlookups.getString(material));
  HumanNPC NPC=super.getNPC(UID);
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(UID);
  int olditem=items.get(0);
  items.set(0,mat.getId());
  NPCDataManager.addItems(NPC,items);
  if ((olditem != 0 && items.get(0) == 0)) {
    super.removeNPCForRespawn(NPC.getUID());
    super.registerBasicNPC(NPC.getName(),NPC.getType(),NPC.getUID());
  }
}","public void setItemInHand(Player p,int UID,String material){
  Material mat=StringUtils.parseMaterial(material);
  if (mat == null && !PropertyPool.itemlookups.getString(material).isEmpty())   mat=StringUtils.parseMaterial(PropertyPool.itemlookups.getString(material));
  if (mat == null) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  HumanNPC NPC=super.getNPC(UID);
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(UID);
  int olditem=items.get(0);
  items.set(0,mat.getId());
  NPCDataManager.addItems(NPC,items);
  if ((olditem != 0 && items.get(0) == 0)) {
    super.removeNPCForRespawn(NPC.getUID());
    super.registerBasicNPC(NPC.getName(),NPC.getType(),NPC.getUID());
  }
}",0.8627450980392157
2099,"public void setItemInSlot(Player p,String[] args){
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  Material mat=StringUtils.parseMaterial(args[1]);
  if (mat == null)   mat=StringUtils.parseMaterial(PropertyPool.itemlookups.getString(args[1]));
  if (mat == null) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(n.getUID());
  int oldhelmet=items.get(1);
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(1,mat.getId());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(2,mat.getId());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(3,mat.getId());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(4,mat.getId());
  }
  PropertyPool.saveItems(n.getUID(),items);
  NPCDataManager.addItems(n,items);
  if ((oldhelmet != 0 && items.get(1) == 0)) {
    super.removeNPCForRespawn(n.getUID());
    super.registerBasicNPC(n.getName(),n.getType(),n.getUID());
  }
}","public void setItemInSlot(Player p,String[] args){
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  Material mat=StringUtils.parseMaterial(args[1]);
  if (mat == null && !PropertyPool.itemlookups.getString(args[1]).isEmpty())   mat=StringUtils.parseMaterial(PropertyPool.itemlookups.getString(args[1]));
  if (mat == null) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  ArrayList<Integer> items=PropertyPool.getItemsFromFile(n.getUID());
  int oldhelmet=items.get(1);
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(1,mat.getId());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(2,mat.getId());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(3,mat.getId());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    items.set(4,mat.getId());
  }
  PropertyPool.saveItems(n.getUID(),items);
  NPCDataManager.addItems(n,items);
  if ((oldhelmet != 0 && items.get(1) == 0)) {
    super.removeNPCForRespawn(n.getUID());
    super.registerBasicNPC(n.getName(),n.getType(),n.getUID());
  }
}",0.94257064721969
2100,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,(Player)sender)) {
          createNPC(args,(Player)sender);
        }
 else         if (EconomyHandler.useEconomy()) {
          sender.sendMessage(notEnoughMoneyMessage);
        }
      }
 else       if (EconomyHandler.useEconomy())       sender.sendMessage(noPermissionsMessage + ""String_Node_Str"" + EconomyHandler.getRemainder(Operation.BASIC_NPC_CREATE,(Player)sender)+ ""String_Node_Str""+ EconomyHandler.getPaymentType(Operation.BASIC_NPC_CREATE)+ ""String_Node_Str"");
      return true;
    }
 else {
      sender.sendMessage(mustBeIngameMessage);
      return true;
    }
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (validateSelected((Player)sender)) {
          Player p=(Player)sender;
          HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
          moveNPC(sender,n.getName(),Integer.valueOf(NPCManager.NPCSelected.get(p.getName())));
        }
 else {
          sender.sendMessage(mustHaveNPCSelectedMessage);
        }
      }
 else       sender.sendMessage(noPermissionsMessage);
    }
 else     sender.sendMessage(mustBeIngameMessage);
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender) || (args.length == 2 && args[1].equals(""String_Node_Str""))) {
        removeNPC(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setName(args,sender);
        Player p=(Player)sender;
        NPCManager.NPCSelected.remove(p.getName());
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setColour(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        addText(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setText(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        resetText(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setItemInHand(sender,args);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (validateSelected((Player)sender)) {
          setArmor(sender,args);
        }
 else {
          sender.sendMessage(mustHaveNPCSelectedMessage);
        }
      }
 else       sender.sendMessage(noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    Player p=null;
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (validateSelected((Player)sender)) {
          p=(Player)sender;
          HumanNPC npc=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
          p.teleportTo((PropertyPool.getLocationFromName(npc.getUID())));
          sender.sendMessage(""String_Node_Str"" + npc.getName() + ""String_Node_Str"");
        }
 else {
          sender.sendMessage(mustHaveNPCSelectedMessage);
        }
      }
 else {
        sender.sendMessage(noPermissionsMessage);
      }
    }
 else {
      sender.sendMessage(mustBeIngameMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelpPage(sender,args[1]);
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        copyNPC(n,p);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC npc=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        p.sendMessage(""String_Node_Str"" + npc.getUID());
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      Player p=(Player)sender;
      if (!Character.isDigit(args[1].charAt(0))) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      HumanNPC npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(p.getName(),npc.getUID());
        p.sendMessage(""String_Node_Str"" + npc.getUID() + ""String_Node_Str""+ npc.getName()+ ""String_Node_Str"");
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        p.sendMessage(""String_Node_Str"" + PropertyPool.getNPCOwner(n.getUID()) + ""String_Node_Str"");
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        PropertyPool.setNPCOwner(n.getUID(),args[1]);
        p.sendMessage(""String_Node_Str"" + n.getName() + ""String_Node_Str""+ args[1]+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        changeTalkWhenClose(p,args[1]);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        changeLookWhenClose(p,args[1]);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (!EconomyHandler.useEconomy() || EconomyHandler.canBuy(Operation.BASIC_NPC_CREATE,(Player)sender)) {
          createNPC(args,(Player)sender);
        }
 else         if (EconomyHandler.useEconomy()) {
          sender.sendMessage(notEnoughMoneyMessage);
        }
      }
 else       if (EconomyHandler.useEconomy())       sender.sendMessage(noPermissionsMessage + ""String_Node_Str"" + EconomyHandler.getRemainder(Operation.BASIC_NPC_CREATE,(Player)sender)+ ""String_Node_Str""+ EconomyHandler.getPaymentType(Operation.BASIC_NPC_CREATE)+ ""String_Node_Str"");
      return true;
    }
 else {
      sender.sendMessage(mustBeIngameMessage);
      return true;
    }
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (validateSelected((Player)sender)) {
          Player p=(Player)sender;
          HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
          moveNPC(sender,n.getName(),Integer.valueOf(NPCManager.NPCSelected.get(p.getName())));
        }
 else {
          sender.sendMessage(mustHaveNPCSelectedMessage);
        }
      }
 else       sender.sendMessage(noPermissionsMessage);
    }
 else     sender.sendMessage(mustBeIngameMessage);
    return true;
  }
 else   if ((args.length == 1 || args.length == 2) && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender) || (args.length == 2 && args[1].equals(""String_Node_Str""))) {
        removeNPC(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setName(args,sender);
        Player p=(Player)sender;
        NPCManager.NPCSelected.remove(p.getName());
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender) || hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setColour(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        addText(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length >= 2 && args[0].equals(""String_Node_Str"")) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setText(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        resetText(args,sender);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        setItemInHand(sender,args);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str""))) {
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (validateSelected((Player)sender)) {
          setArmor(sender,args);
        }
 else {
          sender.sendMessage(mustHaveNPCSelectedMessage);
        }
      }
 else       sender.sendMessage(noPermissionsMessage);
    }
    return true;
  }
 else   if (args.length >= 1 && args[0].equals(""String_Node_Str"")) {
    Player p=null;
    if (sender instanceof Player) {
      if (hasPermission(""String_Node_Str"",sender)) {
        if (validateSelected((Player)sender)) {
          p=(Player)sender;
          HumanNPC npc=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
          p.teleportTo((PropertyPool.getLocationFromName(npc.getUID())));
          sender.sendMessage(""String_Node_Str"" + npc.getName() + ""String_Node_Str"");
        }
 else {
          sender.sendMessage(mustHaveNPCSelectedMessage);
        }
      }
 else {
        sender.sendMessage(noPermissionsMessage);
      }
    }
 else {
      sender.sendMessage(mustBeIngameMessage);
    }
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelp(sender);
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      sendHelpPage(sender,args[1]);
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        copyNPC(n,p);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC npc=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        p.sendMessage(""String_Node_Str"" + npc.getUID());
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      Player p=(Player)sender;
      if (!Character.isDigit(args[1].charAt(0))) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
      HumanNPC npc=NPCManager.getNPC(Integer.valueOf(args[1]));
      if (npc == null) {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[1]+ ""String_Node_Str"");
      }
 else {
        NPCManager.NPCSelected.put(p.getName(),npc.getUID());
        p.sendMessage(""String_Node_Str"" + npc.getUID() + ""String_Node_Str""+ npc.getName()+ ""String_Node_Str"");
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 1 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        p.sendMessage(""String_Node_Str"" + PropertyPool.getNPCOwner(n.getUID()) + ""String_Node_Str"");
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
        PropertyPool.setNPCOwner(n.getUID(),args[1]);
        p.sendMessage(""String_Node_Str"" + n.getName() + ""String_Node_Str""+ args[1]+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        changeTalkWhenClose(p,args[1]);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else   if (args.length == 2 && (args[0].equals(""String_Node_Str""))) {
    if (hasPermission(""String_Node_Str"",sender)) {
      if (validateSelected((Player)sender)) {
        Player p=(Player)sender;
        changeLookWhenClose(p,args[1]);
      }
 else {
        sender.sendMessage(mustHaveNPCSelectedMessage);
      }
    }
 else     sender.sendMessage(noPermissionsMessage);
    return true;
  }
 else {
    if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"") || args[0].equals(""String_Node_Str"")|| args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else     if (args.length >= 2 && args[0].equals(""String_Node_Str""))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if ((command.getName().equals(""String_Node_Str"") || command.getName().equals(""String_Node_Str"")) && args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 2 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     if (args.length >= 3 && (args[0].equals(""String_Node_Str"")))     sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
 else     return false;
    return true;
  }
}",0.9999189167274792
2101,"private void setItemInHand(CommandSender sender,String[] args){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  plugin.handler.setItemInHand(n.getUID(),args[1]);
}","private void setItemInHand(CommandSender sender,String[] args){
  Player p=(Player)sender;
  HumanNPC n=NPCManager.getNPC(NPCManager.NPCSelected.get(p.getName()));
  plugin.handler.setItemInHand(p,n.getUID(),args[1]);
}",0.9954128440366972
2102,"@Override public void onDisable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  handler.despawnAllNPCs();
  PropertyPool.locations.save();
  PropertyPool.texts.save();
  PropertyPool.items.save();
  PropertyPool.colours.save();
  PropertyPool.settings.save();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ buildNumber+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}","@Override public void onDisable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  handler.despawnAllNPCs();
  PropertyPool.saveFiles();
  log.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str""+ buildNumber+ ""String_Node_Str""+ codename+ ""String_Node_Str"");
}",0.8224543080939948
2103,"@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  MultiSCMRevisionState revisionState=new MultiSCMRevisionState();
  build.addAction(revisionState);
  HashSet<Object> scmActions=new HashSet<Object>();
  FileOutputStream logStream=new FileOutputStream(changelogFile);
  OutputStreamWriter logWriter=new OutputStreamWriter(logStream);
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  boolean checkoutOK=true;
  for (  SCM scm : scms) {
    String changeLogPath=changelogFile.getPath() + ""String_Node_Str"";
    File subChangeLog=new File(changeLogPath);
    checkoutOK=scm.checkout(build,launcher,workspace,listener,subChangeLog) && checkoutOK;
    List<Action> actions=build.getActions();
    for (    Action a : actions) {
      if (!scmActions.contains(a) && a instanceof SCMRevisionState) {
        scmActions.add(a);
        revisionState.add(scm.getClass().getName(),(SCMRevisionState)a);
      }
    }
    String subLogText=FileUtils.readFileToString(subChangeLog);
    logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.SUB_LOG_TAG,scm.getType(),subLogText,MultiSCMChangeLogParser.SUB_LOG_TAG));
    subChangeLog.delete();
  }
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  logWriter.close();
  return checkoutOK;
}","@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  MultiSCMRevisionState revisionState=new MultiSCMRevisionState();
  build.addAction(revisionState);
  HashSet<Object> scmActions=new HashSet<Object>();
  FileOutputStream logStream=new FileOutputStream(changelogFile);
  OutputStreamWriter logWriter=new OutputStreamWriter(logStream);
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  boolean checkoutOK=true;
  for (  SCM scm : scms) {
    String changeLogPath=changelogFile.getPath() + ""String_Node_Str"";
    File subChangeLog=new File(changeLogPath);
    checkoutOK=scm.checkout(build,launcher,workspace,listener,subChangeLog) && checkoutOK;
    List<Action> actions=build.getActions();
    for (    Action a : actions) {
      if (!scmActions.contains(a) && a instanceof SCMRevisionState) {
        scmActions.add(a);
        revisionState.add(scm,workspace,build,(SCMRevisionState)a);
      }
    }
    String subLogText=FileUtils.readFileToString(subChangeLog);
    logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.SUB_LOG_TAG,scm.getType(),subLogText,MultiSCMChangeLogParser.SUB_LOG_TAG));
    subChangeLog.delete();
  }
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  logWriter.close();
  return checkoutOK;
}",0.9873331051009928
2104,"@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  MultiSCMRevisionState revisionState=new MultiSCMRevisionState();
  build.addAction(revisionState);
  HashSet<Object> scmActions=new HashSet<Object>();
  FileOutputStream logStream=new FileOutputStream(changelogFile);
  OutputStreamWriter logWriter=new OutputStreamWriter(logStream);
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  boolean checkoutOK=true;
  for (  SCM scm : scms) {
    String changeLogPath=changelogFile.getPath() + ""String_Node_Str"";
    File subChangeLog=new File(changeLogPath);
    checkoutOK=scm.checkout(build,launcher,workspace,listener,subChangeLog) && checkoutOK;
    List<Action> actions=build.getActions();
    for (    Action a : actions) {
      if (!scmActions.contains(a) && a instanceof SCMRevisionState) {
        scmActions.add(a);
        revisionState.add(scm,workspace,build,(SCMRevisionState)a);
      }
    }
    if (subChangeLog.exists()) {
      String subLogText=FileUtils.readFileToString(subChangeLog);
      logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.SUB_LOG_TAG,scm.getType(),subLogText,MultiSCMChangeLogParser.SUB_LOG_TAG));
      subChangeLog.delete();
    }
  }
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  logWriter.close();
  return checkoutOK;
}","@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  MultiSCMRevisionState revisionState=new MultiSCMRevisionState();
  build.addAction(revisionState);
  HashSet<Object> scmActions=new HashSet<Object>();
  FileOutputStream logStream=new FileOutputStream(changelogFile);
  OutputStreamWriter logWriter=new OutputStreamWriter(logStream);
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  boolean checkoutOK=true;
  for (  SCM scm : scms) {
    String changeLogPath=changelogFile.getPath() + ""String_Node_Str"";
    File subChangeLog=new File(changeLogPath);
    checkoutOK=scm.checkout(build,launcher,workspace,listener,subChangeLog) && checkoutOK;
    List<Action> actions=build.getActions();
    for (    Action a : actions) {
      if (!scmActions.contains(a) && a instanceof SCMRevisionState) {
        scmActions.add(a);
        revisionState.add(scm,workspace,build,(SCMRevisionState)a);
      }
    }
    if (subChangeLog.exists()) {
      String subLogText=FileUtils.readFileToString(subChangeLog);
      logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.SUB_LOG_TAG,scm.getType(),StringEscapeUtils.escapeXml(subLogText),MultiSCMChangeLogParser.SUB_LOG_TAG));
      subChangeLog.delete();
    }
  }
  logWriter.write(String.format(""String_Node_Str"",MultiSCMChangeLogParser.ROOT_XML_TAG));
  logWriter.close();
  return checkoutOK;
}",0.9904448105436572
2105,"@Override public void characters(char[] data,int startIndex,int length) throws SAXException {
  try {
    if (outputStream != null) {
      if (newStream) {
        while (length > 0 && Character.isWhitespace(data[startIndex])) {
          startIndex+=1;
          length-=1;
        }
      }
      outputStream.write(data,startIndex,length);
      newStream=false;
    }
  }
 catch (  IOException e) {
    throw new SAXException(""String_Node_Str"",e);
  }
}","@Override public void characters(char[] data,int startIndex,int length) throws SAXException {
  if (buffer != null) {
    while (length > 0 && Character.isWhitespace(data[startIndex])) {
      startIndex+=1;
      length-=1;
    }
    for (int i=0; i < length; i++) {
      buffer.append(data[startIndex + i]);
    }
  }
}",0.6025641025641025
2106,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.compareTo(SUB_LOG_TAG) == 0) {
    try {
      outputStream.close();
      outputStream=null;
      ChangeLogParser parser=scmLogParsers.get(scmClass);
      if (parser != null) {
        ChangeLogSet<? extends ChangeLogSet.Entry> cls=parser.parse(build,tempFile);
        changeLogs.add(scmClass,scmDisplayNames.get(scmClass),cls);
      }
    }
 catch (    IOException e) {
      throw new SAXException(""String_Node_Str"",e);
    }
  }
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.compareTo(SUB_LOG_TAG) == 0) {
    try {
      OutputStreamWriter outputStream=new OutputStreamWriter(new FileOutputStream(tempFile));
      String data=StringEscapeUtils.unescapeXml(buffer.toString());
      outputStream.write(data);
      outputStream.close();
      buffer=null;
      ChangeLogParser parser=scmLogParsers.get(scmClass);
      if (parser != null) {
        ChangeLogSet<? extends ChangeLogSet.Entry> cls=parser.parse(build,tempFile);
        changeLogs.add(scmClass,scmDisplayNames.get(scmClass),cls);
      }
    }
 catch (    FileNotFoundException e) {
      throw new SAXException(""String_Node_Str"",e);
    }
catch (    IOException e) {
      throw new SAXException(""String_Node_Str"",e);
    }
  }
}",0.7363834422657952
2107,"@Override public void startElement(String uri,String localName,String qName,Attributes attrs) throws SAXException {
  if (qName.compareTo(SUB_LOG_TAG) == 0) {
    FileOutputStream fos;
    try {
      scmClass=attrs.getValue(""String_Node_Str"");
      newStream=true;
      fos=new FileOutputStream(tempFile);
    }
 catch (    FileNotFoundException e) {
      throw new SAXException(""String_Node_Str"",e);
    }
    outputStream=new OutputStreamWriter(fos);
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attrs) throws SAXException {
  if (qName.compareTo(SUB_LOG_TAG) == 0) {
    scmClass=attrs.getValue(""String_Node_Str"");
    buffer=new StringBuffer();
  }
}",0.502127659574468
2108,"public JNDIAndSaltAwareJdbcRealm(){
  setPermissionsLookupEnabled(true);
}","public JNDIAndSaltAwareJdbcRealm(){
}",0.6666666666666666
2109,"@Override public void run(){
  NoteListTopComponent.this.refresh();
}","@Override public void run(){
  allNotes.getReadWriteLock().writeLock().lock();
  try {
    allNotes.clear();
    allNotes.addAll(getAllNotesInDb());
  }
  finally {
    allNotes.getReadWriteLock().writeLock().unlock();
  }
  NoteListTopComponent.this.refresh();
}",0.4156626506024096
2110,"@Override public void propertyChange(PropertyChangeEvent evt){
  LOG.fine(""String_Node_Str"");
  if (null != currentRefreshTask) {
    currentRefreshTask.cancel();
  }
  Runnable runnable=new Runnable(){
    @Override public void run(){
      NoteListTopComponent.this.refresh();
    }
  }
;
  currentRefreshTask=RP.post(runnable);
}","@Override public void propertyChange(PropertyChangeEvent evt){
  LOG.fine(""String_Node_Str"");
  if (null != currentRefreshTask) {
    currentRefreshTask.cancel();
  }
  Runnable runnable=new Runnable(){
    @Override public void run(){
      allNotes.getReadWriteLock().writeLock().lock();
      try {
        allNotes.clear();
        allNotes.addAll(getAllNotesInDb());
      }
  finally {
        allNotes.getReadWriteLock().writeLock().unlock();
      }
      NoteListTopComponent.this.refresh();
    }
  }
;
  currentRefreshTask=RP.post(runnable);
}",0.744920993227991
2111,"public Reader getContentAsReader(){
  ResultSet rs=null;
  try {
synchronized (Installer.selectContentById) {
      Installer.selectContentById.setInt(1,id);
      rs=Installer.selectContentById.executeQuery();
    }
    if (rs.next()) {
      final Reader characterStream=rs.getCharacterStream(""String_Node_Str"");
      return characterStream;
    }
  }
 catch (  SQLException sQLException) {
    Exceptions.printStackTrace(sQLException);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  return null;
}","public Reader getContentAsReader(){
  ResultSet rs=null;
  try {
synchronized (Installer.selectContentById) {
      Installer.selectContentById.setInt(1,id);
      rs=Installer.selectContentById.executeQuery();
      if (rs.next()) {
        final Reader characterStream=rs.getCharacterStream(""String_Node_Str"");
        return characterStream;
      }
    }
  }
 catch (  SQLException sQLException) {
    Exceptions.printStackTrace(sQLException);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  return null;
}",0.9863713798977852
2112,"public void rebuildIndex(ProgressHandle ph){
  LOG.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  long start2=start;
  IndexWriter writer=null;
  try {
    writer=getIndexWriter();
    writer.deleteAll();
    writer.commit();
    Collection<Note> notes=getAllNotes();
    LOG.info(""String_Node_Str"" + notes.size());
    ph.switchToDeterminate(notes.size());
    int i=0;
    for (    Note noteWithoutContents : notes) {
      if (Thread.interrupted()) {
        writer.close();
        LOG.warning(""String_Node_Str"");
        return;
      }
      Note note=getProperNote(noteWithoutContents);
      if (null != note) {
        Document document=getLuceneDocument(note);
        writer.addDocument(document);
        ++i;
        if ((i % REPORTEVERY) == 0) {
          ph.progress(""String_Node_Str"" + note.getTitle(),i);
          writer.commit();
          long delta=System.currentTimeMillis() - start2;
          start2=System.currentTimeMillis();
          LOG.info(i + ""String_Node_Str"" + (delta / 1000.0)+ ""String_Node_Str"");
        }
      }
 else {
        break;
      }
    }
    writer.commit();
    LOG.info(i + ""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    writer.optimize();
    writer.close();
  }
 catch (  Exception ex) {
    LOG.log(Level.WARNING,""String_Node_Str"",ex);
    Exceptions.printStackTrace(ex);
  }
 finally {
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  long delta=System.currentTimeMillis() - start;
  LOG.info(""String_Node_Str"" + delta / 1000L + ""String_Node_Str"");
}","public void rebuildIndex(ProgressHandle ph){
  LOG.info(""String_Node_Str"");
  long start=System.currentTimeMillis();
  long start2=start;
  IndexWriter writer=null;
  try {
    writer=getIndexWriter();
    writer.deleteAll();
    writer.commit();
    Collection<Note> notes=getAllNotes();
    LOG.info(""String_Node_Str"" + notes.size());
    ph.switchToDeterminate(notes.size());
    int i=0;
    for (    Note noteWithoutContents : notes) {
      if (Thread.interrupted()) {
        writer.close();
        LOG.warning(""String_Node_Str"");
        return;
      }
      Note note=getProperNote(noteWithoutContents);
      if (null != note) {
        Document document=getLuceneDocument(note);
        writer.addDocument(document);
        ++i;
        if ((i % REPORTEVERY) == 0) {
          ph.progress(""String_Node_Str"" + note.getTitle(),i);
          writer.commit();
          long delta=System.currentTimeMillis() - start2;
          start2=System.currentTimeMillis();
          LOG.fine(i + ""String_Node_Str"" + (delta / 1000.0)+ ""String_Node_Str"");
        }
      }
 else {
        break;
      }
    }
    writer.commit();
    LOG.info(i + ""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    start2=System.currentTimeMillis();
    writer.optimize();
    writer.close();
    long delta=System.currentTimeMillis() - start2;
    LOG.info(""String_Node_Str"" + delta / 1000.0 + ""String_Node_Str"");
  }
 catch (  Exception ex) {
    LOG.log(Level.WARNING,""String_Node_Str"",ex);
    Exceptions.printStackTrace(ex);
  }
 finally {
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  long delta=System.currentTimeMillis() - start;
  LOG.info(""String_Node_Str"" + delta / 1000L + ""String_Node_Str"");
}",0.9515239477503628
2113,"private IndexWriter getIndexWriter() throws IOException {
  File file=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  final CustomAnalyzer analyzer=new CustomAnalyzer();
  IndexWriter writer=new IndexWriter(FSDirectory.open(file),analyzer,true,IndexWriter.MaxFieldLength.LIMITED);
  writer.setUseCompoundFile(true);
  return writer;
}","private IndexWriter getIndexWriter() throws IOException {
  File file=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  final CustomAnalyzer analyzer=new CustomAnalyzer();
  IndexWriter writer=new IndexWriter(FSDirectory.open(file),analyzer,IndexWriter.MaxFieldLength.LIMITED);
  writer.setUseCompoundFile(true);
  return writer;
}",0.9929478138222848
2114,"public Collection<Note> find(String searchText){
  if (""String_Node_Str"".equals(searchText.trim())) {
    return Collections.EMPTY_LIST;
  }
  searchText=searchText.trim();
  String patternStr=""String_Node_Str"";
  String replaceStr=""String_Node_Str"";
  Pattern pattern=Pattern.compile(patternStr);
  Matcher matcher=pattern.matcher(searchText);
  searchText=matcher.replaceAll(replaceStr);
  if (Pattern.matches(""String_Node_Str"",searchText)) {
    searchText=searchText + ""String_Node_Str"";
  }
  LOG.info(""String_Node_Str"" + searchText);
  final Collection<Note> toReturn=new ArrayList<Note>();
  try {
    IndexReader newReader=reader.reopen();
    if (newReader != reader) {
      LOG.info(""String_Node_Str"");
      reader.close();
    }
    reader=newReader;
    reader.reopen();
    final IndexSearcher searcher=new IndexSearcher(reader);
    final Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_CURRENT);
    AnalyzerUtils.displayTokensWithFullDetails(analyzer,searchText);
    QueryParser parser=new CustomQueryParser(""String_Node_Str"",analyzer);
    parser.setDefaultOperator(QueryParser.Operator.AND);
    Query query=parser.parse(searchText);
    LOG.info(""String_Node_Str"" + query.toString());
    Collector collector=new Collector(){
      @Override public void setScorer(      Scorer scorer) throws IOException {
      }
      @Override public void collect(      int doc) throws IOException {
        int scoreId=doc;
        Document document=searcher.doc(scoreId);
        int docId=Integer.parseInt(document.getField(""String_Node_Str"").stringValue());
        NoteRepository rep=Lookup.getDefault().lookup(NoteRepository.class);
        toReturn.add(rep.get(docId,false));
      }
      @Override public void setNextReader(      IndexReader reader,      int docBase) throws IOException {
      }
      @Override public boolean acceptsDocsOutOfOrder(){
        return true;
      }
    }
;
    searcher.search(query,collector);
  }
 catch (  ParseException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  CorruptIndexException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  return toReturn;
}","public Collection<Note> find(String searchText){
  if (""String_Node_Str"".equals(searchText.trim())) {
    return Collections.EMPTY_LIST;
  }
  long start=System.currentTimeMillis();
  searchText=searchText.trim();
  String patternStr=""String_Node_Str"";
  String replaceStr=""String_Node_Str"";
  Pattern pattern=Pattern.compile(patternStr);
  Matcher matcher=pattern.matcher(searchText);
  searchText=matcher.replaceAll(replaceStr);
  if (Pattern.matches(""String_Node_Str"",searchText)) {
    searchText=searchText + ""String_Node_Str"";
  }
  LOG.info(""String_Node_Str"" + searchText);
  final Collection<Note> toReturn=new ArrayList<Note>();
  try {
    IndexReader newReader=reader.reopen();
    if (newReader != reader) {
      LOG.info(""String_Node_Str"");
      reader.close();
    }
    reader=newReader;
    reader.reopen();
    final IndexSearcher searcher=new IndexSearcher(reader);
    final Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_CURRENT);
    AnalyzerUtils.displayTokensWithFullDetails(analyzer,searchText);
    QueryParser parser=new CustomQueryParser(""String_Node_Str"",analyzer);
    parser.setDefaultOperator(QueryParser.Operator.AND);
    Query query=parser.parse(searchText);
    LOG.info(""String_Node_Str"" + query.toString());
    Collector collector=new Collector(){
      @Override public void setScorer(      Scorer scorer) throws IOException {
      }
      @Override public void collect(      int doc) throws IOException {
        int scoreId=doc;
        Document document=searcher.doc(scoreId);
        int docId=Integer.parseInt(document.getField(""String_Node_Str"").stringValue());
        NoteRepository rep=Lookup.getDefault().lookup(NoteRepository.class);
        toReturn.add(rep.get(docId,false));
      }
      @Override public void setNextReader(      IndexReader reader,      int docBase) throws IOException {
      }
      @Override public boolean acceptsDocsOutOfOrder(){
        return true;
      }
    }
;
    searcher.search(query,collector);
  }
 catch (  ParseException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  CorruptIndexException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  long delta=System.currentTimeMillis() - start;
  LOG.info(""String_Node_Str"" + delta / 1000.0 + ""String_Node_Str"" + toReturn.size() + ""String_Node_Str"");
  return toReturn;
}",0.9545454545454546
2115,"private AuthenticationResult getValidAuthenticationResult() throws TTransportException, EDAMUserException, EDAMSystemException, TException {
  if (null == currentAuthResult) {
    LOG.info(""String_Node_Str"");
    final String c=a;
    final String d=b;
    final String password=NbPreferences.forModule(SynchronizationServiceImpl.class).get(""String_Node_Str"",""String_Node_Str"");
    final String username=NbPreferences.forModule(SynchronizationServiceImpl.class).get(""String_Node_Str"",""String_Node_Str"");
    currentAuthResult=getUserStore().authenticate(username,password,c,d);
    setExpirationTime(currentAuthResult);
  }
  if (isExpired()) {
    LOG.info(""String_Node_Str"");
    currentAuthResult=getUserStore().refreshAuthentication(currentAuthToken);
  }
  currentAuthToken=currentAuthResult.getAuthenticationToken();
  LOG.info(""String_Node_Str"" + currentAuthResult.getAuthenticationToken());
  return currentAuthResult;
}","private AuthenticationResult getValidAuthenticationResult() throws TTransportException, EDAMUserException, EDAMSystemException, TException {
  if (null == currentAuthResult) {
    LOG.info(""String_Node_Str"");
    final String c=a;
    final String d=b;
    final String password=NbPreferences.forModule(SynchronizationServiceImpl.class).get(""String_Node_Str"",""String_Node_Str"");
    final String username=NbPreferences.forModule(SynchronizationServiceImpl.class).get(""String_Node_Str"",""String_Node_Str"");
    currentAuthResult=getUserStore().authenticate(username,password,c,d);
    setExpirationTime(currentAuthResult);
  }
  if (isExpired()) {
    LOG.info(""String_Node_Str"");
    currentAuthResult=getUserStore().refreshAuthentication(currentAuthToken);
    setExpirationTime(currentAuthResult);
  }
  currentAuthToken=currentAuthResult.getAuthenticationToken();
  LOG.info(""String_Node_Str"" + currentAuthResult.getAuthenticationToken());
  return currentAuthResult;
}",0.9778947368421052
2116,"private boolean isExpired(){
  final long msToExpiration=expirationTime - System.currentTimeMillis();
  LOG.info(""String_Node_Str"" + msToExpiration / 1000.0 + ""String_Node_Str"" + (msToExpiration / (1000.0 * 60)) + ""String_Node_Str"");
  boolean isExpired=msToExpiration < (10 * 60 * 1000L);
  return isExpired;
}","private boolean isExpired(){
  final long msToExpiration=expirationTime - System.currentTimeMillis();
  LOG.info(""String_Node_Str"" + msToExpiration / 1000.0 + ""String_Node_Str"" + (msToExpiration / (1000.0 * 60)) + ""String_Node_Str"");
  boolean isExpired=msToExpiration < (5 * 60 * 1000L);
  return isExpired;
}",0.9694041867954912
2117,"public synchronized void rebuildIndex(){
  IndexWriter writer=null;
  LOG.info(""String_Node_Str"");
  try {
    File file=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_CURRENT);
    writer=new IndexWriter(FSDirectory.open(file),analyzer,true,IndexWriter.MaxFieldLength.LIMITED);
    writer.setUseCompoundFile(true);
    writer.deleteAll();
    writer.commit();
    Collection<Note> notes=getAllNotes();
    LOG.info(""String_Node_Str"" + notes.size());
    for (    Note note : notes) {
      if (Thread.interrupted()) {
        writer.close();
        return;
      }
      LOG.info(""String_Node_Str"" + note);
      Document document=new Document();
      Field idField=new Field(""String_Node_Str"",note.getId().toString(),Field.Store.YES,Field.Index.NOT_ANALYZED);
      document.add(idField);
      Field titleField=new Field(""String_Node_Str"",note.getTitle(),Field.Store.YES,Field.Index.ANALYZED);
      document.add(titleField);
      DocumentFragment node=new HTMLDocumentImpl().createDocumentFragment();
      domParser.parse(new InputSource(new StringReader(note.getContent())),node);
      StringBuffer sb=new StringBuffer();
      sb.setLength(0);
      getText(sb,node);
      String text=sb.toString();
      if ((text != null) && (!text.equals(""String_Node_Str""))) {
        Field contentField=new Field(""String_Node_Str"",text,Field.Store.NO,Field.Index.ANALYZED);
        document.add(titleField);
      }
      writer.addDocument(document);
    }
    writer.commit();
    writer.optimize();
    writer.close();
  }
 catch (  Exception ex) {
    LOG.log(Level.WARNING,""String_Node_Str"",ex);
    Exceptions.printStackTrace(ex);
  }
 finally {
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  LOG.info(""String_Node_Str"");
}","public void rebuildIndex(){
  IndexWriter writer=null;
  LOG.info(""String_Node_Str"");
  try {
    File file=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_CURRENT);
    writer=new IndexWriter(FSDirectory.open(file),analyzer,true,IndexWriter.MaxFieldLength.LIMITED);
    writer.setUseCompoundFile(true);
    writer.deleteAll();
    writer.commit();
    Collection<Note> notes=getAllNotes();
    LOG.info(""String_Node_Str"" + notes.size());
    for (    Note note : notes) {
      if (Thread.interrupted()) {
        writer.close();
        LOG.warning(""String_Node_Str"");
        return;
      }
      LOG.info(""String_Node_Str"" + note);
      Document document=new Document();
      Field idField=new Field(""String_Node_Str"",note.getId().toString(),Field.Store.YES,Field.Index.NOT_ANALYZED);
      document.add(idField);
      Field titleField=new Field(""String_Node_Str"",note.getTitle(),Field.Store.YES,Field.Index.ANALYZED);
      document.add(titleField);
      DocumentFragment node=new HTMLDocumentImpl().createDocumentFragment();
      domParser.parse(new InputSource(new StringReader(note.getContent())),node);
      StringBuffer sb=new StringBuffer();
      sb.setLength(0);
      getText(sb,node);
      String text=sb.toString();
      if ((text != null) && (!text.equals(""String_Node_Str""))) {
        Field contentField=new Field(""String_Node_Str"",text,Field.Store.NO,Field.Index.ANALYZED);
        document.add(titleField);
      }
      writer.addDocument(document);
    }
    writer.commit();
    writer.optimize();
    writer.close();
  }
 catch (  Exception ex) {
    LOG.log(Level.WARNING,""String_Node_Str"",ex);
    Exceptions.printStackTrace(ex);
  }
 finally {
    try {
      if (writer != null) {
        writer.close();
      }
    }
 catch (    Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }
  LOG.info(""String_Node_Str"");
}",0.9862729862729864
2118,"public boolean cancel(){
  return link.get(0).cancel();
}","public boolean cancel(){
  if (link.isEmpty()) {
    return false;
  }
  final boolean cancel=link.get(0).cancel();
  return cancel;
}",0.5968586387434555
2119,"public void actionPerformed(ActionEvent e){
  LOG.info(""String_Node_Str"");
  final NoteFinder noteFinder=Lookup.getDefault().lookup(NoteFinder.class);
  final List<Cancellable> link=new ArrayList<Cancellable>();
  final ProgressHandle myProgressHandle=ProgressHandleFactory.createHandle(""String_Node_Str"",new Cancellable(){
    public boolean cancel(){
      return link.get(0).cancel();
    }
  }
);
  RequestProcessor.Task theTask=RP.create(new Runnable(){
    public void run(){
      myProgressHandle.start();
      noteFinder.rebuildIndex();
      myProgressHandle.finish();
    }
  }
);
  link.add(theTask);
  RP.post(theTask);
}","public void actionPerformed(ActionEvent e){
  LOG.info(""String_Node_Str"");
  final NoteFinder noteFinder=Lookup.getDefault().lookup(NoteFinder.class);
  final List<Cancellable> link=new ArrayList<Cancellable>();
  final ProgressHandle myProgressHandle=ProgressHandleFactory.createHandle(""String_Node_Str"",new Cancellable(){
    public boolean cancel(){
      if (link.isEmpty()) {
        return false;
      }
      final boolean cancel=link.get(0).cancel();
      return cancel;
    }
  }
);
  RequestProcessor.Task theTask=RP.post(new Runnable(){
    public void run(){
      myProgressHandle.start();
      noteFinder.rebuildIndex();
      myProgressHandle.finish();
    }
  }
);
  link.add(theTask);
}",0.8978374347501864
2120,@SqlQuery @Mapper(DefaultMapper.class) StartTimes getLastStartTimes();,@SqlQuery StartTimes getLastStartTimes();,0.7387387387387387
2121,"/** 
 * The sequence of events is: <ul> <li>Build the aggregated TimelineChunk object, and save it, setting not_valid to true, and aggregation_level to 1.  This means that it won't be noticed by any of the dashboard queries.  The save operation returns the new timeline_times_id</li> <li>Then, in a single transaction, update the aggregated TimelineChunk object to have not_valid = 0, and also delete the TimelineChunk objects that were the basis of the aggregation, and flush any TimelineChunks that happen to be in the cache.</li> <p/>
 * @param timelineChunks the TimelineChunks to be aggregated
 */
private void aggregateHostSampleChunks(final List<TimelineChunk> timelineChunks,final int aggregationLevel,final boolean previouslyAggregated) throws IOException {
  final TimelineChunk firstTimesChunk=timelineChunks.get(0);
  final TimelineChunk lastTimesChunk=timelineChunks.get(timelineChunks.size() - 1);
  final int chunkCount=computeChunkCount(timelineChunks.size(),aggregationLevel,previouslyAggregated);
  final int hostId=firstTimesChunk.getHostId();
  final DateTime startTime=firstTimesChunk.getStartTime();
  final DateTime endTime=lastTimesChunk.getEndTime();
  final List<byte[]> timeParts=new ArrayList<byte[]>(chunkCount);
  final List<byte[]> sampleParts=new ArrayList<byte[]>(chunkCount);
  final List<Long> timelineChunkIds=new ArrayList<Long>(chunkCount);
  int sampleCount=0;
  for (  final TimelineChunk timelineChunk : timelineChunks) {
    timeParts.add(timelineChunk.getTimes());
    sampleParts.add(timelineChunk.getSamples());
    sampleCount+=timelineChunk.getSampleCount();
    timelineChunkIds.add(timelineChunk.getObjectId());
  }
  final byte[] combinedTimeBytes=TimelineCoder.combineTimelines(timeParts);
  final byte[] combinedSampleBytes=SampleCoder.combineSampleBytes(sampleParts);
  final int timeBytesLength=combinedTimeBytes.length;
  final int totalSize=4 + timeBytesLength + combinedSampleBytes.length;
  log.debug(""String_Node_Str"",new Object[]{firstTimesChunk.getHostId(),firstTimesChunk.getAggregationLevel(),timelineChunks.size(),totalSize,sampleCount});
  timelineChunksBytesCreated.addAndGet(totalSize);
  final int totalSampleCount=sampleCount;
  final TimelineChunk chunk=new TimelineChunk(0,hostId,firstTimesChunk.getSampleKindId(),startTime,endTime,combinedTimeBytes,combinedSampleBytes,totalSampleCount,aggregationLevel + 1,false,false);
  chunksToWrite.add(chunk);
  chunkIdsToInvalidateOrDelete.addAll(timelineChunkIds);
  timelineChunksQueuedForCreation.incrementAndGet();
  if (chunkIdsToInvalidateOrDelete.size() >= config.getMaxChunkIdsToInvalidateOrDelete()) {
    performWrites();
  }
}","/** 
 * The sequence of events is: <ul> <li>Build the aggregated TimelineChunk object, and save it, setting not_valid to true, and aggregation_level to 1.  This means that it won't be noticed by any of the dashboard queries.  The save operation returns the new timeline_times_id</li> <li>Then, in a single transaction, update the aggregated TimelineChunk object to have not_valid = 0, and also delete the TimelineChunk objects that were the basis of the aggregation, and flush any TimelineChunks that happen to be in the cache.</li> <p/>
 * @param timelineChunks the TimelineChunks to be aggregated
 */
private void aggregateHostSampleChunks(final List<TimelineChunk> timelineChunks,final int aggregationLevel,final boolean previouslyAggregated) throws IOException {
  final TimelineChunk firstTimesChunk=timelineChunks.get(0);
  final TimelineChunk lastTimesChunk=timelineChunks.get(timelineChunks.size() - 1);
  final int chunkCount=computeChunkCount(timelineChunks.size(),aggregationLevel,previouslyAggregated);
  final int hostId=firstTimesChunk.getHostId();
  final DateTime startTime=firstTimesChunk.getStartTime();
  final DateTime endTime=lastTimesChunk.getEndTime();
  final List<byte[]> timeParts=new ArrayList<byte[]>(chunkCount);
  final List<byte[]> sampleParts=new ArrayList<byte[]>(chunkCount);
  final List<Long> timelineChunkIds=new ArrayList<Long>(chunkCount);
  int sampleCount=0;
  for (  final TimelineChunk timelineChunk : timelineChunks) {
    timeParts.add(timelineChunk.getTimes());
    sampleParts.add(timelineChunk.getSamples());
    sampleCount+=timelineChunk.getSampleCount();
    timelineChunkIds.add(timelineChunk.getObjectId());
  }
  final byte[] combinedTimeBytes=TimelineCoder.combineTimelines(timeParts,sampleCount);
  final byte[] combinedSampleBytes=SampleCoder.combineSampleBytes(sampleParts);
  final int timeBytesLength=combinedTimeBytes.length;
  final int totalSize=4 + timeBytesLength + combinedSampleBytes.length;
  log.debug(""String_Node_Str"",new Object[]{firstTimesChunk.getHostId(),firstTimesChunk.getAggregationLevel(),timelineChunks.size(),totalSize,sampleCount});
  timelineChunksBytesCreated.addAndGet(totalSize);
  final int totalSampleCount=sampleCount;
  final TimelineChunk chunk=new TimelineChunk(0,hostId,firstTimesChunk.getSampleKindId(),startTime,endTime,combinedTimeBytes,combinedSampleBytes,totalSampleCount,aggregationLevel + 1,false,false);
  chunksToWrite.add(chunk);
  chunkIdsToInvalidateOrDelete.addAll(timelineChunkIds);
  timelineChunksQueuedForCreation.incrementAndGet();
  if (chunkIdsToInvalidateOrDelete.size() >= config.getMaxChunkIdsToInvalidateOrDelete()) {
    performWrites();
  }
}",0.9977401129943504
2122,"public static byte[] combineTimelines(final List<byte[]> timesList){
  final ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  final DataOutputStream dataStream=new DataOutputStream(outputStream);
  try {
    int lastTime=0;
    int lastDelta=0;
    int repeatCount=0;
    int chunkCounter=0;
    for (    byte[] times : timesList) {
      final ByteArrayInputStream byteStream=new ByteArrayInputStream(times);
      final DataInputStream byteDataStream=new DataInputStream(byteStream);
      int byteCursor=0;
      while (true) {
        final int opcode=byteDataStream.read();
        if (opcode == -1) {
          break;
        }
        byteCursor++;
        int newTime=0;
        int newCount=0;
        int newDelta=0;
        if (opcode == TimelineOpcode.FULL_TIME.getOpcodeIndex()) {
          newTime=byteDataStream.readInt();
          byteCursor+=4;
          if (lastTime == 0) {
            writeTime(0,newTime,dataStream);
            lastTime=newTime;
            lastDelta=0;
            repeatCount=0;
            continue;
          }
 else {
            if (newTime - lastTime <= TimelineOpcode.MAX_DELTA_TIME) {
              newDelta=newTime - lastTime;
              newCount=1;
            }
          }
        }
 else         if (opcode <= TimelineOpcode.MAX_DELTA_TIME) {
          newTime=lastTime + opcode;
          newDelta=opcode;
          newCount=1;
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex()) {
          newCount=byteDataStream.read();
          newDelta=byteDataStream.read();
          byteCursor+=2;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
 else {
            throw new IllegalStateException(String.format(""String_Node_Str"",opcode,byteCursor,chunkCounter,new String(Hex.encodeHex(times))));
          }
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_SHORT.getOpcodeIndex()) {
          newCount=byteDataStream.readUnsignedShort();
          newDelta=byteDataStream.read();
          byteCursor+=3;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
        }
 else {
          throw new IllegalStateException(String.format(""String_Node_Str"",opcode,byteCursor,chunkCounter,new String(Hex.encodeHex(times))));
        }
        if (lastTime == 0) {
          log.error(""String_Node_Str"",byteCursor,chunkCounter,new String(Hex.encodeHex(times)));
        }
 else         if (repeatCount > 0) {
          if (lastDelta == newDelta) {
            if (newCount > 0) {
              repeatCount+=newCount;
              lastTime=newTime;
            }
 else {
              repeatCount++;
              lastTime+=lastDelta;
            }
          }
 else {
            writeRepeatedDelta(lastDelta,repeatCount,dataStream);
            if (newDelta > 0) {
              lastDelta=newDelta;
              repeatCount=newCount;
              lastTime=newTime;
            }
 else {
              writeTime(lastTime,newTime,dataStream);
              lastTime=newTime;
              lastDelta=0;
              repeatCount=0;
            }
          }
        }
 else         if (lastDelta == 0) {
          lastTime=newTime;
          repeatCount=newCount;
          lastDelta=newDelta;
        }
      }
      chunkCounter++;
    }
    if (repeatCount > 0) {
      writeRepeatedDelta(lastDelta,repeatCount,dataStream);
    }
    dataStream.flush();
    return outputStream.toByteArray();
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"");
    return new byte[0];
  }
}","public static byte[] combineTimelines(final List<byte[]> timesList){
  final ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  final DataOutputStream dataStream=new DataOutputStream(outputStream);
  try {
    int lastTime=0;
    int lastDelta=0;
    int repeatCount=0;
    int chunkCounter=0;
    for (    byte[] times : timesList) {
      final ByteArrayInputStream byteStream=new ByteArrayInputStream(times);
      final DataInputStream byteDataStream=new DataInputStream(byteStream);
      int byteCursor=0;
      while (true) {
        final int opcode=byteDataStream.read();
        if (opcode == -1) {
          break;
        }
        byteCursor++;
        int newTime=0;
        int newCount=0;
        int newDelta=0;
        if (opcode == TimelineOpcode.FULL_TIME.getOpcodeIndex()) {
          newTime=byteDataStream.readInt();
          newDelta=0;
          newCount=0;
          byteCursor+=4;
          if (lastTime == 0) {
            writeTime(0,newTime,dataStream);
            lastTime=newTime;
            lastDelta=0;
            repeatCount=0;
            continue;
          }
 else           if (newTime - lastTime <= TimelineOpcode.MAX_DELTA_TIME) {
            newDelta=newTime - lastTime;
            newCount=1;
          }
        }
 else         if (opcode <= TimelineOpcode.MAX_DELTA_TIME) {
          newTime=lastTime + opcode;
          newDelta=opcode;
          newCount=1;
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex()) {
          newCount=byteDataStream.read();
          newDelta=byteDataStream.read();
          byteCursor+=2;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
 else {
            throw new IllegalStateException(String.format(""String_Node_Str"",opcode,byteCursor,chunkCounter,new String(Hex.encodeHex(times))));
          }
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_SHORT.getOpcodeIndex()) {
          newCount=byteDataStream.readUnsignedShort();
          newDelta=byteDataStream.read();
          byteCursor+=3;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
        }
 else {
          throw new IllegalStateException(String.format(""String_Node_Str"",opcode,byteCursor,chunkCounter,new String(Hex.encodeHex(times))));
        }
        if (lastTime == 0) {
          log.error(""String_Node_Str"",byteCursor,chunkCounter,new String(Hex.encodeHex(times)));
        }
 else         if (repeatCount > 0) {
          if (lastDelta == newDelta && newCount > 0) {
            repeatCount+=newCount;
            lastTime=newTime;
          }
 else {
            writeRepeatedDelta(lastDelta,repeatCount,dataStream);
            if (newDelta > 0) {
              lastDelta=newDelta;
              repeatCount=newCount;
              lastTime=newTime;
            }
 else {
              writeTime(lastTime,newTime,dataStream);
              lastTime=newTime;
              lastDelta=0;
              repeatCount=0;
            }
          }
        }
 else         if (lastDelta == 0) {
          lastTime=newTime;
          repeatCount=newCount;
          lastDelta=newDelta;
        }
      }
      chunkCounter++;
    }
    if (repeatCount > 0) {
      writeRepeatedDelta(lastDelta,repeatCount,dataStream);
    }
    dataStream.flush();
    return outputStream.toByteArray();
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"");
    return new byte[0];
  }
}",0.9575723517842092
2123,"private static void writeTime(final int lastTime,final int newTime,final DataOutputStream dataStream) throws IOException {
  if (newTime > lastTime) {
    final int delta=(newTime - lastTime);
    if (delta <= TimelineOpcode.MAX_DELTA_TIME) {
      dataStream.writeByte(delta);
    }
 else {
      dataStream.writeByte(TimelineOpcode.FULL_TIME.getOpcodeIndex());
      dataStream.writeInt(newTime);
    }
  }
}","private static void writeTime(final int lastTime,final int newTime,final DataOutputStream dataStream) throws IOException {
  if (newTime > lastTime) {
    final int delta=(newTime - lastTime);
    if (delta <= TimelineOpcode.MAX_DELTA_TIME) {
      dataStream.writeByte(delta);
    }
 else {
      dataStream.writeByte(TimelineOpcode.FULL_TIME.getOpcodeIndex());
      dataStream.writeInt(newTime);
    }
  }
 else   if (newTime == lastTime) {
    dataStream.writeByte(0);
  }
}",0.9234234234234234
2124,"@Test(groups=""String_Node_Str"") public void testCombiningTimelinesByteRepeats() throws Exception {
  final int firstTime=1293846;
  final int[] unencodedTimes1=new int[10];
  final int[] unencodedTimes2=new int[10];
  for (int i=0; i < 10; i++) {
    unencodedTimes1[i]=firstTime + i * 100;
    unencodedTimes2[i]=firstTime + 10 * 100 + i * 100;
  }
  final byte[] compressedTimes1=TimelineCoder.compressTimes(unencodedTimes1);
  final byte[] compressedTimes2=TimelineCoder.compressTimes(unencodedTimes2);
  Assert.assertEquals(compressedTimes1.length,8);
  Assert.assertEquals(compressedTimes1[0] & 0xff,TimelineOpcode.FULL_TIME.getOpcodeIndex());
  Assert.assertEquals(compressedTimes1[5] & 0xff,TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex());
  Assert.assertEquals(compressedTimes1[6] & 0xff,9);
  Assert.assertEquals(compressedTimes1[7] & 0xff,100);
  Assert.assertEquals(compressedTimes2.length,8);
  Assert.assertEquals(compressedTimes2[0] & 0xff,TimelineOpcode.FULL_TIME.getOpcodeIndex());
  Assert.assertEquals(compressedTimes2[5] & 0xff,TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex());
  Assert.assertEquals(compressedTimes2[6] & 0xff,9);
  Assert.assertEquals(compressedTimes2[7] & 0xff,100);
  final List<byte[]> timesList=new ArrayList<byte[]>();
  timesList.add(compressedTimes1);
  timesList.add(compressedTimes2);
  final byte[] combinedTimes=TimelineCoder.combineTimelines(timesList);
  Assert.assertEquals(combinedTimes.length,8);
  Assert.assertEquals(combinedTimes[0] & 0xff,TimelineOpcode.FULL_TIME.getOpcodeIndex());
  Assert.assertEquals(combinedTimes[5] & 0xff,TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex());
  Assert.assertEquals(combinedTimes[6] & 0xff,19);
  Assert.assertEquals(combinedTimes[7] & 0xff,100);
  Assert.assertEquals(combinedTimes[6],19);
}","@Test(groups=""String_Node_Str"") public void testCombiningTimelinesByteRepeats() throws Exception {
  final int firstTime=1293846;
  final int[] unencodedTimes1=new int[10];
  final int[] unencodedTimes2=new int[10];
  for (int i=0; i < 10; i++) {
    unencodedTimes1[i]=firstTime + i * 100;
    unencodedTimes2[i]=firstTime + 10 * 100 + i * 100;
  }
  final byte[] compressedTimes1=TimelineCoder.compressTimes(unencodedTimes1);
  final byte[] compressedTimes2=TimelineCoder.compressTimes(unencodedTimes2);
  Assert.assertEquals(compressedTimes1.length,8);
  Assert.assertEquals(compressedTimes1[0] & 0xff,TimelineOpcode.FULL_TIME.getOpcodeIndex());
  Assert.assertEquals(compressedTimes1[5] & 0xff,TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex());
  Assert.assertEquals(compressedTimes1[6] & 0xff,9);
  Assert.assertEquals(compressedTimes1[7] & 0xff,100);
  Assert.assertEquals(compressedTimes2.length,8);
  Assert.assertEquals(compressedTimes2[0] & 0xff,TimelineOpcode.FULL_TIME.getOpcodeIndex());
  Assert.assertEquals(compressedTimes2[5] & 0xff,TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex());
  Assert.assertEquals(compressedTimes2[6] & 0xff,9);
  Assert.assertEquals(compressedTimes2[7] & 0xff,100);
  final List<byte[]> timesList=new ArrayList<byte[]>();
  timesList.add(compressedTimes1);
  timesList.add(compressedTimes2);
  final byte[] combinedTimes=TimelineCoder.combineTimelines(timesList);
  Assert.assertEquals(combinedTimes.length,8);
  Assert.assertEquals(combinedTimes[0] & 0xff,TimelineOpcode.FULL_TIME.getOpcodeIndex());
  Assert.assertEquals(combinedTimes[5] & 0xff,TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex());
  Assert.assertEquals(combinedTimes[6] & 0xff,19);
  Assert.assertEquals(combinedTimes[7] & 0xff,100);
  Assert.assertEquals(combinedTimes[6],19);
  Assert.assertEquals(TimelineCoder.countTimeBytesSamples(combinedTimes),20);
}",0.9789303079416533
2125,"public static byte[] combineTimelines(final List<byte[]> timesList){
  final ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  final DataOutputStream dataStream=new DataOutputStream(outputStream);
  try {
    int lastTime=0;
    int lastDelta=0;
    int repeatCount=0;
    int chunkCounter=0;
    for (    byte[] times : timesList) {
      final ByteArrayInputStream byteStream=new ByteArrayInputStream(times);
      final DataInputStream byteDataStream=new DataInputStream(byteStream);
      int byteCursor=0;
      while (true) {
        final int opcode=byteDataStream.read();
        if (opcode == -1) {
          break;
        }
        byteCursor++;
        int newTime=0;
        int newCount=0;
        int newDelta=0;
        if (opcode == TimelineOpcode.FULL_TIME.getOpcodeIndex()) {
          newTime=byteDataStream.readInt();
          byteCursor+=4;
          if (lastTime == 0) {
            writeTime(0,newTime,dataStream);
            lastTime=newTime;
            lastDelta=0;
            repeatCount=0;
            continue;
          }
 else {
            newDelta=lastTime != 0 ? newTime - lastTime : 0;
            newCount=1;
          }
        }
 else         if (opcode <= TimelineOpcode.MAX_DELTA_TIME) {
          newTime=lastTime + opcode;
          newDelta=opcode;
          newCount=1;
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex()) {
          newCount=byteDataStream.read();
          newDelta=byteDataStream.read();
          byteCursor+=2;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
 else {
            throw new IllegalStateException(String.format(""String_Node_Str"",opcode,byteCursor,chunkCounter,new String(Hex.encodeHex(times))));
          }
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_SHORT.getOpcodeIndex()) {
          newCount=byteDataStream.readUnsignedShort();
          newDelta=byteDataStream.read();
          byteCursor+=3;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
        }
        if (lastTime == 0) {
          log.error(""String_Node_Str"",byteCursor,chunkCounter,new String(Hex.encodeHex(times)));
        }
 else         if (repeatCount > 0) {
          if (lastDelta == newDelta) {
            if (newCount > 0) {
              repeatCount+=newCount;
              lastTime=newTime;
            }
 else {
              repeatCount++;
              lastTime+=lastDelta;
            }
          }
 else {
            writeRepeatedDelta(lastDelta,repeatCount,dataStream);
            lastDelta=newDelta;
            repeatCount=newCount;
            lastTime=newTime;
          }
        }
 else         if (lastDelta == 0) {
          lastTime=newTime;
          repeatCount=newCount;
          lastDelta=newDelta;
        }
      }
      chunkCounter++;
    }
    if (repeatCount > 0) {
      writeRepeatedDelta(lastDelta,repeatCount,dataStream);
    }
    dataStream.flush();
    return outputStream.toByteArray();
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"");
    return new byte[0];
  }
}","public static byte[] combineTimelines(final List<byte[]> timesList){
  final ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  final DataOutputStream dataStream=new DataOutputStream(outputStream);
  try {
    int lastTime=0;
    int lastDelta=0;
    int repeatCount=0;
    int chunkCounter=0;
    for (    byte[] times : timesList) {
      final ByteArrayInputStream byteStream=new ByteArrayInputStream(times);
      final DataInputStream byteDataStream=new DataInputStream(byteStream);
      int byteCursor=0;
      while (true) {
        final int opcode=byteDataStream.read();
        if (opcode == -1) {
          break;
        }
        byteCursor++;
        int newTime=0;
        int newCount=0;
        int newDelta=0;
        if (opcode == TimelineOpcode.FULL_TIME.getOpcodeIndex()) {
          newTime=byteDataStream.readInt();
          byteCursor+=4;
          if (lastTime == 0) {
            writeTime(0,newTime,dataStream);
            lastTime=newTime;
            lastDelta=0;
            repeatCount=0;
            continue;
          }
 else {
            if (newTime - lastTime <= TimelineOpcode.MAX_DELTA_TIME) {
              newDelta=newTime - lastTime;
              newCount=1;
            }
          }
        }
 else         if (opcode <= TimelineOpcode.MAX_DELTA_TIME) {
          newTime=lastTime + opcode;
          newDelta=opcode;
          newCount=1;
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex()) {
          newCount=byteDataStream.read();
          newDelta=byteDataStream.read();
          byteCursor+=2;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
 else {
            throw new IllegalStateException(String.format(""String_Node_Str"",opcode,byteCursor,chunkCounter,new String(Hex.encodeHex(times))));
          }
        }
 else         if (opcode == TimelineOpcode.REPEATED_DELTA_TIME_SHORT.getOpcodeIndex()) {
          newCount=byteDataStream.readUnsignedShort();
          newDelta=byteDataStream.read();
          byteCursor+=3;
          if (lastTime != 0) {
            newTime=lastTime + newDelta * newCount;
          }
        }
 else {
          throw new IllegalStateException(String.format(""String_Node_Str"",opcode,byteCursor,chunkCounter,new String(Hex.encodeHex(times))));
        }
        if (lastTime == 0) {
          log.error(""String_Node_Str"",byteCursor,chunkCounter,new String(Hex.encodeHex(times)));
        }
 else         if (repeatCount > 0) {
          if (lastDelta == newDelta) {
            if (newCount > 0) {
              repeatCount+=newCount;
              lastTime=newTime;
            }
 else {
              repeatCount++;
              lastTime+=lastDelta;
            }
          }
 else {
            writeRepeatedDelta(lastDelta,repeatCount,dataStream);
            if (newDelta > 0) {
              lastDelta=newDelta;
              repeatCount=newCount;
              lastTime=newTime;
            }
 else {
              writeTime(lastTime,newTime,dataStream);
              lastTime=newTime;
              lastDelta=0;
              repeatCount=0;
            }
          }
        }
 else         if (lastDelta == 0) {
          lastTime=newTime;
          repeatCount=newCount;
          lastDelta=newDelta;
        }
      }
      chunkCounter++;
    }
    if (repeatCount > 0) {
      writeRepeatedDelta(lastDelta,repeatCount,dataStream);
    }
    dataStream.flush();
    return outputStream.toByteArray();
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"");
    return new byte[0];
  }
}",0.9146485528647372
2126,"protected void configureBackgroundDBChunkWriter(){
  final LifecycledProvider<BackgroundDBChunkWriter> lifecycledProvider=new LifecycledProvider<BackgroundDBChunkWriter>(binder(),BackgroundDBChunkWriter.class);
  lifecycledProvider.addListener(LifecycleEvent.START,new LifecycleAction<BackgroundDBChunkWriter>(){
    public void doAction(    final BackgroundDBChunkWriter backgroundWriter){
      log.info(""String_Node_Str"");
      backgroundWriter.runBackgroundWriteThread();
    }
  }
);
  lifecycledProvider.addListener(LifecycleEvent.STOP,new LifecycleAction<BackgroundDBChunkWriter>(){
    public void doAction(    final BackgroundDBChunkWriter backgroundWriter){
      log.info(""String_Node_Str"");
      backgroundWriter.stopBackgroundWriteThread();
    }
  }
);
  bind(BackgroundDBChunkWriter.class).toProvider(lifecycledProvider).asEagerSingleton();
  final ExportBuilder builder=MBeanModule.newExporter(binder());
  builder.export(BackgroundDBChunkWriter.class).withGeneratedName();
}","protected void configureBackgroundDBChunkWriter(){
  final LifecycledProvider<BackgroundDBChunkWriter> lifecycledProvider=new LifecycledProvider<BackgroundDBChunkWriter>(binder(),BackgroundDBChunkWriter.class);
  lifecycledProvider.addListener(LifecycleEvent.START,new LifecycleAction<BackgroundDBChunkWriter>(){
    public void doAction(    final BackgroundDBChunkWriter backgroundWriter){
      log.info(""String_Node_Str"");
      backgroundWriter.runBackgroundWriteThread();
    }
  }
);
  bind(BackgroundDBChunkWriter.class).toProvider(lifecycledProvider).asEagerSingleton();
  final ExportBuilder builder=MBeanModule.newExporter(binder());
  builder.export(BackgroundDBChunkWriter.class).withGeneratedName();
}",0.836555360281195
2127,"public void stopBackgroundWriteThread(){
  if (!performForegroundWrites) {
    finishBackgroundWritingAndExit.set(true);
    backgroundWriteThread.shutdown();
  }
}","public void stopBackgroundWriteThread(){
  if (!performForegroundWrites) {
    backgroundWriteThread.shutdown();
  }
}",0.8368794326241135
2128,"public synchronized void addPendingChunkMap(final PendingChunkMap chunkMap){
  if (finishBackgroundWritingAndExit.get()) {
    log.error(""String_Node_Str"");
  }
 else {
    if (performForegroundWrites) {
      foregroundChunkMapsWritten.inc();
      final List<TimelineChunk> chunksToWrite=new ArrayList<TimelineChunk>(chunkMap.getChunkMap().values());
      foregroundChunksWritten.inc(chunksToWrite.size());
      timelineDAO.bulkInsertTimelineChunks(chunksToWrite);
      chunkMap.getAccumulator().markPendingChunkMapConsumed(chunkMap.getPendingChunkMapId());
    }
 else {
      pendingChunkMapsAdded.inc();
      final int chunkCount=chunkMap.getChunkCount();
      pendingChunksAdded.inc(chunkCount);
      pendingChunks.add(chunkMap);
      pendingChunkCount.addAndGet(chunkCount);
    }
  }
}","public synchronized void addPendingChunkMap(final PendingChunkMap chunkMap){
  if (shuttingDown.get()) {
    log.error(""String_Node_Str"");
  }
 else {
    if (performForegroundWrites) {
      foregroundChunkMapsWritten.inc();
      final List<TimelineChunk> chunksToWrite=new ArrayList<TimelineChunk>(chunkMap.getChunkMap().values());
      foregroundChunksWritten.inc(chunksToWrite.size());
      timelineDAO.bulkInsertTimelineChunks(chunksToWrite);
      chunkMap.getAccumulator().markPendingChunkMapConsumed(chunkMap.getPendingChunkMapId());
    }
 else {
      pendingChunkMapsAdded.inc();
      final int chunkCount=chunkMap.getChunkCount();
      pendingChunksAdded.inc(chunkCount);
      pendingChunks.add(chunkMap);
      pendingChunkCount.addAndGet(chunkCount);
    }
  }
}",0.9734513274336284
2129,"private CounterMetric makeCounter(final String counterName){
  final CounterMetric counter=Metrics.newCounter(TimelineAggregator.class,counterName);
  backgroundWriteCounters.put(counterName,counter);
  return counter;
}","private CounterMetric makeCounter(final String counterName){
  final CounterMetric counter=Metrics.newCounter(BackgroundDBChunkWriter.class,counterName);
  backgroundWriteCounters.put(counterName,counter);
  return counter;
}",0.9168539325842696
2130,"private void maybePerformBackgroundWrites(){
  maybePerformBackgroundWritesCount.inc();
  if (!doingWritesNow.compareAndSet(false,true)) {
    return;
  }
 else {
    try {
      if (finishBackgroundWritingAndExit.get()) {
        performBackgroundWrites();
      }
      final int pendingCount=pendingChunkCount.get();
      if (pendingCount > 0) {
        if (pendingCount >= config.getBackgroundWriteBatchSize() || new DateTime().isBefore(lastWriteTime.plusMillis((int)config.getBackgroundWriteMaxDelay().getMillis()))) {
          performBackgroundWrites();
          lastWriteTime=new DateTime();
        }
      }
    }
  finally {
      doingWritesNow.set(false);
    }
  }
}","private void maybePerformBackgroundWrites(){
  maybePerformBackgroundWritesCount.inc();
  if (!doingWritesNow.compareAndSet(false,true)) {
    return;
  }
 else {
    try {
      if (shuttingDown.get()) {
        performBackgroundWrites();
      }
      final int pendingCount=pendingChunkCount.get();
      if (pendingCount > 0) {
        if (pendingCount >= config.getBackgroundWriteBatchSize() || new DateTime().isBefore(lastWriteTime.plusMillis((int)config.getBackgroundWriteMaxDelay().getMillis()))) {
          performBackgroundWrites();
          lastWriteTime=new DateTime();
        }
      }
    }
  finally {
      doingWritesNow.set(false);
    }
  }
}",0.9717682020802376
2131,"/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  final String[] chunkCountsToAggregate=config.getChunksToAggregate().split(""String_Node_Str"");
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel(); aggregationLevel++) {
    final Map<String,Long> initialCounters=captureAggregatorCounters();
    final int chunkCountIndex=aggregationLevel >= chunkCountsToAggregate.length ? chunkCountsToAggregate.length - 1 : aggregationLevel;
    final int chunksToAggregate=Integer.parseInt(chunkCountsToAggregate[chunkCountIndex]);
    final List<TimelineChunk> timelineChunkCandidates=aggregatorDao.getTimelineAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    int lastSampleKindId=0;
    final List<TimelineChunk> hostTimelineCandidates=new ArrayList<TimelineChunk>();
    for (    final TimelineChunk candidate : timelineChunkCandidates) {
      timelineChunksConsidered.inc();
      final int hostId=candidate.getHostId();
      final int sampleKindId=candidate.getSampleKindId();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastSampleKindId=sampleKindId;
      }
      if (lastHostId != hostId || lastSampleKindId != sampleKindId) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
        lastSampleKindId=sampleKindId;
      }
      hostTimelineCandidates.add(candidate);
    }
    if (hostTimelineCandidates.size() > 0) {
      aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
    }
    final Map<String,Long> counterDeltas=subtrackFromAggregatorCounters(initialCounters);
    final StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"").append(aggregationLevel);
    for (    Map.Entry<String,Long> entry : counterDeltas.entrySet()) {
      builder.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue());
    }
    log.info(builder.toString());
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}","/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  final String[] chunkCountsToAggregate=config.getChunksToAggregate().split(""String_Node_Str"");
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel(); aggregationLevel++) {
    final Map<String,Long> initialCounters=captureAggregatorCounters();
    final int chunkCountIndex=aggregationLevel >= chunkCountsToAggregate.length ? chunkCountsToAggregate.length - 1 : aggregationLevel;
    final int chunksToAggregate=Integer.parseInt(chunkCountsToAggregate[chunkCountIndex]);
    final List<TimelineChunk> timelineChunkCandidates=aggregatorDao.getTimelineAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    int lastSampleKindId=0;
    final List<TimelineChunk> hostTimelineCandidates=new ArrayList<TimelineChunk>();
    for (    final TimelineChunk candidate : timelineChunkCandidates) {
      timelineChunksConsidered.inc();
      final int hostId=candidate.getHostId();
      final int sampleKindId=candidate.getSampleKindId();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastSampleKindId=sampleKindId;
      }
      if (lastHostId != hostId || lastSampleKindId != sampleKindId) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
        lastSampleKindId=sampleKindId;
      }
      hostTimelineCandidates.add(candidate);
    }
    if (hostTimelineCandidates.size() > 0) {
      aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
    }
    final Map<String,Long> counterDeltas=subtractFromAggregatorCounters(initialCounters);
    final StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"").append(aggregationLevel);
    for (    Map.Entry<String,Long> entry : counterDeltas.entrySet()) {
      builder.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue());
    }
    log.info(builder.toString());
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}",0.9995814148179154
2132,"public Collection<? extends TimelineChunk> getInMemoryTimelineChunks(final Integer hostId,final List<Integer> sampleKindIds,@Nullable final DateTime filterStartTime,@Nullable final DateTime filterEndTime) throws IOException, ExecutionException {
  getInMemoryChunksCallCount.inc();
  final Map<Integer,TimelineHostEventAccumulator> hostAccumulators=accumulators.get(hostId);
  if (hostAccumulators == null) {
    return ImmutableList.of();
  }
  final List<TimelineChunk> samplesByHostName=new ArrayList<TimelineChunk>();
  for (  final TimelineHostEventAccumulator accumulator : hostAccumulators.values()) {
    for (    TimelineChunk chunk : accumulator.getPendingTimelineChunks()) {
      if ((filterStartTime != null && chunk.getEndTime().isBefore(filterStartTime)) || (filterStartTime != null && chunk.getStartTime().isAfter(filterEndTime))) {
        continue;
      }
 else {
        samplesByHostName.add(chunk);
      }
    }
    final List<DateTime> accumulatorTimes=accumulator.getTimes();
    if (accumulatorTimes.size() == 0) {
      continue;
    }
    final DateTime accumulatorStartTime=accumulator.getStartTime();
    final DateTime accumulatorEndTime=accumulator.getEndTime();
    if ((filterStartTime != null && accumulatorEndTime.isBefore(filterStartTime)) || (filterStartTime != null && accumulatorStartTime.isAfter(filterEndTime))) {
      continue;
    }
    for (    final TimelineChunkAccumulator chunkAccumulator : accumulator.getTimelines().values()) {
      accumulatorDeepCopyCount.inc();
      final TimelineChunkAccumulator chunkAccumulatorCopy=chunkAccumulator.deepCopy();
      final TimelineChunk timelineChunk=chunkAccumulatorCopy.extractTimelineChunkAndReset(accumulatorStartTime,accumulatorEndTime,accumulatorTimes);
      if (!sampleKindIds.contains(timelineChunk.getSampleKindId())) {
        continue;
      }
      samplesByHostName.add(timelineChunk);
    }
  }
  inMemoryChunksReturnedCount.inc(samplesByHostName.size());
  return samplesByHostName;
}","public Collection<? extends TimelineChunk> getInMemoryTimelineChunks(final Integer hostId,final List<Integer> sampleKindIds,@Nullable final DateTime filterStartTime,@Nullable final DateTime filterEndTime) throws IOException, ExecutionException {
  getInMemoryChunksCallCount.inc();
  final Map<Integer,TimelineHostEventAccumulator> hostAccumulators=accumulators.get(hostId);
  if (hostAccumulators == null) {
    return ImmutableList.of();
  }
  final List<TimelineChunk> samplesByHostName=new ArrayList<TimelineChunk>();
  for (  final TimelineHostEventAccumulator accumulator : hostAccumulators.values()) {
    for (    TimelineChunk chunk : accumulator.getPendingTimelineChunks()) {
      if ((filterStartTime != null && chunk.getEndTime().isBefore(filterStartTime)) || (filterStartTime != null && chunk.getStartTime().isAfter(filterEndTime))) {
        continue;
      }
 else {
        samplesByHostName.add(chunk);
      }
    }
    final List<DateTime> accumulatorTimes=accumulator.getTimes();
    if (accumulatorTimes.size() == 0) {
      continue;
    }
    final DateTime accumulatorStartTime=accumulator.getStartTime();
    final DateTime accumulatorEndTime=accumulator.getEndTime();
    if ((filterStartTime != null && accumulatorEndTime.isBefore(filterStartTime)) || (filterStartTime != null && accumulatorStartTime.isAfter(filterEndTime))) {
      continue;
    }
    for (    final TimelineChunkAccumulator chunkAccumulator : accumulator.getTimelines().values()) {
      accumulatorDeepCopyCount.inc();
      final TimelineChunkAccumulator chunkAccumulatorCopy=chunkAccumulator.deepCopy();
      final TimelineChunk timelineChunk=chunkAccumulatorCopy.extractTimelineChunkAndReset(accumulatorStartTime,accumulatorEndTime,accumulatorTimes);
      if (!sampleKindIds.contains(timelineChunk.getSampleKindId())) {
        continue;
      }
      samplesByHostName.add(timelineChunk);
    }
  }
  inMemoryChunksReturnedCount.inc(samplesByHostName.size());
  Collections.sort(samplesByHostName,CHUNK_COMPARATOR);
  return samplesByHostName;
}",0.9826904055390704
2133,"@Override public void handle(final Event event){
  try {
    handledEventCount.inc();
    final String hostName=EventsUtils.getHostNameFromEvent(event);
    final Integer hostId=timelineDAO.getOrAddHost(hostName);
    final Map<String,Object> samples=EventsUtils.getSamplesFromEvent(event);
    final Map<Integer,ScalarSample> scalarSamples=new LinkedHashMap<Integer,ScalarSample>();
    convertSamplesToScalarSamples(hostId,event.getEventType(),samples,scalarSamples);
    if (scalarSamples.isEmpty()) {
      eventsDiscarded.incrementAndGet();
      log.warn(""String_Node_Str"" + event);
      return;
    }
    final HostSamplesForTimestamp hostSamples=new HostSamplesForTimestamp(hostId,event.getEventType(),new DateTime(event.getTimestamp(),DateTimeZone.UTC),scalarSamples);
    backingBuffer.append(hostSamples);
    processSamples(hostSamples);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public void handle(final Event event){
  if (shuttingDown.get()) {
    eventsReceivedAfterShuttingDown.inc();
    return;
  }
  try {
    handledEventCount.inc();
    final String hostName=EventsUtils.getHostNameFromEvent(event);
    final Integer hostId=timelineDAO.getOrAddHost(hostName);
    final Map<String,Object> samples=EventsUtils.getSamplesFromEvent(event);
    final Map<Integer,ScalarSample> scalarSamples=new LinkedHashMap<Integer,ScalarSample>();
    convertSamplesToScalarSamples(hostId,event.getEventType(),samples,scalarSamples);
    if (scalarSamples.isEmpty()) {
      eventsDiscarded.incrementAndGet();
      log.warn(""String_Node_Str"" + event);
      return;
    }
    final HostSamplesForTimestamp hostSamples=new HostSamplesForTimestamp(hostId,event.getEventType(),new DateTime(event.getTimestamp(),DateTimeZone.UTC),scalarSamples);
    backingBuffer.append(hostSamples);
    processSamples(hostSamples);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9548521017125065
2134,"@Inject public TimelineEventHandler(final CollectorConfig config,final TimelineDAO timelineDAO,final BackgroundDBChunkWriter backgroundWriter,final FileBackedBuffer fileBackedBuffer){
  this.config=config;
  this.timelineDAO=timelineDAO;
  this.backgroundWriter=backgroundWriter;
  this.backingBuffer=fileBackedBuffer;
  this.shutdownSaveMode=ShutdownSaveMode.fromString(config.getShutdownSaveMode());
  this.fastShutdown=new AtomicBoolean(false);
}","@Inject public TimelineEventHandler(final CollectorConfig config,final TimelineDAO timelineDAO,final BackgroundDBChunkWriter backgroundWriter,final FileBackedBuffer fileBackedBuffer){
  this.config=config;
  this.timelineDAO=timelineDAO;
  this.backgroundWriter=backgroundWriter;
  this.backingBuffer=fileBackedBuffer;
  this.shutdownSaveMode=ShutdownSaveMode.fromString(config.getShutdownSaveMode());
}",0.9460093896713616
2135,"private void saveAccumulatorsOrStartTimes(){
  for (  Map.Entry<Integer,Map<Integer,TimelineHostEventAccumulator>> entry : accumulators.entrySet()) {
    final int hostId=entry.getKey();
    final Map<Integer,TimelineHostEventAccumulator> hostAccumulators=entry.getValue();
    for (    Map.Entry<Integer,TimelineHostEventAccumulator> accumulatorEntry : hostAccumulators.entrySet()) {
      final int categoryId=accumulatorEntry.getKey();
      final TimelineHostEventAccumulator accumulator=accumulatorEntry.getValue();
      if (fastShutdown.get()) {
        log.debug(""String_Node_Str"",hostId,categoryId);
        startTimesReference.get().addTime(hostId,categoryId,accumulator.getStartTime());
      }
 else {
        log.debug(""String_Node_Str"",hostId,categoryId);
        accumulator.extractAndQueueTimelineChunks();
      }
    }
  }
}","private void saveAccumulatorsOrStartTimes(){
  for (  Map.Entry<Integer,Map<Integer,TimelineHostEventAccumulator>> entry : accumulators.entrySet()) {
    final int hostId=entry.getKey();
    final Map<Integer,TimelineHostEventAccumulator> hostAccumulators=entry.getValue();
    for (    Map.Entry<Integer,TimelineHostEventAccumulator> accumulatorEntry : hostAccumulators.entrySet()) {
      final int categoryId=accumulatorEntry.getKey();
      final TimelineHostEventAccumulator accumulator=accumulatorEntry.getValue();
      if (fastShutdown.get()) {
        log.debug(""String_Node_Str"",hostId,categoryId);
        startTimes.addTime(hostId,categoryId,accumulator.getStartTime());
      }
 else {
        log.debug(""String_Node_Str"",hostId,categoryId);
        accumulator.extractAndQueueTimelineChunks();
      }
    }
  }
}",0.9910125823846616
2136,"@Managed public void forceCommit(final boolean shutdown){
  forceCommitCallCount.inc();
  final boolean doingFastShutdown=shutdown && shutdownSaveMode == ShutdownSaveMode.SAVE_START_TIMES;
  fastShutdown.set(doingFastShutdown);
  StartTimes startTimes=null;
  if (doingFastShutdown) {
    startTimes=shutdownSaveMode == ShutdownSaveMode.SAVE_START_TIMES ? new StartTimes() : null;
    startTimesReference.set(startTimes);
    saveAccumulatorsOrStartTimes();
    timelineDAO.insertLastStartTimes(startTimes);
  }
 else {
    startTimesReference.set(null);
    saveAccumulatorsOrStartTimes();
  }
  backingBuffer.discard();
  log.info(doingFastShutdown ? ""String_Node_Str"" : ""String_Node_Str"");
}","@Managed public void forceCommit(final boolean shutdown){
  if (shutdown) {
    shuttingDown.set(true);
  }
  forceCommitCallCount.inc();
  final boolean doingFastShutdown=shutdown && shutdownSaveMode == ShutdownSaveMode.SAVE_START_TIMES;
  fastShutdown.set(doingFastShutdown);
  if (doingFastShutdown) {
    startTimes=shutdownSaveMode == ShutdownSaveMode.SAVE_START_TIMES ? new StartTimes() : null;
    saveAccumulatorsOrStartTimes();
    timelineDAO.insertLastStartTimes(startTimes);
  }
 else {
    startTimes=null;
    saveAccumulatorsOrStartTimes();
  }
  if (shutdown) {
    backgroundWriter.initiateShutdown();
    while (!backgroundWriter.getShutdownFinished()) {
      try {
        Thread.currentThread().sleep(100);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
  backingBuffer.discard();
  log.info(doingFastShutdown ? ""String_Node_Str"" : ""String_Node_Str"");
}",0.7406499080318822
2137,"@Test(groups=""String_Node_Str"") public void testJsonClientIntegration() throws Exception {
  final RESTEventService service=createService(new JsonEventSerializer());
  Assert.assertEquals(processor.getEventsReceived(),0);
  Assert.assertEquals(timelineEventHandler.getEventsDiscarded(),0);
  final UUID hostUUID=UUID.randomUUID();
  final String hostName=hostUUID.toString();
  final int eventTypeId=timelineDAO.getOrAddEventCategory(EVENT_TYPE);
  final Integer hostId=timelineDAO.getOrAddHost(hostName);
  Assert.assertNotNull(hostId);
  final Integer minHeapUserKindId=timelineDAO.getOrAddSampleKind(hostId,eventTypeId,MIN_HEAPUSED_KIND);
  Assert.assertNotNull(minHeapUserKindId);
  final Integer maxHeapUserKindId=timelineDAO.getOrAddSampleKind(hostId,eventTypeId,MAX_HEAPUSED_KIND);
  Assert.assertNotNull(maxHeapUserKindId);
  final DateTime startTime=new DateTime(DateTimeZone.UTC);
  DateTime endTime=startTime;
  final int sampleCount=10;
  for (int i=0; i < sampleCount; i++) {
    endTime=startTime.plusMinutes(i);
    final MapEvent event=createEvent(hostUUID,endTime.getMillis());
    service.sendREST(event);
    Assert.assertEquals(processor.getEventsReceived(),1 + i);
    Assert.assertEquals(timelineEventHandler.getEventsDiscarded(),0);
    Assert.assertEquals(timelineEventHandler.getAccumulators().size(),1);
    final BiMap<Integer,String> hosts=timelineDAO.getHosts();
    Assert.assertEquals(hosts.values().size(),1);
    Assert.assertEquals(hosts.values().toArray()[0],hostName);
    final BiMap<Integer,CategoryIdAndSampleKind> categoryIdsAndSampleKinds=timelineDAO.getSampleKinds();
    Assert.assertEquals(categoryIdsAndSampleKinds.values().size(),event.getKeys().size());
    final List<String> sampleKinds=CategoryIdAndSampleKind.extractSampleKinds(categoryIdsAndSampleKinds.values());
    Assert.assertTrue(sampleKinds.contains(MIN_HEAPUSED_KIND));
    Assert.assertTrue(sampleKinds.contains(MAX_HEAPUSED_KIND));
  }
  timelineEventHandler.forceCommit(false);
  backgroundWriter.finishBackgroundWriting();
  final AccumulatorConsumer consumer=new AccumulatorConsumer();
  timelineDAO.getSamplesByHostIdsAndSampleKindIds(ImmutableList.<Integer>of(hostId),ImmutableList.<Integer>of(minHeapUserKindId,maxHeapUserKindId),startTime,endTime,consumer);
  final List<TimelineChunk> chunks=consumer.getAccumulator();
  Assert.assertEquals(chunks.size(),2);
  Assert.assertEquals((Integer)chunks.get(0).getHostId(),hostId);
  Assert.assertEquals((Integer)chunks.get(1).getHostId(),hostId);
  Assert.assertTrue((chunks.get(0).getSampleKindId() == minHeapUserKindId) || chunks.get(0).getSampleKindId() == maxHeapUserKindId);
  Assert.assertTrue((chunks.get(1).getSampleKindId() == minHeapUserKindId) || chunks.get(1).getSampleKindId() == maxHeapUserKindId);
  Assert.assertEquals(chunks.get(0).getHostId(),(int)hostId);
  Assert.assertEquals(chunks.get(1).getHostId(),(int)hostId);
  Assert.assertTrue(chunks.get(0).getSampleKindId() == minHeapUserKindId || chunks.get(0).getSampleKindId() == maxHeapUserKindId);
  Assert.assertTrue(chunks.get(1).getSampleKindId() == minHeapUserKindId || chunks.get(1).getSampleKindId() == maxHeapUserKindId);
  Assert.assertEquals(chunks.get(0).getSampleCount(),sampleCount);
  Assert.assertEquals(chunks.get(1).getSampleCount(),sampleCount);
  Assert.assertEquals(chunks.get(0).getHostId(),(int)hostId);
  Assert.assertEquals(chunks.get(1).getHostId(),(int)hostId);
  Assert.assertEquals(chunks.get(0).getStartTime().getMillis() / 1000,startTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(1).getStartTime().getMillis() / 1000,startTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(0).getEndTime().getMillis() / 1000,endTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(1).getEndTime().getMillis() / 1000,endTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(0).getSampleCount(),sampleCount);
  Assert.assertEquals(chunks.get(1).getSampleCount(),sampleCount);
  final TimeCursor timeCursor0=new TimeCursor(chunks.get(0).getTimes(),chunks.get(0).getSampleCount());
  final TimeCursor timeCursor1=new TimeCursor(chunks.get(1).getTimes(),chunks.get(1).getSampleCount());
  for (int i=0; i < sampleCount; i++) {
    Assert.assertEquals(timeCursor0.getNextTime(),(int)(startTime.plusMinutes(i).getMillis() / 1000));
    Assert.assertEquals(timeCursor1.getNextTime(),startTime.plusMinutes(i).getMillis() / 1000);
  }
}","@Test(groups=""String_Node_Str"") public void testJsonClientIntegration() throws Exception {
  final RESTEventService service=createService(new JsonEventSerializer());
  Assert.assertEquals(processor.getEventsReceived(),0);
  Assert.assertEquals(timelineEventHandler.getEventsDiscarded(),0);
  final UUID hostUUID=UUID.randomUUID();
  final String hostName=hostUUID.toString();
  final int eventTypeId=timelineDAO.getOrAddEventCategory(EVENT_TYPE);
  final Integer hostId=timelineDAO.getOrAddHost(hostName);
  Assert.assertNotNull(hostId);
  final Integer minHeapUserKindId=timelineDAO.getOrAddSampleKind(hostId,eventTypeId,MIN_HEAPUSED_KIND);
  Assert.assertNotNull(minHeapUserKindId);
  final Integer maxHeapUserKindId=timelineDAO.getOrAddSampleKind(hostId,eventTypeId,MAX_HEAPUSED_KIND);
  Assert.assertNotNull(maxHeapUserKindId);
  final DateTime startTime=new DateTime(DateTimeZone.UTC);
  DateTime endTime=startTime;
  final int sampleCount=10;
  for (int i=0; i < sampleCount; i++) {
    endTime=startTime.plusMinutes(i);
    final MapEvent event=createEvent(hostUUID,endTime.getMillis());
    service.sendREST(event);
    Assert.assertEquals(processor.getEventsReceived(),1 + i);
    Assert.assertEquals(timelineEventHandler.getEventsDiscarded(),0);
    Assert.assertEquals(timelineEventHandler.getAccumulators().size(),1);
    final BiMap<Integer,String> hosts=timelineDAO.getHosts();
    Assert.assertEquals(hosts.values().size(),1);
    Assert.assertEquals(hosts.values().toArray()[0],hostName);
    final BiMap<Integer,CategoryIdAndSampleKind> categoryIdsAndSampleKinds=timelineDAO.getSampleKinds();
    Assert.assertEquals(categoryIdsAndSampleKinds.values().size(),event.getKeys().size());
    final List<String> sampleKinds=CategoryIdAndSampleKind.extractSampleKinds(categoryIdsAndSampleKinds.values());
    Assert.assertTrue(sampleKinds.contains(MIN_HEAPUSED_KIND));
    Assert.assertTrue(sampleKinds.contains(MAX_HEAPUSED_KIND));
  }
  timelineEventHandler.forceCommit(false);
  backgroundWriter.initiateShutdown();
  final AccumulatorConsumer consumer=new AccumulatorConsumer();
  timelineDAO.getSamplesByHostIdsAndSampleKindIds(ImmutableList.<Integer>of(hostId),ImmutableList.<Integer>of(minHeapUserKindId,maxHeapUserKindId),startTime,endTime,consumer);
  final List<TimelineChunk> chunks=consumer.getAccumulator();
  Assert.assertEquals(chunks.size(),2);
  Assert.assertEquals((Integer)chunks.get(0).getHostId(),hostId);
  Assert.assertEquals((Integer)chunks.get(1).getHostId(),hostId);
  Assert.assertTrue((chunks.get(0).getSampleKindId() == minHeapUserKindId) || chunks.get(0).getSampleKindId() == maxHeapUserKindId);
  Assert.assertTrue((chunks.get(1).getSampleKindId() == minHeapUserKindId) || chunks.get(1).getSampleKindId() == maxHeapUserKindId);
  Assert.assertEquals(chunks.get(0).getHostId(),(int)hostId);
  Assert.assertEquals(chunks.get(1).getHostId(),(int)hostId);
  Assert.assertTrue(chunks.get(0).getSampleKindId() == minHeapUserKindId || chunks.get(0).getSampleKindId() == maxHeapUserKindId);
  Assert.assertTrue(chunks.get(1).getSampleKindId() == minHeapUserKindId || chunks.get(1).getSampleKindId() == maxHeapUserKindId);
  Assert.assertEquals(chunks.get(0).getSampleCount(),sampleCount);
  Assert.assertEquals(chunks.get(1).getSampleCount(),sampleCount);
  Assert.assertEquals(chunks.get(0).getHostId(),(int)hostId);
  Assert.assertEquals(chunks.get(1).getHostId(),(int)hostId);
  Assert.assertEquals(chunks.get(0).getStartTime().getMillis() / 1000,startTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(1).getStartTime().getMillis() / 1000,startTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(0).getEndTime().getMillis() / 1000,endTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(1).getEndTime().getMillis() / 1000,endTime.getMillis() / 1000);
  Assert.assertEquals(chunks.get(0).getSampleCount(),sampleCount);
  Assert.assertEquals(chunks.get(1).getSampleCount(),sampleCount);
  final TimeCursor timeCursor0=new TimeCursor(chunks.get(0).getTimes(),chunks.get(0).getSampleCount());
  final TimeCursor timeCursor1=new TimeCursor(chunks.get(1).getTimes(),chunks.get(1).getSampleCount());
  for (int i=0; i < sampleCount; i++) {
    Assert.assertEquals(timeCursor0.getNextTime(),(int)(startTime.plusMinutes(i).getMillis() / 1000));
    Assert.assertEquals(timeCursor1.getNextTime(),startTime.plusMinutes(i).getMillis() / 1000);
  }
}",0.9955676781452438
2138,"public static void scan(final byte[] samples,final byte[] times,final int sampleCount,final SampleProcessor processor) throws IOException {
  final ByteArrayInputStream byteStream=new ByteArrayInputStream(samples);
  final DataInputStream inputStream=new DataInputStream(byteStream);
  final TimeCursor timeCursor=new TimeCursor(times,sampleCount);
  while (true) {
    final int opcodeByte;
    opcodeByte=inputStream.read();
    if (opcodeByte == -1) {
      return;
    }
    final SampleOpcode opcode=SampleOpcode.getOpcodeFromIndex(opcodeByte);
switch (opcode) {
case REPEAT_BYTE:
case REPEAT_SHORT:
      final int repeatCount=opcode == SampleOpcode.REPEAT_BYTE ? inputStream.readUnsignedByte() : inputStream.readUnsignedShort();
    final SampleOpcode repeatedOpcode=SampleOpcode.getOpcodeFromIndex(inputStream.read());
  final Object value=decodeScalarValue(inputStream,repeatedOpcode);
final SampleOpcode replacementOpcode=repeatedOpcode.getReplacement();
processor.processSamples(timeCursor,repeatCount,replacementOpcode,value);
timeCursor.consumeRepeat(repeatCount);
break;
default :
processor.processSamples(timeCursor,1,opcode.getReplacement(),decodeScalarValue(inputStream,opcode));
break;
}
}
}","public static void scan(final byte[] samples,final byte[] times,final int sampleCount,final SampleProcessor processor) throws IOException {
  final ByteArrayInputStream byteStream=new ByteArrayInputStream(samples);
  final DataInputStream inputStream=new DataInputStream(byteStream);
  final TimeCursor timeCursor=new TimeCursor(times,sampleCount);
  int sampleNumber=0;
  while (true) {
    final int opcodeByte;
    opcodeByte=inputStream.read();
    if (opcodeByte == -1) {
      return;
    }
    final SampleOpcode opcode=SampleOpcode.getOpcodeFromIndex(opcodeByte);
switch (opcode) {
case REPEAT_BYTE:
case REPEAT_SHORT:
      final int repeatCount=opcode == SampleOpcode.REPEAT_BYTE ? inputStream.readUnsignedByte() : inputStream.readUnsignedShort();
    final SampleOpcode repeatedOpcode=SampleOpcode.getOpcodeFromIndex(inputStream.read());
  final Object value=decodeScalarValue(inputStream,repeatedOpcode);
final SampleOpcode replacementOpcode=repeatedOpcode.getReplacement();
processor.processSamples(timeCursor,repeatCount,replacementOpcode,value);
sampleNumber+=repeatCount;
timeCursor.skipToSampleNumber(sampleNumber);
break;
default :
processor.processSamples(timeCursor,1,opcode.getReplacement(),decodeScalarValue(inputStream,opcode));
break;
}
}
}",0.9543065103113628
2139,"private int getNextTimeInternal(){
  try {
    if (repeatCount > 0) {
      repeatCount--;
      lastValue+=delta;
    }
 else {
      final int nextOpcode=timelineDataStream.read();
      byteCursor++;
      if (nextOpcode == -1) {
        return nextOpcode;
      }
      if (nextOpcode == TimelineOpcode.FULL_TIME.getOpcodeIndex()) {
        lastValue=timelineDataStream.readInt();
        byteCursor+=4;
      }
 else       if (nextOpcode == TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex()) {
        repeatCount=timelineDataStream.readUnsignedByte() - 1;
        delta=timelineDataStream.read();
        byteCursor+=2;
        lastValue+=delta;
      }
 else       if (nextOpcode == TimelineOpcode.REPEATED_DELTA_TIME_SHORT.getOpcodeIndex()) {
        repeatCount=timelineDataStream.readUnsignedShort() - 1;
        delta=timelineDataStream.read();
        byteCursor+=3;
        lastValue+=delta;
      }
 else       if (nextOpcode <= TimelineOpcode.MAX_DELTA_TIME) {
        byteCursor++;
        lastValue+=nextOpcode;
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",nextOpcode,byteCursor));
      }
    }
    return lastValue;
  }
 catch (  IOException e) {
    log.error(e,""String_Node_Str"");
    return -1;
  }
}","private int getNextTimeInternal(){
  try {
    if (repeatCount > 0) {
      repeatCount--;
      lastValue+=delta;
    }
 else {
      final int nextOpcode=timelineDataStream.read();
      byteCursor++;
      if (nextOpcode == -1) {
        return nextOpcode;
      }
      if (nextOpcode == TimelineOpcode.FULL_TIME.getOpcodeIndex()) {
        lastValue=timelineDataStream.readInt();
        byteCursor+=4;
      }
 else       if (nextOpcode == TimelineOpcode.REPEATED_DELTA_TIME_BYTE.getOpcodeIndex()) {
        repeatCount=timelineDataStream.readUnsignedByte() - 1;
        delta=timelineDataStream.read();
        byteCursor+=2;
        lastValue+=delta;
      }
 else       if (nextOpcode == TimelineOpcode.REPEATED_DELTA_TIME_SHORT.getOpcodeIndex()) {
        repeatCount=timelineDataStream.readUnsignedShort() - 1;
        delta=timelineDataStream.read();
        byteCursor+=3;
        lastValue+=delta;
      }
 else       if (nextOpcode <= TimelineOpcode.MAX_DELTA_TIME) {
        lastValue+=nextOpcode;
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",nextOpcode,byteCursor));
      }
    }
    sampleNumber++;
    if (sampleNumber > sampleCount) {
      log.error(""String_Node_Str"",sampleNumber,sampleCount);
    }
    return lastValue;
  }
 catch (  IOException e) {
    log.error(e,""String_Node_Str"");
    return -1;
  }
}",0.944465432565168
2140,"public TimeCursor(final byte[] times,final int sampleCount){
  this.timelineDataStream=new DataInputStream(new ByteArrayInputStream(times));
  this.sampleCount=sampleCount;
  this.byteCursor=0;
  this.lastValue=0;
  this.delta=0;
  this.repeatCount=0;
}","public TimeCursor(final byte[] times,final int sampleCount){
  this.timelineDataStream=new DataInputStream(new ByteArrayInputStream(times));
  this.sampleCount=sampleCount;
  this.sampleNumber=0;
  this.byteCursor=0;
  this.lastValue=0;
  this.delta=0;
  this.repeatCount=0;
}",0.9565217391304348
2141,"@Override public void processSamples(TimeCursor timeCursor,int sampleCount,SampleOpcode opcode,Object value){
  if (builder.length() > 0) {
    builder.append(""String_Node_Str"");
  }
  final int nextTime=timeCursor.getNextTime();
  if (sampleCount > 1) {
    timeCursor.consumeRepeat(sampleCount);
  }
  final DateTime timestamp=DateTimeUtils.dateTimeFromUnixSeconds(nextTime);
  builder.append(""String_Node_Str"").append(timestamp.toString(""String_Node_Str"")).append(""String_Node_Str"");
  if (sampleCount > 1) {
    builder.append(sampleCount).append(""String_Node_Str"");
  }
  builder.append(opcode.name().toLowerCase());
switch (opcode) {
case NULL:
case DOUBLE_ZERO:
case INT_ZERO:
    break;
default :
  builder.append(""String_Node_Str"").append(String.valueOf(value)).append(""String_Node_Str"");
break;
}
}","@Override public void processSamples(TimeCursor timeCursor,int sampleCount,SampleOpcode opcode,Object value){
  if (builder.length() > 0) {
    builder.append(""String_Node_Str"");
  }
  final int nextTime=timeCursor.getNextTime();
  final DateTime timestamp=DateTimeUtils.dateTimeFromUnixSeconds(nextTime);
  builder.append(""String_Node_Str"").append(timestamp.toString(""String_Node_Str"")).append(""String_Node_Str"");
  if (sampleCount > 1) {
    builder.append(sampleCount).append(""String_Node_Str"");
  }
  builder.append(opcode.name().toLowerCase());
switch (opcode) {
case NULL:
case DOUBLE_ZERO:
case INT_ZERO:
    break;
default :
  builder.append(""String_Node_Str"").append(String.valueOf(value)).append(""String_Node_Str"");
break;
}
}",0.9533678756476685
2142,"@SuppressWarnings(""String_Node_Str"") @Test(groups=""String_Node_Str"") public void testBasicAccumulator() throws Exception {
  final int hostId=123;
  final int sampleKindId=456;
  final TimelineChunkAccumulator accum=new TimelineChunkAccumulator(hostId,sampleKindId);
  final List<DateTime> dateTimes=new ArrayList<DateTime>();
  final DateTime startTime=new DateTime();
  final DateTime endTime=startTime.plus(1000);
  accum.addSample(new ScalarSample(SampleOpcode.INT,new Integer(25)));
  int timesCounter=0;
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  for (int i=0; i < 5; i++) {
    accum.addSample(new ScalarSample(SampleOpcode.INT,new Integer(10)));
    dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  }
  accum.addSample(new ScalarSample(SampleOpcode.DOUBLE,new Double(100.0)));
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  accum.addSample(new ScalarSample(SampleOpcode.DOUBLE,new Double(100.0)));
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  accum.addSample(new ScalarSample(SampleOpcode.STRING,new String(""String_Node_Str"")));
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  final byte[] compressedTimes=TimelineCoder.compressDateTimes(dateTimes);
  final TimelineChunk chunk=accum.extractTimelineChunkAndReset(startTime,endTime,compressedTimes);
  Assert.assertEquals(chunk.getSampleCount(),9);
  SampleCoder.scan(chunk.getSamples(),compressedTimes,dateTimes.size(),new SampleProcessor(){
    private int sampleNumber=0;
    @Override public void processSamples(    TimeCursor timeCursor,    int sampleCount,    SampleOpcode opcode,    Object value){
      timeCursor.consumeRepeat(sampleCount);
      if (sampleNumber == 0) {
        Assert.assertEquals(opcode,SampleOpcode.INT);
        Assert.assertEquals(value,new Integer(25));
      }
 else       if (sampleNumber >= 1 && sampleNumber < 6) {
        Assert.assertEquals(opcode,SampleOpcode.INT);
        Assert.assertEquals(value,new Integer(10));
      }
 else       if (sampleNumber >= 6 && sampleNumber < 8) {
        Assert.assertEquals(opcode,SampleOpcode.DOUBLE);
        Assert.assertEquals(value,new Double(100.0));
      }
 else       if (sampleNumber == 8) {
        Assert.assertEquals(opcode,SampleOpcode.STRING);
        Assert.assertEquals(value,new String(""String_Node_Str""));
      }
 else {
        Assert.assertTrue(false);
      }
      sampleNumber+=sampleCount;
    }
  }
);
  final TimelineChunkDecoded chunkDecoded=new TimelineChunkDecoded(chunk);
  System.out.printf(""String_Node_Str"",chunkDecoded.toString());
}","@SuppressWarnings(""String_Node_Str"") @Test(groups=""String_Node_Str"") public void testBasicAccumulator() throws Exception {
  final int hostId=123;
  final int sampleKindId=456;
  final TimelineChunkAccumulator accum=new TimelineChunkAccumulator(hostId,sampleKindId);
  final List<DateTime> dateTimes=new ArrayList<DateTime>();
  final DateTime startTime=new DateTime();
  final DateTime endTime=startTime.plus(1000);
  accum.addSample(new ScalarSample(SampleOpcode.INT,new Integer(25)));
  int timesCounter=0;
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  for (int i=0; i < 5; i++) {
    accum.addSample(new ScalarSample(SampleOpcode.INT,new Integer(10)));
    dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  }
  accum.addSample(new ScalarSample(SampleOpcode.DOUBLE,new Double(100.0)));
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  accum.addSample(new ScalarSample(SampleOpcode.DOUBLE,new Double(100.0)));
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  accum.addSample(new ScalarSample(SampleOpcode.STRING,new String(""String_Node_Str"")));
  dateTimes.add(startTime.plusSeconds(30 * timesCounter++));
  final byte[] compressedTimes=TimelineCoder.compressDateTimes(dateTimes);
  final TimelineChunk chunk=accum.extractTimelineChunkAndReset(startTime,endTime,compressedTimes);
  Assert.assertEquals(chunk.getSampleCount(),9);
  SampleCoder.scan(chunk.getSamples(),compressedTimes,dateTimes.size(),new SampleProcessor(){
    private int sampleNumber=0;
    @Override public void processSamples(    TimeCursor timeCursor,    int sampleCount,    SampleOpcode opcode,    Object value){
      if (sampleNumber == 0) {
        Assert.assertEquals(opcode,SampleOpcode.INT);
        Assert.assertEquals(value,new Integer(25));
      }
 else       if (sampleNumber >= 1 && sampleNumber < 6) {
        Assert.assertEquals(opcode,SampleOpcode.INT);
        Assert.assertEquals(value,new Integer(10));
      }
 else       if (sampleNumber >= 6 && sampleNumber < 8) {
        Assert.assertEquals(opcode,SampleOpcode.DOUBLE);
        Assert.assertEquals(value,new Double(100.0));
      }
 else       if (sampleNumber == 8) {
        Assert.assertEquals(opcode,SampleOpcode.STRING);
        Assert.assertEquals(value,new String(""String_Node_Str""));
      }
 else {
        Assert.assertTrue(false);
      }
      sampleNumber+=sampleCount;
    }
  }
);
  final TimelineChunkDecoded chunkDecoded=new TimelineChunkDecoded(chunk);
  System.out.printf(""String_Node_Str"",chunkDecoded.toString());
}",0.9912160843255904
2143,"private void writeJsonForAllChunks(final JsonGenerator generator,final ObjectWriter writer,final Map<Integer,Map<Integer,DecimatingSampleFilter>> filters,final List<Integer> hostIds,final List<Integer> sampleKindIds,final DateTime startTime,final DateTime endTime,final boolean decodeSamples) throws IOException, ExecutionException {
  writeJsonForInMemoryChunks(generator,writer,filters,hostIds,sampleKindIds,startTime,endTime,decodeSamples);
  writeJsonForStoredChunks(generator,writer,filters,hostIds,sampleKindIds,startTime,endTime,decodeSamples);
}","private void writeJsonForAllChunks(final JsonGenerator generator,final ObjectWriter writer,final Map<Integer,Map<Integer,DecimatingSampleFilter>> filters,final List<Integer> hostIds,final List<Integer> sampleKindIds,final DateTime startTime,final DateTime endTime,final boolean decodeSamples) throws IOException, ExecutionException {
  writeJsonForStoredChunks(generator,writer,filters,hostIds,sampleKindIds,startTime,endTime,decodeSamples);
  writeJsonForInMemoryChunks(generator,writer,filters,hostIds,sampleKindIds,startTime,endTime,decodeSamples);
}",0.9746835443037974
2144,"/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  final String[] chunkCountsToAggregate=config.getChunksToAggregate().split(""String_Node_Str"");
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel(); aggregationLevel++) {
    final int chunkCountIndex=aggregationLevel >= chunkCountsToAggregate.length ? chunkCountsToAggregate.length - 1 : aggregationLevel;
    final int chunksToAggregate=Integer.parseInt(chunkCountsToAggregate[chunkCountIndex]);
    final List<TimelineTimes> timelineTimesCandidates=aggregatorDao.getTimelineTimesAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    int lastEventCategoryId=0;
    final List<TimelineTimes> hostTimelineCandidates=new ArrayList<TimelineTimes>();
    for (    final TimelineTimes candidate : timelineTimesCandidates) {
      final int hostId=candidate.getHostId();
      final int eventCategoryId=candidate.getEventCategoryId();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      if (lastHostId != hostId || lastEventCategoryId != eventCategoryId) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      hostTimelineCandidates.add(candidate);
    }
    aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}","/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  final String[] chunkCountsToAggregate=config.getChunksToAggregate().split(""String_Node_Str"");
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel() - 1; aggregationLevel++) {
    final int chunkCountIndex=aggregationLevel >= chunkCountsToAggregate.length ? chunkCountsToAggregate.length - 1 : aggregationLevel;
    final int chunksToAggregate=Integer.parseInt(chunkCountsToAggregate[chunkCountIndex]);
    final List<TimelineTimes> timelineTimesCandidates=aggregatorDao.getTimelineTimesAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    int lastEventCategoryId=0;
    final List<TimelineTimes> hostTimelineCandidates=new ArrayList<TimelineTimes>();
    for (    final TimelineTimes candidate : timelineTimesCandidates) {
      final int hostId=candidate.getHostId();
      final int eventCategoryId=candidate.getEventCategoryId();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      if (lastHostId != hostId || lastEventCategoryId != eventCategoryId) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      hostTimelineCandidates.add(candidate);
    }
    aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}",0.9989047097480832
2145,"/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  final String[] chunkCountsToAggregate=config.getChunksToAggregate().split(""String_Node_Str"");
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel() - 1; aggregationLevel++) {
    final int chunkCountIndex=aggregationLevel >= chunkCountsToAggregate.length ? chunkCountsToAggregate.length - 1 : aggregationLevel;
    final int chunksToAggregate=Integer.parseInt(chunkCountsToAggregate[chunkCountIndex]);
    final List<TimelineTimes> timelineTimesCandidates=aggregatorDao.getTimelineTimesAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    int lastEventCategoryId=0;
    final List<TimelineTimes> hostTimelineCandidates=new ArrayList<TimelineTimes>();
    for (    final TimelineTimes candidate : timelineTimesCandidates) {
      final int hostId=candidate.getHostId();
      final int eventCategoryId=candidate.getEventCategoryId();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      if (lastHostId != hostId || lastEventCategoryId != eventCategoryId) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      hostTimelineCandidates.add(candidate);
    }
    aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}","/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  final String[] chunkCountsToAggregate=config.getChunksToAggregate().split(""String_Node_Str"");
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel(); aggregationLevel++) {
    final int chunkCountIndex=aggregationLevel >= chunkCountsToAggregate.length ? chunkCountsToAggregate.length - 1 : aggregationLevel;
    final int chunksToAggregate=Integer.parseInt(chunkCountsToAggregate[chunkCountIndex]);
    final List<TimelineTimes> timelineTimesCandidates=aggregatorDao.getTimelineTimesAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    int lastEventCategoryId=0;
    final List<TimelineTimes> hostTimelineCandidates=new ArrayList<TimelineTimes>();
    for (    final TimelineTimes candidate : timelineTimesCandidates) {
      final int hostId=candidate.getHostId();
      final int eventCategoryId=candidate.getEventCategoryId();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      if (lastHostId != hostId || lastEventCategoryId != eventCategoryId) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
        lastEventCategoryId=eventCategoryId;
      }
      hostTimelineCandidates.add(candidate);
    }
    aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel,chunksToAggregate));
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}",0.9989047097480832
2146,"public Collection<? extends TimelineChunkAndTimes> getInMemoryTimelineChunkAndTimes(final String filterHostName,final List<String> filterSampleKinds,@Nullable final DateTime filterStartTime,@Nullable final DateTime filterEndTime) throws IOException, ExecutionException {
  final Integer hostId=timelineDAO.getHostId(filterHostName);
  if (hostId == null) {
    return ImmutableList.of();
  }
  final Map<String,TimelineHostEventAccumulator> hostAccumulators=accumulators.getIfPresent(hostId);
  if (hostAccumulators == null) {
    return ImmutableList.of();
  }
  final List<TimelineChunkAndTimes> samplesByHostName=new ArrayList<TimelineChunkAndTimes>();
  for (  final TimelineHostEventAccumulator accumulator : hostAccumulators.values()) {
    final List<DateTime> accumulatorTimes=accumulator.getTimes();
    final DateTime accumulatorStartTime=accumulator.getStartTime();
    final DateTime accumulatorEndTime=accumulator.getEndTime();
    if ((filterStartTime != null && accumulatorEndTime.isBefore(filterStartTime)) || (filterStartTime != null && accumulatorStartTime.isAfter(filterEndTime))) {
      return ImmutableList.of();
    }
    for (    final TimelineChunkAccumulator chunkAccumulator : accumulator.getTimelines().values()) {
      final TimelineChunkAccumulator chunkAccumulatorCopy=chunkAccumulator.deepCopy();
      final TimelineChunk timelineChunk=chunkAccumulatorCopy.extractTimelineChunkAndReset(-1,accumulatorStartTime);
      final TimelineTimes timelineTimes=new TimelineTimes(-1,hostId,accumulatorStartTime,accumulatorEndTime,accumulatorTimes);
      final String sampleKind=timelineDAO.getSampleKind(timelineChunk.getSampleKindId());
      if (!filterSampleKinds.contains(sampleKind)) {
        continue;
      }
      samplesByHostName.add(new TimelineChunkAndTimes(filterHostName,sampleKind,timelineChunk,timelineTimes));
    }
  }
  return samplesByHostName;
}","public Collection<? extends TimelineChunkAndTimes> getInMemoryTimelineChunkAndTimes(final String filterHostName,final List<String> filterSampleKinds,@Nullable final DateTime filterStartTime,@Nullable final DateTime filterEndTime) throws IOException, ExecutionException {
  final Integer hostId=timelineDAO.getHostId(filterHostName);
  if (hostId == null) {
    return ImmutableList.of();
  }
  final Map<String,TimelineHostEventAccumulator> hostAccumulators=accumulators.getIfPresent(hostId);
  if (hostAccumulators == null) {
    return ImmutableList.of();
  }
  final List<TimelineChunkAndTimes> samplesByHostName=new ArrayList<TimelineChunkAndTimes>();
  for (  final TimelineHostEventAccumulator accumulator : hostAccumulators.values()) {
    final List<DateTime> accumulatorTimes=accumulator.getTimes();
    final DateTime accumulatorStartTime=accumulator.getStartTime();
    final DateTime accumulatorEndTime=accumulator.getEndTime();
    if ((filterStartTime != null && accumulatorEndTime.isBefore(filterStartTime)) || (filterStartTime != null && accumulatorStartTime.isAfter(filterEndTime))) {
      continue;
    }
    for (    final TimelineChunkAccumulator chunkAccumulator : accumulator.getTimelines().values()) {
      final String sampleKind=timelineDAO.getSampleKind(chunkAccumulator.getSampleKindId());
      if (!filterSampleKinds.contains(sampleKind)) {
        continue;
      }
      final TimelineChunkAccumulator chunkAccumulatorCopy=chunkAccumulator.deepCopy();
      final TimelineChunk timelineChunk=chunkAccumulatorCopy.extractTimelineChunkAndReset(-1,accumulatorStartTime);
      final TimelineTimes timelineTimes=new TimelineTimes(-1,hostId,accumulatorStartTime,accumulatorEndTime,accumulatorTimes);
      samplesByHostName.add(new TimelineChunkAndTimes(filterHostName,sampleKind,timelineChunk,timelineTimes));
    }
  }
  return samplesByHostName;
}",0.9007957559681696
2147,"/** 
 * Process sampleCount sequential samples with identical values.  sampleCount will usually be 1, but may be larger than 1.  Implementors may just loop processing identical values, but some implementations may optimize adding a bunch of repeated values
 * @param timeCursor   a TimeCursor instance, which supplies successive int UNIX times
 * @param sampleCount  the count of sequential, identical values
 * @param opcode       the opcode of the sample value, which may not be a REPEAT opcode
 * @param value        the value of this kind of sample over the count of samples starting at the timegiven by the sampleNumber indexing the TimelineTimestamps.
 */
@Override public void processSamples(final TimeCursor timeCursor,final int sampleCount,final SampleOpcode opcode,final Object value){
  for (int i=0; i < sampleCount; i++) {
    final DateTime sampleTimestamp=TimelineTimes.dateTimeFromUnixSeconds(timeCursor.getNextTime());
    final long sampleMillis=sampleTimestamp.getMillis();
    if ((startTime == null || (sampleMillis >= startTime.getMillis())) && (endTime == null || (sampleMillis <= endTime.getMillis()))) {
      processOneSample(sampleTimestamp,opcode,value);
    }
  }
}","/** 
 * Process sampleCount sequential samples with identical values.  sampleCount will usually be 1, but may be larger than 1.  Implementors may just loop processing identical values, but some implementations may optimize adding a bunch of repeated values
 * @param timeCursor   a TimeCursor instance, which supplies successive int UNIX times
 * @param sampleCount  the count of sequential, identical values
 * @param opcode       the opcode of the sample value, which may not be a REPEAT opcode
 * @param value        the value of this kind of sample over the count of samples starting at the timegiven by the sampleNumber indexing the TimelineTimestamps.
 */
@Override public void processSamples(final TimeCursor timeCursor,final int sampleCount,final SampleOpcode opcode,final Object value){
  final int unixStartTime=startTime == null ? Integer.MIN_VALUE : TimelineTimes.unixSeconds(startTime);
  final int unixEndTime=endTime == null ? Integer.MAX_VALUE : TimelineTimes.unixSeconds(endTime);
  for (int i=0; i < sampleCount; i++) {
    final int unixSampleTime=timeCursor.getNextTime();
    if (unixSampleTime >= unixStartTime && unixSampleTime <= unixEndTime) {
      processOneSample(TimelineTimes.dateTimeFromUnixSeconds(unixSampleTime),opcode,value);
    }
  }
}",0.7518248175182481
2148,"private TimelineChunkAccumulator(final int hostId,final int sampleKindId,final ByteArrayOutputStream stream,final SampleBase lastSample,final int sampleCount) throws IOException {
  this.hostId=hostId;
  this.sampleKindId=sampleKindId;
  this.byteStream=stream;
  byteStream.write(byteStream.toByteArray());
  outputStream=new DataOutputStream(byteStream);
  this.lastSample=lastSample;
  this.sampleCount=sampleCount;
}","private TimelineChunkAccumulator(final int hostId,final int sampleKindId,final byte[] bytes,final SampleBase lastSample,final int sampleCount) throws IOException {
  this.hostId=hostId;
  this.sampleKindId=sampleKindId;
  reset();
  this.byteStream.write(bytes);
  this.lastSample=lastSample;
  this.sampleCount=sampleCount;
}",0.675603217158177
2149,"public TimelineChunkAccumulator deepCopy() throws IOException {
  return new TimelineChunkAccumulator(hostId,sampleKindId,byteStream,lastSample,sampleCount);
}","public TimelineChunkAccumulator deepCopy() throws IOException {
  return new TimelineChunkAccumulator(hostId,sampleKindId,byteStream.toByteArray(),lastSample,sampleCount);
}",0.9578313253012049
2150,"private static void writeRepeatedDelta(final int delta,final int repeatCount,final DataOutputStream dataStream) throws IOException {
  if (repeatCount > 1) {
    dataStream.writeByte(TimelineOpcode.REPEATED_DELTA_TIME.getOpcodeIndex());
    dataStream.writeByte(repeatCount);
  }
  dataStream.writeByte(delta);
}","private static void writeRepeatedDelta(final int delta,final int repeatCount,final DataOutputStream dataStream) throws IOException {
  dataStream.writeByte(TimelineOpcode.REPEATED_DELTA_TIME.getOpcodeIndex());
  dataStream.writeByte(repeatCount);
  dataStream.writeByte(delta);
}",0.9441624365482234
2151,"public static byte[] compressTimes(final int[] times){
  final ByteArrayOutputStream outputStream=new ByteArrayOutputStream(times.length / 3);
  final DataOutputStream dataStream=new DataOutputStream(outputStream);
  try {
    int lastTime=times[0];
    int lastDelta=0;
    int repeatCount=0;
    writeTime(0,lastTime,dataStream);
    for (int i=1; i < times.length; i++) {
      final int newTime=times[i];
      if (newTime <= lastTime) {
        log.warn(""String_Node_Str"",newTime,lastTime);
        continue;
      }
      final int delta=newTime - lastTime;
      final boolean deltaWorks=delta <= MAX_DELTA_TIME;
      final boolean sameDelta=repeatCount > 0 && delta == lastDelta;
      if (deltaWorks) {
        if (sameDelta) {
          repeatCount++;
          if (repeatCount == MAX_REPEAT_COUNT) {
            writeRepeatedDelta(delta,repeatCount,dataStream);
            repeatCount=0;
          }
        }
 else {
          if (repeatCount > 0) {
            writeRepeatedDelta(lastDelta,repeatCount,dataStream);
          }
          repeatCount=1;
        }
        lastDelta=delta;
      }
 else {
        if (repeatCount > 0) {
          writeRepeatedDelta(lastDelta,repeatCount,dataStream);
        }
        writeTime(0,newTime,dataStream);
        repeatCount=0;
        lastDelta=0;
      }
      lastTime=newTime;
    }
    if (repeatCount > 0) {
      writeRepeatedDelta(lastDelta,repeatCount,dataStream);
    }
    outputStream.flush();
    return outputStream.toByteArray();
  }
 catch (  IOException e) {
    log.error(e,""String_Node_Str"",times.length);
    return null;
  }
}","public static byte[] compressTimes(final int[] times){
  final ByteArrayOutputStream outputStream=new ByteArrayOutputStream(times.length / 3);
  final DataOutputStream dataStream=new DataOutputStream(outputStream);
  try {
    int lastTime=times[0];
    int lastDelta=0;
    int repeatCount=0;
    writeTime(0,lastTime,dataStream);
    for (int i=1; i < times.length; i++) {
      final int newTime=times[i];
      if (newTime < lastTime) {
        log.warn(""String_Node_Str"",newTime,lastTime);
        continue;
      }
      final int delta=newTime - lastTime;
      final boolean deltaWorks=delta <= MAX_DELTA_TIME;
      final boolean sameDelta=repeatCount > 0 && delta == lastDelta;
      if (deltaWorks) {
        if (sameDelta) {
          repeatCount++;
          if (repeatCount == MAX_REPEAT_COUNT) {
            writeRepeatedDelta(delta,repeatCount,dataStream);
            repeatCount=0;
          }
        }
 else {
          if (repeatCount > 0) {
            writeRepeatedDelta(lastDelta,repeatCount,dataStream);
          }
          repeatCount=1;
        }
        lastDelta=delta;
      }
 else {
        if (repeatCount > 0) {
          writeRepeatedDelta(lastDelta,repeatCount,dataStream);
        }
        writeTime(0,newTime,dataStream);
        repeatCount=0;
        lastDelta=0;
      }
      lastTime=newTime;
    }
    if (repeatCount > 0) {
      writeRepeatedDelta(lastDelta,repeatCount,dataStream);
    }
    outputStream.flush();
    return outputStream.toByteArray();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",times.length,e);
    return null;
  }
}",0.9984428526938648
2152,"@Test(groups=""String_Node_Str"") public void testBasicEncodeDecode() throws Exception {
  final byte[] compressedTimes=TimelineCoder.compressTimes(unencodedTimes);
  System.out.printf(""String_Node_Str"",new String(Hex.encodeHex(compressedTimes)));
  final int[] decompressedTimes=TimelineCoder.decompressTimes(compressedTimes);
  Assert.assertEquals(decompressedTimes.length,unencodedTimes.length);
  for (int i=0; i < unencodedTimes.length; i++) {
    Assert.assertEquals(decompressedTimes[i],unencodedTimes[i]);
  }
}","@Test(groups=""String_Node_Str"") public void testBasicEncodeDecode() throws Exception {
  final int firstTime=1000000;
  final int[] unencodedTimes=new int[]{firstTime,firstTime + 30,firstTime + 60,firstTime + 90,firstTime + 1000,firstTime + 2000,firstTime + 2030,firstTime + 2060};
  final byte[] compressedTimes=TimelineCoder.compressTimes(unencodedTimes);
  final int[] decompressedTimes=TimelineCoder.decompressTimes(compressedTimes);
  Assert.assertEquals(decompressedTimes.length,unencodedTimes.length);
  for (int i=0; i < unencodedTimes.length; i++) {
    Assert.assertEquals(decompressedTimes[i],unencodedTimes[i]);
  }
}",0.7574171029668412
2153,"private void aggregateSampleChunks(final List<Long> timelineTimesId,final int newTimelineTimesId,final int totalSampleCount){
  final List<List<TimelineChunk>> orderedHostSampleChunks=getHostSampleTimelineChunks(timelineTimesId);
  for (  final List<TimelineChunk> chunkList : orderedHostSampleChunks) {
    final TimelineChunk firstSampleChunk=chunkList.get(0);
    int totalChunkSize=0;
    for (    final TimelineChunk chunk : chunkList) {
      totalChunkSize+=chunk.getSamples().length;
    }
    final byte[] samples=new byte[totalChunkSize];
    int sampleChunkIndex=0;
    for (    final TimelineChunk chunk : chunkList) {
      final int chunkSampleLength=chunk.getSamples().length;
      System.arraycopy(chunk.getSamples(),0,samples,sampleChunkIndex,chunkSampleLength);
      sampleChunkIndex+=chunkSampleLength;
    }
    final TimelineChunk aggregatedChunk=new TimelineChunk(0,firstSampleChunk.getHostId(),firstSampleChunk.getSampleKindId(),newTimelineTimesId,firstSampleChunk.getStartTime(),samples,totalSampleCount);
    timelineDao.insertTimelineChunk(aggregatedChunk);
  }
}","private void aggregateSampleChunks(final List<Long> timelineTimesIds,final int newTimelineTimesId,final int totalSampleCount){
  final List<List<TimelineChunk>> orderedHostSampleChunks=getHostSampleTimelineChunks(timelineTimesIds);
  for (  final List<TimelineChunk> chunkList : orderedHostSampleChunks) {
    final TimelineChunk firstSampleChunk=chunkList.get(0);
    int totalChunkSize=0;
    for (    final TimelineChunk chunk : chunkList) {
      totalChunkSize+=chunk.getSamples().length;
    }
    final byte[] samples=new byte[totalChunkSize];
    int sampleChunkIndex=0;
    for (    final TimelineChunk chunk : chunkList) {
      final int chunkSampleLength=chunk.getSamples().length;
      System.arraycopy(chunk.getSamples(),0,samples,sampleChunkIndex,chunkSampleLength);
      sampleChunkIndex+=chunkSampleLength;
    }
    final TimelineChunk aggregatedChunk=new TimelineChunk(0,firstSampleChunk.getHostId(),firstSampleChunk.getSampleKindId(),newTimelineTimesId,firstSampleChunk.getStartTime(),samples,totalSampleCount);
    timelineDao.insertTimelineChunk(aggregatedChunk);
  }
}",0.9990842490842492
2154,"private int aggregateTimelineCandidates(final List<TimelineTimes> timelineTimesCandidates,final int aggregationLevel){
  log.info(""String_Node_Str"",timelineTimesCandidates.size(),config.getChunksToAggregate());
  int aggregatesCreated=0;
  final int chunksToAggregate=config.getChunksToAggregate();
  while (timelineTimesCandidates.size() >= chunksToAggregate) {
    final List<TimelineTimes> chunkCandidates=timelineTimesCandidates.subList(0,chunksToAggregate);
    aggregateHostSampleChunks(chunkCandidates,aggregationLevel);
    aggregatesCreated++;
    chunkCandidates.clear();
  }
  return aggregatesCreated;
}","private int aggregateTimelineCandidates(final List<TimelineTimes> timelineTimesCandidates,final int aggregationLevel){
  final TimelineTimes firstCandidate=timelineTimesCandidates.get(0);
  log.info(""String_Node_Str"",new Object[]{firstCandidate.getHostId(),firstCandidate.getEventCategory(),timelineTimesCandidates.size(),config.getChunksToAggregate()});
  int aggregatesCreated=0;
  final int chunksToAggregate=config.getChunksToAggregate();
  while (timelineTimesCandidates.size() >= chunksToAggregate) {
    final List<TimelineTimes> chunkCandidates=timelineTimesCandidates.subList(0,chunksToAggregate);
    aggregateHostSampleChunks(chunkCandidates,aggregationLevel);
    aggregatesCreated++;
    chunkCandidates.clear();
  }
  return aggregatesCreated;
}",0.8951965065502183
2155,"/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel() - 1; aggregationLevel++) {
    final List<TimelineTimes> timelineTimesCandidates=aggregatorDao.getTimelineTimesAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    String lastEventCategory=""String_Node_Str"";
    final List<TimelineTimes> hostTimelineCandidates=new ArrayList<TimelineTimes>();
    for (    final TimelineTimes candidate : timelineTimesCandidates) {
      final int hostId=candidate.getHostId();
      final String eventCategory=candidate.getEventCategory();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastEventCategory=eventCategory;
      }
      if (lastHostId != hostId || !lastEventCategory.equals(eventCategory)) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
      }
      hostTimelineCandidates.add(candidate);
    }
    aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel));
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}","/** 
 * This method aggregates candidate timelines
 */
@Managed(description=""String_Node_Str"") public void getAndProcessTimelineAggregationCandidates(){
  if (!isAggregating.compareAndSet(false,true)) {
    log.info(""String_Node_Str"");
    return;
  }
 else {
    log.info(""String_Node_Str"");
  }
  for (int aggregationLevel=0; aggregationLevel < config.getMaxAggregationLevel() - 1; aggregationLevel++) {
    final List<TimelineTimes> timelineTimesCandidates=aggregatorDao.getTimelineTimesAggregationCandidates(aggregationLevel);
    int lastHostId=0;
    String lastEventCategory=""String_Node_Str"";
    final List<TimelineTimes> hostTimelineCandidates=new ArrayList<TimelineTimes>();
    for (    final TimelineTimes candidate : timelineTimesCandidates) {
      final int hostId=candidate.getHostId();
      final String eventCategory=candidate.getEventCategory();
      if (lastHostId == 0) {
        lastHostId=hostId;
        lastEventCategory=eventCategory;
      }
      if (lastHostId != hostId || !lastEventCategory.equals(eventCategory)) {
        aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel));
        hostTimelineCandidates.clear();
        lastHostId=hostId;
        lastEventCategory=eventCategory;
      }
      hostTimelineCandidates.add(candidate);
    }
    aggregatesCreated.inc(aggregateTimelineCandidates(hostTimelineCandidates,aggregationLevel));
  }
  log.info(""String_Node_Str"");
  isAggregating.set(false);
}",0.9859444634898868
2156,"/** 
 * The sequence of events is: <ul> <li>Build the aggregated TimelineTimes object, and save it, setting not_valid to true, and aggregation_level to 1.  This means that it won't be noticed by any of the dashboard queries.  The save operation returns the new timeline_times_id</li> <li>Retrieve all sample chunks associated with the TimelineTimes objects were aggregating, ordered by host_id, sample_kind_id and start_time.  Aggregate and save those, with timeline_time_id of the newly-created aggregated TimelineTimes object</li> <li>Then, in a single transaction, update the aggregated TimelineTimes object to have not_valid = 0, and also delete the TimelineTimes objects that were the basis of the aggregation, and flush any TimelineTime chunks that happen to be in the cache.</li> <li>Finally, delete the sample chunks that we aggregated.  Since sample chunks are only accessed by timeline_time_id, so the old sample chunks can no longer be referenced  Therefore they don't need to be deleted.</li> <p/>
 * @param timelineTimesChunks the TimelineTimes chunks to be aggregated
 */
private void aggregateHostSampleChunks(final List<TimelineTimes> timelineTimesChunks,final int aggregationLevel){
  final TimelineTimes firstTimesChunk=timelineTimesChunks.get(0);
  final TimelineTimes lastTimesChunk=timelineTimesChunks.get(timelineTimesChunks.size() - 1);
  final int hostId=firstTimesChunk.getHostId();
  final DateTime startTime=firstTimesChunk.getStartTime();
  final DateTime endTime=lastTimesChunk.getEndTime();
  int totalTimelineSize=0;
  int sampleCount=0;
  final List<Long> timelineTimesIds=new ArrayList<Long>(timelineTimesChunks.size());
  for (  final TimelineTimes timelineTimes : timelineTimesChunks) {
    totalTimelineSize+=timelineTimes.getCompressedTimes().length;
    sampleCount+=timelineTimes.getSampleCount();
    timelineTimesIds.add(timelineTimes.getObjectId());
  }
  log.info(""String_Node_Str"",new Object[]{timelineTimesChunks.size(),totalTimelineSize,sampleCount,timelineTimesIds});
  final int totalSampleCount=sampleCount;
  final byte[] aggregatedTimes=new byte[totalTimelineSize];
  int timeChunkIndex=0;
  for (  final TimelineTimes chunk : timelineTimesChunks) {
    final int chunkTimeLength=chunk.getCompressedTimes().length;
    System.arraycopy(chunk.getCompressedTimes(),0,aggregatedTimes,timeChunkIndex,chunkTimeLength);
    timeChunkIndex+=chunkTimeLength;
  }
  aggregatorDao.begin();
  aggregatorDao.insertNewInvalidTimelineTimes(new TimelineTimes(-1,hostId,firstTimesChunk.getEventCategory(),startTime,endTime,aggregatedTimes,totalSampleCount),aggregationLevel + 1);
  final int newTimelineTimesId=aggregatorDao.getLastInsertedId();
  aggregatorDao.commit();
  aggregateSampleChunks(timelineTimesIds,newTimelineTimesId,totalSampleCount);
  aggregatorDao.begin();
  aggregatorDao.makeTimelineTimesValid(newTimelineTimesId);
  aggregatorDao.makeTimelineTimesInvalid(timelineTimesIds);
  aggregatorDao.commit();
  if (config.getDeleteAggregatedChunks()) {
    aggregatorDao.begin();
    aggregatorDao.deleteTimelineTimes(timelineTimesIds);
    aggregatorDao.deleteTimelineChunks(timelineTimesIds);
    aggregatorDao.commit();
  }
}","/** 
 * The sequence of events is: <ul> <li>Build the aggregated TimelineTimes object, and save it, setting not_valid to true, and aggregation_level to 1.  This means that it won't be noticed by any of the dashboard queries.  The save operation returns the new timeline_times_id</li> <li>Retrieve all sample chunks associated with the TimelineTimes objects were aggregating, ordered by host_id, sample_kind_id and start_time.  Aggregate and save those, with timeline_time_id of the newly-created aggregated TimelineTimes object</li> <li>Then, in a single transaction, update the aggregated TimelineTimes object to have not_valid = 0, and also delete the TimelineTimes objects that were the basis of the aggregation, and flush any TimelineTime chunks that happen to be in the cache.</li> <li>Finally, delete the sample chunks that we aggregated.  Since sample chunks are only accessed by timeline_time_id, so the old sample chunks can no longer be referenced  Therefore they don't need to be deleted.</li> <p/>
 * @param timelineTimesChunks the TimelineTimes chunks to be aggregated
 */
private void aggregateHostSampleChunks(final List<TimelineTimes> timelineTimesChunks,final int aggregationLevel){
  final TimelineTimes firstTimesChunk=timelineTimesChunks.get(0);
  final TimelineTimes lastTimesChunk=timelineTimesChunks.get(timelineTimesChunks.size() - 1);
  final int hostId=firstTimesChunk.getHostId();
  final DateTime startTime=firstTimesChunk.getStartTime();
  final DateTime endTime=lastTimesChunk.getEndTime();
  int totalTimelineSize=0;
  int sampleCount=0;
  final List<Long> timelineTimesIds=new ArrayList<Long>(timelineTimesChunks.size());
  for (  final TimelineTimes timelineTimes : timelineTimesChunks) {
    totalTimelineSize+=timelineTimes.getCompressedTimes().length;
    sampleCount+=timelineTimes.getSampleCount();
    timelineTimesIds.add(timelineTimes.getObjectId());
  }
  log.info(""String_Node_Str"",new Object[]{firstTimesChunk.getHostId(),firstTimesChunk.getAggregationLevel(),timelineTimesChunks.size(),totalTimelineSize,sampleCount,timelineTimesIds});
  final int totalSampleCount=sampleCount;
  final byte[] aggregatedTimes=new byte[totalTimelineSize];
  int timeChunkIndex=0;
  for (  final TimelineTimes chunk : timelineTimesChunks) {
    final int chunkTimeLength=chunk.getCompressedTimes().length;
    System.arraycopy(chunk.getCompressedTimes(),0,aggregatedTimes,timeChunkIndex,chunkTimeLength);
    timeChunkIndex+=chunkTimeLength;
  }
  aggregatorDao.begin();
  aggregatorDao.insertNewInvalidTimelineTimes(new TimelineTimes(-1,hostId,firstTimesChunk.getEventCategory(),startTime,endTime,aggregatedTimes,totalSampleCount),aggregationLevel + 1);
  final int newTimelineTimesId=aggregatorDao.getLastInsertedId();
  aggregatorDao.commit();
  aggregateSampleChunks(timelineTimesIds,newTimelineTimesId,totalSampleCount);
  aggregatorDao.begin();
  aggregatorDao.makeTimelineTimesValid(newTimelineTimesId);
  aggregatorDao.makeTimelineTimesInvalid(timelineTimesIds);
  aggregatorDao.commit();
  if (config.getDeleteAggregatedChunks()) {
    aggregatorDao.begin();
    aggregatorDao.deleteTimelineTimes(timelineTimesIds);
    aggregatorDao.deleteTimelineChunks(timelineTimesIds);
    aggregatorDao.commit();
  }
}",0.9897164225615456
2157,"private void recycle() throws IOException {
synchronized (recyclingMonitor) {
    out.close();
    out=new StreamyBytesPersistentOutputStream(basePath,prefix,inputBuffer);
    smileGenerator=smileFactory.createJsonGenerator(out,JsonEncoding.UTF8);
    smileGenerator.flush();
    out.reset();
    samplesforTimestampWritten.set(0);
  }
}","private void recycle() throws IOException {
synchronized (recyclingMonitor) {
    if (out != null && !out.isEmpty()) {
      out.close();
    }
    out=new StreamyBytesPersistentOutputStream(basePath,prefix,inputBuffer);
    smileGenerator=smileFactory.createJsonGenerator(out,JsonEncoding.UTF8);
    smileGenerator.flush();
    out.reset();
    samplesforTimestampWritten.set(0);
  }
}",0.8990318118948825
2158,"@Override public void close() throws IOException {
  inputBuffer.close();
  for (  final String path : createdFiles) {
    log.info(""String_Node_Str"",path);
    if (!new File(path).delete()) {
      log.warn(""String_Node_Str"",path);
    }
  }
}","@Override public void close() throws IOException {
  inputBuffer.clear();
  for (  final String path : createdFiles) {
    log.info(""String_Node_Str"",path);
    if (!new File(path).delete()) {
      log.warn(""String_Node_Str"",path);
    }
  }
}",0.5
2159,"public RepeatedSample(byte repeatCount,ScalarSample<T> sample){
  super(SampleOpcode.REPEAT);
  this.repeatCount=0;
  this.sample=sample;
}","public RepeatedSample(byte repeatCount,ScalarSample<T> sample){
  super(SampleOpcode.REPEAT);
  this.repeatCount=repeatCount;
  this.sample=sample;
}",0.9583333333333334
2160,"/** 
 * This invokes the processor on the values in the timeline bytes.
 * @param bytes the byte representation of a timeline
 * @param processor the callback to which values value counts are passed to be processed.
 * @throws IOException
 */
public static void scan(final byte[] bytes,final TimelineTimes timestamps,final SampleProcessor processor) throws IOException {
  final ByteArrayInputStream byteStream=new ByteArrayInputStream(bytes);
  final DataInputStream inputStream=new DataInputStream(byteStream);
  int sampleCount=0;
  while (true) {
    byte opcodeByte;
    try {
      opcodeByte=inputStream.readByte();
    }
 catch (    EOFException e) {
      return;
    }
    final SampleOpcode opcode=SampleOpcode.getOpcodeFromIndex(opcodeByte);
switch (opcode) {
case REPEAT:
      final byte repeatCount=inputStream.readByte();
    final SampleOpcode repeatedOpcode=SampleOpcode.getOpcodeFromIndex(inputStream.readByte());
  final Object value=decodeScalarValue(inputStream,repeatedOpcode);
processor.processSamples(timestamps,sampleCount,repeatCount,opcode,value);
sampleCount+=repeatCount;
break;
default :
processor.processSamples(timestamps,sampleCount,1,opcode,decodeScalarValue(inputStream,opcode));
sampleCount+=1;
break;
}
}
}","/** 
 * This invokes the processor on the values in the timeline bytes.
 * @param bytes the byte representation of a timeline
 * @param processor the callback to which values value counts are passed to be processed.
 * @throws IOException
 */
public static void scan(final byte[] bytes,final TimelineTimes timestamps,final SampleProcessor processor) throws IOException {
  final ByteArrayInputStream byteStream=new ByteArrayInputStream(bytes);
  final DataInputStream inputStream=new DataInputStream(byteStream);
  int sampleCount=0;
  while (true) {
    byte opcodeByte;
    try {
      opcodeByte=inputStream.readByte();
    }
 catch (    EOFException e) {
      return;
    }
    final SampleOpcode opcode=SampleOpcode.getOpcodeFromIndex(opcodeByte);
switch (opcode) {
case REPEAT:
      final byte repeatCount=inputStream.readByte();
    final SampleOpcode repeatedOpcode=SampleOpcode.getOpcodeFromIndex(inputStream.readByte());
  final Object value=decodeScalarValue(inputStream,repeatedOpcode);
processor.processSamples(timestamps,sampleCount,repeatCount,repeatedOpcode,value);
sampleCount+=repeatCount;
break;
default :
processor.processSamples(timestamps,sampleCount,1,opcode,decodeScalarValue(inputStream,opcode));
sampleCount+=1;
break;
}
}
}",0.9959935897435898
2161,"public int createSmsNotificationForPersonOrGroup(final int id,final String address);","public Integer createSmsNotificationForPersonOrGroup(final int id,final String address);",0.9651162790697676
2162,public int createGroup(final String name);,public Integer createGroup(final String name);,0.9318181818181818
2163,"public int createThresholdContextAttr(final int thresholdConfigId,final String attributeType) throws UniformInterfaceException ;","public Integer createThresholdContextAttr(final int thresholdConfigId,final String attributeType) throws UniformInterfaceException ;",0.9769230769230768
2164,"public int createThresholdConfig(final String name,final String monitoredEventType,final String monitoredAttributeType,@Nullable final Double minThresholdValue,@Nullable final Double maxThresholdValue,final Long minThresholdSamples,final Long maxSampleWindowMs,final Long clearingIntervalMs,final int alertingConfigId) throws UniformInterfaceException ;","public Integer createThresholdConfig(final String name,final String monitoredEventType,final String monitoredAttributeType,@Nullable final Double minThresholdValue,@Nullable final Double maxThresholdValue,final Long minThresholdSamples,final Long maxSampleWindowMs,final Long clearingIntervalMs,final int alertingConfigId) throws UniformInterfaceException ;",0.9859154929577464
2165,"public int createPerson(final String firstName,final String lastName,final String nickName) throws UniformInterfaceException ;","public Integer createPerson(final String firstName,final String lastName,final String nickName) throws UniformInterfaceException ;",0.9765625
2166,"public int createAlertingConfig(final String name,final boolean repeatUntilCleared,final boolean notifyOnRecovery,final boolean enabled,final Iterable<Integer> notificationGroupsIds) throws UniformInterfaceException ;","public Integer createAlertingConfig(final String name,final boolean repeatUntilCleared,final boolean notifyOnRecovery,final boolean enabled,final Iterable<Integer> notificationGroupsIds) throws UniformInterfaceException ;",0.9771689497716894
2167,"public int createNotificationGroup(final String groupName,boolean enabled,final Iterable<Integer> notificationsIds) throws UniformInterfaceException ;","public Integer createNotificationGroup(final String groupName,boolean enabled,final Iterable<Integer> notificationsIds) throws UniformInterfaceException ;",0.9802631578947368
2168,public AlertingConfig findAlertingConfigById(final Long id) throws UniformInterfaceException ;,public AlertingConfig findAlertingConfigById(final int id) throws UniformInterfaceException ;,0.9732620320855616
2169,"public int createEmailNotificationForPersonOrGroup(final int id,final String address);","public Integer createEmailNotificationForPersonOrGroup(final int id,final String address);",0.9659090909090908
2170,"public int createThresholdQualifyingAttr(final int thresholdConfigId,final String attributeType,final String attributeValue) throws UniformInterfaceException ;","public Integer createThresholdQualifyingAttr(final int thresholdConfigId,final String attributeType,final String attributeValue) throws UniformInterfaceException ;",0.9813664596273292
2171,"@Override public int createThresholdContextAttr(final int thresholdConfigId,final String attributeType) throws UniformInterfaceException {
  final Map<String,?> thresholdContextAttr=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",thresholdConfigId,attributeType)),""String_Node_Str"",thresholdConfigId,""String_Node_Str"",attributeType);
  final URI location=doPost(THRESHOLD_CONTEXT_ATTR_PATH,thresholdContextAttr);
  return extractIdFromURI(location);
}","@Override public Integer createThresholdContextAttr(final int thresholdConfigId,final String attributeType) throws UniformInterfaceException {
  final Map<String,?> thresholdContextAttr=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",thresholdConfigId,attributeType)),""String_Node_Str"",thresholdConfigId,""String_Node_Str"",attributeType);
  final URI location=doPost(THRESHOLD_CONTEXT_ATTR_PATH,thresholdContextAttr);
  return extractIdFromURI(location);
}",0.989648033126294
2172,"private int extractIdFromURI(final URI location){
  final Iterable<String> explodedPath=PATH_SPLITTER.split(location.getPath());
  final Iterator<String> iterator=explodedPath.iterator();
  if (!iterator.hasNext()) {
    return -1;
  }
 else {
    String lastSplit=null;
    while (iterator.hasNext()) {
      lastSplit=iterator.next();
    }
    return Integer.valueOf(lastSplit);
  }
}","private Integer extractIdFromURI(final URI location){
  final Iterable<String> explodedPath=PATH_SPLITTER.split(location.getPath());
  final Iterator<String> iterator=explodedPath.iterator();
  if (!iterator.hasNext()) {
    return -1;
  }
 else {
    String lastSplit=null;
    while (iterator.hasNext()) {
      lastSplit=iterator.next();
    }
    return Integer.valueOf(lastSplit);
  }
}",0.987146529562982
2173,"@Override public int createNotificationGroup(final String groupName,final boolean enabled,final Iterable<Integer> notificationsIds){
  final Map<String,?> group=ImmutableMap.of(""String_Node_Str"",createLabel(groupName),""String_Node_Str"",enabled);
  final URI location=doPost(NOTIF_GROUP_PATH,group);
  final int notifGroupId=extractIdFromURI(location);
  for (  final int notifConfigId : notificationsIds) {
    final Map<String,?> mapping=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",notifGroupId,notifConfigId)),""String_Node_Str"",notifGroupId,""String_Node_Str"",notifConfigId);
    doPost(NOTIF_MAPPING_PATH,mapping);
  }
  return notifGroupId;
}","@Override public Integer createNotificationGroup(final String groupName,final boolean enabled,final Iterable<Integer> notificationsIds){
  final Map<String,?> group=ImmutableMap.of(""String_Node_Str"",createLabel(groupName),""String_Node_Str"",enabled);
  final URI location=doPost(NOTIF_GROUP_PATH,group);
  final Integer notifGroupId=extractIdFromURI(location);
  for (  final int notifConfigId : notificationsIds) {
    final Map<String,?> mapping=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",notifGroupId,notifConfigId)),""String_Node_Str"",notifGroupId,""String_Node_Str"",notifConfigId);
    doPost(NOTIF_MAPPING_PATH,mapping);
  }
  return notifGroupId;
}",0.985358711566618
2174,"@Override public int createEmailNotificationForPersonOrGroup(final int id,final String address){
  return createNotificationForPersonOrGroup(id,address,""String_Node_Str"");
}","@Override public Integer createEmailNotificationForPersonOrGroup(final int id,final String address){
  return createNotificationForPersonOrGroup(id,address,""String_Node_Str"");
}",0.9828571428571428
2175,"@Override public int createThresholdQualifyingAttr(final int thresholdConfigId,final String attributeType,final String attributeValue) throws UniformInterfaceException {
  final Map<String,?> thresholdQualifyingAttr=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",thresholdConfigId,attributeType,attributeValue)),""String_Node_Str"",thresholdConfigId,""String_Node_Str"",attributeType,""String_Node_Str"",attributeValue);
  final URI location=doPost(THRESHOLD_QUALIFYING_ATTR_PATH,thresholdQualifyingAttr);
  return extractIdFromURI(location);
}","@Override public Integer createThresholdQualifyingAttr(final int thresholdConfigId,final String attributeType,final String attributeValue) throws UniformInterfaceException {
  final Map<String,?> thresholdQualifyingAttr=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",thresholdConfigId,attributeType,attributeValue)),""String_Node_Str"",thresholdConfigId,""String_Node_Str"",attributeType,""String_Node_Str"",attributeValue);
  final URI location=doPost(THRESHOLD_QUALIFYING_ATTR_PATH,thresholdQualifyingAttr);
  return extractIdFromURI(location);
}",0.9912434325744308
2176,"@Override public int createSmsNotificationForPersonOrGroup(final int id,final String address){
  return createNotificationForPersonOrGroup(id,address,""String_Node_Str"");
}","@Override public Integer createSmsNotificationForPersonOrGroup(final int id,final String address){
  return createNotificationForPersonOrGroup(id,address,""String_Node_Str"");
}",0.9826589595375722
2177,"@Override public int createGroup(final String name){
  final Map<String,?> group=ImmutableMap.of(""String_Node_Str"",createLabel(name),""String_Node_Str"",Boolean.TRUE);
  final URI location=doPost(PERSON_PATH,group);
  return extractIdFromURI(location);
}","@Override public Integer createGroup(final String name){
  final Map<String,?> group=ImmutableMap.of(""String_Node_Str"",createLabel(name),""String_Node_Str"",Boolean.TRUE);
  final URI location=doPost(PERSON_PATH,group);
  return extractIdFromURI(location);
}",0.9803149606299212
2178,"@Override public int createThresholdConfig(final String name,final String monitoredEventType,final String monitoredAttributeType,@Nullable final Double minThresholdValue,@Nullable final Double maxThresholdValue,final Long minThresholdSamples,final Long maxSampleWindowMs,final Long clearingIntervalMs,final int alertingConfigId) throws UniformInterfaceException {
  final ImmutableMap.Builder<String,Object> thresholdConfigBuilder=new ImmutableMap.Builder<String,Object>().put(""String_Node_Str"",createLabel(name)).put(""String_Node_Str"",monitoredEventType).put(""String_Node_Str"",monitoredAttributeType).put(""String_Node_Str"",minThresholdSamples).put(""String_Node_Str"",maxSampleWindowMs).put(""String_Node_Str"",clearingIntervalMs).put(""String_Node_Str"",alertingConfigId);
  if (minThresholdValue != null) {
    thresholdConfigBuilder.put(""String_Node_Str"",minThresholdValue);
  }
  if (maxThresholdValue != null) {
    thresholdConfigBuilder.put(""String_Node_Str"",maxThresholdValue);
  }
  final Map<String,?> thresholdConfig=thresholdConfigBuilder.build();
  final URI location=doPost(THRESHOLD_CONFIG_PATH,thresholdConfig);
  return extractIdFromURI(location);
}","@Override public Integer createThresholdConfig(final String name,final String monitoredEventType,final String monitoredAttributeType,@Nullable final Double minThresholdValue,@Nullable final Double maxThresholdValue,final Long minThresholdSamples,final Long maxSampleWindowMs,final Long clearingIntervalMs,final int alertingConfigId) throws UniformInterfaceException {
  final ImmutableMap.Builder<String,Object> thresholdConfigBuilder=new ImmutableMap.Builder<String,Object>().put(""String_Node_Str"",createLabel(name)).put(""String_Node_Str"",monitoredEventType).put(""String_Node_Str"",monitoredAttributeType).put(""String_Node_Str"",minThresholdSamples).put(""String_Node_Str"",maxSampleWindowMs).put(""String_Node_Str"",clearingIntervalMs).put(""String_Node_Str"",alertingConfigId);
  if (minThresholdValue != null) {
    thresholdConfigBuilder.put(""String_Node_Str"",minThresholdValue);
  }
  if (maxThresholdValue != null) {
    thresholdConfigBuilder.put(""String_Node_Str"",maxThresholdValue);
  }
  final Map<String,?> thresholdConfig=thresholdConfigBuilder.build();
  final URI location=doPost(THRESHOLD_CONFIG_PATH,thresholdConfig);
  return extractIdFromURI(location);
}",0.9957007738607052
2179,"@Override public int createPerson(final String firstName,final String lastName,final String nickName) throws UniformInterfaceException {
  final Map<String,String> person=ImmutableMap.of(""String_Node_Str"",firstName,""String_Node_Str"",lastName,""String_Node_Str"",createLabel(nickName),""String_Node_Str"",""String_Node_Str"");
  final URI location=doPost(PERSON_PATH,person);
  return extractIdFromURI(location);
}","@Override public Integer createPerson(final String firstName,final String lastName,final String nickName) throws UniformInterfaceException {
  final Map<String,String> person=ImmutableMap.of(""String_Node_Str"",firstName,""String_Node_Str"",lastName,""String_Node_Str"",createLabel(nickName),""String_Node_Str"",""String_Node_Str"");
  final URI location=doPost(PERSON_PATH,person);
  return extractIdFromURI(location);
}",0.9877750611246944
2180,"@Override public Iterable<NotifGroup> findNotificationGroupsForAlertingConfigById(final int id) throws UniformInterfaceException {
  return fetchObject(NOTIF_GROUP_MAPPING_PATH + ""String_Node_Str"" + id,new GenericType<List<NotifGroup>>(){
  }
);
}","@Override public Iterable<NotifGroup> findNotificationGroupsForAlertingConfigById(final int id) throws UniformInterfaceException {
  final List<NotifGroup> notifGroups=new ArrayList<NotifGroup>();
  final List<NotifGroupMapping> notifGroupMappings=fetchObject(NOTIF_GROUP_MAPPING_PATH + ""String_Node_Str"" + id,new GenericType<List<NotifGroupMapping>>(){
  }
);
  for (  final NotifGroupMapping notifGroupMapping : notifGroupMappings) {
    final NotifGroup notifGroup=findNotificationGroupById(notifGroupMapping.getId());
    notifGroups.add(notifGroup);
  }
  return notifGroups;
}",0.5790108564535585
2181,"@Override public int createAlertingConfig(final String name,final boolean repeatUntilCleared,final boolean notifyOnRecovery,final boolean enabled,final Iterable<Integer> notificationGroupsIds) throws UniformInterfaceException {
  final Map<String,?> alertingConfig=ImmutableMap.of(""String_Node_Str"",createLabel(name),""String_Node_Str"",repeatUntilCleared ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",notifyOnRecovery,""String_Node_Str"",enabled);
  final URI location=doPost(ALERTING_CONFIG_PATH,alertingConfig);
  final int alertingConfigId=extractIdFromURI(location);
  for (  final int notifGroupId : notificationGroupsIds) {
    final Map<String,?> mapping=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",alertingConfigId,notifGroupId)),""String_Node_Str"",alertingConfigId,""String_Node_Str"",notifGroupId);
    doPost(NOTIF_GROUP_MAPPING_PATH,mapping);
  }
  return alertingConfigId;
}","@Override public Integer createAlertingConfig(final String name,final boolean repeatUntilCleared,final boolean notifyOnRecovery,final boolean enabled,final Iterable<Integer> notificationGroupsIds) throws UniformInterfaceException {
  final Map<String,?> alertingConfig=ImmutableMap.of(""String_Node_Str"",createLabel(name),""String_Node_Str"",repeatUntilCleared ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",notifyOnRecovery,""String_Node_Str"",enabled);
  final URI location=doPost(ALERTING_CONFIG_PATH,alertingConfig);
  final Integer alertingConfigId=extractIdFromURI(location);
  for (  final int notifGroupId : notificationGroupsIds) {
    final Map<String,?> mapping=ImmutableMap.of(""String_Node_Str"",createLabel(String.format(""String_Node_Str"",alertingConfigId,notifGroupId)),""String_Node_Str"",alertingConfigId,""String_Node_Str"",notifGroupId);
    doPost(NOTIF_GROUP_MAPPING_PATH,mapping);
  }
  return alertingConfigId;
}",0.9892588614393124
2182,"@Override public AlertingConfig findAlertingConfigById(final Long id) throws UniformInterfaceException {
  return fetchObject(ALERTING_CONFIG_PATH + ""String_Node_Str"" + id,new GenericType<AlertingConfig>(){
  }
);
}","@Override public AlertingConfig findAlertingConfigById(final int id) throws UniformInterfaceException {
  return fetchObject(ALERTING_CONFIG_PATH + ""String_Node_Str"" + id,new GenericType<AlertingConfig>(){
  }
);
}",0.9836829836829836
2183,"private int createNotificationForPersonOrGroup(final int id,final String address,final String notificationType){
  final Map<String,?> group=ImmutableMap.of(""String_Node_Str"",id,""String_Node_Str"",address,""String_Node_Str"",notificationType,""String_Node_Str"",createLabel(address));
  final URI location=doPost(NOTIF_CONFIG_PATH,group);
  return extractIdFromURI(location);
}","private Integer createNotificationForPersonOrGroup(final int id,final String address,final String notificationType){
  final Map<String,?> group=ImmutableMap.of(""String_Node_Str"",id,""String_Node_Str"",address,""String_Node_Str"",notificationType,""String_Node_Str"",createLabel(address));
  final URI location=doPost(NOTIF_CONFIG_PATH,group);
  return extractIdFromURI(location);
}",0.9866310160427808
2184,"@JsonCreator public NotifGroup(@JsonProperty(""String_Node_Str"") final String groupName,@JsonProperty(""String_Node_Str"") final String enabled,@JsonProperty(""String_Node_Str"") final int id){
  this.groupName=groupName;
  this.enabled=!(enabled != null && enabled.equals(""String_Node_Str""));
  this.id=id;
}","@JsonCreator public NotifGroup(@JsonProperty(""String_Node_Str"") final String groupName,@JsonProperty(""String_Node_Str"") final String enabled,@JsonProperty(""String_Node_Str"") final Integer id){
  this.groupName=groupName;
  this.enabled=!(enabled != null && enabled.equals(""String_Node_Str""));
  this.id=id;
}",0.9836601307189542
2185,"public int getId(){
  return id;
}","public Integer getId(){
  return id;
}",0.9166666666666666
2186,"public int getId(){
  return id;
}","public Integer getId(){
  return id;
}",0.9166666666666666
2187,"@JsonCreator public Person(@JsonProperty(""String_Node_Str"") final String nickName,@JsonProperty(""String_Node_Str"") final String firstName,@JsonProperty(""String_Node_Str"") final String lastName,@JsonProperty(""String_Node_Str"") final String groupAlias,@JsonProperty(""String_Node_Str"") final int id){
  this.nickName=nickName;
  this.firstName=firstName;
  this.lastName=lastName;
  isGroupAlias=!(groupAlias != null && groupAlias.equals(""String_Node_Str""));
  this.id=id;
}","@JsonCreator public Person(@JsonProperty(""String_Node_Str"") final String nickName,@JsonProperty(""String_Node_Str"") final String firstName,@JsonProperty(""String_Node_Str"") final String lastName,@JsonProperty(""String_Node_Str"") final String groupAlias,@JsonProperty(""String_Node_Str"") final Integer id){
  this.nickName=nickName;
  this.firstName=firstName;
  this.lastName=lastName;
  isGroupAlias=!(groupAlias != null && groupAlias.equals(""String_Node_Str""));
  this.id=id;
}",0.9894291754756872
2188,"@Override public List<NotifConfig> findEmailsAndNotificationTypesForGroupById(final int id) throws UniformInterfaceException {
  return fetchObject(NOTIF_MAPPING_PATH + ""String_Node_Str"" + id,new GenericType<List<NotifConfig>>(){
  }
);
}","@Override public List<NotifConfig> findEmailsAndNotificationTypesForGroupById(final int id) throws UniformInterfaceException {
  final List<NotifConfig> notifConfigs=new ArrayList<NotifConfig>();
  final List<NotifMapping> notifMappings=fetchObject(NOTIF_MAPPING_PATH + ""String_Node_Str"" + id,new GenericType<List<NotifMapping>>(){
  }
);
  for (  final NotifMapping notifMapping : notifMappings) {
    final NotifConfig notifConfig=findNotificationById(notifMapping.getId());
    notifConfigs.add(notifConfig);
  }
  return notifConfigs;
}",0.5809768637532133
2189,"public AlertingConfigFormModel(ConfDataAlertingConfig confDataAlertingConfig){
  if (confDataAlertingConfig != null) {
    this.setPropertiesFromMap(confDataAlertingConfig.toPropertiesMap());
  }
 else {
    this.setNotifRepeatMode(NotificationRepeatMode.NO_REPEAT);
    this.setNotifOnRecovery(true);
  }
  this.allGroupNames=new ArrayList<String>();
  this.allGroups=new ArrayList<ConfDataNotifGroup>();
  this.notificationGroups=new ArrayList<ConfDataNotifGroup>();
  this.allManagingKeyNames=new ArrayList<String>();
  this.allManagingKeys=new ArrayList<ConfDataManagingKey>();
  this.managingKeys=new ArrayList<ConfDataManagingKey>();
}","public AlertingConfigFormModel(ConfDataAlertingConfig confDataAlertingConfig){
  if (confDataAlertingConfig != null) {
    this.populatePropertiesFromMap(confDataAlertingConfig.toPropertiesMap());
  }
 else {
    this.setNotifRepeatMode(NotificationRepeatMode.NO_REPEAT);
    this.setNotifOnRecovery(true);
  }
  this.allGroupNames=new ArrayList<String>();
  this.allGroups=new ArrayList<ConfDataNotifGroup>();
  this.notificationGroups=new ArrayList<ConfDataNotifGroup>();
  this.allManagingKeyNames=new ArrayList<String>();
  this.allManagingKeys=new ArrayList<ConfDataManagingKey>();
  this.managingKeys=new ArrayList<ConfDataManagingKey>();
}",0.9914529914529916
2190,"public AlertingConfigInputFormPanel(final String name,final FeedbackPanel feedback,final ModalWindow window,final AlertingConfigsPanel parentPanel,final AlertingConfigFormModel alertingConfigFormModel,final ModalMode mode){
  super(name);
  boolean formEnabled=false;
  if (mode == null) {
    throw new IllegalStateException();
  }
 else   if (mode.equals(INSERT)) {
    alertingConfigFormModel.getNotificationGroupList().add(new ConfDataNotifGroup());
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=(alertingConfigFormModel.initNotificationGroupListChoices(confDataDAO) && alertingConfigFormModel.initManagingKeyListChoices(confDataDAO));
  }
 else   if (mode.equals(UPDATE)) {
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=(alertingConfigFormModel.initNotificationGroupListChoices(confDataDAO) && alertingConfigFormModel.initNotificationGroupList(confDataDAO) && alertingConfigFormModel.initManagingKeyListChoices(confDataDAO)&& alertingConfigFormModel.initManagingKeyList(confDataDAO));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + mode);
  }
  final Form<AlertingConfigFormModel> form=new Form<AlertingConfigFormModel>(""String_Node_Str"",new CompoundPropertyModel<AlertingConfigFormModel>(alertingConfigFormModel));
  form.setOutputMarkupId(true);
  add(form);
  if (!formEnabled) {
    feedback.error(""String_Node_Str"");
    form.setEnabled(false);
  }
  final RequiredTextField<String> alertingConfigName=new RequiredTextField<String>(""String_Node_Str"");
  form.add(alertingConfigName);
  final RequiredTextField<Long> notifRepeatIntervalMs=new RequiredTextField<Long>(""String_Node_Str"");
  notifRepeatIntervalMs.add(new MinimumValidator<Long>(0L));
  notifRepeatIntervalMs.setOutputMarkupPlaceholderTag(true);
  form.add(notifRepeatIntervalMs);
  final WebMarkupContainerWithAssociatedMarkup notifRepeatIntervalMsLabel=new WebMarkupContainerWithAssociatedMarkup(""String_Node_Str"");
  notifRepeatIntervalMsLabel.setOutputMarkupPlaceholderTag(true);
  form.add(notifRepeatIntervalMsLabel);
  if (alertingConfigFormModel.getNotifRepeatMode() == null || alertingConfigFormModel.getNotifRepeatMode().equals(NotificationRepeatMode.NO_REPEAT)) {
    notifRepeatIntervalMs.setVisible(false);
    notifRepeatIntervalMsLabel.setVisible(false);
  }
  final DropDownChoice<NotificationRepeatMode> notifRepeatMode=new DropDownChoice<NotificationRepeatMode>(""String_Node_Str"",new PropertyModel<NotificationRepeatMode>(alertingConfigFormModel,""String_Node_Str""),Arrays.asList(NotificationRepeatMode.values()));
  notifRepeatMode.setRequired(true);
  notifRepeatMode.setOutputMarkupId(true);
  notifRepeatMode.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      NotificationRepeatMode mode=notifRepeatMode.getModelObject();
      if (mode == null || mode.equals(NotificationRepeatMode.NO_REPEAT)) {
        alertingConfigFormModel.setNotifRepeatIntervalMs(null);
        notifRepeatIntervalMsLabel.setVisible(false);
        notifRepeatIntervalMs.setVisible(false);
        target.addComponent(notifRepeatIntervalMsLabel);
        target.addComponent(notifRepeatIntervalMs);
      }
 else {
        notifRepeatIntervalMsLabel.setVisible(true);
        notifRepeatIntervalMs.setVisible(true);
        target.addComponent(notifRepeatIntervalMsLabel);
        target.addComponent(notifRepeatIntervalMs);
      }
    }
  }
);
  form.add(notifRepeatMode);
  final CheckBox notifOnRecovery=new CheckBox(""String_Node_Str"");
  form.add(notifOnRecovery);
  final CheckBox enabled=new CheckBox(""String_Node_Str"");
  form.add(enabled);
  final WebMarkupContainer notificationGroupListContainer=new WebMarkupContainer(""String_Node_Str"");
  notificationGroupListContainer.setOutputMarkupId(true);
  form.add(notificationGroupListContainer);
  final ListView<ConfDataNotifGroup> notificationGroupList=new ListView<ConfDataNotifGroup>(""String_Node_Str"",alertingConfigFormModel.getNotificationGroupList()){
    private Component hiddenRemoveButton=null;
    @Override public void populateItem(    final ListItem item){
      final ListView<ConfDataNotifGroup> thisList=this;
      final ConfDataNotifGroup group=(ConfDataNotifGroup)item.getModelObject();
      final DropDownChoice<String> notificationGroup=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(group.getLabel()),alertingConfigFormModel.getNotificationGroupNameList());
      notificationGroup.setRequired(true);
      notificationGroup.setOutputMarkupId(true);
      notificationGroup.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedGroupName=notificationGroup.getModelObject();
          ConfDataNotifGroup selectedGroup=alertingConfigFormModel.getNotificationGroupByGroupName(selectedGroupName);
          group.setPropertiesFromMap(selectedGroup.toPropertiesMap());
          target.addComponent(notificationGroup);
        }
      }
);
      item.add(notificationGroup);
      AjaxFallbackButton removeNotificationGroupButton=new AjaxFallbackButton(""String_Node_Str"",form){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form<?> form){
          alertingConfigFormModel.getNotificationGroupList().remove(item.getIndex());
          thisList.modelChanged();
          target.addComponent(notificationGroupListContainer);
        }
      }
;
      if (alertingConfigFormModel.getNotificationGroupList().size() <= 1) {
        removeNotificationGroupButton.setVisible(false);
        this.hiddenRemoveButton=removeNotificationGroupButton;
      }
 else {
        removeNotificationGroupButton.setVisible(true);
        if (this.hiddenRemoveButton != null) {
          this.hiddenRemoveButton.setVisible(true);
          this.hiddenRemoveButton=null;
        }
      }
      removeNotificationGroupButton.setDefaultFormProcessing(false);
      removeNotificationGroupButton.setOutputMarkupPlaceholderTag(true);
      item.add(removeNotificationGroupButton);
    }
  }
;
  notificationGroupList.setOutputMarkupId(true);
  notificationGroupListContainer.add(notificationGroupList);
  final AjaxFallbackButton addNotificationGroupButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      alertingConfigFormModel.getNotificationGroupList().add(new ConfDataNotifGroup());
      notificationGroupList.modelChanged();
      target.addComponent(notificationGroupListContainer);
    }
  }
;
  addNotificationGroupButton.setDefaultFormProcessing(false);
  form.add(addNotificationGroupButton);
  final WebMarkupContainer managingKeyListContainer=new WebMarkupContainer(""String_Node_Str"");
  managingKeyListContainer.setOutputMarkupId(true);
  form.add(managingKeyListContainer);
  final ListView<ConfDataManagingKey> managingKeyList=new ListView<ConfDataManagingKey>(""String_Node_Str"",alertingConfigFormModel.getManagingKeyList()){
    @Override public void populateItem(    final ListItem item){
      final ListView<ConfDataManagingKey> thisList=this;
      final ConfDataManagingKey key=(ConfDataManagingKey)item.getModelObject();
      final DropDownChoice<String> managingKey=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(key.getKey()),alertingConfigFormModel.getManagingKeyNameList());
      managingKey.setRequired(true);
      managingKey.setOutputMarkupId(true);
      managingKey.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedKeyName=managingKey.getModelObject();
          ConfDataManagingKey selectedKey=alertingConfigFormModel.getManagingKeyByManagingKeyName(selectedKeyName);
          key.setPropertiesFromMap(selectedKey.toPropertiesMap());
          target.addComponent(managingKey);
        }
      }
);
      item.add(managingKey);
      AjaxFallbackButton removeManagingKeyButton=new AjaxFallbackButton(""String_Node_Str"",form){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form<?> form){
          alertingConfigFormModel.getManagingKeyList().remove(item.getIndex());
          thisList.modelChanged();
          target.addComponent(managingKeyListContainer);
        }
      }
;
      removeManagingKeyButton.setDefaultFormProcessing(false);
      removeManagingKeyButton.setOutputMarkupPlaceholderTag(true);
      item.add(removeManagingKeyButton);
    }
  }
;
  managingKeyList.setOutputMarkupId(true);
  managingKeyListContainer.add(managingKeyList);
  final AjaxFallbackButton addManagingKeyButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      alertingConfigFormModel.getManagingKeyList().add(new ConfDataManagingKey());
      managingKeyList.modelChanged();
      target.addComponent(managingKeyListContainer);
    }
  }
;
  addManagingKeyButton.setDefaultFormProcessing(false);
  form.add(addManagingKeyButton);
  final Label warningLabel=new Label(""String_Node_Str"",""String_Node_Str"");
  warningLabel.setOutputMarkupPlaceholderTag(true);
  warningLabel.setVisible(false);
  form.add(warningLabel);
  form.add(new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      AlertingConfigFormModel notifGroup=(AlertingConfigFormModel)form.getModel().getObject();
      try {
        ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
        boolean success;
        if (mode.equals(INSERT)) {
          success=notifGroup.insert(confDataDAO);
        }
 else         if (mode.equals(UPDATE)) {
          success=notifGroup.update(confDataDAO);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + mode);
        }
        String statusMessage=notifGroup.getLastStatusMessage();
        if (success) {
          window.close(target);
          parentPanel.sendInfoFeedback(statusMessage);
        }
 else {
          error(statusMessage);
          warningLabel.setVisible(true);
          target.addComponent(warningLabel);
        }
        log.info(statusMessage);
      }
 catch (      Exception e) {
        log.warn(e);
        error(e);
        warningLabel.setVisible(true);
        target.addComponent(warningLabel);
      }
      target.addComponent(feedback);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      warningLabel.setVisible(true);
      target.addComponent(warningLabel);
      target.addComponent(feedback);
    }
  }
);
  AjaxFallbackButton cancelButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      window.close(target);
    }
  }
;
  cancelButton.setDefaultFormProcessing(false);
  form.add(cancelButton);
}","public AlertingConfigInputFormPanel(final String name,final FeedbackPanel feedback,final ModalWindow window,final AlertingConfigsPanel parentPanel,final AlertingConfigFormModel alertingConfigFormModel,final ModalMode mode){
  super(name);
  boolean formEnabled=false;
  if (mode == null) {
    throw new IllegalStateException();
  }
 else   if (mode.equals(INSERT)) {
    alertingConfigFormModel.getNotificationGroupList().add(new ConfDataNotifGroup());
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=(alertingConfigFormModel.initNotificationGroupListChoices(confDataDAO) && alertingConfigFormModel.initManagingKeyListChoices(confDataDAO));
  }
 else   if (mode.equals(UPDATE)) {
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=(alertingConfigFormModel.initNotificationGroupListChoices(confDataDAO) && alertingConfigFormModel.initNotificationGroupList(confDataDAO) && alertingConfigFormModel.initManagingKeyListChoices(confDataDAO)&& alertingConfigFormModel.initManagingKeyList(confDataDAO));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + mode);
  }
  final Form<AlertingConfigFormModel> form=new Form<AlertingConfigFormModel>(""String_Node_Str"",new CompoundPropertyModel<AlertingConfigFormModel>(alertingConfigFormModel));
  form.setOutputMarkupId(true);
  add(form);
  if (!formEnabled) {
    feedback.error(""String_Node_Str"");
    form.setEnabled(false);
  }
  final RequiredTextField<String> alertingConfigName=new RequiredTextField<String>(""String_Node_Str"");
  form.add(alertingConfigName);
  final RequiredTextField<Long> notifRepeatIntervalMs=new RequiredTextField<Long>(""String_Node_Str"");
  notifRepeatIntervalMs.add(new MinimumValidator<Long>(0L));
  notifRepeatIntervalMs.setOutputMarkupPlaceholderTag(true);
  form.add(notifRepeatIntervalMs);
  final WebMarkupContainerWithAssociatedMarkup notifRepeatIntervalMsLabel=new WebMarkupContainerWithAssociatedMarkup(""String_Node_Str"");
  notifRepeatIntervalMsLabel.setOutputMarkupPlaceholderTag(true);
  form.add(notifRepeatIntervalMsLabel);
  if (alertingConfigFormModel.getNotifRepeatMode() == null || alertingConfigFormModel.getNotifRepeatMode().equals(NotificationRepeatMode.NO_REPEAT)) {
    notifRepeatIntervalMs.setVisible(false);
    notifRepeatIntervalMsLabel.setVisible(false);
  }
  final DropDownChoice<NotificationRepeatMode> notifRepeatMode=new DropDownChoice<NotificationRepeatMode>(""String_Node_Str"",new PropertyModel<NotificationRepeatMode>(alertingConfigFormModel,""String_Node_Str""),Arrays.asList(NotificationRepeatMode.values()));
  notifRepeatMode.setRequired(true);
  notifRepeatMode.setOutputMarkupId(true);
  notifRepeatMode.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      NotificationRepeatMode mode=notifRepeatMode.getModelObject();
      if (mode == null || mode.equals(NotificationRepeatMode.NO_REPEAT)) {
        alertingConfigFormModel.setNotifRepeatIntervalMs(null);
        notifRepeatIntervalMsLabel.setVisible(false);
        notifRepeatIntervalMs.setVisible(false);
        target.addComponent(notifRepeatIntervalMsLabel);
        target.addComponent(notifRepeatIntervalMs);
      }
 else {
        notifRepeatIntervalMsLabel.setVisible(true);
        notifRepeatIntervalMs.setVisible(true);
        target.addComponent(notifRepeatIntervalMsLabel);
        target.addComponent(notifRepeatIntervalMs);
      }
    }
  }
);
  form.add(notifRepeatMode);
  final CheckBox notifOnRecovery=new CheckBox(""String_Node_Str"");
  form.add(notifOnRecovery);
  final CheckBox enabled=new CheckBox(""String_Node_Str"");
  form.add(enabled);
  final WebMarkupContainer notificationGroupListContainer=new WebMarkupContainer(""String_Node_Str"");
  notificationGroupListContainer.setOutputMarkupId(true);
  form.add(notificationGroupListContainer);
  final ListView<ConfDataNotifGroup> notificationGroupList=new ListView<ConfDataNotifGroup>(""String_Node_Str"",alertingConfigFormModel.getNotificationGroupList()){
    private Component hiddenRemoveButton=null;
    @Override public void populateItem(    final ListItem item){
      final ListView<ConfDataNotifGroup> thisList=this;
      final ConfDataNotifGroup group=(ConfDataNotifGroup)item.getModelObject();
      final DropDownChoice<String> notificationGroup=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(group.getLabel()),alertingConfigFormModel.getNotificationGroupNameList());
      notificationGroup.setRequired(true);
      notificationGroup.setOutputMarkupId(true);
      notificationGroup.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedGroupName=notificationGroup.getModelObject();
          ConfDataNotifGroup selectedGroup=alertingConfigFormModel.getNotificationGroupByGroupName(selectedGroupName);
          group.populatePropertiesFromMap(selectedGroup.toPropertiesMap());
          target.addComponent(notificationGroup);
        }
      }
);
      item.add(notificationGroup);
      AjaxFallbackButton removeNotificationGroupButton=new AjaxFallbackButton(""String_Node_Str"",form){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form<?> form){
          alertingConfigFormModel.getNotificationGroupList().remove(item.getIndex());
          thisList.modelChanged();
          target.addComponent(notificationGroupListContainer);
        }
      }
;
      if (alertingConfigFormModel.getNotificationGroupList().size() <= 1) {
        removeNotificationGroupButton.setVisible(false);
        this.hiddenRemoveButton=removeNotificationGroupButton;
      }
 else {
        removeNotificationGroupButton.setVisible(true);
        if (this.hiddenRemoveButton != null) {
          this.hiddenRemoveButton.setVisible(true);
          this.hiddenRemoveButton=null;
        }
      }
      removeNotificationGroupButton.setDefaultFormProcessing(false);
      removeNotificationGroupButton.setOutputMarkupPlaceholderTag(true);
      item.add(removeNotificationGroupButton);
    }
  }
;
  notificationGroupList.setOutputMarkupId(true);
  notificationGroupListContainer.add(notificationGroupList);
  final AjaxFallbackButton addNotificationGroupButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      alertingConfigFormModel.getNotificationGroupList().add(new ConfDataNotifGroup());
      notificationGroupList.modelChanged();
      target.addComponent(notificationGroupListContainer);
    }
  }
;
  addNotificationGroupButton.setDefaultFormProcessing(false);
  form.add(addNotificationGroupButton);
  final WebMarkupContainer managingKeyListContainer=new WebMarkupContainer(""String_Node_Str"");
  managingKeyListContainer.setOutputMarkupId(true);
  form.add(managingKeyListContainer);
  final ListView<ConfDataManagingKey> managingKeyList=new ListView<ConfDataManagingKey>(""String_Node_Str"",alertingConfigFormModel.getManagingKeyList()){
    @Override public void populateItem(    final ListItem item){
      final ListView<ConfDataManagingKey> thisList=this;
      final ConfDataManagingKey key=(ConfDataManagingKey)item.getModelObject();
      final DropDownChoice<String> managingKey=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(key.getKey()),alertingConfigFormModel.getManagingKeyNameList());
      managingKey.setRequired(true);
      managingKey.setOutputMarkupId(true);
      managingKey.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedKeyName=managingKey.getModelObject();
          ConfDataManagingKey selectedKey=alertingConfigFormModel.getManagingKeyByManagingKeyName(selectedKeyName);
          key.populatePropertiesFromMap(selectedKey.toPropertiesMap());
          target.addComponent(managingKey);
        }
      }
);
      item.add(managingKey);
      AjaxFallbackButton removeManagingKeyButton=new AjaxFallbackButton(""String_Node_Str"",form){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form<?> form){
          alertingConfigFormModel.getManagingKeyList().remove(item.getIndex());
          thisList.modelChanged();
          target.addComponent(managingKeyListContainer);
        }
      }
;
      removeManagingKeyButton.setDefaultFormProcessing(false);
      removeManagingKeyButton.setOutputMarkupPlaceholderTag(true);
      item.add(removeManagingKeyButton);
    }
  }
;
  managingKeyList.setOutputMarkupId(true);
  managingKeyListContainer.add(managingKeyList);
  final AjaxFallbackButton addManagingKeyButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      alertingConfigFormModel.getManagingKeyList().add(new ConfDataManagingKey());
      managingKeyList.modelChanged();
      target.addComponent(managingKeyListContainer);
    }
  }
;
  addManagingKeyButton.setDefaultFormProcessing(false);
  form.add(addManagingKeyButton);
  final Label warningLabel=new Label(""String_Node_Str"",""String_Node_Str"");
  warningLabel.setOutputMarkupPlaceholderTag(true);
  warningLabel.setVisible(false);
  form.add(warningLabel);
  form.add(new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      AlertingConfigFormModel notifGroup=(AlertingConfigFormModel)form.getModel().getObject();
      try {
        ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
        boolean success;
        if (mode.equals(INSERT)) {
          success=notifGroup.insert(confDataDAO);
        }
 else         if (mode.equals(UPDATE)) {
          success=notifGroup.update(confDataDAO);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + mode);
        }
        String statusMessage=notifGroup.getLastStatusMessage();
        if (success) {
          window.close(target);
          parentPanel.sendInfoFeedback(statusMessage);
        }
 else {
          error(statusMessage);
          warningLabel.setVisible(true);
          target.addComponent(warningLabel);
        }
        log.info(statusMessage);
      }
 catch (      Exception e) {
        log.warn(e);
        error(e);
        warningLabel.setVisible(true);
        target.addComponent(warningLabel);
      }
      target.addComponent(feedback);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      warningLabel.setVisible(true);
      target.addComponent(warningLabel);
      target.addComponent(feedback);
    }
  }
);
  AjaxFallbackButton cancelButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      window.close(target);
    }
  }
;
  cancelButton.setDefaultFormProcessing(false);
  form.add(cancelButton);
}",0.9990097227223622
2191,"@Override public void populateItem(final ListItem item){
  final ListView<ConfDataManagingKey> thisList=this;
  final ConfDataManagingKey key=(ConfDataManagingKey)item.getModelObject();
  final DropDownChoice<String> managingKey=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(key.getKey()),alertingConfigFormModel.getManagingKeyNameList());
  managingKey.setRequired(true);
  managingKey.setOutputMarkupId(true);
  managingKey.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      String selectedKeyName=managingKey.getModelObject();
      ConfDataManagingKey selectedKey=alertingConfigFormModel.getManagingKeyByManagingKeyName(selectedKeyName);
      key.setPropertiesFromMap(selectedKey.toPropertiesMap());
      target.addComponent(managingKey);
    }
  }
);
  item.add(managingKey);
  AjaxFallbackButton removeManagingKeyButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      alertingConfigFormModel.getManagingKeyList().remove(item.getIndex());
      thisList.modelChanged();
      target.addComponent(managingKeyListContainer);
    }
  }
;
  removeManagingKeyButton.setDefaultFormProcessing(false);
  removeManagingKeyButton.setOutputMarkupPlaceholderTag(true);
  item.add(removeManagingKeyButton);
}","@Override public void populateItem(final ListItem item){
  final ListView<ConfDataManagingKey> thisList=this;
  final ConfDataManagingKey key=(ConfDataManagingKey)item.getModelObject();
  final DropDownChoice<String> managingKey=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(key.getKey()),alertingConfigFormModel.getManagingKeyNameList());
  managingKey.setRequired(true);
  managingKey.setOutputMarkupId(true);
  managingKey.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      String selectedKeyName=managingKey.getModelObject();
      ConfDataManagingKey selectedKey=alertingConfigFormModel.getManagingKeyByManagingKeyName(selectedKeyName);
      key.populatePropertiesFromMap(selectedKey.toPropertiesMap());
      target.addComponent(managingKey);
    }
  }
);
  item.add(managingKey);
  AjaxFallbackButton removeManagingKeyButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      alertingConfigFormModel.getManagingKeyList().remove(item.getIndex());
      thisList.modelChanged();
      target.addComponent(managingKeyListContainer);
    }
  }
;
  removeManagingKeyButton.setDefaultFormProcessing(false);
  removeManagingKeyButton.setOutputMarkupPlaceholderTag(true);
  item.add(removeManagingKeyButton);
}",0.9960700250089316
2192,"@Override protected void onUpdate(AjaxRequestTarget target){
  String selectedKeyName=managingKey.getModelObject();
  ConfDataManagingKey selectedKey=alertingConfigFormModel.getManagingKeyByManagingKeyName(selectedKeyName);
  key.setPropertiesFromMap(selectedKey.toPropertiesMap());
  target.addComponent(managingKey);
}","@Override protected void onUpdate(AjaxRequestTarget target){
  String selectedKeyName=managingKey.getModelObject();
  ConfDataManagingKey selectedKey=alertingConfigFormModel.getManagingKeyByManagingKeyName(selectedKeyName);
  key.populatePropertiesFromMap(selectedKey.toPropertiesMap());
  target.addComponent(managingKey);
}",0.9829457364341084
2193,"public ManagingKeyFormModel(ConfDataManagingKey confDataManagingKey){
  if (confDataManagingKey != null)   this.setPropertiesFromMap(confDataManagingKey.toPropertiesMap());
}","public ManagingKeyFormModel(ConfDataManagingKey confDataManagingKey){
  if (confDataManagingKey != null)   this.populatePropertiesFromMap(confDataManagingKey.toPropertiesMap());
}",0.9745042492917848
2194,"public NotificationGroupFormModel(ConfDataNotifGroup confDataNotifGroup){
  if (confDataNotifGroup != null)   this.setPropertiesFromMap(confDataNotifGroup.toPropertiesMap());
  this.allPersonNickNames=new ArrayList<String>();
  this.allPersons=new ArrayList<ConfDataPerson>();
  this.allNotificationConfigs=new ArrayList<ConfDataNotifConfig>();
  this.notificationConfigsByPersonNickName=new HashMap<String,List<ConfDataNotifConfig>>();
  this.notificationConfigs=new ArrayList<ConfDataNotifConfig>();
}","public NotificationGroupFormModel(ConfDataNotifGroup confDataNotifGroup){
  if (confDataNotifGroup != null)   this.populatePropertiesFromMap(confDataNotifGroup.toPropertiesMap());
  this.allPersonNickNames=new ArrayList<String>();
  this.allPersons=new ArrayList<ConfDataPerson>();
  this.allNotificationConfigs=new ArrayList<ConfDataNotifConfig>();
  this.notificationConfigsByPersonNickName=new HashMap<String,List<ConfDataNotifConfig>>();
  this.notificationConfigs=new ArrayList<ConfDataNotifConfig>();
}",0.9891196834817012
2195,"@Override public void populateItem(final ListItem item){
  final ListView<ConfDataNotifConfig> thisList=this;
  final ConfDataNotifConfig config=(ConfDataNotifConfig)item.getModelObject();
  final DropDownChoice<String> notificationAddress=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(config,""String_Node_Str""),notifGroupFormModel.getNotificationConfigAddressList(config.getPersonId()));
  notificationAddress.setRequired(true);
  notificationAddress.setOutputMarkupId(true);
  notificationAddress.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      String selectedAddress=(String)notificationAddress.getModelObject();
      ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(selectedAddress);
      config.setPropertiesFromMap(notificationConfig.toPropertiesMap());
    }
  }
);
  item.add(notificationAddress);
  final DropDownChoice<String> notificationPerson=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(notifGroupFormModel.getPersonNickName(config.getPersonId())),notifGroupFormModel.getPersonList());
  notificationPerson.setRequired(true);
  notificationPerson.setOutputMarkupId(true);
  notificationPerson.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      String selectedPerson=notificationPerson.getModelObject();
      List<String> choices=notifGroupFormModel.getNotificationConfigAddressList(selectedPerson);
      if (choices.size() == 1) {
        ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(choices.get(0));
        config.setPropertiesFromMap(notificationConfig.toPropertiesMap());
      }
 else       config.setAddress(null);
      notificationAddress.setChoices(choices);
      notificationAddress.modelChanged();
      target.addComponent(notificationAddress);
    }
  }
);
  item.add(notificationPerson);
  AjaxFallbackButton removeNotificationConfigButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      notifGroupFormModel.getNotificationConfigList().remove(item.getIndex());
      thisList.modelChanged();
      target.addComponent(notificationConfigListContainer);
    }
  }
;
  if (notifGroupFormModel.getNotificationConfigList().size() <= 1) {
    removeNotificationConfigButton.setVisible(false);
    this.hiddenRemoveButton=removeNotificationConfigButton;
  }
 else {
    removeNotificationConfigButton.setVisible(true);
    if (this.hiddenRemoveButton != null) {
      this.hiddenRemoveButton.setVisible(true);
      this.hiddenRemoveButton=null;
    }
  }
  removeNotificationConfigButton.setOutputMarkupPlaceholderTag(true);
  removeNotificationConfigButton.setDefaultFormProcessing(false);
  item.add(removeNotificationConfigButton);
}","@Override public void populateItem(final ListItem item){
  final ListView<ConfDataNotifConfig> thisList=this;
  final ConfDataNotifConfig config=(ConfDataNotifConfig)item.getModelObject();
  final DropDownChoice<String> notificationAddress=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(config,""String_Node_Str""),notifGroupFormModel.getNotificationConfigAddressList(config.getPersonId()));
  notificationAddress.setRequired(true);
  notificationAddress.setOutputMarkupId(true);
  notificationAddress.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      String selectedAddress=(String)notificationAddress.getModelObject();
      ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(selectedAddress);
      config.populatePropertiesFromMap(notificationConfig.toPropertiesMap());
    }
  }
);
  item.add(notificationAddress);
  final DropDownChoice<String> notificationPerson=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(notifGroupFormModel.getPersonNickName(config.getPersonId())),notifGroupFormModel.getPersonList());
  notificationPerson.setRequired(true);
  notificationPerson.setOutputMarkupId(true);
  notificationPerson.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget target){
      String selectedPerson=notificationPerson.getModelObject();
      List<String> choices=notifGroupFormModel.getNotificationConfigAddressList(selectedPerson);
      if (choices.size() == 1) {
        ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(choices.get(0));
        config.populatePropertiesFromMap(notificationConfig.toPropertiesMap());
      }
 else       config.setAddress(null);
      notificationAddress.setChoices(choices);
      notificationAddress.modelChanged();
      target.addComponent(notificationAddress);
    }
  }
);
  item.add(notificationPerson);
  AjaxFallbackButton removeNotificationConfigButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      notifGroupFormModel.getNotificationConfigList().remove(item.getIndex());
      thisList.modelChanged();
      target.addComponent(notificationConfigListContainer);
    }
  }
;
  if (notifGroupFormModel.getNotificationConfigList().size() <= 1) {
    removeNotificationConfigButton.setVisible(false);
    this.hiddenRemoveButton=removeNotificationConfigButton;
  }
 else {
    removeNotificationConfigButton.setVisible(true);
    if (this.hiddenRemoveButton != null) {
      this.hiddenRemoveButton.setVisible(true);
      this.hiddenRemoveButton=null;
    }
  }
  removeNotificationConfigButton.setOutputMarkupPlaceholderTag(true);
  removeNotificationConfigButton.setDefaultFormProcessing(false);
  item.add(removeNotificationConfigButton);
}",0.996288798920378
2196,"public NotificationGroupInputFormPanel(final String name,final FeedbackPanel feedback,final ModalWindow window,final NotificationGroupsPanel parentPanel,final NotificationGroupFormModel notifGroupFormModel,final ModalMode mode){
  super(name);
  boolean formEnabled=true;
  if (mode == null) {
    throw new IllegalStateException();
  }
 else   if (mode.equals(INSERT)) {
    notifGroupFormModel.getNotificationConfigList().add(new ConfDataNotifConfig());
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=notifGroupFormModel.initNotificationConfigListChoices(confDataDAO);
  }
 else   if (mode.equals(UPDATE)) {
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=(notifGroupFormModel.initNotificationConfigList(confDataDAO) && notifGroupFormModel.initNotificationConfigListChoices(confDataDAO));
  }
  final Form<NotificationGroupFormModel> form=new Form<NotificationGroupFormModel>(""String_Node_Str"",new CompoundPropertyModel<NotificationGroupFormModel>(notifGroupFormModel));
  form.setOutputMarkupId(true);
  add(form);
  if (!formEnabled) {
    feedback.error(""String_Node_Str"");
    form.setEnabled(false);
  }
  final RequiredTextField<String> groupName=new RequiredTextField<String>(""String_Node_Str"");
  form.add(groupName);
  final CheckBox enabled=new CheckBox(""String_Node_Str"");
  form.add(enabled);
  final WebMarkupContainer notificationConfigListContainer=new WebMarkupContainer(""String_Node_Str"");
  notificationConfigListContainer.setOutputMarkupId(true);
  form.add(notificationConfigListContainer);
  final ListView<ConfDataNotifConfig> notificationConfigList=new ListView<ConfDataNotifConfig>(""String_Node_Str"",notifGroupFormModel.getNotificationConfigList()){
    private Component hiddenRemoveButton=null;
    @Override public void populateItem(    final ListItem item){
      final ListView<ConfDataNotifConfig> thisList=this;
      final ConfDataNotifConfig config=(ConfDataNotifConfig)item.getModelObject();
      final DropDownChoice<String> notificationAddress=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(config,""String_Node_Str""),notifGroupFormModel.getNotificationConfigAddressList(config.getPersonId()));
      notificationAddress.setRequired(true);
      notificationAddress.setOutputMarkupId(true);
      notificationAddress.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedAddress=(String)notificationAddress.getModelObject();
          ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(selectedAddress);
          config.setPropertiesFromMap(notificationConfig.toPropertiesMap());
        }
      }
);
      item.add(notificationAddress);
      final DropDownChoice<String> notificationPerson=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(notifGroupFormModel.getPersonNickName(config.getPersonId())),notifGroupFormModel.getPersonList());
      notificationPerson.setRequired(true);
      notificationPerson.setOutputMarkupId(true);
      notificationPerson.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedPerson=notificationPerson.getModelObject();
          List<String> choices=notifGroupFormModel.getNotificationConfigAddressList(selectedPerson);
          if (choices.size() == 1) {
            ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(choices.get(0));
            config.setPropertiesFromMap(notificationConfig.toPropertiesMap());
          }
 else           config.setAddress(null);
          notificationAddress.setChoices(choices);
          notificationAddress.modelChanged();
          target.addComponent(notificationAddress);
        }
      }
);
      item.add(notificationPerson);
      AjaxFallbackButton removeNotificationConfigButton=new AjaxFallbackButton(""String_Node_Str"",form){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form<?> form){
          notifGroupFormModel.getNotificationConfigList().remove(item.getIndex());
          thisList.modelChanged();
          target.addComponent(notificationConfigListContainer);
        }
      }
;
      if (notifGroupFormModel.getNotificationConfigList().size() <= 1) {
        removeNotificationConfigButton.setVisible(false);
        this.hiddenRemoveButton=removeNotificationConfigButton;
      }
 else {
        removeNotificationConfigButton.setVisible(true);
        if (this.hiddenRemoveButton != null) {
          this.hiddenRemoveButton.setVisible(true);
          this.hiddenRemoveButton=null;
        }
      }
      removeNotificationConfigButton.setOutputMarkupPlaceholderTag(true);
      removeNotificationConfigButton.setDefaultFormProcessing(false);
      item.add(removeNotificationConfigButton);
    }
  }
;
  notificationConfigList.setOutputMarkupId(true);
  notificationConfigListContainer.add(notificationConfigList);
  final AjaxFallbackButton addNotificationConfigButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      notifGroupFormModel.getNotificationConfigList().add(new ConfDataNotifConfig());
      notificationConfigList.modelChanged();
      target.addComponent(notificationConfigListContainer);
    }
  }
;
  addNotificationConfigButton.setDefaultFormProcessing(false);
  form.add(addNotificationConfigButton);
  final Label warningLabel=new Label(""String_Node_Str"",""String_Node_Str"");
  warningLabel.setOutputMarkupPlaceholderTag(true);
  warningLabel.setVisible(false);
  form.add(warningLabel);
  form.add(new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      NotificationGroupFormModel notifGroup=(NotificationGroupFormModel)form.getModel().getObject();
      try {
        ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
        boolean success;
        if (mode == null) {
          throw new IllegalStateException();
        }
 else         if (mode.equals(INSERT)) {
          success=notifGroup.insert(confDataDAO);
        }
 else         if (mode.equals(UPDATE)) {
          success=notifGroup.update(confDataDAO);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + mode);
        }
        String statusMessage=notifGroup.getLastStatusMessage();
        if (success) {
          window.close(target);
          parentPanel.sendInfoFeedback(statusMessage);
        }
 else {
          error(statusMessage);
          warningLabel.setVisible(true);
          target.addComponent(warningLabel);
        }
        log.info(statusMessage);
      }
 catch (      Exception e) {
        log.warn(e);
        error(e);
        warningLabel.setVisible(true);
        target.addComponent(warningLabel);
      }
      target.addComponent(feedback);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      warningLabel.setVisible(true);
      target.addComponent(warningLabel);
      target.addComponent(feedback);
    }
  }
);
  AjaxFallbackButton cancelButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      window.close(target);
    }
  }
;
  cancelButton.setDefaultFormProcessing(false);
  form.add(cancelButton);
}","public NotificationGroupInputFormPanel(final String name,final FeedbackPanel feedback,final ModalWindow window,final NotificationGroupsPanel parentPanel,final NotificationGroupFormModel notifGroupFormModel,final ModalMode mode){
  super(name);
  boolean formEnabled=true;
  if (mode == null) {
    throw new IllegalStateException();
  }
 else   if (mode.equals(INSERT)) {
    notifGroupFormModel.getNotificationConfigList().add(new ConfDataNotifConfig());
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=notifGroupFormModel.initNotificationConfigListChoices(confDataDAO);
  }
 else   if (mode.equals(UPDATE)) {
    ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
    formEnabled=(notifGroupFormModel.initNotificationConfigList(confDataDAO) && notifGroupFormModel.initNotificationConfigListChoices(confDataDAO));
  }
  final Form<NotificationGroupFormModel> form=new Form<NotificationGroupFormModel>(""String_Node_Str"",new CompoundPropertyModel<NotificationGroupFormModel>(notifGroupFormModel));
  form.setOutputMarkupId(true);
  add(form);
  if (!formEnabled) {
    feedback.error(""String_Node_Str"");
    form.setEnabled(false);
  }
  final RequiredTextField<String> groupName=new RequiredTextField<String>(""String_Node_Str"");
  form.add(groupName);
  final CheckBox enabled=new CheckBox(""String_Node_Str"");
  form.add(enabled);
  final WebMarkupContainer notificationConfigListContainer=new WebMarkupContainer(""String_Node_Str"");
  notificationConfigListContainer.setOutputMarkupId(true);
  form.add(notificationConfigListContainer);
  final ListView<ConfDataNotifConfig> notificationConfigList=new ListView<ConfDataNotifConfig>(""String_Node_Str"",notifGroupFormModel.getNotificationConfigList()){
    private Component hiddenRemoveButton=null;
    @Override public void populateItem(    final ListItem item){
      final ListView<ConfDataNotifConfig> thisList=this;
      final ConfDataNotifConfig config=(ConfDataNotifConfig)item.getModelObject();
      final DropDownChoice<String> notificationAddress=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(config,""String_Node_Str""),notifGroupFormModel.getNotificationConfigAddressList(config.getPersonId()));
      notificationAddress.setRequired(true);
      notificationAddress.setOutputMarkupId(true);
      notificationAddress.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedAddress=(String)notificationAddress.getModelObject();
          ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(selectedAddress);
          config.populatePropertiesFromMap(notificationConfig.toPropertiesMap());
        }
      }
);
      item.add(notificationAddress);
      final DropDownChoice<String> notificationPerson=new DropDownChoice<String>(""String_Node_Str"",new Model<String>(notifGroupFormModel.getPersonNickName(config.getPersonId())),notifGroupFormModel.getPersonList());
      notificationPerson.setRequired(true);
      notificationPerson.setOutputMarkupId(true);
      notificationPerson.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        AjaxRequestTarget target){
          String selectedPerson=notificationPerson.getModelObject();
          List<String> choices=notifGroupFormModel.getNotificationConfigAddressList(selectedPerson);
          if (choices.size() == 1) {
            ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(choices.get(0));
            config.populatePropertiesFromMap(notificationConfig.toPropertiesMap());
          }
 else           config.setAddress(null);
          notificationAddress.setChoices(choices);
          notificationAddress.modelChanged();
          target.addComponent(notificationAddress);
        }
      }
);
      item.add(notificationPerson);
      AjaxFallbackButton removeNotificationConfigButton=new AjaxFallbackButton(""String_Node_Str"",form){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form<?> form){
          notifGroupFormModel.getNotificationConfigList().remove(item.getIndex());
          thisList.modelChanged();
          target.addComponent(notificationConfigListContainer);
        }
      }
;
      if (notifGroupFormModel.getNotificationConfigList().size() <= 1) {
        removeNotificationConfigButton.setVisible(false);
        this.hiddenRemoveButton=removeNotificationConfigButton;
      }
 else {
        removeNotificationConfigButton.setVisible(true);
        if (this.hiddenRemoveButton != null) {
          this.hiddenRemoveButton.setVisible(true);
          this.hiddenRemoveButton=null;
        }
      }
      removeNotificationConfigButton.setOutputMarkupPlaceholderTag(true);
      removeNotificationConfigButton.setDefaultFormProcessing(false);
      item.add(removeNotificationConfigButton);
    }
  }
;
  notificationConfigList.setOutputMarkupId(true);
  notificationConfigListContainer.add(notificationConfigList);
  final AjaxFallbackButton addNotificationConfigButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      notifGroupFormModel.getNotificationConfigList().add(new ConfDataNotifConfig());
      notificationConfigList.modelChanged();
      target.addComponent(notificationConfigListContainer);
    }
  }
;
  addNotificationConfigButton.setDefaultFormProcessing(false);
  form.add(addNotificationConfigButton);
  final Label warningLabel=new Label(""String_Node_Str"",""String_Node_Str"");
  warningLabel.setOutputMarkupPlaceholderTag(true);
  warningLabel.setVisible(false);
  form.add(warningLabel);
  form.add(new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      NotificationGroupFormModel notifGroup=(NotificationGroupFormModel)form.getModel().getObject();
      try {
        ConfDataDAO confDataDAO=((AreciboAlertManager)getApplication()).getConfDataDAO();
        boolean success;
        if (mode == null) {
          throw new IllegalStateException();
        }
 else         if (mode.equals(INSERT)) {
          success=notifGroup.insert(confDataDAO);
        }
 else         if (mode.equals(UPDATE)) {
          success=notifGroup.update(confDataDAO);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + mode);
        }
        String statusMessage=notifGroup.getLastStatusMessage();
        if (success) {
          window.close(target);
          parentPanel.sendInfoFeedback(statusMessage);
        }
 else {
          error(statusMessage);
          warningLabel.setVisible(true);
          target.addComponent(warningLabel);
        }
        log.info(statusMessage);
      }
 catch (      Exception e) {
        log.warn(e);
        error(e);
        warningLabel.setVisible(true);
        target.addComponent(warningLabel);
      }
      target.addComponent(feedback);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      warningLabel.setVisible(true);
      target.addComponent(warningLabel);
      target.addComponent(feedback);
    }
  }
);
  AjaxFallbackButton cancelButton=new AjaxFallbackButton(""String_Node_Str"",form){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      window.close(target);
    }
  }
;
  cancelButton.setDefaultFormProcessing(false);
  form.add(cancelButton);
}",0.9985590778097982
2197,"@Override protected void onUpdate(AjaxRequestTarget target){
  String selectedPerson=notificationPerson.getModelObject();
  List<String> choices=notifGroupFormModel.getNotificationConfigAddressList(selectedPerson);
  if (choices.size() == 1) {
    ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(choices.get(0));
    config.setPropertiesFromMap(notificationConfig.toPropertiesMap());
  }
 else   config.setAddress(null);
  notificationAddress.setChoices(choices);
  notificationAddress.modelChanged();
  target.addComponent(notificationAddress);
}","@Override protected void onUpdate(AjaxRequestTarget target){
  String selectedPerson=notificationPerson.getModelObject();
  List<String> choices=notifGroupFormModel.getNotificationConfigAddressList(selectedPerson);
  if (choices.size() == 1) {
    ConfDataNotifConfig notificationConfig=notifGroupFormModel.getNotificationConfigByAddress(choices.get(0));
    config.populatePropertiesFromMap(notificationConfig.toPropertiesMap());
  }
 else   config.setAddress(null);
  notificationAddress.setChoices(choices);
  notificationAddress.modelChanged();
  target.addComponent(notificationAddress);
}",0.9907016060862216
2198,"public PersonFormModel(ConfDataPerson confDataPerson,List<ConfDataNotifConfig> notificationConfigs){
  if (confDataPerson != null)   this.setPropertiesFromMap(confDataPerson.toPropertiesMap());
  if (notificationConfigs == null) {
    notificationConfigs=new ArrayList<ConfDataNotifConfig>();
  }
  this.notificationConfigs=notificationConfigs;
  if (this.isGroupAlias == null) {
    this.isGroupAlias=false;
  }
}","public PersonFormModel(ConfDataPerson confDataPerson,List<ConfDataNotifConfig> notificationConfigs){
  if (confDataPerson != null)   this.populatePropertiesFromMap(confDataPerson.toPropertiesMap());
  if (notificationConfigs == null) {
    notificationConfigs=new ArrayList<ConfDataNotifConfig>();
  }
  this.notificationConfigs=notificationConfigs;
  if (this.isGroupAlias == null) {
    this.isGroupAlias=false;
  }
}",0.9867947178871548
2199,"public ThresholdFormModel(ConfDataThresholdConfig confDataThresholdConfig){
  if (confDataThresholdConfig != null)   this.setPropertiesFromMap(confDataThresholdConfig.toPropertiesMap());
  this.allAlertingConfigNames=new ArrayList<String>();
  this.allAlertingConfigsByLabel=new ArrayList<ConfDataAlertingConfig>();
  this.allAlertingConfigsById=new ArrayList<ConfDataAlertingConfig>();
  this.qualifyingAttrs=new ArrayList<ConfDataThresholdQualifyingAttr>();
  this.contextAttrs=new ArrayList<ConfDataThresholdContextAttr>();
  if (confDataThresholdConfig == null) {
    this.setMinThresholdSamples(1L);
    this.setClearingIntervalMs(300000L);
    ConfDataThresholdContextAttr hostNameContextAttr=new ConfDataThresholdContextAttr();
    hostNameContextAttr.setAttributeType(""String_Node_Str"");
    this.contextAttrs.add(hostNameContextAttr);
  }
}","public ThresholdFormModel(ConfDataThresholdConfig confDataThresholdConfig){
  if (confDataThresholdConfig != null)   this.populatePropertiesFromMap(confDataThresholdConfig.toPropertiesMap());
  this.allAlertingConfigNames=new ArrayList<String>();
  this.allAlertingConfigsByLabel=new ArrayList<ConfDataAlertingConfig>();
  this.allAlertingConfigsById=new ArrayList<ConfDataAlertingConfig>();
  this.qualifyingAttrs=new ArrayList<ConfDataThresholdQualifyingAttr>();
  this.contextAttrs=new ArrayList<ConfDataThresholdContextAttr>();
  if (confDataThresholdConfig == null) {
    this.setMinThresholdSamples(1L);
    this.setClearingIntervalMs(300000L);
    ConfDataThresholdContextAttr hostNameContextAttr=new ConfDataThresholdContextAttr();
    hostNameContextAttr.setAttributeType(""String_Node_Str"");
    this.contextAttrs.add(hostNameContextAttr);
  }
}",0.9935408103347034
2200,"/** 
 * Process sampleCount sequential samples with identical values.  sampleCount will usually be 1, but may be larger than 1.  Implementors may just loop processing identical values, but some implementations may optimize adding a bunch of repeated values
 * @param timestamps   a TimelineTimestamps instance, indexed by sample number to get the time at which the sample was captured.
 * @param sampleNumber the number of the sample within the timeline, used to index timestamps
 * @param sampleCount  the count of sequential, identical values
 * @param opcode       the opcode of the sample value, which may not be a REPEAT opcode
 * @param value        the value of this kind of sample over the count of samples starting at the timegiven by the sampleNumber indexing the TimelineTimestamps.
 */
@Override public void processSamples(final TimelineTimes timestamps,final int sampleNumber,final int sampleCount,final SampleOpcode opcode,final Object value){
  for (int i=0; i < sampleCount; i++) {
    if (!firstSamples) {
      builder.append(""String_Node_Str"");
    }
 else {
      firstSamples=false;
    }
    final DateTime sampleTimestamp=timestamps.getSampleTimestamp(sampleNumber + i);
    if (sampleTimestamp == null) {
      continue;
    }
    builder.append(TimelineTimes.unixSeconds(sampleTimestamp)).append(""String_Node_Str"");
    if (opcode.getRepeater()) {
      builder.append(lastValue);
    }
 else {
      final String jsonValue=value == null ? ""String_Node_Str"" : value.toString();
      builder.append(jsonValue);
      lastValue=jsonValue;
    }
  }
}","/** 
 * Process sampleCount sequential samples with identical values.  sampleCount will usually be 1, but may be larger than 1.  Implementors may just loop processing identical values, but some implementations may optimize adding a bunch of repeated values
 * @param timestamps   a TimelineTimestamps instance, indexed by sample number to get the time at which the sample was captured.
 * @param sampleNumber the number of the sample within the timeline, used to index timestamps
 * @param sampleCount  the count of sequential, identical values
 * @param opcode       the opcode of the sample value, which may not be a REPEAT opcode
 * @param value        the value of this kind of sample over the count of samples starting at the timegiven by the sampleNumber indexing the TimelineTimestamps.
 */
@Override public void processSamples(final TimelineTimes timestamps,final int sampleNumber,final int sampleCount,final SampleOpcode opcode,final Object value){
  for (int i=0; i < sampleCount; i++) {
    final DateTime sampleTimestamp=timestamps.getSampleTimestamp(sampleNumber + i);
    if (sampleTimestamp == null) {
      continue;
    }
    if (!firstSamples) {
      builder.append(""String_Node_Str"");
    }
 else {
      firstSamples=false;
    }
    builder.append(TimelineTimes.unixSeconds(sampleTimestamp)).append(""String_Node_Str"");
    if (opcode.getRepeater()) {
      builder.append(lastValue);
    }
 else {
      final String jsonValue=value == null ? ""String_Node_Str"" : value.toString();
      builder.append(jsonValue);
      lastValue=jsonValue;
    }
  }
}",0.9104193138500636
2201,"public static void main(String[] args) throws Exception {
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifecycleModule(),new EmbeddedJettyJerseyModule(),new RESTEventReceiverModule(CollectorEventProcessor.class,""String_Node_Str""),new UDPEventReceiverModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(MBeanServer.class).toInstance(ManagementFactory.getPlatformMBeanServer());
    }
  }
,new RMIModule(),new CollectorModule());
  EventCollectorServer server=injector.getInstance(EventCollectorServer.class);
  server.run();
}","public static void main(String[] args) throws Exception {
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new LifecycleModule(),new DummyServiceLocatorModule(),new EmbeddedJettyJerseyModule(),new RESTEventReceiverModule(CollectorEventProcessor.class,""String_Node_Str""),new UDPEventReceiverModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(MBeanServer.class).toInstance(ManagementFactory.getPlatformMBeanServer());
    }
  }
,new RMIModule(),new CollectorModule());
  EventCollectorServer server=injector.getInstance(EventCollectorServer.class);
  server.run();
}",0.9728813559322034
2202,"@Override public void configure(){
  UDPEventReceiverConfig config=new ConfigurationObjectFactory(System.getProperties()).build(UDPEventReceiverConfig.class);
  bind(UDPEventReceiverConfig.class).toInstance(config);
  bind(DatagramSocket.class).annotatedWith(Names.named(""String_Node_Str"")).toProvider(DatagramSocketProvider.class);
  bind(ExecutorService.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(Executors.newFixedThreadPool(config.getNumUDPThreads()));
  bind(UDPEventHandler.class).asEagerSingleton();
  LifecycledProvider<UDPServer> lifecycledProvider=new LifecycledProvider<UDPServer>(binder(),UDPServer.class);
  lifecycledProvider.addListener(LifecycleEvent.START,new LifecycleAction<UDPServer>(){
    public void doAction(    UDPServer server){
      try {
        server.start();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  lifecycledProvider.addListener(LifecycleEvent.STOP,new LifecycleAction<UDPServer>(){
    public void doAction(    UDPServer server){
      server.stop();
    }
  }
);
  bind(UDPServer.class).toProvider(lifecycledProvider).asEagerSingleton();
  ExportBuilder builder=MBeanModule.newExporter(binder());
  builder.export(UDPEventHandler.class).as(""String_Node_Str"");
}","@Override public void configure(){
  UDPEventReceiverConfig config=new ConfigurationObjectFactory(System.getProperties()).build(UDPEventReceiverConfig.class);
  bind(UDPEventReceiverConfig.class).toInstance(config);
  bind(DatagramSocket.class).annotatedWith(Names.named(""String_Node_Str"")).toProvider(DatagramSocketProvider.class);
  bind(ExecutorService.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(Executors.newFixedThreadPool(config.getNumUDPThreads()));
  bind(Integer.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(config.getPort());
  bind(UDPEventHandler.class).asEagerSingleton();
  LifecycledProvider<UDPServer> lifecycledProvider=new LifecycledProvider<UDPServer>(binder(),UDPServer.class);
  lifecycledProvider.addListener(LifecycleEvent.START,new LifecycleAction<UDPServer>(){
    public void doAction(    UDPServer server){
      try {
        server.start();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  lifecycledProvider.addListener(LifecycleEvent.STOP,new LifecycleAction<UDPServer>(){
    public void doAction(    UDPServer server){
      server.stop();
    }
  }
);
  bind(UDPServer.class).toProvider(lifecycledProvider).asEagerSingleton();
  ExportBuilder builder=MBeanModule.newExporter(binder());
  builder.export(UDPEventHandler.class).as(""String_Node_Str"");
}",0.9630188679245284
2203,"@Inject public CollectorEventProcessor(final CollectorConfig config,final TimelineDAO timelineDAO){
  this.timelineDAO=timelineDAO;
  accumulators=CacheBuilder.newBuilder().concurrencyLevel(4).maximumSize(config.getMaxHosts()).expireAfterWrite(config.getTimelineLength().getMillis(),TimeUnit.MILLISECONDS).removalListener(new RemovalListener<Integer,TimelineHostEventAccumulator>(){
    @Override public void onRemoval(    RemovalNotification<Integer,TimelineHostEventAccumulator> removedObjectNotification){
      TimelineHostEventAccumulator accumulator=removedObjectNotification.getValue();
      if (accumulator == null) {
        log.error(""String_Node_Str"");
      }
 else {
        final Integer hostId=removedObjectNotification.getKey();
        if (hostId == null) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"" + hostId);
        }
        accumulator.extractAndSaveTimelineChunks();
      }
    }
  }
).build(new CacheLoader<Integer,TimelineHostEventAccumulator>(){
    @Override public TimelineHostEventAccumulator load(    Integer hostId) throws Exception {
      log.info(""String_Node_Str"" + hostId);
      return new TimelineHostEventAccumulator(timelineDAO,hostId);
    }
  }
);
}","@Inject public CollectorEventProcessor(final CollectorConfig config,final TimelineDAO timelineDAO){
  this.timelineDAO=timelineDAO;
  accumulators=CacheBuilder.newBuilder().concurrencyLevel(4).maximumSize(config.getMaxHosts()).removalListener(new RemovalListener<Integer,TimelineHostEventAccumulator>(){
    @Override public void onRemoval(    final RemovalNotification<Integer,TimelineHostEventAccumulator> removedObjectNotification){
      final TimelineHostEventAccumulator accumulator=removedObjectNotification.getValue();
      if (accumulator == null) {
        log.error(""String_Node_Str"");
      }
 else {
        final Integer hostId=removedObjectNotification.getKey();
        if (hostId == null) {
          log.info(""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"" + hostId);
        }
        accumulator.extractAndSaveTimelineChunks();
      }
    }
  }
).build(new CacheLoader<Integer,TimelineHostEventAccumulator>(){
    @Override public TimelineHostEventAccumulator load(    final Integer hostId) throws Exception {
      log.info(""String_Node_Str"" + hostId);
      return new TimelineHostEventAccumulator(timelineDAO,hostId);
    }
  }
);
  Executors.newSingleThreadScheduledExecutor(""String_Node_Str"").scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      accumulators.invalidateAll();
    }
  }
,config.getTimelineLength().getMillis(),config.getTimelineLength().getMillis(),TimeUnit.MILLISECONDS);
}",0.2181282240235814
2204,"@Override public TimelineHostEventAccumulator load(Integer hostId) throws Exception {
  log.info(""String_Node_Str"" + hostId);
  return new TimelineHostEventAccumulator(timelineDAO,hostId);
}","@Override public TimelineHostEventAccumulator load(final Integer hostId) throws Exception {
  log.info(""String_Node_Str"" + hostId);
  return new TimelineHostEventAccumulator(timelineDAO,hostId);
}",0.9844559585492229
2205,"@Override public void onRemoval(RemovalNotification<Integer,TimelineHostEventAccumulator> removedObjectNotification){
  TimelineHostEventAccumulator accumulator=removedObjectNotification.getValue();
  if (accumulator == null) {
    log.error(""String_Node_Str"");
  }
 else {
    final Integer hostId=removedObjectNotification.getKey();
    if (hostId == null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"" + hostId);
    }
    accumulator.extractAndSaveTimelineChunks();
  }
}","@Override public void onRemoval(final RemovalNotification<Integer,TimelineHostEventAccumulator> removedObjectNotification){
  final TimelineHostEventAccumulator accumulator=removedObjectNotification.getValue();
  if (accumulator == null) {
    log.error(""String_Node_Str"");
  }
 else {
    final Integer hostId=removedObjectNotification.getKey();
    if (hostId == null) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"" + hostId);
    }
    accumulator.extractAndSaveTimelineChunks();
  }
}",0.9884393063583816
2206,"private void convertSamplesToScalarSamples(Map<String,Object> inputSamples,Map<Integer,ScalarSample> outputSamples){
  if (inputSamples == null) {
    return;
  }
  for (  final String sampleKind : inputSamples.keySet()) {
    final int sampleKindId=timelineRegistry.getOrAddSampleKind(sampleKind);
    final Object sample=inputSamples.get(sampleKind);
    if (sample == null) {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.NULL,sample));
    }
 else     if (sample instanceof Byte) {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.BYTE,sample));
    }
 else     if (sample instanceof Short) {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.SHORT,sample));
    }
 else     if (sample instanceof Integer) {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.INT,sample));
    }
 else     if (sample instanceof Long) {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.LONG,sample));
    }
 else     if (sample instanceof Float) {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.FLOAT,sample));
    }
 else     if (sample instanceof Double) {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.DOUBLE,sample));
    }
 else {
      outputSamples.put(sampleKindId,new ScalarSample(SampleOpcode.STRING,sample.toString()));
    }
  }
}","private void convertSamplesToScalarSamples(final Map<String,Object> inputSamples,final Map<Integer,ScalarSample> outputSamples){
  if (inputSamples == null) {
    return;
  }
  for (  final String sampleKind : inputSamples.keySet()) {
    final int sampleKindId=timelineRegistry.getOrAddSampleKind(sampleKind);
    final Object sample=inputSamples.get(sampleKind);
    if (sample == null) {
      outputSamples.put(sampleKindId,new ScalarSample<Void>(SampleOpcode.NULL,null));
    }
 else     if (sample instanceof Byte) {
      outputSamples.put(sampleKindId,new ScalarSample<Byte>(SampleOpcode.BYTE,(Byte)sample));
    }
 else     if (sample instanceof Short) {
      outputSamples.put(sampleKindId,new ScalarSample<Short>(SampleOpcode.SHORT,(Short)sample));
    }
 else     if (sample instanceof Integer) {
      outputSamples.put(sampleKindId,new ScalarSample<Integer>(SampleOpcode.INT,(Integer)sample));
    }
 else     if (sample instanceof Long) {
      outputSamples.put(sampleKindId,new ScalarSample<Long>(SampleOpcode.LONG,(Long)sample));
    }
 else     if (sample instanceof Float) {
      outputSamples.put(sampleKindId,new ScalarSample<Float>(SampleOpcode.FLOAT,(Float)sample));
    }
 else     if (sample instanceof Double) {
      outputSamples.put(sampleKindId,new ScalarSample<Double>(SampleOpcode.DOUBLE,(Double)sample));
    }
 else {
      outputSamples.put(sampleKindId,new ScalarSample<String>(SampleOpcode.STRING,sample.toString()));
    }
  }
}",0.9568599717114568
2207,"public void processEvent(Event evt){
  if (timelineRegistry == null) {
    timelineRegistry=new TimelineRegistry(timelineDAO);
  }
  try {
    final List<Event> events=new ArrayList<Event>();
    if (evt instanceof BatchedEvent) {
      events.addAll(((BatchedEvent)evt).getEvents());
    }
 else {
      events.add(evt);
    }
    eventsReceived.getAndAdd(events.size());
    final int hostId=getHostIdFromEvent(evt);
    final Map<Integer,ScalarSample> scalarSamples=new LinkedHashMap<Integer,ScalarSample>();
    for (    final Event event : events) {
      if (event instanceof MapEvent) {
        final Map<String,Object> samplesMap=((MapEvent)evt).getMap();
        convertSamplesToScalarSamples(samplesMap,scalarSamples);
      }
 else       if (event instanceof MonitoringEvent) {
        final Map<String,Object> samplesMap=((MonitoringEvent)evt).getMap();
        convertSamplesToScalarSamples(samplesMap,scalarSamples);
      }
 else {
        log.warn(""String_Node_Str"" + event);
        eventsDiscarded.getAndIncrement();
      }
    }
    final HostSamplesForTimestamp hostSamples=new HostSamplesForTimestamp(hostId,evt.getEventType(),new DateTime(events.get(0).getTimestamp(),DateTimeZone.UTC),scalarSamples);
    final TimelineHostEventAccumulator accumulator=accumulators.get(hostId);
    accumulator.addHostSamples(hostSamples);
  }
 catch (  RuntimeException ruEx) {
    log.warn(ruEx);
  }
catch (  ExecutionException e) {
    log.warn(e);
  }
}","public void processEvent(final Event evt){
  if (timelineRegistry == null) {
    timelineRegistry=new TimelineRegistry(timelineDAO);
  }
  try {
    final List<Event> events=new ArrayList<Event>();
    if (evt instanceof BatchedEvent) {
      events.addAll(((BatchedEvent)evt).getEvents());
    }
 else {
      events.add(evt);
    }
    eventsReceived.getAndAdd(events.size());
    final Map<Integer,ScalarSample> scalarSamples=new LinkedHashMap<Integer,ScalarSample>();
    for (    final Event event : events) {
      scalarSamples.clear();
      final int hostId=getHostIdFromEvent(event);
      if (event instanceof MapEvent) {
        final Map<String,Object> samplesMap=((MapEvent)evt).getMap();
        convertSamplesToScalarSamples(samplesMap,scalarSamples);
      }
 else       if (event instanceof MonitoringEvent) {
        final Map<String,Object> samplesMap=((MonitoringEvent)evt).getMap();
        convertSamplesToScalarSamples(samplesMap,scalarSamples);
      }
 else {
        log.warn(""String_Node_Str"" + event);
        eventsDiscarded.getAndIncrement();
        continue;
      }
      final HostSamplesForTimestamp hostSamples=new HostSamplesForTimestamp(hostId,evt.getEventType(),new DateTime(events.get(0).getTimestamp(),DateTimeZone.UTC),scalarSamples);
      final TimelineHostEventAccumulator accumulator=accumulators.get(hostId);
      accumulator.addHostSamples(hostSamples);
    }
  }
 catch (  RuntimeException ruEx) {
    log.warn(ruEx);
  }
catch (  ExecutionException e) {
    log.warn(e);
  }
}",0.9455395923822252
2208,"/** 
 * @param args
 */
public static void main(String[] args){
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new AbstractModule(){
    @Override protected void configure(){
      bind(MBeanServer.class).toInstance(ManagementFactory.getPlatformMBeanServer());
      bind(StatusPageHandler.class).asEagerSingleton();
    }
  }
,new LifecycleModule(),new EventPublisherModule(EventSenderType.CLIENT),new EmbeddedJettyJerseyModule(),new RESTEventReceiverModule(EventProcessorImpl.class,""String_Node_Str""),new UDPEventReceiverModule(5),new GalaxyModule(),new AgentModule());
  CoreMonitoringAgent coreMonitor=injector.getInstance(CoreMonitoringAgent.class);
  try {
    coreMonitor.run();
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"");
    System.exit(-1);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  Injector injector=Guice.createInjector(Stage.PRODUCTION,new MBeanModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(MBeanServer.class).toInstance(ManagementFactory.getPlatformMBeanServer());
      bind(MBeanExporter.class).toInstance(MBeanExporter.withPlatformMBeanServer());
      bind(StatusPageHandler.class).asEagerSingleton();
    }
  }
,new LifecycleModule(),new EventPublisherModule(EventSenderType.CLIENT),new EmbeddedJettyJerseyModule(),new RESTEventReceiverModule(EventProcessorImpl.class,""String_Node_Str""),new UDPEventReceiverModule(5),new GalaxyModule(),new AgentModule());
  CoreMonitoringAgent coreMonitor=injector.getInstance(CoreMonitoringAgent.class);
  try {
    coreMonitor.run();
  }
 catch (  Exception e) {
    log.error(e,""String_Node_Str"");
    System.exit(-1);
  }
}",0.9386539606908876
2209,"@Override protected void configure(){
  bind(MBeanServer.class).toInstance(ManagementFactory.getPlatformMBeanServer());
  bind(StatusPageHandler.class).asEagerSingleton();
}","@Override protected void configure(){
  bind(MBeanServer.class).toInstance(ManagementFactory.getPlatformMBeanServer());
  bind(MBeanExporter.class).toInstance(MBeanExporter.withPlatformMBeanServer());
  bind(StatusPageHandler.class).asEagerSingleton();
}",0.810304449648712
2210,"@Override public void configure(){
  initializeRmiConnectionTimeouts();
  bindConstant().annotatedWith(ThreadpoolSize.class).to(Integer.getInteger(""String_Node_Str"",ThreadpoolSize.DEFAULT));
  bindConstant().annotatedWith(MaxActiveConfigs.class).to(Integer.getInteger(""String_Node_Str"",MaxActiveConfigs.DEFAULT));
  bindConstant().annotatedWith(ConnectionTimeout.class).to(Integer.getInteger(""String_Node_Str"",ConnectionTimeout.DEFAULT));
  bindConstant().annotatedWith(ConnectionTimeoutInitial.class).to(Integer.getInteger(""String_Node_Str"",ConnectionTimeoutInitial.DEFAULT));
  bindConstant().annotatedWith(ConfigUpdateInterval.class).to(Integer.getInteger(""String_Node_Str"",ConfigUpdateInterval.DEFAULT));
  bindConstant().annotatedWith(ConfigUpdateInitialDelayRange.class).to(Integer.getInteger(""String_Node_Str"",ConfigUpdateInitialDelayRange.DEFAULT));
  bindConstant().annotatedWith(JMXPort.class).to(Integer.getInteger(""String_Node_Str"",JMXPort.DEFAULT));
  bindConstant().annotatedWith(SNMPPort.class).to(Integer.getInteger(""String_Node_Str"",SNMPPort.DEFAULT));
  bindConstant().annotatedWith(SNMPCommunity.class).to(System.getProperty(""String_Node_Str"",SNMPCommunity.DEFAULT));
  bindConstant().annotatedWith(SNMPCompiledMibDir.class).to(System.getProperty(""String_Node_Str"",SNMPCompiledMibDir.DEFAULT));
  bindConstant().annotatedWith(DefaultPollingIntervalSeconds.class).to(Integer.getInteger(""String_Node_Str"",DefaultPollingIntervalSeconds.DEFAULT));
  bindConstant().annotatedWith(MaxPollingRetryDelay.class).to(Integer.getInteger(""String_Node_Str"",MaxPollingRetryDelay.DEFAULT));
  bindConstant().annotatedWith(PerHostSemaphoreConcurrency.class).to(Integer.getInteger(""String_Node_Str"",PerHostSemaphoreConcurrency.DEFAULT));
  bindConstant().annotatedWith(PerHostSemaphoreMaxWaitMillis.class).to(Long.getLong(""String_Node_Str"",PerHostSemaphoreMaxWaitMillis.DEFAULT));
  bindConstant().annotatedWith(PerHostSemaphoreRetryMillis.class).to(Long.getLong(""String_Node_Str"",PerHostSemaphoreRetryMillis.DEFAULT));
  bindConstant().annotatedWith(ConfigInitTypeParam.class).to(ConfigInitType.valueOf(System.getProperty(""String_Node_Str"",ConfigInitType.CONFIG_BY_EXPLICIT_PARAMS.name())));
  bindConstant().annotatedWith(JMXMonitoringProfilePollingEnabled.class).to(Boolean.parseBoolean(System.getProperty(""String_Node_Str"",Boolean.toString(JMXMonitoringProfilePollingEnabled.DEFAULT))));
  bindConstant().annotatedWith(ConfigTypesEnabled.class).to(System.getProperty(""String_Node_Str"",ConfigTypesEnabled.DEFAULT));
  bindConstant().annotatedWith(PublishedHostSuffix.class).to(System.getProperty(""String_Node_Str"",PublishedHostSuffix.DEFAULT));
  bindConstant().annotatedWith(PublishedPathSuffix.class).to(System.getProperty(""String_Node_Str"",PublishedPathSuffix.DEFAULT));
  bindConstant().annotatedWith(ExplicitConfigFiles.class).to(System.getProperty(""String_Node_Str"",ExplicitConfigFiles.DEFAULT));
  bindConstant().annotatedWith(ExplicitHosts.class).to(System.getProperty(""String_Node_Str"",ExplicitHosts.DEFAULT));
  bindConstant().annotatedWith(ExplicitPaths.class).to(System.getProperty(""String_Node_Str"",ExplicitPaths.DEFAULT));
  bindConstant().annotatedWith(ExplicitTypes.class).to(System.getProperty(""String_Node_Str"",ExplicitTypes.DEFAULT));
  bindConstant().annotatedWith(AdvertiseReceiverOnBeacon.class).to(Boolean.parseBoolean(System.getProperty(""String_Node_Str"",Boolean.toString(AdvertiseReceiverOnBeacon.DEFAULT))));
  bindConstant().annotatedWith(RelayServiceName.class).to(System.getProperty(""String_Node_Str"",RelayServiceName.DEFAULT));
  String defaultUserAgentString=initializeUserAgentString();
  bindConstant().annotatedWith(HTTPUserAgent.class).to(System.getProperty(""String_Node_Str"",defaultUserAgentString));
  bindConstant().annotatedWith(HTTPProxyHost.class).to(System.getProperty(""String_Node_Str"",HTTPProxyHost.DEFAULT));
  bindConstant().annotatedWith(HTTPProxyPort.class).to(Integer.getInteger(""String_Node_Str"",HTTPProxyPort.DEFAULT));
  bind(JMXClientCache.class).asEagerSingleton();
  bind(JMXDynamicUtils.class).asEagerSingleton();
  bind(JMXParserManager.class).asEagerSingleton();
  bind(DataSourceUtils.class).asEagerSingleton();
  bind(IdentityConfigIteratorFactory.class).asEagerSingleton();
  bind(JMXConfigIteratorFactory.class).asEagerSingleton();
  bind(SNMPConfigIteratorFactory.class).asEagerSingleton();
  bind(ConfigFileUtils.class).asEagerSingleton();
  bind(MBeanServer.class).toInstance(ManagementFactory.getPlatformMBeanServer());
  bind(AgentDataCollectorManager.class).asEagerSingleton();
  ExportBuilder builder=MBeanModule.newExporter(binder());
  builder.export(AgentDataCollectorManager.class).as(""String_Node_Str"");
}","@Override public void configure(){
  initializeRmiConnectionTimeouts();
  bindConstant().annotatedWith(ThreadpoolSize.class).to(Integer.getInteger(""String_Node_Str"",ThreadpoolSize.DEFAULT));
  bindConstant().annotatedWith(MaxActiveConfigs.class).to(Integer.getInteger(""String_Node_Str"",MaxActiveConfigs.DEFAULT));
  bindConstant().annotatedWith(ConnectionTimeout.class).to(Integer.getInteger(""String_Node_Str"",ConnectionTimeout.DEFAULT));
  bindConstant().annotatedWith(ConnectionTimeoutInitial.class).to(Integer.getInteger(""String_Node_Str"",ConnectionTimeoutInitial.DEFAULT));
  bindConstant().annotatedWith(ConfigUpdateInterval.class).to(Integer.getInteger(""String_Node_Str"",ConfigUpdateInterval.DEFAULT));
  bindConstant().annotatedWith(ConfigUpdateInitialDelayRange.class).to(Integer.getInteger(""String_Node_Str"",ConfigUpdateInitialDelayRange.DEFAULT));
  bindConstant().annotatedWith(JMXPort.class).to(Integer.getInteger(""String_Node_Str"",JMXPort.DEFAULT));
  bindConstant().annotatedWith(SNMPPort.class).to(Integer.getInteger(""String_Node_Str"",SNMPPort.DEFAULT));
  bindConstant().annotatedWith(SNMPCommunity.class).to(System.getProperty(""String_Node_Str"",SNMPCommunity.DEFAULT));
  bindConstant().annotatedWith(SNMPCompiledMibDir.class).to(System.getProperty(""String_Node_Str"",SNMPCompiledMibDir.DEFAULT));
  bindConstant().annotatedWith(DefaultPollingIntervalSeconds.class).to(Integer.getInteger(""String_Node_Str"",DefaultPollingIntervalSeconds.DEFAULT));
  bindConstant().annotatedWith(MaxPollingRetryDelay.class).to(Integer.getInteger(""String_Node_Str"",MaxPollingRetryDelay.DEFAULT));
  bindConstant().annotatedWith(PerHostSemaphoreConcurrency.class).to(Integer.getInteger(""String_Node_Str"",PerHostSemaphoreConcurrency.DEFAULT));
  bindConstant().annotatedWith(PerHostSemaphoreMaxWaitMillis.class).to(Long.getLong(""String_Node_Str"",PerHostSemaphoreMaxWaitMillis.DEFAULT));
  bindConstant().annotatedWith(PerHostSemaphoreRetryMillis.class).to(Long.getLong(""String_Node_Str"",PerHostSemaphoreRetryMillis.DEFAULT));
  bindConstant().annotatedWith(ConfigInitTypeParam.class).to(ConfigInitType.valueOf(System.getProperty(""String_Node_Str"",ConfigInitType.CONFIG_BY_EXPLICIT_PARAMS.name())));
  bindConstant().annotatedWith(JMXMonitoringProfilePollingEnabled.class).to(Boolean.parseBoolean(System.getProperty(""String_Node_Str"",Boolean.toString(JMXMonitoringProfilePollingEnabled.DEFAULT))));
  bindConstant().annotatedWith(ConfigTypesEnabled.class).to(System.getProperty(""String_Node_Str"",ConfigTypesEnabled.DEFAULT));
  bindConstant().annotatedWith(PublishedHostSuffix.class).to(System.getProperty(""String_Node_Str"",PublishedHostSuffix.DEFAULT));
  bindConstant().annotatedWith(PublishedPathSuffix.class).to(System.getProperty(""String_Node_Str"",PublishedPathSuffix.DEFAULT));
  bindConstant().annotatedWith(ExplicitConfigFiles.class).to(System.getProperty(""String_Node_Str"",ExplicitConfigFiles.DEFAULT));
  bindConstant().annotatedWith(ExplicitHosts.class).to(System.getProperty(""String_Node_Str"",ExplicitHosts.DEFAULT));
  bindConstant().annotatedWith(ExplicitPaths.class).to(System.getProperty(""String_Node_Str"",ExplicitPaths.DEFAULT));
  bindConstant().annotatedWith(ExplicitTypes.class).to(System.getProperty(""String_Node_Str"",ExplicitTypes.DEFAULT));
  bindConstant().annotatedWith(AdvertiseReceiverOnBeacon.class).to(Boolean.parseBoolean(System.getProperty(""String_Node_Str"",Boolean.toString(AdvertiseReceiverOnBeacon.DEFAULT))));
  bindConstant().annotatedWith(RelayServiceName.class).to(System.getProperty(""String_Node_Str"",RelayServiceName.DEFAULT));
  String defaultUserAgentString=initializeUserAgentString();
  bindConstant().annotatedWith(HTTPUserAgent.class).to(System.getProperty(""String_Node_Str"",defaultUserAgentString));
  bindConstant().annotatedWith(HTTPProxyHost.class).to(System.getProperty(""String_Node_Str"",HTTPProxyHost.DEFAULT));
  bindConstant().annotatedWith(HTTPProxyPort.class).to(Integer.getInteger(""String_Node_Str"",HTTPProxyPort.DEFAULT));
  bind(JMXClientCache.class).asEagerSingleton();
  bind(JMXDynamicUtils.class).asEagerSingleton();
  bind(JMXParserManager.class).asEagerSingleton();
  bind(DataSourceUtils.class).asEagerSingleton();
  bind(IdentityConfigIteratorFactory.class).asEagerSingleton();
  bind(JMXConfigIteratorFactory.class).asEagerSingleton();
  bind(SNMPConfigIteratorFactory.class).asEagerSingleton();
  bind(ConfigFileUtils.class).asEagerSingleton();
  bind(AgentDataCollectorManager.class).asEagerSingleton();
  ExportBuilder builder=MBeanModule.newExporter(binder());
  builder.export(AgentDataCollectorManager.class).as(""String_Node_Str"");
}",0.9911676001723396
2211,"@Inject public AreciboEventServiceChooser(ServiceLocator serviceLocator,@ConsistentHashingSelector Selector selector,ConsistentHashingServiceChooser magic,MBeanExporter exporter,@EventSenderType String senderType,AsyncHttpClient httpClient) throws IOException {
  this.serviceLocator=serviceLocator;
  this.selector=selector;
  this.serviceLocator.startReadOnly();
  this.restClient=new EventServiceRESTClient(httpClient,new JavaEventSerializer(),senderType);
  this.udpClient=new EventServiceUDPClient(new JavaEventSerializer(),senderType);
  this.magic=magic;
  JMXCronTaskMaster master=new JMXCronTaskMaster(Executors.newScheduledThreadPool(1),exporter);
  long jobInterval=Long.getLong(""String_Node_Str"",60L);
  CronJob job=master.exportNewFixedDelayCronJob(Math.abs(jobInterval),TimeUnit.MINUTES,""String_Node_Str"",new Runnable(){
    public void run(){
      cache.clear();
    }
  }
);
  if (jobInterval > 0) {
    job.start();
  }
}","@Inject public AreciboEventServiceChooser(ServiceLocator serviceLocator,@ConsistentHashingSelector Selector selector,ConsistentHashingServiceChooser magic,JMXCronTaskMaster cronTaskMaster,@EventSenderType String senderType,AsyncHttpClient httpClient) throws IOException {
  this.serviceLocator=serviceLocator;
  this.selector=selector;
  this.serviceLocator.startReadOnly();
  this.restClient=new EventServiceRESTClient(httpClient,new JavaEventSerializer(),senderType);
  this.udpClient=new EventServiceUDPClient(new JavaEventSerializer(),senderType);
  this.magic=magic;
  long jobInterval=Long.getLong(""String_Node_Str"",60L);
  CronJob job=cronTaskMaster.exportNewFixedDelayCronJob(Math.abs(jobInterval),TimeUnit.MINUTES,""String_Node_Str"",new Runnable(){
    public void run(){
      cache.clear();
    }
  }
);
  if (jobInterval > 0) {
    job.start();
  }
}",0.9155555555555556
2212,"public void configure(Binder binder){
  binder.bindConstant().annotatedWith(VirtualNodes.class).to(Integer.getInteger(""String_Node_Str"",VirtualNodes.DEFAULT));
  binder.bindConstant().annotatedWith(MaxEventBufferSize.class).to(Integer.getInteger(""String_Node_Str"",MaxEventBufferSize.DEFAULT));
  binder.bindConstant().annotatedWith(MaxEventDispatchers.class).to(Integer.getInteger(""String_Node_Str"",MaxEventDispatchers.DEFAULT));
  binder.bindConstant().annotatedWith(MaxDrainDelayInMS.class).to(Long.getLong(""String_Node_Str"",MaxDrainDelayInMS.DEFAULT));
  binder.bindConstant().annotatedWith(SpooledEventExpirationInMS.class).to(Long.getLong(""String_Node_Str"",SpooledEventExpirationInMS.DEFAULT));
  binder.bindConstant().annotatedWith(LocalSpoolRoot.class).to(System.getProperty(""String_Node_Str"",LocalSpoolRoot.DEFAULT));
  binder.bindConstant().annotatedWith(EventServiceName.class).to(System.getProperty(""String_Node_Str""));
  final String eventServiceName=System.getProperty(""String_Node_Str"");
  binder.bind(ExecutorService.class).annotatedWith(PublisherExecutor.class).toInstance(Executors.newFixedThreadPool(50,new NamedThreadFactory(""String_Node_Str"")));
  binder.bind(Selector.class).annotatedWith(PublisherSelector.class).toInstance(new Selector(){
    public boolean match(    ServiceDescriptor sd){
      return sd.getName().equals(eventServiceName);
    }
  }
);
  binder.bind(ConsistentHashingServiceChooser.class).asEagerSingleton();
  binder.bind(EventServiceChooser.class).to(AreciboEventServiceChooser.class).asEagerSingleton();
  binder.bind(EventPublisher.class).to(AreciboEventPublisher.class).asEagerSingleton();
  binder.bind(String.class).annotatedWith(EventSenderType.class).toInstance(senderType);
  ExportBuilder builder=MBeanModule.newExporter(binder);
  builder.export(AreciboEventServiceChooser.class).as(""String_Node_Str"");
  builder.export(AreciboEventPublisher.class).as(""String_Node_Str"");
}","@Override public void configure(){
  bindConstant().annotatedWith(VirtualNodes.class).to(Integer.getInteger(""String_Node_Str"",VirtualNodes.DEFAULT));
  bindConstant().annotatedWith(MaxEventBufferSize.class).to(Integer.getInteger(""String_Node_Str"",MaxEventBufferSize.DEFAULT));
  bindConstant().annotatedWith(MaxEventDispatchers.class).to(Integer.getInteger(""String_Node_Str"",MaxEventDispatchers.DEFAULT));
  bindConstant().annotatedWith(MaxDrainDelayInMS.class).to(Long.getLong(""String_Node_Str"",MaxDrainDelayInMS.DEFAULT));
  bindConstant().annotatedWith(SpooledEventExpirationInMS.class).to(Long.getLong(""String_Node_Str"",SpooledEventExpirationInMS.DEFAULT));
  bindConstant().annotatedWith(LocalSpoolRoot.class).to(System.getProperty(""String_Node_Str"",LocalSpoolRoot.DEFAULT));
  bindConstant().annotatedWith(EventServiceName.class).to(System.getProperty(""String_Node_Str""));
  final String eventServiceName=System.getProperty(""String_Node_Str"");
  bind(ExecutorService.class).annotatedWith(PublisherExecutor.class).toInstance(Executors.newFixedThreadPool(50,new NamedThreadFactory(""String_Node_Str"")));
  bind(Selector.class).annotatedWith(PublisherSelector.class).toInstance(new Selector(){
    public boolean match(    ServiceDescriptor sd){
      return sd.getName().equals(eventServiceName);
    }
  }
);
  bind(ConsistentHashingServiceChooser.class).asEagerSingleton();
  bind(ScheduledExecutorService.class).annotatedWith(JMXCronScheduler.class).toInstance(Executors.newScheduledThreadPool(1));
  bind(EventServiceChooser.class).to(AreciboEventServiceChooser.class).asEagerSingleton();
  bind(EventPublisher.class).to(AreciboEventPublisher.class).asEagerSingleton();
  bind(String.class).annotatedWith(EventSenderType.class).toInstance(senderType);
  ExportBuilder builder=MBeanModule.newExporter(binder());
  builder.export(AreciboEventServiceChooser.class).as(""String_Node_Str"");
  builder.export(AreciboEventPublisher.class).as(""String_Node_Str"");
}",0.9311053984575836
2213,"@Inject public JMXCronTaskMaster(ScheduledExecutorService executorService,MBeanExporter exporter){
  this.executorService=executorService;
  this.exporter=exporter;
}","@Inject public JMXCronTaskMaster(@JMXCronScheduler ScheduledExecutorService executorService,MBeanExporter exporter){
  this.executorService=executorService;
  this.exporter=exporter;
}",0.9485714285714286
2214,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void altars(PlayerInteractEvent event){
  Action action=event.getAction();
  if (action != Action.RIGHT_CLICK_BLOCK)   return;
  Player player=event.getPlayer();
  UConf uconf=UConf.get(player);
  uconf.altarDark.evalBlockUse(event.getClickedBlock(),player);
  uconf.altarLight.evalBlockUse(event.getClickedBlock(),player);
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void altars(PlayerInteractEvent event){
  Action action=event.getAction();
  if (action != Action.RIGHT_CLICK_BLOCK)   return;
  Player player=event.getPlayer();
  UConf uconf=UConf.get(player);
  if (uconf.altarDark.evalBlockUse(event.getClickedBlock(),player) || uconf.altarLight.evalBlockUse(event.getClickedBlock(),player)) {
    event.setCancelled(true);
  }
}",0.944976076555024
2215,"public void evalBlockUse(Block coreBlock,Player player){
  if (coreBlock.getType() != coreMaterial)   return;
  UPlayer uplayer=UPlayer.get(player);
  UConf uconf=UConf.get(player);
  if (!this.materialCounts.containsKey(this.coreMaterial)) {
    this.materialCounts.put(this.coreMaterial,1);
  }
  ArrayList<Block> blocks=getCubeBlocks(coreBlock,uconf.altarSearchRadius);
  Map<Material,Integer> nearbyMaterialCounts=countMaterials(blocks,this.materialCounts.keySet());
  int requiredMaterialCountSum=this.sumCollection(this.materialCounts.values());
  int nearbyMaterialCountSum=this.sumCollection(nearbyMaterialCounts.values());
  if (nearbyMaterialCountSum < requiredMaterialCountSum * uconf.altarMinRatioForInfo)   return;
  Map<Material,Integer> missingMaterialCounts=this.getMissingMaterialCounts(nearbyMaterialCounts);
  if (this.sumCollection(missingMaterialCounts.values()) > 0) {
    player.sendMessage(Txt.parse(MLang.get().altarIncomplete,this.name));
    for (    Entry<Material,Integer> entry : missingMaterialCounts.entrySet()) {
      Material material=entry.getKey();
      int count=entry.getValue();
      player.sendMessage(Txt.parse(""String_Node_Str"",count,Txt.getMaterialName(material)));
    }
    return;
  }
  this.use(uplayer,player);
}","public boolean evalBlockUse(Block coreBlock,Player player){
  if (coreBlock.getType() != coreMaterial)   return false;
  UPlayer uplayer=UPlayer.get(player);
  UConf uconf=UConf.get(player);
  if (!this.materialCounts.containsKey(this.coreMaterial)) {
    this.materialCounts.put(this.coreMaterial,1);
  }
  ArrayList<Block> blocks=getCubeBlocks(coreBlock,uconf.altarSearchRadius);
  Map<Material,Integer> nearbyMaterialCounts=countMaterials(blocks,this.materialCounts.keySet());
  int requiredMaterialCountSum=this.sumCollection(this.materialCounts.values());
  int nearbyMaterialCountSum=this.sumCollection(nearbyMaterialCounts.values());
  if (nearbyMaterialCountSum < requiredMaterialCountSum * uconf.altarMinRatioForInfo)   return false;
  Map<Material,Integer> missingMaterialCounts=this.getMissingMaterialCounts(nearbyMaterialCounts);
  if (this.sumCollection(missingMaterialCounts.values()) > 0) {
    player.sendMessage(Txt.parse(MLang.get().altarIncomplete,this.name));
    for (    Entry<Material,Integer> entry : missingMaterialCounts.entrySet()) {
      Material material=entry.getKey();
      int count=entry.getValue();
      player.sendMessage(Txt.parse(""String_Node_Str"",count,Txt.getMaterialName(material)));
    }
    return false;
  }
  return this.use(uplayer,player);
}",0.9859044635865308
2216,"public abstract void use(UPlayer uplayer,Player player);","public abstract boolean use(UPlayer uplayer,Player player);",0.9217391304347826
2217,"@Override public void use(UPlayer uplayer,Player player){
  uplayer.msg(""String_Node_Str"");
  uplayer.msg(this.desc);
  if (!Perm.ALTAR_DARK.has(player,true))   return;
  uplayer.msg(MLang.get().altarDarkCommon);
  FxUtil.ensure(PotionEffectType.BLINDNESS,player,12 * 20);
  uplayer.runFxSmoke();
  if (uplayer.isHealthy()) {
    if (!ResourceUtil.playerRemoveAttempt(player,this.resources,MLang.get().altarResourceSuccess,MLang.get().altarResourceFail))     return;
    uplayer.msg(MLang.get().altarDarkHealthy);
    player.getWorld().strikeLightningEffect(player.getLocation().add(0,3,0));
    uplayer.runFxSmokeBurst();
    uplayer.addInfection(0.01D,InfectionReason.ALTAR,null);
  }
 else   if (uplayer.isVampire()) {
    uplayer.msg(MLang.get().altarDarkVampire);
  }
 else   if (uplayer.isInfected()) {
    uplayer.msg(MLang.get().altarDarkInfected);
  }
}","@Override public boolean use(final UPlayer uplayer,final Player player){
  uplayer.msg(""String_Node_Str"");
  uplayer.msg(this.desc);
  if (!Perm.ALTAR_DARK.has(player,true))   return false;
  uplayer.msg(MLang.get().altarDarkCommon);
  FxUtil.ensure(PotionEffectType.BLINDNESS,player,12 * 20);
  uplayer.runFxSmoke();
  if (uplayer.isHealthy()) {
    if (!ResourceUtil.playerRemoveAttempt(player,this.resources,MLang.get().altarResourceSuccess,MLang.get().altarResourceFail))     return false;
    Bukkit.getScheduler().scheduleSyncDelayedTask(Vampire.get(),new Runnable(){
      public void run(){
        uplayer.msg(MLang.get().altarDarkHealthy);
        player.getWorld().strikeLightningEffect(player.getLocation().add(0,3,0));
        uplayer.runFxSmokeBurst();
        uplayer.addInfection(0.01D,InfectionReason.ALTAR,null);
      }
    }
,1);
    return true;
  }
 else   if (uplayer.isVampire()) {
    uplayer.msg(MLang.get().altarDarkVampire);
  }
 else   if (uplayer.isInfected()) {
    uplayer.msg(MLang.get().altarDarkInfected);
  }
  return false;
}",0.8846153846153846
2218,"@Override public void use(UPlayer uplayer,Player player){
  UConf uconf=UConf.get(player);
  uplayer.msg(""String_Node_Str"");
  uplayer.msg(this.desc);
  if (!Perm.ALTAR_LIGHT.has(player,true))   return;
  if (!uplayer.isVampire() && playerHoldsWaterBottle(player)) {
    if (!ResourceUtil.playerRemoveAttempt(player,uconf.holyWaterResources,MLang.get().altarLightWaterResourceSuccess,MLang.get().altarLightWaterResourceFail))     return;
    ResourceUtil.playerAdd(player,HolyWaterUtil.createItemStack());
    uplayer.msg(MLang.get().altarLightWaterResult);
    uplayer.runFxEnderBurst();
    return;
  }
  uplayer.msg(MLang.get().altarLightCommon);
  uplayer.runFxEnder();
  if (uplayer.isVampire()) {
    if (!ResourceUtil.playerRemoveAttempt(player,this.resources,MLang.get().altarResourceSuccess,MLang.get().altarResourceFail))     return;
    uplayer.msg(MLang.get().altarLightVampire);
    player.getWorld().strikeLightningEffect(player.getLocation().add(0,3,0));
    uplayer.runFxEnderBurst();
    uplayer.setVampire(false);
    return;
  }
 else   if (uplayer.isHealthy()) {
    uplayer.msg(MLang.get().altarLightHealthy);
  }
 else   if (uplayer.isInfected()) {
    uplayer.msg(MLang.get().altarLightInfected);
    uplayer.setInfection(0);
    uplayer.runFxEnderBurst();
  }
}","@Override public boolean use(final UPlayer uplayer,final Player player){
  UConf uconf=UConf.get(player);
  uplayer.msg(""String_Node_Str"");
  uplayer.msg(this.desc);
  if (!Perm.ALTAR_LIGHT.has(player,true))   return false;
  if (!uplayer.isVampire() && playerHoldsWaterBottle(player)) {
    if (!ResourceUtil.playerRemoveAttempt(player,uconf.holyWaterResources,MLang.get().altarLightWaterResourceSuccess,MLang.get().altarLightWaterResourceFail))     return false;
    Bukkit.getScheduler().scheduleSyncDelayedTask(Vampire.get(),new Runnable(){
      public void run(){
        ResourceUtil.playerAdd(player,HolyWaterUtil.createItemStack());
        uplayer.msg(MLang.get().altarLightWaterResult);
        uplayer.runFxEnderBurst();
      }
    }
,1);
    return true;
  }
  uplayer.msg(MLang.get().altarLightCommon);
  uplayer.runFxEnder();
  if (uplayer.isVampire()) {
    if (!ResourceUtil.playerRemoveAttempt(player,this.resources,MLang.get().altarResourceSuccess,MLang.get().altarResourceFail))     return false;
    Bukkit.getScheduler().scheduleSyncDelayedTask(Vampire.get(),new Runnable(){
      public void run(){
        uplayer.msg(MLang.get().altarLightVampire);
        player.getWorld().strikeLightningEffect(player.getLocation().add(0,3,0));
        uplayer.runFxEnderBurst();
        uplayer.setVampire(false);
      }
    }
,1);
    return true;
  }
 else   if (uplayer.isHealthy()) {
    uplayer.msg(MLang.get().altarLightHealthy);
  }
 else   if (uplayer.isInfected()) {
    uplayer.msg(MLang.get().altarLightInfected);
    uplayer.setInfection(0);
    uplayer.runFxEnderBurst();
  }
  return false;
}",0.8674698795180723
2219,"public void tickRegen(long ticks){
  if (!this.isVampire())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  if (me.getGameMode() == GameMode.CREATIVE)   return;
  if (me.isDead())   return;
  if (me.getHealth() >= 20)   return;
  if (this.getFood().get() < conf.regenMinFood)   return;
  long millisSinceLastDamage=System.currentTimeMillis() - this.lastDamageMillis;
  if (millisSinceLastDamage < conf.regenDelayMillis)   return;
  double foodDiff=this.getFood().add(-conf.regenFoodPerTick * ticks);
  me.setHealth(me.getHealth() - foodDiff * conf.regenHealthPerFood);
}","public void tickRegen(long ticks){
  if (!this.isVampire())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  if (me.getGameMode() == GameMode.CREATIVE)   return;
  if (me.isDead())   return;
  if (me.getHealth() >= 20)   return;
  if (this.getFood().get() < conf.regenMinFood)   return;
  long millisSinceLastDamage=System.currentTimeMillis() - this.lastDamageMillis;
  if (millisSinceLastDamage < conf.regenDelayMillis)   return;
  double foodDiff=this.getFood().add(-conf.regenFoodPerTick * ticks);
  double healthTarget=me.getHealth() - foodDiff * conf.regenHealthPerFood;
  healthTarget=Math.min(healthTarget,me.getMaxHealth());
  healthTarget=Math.max(healthTarget,0D);
  me.setHealth(healthTarget);
}",0.8402625820568927
2220,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void bloodlustSmokeTrail(PlayerMoveEvent event){
  Player player=event.getPlayer();
  if (player.getGameMode() != GameMode.SURVIVAL)   return;
  Block from=event.getFrom().getBlock();
  Block to=event.getTo().getBlock();
  if (from.equals(to))   return;
  VPlayer vplayer=VPlayer.get(player);
  if (vplayer.isHuman())   return;
  if (!vplayer.isBloodlusting())   return;
  Conf conf=Conf.get(player);
  Location one=event.getFrom().clone();
  Location two=one.clone().add(0,1,0);
  long count1=MUtil.probabilityRound(conf.bloodlustSmokes);
  long count2=MUtil.probabilityRound(conf.bloodlustSmokes);
  for (long i=count1; i > 0; i--)   FxUtil.smoke(one);
  for (long i=count2; i > 0; i--)   FxUtil.smoke(two);
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void bloodlustSmokeTrail(PlayerMoveEvent event){
  Player player=event.getPlayer();
  if (player.getGameMode() == GameMode.CREATIVE)   return;
  Block from=event.getFrom().getBlock();
  Block to=event.getTo().getBlock();
  if (from.equals(to))   return;
  VPlayer vplayer=VPlayer.get(player);
  if (vplayer.isHuman())   return;
  if (!vplayer.isBloodlusting())   return;
  Conf conf=Conf.get(player);
  Location one=event.getFrom().clone();
  Location two=one.clone().add(0,1,0);
  long count1=MUtil.probabilityRound(conf.bloodlustSmokes);
  long count2=MUtil.probabilityRound(conf.bloodlustSmokes);
  for (long i=count1; i > 0; i--)   FxUtil.smoke(one);
  for (long i=count2; i > 0; i--)   FxUtil.smoke(two);
}",0.9923566878980892
2221,"public void tickRegen(long ticks){
  if (!this.isVampire())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  boolean survival=me.getGameMode() == GameMode.SURVIVAL;
  if (!survival)   return;
  if (me.isDead())   return;
  if (me.getHealth() >= 20)   return;
  if (this.getFood().get() < conf.regenMinFood)   return;
  long millisSinceLastDamage=System.currentTimeMillis() - this.lastDamageMillis;
  if (millisSinceLastDamage < conf.regenDelayMillis)   return;
  double foodDiff=this.getFood().add(-conf.regenFoodPerTick * ticks);
  this.getHealth().add(-foodDiff * conf.regenHealthPerFood);
}","public void tickRegen(long ticks){
  if (!this.isVampire())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  if (me.getGameMode() == GameMode.CREATIVE)   return;
  if (me.isDead())   return;
  if (me.getHealth() >= 20)   return;
  if (this.getFood().get() < conf.regenMinFood)   return;
  long millisSinceLastDamage=System.currentTimeMillis() - this.lastDamageMillis;
  if (millisSinceLastDamage < conf.regenDelayMillis)   return;
  double foodDiff=this.getFood().add(-conf.regenFoodPerTick * ticks);
  this.getHealth().add(-foodDiff * conf.regenHealthPerFood);
}",0.9616
2222,"public void tickEffects(long ticks){
  Player me=this.getPlayer();
  if (me == null)   return;
  if (me.isDead())   return;
  Conf conf=Conf.get(me);
  boolean survival=me.getGameMode() == GameMode.SURVIVAL;
  if (!survival)   return;
  if (this.fxSmokeTicks > 0) {
    this.fxSmokeTicks-=ticks;
    double dcount=conf.fxSmokePerTick * ticks;
    long lcount=MUtil.probabilityRound(dcount);
    for (long i=lcount; i > 0; i--)     FxUtil.smoke(me);
  }
  if (this.fxEnderTicks > 0) {
    this.fxEnderTicks-=ticks;
    double dcount=conf.fxEnderPerTick * ticks;
    long lcount=MUtil.probabilityRound(dcount);
    for (long i=lcount; i > 0; i--)     FxUtil.ender(me,conf.fxEnderRandomMaxLen);
  }
  if (survival && this.isVampire()) {
    if (this.getTemp() > conf.sunNauseaTemp)     FxUtil.ensure(PotionEffectType.CONFUSION,me,conf.sunNauseaTicks);
    if (this.getTemp() > conf.sunWeaknessTemp)     FxUtil.ensure(PotionEffectType.WEAKNESS,me,conf.sunWeaknessTicks);
    if (this.getTemp() > conf.sunSlowTemp)     FxUtil.ensure(PotionEffectType.SLOW,me,conf.sunSlowTicks);
    if (this.getTemp() > conf.sunBlindnessTemp)     FxUtil.ensure(PotionEffectType.BLINDNESS,me,conf.sunBlindnessTicks);
    if (this.getTemp() > conf.sunBurnTemp)     FxUtil.ensureBurn(me,conf.sunBurnTicks);
    double dsmokes=conf.sunSmokesPerTempAndTick * this.temp * ticks;
    long lsmokes=MUtil.probabilityRound(dsmokes);
    for (long i=lsmokes; i > 0; i--)     FxUtil.smoke(me);
    double dflames=conf.sunFlamesPerTempAndTick * this.temp * ticks;
    long lflames=MUtil.probabilityRound(dflames);
    for (long i=lflames; i > 0; i--)     FxUtil.flame(me);
  }
}","public void tickEffects(long ticks){
  Player me=this.getPlayer();
  if (me == null)   return;
  if (me.isDead())   return;
  Conf conf=Conf.get(me);
  if (me.getGameMode() == GameMode.CREATIVE)   return;
  if (this.fxSmokeTicks > 0) {
    this.fxSmokeTicks-=ticks;
    double dcount=conf.fxSmokePerTick * ticks;
    long lcount=MUtil.probabilityRound(dcount);
    for (long i=lcount; i > 0; i--)     FxUtil.smoke(me);
  }
  if (this.fxEnderTicks > 0) {
    this.fxEnderTicks-=ticks;
    double dcount=conf.fxEnderPerTick * ticks;
    long lcount=MUtil.probabilityRound(dcount);
    for (long i=lcount; i > 0; i--)     FxUtil.ender(me,conf.fxEnderRandomMaxLen);
  }
  if (this.isVampire()) {
    if (this.getTemp() > conf.sunNauseaTemp)     FxUtil.ensure(PotionEffectType.CONFUSION,me,conf.sunNauseaTicks);
    if (this.getTemp() > conf.sunWeaknessTemp)     FxUtil.ensure(PotionEffectType.WEAKNESS,me,conf.sunWeaknessTicks);
    if (this.getTemp() > conf.sunSlowTemp)     FxUtil.ensure(PotionEffectType.SLOW,me,conf.sunSlowTicks);
    if (this.getTemp() > conf.sunBlindnessTemp)     FxUtil.ensure(PotionEffectType.BLINDNESS,me,conf.sunBlindnessTicks);
    if (this.getTemp() > conf.sunBurnTemp)     FxUtil.ensureBurn(me,conf.sunBurnTicks);
    double dsmokes=conf.sunSmokesPerTempAndTick * this.temp * ticks;
    long lsmokes=MUtil.probabilityRound(dsmokes);
    for (long i=lsmokes; i > 0; i--)     FxUtil.smoke(me);
    double dflames=conf.sunFlamesPerTempAndTick * this.temp * ticks;
    long lflames=MUtil.probabilityRound(dflames);
    for (long i=lflames; i > 0; i--)     FxUtil.flame(me);
  }
}",0.9815043156596794
2223,"public void tickInfection(long ticks){
  if (!this.isInfected())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  boolean survival=me.getGameMode() == GameMode.SURVIVAL;
  if (!survival)   return;
  int indexOld=this.infectionGetMessageIndex();
  this.addInfection(ticks * conf.infectionPerTick);
  int indexNew=this.infectionGetMessageIndex();
  if (this.isVampire())   return;
  if (indexOld == indexNew)   return;
  if (conf.infectionProgressDamage != 0)   me.damage(conf.infectionProgressDamage);
  if (conf.infectionProgressNauseaTicks > 0)   FxUtil.ensure(PotionEffectType.CONFUSION,me,conf.infectionProgressNauseaTicks);
  this.msg(Lang.infectionFeeling.get(indexNew));
  this.msg(Lang.infectionHint.get(MCore.random.nextInt(Lang.infectionHint.size())));
  this.changed();
}","public void tickInfection(long ticks){
  if (!this.isInfected())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  if (me.getGameMode() == GameMode.CREATIVE)   return;
  int indexOld=this.infectionGetMessageIndex();
  this.addInfection(ticks * conf.infectionPerTick);
  int indexNew=this.infectionGetMessageIndex();
  if (this.isVampire())   return;
  if (indexOld == indexNew)   return;
  if (conf.infectionProgressDamage != 0)   me.damage(conf.infectionProgressDamage);
  if (conf.infectionProgressNauseaTicks > 0)   FxUtil.ensure(PotionEffectType.CONFUSION,me,conf.infectionProgressNauseaTicks);
  this.msg(Lang.infectionFeeling.get(indexNew));
  this.msg(Lang.infectionHint.get(MCore.random.nextInt(Lang.infectionHint.size())));
  this.changed();
}",0.970479704797048
2224,"public void tickRadTemp(long ticks){
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  boolean survival=me.getGameMode() == GameMode.SURVIVAL;
  if (survival && this.isVampire() && !me.isDead()) {
    this.rad=conf.baseRad + SunUtil.calcPlayerIrradiation(me);
    Double tempDelta=conf.tempPerRadAndTick * this.rad * ticks;
    this.addTemp(tempDelta);
  }
 else {
    this.rad=0;
    this.temp=0;
  }
}","public void tickRadTemp(long ticks){
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  if (me.getGameMode() != GameMode.CREATIVE && this.isVampire() && !me.isDead()) {
    this.rad=conf.baseRad + SunUtil.calcPlayerIrradiation(me);
    Double tempDelta=conf.tempPerRadAndTick * this.rad * ticks;
    this.addTemp(tempDelta);
  }
 else {
    this.rad=0;
    this.temp=0;
  }
}",0.9422850412249706
2225,"public void tickBloodlust(long ticks){
  if (!this.isVampire())   return;
  if (!this.isBloodlusting())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  boolean survival=me.getGameMode() == GameMode.SURVIVAL;
  if (!survival)   return;
  if (me.isDead())   return;
  this.getFood().add(ticks * conf.bloodlustFoodPerTick);
  if (this.getFood().get() < conf.bloodlustMinFood)   this.setBloodlusting(false);
}","public void tickBloodlust(long ticks){
  if (!this.isVampire())   return;
  if (!this.isBloodlusting())   return;
  Player me=this.getPlayer();
  if (me == null)   return;
  Conf conf=Conf.get(me);
  if (me.getGameMode() == GameMode.CREATIVE)   return;
  if (me.isDead())   return;
  this.getFood().add(ticks * conf.bloodlustFoodPerTick);
  if (this.getFood().get() < conf.bloodlustMinFood)   this.setBloodlusting(false);
}",0.9452054794520548
2226,"public void updateMovement(){
  Player player=this.getPlayer();
  Conf conf=Conf.get(player);
  if (player == null)   return;
  Map<Integer,Integer> potionEffectStrengths=null;
  if (this.vampire() && this.bloodlust()) {
    potionEffectStrengths=conf.potionEffectStrengthBloodlust;
  }
 else   if (this.vampire()) {
    potionEffectStrengths=conf.potionEffectStrengthVamp;
  }
 else {
    potionEffectStrengths=conf.potionEffectStrengthHuman;
  }
  boolean somethingEnabled=false;
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    Integer val=entry.getValue();
    if (val != null && val > 0) {
      somethingEnabled=true;
      break;
    }
  }
  if (somethingEnabled) {
    P.p.noCheatExemptedPlayerNames.add(player.getName());
  }
 else {
    P.p.noCheatExemptedPlayerNames.remove(player.getName());
  }
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    PotionEffectType pet=PotionEffectType.getById(entry.getKey());
    Integer strength=entry.getValue();
    if (strength == null || strength < 1) {
      player.removePotionEffect(pet);
    }
 else {
      PaketUtil.addPotionEffectNoGraphic(player,new PotionEffect(pet,100000,strength));
    }
  }
}","public void updateMovement(){
  Player player=this.getPlayer();
  Conf conf=Conf.get(player);
  if (player == null)   return;
  Map<Integer,Integer> potionEffectStrengths=null;
  if (this.vampire() && this.bloodlust()) {
    potionEffectStrengths=conf.potionEffectStrengthBloodlust;
  }
 else   if (this.vampire()) {
    potionEffectStrengths=conf.potionEffectStrengthVamp;
  }
 else {
    potionEffectStrengths=conf.potionEffectStrengthHuman;
  }
  boolean somethingEnabled=false;
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    Integer val=entry.getValue();
    if (val != null && val > 0) {
      somethingEnabled=true;
      break;
    }
  }
  if (somethingEnabled) {
    P.p.noCheatExemptedPlayerNames.add(player.getName());
  }
 else {
    P.p.noCheatExemptedPlayerNames.remove(player.getName());
  }
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    PotionEffectType pet=PotionEffectType.getById(entry.getKey());
    Integer strength=entry.getValue();
    player.removePotionEffect(pet);
    if (strength == null || strength < 1)     continue;
    PaketUtil.addPotionEffectNoGraphic(player,new PotionEffect(pet,100000,strength));
  }
}",0.9537190082644628
2227,"public void updateMovement(){
  Player player=this.getPlayer();
  Conf conf=Conf.get(player);
  if (player == null)   return;
  Map<Integer,Integer> potionEffectStrengths=null;
  if (this.vampire() && this.bloodlust()) {
    potionEffectStrengths=conf.potionEffectStrengthBloodlust;
  }
 else   if (this.vampire()) {
    potionEffectStrengths=conf.potionEffectStrengthVamp;
  }
 else {
    potionEffectStrengths=conf.potionEffectStrengthHuman;
  }
  boolean somethingEnabled=false;
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    Integer val=entry.getValue();
    if (val != null && val > 0) {
      somethingEnabled=true;
      break;
    }
  }
  if (somethingEnabled) {
    P.p.noCheatExemptedPlayerNames.add(player.getName());
  }
 else {
    P.p.noCheatExemptedPlayerNames.remove(player.getName());
  }
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    PotionEffectType pet=PotionEffectType.getById(entry.getKey());
    Integer strength=entry.getValue();
    player.removePotionEffect(pet);
    if (strength == null || strength < 1)     continue;
    PaketUtil.addPotionEffectNoGraphic(player,new PotionEffect(pet,100000,strength));
  }
}","public void updateMovement(){
  Player player=this.getPlayer();
  if (player == null)   return;
  Conf conf=Conf.get(player);
  Map<Integer,Integer> potionEffectStrengths=null;
  if (this.vampire() && this.bloodlust()) {
    potionEffectStrengths=conf.potionEffectStrengthBloodlust;
  }
 else   if (this.vampire()) {
    potionEffectStrengths=conf.potionEffectStrengthVamp;
  }
 else {
    potionEffectStrengths=conf.potionEffectStrengthHuman;
  }
  boolean somethingEnabled=false;
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    Integer val=entry.getValue();
    if (val != null && val > 0) {
      somethingEnabled=true;
      break;
    }
  }
  if (somethingEnabled) {
    P.p.noCheatExemptedPlayerNames.add(player.getName());
  }
 else {
    P.p.noCheatExemptedPlayerNames.remove(player.getName());
  }
  for (  Entry<Integer,Integer> entry : potionEffectStrengths.entrySet()) {
    PotionEffectType pet=PotionEffectType.getById(entry.getKey());
    Integer strength=entry.getValue();
    player.removePotionEffect(pet);
    if (strength == null || strength < 1)     continue;
    PaketUtil.addPotionEffectNoGraphic(player,new PotionEffect(pet,100000,strength));
  }
}",0.973421926910299
2228,"@Override public void onEnable(){
  if (!preEnable())   return;
  VPlayers.i.loadOldFormat();
  this.cmdBase=new CmdBase();
  this.cmdBase.register();
  this.cmd.setArgHandler(VPlayer.class,AHVPlayer.getInstance());
  Bukkit.getScheduler().scheduleSyncRepeatingTask(this,new TheTask(),0,Conf.taskInterval);
  new TheListener(this);
  this.noCheatPlusSetup();
  BloodlustToggle.get().register();
  postEnable();
}","@Override public void onEnable(){
  if (!preEnable())   return;
  VPlayers.i.loadOldFormat();
  this.cmdBase=new CmdBase();
  this.cmdBase.register();
  this.cmd.setArgHandler(VPlayer.class,AHVPlayer.getInstance());
  Bukkit.getScheduler().scheduleSyncRepeatingTask(this,new TheTask(),0,Conf.taskInterval);
  new TheListener(this);
  this.noCheatPlusSetup();
  BloodlustToggle.get().register();
  Shriek.get().register();
  postEnable();
}",0.9682726204465336
2229,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void fxOnDeath(EntityDeathEvent event){
  VPlayer vplayer=VPlayers.i.get(event.getEntity());
  if (vplayer == null)   return;
  if (vplayer.vampire() == false)   return;
  vplayer.fxShriek();
  vplayer.fxFlameBurstRun();
  vplayer.fxSmokeBurstRun();
  vplayer.updateSpoutMovement();
}","@EventHandler(priority=EventPriority.NORMAL) public void fxOnDeath(EntityDeathEvent event){
  VPlayer vplayer=VPlayers.i.get(event.getEntity());
  if (vplayer == null)   return;
  if (vplayer.vampire() == false)   return;
  vplayer.fxShriekRun();
  vplayer.fxFlameBurstRun();
  vplayer.fxSmokeBurstRun();
}",0.9036144578313252
2230,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void updateOnRespawn(PlayerRespawnEvent event){
  Player player=event.getPlayer();
  VPlayer vampire=VPlayers.i.get(player);
  if (vampire == null)   return;
  if (!vampire.vampire())   return;
  vampire.bloodlust(false);
  vampire.rad(0);
  vampire.temp(0);
  player.setFoodLevel(Conf.updateRespawnFood);
  player.setHealth(Conf.updateRespawnHealth);
  PlayerUtil.sendHealthFoodUpdatePacket(player);
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void updateOnRespawn(PlayerRespawnEvent event){
  final VPlayer vplayer=VPlayers.i.get(event.getPlayer());
  if (vplayer == null)   return;
  if (!vplayer.vampire())   return;
  Bukkit.getScheduler().scheduleSyncDelayedTask(p,new Runnable(){
    @Override public void run(){
      Player player=vplayer.getPlayer();
      player.setFoodLevel(Conf.updateRespawnFood);
      player.setHealth(Conf.updateRespawnHealth);
      PlayerUtil.sendHealthFoodUpdatePacket(player);
      vplayer.updateSpoutMovement();
    }
  }
);
}",0.508411214953271
2231,"public void bloodlust(boolean val){
  if (this.bloodlust == val) {
    this.msg(Lang.boolIsY(""String_Node_Str"",val));
    return;
  }
  if (val) {
    if (this.human()) {
      msg(""String_Node_Str"");
      return;
    }
    if (this.food().get() < Conf.bloodlustMinFood) {
      msg(""String_Node_Str"");
      return;
    }
    if (this.isGameMode(GameMode.CREATIVE,true)) {
      msg(""String_Node_Str"");
      return;
    }
  }
  this.bloodlust=val;
  this.msg(this.bloodlustMsg());
  this.updateSpoutMovement();
}","public void bloodlust(boolean val){
  if (this.bloodlust == val) {
    this.msg(Lang.boolIsY(""String_Node_Str"",val));
    return;
  }
  if (val) {
    if (!this.vampire()) {
      msg(Lang.onlyVampsCanX,""String_Node_Str"");
      return;
    }
    if (this.food().get() < Conf.bloodlustMinFood) {
      msg(""String_Node_Str"");
      return;
    }
    if (this.isGameMode(GameMode.CREATIVE,true)) {
      msg(""String_Node_Str"");
      return;
    }
  }
  this.bloodlust=val;
  this.msg(this.bloodlustMsg());
  this.updateSpoutMovement();
}",0.9600760456273764
2232,"public void vampire(boolean val){
  this.infection=0;
  if (this.vampire == val)   return;
  this.vampire=val;
  this.save();
  if (this.vampire) {
    this.msg(Lang.vampireTrue);
    this.fxShriek();
    this.fxSmokeBurstRun();
    this.fxSmokeRun();
  }
 else {
    this.msg(Lang.vampireFalse);
    this.fxEnderRun();
    this.maker(null);
    this.reason(null);
    this.bloodlust(false);
    this.intend(false);
  }
  this.updateVampPermission();
  if (this.isGameMode(GameMode.CREATIVE,true))   return;
  this.updateSpoutMovement();
}","public void vampire(boolean val){
  this.infection=0;
  if (this.vampire == val)   return;
  this.vampire=val;
  this.save();
  if (this.vampire) {
    this.msg(Lang.vampireTrue);
    this.fxShriekRun();
    this.fxSmokeBurstRun();
    this.fxSmokeRun();
  }
 else {
    this.msg(Lang.vampireFalse);
    this.fxEnderRun();
    this.maker(null);
    this.reason(null);
    this.bloodlust(false);
    this.intend(false);
  }
  this.updateVampPermission();
  if (this.isGameMode(GameMode.CREATIVE,true))   return;
  this.updateSpoutMovement();
}",0.9972247918593896
2233,"public double combatInfectRisk(){
  if (this.intend())   return Conf.infectionRiskAtCloseCombatWithIntent;
  return Conf.infectionRiskAtCloseCombatWithoutIntent;
}","public double combatInfectRisk(){
  if (this.human())   return 0D;
  if (this.intend())   return Conf.infectionRiskAtCloseCombatWithIntent;
  return Conf.infectionRiskAtCloseCombatWithoutIntent;
}",0.9080779944289692
2234,"public CmdBase(){
  super();
  this.addAliases(Conf.baseCommandAliases);
  this.addSubCommand(HelpCommand.getInstance());
  this.addSubCommand(cmdShow);
  this.addSubCommand(cmdModeBloodlust);
  this.addSubCommand(cmdModeIntend);
  this.addSubCommand(cmdOffer);
  this.addSubCommand(cmdAccept);
  this.addSubCommand(cmdVersion);
  this.addSubCommand(cmdList);
  this.addSubCommand(cmdSet);
  this.setDesc(""String_Node_Str"");
}","public CmdBase(){
  super();
  this.addAliases(Conf.baseCommandAliases);
  this.addSubCommand(HelpCommand.getInstance());
  this.addSubCommand(cmdShow);
  this.addSubCommand(cmdModeBloodlust);
  this.addSubCommand(cmdModeIntend);
  this.addSubCommand(cmdOffer);
  this.addSubCommand(cmdAccept);
  this.addSubCommand(cmdShriek);
  this.addSubCommand(cmdVersion);
  this.addSubCommand(cmdList);
  this.addSubCommand(cmdSet);
  this.setDesc(""String_Node_Str"");
}",0.9627118644067796
2235,"@Override public void perform(){
  vme.fxShriek();
}","@Override public void perform(){
  vme.shriek();
}",0.9607843137254902
2236,"@Override public void pressed(KeyBindingEvent event,SpoutPlayer splayer,VPlayer vplayer){
  if (!Permission.SHRIEK.has(splayer,true))   return;
  vplayer.fxShriek();
}","@Override public void pressed(KeyBindingEvent event,SpoutPlayer splayer,VPlayer vplayer){
  if (!Permission.SHRIEK.has(splayer,true))   return;
  vplayer.shriek();
}",0.9879518072289156
2237,"@Override public void onEnable(){
  this.getDataFolder().mkdirs();
  Conf.load();
  if (Conf.regenBloodPerHealth < Conf.playerBloodQuality) {
    log(""String_Node_Str"");
  }
  VPlayer.load();
  timer.schedule(new VampireTask(),0,Conf.timerInterval);
  PluginManager pm=this.getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.entityListener,Event.Priority.Normal,this);
  log(""String_Node_Str"");
}","@Override public void onEnable(){
  this.getDataFolder().mkdirs();
  Conf.load();
  if (Conf.regenBloodPerHealth < Conf.playerBloodQuality) {
    log(""String_Node_Str"");
  }
  VPlayer.load();
  timer.schedule(new VampireTask(),0,Conf.timerInterval);
  PluginManager pm=this.getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_ITEM,this.playerListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGED,this.entityListener,Event.Priority.High,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.entityListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.entityListener,Event.Priority.Normal,this);
  log(""String_Node_Str"");
}",0.9928774928774928
2238,"public static String getMaterialName(Material material){
  String ret=material.toString();
  ret=ret.replace('_',' ');
  ret=ret.toLowerCase();
  return ret.substring(0,1).toUpperCase() + ret.substring(1);
}","public static String getMaterialName(Material material){
  String ret=material.toString();
  ret=ret.replace('_',' ');
  ret=ret.toLowerCase();
  return ret;
}",0.8688524590163934
2239,"public void cure(){
  this.infectionSet(0);
  this.isVampire=false;
  this.sendMessage(Conf.cureMessages);
  Vampire.log(this.playername + ""String_Node_Str"");
  VPlayer.save();
}","public void cure(){
  this.isVampire=false;
  this.infectionSet(0);
  this.sendMessage(Conf.cureMessages);
  Vampire.log(this.playername + ""String_Node_Str"");
  VPlayer.save();
}",0.8651685393258427
2240,"public static Collection<VPlayer> findAll(){
  return VPlayer.VPlayers.values();
}","public static Collection<VPlayer> findAll(){
  findAllOnline();
  return VPlayer.VPlayers.values();
}",0.8961748633879781
2241,"public void infectionSet(double infection){
  if (this.infectionGet() <= 0 && infection > 0) {
    VPlayer.save();
  }
  this.infection=this.limitDouble(infection,0,100);
}","public void infectionSet(double infection){
  double previousinfection=this.infectionGet();
  this.infection=this.limitDouble(infection,0D,100D);
  if ((previousinfection != 0 && this.infection == 0) || (previousinfection == 0 && this.infection != 0)) {
    VPlayer.save();
  }
}",0.4168514412416851
2242,"public void turn(){
  this.isVampire=true;
  this.sendMessage(Conf.turnMessages);
  Vampire.log(this.playername + ""String_Node_Str"");
  VPlayer.save();
}","public void turn(){
  this.isVampire=true;
  this.infectionSet(0);
  this.sendMessage(Conf.turnMessages);
  Vampire.log(this.playername + ""String_Node_Str"");
  VPlayer.save();
}",0.9272727272727272
2243,"public void infectionHeal(double amount){
  if (this.isVampire()) {
    return;
  }
  double current=this.infectionGet();
  if (current == 0) {
    return;
  }
  current-=amount;
  if (current <= 0) {
    this.infectionSet(0);
    this.sendMessage(Conf.infectionMessageCured);
    return;
  }
  this.infectionSet(current);
  this.sendMessage(Conf.infectionMessageHeal);
}","public void infectionHeal(double amount){
  if (this.isVampire()) {
    return;
  }
  double current=this.infectionGet();
  if (current == 0D) {
    return;
  }
  current-=amount;
  if (current <= 0D) {
    this.infectionSet(0D);
    this.sendMessage(Conf.infectionMessageCured);
    return;
  }
  this.infectionSet(current);
  this.sendMessage(Conf.infectionMessageHeal);
}",0.995973154362416
2244,"public boolean isInfected(){
  return this.infection > 0 && this.isVampire == false;
}","public boolean isInfected(){
  return this.infection > 0D && this.isVampire == false;
}",0.9942196531791908
2245,"@Override public void perform(){
  String playername=parameters.get(0);
  double amount=1.0;
  if (parameters.size() == 2) {
    amount=Double.parseDouble(parameters.get(1));
  }
  Player player=Vampire.instance.getServer().getPlayer(playername);
  if (player == null) {
    this.sendMessage(""String_Node_Str"");
    return;
  }
  VPlayer vplayer=VPlayer.get(player);
  vplayer.infectionSet(amount);
  this.sendMessage(player.getDisplayName() + ""String_Node_Str"" + amount);
}","@Override public void perform(){
  String playername=parameters.get(0);
  double amount=1.0;
  if (parameters.size() == 2) {
    amount=Double.parseDouble(parameters.get(1));
  }
  Player player=Vampire.instance.getServer().getPlayer(playername);
  if (player == null) {
    this.sendMessage(""String_Node_Str"");
    return;
  }
  VPlayer vplayer=VPlayer.get(player);
  vplayer.infectionSet(amount);
  this.sendMessage(player.getDisplayName() + ""String_Node_Str"" + vplayer.infectionGet());
}",0.970954356846473
2246,"public static DataTypeDecl parseDataTypeDecl(AntlrToScribParser parser,CommonTree ct,AstFactory af){
  CommonTree tmp1=getSchemaChild(ct);
  String schema=AntlrSimpleName.getName(tmp1);
  CommonTree tmp2=getExtNameChild(ct);
  String extName=AntlrExtIdentifier.getName(tmp2);
  CommonTree tmp3=getExtNameChild(ct);
  String source=AntlrExtIdentifier.getName(tmp3);
  DataTypeNode alias=AntlrSimpleName.toDataTypeNameNode(getAliasChild(ct),af);
  return af.DataTypeDecl(ct,schema,extName,source,alias);
}","public static DataTypeDecl parseDataTypeDecl(AntlrToScribParser parser,CommonTree ct,AstFactory af){
  CommonTree tmp1=getSchemaChild(ct);
  String schema=AntlrSimpleName.getName(tmp1);
  CommonTree tmp2=getExtNameChild(ct);
  String extName=AntlrExtIdentifier.getName(tmp2);
  CommonTree tmp3=getSourceChild(ct);
  String source=AntlrExtIdentifier.getName(tmp3);
  DataTypeNode alias=AntlrSimpleName.toDataTypeNameNode(getAliasChild(ct),af);
  return af.DataTypeDecl(ct,schema,extName,source,alias);
}",0.9233830845771144
2247,"protected void runBody() throws ScribParserException, AntlrSourceException, CommandLineException {
  MainContext mc=newMainContext();
  Job job=mc.newJob();
  ScribbleException fail=null;
  try {
    doValidationTasks(job);
  }
 catch (  ScribbleException x) {
    fail=x;
  }
  try {
    doNonAttemptableOutputTasks(job);
  }
 catch (  ScribbleException x) {
    if (fail == null) {
      fail=x;
    }
  }
  if (fail != null) {
    throw fail;
  }
  doNonAttemptableOutputTasks(job);
}","protected void runBody() throws ScribParserException, AntlrSourceException, CommandLineException {
  MainContext mc=newMainContext();
  Job job=mc.newJob();
  ScribbleException fail=null;
  try {
    doValidationTasks(job);
  }
 catch (  ScribbleException x) {
    fail=x;
  }
  try {
    tryOutputTasks(job);
  }
 catch (  ScribbleException x) {
    if (fail == null) {
      fail=x;
    }
  }
  if (fail != null) {
    throw fail;
  }
  doNonAttemptableOutputTasks(job);
}",0.6722164412070759
2248,"private void addHandleMethod(final String ROLE_PARAM,final String MESSAGE_VAR,final String OP,Module main,Role peer){
  boolean first;
  MethodBuilder mb4=this.cb.newMethod(""String_Node_Str"");
  mb4.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  String tmp=HandleIfaceGen.getHandleInterfaceName(this.apigen.getSelf(),this.curr) + ""String_Node_Str"";
  tmp+=this.curr.getActions().stream().sorted(IOStateIfaceGen.IOACTION_COMPARATOR).map((a) -> SuccessorIfaceGen.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
  mb4.addParameters(tmp + ""String_Node_Str"");
  mb4.setReturn(JavaBuilder.VOID);
  mb4.addModifiers(JavaBuilder.PUBLIC);
  mb4.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb4.addAnnotations(""String_Node_Str"");
  mb4.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  EAction a : this.curr.getActions()) {
    EState succ=this.curr.getSuccessor(a);
    if (first) {
      first=false;
    }
 else {
      mb4.addBodyLine(""String_Node_Str"");
    }
    mb4.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb4.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSockGen.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb4.addBodyLine(1,ln);
    mb4.addBodyLine(""String_Node_Str"");
  }
  mb4.addBodyLine(""String_Node_Str"");
  mb4.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb4.addBodyLine(""String_Node_Str"");
}","private void addHandleMethod(final String ROLE_PARAM,final String MESSAGE_VAR,final String OP,Module main,Role peer){
  boolean first;
  MethodBuilder mb4=this.cb.newMethod(""String_Node_Str"");
  mb4.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  String tmp=HandleIfaceGen.getHandleInterfaceName(this.apigen.getSelf(),this.curr) + ""String_Node_Str"";
  tmp+=this.curr.getActions().stream().sorted(IOStateIfaceGen.IOACTION_COMPARATOR).map((a) -> SuccessorIfaceGen.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
  mb4.addParameters(tmp + ""String_Node_Str"");
  mb4.setReturn(JavaBuilder.VOID);
  mb4.addModifiers(JavaBuilder.PUBLIC);
  mb4.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb4.addAnnotations(""String_Node_Str"");
  mb4.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  EAction a : this.curr.getActions()) {
    EState succ=this.curr.getSuccessor(a);
    if (first) {
      first=false;
    }
 else {
      mb4.addBodyLine(""String_Node_Str"");
    }
    mb4.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb4.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSockGen.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb4.addBodyLine(1,ln);
    mb4.addBodyLine(""String_Node_Str"");
  }
  mb4.addBodyLine(""String_Node_Str"");
  mb4.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb4.addBodyLine(""String_Node_Str"");
}",0.9921074727120068
2249,"private void addCallbackCases(MethodBuilder mb2,final String ROLE_PARAM,final String MESSAGE_VAR,final String OP,Module main,Role peer){
  boolean first;
  mb2.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  EAction a : this.curr.getActions()) {
    EState succ=this.curr.getSuccessor(a);
    if (first) {
      first=false;
    }
 else {
      mb2.addBodyLine(""String_Node_Str"");
    }
    mb2.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb2.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSockGen.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb2.addBodyLine(1,ln);
    mb2.addBodyLine(""String_Node_Str"");
  }
  mb2.addBodyLine(""String_Node_Str"");
  mb2.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb2.addBodyLine(""String_Node_Str"");
}","private void addCallbackCases(MethodBuilder mb2,final String ROLE_PARAM,final String MESSAGE_VAR,final String OP,Module main,Role peer){
  boolean first;
  mb2.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  EAction a : this.curr.getActions()) {
    EState succ=this.curr.getSuccessor(a);
    if (first) {
      first=false;
    }
 else {
      mb2.addBodyLine(""String_Node_Str"");
    }
    mb2.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb2.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSockGen.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb2.addBodyLine(1,ln);
    mb2.addBodyLine(""String_Node_Str"");
  }
  mb2.addBodyLine(""String_Node_Str"");
  mb2.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb2.addBodyLine(""String_Node_Str"");
}",0.9895532340520116
2250,"@Override public void receive(Smtp_C_8 s8,betty16.lec2.smtp.Smtp.Smtp.ops._250 op,Buf<_250> arg) throws ScribbleRuntimeException, IOException, ClassNotFoundException {
  s8.send(S,new Quit());
}","@Override public void receive(Smtp_C_8 s8,betty16.lec2.smtp.Smtp.Smtp.ops._250 op,Buf<_250> arg) throws ScribbleRuntimeException, IOException, ClassNotFoundException {
  System.out.println(""String_Node_Str"" + arg.val.getBody());
  s8.send(S,new Quit());
}",0.8641425389755011
2251,"private void run(Smtp_C_1 c1) throws Exception {
  c1.async(S,_220).send(S,new Ehlo(""String_Node_Str"")).branch(S,new MySmtp_C_3Handler());
}","private void run(Smtp_C_1 c1) throws Exception {
  System.out.println(""String_Node_Str"");
  c1.async(S,_220).send(S,new Ehlo(""String_Node_Str"")).branch(S,new MySmtp_C_3Handler());
}",0.8722741433021807
2252,"public F17State build(Map<Role,F17LType> P0){
  F17State init=new F17State(P0);
  Set<F17State> todo=new HashSet<>();
  todo.add(init);
  while (!todo.isEmpty()) {
    Iterator<F17State> i=todo.iterator();
    F17State curr=i.next();
    i.remove();
    Map<Role,List<F17Action>> fireable=curr.getFireable();
    for (    Entry<Role,List<F17Action>> e : fireable.entrySet()) {
      Role r=e.getKey();
      List<F17Action> as=e.getValue();
      for (      F17Action a : as) {
        F17State next=curr.fire(r,a);
        if (!todo.contains(next) && !next.equals(curr)) {
          curr.addEdge(a,next);
          todo.add(next);
        }
      }
    }
  }
  return init;
}","public F17State build(Map<Role,F17LType> P0){
  F17State init=new F17State(P0);
  Set<F17State> todo=new HashSet<>();
  Set<F17State> seen=new HashSet<>();
  todo.add(init);
  while (!todo.isEmpty()) {
    Iterator<F17State> i=todo.iterator();
    F17State curr=i.next();
    i.remove();
    seen.add(curr);
    Map<Role,List<F17Action>> fireable=curr.getFireable();
    for (    Entry<Role,List<F17Action>> e : fireable.entrySet()) {
      Role r=e.getKey();
      List<F17Action> as=e.getValue();
      for (      F17Action a : as) {
        F17State tmp=curr.fire(r,a);
        F17State next=tmp;
        if (seen.contains(tmp)) {
          next=seen.stream().filter((s) -> s.equals(tmp)).iterator().next();
        }
        curr.addEdge(a,next);
        if (!todo.contains(next) && !seen.contains(next)) {
          todo.add(next);
        }
      }
    }
  }
  return init;
}",0.7861271676300579
2253,"public Map<Role,List<F17Action>> getFireable(){
  Map<Role,List<F17Action>> f=new HashMap<>();
  for (  Entry<Role,F17LType> P : this.P.entrySet()) {
    Role r=P.getKey();
    f.put(r,new LinkedList<>());
    F17LType lt=P.getValue();
    if (lt instanceof F17LChoice) {
      F17LChoice lc=(F17LChoice)lt;
      for (      Entry<F17LAction,F17LType> e : lc.cases.entrySet()) {
        F17LAction a=e.getKey();
        if (a instanceof F17LSend) {
          F17LSend ls=(F17LSend)a;
          if (this.Q.get(ls.peer) == null) {
            f.get(r).add(new F17Action(ls));
          }
        }
 else         if (a instanceof F17LReceive) {
          F17LReceive lr=(F17LReceive)a;
          F17LSend m=this.Q.get(lr.peer);
          if (m != null && m.toDual().equals(lr)) {
            f.get(r).add(new F17Action(lr));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
 else     if (lt instanceof F17LEnd) {
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + lt);
    }
  }
  return f;
}","public Map<Role,List<F17Action>> getFireable(){
  Map<Role,List<F17Action>> f=new HashMap<>();
  for (  Entry<Role,F17LType> P : this.P.entrySet()) {
    Role r=P.getKey();
    f.put(r,new LinkedList<>());
    F17LType lt=P.getValue();
    if (lt instanceof F17LChoice) {
      F17LChoice lc=(F17LChoice)lt;
      for (      Entry<F17LAction,F17LType> e : lc.cases.entrySet()) {
        F17LAction a=e.getKey();
        if (a instanceof F17LSend) {
          F17LSend ls=(F17LSend)a;
          if (this.Q.get(ls.peer) == null) {
            f.get(r).add(new F17Action(ls));
          }
        }
 else         if (a instanceof F17LReceive) {
          F17LReceive lr=(F17LReceive)a;
          F17LSend m=this.Q.get(lr.self);
          if (m != null && m.toDual().equals(lr)) {
            f.get(r).add(new F17Action(lr));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
 else     if (lt instanceof F17LEnd) {
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + lt);
    }
  }
  return f;
}",0.996265172735761
2254,"public F17State fire(Role r,F17Action a){
  Map<Role,F17LType> P=new HashMap<>(this.P);
  Map<Role,F17LSend> Q=new HashMap<>(this.Q);
  F17LAction la=a.action;
  F17LType succ=((F17LChoice)P.get(r)).cases.get(la);
  if (succ instanceof F17LRec) {
    succ=((F17LRec)succ).unfold();
  }
  if (la instanceof F17LSend) {
    F17LSend ls=(F17LSend)la;
    P.put(r,succ);
    Q.put(ls.peer,null);
  }
 else   if (la instanceof F17LReceive) {
    F17LReceive lr=(F17LReceive)la;
    P.put(r,succ);
    Q.put(lr.peer,lr.toDual());
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + a);
  }
  return new F17State(P,Q);
}","public F17State fire(Role r,F17Action a){
  Map<Role,F17LType> P=new HashMap<>(this.P);
  Map<Role,F17LSend> Q=new HashMap<>(this.Q);
  F17LAction la=a.action;
  F17LType succ=((F17LChoice)P.get(r)).cases.get(la);
  if (succ instanceof F17LRec) {
    succ=((F17LRec)succ).unfold();
  }
  if (la instanceof F17LSend) {
    F17LSend ls=(F17LSend)la;
    P.put(r,succ);
    Q.put(ls.peer,ls);
  }
 else   if (la instanceof F17LReceive) {
    F17LReceive lr=(F17LReceive)la;
    P.put(r,succ);
    Q.put(lr.self,null);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + a);
  }
  return new F17State(P,Q);
}",0.9749798224374496
2255,"public boolean isEmpty(){
  return this.stuck.isEmpty() && this.waitFor.isEmpty() && this.orphans.isEmpty();
}","public boolean isEmpty(){
  return this.stuck.isEmpty() && this.waitFor.isEmpty() && this.orphans.isEmpty()&& this.unfinished.isEmpty();
}",0.8870967741935484
2256,"@Test public final void tests() throws IOException, InterruptedException, ExecutionException {
  try {
    String dir=ClassLoader.getSystemResource(AllTest.ALL_ROOT).getFile();
    if (File.separator.equals(""String_Node_Str"")) {
      dir=dir.substring(1).replace(""String_Node_Str"",""String_Node_Str"");
    }
    new CommandLine(this.example,CommandLineArgParser.JUNIT_FLAG,CommandLineArgParser.IMPORT_PATH_FLAG,dir).run();
    Assert.assertFalse(""String_Node_Str"",this.isBadTest);
  }
 catch (  ScribbleException e) {
    Assert.assertTrue(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",this.isBadTest);
  }
catch (  ScribParserException|CommandLineException e) {
    throw new RuntimeException(e);
  }
}","@Test public void tests() throws IOException, InterruptedException, ExecutionException {
  try {
    String dir=ClassLoader.getSystemResource(AllTest.ALL_ROOT).getFile();
    if (File.separator.equals(""String_Node_Str"")) {
      dir=dir.substring(1).replace(""String_Node_Str"",""String_Node_Str"");
    }
    new CommandLine(this.example,CommandLineArgParser.JUNIT_FLAG,CommandLineArgParser.IMPORT_PATH_FLAG,dir).run();
    Assert.assertFalse(""String_Node_Str"",this.isBadTest);
  }
 catch (  ScribbleException e) {
    Assert.assertTrue(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",this.isBadTest);
  }
catch (  ScribParserException|CommandLineException e) {
    throw new RuntimeException(e);
  }
}",0.995768688293371
2257,"@Parameters(name=""String_Node_Str"") public static Collection<Object[]> data(){
  return Harness.checkTestDirProperty(AllTest.BAD_TEST,BAD_ROOT);
}","@Parameters(name=""String_Node_Str"") public static Collection<Object[]> data(){
  String dir_good=ClassLoader.getSystemResource(GoodTest.GOOD_ROOT).getFile();
  String dir_bad=ClassLoader.getSystemResource(BadTest.BAD_ROOT).getFile();
  List<Object[]> result=new LinkedList<>();
  result.addAll(Harness.makeTests(GOOD_TEST,dir_good));
  result.addAll(Harness.makeTests(BAD_TEST,dir_bad));
  return result;
}",0.3768115942028985
2258,"private static List<File> getAllScrFilesUnderDirectory(String path){
  List<File> res=new LinkedList<>();
  for (  File f : new File(path).listFiles()) {
    if (f.isFile()) {
      if (f.getName().equals(DIR_IGNORE_FILE)) {
        return Collections.emptyList();
      }
 else       if (f.getName().endsWith(SCRIBBLE_EXT)) {
        res.add(f);
      }
    }
 else     if (f.isDirectory()) {
      res.addAll(getAllScrFilesUnderDirectory(f.getAbsolutePath()));
    }
  }
  return res;
}","private static List<File> getAllScrFilesUnderDirectory(String path){
  List<File> res=new LinkedList<>();
  for (  File f : new File(path).listFiles()) {
    if (f.isFile()) {
      if (f.getName().equals(Harness.DIR_IGNORE_FILE)) {
        return Collections.emptyList();
      }
 else       if (f.getName().endsWith(Harness.SCRIBBLE_EXT)) {
        res.add(f);
      }
    }
 else     if (f.isDirectory()) {
      res.addAll(getAllScrFilesUnderDirectory(f.getAbsolutePath()));
    }
  }
  return res;
}",0.9838709677419356
2259,"/** 
 * Returns all Scribble files in a given directory.
 * @param dir
 * @return
 */
private static Collection<String> getScribbleFilePaths(String dir){
  return getAllScrFilesUnderDirectory(dir).stream().map((f) -> f.getAbsolutePath().toString()).collect(Collectors.toList());
}","/** 
 * Returns all Scribble files in a given directory.
 * @param dir
 * @return
 */
private static Collection<String> getScribbleFilePaths(String dir){
  List<String> res=new LinkedList<>();
  for (  File f : getAllScrFilesUnderDirectory(dir)) {
    res.add(f.getAbsolutePath().toString());
  }
  return res;
}",0.7601351351351351
2260,"public static Collection<Object[]> checkTestDirProperty(boolean isBadTest,String root){
  String dir=System.getProperty(TEST_DIR_FLAG);
  if (dir == null) {
    dir=ClassLoader.getSystemResource(root).getFile();
  }
  return makeTests(isBadTest,dir);
}","public static Collection<Object[]> checkTestDirProperty(boolean isBadTest,String root){
  String dir=System.getProperty(Harness.TEST_DIR_FLAG);
  if (dir == null) {
    dir=ClassLoader.getSystemResource(root).getFile();
  }
  return makeTests(isBadTest,dir);
}",0.984375
2261,"public static Collection<Object[]> makeTests(boolean isBadTest,String dir){
  return findTests(dir).stream().map((e) -> new Object[]{e,isBadTest}).collect(Collectors.toList());
}","public static Collection<Object[]> makeTests(boolean isBadTest,String dir){
  List<Object[]> res=new LinkedList<>();
  for (  String t : findTests(dir)) {
    res.add(new Object[]{t,isBadTest});
  }
  return res;
}",0.5561224489795918
2262,"public EndpointState unfairTransform(){
  EndpointState init=this.clone();
  EndpointState term=ModelState.getTerminal(init);
  Set<EndpointState> seen=new HashSet<>();
  Set<EndpointState> todo=new LinkedHashSet<>();
  todo.add(init);
  while (!todo.isEmpty()) {
    Iterator<EndpointState> i=todo.iterator();
    EndpointState curr=i.next();
    i.remove();
    if (seen.contains(curr)) {
      continue;
    }
    seen.add(curr);
    if (curr.getStateKind() == Kind.OUTPUT && curr.getAllTakeable().size() > 1) {
{
        Iterator<IOAction> as=curr.getAllTakeable().iterator();
        Iterator<EndpointState> ss=curr.getSuccessors().iterator();
        List<IOAction> cloneas=new LinkedList<>();
        List<EndpointState> cloness=new LinkedList<>();
        Map<EndpointState,IOAction> toRemove=new HashMap<>();
        while (as.hasNext()) {
          IOAction a=as.next();
          EndpointState s=ss.next();
          if (!s.canReach(curr)) {
            todo.add(s);
          }
 else {
            EndpointState clone=curr.unfairClone(term,a,s);
            cloneas.add(a);
            cloness.add(clone);
            toRemove.put(s,a);
          }
        }
        if (!cloneas.isEmpty()) {
          for (          EndpointState s : toRemove.keySet()) {
            try {
              curr.removeEdge(toRemove.get(s),s);
            }
 catch (            ScribbleException e) {
              throw new RuntimeException(e);
            }
          }
          Iterator<IOAction> icloneas=cloneas.iterator();
          Iterator<EndpointState> icloness=cloness.iterator();
          while (icloneas.hasNext()) {
            IOAction a=icloneas.next();
            EndpointState s=icloness.next();
            curr.addEdge(a,s);
            todo.add(s);
          }
        }
      }
    }
 else {
      todo.addAll(curr.getSuccessors());
    }
  }
  return init;
}","public EndpointState unfairTransform(){
  EndpointState init=this.clone();
  EndpointState term=ModelState.getTerminal(init);
  Set<EndpointState> seen=new HashSet<>();
  Set<EndpointState> todo=new LinkedHashSet<>();
  todo.add(init);
  while (!todo.isEmpty()) {
    Iterator<EndpointState> i=todo.iterator();
    EndpointState curr=i.next();
    i.remove();
    if (seen.contains(curr)) {
      continue;
    }
    seen.add(curr);
    if (curr.getStateKind() == Kind.OUTPUT && curr.getAllTakeable().size() > 1) {
{
        Iterator<IOAction> as=curr.getAllTakeable().iterator();
        Iterator<EndpointState> ss=curr.getSuccessors().iterator();
        List<IOAction> cloneas=new LinkedList<>();
        List<EndpointState> cloness=new LinkedList<>();
        Map<EndpointState,List<IOAction>> toRemove=new HashMap<>();
        while (as.hasNext()) {
          IOAction a=as.next();
          EndpointState s=ss.next();
          if (!s.canReach(curr)) {
            todo.add(s);
          }
 else {
            EndpointState clone=curr.unfairClone(term,a,s);
            cloneas.add(a);
            cloness.add(clone);
            List<IOAction> tmp=toRemove.get(s);
            if (tmp == null) {
              tmp=new LinkedList<>();
              toRemove.put(s,tmp);
            }
            tmp.add(a);
          }
        }
        if (!cloneas.isEmpty()) {
          for (          EndpointState s : toRemove.keySet()) {
            try {
              for (              IOAction tmp : toRemove.get(s)) {
                curr.removeEdge(tmp,s);
              }
            }
 catch (            ScribbleException e) {
              throw new RuntimeException(e);
            }
          }
          Iterator<IOAction> icloneas=cloneas.iterator();
          Iterator<EndpointState> icloness=cloness.iterator();
          while (icloneas.hasNext()) {
            IOAction a=icloneas.next();
            EndpointState s=icloness.next();
            curr.addEdge(a,s);
            todo.add(s);
          }
        }
      }
    }
 else {
      todo.addAll(curr.getSuccessors());
    }
  }
  return init;
}",0.5040080160320641
2263,"public ExplicitCorrelationEnv disableAccept(){
  ExplicitCorrelationEnv copy=copy();
  copy.canAccept=false;
  return copy;
}","public ExplicitCorrelationEnv disableAccept(){
  if (!this.canAccept) {
    return this;
  }
  ExplicitCorrelationEnv copy=copy();
  copy.canAccept=false;
  return copy;
}",0.8445945945945946
2264,"@Override public LContinue leaveEndpointGraphBuilding(ScribNode parent,ScribNode child,EndpointGraphBuilder graph,ScribNode visited) throws ScribbleException {
  LContinue lr=(LContinue)visited;
  RecVar rv=lr.recvar.toName();
  if (graph.builder.isUnguardedInChoice()) {
    graph.builder.addContinueEdge(graph.builder.getEntry(),rv);
  }
 else {
    Iterator<EndpointState> preds=graph.builder.getPredecessors().iterator();
    Iterator<IOAction> prevs=graph.builder.getPreviousActions().iterator();
    EndpointState entry=graph.builder.getEntry();
    Set<List<Object>> removed=new HashSet<>();
    while (preds.hasNext()) {
      EndpointState pred=preds.next();
      IOAction prev=prevs.next();
      List<Object> tmp=Arrays.asList(pred,prev,entry);
      if (!removed.contains(tmp)) {
        removed.add(tmp);
        graph.builder.removeEdge(pred,prev,entry);
      }
      graph.builder.addEdge(pred,prev,graph.builder.getRecursionEntry(rv));
    }
  }
  return (LContinue)super.leaveEndpointGraphBuilding(parent,child,graph,lr);
}","@Override public LContinue leaveEndpointGraphBuilding(ScribNode parent,ScribNode child,EndpointGraphBuilder graph,ScribNode visited) throws ScribbleException {
  LContinue lr=(LContinue)visited;
  RecVar rv=lr.recvar.toName();
  if (graph.builder.isUnguardedInChoice()) {
    graph.builder.addContinueEdge(graph.builder.getEntry(),rv);
  }
 else {
    Iterator<EndpointState> preds=graph.builder.getPredecessors().iterator();
    Iterator<IOAction> prevs=graph.builder.getPreviousActions().iterator();
    EndpointState entry=graph.builder.getEntry();
    Set<List<Object>> removed=new HashSet<>();
    while (preds.hasNext()) {
      EndpointState pred=preds.next();
      IOAction prev=prevs.next();
      List<Object> tmp=Arrays.asList(pred,prev,entry);
      if (!removed.contains(tmp)) {
        removed.add(tmp);
        graph.builder.removeEdgeFromPredecessor(pred,prev);
      }
      graph.builder.addRecursionEdge(pred,prev,graph.builder.getRecursionEntry(rv));
    }
  }
  return (LContinue)super.leaveEndpointGraphBuilding(parent,child,graph,lr);
}",0.9762131303520456
2265,"public List<A> getPreviousActions(){
  return this.prev.peek();
}","public List<A> getPreviousActions(){
  return new LinkedList<>(this.prev.peek());
}",0.8783783783783784
2266,"public List<S> getPredecessors(){
  return this.pred.peek();
}","public List<S> getPredecessors(){
  return new LinkedList<>(this.pred.peek());
}",0.8732394366197183
2267,"private void run(Http_C_1 c,String host) throws Exception {
  Buf<Response> buf=new Buf<>();
  c.send(S,new Request(""String_Node_Str"",""String_Node_Str"",host)).receive(S,RESPONSE,buf);
  System.out.println(""String_Node_Str"" + buf.val);
}","private void run(Http_C_1 c,String host) throws Exception {
  Buf<Response> buf=new Buf<>();
  c.send(S,new Request(""String_Node_Str"",""String_Node_Str"",host)).receive(S,Response,buf);
  System.out.println(""String_Node_Str"" + buf.val);
}",0.9703389830508474
2268,"public EndpointState unfairTransform(){
  EndpointState init=this.clone();
  EndpointState term=ModelState.getTerminal(init);
  Set<EndpointState> seen=new HashSet<>();
  Set<EndpointState> todo=new LinkedHashSet<>();
  todo.add(init);
  while (!todo.isEmpty()) {
    Iterator<EndpointState> i=todo.iterator();
    EndpointState curr=i.next();
    i.remove();
    if (seen.contains(curr)) {
      continue;
    }
    seen.add(curr);
    if (curr.getStateKind() == Kind.OUTPUT && curr.getAllTakeable().size() > 1) {
{
        Iterator<IOAction> as=curr.getAllTakeable().iterator();
        Iterator<EndpointState> ss=curr.getSuccessors().iterator();
        List<IOAction> cloneas=new LinkedList<>();
        List<EndpointState> cloness=new LinkedList<>();
        while (as.hasNext()) {
          IOAction a=as.next();
          EndpointState s=ss.next();
          if (!s.canReach(curr)) {
            todo.add(s);
          }
 else {
            EndpointState clone=curr.unfairClone(term,a,s);
            cloneas.add(a);
            cloness.add(clone);
          }
        }
        if (!cloneas.isEmpty()) {
          as=new LinkedList<>(curr.getAllTakeable()).iterator();
          ss=new LinkedList<>(curr.getSuccessors()).iterator();
          while (as.hasNext()) {
            IOAction a=as.next();
            EndpointState s=ss.next();
            if (cloneas.contains(a)) {
              try {
                curr.removeEdge(a,s);
              }
 catch (              ScribbleException e) {
                throw new RuntimeException(e);
              }
            }
          }
          Iterator<IOAction> icloneas=cloneas.iterator();
          Iterator<EndpointState> icloness=cloness.iterator();
          while (icloneas.hasNext()) {
            IOAction a=icloneas.next();
            EndpointState s=icloness.next();
            curr.addEdge(a,s);
            todo.add(s);
          }
        }
      }
    }
 else {
      todo.addAll(curr.getSuccessors());
    }
  }
  return init;
}","public EndpointState unfairTransform(){
  EndpointState init=this.clone();
  EndpointState term=ModelState.getTerminal(init);
  Set<EndpointState> seen=new HashSet<>();
  Set<EndpointState> todo=new LinkedHashSet<>();
  todo.add(init);
  while (!todo.isEmpty()) {
    Iterator<EndpointState> i=todo.iterator();
    EndpointState curr=i.next();
    i.remove();
    if (seen.contains(curr)) {
      continue;
    }
    seen.add(curr);
    if (curr.getStateKind() == Kind.OUTPUT && curr.getAllTakeable().size() > 1) {
{
        Iterator<IOAction> as=curr.getAllTakeable().iterator();
        Iterator<EndpointState> ss=curr.getSuccessors().iterator();
        List<IOAction> cloneas=new LinkedList<>();
        List<EndpointState> cloness=new LinkedList<>();
        Map<EndpointState,IOAction> toRemove=new HashMap<>();
        while (as.hasNext()) {
          IOAction a=as.next();
          EndpointState s=ss.next();
          if (!s.canReach(curr)) {
            todo.add(s);
          }
 else {
            EndpointState clone=curr.unfairClone(term,a,s);
            cloneas.add(a);
            cloness.add(clone);
            toRemove.put(s,a);
          }
        }
        if (!cloneas.isEmpty()) {
          for (          EndpointState s : toRemove.keySet()) {
            try {
              curr.removeEdge(toRemove.get(s),s);
            }
 catch (            ScribbleException e) {
              throw new RuntimeException(e);
            }
          }
          Iterator<IOAction> icloneas=cloneas.iterator();
          Iterator<EndpointState> icloness=cloness.iterator();
          while (icloneas.hasNext()) {
            IOAction a=icloneas.next();
            EndpointState s=icloness.next();
            curr.addEdge(a,s);
            todo.add(s);
          }
        }
      }
    }
 else {
      todo.addAll(curr.getSuccessors());
    }
  }
  return init;
}",0.7612670615503476
2269,"private void outputProjections(Job job) throws CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.PROJECT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<LProtocolName,Module> projections=job.getProjections(fullname,role);
    System.out.println(""String_Node_Str"" + projections.values().stream().map((p) -> p.toString()).collect(Collectors.joining(""String_Node_Str"")));
  }
}","private void outputProjections(Job job) throws CommandLineException, ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.PROJECT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<LProtocolName,Module> projections=job.getProjections(fullname,role);
    System.out.println(""String_Node_Str"" + projections.values().stream().map((p) -> p.toString()).collect(Collectors.joining(""String_Node_Str"")));
  }
}",0.9832007073386384
2270,"public Map<LProtocolName,Module> getProjections(GProtocolName fullname,Role role){
  Module root=this.jcontext.getProjection(fullname,role);
  Map<LProtocolName,Set<Role>> dependencies=((LProtocolDeclDel)root.getLocalProtocolDecls().get(0).del()).getProtocolDeclContext().getDependencyMap().getDependencies().get(role);
  return dependencies.keySet().stream().collect(Collectors.toMap((lpn) -> lpn,(lpn) -> this.jcontext.getModule(lpn.getPrefix())));
}","public Map<LProtocolName,Module> getProjections(GProtocolName fullname,Role role) throws ScribbleException {
  Module root=this.jcontext.getProjection(fullname,role);
  Map<LProtocolName,Set<Role>> dependencies=((LProtocolDeclDel)root.getLocalProtocolDecls().get(0).del()).getProtocolDeclContext().getDependencyMap().getDependencies().get(role);
  return dependencies.keySet().stream().collect(Collectors.toMap((lpn) -> lpn,(lpn) -> this.jcontext.getModule(lpn.getPrefix())));
}",0.9720430107526882
2271,"public EndpointGraph getEndpointGraph(GProtocolName fullname,Role role) throws ScribbleException {
  LProtocolName fulllpn=Projector.projectFullProtocolName(fullname,role);
  EndpointGraph graph=this.graphs.get(fulllpn);
  if (graph == null) {
    Module proj=getProjection(fullname,role);
    if (proj == null) {
      throw new ScribbleException(""String_Node_Str"" + fullname + ""String_Node_Str""+ role);
    }
    EndpointGraphBuilder builder=new EndpointGraphBuilder(this.job);
    proj.accept(builder);
    graph=builder.builder.finalise();
    addEndpointGraph(fulllpn,graph);
  }
  return graph;
}","public EndpointGraph getEndpointGraph(GProtocolName fullname,Role role) throws ScribbleException {
  LProtocolName fulllpn=Projector.projectFullProtocolName(fullname,role);
  EndpointGraph graph=this.graphs.get(fulllpn);
  if (graph == null) {
    Module proj=getProjection(fullname,role);
    EndpointGraphBuilder builder=new EndpointGraphBuilder(this.job);
    proj.accept(builder);
    graph=builder.builder.finalise();
    addEndpointGraph(fulllpn,graph);
  }
  return graph;
}",0.5595567867036011
2272,"public Module getProjection(GProtocolName fullname,Role role){
  return this.projected.get(Projector.projectFullProtocolName(fullname,role));
}","public Module getProjection(GProtocolName fullname,Role role) throws ScribbleException {
  Module proj=this.projected.get(Projector.projectFullProtocolName(fullname,role));
  if (proj == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname + ""String_Node_Str""+ role);
  }
  return proj;
}",0.6085011185682326
2273,"protected EndpointGraph getEndpointGraph(LProtocolName fullname){
  EndpointGraph graph=this.graphs.get(fullname);
  if (graph == null) {
    throw new RuntimeException(""String_Node_Str"" + fullname);
  }
  return graph;
}","public EndpointGraph getEndpointGraph(GProtocolName fullname,Role role) throws ScribbleException {
  LProtocolName fulllpn=Projector.projectFullProtocolName(fullname,role);
  EndpointGraph graph=this.graphs.get(fulllpn);
  if (graph == null) {
    Module proj=getProjection(fullname,role);
    if (proj == null) {
      throw new ScribbleException(""String_Node_Str"" + fullname + ""String_Node_Str""+ role);
    }
    EndpointGraphBuilder builder=new EndpointGraphBuilder(this.job);
    proj.accept(builder);
    graph=builder.builder.finalise();
    addEndpointGraph(fulllpn,graph);
  }
  return graph;
}",0.4204131227217497
2274,"protected EndpointGraph getUnfairEndpointGraph(LProtocolName fullname){
  EndpointGraph unfair=this.unfair.get(fullname);
  if (unfair == null) {
    unfair=getEndpointGraph(fullname).init.unfairTransform().toGraph();
    addUnfairEndpointGraph(fullname,unfair);
  }
  return unfair;
}","public EndpointGraph getUnfairEndpointGraph(GProtocolName fullname,Role role) throws ScribbleException {
  return getUnfairEndpointGraphAux(fullname,role);
}",0.497737556561086
2275,"protected EndpointGraph getMinimisedEndpointGraph(LProtocolName fullname){
  EndpointGraph minimised=this.minimised.get(fullname);
  if (minimised == null) {
    try {
      String aut=runAut(getEndpointGraph(fullname).init.toAut(),fullname + ""String_Node_Str"");
      minimised=new AutParser().parse(aut);
      addMinimisedEndpointGraph(fullname,minimised);
    }
 catch (    ScribbleException e) {
      throw new RuntimeException(e);
    }
  }
  return minimised;
}","public EndpointGraph getMinimisedEndpointGraph(GProtocolName fullname,Role role){
  return getMinimisedEndpointGraphAux(fullname,role);
}",0.3729372937293729
2276,"public Map<Role,Map<Role,Send>> getBuffers(){
  return this.buffs;
}","public Map<Role,Map<Role,Send>> getBuffers(){
  return new WFBuffers(this).buffs;
}",0.9006622516556292
2277,"private WFState buildGlobalModel(GProtocolName fullname,GProtocolDecl gpd,Map<Role,EndpointFSM> egraphs,Map<Integer,WFState> seen) throws ScribbleException {
  Job job=getJob();
  if (!job.fair && !job.noLiveness) {
    for (    Entry<Role,EndpointFSM> e : egraphs.entrySet()) {
      Role r=e.getKey();
      EndpointFSM nonfair=e.getValue().init.unfairClone().toGraph().toFsm();
      egraphs.put(r,nonfair);
      job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ r+ ""String_Node_Str""+ nonfair.init.toDot());
    }
  }
  WFBuffers b0=new WFBuffers(egraphs.keySet(),!gpd.modifiers.contains(GProtocolDecl.Modifiers.EXPLICIT));
  WFConfig c0=new WFConfig(egraphs,b0);
  WFState init=new WFState(c0);
  LinkedHashSet<WFState> todo=new LinkedHashSet<>();
  todo.add(init);
  int count=0;
  while (!todo.isEmpty()) {
    Iterator<WFState> i=todo.iterator();
    WFState curr=i.next();
    i.remove();
    seen.put(curr.id,curr);
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    Map<Role,List<IOAction>> takeable=curr.getTakeable();
    for (    Role r : takeable.keySet()) {
      List<IOAction> acceptable_r=takeable.get(r);
      EndpointFSM currfsm=curr.config.states.get(r);
      Kind k=currfsm.getStateKind();
      if (k == Kind.OUTPUT) {
        for (        IOAction a : acceptable_r) {
          if (acceptable_r.stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + acceptable_r);
          }
        }
      }
 else       if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT || k == Kind.ACCEPT) {
        for (        IOAction a : acceptable_r) {
          if (currfsm.getAllTakeable().stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + currfsm.getAllTakeable());
          }
        }
      }
    }
    for (    Role r : takeable.keySet()) {
      List<IOAction> acceptable_r=takeable.get(r);
      for (      IOAction a : acceptable_r) {
        if (a.isSend() || a.isReceive() || a.isDisconnect()) {
          getNextStates(todo,seen,curr,a.toGlobal(r),curr.accept(r,a));
        }
 else         if (a.isAccept() || a.isConnect()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction d=a.toDual(r);
          if (as != null && as.contains(d)) {
            as.remove(d);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : d.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,d));
          }
        }
 else         if (a.isWrapClient() || a.isWrapServer()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction w=a.toDual(r);
          if (as != null && as.contains(w)) {
            as.remove(w);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : w.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,w));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
  }
  job.debugPrintln(init.toDot() + ""String_Node_Str"" + fullname+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  return init;
}","private WFState buildGlobalModel(GProtocolName fullname,GProtocolDecl gpd,Map<Role,EndpointFSM> egraphs,Map<Integer,WFState> seen) throws ScribbleException {
  Job job=getJob();
  if (!job.fair && !job.noLiveness) {
    for (    Entry<Role,EndpointFSM> e : egraphs.entrySet()) {
      Role r=e.getKey();
      EndpointFSM nonfair=e.getValue().init.unfairClone().toGraph().toFsm();
      egraphs.put(r,nonfair);
      job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ r+ ""String_Node_Str""+ nonfair.init.toDot());
    }
  }
  WFBuffers b0=new WFBuffers(egraphs.keySet(),!gpd.modifiers.contains(GProtocolDecl.Modifiers.EXPLICIT));
  WFConfig c0=new WFConfig(egraphs,b0);
  WFState init=new WFState(c0);
  LinkedHashSet<WFState> todo=new LinkedHashSet<>();
  todo.add(init);
  int count=0;
  while (!todo.isEmpty()) {
    Iterator<WFState> i=todo.iterator();
    WFState curr=i.next();
    i.remove();
    seen.put(curr.id,curr);
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    Map<Role,List<IOAction>> takeable=curr.getTakeable();
    for (    Role r : takeable.keySet()) {
      List<IOAction> acceptable_r=takeable.get(r);
      EndpointFSM currfsm=curr.config.states.get(r);
      Kind k=currfsm.getStateKind();
      if (k == Kind.OUTPUT) {
        for (        IOAction a : acceptable_r) {
          if (acceptable_r.stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + acceptable_r);
          }
        }
      }
 else       if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT || k == Kind.ACCEPT) {
        for (        IOAction a : acceptable_r) {
          if (currfsm.getAllTakeable().stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + currfsm.getAllTakeable());
          }
        }
      }
    }
    for (    Role r : takeable.keySet()) {
      List<IOAction> acceptable_r=takeable.get(r);
      for (      IOAction a : acceptable_r) {
        if (a.isSend() || a.isReceive() || a.isDisconnect()) {
          getNextStates(todo,seen,curr,a.toGlobal(r),curr.take(r,a));
        }
 else         if (a.isAccept() || a.isConnect()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction d=a.toDual(r);
          if (as != null && as.contains(d)) {
            as.remove(d);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : d.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,d));
          }
        }
 else         if (a.isWrapClient() || a.isWrapServer()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction w=a.toDual(r);
          if (as != null && as.contains(w)) {
            as.remove(w);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : w.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,w));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
  }
  job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ init.toDot()+ ""String_Node_Str""+ fullname+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  return init;
}",0.9855371900826446
2278,"@Override protected void addMethods(){
  final String ROLE_PARAM=""String_Node_Str"";
  final String MESSAGE_VAR=""String_Node_Str"";
  final String OPENUM_VAR=""String_Node_Str"";
  final String OP=MESSAGE_VAR + ""String_Node_Str"" + StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD;
  Module main=this.apigen.getMainModule();
  ClassBuilder caseclass=new CaseSocketGenerator(apigen,curr).generateType();
  String next=caseclass.getName();
  String enumClass=getBranchEnumClassName(this.apigen,this.curr);
  MethodBuilder mb=cb.newMethod(""String_Node_Str"");
  mb.setReturn(next);
  mb.addParameters(SessionApiGenerator.getRoleClassName(curr.getTakeable().iterator().next().obj) + ""String_Node_Str"" + ROLE_PARAM);
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  Role peer=curr.getTakeable().iterator().next().obj;
  mb.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  mb.addBodyLine(enumClass + ""String_Node_Str"" + OPENUM_VAR+ ""String_Node_Str"");
  boolean first=true;
  for (  IOAction a : curr.getTakeable()) {
    mb.addBodyLine(((first) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + OP+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(1,OPENUM_VAR + ""String_Node_Str"" + enumClass+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(""String_Node_Str"");
    first=false;
  }
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.NEW+ ""String_Node_Str""+ next+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str""+ OPENUM_VAR+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  String handlerif=HandlerInterfaceGenerator.getHandlerInterfaceName(this.cb.getName());
  String handleif=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr);
  MethodBuilder mb2=this.cb.newMethod(""String_Node_Str"");
  mb2.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb2.addParameters(handlerif + ""String_Node_Str"");
  mb2.setReturn(JavaBuilder.VOID);
  mb2.addModifiers(JavaBuilder.PUBLIC);
  mb2.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  first=true;
  handleif+=""String_Node_Str"";
  for (  IOAction a : this.curr.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
    if (first) {
      first=false;
    }
 else {
      handleif+=""String_Node_Str"";
    }
    EndpointState succ=this.curr.take(a);
    if (succ.isTerminal()) {
      handleif+=ScribSocketGenerator.GENERATED_ENDSOCKET_NAME;
    }
 else {
      handleif+=this.apigen.getSocketClassName(succ);
    }
  }
  handleif+=""String_Node_Str"";
  mb2.addBodyLine(""String_Node_Str"" + handleif + ""String_Node_Str"");
  MethodBuilder mb3=this.cb.newMethod(""String_Node_Str"");
  mb3.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb3.addParameters(handleif + ""String_Node_Str"");
  mb3.setReturn(JavaBuilder.VOID);
  mb3.addModifiers(JavaBuilder.PUBLIC);
  mb3.addAnnotations(""String_Node_Str"");
  mb3.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb3.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    if (first) {
      first=false;
    }
 else {
      mb3.addBodyLine(""String_Node_Str"");
    }
    mb3.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb3.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb3.addBodyLine(1,ln);
    mb3.addBodyLine(""String_Node_Str"");
  }
  mb3.addBodyLine(""String_Node_Str"");
  mb3.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb3.addBodyLine(""String_Node_Str"");
  MethodBuilder mb4=this.cb.newMethod(""String_Node_Str"");
  mb4.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  String tmp=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr) + ""String_Node_Str"";
  tmp+=this.curr.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> SuccessorInterfaceGenerator.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
  mb4.addParameters(tmp + ""String_Node_Str"");
  mb4.setReturn(JavaBuilder.VOID);
  mb4.addModifiers(JavaBuilder.PUBLIC);
  mb4.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb4.addAnnotations(""String_Node_Str"");
  mb4.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    if (first) {
      first=false;
    }
 else {
      mb4.addBodyLine(""String_Node_Str"");
    }
    mb4.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb4.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb4.addBodyLine(1,ln);
    mb4.addBodyLine(""String_Node_Str"");
  }
  mb4.addBodyLine(""String_Node_Str"");
  mb4.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb4.addBodyLine(""String_Node_Str"");
  this.apigen.addTypeDecl(new HandlerInterfaceGenerator(this.apigen,this.cb,this.curr).generateType());
}","@Override protected void addMethods() throws ScribbleException {
  final String ROLE_PARAM=""String_Node_Str"";
  final String MESSAGE_VAR=""String_Node_Str"";
  final String OPENUM_VAR=""String_Node_Str"";
  final String OP=MESSAGE_VAR + ""String_Node_Str"" + StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD;
  Module main=this.apigen.getMainModule();
  ClassBuilder caseclass=new CaseSocketGenerator(apigen,curr).generateType();
  String next=caseclass.getName();
  String enumClass=getBranchEnumClassName(this.apigen,this.curr);
  MethodBuilder mb=cb.newMethod(""String_Node_Str"");
  mb.setReturn(next);
  mb.addParameters(SessionApiGenerator.getRoleClassName(curr.getTakeable().iterator().next().obj) + ""String_Node_Str"" + ROLE_PARAM);
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  Role peer=curr.getTakeable().iterator().next().obj;
  mb.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  mb.addBodyLine(enumClass + ""String_Node_Str"" + OPENUM_VAR+ ""String_Node_Str"");
  boolean first=true;
  for (  IOAction a : curr.getTakeable()) {
    mb.addBodyLine(((first) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + OP+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(1,OPENUM_VAR + ""String_Node_Str"" + enumClass+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(""String_Node_Str"");
    first=false;
  }
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.NEW+ ""String_Node_Str""+ next+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str""+ OPENUM_VAR+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  String handlerif=HandlerInterfaceGenerator.getHandlerInterfaceName(this.cb.getName());
  String handleif=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr);
  MethodBuilder mb2=this.cb.newMethod(""String_Node_Str"");
  mb2.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb2.addParameters(handlerif + ""String_Node_Str"");
  mb2.setReturn(JavaBuilder.VOID);
  mb2.addModifiers(JavaBuilder.PUBLIC);
  mb2.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  first=true;
  handleif+=""String_Node_Str"";
  for (  IOAction a : this.curr.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
    if (first) {
      first=false;
    }
 else {
      handleif+=""String_Node_Str"";
    }
    EndpointState succ=this.curr.take(a);
    if (succ.isTerminal()) {
      handleif+=ScribSocketGenerator.GENERATED_ENDSOCKET_NAME;
    }
 else {
      handleif+=this.apigen.getSocketClassName(succ);
    }
  }
  handleif+=""String_Node_Str"";
  mb2.addBodyLine(""String_Node_Str"" + handleif + ""String_Node_Str"");
  MethodBuilder mb3=this.cb.newMethod(""String_Node_Str"");
  mb3.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb3.addParameters(handleif + ""String_Node_Str"");
  mb3.setReturn(JavaBuilder.VOID);
  mb3.addModifiers(JavaBuilder.PUBLIC);
  mb3.addAnnotations(""String_Node_Str"");
  mb3.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb3.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    if (first) {
      first=false;
    }
 else {
      mb3.addBodyLine(""String_Node_Str"");
    }
    mb3.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb3.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb3.addBodyLine(1,ln);
    mb3.addBodyLine(""String_Node_Str"");
  }
  mb3.addBodyLine(""String_Node_Str"");
  mb3.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb3.addBodyLine(""String_Node_Str"");
  MethodBuilder mb4=this.cb.newMethod(""String_Node_Str"");
  mb4.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  String tmp=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr) + ""String_Node_Str"";
  tmp+=this.curr.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> SuccessorInterfaceGenerator.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
  mb4.addParameters(tmp + ""String_Node_Str"");
  mb4.setReturn(JavaBuilder.VOID);
  mb4.addModifiers(JavaBuilder.PUBLIC);
  mb4.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb4.addAnnotations(""String_Node_Str"");
  mb4.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    if (first) {
      first=false;
    }
 else {
      mb4.addBodyLine(""String_Node_Str"");
    }
    mb4.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb4.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb4.addBodyLine(1,ln);
    mb4.addBodyLine(""String_Node_Str"");
  }
  mb4.addBodyLine(""String_Node_Str"");
  mb4.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb4.addBodyLine(""String_Node_Str"");
  this.apigen.addTypeDecl(new HandlerInterfaceGenerator(this.apigen,this.cb,this.curr).generateType());
}",0.9985287460389316
2279,"@Override protected void addMethods(){
  String branchName=this.apigen.getSocketClassName(curr);
  String enumClassName=branchName + ""String_Node_Str"" + BranchSocketGenerator.getBranchEnumClassName(this.apigen,this.curr);
  FieldBuilder fb1=this.cb.newField(CASE_OP_FIELD);
  fb1.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.FINAL);
  fb1.setType(enumClassName);
  FieldBuilder fb2=this.cb.newField(CASE_MESSAGE_FIELD);
  fb2.addModifiers(JavaBuilder.PRIVATE,JavaBuilder.FINAL);
  fb2.setType(StateChannelApiGenerator.SCRIBMESSAGE_CLASS);
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    addReceiveMethod(this.cb,a,succ);
    addCaseReceiveMethod(this.cb,a,succ);
    if (!a.payload.isEmpty() || a.mid.isMessageSigName()) {
      addCaseReceiveDiscardMethod(this.cb,a,succ);
    }
  }
  Role self=this.apigen.getSelf();
  MethodBuilder mb=this.cb.newMethod(""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.setReturn(IOStateInterfaceGenerator.getIOStateInterfaceName(self,this.curr) + ""String_Node_Str"" + BranchInterfaceGenerator.getBranchInterfaceEnumName(self,this.curr));
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.THIS+ ""String_Node_Str""+ CASE_OP_FIELD+ ""String_Node_Str"");
  this.apigen.addTypeDecl(this.cb);
}","@Override protected void addMethods() throws ScribbleException {
  String branchName=this.apigen.getSocketClassName(curr);
  String enumClassName=branchName + ""String_Node_Str"" + BranchSocketGenerator.getBranchEnumClassName(this.apigen,this.curr);
  FieldBuilder fb1=this.cb.newField(CASE_OP_FIELD);
  fb1.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.FINAL);
  fb1.setType(enumClassName);
  FieldBuilder fb2=this.cb.newField(CASE_MESSAGE_FIELD);
  fb2.addModifiers(JavaBuilder.PRIVATE,JavaBuilder.FINAL);
  fb2.setType(StateChannelApiGenerator.SCRIBMESSAGE_CLASS);
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    addReceiveMethod(this.cb,a,succ);
    addCaseReceiveMethod(this.cb,a,succ);
    if (!a.payload.isEmpty() || a.mid.isMessageSigName()) {
      addCaseReceiveDiscardMethod(this.cb,a,succ);
    }
  }
  Role self=this.apigen.getSelf();
  MethodBuilder mb=this.cb.newMethod(""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.setReturn(IOStateInterfaceGenerator.getIOStateInterfaceName(self,this.curr) + ""String_Node_Str"" + BranchInterfaceGenerator.getBranchInterfaceEnumName(self,this.curr));
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.THIS+ ""String_Node_Str""+ CASE_OP_FIELD+ ""String_Node_Str"");
  this.apigen.addTypeDecl(this.cb);
}",0.9903988183161004
2280,"public static void setCaseReceiveHeaderWithoutReturnType(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb){
  Module main=apigen.getMainModule();
  String opClass=SessionApiGenerator.getOpClassName(a.mid);
  mb.setName(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addParameters(opClass + ""String_Node_Str"" + StateChannelApiGenerator.RECEIVE_OP_PARAM);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  if (a.mid.isOp()) {
    ReceiveSocketGenerator.addReceiveOpParams(mb,main,a,true);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    ReceiveSocketGenerator.addReceiveMessageSigNameParams(mb,msd,true);
  }
}","public static void setCaseReceiveHeaderWithoutReturnType(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb) throws ScribbleException {
  Module main=apigen.getMainModule();
  String opClass=SessionApiGenerator.getOpClassName(a.mid);
  mb.setName(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addParameters(opClass + ""String_Node_Str"" + StateChannelApiGenerator.RECEIVE_OP_PARAM);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  if (a.mid.isOp()) {
    ReceiveSocketGenerator.addReceiveOpParams(mb,main,a,true);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    ReceiveSocketGenerator.addReceiveMessageSigNameParams(mb,msd,true);
  }
}",0.9832041343669252
2281,"private void addCaseReceiveMethod(ClassBuilder cb,IOAction a,EndpointState succ){
  MethodBuilder mb=makeCaseReceiveHeader(cb,a,succ);
  String ln=JavaBuilder.RETURN + ""String_Node_Str"" + ""String_Node_Str""+ getSessionApiRoleConstant(a.obj)+ ""String_Node_Str"";
  boolean first=true;
  for (  String param : mb.getParameters()) {
    if (first) {
      first=false;
    }
 else {
      ln+=""String_Node_Str"";
    }
    if (param.contains(""String_Node_Str"")) {
      param=param.substring(param.lastIndexOf('>') + 1,param.length());
    }
    ln+=param.substring(param.indexOf(""String_Node_Str"") + 1,param.length());
  }
  mb.addBodyLine(ln + ""String_Node_Str"");
}","private void addCaseReceiveMethod(ClassBuilder cb,IOAction a,EndpointState succ) throws ScribbleException {
  MethodBuilder mb=makeCaseReceiveHeader(cb,a,succ);
  String ln=JavaBuilder.RETURN + ""String_Node_Str"" + ""String_Node_Str""+ getSessionApiRoleConstant(a.obj)+ ""String_Node_Str"";
  boolean first=true;
  for (  String param : mb.getParameters()) {
    if (first) {
      first=false;
    }
 else {
      ln+=""String_Node_Str"";
    }
    if (param.contains(""String_Node_Str"")) {
      param=param.substring(param.lastIndexOf('>') + 1,param.length());
    }
    ln+=param.substring(param.indexOf(""String_Node_Str"") + 1,param.length());
  }
  mb.addBodyLine(ln + ""String_Node_Str"");
}",0.9807121661721068
2282,"private MethodBuilder makeReceiveHeader(ClassBuilder cb,IOAction a,EndpointState succ){
  MethodBuilder mb=cb.newMethod();
  ReceiveSocketGenerator.setReceiveHeaderWithoutReturnType(this.apigen,a,mb);
  setNextSocketReturnType(this.apigen,mb,succ);
  return mb;
}","private MethodBuilder makeReceiveHeader(ClassBuilder cb,IOAction a,EndpointState succ) throws ScribbleException {
  MethodBuilder mb=cb.newMethod();
  ReceiveSocketGenerator.setReceiveHeaderWithoutReturnType(this.apigen,a,mb);
  setNextSocketReturnType(this.apigen,mb,succ);
  return mb;
}",0.9528985507246376
2283,"private void addReceiveMethod(ClassBuilder cb,IOAction a,EndpointState succ){
  Module main=this.apigen.getMainModule();
  MethodBuilder mb=makeReceiveHeader(cb,a,succ);
  if (a.mid.isOp()) {
    mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"");
    addBranchCheck(getSessionApiOpConstant(a.mid),mb,CASE_MESSAGE_FIELD);
    ReceiveSocketGenerator.addPayloadBuffSetters(main,a,mb);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"");
    addBranchCheck(getSessionApiOpConstant(a.mid),mb,CASE_MESSAGE_FIELD);
    mb.addBodyLine(CASE_ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL_FIELD+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ CASE_MESSAGE_FIELD+ ""String_Node_Str"");
  }
  addReturnNextSocket(mb,succ);
}","private void addReceiveMethod(ClassBuilder cb,IOAction a,EndpointState succ) throws ScribbleException {
  Module main=this.apigen.getMainModule();
  MethodBuilder mb=makeReceiveHeader(cb,a,succ);
  if (a.mid.isOp()) {
    mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"");
    addBranchCheck(getSessionApiOpConstant(a.mid),mb,CASE_MESSAGE_FIELD);
    ReceiveSocketGenerator.addPayloadBuffSetters(main,a,mb);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"");
    addBranchCheck(getSessionApiOpConstant(a.mid),mb,CASE_MESSAGE_FIELD);
    mb.addBodyLine(CASE_ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL_FIELD+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ CASE_MESSAGE_FIELD+ ""String_Node_Str"");
  }
  addReturnNextSocket(mb,succ);
}",0.984468339307049
2284,"private MethodBuilder makeCaseReceiveHeader(ClassBuilder cb,IOAction a,EndpointState succ){
  MethodBuilder mb=cb.newMethod();
  setCaseReceiveHeaderWithoutReturnType(this.apigen,a,mb);
  setNextSocketReturnType(this.apigen,mb,succ);
  return mb;
}","private MethodBuilder makeCaseReceiveHeader(ClassBuilder cb,IOAction a,EndpointState succ) throws ScribbleException {
  MethodBuilder mb=cb.newMethod();
  setCaseReceiveHeaderWithoutReturnType(this.apigen,a,mb);
  setNextSocketReturnType(this.apigen,mb,succ);
  return mb;
}",0.950191570881226
2285,"@Override public InterfaceBuilder generateType(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  InterfaceBuilder ib=new InterfaceBuilder();
  ib.setPackage(SessionApiGenerator.getStateChannelPackageName(gpn,this.apigen.getSelf()));
  ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  ib.setName(getHandlerInterfaceName(this.parent.getName()));
  ib.addModifiers(InterfaceBuilder.PUBLIC);
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    String nextClass=this.apigen.getSocketClassName(succ);
    AbstractMethodBuilder mb3=ib.newAbstractMethod();
    mb3.addAnnotations(""String_Node_Str"");
    setHandleMethodHeaderWithoutParamTypes(this.apigen,mb3);
    if (succ.isTerminal()) {
      mb3.addParameters(ScribSocketGenerator.GENERATED_ENDSOCKET_NAME + ""String_Node_Str"");
    }
 else {
      mb3.addParameters(nextClass + ""String_Node_Str"");
    }
    addHandleMethodOpAndPayloadParams(this.apigen,a,mb3);
    if (this.curr.take(a).isTerminal()) {
      ib.addImports(SessionApiGenerator.getEndpointApiRootPackageName(gpn) + ""String_Node_Str"");
      ib.addImports(SessionApiGenerator.getRolesPackageName(this.apigen.getGProtocolName()) + ""String_Node_Str"");
    }
  }
  return ib;
}","@Override public InterfaceBuilder generateType() throws ScribbleException {
  GProtocolName gpn=this.apigen.getGProtocolName();
  InterfaceBuilder ib=new InterfaceBuilder();
  ib.setPackage(SessionApiGenerator.getStateChannelPackageName(gpn,this.apigen.getSelf()));
  ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  ib.setName(getHandlerInterfaceName(this.parent.getName()));
  ib.addModifiers(InterfaceBuilder.PUBLIC);
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    String nextClass=this.apigen.getSocketClassName(succ);
    AbstractMethodBuilder mb3=ib.newAbstractMethod();
    mb3.addAnnotations(""String_Node_Str"");
    setHandleMethodHeaderWithoutParamTypes(this.apigen,mb3);
    if (succ.isTerminal()) {
      mb3.addParameters(ScribSocketGenerator.GENERATED_ENDSOCKET_NAME + ""String_Node_Str"");
    }
 else {
      mb3.addParameters(nextClass + ""String_Node_Str"");
    }
    addHandleMethodOpAndPayloadParams(this.apigen,a,mb3);
    if (this.curr.take(a).isTerminal()) {
      ib.addImports(SessionApiGenerator.getEndpointApiRootPackageName(gpn) + ""String_Node_Str"");
      ib.addImports(SessionApiGenerator.getRolesPackageName(this.apigen.getGProtocolName()) + ""String_Node_Str"");
    }
  }
  return ib;
}",0.98984375
2286,"public static void addHandleMethodOpAndPayloadParams(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb){
  Module main=apigen.getMainModule();
  String opClass=SessionApiGenerator.getOpClassName(a.mid);
  mb.addParameters(opClass + ""String_Node_Str"" + StateChannelApiGenerator.RECEIVE_OP_PARAM);
  if (a.mid.isOp()) {
    ReceiveSocketGenerator.addReceiveOpParams(mb,apigen.getMainModule(),a,false);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    ReceiveSocketGenerator.addReceiveMessageSigNameParams(mb,msd,false);
  }
}","public static void addHandleMethodOpAndPayloadParams(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb) throws ScribbleException {
  Module main=apigen.getMainModule();
  String opClass=SessionApiGenerator.getOpClassName(a.mid);
  mb.addParameters(opClass + ""String_Node_Str"" + StateChannelApiGenerator.RECEIVE_OP_PARAM);
  if (a.mid.isOp()) {
    ReceiveSocketGenerator.addReceiveOpParams(mb,apigen.getMainModule(),a,false);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    ReceiveSocketGenerator.addReceiveMessageSigNameParams(mb,msd,false);
  }
}",0.9785123966942147
2287,"@Override public ClassBuilder generateType(){
  final String FUTURE_PARAM=""String_Node_Str"";
  Module main=this.apigen.getMainModule();
  GProtocolName gpn=this.apigen.getGProtocolName();
  String futureClass=getInputFutureName(this.parent.getName());
  ClassBuilder future=new ClassBuilder();
  future.setPackage(SessionApiGenerator.getStateChannelPackageName(gpn,this.apigen.getSelf()));
  future.addImports(""String_Node_Str"");
  future.addImports(""String_Node_Str"");
  future.addModifiers(InterfaceBuilder.PUBLIC);
  future.setName(futureClass);
  future.setSuperClass(SCRIBFUTURE_CLASS);
  List<String> types=new LinkedList<>();
  if (a.mid.isOp()) {
    if (!a.payload.isEmpty()) {
      int i=1;
      for (      PayloadType<?> pt : a.payload.elems) {
        String type=main.getDataTypeDecl((DataType)pt).extName;
        types.add(type);
        FieldBuilder f=future.newField(""String_Node_Str"" + i++);
        f.setType(type);
        f.addModifiers(JavaBuilder.PUBLIC);
      }
    }
  }
 else {
    String type=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName()).extName;
    types.add(type);
    FieldBuilder f=future.newField(""String_Node_Str"");
    f.setType(type);
    f.addModifiers(JavaBuilder.PUBLIC);
  }
  ConstructorBuilder cons=future.newConstructor(""String_Node_Str"" + StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str""+ FUTURE_PARAM);
  cons.addModifiers(JavaBuilder.PROTECTED);
  cons.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + FUTURE_PARAM+ ""String_Node_Str"");
  MethodBuilder sync=future.newMethod(""String_Node_Str"");
  sync.addModifiers(JavaBuilder.PUBLIC);
  sync.setReturn(futureClass);
  sync.addExceptions(""String_Node_Str"");
  String ln=(a.mid.isOp() && a.payload.isEmpty()) ? ""String_Node_Str"" : StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"";
  ln+=JavaBuilder.SUPER + ""String_Node_Str"";
  sync.addBodyLine(ln);
  if (a.mid.isOp()) {
    if (!a.payload.isEmpty()) {
      int i=1;
      for (      String type : types) {
        sync.addBodyLine(JavaBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ i+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (i - 1)+ ""String_Node_Str"");
        i++;
      }
    }
  }
 else {
    sync.addBodyLine(JavaBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ types.get(0)+ ""String_Node_Str"");
  }
  sync.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.THIS+ ""String_Node_Str"");
  return future;
}","@Override public ClassBuilder generateType() throws ScribbleException {
  final String FUTURE_PARAM=""String_Node_Str"";
  Module main=this.apigen.getMainModule();
  GProtocolName gpn=this.apigen.getGProtocolName();
  String futureClass=getInputFutureName(this.parent.getName());
  ClassBuilder future=new ClassBuilder();
  future.setPackage(SessionApiGenerator.getStateChannelPackageName(gpn,this.apigen.getSelf()));
  future.addImports(""String_Node_Str"");
  future.addImports(""String_Node_Str"");
  future.addModifiers(InterfaceBuilder.PUBLIC);
  future.setName(futureClass);
  future.setSuperClass(SCRIBFUTURE_CLASS);
  List<String> types=new LinkedList<>();
  if (a.mid.isOp()) {
    if (!a.payload.isEmpty()) {
      int i=1;
      for (      PayloadType<?> pt : a.payload.elems) {
        DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
        if (!dtd.schema.equals(ScribSocketGenerator.JAVA_SCHEMA)) {
          throw new ScribbleException(""String_Node_Str"" + dtd.schema);
        }
        String type=dtd.extName;
        types.add(type);
        FieldBuilder f=future.newField(""String_Node_Str"" + i++);
        f.setType(type);
        f.addModifiers(JavaBuilder.PUBLIC);
      }
    }
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    if (!msd.schema.equals(ScribSocketGenerator.JAVA_SCHEMA)) {
      throw new ScribbleException(""String_Node_Str"" + msd.schema);
    }
    String type=msd.extName;
    types.add(type);
    FieldBuilder f=future.newField(""String_Node_Str"");
    f.setType(type);
    f.addModifiers(JavaBuilder.PUBLIC);
  }
  ConstructorBuilder cons=future.newConstructor(""String_Node_Str"" + StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str""+ FUTURE_PARAM);
  cons.addModifiers(JavaBuilder.PROTECTED);
  cons.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + FUTURE_PARAM+ ""String_Node_Str"");
  MethodBuilder sync=future.newMethod(""String_Node_Str"");
  sync.addModifiers(JavaBuilder.PUBLIC);
  sync.setReturn(futureClass);
  sync.addExceptions(""String_Node_Str"");
  String ln=(a.mid.isOp() && a.payload.isEmpty()) ? ""String_Node_Str"" : StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"";
  ln+=JavaBuilder.SUPER + ""String_Node_Str"";
  sync.addBodyLine(ln);
  if (a.mid.isOp()) {
    if (!a.payload.isEmpty()) {
      int i=1;
      for (      String type : types) {
        sync.addBodyLine(JavaBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ i+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (i - 1)+ ""String_Node_Str"");
        i++;
      }
    }
  }
 else {
    sync.addBodyLine(JavaBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ types.get(0)+ ""String_Node_Str"");
  }
  sync.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.THIS+ ""String_Node_Str"");
  return future;
}",0.9209829867674858
2288,"@Override protected void addMethods(){
  final String ROLE_PARAM=""String_Node_Str"";
  boolean hasConnect=false;
  boolean hasWrap=false;
  for (  IOAction a : curr.getTakeable()) {
    EndpointState succ=curr.take(a);
    MethodBuilder mb=this.cb.newMethod();
    if (a.isSend()) {
      setSendHeaderWithoutReturnType(apigen,a,mb);
    }
 else     if (a.isConnect()) {
      hasConnect=true;
      setConnectHeaderWithoutReturnType(apigen,a,mb);
    }
 else     if (a.isDisconnect()) {
      setDisconnectHeaderWithoutReturnType(apigen,a,mb);
    }
 else     if (a.isWrapClient()) {
      hasWrap=true;
      setWrapClientHeaderWithoutReturnType(apigen,a,mb);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
    setNextSocketReturnType(this.apigen,mb,succ);
    if (a.mid.isOp()) {
      this.cb.addImports(getOpsPackageName() + ""String_Node_Str"");
    }
    if (a.isSend()) {
      if (a.mid.isOp()) {
        List<String> args=getSendPayloadArgs(a);
        String body=JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid);
        if (!a.payload.isEmpty()) {
          body+=""String_Node_Str"" + args.stream().collect(Collectors.joining(""String_Node_Str""));
        }
        body+=""String_Node_Str"";
        mb.addBodyLine(body);
      }
 else {
        final String MESSAGE_PARAM=""String_Node_Str"";
        mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ MESSAGE_PARAM+ ""String_Node_Str"");
      }
    }
 else     if (a.isConnect()) {
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str"");
    }
 else     if (a.isDisconnect()) {
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str"");
    }
 else     if (a.isWrapClient()) {
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str"");
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
    addReturnNextSocket(mb,succ);
  }
  if (hasConnect) {
    this.cb.addImports(""String_Node_Str"");
    this.cb.addImports(""String_Node_Str"");
  }
  if (hasWrap) {
    this.cb.addImports(""String_Node_Str"");
    this.cb.addImports(""String_Node_Str"");
  }
}","@Override protected void addMethods() throws ScribbleException {
  final String ROLE_PARAM=""String_Node_Str"";
  boolean hasConnect=false;
  boolean hasWrap=false;
  for (  IOAction a : curr.getTakeable()) {
    EndpointState succ=curr.take(a);
    MethodBuilder mb=this.cb.newMethod();
    if (a.isSend()) {
      setSendHeaderWithoutReturnType(apigen,a,mb);
    }
 else     if (a.isConnect()) {
      hasConnect=true;
      setConnectHeaderWithoutReturnType(apigen,a,mb);
    }
 else     if (a.isDisconnect()) {
      setDisconnectHeaderWithoutReturnType(apigen,a,mb);
    }
 else     if (a.isWrapClient()) {
      hasWrap=true;
      setWrapClientHeaderWithoutReturnType(apigen,a,mb);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
    setNextSocketReturnType(this.apigen,mb,succ);
    if (a.mid.isOp()) {
      this.cb.addImports(getOpsPackageName() + ""String_Node_Str"");
    }
    if (a.isSend()) {
      if (a.mid.isOp()) {
        List<String> args=getSendPayloadArgs(a);
        String body=JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid);
        if (!a.payload.isEmpty()) {
          body+=""String_Node_Str"" + args.stream().collect(Collectors.joining(""String_Node_Str""));
        }
        body+=""String_Node_Str"";
        mb.addBodyLine(body);
      }
 else {
        final String MESSAGE_PARAM=""String_Node_Str"";
        mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ MESSAGE_PARAM+ ""String_Node_Str"");
      }
    }
 else     if (a.isConnect()) {
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str"");
    }
 else     if (a.isDisconnect()) {
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str"");
    }
 else     if (a.isWrapClient()) {
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str"");
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
    addReturnNextSocket(mb,succ);
  }
  if (hasConnect) {
    this.cb.addImports(""String_Node_Str"");
    this.cb.addImports(""String_Node_Str"");
  }
  if (hasWrap) {
    this.cb.addImports(""String_Node_Str"");
    this.cb.addImports(""String_Node_Str"");
  }
}",0.994250331711632
2289,"public static void setSendHeaderWithoutReturnType(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb){
  final String ROLE_PARAM=""String_Node_Str"";
  Module main=apigen.getMainModule();
  mb.setName(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"");
  mb.addParameters(SessionApiGenerator.getRoleClassName(a.obj) + ""String_Node_Str"" + ROLE_PARAM);
  if (a.mid.isOp()) {
    addSendOpParams(apigen,mb,main,a);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addSendMessageSigNameParams(mb,msd);
  }
}","public static void setSendHeaderWithoutReturnType(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb) throws ScribbleException {
  final String ROLE_PARAM=""String_Node_Str"";
  Module main=apigen.getMainModule();
  mb.setName(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"");
  mb.addParameters(SessionApiGenerator.getRoleClassName(a.obj) + ""String_Node_Str"" + ROLE_PARAM);
  if (a.mid.isOp()) {
    addSendOpParams(apigen,mb,main,a);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addSendMessageSigNameParams(mb,msd);
  }
}",0.9809941520467836
2290,"protected static void addSendOpParams(StateChannelApiGenerator apigen,MethodBuilder mb,Module main,IOAction a){
  List<String> args=getSendPayloadArgs(a);
  mb.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"");
  if (!a.payload.isEmpty()) {
    Iterator<String> as=args.iterator();
    for (    PayloadType<?> pt : a.payload.elems) {
      DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
      mb.addParameters(dtd.extName + ""String_Node_Str"" + as.next());
    }
  }
}","protected static void addSendOpParams(StateChannelApiGenerator apigen,MethodBuilder mb,Module main,IOAction a) throws ScribbleException {
  List<String> args=getSendPayloadArgs(a);
  mb.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"");
  if (!a.payload.isEmpty()) {
    Iterator<String> as=args.iterator();
    for (    PayloadType<?> pt : a.payload.elems) {
      DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
      if (!dtd.schema.equals(ScribSocketGenerator.JAVA_SCHEMA)) {
        throw new ScribbleException(""String_Node_Str"" + dtd.schema);
      }
      mb.addParameters(dtd.extName + ""String_Node_Str"" + as.next());
    }
  }
}",0.7972626176218991
2291,"protected static void addSendMessageSigNameParams(MethodBuilder mb,MessageSigNameDecl msd){
  final String MESSAGE_PARAM=""String_Node_Str"";
  mb.addParameters(msd.extName + ""String_Node_Str"" + MESSAGE_PARAM);
}","protected static void addSendMessageSigNameParams(MethodBuilder mb,MessageSigNameDecl msd) throws ScribbleException {
  final String MESSAGE_PARAM=""String_Node_Str"";
  if (!msd.schema.equals(ScribSocketGenerator.JAVA_SCHEMA)) {
    throw new ScribbleException(""String_Node_Str"" + msd.schema);
  }
  mb.addParameters(msd.extName + ""String_Node_Str"" + MESSAGE_PARAM);
}",0.7279029462738301
2292,"@Override protected void addMethods(){
  IOAction a=curr.getTakeable().iterator().next();
  EndpointState succ=curr.take(a);
  ClassBuilder futureClass=new InputFutureGenerator(this.apigen,this.cb,a).generateType();
  this.apigen.addTypeDecl(futureClass);
  makeReceiveMethod(a,succ);
  makeAsyncMethod(a,succ,futureClass.getName());
  makeIsDoneMethod(a);
  makeAsyncDiscardMethod(a,succ,futureClass.getName());
}","@Override protected void addMethods() throws ScribbleException {
  IOAction a=curr.getTakeable().iterator().next();
  EndpointState succ=curr.take(a);
  ClassBuilder futureClass=new InputFutureGenerator(this.apigen,this.cb,a).generateType();
  this.apigen.addTypeDecl(futureClass);
  makeReceiveMethod(a,succ);
  makeAsyncMethod(a,succ,futureClass.getName());
  makeIsDoneMethod(a);
  makeAsyncDiscardMethod(a,succ,futureClass.getName());
}",0.9695550351288056
2293,"public static void setReceiveHeaderWithoutReturnType(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb){
  final String ROLE_PARAM=""String_Node_Str"";
  Module main=apigen.getMainModule();
  String opClass=SessionApiGenerator.getOpClassName(a.mid);
  mb.setName(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb.addParameters(SessionApiGenerator.getRoleClassName(a.obj) + ""String_Node_Str"" + ROLE_PARAM,opClass + ""String_Node_Str"" + StateChannelApiGenerator.RECEIVE_OP_PARAM);
  if (a.mid.isOp()) {
    addReceiveOpParams(mb,main,a,true);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addReceiveMessageSigNameParams(mb,msd,true);
  }
}","public static void setReceiveHeaderWithoutReturnType(StateChannelApiGenerator apigen,IOAction a,MethodBuilder mb) throws ScribbleException {
  final String ROLE_PARAM=""String_Node_Str"";
  Module main=apigen.getMainModule();
  String opClass=SessionApiGenerator.getOpClassName(a.mid);
  mb.setName(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb.addParameters(SessionApiGenerator.getRoleClassName(a.obj) + ""String_Node_Str"" + ROLE_PARAM,opClass + ""String_Node_Str"" + StateChannelApiGenerator.RECEIVE_OP_PARAM);
  if (a.mid.isOp()) {
    addReceiveOpParams(mb,main,a,true);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addReceiveMessageSigNameParams(mb,msd,true);
  }
}",0.9846335697399528
2294,"protected static void addReceiveMessageSigNameParams(MethodBuilder mb,MessageSigNameDecl msd,boolean superr){
  mb.addParameters(BUF_CLASS + ""String_Node_Str"" + ((superr) ? ""String_Node_Str"" + JavaBuilder.SUPER + ""String_Node_Str"" : ""String_Node_Str"")+ msd.extName+ ""String_Node_Str""+ RECEIVE_ARG_PREFIX);
}","protected static void addReceiveMessageSigNameParams(MethodBuilder mb,MessageSigNameDecl msd,boolean superr) throws ScribbleException {
  if (!msd.schema.equals(ScribSocketGenerator.JAVA_SCHEMA)) {
    throw new ScribbleException(""String_Node_Str"" + msd.schema);
  }
  mb.addParameters(BUF_CLASS + ""String_Node_Str"" + ((superr) ? ""String_Node_Str"" + JavaBuilder.SUPER + ""String_Node_Str"" : ""String_Node_Str"")+ msd.extName+ ""String_Node_Str""+ RECEIVE_ARG_PREFIX);
}",0.7963683527885862
2295,"private MethodBuilder makeReceiveHeader(IOAction a,EndpointState succ){
  MethodBuilder mb=this.cb.newMethod();
  setReceiveHeaderWithoutReturnType(this.apigen,a,mb);
  setNextSocketReturnType(this.apigen,mb,succ);
  return mb;
}","private MethodBuilder makeReceiveHeader(IOAction a,EndpointState succ) throws ScribbleException {
  MethodBuilder mb=this.cb.newMethod();
  setReceiveHeaderWithoutReturnType(this.apigen,a,mb);
  setNextSocketReturnType(this.apigen,mb,succ);
  return mb;
}",0.9462809917355371
2296,"private void makeReceiveMethod(IOAction a,EndpointState succ){
  Module main=this.apigen.getMainModule();
  MethodBuilder mb=makeReceiveHeader(a,succ);
  if (a.mid.isOp()) {
    String ln=a.payload.isEmpty() ? ""String_Node_Str"" : StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + RECEIVE_MESSAGE_PARAM+ ""String_Node_Str"";
    ln+=JavaBuilder.SUPER + ""String_Node_Str"" + getSessionApiRoleConstant(a.obj)+ ""String_Node_Str"";
    mb.addBodyLine(ln);
    addPayloadBuffSetters(main,a,mb);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    mb.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(a.obj)+ ""String_Node_Str"");
    mb.addBodyLine(RECEIVE_ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL_FIELD+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str"");
  }
  addReturnNextSocket(mb,succ);
}","private void makeReceiveMethod(IOAction a,EndpointState succ) throws ScribbleException {
  Module main=this.apigen.getMainModule();
  MethodBuilder mb=makeReceiveHeader(a,succ);
  if (a.mid.isOp()) {
    String ln=a.payload.isEmpty() ? ""String_Node_Str"" : StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + RECEIVE_MESSAGE_PARAM+ ""String_Node_Str"";
    ln+=JavaBuilder.SUPER + ""String_Node_Str"" + getSessionApiRoleConstant(a.obj)+ ""String_Node_Str"";
    mb.addBodyLine(ln);
    addPayloadBuffSetters(main,a,mb);
  }
 else {
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    mb.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(a.obj)+ ""String_Node_Str"");
    mb.addBodyLine(RECEIVE_ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL_FIELD+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str"");
  }
  addReturnNextSocket(mb,succ);
}",0.9875478927203064
2297,"protected static void addReceiveOpParams(MethodBuilder mb,Module main,IOAction a,boolean superr){
  if (!a.payload.isEmpty()) {
    String buffSuper=BUF_CLASS + ""String_Node_Str"" + ((superr) ? ""String_Node_Str"" + JavaBuilder.SUPER + ""String_Node_Str"" : ""String_Node_Str"");
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
      mb.addParameters(buffSuper + dtd.extName + ""String_Node_Str""+ RECEIVE_ARG_PREFIX+ i++);
    }
  }
}","protected static void addReceiveOpParams(MethodBuilder mb,Module main,IOAction a,boolean superr) throws ScribbleException {
  if (!a.payload.isEmpty()) {
    String buffSuper=BUF_CLASS + ""String_Node_Str"" + ((superr) ? ""String_Node_Str"" + JavaBuilder.SUPER + ""String_Node_Str"" : ""String_Node_Str"");
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
      if (!dtd.schema.equals(ScribSocketGenerator.JAVA_SCHEMA)) {
        throw new ScribbleException(""String_Node_Str"" + dtd.schema);
      }
      mb.addParameters(buffSuper + dtd.extName + ""String_Node_Str""+ RECEIVE_ARG_PREFIX+ i++);
    }
  }
}",0.855924978687127
2298,protected abstract void addMethods();,protected abstract void addMethods() throws ScribbleException ;,0.74
2299,"@Override public ClassBuilder generateType(){
  constructClass();
  return this.cb;
}","@Override public ClassBuilder generateType() throws ScribbleException {
  constructClass();
  return this.cb;
}",0.8673469387755102
2300,"protected void constructClass(){
  constructClassExceptMethods();
  addMethods();
}","protected void constructClass() throws ScribbleException {
  constructClassExceptMethods();
  addMethods();
}",0.8645833333333334
2301,"private void outputGraph(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.FSM);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    EndpointGraph fsm=getEndointGraph(job,fullname,role);
    System.out.println(""String_Node_Str"" + fsm);
  }
}","private void outputGraph(Job job) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.FSM);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    EndpointGraph fsm=getEndointGraph(job,fullname,role);
    System.out.println(""String_Node_Str"" + fsm);
  }
}",0.9748283752860412
2302,"private void drawGraph(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.FSM_DOT);
  for (int i=0; i < args.length; i+=3) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    String png=args[i + 2];
    EndpointGraph fsm=getEndointGraph(job,fullname,role);
    runDot(fsm.init.toDot(),png);
  }
}","private void drawGraph(Job job) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.FSM_DOT);
  for (int i=0; i < args.length; i+=3) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    String png=args[i + 2];
    EndpointGraph fsm=getEndointGraph(job,fullname,role);
    runDot(fsm.init.toDot(),png);
  }
}",0.9756637168141592
2303,"public static void main(String[] args) throws ScribbleException {
  new CommandLine(args).run();
}","public static void main(String[] args) throws CommandLineException, ScribbleException {
  try {
    new CommandLine(args).run();
  }
 catch (  CommandLineException e) {
    System.err.println(e.getMessage());
    System.exit(1);
  }
}",0.5903614457831325
2304,"public void run() throws ScribbleException {
  try {
    Job job=newJob(newMainContext());
    ScribbleException fail=null;
    try {
      job.checkWellFormedness();
    }
 catch (    ScribbleException x) {
      fail=x;
    }
    try {
      if (this.args.containsKey(ArgFlag.PROJECT)) {
        outputProjections(job);
      }
      if (this.args.containsKey(ArgFlag.FSM)) {
        outputGraph(job);
      }
      if (this.args.containsKey(ArgFlag.FSM_DOT)) {
        drawGraph(job);
      }
      if (this.args.containsKey(ArgFlag.GLOBAL_MODEL) || this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
        if (job.useOldWf) {
          throw new RuntimeException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL)) {
          outputGlobalModel(job);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
          drawGlobalModel(job);
        }
      }
    }
 catch (    ScribbleException x) {
      if (fail == null) {
        fail=x;
      }
    }
    if (fail != null) {
      throw fail;
    }
    if (this.args.containsKey(ArgFlag.SESS_API)) {
      outputSessionApi(job);
    }
    if (this.args.containsKey(ArgFlag.SCHAN_API)) {
      outputStateChannelApi(job);
    }
    if (this.args.containsKey(ArgFlag.EP_API)) {
      outputEndpointApi(job);
    }
  }
 catch (  ScribbleException e) {
    if (this.args.containsKey(ArgFlag.JUNIT) || this.args.containsKey(ArgFlag.VERBOSE)) {
      throw e;
    }
 else {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
}","public void run() throws ScribbleException, CommandLineException {
  try {
    Job job=newJob(newMainContext());
    ScribbleException fail=null;
    try {
      job.checkWellFormedness();
    }
 catch (    ScribbleException x) {
      fail=x;
    }
    try {
      if (this.args.containsKey(ArgFlag.PROJECT)) {
        outputProjections(job);
      }
      if (this.args.containsKey(ArgFlag.FSM)) {
        outputGraph(job);
      }
      if (this.args.containsKey(ArgFlag.FSM_DOT)) {
        drawGraph(job);
      }
      if (this.args.containsKey(ArgFlag.GLOBAL_MODEL) || this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
        if (job.useOldWf) {
          throw new CommandLineException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL)) {
          outputGlobalModel(job);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
          drawGlobalModel(job);
        }
      }
    }
 catch (    ScribbleException x) {
      if (fail == null) {
        fail=x;
      }
    }
    if (fail != null) {
      throw fail;
    }
    if (this.args.containsKey(ArgFlag.SESS_API)) {
      outputSessionApi(job);
    }
    if (this.args.containsKey(ArgFlag.SCHAN_API)) {
      outputStateChannelApi(job);
    }
    if (this.args.containsKey(ArgFlag.EP_API)) {
      outputEndpointApi(job);
    }
  }
 catch (  ScribbleException e) {
    if (this.args.containsKey(ArgFlag.JUNIT) || this.args.containsKey(ArgFlag.VERBOSE)) {
      throw e;
    }
 else {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
}",0.9891696750902528
2305,"private EndpointGraph getEndointGraph(Job job,GProtocolName fullname,Role role) throws ScribbleException {
  JobContext jcontext=job.getContext();
  GProtocolDecl gpd=(GProtocolDecl)jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  if (gpd == null || !gpd.header.roledecls.getRoles().contains(role)) {
    throw new RuntimeException(""String_Node_Str"" + Arrays.toString(this.args.get(ArgFlag.FSM)));
  }
  EndpointGraph fsm=this.args.containsKey(ArgFlag.MIN_EFSM) ? jcontext.getMinimisedEndpointGraph(fullname,role) : jcontext.getEndpointGraph(fullname,role);
  if (fsm == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname);
  }
  return fsm;
}","private EndpointGraph getEndointGraph(Job job,GProtocolName fullname,Role role) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  GProtocolDecl gpd=(GProtocolDecl)jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  if (gpd == null || !gpd.header.roledecls.getRoles().contains(role)) {
    throw new CommandLineException(""String_Node_Str"" + Arrays.toString(this.args.get(ArgFlag.FSM)));
  }
  EndpointGraph fsm=this.args.containsKey(ArgFlag.MIN_EFSM) ? jcontext.getMinimisedEndpointGraph(fullname,role) : jcontext.getEndpointGraph(fullname,role);
  if (fsm == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname);
  }
  return fsm;
}",0.9726618705035972
2306,"private static Role checkRoleArg(JobContext jcontext,GProtocolName fullname,String rolename){
  ProtocolDecl<?> pd=jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  Role role=new Role(rolename);
  if (!pd.header.roledecls.getRoles().contains(role)) {
    throw new RuntimeException(""String_Node_Str"" + fullname + ""String_Node_Str""+ role);
  }
  return role;
}","private static Role checkRoleArg(JobContext jcontext,GProtocolName fullname,String rolename) throws CommandLineException {
  ProtocolDecl<?> pd=jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  Role role=new Role(rolename);
  if (!pd.header.roledecls.getRoles().contains(role)) {
    throw new CommandLineException(""String_Node_Str"" + fullname + ""String_Node_Str""+ role);
  }
  return role;
}",0.943109987357775
2307,"private void outputSessionApi(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.SESS_API);
  for (  String fullname : args) {
    GProtocolName gpn=checkGlobalProtocolArg(jcontext,fullname);
    Map<String,String> classes=job.generateSessionApi(gpn);
    outputClasses(classes);
  }
}","private void outputSessionApi(Job job) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.SESS_API);
  for (  String fullname : args) {
    GProtocolName gpn=checkGlobalProtocolArg(jcontext,fullname);
    Map<String,String> classes=job.generateSessionApi(gpn);
    outputClasses(classes);
  }
}",0.9693593314763232
2308,"private void outputGlobalModel(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL);
  for (int i=0; i < args.length; i+=1) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    WFState model=getGlobalModel(job,fullname);
    System.out.println(""String_Node_Str"" + model.toDot());
  }
}","private void outputGlobalModel(Job job) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL);
  for (int i=0; i < args.length; i+=1) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    WFState model=getGlobalModel(job,fullname);
    System.out.println(""String_Node_Str"" + model.toDot());
  }
}",0.9720101781170484
2309,"private void outputStateChannelApi(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.SCHAN_API);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<String,String> classes=job.generateStateChannelApi(fullname,role,this.args.containsKey(ArgFlag.SCHAN_API_SUBTYPES));
    outputClasses(classes);
  }
}","private void outputStateChannelApi(Job job) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.SCHAN_API);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<String,String> classes=job.generateStateChannelApi(fullname,role,this.args.containsKey(ArgFlag.SCHAN_API_SUBTYPES));
    outputClasses(classes);
  }
}",0.9779559118236472
2310,"public CommandLine(String... args){
  this.args=new CommandLineArgParser(args).getArgs();
  if (!this.args.containsKey(ArgFlag.MAIN)) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public CommandLine(String... args) throws CommandLineException {
  this.args=new CommandLineArgParser(args).getArgs();
  if (!this.args.containsKey(ArgFlag.MAIN)) {
    throw new CommandLineException(""String_Node_Str"");
  }
}",0.8920863309352518
2311,"private static void runDot(String dot,String png) throws ScribbleException {
  String tmpName=png + ""String_Node_Str"";
  File tmp=new File(tmpName);
  if (tmp.exists()) {
    throw new RuntimeException(""String_Node_Str"" + tmpName);
  }
  try {
    ScribUtil.writeToFile(tmpName,dot);
    String[] res=ScribUtil.runProcess(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + png,tmpName);
    System.out.print(!res[1].isEmpty() ? res[1] : res[0]);
  }
  finally {
    tmp.delete();
  }
}","private static void runDot(String dot,String png) throws ScribbleException, CommandLineException {
  String tmpName=png + ""String_Node_Str"";
  File tmp=new File(tmpName);
  if (tmp.exists()) {
    throw new CommandLineException(""String_Node_Str"" + tmpName);
  }
  try {
    ScribUtil.writeToFile(tmpName,dot);
    String[] res=ScribUtil.runProcess(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + png,tmpName);
    System.out.print(!res[1].isEmpty() ? res[1] : res[0]);
  }
  finally {
    tmp.delete();
  }
}",0.9622266401590456
2312,"private void outputProjections(Job job){
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.PROJECT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<LProtocolName,Module> projections=job.getProjections(fullname,role);
    System.out.println(""String_Node_Str"" + projections.values().stream().map((p) -> p.toString()).collect(Collectors.joining(""String_Node_Str"")));
  }
}","private void outputProjections(Job job) throws CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.PROJECT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<LProtocolName,Module> projections=job.getProjections(fullname,role);
    System.out.println(""String_Node_Str"" + projections.values().stream().map((p) -> p.toString()).collect(Collectors.joining(""String_Node_Str"")));
  }
}",0.9732225300092336
2313,"private void drawGlobalModel(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL_DOT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    String png=args[i + 1];
    WFState model=getGlobalModel(job,fullname);
    runDot(model.toDot(),png);
  }
}","private void drawGlobalModel(Job job) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL_DOT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    String png=args[i + 1];
    WFState model=getGlobalModel(job,fullname);
    runDot(model.toDot(),png);
  }
}",0.9721518987341772
2314,"private static GProtocolName checkGlobalProtocolArg(JobContext jcontext,String simpname){
  GProtocolName simpgpn=new GProtocolName(simpname);
  ProtocolDecl<?> pd=jcontext.getMainModule().getProtocolDecl(simpgpn);
  if (pd == null || !pd.isGlobal()) {
    throw new RuntimeException(""String_Node_Str"" + simpname);
  }
  return new GProtocolName(jcontext.main,simpgpn);
}","private static GProtocolName checkGlobalProtocolArg(JobContext jcontext,String simpname) throws CommandLineException {
  GProtocolName simpgpn=new GProtocolName(simpname);
  ProtocolDecl<?> pd=jcontext.getMainModule().getProtocolDecl(simpgpn);
  if (pd == null || !pd.isGlobal()) {
    throw new CommandLineException(""String_Node_Str"" + simpname);
  }
  return new GProtocolName(jcontext.main,simpgpn);
}",0.9419354838709676
2315,"private void outputEndpointApi(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.EP_API);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Map<String,String> sessClasses=job.generateSessionApi(fullname);
    outputClasses(sessClasses);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<String,String> scClasses=job.generateStateChannelApi(fullname,role,this.args.containsKey(ArgFlag.SCHAN_API_SUBTYPES));
    outputClasses(scClasses);
  }
}","private void outputEndpointApi(Job job) throws ScribbleException, CommandLineException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.EP_API);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    Map<String,String> sessClasses=job.generateSessionApi(fullname);
    outputClasses(sessClasses);
    Role role=checkRoleArg(jcontext,fullname,args[i + 1]);
    Map<String,String> scClasses=job.generateStateChannelApi(fullname,role,this.args.containsKey(ArgFlag.SCHAN_API_SUBTYPES));
    outputClasses(scClasses);
  }
}",0.981574539363484
2316,"private WFState buildGlobalModel(GProtocolName fullname,GProtocolDecl gpd,Map<Role,EndpointFSM> egraphs,Map<Integer,WFState> seen) throws ScribbleException {
  Job job=getJob();
  if (!getJob().fair) {
    for (    Entry<Role,EndpointFSM> e : egraphs.entrySet()) {
      Role r=e.getKey();
      EndpointFSM nonfair=e.getValue().init.unfairClone().toGraph().toFsm();
      egraphs.put(r,nonfair);
      job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ r+ ""String_Node_Str""+ nonfair.init.toDot());
    }
  }
  WFBuffers b0=new WFBuffers(egraphs.keySet(),!gpd.modifiers.contains(GProtocolDecl.Modifiers.EXPLICIT));
  WFConfig c0=new WFConfig(egraphs,b0);
  WFState init=new WFState(c0);
  LinkedHashSet<WFState> todo=new LinkedHashSet<>();
  todo.add(init);
  int count=0;
  while (!todo.isEmpty()) {
    Iterator<WFState> i=todo.iterator();
    WFState curr=i.next();
    i.remove();
    seen.put(curr.id,curr);
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    Map<Role,List<IOAction>> takeable=curr.getTakeable();
    for (    Role r : takeable.keySet()) {
      List<IOAction> acceptable_r=takeable.get(r);
      EndpointFSM currstate=curr.config.states.get(r);
      Kind k=currstate.getStateKind();
      if (k == Kind.OUTPUT) {
        for (        IOAction a : acceptable_r) {
          if (acceptable_r.stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + acceptable_r);
          }
        }
      }
 else       if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
        for (        IOAction a : acceptable_r) {
          if (currstate.getAllTakeable().stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + currstate.getAllTakeable());
          }
        }
      }
      for (      IOAction a : acceptable_r) {
        if (a.isSend() || a.isReceive() || a.isDisconnect()) {
          getNextStates(todo,seen,curr,a.toGlobal(r),curr.accept(r,a));
        }
 else         if (a.isAccept() || a.isConnect()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction d=a.toDual(r);
          if (as != null && as.contains(d)) {
            as.remove(d);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : d.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,d));
          }
        }
 else         if (a.isWrapClient() || a.isWrapServer()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction w=a.toDual(r);
          if (as != null && as.contains(w)) {
            as.remove(w);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : w.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,w));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
  }
  job.debugPrintln(init.toDot() + ""String_Node_Str"" + fullname+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  return init;
}","private WFState buildGlobalModel(GProtocolName fullname,GProtocolDecl gpd,Map<Role,EndpointFSM> egraphs,Map<Integer,WFState> seen) throws ScribbleException {
  Job job=getJob();
  if (!getJob().fair) {
    for (    Entry<Role,EndpointFSM> e : egraphs.entrySet()) {
      Role r=e.getKey();
      EndpointFSM nonfair=e.getValue().init.unfairClone().toGraph().toFsm();
      egraphs.put(r,nonfair);
      job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ r+ ""String_Node_Str""+ nonfair.init.toDot());
    }
  }
  WFBuffers b0=new WFBuffers(egraphs.keySet(),!gpd.modifiers.contains(GProtocolDecl.Modifiers.EXPLICIT));
  WFConfig c0=new WFConfig(egraphs,b0);
  WFState init=new WFState(c0);
  LinkedHashSet<WFState> todo=new LinkedHashSet<>();
  todo.add(init);
  int count=0;
  while (!todo.isEmpty()) {
    Iterator<WFState> i=todo.iterator();
    WFState curr=i.next();
    i.remove();
    seen.put(curr.id,curr);
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    Map<Role,List<IOAction>> takeable=curr.getTakeable();
    for (    Role r : takeable.keySet()) {
      List<IOAction> acceptable_r=takeable.get(r);
      EndpointFSM currfsm=curr.config.states.get(r);
      Kind k=currfsm.getStateKind();
      if (k == Kind.OUTPUT) {
        for (        IOAction a : acceptable_r) {
          if (acceptable_r.stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + acceptable_r);
          }
        }
      }
 else       if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT || k == Kind.ACCEPT) {
        for (        IOAction a : acceptable_r) {
          if (currfsm.getAllTakeable().stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + currfsm.getAllTakeable());
          }
        }
      }
    }
    for (    Role r : takeable.keySet()) {
      List<IOAction> acceptable_r=takeable.get(r);
      for (      IOAction a : acceptable_r) {
        if (a.isSend() || a.isReceive() || a.isDisconnect()) {
          getNextStates(todo,seen,curr,a.toGlobal(r),curr.accept(r,a));
        }
 else         if (a.isAccept() || a.isConnect()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction d=a.toDual(r);
          if (as != null && as.contains(d)) {
            as.remove(d);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : d.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,d));
          }
        }
 else         if (a.isWrapClient() || a.isWrapServer()) {
          List<IOAction> as=takeable.get(a.peer);
          IOAction w=a.toDual(r);
          if (as != null && as.contains(w)) {
            as.remove(w);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : w.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,w));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
  }
  job.debugPrintln(init.toDot() + ""String_Node_Str"" + fullname+ ""String_Node_Str""+ count+ ""String_Node_Str"");
  return init;
}",0.9056145675265552
2317,"private MainContext newMainContext(){
  boolean debug=this.args.containsKey(ArgFlag.VERBOSE);
  boolean useOldWF=this.args.containsKey(ArgFlag.OLD_WF);
  boolean noLiveness=this.args.containsKey(ArgFlag.NO_LIVENESS);
  Path mainpath=CommandLine.parseMainPath(this.args.get(ArgFlag.MAIN)[0]);
  List<Path> impaths=this.args.containsKey(ArgFlag.PATH) ? CommandLine.parseImportPaths(this.args.get(ArgFlag.PATH)[0]) : Collections.emptyList();
  ResourceLocator locator=new DirectoryResourceLocator(impaths);
  return new MainContext(debug,locator,mainpath,useOldWF,noLiveness);
}","private MainContext newMainContext(){
  boolean debug=this.args.containsKey(ArgFlag.VERBOSE);
  boolean useOldWF=this.args.containsKey(ArgFlag.OLD_WF);
  boolean noLiveness=this.args.containsKey(ArgFlag.NO_LIVENESS);
  boolean minEfsm=this.args.containsKey(ArgFlag.MIN_EFSM);
  Path mainpath=CommandLine.parseMainPath(this.args.get(ArgFlag.MAIN)[0]);
  List<Path> impaths=this.args.containsKey(ArgFlag.PATH) ? CommandLine.parseImportPaths(this.args.get(ArgFlag.PATH)[0]) : Collections.emptyList();
  ResourceLocator locator=new DirectoryResourceLocator(impaths);
  return new MainContext(debug,locator,mainpath,useOldWF,noLiveness,minEfsm);
}",0.9449465899753492
2318,"private Job newJob(MainContext mc){
  return new Job(mc.debug,mc.getParsedModules(),mc.main,mc.useOldWF,mc.noLiveness);
}","private Job newJob(MainContext mc){
  return new Job(mc.debug,mc.getParsedModules(),mc.main,mc.useOldWF,mc.noLiveness,mc.minEfsm);
}",0.9565217391304348
2319,"private EndpointGraph getEndointGraph(Job job,GProtocolName fullname,Role role) throws ScribbleException {
  JobContext jcontext=job.getContext();
  GProtocolDecl gpd=(GProtocolDecl)jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  if (gpd == null || !gpd.header.roledecls.getRoles().contains(role)) {
    throw new RuntimeException(""String_Node_Str"" + Arrays.toString(this.args.get(ArgFlag.FSM)));
  }
  EndpointGraph fsm=jcontext.getEndpointGraph(fullname,role);
  if (fsm == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname);
  }
  return fsm;
}","private EndpointGraph getEndointGraph(Job job,GProtocolName fullname,Role role) throws ScribbleException {
  JobContext jcontext=job.getContext();
  GProtocolDecl gpd=(GProtocolDecl)jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  if (gpd == null || !gpd.header.roledecls.getRoles().contains(role)) {
    throw new RuntimeException(""String_Node_Str"" + Arrays.toString(this.args.get(ArgFlag.FSM)));
  }
  EndpointGraph fsm=this.args.containsKey(ArgFlag.MIN_EFSM) ? jcontext.getMinimisedEndpointGraph(fullname,role) : jcontext.getEndpointGraph(fullname,role);
  if (fsm == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname);
  }
  return fsm;
}",0.925984251968504
2320,"private int parseFlag(int i){
  String flag=this.args[i];
switch (flag) {
case CommandLineArgParser.JUNIT_FLAG:
{
      this.parsed.put(CommandLine.ArgFlag.JUNIT,new String[0]);
      return i;
    }
case CommandLineArgParser.VERBOSE_FLAG:
{
    this.parsed.put(CommandLine.ArgFlag.VERBOSE,new String[0]);
    return i;
  }
case CommandLineArgParser.PATH_FLAG:
{
  return parsePath(i);
}
case CommandLineArgParser.PROJECT_FLAG:
{
return parseProject(i);
}
case CommandLineArgParser.FSM_FLAG:
{
return parseFsm(i);
}
case CommandLineArgParser.FSM_DOT_FLAG:
{
return parseFsmDot(i);
}
case CommandLineArgParser.SESSION_FLAG:
{
return parseSession(i);
}
case CommandLineArgParser.STATECHAN_FLAG:
{
return parseStateChannels(i);
}
case CommandLineArgParser.API_FLAG:
{
return parseApi(i);
}
case CommandLineArgParser.API_OUTPUT_FLAG:
{
return parseOutput(i);
}
case CommandLineArgParser.STATECHANSUBTYPES_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.STATECHANSUBTYPES_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.GLOBAL_MODEL_FLAG:
{
return parseGlobalModel(i);
}
case CommandLineArgParser.GLOBAL_MODEL_DOT_FLAG:
{
return parseGlobalModelDot(i);
}
case CommandLineArgParser.OLD_WF_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.OLD_WF_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.NO_LIVENESS:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.NO_LIVENESS),new String[0]);
return i;
}
case CommandLineArgParser.MIN_FSM:
{
this.parsed.put(CommandLine.ArgFlag.MIN_FSM,new String[0]);
return i;
}
default :
{
throw new RuntimeException(flag);
}
}
}","private int parseFlag(int i){
  String flag=this.args[i];
switch (flag) {
case CommandLineArgParser.JUNIT_FLAG:
{
      this.parsed.put(CommandLine.ArgFlag.JUNIT,new String[0]);
      return i;
    }
case CommandLineArgParser.VERBOSE_FLAG:
{
    this.parsed.put(CommandLine.ArgFlag.VERBOSE,new String[0]);
    return i;
  }
case CommandLineArgParser.PATH_FLAG:
{
  return parsePath(i);
}
case CommandLineArgParser.PROJECT_FLAG:
{
return parseProject(i);
}
case CommandLineArgParser.FSM_FLAG:
{
return parseFsm(i);
}
case CommandLineArgParser.FSM_DOT_FLAG:
{
return parseFsmDot(i);
}
case CommandLineArgParser.SESSION_FLAG:
{
return parseSession(i);
}
case CommandLineArgParser.STATECHAN_FLAG:
{
return parseStateChannels(i);
}
case CommandLineArgParser.API_FLAG:
{
return parseApi(i);
}
case CommandLineArgParser.API_OUTPUT_FLAG:
{
return parseOutput(i);
}
case CommandLineArgParser.STATECHANSUBTYPES_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.STATECHANSUBTYPES_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.GLOBAL_MODEL_FLAG:
{
return parseGlobalModel(i);
}
case CommandLineArgParser.GLOBAL_MODEL_DOT_FLAG:
{
return parseGlobalModelDot(i);
}
case CommandLineArgParser.OLD_WF_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.OLD_WF_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.NO_LIVENESS:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.NO_LIVENESS),new String[0]);
return i;
}
case CommandLineArgParser.MIN_EFSM:
{
this.parsed.put(CommandLine.ArgFlag.MIN_EFSM,new String[0]);
return i;
}
default :
{
throw new RuntimeException(flag);
}
}
}",0.9993943064809206
2321,"public MainContext(boolean debug,ResourceLocator locator,Path mainpath,boolean useOldWF,boolean noLiveness){
  this.debug=debug;
  this.useOldWF=useOldWF;
  this.noLiveness=noLiveness;
  this.antlrParser=new AntlrParser();
  this.scribParser=new ScribParser();
  this.locator=locator;
  this.loader=new ScribModuleLoader(this.locator,this.antlrParser,this.scribParser);
  Pair<Resource,Module> p=loadMainModule(mainpath);
  this.main=p.right.getFullModuleName();
  loadAllModules(p);
}","public MainContext(boolean debug,ResourceLocator locator,Path mainpath,boolean useOldWF,boolean noLiveness,boolean minEfsm){
  this.debug=debug;
  this.useOldWF=useOldWF;
  this.noLiveness=noLiveness;
  this.minEfsm=minEfsm;
  this.antlrParser=new AntlrParser();
  this.scribParser=new ScribParser();
  this.locator=locator;
  this.loader=new ScribModuleLoader(this.locator,this.antlrParser,this.scribParser);
  Pair<Resource,Module> p=loadMainModule(mainpath);
  this.main=p.right.getFullModuleName();
  loadAllModules(p);
}",0.9603960396039604
2322,"public StateChannelApiGenerator(Job job,GProtocolName fullname,Role self){
  super(job,fullname);
  this.self=self;
  this.lpn=Projector.projectFullProtocolName(fullname,self);
  JobContext jc=job.getContext();
  EndpointGraph minimised=jc.getMinimisedEndpointGraph(fullname,self);
  if (minimised == null) {
    try {
      String aut=runAut(jc.getEndpointGraph(fullname,self).init.toAut(),lpn + ""String_Node_Str"");
      minimised=new AutParser().parse(aut);
      jc.addMinimisedEndpointGraph(lpn,minimised);
    }
 catch (    ScribbleException e) {
      throw new RuntimeException(e);
    }
  }
  this.init=minimised.init;
  generateClassNames(this.init);
  constructClasses(this.init);
  EndpointState term=EndpointState.getTerminal(this.init);
  if (term != null) {
    ClassBuilder cb=new EndSocketGenerator(this,term).generateType();
    this.types.put(cb.getName(),cb);
  }
}","public StateChannelApiGenerator(Job job,GProtocolName fullname,Role self){
  super(job,fullname);
  this.self=self;
  this.lpn=Projector.projectFullProtocolName(fullname,self);
  JobContext jc=job.getContext();
  this.init=job.minEfsm ? jc.getMinimisedEndpointGraph(fullname,self).init : jc.getEndpointGraph(fullname,self).init;
  generateClassNames(this.init);
  constructClasses(this.init);
  EndpointState term=EndpointState.getTerminal(this.init);
  if (term != null) {
    ClassBuilder cb=new EndSocketGenerator(this,term).generateType();
    this.types.put(cb.getName(),cb);
  }
}",0.7042828008157715
2323,"public IOInterfacesGenerator(StateChannelApiGenerator apigen,boolean subtypes){
  super(apigen.getJob(),apigen.getGProtocolName());
  this.apigen=apigen;
  this.SUBTYPES=subtypes;
  GProtocolName fullname=apigen.getGProtocolName();
  Role self=getSelf();
  EndpointState init=this.job.getContext().getMinimisedEndpointGraph(fullname,self).init;
  generateActionAndSuccessorInterfacesAndCollectPreActions(new HashSet<>(),init);
  generateIOStateInterfacesFirstPass(new HashSet<>(),init);
  collectPreds();
  EndpointState term=EndpointState.getTerminal(init);
  ClassBuilder endsock=null;
  if (term != null) {
    endsock=(ClassBuilder)this.apigen.getType(ScribSocketGenerator.GENERATED_ENDSOCKET_NAME);
    endsock.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
    for (    InterfaceBuilder ib : this.preds.get(term)) {
      endsock.addInterfaces(ib.getName());
      MethodBuilder mb2=addToCastMethod(ib,""String_Node_Str"");
      if (mb2 != null) {
        ib.addImports(SessionApiGenerator.getStateChannelPackageName(this.gpn,self) + ""String_Node_Str"");
      }
    }
  }
  generateIOStateInterfacesSecondPass(new HashSet<>(),init);
  collectBranchSuccs();
  generateHandleInterfaces(new HashSet<>(),init);
  generateHandleInterfacesSecondPass(new HashSet<>(),init);
  addIOStateInterfacesToStateChannels(new HashSet<>(),init);
  if (this.SUBTYPES) {
    addSupertypeInterfaces();
  }
  if (term != null) {
    for (    InterfaceBuilder ib : this.preds.get(term)) {
      for (      MethodBuilder cast : ib.getDefaultMethods()) {
        if (!cast.getReturn().equals(""String_Node_Str"")) {
          MethodBuilder mb=addEndSocketToCastMethod(endsock,cast.getReturn(),""String_Node_Str"");
          if (mb != null) {
            mb.addModifiers(JavaBuilder.PUBLIC);
            mb.addAnnotations(""String_Node_Str"");
            endsock.addImports(""String_Node_Str"");
          }
        }
      }
    }
    MethodBuilder mb3=addEndSocketToCastMethod(endsock,""String_Node_Str"",""String_Node_Str"");
    if (mb3 != null) {
      mb3.addModifiers(JavaBuilder.PUBLIC);
      mb3.addAnnotations(""String_Node_Str"");
    }
  }
}","public IOInterfacesGenerator(StateChannelApiGenerator apigen,boolean subtypes){
  super(apigen.getJob(),apigen.getGProtocolName());
  this.apigen=apigen;
  this.SUBTYPES=subtypes;
  GProtocolName fullname=apigen.getGProtocolName();
  Role self=getSelf();
  JobContext jc=this.job.getContext();
  EndpointState init=job.minEfsm ? jc.getMinimisedEndpointGraph(fullname,self).init : jc.getEndpointGraph(fullname,self).init;
  generateActionAndSuccessorInterfacesAndCollectPreActions(new HashSet<>(),init);
  generateIOStateInterfacesFirstPass(new HashSet<>(),init);
  collectPreds();
  EndpointState term=EndpointState.getTerminal(init);
  ClassBuilder endsock=null;
  if (term != null) {
    endsock=(ClassBuilder)this.apigen.getType(ScribSocketGenerator.GENERATED_ENDSOCKET_NAME);
    endsock.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
    for (    InterfaceBuilder ib : this.preds.get(term)) {
      endsock.addInterfaces(ib.getName());
      MethodBuilder mb2=addToCastMethod(ib,""String_Node_Str"");
      if (mb2 != null) {
        ib.addImports(SessionApiGenerator.getStateChannelPackageName(this.gpn,self) + ""String_Node_Str"");
      }
    }
  }
  generateIOStateInterfacesSecondPass(new HashSet<>(),init);
  collectBranchSuccs();
  generateHandleInterfaces(new HashSet<>(),init);
  generateHandleInterfacesSecondPass(new HashSet<>(),init);
  addIOStateInterfacesToStateChannels(new HashSet<>(),init);
  if (this.SUBTYPES) {
    addSupertypeInterfaces();
  }
  if (term != null) {
    for (    InterfaceBuilder ib : this.preds.get(term)) {
      for (      MethodBuilder cast : ib.getDefaultMethods()) {
        if (!cast.getReturn().equals(""String_Node_Str"")) {
          MethodBuilder mb=addEndSocketToCastMethod(endsock,cast.getReturn(),""String_Node_Str"");
          if (mb != null) {
            mb.addModifiers(JavaBuilder.PUBLIC);
            mb.addAnnotations(""String_Node_Str"");
            endsock.addImports(""String_Node_Str"");
          }
        }
      }
    }
    MethodBuilder mb3=addEndSocketToCastMethod(endsock,""String_Node_Str"",""String_Node_Str"");
    if (mb3 != null) {
      mb3.addModifiers(JavaBuilder.PUBLIC);
      mb3.addAnnotations(""String_Node_Str"");
    }
  }
}",0.97483989021043
2324,"public String toAut(){
  Set<S> all=getAllReachable((S)this);
  String aut=""String_Node_Str"";
  int edges=0;
  Set<Integer> seen=new HashSet<>();
  for (  S s : all) {
    if (seen.contains(s.id)) {
      continue;
    }
    seen.add(s.id);
    Iterator<A> as=s.getAllTakeable().iterator();
    Iterator<S> ss=s.getSuccessors().iterator();
    for (; as.hasNext(); edges++) {
      A a=as.next();
      S succ=ss.next();
      aut+=""String_Node_Str"" + s.id + ""String_Node_Str""+ a+ ""String_Node_Str""+ succ.id+ ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"" + this.id + ""String_Node_Str""+ edges+ ""String_Node_Str""+ all.size()+ ""String_Node_Str""+ aut+ ""String_Node_Str"";
}","public String toAut(){
  Set<S> all=new HashSet<>();
  all.add((S)this);
  all.addAll(getAllReachable((S)this));
  String aut=""String_Node_Str"";
  int edges=0;
  Set<Integer> seen=new HashSet<>();
  for (  S s : all) {
    if (seen.contains(s.id)) {
      continue;
    }
    seen.add(s.id);
    Iterator<A> as=s.getAllTakeable().iterator();
    Iterator<S> ss=s.getSuccessors().iterator();
    for (; as.hasNext(); edges++) {
      A a=as.next();
      S succ=ss.next();
      aut+=""String_Node_Str"" + s.id + ""String_Node_Str""+ a+ ""String_Node_Str""+ succ.id+ ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"" + this.id + ""String_Node_Str""+ edges+ ""String_Node_Str""+ all.size()+ ""String_Node_Str""+ aut+ ""String_Node_Str"";
}",0.9594882729211088
2325,"public Job(boolean debug,Map<ModuleName,Module> parsed,ModuleName main,boolean useOldWF,boolean noLiveness){
  this.debug=debug;
  this.useOldWf=useOldWF;
  this.noLiveness=noLiveness;
  this.jcontext=new JobContext(parsed,main);
}","public Job(boolean debug,Map<ModuleName,Module> parsed,ModuleName main,boolean useOldWF,boolean noLiveness,boolean minEfsm){
  this.debug=debug;
  this.useOldWf=useOldWF;
  this.noLiveness=noLiveness;
  this.minEfsm=minEfsm;
  this.jcontext=new JobContext(parsed,main);
}",0.9203187250996016
2326,"public EndpointGraph getMinimisedEndpointGraph(LProtocolName fullname){
  return this.minimised.get(fullname);
}","public EndpointGraph getMinimisedEndpointGraph(LProtocolName fullname){
  EndpointGraph minimised=this.minimised.get(fullname);
  if (minimised == null) {
    try {
      EndpointGraph tmp=getEndpointGraph(fullname);
      String aut=tmp.init.toAut();
      aut=runAut(aut,fullname + ""String_Node_Str"");
      minimised=new AutParser().parse(aut);
      addMinimisedEndpointGraph(fullname,minimised);
    }
 catch (    ScribbleException e) {
      throw new RuntimeException(e);
    }
  }
  return minimised;
}",0.337620578778135
2327,"@Test public void tests() throws Exception {
  MainContext mc=newMainContext();
  Job job=new Job(mc.debug,mc.getParsedModules(),mc.main,mc.useOldWF,mc.noLiveness);
  ScribbleException x=job.testWellFormednessCheck();
  if (!hasErrors && x != null) {
    throw x;
  }
 else   if (hasErrors && x == null) {
    fail(""String_Node_Str"");
  }
}","@Test public void tests() throws Exception {
  MainContext mc=newMainContext();
  Job job=new Job(mc.debug,mc.getParsedModules(),mc.main,mc.useOldWF,mc.noLiveness,mc.minEfsm);
  ScribbleException x=job.testWellFormednessCheck();
  if (!hasErrors && x != null) {
    throw x;
  }
 else   if (hasErrors && x == null) {
    fail(""String_Node_Str"");
  }
}",0.984081041968162
2328,"private MainContext newMainContext(){
  boolean debug=false;
  boolean useOldWF=false;
  boolean noLiveness=false;
  Path mainpath=Paths.get(filename);
  List<Path> impaths=new ArrayList<Path>();
  URL url=ClassLoader.getSystemResource(""String_Node_Str"");
  String dir=url.getFile().substring(0,url.getFile().length() - 5);
  impaths.add(Paths.get(dir));
  ResourceLocator locator=new DirectoryResourceLocator(impaths);
  return new MainContext(debug,locator,mainpath,useOldWF,noLiveness);
}","private MainContext newMainContext(){
  boolean debug=false;
  boolean useOldWF=false;
  boolean noLiveness=false;
  boolean minEfsm=false;
  Path mainpath=Paths.get(filename);
  List<Path> impaths=new ArrayList<Path>();
  URL url=ClassLoader.getSystemResource(""String_Node_Str"");
  String dir=url.getFile().substring(0,url.getFile().length() - 5);
  impaths.add(Paths.get(dir));
  ResourceLocator locator=new DirectoryResourceLocator(impaths);
  return new MainContext(debug,locator,mainpath,useOldWF,noLiveness,minEfsm);
}",0.967487684729064
2329,"public String toAut(){
  Set<S> all=new HashSet<>();
  all.add((S)this);
  all.addAll(getAllReachable((S)this));
  String aut=""String_Node_Str"";
  int edges=0;
  Set<Integer> seen=new HashSet<>();
  for (  S s : all) {
    if (seen.contains(s.id)) {
      continue;
    }
    seen.add(s.id);
    Iterator<A> as=s.getAllTakeable().iterator();
    Iterator<S> ss=s.getSuccessors().iterator();
    for (; as.hasNext(); edges++) {
      A a=as.next();
      S succ=ss.next();
      aut+=""String_Node_Str"" + s.id + ""String_Node_Str""+ a+ ""String_Node_Str""+ succ.id+ ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"" + this.id + ""String_Node_Str""+ edges+ ""String_Node_Str""+ all.size()+ ""String_Node_Str""+ aut+ ""String_Node_Str"";
}","public String toAut(){
  Set<S> all=new HashSet<>();
  all.add((S)this);
  all.addAll(getAllReachable((S)this));
  String aut=""String_Node_Str"";
  int edges=0;
  Set<Integer> seen=new HashSet<>();
  for (  S s : all) {
    if (seen.contains(s.id)) {
      continue;
    }
    seen.add(s.id);
    Iterator<A> as=s.getAllTakeable().iterator();
    Iterator<S> ss=s.getSuccessors().iterator();
    for (; as.hasNext(); edges++) {
      A a=as.next();
      S succ=ss.next();
      String msg=a.toStringWithMessageIdHack();
      aut+=""String_Node_Str"" + s.id + ""String_Node_Str""+ msg+ ""String_Node_Str""+ succ.id+ ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"" + this.id + ""String_Node_Str""+ edges+ ""String_Node_Str""+ all.size()+ ""String_Node_Str""+ aut+ ""String_Node_Str"";
}",0.8978779840848806
2330,"private static IOAction parseIOAction(String a){
  String peer;
  String action;
  String op;
  String[] pay=null;
  int i=a.indexOf(""String_Node_Str"");
  i=(i == -1) ? a.indexOf(""String_Node_Str"") : i;
  int j=i + 1;
  String tmp=a.substring(j,j + 1);
  if (tmp.equals(""String_Node_Str"") || tmp.equals(""String_Node_Str"")) {
    j++;
  }
  action=a.substring(i,j);
  peer=a.substring(0,i);
  int k=a.indexOf(""String_Node_Str"");
  op=a.substring(j,k);
  String p=a.substring(k + 1,a.length() - 1);
  if (!p.isEmpty()) {
    pay=p.split(""String_Node_Str"");
  }
switch (action) {
case ""String_Node_Str"":
{
      Payload payload=(pay != null) ? new Payload(Arrays.asList(pay).stream().map((pe) -> new DataType(pe)).collect(Collectors.toList())) : Payload.EMPTY_PAYLOAD;
      return new Send(new Role(peer),new Op(op),payload);
    }
case ""String_Node_Str"":
{
    Payload payload=(pay != null) ? new Payload(Arrays.asList(pay).stream().map((pe) -> new DataType(pe)).collect(Collectors.toList())) : Payload.EMPTY_PAYLOAD;
    return new Receive(new Role(peer),new Op(op),payload);
  }
case ""String_Node_Str"":
{
  return new Connect(new Role(peer));
}
case ""String_Node_Str"":
{
return new Accept(new Role(peer));
}
default :
{
throw new RuntimeException(""String_Node_Str"" + op);
}
}
}","private static IOAction parseIOAction(String a){
  String peer;
  String action;
  String msg;
  String[] pay=null;
  int i=a.indexOf(""String_Node_Str"");
  i=(i == -1) ? a.indexOf(""String_Node_Str"") : i;
  int j=i + 1;
  String tmp=a.substring(j,j + 1);
  if (tmp.equals(""String_Node_Str"") || tmp.equals(""String_Node_Str"")) {
    j++;
  }
  action=a.substring(i,j);
  peer=a.substring(0,i);
  int k=a.indexOf(""String_Node_Str"");
  msg=a.substring(j,k);
  String p=a.substring(k + 1,a.length() - 1);
  if (!p.isEmpty()) {
    pay=p.split(""String_Node_Str"");
  }
switch (action) {
case ""String_Node_Str"":
{
      Payload payload=(pay != null) ? new Payload(Arrays.asList(pay).stream().map((pe) -> new DataType(pe)).collect(Collectors.toList())) : Payload.EMPTY_PAYLOAD;
      return new Send(new Role(peer),getMessageIdHack(msg),payload);
    }
case ""String_Node_Str"":
{
    Payload payload=(pay != null) ? new Payload(Arrays.asList(pay).stream().map((pe) -> new DataType(pe)).collect(Collectors.toList())) : Payload.EMPTY_PAYLOAD;
    return new Receive(new Role(peer),getMessageIdHack(msg),payload);
  }
case ""String_Node_Str"":
{
  return new Connect(new Role(peer));
}
case ""String_Node_Str"":
{
return new Accept(new Role(peer));
}
default :
{
throw new RuntimeException(""String_Node_Str"" + msg);
}
}
}",0.971716388996513
2331,"public void run() throws ScribbleException {
  try {
    Job job=newJob(newMainContext());
    ScribbleException fail=null;
    try {
      job.checkWellFormedness();
    }
 catch (    ScribbleException x) {
      fail=x;
    }
    try {
      if (this.args.containsKey(ArgFlag.PROJECT)) {
        outputProjections(job);
      }
      if (this.args.containsKey(ArgFlag.FSM)) {
        outputGraph(job);
      }
      if (this.args.containsKey(ArgFlag.FSM_DOT)) {
        drawGraph(job);
      }
      if (this.args.containsKey(ArgFlag.SESS_API)) {
        outputSessionApi(job);
      }
      if (this.args.containsKey(ArgFlag.SCHAN_API)) {
        outputStateChannelApi(job);
      }
      if (this.args.containsKey(ArgFlag.EP_API)) {
        outputEndpointApi(job);
      }
      if (this.args.containsKey(ArgFlag.GLOBAL_MODEL) || this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
        if (job.useOldWf) {
          throw new RuntimeException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL)) {
          outputGlobalModel(job);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
          drawGlobalModel(job);
        }
      }
    }
 catch (    ScribbleException x) {
      if (fail == null) {
        fail=x;
      }
    }
    if (fail != null) {
      throw fail;
    }
  }
 catch (  ScribbleException e) {
    if (this.args.containsKey(ArgFlag.JUNIT) || this.args.containsKey(ArgFlag.VERBOSE)) {
      throw e;
    }
 else {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
}","public void run() throws ScribbleException {
  try {
    Job job=newJob(newMainContext());
    ScribbleException fail=null;
    try {
      job.checkWellFormedness();
    }
 catch (    ScribbleException x) {
      fail=x;
    }
    try {
      if (this.args.containsKey(ArgFlag.PROJECT)) {
        outputProjections(job);
      }
      if (this.args.containsKey(ArgFlag.FSM)) {
        outputGraph(job);
      }
      if (this.args.containsKey(ArgFlag.FSM_DOT)) {
        drawGraph(job);
      }
      if (this.args.containsKey(ArgFlag.GLOBAL_MODEL) || this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
        if (job.useOldWf) {
          throw new RuntimeException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL)) {
          outputGlobalModel(job);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
          drawGlobalModel(job);
        }
      }
    }
 catch (    ScribbleException x) {
      if (fail == null) {
        fail=x;
      }
    }
    if (fail != null) {
      throw fail;
    }
    if (this.args.containsKey(ArgFlag.SESS_API)) {
      outputSessionApi(job);
    }
    if (this.args.containsKey(ArgFlag.SCHAN_API)) {
      outputStateChannelApi(job);
    }
    if (this.args.containsKey(ArgFlag.EP_API)) {
      outputEndpointApi(job);
    }
  }
 catch (  ScribbleException e) {
    if (this.args.containsKey(ArgFlag.JUNIT) || this.args.containsKey(ArgFlag.VERBOSE)) {
      throw e;
    }
 else {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
}",0.8359469240048251
2332,"private void constructSessionClass(){
  String packname=getEndpointApiRootPackageName(this.gpn);
  String simpname=getSessionClassName(this.gpn);
  this.cb.setName(simpname);
  this.cb.setPackage(packname);
  this.cb.addImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.cb.addImports(""String_Node_Str"");
  this.cb.addImports(getRolesPackageName(this.gpn) + ""String_Node_Str"",getOpsPackageName(this.gpn) + ""String_Node_Str"");
  this.cb.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.FINAL);
  this.cb.setSuperClass(SessionApiGenerator.SESSION_CLASS);
  FieldBuilder fb1=this.cb.newField(SessionApiGenerator.IMPATH_FIELD);
  fb1.setType(""String_Node_Str"");
  fb1.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  fb1.setExpression(""String_Node_Str"");
  FieldBuilder fb2=this.cb.newField(SessionApiGenerator.SOURCE_FIELD);
  fb2.setType(""String_Node_Str"");
  fb2.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  fb2.setExpression(""String_Node_Str"");
  FieldBuilder fb3=this.cb.newField(SessionApiGenerator.PROTO_FIELD);
  fb3.setType(SessionApiGenerator.GPROTOCOLNAME_CLASS);
  fb3.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  fb3.setExpression(SessionApiGenerator.SESSIONTYPEFACTORY_CLASS + ""String_Node_Str"" + gpn+ ""String_Node_Str"");
  this.roles.stream().forEach((r) -> addRoleField(this.cb,r));
  this.mids.stream().forEach((mid) -> addOpField(this.cb,mid));
  ConstructorBuilder ctor=this.cb.newConstructor();
  ctor.addModifiers(JavaBuilder.PUBLIC);
  ctor.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + simpname+ ""String_Node_Str""+ SessionApiGenerator.IMPATH_FIELD+ ""String_Node_Str""+ simpname+ ""String_Node_Str""+ SessionApiGenerator.SOURCE_FIELD+ ""String_Node_Str""+ simpname+ ""String_Node_Str""+ SessionApiGenerator.PROTO_FIELD+ ""String_Node_Str"");
  FieldBuilder fb4=this.cb.newField(""String_Node_Str"");
  fb4.setType(""String_Node_Str"");
  fb4.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  String roles=""String_Node_Str"";
  roles+=this.roles.stream().map((r) -> r.toString()).collect(Collectors.joining(""String_Node_Str""));
  roles+=""String_Node_Str"";
  fb4.setExpression(roles);
  MethodBuilder mb=this.cb.newMethod(""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.setReturn(""String_Node_Str"");
  mb.addParameters();
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + simpname+ ""String_Node_Str"");
}","private void constructSessionClass(){
  String packname=getEndpointApiRootPackageName(this.gpn);
  String simpname=getSessionClassName(this.gpn);
  this.cb.setName(simpname);
  this.cb.setPackage(packname);
  this.cb.addImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.cb.addImports(""String_Node_Str"");
  this.cb.addImports(getRolesPackageName(this.gpn) + ""String_Node_Str"");
  if (!this.mids.isEmpty()) {
    this.cb.addImports(getOpsPackageName(this.gpn) + ""String_Node_Str"");
  }
  this.cb.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.FINAL);
  this.cb.setSuperClass(SessionApiGenerator.SESSION_CLASS);
  FieldBuilder fb1=this.cb.newField(SessionApiGenerator.IMPATH_FIELD);
  fb1.setType(""String_Node_Str"");
  fb1.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  fb1.setExpression(""String_Node_Str"");
  FieldBuilder fb2=this.cb.newField(SessionApiGenerator.SOURCE_FIELD);
  fb2.setType(""String_Node_Str"");
  fb2.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  fb2.setExpression(""String_Node_Str"");
  FieldBuilder fb3=this.cb.newField(SessionApiGenerator.PROTO_FIELD);
  fb3.setType(SessionApiGenerator.GPROTOCOLNAME_CLASS);
  fb3.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  fb3.setExpression(SessionApiGenerator.SESSIONTYPEFACTORY_CLASS + ""String_Node_Str"" + gpn+ ""String_Node_Str"");
  this.roles.stream().forEach((r) -> addRoleField(this.cb,r));
  this.mids.stream().forEach((mid) -> addOpField(this.cb,mid));
  ConstructorBuilder ctor=this.cb.newConstructor();
  ctor.addModifiers(JavaBuilder.PUBLIC);
  ctor.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + simpname+ ""String_Node_Str""+ SessionApiGenerator.IMPATH_FIELD+ ""String_Node_Str""+ simpname+ ""String_Node_Str""+ SessionApiGenerator.SOURCE_FIELD+ ""String_Node_Str""+ simpname+ ""String_Node_Str""+ SessionApiGenerator.PROTO_FIELD+ ""String_Node_Str"");
  FieldBuilder fb4=this.cb.newField(""String_Node_Str"");
  fb4.setType(""String_Node_Str"");
  fb4.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.STATIC,JavaBuilder.FINAL);
  String roles=""String_Node_Str"";
  roles+=this.roles.stream().map((r) -> r.toString()).collect(Collectors.joining(""String_Node_Str""));
  roles+=""String_Node_Str"";
  fb4.setExpression(roles);
  MethodBuilder mb=this.cb.newMethod(""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.setReturn(""String_Node_Str"");
  mb.addParameters();
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + simpname+ ""String_Node_Str"");
}",0.987994489273765
2333,"private ClassBuilder constructClass(EndpointState curr){
  Set<IOAction> as=curr.getTakeable();
  IOAction a=as.iterator().next();
  if (a instanceof Send) {
    return new SendSocketGenerator(this,curr).generateType();
  }
 else   if (a instanceof Receive) {
    return (as.size() > 1) ? new BranchSocketGenerator(this,curr).generateType() : new ReceiveSocketGenerator(this,curr).generateType();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + curr);
  }
}","private ClassBuilder constructClass(EndpointState curr){
switch (curr.getStateKind()) {
case OUTPUT:
{
      Set<IOAction> as=curr.getTakeable();
      if (as.stream().allMatch((a) -> a.isSend())) {
        return new SendSocketGenerator(this,curr).generateType();
      }
      throw new RuntimeException(""String_Node_Str"" + curr.toLongString());
    }
case ACCEPT:
{
    throw new RuntimeException(""String_Node_Str"" + curr.toLongString());
  }
case UNARY_INPUT:
{
  return new ReceiveSocketGenerator(this,curr).generateType();
}
case POLY_INPUT:
{
return new BranchSocketGenerator(this,curr).generateType();
}
default :
{
throw new RuntimeException(""String_Node_Str"" + curr.toLongString());
}
}
}",0.2803418803418803
2334,"public Set<A> getTakeable(){
  Set<A> as=new HashSet<>(this.actions);
  if (as.size() != this.actions.size()) {
    throw new RuntimeException(""String_Node_Str"" + this.actions);
  }
  return as;
}","public Set<A> getTakeable(){
  Set<A> as=new HashSet<>(this.actions);
  if (as.size() != this.actions.size()) {
    throw new RuntimeException(""String_Node_Str"" + this.actions + ""String_Node_Str"");
  }
  return as;
}",0.9514563106796116
2335,"private static LProtocolBlock prune(LProtocolBlock block,Set<RecVar> rvs){
  if (block.isEmpty()) {
    return block;
  }
  List<? extends LInteractionNode> lis=block.getInteractionSeq().getInteractions();
  if (lis.size() > 1) {
    return block;
  }
 else {
    LInteractionNode lin=lis.get(0);
    if (lin instanceof LContinue) {
      if (rvs.contains(((LContinue)lin).recvar.toName())) {
        return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Collections.emptyList()));
      }
 else {
        return block;
      }
    }
 else     if (lin instanceof MessageTransfer<?> || lin instanceof Do<?>) {
      return block;
    }
 else {
      if (lin instanceof LChoice) {
        List<LProtocolBlock> pruned=new LinkedList<LProtocolBlock>();
        for (        LProtocolBlock b : ((LChoice)lin).getBlocks()) {
          if (!prune(b,rvs).isEmpty()) {
            pruned.add(b);
          }
        }
        if (pruned.isEmpty()) {
          return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Collections.emptyList()));
        }
 else {
          return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Arrays.asList(AstFactoryImpl.FACTORY.LChoice(((LChoice)lin).subj,pruned))));
        }
      }
 else       if (lin instanceof LRecursion) {
        rvs=new HashSet<>(rvs);
        LProtocolBlock prune=prune(((LRecursion)lin).getBlock(),rvs);
        if (prune.isEmpty()) {
          return prune;
        }
 else {
          return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Arrays.asList(AstFactoryImpl.FACTORY.LRecursion(((LRecursion)lin).recvar,prune))));
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + lin);
      }
    }
  }
}","private static LProtocolBlock prune(LProtocolBlock block,Set<RecVar> rvs){
  if (block.isEmpty()) {
    return block;
  }
  List<? extends LInteractionNode> lis=block.getInteractionSeq().getInteractions();
  if (lis.size() > 1) {
    return block;
  }
 else {
    LInteractionNode lin=lis.get(0);
    if (lin instanceof LContinue) {
      if (rvs.contains(((LContinue)lin).recvar.toName())) {
        return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Collections.emptyList()));
      }
 else {
        return block;
      }
    }
 else     if (lin instanceof MessageTransfer<?> || lin instanceof Do<?> || lin instanceof ConnectionAction<?>) {
      return block;
    }
 else {
      if (lin instanceof LChoice) {
        List<LProtocolBlock> pruned=new LinkedList<LProtocolBlock>();
        for (        LProtocolBlock b : ((LChoice)lin).getBlocks()) {
          if (!prune(b,rvs).isEmpty()) {
            pruned.add(b);
          }
        }
        if (pruned.isEmpty()) {
          return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Collections.emptyList()));
        }
 else {
          return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Arrays.asList(AstFactoryImpl.FACTORY.LChoice(((LChoice)lin).subj,pruned))));
        }
      }
 else       if (lin instanceof LRecursion) {
        rvs=new HashSet<>(rvs);
        LProtocolBlock prune=prune(((LRecursion)lin).getBlock(),rvs);
        if (prune.isEmpty()) {
          return prune;
        }
 else {
          return AstFactoryImpl.FACTORY.LProtocolBlock(AstFactoryImpl.FACTORY.LInteractionSeq(Arrays.asList(AstFactoryImpl.FACTORY.LRecursion(((LRecursion)lin).recvar,prune))));
        }
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + lin);
      }
    }
  }
}",0.9895718990120748
2336,"@Override public ScribNode visit(ScribNode parent,ScribNode child) throws ScribbleException {
  if (child instanceof GProtocolDecl) {
    GProtocolDecl gpd=(GProtocolDecl)child;
    if (gpd.isAuxModifier()) {
      return child;
    }
  }
  if (child instanceof Choice<?>) {
    return visitOverrideForChoice((InteractionSeq<?>)parent,(Choice<?>)child);
  }
 else {
    return super.visit(parent,child);
  }
}","@Override public ScribNode visit(ScribNode parent,ScribNode child) throws ScribbleException {
  if (child instanceof GProtocolDecl) {
    GProtocolDecl gpd=(GProtocolDecl)child;
    if (gpd.isAuxModifier()) {
      return child;
    }
  }
  if (getJob().useOldWf) {
    if (child instanceof Choice<?>) {
      return visitOverrideForChoice((InteractionSeq<?>)parent,(Choice<?>)child);
    }
  }
  return super.visit(parent,child);
}",0.9417360285374554
2337,"private EndpointGraph getEndointGraph(Job job,GProtocolName fullname,Role role) throws ScribbleException {
  JobContext jcontext=job.getContext();
  GProtocolDecl gpd=(GProtocolDecl)jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  if (gpd == null || !gpd.header.roledecls.getRoles().contains(role)) {
    throw new RuntimeException(""String_Node_Str"" + Arrays.toString(this.args.get(ArgFlag.FSM)));
  }
  EndpointGraph fsm=this.args.containsKey(ArgFlag.MIN_EFSM) ? jcontext.getMinimisedEndpointGraph(fullname,role) : jcontext.getEndpointGraph(fullname,role);
  if (fsm == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname);
  }
  return fsm;
}","private EndpointGraph getEndointGraph(Job job,GProtocolName fullname,Role role) throws ScribbleException {
  JobContext jcontext=job.getContext();
  GProtocolDecl gpd=(GProtocolDecl)jcontext.getMainModule().getProtocolDecl(fullname.getSimpleName());
  if (gpd == null || !gpd.header.roledecls.getRoles().contains(role)) {
    throw new RuntimeException(""String_Node_Str"" + Arrays.toString(this.args.get(ArgFlag.FSM)));
  }
  EndpointGraph fsm=this.args.containsKey(ArgFlag.MIN_EFSM) ? jcontext.getMinimisedEndpointGraph(fullname,role) : jcontext.getEndpointGraph(fullname,role);
  if (fsm == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname);
  }
  System.out.println(""String_Node_Str"" + fsm.init.unfairClone().toDot());
  return fsm;
}",0.9346314325452016
2338,"public static <A extends ModelAction<K>,S extends ModelState<A,S,K>,K extends ProtocolKind>S getTerminal(S start){
  Set<S> terms=getAllReachable(start).stream().filter((s) -> s.isTerminal()).collect(Collectors.toSet());
  if (terms.size() > 1) {
    throw new RuntimeException(""String_Node_Str"" + terms);
  }
  return (terms.isEmpty()) ? null : terms.iterator().next();
}","public static <A extends ModelAction<K>,S extends ModelState<A,S,K>,K extends ProtocolKind>S getTerminal(S start){
  if (start.isTerminal()) {
    return start;
  }
  Set<S> terms=getAllReachable(start).stream().filter((s) -> s.isTerminal()).collect(Collectors.toSet());
  if (terms.size() > 1) {
    throw new RuntimeException(""String_Node_Str"" + terms);
  }
  return (terms.isEmpty()) ? null : terms.iterator().next();
}",0.9370277078085644
2339,"public static <A extends ModelAction<K>,S extends ModelState<A,S,K>,K extends ProtocolKind>Set<A> getAllReachableActions(S start){
  Set<S> all=getAllReachable(start);
  Set<A> as=new HashSet<>();
  for (  S s : all) {
    as.addAll(s.getAllTakeable());
  }
  return as;
}","public static <A extends ModelAction<K>,S extends ModelState<A,S,K>,K extends ProtocolKind>Set<A> getAllReachableActions(S start){
  Set<S> all=new HashSet<>();
  all.add(start);
  all.addAll(getAllReachable(start));
  Set<A> as=new HashSet<>();
  for (  S s : all) {
    as.addAll(s.getAllTakeable());
  }
  return as;
}",0.9173693086003372
2340,"public static <A extends ModelAction<K>,S extends ModelState<A,S,K>,K extends ProtocolKind>Set<S> getAllReachable(S start){
  Map<Integer,S> all=new HashMap<>();
  Map<Integer,S> todo=new LinkedHashMap<>();
  todo.put(start.id,start);
  while (!todo.isEmpty()) {
    Iterator<S> i=todo.values().iterator();
    S next=i.next();
    todo.remove(next.id);
    if (all.containsKey(next.id)) {
      continue;
    }
    all.put(next.id,next);
    for (    S s : next.getSuccessors()) {
      if (!all.containsKey(s.id) && !todo.containsKey(s.id)) {
        todo.put(s.id,s);
      }
    }
  }
  return new HashSet<>(all.values());
}","public static <A extends ModelAction<K>,S extends ModelState<A,S,K>,K extends ProtocolKind>Set<S> getAllReachable(S start){
  Map<Integer,S> all=new HashMap<>();
  Map<Integer,S> todo=new LinkedHashMap<>();
  todo.put(start.id,start);
  while (!todo.isEmpty()) {
    Iterator<S> i=todo.values().iterator();
    S next=i.next();
    todo.remove(next.id);
    System.out.println(""String_Node_Str"" + next.getAllTakeable() + ""String_Node_Str""+ next.getSuccessors());
    for (    S s : next.getSuccessors()) {
      System.out.println(""String_Node_Str"" + all + ""String_Node_Str""+ s);
      if (!all.containsKey(s.id)) {
        all.put(s.id,s);
{
          todo.put(s.id,s);
        }
      }
    }
  }
  return new HashSet<>(all.values());
}",0.6617862371888726
2341,"public void run() throws ScribbleException {
  try {
    Job job=newJob(newMainContext());
    ScribbleException fail=null;
    try {
      job.checkWellFormedness();
    }
 catch (    ScribbleException x) {
      fail=x;
    }
    try {
      if (this.args.containsKey(ArgFlag.PROJECT)) {
        outputProjections(job);
      }
      if (this.args.containsKey(ArgFlag.FSM)) {
        outputGraph(job);
      }
      if (this.args.containsKey(ArgFlag.FSM_DOT)) {
        drawGraph(job);
      }
      if (this.args.containsKey(ArgFlag.SESS_API)) {
        outputSessionApi(job);
      }
      if (this.args.containsKey(ArgFlag.SCHAN_API)) {
        outputStateChannelApi(job);
      }
      if (this.args.containsKey(ArgFlag.EP_API)) {
        outputEndpointApi(job);
      }
      if (this.args.containsKey(ArgFlag.GLOBAL_MODEL) || this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
        if (job.useOldWf) {
          throw new RuntimeException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
          drawGlobalModel(job);
        }
 else {
          outputGlobalModel(job);
        }
      }
    }
 catch (    ScribbleException x) {
      if (fail == null) {
        fail=x;
      }
    }
    if (fail != null) {
      throw fail;
    }
  }
 catch (  ScribbleException e) {
    if (this.args.containsKey(ArgFlag.JUNIT) || this.args.containsKey(ArgFlag.VERBOSE)) {
      throw e;
    }
 else {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
}","public void run() throws ScribbleException {
  try {
    Job job=newJob(newMainContext());
    ScribbleException fail=null;
    try {
      job.checkWellFormedness();
    }
 catch (    ScribbleException x) {
      fail=x;
    }
    try {
      if (this.args.containsKey(ArgFlag.PROJECT)) {
        outputProjections(job);
      }
      if (this.args.containsKey(ArgFlag.FSM)) {
        outputGraph(job);
      }
      if (this.args.containsKey(ArgFlag.FSM_DOT)) {
        drawGraph(job);
      }
      if (this.args.containsKey(ArgFlag.SESS_API)) {
        outputSessionApi(job);
      }
      if (this.args.containsKey(ArgFlag.SCHAN_API)) {
        outputStateChannelApi(job);
      }
      if (this.args.containsKey(ArgFlag.EP_API)) {
        outputEndpointApi(job);
      }
      if (this.args.containsKey(ArgFlag.GLOBAL_MODEL) || this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
        if (job.useOldWf) {
          throw new RuntimeException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL)) {
          outputGlobalModel(job);
        }
        if (this.args.containsKey(ArgFlag.GLOBAL_MODEL_DOT)) {
          drawGlobalModel(job);
        }
      }
    }
 catch (    ScribbleException x) {
      if (fail == null) {
        fail=x;
      }
    }
    if (fail != null) {
      throw fail;
    }
  }
 catch (  ScribbleException e) {
    if (this.args.containsKey(ArgFlag.JUNIT) || this.args.containsKey(ArgFlag.VERBOSE)) {
      throw e;
    }
 else {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
}",0.952787084983247
2342,"@Override protected void addMethods(){
  final String ROLE_PARAM=""String_Node_Str"";
  final String MESSAGE_VAR=""String_Node_Str"";
  final String OPENUM_VAR=""String_Node_Str"";
  final String OP=MESSAGE_VAR + ""String_Node_Str"" + StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD;
  Module main=this.apigen.getMainModule();
  ClassBuilder caseclass=new CaseSocketGenerator(apigen,curr).generateType();
  String next=caseclass.getName();
  String enumClass=getBranchEnumClassName(this.apigen,this.curr);
  MethodBuilder mb=cb.newMethod(""String_Node_Str"");
  mb.setReturn(next);
  mb.addParameters(SessionApiGenerator.getRoleClassName(curr.getAcceptable().iterator().next().obj) + ""String_Node_Str"" + ROLE_PARAM);
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  Role peer=curr.getAcceptable().iterator().next().obj;
  mb.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  mb.addBodyLine(enumClass + ""String_Node_Str"" + OPENUM_VAR+ ""String_Node_Str"");
  boolean first=true;
  for (  IOAction a : curr.getAcceptable()) {
    mb.addBodyLine(((first) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + OP+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(1,OPENUM_VAR + ""String_Node_Str"" + enumClass+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(""String_Node_Str"");
    first=false;
  }
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.NEW+ ""String_Node_Str""+ next+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str""+ OPENUM_VAR+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  String handlerif=HandlerInterfaceGenerator.getHandlerInterfaceName(this.cb.getName());
  String handleif=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr);
  MethodBuilder mb2=this.cb.newMethod(""String_Node_Str"");
  mb2.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb2.addParameters(handlerif + ""String_Node_Str"");
  mb2.setReturn(JavaBuilder.VOID);
  mb2.addModifiers(JavaBuilder.PUBLIC);
  mb2.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  first=true;
  handleif+=""String_Node_Str"";
  for (  IOAction a : this.curr.getAcceptable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
    if (first) {
      first=false;
    }
 else {
      handleif+=""String_Node_Str"";
    }
    EndpointState succ=this.curr.accept(a);
    if (succ.isTerminal()) {
      handleif+=ScribSocketGenerator.GENERATED_ENDSOCKET_NAME;
    }
 else {
      handleif+=this.apigen.getSocketClassName(succ);
    }
  }
  handleif+=""String_Node_Str"";
  mb2.addBodyLine(""String_Node_Str"" + handleif + ""String_Node_Str"");
  MethodBuilder mb3=this.cb.newMethod(""String_Node_Str"");
  mb3.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb3.addParameters(handleif + ""String_Node_Str"");
  mb3.setReturn(JavaBuilder.VOID);
  mb3.addModifiers(JavaBuilder.PUBLIC);
  mb3.addAnnotations(""String_Node_Str"");
  mb3.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb3.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getAcceptable()) {
    EndpointState succ=this.curr.accept(a);
    if (first) {
      first=false;
    }
 else {
      mb3.addBodyLine(""String_Node_Str"");
    }
    mb3.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb3.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb3.addBodyLine(1,ln);
    mb3.addBodyLine(""String_Node_Str"");
  }
  mb3.addBodyLine(""String_Node_Str"");
  mb3.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb3.addBodyLine(""String_Node_Str"");
  MethodBuilder mb4=this.cb.newMethod(""String_Node_Str"");
  mb4.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  String tmp=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr) + ""String_Node_Str"";
  tmp+=this.curr.getAcceptable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> SuccessorInterfaceGenerator.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
  mb4.addParameters(tmp + ""String_Node_Str"");
  mb4.setReturn(JavaBuilder.VOID);
  mb4.addModifiers(JavaBuilder.PUBLIC);
  mb4.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb4.addAnnotations(""String_Node_Str"");
  mb4.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getAcceptable()) {
    EndpointState succ=this.curr.accept(a);
    if (first) {
      first=false;
    }
 else {
      mb4.addBodyLine(""String_Node_Str"");
    }
    mb4.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb4.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb4.addBodyLine(1,ln);
    mb4.addBodyLine(""String_Node_Str"");
  }
  mb4.addBodyLine(""String_Node_Str"");
  mb4.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb4.addBodyLine(""String_Node_Str"");
  this.apigen.addTypeDecl(new HandlerInterfaceGenerator(this.apigen,this.cb,this.curr).generateType());
}","@Override protected void addMethods(){
  final String ROLE_PARAM=""String_Node_Str"";
  final String MESSAGE_VAR=""String_Node_Str"";
  final String OPENUM_VAR=""String_Node_Str"";
  final String OP=MESSAGE_VAR + ""String_Node_Str"" + StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD;
  Module main=this.apigen.getMainModule();
  ClassBuilder caseclass=new CaseSocketGenerator(apigen,curr).generateType();
  String next=caseclass.getName();
  String enumClass=getBranchEnumClassName(this.apigen,this.curr);
  MethodBuilder mb=cb.newMethod(""String_Node_Str"");
  mb.setReturn(next);
  mb.addParameters(SessionApiGenerator.getRoleClassName(curr.getTakeable().iterator().next().obj) + ""String_Node_Str"" + ROLE_PARAM);
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  Role peer=curr.getTakeable().iterator().next().obj;
  mb.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  mb.addBodyLine(enumClass + ""String_Node_Str"" + OPENUM_VAR+ ""String_Node_Str"");
  boolean first=true;
  for (  IOAction a : curr.getTakeable()) {
    mb.addBodyLine(((first) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + OP+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(1,OPENUM_VAR + ""String_Node_Str"" + enumClass+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"");
    mb.addBodyLine(""String_Node_Str"");
    first=false;
  }
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb.addBodyLine(""String_Node_Str"");
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.NEW+ ""String_Node_Str""+ next+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str""+ OPENUM_VAR+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  String handlerif=HandlerInterfaceGenerator.getHandlerInterfaceName(this.cb.getName());
  String handleif=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr);
  MethodBuilder mb2=this.cb.newMethod(""String_Node_Str"");
  mb2.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb2.addParameters(handlerif + ""String_Node_Str"");
  mb2.setReturn(JavaBuilder.VOID);
  mb2.addModifiers(JavaBuilder.PUBLIC);
  mb2.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  first=true;
  handleif+=""String_Node_Str"";
  for (  IOAction a : this.curr.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
    if (first) {
      first=false;
    }
 else {
      handleif+=""String_Node_Str"";
    }
    EndpointState succ=this.curr.take(a);
    if (succ.isTerminal()) {
      handleif+=ScribSocketGenerator.GENERATED_ENDSOCKET_NAME;
    }
 else {
      handleif+=this.apigen.getSocketClassName(succ);
    }
  }
  handleif+=""String_Node_Str"";
  mb2.addBodyLine(""String_Node_Str"" + handleif + ""String_Node_Str"");
  MethodBuilder mb3=this.cb.newMethod(""String_Node_Str"");
  mb3.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  mb3.addParameters(handleif + ""String_Node_Str"");
  mb3.setReturn(JavaBuilder.VOID);
  mb3.addModifiers(JavaBuilder.PUBLIC);
  mb3.addAnnotations(""String_Node_Str"");
  mb3.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb3.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    if (first) {
      first=false;
    }
 else {
      mb3.addBodyLine(""String_Node_Str"");
    }
    mb3.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb3.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb3.addBodyLine(1,ln);
    mb3.addBodyLine(""String_Node_Str"");
  }
  mb3.addBodyLine(""String_Node_Str"");
  mb3.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb3.addBodyLine(""String_Node_Str"");
  MethodBuilder mb4=this.cb.newMethod(""String_Node_Str"");
  mb4.addParameters(SessionApiGenerator.getRoleClassName(peer) + ""String_Node_Str"" + ROLE_PARAM);
  String tmp=HandleInterfaceGenerator.getHandleInterfaceName(this.apigen.getSelf(),this.curr) + ""String_Node_Str"";
  tmp+=this.curr.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> SuccessorInterfaceGenerator.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
  mb4.addParameters(tmp + ""String_Node_Str"");
  mb4.setReturn(JavaBuilder.VOID);
  mb4.addModifiers(JavaBuilder.PUBLIC);
  mb4.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  mb4.addAnnotations(""String_Node_Str"");
  mb4.addBodyLine(StateChannelApiGenerator.SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ JavaBuilder.SUPER+ ""String_Node_Str""+ getSessionApiRoleConstant(peer)+ ""String_Node_Str"");
  first=true;
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    if (first) {
      first=false;
    }
 else {
      mb4.addBodyLine(""String_Node_Str"");
    }
    mb4.addBodyLine(""String_Node_Str"" + MESSAGE_VAR + ""String_Node_Str""+ StateChannelApiGenerator.SCRIBMESSAGE_OP_FIELD+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid)+ ""String_Node_Str"");
    if (succ.isTerminal()) {
      mb4.addBodyLine(1,SCRIBSOCKET_SE_FIELD + ""String_Node_Str"");
    }
    String ln=""String_Node_Str"";
{
      ln+=JavaBuilder.NEW + ""String_Node_Str"" + (succ.isTerminal() ? ScribSocketGenerator.GENERATED_ENDSOCKET_NAME : this.apigen.getSocketClassName(succ))+ ""String_Node_Str""+ SCRIBSOCKET_SE_FIELD+ ""String_Node_Str"";
    }
    ln+=getSessionApiOpConstant(a.mid);
    if (a.mid.isOp()) {
      if (!a.payload.isEmpty()) {
        String buffSuper=JavaBuilder.NEW + ""String_Node_Str"" + BUF_CLASS+ ""String_Node_Str"";
        int i=0;
        for (        PayloadType<?> pt : a.payload.elems) {
          DataTypeDecl dtd=main.getDataTypeDecl((DataType)pt);
          ln+=""String_Node_Str"" + buffSuper + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str""+ i+++ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      ln+=""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ BUF_CLASS+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ RECEIVE_MESSAGE_PARAM+ ""String_Node_Str""+ SCRIBMESSAGE_PAYLOAD_FIELD+ ""String_Node_Str"";
    }
    ln+=""String_Node_Str"";
    mb4.addBodyLine(1,ln);
    mb4.addBodyLine(""String_Node_Str"");
  }
  mb4.addBodyLine(""String_Node_Str"");
  mb4.addBodyLine(1,""String_Node_Str"" + JavaBuilder.NEW + ""String_Node_Str""+ OP+ ""String_Node_Str"");
  mb4.addBodyLine(""String_Node_Str"");
  this.apigen.addTypeDecl(new HandlerInterfaceGenerator(this.apigen,this.cb,this.curr).generateType());
}",0.9904902071776294
2343,"@Override protected void addMethods(){
  String branchName=this.apigen.getSocketClassName(curr);
  String enumClassName=branchName + ""String_Node_Str"" + BranchSocketGenerator.getBranchEnumClassName(this.apigen,this.curr);
  FieldBuilder fb1=this.cb.newField(CASE_OP_FIELD);
  fb1.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.FINAL);
  fb1.setType(enumClassName);
  FieldBuilder fb2=this.cb.newField(CASE_MESSAGE_FIELD);
  fb2.addModifiers(JavaBuilder.PRIVATE,JavaBuilder.FINAL);
  fb2.setType(StateChannelApiGenerator.SCRIBMESSAGE_CLASS);
  for (  IOAction a : this.curr.getAcceptable()) {
    EndpointState succ=this.curr.accept(a);
    addReceiveMethod(this.cb,a,succ);
    addCaseReceiveMethod(this.cb,a,succ);
    if (!a.payload.isEmpty() || a.mid.isMessageSigName()) {
      addCaseReceiveDiscardMethod(this.cb,a,succ);
    }
  }
  Role self=this.apigen.getSelf();
  MethodBuilder mb=this.cb.newMethod(""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.setReturn(IOStateInterfaceGenerator.getIOStateInterfaceName(self,this.curr) + ""String_Node_Str"" + BranchInterfaceGenerator.getBranchInterfaceEnumName(self,this.curr));
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.THIS+ ""String_Node_Str""+ CASE_OP_FIELD+ ""String_Node_Str"");
  this.apigen.addTypeDecl(this.cb);
}","@Override protected void addMethods(){
  String branchName=this.apigen.getSocketClassName(curr);
  String enumClassName=branchName + ""String_Node_Str"" + BranchSocketGenerator.getBranchEnumClassName(this.apigen,this.curr);
  FieldBuilder fb1=this.cb.newField(CASE_OP_FIELD);
  fb1.addModifiers(JavaBuilder.PUBLIC,JavaBuilder.FINAL);
  fb1.setType(enumClassName);
  FieldBuilder fb2=this.cb.newField(CASE_MESSAGE_FIELD);
  fb2.addModifiers(JavaBuilder.PRIVATE,JavaBuilder.FINAL);
  fb2.setType(StateChannelApiGenerator.SCRIBMESSAGE_CLASS);
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    addReceiveMethod(this.cb,a,succ);
    addCaseReceiveMethod(this.cb,a,succ);
    if (!a.payload.isEmpty() || a.mid.isMessageSigName()) {
      addCaseReceiveDiscardMethod(this.cb,a,succ);
    }
  }
  Role self=this.apigen.getSelf();
  MethodBuilder mb=this.cb.newMethod(""String_Node_Str"");
  mb.addAnnotations(""String_Node_Str"");
  mb.addModifiers(JavaBuilder.PUBLIC);
  mb.setReturn(IOStateInterfaceGenerator.getIOStateInterfaceName(self,this.curr) + ""String_Node_Str"" + BranchInterfaceGenerator.getBranchInterfaceEnumName(self,this.curr));
  mb.addBodyLine(JavaBuilder.RETURN + ""String_Node_Str"" + JavaBuilder.THIS+ ""String_Node_Str""+ CASE_OP_FIELD+ ""String_Node_Str"");
  this.apigen.addTypeDecl(this.cb);
}",0.9798957557706628
2344,"@Override public InterfaceBuilder generateType(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  InterfaceBuilder ib=new InterfaceBuilder();
  ib.setPackage(SessionApiGenerator.getStateChannelPackageName(gpn,this.apigen.getSelf()));
  ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  ib.setName(getHandlerInterfaceName(this.parent.getName()));
  ib.addModifiers(InterfaceBuilder.PUBLIC);
  for (  IOAction a : this.curr.getAcceptable()) {
    EndpointState succ=this.curr.accept(a);
    String nextClass=this.apigen.getSocketClassName(succ);
    AbstractMethodBuilder mb3=ib.newAbstractMethod();
    mb3.addAnnotations(""String_Node_Str"");
    setHandleMethodHeaderWithoutParamTypes(this.apigen,mb3);
    if (succ.isTerminal()) {
      mb3.addParameters(ScribSocketGenerator.GENERATED_ENDSOCKET_NAME + ""String_Node_Str"");
    }
 else {
      mb3.addParameters(nextClass + ""String_Node_Str"");
    }
    addHandleMethodOpAndPayloadParams(this.apigen,a,mb3);
    if (this.curr.accept(a).isTerminal()) {
      ib.addImports(SessionApiGenerator.getEndpointApiRootPackageName(gpn) + ""String_Node_Str"");
      ib.addImports(SessionApiGenerator.getRolesPackageName(this.apigen.getGProtocolName()) + ""String_Node_Str"");
    }
  }
  return ib;
}","@Override public InterfaceBuilder generateType(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  InterfaceBuilder ib=new InterfaceBuilder();
  ib.setPackage(SessionApiGenerator.getStateChannelPackageName(gpn,this.apigen.getSelf()));
  ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  ib.setName(getHandlerInterfaceName(this.parent.getName()));
  ib.addModifiers(InterfaceBuilder.PUBLIC);
  for (  IOAction a : this.curr.getTakeable()) {
    EndpointState succ=this.curr.take(a);
    String nextClass=this.apigen.getSocketClassName(succ);
    AbstractMethodBuilder mb3=ib.newAbstractMethod();
    mb3.addAnnotations(""String_Node_Str"");
    setHandleMethodHeaderWithoutParamTypes(this.apigen,mb3);
    if (succ.isTerminal()) {
      mb3.addParameters(ScribSocketGenerator.GENERATED_ENDSOCKET_NAME + ""String_Node_Str"");
    }
 else {
      mb3.addParameters(nextClass + ""String_Node_Str"");
    }
    addHandleMethodOpAndPayloadParams(this.apigen,a,mb3);
    if (this.curr.take(a).isTerminal()) {
      ib.addImports(SessionApiGenerator.getEndpointApiRootPackageName(gpn) + ""String_Node_Str"");
      ib.addImports(SessionApiGenerator.getRolesPackageName(this.apigen.getGProtocolName()) + ""String_Node_Str"");
    }
  }
  return ib;
}",0.9881889763779528
2345,"@Override protected void addMethods(){
  IOAction a=curr.getAcceptable().iterator().next();
  EndpointState succ=curr.accept(a);
  ClassBuilder futureClass=new InputFutureGenerator(this.apigen,this.cb,a).generateType();
  this.apigen.addTypeDecl(futureClass);
  makeReceiveMethod(a,succ);
  makeAsyncMethod(a,succ,futureClass.getName());
  makeIsDoneMethod(a);
  makeAsyncDiscardMethod(a,succ,futureClass.getName());
}","@Override protected void addMethods(){
  IOAction a=curr.getTakeable().iterator().next();
  EndpointState succ=curr.take(a);
  ClassBuilder futureClass=new InputFutureGenerator(this.apigen,this.cb,a).generateType();
  this.apigen.addTypeDecl(futureClass);
  makeReceiveMethod(a,succ);
  makeAsyncMethod(a,succ,futureClass.getName());
  makeIsDoneMethod(a);
  makeAsyncDiscardMethod(a,succ,futureClass.getName());
}",0.9759615384615384
2346,"@Override protected void addMethods(){
  final String ROLE_PARAM=""String_Node_Str"";
  for (  IOAction a : curr.getAcceptable()) {
    EndpointState succ=curr.accept(a);
    MethodBuilder mb=this.cb.newMethod();
    setSendHeaderWithoutReturnType(apigen,a,mb);
    setNextSocketReturnType(this.apigen,mb,succ);
    if (a.mid.isOp()) {
      this.cb.addImports(getOpsPackageName() + ""String_Node_Str"");
    }
    if (a.mid.isOp()) {
      List<String> args=getSendPayloadArgs(a);
      String body=JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid);
      if (!a.payload.isEmpty()) {
        body+=""String_Node_Str"" + args.stream().collect(Collectors.joining(""String_Node_Str""));
      }
      body+=""String_Node_Str"";
      mb.addBodyLine(body);
    }
 else {
      final String MESSAGE_PARAM=""String_Node_Str"";
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ MESSAGE_PARAM+ ""String_Node_Str"");
    }
    addReturnNextSocket(mb,succ);
  }
}","@Override protected void addMethods(){
  final String ROLE_PARAM=""String_Node_Str"";
  for (  IOAction a : curr.getTakeable()) {
    EndpointState succ=curr.take(a);
    MethodBuilder mb=this.cb.newMethod();
    setSendHeaderWithoutReturnType(apigen,a,mb);
    setNextSocketReturnType(this.apigen,mb,succ);
    if (a.mid.isOp()) {
      this.cb.addImports(getOpsPackageName() + ""String_Node_Str"");
    }
    if (a.mid.isOp()) {
      List<String> args=getSendPayloadArgs(a);
      String body=JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ getSessionApiOpConstant(a.mid);
      if (!a.payload.isEmpty()) {
        body+=""String_Node_Str"" + args.stream().collect(Collectors.joining(""String_Node_Str""));
      }
      body+=""String_Node_Str"";
      mb.addBodyLine(body);
    }
 else {
      final String MESSAGE_PARAM=""String_Node_Str"";
      mb.addBodyLine(JavaBuilder.SUPER + ""String_Node_Str"" + ROLE_PARAM+ ""String_Node_Str""+ MESSAGE_PARAM+ ""String_Node_Str"");
    }
    addReturnNextSocket(mb,succ);
  }
}",0.9903100775193798
2347,"private ClassBuilder constructClass(EndpointState curr){
  Set<IOAction> as=curr.getAcceptable();
  IOAction a=as.iterator().next();
  if (a instanceof Send) {
    return new SendSocketGenerator(this,curr).generateType();
  }
 else   if (a instanceof Receive) {
    return (as.size() > 1) ? new BranchSocketGenerator(this,curr).generateType() : new ReceiveSocketGenerator(this,curr).generateType();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + curr);
  }
}","private ClassBuilder constructClass(EndpointState curr){
  Set<IOAction> as=curr.getTakeable();
  IOAction a=as.iterator().next();
  if (a instanceof Send) {
    return new SendSocketGenerator(this,curr).generateType();
  }
 else   if (a instanceof Receive) {
    return (as.size() > 1) ? new BranchSocketGenerator(this,curr).generateType() : new ReceiveSocketGenerator(this,curr).generateType();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + curr);
  }
}",0.9894291754756872
2348,"protected void addBranchEnum(){
  Role self=this.apigen.getSelf();
  EnumBuilder eb=this.ib.newMemberEnum(getBranchInterfaceEnumName(self,this.curr));
  eb.addModifiers(JavaBuilder.PUBLIC);
  eb.addInterfaces(ScribSocketGenerator.OPENUM_INTERFACE);
  this.curr.getAcceptable().stream().forEach((a) -> eb.addValues(SessionApiGenerator.getOpClassName(a.mid)));
}","protected void addBranchEnum(){
  Role self=this.apigen.getSelf();
  EnumBuilder eb=this.ib.newMemberEnum(getBranchInterfaceEnumName(self,this.curr));
  eb.addModifiers(JavaBuilder.PUBLIC);
  eb.addInterfaces(ScribSocketGenerator.OPENUM_INTERFACE);
  this.curr.getTakeable().stream().forEach((a) -> eb.addValues(SessionApiGenerator.getOpClassName(a.mid)));
}",0.9860724233983288
2349,"protected void addBranchMethods(){
  Role self=this.apigen.getSelf();
  Set<IOAction> as=this.curr.getAcceptable();
  AbstractMethodBuilder bra=this.ib.newAbstractMethod(""String_Node_Str"");
  String ret=CaseInterfaceGenerator.getCasesInterfaceName(self,this.curr) + ""String_Node_Str"" + IntStream.range(1,as.size() + 1).mapToObj((i) -> ""String_Node_Str"" + i).collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
  bra.setReturn(ret);
  bra.addParameters(SessionApiGenerator.getRoleClassName(as.iterator().next().obj) + ""String_Node_Str"");
  bra.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  AbstractMethodBuilder bra2=this.ib.newAbstractMethod(""String_Node_Str"");
  bra2.setReturn(JavaBuilder.VOID);
  bra2.addParameters(SessionApiGenerator.getRoleClassName(as.iterator().next().obj) + ""String_Node_Str"");
  String next=HandleInterfaceGenerator.getHandleInterfaceName(self,this.curr) + ""String_Node_Str"" + IntStream.range(1,as.size() + 1).mapToObj((i) -> ""String_Node_Str"" + i).collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
  bra2.addParameters(next + ""String_Node_Str"");
  bra2.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  AbstractMethodBuilder bra3=this.ib.newAbstractMethod(""String_Node_Str"");
  bra3.setReturn(JavaBuilder.VOID);
  bra3.addParameters(SessionApiGenerator.getRoleClassName(as.iterator().next().obj) + ""String_Node_Str"");
  String handle=HandleInterfaceGenerator.getHandleInterfaceName(self,this.curr) + ""String_Node_Str"" + as.stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> SuccessorInterfaceGenerator.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
  bra3.addParameters(handle + ""String_Node_Str"");
  bra3.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
}","protected void addBranchMethods(){
  Role self=this.apigen.getSelf();
  Set<IOAction> as=this.curr.getTakeable();
  AbstractMethodBuilder bra=this.ib.newAbstractMethod(""String_Node_Str"");
  String ret=CaseInterfaceGenerator.getCasesInterfaceName(self,this.curr) + ""String_Node_Str"" + IntStream.range(1,as.size() + 1).mapToObj((i) -> ""String_Node_Str"" + i).collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
  bra.setReturn(ret);
  bra.addParameters(SessionApiGenerator.getRoleClassName(as.iterator().next().obj) + ""String_Node_Str"");
  bra.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  AbstractMethodBuilder bra2=this.ib.newAbstractMethod(""String_Node_Str"");
  bra2.setReturn(JavaBuilder.VOID);
  bra2.addParameters(SessionApiGenerator.getRoleClassName(as.iterator().next().obj) + ""String_Node_Str"");
  String next=HandleInterfaceGenerator.getHandleInterfaceName(self,this.curr) + ""String_Node_Str"" + IntStream.range(1,as.size() + 1).mapToObj((i) -> ""String_Node_Str"" + i).collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
  bra2.addParameters(next + ""String_Node_Str"");
  bra2.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
  AbstractMethodBuilder bra3=this.ib.newAbstractMethod(""String_Node_Str"");
  bra3.setReturn(JavaBuilder.VOID);
  bra3.addParameters(SessionApiGenerator.getRoleClassName(as.iterator().next().obj) + ""String_Node_Str"");
  String handle=HandleInterfaceGenerator.getHandleInterfaceName(self,this.curr) + ""String_Node_Str"" + as.stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> SuccessorInterfaceGenerator.getSuccessorInterfaceName(a)).collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
  bra3.addParameters(handle + ""String_Node_Str"");
  bra3.addExceptions(StateChannelApiGenerator.SCRIBBLERUNTIMEEXCEPTION_CLASS,""String_Node_Str"",""String_Node_Str"");
}",0.9974632166412988
2350,"@Override protected void addSuccessorParamsAndActionInterfaces(){
  int i=1;
  for (  IOAction a : this.curr.getAcceptable().stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    this.ib.addParameters(""String_Node_Str"" + i + ""String_Node_Str""+ SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
    i++;
  }
}","@Override protected void addSuccessorParamsAndActionInterfaces(){
  int i=1;
  for (  IOAction a : this.curr.getTakeable().stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    this.ib.addParameters(""String_Node_Str"" + i + ""String_Node_Str""+ SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
    i++;
  }
}",0.9850746268656716
2351,"protected void addCaseReceiveDiscardMethods(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  Set<IOAction> as=this.curr.getAcceptable();
  int i=1;
  this.ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  for (  IOAction a : as.stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    MethodBuilder mb=this.ib.newAbstractMethod();
    CaseSocketGenerator.setCaseReceiveDiscardHeaderWithoutReturnType(this.apigen,a,mb);
    EndpointState succ=this.curr.accept(a);
    if (succ.isTerminal()) {
      ScribSocketGenerator.setNextSocketReturnType(this.apigen,mb,succ);
    }
 else {
      mb.setReturn(""String_Node_Str"" + i);
    }
    i++;
  }
}","protected void addCaseReceiveDiscardMethods(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  Set<IOAction> as=this.curr.getTakeable();
  int i=1;
  this.ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  for (  IOAction a : as.stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    MethodBuilder mb=this.ib.newAbstractMethod();
    CaseSocketGenerator.setCaseReceiveDiscardHeaderWithoutReturnType(this.apigen,a,mb);
    EndpointState succ=this.curr.take(a);
    if (succ.isTerminal()) {
      ScribSocketGenerator.setNextSocketReturnType(this.apigen,mb,succ);
    }
 else {
      mb.setReturn(""String_Node_Str"" + i);
    }
    i++;
  }
}",0.9856115107913668
2352,"protected static String getCasesInterfaceName(Role self,EndpointState s){
  return ""String_Node_Str"" + self + ""String_Node_Str""+ s.getAcceptable().stream().sorted(IOACTION_COMPARATOR).map((a) -> ActionInterfaceGenerator.getActionString(a)).collect(Collectors.joining(""String_Node_Str""));
}","protected static String getCasesInterfaceName(Role self,EndpointState s){
  return ""String_Node_Str"" + self + ""String_Node_Str""+ s.getTakeable().stream().sorted(IOACTION_COMPARATOR).map((a) -> ActionInterfaceGenerator.getActionString(a)).collect(Collectors.joining(""String_Node_Str""));
}",0.9826388888888888
2353,"public static String getHandleInterfaceName(Role self,EndpointState s){
  return ""String_Node_Str"" + self + ""String_Node_Str""+ s.getAcceptable().stream().sorted(IOACTION_COMPARATOR).map((a) -> ActionInterfaceGenerator.getActionString(a)).collect(Collectors.joining(""String_Node_Str""));
}","public static String getHandleInterfaceName(Role self,EndpointState s){
  return ""String_Node_Str"" + self + ""String_Node_Str""+ s.getTakeable().stream().sorted(IOACTION_COMPARATOR).map((a) -> ActionInterfaceGenerator.getActionString(a)).collect(Collectors.joining(""String_Node_Str""));
}",0.9825174825174824
2354,"protected void addHandleMethods(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  Set<IOAction> as=this.curr.getAcceptable();
  this.ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  int i=1;
  for (  IOAction a : as.stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    MethodBuilder mb=this.ib.newAbstractMethod();
    HandlerInterfaceGenerator.setHandleMethodHeaderWithoutParamTypes(this.apigen,mb);
    mb.addParameters(""String_Node_Str"" + i++ + ""String_Node_Str"");
    HandlerInterfaceGenerator.addHandleMethodOpAndPayloadParams(this.apigen,a,mb);
  }
}","protected void addHandleMethods(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  Set<IOAction> as=this.curr.getTakeable();
  this.ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  int i=1;
  for (  IOAction a : as.stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    MethodBuilder mb=this.ib.newAbstractMethod();
    HandlerInterfaceGenerator.setHandleMethodHeaderWithoutParamTypes(this.apigen,mb);
    mb.addParameters(""String_Node_Str"" + i++ + ""String_Node_Str"");
    HandlerInterfaceGenerator.addHandleMethodOpAndPayloadParams(this.apigen,a,mb);
  }
}",0.99185667752443
2355,"@Override protected void addSuccessorParamsAndActionInterfaces(){
  int i=1;
  for (  IOAction a : this.curr.getAcceptable().stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    this.ib.addParameters(""String_Node_Str"" + i + ""String_Node_Str""+ SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
    this.ib.addInterfaces(this.caseActions.get(a).getName() + ""String_Node_Str"" + i+ ""String_Node_Str"");
    i++;
  }
}","@Override protected void addSuccessorParamsAndActionInterfaces(){
  int i=1;
  for (  IOAction a : this.curr.getTakeable().stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    this.ib.addParameters(""String_Node_Str"" + i + ""String_Node_Str""+ SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
    this.ib.addInterfaces(this.caseActions.get(a).getName() + ""String_Node_Str"" + i+ ""String_Node_Str"");
    i++;
  }
}",0.9886363636363636
2356,"protected static void setHandleMethodSuccessorParam(IOInterfacesGenerator iogen,Role self,EndpointState succ,MethodBuilder mb,List<IOAction> as,Map<IOAction,Integer> count){
  if (succ.isTerminal()) {
    mb.addParameters(ScribSocketGenerator.ENDSOCKET_CLASS + ""String_Node_Str"");
  }
 else {
    InterfaceBuilder next=iogen.getIOStateInterface(IOStateInterfaceGenerator.getIOStateInterfaceName(self,succ));
    String ret=next.getName() + ""String_Node_Str"";
    boolean first=true;
    for (    IOAction a : succ.getAcceptable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
      int offset;
      if (!count.containsKey(a)) {
        offset=0;
        count.put(a,0);
      }
 else {
        offset=count.get(a) + 1;
        count.put(a,offset);
      }
      if (first) {
        first=false;
      }
 else {
        ret+=""String_Node_Str"";
      }
      ret+=""String_Node_Str"" + (as.indexOf(a) + 1 + offset);
    }
    ret+=""String_Node_Str"";
    mb.addParameters(ret + ""String_Node_Str"");
  }
}","protected static void setHandleMethodSuccessorParam(IOInterfacesGenerator iogen,Role self,EndpointState succ,MethodBuilder mb,List<IOAction> as,Map<IOAction,Integer> count){
  if (succ.isTerminal()) {
    mb.addParameters(ScribSocketGenerator.ENDSOCKET_CLASS + ""String_Node_Str"");
  }
 else {
    InterfaceBuilder next=iogen.getIOStateInterface(IOStateInterfaceGenerator.getIOStateInterfaceName(self,succ));
    String ret=next.getName() + ""String_Node_Str"";
    boolean first=true;
    for (    IOAction a : succ.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
      int offset;
      if (!count.containsKey(a)) {
        offset=0;
        count.put(a,0);
      }
 else {
        offset=count.get(a) + 1;
        count.put(a,offset);
      }
      if (first) {
        first=false;
      }
 else {
        ret+=""String_Node_Str"";
      }
      ret+=""String_Node_Str"" + (as.indexOf(a) + 1 + offset);
    }
    ret+=""String_Node_Str"";
    mb.addParameters(ret + ""String_Node_Str"");
  }
}",0.9952290076335878
2357,"private void generateIOStateInterfacesFirstPass(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  String key=IOStateInterfaceGenerator.getIOStateInterfaceName(getSelf(),s);
  if (!this.iostates.containsKey(key)) {
    IOStateInterfaceGenerator ifgen=null;
switch (s.getStateKind()) {
case OUTPUT:
      ifgen=new SelectInterfaceGenerator(this.apigen,this.actions,s);
    break;
case UNARY_INPUT:
  ifgen=new ReceiveInterfaceGenerator(this.apigen,this.actions,s);
break;
case POLY_INPUT:
InterfaceBuilder cases=new CaseInterfaceGenerator(this.apigen,this.actions,s).generateType();
this.iostates.put(cases.getName(),cases);
ifgen=new BranchInterfaceGenerator(this.apigen,this.actions,s);
break;
case TERMINAL:
default :
throw new RuntimeException(""String_Node_Str"");
}
this.iostates.put(key,ifgen.generateType());
}
visited.add(s);
for (IOAction a : s.getAcceptable()) {
generateIOStateInterfacesFirstPass(visited,s.accept(a));
}
}","private void generateIOStateInterfacesFirstPass(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  String key=IOStateInterfaceGenerator.getIOStateInterfaceName(getSelf(),s);
  if (!this.iostates.containsKey(key)) {
    IOStateInterfaceGenerator ifgen=null;
switch (s.getStateKind()) {
case OUTPUT:
      ifgen=new SelectInterfaceGenerator(this.apigen,this.actions,s);
    break;
case UNARY_INPUT:
  ifgen=new ReceiveInterfaceGenerator(this.apigen,this.actions,s);
break;
case POLY_INPUT:
InterfaceBuilder cases=new CaseInterfaceGenerator(this.apigen,this.actions,s).generateType();
this.iostates.put(cases.getName(),cases);
ifgen=new BranchInterfaceGenerator(this.apigen,this.actions,s);
break;
case TERMINAL:
default :
throw new RuntimeException(""String_Node_Str"");
}
this.iostates.put(key,ifgen.generateType());
}
visited.add(s);
for (IOAction a : s.getTakeable()) {
generateIOStateInterfacesFirstPass(visited,s.take(a));
}
}",0.9898785425101214
2358,"private void generateActionAndSuccessorInterfacesAndCollectPreActions(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  visited.add(s);
  Set<IOAction> as=s.getAcceptable();
  for (  IOAction a : as.stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
    if (!this.actions.containsKey(a)) {
      this.actions.put(a,new ActionInterfaceGenerator(this.apigen,s,a).generateType());
      this.succs.put(a,new SuccessorInterfaceGenerator(this.apigen,s,a).generateType());
      if (s.getStateKind() == Kind.POLY_INPUT) {
        InterfaceBuilder ib=new InterfaceBuilder();
        ib.setName(""String_Node_Str"" + ActionInterfaceGenerator.getActionString(a));
        ib.setPackage(IOInterfacesGenerator.getIOInterfacePackageName(this.apigen.getGProtocolName(),this.apigen.getSelf()));
        ib.addImports(""String_Node_Str"");
        ib.addImports(SessionApiGenerator.getEndpointApiRootPackageName(this.gpn) + ""String_Node_Str"");
        ib.addImports(SessionApiGenerator.getRolesPackageName(this.gpn) + ""String_Node_Str"");
        ib.addImports(SessionApiGenerator.getOpsPackageName(this.gpn) + ""String_Node_Str"");
        ib.addModifiers(JavaBuilder.PUBLIC);
        ib.addParameters(""String_Node_Str"" + SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
        AbstractMethodBuilder mb=ib.newAbstractMethod();
        HandlerInterfaceGenerator.setHandleMethodHeaderWithoutParamTypes(this.apigen,mb);
        mb.addParameters(""String_Node_Str"");
        HandlerInterfaceGenerator.addHandleMethodOpAndPayloadParams(this.apigen,a,mb);
        this.caseActions.put(a,ib);
      }
    }
    EndpointState succ=s.accept(a);
    putPreAction(succ,a);
    if (s.getStateKind() == Kind.POLY_INPUT) {
      putBranchPostAction(s,a);
    }
    generateActionAndSuccessorInterfacesAndCollectPreActions(visited,succ);
  }
}","private void generateActionAndSuccessorInterfacesAndCollectPreActions(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  visited.add(s);
  Set<IOAction> as=s.getTakeable();
  for (  IOAction a : as.stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
    if (!this.actions.containsKey(a)) {
      this.actions.put(a,new ActionInterfaceGenerator(this.apigen,s,a).generateType());
      this.succs.put(a,new SuccessorInterfaceGenerator(this.apigen,s,a).generateType());
      if (s.getStateKind() == Kind.POLY_INPUT) {
        InterfaceBuilder ib=new InterfaceBuilder();
        ib.setName(""String_Node_Str"" + ActionInterfaceGenerator.getActionString(a));
        ib.setPackage(IOInterfacesGenerator.getIOInterfacePackageName(this.apigen.getGProtocolName(),this.apigen.getSelf()));
        ib.addImports(""String_Node_Str"");
        ib.addImports(SessionApiGenerator.getEndpointApiRootPackageName(this.gpn) + ""String_Node_Str"");
        ib.addImports(SessionApiGenerator.getRolesPackageName(this.gpn) + ""String_Node_Str"");
        ib.addImports(SessionApiGenerator.getOpsPackageName(this.gpn) + ""String_Node_Str"");
        ib.addModifiers(JavaBuilder.PUBLIC);
        ib.addParameters(""String_Node_Str"" + SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
        AbstractMethodBuilder mb=ib.newAbstractMethod();
        HandlerInterfaceGenerator.setHandleMethodHeaderWithoutParamTypes(this.apigen,mb);
        mb.addParameters(""String_Node_Str"");
        HandlerInterfaceGenerator.addHandleMethodOpAndPayloadParams(this.apigen,a,mb);
        this.caseActions.put(a,ib);
      }
    }
    EndpointState succ=s.take(a);
    putPreAction(succ,a);
    if (s.getStateKind() == Kind.POLY_INPUT) {
      putBranchPostAction(s,a);
    }
    generateActionAndSuccessorInterfacesAndCollectPreActions(visited,succ);
  }
}",0.9947889525794684
2359,"private String getConcreteSuccessorParameters(EndpointState s){
  return ""String_Node_Str"" + s.getAcceptable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> this.getSuccName.apply(s.accept(a))).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
}","private String getConcreteSuccessorParameters(EndpointState s){
  return ""String_Node_Str"" + s.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).map((a) -> this.getSuccName.apply(s.take(a))).collect(Collectors.joining(""String_Node_Str"")) + ""String_Node_Str"";
}",0.9653979238754326
2360,"private void generateHandleInterfaces(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  if (s.getStateKind() == Kind.POLY_INPUT) {
    String key=HandleInterfaceGenerator.getHandleInterfaceName(getSelf(),s);
    if (!this.iostates.containsKey(key)) {
      IOStateInterfaceGenerator ifgen=new HandleInterfaceGenerator(this,this.actions,s,this.caseActions);
      this.iostates.put(key,ifgen.generateType());
    }
  }
  visited.add(s);
  for (  IOAction a : s.getAcceptable()) {
    generateHandleInterfaces(visited,s.accept(a));
  }
}","private void generateHandleInterfaces(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  if (s.getStateKind() == Kind.POLY_INPUT) {
    String key=HandleInterfaceGenerator.getHandleInterfaceName(getSelf(),s);
    if (!this.iostates.containsKey(key)) {
      IOStateInterfaceGenerator ifgen=new HandleInterfaceGenerator(this,this.actions,s,this.caseActions);
      this.iostates.put(key,ifgen.generateType());
    }
  }
  visited.add(s);
  for (  IOAction a : s.getTakeable()) {
    generateHandleInterfaces(visited,s.take(a));
  }
}",0.9831365935919056
2361,"private void generateIOStateInterfacesSecondPass(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  Set<InterfaceBuilder> succifs=this.preds.get(s);
  if (succifs != null) {
    InterfaceBuilder iostate=this.iostates.get(IOStateInterfaceGenerator.getIOStateInterfaceName(getSelf(),s));
    if (this.SUBTYPES) {
      String name=iostate.getName();
      if (name.startsWith(""String_Node_Str"")) {
        List<String> ifs=this.iostates.get(name).getInterfaces();
        List<String> outs=ifs.stream().filter((i) -> i.startsWith(""String_Node_Str"")).map((o) -> (o=o.substring(0,o.indexOf(""String_Node_Str""))).substring(o.indexOf(""String_Node_Str"") + 1,o.length())).sorted((s1,s2) -> s1.compareTo(s2)).collect(Collectors.toList());
        addSupertypeInterfaceToMethods(s,outs,""String_Node_Str"",""String_Node_Str"");
      }
    }
    for (    InterfaceBuilder pred : succifs) {
      iostate.addInterfaces(pred.getName());
      String ret=iostate.getName() + ""String_Node_Str"" + IntStream.range(0,iostate.getParameters().size()).mapToObj((i) -> ""String_Node_Str"").collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
      addToCastMethod(pred,ret);
      for (      MethodBuilder cast : pred.getDefaultMethods()) {
        MethodBuilder mb=addToCastMethod(iostate,cast.getReturn());
        if (mb != null) {
          mb.addAnnotations(""String_Node_Str"");
        }
      }
    }
  }
  visited.add(s);
  for (  IOAction a : s.getAcceptable()) {
    generateIOStateInterfacesSecondPass(visited,s.accept(a));
  }
}","private void generateIOStateInterfacesSecondPass(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  Set<InterfaceBuilder> succifs=this.preds.get(s);
  if (succifs != null) {
    InterfaceBuilder iostate=this.iostates.get(IOStateInterfaceGenerator.getIOStateInterfaceName(getSelf(),s));
    if (this.SUBTYPES) {
      String name=iostate.getName();
      if (name.startsWith(""String_Node_Str"")) {
        List<String> ifs=this.iostates.get(name).getInterfaces();
        List<String> outs=ifs.stream().filter((i) -> i.startsWith(""String_Node_Str"")).map((o) -> (o=o.substring(0,o.indexOf(""String_Node_Str""))).substring(o.indexOf(""String_Node_Str"") + 1,o.length())).sorted((s1,s2) -> s1.compareTo(s2)).collect(Collectors.toList());
        addSupertypeInterfaceToMethods(s,outs,""String_Node_Str"",""String_Node_Str"");
      }
    }
    for (    InterfaceBuilder pred : succifs) {
      iostate.addInterfaces(pred.getName());
      String ret=iostate.getName() + ""String_Node_Str"" + IntStream.range(0,iostate.getParameters().size()).mapToObj((i) -> ""String_Node_Str"").collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
      addToCastMethod(pred,ret);
      for (      MethodBuilder cast : pred.getDefaultMethods()) {
        MethodBuilder mb=addToCastMethod(iostate,cast.getReturn());
        if (mb != null) {
          mb.addAnnotations(""String_Node_Str"");
        }
      }
    }
  }
  visited.add(s);
  for (  IOAction a : s.getTakeable()) {
    generateIOStateInterfacesSecondPass(visited,s.take(a));
  }
}",0.9936828806064436
2362,"private void generateHandleInterfacesSecondPass(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  if (s.getStateKind() == Kind.POLY_INPUT) {
    GProtocolName gpn=this.apigen.getGProtocolName();
    Role self=this.apigen.getSelf();
    String key=HandleInterfaceGenerator.getHandleInterfaceName(self,s);
    List<IOAction> succifs=this.branchSuccs.get(key);
    if (succifs != null) {
      InterfaceBuilder handleif=this.iostates.get(key);
      List<IOAction> tmp=this.branchSuccs.get(key);
      Map<IOAction,Integer> count=new HashMap<>();
    }
  }
  visited.add(s);
  for (  IOAction a : s.getAcceptable()) {
    generateHandleInterfacesSecondPass(visited,s.accept(a));
  }
}","private void generateHandleInterfacesSecondPass(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  if (s.getStateKind() == Kind.POLY_INPUT) {
    GProtocolName gpn=this.apigen.getGProtocolName();
    Role self=this.apigen.getSelf();
    String key=HandleInterfaceGenerator.getHandleInterfaceName(self,s);
    List<IOAction> succifs=this.branchSuccs.get(key);
    if (succifs != null) {
      InterfaceBuilder handleif=this.iostates.get(key);
      List<IOAction> tmp=this.branchSuccs.get(key);
      Map<IOAction,Integer> count=new HashMap<>();
    }
  }
  visited.add(s);
  for (  IOAction a : s.getTakeable()) {
    generateHandleInterfacesSecondPass(visited,s.take(a));
  }
}",0.986468200270636
2363,"private void addIOStateInterfacesToStateChannels(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  Role self=getSelf();
  String scname=this.apigen.getSocketClassName(s);
  String ioname=IOStateInterfaceGenerator.getIOStateInterfaceName(self,s);
  TypeBuilder tb=this.apigen.getType(scname);
  tb.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
  tb.addInterfaces(ioname + getConcreteSuccessorParameters(s));
  InterfaceBuilder iostate=this.iostates.get(ioname);
  MethodBuilder mb=addToCastMethod(iostate,scname);
  if (mb != null) {
    iostate.addImports(SessionApiGenerator.getStateChannelPackageName(this.gpn,self) + ""String_Node_Str"");
  }
  if (s.getStateKind() == Kind.POLY_INPUT) {
    TypeBuilder cases=this.apigen.getType(CaseSocketGenerator.getCaseSocketName(this.apigen.getSocketClassName(s)));
    cases.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
    cases.addInterfaces(CaseInterfaceGenerator.getCasesInterfaceName(self,s) + getConcreteSuccessorParameters(s));
    InterfaceBuilder handler=(InterfaceBuilder)this.apigen.getType(HandlerInterfaceGenerator.getHandlerInterfaceName(this.apigen.getSocketClassName(s)));
    handler.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
    String tmp=""String_Node_Str"";
    boolean first=true;
    String handle=HandleInterfaceGenerator.getHandleInterfaceName(self,s);
    for (    IOAction a : s.getAcceptable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
      if (first) {
        first=false;
      }
 else {
        tmp+=""String_Node_Str"";
      }
      EndpointState succ=s.accept(a);
      if (succ.isTerminal()) {
        tmp+=ScribSocketGenerator.GENERATED_ENDSOCKET_NAME;
      }
 else {
        tmp+=this.apigen.getSocketClassName(succ);
      }
    }
    handler.addInterfaces(handle + ""String_Node_Str"" + tmp+ ""String_Node_Str"");
  }
  visited.add(s);
  for (  IOAction a : s.getAcceptable()) {
    addIOStateInterfacesToStateChannels(visited,s.accept(a));
  }
}","private void addIOStateInterfacesToStateChannels(Set<EndpointState> visited,EndpointState s){
  if (visited.contains(s) || s.isTerminal()) {
    return;
  }
  Role self=getSelf();
  String scname=this.apigen.getSocketClassName(s);
  String ioname=IOStateInterfaceGenerator.getIOStateInterfaceName(self,s);
  TypeBuilder tb=this.apigen.getType(scname);
  tb.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
  tb.addInterfaces(ioname + getConcreteSuccessorParameters(s));
  InterfaceBuilder iostate=this.iostates.get(ioname);
  MethodBuilder mb=addToCastMethod(iostate,scname);
  if (mb != null) {
    iostate.addImports(SessionApiGenerator.getStateChannelPackageName(this.gpn,self) + ""String_Node_Str"");
  }
  if (s.getStateKind() == Kind.POLY_INPUT) {
    TypeBuilder cases=this.apigen.getType(CaseSocketGenerator.getCaseSocketName(this.apigen.getSocketClassName(s)));
    cases.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
    cases.addInterfaces(CaseInterfaceGenerator.getCasesInterfaceName(self,s) + getConcreteSuccessorParameters(s));
    InterfaceBuilder handler=(InterfaceBuilder)this.apigen.getType(HandlerInterfaceGenerator.getHandlerInterfaceName(this.apigen.getSocketClassName(s)));
    handler.addImports(getIOInterfacePackageName(this.gpn,self) + ""String_Node_Str"");
    String tmp=""String_Node_Str"";
    boolean first=true;
    String handle=HandleInterfaceGenerator.getHandleInterfaceName(self,s);
    for (    IOAction a : s.getTakeable().stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList())) {
      if (first) {
        first=false;
      }
 else {
        tmp+=""String_Node_Str"";
      }
      EndpointState succ=s.take(a);
      if (succ.isTerminal()) {
        tmp+=ScribSocketGenerator.GENERATED_ENDSOCKET_NAME;
      }
 else {
        tmp+=this.apigen.getSocketClassName(succ);
      }
    }
    handler.addInterfaces(handle + ""String_Node_Str"" + tmp+ ""String_Node_Str"");
  }
  visited.add(s);
  for (  IOAction a : s.getTakeable()) {
    addIOStateInterfacesToStateChannels(visited,s.take(a));
  }
}",0.9905615856536102
2364,"private void collectBranchSuccs(){
  Role self=getSelf();
  for (  EndpointState s : this.branchPostActions.keySet()) {
    String key=HandleInterfaceGenerator.getHandleInterfaceName(self,s);
    List<IOAction> curr1=new LinkedList<>();
    this.branchPostActions.get(s).forEach((a) -> curr1.addAll(s.accept(a).getAcceptable()));
    List<IOAction> tmp=this.branchSuccs.get(key);
    if (tmp == null) {
      tmp=new LinkedList<>();
      tmp.addAll(curr1);
    }
 else {
      for (      IOAction a : curr1) {
        long n=curr1.stream().filter((x) -> x.equals(a)).count();
        long m=tmp.stream().filter((x) -> x.equals(a)).count();
        if (n > m) {
          for (int i=0; i < n - m; i++) {
            tmp.add(a);
          }
        }
      }
    }
    this.branchSuccs.put(key,tmp.stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList()));
  }
}","private void collectBranchSuccs(){
  Role self=getSelf();
  for (  EndpointState s : this.branchPostActions.keySet()) {
    String key=HandleInterfaceGenerator.getHandleInterfaceName(self,s);
    List<IOAction> curr1=new LinkedList<>();
    this.branchPostActions.get(s).forEach((a) -> curr1.addAll(s.take(a).getTakeable()));
    List<IOAction> tmp=this.branchSuccs.get(key);
    if (tmp == null) {
      tmp=new LinkedList<>();
      tmp.addAll(curr1);
    }
 else {
      for (      IOAction a : curr1) {
        long n=curr1.stream().filter((x) -> x.equals(a)).count();
        long m=tmp.stream().filter((x) -> x.equals(a)).count();
        if (n > m) {
          for (int i=0; i < n - m; i++) {
            tmp.add(a);
          }
        }
      }
    }
    this.branchSuccs.put(key,tmp.stream().sorted(IOStateInterfaceGenerator.IOACTION_COMPARATOR).collect(Collectors.toList()));
  }
}",0.988814317673378
2365,"protected void addCastField(){
  String ifname=getIOStateInterfaceName(this.apigen.getSelf(),this.curr);
  Set<IOAction> as=this.curr.getAcceptable();
  FieldBuilder cast=this.ib.newField(""String_Node_Str"");
  cast.addModifiers(TypeBuilder.PUBLIC,TypeBuilder.STATIC,TypeBuilder.FINAL);
  cast.setType(ifname + ""String_Node_Str"" + IntStream.range(1,as.size() + 1).mapToObj((i) -> ""String_Node_Str"").collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"");
  cast.setExpression(""String_Node_Str"");
}","protected void addCastField(){
  String ifname=getIOStateInterfaceName(this.apigen.getSelf(),this.curr);
  Set<IOAction> as=this.curr.getTakeable();
  FieldBuilder cast=this.ib.newField(""String_Node_Str"");
  cast.addModifiers(TypeBuilder.PUBLIC,TypeBuilder.STATIC,TypeBuilder.FINAL);
  cast.setType(ifname + ""String_Node_Str"" + IntStream.range(1,as.size() + 1).mapToObj((i) -> ""String_Node_Str"").collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"");
  cast.setExpression(""String_Node_Str"");
}",0.990138067061144
2366,"protected void addSuccessorParamsAndActionInterfaces(){
  int i=1;
  for (  IOAction a : this.curr.getAcceptable().stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    String actif=this.actions.get(a).getName();
    this.ib.addParameters(""String_Node_Str"" + i + ""String_Node_Str""+ SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
    this.ib.addInterfaces(actif + ""String_Node_Str"" + i+ ""String_Node_Str"");
    i++;
  }
}","protected void addSuccessorParamsAndActionInterfaces(){
  int i=1;
  for (  IOAction a : this.curr.getTakeable().stream().sorted(IOACTION_COMPARATOR).collect(Collectors.toList())) {
    String actif=this.actions.get(a).getName();
    this.ib.addParameters(""String_Node_Str"" + i + ""String_Node_Str""+ SuccessorInterfaceGenerator.getSuccessorInterfaceName(a));
    this.ib.addInterfaces(actif + ""String_Node_Str"" + i+ ""String_Node_Str"");
    i++;
  }
}",0.9888888888888888
2367,"public static String getIOStateInterfaceName(Role self,EndpointState s){
  String name=null;
switch (s.getStateKind()) {
case OUTPUT:
    name=""String_Node_Str"";
  break;
case UNARY_INPUT:
name=""String_Node_Str"";
break;
case POLY_INPUT:
name=""String_Node_Str"";
break;
case TERMINAL:
throw new RuntimeScribbleException(""String_Node_Str"" + s);
}
return name + ""String_Node_Str"" + self+ ""String_Node_Str""+ s.getAcceptable().stream().sorted(IOACTION_COMPARATOR).map((a) -> ActionInterfaceGenerator.getActionString(a)).collect(Collectors.joining(""String_Node_Str""));
}","public static String getIOStateInterfaceName(Role self,EndpointState s){
  String name=null;
switch (s.getStateKind()) {
case OUTPUT:
    name=""String_Node_Str"";
  break;
case UNARY_INPUT:
name=""String_Node_Str"";
break;
case POLY_INPUT:
name=""String_Node_Str"";
break;
case TERMINAL:
throw new RuntimeScribbleException(""String_Node_Str"" + s);
}
return name + ""String_Node_Str"" + self+ ""String_Node_Str""+ s.getTakeable().stream().sorted(IOACTION_COMPARATOR).map((a) -> ActionInterfaceGenerator.getActionString(a)).collect(Collectors.joining(""String_Node_Str""));
}",0.9911032028469752
2368,"protected void addAsyncDiscardMethod(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  IOAction first=this.curr.getAcceptable().iterator().next();
  MethodBuilder mb=this.ib.newAbstractMethod();
  ReceiveSocketGenerator.setAsyncDiscardHeaderWithoutReturnType(this.apigen,first,mb,InputFutureGenerator.getInputFutureName(this.apigen.getSocketClassName(this.curr)));
  this.ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  EndpointState succ=this.curr.accept(first);
  if (succ.isTerminal()) {
    ScribSocketGenerator.setNextSocketReturnType(this.apigen,mb,succ);
  }
 else {
    mb.setReturn(""String_Node_Str"");
  }
}","protected void addAsyncDiscardMethod(){
  GProtocolName gpn=this.apigen.getGProtocolName();
  IOAction first=this.curr.getTakeable().iterator().next();
  MethodBuilder mb=this.ib.newAbstractMethod();
  ReceiveSocketGenerator.setAsyncDiscardHeaderWithoutReturnType(this.apigen,first,mb,InputFutureGenerator.getInputFutureName(this.apigen.getSocketClassName(this.curr)));
  this.ib.addImports(SessionApiGenerator.getOpsPackageName(gpn) + ""String_Node_Str"");
  EndpointState succ=this.curr.take(first);
  if (succ.isTerminal()) {
    ScribSocketGenerator.setNextSocketReturnType(this.apigen,mb,succ);
  }
 else {
    mb.setReturn(""String_Node_Str"");
  }
}",0.9847094801223242
2369,"public boolean isSafeTermination(){
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
    if ((s.isTerminal() && !this.buffs.isEmpty(r)) || (!s.isTerminal() && (!(s.getStateKind().equals(Kind.UNARY_INPUT) && s.getAcceptable().iterator().next().isAccept()) || this.states.keySet().stream().anyMatch((rr) -> !r.equals(rr) && this.buffs.isConnected(r,rr))))) {
      return false;
    }
  }
  return true;
}","public boolean isSafeTermination(){
  for (  Role r : this.states.keySet()) {
    if (!canSafelyTerminate(r)) {
      return false;
    }
  }
  return true;
}",0.494949494949495
2370,"private static Set<Send> checkMessageLiveness(WFState init,Set<WFState> termset) throws ScribbleException {
  Set<Send> res=new HashSet<>();
  Set<Role> roles=termset.iterator().next().config.states.keySet();
  Iterator<WFState> i=termset.iterator();
  Set<Send> seen=new HashSet<>();
  while (i.hasNext()) {
    WFState s=i.next();
    Set<Send> ms=roles.stream().flatMap((r) -> s.config.buffs.get(r).values().stream().filter((v) -> v != null)).collect(Collectors.toSet());
    for (    Send m : ms) {
      if (!seen.contains(m)) {
        res.add(m);
      }
    }
    for (    Send m : new HashSet<>(res)) {
      if (!ms.contains(m)) {
        seen.add(m);
        res.remove(m);
      }
    }
  }
  return res;
}","private static Map<Role,Set<Send>> checkMessageLiveness(WFState init,Set<WFState> termset) throws ScribbleException {
  Set<Role> roles=termset.iterator().next().config.states.keySet();
  Iterator<WFState> i=termset.iterator();
  Map<Role,Map<Role,Send>> b0=i.next().config.buffs.getBuffers();
  while (i.hasNext()) {
    WFState s=i.next();
    WFBuffers b=s.config.buffs;
    for (    Role r1 : roles) {
      for (      Role r2 : roles) {
        Send s0=b0.get(r1).get(r2);
        if (s0 != null) {
          Send tmp=b.get(r1).get(r2);
          if (tmp == null) {
            b0.get(r1).put(r2,null);
          }
        }
      }
    }
  }
  Map<Role,Set<Send>> res=new HashMap<>();
  for (  Role r1 : roles) {
    for (    Role r2 : roles) {
      Send m=b0.get(r1).get(r2);
      if (m != null) {
        Set<Send> tmp=res.get(r2);
        if (tmp == null) {
          tmp=new HashSet<>();
          res.put(r2,tmp);
        }
        tmp.add(m);
      }
    }
  }
  return res;
}",0.4004683840749414
2371,"private static void checkTerminalSet(WFState init,Set<WFState> termset,Set<Role> safety,Set<Role> liveness) throws ScribbleException {
  Iterator<WFState> i=termset.iterator();
  WFState s=i.next();
  Map<Role,EndpointState> ss=new HashMap<>(s.config.states);
  while (i.hasNext()) {
    WFState next=i.next();
    Map<Role,EndpointState> tmp=next.config.states;
    for (    Role r : tmp.keySet()) {
      if (ss.get(r) != null) {
{
          for (          GIOAction a : next.getActions()) {
            if (a.containsRole(r)) {
              ss.put(r,null);
              break;
            }
          }
        }
      }
    }
  }
  for (  Role r : ss.keySet()) {
    EndpointState tmp=ss.get(r);
    if (tmp != null) {
      if (!tmp.isTerminal()) {
        if (s.config.buffs.get(r).values().stream().allMatch((v) -> v == null)) {
          liveness.add(r);
        }
      }
    }
  }
}","private static void checkTerminalSet(WFState init,Set<WFState> termset,Set<Role> safety,Set<Role> liveness) throws ScribbleException {
  Iterator<WFState> i=termset.iterator();
  WFState s=i.next();
  Map<Role,WFState> ss=new HashMap<>();
  s.config.states.keySet().forEach((r) -> ss.put(r,s));
  while (i.hasNext()) {
    WFState next=i.next();
    Map<Role,EndpointState> tmp=next.config.states;
    for (    Role r : tmp.keySet()) {
      if (ss.get(r) != null) {
{
          for (          GIOAction a : next.getActions()) {
            if (a.containsRole(r)) {
              ss.put(r,null);
              break;
            }
          }
        }
      }
    }
  }
  for (  Role r : ss.keySet()) {
    WFState foo=ss.get(r);
    if (foo != null) {
      EndpointState tmp=foo.config.states.get(r);
      if (tmp != null) {
        if (!foo.config.canSafelyTerminate(r)) {
          if (s.config.buffs.get(r).values().stream().allMatch((v) -> v == null)) {
            liveness.add(r);
          }
        }
      }
    }
  }
}",0.8753894080996885
2372,"private GProtocolDecl visitOverrideForGProtocolDecl(Module parent,GProtocolDecl child) throws ScribbleException {
  Job job=getJob();
  GProtocolDecl gpd=(GProtocolDecl)child;
  GProtocolName fullname=gpd.getFullMemberName(parent);
  Map<Role,EndpointState> fsms=new HashMap<>();
  for (  Role self : gpd.header.roledecls.getRoles()) {
    EndpointGraph fsm=job.getContext().getEndpointGraph(fullname,self);
    if (fsm == null) {
      Module proj=this.getJobContext().getProjection(fullname,self);
      EndpointGraphBuilder graph=new EndpointGraphBuilder(getJob());
      proj.accept(graph);
      fsm=job.getContext().getEndpointGraph(fullname,self);
    }
    job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ self+ ""String_Node_Str""+ fsm);
    fsms.put(self,fsm.init);
  }
  WFBuffers b0=new WFBuffers(fsms.keySet(),!gpd.modifiers.contains(GProtocolDecl.Modifiers.EXPLICIT));
  WFConfig c0=new WFConfig(fsms,b0);
  WFState init=new WFState(c0);
  Set<WFState> seen=new HashSet<>();
  LinkedHashSet<WFState> todo=new LinkedHashSet<>();
  todo.add(init);
  int count=0;
  while (!todo.isEmpty()) {
    Iterator<WFState> i=todo.iterator();
    WFState curr=i.next();
    i.remove();
    seen.add(curr);
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    Map<Role,List<IOAction>> acceptable=curr.getAcceptable();
    for (    Role r : acceptable.keySet()) {
      List<IOAction> acceptable_r=acceptable.get(r);
      EndpointState currstate=curr.config.states.get(r);
      Kind k=currstate.getStateKind();
      if (k == Kind.OUTPUT) {
        for (        IOAction a : acceptable_r) {
          if (acceptable_r.stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + acceptable_r);
          }
        }
      }
 else       if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
        for (        IOAction a : acceptable_r) {
          if (currstate.getAllAcceptable().stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + currstate.getAllAcceptable());
          }
        }
      }
      for (      IOAction a : acceptable_r) {
        if (a.isSend() || a.isReceive() || a.isDisconnect()) {
          getNextStates(todo,seen,curr,a.toGlobal(r),curr.accept(r,a));
        }
 else         if (a.isAccept() || a.isConnect()) {
          List<IOAction> as=acceptable.get(a.peer);
          IOAction d=a.toDual(r);
          if (as != null && as.contains(d)) {
            as.remove(d);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : d.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,d));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
  }
  job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count+ ""String_Node_Str""+ init.toDot());
  this.getJobContext().addGlobalModel(gpd.getFullMemberName((Module)parent),init);
  Set<WFState> all=seen;
  String errorMsg=""String_Node_Str"";
  Map<WFState,Set<WFState>> reach=getReachability(job,all);
  count=0;
  for (  WFState s : all) {
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    WFStateErrors errors=s.getErrors();
    if (!errors.isEmpty()) {
      List<GIOAction> trace=getTrace(init,s,reach);
      errorMsg+=""String_Node_Str"" + s.toString() + ""String_Node_Str""+ trace;
    }
    if (!errors.stuck.isEmpty()) {
      errorMsg+=""String_Node_Str"" + errors.stuck;
    }
    if (!errors.waitFor.isEmpty()) {
      errorMsg+=""String_Node_Str"" + errors.waitFor;
    }
    if (!errors.orphans.isEmpty()) {
      errorMsg+=""String_Node_Str"" + errors.orphans;
    }
  }
  if (!job.noLiveness) {
    Set<Set<WFState>> termsets=new HashSet<>();
    findTerminalSets(reach,termsets);
    for (    Set<WFState> termset : termsets) {
      Set<Role> safety=new HashSet<>();
      Set<Role> roleLiveness=new HashSet<>();
      checkTerminalSet(init,termset,safety,roleLiveness);
      if (!safety.isEmpty()) {
        errorMsg+=""String_Node_Str"" + safety + ""String_Node_Str""+ termset;
      }
      if (!roleLiveness.isEmpty()) {
        errorMsg+=""String_Node_Str"" + roleLiveness + ""String_Node_Str""+ termset;
      }
      Set<Send> msgLiveness=checkMessageLiveness(init,termset);
      if (!msgLiveness.isEmpty()) {
        errorMsg+=""String_Node_Str"" + msgLiveness + ""String_Node_Str""+ termset;
      }
    }
  }
  if (!errorMsg.equals(""String_Node_Str"")) {
    throw new ScribbleException(errorMsg);
  }
  return child;
}","private GProtocolDecl visitOverrideForGProtocolDecl(Module parent,GProtocolDecl child) throws ScribbleException {
  Job job=getJob();
  GProtocolDecl gpd=(GProtocolDecl)child;
  GProtocolName fullname=gpd.getFullMemberName(parent);
  Map<Role,EndpointState> fsms=new HashMap<>();
  for (  Role self : gpd.header.roledecls.getRoles()) {
    EndpointGraph fsm=job.getContext().getEndpointGraph(fullname,self);
    if (fsm == null) {
      Module proj=this.getJobContext().getProjection(fullname,self);
      EndpointGraphBuilder graph=new EndpointGraphBuilder(getJob());
      proj.accept(graph);
      fsm=job.getContext().getEndpointGraph(fullname,self);
    }
    job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ self+ ""String_Node_Str""+ fsm);
    fsms.put(self,fsm.init);
  }
  WFBuffers b0=new WFBuffers(fsms.keySet(),!gpd.modifiers.contains(GProtocolDecl.Modifiers.EXPLICIT));
  WFConfig c0=new WFConfig(fsms,b0);
  WFState init=new WFState(c0);
  Set<WFState> seen=new HashSet<>();
  LinkedHashSet<WFState> todo=new LinkedHashSet<>();
  todo.add(init);
  int count=0;
  while (!todo.isEmpty()) {
    Iterator<WFState> i=todo.iterator();
    WFState curr=i.next();
    i.remove();
    seen.add(curr);
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    Map<Role,List<IOAction>> acceptable=curr.getAcceptable();
    for (    Role r : acceptable.keySet()) {
      List<IOAction> acceptable_r=acceptable.get(r);
      EndpointState currstate=curr.config.states.get(r);
      Kind k=currstate.getStateKind();
      if (k == Kind.OUTPUT) {
        for (        IOAction a : acceptable_r) {
          if (acceptable_r.stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + acceptable_r);
          }
        }
      }
 else       if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
        for (        IOAction a : acceptable_r) {
          if (currstate.getAllAcceptable().stream().anyMatch((x) -> !a.equals(x) && a.peer.equals(x.peer) && a.mid.equals(x.mid)&& !a.payload.equals(x.payload))) {
            throw new ScribbleException(""String_Node_Str"" + currstate.getAllAcceptable());
          }
        }
      }
      for (      IOAction a : acceptable_r) {
        if (a.isSend() || a.isReceive() || a.isDisconnect()) {
          getNextStates(todo,seen,curr,a.toGlobal(r),curr.accept(r,a));
        }
 else         if (a.isAccept() || a.isConnect()) {
          List<IOAction> as=acceptable.get(a.peer);
          IOAction d=a.toDual(r);
          if (as != null && as.contains(d)) {
            as.remove(d);
            GIOAction g=(a.isConnect()) ? a.toGlobal(r) : d.toGlobal(a.peer);
            getNextStates(todo,seen,curr,g,curr.sync(r,a,a.peer,d));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
    }
  }
  job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count+ ""String_Node_Str""+ init.toDot());
  this.getJobContext().addGlobalModel(gpd.getFullMemberName((Module)parent),init);
  Set<WFState> all=seen;
  String errorMsg=""String_Node_Str"";
  Map<WFState,Set<WFState>> reach=getReachability(job,all);
  count=0;
  for (  WFState s : all) {
    if (job.debug) {
      count++;
      if (count % 50 == 0) {
        job.debugPrintln(""String_Node_Str"" + fullname + ""String_Node_Str""+ count);
      }
    }
    WFStateErrors errors=s.getErrors();
    if (!errors.isEmpty()) {
      List<GIOAction> trace=getTrace(init,s,reach);
      errorMsg+=""String_Node_Str"" + s.toString() + ""String_Node_Str""+ trace;
    }
    if (!errors.stuck.isEmpty()) {
      errorMsg+=""String_Node_Str"" + errors.stuck;
    }
    if (!errors.waitFor.isEmpty()) {
      errorMsg+=""String_Node_Str"" + errors.waitFor;
    }
    if (!errors.orphans.isEmpty()) {
      errorMsg+=""String_Node_Str"" + errors.orphans;
    }
  }
  if (!job.noLiveness) {
    Set<Set<WFState>> termsets=new HashSet<>();
    findTerminalSets(reach,termsets);
    for (    Set<WFState> termset : termsets) {
      Set<Role> safety=new HashSet<>();
      Set<Role> roleLiveness=new HashSet<>();
      checkTerminalSet(init,termset,safety,roleLiveness);
      if (!safety.isEmpty()) {
        errorMsg+=""String_Node_Str"" + safety + ""String_Node_Str""+ termset;
      }
      if (!roleLiveness.isEmpty()) {
        errorMsg+=""String_Node_Str"" + roleLiveness + ""String_Node_Str""+ termset;
      }
      Map<Role,Set<Send>> msgLiveness=checkMessageLiveness(init,termset);
      if (!msgLiveness.isEmpty()) {
        errorMsg+=""String_Node_Str"" + msgLiveness + ""String_Node_Str""+ termset;
      }
    }
  }
  if (!errorMsg.equals(""String_Node_Str"")) {
    throw new ScribbleException(errorMsg);
  }
  return child;
}",0.9975510204081632
2373,"@Override public LContinue leaveEndpointGraphBuilding(ScribNode parent,ScribNode child,EndpointGraphBuilder graph,ScribNode visited) throws ScribbleException {
  LContinue lr=(LContinue)visited;
  RecVar rv=lr.recvar.toName();
  if (graph.builder.isUnguardedInChoice()) {
    graph.builder.addContinueEdge(graph.builder.getEntry(),rv);
  }
 else {
    Iterator<EndpointState> preds=graph.builder.getPredecessors().iterator();
    Iterator<IOAction> prevs=graph.builder.getPreviousActions().iterator();
    EndpointState entry=graph.builder.getEntry();
    while (preds.hasNext()) {
      EndpointState pred=preds.next();
      IOAction prev=prevs.next();
      graph.builder.removeEdge(pred,prev,entry);
      graph.builder.addEdge(pred,prev,graph.builder.getRecursionEntry(rv));
    }
  }
  return (LContinue)super.leaveEndpointGraphBuilding(parent,child,graph,lr);
}","@Override public LContinue leaveEndpointGraphBuilding(ScribNode parent,ScribNode child,EndpointGraphBuilder graph,ScribNode visited) throws ScribbleException {
  LContinue lr=(LContinue)visited;
  RecVar rv=lr.recvar.toName();
  if (graph.builder.isUnguardedInChoice()) {
    graph.builder.addContinueEdge(graph.builder.getEntry(),rv);
  }
 else {
    Iterator<EndpointState> preds=graph.builder.getPredecessors().iterator();
    Iterator<IOAction> prevs=graph.builder.getPreviousActions().iterator();
    EndpointState entry=graph.builder.getEntry();
    Set<List<Object>> removed=new HashSet<>();
    while (preds.hasNext()) {
      EndpointState pred=preds.next();
      IOAction prev=prevs.next();
      List<Object> tmp=Arrays.asList(pred,prev,entry);
      if (!removed.contains(tmp)) {
        removed.add(tmp);
        graph.builder.removeEdge(pred,prev,entry);
      }
      graph.builder.addEdge(pred,prev,graph.builder.getRecursionEntry(rv));
    }
  }
  return (LContinue)super.leaveEndpointGraphBuilding(parent,child,graph,lr);
}",0.8670157068062827
2374,"public Map<Role,Receive> getStuckMessages(){
  Map<Role,Receive> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
    Kind k=s.getStateKind();
    if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
      Role peer=s.getAllTakeable().iterator().next().peer;
      Send send=this.buffs.get(r).get(peer);
      if (send != null) {
        Receive recv=send.toDual(peer);
        if (!s.isTakeable(recv))         res.put(r,recv);
      }
    }
  }
  return res;
}","public Map<Role,Receive> getStuckMessages(){
  Map<Role,Receive> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointFSM s=this.states.get(r);
    Kind k=s.getStateKind();
    if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
      Role peer=s.getAllTakeable().iterator().next().peer;
      Send send=this.buffs.get(r).get(peer);
      if (send != null) {
        Receive recv=send.toDual(peer);
        if (!s.isTakeable(recv))         res.put(r,recv);
      }
    }
  }
  return res;
}",0.9941634241245136
2375,"public Map<Role,List<IOAction>> getTakeable(){
  Map<Role,List<IOAction>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
switch (s.getStateKind()) {
case OUTPUT:
{
        List<IOAction> as=s.getAllTakeable();
        for (        IOAction a : as) {
          if (a.isSend()) {
            if (this.buffs.canSend(r,(Send)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else           if (a.isConnect()) {
            Connect c=(Connect)a;
            EndpointState speer=this.states.get(c.peer);
{
              List<IOAction> peeras=speer.getAllTakeable();
              for (              IOAction peera : peeras) {
                if (peera.equals(c.toDual(r)) && this.buffs.canConnect(r,c)) {
                  List<IOAction> tmp=res.get(r);
                  if (tmp == null) {
                    tmp=new LinkedList<>();
                    res.put(r,tmp);
                  }
                  tmp.add(a);
                }
              }
            }
          }
 else           if (a.isDisconnect()) {
            if (this.buffs.canDisconnect(r,(Disconnect)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + a);
          }
        }
        break;
      }
case UNARY_INPUT:
case POLY_INPUT:
{
      for (      IOAction a : this.buffs.inputable(r)) {
        if (a.isReceive()) {
          if (s.isTakeable(a)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
      break;
    }
case TERMINAL:
{
    break;
  }
case ACCEPT:
{
  for (  IOAction a : this.buffs.acceptable(r)) {
    if (a.isAccept()) {
      Accept c=(Accept)a;
      EndpointState speer=this.states.get(c.peer);
{
        List<IOAction> peeras=speer.getAllTakeable();
        for (        IOAction peera : peeras) {
          if (peera.equals(c.toDual(r)) && this.buffs.canAccept(r,c)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
  }
  break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + s);
}
}
}
return res;
}","public Map<Role,List<IOAction>> getTakeable(){
  Map<Role,List<IOAction>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointFSM s=this.states.get(r);
switch (s.getStateKind()) {
case OUTPUT:
{
        List<IOAction> as=s.getAllTakeable();
        for (        IOAction a : as) {
          if (a.isSend()) {
            if (this.buffs.canSend(r,(Send)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else           if (a.isConnect()) {
            Connect c=(Connect)a;
            EndpointFSM speer=this.states.get(c.peer);
{
              List<IOAction> peeras=speer.getAllTakeable();
              for (              IOAction peera : peeras) {
                if (peera.equals(c.toDual(r)) && this.buffs.canConnect(r,c)) {
                  List<IOAction> tmp=res.get(r);
                  if (tmp == null) {
                    tmp=new LinkedList<>();
                    res.put(r,tmp);
                  }
                  tmp.add(a);
                }
              }
            }
          }
 else           if (a.isDisconnect()) {
            if (this.buffs.canDisconnect(r,(Disconnect)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + a);
          }
        }
        break;
      }
case UNARY_INPUT:
case POLY_INPUT:
{
      for (      IOAction a : this.buffs.inputable(r)) {
        if (a.isReceive()) {
          if (s.isTakeable(a)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
      break;
    }
case TERMINAL:
{
    break;
  }
case ACCEPT:
{
  for (  IOAction a : this.buffs.acceptable(r)) {
    if (a.isAccept()) {
      Accept c=(Accept)a;
      EndpointFSM speer=this.states.get(c.peer);
{
        List<IOAction> peeras=speer.getAllTakeable();
        for (        IOAction peera : peeras) {
          if (peera.equals(c.toDual(r)) && this.buffs.canAccept(r,c)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
  }
  break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + s);
}
}
}
return res;
}",0.9968531468531469
2376,"public List<WFConfig> sync(Role r1,IOAction a1,Role r2,IOAction a2){
  List<WFConfig> res=new LinkedList<>();
  List<EndpointState> succs1=this.states.get(r1).takeAll(a1);
  List<EndpointState> succs2=this.states.get(r2).takeAll(a2);
  for (  EndpointState succ1 : succs1) {
    for (    EndpointState succ2 : succs2) {
      Map<Role,EndpointState> tmp1=new HashMap<>(this.states);
      tmp1.put(r1,succ1);
      tmp1.put(r2,succ2);
      WFBuffers tmp2;
      if (((a1.isConnect() && a2.isAccept()) || (a1.isAccept() && a2.isConnect()))) {
        tmp2=this.buffs.connect(r1,r2);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + a1 + ""String_Node_Str""+ a2);
      }
      res.add(new WFConfig(tmp1,tmp2));
    }
  }
  return res;
}","public List<WFConfig> sync(Role r1,IOAction a1,Role r2,IOAction a2){
  List<WFConfig> res=new LinkedList<>();
  List<EndpointFSM> succs1=this.states.get(r1).takeAll(a1);
  List<EndpointFSM> succs2=this.states.get(r2).takeAll(a2);
  for (  EndpointFSM succ1 : succs1) {
    for (    EndpointFSM succ2 : succs2) {
      Map<Role,EndpointFSM> tmp1=new HashMap<>(this.states);
      tmp1.put(r1,succ1);
      tmp1.put(r2,succ2);
      WFBuffers tmp2;
      if (((a1.isConnect() && a2.isAccept()) || (a1.isAccept() && a2.isConnect()))) {
        tmp2=this.buffs.connect(r1,r2);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + a1 + ""String_Node_Str""+ a2);
      }
      res.add(new WFConfig(tmp1,tmp2));
    }
  }
  return res;
}",0.9733688415446072
2377,"public Map<Role,Set<Send>> getOrphanMessages(){
  Map<Role,Set<Send>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
    if (s.isTerminal()) {
      Set<Send> orphs=this.buffs.get(r).values().stream().filter((v) -> v != null).collect(Collectors.toSet());
      if (!orphs.isEmpty()) {
        Set<Send> tmp=res.get(r);
        if (tmp == null) {
          tmp=new HashSet<>();
          res.put(r,tmp);
        }
        tmp.addAll(orphs);
      }
    }
 else {
      this.states.keySet().forEach((rr) -> {
        if (!rr.equals(r)) {
          if (!this.buffs.isConnected(r,rr)) {
            Send send=this.buffs.get(r).get(rr);
            if (send != null) {
              Set<Send> tmp=res.get(r);
              if (tmp == null) {
                tmp=new HashSet<>();
                res.put(r,tmp);
              }
              tmp.add(send);
            }
          }
        }
      }
);
    }
  }
  return res;
}","public Map<Role,Set<Send>> getOrphanMessages(){
  Map<Role,Set<Send>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointFSM s=this.states.get(r);
    if (s.isTerminal()) {
      Set<Send> orphs=this.buffs.get(r).values().stream().filter((v) -> v != null).collect(Collectors.toSet());
      if (!orphs.isEmpty()) {
        Set<Send> tmp=res.get(r);
        if (tmp == null) {
          tmp=new HashSet<>();
          res.put(r,tmp);
        }
        tmp.addAll(orphs);
      }
    }
 else {
      this.states.keySet().forEach((rr) -> {
        if (!rr.equals(r)) {
          if (!this.buffs.isConnected(r,rr)) {
            Send send=this.buffs.get(r).get(rr);
            if (send != null) {
              Set<Send> tmp=res.get(r);
              if (tmp == null) {
                tmp=new HashSet<>();
                res.put(r,tmp);
              }
              tmp.add(send);
            }
          }
        }
      }
);
    }
  }
  return res;
}",0.9959100204498976
2378,"public WFConfig(Map<Role,EndpointState> state,WFBuffers buffs){
  this.states=Collections.unmodifiableMap(state);
  this.buffs=buffs;
}","public WFConfig(Map<Role,EndpointFSM> state,WFBuffers buffs){
  this.states=Collections.unmodifiableMap(state);
  this.buffs=buffs;
}",0.9776119402985076
2379,"public List<WFConfig> accept(Role r,IOAction a){
  List<WFConfig> res=new LinkedList<>();
  List<EndpointState> succs=this.states.get(r).takeAll(a);
  for (  EndpointState succ : succs) {
    Map<Role,EndpointState> tmp1=new HashMap<>(this.states);
    tmp1.put(r,succ);
    WFBuffers tmp2=a.isSend() ? this.buffs.send(r,(Send)a) : a.isReceive() ? this.buffs.receive(r,(Receive)a) : a.isDisconnect() ? this.buffs.disconnect(r,(Disconnect)a) : null;
    if (tmp2 == null) {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
    res.add(new WFConfig(tmp1,tmp2));
  }
  return res;
}","public List<WFConfig> accept(Role r,IOAction a){
  List<WFConfig> res=new LinkedList<>();
  List<EndpointFSM> succs=this.states.get(r).takeAll(a);
  for (  EndpointFSM succ : succs) {
    Map<Role,EndpointFSM> tmp1=new HashMap<>(this.states);
    tmp1.put(r,succ);
    WFBuffers tmp2=a.isSend() ? this.buffs.send(r,(Send)a) : a.isReceive() ? this.buffs.receive(r,(Receive)a) : a.isDisconnect() ? this.buffs.disconnect(r,(Disconnect)a) : null;
    if (tmp2 == null) {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
    res.add(new WFConfig(tmp1,tmp2));
  }
  return res;
}",0.9796610169491524
2380,"private Set<Role> isWaitingFor(Role r){
  EndpointState s=this.states.get(r);
  Kind k=s.getStateKind();
  if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
    List<IOAction> all=s.getAllTakeable();
    IOAction a=all.get(0);
    if (a.isReceive()) {
      Set<Role> peers=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (peers.stream().noneMatch((p) -> this.buffs.get(r).get(p) != null)) {
        return peers;
      }
    }
  }
 else   if (k == Kind.OUTPUT) {
    if (s.isConnectOnly()) {
      List<IOAction> all=s.getAllTakeable();
      return all.stream().map((x) -> x.peer).collect(Collectors.toSet());
    }
  }
  return null;
}","private Set<Role> isWaitingFor(Role r){
  EndpointFSM s=this.states.get(r);
  Kind k=s.getStateKind();
  if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
    List<IOAction> all=s.getAllTakeable();
    IOAction a=all.get(0);
    if (a.isReceive()) {
      Set<Role> peers=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (peers.stream().noneMatch((p) -> this.buffs.get(r).get(p) != null)) {
        return peers;
      }
    }
  }
 else   if (k == Kind.ACCEPT) {
    if (!s.isInitial()) {
      List<IOAction> all=s.getAllTakeable();
      Set<Role> rs=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (rs.stream().noneMatch((x) -> this.states.get(x).getAllTakeable().contains(new Connect(r)))) {
        return rs;
      }
    }
  }
 else   if (k == Kind.OUTPUT) {
    if (s.isConnectOnly()) {
      List<IOAction> all=s.getAllTakeable();
      Set<Role> rs=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (rs.stream().noneMatch((x) -> this.states.get(x).getAllTakeable().contains(new Accept(r)))) {
        return rs;
      }
    }
  }
  return null;
}",0.6704035874439462
2381,"public boolean canSafelyTerminate(Role r){
  EndpointState s=this.states.get(r);
  return !((s.isTerminal() && !this.buffs.isEmpty(r)) || (!s.isTerminal() && (!s.getStateKind().equals(Kind.ACCEPT) || this.states.keySet().stream().anyMatch((rr) -> !r.equals(rr) && this.buffs.isConnected(r,rr)))));
}","public boolean canSafelyTerminate(Role r){
  EndpointFSM s=this.states.get(r);
  return !((s.isTerminal() && !this.buffs.isEmpty(r)) || (!s.isTerminal() && (!(s.getStateKind().equals(Kind.ACCEPT) && s.isInitial()) || this.states.keySet().stream().anyMatch((rr) -> !r.equals(rr) && this.buffs.isConnected(r,rr)))));
}",0.959349593495935
2382,"public WFStateErrors getErrors(){
  Map<Role,Receive> stuck=this.config.getStuckMessages();
  Set<Set<Role>> waitfor=this.config.getInputCycles();
  Map<Role,Set<Send>> orphs=this.config.getOrphanMessages();
  return new WFStateErrors(stuck,waitfor,orphs);
}","public WFStateErrors getErrors(){
  Map<Role,Receive> stuck=this.config.getStuckMessages();
  Set<Set<Role>> waitfor=this.config.getWaitForErrors();
  Map<Role,Set<Send>> orphs=this.config.getOrphanMessages();
  return new WFStateErrors(stuck,waitfor,orphs);
}",0.9575289575289576
2383,"public Kind getStateKind(){
  List<IOAction> as=this.getAllAcceptable();
  if (as.size() == 0) {
    return Kind.TERMINAL;
  }
 else {
    IOAction a=as.iterator().next();
    return (a.isSend() || a.isConnect() || a.isDisconnect()) ? Kind.OUTPUT : (as.size() > 1) ? Kind.POLY_INPUT : Kind.UNARY_INPUT;
  }
}","public Kind getStateKind(){
  List<IOAction> as=this.getAllAcceptable();
  if (as.size() == 0) {
    return Kind.TERMINAL;
  }
 else {
    IOAction a=as.iterator().next();
    return (a.isSend() || a.isDisconnect()) ? Kind.OUTPUT : (a.isConnect() || a.isAccept()) ? Kind.CONNECTION : (as.size() > 1) ? Kind.POLY_INPUT : Kind.UNARY_INPUT;
  }
}",0.9001536098310292
2384,"private Set<Role> isInputBlocked(Role r){
  EndpointState s=this.states.get(r);
  Kind k=s.getStateKind();
  if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
    List<IOAction> all=s.getAllAcceptable();
    IOAction a=all.get(0);
    if (a.isReceive()) {
      Set<Role> peers=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (peers.stream().noneMatch((p) -> this.buffs.get(r).get(p) != null)) {
        return peers;
      }
    }
  }
  return null;
}","private Set<Role> isInputBlocked(Role r){
  EndpointState s=this.states.get(r);
  Kind k=s.getStateKind();
  if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
    List<IOAction> all=s.getAllAcceptable();
    IOAction a=all.get(0);
    if (a.isReceive()) {
      Set<Role> peers=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (peers.stream().noneMatch((p) -> this.buffs.get(r).get(p) != null)) {
        return peers;
      }
    }
  }
 else   if (k == Kind.CONNECTION) {
    List<IOAction> all=s.getAllAcceptable();
    return all.stream().map((x) -> x.peer).collect(Collectors.toSet());
  }
  return null;
}",0.8568856885688569
2385,"public Map<Role,List<IOAction>> getAcceptable(){
  Map<Role,List<IOAction>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
switch (s.getStateKind()) {
case OUTPUT:
{
        List<IOAction> as=s.getAllAcceptable();
        for (        IOAction a : as) {
          if (a.isSend()) {
            if (this.buffs.canSend(r,(Send)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else           if (a.isConnect()) {
            Connect c=(Connect)a;
            EndpointState speer=this.states.get(c.peer);
{
              List<IOAction> peeras=speer.getAllAcceptable();
              for (              IOAction peera : peeras) {
                if (peera.equals(c.toDual(r)) && this.buffs.canConnect(r,c)) {
                  List<IOAction> tmp=res.get(r);
                  if (tmp == null) {
                    tmp=new LinkedList<>();
                    res.put(r,tmp);
                  }
                  tmp.add(a);
                }
              }
            }
          }
 else           if (a.isDisconnect()) {
            if (this.buffs.canDisconnect(r,(Disconnect)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + a);
          }
        }
        break;
      }
case UNARY_INPUT:
case POLY_INPUT:
{
      for (      IOAction a : this.buffs.inputable(r)) {
        if (a.isReceive()) {
          if (s.isAcceptable(a)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
 else         if (a.isAccept()) {
          Accept c=(Accept)a;
          EndpointState speer=this.states.get(c.peer);
{
            List<IOAction> peeras=speer.getAllAcceptable();
            for (            IOAction peera : peeras) {
              if (peera.equals(c.toDual(r)) && this.buffs.canAccept(r,c)) {
                List<IOAction> tmp=res.get(r);
                if (tmp == null) {
                  tmp=new LinkedList<>();
                  res.put(r,tmp);
                }
                tmp.add(a);
              }
            }
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
      break;
    }
case TERMINAL:
{
    break;
  }
default :
{
  throw new RuntimeException(""String_Node_Str"" + s);
}
}
}
return res;
}","public Map<Role,List<IOAction>> getAcceptable(){
  Map<Role,List<IOAction>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
switch (s.getStateKind()) {
case OUTPUT:
{
        List<IOAction> as=s.getAllAcceptable();
        for (        IOAction a : as) {
          if (a.isSend()) {
            if (this.buffs.canSend(r,(Send)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else           if (a.isDisconnect()) {
            if (this.buffs.canDisconnect(r,(Disconnect)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + a);
          }
        }
        break;
      }
case UNARY_INPUT:
case POLY_INPUT:
{
      for (      IOAction a : this.buffs.inputable(r)) {
        if (a.isReceive()) {
          if (s.isAcceptable(a)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
      break;
    }
case TERMINAL:
{
    break;
  }
case CONNECTION:
{
  List<IOAction> as=s.getAllAcceptable();
  for (  IOAction a : as) {
    if (a.isConnect()) {
      Connect c=(Connect)a;
      EndpointState speer=this.states.get(c.peer);
{
        List<IOAction> peeras=speer.getAllAcceptable();
        for (        IOAction peera : peeras) {
          if (peera.equals(c.toDual(r)) && this.buffs.canConnect(r,c)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
  }
}
default :
{
throw new RuntimeException(""String_Node_Str"" + s);
}
}
}
return res;
}",0.6256147944127484
2386,"public Kind getStateKind(){
  List<IOAction> as=this.getAllTakeable();
  if (as.size() == 0) {
    return Kind.TERMINAL;
  }
 else {
    IOAction a=as.iterator().next();
    return (a.isSend() || a.isDisconnect()) ? Kind.OUTPUT : (a.isConnect()) ? Kind.CONNECT : (a.isAccept()) ? Kind.ACCEPT : (as.size() > 1) ? Kind.POLY_INPUT : Kind.UNARY_INPUT;
  }
}","public Kind getStateKind(){
  List<IOAction> as=this.getAllTakeable();
  if (as.size() == 0) {
    return Kind.TERMINAL;
  }
 else {
    IOAction a=as.iterator().next();
    return (a.isSend() || a.isConnect() || a.isDisconnect()) ? Kind.OUTPUT : (a.isAccept()) ? Kind.ACCEPT : (as.size() > 1) ? Kind.POLY_INPUT : Kind.UNARY_INPUT;
  }
}",0.927536231884058
2387,"public Map<Role,List<IOAction>> getTakeable(){
  Map<Role,List<IOAction>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
switch (s.getStateKind()) {
case OUTPUT:
{
        List<IOAction> as=s.getAllTakeable();
        for (        IOAction a : as) {
          if (a.isSend()) {
            if (this.buffs.canSend(r,(Send)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else           if (a.isDisconnect()) {
            if (this.buffs.canDisconnect(r,(Disconnect)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + a);
          }
        }
        break;
      }
case UNARY_INPUT:
case POLY_INPUT:
{
      for (      IOAction a : this.buffs.inputable(r)) {
        if (a.isReceive()) {
          if (s.isTakeable(a)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
      break;
    }
case TERMINAL:
{
    break;
  }
case CONNECT:
{
  List<IOAction> as=s.getAllTakeable();
  for (  IOAction a : as) {
    if (a.isConnect()) {
      Connect c=(Connect)a;
      EndpointState speer=this.states.get(c.peer);
{
        List<IOAction> peeras=speer.getAllTakeable();
        for (        IOAction peera : peeras) {
          if (peera.equals(c.toDual(r)) && this.buffs.canConnect(r,c)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + s);
    }
  }
  break;
}
case ACCEPT:
{
for (IOAction a : this.buffs.acceptable(r)) {
  if (a.isAccept()) {
    Accept c=(Accept)a;
    EndpointState speer=this.states.get(c.peer);
{
      List<IOAction> peeras=speer.getAllTakeable();
      for (      IOAction peera : peeras) {
        if (peera.equals(c.toDual(r)) && this.buffs.canAccept(r,c)) {
          List<IOAction> tmp=res.get(r);
          if (tmp == null) {
            tmp=new LinkedList<>();
            res.put(r,tmp);
          }
          tmp.add(a);
        }
      }
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + a);
  }
}
break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + s);
}
}
}
return res;
}","public Map<Role,List<IOAction>> getTakeable(){
  Map<Role,List<IOAction>> res=new HashMap<>();
  for (  Role r : this.states.keySet()) {
    EndpointState s=this.states.get(r);
switch (s.getStateKind()) {
case OUTPUT:
{
        List<IOAction> as=s.getAllTakeable();
        for (        IOAction a : as) {
          if (a.isSend()) {
            if (this.buffs.canSend(r,(Send)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else           if (a.isConnect()) {
            Connect c=(Connect)a;
            EndpointState speer=this.states.get(c.peer);
{
              List<IOAction> peeras=speer.getAllTakeable();
              for (              IOAction peera : peeras) {
                if (peera.equals(c.toDual(r)) && this.buffs.canConnect(r,c)) {
                  List<IOAction> tmp=res.get(r);
                  if (tmp == null) {
                    tmp=new LinkedList<>();
                    res.put(r,tmp);
                  }
                  tmp.add(a);
                }
              }
            }
          }
 else           if (a.isDisconnect()) {
            if (this.buffs.canDisconnect(r,(Disconnect)a)) {
              List<IOAction> tmp=res.get(r);
              if (tmp == null) {
                tmp=new LinkedList<>();
                res.put(r,tmp);
              }
              tmp.add(a);
            }
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + a);
          }
        }
        break;
      }
case UNARY_INPUT:
case POLY_INPUT:
{
      for (      IOAction a : this.buffs.inputable(r)) {
        if (a.isReceive()) {
          if (s.isTakeable(a)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + a);
        }
      }
      break;
    }
case TERMINAL:
{
    break;
  }
case ACCEPT:
{
  for (  IOAction a : this.buffs.acceptable(r)) {
    if (a.isAccept()) {
      Accept c=(Accept)a;
      EndpointState speer=this.states.get(c.peer);
{
        List<IOAction> peeras=speer.getAllTakeable();
        for (        IOAction peera : peeras) {
          if (peera.equals(c.toDual(r)) && this.buffs.canAccept(r,c)) {
            List<IOAction> tmp=res.get(r);
            if (tmp == null) {
              tmp=new LinkedList<>();
              res.put(r,tmp);
            }
            tmp.add(a);
          }
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a);
    }
  }
  break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + s);
}
}
}
return res;
}",0.7551375827237896
2388,"private Set<Role> isInputBlocked(Role r){
  EndpointState s=this.states.get(r);
  Kind k=s.getStateKind();
  if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
    List<IOAction> all=s.getAllTakeable();
    IOAction a=all.get(0);
    if (a.isReceive()) {
      Set<Role> peers=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (peers.stream().noneMatch((p) -> this.buffs.get(r).get(p) != null)) {
        return peers;
      }
    }
  }
 else   if (k == Kind.CONNECT) {
    List<IOAction> all=s.getAllTakeable();
    return all.stream().map((x) -> x.peer).collect(Collectors.toSet());
  }
  return null;
}","private Set<Role> isInputBlocked(Role r){
  EndpointState s=this.states.get(r);
  Kind k=s.getStateKind();
  if (k == Kind.UNARY_INPUT || k == Kind.POLY_INPUT) {
    List<IOAction> all=s.getAllTakeable();
    IOAction a=all.get(0);
    if (a.isReceive()) {
      Set<Role> peers=all.stream().map((x) -> x.peer).collect(Collectors.toSet());
      if (peers.stream().noneMatch((p) -> this.buffs.get(r).get(p) != null)) {
        return peers;
      }
    }
  }
 else   if (k == Kind.OUTPUT) {
    if (s.isConnectOnly()) {
      List<IOAction> all=s.getAllTakeable();
      return all.stream().map((x) -> x.peer).collect(Collectors.toSet());
    }
  }
  return null;
}",0.9628482972136224
2389,"public Set<Role> isWaitForCycle(Role orig){
  Set<Role> candidate=new HashSet<>();
  Set<Role> todo=new HashSet<>(Arrays.asList(orig));
  while (!todo.isEmpty()) {
    Role r=todo.iterator().next();
    todo.remove(r);
    candidate.add(r);
    EndpointState s=this.states.get(r);
    if (s.getStateKind() == Kind.OUTPUT) {
      return null;
    }
    if (s.isTerminal()) {
      if (todo.isEmpty()) {
        return candidate;
      }
      continue;
    }
    Set<Role> blocked=isInputBlocked(r);
    if (blocked == null) {
      return null;
    }
    if (todo.isEmpty() && candidate.containsAll(blocked)) {
      return candidate;
    }
    blocked.forEach((x) -> {
      if (!candidate.contains(x)) {
        todo.add(x);
      }
    }
);
  }
  return null;
}","public Set<Role> isWaitForCycle(Role orig){
  Set<Role> candidate=new HashSet<>();
  Set<Role> todo=new HashSet<>(Arrays.asList(orig));
  while (!todo.isEmpty()) {
    Role r=todo.iterator().next();
    todo.remove(r);
    candidate.add(r);
    EndpointState s=this.states.get(r);
    if (s.getStateKind() == Kind.OUTPUT && !s.isConnectOnly()) {
      return null;
    }
    if (s.isTerminal()) {
      if (todo.isEmpty()) {
        return candidate;
      }
      continue;
    }
    Set<Role> blocked=isInputBlocked(r);
    if (blocked == null) {
      return null;
    }
    if (todo.isEmpty() && candidate.containsAll(blocked)) {
      return candidate;
    }
    blocked.forEach((x) -> {
      if (!candidate.contains(x)) {
        todo.add(x);
      }
    }
);
  }
  return null;
}",0.9858247422680412
2390,"private void runProjectionContextBuildingPasses() throws ScribbleException {
  runVisitorPassOnProjectedModules(ModuleContextBuilder.class);
  runVisitorPassOnProjectedModules(ProtocolDeclContextBuilder.class);
  runVisitorPassOnProjectedModules(RoleCollector.class);
  runVisitorPassOnProjectedModules(ProjectedChoiceDoPruner.class);
  runVisitorPassOnProjectedModules(ProjectedChoiceSubjectFixer.class);
  runVisitorPassOnProjectedModules(ProjectedRoleDeclFixer.class);
  runVisitorPassOnProjectedModules(ProtocolDefInliner.class);
  runVisitorPassOnProjectedModules(InlinedProtocolUnfolder.class);
}","private void runProjectionContextBuildingPasses() throws ScribbleException {
  runVisitorPassOnProjectedModules(ModuleContextBuilder.class);
  runVisitorPassOnProjectedModules(ProtocolDeclContextBuilder.class);
  runVisitorPassOnProjectedModules(RoleCollector.class);
  runVisitorPassOnProjectedModules(ProjectedChoiceDoPruner.class);
  runVisitorPassOnProjectedModules(ProjectedRoleDeclFixer.class);
  runVisitorPassOnProjectedModules(ProtocolDefInliner.class);
  runVisitorPassOnProjectedModules(InlinedProtocolUnfolder.class);
}",0.937334510150044
2391,"protected ProtocolDecl<?> getTargetProtocolDecl(Do<?> parent,NameDisambiguator disamb) throws ScribbleException {
  ModuleContext mc=disamb.getModuleContext();
  JobContext jc=disamb.getJobContext();
  Do<?> doo=(Do<?>)parent;
  ProtocolName<?> simpname=doo.proto.toName();
  ProtocolName<?> fullname=mc.getVisibleProtocolDeclFullName(simpname);
  return jc.getModule(fullname.getPrefix()).getProtocolDecl(simpname);
}","protected ProtocolDecl<?> getTargetProtocolDecl(Do<?> parent,NameDisambiguator disamb) throws ScribbleException {
  ModuleContext mc=disamb.getModuleContext();
  JobContext jc=disamb.getJobContext();
  Do<?> doo=(Do<?>)parent;
  ProtocolName<?> pn=doo.proto.toName();
  ProtocolName<?> fullname=mc.getVisibleProtocolDeclFullName(pn);
  return jc.getModule(fullname.getPrefix()).getProtocolDecl(pn.getSimpleName());
}",0.9448441247002398
2392,"private void outputGlobalModel(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL);
  for (int i=0; i < args.length; i+=1) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    System.out.println(""String_Node_Str"" + jcontext.getGlobalModel(fullname).toDot());
  }
}","private void outputGlobalModel(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL);
  for (int i=0; i < args.length; i+=1) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    WFState model=jcontext.getGlobalModel(fullname);
    if (model == null) {
      throw new ScribbleException(""String_Node_Str"" + fullname);
    }
    System.out.println(""String_Node_Str"" + model.toDot());
  }
}",0.762130177514793
2393,"private void drawGlobalModel(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL_DOT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    String png=args[i + 1];
    WFState model=jcontext.getGlobalModel(fullname);
    runDot(model.toDot(),png);
  }
}","private void drawGlobalModel(Job job) throws ScribbleException {
  JobContext jcontext=job.getContext();
  String[] args=this.args.get(ArgFlag.GLOBAL_MODEL_DOT);
  for (int i=0; i < args.length; i+=2) {
    GProtocolName fullname=checkGlobalProtocolArg(jcontext,args[i]);
    String png=args[i + 1];
    WFState model=jcontext.getGlobalModel(fullname);
    if (model == null) {
      throw new ScribbleException(""String_Node_Str"" + fullname);
    }
    runDot(model.toDot(),png);
  }
}",0.8901601830663616
2394,"private void addRolePair(Role dest,Role src){
  if (!this.map.containsKey(dest)) {
    Map<Role,Boolean> map=new HashMap<>();
    this.map.put(dest,map);
    map.put(src,false);
  }
 else   if (!this.map.get(dest).containsKey(src)) {
    this.map.get(dest).put(src,false);
  }
}","private void addRolePair(Role dest,Role src){
  if (!this.map.containsKey(dest)) {
    Map<Role,ConnectedStatus> map=new HashMap<>();
    this.map.put(dest,map);
    map.put(src,ConnectedStatus.FALSE);
  }
 else   if (!this.map.get(dest).containsKey(src)) {
    this.map.get(dest).put(src,ConnectedStatus.FALSE);
  }
}",0.5771812080536913
2395,"public boolean isConnected(Role dest,Role src){
  Map<Role,Boolean> tmp=this.map.get(dest);
  if (tmp != null) {
    Boolean b=tmp.get(src);
    return b != null && b;
  }
  return false;
}","public boolean isConnected(Role dest,Role src){
  Map<Role,ConnectedStatus> tmp=this.map.get(dest);
  if (tmp != null) {
    ConnectedStatus b=tmp.get(src);
    return b == ConnectedStatus.TRUE;
  }
  return false;
}",0.8049382716049382
2396,"public void setConnected(Role dest,Role src,boolean isConnected){
  addRolePair(dest,src);
  this.map.get(dest).put(src,isConnected);
  addRolePair(src,dest);
  this.map.get(src).put(dest,isConnected);
}","public void setConnected(Role dest,Role src,boolean isConnected){
  setConnected(dest,src,convertStatus(isConnected));
}",0.6006191950464397
2397,"public void buildGraph(GProtocolName fullname,Role role) throws ScribbleException {
  debugPrintPass(""String_Node_Str"" + EndpointGraphBuilder.class + ""String_Node_Str""+ fullname+ ""String_Node_Str""+ role);
  this.jcontext.getProjection(fullname,role).accept(new EndpointGraphBuilder(this));
}","public void buildGraph(GProtocolName fullname,Role role) throws ScribbleException {
  debugPrintPass(""String_Node_Str"" + EndpointGraphBuilder.class + ""String_Node_Str""+ fullname+ ""String_Node_Str""+ role);
  Module proj=this.jcontext.getProjection(fullname,role);
  if (proj == null) {
    throw new ScribbleException(""String_Node_Str"" + fullname);
  }
  proj.accept(new EndpointGraphBuilder(this));
}",0.8422575976845152
2398,"@Override public WFChoiceEnv mergeContexts(List<WFChoiceEnv> children){
  WFChoiceEnv copy=copy();
  for (  WFChoiceEnv child : children) {
    merge(this,copy.initial,child.initial);
    merge(this,copy.connected,child.connected);
  }
  return copy;
}","@Override public WFChoiceEnv mergeContexts(List<WFChoiceEnv> children){
  WFChoiceEnv copy=copy();
  for (  WFChoiceEnv child : children) {
    merge(this,copy.initial,child.initial);
  }
  ConnectedMap cm=children.get(0).getConnected();
  for (  WFChoiceEnv e : children.subList(1,children.size())) {
    cm=cm.merge(e.getConnected());
  }
  copy.connected=cm;
  return copy;
}",0.6698412698412698
2399,"private static void merge(WFChoiceEnv parent,ConnectedMap foo,ConnectedMap child){
  for (  Role dest : child.getDestinations()) {
    for (    Role src : child.getSources(dest)) {
      if (!parent.isConnected(src,dest)) {
        foo.setConnected(dest,src,child.isConnected(dest,src));
      }
    }
  }
}","private static void merge(WFChoiceEnv parent,MessageIdMap foo,MessageIdMap child){
  for (  Role dest : child.getDestinations()) {
    for (    Role src : child.getSources(dest)) {
      if (!parent.isEnabled(dest)) {
        foo.putMessages(dest,src,child.getMessages(dest,src));
      }
    }
  }
}",0.7545304777594728
2400,"public static void main(String[] args) throws ScribbleException {
  try {
    new CommandLine(args).run();
  }
 catch (  ScribbleException e) {
    System.err.println(e.getMessage());
    System.exit(1);
  }
}","public static void main(String[] args) throws ScribbleException {
  new CommandLine(args).run();
}",0.6384364820846905
2401,"public void run() throws ScribbleException {
  Job job=newJob(newMainContext());
  ScribbleException fail=null;
  try {
    job.checkWellFormedness();
  }
 catch (  ScribbleException x) {
    fail=x;
  }
  try {
    if (this.args.containsKey(ArgFlag.PROJECT)) {
      outputProjections(job);
    }
    if (this.args.containsKey(ArgFlag.FSM)) {
      outputGraph(job);
    }
    if (this.args.containsKey(ArgFlag.SESS_API)) {
      outputSessionApi(job);
    }
    if (this.args.containsKey(ArgFlag.SCHAN_API)) {
      outputStateChannelApi(job);
    }
    if (this.args.containsKey(ArgFlag.EP_API)) {
      outputEndpointApi(job);
    }
    if (this.args.containsKey(ArgFlag.GLOBAL_MODEL)) {
      if (job.useOldWf) {
        throw new RuntimeException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
      }
      outputGlobalModel(job);
    }
  }
 catch (  ScribbleException x) {
    if (fail == null) {
      fail=x;
    }
  }
  if (fail != null) {
    throw fail;
  }
}","public void run() throws ScribbleException {
  try {
    Job job=newJob(newMainContext());
    ScribbleException fail=null;
    try {
      job.checkWellFormedness();
    }
 catch (    ScribbleException x) {
      fail=x;
    }
    try {
      if (this.args.containsKey(ArgFlag.PROJECT)) {
        outputProjections(job);
      }
      if (this.args.containsKey(ArgFlag.FSM)) {
        outputGraph(job);
      }
      if (this.args.containsKey(ArgFlag.SESS_API)) {
        outputSessionApi(job);
      }
      if (this.args.containsKey(ArgFlag.SCHAN_API)) {
        outputStateChannelApi(job);
      }
      if (this.args.containsKey(ArgFlag.EP_API)) {
        outputEndpointApi(job);
      }
      if (this.args.containsKey(ArgFlag.GLOBAL_MODEL)) {
        if (job.useOldWf) {
          throw new RuntimeException(""String_Node_Str"" + CommandLineArgParser.GLOBAL_MODEL_FLAG + ""String_Node_Str""+ CommandLineArgParser.OLD_WF_FLAG);
        }
        outputGlobalModel(job);
      }
    }
 catch (    ScribbleException x) {
      if (fail == null) {
        fail=x;
      }
    }
    if (fail != null) {
      throw fail;
    }
  }
 catch (  ScribbleException e) {
    if (this.args.containsKey(ArgFlag.JUNIT) || this.args.containsKey(ArgFlag.VERBOSE)) {
      throw e;
    }
 else {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
}",0.828881469115192
2402,"private int parseFlag(int i){
  String flag=this.args[i];
switch (flag) {
case CommandLineArgParser.VERBOSE_FLAG:
{
      this.parsed.put(CommandLine.ArgFlag.VERBOSE,new String[0]);
      return i;
    }
case CommandLineArgParser.PATH_FLAG:
{
    return parsePath(i);
  }
case CommandLineArgParser.PROJECT_FLAG:
{
  return parseProject(i);
}
case CommandLineArgParser.FSM_FLAG:
{
return parseFsm(i);
}
case CommandLineArgParser.SESSION_FLAG:
{
return parseSession(i);
}
case CommandLineArgParser.STATECHAN_FLAG:
{
return parseStateChannels(i);
}
case CommandLineArgParser.API_FLAG:
{
return parseApi(i);
}
case CommandLineArgParser.OUTPUT_FLAG:
{
return parseOutput(i);
}
case CommandLineArgParser.STATECHANSUBTYPES_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.STATECHANSUBTYPES_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.GLOBAL_MODEL_FLAG:
{
return parseGlobalModel(i);
}
case CommandLineArgParser.OLD_WF_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.OLD_WF_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.NO_LIVENESS:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.NO_LIVENESS),new String[0]);
return i;
}
default :
{
throw new RuntimeException(flag);
}
}
}","private int parseFlag(int i){
  String flag=this.args[i];
switch (flag) {
case CommandLineArgParser.JUNIT_FLAG:
{
      this.parsed.put(CommandLine.ArgFlag.JUNIT,new String[0]);
      return i;
    }
case CommandLineArgParser.VERBOSE_FLAG:
{
    this.parsed.put(CommandLine.ArgFlag.VERBOSE,new String[0]);
    return i;
  }
case CommandLineArgParser.PATH_FLAG:
{
  return parsePath(i);
}
case CommandLineArgParser.PROJECT_FLAG:
{
return parseProject(i);
}
case CommandLineArgParser.FSM_FLAG:
{
return parseFsm(i);
}
case CommandLineArgParser.SESSION_FLAG:
{
return parseSession(i);
}
case CommandLineArgParser.STATECHAN_FLAG:
{
return parseStateChannels(i);
}
case CommandLineArgParser.API_FLAG:
{
return parseApi(i);
}
case CommandLineArgParser.OUTPUT_FLAG:
{
return parseOutput(i);
}
case CommandLineArgParser.STATECHANSUBTYPES_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.STATECHANSUBTYPES_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.GLOBAL_MODEL_FLAG:
{
return parseGlobalModel(i);
}
case CommandLineArgParser.OLD_WF_FLAG:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.OLD_WF_FLAG),new String[0]);
return i;
}
case CommandLineArgParser.NO_LIVENESS:
{
this.parsed.put(CommandLineArgParser.FLAGS.get(CommandLineArgParser.NO_LIVENESS),new String[0]);
return i;
}
default :
{
throw new RuntimeException(flag);
}
}
}",0.9405568096313016
2403,"@Test public void tests() throws IOException, InterruptedException, ExecutionException {
  try {
    URL url=ClassLoader.getSystemResource(GOOD_ROOT);
    String dir=url.getFile().substring(0,url.getFile().length() - (""String_Node_Str"" + GOOD_ROOT).length());
    if (File.separator.equals(""String_Node_Str"")) {
      dir=dir.substring(1).replace(""String_Node_Str"",""String_Node_Str"");
    }
    new CommandLine(this.example,CommandLineArgParser.PATH_FLAG,dir).run();
    Assert.assertFalse(""String_Node_Str"",this.isBadTest);
  }
 catch (  ScribbleException e) {
    Assert.assertTrue(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",this.isBadTest);
  }
}","@Test public void tests() throws IOException, InterruptedException, ExecutionException {
  try {
    URL url=ClassLoader.getSystemResource(GOOD_ROOT);
    String dir=url.getFile().substring(0,url.getFile().length() - (""String_Node_Str"" + GOOD_ROOT).length());
    if (File.separator.equals(""String_Node_Str"")) {
      dir=dir.substring(1).replace(""String_Node_Str"",""String_Node_Str"");
    }
    new CommandLine(this.example,CommandLineArgParser.JUNIT_FLAG,CommandLineArgParser.PATH_FLAG,dir).run();
    Assert.assertFalse(""String_Node_Str"",this.isBadTest);
  }
 catch (  ScribbleException e) {
    Assert.assertTrue(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",this.isBadTest);
  }
}",0.9704579025110784
2404,"public ScribbleException testWellFormednessCheck() throws ScribbleException {
  try {
    checkWellFormedness();
  }
 catch (  ScribbleException x) {
    return x;
  }
  return null;
}","public ScribbleException testWellFormednessCheck(){
  try {
    checkWellFormedness();
  }
 catch (  ScribbleException x) {
    return x;
  }
  return null;
}",0.9239766081871345
2405,"@Override public GChoice leaveInlinedWFChoiceCheck(ScribNode parent,ScribNode child,WFChoiceChecker checker,ScribNode visited) throws ScribbleException {
  GChoice cho=(GChoice)visited;
  Role subj=cho.subj.toName();
  System.out.println(""String_Node_Str"" + subj + ""String_Node_Str""+ checker.peekEnv()+ ""String_Node_Str""+ checker.peekParentEnv());
  if (!checker.peekParentEnv().isEnabled(subj)) {
    throw new ScribbleException(""String_Node_Str"" + subj);
  }
  List<WFChoiceEnv> all=cho.getBlocks().stream().map((b) -> (WFChoiceEnv)b.del().env()).collect(Collectors.toList());
  if (all.size() > 1) {
    try {
      WFChoiceEnv benv0=all.get(0);
      List<WFChoiceEnv> benvs=all.subList(1,all.size());
      Set<Role> dests=benv0.getEnabled().getDestinations();
      dests.remove(subj);
      for (      Role dest : dests) {
        Set<MessageId<?>> mids=benv0.getEnabled().getMessages(dest);
        benvs.stream().map((e) -> e.getEnabled().getMessages(dest)).forEach((ms) -> {
          if (!Collections.disjoint(mids,ms)) {
            throw new RuntimeScribbleException(""String_Node_Str"" + dest + ""String_Node_Str""+ mids+ ""String_Node_Str""+ ms);
          }
          mids.addAll(ms);
        }
);
      }
    }
 catch (    RuntimeScribbleException rse) {
      throw new ScribbleException(rse.getMessage(),rse.getCause());
    }
  }
  WFChoiceEnv merged=checker.popEnv().mergeContexts(all);
  checker.pushEnv(merged);
  return (GChoice)super.leaveInlinedWFChoiceCheck(parent,child,checker,visited);
}","@Override public GChoice leaveInlinedWFChoiceCheck(ScribNode parent,ScribNode child,WFChoiceChecker checker,ScribNode visited) throws ScribbleException {
  GChoice cho=(GChoice)visited;
  Role subj=cho.subj.toName();
  if (!checker.peekParentEnv().isEnabled(subj)) {
    throw new ScribbleException(""String_Node_Str"" + subj);
  }
  List<WFChoiceEnv> all=cho.getBlocks().stream().map((b) -> (WFChoiceEnv)b.del().env()).collect(Collectors.toList());
  if (all.size() > 1) {
    try {
      WFChoiceEnv benv0=all.get(0);
      List<WFChoiceEnv> benvs=all.subList(1,all.size());
      Set<Role> dests=benv0.getEnabled().getDestinations();
      dests.remove(subj);
      for (      Role dest : dests) {
        Set<MessageId<?>> mids=benv0.getEnabled().getMessages(dest);
        benvs.stream().map((e) -> e.getEnabled().getMessages(dest)).forEach((ms) -> {
          if (!Collections.disjoint(mids,ms)) {
            throw new RuntimeScribbleException(""String_Node_Str"" + dest + ""String_Node_Str""+ mids+ ""String_Node_Str""+ ms);
          }
          mids.addAll(ms);
        }
);
      }
    }
 catch (    RuntimeScribbleException rse) {
      throw new ScribbleException(rse.getMessage(),rse.getCause());
    }
  }
  WFChoiceEnv merged=checker.popEnv().mergeContexts(all);
  checker.pushEnv(merged);
  return (GChoice)super.leaveInlinedWFChoiceCheck(parent,child,checker,visited);
}",0.9546869595295744
2406,"@Override public void enterInlinedWFChoiceCheck(ScribNode parent,ScribNode child,WFChoiceChecker checker) throws ScribbleException {
  WFChoiceEnv env=checker.peekEnv().enterContext();
  env=env.clear();
  env=env.enableChoiceSubject(((GChoice)child).subj.toName());
  checker.pushEnv(env);
  System.out.println(""String_Node_Str"" + env);
}","@Override public void enterInlinedWFChoiceCheck(ScribNode parent,ScribNode child,WFChoiceChecker checker) throws ScribbleException {
  WFChoiceEnv env=checker.peekEnv().enterContext();
  env=env.clear();
  env=env.enableChoiceSubject(((GChoice)child).subj.toName());
  checker.pushEnv(env);
}",0.925515055467512
2407,"public T peekParentEnv(){
  return this.envs.get(this.envs.size() - 2);
}","public T peekParentEnv(){
  return this.envs.get(1);
}",0.8346456692913385
2408,"@Override public GChoice leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GChoice gc=(GChoice)visited;
  List<LProtocolBlock> blocks=gc.getBlocks().stream().map((b) -> (LProtocolBlock)((ProjectionEnv)b.del().env()).getProjection()).collect(Collectors.toList());
  LChoice projection=null;
  if (blocks.stream().filter((b) -> !b.isEmpty()).count() > 0) {
    List<LChoice> cs=blocks.stream().map((b) -> AstFactoryImpl.FACTORY.LChoice(AstFactoryImpl.FACTORY.DummyProjectionRoleNode(),Arrays.asList(b))).collect(Collectors.toList());
    LChoice merged=cs.get(0);
    for (int i=1; i < cs.size(); i++) {
      merged=merged.merge(cs.get(i));
    }
    projection=merged;
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GChoice)GCompoundInteractionNodeDel.super.leaveProjection(parent,child,proj,gc);
}","@Override public GChoice leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GChoice gc=(GChoice)visited;
  List<LProtocolBlock> blocks=gc.getBlocks().stream().map((b) -> (LProtocolBlock)((ProjectionEnv)b.del().env()).getProjection()).collect(Collectors.toList());
  LChoice projection=null;
  blocks=blocks.stream().filter((b) -> !b.isEmpty()).collect(Collectors.toList());
  if (!blocks.isEmpty()) {
    List<LChoice> cs=blocks.stream().map((b) -> AstFactoryImpl.FACTORY.LChoice(AstFactoryImpl.FACTORY.DummyProjectionRoleNode(),Arrays.asList(b))).collect(Collectors.toList());
    LChoice merged=cs.get(0);
    for (int i=1; i < cs.size(); i++) {
      merged=merged.merge(cs.get(i));
    }
    projection=merged;
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GChoice)GCompoundInteractionNodeDel.super.leaveProjection(parent,child,proj,gc);
}",0.960838389409818
2409,"@Override public GChoice leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GChoice gc=(GChoice)visited;
  List<LProtocolBlock> blocks=gc.getBlocks().stream().map((b) -> (LProtocolBlock)((ProjectionEnv)b.del().env()).getProjection()).collect(Collectors.toList());
  LChoice projection=null;
  if (blocks.size() == 1) {
    if (!blocks.get(0).isEmpty()) {
      RoleNode subj=AstFactoryImpl.FACTORY.DummyProjectionRoleNode();
      projection=AstFactoryImpl.FACTORY.LChoice(subj,blocks);
    }
  }
 else {
    List<LChoice> cs=blocks.stream().map((b) -> AstFactoryImpl.FACTORY.LChoice(AstFactoryImpl.FACTORY.DummyProjectionRoleNode(),Arrays.asList(b))).collect(Collectors.toList());
    LChoice merged=cs.get(0);
    for (int i=1; i < cs.size(); i++) {
      merged=merged.merge(cs.get(i));
    }
    projection=merged;
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GChoice)GCompoundInteractionNodeDel.super.leaveProjection(parent,child,proj,gc);
}","@Override public GChoice leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GChoice gc=(GChoice)visited;
  List<LProtocolBlock> blocks=gc.getBlocks().stream().map((b) -> (LProtocolBlock)((ProjectionEnv)b.del().env()).getProjection()).collect(Collectors.toList());
  LChoice projection=null;
  if (blocks.stream().filter((b) -> !b.isEmpty()).count() > 0) {
    List<LChoice> cs=blocks.stream().map((b) -> AstFactoryImpl.FACTORY.LChoice(AstFactoryImpl.FACTORY.DummyProjectionRoleNode(),Arrays.asList(b))).collect(Collectors.toList());
    LChoice merged=cs.get(0);
    for (int i=1; i < cs.size(); i++) {
      merged=merged.merge(cs.get(i));
    }
    projection=merged;
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GChoice)GCompoundInteractionNodeDel.super.leaveProjection(parent,child,proj,gc);
}",0.8189880020865936
2410,"@Override public GRecursion leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GRecursion gr=(GRecursion)visited;
  RecVarNode recvar=gr.recvar.clone();
  LProtocolBlock block=(LProtocolBlock)((ProjectionEnv)gr.block.del().env()).getProjection();
  LRecursion projection=null;
  Set<RecVar> rvs=new HashSet<>();
  rvs.add(recvar.toName());
  LProtocolBlock pruned=prune(block,rvs);
  if (!pruned.isEmpty()) {
    projection=AstFactoryImpl.FACTORY.LRecursion(recvar,pruned);
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GRecursion)GCompoundInteractionNodeDel.super.leaveProjection(parent,child,proj,gr);
}","@Override public GRecursion leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GRecursion gr=(GRecursion)visited;
  RecVarNode recvar=gr.recvar.clone();
  LRecursion projection=null;
  Set<RecVar> rvs=new HashSet<>();
  rvs.add(recvar.toName());
  LProtocolBlock pruned=prune((LProtocolBlock)((ProjectionEnv)gr.block.del().env()).getProjection(),rvs);
  if (!pruned.isEmpty()) {
    projection=AstFactoryImpl.FACTORY.LRecursion(recvar,pruned);
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GRecursion)GCompoundInteractionNodeDel.super.leaveProjection(parent,child,proj,gr);
}",0.8831360946745562
2411,"public void wrapChannel(BinaryChannelEndpoint c){
  this.se=c.se;
  this.c=c.c;
  this.bb=c.bb;
}","public void wrapChannel(BinaryChannelEndpoint c) throws IOException {
  this.se=c.se;
  this.c=c.c;
  this.bb=c.bb;
}",0.9065420560747663
2412,"public synchronized CompletableFuture<ScribMessage> getFuture(){
  final int ticket=getTicket();
  CompletableFuture<ScribMessage> fut=CompletableFuture.supplyAsync(() -> {
    try {
      ScribMessage m=read(ticket);
      if (m instanceof ScribInterrupt) {
        throw new RuntimeScribbleException((Throwable)((ScribInterrupt)m).payload[0]);
      }
      return m;
    }
 catch (    IOException e) {
      throw new RuntimeScribbleException(e);
    }
 finally {
      this.pending.remove(this);
    }
  }
);
  this.pending.add(fut);
  return fut;
}","public synchronized CompletableFuture<ScribMessage> getFuture(){
  final int ticket=getTicket();
  CompletableFuture<ScribMessage> fut=CompletableFuture.supplyAsync(() -> {
    try {
      ScribMessage m=read(ticket);
      if (m instanceof ScribInterrupt) {
        throw new RuntimeScribbleException((Throwable)((ScribInterrupt)m).payload[0]);
      }
      return m;
    }
 catch (    IOException e) {
      throw new RuntimeScribbleException(e);
    }
 finally {
      this.pending.remove(0);
    }
  }
);
synchronized (this.pending) {
    this.pending.add(fut);
  }
  return fut;
}",0.8656716417910447
2413,"public synchronized void reregister(Role peer,BinaryChannelWrapper w) throws IOException, GeneralSecurityException {
  this.sel.pause();
  w.wrapChannel(getChannelEndpoint(peer));
  w.clientHandshake();
  this.chans.put(peer,w);
  this.sel.unpause();
}","public synchronized void reregister(Role peer,BinaryChannelWrapper w) throws IOException, GeneralSecurityException {
  BinaryChannelEndpoint c=getChannelEndpoint(peer);
  c.sync();
  this.sel.pause();
  w.wrapChannel(c);
  w.clientHandshake();
  this.chans.put(peer,w);
  this.sel.unpause();
}",0.8
2414,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof ScribMessage)) {
    return false;
  }
  ScribMessage body=(ScribMessage)o;
  return this.op.equals(body.op) && this.payload.equals(body.payload);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof ScribMessage)) {
    return false;
  }
  ScribMessage m=(ScribMessage)o;
  return m.canEqual(this) && this.op.equals(m.op) && this.payload.equals(m.payload);
}",0.6407766990291263
2415,"public synchronized void enqueue(Role peer,ScribMessage o){
  this.queues.get(peer).add(o);
  this.counts.put(peer,this.counts.get(peer) + 1);
  this.notifyAll();
}","public synchronized void enqueue(Role peer,ScribMessage o){
  this.queues.get(peer).add(o);
  this.counts.put(peer,this.counts.get(peer) + 1);
  notifyAll();
}",0.9845201238390092
2416,"public synchronized CompletableFuture<ScribMessage> getFuture(Role peer){
  return CompletableFuture.supplyAsync(() -> {
    try {
      return dequeue(peer,getTicket(peer));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
);
}","public synchronized CompletableFuture<ScribMessage> getFuture(Role peer){
  return CompletableFuture.supplyAsync(() -> {
    try {
      ScribMessage m=dequeue(peer,getTicket(peer));
      if (m instanceof ScribInterrupt) {
        throw new RuntimeScribbleException((Throwable)((ScribInterrupt)m).payload[0]);
      }
      return m;
    }
 catch (    IOException e) {
      throw new RuntimeScribbleException(e);
    }
  }
);
}",0.736231884057971
2417,"public void run(){
  EndpointInputQueues queues=this.ep.getInputQueues();
  try {
    while (true) {
      queues.enqueue(this.peer,this.ep.smf.readMessage(this.dis));
    }
  }
 catch (  IOException e) {
    this.fail=e;
  }
 finally {
    try {
      dis.close();
    }
 catch (    IOException e) {
      if (this.fail == null) {
        this.fail=e;
      }
    }
 finally {
    }
  }
}","public void run(){
  EndpointInputQueues queues=this.ep.getInputQueues();
  try {
    while (true) {
      queues.enqueue(this.peer,this.ep.smf.readMessage(this.dis));
    }
  }
 catch (  IOException e) {
    this.fail=e;
  }
 finally {
    try {
      dis.close();
    }
 catch (    IOException e) {
      if (this.fail == null) {
        this.fail=e;
      }
    }
 finally {
      if (this.fail != null) {
        queues.interrupt(this.peer,this.fail);
      }
    }
  }
}",0.8842592592592593
2418,"public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Proto1 adder=new Proto1();
  SessionEndpoint se=adder.project(Proto1.C,new ObjectStreamFormatter());
  try (Proto1_C_0 s0=new Proto1_C_0(se)){
    s0.connect(Proto1.S,""String_Node_Str"",8888);
    Proto1_C_1 s1=s0.init();
    Proto1_C_6 s6=s1.branch();
switch (s6.op) {
case _1:
{
        Buff<Integer> b1=new Buff<>();
        Buff<Future_Proto1_C_4> b2=new Buff<>();
        s6.receive(Proto1._1,b1).async(Proto1._2,b2);
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + b2.val.sync().pay1);
        break;
      }
case _4:
{
      s6.receive(Proto1._4).async(Proto1._5).receive(Proto1._6);
      break;
    }
}
System.out.println(""String_Node_Str"");
}
 }","public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Proto1 adder=new Proto1();
  SessionEndpoint se=adder.project(Proto1.C,new ObjectStreamFormatter());
  try (Proto1_C_0 s0=new Proto1_C_0(se)){
    s0.connect(Proto1.S,""String_Node_Str"",8888);
    Proto1_C_1 s1=s0.init();
    Proto1_C_6 s6=s1.branch();
switch (s6.op) {
case _1:
{
        Buff<Integer> b1=new Buff<>();
        Buff<Future_Proto1_C_4> b2=new Buff<>();
        s6.receive(Proto1._1,b1).async(Proto1._2,b2).send(Proto1.S,Proto1._3,3);
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"" + b2.val.sync().pay1);
        break;
      }
case _4:
{
      s6.receive(Proto1._4).async(Proto1._5).receive(Proto1._6);
      break;
    }
}
System.out.println(""String_Node_Str"");
}
 }",0.984822934232715
2419,"@Override public void close() throws ScribbleRuntimeException {
  if (!this.ep.isCompleted()) {
    this.ep.close();
    throw new ScribbleRuntimeException(""String_Node_Str"" + this.ep.self);
  }
}","@Override public void close() throws ScribbleRuntimeException {
  this.ep.close();
  if (!this.ep.isCompleted()) {
    throw new ScribbleRuntimeException(""String_Node_Str"" + this.ep.self);
  }
}",0.8974358974358975
2420,"public synchronized boolean isEmpty(Role peer){
  System.out.println(""String_Node_Str"" + peer + ""String_Node_Str""+ this.queues);
  return this.queues.get(peer).isEmpty();
}","public synchronized boolean isEmpty(Role peer){
  return this.queues.get(peer).isEmpty();
}",0.6920152091254753
2421,"public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Buff<Integer> i1=new Buff<>(1);
  Buff<Integer> i2=new Buff<>(1);
  Proto1 adder=new Proto1();
  SessionEndpoint se=adder.project(Proto1.C,new ObjectStreamFormatter());
  try (Proto1_C_0 s0=new Proto1_C_0(se)){
    s0.connect(Proto1.S,""String_Node_Str"",8888);
    Proto1_C_1 s1=s0.init();
    Proto1_C_6 s6=s1.branch();
switch (s6.op) {
case _4:
{
        Proto1_C_2 s2=s6.receive(Proto1._4);
        boolean done=s2.isDone();
        Proto1_C_3 s3;
        if (done) {
          s3=s2.receive(Proto1._5);
        }
 else {
          s3=s2.async(Proto1._5);
        }
        Buff<Future_Proto1_C_4> b=new Buff<>();
        s3.send(Proto1.S,Proto1._1,999).async(Proto1._2,b).send(Proto1.S,Proto1._3,b.val.sync().pay1);
        System.out.println(""String_Node_Str"" + b.val.sync().pay1);
        break;
      }
case _6:
{
      s6.receive(Proto1._6,i1);
      System.out.println(""String_Node_Str"" + i1);
    }
}
}
 }","public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Buff<Integer> i1=new Buff<>(1);
  Buff<Integer> i2=new Buff<>(1);
  Proto1 adder=new Proto1();
  SessionEndpoint se=adder.project(Proto1.C,new ObjectStreamFormatter());
  try (Proto1_C_0 s0=new Proto1_C_0(se)){
    s0.connect(Proto1.S,""String_Node_Str"",8888);
    Proto1_C_1 s1=s0.init();
    Proto1_C_6 s6=s1.branch();
switch (s6.op) {
case _4:
{
        Proto1_C_2 s2=s6.receive(Proto1._4);
        boolean done=s2.isDone();
        Proto1_C_3 s3;
        if (done) {
          s3=s2.receive(Proto1._5);
        }
 else {
          s3=s2.async(Proto1._5);
        }
        Buff<Future_Proto1_C_4> b=new Buff<>();
        s3.send(Proto1.S,Proto1._1,999).async(Proto1._2,b).send(Proto1.S,Proto1._3,b.val.sync().pay1);
        System.out.println(""String_Node_Str"" + done + ""String_Node_Str""+ b.val.sync().pay1);
        break;
      }
case _6:
{
      s6.receive(Proto1._6,i1);
      System.out.println(""String_Node_Str"" + i1);
    }
}
}
 }",0.9882139619220308
2422,"public static void main(String[] args) throws IOException, ScribbleRuntimeException {
  try (ScribServerSocket ss=new ScribServerSocket(8888)){
    Buff<Integer> i1=new Buff<>();
    Buff<Integer> i2=new Buff<>();
    while (true) {
      Proto1 foo=new Proto1();
      SessionEndpoint se=foo.project(Proto1.S,new ObjectStreamFormatter());
      Proto1_S_0 init=new Proto1_S_0(se);
      init.accept(ss,Proto1.C);
      try (Proto1_S_0 s0=init){
        Proto1_S_1 s1=s0.init();
        Proto1_S_2 s2=s1.send(Proto1.C,Proto1._4,4,5);
        Thread.sleep(3000);
        s2.send(Proto1.C,Proto1._5).receive(Proto1._1,i1).send(Proto1.C,Proto1._2,i1.val).receive(Proto1._3,i1);
      }
 catch (      ScribbleRuntimeException|IOException|ExecutionException|InterruptedException|ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
 }","public static void main(String[] args) throws IOException, ScribbleRuntimeException {
  try (ScribServerSocket ss=new ScribServerSocket(8888)){
    Buff<Integer> i1=new Buff<>();
    Buff<Integer> i2=new Buff<>();
    while (true) {
      Proto1 foo=new Proto1();
      SessionEndpoint se=foo.project(Proto1.S,new ObjectStreamFormatter());
      Proto1_S_0 init=new Proto1_S_0(se);
      init.accept(ss,Proto1.C);
      try (Proto1_S_0 s0=init){
        Proto1_S_1 s1=s0.init();
        Proto1_S_2 s2=s1.send(Proto1.C,Proto1._4,4,5);
        Thread.sleep(2000);
        s2.send(Proto1.C,Proto1._5).receive(Proto1._1,i1).send(Proto1.C,Proto1._2,i1.val).receive(Proto1._3,i1);
      }
 catch (      ScribbleRuntimeException|IOException|ExecutionException|InterruptedException|ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
 }",0.9988249118683902
2423,"private String constructBranchReceiveClass(EndpointState ps,Module main){
  final String OP_FIELD=""String_Node_Str"";
  final String OP_PARAM=OP_FIELD;
  final String MESSAGE_FIELD=""String_Node_Str"";
  final String MESSAGE_PARAM=MESSAGE_FIELD;
  final String ARG_PREFIX=""String_Node_Str"";
  String branchName=this.classNames.get(ps);
  String enumClass=branchName + ""String_Node_Str"";
  String className=newClassName();
  ClassBuilder cb=constructClassExceptMethods(RECEIVESOCKET_CLASS,className,ps);
  MethodBuilder ctor=cb.getConstructors().iterator().next();
  ctor.addParameters(branchName + ""String_Node_Str"" + enumClass+ ""String_Node_Str""+ OP_PARAM,SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_PARAM);
  ctor.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + OP_FIELD+ ""String_Node_Str""+ OP_PARAM+ ""String_Node_Str"");
  ctor.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + MESSAGE_FIELD+ ""String_Node_Str""+ MESSAGE_PARAM+ ""String_Node_Str"");
  FieldBuilder fb1=cb.newField(OP_FIELD);
  fb1.addModifiers(ClassBuilder.PUBLIC,ClassBuilder.FINAL);
  fb1.setType(this.classNames.get(ps) + ""String_Node_Str"" + enumClass);
  FieldBuilder fb2=cb.newField(MESSAGE_FIELD);
  fb2.addModifiers(ClassBuilder.PRIVATE,ClassBuilder.FINAL);
  fb2.setType(SCRIBMESSAGE_CLASS);
  for (  IOAction a : ps.getAcceptable()) {
    EndpointState succ=ps.accept(a);
    String next=this.classNames.get(succ);
    MethodBuilder mb1=makeReceiveBlurb(cb,next);
    if (a.mid.isOp()) {
      addReceiveOpParams(main,a,mb1,OP_PARAM,ARG_PREFIX);
      mb1.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
      addBranchCheck(getPrefixedOpClassName(a.mid),mb1,MESSAGE_FIELD);
      addReceiveOpPayloadIntoBuffs(main,a,mb1,MESSAGE_PARAM,ARG_PREFIX);
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      addReceiveMessageSigNameParams(a,mb1,msd,OP_PARAM,ARG_PREFIX);
      mb1.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
      addBranchCheck(getPrefixedOpClassName(a.mid),mb1,MESSAGE_FIELD);
      mb1.addBodyLine(ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ MESSAGE_FIELD+ ""String_Node_Str"");
    }
    if (!next.equals(""String_Node_Str"")) {
      mb1.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.NEW+ ""String_Node_Str""+ next+ ""String_Node_Str"");
    }
    if (!a.payload.isEmpty()) {
      MethodBuilder mb2=makeReceiveBlurb(cb,next);
      mb2.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
      String ln=(next.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ClassBuilder.RETURN + ""String_Node_Str"";
      if (a.mid.isOp()) {
        ln+=""String_Node_Str"" + OP_PARAM + ""String_Node_Str""+ a.payload.elems.stream().map((e) -> ClassBuilder.NEW + ""String_Node_Str"" + BUFF_CLASS+ ""String_Node_Str"").collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
      }
 else {
        ln+=""String_Node_Str"" + OP_PARAM + ""String_Node_Str""+ ClassBuilder.NEW+ ""String_Node_Str""+ BUFF_CLASS+ ""String_Node_Str"";
      }
      mb2.addBodyLine(ln);
    }
  }
  this.classes.put(className,cb);
  return className;
}","private String constructBranchReceiveClass(EndpointState ps,Module main){
  final String OP_FIELD=""String_Node_Str"";
  final String OP_PARAM=OP_FIELD;
  final String MESSAGE_FIELD=""String_Node_Str"";
  final String MESSAGE_PARAM=MESSAGE_FIELD;
  final String ARG_PREFIX=""String_Node_Str"";
  String branchName=this.classNames.get(ps);
  String enumClass=branchName + ""String_Node_Str"";
  String className=newClassName();
  ClassBuilder cb=constructClassExceptMethods(RECEIVESOCKET_CLASS,className,ps);
  MethodBuilder ctor=cb.getConstructors().iterator().next();
  ctor.addParameters(branchName + ""String_Node_Str"" + enumClass+ ""String_Node_Str""+ OP_PARAM,SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_PARAM);
  ctor.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + OP_FIELD+ ""String_Node_Str""+ OP_PARAM+ ""String_Node_Str"");
  ctor.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + MESSAGE_FIELD+ ""String_Node_Str""+ MESSAGE_PARAM+ ""String_Node_Str"");
  FieldBuilder fb1=cb.newField(OP_FIELD);
  fb1.addModifiers(ClassBuilder.PUBLIC,ClassBuilder.FINAL);
  fb1.setType(this.classNames.get(ps) + ""String_Node_Str"" + enumClass);
  FieldBuilder fb2=cb.newField(MESSAGE_FIELD);
  fb2.addModifiers(ClassBuilder.PRIVATE,ClassBuilder.FINAL);
  fb2.setType(SCRIBMESSAGE_CLASS);
  for (  IOAction a : ps.getAcceptable()) {
    EndpointState succ=ps.accept(a);
    String next=this.classNames.get(succ);
    MethodBuilder mb1=makeReceiveBlurb(cb,next);
    if (a.mid.isOp()) {
      addReceiveOpParams(main,a,mb1,OP_PARAM,ARG_PREFIX);
      mb1.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
      addBranchCheck(getPrefixedOpClassName(a.mid),mb1,MESSAGE_FIELD);
      addReceiveOpPayloadIntoBuffs(main,a,mb1,MESSAGE_PARAM,ARG_PREFIX);
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      addReceiveMessageSigNameParams(a,mb1,msd,OP_PARAM,ARG_PREFIX);
      mb1.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
      addBranchCheck(getPrefixedOpClassName(a.mid),mb1,MESSAGE_FIELD);
      mb1.addBodyLine(ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ MESSAGE_FIELD+ ""String_Node_Str"");
    }
    makeReturnNextSocket(mb1,next);
    if (!a.payload.isEmpty()) {
      MethodBuilder mb2=makeReceiveBlurb(cb,next);
      mb2.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
      String ln=(next.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ClassBuilder.RETURN + ""String_Node_Str"";
      if (a.mid.isOp()) {
        ln+=""String_Node_Str"" + OP_PARAM + ""String_Node_Str""+ a.payload.elems.stream().map((e) -> ClassBuilder.NEW + ""String_Node_Str"" + BUFF_CLASS+ ""String_Node_Str"").collect(Collectors.joining(""String_Node_Str""))+ ""String_Node_Str"";
      }
 else {
        ln+=""String_Node_Str"" + OP_PARAM + ""String_Node_Str""+ ClassBuilder.NEW+ ""String_Node_Str""+ BUFF_CLASS+ ""String_Node_Str"";
      }
      mb2.addBodyLine(ln);
    }
  }
  this.classes.put(className,cb);
  return className;
}",0.9707489553198329
2424,"private void makeReceive(ClassBuilder cb,EndpointState ps){
  final String OP_PARAM=""String_Node_Str"";
  final String MESSAGE_PARAM=""String_Node_Str"";
  final String ARG_PREFIX=""String_Node_Str"";
  JobContext jc=this.job.getContext();
  Module main=jc.getMainModule();
  IOAction a=ps.getAcceptable().iterator().next();
  EndpointState succ=ps.accept(a);
  String next=this.classNames.get(succ);
  MethodBuilder mb1=makeReceiveBlurb(cb,next);
  if (a.mid.isOp()) {
    addReceiveOpParams(main,a,mb1,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_PARAM+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    addReceiveOpPayloadIntoBuffs(main,a,mb1,MESSAGE_PARAM,ARG_PREFIX);
  }
 else {
    final String MESSAGE_VAR=MESSAGE_PARAM;
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addReceiveMessageSigNameParams(a,mb1,msd,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    mb1.addBodyLine(ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  }
  makeReturnNextSocket(mb1,next);
  MethodBuilder mb4=cb.newMethod(""String_Node_Str"");
  mb4.addModifiers(ClassBuilder.PUBLIC);
  mb4.setReturn(""String_Node_Str"");
  mb4.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
  ClassBuilder future=cb.newClass();
  cb.addImports(""String_Node_Str"");
  String fname=""String_Node_Str"" + cb.getName();
  future.setName(fname);
  future.setSuperClass(SCRIBFUTURE_CLASS);
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      FieldBuilder f=future.newField(""String_Node_Str"" + i);
      f.setType(type);
      f.addModifiers(ClassBuilder.PUBLIC);
      i++;
    }
  }
  final String FUTURE_PARAM=""String_Node_Str"";
  MethodBuilder cons=future.newConstructor(""String_Node_Str"" + SCRIBMESSAGE_CLASS + ""String_Node_Str""+ FUTURE_PARAM);
  cons.addModifiers(ClassBuilder.PROTECTED);
  cons.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"" + FUTURE_PARAM+ ""String_Node_Str"");
  MethodBuilder sync=future.newMethod(""String_Node_Str"");
  sync.addExceptions(""String_Node_Str"",""String_Node_Str"");
  sync.addModifiers(ClassBuilder.PUBLIC);
  sync.setReturn(fname);
  sync.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str"");
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      sync.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ i+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (i - 1)+ ""String_Node_Str"");
    }
    i++;
  }
  sync.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.THIS+ ""String_Node_Str"");
  MethodBuilder mb2=cb.newMethod(""String_Node_Str"");
  mb2.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb2.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
  mb2.addModifiers(ClassBuilder.PUBLIC,ClassBuilder.SYNCHRONIZED);
  mb2.setReturn(next);
  if (a.mid.isOp()) {
    mb2.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + a.mid);
  }
  mb2.addParameters(BUFF_CLASS + ""String_Node_Str"" + fname+ ""String_Node_Str""+ ARG_PREFIX);
  String ln=ARG_PREFIX + ""String_Node_Str"" + ClassBuilder.NEW+ ""String_Node_Str""+ fname+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"";
  mb2.addBodyLine(ln);
  if (next.equals(""String_Node_Str"")) {
    mb2.addBodyLine(SCRIBSOCKET_EP_FIELD + ""String_Node_Str"");
  }
 else {
    makeReturnNextSocket(mb2,next);
  }
  MethodBuilder mb3=cb.newMethod(""String_Node_Str"");
  mb3.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb3.addModifiers(ClassBuilder.PUBLIC);
  mb3.setReturn(next);
  if (!next.equals(""String_Node_Str"")) {
    if (a.mid.isOp()) {
      mb3.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
      mb3.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + OP_PARAM+ ""String_Node_Str""+ ClassBuilder.NEW+ ""String_Node_Str""+ BUFF_CLASS+ ""String_Node_Str"");
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + a.mid);
    }
  }
}","private void makeReceive(ClassBuilder cb,EndpointState ps){
  final String OP_PARAM=""String_Node_Str"";
  final String MESSAGE_PARAM=""String_Node_Str"";
  final String ARG_PREFIX=""String_Node_Str"";
  JobContext jc=this.job.getContext();
  Module main=jc.getMainModule();
  IOAction a=ps.getAcceptable().iterator().next();
  EndpointState succ=ps.accept(a);
  String next=this.classNames.get(succ);
  MethodBuilder mb1=makeReceiveBlurb(cb,next);
  if (a.mid.isOp()) {
    addReceiveOpParams(main,a,mb1,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_PARAM+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    addReceiveOpPayloadIntoBuffs(main,a,mb1,MESSAGE_PARAM,ARG_PREFIX);
  }
 else {
    final String MESSAGE_VAR=MESSAGE_PARAM;
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addReceiveMessageSigNameParams(a,mb1,msd,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    mb1.addBodyLine(ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  }
  makeReturnNextSocket(mb1,next);
  MethodBuilder mb4=cb.newMethod(""String_Node_Str"");
  mb4.addModifiers(ClassBuilder.PUBLIC);
  mb4.setReturn(""String_Node_Str"");
  mb4.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
  ClassBuilder future=cb.newClass();
  cb.addImports(""String_Node_Str"");
  String fname=""String_Node_Str"" + cb.getName();
  future.setName(fname);
  future.setSuperClass(SCRIBFUTURE_CLASS);
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      FieldBuilder f=future.newField(""String_Node_Str"" + i);
      f.setType(type);
      f.addModifiers(ClassBuilder.PUBLIC);
      i++;
    }
  }
  final String FUTURE_PARAM=""String_Node_Str"";
  MethodBuilder cons=future.newConstructor(""String_Node_Str"" + SCRIBMESSAGE_CLASS + ""String_Node_Str""+ FUTURE_PARAM);
  cons.addModifiers(ClassBuilder.PROTECTED);
  cons.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"" + FUTURE_PARAM+ ""String_Node_Str"");
  MethodBuilder sync=future.newMethod(""String_Node_Str"");
  sync.addExceptions(""String_Node_Str"",""String_Node_Str"");
  sync.addModifiers(ClassBuilder.PUBLIC);
  sync.setReturn(fname);
  sync.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str"");
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      sync.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ i+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (i - 1)+ ""String_Node_Str"");
    }
    i++;
  }
  sync.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.THIS+ ""String_Node_Str"");
  MethodBuilder mb2=cb.newMethod(""String_Node_Str"");
  mb2.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb2.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
  mb2.addModifiers(ClassBuilder.PUBLIC,ClassBuilder.SYNCHRONIZED);
  mb2.setReturn(next);
  mb2.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
  mb2.addParameters(BUFF_CLASS + ""String_Node_Str"" + fname+ ""String_Node_Str""+ ARG_PREFIX);
  String ln=ARG_PREFIX + ""String_Node_Str"" + ClassBuilder.NEW+ ""String_Node_Str""+ fname+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"";
  mb2.addBodyLine(ln);
  if (next.equals(""String_Node_Str"")) {
    mb2.addBodyLine(SCRIBSOCKET_EP_FIELD + ""String_Node_Str"");
  }
 else {
    makeReturnNextSocket(mb2,next);
  }
  MethodBuilder mb3=cb.newMethod(""String_Node_Str"");
  mb3.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb3.addModifiers(ClassBuilder.PUBLIC);
  mb3.setReturn(next);
  if (!next.equals(""String_Node_Str"")) {
    mb3.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
    mb3.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + OP_PARAM+ ""String_Node_Str""+ ClassBuilder.NEW+ ""String_Node_Str""+ BUFF_CLASS+ ""String_Node_Str"");
  }
}",0.9772079772079773
2425,"protected void writeScribMessage(Role peer,Op op,Object... payload) throws IOException, ScribbleRuntimeException {
  use();
  ScribMessage msg=new ScribMessage(op,payload);
  this.ep.getSocketEndpoint(peer).writeMessageAndFlush(msg);
}","protected void writeScribMessage(Role peer,ScribMessage msg) throws IOException, ScribbleRuntimeException {
  use();
  this.ep.getSocketEndpoint(peer).writeMessageAndFlush(msg);
}",0.7922705314009661
2426,"public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException {
  Buff<Integer> i1=new Buff<>(1);
  Buff<Integer> i2=new Buff<>(2);
  Adder adder=new Adder();
  SessionEndpoint se=adder.project(Adder.C,new ObjectStreamFormatter());
  try (Adder_C_0 s0=new Adder_C_0(se)){
    s0.connect(Adder.S,""String_Node_Str"",8888);
    Adder_C_1 s1=s0.init();
    s1.send(Adder.S,Adder.ADD,i1.val,i1.val).receive(Adder.RES,i1).send(Adder.S,Adder.ADD,i1.val,i1.val).receive(Adder.RES,i1).send(Adder.S,Adder.BYE).end();
    System.out.println(""String_Node_Str"" + i1.val);
  }
 }","public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Buff<Integer> i1=new Buff<>(1);
  Buff<Integer> i2=new Buff<>(2);
  Adder adder=new Adder();
  SessionEndpoint se=adder.project(Adder.C,new ObjectStreamFormatter());
  try (Adder_C_0 s0=new Adder_C_0(se)){
    s0.connect(Adder.S,""String_Node_Str"",8888);
    Adder_C_1 s1=s0.init();
    s1.send(Adder.S,Adder.ADD,i1.val,i1.val).receive(Adder.RES,i1).send(Adder.S,Adder.ADD,i1.val,i1.val).receive(Adder.RES,i1).send(Adder.S,Adder.BYE).receive(Adder.BYE);
    System.out.println(""String_Node_Str"" + i1.val);
  }
 }",0.9522365428354814
2427,"private static Adder_S_3 X(Adder_S_1 s1,Buff<Integer> i1,Buff<Integer> i2) throws ClassNotFoundException, ScribbleRuntimeException, IOException {
  Adder_S_4 s4=s1.branch();
switch (s4.op) {
case BYE:
{
      return s4.receive(Adder.BYE);
    }
case ADD:
{
    return X(s4.receive(Adder.ADD,i1,i2).send(Adder.C,Adder.RES,i1.val + i2.val),i1,i2);
  }
default :
{
  throw new RuntimeException(""String_Node_Str"");
}
}
}","private static Adder_S_3 X(Adder_S_1 s1,Buff<Integer> i1,Buff<Integer> i2) throws ClassNotFoundException, ScribbleRuntimeException, IOException, ExecutionException, InterruptedException {
  Adder_S_4 s4=s1.branch();
switch (s4.op) {
case BYE:
{
      return s4.receive(Adder.BYE);
    }
case ADD:
{
    return X(s4.receive(Adder.ADD,i1,i2).send(Adder.C,Adder.RES,i1.val + i2.val),i1,i2);
  }
default :
{
  throw new RuntimeException(""String_Node_Str"");
}
}
}",0.9519450800915332
2428,"public static void main(String[] args) throws IOException, ScribbleRuntimeException {
  try (ScribServerSocket ss=new ScribServerSocket(8888)){
    Buff<Integer> i1=new Buff<>();
    Buff<Integer> i2=new Buff<>();
    while (true) {
      Adder foo=new Adder();
      SessionEndpoint se=foo.project(Adder.S,new ObjectStreamFormatter());
      Adder_S_0 init=new Adder_S_0(se);
      init.accept(ss,Adder.C);
      try (Adder_S_0 s0=init){
        X(s0.init(),i1,i2).end();
      }
 catch (      ScribbleRuntimeException|IOException|ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
 }","public static void main(String[] args) throws IOException, ScribbleRuntimeException, ExecutionException, InterruptedException {
  try (ScribServerSocket ss=new ScribServerSocket(8888)){
    Buff<Integer> i1=new Buff<>();
    Buff<Integer> i2=new Buff<>();
    while (true) {
      Adder foo=new Adder();
      SessionEndpoint se=foo.project(Adder.S,new ObjectStreamFormatter());
      Adder_S_0 init=new Adder_S_0(se);
      init.accept(ss,Adder.C);
      try (Adder_S_0 s0=init){
        X(s0.init(),i1,i2).send(Adder.C,Adder.BYE);
      }
 catch (      ScribbleRuntimeException|IOException|ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
 }",0.94679186228482
2429,"public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException {
  Buff<Integer> i1=new Buff<>(0);
  Buff<Integer> i2=new Buff<>(1);
  Adder adder=new Adder();
  SessionEndpoint se=adder.project(Adder.C,new ObjectStreamFormatter());
  try (Adder_C_0 s0=new Adder_C_0(se)){
    s0.connect(Adder.S,""String_Node_Str"",8888);
    Adder_C_1 s1=s0.init();
    fib(s1,i1,i2,0).end();
  }
 }","public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Buff<Integer> i1=new Buff<>(0);
  Buff<Integer> i2=new Buff<>(1);
  Adder adder=new Adder();
  SessionEndpoint se=adder.project(Adder.C,new ObjectStreamFormatter());
  try (Adder_C_0 s0=new Adder_C_0(se)){
    s0.connect(Adder.S,""String_Node_Str"",8888);
    Adder_C_1 s1=s0.init();
    fib(s1,i1,i2,0).receive(Adder.BYE);
  }
 }",0.9338929695697796
2430,"private static Adder_C_3 fib(Adder_C_1 s1,Buff<Integer> i1,Buff<Integer> i2,int i) throws ClassNotFoundException, ScribbleRuntimeException, IOException {
  return (i < 20) ? fib(side(s1.send(Adder.S,Adder.ADD,i1.val,i2.val),i1,i2).receive(Adder.RES,i2),i1,i2,i + 1) : s1.send(Adder.S,Adder.BYE);
}","private static Adder_C_3 fib(Adder_C_1 s1,Buff<Integer> i1,Buff<Integer> i2,int i) throws ClassNotFoundException, ScribbleRuntimeException, IOException, ExecutionException, InterruptedException {
  return (i < 20) ? fib(side(s1.send(Adder.S,Adder.ADD,i1.val,i2.val),i1,i2).receive(Adder.RES,i2),i1,i2,i + 1) : s1.send(Adder.S,Adder.BYE);
}",0.9339622641509434
2431,"public ProtocolDecl<K> getTargetProtocolDecl(JobContext jcontext,ModuleContext mcontext){
  ProtocolName<K> fullname=getTargetFullProtocolName(mcontext);
  return jcontext.getModule(fullname.getPrefix()).getProtocolDecl(fullname.getSimpleName());
}","public ProtocolDecl<K> getTargetProtocolDecl(JobContext jcontext,ModuleContext mcontext){
  ProtocolName<K> fullname=getTargetProtocolDeclFullName(mcontext);
  return jcontext.getModule(fullname.getPrefix()).getProtocolDecl(fullname.getSimpleName());
}",0.96
2432,"@Override public Do<?> leaveProtocolDeclContextBuilding(ScribNode parent,ScribNode child,ProtocolDeclContextBuilder builder,ScribNode visited) throws ScribbleException {
  JobContext jcontext=builder.getJobContext();
  ModuleContext mcontext=builder.getModuleContext();
  Do<?> doo=(Do<?>)visited;
  ProtocolName<?> pn=doo.getTargetFullProtocolName(builder.getModuleContext());
  doo.roles.getRoles().stream().forEach((r) -> addProtocolDependency(builder,r,pn,doo.getTargetRoleParameter(jcontext,mcontext,r)));
  return doo;
}","@Override public Do<?> leaveProtocolDeclContextBuilding(ScribNode parent,ScribNode child,ProtocolDeclContextBuilder builder,ScribNode visited) throws ScribbleException {
  JobContext jcontext=builder.getJobContext();
  ModuleContext mcontext=builder.getModuleContext();
  Do<?> doo=(Do<?>)visited;
  ProtocolName<?> pn=doo.proto.toName();
  doo.roles.getRoles().stream().forEach((r) -> addProtocolDependency(builder,r,pn,doo.getTargetRoleParameter(jcontext,mcontext,r)));
  return doo;
}",0.945705824284304
2433,"@Override public NonRoleArgList leaveDisambiguation(ScribNode parent,ScribNode child,NameDisambiguator disamb,ScribNode visited) throws ScribbleException {
  NonRoleArgList nral=(NonRoleArgList)super.leaveDisambiguation(parent,child,disamb,visited);
  ProtocolDecl<?> pd=getTargetProtocolDecl((Do<?>)parent,disamb);
  Iterator<NonRoleArg> args=nral.getDoArgs().iterator();
  for (  NonRoleParamDecl<?> param : pd.header.paramdecls.getDecls()) {
    NonRoleParamKind kind=param.kind;
    NonRoleArg arg=args.next();
    if (kind.equals(SigKind.KIND)) {
      if (!arg.val.isMessageSigNameNode() && !arg.val.isMessageSigNameNode()) {
        throw new RuntimeException(""String_Node_Str"" + arg + ""String_Node_Str""+ kind);
      }
    }
 else     if (kind.equals(DataTypeKind.KIND)) {
      if (!arg.val.isDataTypeNameNode()) {
        throw new RuntimeException(""String_Node_Str"" + arg + ""String_Node_Str""+ kind);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + kind);
    }
  }
  return nral;
}","@Override public NonRoleArgList leaveDisambiguation(ScribNode parent,ScribNode child,NameDisambiguator disamb,ScribNode visited) throws ScribbleException {
  NonRoleArgList nral=(NonRoleArgList)super.leaveDisambiguation(parent,child,disamb,visited);
  ProtocolDecl<?> pd=getTargetProtocolDecl((Do<?>)parent,disamb);
  Iterator<NonRoleArg> args=nral.getDoArgs().iterator();
  for (  NonRoleParamDecl<?> param : pd.header.paramdecls.getDecls()) {
    NonRoleParamKind kind=param.kind;
    NonRoleArg arg=args.next();
    if (arg.val.isParamNode()) {
      if (!((NonRoleParamNode<?>)arg.val).kind.equals(kind)) {
        throw new ScribbleException(""String_Node_Str"" + arg + ""String_Node_Str""+ kind);
      }
    }
 else     if (kind.equals(SigKind.KIND)) {
      if (!arg.val.isMessageSigNode() && !arg.val.isMessageSigNameNode()) {
        throw new ScribbleException(""String_Node_Str"" + arg + ""String_Node_Str""+ kind);
      }
    }
 else     if (kind.equals(DataTypeKind.KIND)) {
      if (!arg.val.isDataTypeNameNode()) {
        throw new ScribbleException(""String_Node_Str"" + arg + ""String_Node_Str""+ kind);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + kind);
    }
  }
  return nral;
}",0.6294642857142857
2434,"@Override public GDo leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GDo gd=(GDo)visited;
  Role popped=proj.popSelf();
  Role self=proj.peekSelf();
  LDo projection=null;
  if (gd.roles.getRoles().contains(self)) {
    RoleArgList roleinstans=gd.roles.project(self);
    NonRoleArgList arginstans=gd.args.project(self);
    LProtocolNameNode target=Projector.makeProjectedFullNameNode(gd.getTargetFullProtocolName(proj.getModuleContext()),popped);
    projection=AstFactoryImpl.FACTORY.LDo(roleinstans,arginstans,target);
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GDo)GSimpleInteractionNodeDel.super.leaveProjection(parent,child,proj,gd);
}","@Override public GDo leaveProjection(ScribNode parent,ScribNode child,Projector proj,ScribNode visited) throws ScribbleException {
  GDo gd=(GDo)visited;
  Role popped=proj.popSelf();
  Role self=proj.peekSelf();
  LDo projection=null;
  if (gd.roles.getRoles().contains(self)) {
    ModuleContext mc=proj.getModuleContext();
    RoleArgList roleinstans=gd.roles.project(self);
    NonRoleArgList arginstans=gd.args.project(self);
    LProtocolNameNode target=Projector.makeProjectedFullNameNode(gd.getTargetProtocolDeclFullName(mc),popped);
    projection=AstFactoryImpl.FACTORY.LDo(roleinstans,arginstans,target);
  }
  proj.pushEnv(proj.popEnv().setProjection(projection));
  return (GDo)GSimpleInteractionNodeDel.super.leaveProjection(parent,child,proj,gd);
}",0.9392117568470274
2435,"protected Do<?> visitOverrideForDo(InteractionSeq<?> parent,Do<?> child) throws ScribbleException {
  if (!isCycle()) {
    ModuleContext mcontext=getModuleContext();
    ProtocolDecl<? extends ProtocolKind> pd=child.getTargetProtocolDecl(getJobContext(),mcontext);
    ScribNode seq=applySubstitutions(pd.def.block.seq.clone());
    seq=seq.accept(this);
    pushEnv(popEnv().setTranslation(((InlineProtocolEnv)seq.del().env()).getTranslation()));
    return child;
  }
  return (child instanceof GDo) ? ((GDoDel)child.del()).visitForSubprotocolInlining(this,(GDo)child) : ((LDoDel)child.del()).visitForSubprotocolInlining(this,(LDo)child);
}","protected Do<?> visitOverrideForDo(InteractionSeq<?> parent,Do<?> child) throws ScribbleException {
  if (!isCycle()) {
    JobContext jc=getJobContext();
    ModuleContext mc=getModuleContext();
    ProtocolDecl<? extends ProtocolKind> pd=child.getTargetProtocolDecl(jc,mc);
    ScribNode seq=applySubstitutions(pd.def.block.seq.clone());
    seq=seq.accept(this);
    pushEnv(popEnv().setTranslation(((InlineProtocolEnv)seq.del().env()).getTranslation()));
    return child;
  }
  return (child instanceof GDo) ? ((GDoDel)child.del()).visitForSubprotocolInlining(this,(GDo)child) : ((LDoDel)child.del()).visitForSubprotocolInlining(this,(LDo)child);
}",0.9382716049382716
2436,"private Do<?> visitOverrideForDo(ScribNode parent,Do<?> doo) throws ScribbleException {
  if (!isCycle()) {
    ModuleContext mcontext=getModuleContext();
    ProtocolDecl<? extends ProtocolKind> pd=doo.getTargetProtocolDecl(getJobContext(),mcontext);
    ScribNode seq=applySubstitutions(pd.def.block.seq.clone());
    seq.accept(this);
  }
  return doo;
}","private Do<?> visitOverrideForDo(ScribNode parent,Do<?> doo) throws ScribbleException {
  if (!isCycle()) {
    JobContext jc=getJobContext();
    ModuleContext mc=getModuleContext();
    ProtocolDecl<? extends ProtocolKind> pd=doo.getTargetProtocolDecl(jc,mc);
    ScribNode seq=applySubstitutions(pd.def.block.seq.clone());
    seq.accept(this);
  }
  return doo;
}",0.8674033149171271
2437,"private void makeReceive(ClassBuilder cb,EndpointState ps){
  final String OP_PARAM=""String_Node_Str"";
  final String MESSAGE_PARAM=""String_Node_Str"";
  final String ARG_PREFIX=""String_Node_Str"";
  JobContext jc=this.job.getContext();
  Module main=jc.getMainModule();
  IOAction a=ps.getAcceptable().iterator().next();
  EndpointState succ=ps.accept(a);
  String next=this.classNames.get(succ);
  MethodBuilder mb1=makeReceiveBlurb(cb,next);
  if (a.mid.isOp()) {
    addReceiveOpParams(main,a,mb1,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_PARAM+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    addReceiveOpPayloadIntoBuffs(main,a,mb1,MESSAGE_PARAM,ARG_PREFIX);
  }
 else {
    final String MESSAGE_VAR=MESSAGE_PARAM;
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addReceiveMessageSigNameParams(a,mb1,msd,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    mb1.addBodyLine(ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  }
  makeReturnNextSocket(mb1,next);
  MethodBuilder mb4=cb.newMethod(""String_Node_Str"");
  mb4.addModifiers(ClassBuilder.PUBLIC);
  mb4.setReturn(""String_Node_Str"");
  mb4.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
  ClassBuilder future=cb.newClass();
  cb.addImports(""String_Node_Str"");
  String fname=""String_Node_Str"" + cb.getName();
  future.setName(fname);
  future.setSuperClass(SCRIBFUTURE_CLASS);
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      FieldBuilder f=future.newField(""String_Node_Str"" + i);
      f.setType(type);
      f.addModifiers(ClassBuilder.PUBLIC);
      i++;
    }
  }
  final String FUTURE_PARAM=""String_Node_Str"";
  MethodBuilder cons=future.newConstructor(""String_Node_Str"" + SCRIBMESSAGE_CLASS + ""String_Node_Str""+ FUTURE_PARAM);
  cons.addModifiers(ClassBuilder.PROTECTED);
  cons.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"" + FUTURE_PARAM+ ""String_Node_Str"");
  MethodBuilder sync=future.newMethod(""String_Node_Str"");
  sync.addExceptions(""String_Node_Str"",""String_Node_Str"");
  sync.addModifiers(ClassBuilder.PUBLIC);
  sync.setReturn(fname);
  sync.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str"");
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      sync.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ i+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (i - 1)+ ""String_Node_Str"");
    }
    i++;
  }
  sync.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.THIS+ ""String_Node_Str"");
  MethodBuilder mb2=cb.newMethod(""String_Node_Str"");
  mb2.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb2.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
  mb2.addModifiers(ClassBuilder.PUBLIC,ClassBuilder.SYNCHRONIZED);
  mb2.setReturn(next);
  mb2.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
  mb2.addParameters(BUFF_CLASS + ""String_Node_Str"" + fname+ ""String_Node_Str""+ ARG_PREFIX);
  String ln=ARG_PREFIX + ""String_Node_Str"" + ClassBuilder.NEW+ ""String_Node_Str""+ fname+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"";
  mb2.addBodyLine(ln);
  if (next.equals(""String_Node_Str"")) {
    mb2.addBodyLine(SCRIBSOCKET_EP_FIELD + ""String_Node_Str"");
  }
 else {
    makeReturnNextSocket(mb2,next);
  }
  MethodBuilder mb3=cb.newMethod(""String_Node_Str"");
  mb3.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb3.addModifiers(ClassBuilder.PUBLIC);
  mb3.setReturn(next);
  if (!next.equals(""String_Node_Str"")) {
    mb3.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
    mb3.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + OP_PARAM+ ""String_Node_Str""+ ClassBuilder.NEW+ ""String_Node_Str""+ BUFF_CLASS+ ""String_Node_Str"");
  }
}","private void makeReceive(ClassBuilder cb,EndpointState ps){
  final String OP_PARAM=""String_Node_Str"";
  final String MESSAGE_PARAM=""String_Node_Str"";
  final String ARG_PREFIX=""String_Node_Str"";
  JobContext jc=this.job.getContext();
  Module main=jc.getMainModule();
  IOAction a=ps.getAcceptable().iterator().next();
  EndpointState succ=ps.accept(a);
  String next=this.classNames.get(succ);
  MethodBuilder mb1=makeReceiveBlurb(cb,next);
  if (a.mid.isOp()) {
    addReceiveOpParams(main,a,mb1,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_PARAM+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    addReceiveOpPayloadIntoBuffs(main,a,mb1,MESSAGE_PARAM,ARG_PREFIX);
  }
 else {
    final String MESSAGE_VAR=MESSAGE_PARAM;
    MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
    addReceiveMessageSigNameParams(a,mb1,msd,OP_PARAM,ARG_PREFIX);
    mb1.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + MESSAGE_VAR+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
    mb1.addBodyLine(ARG_PREFIX + ""String_Node_Str"" + BUFF_VAL+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str""+ MESSAGE_VAR+ ""String_Node_Str"");
  }
  makeReturnNextSocket(mb1,next);
  MethodBuilder mb4=cb.newMethod(""String_Node_Str"");
  mb4.addModifiers(ClassBuilder.PUBLIC);
  mb4.setReturn(""String_Node_Str"");
  mb4.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"");
  ClassBuilder future=cb.newClass();
  cb.addImports(""String_Node_Str"");
  String fname=""String_Node_Str"" + cb.getName();
  future.setName(fname);
  future.setSuperClass(SCRIBFUTURE_CLASS);
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      FieldBuilder f=future.newField(""String_Node_Str"" + i);
      f.setType(type);
      f.addModifiers(ClassBuilder.PUBLIC);
      i++;
    }
  }
  final String FUTURE_PARAM=""String_Node_Str"";
  MethodBuilder cons=future.newConstructor(""String_Node_Str"" + SCRIBMESSAGE_CLASS + ""String_Node_Str""+ FUTURE_PARAM);
  cons.addModifiers(ClassBuilder.PROTECTED);
  cons.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"" + FUTURE_PARAM+ ""String_Node_Str"");
  MethodBuilder sync=future.newMethod(""String_Node_Str"");
  sync.addExceptions(""String_Node_Str"",""String_Node_Str"");
  sync.addModifiers(ClassBuilder.PUBLIC);
  sync.setReturn(fname);
  sync.addBodyLine(SCRIBMESSAGE_CLASS + ""String_Node_Str"" + ClassBuilder.SUPER+ ""String_Node_Str"");
  if (!a.payload.isEmpty()) {
    int i=1;
    for (    PayloadType<?> pt : a.payload.elems) {
      String type=main.getDataTypeDecl((DataType)pt).extName;
      sync.addBodyLine(ClassBuilder.THIS + ""String_Node_Str"" + ""String_Node_Str""+ i+ ""String_Node_Str""+ type+ ""String_Node_Str""+ (i - 1)+ ""String_Node_Str"");
      i++;
    }
  }
  sync.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + ClassBuilder.THIS+ ""String_Node_Str"");
  MethodBuilder mb2=cb.newMethod(""String_Node_Str"");
  mb2.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb2.addBodyLine(ClassBuilder.SUPER + ""String_Node_Str"");
  mb2.addModifiers(ClassBuilder.PUBLIC,ClassBuilder.SYNCHRONIZED);
  mb2.setReturn(next);
  mb2.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
  mb2.addParameters(BUFF_CLASS + ""String_Node_Str"" + fname+ ""String_Node_Str""+ ARG_PREFIX);
  String ln=ARG_PREFIX + ""String_Node_Str"" + ClassBuilder.NEW+ ""String_Node_Str""+ fname+ ""String_Node_Str""+ ClassBuilder.SUPER+ ""String_Node_Str""+ getPrefixedRoleClassName(a.peer)+ ""String_Node_Str"";
  mb2.addBodyLine(ln);
  if (next.equals(""String_Node_Str"")) {
    mb2.addBodyLine(SCRIBSOCKET_EP_FIELD + ""String_Node_Str"");
  }
 else {
    makeReturnNextSocket(mb2,next);
  }
  MethodBuilder mb3=cb.newMethod(""String_Node_Str"");
  mb3.addExceptions(SCRIBBLERUNTIMEEXCEPTION_CLASS);
  mb3.addModifiers(ClassBuilder.PUBLIC);
  mb3.setReturn(next);
  if (!next.equals(""String_Node_Str"")) {
    mb3.addParameters(SessionApiGenerator.getOpClassName(a.mid) + ""String_Node_Str"" + OP_PARAM);
    mb3.addBodyLine(ClassBuilder.RETURN + ""String_Node_Str"" + OP_PARAM+ ""String_Node_Str""+ ClassBuilder.NEW+ ""String_Node_Str""+ BUFF_CLASS+ ""String_Node_Str"");
  }
}",0.9977578475336324
2438,"public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Buff<Integer> i1=new Buff<>(1);
  Buff<Integer> i2=new Buff<>(1);
  Proto1 adder=new Proto1();
  SessionEndpoint se=adder.project(Proto1.C,new ObjectStreamFormatter());
  try (Proto1_C_0 s0=new Proto1_C_0(se)){
    s0.connect(Proto1.S,""String_Node_Str"",8888);
    Proto1_C_1 s1=s0.init();
    Proto1_C_6 s6=s1.branch();
switch (s6.op) {
case _4:
{
        Proto1_C_2 s2=s6.receive(Proto1._4);
        boolean done=s2.isDone();
        Proto1_C_3 s3;
        if (done) {
          s3=s2.receive(Proto1._5);
        }
 else {
          s3=s2.async(Proto1._5);
        }
        Buff<Future_Proto1_C_4> b=new Buff<>();
        s3.send(Proto1.S,Proto1._1,999).async(Proto1._2,b).send(Proto1.S,Proto1._3,b.val.sync().pay1);
        System.out.println(""String_Node_Str"" + done + ""String_Node_Str""+ b.val.sync().pay1);
        break;
      }
case _6:
{
      s6.receive(Proto1._6,i1);
      System.out.println(""String_Node_Str"" + i1);
      break;
    }
}
}
 }","public static void main(String[] args) throws UnknownHostException, ScribbleRuntimeException, IOException, ClassNotFoundException, ExecutionException, InterruptedException {
  Buff<Integer> i1=new Buff<>(1);
  Buff<Integer> i2=new Buff<>(1);
  Proto1 adder=new Proto1();
  SessionEndpoint se=adder.project(Proto1.C,new ObjectStreamFormatter());
  try (Proto1_C_0 s0=new Proto1_C_0(se)){
    s0.connect(Proto1.S,""String_Node_Str"",8888);
    Proto1_C_1 s1=s0.init();
    Proto1_C_6 s6=s1.branch();
switch (s6.op) {
case _4:
{
        Proto1_C_2 s2=s6.receive(Proto1._4);
        boolean done=s2.isDone();
        Proto1_C_3 s3;
        if (done) {
          s3=s2.receive(Proto1._5);
        }
 else {
          s3=s2.async(Proto1._5);
        }
        Buff<Future_Proto1_C_4> b=new Buff<>();
        s3.send(Proto1.S,Proto1._1,999).async(Proto1._2,b).send(Proto1.S,Proto1._3,b.val.sync().pay1);
        System.out.println(""String_Node_Str"" + done + ""String_Node_Str""+ b.val.pay1+ ""String_Node_Str""+ b.val.pay2);
        break;
      }
case _6:
{
      s6.receive(Proto1._6,i1);
      System.out.println(""String_Node_Str"" + i1);
      break;
    }
}
}
 }",0.9842243645924628
2439,"public static void main(String[] args) throws IOException, ScribbleRuntimeException {
  try (ScribServerSocket ss=new ScribServerSocket(8888)){
    Buff<Integer> i1=new Buff<>();
    Buff<Integer> i2=new Buff<>();
    while (true) {
      Proto1 foo=new Proto1();
      SessionEndpoint se=foo.project(Proto1.S,new ObjectStreamFormatter());
      Proto1_S_0 init=new Proto1_S_0(se);
      init.accept(ss,Proto1.C);
      try (Proto1_S_0 s0=init){
        Proto1_S_1 s1=s0.init();
        Proto1_S_2 s2=s1.send(Proto1.C,Proto1._4,4,5);
        Thread.sleep(2000);
        s2.send(Proto1.C,Proto1._5).receive(Proto1._1,i1).send(Proto1.C,Proto1._2,i1.val).receive(Proto1._3,i1);
      }
 catch (      ScribbleRuntimeException|IOException|ExecutionException|InterruptedException|ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
 }","public static void main(String[] args) throws IOException, ScribbleRuntimeException {
  try (ScribServerSocket ss=new ScribServerSocket(8888)){
    Buff<Integer> i1=new Buff<>();
    Buff<Integer> i2=new Buff<>();
    while (true) {
      Proto1 foo=new Proto1();
      SessionEndpoint se=foo.project(Proto1.S,new ObjectStreamFormatter());
      Proto1_S_0 init=new Proto1_S_0(se);
      init.accept(ss,Proto1.C);
      try (Proto1_S_0 s0=init){
        Proto1_S_1 s1=s0.init();
        Proto1_S_2 s2=s1.send(Proto1.C,Proto1._4,4,5);
        Thread.sleep(2000);
        s2.send(Proto1.C,Proto1._5).receive(Proto1._1,i1).send(Proto1.C,Proto1._2,i1.val,i1.val).receive(Proto1._3,i1);
      }
 catch (      ScribbleRuntimeException|IOException|ExecutionException|InterruptedException|ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
 }",0.9959040374488004
2440,"@Override public NonRoleParamDecl<K> reconstruct(SimpleNameNode<K> name){
  ScribDel del=del();
  NonRoleParamDecl<K> pd=new NonRoleParamDecl<>(this.kind,(NonRoleParamNode<K>)this.name);
  @SuppressWarnings(""String_Node_Str"") NonRoleParamDecl<K> tmp=(NonRoleParamDecl<K>)pd.del(del);
  return tmp;
}","@Override public NonRoleParamDecl<K> reconstruct(SimpleNameNode<K> name){
  ScribDel del=del();
  NonRoleParamDecl<K> pd=new NonRoleParamDecl<>(this.kind,(NonRoleParamNode<K>)name);
  @SuppressWarnings(""String_Node_Str"") NonRoleParamDecl<K> tmp=(NonRoleParamDecl<K>)pd.del(del);
  return tmp;
}",0.9915682967959528
2441,"@Override public NonRoleParamDeclList reconstruct(List<? extends HeaderParamDecl<NonRoleParamKind>> decls){
  ScribDel del=del();
  NonRoleParamDeclList rdl=new NonRoleParamDeclList(castParamDecls(decls));
  rdl=(NonRoleParamDeclList)rdl.del(del);
  return rdl;
}","@Override public NonRoleParamDeclList reconstruct(List<? extends HeaderParamDecl<NonRoleParamKind>> decls){
  ScribDel del=del();
  NonRoleParamDeclList rdl=AstFactoryImpl.FACTORY.NonRoleParamDeclList(castParamDecls(decls));
  rdl=(NonRoleParamDeclList)rdl.del(del);
  return rdl;
}",0.9504587155963304
2442,"@Override public HeaderParamDeclList<RoleKind> reconstruct(List<? extends HeaderParamDecl<RoleKind>> decls){
  ScribDel del=del();
  RoleDeclList rdl=new RoleDeclList(castRoleDecls(decls));
  rdl=(RoleDeclList)rdl.del(del);
  return rdl;
}","@Override public HeaderParamDeclList<RoleKind> reconstruct(List<? extends HeaderParamDecl<RoleKind>> decls){
  ScribDel del=del();
  RoleDeclList rdl=AstFactoryImpl.FACTORY.RoleDeclList(castRoleDecls(decls));
  rdl=(RoleDeclList)rdl.del(del);
  return rdl;
}",0.9456740442655936
2443,"private String generateMethods(ProtocolState ps){
  if (ps.isTerminal()) {
    return ""String_Node_Str"";
  }
  JobContext jc=this.job.getContext();
  Module main=jc.getMainModule();
  String method=""String_Node_Str"";
  SocketType st=getSocketType(ps);
switch (st) {
case SEND:
{
      for (      IOAction a : ps.getAcceptable()) {
        ProtocolState succ=ps.accept(a);
        String next=this.classNames.get(succ);
        String opref=getOp(a.mid);
        if (a.mid.isOp()) {
          method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getRoleClassName(a.peer)+ ""String_Node_Str""+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
          if (!a.payload.isEmpty()) {
            int i=1;
            for (            PayloadType<? extends Kind> pt : a.payload.elems) {
              DataType dt=(DataType)pt;
              DataTypeDecl dtd=main.getDataTypeDecl(dt);
              method+=""String_Node_Str"" + dtd.extName + ""String_Node_Str""+ i++;
            }
          }
          method+=""String_Node_Str"";
          method+=""String_Node_Str"" + opref;
          if (!a.payload.isEmpty()) {
            int i=1;
            for (            PayloadType<? extends Kind> pt : a.payload.elems) {
              method+=""String_Node_Str"" + i++;
            }
          }
          method+=""String_Node_Str"";
        }
 else {
          MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
          method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getRoleClassName(a.peer)+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str"";
          method+=""String_Node_Str"";
          method+=""String_Node_Str"";
        }
        method+=""String_Node_Str"" + next + ""String_Node_Str"";
        method+=""String_Node_Str"";
      }
      break;
    }
case RECEIVE:
{
    IOAction a=ps.getAcceptable().iterator().next();
    ProtocolState succ=ps.accept(a);
    String next=this.classNames.get(succ);
    if (a.mid.isOp()) {
      method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          method+=""String_Node_Str"" + dtd.extName + ""String_Node_Str""+ i++;
        }
      }
      method+=""String_Node_Str"";
      method+=""String_Node_Str"" + getRole(a.peer) + ""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          method+=""String_Node_Str"" + i + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ (i++ - 1)+ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      method+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
      method+=""String_Node_Str"";
      method+=""String_Node_Str"" + getRole(a.peer) + ""String_Node_Str"";
      method+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
    }
    method+=""String_Node_Str"" + next + ""String_Node_Str"";
    method+=""String_Node_Str"";
    break;
  }
case BRANCH:
{
  String tmp=newClassName();
  String clazz=""String_Node_Str"";
  clazz+=""String_Node_Str"" + getPackageName() + ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=generateImports(ps);
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"" + tmp + ""String_Node_Str""+ SOCKET_CLASSES.get(SocketType.RECEIVE)+ ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str""+ this.classNames.get(ps)+ ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"" + tmp + ""String_Node_Str""+ this.classNames.get(ps)+ ""String_Node_Str""+ this.classNames.get(ps)+ ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  for (  IOAction a : ps.getAcceptable()) {
    ProtocolState succ=ps.accept(a);
    String next=this.classNames.get(succ);
    if (a.mid.isOp()) {
      clazz+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getPackageName(this.gpn)+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          clazz+=""String_Node_Str"" + dtd.extName + ""String_Node_Str""+ i++;
        }
      }
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"" + getOp(a.mid) + ""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          clazz+=""String_Node_Str"" + i + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ (i++ - 1)+ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      clazz+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getPackageName(this.gpn)+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      clazz+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"" + getOp(a.mid) + ""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
    }
    clazz+=""String_Node_Str"" + next + ""String_Node_Str"";
    clazz+=""String_Node_Str"";
  }
  clazz+=""String_Node_Str"";
  this.classes.put(tmp,clazz);
  Iterator<IOAction> as=ps.getAcceptable().iterator();
  IOAction first=as.next();
  String next=tmp;
  method+=""String_Node_Str"" + next + ""String_Node_Str"";
  method+=""String_Node_Str"" + getRole(first.peer) + ""String_Node_Str"";
  method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str"";
  method+=""String_Node_Str"" + getOp(first.mid) + ""String_Node_Str"";
  method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(first.mid)+ ""String_Node_Str"";
  method+=""String_Node_Str"";
  for (; as.hasNext(); ) {
    IOAction a=as.next();
    method+=""String_Node_Str"" + getOp(a.mid) + ""String_Node_Str"";
    method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
    method+=""String_Node_Str"";
  }
  method+=""String_Node_Str"";
  method+=""String_Node_Str"";
  method+=""String_Node_Str"";
  method+=""String_Node_Str"" + next + ""String_Node_Str"";
  method+=""String_Node_Str"";
  as=ps.getAcceptable().iterator();
  first=as.next();
  method+=""String_Node_Str"";
  method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str"";
  method+=SessionApiGenerator.getOpClassName(first.mid);
  for (; as.hasNext(); ) {
    IOAction a=as.next();
    method+=""String_Node_Str"" + SessionApiGenerator.getOpClassName(a.mid);
  }
  method+=""String_Node_Str"";
  break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + st);
}
}
return method;
}","private String generateMethods(ProtocolState ps){
  if (ps.isTerminal()) {
    return ""String_Node_Str"";
  }
  JobContext jc=this.job.getContext();
  Module main=jc.getMainModule();
  String method=""String_Node_Str"";
  SocketType st=getSocketType(ps);
switch (st) {
case SEND:
{
      for (      IOAction a : ps.getAcceptable()) {
        ProtocolState succ=ps.accept(a);
        String next=this.classNames.get(succ);
        String opref=getOp(a.mid);
        if (a.mid.isOp()) {
          method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getRoleClassName(a.peer)+ ""String_Node_Str""+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
          if (!a.payload.isEmpty()) {
            int i=1;
            for (            PayloadType<? extends Kind> pt : a.payload.elems) {
              DataType dt=(DataType)pt;
              DataTypeDecl dtd=main.getDataTypeDecl(dt);
              method+=""String_Node_Str"" + dtd.extName + ""String_Node_Str""+ i++;
            }
          }
          method+=""String_Node_Str"";
          method+=""String_Node_Str"" + opref;
          if (!a.payload.isEmpty()) {
            for (int i=1; i <= a.payload.elems.size(); i++) {
              method+=""String_Node_Str"" + i;
            }
          }
          method+=""String_Node_Str"";
        }
 else {
          MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
          method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getRoleClassName(a.peer)+ ""String_Node_Str""+ msd.extName+ ""String_Node_Str"";
          method+=""String_Node_Str"";
          method+=""String_Node_Str"";
        }
        method+=""String_Node_Str"" + next + ""String_Node_Str"";
        method+=""String_Node_Str"";
      }
      break;
    }
case RECEIVE:
{
    IOAction a=ps.getAcceptable().iterator().next();
    ProtocolState succ=ps.accept(a);
    String next=this.classNames.get(succ);
    if (a.mid.isOp()) {
      method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          method+=""String_Node_Str"" + dtd.extName + ""String_Node_Str""+ i++;
        }
      }
      method+=""String_Node_Str"";
      method+=""String_Node_Str"" + getRole(a.peer) + ""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          method+=""String_Node_Str"" + i + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ (i++ - 1)+ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      method+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      method+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
      method+=""String_Node_Str"";
      method+=""String_Node_Str"" + getRole(a.peer) + ""String_Node_Str"";
      method+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
    }
    method+=""String_Node_Str"" + next + ""String_Node_Str"";
    method+=""String_Node_Str"";
    break;
  }
case BRANCH:
{
  String tmp=newClassName();
  String clazz=""String_Node_Str"";
  clazz+=""String_Node_Str"" + getPackageName() + ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=generateImports(ps);
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"" + tmp + ""String_Node_Str""+ SOCKET_CLASSES.get(SocketType.RECEIVE)+ ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str""+ this.classNames.get(ps)+ ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"" + tmp + ""String_Node_Str""+ this.classNames.get(ps)+ ""String_Node_Str""+ this.classNames.get(ps)+ ""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  clazz+=""String_Node_Str"";
  for (  IOAction a : ps.getAcceptable()) {
    ProtocolState succ=ps.accept(a);
    String next=this.classNames.get(succ);
    if (a.mid.isOp()) {
      clazz+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getPackageName(this.gpn)+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          clazz+=""String_Node_Str"" + dtd.extName + ""String_Node_Str""+ i++;
        }
      }
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"" + getOp(a.mid) + ""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      if (!a.payload.isEmpty()) {
        int i=1;
        for (        PayloadType<? extends Kind> pt : a.payload.elems) {
          DataType dt=(DataType)pt;
          DataTypeDecl dtd=main.getDataTypeDecl(dt);
          clazz+=""String_Node_Str"" + i + ""String_Node_Str""+ dtd.extName+ ""String_Node_Str""+ (i++ - 1)+ ""String_Node_Str"";
        }
      }
    }
 else {
      MessageSigNameDecl msd=main.getMessageSigDecl(((MessageSigName)a.mid).getSimpleName());
      clazz+=""String_Node_Str"" + next + ""String_Node_Str""+ SessionApiGenerator.getPackageName(this.gpn)+ ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
      clazz+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"" + getOp(a.mid) + ""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"";
      clazz+=""String_Node_Str"" + msd.extName + ""String_Node_Str"";
    }
    clazz+=""String_Node_Str"" + next + ""String_Node_Str"";
    clazz+=""String_Node_Str"";
  }
  clazz+=""String_Node_Str"";
  this.classes.put(tmp,clazz);
  Iterator<IOAction> as=ps.getAcceptable().iterator();
  IOAction first=as.next();
  String next=tmp;
  method+=""String_Node_Str"" + next + ""String_Node_Str"";
  method+=""String_Node_Str"" + getRole(first.peer) + ""String_Node_Str"";
  method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str"";
  method+=""String_Node_Str"" + getOp(first.mid) + ""String_Node_Str"";
  method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(first.mid)+ ""String_Node_Str"";
  method+=""String_Node_Str"";
  for (; as.hasNext(); ) {
    IOAction a=as.next();
    method+=""String_Node_Str"" + getOp(a.mid) + ""String_Node_Str"";
    method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str""+ SessionApiGenerator.getOpClassName(a.mid)+ ""String_Node_Str"";
    method+=""String_Node_Str"";
  }
  method+=""String_Node_Str"";
  method+=""String_Node_Str"";
  method+=""String_Node_Str"";
  method+=""String_Node_Str"" + next + ""String_Node_Str"";
  method+=""String_Node_Str"";
  as=ps.getAcceptable().iterator();
  first=as.next();
  method+=""String_Node_Str"";
  method+=""String_Node_Str"" + this.classNames.get(ps) + ""String_Node_Str"";
  method+=SessionApiGenerator.getOpClassName(first.mid);
  for (; as.hasNext(); ) {
    IOAction a=as.next();
    method+=""String_Node_Str"" + SessionApiGenerator.getOpClassName(a.mid);
  }
  method+=""String_Node_Str"";
  break;
}
default :
{
throw new RuntimeException(""String_Node_Str"" + st);
}
}
return method;
}",0.9931284843770258
2444,"public ScribNode parse(CommonTree ct){
  if (ct.getChildCount() > 0) {
    List<CommonErrorNode> errors=((List<?>)ct.getChildren()).stream().filter((c) -> (c instanceof CommonErrorNode)).map((c) -> (CommonErrorNode)c).collect(Collectors.toList());
    if (errors.size() > 0) {
      throw new RuntimeException(""String_Node_Str"" + errors);
    }
  }
  AntlrNodeType type=Util.getAntlrNodeType(ct);
switch (type) {
case MODULE:
    return AntlrModule.parseModule(this,ct);
case MODULEDECL:
  return AntlrModuleDecl.parseModuleDecl(this,ct);
case MESSAGESIGNATUREDECL:
return AntlrMessageSigDecl.parseMessageSigDecl(this,ct);
case PAYLOADTYPEDECL:
return AntlrDataTypeDecl.parseDataTypeDecl(this,ct);
case IMPORTMODULE:
return AntlrImportModule.parseImportModule(this,ct);
case GLOBALPROTOCOLDECL:
return AntlrGProtocolDecl.parseGPrototocolDecl(this,ct);
case ROLEDECLLIST:
return AntlrRoleDeclList.parseRoleDeclList(this,ct);
case ROLEDECL:
return AntlrRoleDecl.parseRoleDecl(this,ct);
case PARAMETERDECLLIST:
return AntlrNonRoleParamDeclList.parseNonRoleParamDeclList(this,ct);
case PARAMETERDECL:
return AntlrNonRoleParamDecl.parseNonRoleParamDecl(this,ct);
case GLOBALPROTOCOLHEADER:
return AntlrGProtocolHeader.parseGProtocolHeader(this,ct);
case GLOBALPROTOCOLDEF:
return AntlrGProtocolDefinition.parseGProtocolDefinition(this,ct);
case GLOBALPROTOCOLBLOCK:
return AntlrGProtocolBlock.parseGProtocolBlock(this,ct);
case GLOBALINTERACTIONSEQUENCE:
return AntlrGInteractionSequence.parseGInteractionSequence(this,ct);
case MESSAGESIGNATURE:
return AntlrMessageSig.parseMessageSig(this,ct);
case PAYLOAD:
return AntlrPayloadElemList.parsePayloadElemList(this,ct);
case GLOBALMESSAGETRANSFER:
return AntlrGMessageTransfer.parseGMessageTransfer(this,ct);
case GLOBALCHOICE:
return AntlrGChoice.parseGChoice(this,ct);
case GLOBALRECURSION:
return AntlrGRecursion.parseGRecursion(this,ct);
case GLOBALCONTINUE:
return AntlrGContinue.parseGContinue(this,ct);
case GLOBALPARALLEL:
return AntlrGParallel.parseGParallel(this,ct);
case GLOBALINTERRUPTIBLE:
return AntlrGInterruptible.parseGInterruptible(this,ct);
case GLOBALINTERRUPT:
return AntlrGInterrupt.parseGInterrupt(this,ct);
case GLOBALDO:
return AntlrGDo.parseGDo(this,ct);
case ROLEINSTANTIATIONLIST:
return AntlrRoleArgList.parseRoleArgList(this,ct);
case ROLEINSTANTIATION:
return AntlrRoleArg.parseRoleArg(this,ct);
case ARGUMENTINSTANTIATIONLIST:
return AntlrNonRoleArgList.parseNonRoleArgList(this,ct);
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}","public ScribNode parse(CommonTree ct){
  if (ct.getChildCount() > 0) {
    List<CommonErrorNode> errors=((List<?>)ct.getChildren()).stream().filter((c) -> (c instanceof CommonErrorNode)).map((c) -> (CommonErrorNode)c).collect(Collectors.toList());
    if (errors.size() > 0) {
      throw new RuntimeException(""String_Node_Str"" + errors);
    }
  }
  AntlrNodeType type=ScribParserUtil.getAntlrNodeType(ct);
switch (type) {
case MODULE:
    return AntlrModule.parseModule(this,ct);
case MODULEDECL:
  return AntlrModuleDecl.parseModuleDecl(this,ct);
case MESSAGESIGNATUREDECL:
return AntlrMessageSigDecl.parseMessageSigDecl(this,ct);
case PAYLOADTYPEDECL:
return AntlrDataTypeDecl.parseDataTypeDecl(this,ct);
case IMPORTMODULE:
return AntlrImportModule.parseImportModule(this,ct);
case GLOBALPROTOCOLDECL:
return AntlrGProtocolDecl.parseGPrototocolDecl(this,ct);
case ROLEDECLLIST:
return AntlrRoleDeclList.parseRoleDeclList(this,ct);
case ROLEDECL:
return AntlrRoleDecl.parseRoleDecl(this,ct);
case PARAMETERDECLLIST:
return AntlrNonRoleParamDeclList.parseNonRoleParamDeclList(this,ct);
case PARAMETERDECL:
return AntlrNonRoleParamDecl.parseNonRoleParamDecl(this,ct);
case GLOBALPROTOCOLHEADER:
return AntlrGProtocolHeader.parseGProtocolHeader(this,ct);
case GLOBALPROTOCOLDEF:
return AntlrGProtocolDefinition.parseGProtocolDefinition(this,ct);
case GLOBALPROTOCOLBLOCK:
return AntlrGProtocolBlock.parseGProtocolBlock(this,ct);
case GLOBALINTERACTIONSEQUENCE:
return AntlrGInteractionSequence.parseGInteractionSequence(this,ct);
case MESSAGESIGNATURE:
return AntlrMessageSig.parseMessageSig(this,ct);
case PAYLOAD:
return AntlrPayloadElemList.parsePayloadElemList(this,ct);
case GLOBALMESSAGETRANSFER:
return AntlrGMessageTransfer.parseGMessageTransfer(this,ct);
case GLOBALCHOICE:
return AntlrGChoice.parseGChoice(this,ct);
case GLOBALRECURSION:
return AntlrGRecursion.parseGRecursion(this,ct);
case GLOBALCONTINUE:
return AntlrGContinue.parseGContinue(this,ct);
case GLOBALPARALLEL:
return AntlrGParallel.parseGParallel(this,ct);
case GLOBALINTERRUPTIBLE:
return AntlrGInterruptible.parseGInterruptible(this,ct);
case GLOBALINTERRUPT:
return AntlrGInterrupt.parseGInterrupt(this,ct);
case GLOBALDO:
return AntlrGDo.parseGDo(this,ct);
case ROLEINSTANTIATIONLIST:
return AntlrRoleArgList.parseRoleArgList(this,ct);
case ROLEINSTANTIATION:
return AntlrRoleArg.parseRoleArg(this,ct);
case ARGUMENTINSTANTIATIONLIST:
return AntlrNonRoleArgList.parseNonRoleArgList(this,ct);
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}",0.9978290901914348
2445,"private static List<CommonTree> filterChildren(CommonTree ct,AntlrNodeType... types){
  List<AntlrNodeType> tmp=Arrays.asList(types);
  List<CommonTree> children=Util.toCommonTreeList(ct.getChildren());
  return children.subList(1,children.size()).stream().filter((c) -> tmp.contains(Util.getAntlrNodeType(c))).collect(Collectors.toList());
}","private static List<CommonTree> filterChildren(CommonTree ct,AntlrNodeType... types){
  List<AntlrNodeType> tmp=Arrays.asList(types);
  List<CommonTree> children=ScribParserUtil.toCommonTreeList(ct.getChildren());
  return children.subList(1,children.size()).stream().filter((c) -> tmp.contains(ScribParserUtil.getAntlrNodeType(c))).collect(Collectors.toList());
}",0.9688385269121812
2446,"private static NonRoleArg parseNonRoleArg(ScribbleParser parser,CommonTree ct){
  AntlrNodeType type=Util.getAntlrNodeType(ct);
  if (type == AntlrNodeType.MESSAGESIGNATURE) {
    NonRoleArgNode arg=(NonRoleArgNode)parser.parse(ct);
    return AstFactoryImpl.FACTORY.NonRoleArg(arg);
  }
 else {
    if (type == AntlrNodeType.QUALIFIEDNAME) {
      if (ct.getChildCount() > 1) {
        DataTypeNameNode dt=AntlrQualifiedName.toDataTypeNameNode(ct);
        return AstFactoryImpl.FACTORY.NonRoleArg(dt);
      }
 else {
        AmbigNameNode an=AntlrAmbigName.toAmbigNameNode(ct);
        return AstFactoryImpl.FACTORY.NonRoleArg(an);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + ct);
    }
  }
}","private static NonRoleArg parseNonRoleArg(ScribbleParser parser,CommonTree ct){
  AntlrNodeType type=ScribParserUtil.getAntlrNodeType(ct);
  if (type == AntlrNodeType.MESSAGESIGNATURE) {
    NonRoleArgNode arg=(NonRoleArgNode)parser.parse(ct);
    return AstFactoryImpl.FACTORY.NonRoleArg(arg);
  }
 else {
    if (type == AntlrNodeType.QUALIFIEDNAME) {
      if (ct.getChildCount() > 1) {
        DataTypeNameNode dt=AntlrQualifiedName.toDataTypeNameNode(ct);
        return AstFactoryImpl.FACTORY.NonRoleArg(dt);
      }
 else {
        AmbigNameNode an=AntlrAmbigName.toAmbigNameNode(ct);
        return AstFactoryImpl.FACTORY.NonRoleArg(an);
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + ct);
    }
  }
}",0.9924812030075189
2447,"public static List<CommonTree> getArgumentChildren(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : Util.toCommonTreeList(ct.getChildren());
}","public static List<CommonTree> getArgumentChildren(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : ScribParserUtil.toCommonTreeList(ct.getChildren());
}",0.9690140845070424
2448,"public static final List<CommonTree> getParamDeclChildren(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : Util.toCommonTreeList(ct.getChildren());
}","public static final List<CommonTree> getParamDeclChildren(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : ScribParserUtil.toCommonTreeList(ct.getChildren());
}",0.9701897018970188
2449,"public static NonRoleParamDeclList parseNonRoleParamDeclList(ScribbleParser parser,CommonTree ct){
  List<NonRoleParamDecl<NonRoleParamKind>> pds=new LinkedList<>();
  for (  CommonTree pd : getParamDeclChildren(ct)) {
    pds.add((NonRoleParamDecl<NonRoleParamKind>)parser.parse(pd));
  }
  return AstFactoryImpl.FACTORY.NonRoleParamDeclList(pds);
}","public static NonRoleParamDeclList parseNonRoleParamDeclList(ScribbleParser parser,CommonTree ct){
  List<NonRoleParamDecl<NonRoleParamKind>> pds=new LinkedList<>();
  for (  CommonTree pd : getParamDeclChildren(ct)) {
    NonRoleParamDecl<? extends NonRoleParamKind> parsed=(NonRoleParamDecl<?>)parser.parse(pd);
    @SuppressWarnings(""String_Node_Str"") NonRoleParamDecl<NonRoleParamKind> tmp=(NonRoleParamDecl<NonRoleParamKind>)parsed;
    pds.add(tmp);
  }
  return AstFactoryImpl.FACTORY.NonRoleParamDeclList(pds);
}",0.7494252873563219
2450,"public static final List<CommonTree> getPayloadElements(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : Util.toCommonTreeList(ct.getChildren());
}","public static final List<CommonTree> getPayloadElements(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : ScribParserUtil.toCommonTreeList(ct.getChildren());
}",0.96986301369863
2451,"private static PayloadElem parsePayloadElem(CommonTree ct){
  AntlrNodeType type=Util.getAntlrNodeType(ct);
  if (type == AntlrNodeType.QUALIFIEDNAME) {
    if (ct.getChildCount() > 1) {
      DataTypeNameNode dt=AntlrQualifiedName.toDataTypeNameNode(ct);
      return AstFactoryImpl.FACTORY.PayloadElem(dt);
    }
 else {
      AmbigNameNode an=AntlrAmbigName.toAmbigNameNode(ct);
      return AstFactoryImpl.FACTORY.PayloadElem(an);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ct);
  }
}","private static PayloadElem parsePayloadElem(CommonTree ct){
  AntlrNodeType type=ScribParserUtil.getAntlrNodeType(ct);
  if (type == AntlrNodeType.QUALIFIEDNAME) {
    if (ct.getChildCount() > 1) {
      DataTypeNameNode dt=AntlrQualifiedName.toDataTypeNameNode(ct);
      return AstFactoryImpl.FACTORY.PayloadElem(dt);
    }
 else {
      AmbigNameNode an=AntlrAmbigName.toAmbigNameNode(ct);
      return AstFactoryImpl.FACTORY.PayloadElem(an);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + ct);
  }
}",0.989412897016362
2452,"public static final List<CommonTree> getRoleInstantiationChildren(CommonTree ct){
  return Util.toCommonTreeList(ct.getChildren());
}","public static final List<CommonTree> getRoleInstantiationChildren(CommonTree ct){
  return ScribParserUtil.toCommonTreeList(ct.getChildren());
}",0.96028880866426
2453,"public static List<CommonTree> getRoleDeclChildren(CommonTree ct){
  return Util.toCommonTreeList(ct.getChildren());
}","public static List<CommonTree> getRoleDeclChildren(CommonTree ct){
  return ScribParserUtil.toCommonTreeList(ct.getChildren());
}",0.9554655870445344
2454,"public static List<CommonTree> getBlockChildren(CommonTree ct){
  List<?> children=ct.getChildren();
  return Util.toCommonTreeList(children.subList(BLOCK_CHILDREN_START_INDEX,children.size()));
}","public static List<CommonTree> getBlockChildren(CommonTree ct){
  List<?> children=ct.getChildren();
  return ScribParserUtil.toCommonTreeList(children.subList(BLOCK_CHILDREN_START_INDEX,children.size()));
}",0.9727047146401984
2455,"public static List<CommonTree> getInteractionChildren(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : Util.toCommonTreeList(ct.getChildren());
}","public static List<CommonTree> getInteractionChildren(CommonTree ct){
  return (ct.getChildCount() == 0) ? Collections.emptyList() : ScribParserUtil.toCommonTreeList(ct.getChildren());
}",0.969529085872576
2456,"public static List<CommonTree> getMessageChildren(CommonTree ct){
  return Util.toCommonTreeList(ct.getChildren().subList(MESSAGE_CHILDREN_START_INDEX,ct.getChildCount()));
}","public static List<CommonTree> getMessageChildren(CommonTree ct){
  return ScribParserUtil.toCommonTreeList(ct.getChildren().subList(MESSAGE_CHILDREN_START_INDEX,ct.getChildCount()));
}",0.9693593314763232
2457,"public static List<CommonTree> getInterruptChildren(CommonTree ct){
  List<?> children=ct.getChildren();
  return Util.toCommonTreeList(children.subList(INTERRUPT_CHILDREN_START_INDEX,children.size()));
}","public static List<CommonTree> getInterruptChildren(CommonTree ct){
  List<?> children=ct.getChildren();
  return ScribParserUtil.toCommonTreeList(children.subList(INTERRUPT_CHILDREN_START_INDEX,children.size()));
}",0.973747016706444
2458,"public static List<CommonTree> getDestChildren(CommonTree ct){
  return Util.toCommonTreeList(ct.getChildren().subList(DESTINATION_CHILDREN_START_INDEX,ct.getChildCount()));
}","public static List<CommonTree> getDestChildren(CommonTree ct){
  return ScribParserUtil.toCommonTreeList(ct.getChildren().subList(DESTINATION_CHILDREN_START_INDEX,ct.getChildCount()));
}",0.969529085872576
2459,"protected static MessageNode parseMessage(ScribbleParser parser,CommonTree ct){
  AntlrNodeType type=Util.getAntlrNodeType(ct);
  if (type == AntlrNodeType.MESSAGESIGNATURE) {
    return (MessageSigNode)parser.parse(ct);
  }
 else {
    return (ct.getChildCount() == 1) ? AntlrAmbigName.toAmbigNameNode(ct) : AntlrQualifiedName.toMessageSigNameNode(ct);
  }
}","protected static MessageNode parseMessage(ScribbleParser parser,CommonTree ct){
  AntlrNodeType type=ScribParserUtil.getAntlrNodeType(ct);
  if (type == AntlrNodeType.MESSAGESIGNATURE) {
    return (MessageSigNode)parser.parse(ct);
  }
 else {
    return (ct.getChildCount() == 1) ? AntlrAmbigName.toAmbigNameNode(ct) : AntlrQualifiedName.toMessageSigNameNode(ct);
  }
}",0.9849108367626886
2460,"public static final List<CommonTree> getBlockChildren(CommonTree ct){
  return Util.toCommonTreeList(ct.getChildren());
}","public static final List<CommonTree> getBlockChildren(CommonTree ct){
  return ScribParserUtil.toCommonTreeList(ct.getChildren());
}",0.9565217391304348
2461,"@Override public ScribNode leaveProjectedRoleDeclFixing(ScribNode parent,ScribNode child,ProjectedRoleDeclFixer fixer,ScribNode visited) throws ScribbleException {
  LDo ld=(LDo)visited;
  LProtocolDecl lpd=ld.getTargetProtocolDecl(fixer.getJobContext(),fixer.getModuleContext());
  Iterator<Role> roleargs=ld.roles.args.stream().map((ra) -> ra.val.toName()).collect(Collectors.toList()).iterator();
  Map<Role,Role> rolemap=lpd.header.roledecls.getRoles().stream().collect(Collectors.toMap((r) -> r,(r) -> roleargs.next()));
  Set<Role> occs=((LProtocolDeclDel)lpd.del()).getProtocolDeclContext().getRoleOccurrences().stream().map((r) -> rolemap.get(r)).collect(Collectors.toSet());
  List<RoleArg> ras=ld.roles.args.stream().filter((ra) -> occs.contains(ra.val.toName())).collect(Collectors.toList());
  RoleArgList roles=ld.roles.reconstruct(ras);
  return super.leaveProjectedRoleDeclFixing(parent,child,fixer,ld.reconstruct(roles,ld.args,ld.getProtocolNameNode()));
}","@Override public ScribNode leaveProjectedRoleDeclFixing(ScribNode parent,ScribNode child,ProjectedRoleDeclFixer fixer,ScribNode visited) throws ScribbleException {
  LDo ld=(LDo)visited;
  LProtocolDecl lpd=ld.getTargetProtocolDecl(fixer.getJobContext(),fixer.getModuleContext());
  Iterator<Role> roleargs=ld.roles.args.stream().map((ra) -> ra.val.toName()).collect(Collectors.toList()).iterator();
  JobContext jcontext=fixer.getJobContext();
  ModuleContext mcontext=fixer.getModuleContext();
  String mname=ld.getTargetFullProtocolName(mcontext).getPrefix().toString();
  mname=mname.substring(0,mname.lastIndexOf('_'));
  mname=mname.substring(0,mname.lastIndexOf('_'));
  String simppn=ld.getTargetFullProtocolName(mcontext).getLastElement();
  simppn=simppn.substring(0,simppn.lastIndexOf('_'));
  ModuleName modname;
  if (mname.indexOf('.') == -1) {
    modname=new ModuleName(mname);
  }
 else {
    String[] elems=mname.split(""String_Node_Str"");
    PackageName packname=new PackageName(Arrays.copyOf(elems,elems.length - 1));
    modname=new ModuleName(packname,new ModuleName(elems[elems.length - 1]));
  }
  GProtocolDecl gpd=(GProtocolDecl)jcontext.getModule(modname).getProtocolDecl(new GProtocolName(simppn));
  Map<Role,Role> rolemap=gpd.header.roledecls.getRoles().stream().collect(Collectors.toMap((r) -> r,(r) -> roleargs.next()));
  Set<Role> occs=((LProtocolDeclDel)lpd.del()).getProtocolDeclContext().getRoleOccurrences().stream().map((r) -> rolemap.get(r)).collect(Collectors.toSet());
  List<RoleArg> ras=ld.roles.args.stream().filter((ra) -> occs.contains(ra.val.toName())).collect(Collectors.toList());
  RoleArgList roles=ld.roles.reconstruct(ras);
  return super.leaveProjectedRoleDeclFixing(parent,child,fixer,ld.reconstruct(roles,ld.args,ld.getProtocolNameNode()));
}",0.7008300252616384
2462,"@Override public void enterFsmConstruction(ModelNode parent,ModelNode child,FsmConstructor conv){
  super.enterFsmConstruction(parent,child,conv);
  if (!conv.isCycle()) {
    SubprotocolSig subsig=conv.peekStack();
    Set<String> labs=new HashSet<>();
    labs.add(subsig.toString());
    ProtocolState s=conv.builder.newState(labs);
    conv.builder.setEntry(s);
    conv.builder.setSubprotocolEntry(subsig);
  }
}","@Override public void enterFsmConstruction(ModelNode parent,ModelNode child,FsmConstructor conv){
  super.enterFsmConstruction(parent,child,conv);
  if (!conv.isCycle()) {
    SubprotocolSig subsig=conv.peekStack();
    Set<String> labs=new HashSet<>(conv.builder.getEntry().getLabels());
    labs.add(subsig.toString());
    ProtocolState s=conv.builder.newState(labs);
    conv.builder.setEntry(s);
    conv.builder.setSubprotocolEntry(subsig);
  }
}",0.9597238204833142
2463,"@Override public void enterFsmConstruction(ModelNode parent,ModelNode child,FsmConstructor conv){
  super.enterFsmConstruction(parent,child,conv);
  LRecursion lr=(LRecursion)child;
  RecVar rv=lr.recvar.toName();
  Set<String> labs=new HashSet<>();
  labs.add(rv.toString());
  ProtocolState s=conv.builder.newState(labs);
  conv.builder.setEntry(s);
  conv.builder.setRecursionEntry(rv);
}","@Override public void enterFsmConstruction(ModelNode parent,ModelNode child,FsmConstructor conv){
  super.enterFsmConstruction(parent,child,conv);
  LRecursion lr=(LRecursion)child;
  RecVar rv=lr.recvar.toName();
  Set<String> labs=new HashSet<>(conv.builder.getEntry().getLabels());
  labs.add(rv.toString());
  ProtocolState s=conv.builder.newState(labs);
  conv.builder.setEntry(s);
  conv.builder.setRecursionEntry(rv);
}",0.8984088127294981
2464,"@Override public String toString(){
  System.out.println(""String_Node_Str"" + getDeclName());
  return getKeyword() + ""String_Node_Str"" + getDeclName().toString();
}","@Override public String toString(){
  return getKeyword() + ""String_Node_Str"" + getDeclName().toString();
}",0.7896678966789668
2465,"public static MessageSigDecl parseMessageSignatureDecl(ScribbleParser parser,CommonTree ct){
  CommonTree tmp1=getSchemaChild(ct);
  String schema=AntlrSimpleName.getName(tmp1);
  CommonTree tmp2=getExtNameChild(ct);
  String extName=AntlrExtIdentifier.getName(tmp2);
  CommonTree tmp3=getExtNameChild(ct);
  String source=AntlrExtIdentifier.getName(tmp3);
  MessageSigNameNode alias=AntlrSimpleName.toMessageSigNameNode(getAliasChild(ct));
  return ModelFactoryImpl.FACTORY.MessageSigDecl(schema,extName,source,alias);
}","public static MessageSigDecl parseMessageSignatureDecl(ScribbleParser parser,CommonTree ct){
  CommonTree tmp1=getSchemaChild(ct);
  String schema=AntlrSimpleName.getName(tmp1);
  CommonTree tmp2=getExtNameChild(ct);
  String extName=AntlrExtIdentifier.getName(tmp2);
  CommonTree tmp3=getSourceChild(ct);
  String source=AntlrExtIdentifier.getName(tmp3);
  MessageSigNameNode alias=AntlrSimpleName.toMessageSigNameNode(getAliasChild(ct));
  return ModelFactoryImpl.FACTORY.MessageSigDecl(schema,extName,source,alias);
}",0.989433237271854
2466,"public ScribbleFsm build(){
  Set<ProtocolState> terms=this.init.findTerminals();
  if (terms.size() > 1) {
    throw new RuntimeException(""String_Node_Str"" + terms);
  }
  ProtocolState term=(terms.size() == 0) ? null : terms.iterator().next();
  ScribbleFsm f=new ScribbleFsm(this.init,term);
  this.init=null;
  return f;
}","public ScribbleFsm build(){
  ProtocolState term=validate();
  ScribbleFsm f=new ScribbleFsm(this.init,term);
  this.init=null;
  this.states.clear();
  return f;
}",0.5510204081632653
2467,"public ProtocolState makeInit(Set<RecVar> labs){
  if (this.init != null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.init=new ProtocolState(labs);
  return this.init;
}","public ProtocolState makeInit(Set<RecVar> labs){
  if (this.init != null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.init=newState(labs);
  return this.init;
}",0.975609756097561
2468,"public void addEdge(ProtocolState s,MessageId op,ProtocolState succ){
  s.addEdge(op,succ);
}","public void addEdge(ProtocolState s,MessageId op,ProtocolState succ){
  if (!this.states.contains(s)) {
    throw new RuntimeException(""String_Node_Str"" + s);
  }
  if (!this.states.contains(succ)) {
    this.states.add(succ);
  }
  s.addEdge(op,succ);
}",0.5072046109510087
2469,"public ProtocolState newState(Set<RecVar> labs){
  return new ProtocolState(labs);
}","public ProtocolState newState(Set<RecVar> labs){
  ProtocolState s=new ProtocolState(labs);
  this.states.add(s);
  return s;
}",0.7582938388625592
2470,"public Set<RecVar> getLabels(){
  return this.labs;
}","public Set<RecVar> getLabels(){
  return new HashSet<>(this.labs);
}",0.8760330578512396
2471,"public Map<MessageId,ProtocolState> getEdges(){
  return this.edges;
}","protected Map<MessageId,ProtocolState> getEdges(){
  return this.edges;
}",0.9230769230769232
2472,"@Override public LInteractionSeq leaveFsmConversion(ModelNode parent,ModelNode child,FsmConverter conv,ModelNode visited){
  LInteractionSeq lis=(LInteractionSeq)visited;
  FsmBuilder b=new FsmBuilder();
  b.makeInit(Collections.emptySet());
  ScribbleFsm f=b.build();
  for (  InteractionNode<Local> li : lis.actions) {
    f=f.stitch(((FsmBuildingEnv)li.del().env()).getFsm());
  }
  FsmBuildingEnv env=conv.popEnv();
  conv.pushEnv(env.setFsm(f));
  return (LInteractionSeq)super.popAndSetVisitorEnv(parent,child,conv,lis);
}","@Override public LInteractionSeq leaveFsmConversion(ModelNode parent,ModelNode child,FsmConverter conv,ModelNode visited){
  LInteractionSeq lis=(LInteractionSeq)visited;
  FsmBuilder b=new FsmBuilder();
  ScribbleFsm f;
  if (lis.isEmpty()) {
    b.makeInit(Collections.emptySet());
    f=b.build();
  }
 else {
    f=((FsmBuildingEnv)lis.actions.get(0).del().env()).getFsm();
    for (    InteractionNode<Local> li : lis.actions.subList(1,lis.actions.size())) {
      f=f.stitch(((FsmBuildingEnv)li.del().env()).getFsm());
    }
  }
  FsmBuildingEnv env=conv.popEnv();
  conv.pushEnv(env.setFsm(f));
  return (LInteractionSeq)super.popAndSetVisitorEnv(parent,child,conv,lis);
}",0.848384424192212
2473,"@Override public Instantiation<T> visitChildren(ModelVisitor nv) throws ScribbleException {
  T arg=visitChildWithClassCheck(this,this.arg,nv);
  return reconstruct(arg);
}","@Override public Instantiation<T> visitChildren(ModelVisitor nv) throws ScribbleException {
  @SuppressWarnings(""String_Node_Str"") T arg=(T)this.visitChild(this.arg,nv);
  return reconstruct(arg);
}",0.827027027027027
2474,AmbiguousNameNode AmbiguousNameNode(String identifier);,AmbigNameNode AmbiguousNameNode(String identifier);,0.9622641509433962
2475,"@Override public AmbiguousNameNode AmbiguousNameNode(String identifier){
  AmbiguousNameNode ann=new AmbiguousNameNode(identifier);
  ann=(AmbiguousNameNode)ann.del(new AmbiguousNameDelegate());
  return ann;
}","@Override public AmbigNameNode AmbiguousNameNode(String identifier){
  AmbigNameNode ann=new AmbigNameNode(identifier);
  ann=(AmbigNameNode)ann.del(new AmbigNameDel());
  return ann;
}",0.9367088607594936
2476,"protected final static <T extends ModelNode>T visitChildWithClassCheck(ModelNode parent,T child,ModelVisitor nv) throws ScribbleException {
  ModelNode visited=((ModelNodeBase)parent).visitChild(child,nv);
  if (visited.getClass() != child.getClass()) {
    throw new RuntimeException(""String_Node_Str"" + child.getClass() + ""String_Node_Str""+ visited.getClass());
  }
  @SuppressWarnings(""String_Node_Str"") T t=(T)visited;
  return t;
}","protected final static <T extends ModelNode>T visitChildWithClassCheck(ModelNode parent,T child,ModelVisitor nv) throws ScribbleException {
  ModelNode visited=((ModelNodeBase)parent).visitChild(child,nv);
  if (visited.getClass() != child.getClass()) {
    throw new RuntimeException(nv.getClass() + ""String_Node_Str"" + child.getClass()+ ""String_Node_Str""+ visited.getClass());
  }
  @SuppressWarnings(""String_Node_Str"") T t=(T)visited;
  return t;
}",0.8703494926719278
2477,"@Override public Name<K> toName(){
  if (this.kind.equals(SigKind.KIND)) {
    return Kind.castName(kind,new MessageSigName(this.identifier));
  }
 else   if (this.kind.equals(DataTypeKind.KIND)) {
    return Kind.castName(kind,new DataType(this.identifier));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + this.kind);
  }
}","@Override public Name<K> toName(){
  if (this.kind.equals(SigKind.KIND)) {
    return Kind.castName(this.kind,new MessageSigName(this.identifier));
  }
 else   if (this.kind.equals(DataTypeKind.KIND)) {
    return Kind.castName(this.kind,new DataType(this.identifier));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + this.kind);
  }
}",0.9855072463768116
2478,"@Override public Argument<? extends Kind> toArgument(){
  throw new RuntimeException(""String_Node_Str"" + this);
}","@Override public Argument<? extends Kind> toArgument(){
  if (this.kind.equals(DataTypeKind.KIND)) {
    throw new RuntimeException(""String_Node_Str"" + this);
  }
 else   if (this.kind.equals(SigKind.KIND)) {
    return toMessage();
  }
  throw new RuntimeException(""String_Node_Str"" + this);
}",0.5552825552825553
2479,"private void pushNameMaps(ProtocolName fullname,List<Role> roleargs,List<Argument<? extends Kind>> argargs){
  ProtocolDecl<? extends ProtocolKind> pd=getJobContext().getModule(fullname.getPrefix()).getProtocolDecl(fullname.getSimpleName());
  List<Role> roleparams=pd.header.roledecls.getRoles();
  List<Name<Kind>> argparams=pd.header.paramdecls.getParameters();
  Map<Role,RoleNode> rolemap=rolemaps.peek();
  Map<Argument<? extends Kind>,ArgumentNode> argmap=argmaps.peek();
  Iterator<Role> roleargiter=roleargs.iterator();
  Iterator<Argument<? extends Kind>> argargiter=argargs.iterator();
  Map<Role,RoleNode> newrolemap=roleparams.stream().collect(Collectors.toMap((r) -> r,(r) -> this.rolemaps.get(0).get(roleargiter.next())));
  Map<Argument<? extends Kind>,ArgumentNode> newargmap=argparams.stream().collect(Collectors.toMap((a) -> (Argument<? extends Kind>)a,(a) -> this.argmaps.get(0).get(argargiter.next())));
  this.rolemaps.push(newrolemap);
  this.argmaps.push(newargmap);
}","private void pushNameMaps(ProtocolName fullname,Do doo,List<Role> roleargs,List<Argument<? extends Kind>> argargs){
  ProtocolDecl<? extends ProtocolKind> pd=getJobContext().getModule(fullname.getPrefix()).getProtocolDecl(fullname.getSimpleName());
  List<Role> roleparams=pd.header.roledecls.getRoles();
  List<Name<Kind>> argparams=pd.header.paramdecls.getParameters();
  Map<Role,RoleNode> rolemap=rolemaps.peek();
  Map<Argument<? extends Kind>,ArgumentNode> argmap=argmaps.peek();
  Iterator<Role> roleargiter=roleargs.iterator();
  Iterator<Argument<? extends Kind>> argargiter=argargs.iterator();
  Map<Role,RoleNode> newrolemap=roleparams.stream().collect(Collectors.toMap((r) -> r,(r) -> this.rolemaps.get(0).get(roleargiter.next())));
  Map<Argument<? extends Kind>,ArgumentNode> newargmap=new HashMap<>();
  Iterator<ArgumentNode> foo=doo.arginstans.getArgumentNodes().iterator();
  for (  Name<Kind> p : argparams) {
    Argument<? extends Kind> tmp=argargiter.next();
    ArgumentNode a;
    if (this.argmaps.get(0).containsKey(tmp)) {
      a=this.argmaps.get(0).get(tmp);
      foo.next();
    }
 else {
      a=foo.next();
    }
    newargmap.put((Argument<? extends Kind>)p,a);
  }
  this.rolemaps.push(newrolemap);
  this.argmaps.push(newargmap);
}",0.7325066430469442
2480,"private void enterSubprotocol(Do doo){
  ModuleContext mcontext=getModuleContext();
  ProtocolName fullname=mcontext.getFullProtocolDeclName(doo.proto.toName());
  List<Role> roleargs=doo.roleinstans.getRoles();
  List<Argument<? extends Kind>> argargs=doo.arginstans.getArguments(getScope());
  pushSubprotocolSignature(fullname,roleargs,argargs);
  pushNameMaps(fullname,roleargs,argargs);
}","private void enterSubprotocol(Do doo){
  ModuleContext mcontext=getModuleContext();
  ProtocolName fullname=mcontext.getFullProtocolDeclName(doo.proto.toName());
  List<Role> roleargs=doo.roleinstans.getRoles();
  List<Argument<? extends Kind>> argargs=doo.arginstans.getArguments(getScope());
  pushSubprotocolSignature(fullname,roleargs,argargs);
  pushNameMaps(fullname,doo,roleargs,argargs);
}",0.9949367088607596
2481,"public ModelNode parse(CommonTree ct){
  AntlrNodeType type=Util.getAntlrNodeType(ct);
switch (type) {
case MODULE:
    return AntlrModule.parseModule(this,ct);
case MODULEDECL:
  return AntlrModuleDecl.parseModuleDecl(this,ct);
case IMPORTMODULE:
return AntlrImportModule.parseImportModule(this,ct);
case GLOBALPROTOCOLDECL:
return AntlrGlobalProtocolDecl.parseGlobalPrototocolDecl(this,ct);
case ROLEDECLLIST:
return AntlrRoleDeclList.parseRoleDeclList(this,ct);
case ROLEDECL:
return AntlrRoleDecl.parseRoleDecl(this,ct);
case PARAMETERDECLLIST:
return AntlrParameterDeclList.parseParameterDeclList(this,ct);
case PARAMETERDECL:
return AntlrParameterDecl.parseParameterDecl(this,ct);
case GLOBALPROTOCOLHEADER:
return AntlrGlobalProtocolHeader.parseGlobalProtocolHeader(this,ct);
case GLOBALPROTOCOLDEF:
return AntlrGlobalProtocolDefinition.parseGlobalProtocolDefinition(this,ct);
case GLOBALPROTOCOLBLOCK:
return AntlrGlobalProtocolBlock.parseGlobalProtocolBlock(this,ct);
case GLOBALINTERACTIONSEQUENCE:
return AntlrGlobalInteractionSequence.parseGlobalInteractionSequence(this,ct);
case MESSAGESIGNATURE:
return AntlrMessageSignature.parseMessageSignature(this,ct);
case PAYLOAD:
return AntlrPayload.parsePayload(this,ct);
case PAYLOADELEMENT:
return AntlrPayloadElement.parsePayloadElement(this,ct);
case GLOBALMESSAGETRANSFER:
return AntlrGlobalMessageTransfer.parseGlobalMessageTransfer(this,ct);
case GLOBALCHOICE:
return AntlrGlobalChoice.parseGlobalChoice(this,ct);
case GLOBALRECURSION:
return AntlrGlobalRecursion.parseGlobalRecursion(this,ct);
case GLOBALCONTINUE:
return AntlrGlobalContinue.parseGlobalContinue(this,ct);
case GLOBALPARALLEL:
return AntlrGlobalParallel.parseGlobalParallel(this,ct);
case GLOBALINTERRUPTIBLE:
return AntlrGlobalInterruptible.parseGlobalInterruptible(this,ct);
case GLOBALINTERRUPT:
return AntlrGlobalInterrupt.parseGlobalInterrupt(this,ct);
case GLOBALDO:
return AntlrGlobalDo.parseGlobalDo(this,ct);
case ROLEINSTANTIATIONLIST:
return AntlrRoleInstantiationList.parseRoleInstantiationList(this,ct);
case ROLEINSTANTIATION:
return AntlrRoleInstantiation.parseRoleInstantiation(this,ct);
case ARGUMENTINSTANTIATIONLIST:
return AntlrArgumentInstantiationList.parseArgumentInstantiationList(this,ct);
case ARGUMENTINSTANTIATION:
return AntlrArgumentInstantiation.parseArgumentInstantiation(this,ct);
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}","public ModelNode parse(CommonTree ct){
  AntlrNodeType type=Util.getAntlrNodeType(ct);
switch (type) {
case MODULE:
    return AntlrModule.parseModule(this,ct);
case MODULEDECL:
  return AntlrModuleDecl.parseModuleDecl(this,ct);
case IMPORTMODULE:
return AntlrImportModule.parseImportModule(this,ct);
case GLOBALPROTOCOLDECL:
return AntlrGlobalProtocolDecl.parseGlobalPrototocolDecl(this,ct);
case ROLEDECLLIST:
return AntlrRoleDeclList.parseRoleDeclList(this,ct);
case ROLEDECL:
return AntlrRoleDecl.parseRoleDecl(this,ct);
case PARAMETERDECLLIST:
return AntlrParameterDeclList.parseParameterDeclList(this,ct);
case PARAMETERDECL:
return AntlrParameterDecl.parseParameterDecl(this,ct);
case GLOBALPROTOCOLHEADER:
return AntlrGlobalProtocolHeader.parseGlobalProtocolHeader(this,ct);
case GLOBALPROTOCOLDEF:
return AntlrGlobalProtocolDefinition.parseGlobalProtocolDefinition(this,ct);
case GLOBALPROTOCOLBLOCK:
return AntlrGlobalProtocolBlock.parseGlobalProtocolBlock(this,ct);
case GLOBALINTERACTIONSEQUENCE:
return AntlrGlobalInteractionSequence.parseGlobalInteractionSequence(this,ct);
case MESSAGESIGNATURE:
return AntlrMessageSignature.parseMessageSignature(this,ct);
case PAYLOAD:
return AntlrPayload.parsePayload(this,ct);
case PAYLOADELEMENT:
return AntlrPayloadElement.parsePayloadElement(this,ct);
case GLOBALMESSAGETRANSFER:
return AntlrGlobalMessageTransfer.parseGlobalMessageTransfer(this,ct);
case GLOBALCHOICE:
return AntlrGlobalChoice.parseGlobalChoice(this,ct);
case GLOBALRECURSION:
return AntlrGlobalRecursion.parseGlobalRecursion(this,ct);
case GLOBALCONTINUE:
return AntlrGlobalContinue.parseGlobalContinue(this,ct);
case GLOBALPARALLEL:
return AntlrGlobalParallel.parseGlobalParallel(this,ct);
case GLOBALINTERRUPTIBLE:
return AntlrGlobalInterruptible.parseGlobalInterruptible(this,ct);
case GLOBALINTERRUPT:
return AntlrGlobalInterrupt.parseGlobalInterrupt(this,ct);
case GLOBALDO:
return AntlrGlobalDo.parseGlobalDo(this,ct);
case ROLEINSTANTIATIONLIST:
return AntlrRoleInstantiationList.parseRoleInstantiationList(this,ct);
case ROLEINSTANTIATION:
return AntlrRoleInstantiation.parseRoleInstantiation(this,ct);
case ARGUMENTINSTANTIATIONLIST:
return AntlrArgumentInstantiationList.parseArgumentInstantiationList(this,ct);
case ARGUMENTINSTANTIATION:
return AntlrArgumentInstantiation.parseArgumentInstantiation(this,ct);
case AMBIGUOUSNAME:
return AntlrArgumentInstantiation.parseArgumentInstantiation(this,ct);
default :
throw new RuntimeException(""String_Node_Str"" + type);
}
}",0.9814852492370296
2482,"public static ArgumentInstantiationList parseArgumentInstantiationList(ScribbleParser parser,CommonTree ct){
  List<ArgumentInstantiation> as=new LinkedList<>();
  for (  CommonTree a : getArgumentChildren(ct)) {
    as.add((ArgumentInstantiation)parser.parse(a));
  }
  return ModelFactoryImpl.FACTORY.ArgumentInstantiationList(as);
}","public static ArgumentInstantiationList parseArgumentInstantiationList(ScribbleParser parser,CommonTree ct){
  List<ArgumentInstantiation> as=new LinkedList<>();
  for (  CommonTree a : getArgumentChildren(ct)) {
    AntlrNodeType type=Util.getAntlrNodeType(a);
    if (type == AntlrNodeType.MESSAGESIGNATURE) {
      ArgumentNode arg=(ArgumentNode)parser.parse(a);
      as.add(ModelFactoryImpl.FACTORY.ArgumentInstantiation(arg));
    }
 else {
      as.add(ModelFactoryImpl.FACTORY.ArgumentInstantiation(AntlrAmbiguousName.toAmbiguousNameNode(a)));
    }
  }
  return ModelFactoryImpl.FACTORY.ArgumentInstantiationList(as);
}",0.5794392523364486
2483,"public static AmbiguousNameNode toAmbiguousNameNode(CommonTree ct){
  return ModelFactoryImpl.FACTORY.AmbiguousNameNode(getName(ct));
}","public static AmbigNameNode toAmbiguousNameNode(CommonTree ct){
  return ModelFactoryImpl.FACTORY.AmbiguousNameNode(getName(ct));
}",0.9849624060150376
2484,"@Override public GDo leaveWFChoiceCheck(ModelNode parent,ModelNode child,WellFormedChoiceChecker checker,ModelNode visited) throws ScribbleException {
  checker.pushEnv(checker.popEnv().leaveWFChoiceCheck(checker));
  return popAndSetVisitorEnv(parent,child,checker,(GDo)visited);
}","@Override public GDo leaveWFChoiceCheck(ModelNode parent,ModelNode child,WellFormedChoiceChecker checker,ModelNode visited) throws ScribbleException {
  WellFormedChoiceEnv env=checker.popEnv();
{
    env=env.leaveWFChoiceCheck(checker);
  }
  setEnv(env);
  checker.pushEnv(checker.popEnv().mergeContext(env));
  return (GDo)visited;
}",0.6375404530744336
2485,"private void pushSubprotocolSignature(ProtocolName fullname,List<Role> roleargs,List<Argument<? extends Kind>> argargs){
  Map<Role,RoleNode> rolemap=rolemaps.peek();
  Map<Argument<? extends Kind>,ArgumentNode> argmap=argmaps.peek();
  List<Role> roles=new LinkedList<>(roleargs);
  List<Argument<? extends Kind>> args=new LinkedList<>(argargs);
  SubprotocolSignature ssubsig=new SubprotocolSignature(fullname,getScope(),roles,args);
  this.stack.add(ssubsig);
}","private void pushSubprotocolSignature(ProtocolName fullname,List<Role> roleargs,List<Argument<? extends Kind>> argargs){
  Map<Role,RoleNode> rolemap=rolemaps.peek();
  Map<Argument<? extends Kind>,ArgumentNode> argmap=argmaps.peek();
  List<Role> roles=new LinkedList<>(roleargs);
  List<Argument<? extends Kind>> args=new LinkedList<>(argargs);
  SubprotocolSignature ssubsig=new SubprotocolSignature(fullname,roles,args);
  this.stack.add(ssubsig);
}",0.9880043620501636
2486,"public WellFormedChoiceEnv leaveWFChoiceCheck(WellFormedChoiceChecker checker) throws ScribbleException {
  WellFormedChoiceEnv copy=copy();
  SubprotocolSignature subsig=checker.peekStack();
  if (copy.recording.contains(subsig)) {
    copy.recording.remove(subsig);
  }
  if (checker.isCycle()) {
    List<SubprotocolSignature> stack=checker.getStack();
    stack=stack.subList(0,stack.size() - 1);
    Scope scope=stack.get(stack.size() - 1).scope;
    int entry=checker.getCycleEntryIndex();
    Scope prev=(entry == 0) ? Scope.ROOT_SCOPE : stack.get(entry).scope;
    for (int i=checker.getCycleEntryIndex(); i < stack.size(); i++) {
      SubprotocolSignature ssubsig=stack.get(i);
      if (!prev.equals(ssubsig.scope)) {
        scope=new Scope(scope,ssubsig.scope.getSimpleName());
        prev=ssubsig.scope;
      }
      copy.addSubprotocolEnabled(scope,ssubsig);
    }
  }
  return copy;
}","public WellFormedChoiceEnv leaveWFChoiceCheck(WellFormedChoiceChecker checker) throws ScribbleException {
  WellFormedChoiceEnv copy=copy();
  SubprotocolSignature subsig=checker.peekStack();
  if (copy.recording.contains(subsig)) {
    copy.recording.remove(subsig);
  }
  if (checker.isCycle()) {
    List<SubprotocolSignature> stack=checker.getStack();
    stack=stack.subList(0,stack.size() - 1);
    int entry=checker.getCycleEntryIndex();
    for (int i=checker.getCycleEntryIndex(); i < stack.size(); i++) {
      SubprotocolSignature ssubsig=stack.get(i);
      copy.addSubprotocolEnabled(ssubsig);
    }
  }
  return copy;
}",0.7478827361563518
2487,"private void addSubprotocolEnabled(Scope scope,SubprotocolSignature subsig){
  MessageMap enabled=this.subsigs.get(subsig);
  for (  Role dest : enabled.getLeftKeys()) {
    for (    Role src : enabled.getRightKeys(dest)) {
      List<MessageId> sms=new LinkedList<>();
      for (      MessageId sm : enabled.getMessages(dest,src)) {
        sms.add(sm);
      }
      addMessages(this.initial,src,dest,sms);
    }
  }
}","private void addSubprotocolEnabled(SubprotocolSignature subsig){
  MessageMap enabled=this.subsigs.get(subsig);
  for (  Role dest : enabled.getLeftKeys()) {
    for (    Role src : enabled.getRightKeys(dest)) {
      List<MessageId> sms=new LinkedList<>();
      for (      MessageId sm : enabled.getMessages(dest,src)) {
        sms.add(sm);
      }
      addMessages(this.initial,src,dest,sms);
    }
  }
}",0.9855421686746988
2488,"public ScopedSubprotocolSignature(Scope scope,ProtocolName fmn,List<Role> roles,List<Argument<? extends Kind>> args){
  super(fmn,null,roles,args);
  this.sig=null;
  this.scope=scope;
}","public ScopedSubprotocolSignature(Scope scope,ProtocolName fmn,List<Role> roles,List<Argument<? extends Kind>> args){
  super(fmn,roles,args);
  this.sig=null;
  this.scope=scope;
}",0.9863760217983653
2489,"@Override public int hashCode(){
  int hash=1093;
  hash=31 * hash + this.fmn.hashCode();
  hash=31 * hash + this.scope.hashCode();
  hash=31 * hash + this.roles.hashCode();
  hash=31 * hash + this.args.hashCode();
  return hash;
}","@Override public int hashCode(){
  int hash=1093;
  hash=31 * hash + this.fmn.hashCode();
  hash=31 * hash + this.roles.hashCode();
  hash=31 * hash + this.args.hashCode();
  return hash;
}",0.9
2490,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof SubprotocolSignature)) {
    return false;
  }
  SubprotocolSignature subsig=(SubprotocolSignature)o;
  return this.fmn.equals(subsig.fmn) && this.scope.equals(subsig.scope) && this.roles.equals(subsig.roles)&& this.args.equals(subsig.args);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof SubprotocolSignature)) {
    return false;
  }
  SubprotocolSignature subsig=(SubprotocolSignature)o;
  return this.fmn.equals(subsig.fmn) && this.roles.equals(subsig.roles) && this.args.equals(subsig.args);
}",0.9090909090909092
2491,"@Override public String toString(){
  return this.scope + ""String_Node_Str"" + this.fmn+ ""String_Node_Str""+ this.args+ ""String_Node_Str""+ this.roles+ ""String_Node_Str"";
}","@Override public String toString(){
  return this.fmn + ""String_Node_Str"" + this.args+ ""String_Node_Str""+ this.roles+ ""String_Node_Str"";
}",0.8794788273615635
2492,"public SubprotocolSignature(ProtocolName fmn,Scope scope,List<Role> roles,List<Argument<? extends Kind>> args){
  this.fmn=fmn;
  this.scope=scope;
  this.roles=new LinkedList<>(roles);
  this.args=new LinkedList<>(args);
}","public SubprotocolSignature(ProtocolName fmn,List<Role> roles,List<Argument<? extends Kind>> args){
  this.fmn=fmn;
  this.roles=new LinkedList<>(roles);
  this.args=new LinkedList<>(args);
}",0.9227053140096618
2493,"protected LocalCatches(CommonTree ct,RoleNode src,List<MessageNode> msgs,List<RoleNode> dests,GlobalInterruptContext gicontext,Env env){
  super(ct,src,msgs,dests,gicontext,env);
}","protected LocalCatches(RoleNode src,List<MessageNode> msgs){
  super(src,msgs);
}",0.6206896551724138
2494,"protected LocalInterrupt(CommonTree ct,RoleNode src,List<MessageNode> msgs,List<RoleNode> dests,GlobalInterruptContext gicontext,Env env){
  super(ct,src,msgs,gicontext,env);
  this.dests=new LinkedList<>(dests);
}","protected LocalInterrupt(RoleNode src,List<MessageNode> msgs){
  super(src,msgs);
}",0.5589225589225589
2495,"protected LocalInterruptible(CommonTree ct,ScopeNode scope,LocalProtocolBlock block,List<LocalInterrupt> interrs,CompoundInteractionNodeContext icontext,Env env){
  super(ct,scope,block,interrs,icontext,env);
}","protected LocalInterruptible(ScopeNode scope,LocalProtocolBlock block,List<LocalInterrupt> interrs){
  super(scope,block,interrs);
}",0.7719298245614035
2496,"protected LocalThrows(CommonTree ct,RoleNode src,List<MessageNode> msgs,List<RoleNode> dests,GlobalInterruptContext gicontext,Env env){
  super(ct,src,msgs,dests,gicontext,env);
}","protected LocalThrows(RoleNode src,List<MessageNode> msgs){
  super(src,msgs);
}",0.6177606177606177
2497,"@Override public PayloadTypeOrParameter toPayloadTypeOrParameter(){
  if (this.kind != Kind.TYPE) {
    throw new RuntimeException(""String_Node_Str"" + this);
  }
  return toName();
}","@Override public PayloadTypeOrParameter toPayloadTypeOrParameter(){
{
    throw new RuntimeException(""String_Node_Str"" + this);
  }
}",0.8444444444444444
2498,"/** 
 * {@inheritDoc}
 */
public Object pop(){
  Object child=_components.peek();
  if (child instanceof Token) {
    Token token=(Token)child;
    _properties.put(ModelObject.START_LINE,token.getLine());
    _properties.put(ModelObject.START_COLUMN,token.getCharPositionInLine());
    if (!_properties.containsKey(ModelObject.END_LINE)) {
      _properties.put(ModelObject.END_LINE,token.getLine());
      _properties.put(ModelObject.END_COLUMN,token.getCharPositionInLine() + token.getText().length());
    }
  }
 else   if (child instanceof ModelObject) {
    ModelObject chobj=(ModelObject)child;
    _properties.put(ModelObject.START_LINE,chobj.getProperties().get(ModelObject.START_LINE));
    _properties.put(ModelObject.START_COLUMN,chobj.getProperties().get(ModelObject.START_COLUMN));
    if (!chobj.getProperties().containsKey(ModelObject.END_LINE)) {
      _properties.put(ModelObject.END_LINE,chobj.getProperties().get(ModelObject.END_LINE));
      _properties.put(ModelObject.END_COLUMN,chobj.getProperties().get(ModelObject.END_COLUMN));
    }
  }
  return (_components.pop());
}","/** 
 * {@inheritDoc}
 */
public Object pop(){
  Object child=_components.peek();
  if (child instanceof Token) {
    Token token=(Token)child;
    _properties.put(ModelObject.START_LINE,token.getLine());
    _properties.put(ModelObject.START_COLUMN,token.getCharPositionInLine());
    if (!_properties.containsKey(ModelObject.END_LINE)) {
      _properties.put(ModelObject.END_LINE,token.getLine());
      _properties.put(ModelObject.END_COLUMN,token.getCharPositionInLine() + token.getText().length());
    }
  }
 else   if (child instanceof ModelObject) {
    ModelObject chobj=(ModelObject)child;
    _properties.put(ModelObject.START_LINE,chobj.getProperties().get(ModelObject.START_LINE));
    _properties.put(ModelObject.START_COLUMN,chobj.getProperties().get(ModelObject.START_COLUMN));
    if (chobj.getProperties().containsKey(ModelObject.END_LINE)) {
      _properties.put(ModelObject.END_LINE,chobj.getProperties().get(ModelObject.END_LINE));
      _properties.put(ModelObject.END_COLUMN,chobj.getProperties().get(ModelObject.END_COLUMN));
    }
  }
  return (_components.pop());
}",0.9995427526291724
2499,"/** 
 * {@inheritDoc}
 */
public void validate(ModuleContext context,ModelObject mobj,ScribbleLogger logger){
  GMessageTransfer elem=(GMessageTransfer)mobj;
  if (elem.getMessage() != null) {
    ValidationRule rule=ValidationRuleFactory.getValidationRule(elem.getMessage());
    if (rule != null) {
      rule.validate(context,elem.getMessage(),logger);
    }
  }
  ProtocolDecl pd=elem.getParent(ProtocolDecl.class);
  if (pd != null) {
    if (elem.getFromRole() != null) {
      if (pd.getRoleDeclaration(elem.getFromRole().getName()) == null) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),elem.getFromRole().getName()),elem.getFromRole());
      }
    }
    java.util.List<String> toRoles=new java.util.ArrayList<String>();
    for (    Role r : elem.getToRoles()) {
      if (toRoles.contains(r.getName())) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),r.getName()),elem);
      }
 else {
        toRoles.add(r.getName());
      }
      if (pd.getRoleDeclaration(r.getName()) == null) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),r.getName()),r);
      }
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void validate(ModuleContext context,ModelObject mobj,ScribbleLogger logger){
  GMessageTransfer elem=(GMessageTransfer)mobj;
  if (elem.getMessage() != null) {
    ValidationRule rule=ValidationRuleFactory.getValidationRule(elem.getMessage());
    if (rule != null) {
      rule.validate(context,elem.getMessage(),logger);
    }
  }
  ProtocolDecl pd=elem.getParent(ProtocolDecl.class);
  if (pd != null) {
    if (elem.getFromRole() != null) {
      if (pd.getRoleDeclaration(elem.getFromRole().getName()) == null) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),elem.getFromRole().getName()),elem);
      }
    }
    java.util.List<String> toRoles=new java.util.ArrayList<String>();
    for (    Role r : elem.getToRoles()) {
      if (toRoles.contains(r.getName())) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),r.getName()),elem);
      }
 else {
        toRoles.add(r.getName());
      }
      if (pd.getRoleDeclaration(r.getName()) == null) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),r.getName()),elem);
      }
    }
  }
}",0.9921455146754856
2500,"/** 
 * {@inheritDoc}
 */
public void validate(ModuleContext context,ModelObject mobj,ScribbleLogger logger){
  Module elem=(Module)mobj;
  if (elem.getFullyQualifiedName() == null) {
    logger.error(ValidationMessages.getMessage(""String_Node_Str""),mobj);
  }
  for (  ImportDecl imp : elem.getImports()) {
    ValidationRule rule=ValidationRuleFactory.getValidationRule(imp);
    if (rule != null) {
      rule.validate(context,imp,logger);
    }
  }
  for (  PayloadTypeDecl ptd : elem.getPayloadTypeDeclarations()) {
    ValidationRule rule=ValidationRuleFactory.getValidationRule(ptd);
    if (rule != null) {
      rule.validate(context,ptd,logger);
    }
  }
  boolean f_global=true;
  String localRole=null;
  if (context.getResource() != null) {
    int pos=context.getResource().getName().indexOf('@');
    if (pos != -1) {
      f_global=false;
      localRole=context.getResource().getName().substring(pos + 1,context.getResource().getName().length() - 4);
    }
  }
  for (int i=0; i < elem.getProtocols().size(); i++) {
    ProtocolDecl protocol=elem.getProtocols().get(i);
    if (context.getResource() != null) {
      if (protocol instanceof LProtocolDecl) {
        Role role=((LProtocolDecl)protocol).getLocalRole();
        if (f_global) {
          logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),role.getName()),protocol);
        }
 else         if (!role.getName().equals(localRole)) {
          logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),role.getName(),localRole),protocol);
        }
      }
 else       if (!f_global) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),localRole),protocol);
      }
    }
    ValidationRule rule=ValidationRuleFactory.getValidationRule(protocol);
    if (rule != null) {
      rule.validate(context,protocol,logger);
    }
  }
  if (context.getResource() != null && context.getResource().getPath() != null) {
    String fileName=elem.getFullyQualifiedName().getLastPart();
    if (localRole != null) {
      fileName+=""String_Node_Str"" + localRole;
    }
    fileName+=""String_Node_Str"";
    String fileName2=java.io.File.separator + fileName;
    if (!context.getResource().getPath().equals(fileName) && !context.getResource().getPath().endsWith(fileName2)) {
      logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),elem.getFullyQualifiedName().getName(),elem.getFullyQualifiedName().getLastPart() + ""String_Node_Str""),mobj);
    }
  }
  java.util.List<String> moduleNames=new java.util.ArrayList<String>();
  if (elem.getFullyQualifiedName() != null) {
    moduleNames.add(elem.getFullyQualifiedName().getLastPart());
  }
  for (  ImportDecl imp : elem.getImports()) {
    if (imp.getMemberName() == null) {
      String declName=imp.getDeclarationName();
      if (moduleNames.contains(declName)) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),declName),mobj);
      }
 else {
        moduleNames.add(declName);
      }
    }
  }
  java.util.List<String> memberNames=new java.util.ArrayList<String>();
  for (  ImportDecl imp : elem.getImports()) {
    if (imp.getMemberName() != null) {
      String declName=imp.getDeclarationName();
      if (memberNames.contains(declName)) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),declName),imp);
      }
 else {
        memberNames.add(declName);
      }
    }
  }
  for (  PayloadTypeDecl plt : elem.getPayloadTypeDeclarations()) {
    if (memberNames.contains(plt.getAlias())) {
      logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),plt.getAlias()),plt);
    }
 else {
      memberNames.add(plt.getAlias());
    }
  }
  for (  ProtocolDecl pd : elem.getProtocols()) {
    if (memberNames.contains(pd.getName())) {
      logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),pd.getName()),pd);
    }
 else {
      memberNames.add(pd.getName());
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void validate(ModuleContext context,ModelObject mobj,ScribbleLogger logger){
  Module elem=(Module)mobj;
  if (elem.getFullyQualifiedName() == null) {
    logger.error(ValidationMessages.getMessage(""String_Node_Str""),mobj);
  }
  for (  ImportDecl imp : elem.getImports()) {
    ValidationRule rule=ValidationRuleFactory.getValidationRule(imp);
    if (rule != null) {
      rule.validate(context,imp,logger);
    }
  }
  for (  PayloadTypeDecl ptd : elem.getPayloadTypeDeclarations()) {
    ValidationRule rule=ValidationRuleFactory.getValidationRule(ptd);
    if (rule != null) {
      rule.validate(context,ptd,logger);
    }
  }
  boolean f_global=true;
  String localRole=null;
  if (context.getResource() != null) {
    int pos=context.getResource().getName().indexOf('@');
    if (pos != -1) {
      f_global=false;
      localRole=context.getResource().getName().substring(pos + 1,context.getResource().getName().length() - 4);
    }
  }
  for (int i=0; i < elem.getProtocols().size(); i++) {
    ProtocolDecl protocol=elem.getProtocols().get(i);
    if (context.getResource() != null) {
      if (protocol instanceof LProtocolDecl) {
        Role role=((LProtocolDecl)protocol).getLocalRole();
        if (f_global) {
          logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),role.getName()),protocol);
        }
 else         if (!role.getName().equals(localRole)) {
          logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),role.getName(),localRole),protocol);
        }
      }
 else       if (!f_global) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),localRole),protocol);
      }
    }
    ValidationRule rule=ValidationRuleFactory.getValidationRule(protocol);
    if (rule != null) {
      rule.validate(context,protocol,logger);
    }
  }
  if (context.getResource() != null && context.getResource().getPath() != null) {
    String filepath=elem.getFullyQualifiedName().getName().replace('.',java.io.File.separatorChar);
    if (localRole != null) {
      filepath+=""String_Node_Str"" + localRole;
    }
    filepath+=""String_Node_Str"";
    if (!context.getResource().getPath().equals(filepath)) {
      logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),elem.getFullyQualifiedName().getName(),filepath),mobj);
    }
  }
  java.util.List<String> moduleNames=new java.util.ArrayList<String>();
  if (elem.getFullyQualifiedName() != null) {
    moduleNames.add(elem.getFullyQualifiedName().getLastPart());
  }
  for (  ImportDecl imp : elem.getImports()) {
    if (imp.getMemberName() == null) {
      String declName=imp.getDeclarationName();
      if (moduleNames.contains(declName)) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),declName),mobj);
      }
 else {
        moduleNames.add(declName);
      }
    }
  }
  java.util.List<String> memberNames=new java.util.ArrayList<String>();
  for (  ImportDecl imp : elem.getImports()) {
    if (imp.getMemberName() != null) {
      String declName=imp.getDeclarationName();
      if (memberNames.contains(declName)) {
        logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),declName),imp);
      }
 else {
        memberNames.add(declName);
      }
    }
  }
  for (  PayloadTypeDecl plt : elem.getPayloadTypeDeclarations()) {
    if (memberNames.contains(plt.getAlias())) {
      logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),plt.getAlias()),plt);
    }
 else {
      memberNames.add(plt.getAlias());
    }
  }
  for (  ProtocolDecl pd : elem.getProtocols()) {
    if (memberNames.contains(pd.getName())) {
      logger.error(MessageFormat.format(ValidationMessages.getMessage(""String_Node_Str""),pd.getName()),pd);
    }
 else {
      memberNames.add(pd.getName());
    }
  }
}",0.7596105841238143
2501,"/** 
 * This method projects the supplied model object based on the specified role.
 * @param context The context
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public Object project(ProtocolProjectorContext context,ModelObject model,Role role,Journal l){
  Object ret=null;
  Parallel parallel=new Parallel();
  Parallel source=(Parallel)model;
  parallel.derivedFrom(source);
  for (int i=0; i < source.getPaths().size(); i++) {
    Block block=(Block)context.project(source.getPaths().get(i),role,l);
    if (block != null) {
      parallel.getPaths().add(block);
    }
  }
  if (parallel.getPaths().size() > 0) {
    ret=parallel;
    if (parallel.getPaths().size() == 1) {
      ret=parallel.getPaths().get(0);
    }
  }
  return (ret);
}","/** 
 * This method projects the supplied model object based on the specified role.
 * @param context The context
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public Object project(ProtocolProjectorContext context,ModelObject model,Role role,Journal l){
  Object ret=null;
  Parallel parallel=new Parallel();
  Parallel source=(Parallel)model;
  parallel.derivedFrom(source);
  for (int i=0; i < source.getPaths().size(); i++) {
    Block block=(Block)context.project(source.getPaths().get(i),role,l);
    if (block != null) {
      parallel.getPaths().add(block);
    }
  }
  if (parallel.getPaths().size() > 0) {
    ret=parallel;
    if (parallel.getPaths().size() == 1) {
      ret=parallel.getPaths().get(0).getContents();
    }
  }
  return (ret);
}",0.9915966386554622
2502,"/** 
 * This method returns the protocol description exported from the visited ProtocolModel.
 * @return The protocol description
 */
public org.scribble.protocol.monitor.model.Description getDescription(){
  Description ret=new Description();
  for (  org.scribble.protocol.monitor.model.Choice choice : _choicePaths.keySet()) {
    java.util.List<Path> pathBuilders=_choicePaths.get(choice);
    for (    Path pathBuilder : pathBuilders) {
      choice.getPath().add(pathBuilder);
    }
  }
  for (  org.scribble.protocol.monitor.model.Parallel parallel : _parallelPaths.keySet()) {
    java.util.List<Path> pathBuilders=_parallelPaths.get(parallel);
    for (    Path pathBuilder : pathBuilders) {
      parallel.getPath().add(pathBuilder);
    }
  }
  for (  Node b : _nodes) {
    ret.getNode().add(b);
  }
  return (ret);
}","/** 
 * This method returns the protocol description exported from the visited ProtocolModel.
 * @return The protocol description
 */
public org.scribble.protocol.monitor.model.Description getDescription(){
  Description ret=new Description();
  for (  org.scribble.protocol.monitor.model.Choice choice : _choicePaths.keySet()) {
    java.util.List<Path> pathBuilders=_choicePaths.get(choice);
    for (    Path pathBuilder : pathBuilders) {
      choice.getPath().add(pathBuilder);
    }
  }
  _choicePaths.clear();
  for (  org.scribble.protocol.monitor.model.Parallel parallel : _parallelPaths.keySet()) {
    java.util.List<Path> pathBuilders=_parallelPaths.get(parallel);
    for (    Path pathBuilder : pathBuilders) {
      parallel.getPath().add(pathBuilder);
    }
  }
  _parallelPaths.clear();
  for (  Node b : _nodes) {
    ret.getNode().add(b);
  }
  return (ret);
}",0.9707259953161592
2503,"@Override public void accept(Run elem){
  Protocol protocol=RunUtil.getInnerProtocol(elem.getEnclosingProtocol(),elem.getProtocolReference());
  if (protocol != null) {
    protocol.visit(this);
  }
}","@Override public void accept(Run elem){
  Protocol protocol=RunUtil.getInnerProtocol(elem.getEnclosingProtocol(),elem.getProtocolReference());
  if (protocol != null) {
    protocol.getBlock().visit(this);
  }
}",0.97323600973236
2504,"/** 
 * Start the bundle.
 * @param context The context
 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
 */
public void start(final BundleContext context){
  final Commands commands=new Commands();
  Properties props=new Properties();
  commands.setParseCommand(new ParseCommand());
  context.registerService(Command.class.getName(),commands.getParseCommand(),props);
  commands.setValidateCommand(new ValidateCommand());
  context.registerService(Command.class.getName(),commands.getValidateCommand(),props);
  commands.setConformsCommand(new ConformsCommand());
  context.registerService(Command.class.getName(),commands.getConformsCommand(),props);
  commands.setProjectCommand(new ProjectCommand());
  context.registerService(Command.class.getName(),commands.getProjectCommand(),props);
  commands.setSimulateCommand(new SimulateCommand());
  context.registerService(Command.class.getName(),commands.getSimulateCommand(),props);
  ServiceListener[] sl=new ServiceListener[7];
  sl[0]=new ServiceListener(){
    public void serviceChanged(    ServiceEvent ev){
      ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
        ProtocolValidationManager vm=(ProtocolValidationManager)context.getService(sr);
      commands.setProtocolValidationManager(vm);
    break;
case ServiceEvent.UNREGISTERING:
  break;
}
}
}
;
sl[1]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
Journal journal=(Journal)context.getService(sr);
commands.setJournal(journal);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[2]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolParserManager pp=(ProtocolParserManager)context.getService(sr);
commands.setProtocolParserManager(pp);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[3]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolConformer conformer=(ProtocolConformer)context.getService(sr);
commands.setProtocolConformer(conformer);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[4]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolProjector projector=(ProtocolProjector)context.getService(sr);
commands.setProtocolProjector(projector);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[5]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolExportManager em=(ProtocolExportManager)context.getService(sr);
commands.setProtocolExportManager(em);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[6]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolMonitor pm=(ProtocolMonitor)context.getService(sr);
commands.setProtocolMonitor(pm);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
}","/** 
 * Start the bundle.
 * @param context The context
 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
 */
public void start(final BundleContext context){
  final Commands commands=new Commands();
  Properties props=new Properties();
  commands.setParseCommand(new ParseCommand());
  context.registerService(Command.class.getName(),commands.getParseCommand(),props);
  commands.setValidateCommand(new ValidateCommand());
  context.registerService(Command.class.getName(),commands.getValidateCommand(),props);
  commands.setConformsCommand(new ConformsCommand());
  context.registerService(Command.class.getName(),commands.getConformsCommand(),props);
  commands.setProjectCommand(new ProjectCommand());
  context.registerService(Command.class.getName(),commands.getProjectCommand(),props);
  commands.setSimulateCommand(new SimulateCommand());
  context.registerService(Command.class.getName(),commands.getSimulateCommand(),props);
  ServiceListener[] sl=new ServiceListener[7];
  sl[0]=new ServiceListener(){
    public void serviceChanged(    ServiceEvent ev){
      ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
        ProtocolValidationManager vm=(ProtocolValidationManager)context.getService(sr);
      commands.setProtocolValidationManager(vm);
    break;
case ServiceEvent.UNREGISTERING:
  break;
}
}
}
;
sl[1]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
Journal journal=(Journal)context.getService(sr);
commands.setJournal(journal);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[2]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolParserManager pp=(ProtocolParserManager)context.getService(sr);
commands.setProtocolParserManager(pp);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[3]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolConformer conformer=(ProtocolConformer)context.getService(sr);
commands.setProtocolConformer(conformer);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[4]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolProjector projector=(ProtocolProjector)context.getService(sr);
commands.setProtocolProjector(projector);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[5]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolExportManager em=(ProtocolExportManager)context.getService(sr);
commands.setProtocolExportManager(em);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
sl[6]=new ServiceListener(){
public void serviceChanged(ServiceEvent ev){
ServiceReference sr=ev.getServiceReference();
switch (ev.getType()) {
case ServiceEvent.REGISTERED:
ProtocolMonitor pm=(ProtocolMonitor)context.getService(sr);
commands.setProtocolMonitor(pm);
break;
case ServiceEvent.UNREGISTERING:
break;
}
}
}
;
initCommands(context,commands,sl);
}",0.9948762992241252
2505,"/** 
 * This method sets the projector.
 * @param pp The projector
 */
public void setProtocolProjector(ProtocolProjector pp){
  _projectCommand.setProtocolProjector(pp);
}","/** 
 * This method sets the projector.
 * @param pp The projector
 */
public void setProtocolProjector(ProtocolProjector pp){
  _projectCommand.setProtocolProjector(pp);
  _validateCommand.setProtocolProjector(pp);
}",0.884318766066838
2506,"/** 
 * {@inheritDoc}
 */
public boolean execute(String[] args){
  boolean ret=false;
  if (args.length == 1) {
    _journal.info(""String_Node_Str"" + args[0],null);
    java.io.File f=new java.io.File(args[0]);
    if (!f.exists()) {
      _journal.error(""String_Node_Str"" + args[0] + ""String_Node_Str"",null);
    }
 else {
      try {
        Content content=new FileContent(f);
        ProtocolTools context=new DefaultProtocolTools(_protocolParserManager,new DefaultResourceLocator(f.getParentFile()));
        org.scribble.protocol.model.ProtocolModel model=_protocolParserManager.parse(context,content,_journal);
        if (model != null) {
          _journal.info(""String_Node_Str"" + args[0],null);
          _validationManager.validate(context,model,_journal);
          ret=true;
        }
 else {
          _journal.error(""String_Node_Str"",null);
        }
      }
 catch (      Exception e) {
        _journal.error(""String_Node_Str"" + args[0] + ""String_Node_Str"",null);
      }
    }
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  return (ret);
}","/** 
 * {@inheritDoc}
 */
public boolean execute(String[] args){
  boolean ret=false;
  if (args.length == 1) {
    _journal.info(""String_Node_Str"" + args[0],null);
    java.io.File f=new java.io.File(args[0]);
    if (!f.exists()) {
      _journal.error(""String_Node_Str"" + args[0] + ""String_Node_Str"",null);
    }
 else {
      try {
        Content content=new FileContent(f);
        DefaultProtocolTools context=new DefaultProtocolTools(_protocolParserManager,new DefaultResourceLocator(f.getParentFile()));
        context.setProtocolValidationManager(_validationManager);
        context.setProtocolProjector(_protocolProjector);
        org.scribble.protocol.model.ProtocolModel model=_protocolParserManager.parse(context,content,_journal);
        if (model != null) {
          _journal.info(""String_Node_Str"" + args[0],null);
          _validationManager.validate(context,model,_journal);
          ret=true;
        }
 else {
          _journal.error(""String_Node_Str"",null);
        }
      }
 catch (      Exception e) {
        _journal.error(""String_Node_Str"" + args[0] + ""String_Node_Str"",null);
      }
    }
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  return (ret);
}",0.9424175824175824
2507,"@Override public void conforms(ProtocolModel model,ProtocolModel ref,ConformanceHandler handler){
  model=ProtocolNormalizer.normalize(model);
  ref=ProtocolNormalizer.normalize(ref);
}","/** 
 * {@inheritDoc}
 */
public void conforms(ProtocolModel model,ProtocolModel ref,ConformanceHandler handler){
  model=ProtocolNormalizer.normalize(model);
  ref=ProtocolNormalizer.normalize(ref);
}",0.911917098445596
2508,"@Override public boolean conforms(Interaction model,Interaction ref,ConformanceHandler handler){
  boolean ret=false;
  if (model.getMessageSignature().equals(ref.getMessageSignature())) {
    if ((model.getFromRole() == null || ref.getFromRole() == null || model.getFromRole().equals(ref.getFromRole()) && (model.getToRoles().size() == 0 || ref.getToRoles().size() == 0 || !Collections.disjoint(model.getToRoles(),ref.getToRoles())))) {
      ret=true;
    }
  }
  return (ret);
}","/** 
 * {@inheritDoc}
 */
public boolean conforms(Interaction model,Interaction ref,ConformanceHandler handler){
  boolean ret=false;
  if (model.getMessageSignature().equals(ref.getMessageSignature())) {
    if ((model.getFromRole() == null || ref.getFromRole() == null || model.getFromRole().equals(ref.getFromRole()) && (model.getToRoles().size() == 0 || ref.getToRoles().size() == 0 || !Collections.disjoint(model.getToRoles(),ref.getToRoles())))) {
      ret=true;
    }
  }
  return (ret);
}",0.9652351738241308
2509,"public String toString(){
  return (this == VALID ? ""String_Node_Str"" : (this == NOT_HANDLED ? ""String_Node_Str"" : (this == INVALID ? ""String_Node_Str"" : ""String_Node_Str"" + isValid() + ""String_Node_Str""+ getReason()+ ""String_Node_Str""+ getProperties()+ ""String_Node_Str"")));
}","/** 
 * {@inheritDoc}
 */
public String toString(){
  return (this == VALID ? ""String_Node_Str"" : (this == NOT_HANDLED ? ""String_Node_Str"" : (this == INVALID ? ""String_Node_Str"" : ""String_Node_Str"" + isValid() + ""String_Node_Str""+ getReason()+ ""String_Node_Str""+ getProperties()+ ""String_Node_Str"")));
}",0.9551724137931036
2510,"/** 
 * This is the copy constructor.
 */
public Inline(Inline copy){
  super(copy);
  _reference=new ProtocolReference(copy._reference);
  for (  Parameter p : copy._parameters) {
    _parameters.add(new Parameter(p));
  }
}","/** 
 * This is the copy constructor.
 * @param copy The instance to copy
 */
public Inline(Inline copy){
  super(copy);
  _reference=new ProtocolReference(copy._reference);
  for (  Parameter p : copy._parameters) {
    _parameters.add(new Parameter(p));
  }
}",0.925925925925926
2511,"/** 
 * This method returns the innermost block that encloses all of the activities associated with the supplied role.
 * @param protocol The protocol
 * @param role The role
 * @return The block
 */
public static Block getEnclosingBlock(final Protocol protocol,final Role role){
  Block ret=null;
  final java.util.List<Block> blocks=new java.util.Vector<Block>();
  protocol.visit(new DefaultVisitor(){
    public boolean start(    Protocol elem){
      if (protocol.getParameterDefinition(role.getName()) != null) {
        blocks.add(elem.getBlock());
      }
      return (protocol == elem);
    }
    public void accept(    org.scribble.protocol.model.Interaction elem){
      if (role.equals(elem.getFromRole()) || elem.getToRoles().contains(role) || ((elem.getFromRole() == null || elem.getToRoles().size() == 0) && role.equals(elem.enclosingProtocol().getRole()))) {
        blocks.add((Block)elem.getParent());
      }
    }
    public boolean start(    Choice elem){
      if (role.equals(elem.getRole())) {
        blocks.add((Block)elem.getParent());
      }
      return (true);
    }
    public boolean start(    DirectedChoice elem){
      if (role.equals(elem.getFromRole()) || elem.getToRoles().contains(role)) {
        blocks.add((Block)elem.getParent());
      }
      return (true);
    }
  }
);
  if (blocks.size() == 0) {
  }
 else   if (blocks.size() == 1) {
    ret=blocks.get(0);
  }
 else {
    java.util.List<java.util.List<Block>> listOfBlocks=new java.util.Vector<java.util.List<Block>>();
    for (    Block block : blocks) {
      java.util.List<Block> lb=getBlockPath(block);
      if (lb != null && lb.size() > 0) {
        listOfBlocks.add(lb);
      }
    }
    int pos=-1;
    java.util.List<Block> refblocks=listOfBlocks.get(0);
    for (int j=0; j < refblocks.size(); j++) {
      boolean f_same=true;
      Block ref=refblocks.get(j);
      for (int i=1; f_same && i < listOfBlocks.size(); i++) {
        java.util.List<Block> lb=listOfBlocks.get(i);
        if (lb.size() <= j || ref != lb.get(j)) {
          f_same=false;
        }
      }
      if (f_same) {
        pos=j;
      }
    }
    if (pos != -1) {
      ret=refblocks.get(pos);
    }
  }
  return (ret);
}","/** 
 * This method returns the innermost block that encloses all of the activities associated with the supplied role.
 * @param protocol The protocol
 * @param role The role
 * @return The block
 */
public static Block getEnclosingBlock(final Protocol protocol,final Role role){
  Block ret=null;
  final java.util.List<Block> blocks=new java.util.Vector<Block>();
  protocol.visit(new DefaultVisitor(){
    public boolean start(    Protocol elem){
      if (protocol.getParameterDefinition(role.getName()) != null) {
        blocks.add(elem.getBlock());
      }
      return (protocol == elem);
    }
    public void accept(    org.scribble.protocol.model.Interaction elem){
      if (role.equals(elem.getFromRole()) || elem.getToRoles().contains(role) || ((elem.getFromRole() == null || elem.getToRoles().size() == 0) && role.equals(elem.enclosingProtocol().getRole()))) {
        blocks.add((Block)elem.getParent());
      }
    }
    public boolean start(    Choice elem){
      if (role.equals(elem.getRole())) {
        blocks.add((Block)elem.getParent());
      }
      return (true);
    }
    public boolean start(    DirectedChoice elem){
      if (role.equals(elem.getFromRole()) || elem.getToRoles().contains(role) || ((elem.getFromRole() == null || elem.getToRoles().size() == 0) && role.equals(elem.enclosingProtocol().getRole()))) {
        blocks.add((Block)elem.getParent());
      }
      return (true);
    }
  }
);
  if (blocks.size() == 0) {
  }
 else   if (blocks.size() == 1) {
    ret=blocks.get(0);
  }
 else {
    java.util.List<java.util.List<Block>> listOfBlocks=new java.util.Vector<java.util.List<Block>>();
    for (    Block block : blocks) {
      java.util.List<Block> lb=getBlockPath(block);
      if (lb != null && lb.size() > 0) {
        listOfBlocks.add(lb);
      }
    }
    int pos=-1;
    java.util.List<Block> refblocks=listOfBlocks.get(0);
    for (int j=0; j < refblocks.size(); j++) {
      boolean f_same=true;
      Block ref=refblocks.get(j);
      for (int i=1; f_same && i < listOfBlocks.size(); i++) {
        java.util.List<Block> lb=listOfBlocks.get(i);
        if (lb.size() <= j || ref != lb.get(j)) {
          f_same=false;
        }
      }
      if (f_same) {
        pos=j;
      }
    }
    if (pos != -1) {
      ret=refblocks.get(pos);
    }
  }
  return (ret);
}",0.9740088105726872
2512,"@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}","@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}",0.9509043927648578
2513,"/** 
 * This method returns the top level protocol.
 * @return The top level protocol
 */
public Protocol getTopLevelProtocol(){
  Protocol ret=this;
  if (getParent() instanceof Protocol) {
    ret=((Protocol)getParent()).getTopLevelProtocol();
  }
  return (ret);
}","/** 
 * This method returns the top level protocol.
 * @return The top level protocol
 */
public Protocol getTopLevelProtocol(){
  Protocol ret=this;
  if (getParent() instanceof Block && getParent().getParent() instanceof Protocol) {
    ret=((Protocol)getParent().getParent()).getTopLevelProtocol();
  }
  return (ret);
}",0.9016949152542372
2514,"/** 
 * This method projects the supplied model object based on the specified role.
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public ModelObject project(ProjectorContext context,ModelObject model,Role role,Journal l){
  Choice ret=new Choice();
  Choice source=(Choice)model;
  boolean f_merge=false;
  boolean f_rolesSet=false;
  Role fromRole=null;
  Role toRole=null;
  ret.derivedFrom(source);
  if (source.getFromRole() != null && source.getFromRole().getName().equals(role.getName()) == false) {
    ret.setFromRole(new Role(source.getFromRole()));
  }
  if (source.getToRole() != null && source.getToRole().getName().equals(role.getName()) == false) {
    ret.setToRole(new Role(source.getToRole()));
  }
  if ((ret.getFromRole() != null && ret.getToRole() != null) || (ret.getFromRole() == null && ret.getToRole() == null)) {
    f_merge=true;
  }
  for (int i=0; i < source.getWhens().size(); i++) {
    When block=(When)context.project(source.getWhens().get(i),role,l);
    if (block != null) {
      ret.getWhens().add(block);
      if (f_merge) {
        java.util.List<ModelObject> list=org.scribble.protocol.util.InteractionUtil.getInitialInteractions(block);
        ret.getWhens().remove(block);
        for (        ModelObject act : list) {
          MessageSignature ms=InteractionUtil.getMessageSignature(act);
          boolean f_add=true;
          for (          When wb : ret.getWhens()) {
            MessageSignature wbms=InteractionUtil.getMessageSignature(wb);
            if (ms.equals(wbms)) {
              l.error(""String_Node_Str"",null);
              f_add=false;
            }
          }
          if (f_add) {
            if (f_rolesSet == false) {
              fromRole=InteractionUtil.getFromRole(act);
              toRole=InteractionUtil.getToRole(act);
              f_rolesSet=true;
            }
 else {
            }
            if (act instanceof When) {
              ret.getWhens().add((When)act);
            }
 else             if (act instanceof Interaction) {
              When newwb=new When();
              newwb.derivedFrom(act);
              newwb.setMessageSignature(new MessageSignature(ms));
              Block b=(Block)act.getParent();
              for (              Activity a : b.getContents()) {
                if (a != act) {
                  newwb.getBlock().add(a);
                }
              }
              ret.getWhens().add(newwb);
            }
          }
        }
      }
    }
  }
  if (f_merge) {
    ret.setFromRole(fromRole);
    ret.setToRole(toRole);
  }
  if (ret.getWhens().size() == 1) {
    Block b=new Block();
    Interaction interaction=new Interaction();
    interaction.derivedFrom(ret.getWhens().get(0));
    interaction.setMessageSignature(ret.getWhens().get(0).getMessageSignature());
    interaction.setFromRole(ret.getFromRole());
    if (ret.getToRole() != null) {
      interaction.getToRoles().add(ret.getToRole());
    }
    b.add(interaction);
    for (    Activity act : ret.getWhens().get(0).getBlock().getContents()) {
      b.add(act);
    }
    return (b);
  }
 else   if (ret.getWhens().size() == 0) {
    ret=null;
  }
  return (ret);
}","/** 
 * This method projects the supplied model object based on the specified role.
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public ModelObject project(ProjectorContext context,ModelObject model,Role role,Journal l){
  Choice ret=new Choice();
  Choice source=(Choice)model;
  boolean f_merge=false;
  boolean f_rolesSet=false;
  Role fromRole=null;
  Role toRole=null;
  ret.derivedFrom(source);
  if (source.getFromRole() != null && source.getFromRole().getName().equals(role.getName()) == false) {
    ret.setFromRole(new Role(source.getFromRole()));
  }
  if (source.getToRole() != null && source.getToRole().getName().equals(role.getName()) == false) {
    ret.setToRole(new Role(source.getToRole()));
  }
  if ((ret.getFromRole() != null && ret.getToRole() != null) || (ret.getFromRole() == null && ret.getToRole() == null)) {
    f_merge=true;
  }
  for (int i=0; i < source.getWhens().size(); i++) {
    When block=(When)context.project(source.getWhens().get(i),role,l);
    if (block != null) {
      ret.getWhens().add(block);
    }
  }
  if (f_merge) {
    Role destination=null;
    for (    When block : ret.getWhens()) {
      java.util.List<ModelObject> list=org.scribble.protocol.util.InteractionUtil.getInitialInteractions(block);
      for (      ModelObject act : list) {
        Role r=InteractionUtil.getToRole(act);
        if (destination == null) {
          destination=r;
        }
 else         if (destination.equals(r) == false) {
          f_merge=false;
          break;
        }
      }
      if (f_merge == false) {
        break;
      }
    }
  }
  if (f_merge) {
    java.util.List<When> tmp=new java.util.Vector<When>(ret.getWhens());
    for (    When block : tmp) {
      java.util.List<ModelObject> list=org.scribble.protocol.util.InteractionUtil.getInitialInteractions(block);
      ret.getWhens().remove(block);
      for (      ModelObject act : list) {
        MessageSignature ms=InteractionUtil.getMessageSignature(act);
        boolean f_add=true;
        for (        When wb : ret.getWhens()) {
          MessageSignature wbms=InteractionUtil.getMessageSignature(wb);
          if (ms.equals(wbms)) {
            l.error(""String_Node_Str"",null);
            f_add=false;
          }
        }
        if (f_add) {
          if (f_rolesSet == false) {
            fromRole=InteractionUtil.getFromRole(act);
            toRole=InteractionUtil.getToRole(act);
            f_rolesSet=true;
          }
 else {
          }
          if (act instanceof When) {
            ret.getWhens().add((When)act);
          }
 else           if (act instanceof Interaction) {
            When newwb=new When();
            newwb.derivedFrom(act);
            newwb.setMessageSignature(new MessageSignature(ms));
            Block b=(Block)act.getParent();
            for (            Activity a : b.getContents()) {
              if (a != act) {
                newwb.getBlock().add(a);
              }
            }
            ret.getWhens().add(newwb);
          }
        }
      }
    }
  }
  if (f_merge) {
    ret.setFromRole(fromRole);
    ret.setToRole(toRole);
  }
  if (ret.getWhens().size() == 1) {
    Block b=new Block();
    Interaction interaction=new Interaction();
    interaction.derivedFrom(ret.getWhens().get(0));
    interaction.setMessageSignature(ret.getWhens().get(0).getMessageSignature());
    interaction.setFromRole(ret.getFromRole());
    if (ret.getToRole() != null) {
      interaction.getToRoles().add(ret.getToRole());
    }
    b.add(interaction);
    for (    Activity act : ret.getWhens().get(0).getBlock().getContents()) {
      b.add(act);
    }
    return (b);
  }
 else   if (ret.getWhens().size() == 0) {
    ret=null;
  }
  return (ret);
}",0.8391489361702128
2515,"@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}","@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}",0.9921907110563092
2516,"/** 
 * This method projects the supplied model object based on the specified role.
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public ModelObject project(ProjectorContext context,ModelObject model,Role role,Journal l){
  Block ret=createBlock();
  Block source=(Block)model;
  ret.derivedFrom(source);
  context.pushState();
  for (int i=0; i < source.getContents().size(); i++) {
    Activity act=(Activity)context.project(source.getContents().get(i),role,l);
    if (act != null) {
      if (act instanceof Block) {
        ret.getContents().addAll(((Block)act).getContents());
      }
 else {
        ret.getContents().add(act);
      }
    }
  }
  context.popState();
  if (isFilterOutEmptyContent() && ret.getContents().size() == 0) {
    ret=null;
  }
  return (ret);
}","/** 
 * This method projects the supplied model object based on the specified role.
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public ModelObject project(ProjectorContext context,ModelObject model,Role role,Journal l){
  Block ret=createBlock();
  Block source=(Block)model;
  ret.derivedFrom(source);
  context.pushState();
  for (int i=0; i < source.getContents().size(); i++) {
    Activity act=(Activity)context.project(source.getContents().get(i),role,l);
    if (act != null) {
      if (act instanceof Block) {
        ret.getContents().addAll(((Block)act).getContents());
      }
 else {
        ret.getContents().add(act);
      }
    }
  }
  context.popState();
  if (isFilterOutEmptyContent()) {
    int behaviourCount=0;
    for (    Activity act : ret.getContents()) {
      if (ActivityUtil.isBehaviour(act)) {
        behaviourCount++;
      }
    }
    if (behaviourCount == 0) {
      ret=null;
    }
  }
  return (ret);
}",0.8877118644067796
2517,"@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}","@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}",0.9921907110563092
2518,"/** 
 * This method projects the supplied model object based on the specified role.
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public ModelObject project(ProjectorContext context,ModelObject model,Role role,Journal l){
  Run ret=new Run();
  Run source=(Run)model;
  ret.derivedFrom(source);
  java.util.List<Parameter> params=source.getParameters();
  int mappedIndex=-1;
  for (int i=0; i < params.size(); i++) {
    Parameter db=params.get(i);
    if (db.getName().equals(role.getName()) == false) {
      Parameter dbcopy=new Parameter(db.getName());
      dbcopy.derivedFrom(db);
      ret.getParameters().add(dbcopy);
    }
 else {
      mappedIndex=i;
    }
  }
  if (source.getProtocolReference() != null) {
    boolean f_inner=false;
    Protocol defn=RunUtil.getInnerProtocol(source.enclosingProtocol(),source.getProtocolReference());
    if (defn == null) {
      ProtocolImport pi=ProtocolModelUtil.getProtocolImport(source.getModel(),source.getProtocolReference());
      if (pi == null) {
        l.error(""String_Node_Str"" + source.getProtocolReference().getName() + ""String_Node_Str"",source.getProperties());
      }
 else {
        ProtocolModel pm=context.getProtocolContext().getProtocolModel(pi,l);
        if (pm != null) {
          defn=pm.getProtocol();
        }
 else {
          l.error(""String_Node_Str"" + source.getProtocolReference().getName() + ""String_Node_Str""+ pi.getLocation()+ ""String_Node_Str"",source.getProperties());
        }
      }
    }
 else {
      f_inner=true;
    }
    if (defn != null && mappedIndex != -1) {
      Role mappedRole=null;
      if (mappedIndex < defn.getParameterDefinitions().size()) {
        ParameterDefinition pd=defn.getParameterDefinitions().get(mappedIndex);
        if (pd.getType() != null) {
          l.error(""String_Node_Str"",source.getProperties());
        }
 else {
          mappedRole=new Role(pd.getName());
        }
      }
 else {
        l.error(""String_Node_Str"",source.getProperties());
      }
      if (mappedRole != null) {
        if (f_inner) {
          context.registerInterest(defn,mappedRole);
        }
        ret.setProtocolReference((ProtocolReference)context.project(source.getProtocolReference(),mappedRole,l));
      }
    }
 else {
      ret=null;
    }
  }
  if (ret != null && source.getBlock() != null) {
    ret.setBlock((Block)context.project(source.getBlock(),role,l));
    ret.getBlock().setParent(ret);
  }
  return (ret);
}","/** 
 * This method projects the supplied model object based on the specified role.
 * @param model The model object
 * @param role The role
 * @param l The model listener
 * @return The projected model object
 */
public ModelObject project(ProjectorContext context,ModelObject model,Role role,Journal l){
  Run ret=new Run();
  Run source=(Run)model;
  ret.derivedFrom(source);
  java.util.List<Parameter> params=source.getParameters();
  int mappedIndex=-1;
  for (int i=0; i < params.size(); i++) {
    Parameter db=params.get(i);
    if (db.getName().equals(role.getName()) == false) {
      Parameter dbcopy=new Parameter(db.getName());
      dbcopy.derivedFrom(db);
      ret.getParameters().add(dbcopy);
    }
 else {
      mappedIndex=i;
    }
  }
  if (source.getProtocolReference() != null) {
    boolean f_inner=false;
    Protocol defn=RunUtil.getInnerProtocol(source.enclosingProtocol(),source.getProtocolReference());
    if (defn == null) {
      ProtocolImport pi=ProtocolModelUtil.getProtocolImport(source.getModel(),source.getProtocolReference());
      if (pi == null) {
        l.error(""String_Node_Str"" + source.getProtocolReference().getName() + ""String_Node_Str"",source.getProperties());
      }
 else {
        ProtocolModel pm=context.getProtocolContext().getProtocolModel(pi,l);
        if (pm != null) {
          defn=pm.getProtocol();
        }
 else {
          l.error(""String_Node_Str"" + source.getProtocolReference().getName() + ""String_Node_Str""+ pi.getLocation()+ ""String_Node_Str"",source.getProperties());
        }
      }
    }
 else {
      f_inner=true;
    }
    if (defn != null && mappedIndex != -1) {
      Role mappedRole=null;
      if (mappedIndex < defn.getParameterDefinitions().size()) {
        ParameterDefinition pd=defn.getParameterDefinitions().get(mappedIndex);
        if (pd.getType() != null) {
          l.error(""String_Node_Str"",source.getProperties());
        }
 else {
          mappedRole=new Role(pd.getName());
        }
      }
 else {
        l.error(""String_Node_Str"",source.getProperties());
      }
      if (mappedRole != null) {
        if (f_inner) {
          context.registerInterest(defn,mappedRole);
        }
        ret.setProtocolReference((ProtocolReference)context.project(source.getProtocolReference(),mappedRole,l));
      }
    }
 else {
      ret=null;
    }
  }
  if (ret != null && source.getBlock() != null) {
    ret.setBlock((Block)context.project(source.getBlock(),role,l));
    ret.getBlock().setParent(ret);
    if (ret.getBlock().size() == 0 && ret.getProtocolReference() == null) {
      ret=null;
    }
  }
  return (ret);
}",0.9755244755244756
2519,"@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}","@Parameterized.Parameters public static List<Object[]> testcases(){
  Object[][] array=new Object[][]{{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str"",CTKUtil.getProtocolContext(""String_Node_Str"")},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str""}};
  List<Object[]> result=new LinkedList<Object[]>();
  for (  Object[] sub : array) {
    result.add(new Object[]{""String_Node_Str"" + sub[0],""String_Node_Str"" + sub[1],(sub.length == 3 ? sub[2] : null)});
  }
  return result;
}",0.9924272618573136
2520,"public void executeWorkItem(WorkItem workItem,WorkItemManager manager){
  if (this.manager == null) {
    this.manager=manager;
  }
 else {
    if (this.manager != manager) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  connect();
  Task task=new Task();
  String taskName=(String)workItem.getParameter(""String_Node_Str"");
  if (taskName != null) {
    List<I18NText> names=new ArrayList<I18NText>();
    names.add(new I18NText(""String_Node_Str"",taskName));
    task.setNames(names);
  }
  String comment=(String)workItem.getParameter(""String_Node_Str"");
  if (comment != null) {
    List<I18NText> descriptions=new ArrayList<I18NText>();
    descriptions.add(new I18NText(""String_Node_Str"",comment));
    task.setDescriptions(descriptions);
    List<I18NText> subjects=new ArrayList<I18NText>();
    subjects.add(new I18NText(""String_Node_Str"",comment));
    task.setSubjects(subjects);
  }
  String priorityString=(String)workItem.getParameter(""String_Node_Str"");
  int priority=0;
  if (priorityString != null) {
    try {
      priority=new Integer(priorityString);
    }
 catch (    NumberFormatException e) {
    }
  }
  task.setPriority(priority);
  TaskData taskData=new TaskData();
  taskData.setWorkItemId(workItem.getId());
  taskData.setProcessInstanceId(workItem.getProcessInstanceId());
  taskData.setSkipable(!""String_Node_Str"".equals(workItem.getParameter(""String_Node_Str"")));
  Long parentId=(Long)workItem.getParameter(""String_Node_Str"");
  if (parentId != null) {
    taskData.setParentId(parentId);
  }
  String subTaskStrategiesCommaSeparated=(String)workItem.getParameter(""String_Node_Str"");
  if (subTaskStrategiesCommaSeparated != null && !subTaskStrategiesCommaSeparated.equals(""String_Node_Str"")) {
    String[] subTaskStrategies=subTaskStrategiesCommaSeparated.split(""String_Node_Str"");
    List<SubTasksStrategy> strategies=new ArrayList<SubTasksStrategy>();
    for (    String subTaskStrategyString : subTaskStrategies) {
      SubTasksStrategy subTaskStrategy=SubTasksStrategyFactory.newStrategy(subTaskStrategyString);
      strategies.add(subTaskStrategy);
    }
    task.setSubTaskStrategies(strategies);
  }
  PeopleAssignments assignments=new PeopleAssignments();
  List<OrganizationalEntity> potentialOwners=new ArrayList<OrganizationalEntity>();
  String actorId=(String)workItem.getParameter(""String_Node_Str"");
  if (actorId != null && actorId.trim().length() > 0) {
    String[] actorIds=actorId.split(""String_Node_Str"");
    for (    String id : actorIds) {
      potentialOwners.add(new User(id.trim()));
    }
    if (potentialOwners.size() > 0) {
      taskData.setCreatedBy((User)potentialOwners.get(0));
    }
  }
  String groupId=(String)workItem.getParameter(""String_Node_Str"");
  if (groupId != null && groupId.trim().length() > 0) {
    String[] groupIds=groupId.split(""String_Node_Str"");
    for (    String id : groupIds) {
      potentialOwners.add(new Group(id.trim()));
    }
  }
  assignments.setPotentialOwners(potentialOwners);
  List<OrganizationalEntity> businessAdministrators=new ArrayList<OrganizationalEntity>();
  businessAdministrators.add(new User(""String_Node_Str""));
  assignments.setBusinessAdministrators(businessAdministrators);
  task.setPeopleAssignments(assignments);
  task.setTaskData(taskData);
  ContentData content=null;
  Object contentObject=workItem.getParameter(""String_Node_Str"");
  if (contentObject != null) {
    if (contentObject instanceof String) {
      content=new ContentData();
      content.setContent(((String)contentObject).getBytes());
      content.setAccessType(AccessType.Inline);
    }
 else {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      ObjectOutputStream out;
      try {
        out=new ObjectOutputStream(bos);
        out.writeObject(contentObject);
        out.close();
        content=new ContentData();
        content.setContent(bos.toByteArray());
        content.setAccessType(AccessType.Inline);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String deadlineParametersPrefix=""String_Node_Str"";
  Long deadlineTime=(Long)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
  List<Escalation> escalations=new ArrayList<Escalation>();
  if (deadlineTime != null) {
    String deadlineNotificationRecipients=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    String deadlineReassignment=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    if (deadlineReassignment == null && deadlineNotificationRecipients == null) {
      throw new IllegalStateException(""String_Node_Str"" + taskName + ""String_Node_Str"");
    }
    Deadline deadline=new Deadline();
    deadline.setEscalated(false);
    deadline.setDate(new Date(System.currentTimeMillis() + deadlineTime));
    Escalation escalation=new Escalation();
    escalation.setName(taskName + ""String_Node_Str"" + workItem.getId());
    if (deadlineReassignment != null) {
      List<Reassignment> reassignments=new ArrayList<Reassignment>();
      List<OrganizationalEntity> reassignmentsEntities=new ArrayList<OrganizationalEntity>();
      Reassignment reassignment=new Reassignment();
      String[] deadlineReassignments=deadlineReassignment.trim().split(""String_Node_Str"");
      for (      String r : deadlineReassignments) {
        reassignmentsEntities.add(new User(r.trim()));
      }
      reassignment.setPotentialOwners(reassignmentsEntities);
      reassignments.add(reassignment);
      escalation.setReassignments(reassignments);
    }
    if (deadlineNotificationRecipients != null) {
      List<Notification> notifications=new ArrayList<Notification>();
      List<OrganizationalEntity> recipientsEntities=new ArrayList<OrganizationalEntity>();
      EmailNotification notification=new EmailNotification();
      String[] notificationRecipients=deadlineNotificationRecipients.trim().split(""String_Node_Str"");
      for (      String r : notificationRecipients) {
        recipientsEntities.add(new User(r.trim()));
      }
      notification.setRecipients(recipientsEntities);
      notification.setBusinessAdministrators(businessAdministrators);
      Map<String,EmailNotificationHeader> emailHeaders=new HashMap<String,EmailNotificationHeader>();
      EmailNotificationHeader emailHeader=new EmailNotificationHeader();
      emailHeader.setLanguage(""String_Node_Str"");
      emailHeader.setFrom(""String_Node_Str"");
      emailHeader.setSubject(taskName + ""String_Node_Str"");
      emailHeader.setBody(taskName + ""String_Node_Str"");
      emailHeaders.put(""String_Node_Str"",emailHeader);
      notification.setEmailHeaders(emailHeaders);
      notifications.add(notification);
      escalation.setNotifications(notifications);
      escalations.add(escalation);
    }
    Deadlines deadlines=new Deadlines();
    deadline.setEscalations(escalations);
    List<Deadline> dls=new ArrayList<Deadline>();
    dls.add(deadline);
    deadlines.setStartDeadlines(dls);
    task.setDeadlines(deadlines);
  }
  client.addTask(task,content,null);
}","public void executeWorkItem(WorkItem workItem,WorkItemManager manager){
  if (this.manager == null) {
    this.manager=manager;
  }
 else {
    if (this.manager != manager) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  connect();
  Task task=new Task();
  String taskName=(String)workItem.getParameter(""String_Node_Str"");
  if (taskName != null) {
    List<I18NText> names=new ArrayList<I18NText>();
    names.add(new I18NText(""String_Node_Str"",taskName));
    task.setNames(names);
  }
  String comment=(String)workItem.getParameter(""String_Node_Str"");
  if (comment != null) {
    List<I18NText> descriptions=new ArrayList<I18NText>();
    descriptions.add(new I18NText(""String_Node_Str"",comment));
    task.setDescriptions(descriptions);
    List<I18NText> subjects=new ArrayList<I18NText>();
    subjects.add(new I18NText(""String_Node_Str"",comment));
    task.setSubjects(subjects);
  }
  String priorityString=(String)workItem.getParameter(""String_Node_Str"");
  int priority=0;
  if (priorityString != null) {
    try {
      priority=new Integer(priorityString);
    }
 catch (    NumberFormatException e) {
    }
  }
  task.setPriority(priority);
  TaskData taskData=new TaskData();
  taskData.setWorkItemId(workItem.getId());
  taskData.setProcessInstanceId(workItem.getProcessInstanceId());
  taskData.setSkipable(!""String_Node_Str"".equals(workItem.getParameter(""String_Node_Str"")));
  Long parentId=(Long)workItem.getParameter(""String_Node_Str"");
  if (parentId != null) {
    taskData.setParentId(parentId);
  }
  String subTaskStrategiesCommaSeparated=(String)workItem.getParameter(""String_Node_Str"");
  if (subTaskStrategiesCommaSeparated != null && !subTaskStrategiesCommaSeparated.equals(""String_Node_Str"")) {
    String[] subTaskStrategies=subTaskStrategiesCommaSeparated.split(""String_Node_Str"");
    List<SubTasksStrategy> strategies=new ArrayList<SubTasksStrategy>();
    for (    String subTaskStrategyString : subTaskStrategies) {
      SubTasksStrategy subTaskStrategy=SubTasksStrategyFactory.newStrategy(subTaskStrategyString);
      strategies.add(subTaskStrategy);
    }
    task.setSubTaskStrategies(strategies);
  }
  PeopleAssignments assignments=new PeopleAssignments();
  List<OrganizationalEntity> potentialOwners=new ArrayList<OrganizationalEntity>();
  String actorId=(String)workItem.getParameter(""String_Node_Str"");
  if (actorId != null && actorId.trim().length() > 0) {
    String[] actorIds=actorId.split(""String_Node_Str"");
    for (    String id : actorIds) {
      potentialOwners.add(new User(id.trim()));
    }
    if (potentialOwners.size() > 0) {
      taskData.setCreatedBy((User)potentialOwners.get(0));
    }
  }
  String groupId=(String)workItem.getParameter(""String_Node_Str"");
  if (groupId != null && groupId.trim().length() > 0) {
    String[] groupIds=groupId.split(""String_Node_Str"");
    for (    String id : groupIds) {
      potentialOwners.add(new Group(id.trim()));
    }
  }
  assignments.setPotentialOwners(potentialOwners);
  List<OrganizationalEntity> businessAdministrators=new ArrayList<OrganizationalEntity>();
  businessAdministrators.add(new User(""String_Node_Str""));
  assignments.setBusinessAdministrators(businessAdministrators);
  task.setPeopleAssignments(assignments);
  task.setTaskData(taskData);
  ContentData content=null;
  Object contentObject=workItem.getParameter(""String_Node_Str"");
  if (contentObject != null) {
    if (contentObject instanceof String) {
      content=new ContentData();
      content.setContent(((String)contentObject).getBytes());
      content.setAccessType(AccessType.Inline);
    }
 else {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      ObjectOutputStream out;
      try {
        out=new ObjectOutputStream(bos);
        out.writeObject(contentObject);
        out.close();
        content=new ContentData();
        content.setContent(bos.toByteArray());
        content.setAccessType(AccessType.Inline);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String deadlineParametersPrefix=""String_Node_Str"";
  Long deadlineTime=(Long)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
  List<Escalation> escalations=new ArrayList<Escalation>();
  if (deadlineTime != null) {
    String deadlineNotificationRecipients=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    String deadlineReassignment=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    if (deadlineReassignment == null && deadlineNotificationRecipients == null) {
      throw new IllegalStateException(""String_Node_Str"" + taskName + ""String_Node_Str"");
    }
    Deadline deadline=new Deadline();
    deadline.setEscalated(false);
    deadline.setDate(new Date(System.currentTimeMillis() + deadlineTime));
    Escalation escalation=new Escalation();
    escalation.setName(taskName + ""String_Node_Str"" + workItem.getId());
    if (deadlineReassignment != null) {
      List<Reassignment> reassignments=new ArrayList<Reassignment>();
      List<OrganizationalEntity> reassignmentsEntities=new ArrayList<OrganizationalEntity>();
      Reassignment reassignment=new Reassignment();
      String[] deadlineReassignments=deadlineReassignment.trim().split(""String_Node_Str"");
      for (      String r : deadlineReassignments) {
        reassignmentsEntities.add(new User(r.trim()));
      }
      reassignment.setPotentialOwners(reassignmentsEntities);
      reassignments.add(reassignment);
      escalation.setReassignments(reassignments);
    }
    if (deadlineNotificationRecipients != null) {
      List<Notification> notifications=new ArrayList<Notification>();
      List<OrganizationalEntity> recipientsEntities=new ArrayList<OrganizationalEntity>();
      EmailNotification notification=new EmailNotification();
      String[] notificationRecipients=deadlineNotificationRecipients.trim().split(""String_Node_Str"");
      for (      String r : notificationRecipients) {
        recipientsEntities.add(new User(r.trim()));
      }
      notification.setRecipients(recipientsEntities);
      notification.setBusinessAdministrators(businessAdministrators);
      Map<Language,EmailNotificationHeader> emailHeaders=new HashMap<Language,EmailNotificationHeader>();
      EmailNotificationHeader emailHeader=new EmailNotificationHeader();
      emailHeader.setLanguage(""String_Node_Str"");
      emailHeader.setFrom(""String_Node_Str"");
      emailHeader.setSubject(taskName + ""String_Node_Str"");
      emailHeader.setBody(taskName + ""String_Node_Str"");
      emailHeaders.put(new Language(""String_Node_Str""),emailHeader);
      notification.setEmailHeaders(emailHeaders);
      notifications.add(notification);
      escalation.setNotifications(notifications);
      escalations.add(escalation);
    }
    Deadlines deadlines=new Deadlines();
    deadline.setEscalations(escalations);
    List<Deadline> dls=new ArrayList<Deadline>();
    dls.add(deadline);
    deadlines.setStartDeadlines(dls);
    task.setDeadlines(deadlines);
  }
  client.addTask(task,content,null);
}",0.9970389170896784
2521,"public void executeWorkItem(WorkItem workItem,WorkItemManager manager){
  if (this.session == null) {
    if (this.manager == null) {
      this.manager=manager;
    }
 else {
      if (this.manager != manager) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  connect();
  Task task=new Task();
  String taskName=(String)workItem.getParameter(""String_Node_Str"");
  if (taskName != null) {
    List<I18NText> names=new ArrayList<I18NText>();
    names.add(new I18NText(""String_Node_Str"",taskName));
    task.setNames(names);
  }
  String comment=(String)workItem.getParameter(""String_Node_Str"");
  if (comment != null) {
    List<I18NText> descriptions=new ArrayList<I18NText>();
    descriptions.add(new I18NText(""String_Node_Str"",comment));
    task.setDescriptions(descriptions);
    List<I18NText> subjects=new ArrayList<I18NText>();
    subjects.add(new I18NText(""String_Node_Str"",comment));
    task.setSubjects(subjects);
  }
  String priorityString=(String)workItem.getParameter(""String_Node_Str"");
  int priority=0;
  if (priorityString != null) {
    try {
      priority=new Integer(priorityString);
    }
 catch (    NumberFormatException e) {
    }
  }
  task.setPriority(priority);
  TaskData taskData=new TaskData();
  taskData.setWorkItemId(workItem.getId());
  taskData.setProcessInstanceId(workItem.getProcessInstanceId());
  if (session != null && session.getProcessInstance(workItem.getProcessInstanceId()) != null) {
    taskData.setProcessId(session.getProcessInstance(workItem.getProcessInstanceId()).getProcess().getId());
  }
  if (session != null && (session instanceof StatefulKnowledgeSession)) {
    taskData.setProcessSessionId(((StatefulKnowledgeSession)session).getId());
  }
  taskData.setSkipable(!""String_Node_Str"".equals(workItem.getParameter(""String_Node_Str"")));
  Long parentId=(Long)workItem.getParameter(""String_Node_Str"");
  if (parentId != null) {
    taskData.setParentId(parentId);
  }
  String subTaskStrategiesCommaSeparated=(String)workItem.getParameter(""String_Node_Str"");
  if (subTaskStrategiesCommaSeparated != null && !subTaskStrategiesCommaSeparated.equals(""String_Node_Str"")) {
    String[] subTaskStrategies=subTaskStrategiesCommaSeparated.split(""String_Node_Str"");
    List<SubTasksStrategy> strategies=new ArrayList<SubTasksStrategy>();
    for (    String subTaskStrategyString : subTaskStrategies) {
      SubTasksStrategy subTaskStrategy=SubTasksStrategyFactory.newStrategy(subTaskStrategyString);
      strategies.add(subTaskStrategy);
    }
    task.setSubTaskStrategies(strategies);
  }
  PeopleAssignments assignments=new PeopleAssignments();
  List<OrganizationalEntity> potentialOwners=new ArrayList<OrganizationalEntity>();
  String actorId=(String)workItem.getParameter(""String_Node_Str"");
  if (actorId != null && actorId.trim().length() > 0) {
    String[] actorIds=actorId.split(""String_Node_Str"");
    for (    String id : actorIds) {
      potentialOwners.add(new User(id.trim()));
    }
    if (potentialOwners.size() > 0) {
      taskData.setCreatedBy((User)potentialOwners.get(0));
    }
  }
  String groupId=(String)workItem.getParameter(""String_Node_Str"");
  if (groupId != null && groupId.trim().length() > 0) {
    String[] groupIds=groupId.split(""String_Node_Str"");
    for (    String id : groupIds) {
      potentialOwners.add(new Group(id.trim()));
    }
  }
  assignments.setPotentialOwners(potentialOwners);
  List<OrganizationalEntity> businessAdministrators=new ArrayList<OrganizationalEntity>();
  businessAdministrators.add(new User(""String_Node_Str""));
  assignments.setBusinessAdministrators(businessAdministrators);
  task.setPeopleAssignments(assignments);
  task.setTaskData(taskData);
  ContentData content=null;
  Object contentObject=workItem.getParameter(""String_Node_Str"");
  if (contentObject == null) {
    contentObject=workItem.getParameters();
  }
  if (contentObject != null) {
    if (contentObject instanceof String) {
      content=new ContentData();
      content.setContent(((String)contentObject).getBytes());
      content.setAccessType(AccessType.Inline);
    }
 else {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      ObjectOutputStream out;
      try {
        out=new ObjectOutputStream(bos);
        out.writeObject(contentObject);
        out.close();
        content=new ContentData();
        content.setContent(bos.toByteArray());
        content.setAccessType(AccessType.Inline);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String deadlineParametersPrefix=""String_Node_Str"";
  Long deadlineTime=(Long)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
  List<Escalation> escalations=new ArrayList<Escalation>();
  if (deadlineTime != null) {
    String deadlineNotificationRecipients=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    String deadlineReassignment=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    if (deadlineReassignment == null && deadlineNotificationRecipients == null) {
      throw new IllegalStateException(""String_Node_Str"" + taskName + ""String_Node_Str"");
    }
    Deadline deadline=new Deadline();
    deadline.setEscalated(false);
    deadline.setDate(new Date(System.currentTimeMillis() + deadlineTime));
    Escalation escalation=new Escalation();
    escalation.setName(taskName + ""String_Node_Str"" + workItem.getId());
    if (deadlineReassignment != null) {
      List<Reassignment> reassignments=new ArrayList<Reassignment>();
      List<OrganizationalEntity> reassignmentsEntities=new ArrayList<OrganizationalEntity>();
      Reassignment reassignment=new Reassignment();
      String[] deadlineReassignments=deadlineReassignment.trim().split(""String_Node_Str"");
      for (      String r : deadlineReassignments) {
        reassignmentsEntities.add(new User(r.trim()));
      }
      reassignment.setPotentialOwners(reassignmentsEntities);
      reassignments.add(reassignment);
      escalation.setReassignments(reassignments);
    }
    if (deadlineNotificationRecipients != null) {
      List<Notification> notifications=new ArrayList<Notification>();
      List<OrganizationalEntity> recipientsEntities=new ArrayList<OrganizationalEntity>();
      EmailNotification notification=new EmailNotification();
      String[] notificationRecipients=deadlineNotificationRecipients.trim().split(""String_Node_Str"");
      for (      String r : notificationRecipients) {
        recipientsEntities.add(new User(r.trim()));
      }
      notification.setRecipients(recipientsEntities);
      notification.setBusinessAdministrators(businessAdministrators);
      Map<String,EmailNotificationHeader> emailHeaders=new HashMap<String,EmailNotificationHeader>();
      EmailNotificationHeader emailHeader=new EmailNotificationHeader();
      emailHeader.setLanguage(""String_Node_Str"");
      emailHeader.setFrom(""String_Node_Str"");
      emailHeader.setSubject(taskName + ""String_Node_Str"");
      emailHeader.setBody(taskName + ""String_Node_Str"");
      emailHeaders.put(""String_Node_Str"",emailHeader);
      notification.setEmailHeaders(emailHeaders);
      notifications.add(notification);
      escalation.setNotifications(notifications);
      escalations.add(escalation);
    }
    Deadlines deadlines=new Deadlines();
    deadline.setEscalations(escalations);
    List<Deadline> dls=new ArrayList<Deadline>();
    dls.add(deadline);
    deadlines.setStartDeadlines(dls);
    task.setDeadlines(deadlines);
  }
  client.addTask(task,content);
}","public void executeWorkItem(WorkItem workItem,WorkItemManager manager){
  if (this.session == null) {
    if (this.manager == null) {
      this.manager=manager;
    }
 else {
      if (this.manager != manager) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  connect();
  Task task=new Task();
  String taskName=(String)workItem.getParameter(""String_Node_Str"");
  if (taskName != null) {
    List<I18NText> names=new ArrayList<I18NText>();
    names.add(new I18NText(""String_Node_Str"",taskName));
    task.setNames(names);
  }
  String comment=(String)workItem.getParameter(""String_Node_Str"");
  if (comment != null) {
    List<I18NText> descriptions=new ArrayList<I18NText>();
    descriptions.add(new I18NText(""String_Node_Str"",comment));
    task.setDescriptions(descriptions);
    List<I18NText> subjects=new ArrayList<I18NText>();
    subjects.add(new I18NText(""String_Node_Str"",comment));
    task.setSubjects(subjects);
  }
  String priorityString=(String)workItem.getParameter(""String_Node_Str"");
  int priority=0;
  if (priorityString != null) {
    try {
      priority=new Integer(priorityString);
    }
 catch (    NumberFormatException e) {
    }
  }
  task.setPriority(priority);
  TaskData taskData=new TaskData();
  taskData.setWorkItemId(workItem.getId());
  taskData.setProcessInstanceId(workItem.getProcessInstanceId());
  if (session != null && session.getProcessInstance(workItem.getProcessInstanceId()) != null) {
    taskData.setProcessId(session.getProcessInstance(workItem.getProcessInstanceId()).getProcess().getId());
  }
  if (session != null && (session instanceof StatefulKnowledgeSession)) {
    taskData.setProcessSessionId(((StatefulKnowledgeSession)session).getId());
  }
  taskData.setSkipable(!""String_Node_Str"".equals(workItem.getParameter(""String_Node_Str"")));
  Long parentId=(Long)workItem.getParameter(""String_Node_Str"");
  if (parentId != null) {
    taskData.setParentId(parentId);
  }
  String subTaskStrategiesCommaSeparated=(String)workItem.getParameter(""String_Node_Str"");
  if (subTaskStrategiesCommaSeparated != null && !subTaskStrategiesCommaSeparated.equals(""String_Node_Str"")) {
    String[] subTaskStrategies=subTaskStrategiesCommaSeparated.split(""String_Node_Str"");
    List<SubTasksStrategy> strategies=new ArrayList<SubTasksStrategy>();
    for (    String subTaskStrategyString : subTaskStrategies) {
      SubTasksStrategy subTaskStrategy=SubTasksStrategyFactory.newStrategy(subTaskStrategyString);
      strategies.add(subTaskStrategy);
    }
    task.setSubTaskStrategies(strategies);
  }
  PeopleAssignments assignments=new PeopleAssignments();
  List<OrganizationalEntity> potentialOwners=new ArrayList<OrganizationalEntity>();
  String actorId=(String)workItem.getParameter(""String_Node_Str"");
  if (actorId != null && actorId.trim().length() > 0) {
    String[] actorIds=actorId.split(""String_Node_Str"");
    for (    String id : actorIds) {
      potentialOwners.add(new User(id.trim()));
    }
    if (potentialOwners.size() > 0) {
      taskData.setCreatedBy((User)potentialOwners.get(0));
    }
  }
  String groupId=(String)workItem.getParameter(""String_Node_Str"");
  if (groupId != null && groupId.trim().length() > 0) {
    String[] groupIds=groupId.split(""String_Node_Str"");
    for (    String id : groupIds) {
      potentialOwners.add(new Group(id.trim()));
    }
  }
  assignments.setPotentialOwners(potentialOwners);
  List<OrganizationalEntity> businessAdministrators=new ArrayList<OrganizationalEntity>();
  businessAdministrators.add(new User(""String_Node_Str""));
  assignments.setBusinessAdministrators(businessAdministrators);
  task.setPeopleAssignments(assignments);
  task.setTaskData(taskData);
  ContentData content=null;
  Object contentObject=workItem.getParameter(""String_Node_Str"");
  if (contentObject == null) {
    contentObject=workItem.getParameters();
  }
  if (contentObject != null) {
    if (contentObject instanceof String) {
      content=new ContentData();
      content.setContent(((String)contentObject).getBytes());
      content.setAccessType(AccessType.Inline);
    }
 else {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      ObjectOutputStream out;
      try {
        out=new ObjectOutputStream(bos);
        out.writeObject(contentObject);
        out.close();
        content=new ContentData();
        content.setContent(bos.toByteArray());
        content.setAccessType(AccessType.Inline);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String deadlineParametersPrefix=""String_Node_Str"";
  Long deadlineTime=(Long)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
  List<Escalation> escalations=new ArrayList<Escalation>();
  if (deadlineTime != null) {
    String deadlineNotificationRecipients=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    String deadlineReassignment=(String)workItem.getParameter(deadlineParametersPrefix + ""String_Node_Str"");
    if (deadlineReassignment == null && deadlineNotificationRecipients == null) {
      throw new IllegalStateException(""String_Node_Str"" + taskName + ""String_Node_Str"");
    }
    Deadline deadline=new Deadline();
    deadline.setEscalated(false);
    deadline.setDate(new Date(System.currentTimeMillis() + deadlineTime));
    Escalation escalation=new Escalation();
    escalation.setName(taskName + ""String_Node_Str"" + workItem.getId());
    if (deadlineReassignment != null) {
      List<Reassignment> reassignments=new ArrayList<Reassignment>();
      List<OrganizationalEntity> reassignmentsEntities=new ArrayList<OrganizationalEntity>();
      Reassignment reassignment=new Reassignment();
      String[] deadlineReassignments=deadlineReassignment.trim().split(""String_Node_Str"");
      for (      String r : deadlineReassignments) {
        reassignmentsEntities.add(new User(r.trim()));
      }
      reassignment.setPotentialOwners(reassignmentsEntities);
      reassignments.add(reassignment);
      escalation.setReassignments(reassignments);
    }
    if (deadlineNotificationRecipients != null) {
      List<Notification> notifications=new ArrayList<Notification>();
      List<OrganizationalEntity> recipientsEntities=new ArrayList<OrganizationalEntity>();
      EmailNotification notification=new EmailNotification();
      String[] notificationRecipients=deadlineNotificationRecipients.trim().split(""String_Node_Str"");
      for (      String r : notificationRecipients) {
        recipientsEntities.add(new User(r.trim()));
      }
      notification.setRecipients(recipientsEntities);
      notification.setBusinessAdministrators(businessAdministrators);
      Map<Language,EmailNotificationHeader> emailHeaders=new HashMap<Language,EmailNotificationHeader>();
      EmailNotificationHeader emailHeader=new EmailNotificationHeader();
      emailHeader.setLanguage(""String_Node_Str"");
      emailHeader.setFrom(""String_Node_Str"");
      emailHeader.setSubject(taskName + ""String_Node_Str"");
      emailHeader.setBody(taskName + ""String_Node_Str"");
      emailHeaders.put(new Language(""String_Node_Str""),emailHeader);
      notification.setEmailHeaders(emailHeaders);
      notifications.add(notification);
      escalation.setNotifications(notifications);
      escalations.add(escalation);
    }
    Deadlines deadlines=new Deadlines();
    deadline.setEscalations(escalations);
    List<Deadline> dls=new ArrayList<Deadline>();
    dls.add(deadline);
    deadlines.setStartDeadlines(dls);
    task.setDeadlines(deadlines);
  }
  client.addTask(task,content);
}",0.9972295514511872
2522,"@Before public void setup() throws IOException {
  this.ksession=this.createKSession();
  KnowledgeRuntimeLoggerFactory.newConsoleLogger(ksession);
  File logFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  System.out.println(""String_Node_Str"" + logFile.getAbsolutePath() + ""String_Node_Str"");
  fileLogger=KnowledgeRuntimeLoggerFactory.newFileLogger(ksession,logFile.getAbsolutePath());
  humanTaskHandler=new SyncDeadlineEnabledWSHumanTaskHandler(localTaskService,ksession);
  humanTaskHandler.setLocal(true);
  humanTaskHandler.connect();
  this.ksession.getWorkItemManager().registerWorkItemHandler(""String_Node_Str"",humanTaskHandler);
  ((DefaultEscalatedDeadlineHandler)this.getEscalatedDeadlineHandler()).setManager(this.ksession.getWorkItemManager());
  wiser=new Wiser(1125);
  wiser.setHostname(""String_Node_Str"");
  wiser.start();
}","@Before public void setup() throws IOException {
  this.ksession=this.createKSession();
  KnowledgeRuntimeLoggerFactory.newConsoleLogger(ksession);
  File logFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  System.out.println(""String_Node_Str"" + logFile.getAbsolutePath() + ""String_Node_Str"");
  fileLogger=KnowledgeRuntimeLoggerFactory.newFileLogger(ksession,logFile.getAbsolutePath());
  humanTaskHandler=new SyncDeadlineEnabledWSHumanTaskHandler(localTaskService,ksession);
  humanTaskHandler.setLocal(true);
  humanTaskHandler.connect();
  this.ksession.getWorkItemManager().registerWorkItemHandler(""String_Node_Str"",humanTaskHandler);
  ((DefaultEscalatedDeadlineHandler)this.getEscalatedDeadlineHandler()).setManager(this.ksession.getWorkItemManager());
  wiser=new Wiser();
  wiser.setHostname(""String_Node_Str"");
  wiser.setPort(1125);
  wiser.start();
}",0.9430051813471504
2523,"/** 
 * Compare the two dynamic composites at the given index
 * @param first
 * @param second
 * @param index
 * @return
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public int compare(DynamicComposite first,DynamicComposite second,int index){
  Comparable c1Value=(Comparable)serializer.get(first,index);
  Comparable c2Value=(Comparable)serializer.get(second,index);
  if (c1Value == null && c2Value == null) {
    return 0;
  }
  if (c1Value == null) {
    return 1;
  }
  if (c2Value == null) {
    return -1;
  }
  return c1Value.compareTo(c2Value);
}","/** 
 * Compare the two dynamic composites at the given index
 * @param first
 * @param second
 * @param index
 * @return
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public int compare(DynamicComposite first,DynamicComposite second,int index){
  Comparable c1Value=(Comparable)getSerializationStrategy().get(first,index);
  Comparable c2Value=(Comparable)getSerializationStrategy().get(second,index);
  if (c1Value == null && c2Value == null) {
    return 0;
  }
  if (c1Value == null) {
    return 1;
  }
  if (c2Value == null) {
    return -1;
  }
  return c1Value.compareTo(c2Value);
}",0.9626485568760612
2524,"/** 
 * Create the write composite.
 * @param manager The state manager
 * @param composite The composite to write to
 * @param instance The field instance
 */
public void addFieldWrite(DynamicComposite composite,Object instance){
  Object current=null;
  if (instance != null) {
    current=ProxyUtils.getAdded(instance);
  }
  serializer.addToComponent(composite,current);
}","/** 
 * Create the write composite.
 * @param manager The state manager
 * @param composite The composite to write to
 * @param instance The field instance
 */
public void addFieldWrite(DynamicComposite composite,Object instance){
  Object current=null;
  if (instance != null) {
    current=ProxyUtils.getAdded(instance);
  }
  getSerializationStrategy().addToComponent(composite,current);
}",0.9713541666666666
2525,"/** 
 * Create the write composite.
 * @param composite The composite to write to
 * @param instance The field instance
 */
public boolean addFieldDelete(DynamicComposite composite,Object instance){
  Object original=ProxyUtils.getRemoved(instance);
  if (original != null) {
    serializer.addToComponent(composite,original);
    return true;
  }
  original=ProxyUtils.getChanged(instance);
  if (original != null) {
    serializer.addToComponent(composite,original);
    return true;
  }
  Object current=ProxyUtils.getAdded(instance);
  serializer.addToComponent(composite,current);
  return false;
}","/** 
 * Create the write composite.
 * @param composite The composite to write to
 * @param instance The field instance
 */
public boolean addFieldDelete(DynamicComposite composite,Object instance){
  Object original=ProxyUtils.getRemoved(instance);
  if (original != null) {
    getSerializationStrategy().addToComponent(composite,original);
    return true;
  }
  original=ProxyUtils.getChanged(instance);
  if (original != null) {
    getSerializationStrategy().addToComponent(composite,original);
    return true;
  }
  Object current=ProxyUtils.getAdded(instance);
  getSerializationStrategy().addToComponent(composite,current);
  return false;
}",0.9473684210526316
2526,"/** 
 * Prints information about this field
 */
@Override public String toString(){
  return String.format(""String_Node_Str"",new Object[]{targetField.getName(),targetField.getIndex(),serializer.getClass().getName()});
}","/** 
 * Prints information about this field
 */
@Override public String toString(){
  return String.format(""String_Node_Str"",new Object[]{targetField.getName(),targetField.getIndex(),getSerializationStrategy().getClass().getName()});
}",0.9515418502202644
2527,"/** 
 * @param order The order object
 * @param fmd The field meta data
 * @param index The 0 based position in the index
 */
public AbstractOrderField(Order order,FieldMetaData fmd){
  super(fmd,order.getName());
  this.order=order;
  invert=this.order.isAscending() ? 1 : -1;
  if (!Comparable.class.isAssignableFrom(targetField.getDeclaredType())) {
    throw new MetaDataException(String.format(""String_Node_Str"",fmd.getName(),fmd.getDeclaringMetaData().getDescribedType(),Comparable.class));
  }
  orderSerializer=IndexSerializationStrategyFactory.getFieldSerializationStrategy(fmd,order.isAscending());
}","/** 
 * @param order The order object
 * @param fmd The field meta data
 * @param index The 0 based position in the index
 */
public AbstractOrderField(Order order,FieldMetaData fmd){
  super(fmd,order.getName());
  this.order=order;
  invert=this.order.isAscending() ? 1 : -1;
  if (!Comparable.class.isAssignableFrom(targetField.getDeclaredType())) {
    throw new MetaDataException(String.format(""String_Node_Str"",fmd.getName(),fmd.getDeclaringMetaData().getDescribedType(),Comparable.class));
  }
  orderSerializer=IndexSerializationStrategyFactory.getFieldSerializationStrategy(targetField,order.isAscending());
}",0.990228013029316
2528,"public QueryIndexField(FieldMetaData fmd){
  super(fmd,fmd.getName());
}","public QueryIndexField(FieldMetaData fmd){
  super(fmd,fmd.getName());
  this.serializer=IndexSerializationStrategyFactory.getFieldSerializationStrategy(targetField,true);
}",0.5877551020408164
2529,"/** 
 * Scan the given index query and add the results to the provided set. The set comparator of the dynamic columns are compared via a tree comparator
 * @param query
 */
public ScanBuffer scanIndex(IndexQuery query,Keyspace keyspace){
  DynamicComposite startScan=newComposite();
  DynamicComposite endScan=newComposite();
  int length=fields.length;
  int last=length - 1;
  FieldExpression exp=null;
  for (int i=0; i < last; i++) {
    exp=query.getExpression(this.fields[i].getMetaData());
    this.fields[i].addToComposite(startScan,i,exp.getStart(),ComponentEquality.EQUAL);
    this.fields[i].addToComposite(endScan,i,exp.getEnd(),ComponentEquality.EQUAL);
  }
  exp=query.getExpression(this.fields[last].getMetaData());
  this.fields[last].addToComposite(startScan,last,exp.getStart(),exp.getStartEquality());
  this.fields[last].addToComposite(endScan,last,exp.getEnd(),exp.getEndEquality());
  return new ScanBuffer(keyspace,startScan,endScan,indexName);
}","/** 
 * Scan the given index query and add the results to the provided set. The set comparator of the dynamic columns are compared via a tree comparator
 * @param query
 */
public ScanBuffer scanIndex(IndexQuery query,Keyspace keyspace){
  DynamicComposite startScan=newComposite();
  DynamicComposite endScan=newComposite();
  int length=fields.length;
  int last=length - 1;
  FieldExpression exp=null;
  for (int i=0; i < last; i++) {
    exp=query.getExpression(this.fields[i].getMetaData());
    this.fields[i].addToComposite(startScan,i,exp.getStart(),ComponentEquality.EQUAL);
    this.fields[i].addToComposite(endScan,i,exp.getEnd(),ComponentEquality.EQUAL);
  }
  exp=query.getExpression(this.fields[last].getMetaData());
  this.fields[last].addToComposite(startScan,last,exp.getStart(),query.getStartEquality());
  this.fields[last].addToComposite(endScan,last,exp.getEnd(),query.getEndEquality());
  return new ScanBuffer(keyspace,startScan,endScan,indexName);
}",0.991761071060762
2530,"/** 
 * Scan the given index query and add the results to the provided set. The set comparator of the dynamic columns are compared via a tree comparator
 * @param query
 * @return 
 */
public ScanBuffer scanIndex(IndexQuery query,Keyspace keyspace){
  DynamicComposite startScan=newComposite();
  DynamicComposite endScan=newComposite();
  startScan.addComponent(discriminatorValue,stringSerializer);
  endScan.addComponent(discriminatorValue,stringSerializer);
  int length=fields.length;
  int last=length - 1;
  int componentIndex=1;
  FieldExpression exp=null;
  for (int i=0; i < last; i++, componentIndex++) {
    exp=query.getExpression(this.fields[i].getMetaData());
    this.fields[i].addToComposite(startScan,componentIndex,exp.getStart(),ComponentEquality.EQUAL);
    this.fields[i].addToComposite(endScan,componentIndex,exp.getEnd(),ComponentEquality.EQUAL);
  }
  exp=query.getExpression(this.fields[last].getMetaData());
  this.fields[last].addToComposite(startScan,componentIndex,exp.getStart(),exp.getStartEquality());
  this.fields[last].addToComposite(endScan,componentIndex,exp.getEnd(),exp.getEndEquality());
  return new ScanBuffer(keyspace,startScan,endScan,indexName);
}","/** 
 * Scan the given index query and add the results to the provided set. The set comparator of the dynamic columns are compared via a tree comparator
 * @param query
 * @return 
 */
public ScanBuffer scanIndex(IndexQuery query,Keyspace keyspace){
  DynamicComposite startScan=newComposite();
  DynamicComposite endScan=newComposite();
  startScan.addComponent(discriminatorValue,stringSerializer);
  endScan.addComponent(discriminatorValue,stringSerializer);
  int length=fields.length;
  int last=length - 1;
  int componentIndex=1;
  FieldExpression exp=null;
  for (int i=0; i < last; i++, componentIndex++) {
    exp=query.getExpression(this.fields[i].getMetaData());
    this.fields[i].addToComposite(startScan,componentIndex,exp.getStart(),ComponentEquality.EQUAL);
    this.fields[i].addToComposite(endScan,componentIndex,exp.getEnd(),ComponentEquality.EQUAL);
  }
  exp=query.getExpression(this.fields[last].getMetaData());
  this.fields[last].addToComposite(startScan,componentIndex,exp.getStart(),query.getStartEquality());
  this.fields[last].addToComposite(endScan,componentIndex,exp.getEnd(),query.getEndEquality());
  return new ScanBuffer(keyspace,startScan,endScan,indexName);
}",0.993305439330544
2531,"/** 
 * @return the endEquality
 */
public ComponentEquality getEndEquality(){
  return endEquality;
}","/** 
 * @return the endEquality
 */
public Operand getEndEquality(){
  return endEquality;
}",0.8969072164948454
2532,"/** 
 * @param start the start to set
 * @param inclusive True if this is contains an equality operand I.E =, <=, >=
 */
public void setStart(Object start,ComponentEquality equality){
  if (this.startSet) {
    throw new UnsupportedException(String.format(""String_Node_Str"",field));
  }
  this.start=start;
  this.startEquality=equality;
  this.startSet=true;
}","/** 
 * @param start the start to set
 * @param inclusive True if this is contains an equality operand I.E =, <=, >=
 */
public void setStart(Object start,Operand equality){
  if (this.startSet) {
    throw new UnsupportedException(String.format(""String_Node_Str"",field));
  }
  this.start=start;
  this.startEquality=equality;
  this.startSet=true;
}",0.9662921348314608
2533,"/** 
 * @param end the end to set
 * @param inclusive True if this is contains an equality operand I.E =, <=, >=
 */
public void setEnd(Object end,ComponentEquality equality){
  if (this.endSet) {
    throw new UnsupportedException(String.format(""String_Node_Str"",field));
  }
  this.end=end;
  this.endEquality=equality;
  this.endSet=true;
}","/** 
 * @param end the end to set
 * @param inclusive True if this is contains an equality operand I.E =, <=, >=
 */
public void setEnd(Object end,Operand equality){
  if (this.endSet) {
    throw new UnsupportedException(String.format(""String_Node_Str"",field));
  }
  this.end=end;
  this.endEquality=equality;
  this.endSet=true;
}",0.9644970414201184
2534,"/** 
 * @return the startEquality
 */
public ComponentEquality getStartEquality(){
  return startEquality;
}","/** 
 * @return the startEquality
 */
public Operand getStartEquality(){
  return startEquality;
}",0.9029126213592232
2535,"public FieldExpression(FieldMetaData field){
  this.field=field;
  startEquality=ComponentEquality.EQUAL;
  endEquality=ComponentEquality.EQUAL;
}","public FieldExpression(FieldMetaData field){
  this.field=field;
  startEquality=Operand.Equal;
  endEquality=Operand.Equal;
}",0.8382352941176471
2536,"/** 
 * Read the field from the query result into the opject within the state manager.
 * @param stateManager
 * @param result
 * @return True if the field was loaded. False otherwise
 */
@SuppressWarnings(""String_Node_Str"") public boolean readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<String,byte[]>> result){
  HColumn<String,byte[]> column=result.get().getColumnByName(name);
  if (column == null) {
    stateManager.store(fieldId,null);
    return false;
  }
  DynamicComposite composite=serializer.fromBytes(column.getValue());
  Collection<Object> collection=(Collection<Object>)stateManager.newFieldProxy(fieldId);
  int size=composite.get(0,intSerializer);
  for (int i=1; i <= size; i++) {
    Object value=embeddedSerializer.getObject(composite.getComponent(i).getBytes());
    collection.add(value);
  }
  stateManager.store(fieldId,collection);
  return true;
}","/** 
 * Read the field from the query result into the opject within the state manager.
 * @param stateManager
 * @param result
 * @return True if the field was loaded. False otherwise
 */
@SuppressWarnings(""String_Node_Str"") public boolean readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<String,byte[]>> result){
  HColumn<String,byte[]> column=result.get().getColumnByName(name);
  if (column == null) {
    stateManager.store(fieldId,null);
    return false;
  }
  DynamicComposite composite=serializer.fromBytes(column.getValue());
  Collection<Object> collection=(Collection<Object>)stateManager.newFieldProxy(fieldId);
  int size=composite.get(0,intSerializer);
  for (int i=1; i <= size; i++) {
    Object value=embeddedSerializer.getObject(composite.getComponent(i).getBytes());
    if (value == null) {
      continue;
    }
    collection.add(value);
  }
  stateManager.store(fieldId,collection);
  return true;
}",0.955858310626703
2537,"@SuppressWarnings(""String_Node_Str"") @Override public <T>T getObject(ByteBuffer bytes){
  try {
    ByteBufferInputStream input=new ByteBufferInputStream(bytes);
    XStream xstream=new XStream();
    T result=(T)xstream.fromXML(input);
    input.close();
    return result;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public <T>T getObject(ByteBuffer bytes){
  try {
    ByteBufferInputStream input=new ByteBufferInputStream(bytes);
    XStream xstream=new XStream();
    T result=(T)xstream.fromXML(input);
    input.close();
    return result;
  }
 catch (  Exception e) {
    return null;
  }
}",0.9156976744186046
2538,"/** 
 * Compare 2 index definitions. Index definitions are compared in the following way If an order is defined, then all order fields must be preset and in the same order for order comparison to == 0 If these orders are not the same, the shortest number of order operands is returned as less. If the order operands are the same, the fields are compared. The fields follow the same logic of operands Indexes with less fields are returned with < 0 to encourage the use of shorter rows for faster querying Not a null safe comparator
 * @author Todd Nine
 */
@Override public int compareTo(IndexDefinition def2){
  int compare=0;
  IndexOrder[] def2Order=def2.getOrderFields();
  if (orderFields.length > def2Order.length) {
    return 1;
  }
 else   if (orderFields.length < def2Order.length) {
    return -1;
  }
  for (int i=0; i < orderFields.length; i++) {
    compare=orderFields[i].getName().compareTo(def2Order[i].getName());
    if (compare != 0) {
      return compare;
    }
  }
  FieldOrder[] def2Field=def2.getIndexedFields();
  if (indexedFields.length > def2Field.length) {
    return 1;
  }
 else   if (indexedFields.length < def2Field.length) {
    return -1;
  }
  int matchCount=0;
  for (int i=0; i < indexedFields.length; i++) {
    for (int j=0; j < def2Field.length; j++) {
      if (indexedFields[i].getName().equals(def2Field[j].getName())) {
        matchCount++;
        break;
      }
    }
  }
  return matchCount - indexedFields.length;
}","/** 
 * Compare 2 index definitions. Index definitions are compared in the following way If an order is defined, then all order fields must be preset and in the same order for order comparison to == 0 If these orders are not the same, the shortest number of order operands is returned as less. If the order operands are the same, the fields are compared. The fields follow the same logic of operands Indexes with less fields are returned with < 0 to encourage the use of shorter rows for faster querying Not a null safe comparator
 * @author Todd Nine
 */
@Override public int compareTo(IndexDefinition def2){
  int compare=0;
  IndexOrder[] def2Order=def2.getOrderFields();
  if (def2Order.length > 0)   if (orderFields.length > def2Order.length) {
    return 1;
  }
 else   if (orderFields.length < def2Order.length) {
    return -1;
  }
  for (int i=0; i < orderFields.length; i++) {
    compare=orderFields[i].getName().compareTo(def2Order[i].getName());
    if (compare != 0) {
      return compare;
    }
  }
  FieldOrder[] def2Field=def2.getIndexedFields();
  if (indexedFields.length > def2Field.length) {
    return 1;
  }
 else   if (indexedFields.length < def2Field.length) {
    return -1;
  }
  int matchCount=0;
  for (int i=0; i < indexedFields.length; i++) {
    for (int j=0; j < def2Field.length; j++) {
      if (indexedFields[i].getName().equals(def2Field[j].getName())) {
        matchCount++;
        break;
      }
    }
  }
  return matchCount - indexedFields.length;
}",0.9905341446923596
2539,"@Override public Object getResultObject() throws Exception {
  DynamicComposite current=iterator.next();
  int length=current.getComponents().size();
  Object id=current.get(length - 1,idSerializer);
  Object jpaId=ctx.newObjectId(classMeta.getDescribedType(),id);
  return ctx.find(jpaId,fetchConfig,null,null,0);
}","@Override public Object getResultObject() throws Exception {
  DynamicComposite current=iterator.next();
  int length=current.getComponents().size();
  Object id=keyStrategy.getInstance(current.getComponent(length - 1).getBytes());
  Object jpaId=ctx.newObjectId(classMeta.getDescribedType(),id);
  return ctx.find(jpaId,fetchConfig,null,null,0);
}",0.8825301204819277
2540,"public CassandraResultObjectProvider(Set<DynamicComposite> results,StoreContext ctx,FetchConfiguration fetchConfig,CassandraClassMetaData classMeta){
  this.results=results;
  this.ctx=ctx;
  this.classMeta=classMeta;
  this.fetchConfig=fetchConfig;
  idSerializer=MappingUtils.getSerializerForPk(classMeta);
}","public CassandraResultObjectProvider(Set<DynamicComposite> results,StoreContext ctx,FetchConfiguration fetchConfig,CassandraClassMetaData classMeta){
  this.results=results;
  this.ctx=ctx;
  this.classMeta=classMeta;
  this.fetchConfig=fetchConfig;
  keyStrategy=MappingUtils.getKeyStrategy(classMeta);
}",0.926829268292683
2541,"@Override protected ResultObjectProvider executeQuery(Executor ex,ClassMetaData base,ClassMetaData[] types,boolean subclasses,ExpressionFactory[] facts,QueryExpressions[] parsed,Object[] params,Range range){
  log.debug(""String_Node_Str"");
  IndexExpressionVisitor visitor=new IndexExpressionVisitor((CassandraClassMetaData)base);
  parsed[0].filter.acceptVisit(visitor);
  List<IndexQuery> queries=visitor.getVisitors();
  SortedSet<DynamicComposite> columnResults=null;
  AbstractIndexOperation indexOp=null;
  for (  IndexQuery query : queries) {
    indexOp=getIndexOp(query,parsed[0].ordering,parsed[0].ascending,(CassandraClassMetaData)base);
    log.debug(""String_Node_Str"",new Object[]{indexOp,base,range});
    if (columnResults == null) {
      columnResults=new TreeSet<DynamicComposite>(indexOp.getComprator());
    }
    indexOp.scanIndex(query,columnResults,conf.getKeyspace());
  }
  if (range.start != 0 || range.end != Long.MAX_VALUE) {
    long current=0;
    DynamicComposite start=null;
    DynamicComposite end=null;
    Iterator<DynamicComposite> currentSet=columnResults.iterator();
    for (; current <= range.start && currentSet.hasNext(); current++) {
      start=currentSet.next();
    }
    long size=range.end - range.start;
    for (long index=0; index < size && currentSet.hasNext(); index++) {
      end=currentSet.next();
    }
    if (start != null && end != null) {
      columnResults=columnResults.subSet(start,end);
    }
  }
  CassandraResultObjectProvider results=new CassandraResultObjectProvider(columnResults,this.getContext().getStoreContext(),ctx.getFetchConfiguration(),(CassandraClassMetaData)base);
  return results;
}","@Override protected ResultObjectProvider executeQuery(Executor ex,ClassMetaData base,ClassMetaData[] types,boolean subclasses,ExpressionFactory[] facts,QueryExpressions[] parsed,Object[] params,Range range){
  log.debug(""String_Node_Str"");
  IndexExpressionVisitor visitor=new IndexExpressionVisitor((CassandraClassMetaData)base,params);
  parsed[0].filter.acceptVisit(visitor);
  List<IndexQuery> queries=visitor.getVisitors();
  SortedSet<DynamicComposite> columnResults=null;
  AbstractIndexOperation indexOp=null;
  for (  IndexQuery query : queries) {
    indexOp=getIndexOp(query,parsed[0].ordering,parsed[0].ascending,(CassandraClassMetaData)base);
    log.debug(""String_Node_Str"",new Object[]{indexOp,base,range});
    if (columnResults == null) {
      columnResults=new TreeSet<DynamicComposite>(indexOp.getComprator());
    }
    indexOp.scanIndex(query,columnResults,conf.getKeyspace());
  }
  if (range.start != 0 || range.end != Long.MAX_VALUE) {
    long current=0;
    DynamicComposite start=null;
    DynamicComposite end=null;
    Iterator<DynamicComposite> currentSet=columnResults.iterator();
    for (; current <= range.start && currentSet.hasNext(); current++) {
      start=currentSet.next();
    }
    long size=range.end - range.start;
    for (long index=0; index < size && currentSet.hasNext(); index++) {
      end=currentSet.next();
    }
    if (start != null && end != null) {
      columnResults=columnResults.subSet(start,end);
    }
  }
  CassandraResultObjectProvider results=new CassandraResultObjectProvider(columnResults,this.getContext().getStoreContext(),ctx.getFetchConfiguration(),(CassandraClassMetaData)base);
  return results;
}",0.9979035639412998
2542,"@Override public void enter(Value val){
  log.debug(""String_Node_Str"",val);
  if (val instanceof CandidatePath) {
    field=((CandidatePath)val).last();
    log.debug(""String_Node_Str"",field.getName(),field);
    return;
  }
  if (val instanceof Literal) {
    value=((Literal)val).getValue();
  }
 else   if (val instanceof Parameter) {
    log.debug(""String_Node_Str"",val);
  }
}","@Override public void enter(Value val){
  log.debug(""String_Node_Str"",val);
  if (val instanceof CandidatePath) {
    field=((CandidatePath)val).last();
    log.debug(""String_Node_Str"",field.getName(),field);
    return;
  }
  if (val instanceof Literal) {
    value=((Literal)val).getValue();
  }
 else   if (val instanceof Parameter) {
    log.debug(""String_Node_Str"",val);
    value=((Parameter)val).getValue(params);
  }
}",0.9442379182156134
2543,"public IndexExpressionVisitor(CassandraClassMetaData classMetaData){
  this.classMetaData=classMetaData;
  this.queries.add(new IndexQuery(this.classMetaData));
  this.currentIndex=0;
}","public IndexExpressionVisitor(CassandraClassMetaData classMetaData,Object[] params){
  this.classMetaData=classMetaData;
  this.params=params;
  this.queries.add(new IndexQuery(this.classMetaData));
  this.currentIndex=0;
}",0.9068627450980392
2544,"/** 
 * Search multiple items with the in operator
 */
@Test public void namedQueryWithIn(){
  EntityManager em=entityManagerFactory.createEntityManager();
  em.getTransaction().begin();
  Store fifth=new Store();
  fifth.setName(""String_Node_Str"");
  em.persist(fifth);
  Store fourth=new Store();
  fourth.setName(""String_Node_Str"");
  em.persist(fourth);
  Store third=new Store();
  third.setName(""String_Node_Str"");
  em.persist(third);
  System.out.println(third.getName());
  Store second=new Store();
  second.setName(""String_Node_Str"");
  em.persist(second);
  Store first=new Store();
  first.setName(""String_Node_Str"");
  em.persist(first);
  em.getTransaction().commit();
  em.close();
  EntityManager em2=entityManagerFactory.createEntityManager();
  em2.getTransaction().begin();
  Query query=em2.createNamedQuery(""String_Node_Str"");
  ArrayList<String> names=new ArrayList<String>();
  names.add(""String_Node_Str"");
  names.add(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  Store found=(Store)query.getResultList().get(0);
  assertEquals(third,found);
  em2.getTransaction().commit();
  em2.close();
}","/** 
 * Search multiple items with the in operator
 */
@Test @Ignore public void namedQueryWithIn(){
  EntityManager em=entityManagerFactory.createEntityManager();
  em.getTransaction().begin();
  Store fifth=new Store();
  fifth.setName(""String_Node_Str"");
  em.persist(fifth);
  Store fourth=new Store();
  fourth.setName(""String_Node_Str"");
  em.persist(fourth);
  Store third=new Store();
  third.setName(""String_Node_Str"");
  em.persist(third);
  System.out.println(third.getName());
  Store second=new Store();
  second.setName(""String_Node_Str"");
  em.persist(second);
  Store first=new Store();
  first.setName(""String_Node_Str"");
  em.persist(first);
  em.getTransaction().commit();
  em.close();
  EntityManager em2=entityManagerFactory.createEntityManager();
  em2.getTransaction().begin();
  Query query=em2.createNamedQuery(""String_Node_Str"");
  ArrayList<String> names=new ArrayList<String>();
  names.add(""String_Node_Str"");
  names.add(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",""String_Node_Str"");
  Store found=(Store)query.getResultList().get(0);
  assertEquals(third,found);
  em2.getTransaction().commit();
  em2.close();
}",0.9965397923875432
2545,"@Override public void addField(OpenJPAStateManager stateManager,Mutator<byte[]> mutator,long clock,byte[] key,String cfName,IndexQueue queue){
  Object field=stateManager.fetch(fieldId);
  byte[] orderKey=constructKey(key,orderedMarker);
  byte[] idKey=constructKey(key,idMarker);
  if (field == null) {
    mutator.addDeletion(orderKey,CF_NAME,null,null);
    mutator.addDeletion(idKey,CF_NAME,null,null);
    return;
  }
  writeAdds(stateManager,(Collection<?>)field,mutator,clock,orderKey,idKey,queue);
  writeDeletes(stateManager,(Collection<?>)field,mutator,clock,orderKey,idKey,queue);
  writeChanged(stateManager,(Collection<?>)field,mutator,clock,orderKey,idKey,queue);
}","@Override public void addField(OpenJPAStateManager stateManager,Mutator<byte[]> mutator,long clock,byte[] key,String cfName,IndexQueue queue){
  Object field=stateManager.fetch(fieldId);
  byte[] orderKey=constructKey(key,orderedMarker);
  byte[] idKey=constructKey(key,idMarker);
  if (field == null || ((Collection<?>)field).isEmpty()) {
    mutator.addDeletion(orderKey,CF_NAME,null,null);
    mutator.addDeletion(idKey,CF_NAME,null,null);
    return;
  }
  writeAdds(stateManager,(Collection<?>)field,mutator,clock,orderKey,idKey,queue);
  writeDeletes(stateManager,(Collection<?>)field,mutator,clock,orderKey,idKey,queue);
  writeChanged(stateManager,(Collection<?>)field,mutator,clock,orderKey,idKey,queue);
}",0.9741750358680056
2546,"@SuppressWarnings(""String_Node_Str"") @Override public boolean readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<DynamicComposite,byte[]>> result){
  StoreContext context=stateManager.getContext();
  Collection<Object> collection=(Collection<Object>)stateManager.newProxy(fieldId);
  for (  HColumn<DynamicComposite,byte[]> col : result.get().getColumns()) {
    ByteBuffer buff=col.getName().get(0,buffSerializer);
    Object nativeId=elementKeyStrategy.getInstance(buff);
    Object saved=context.find(context.newObjectId(targetClass,nativeId),true,null);
    collection.add(saved);
  }
  stateManager.store(fieldId,collection);
  return result.get().getColumns().size() > 0;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<DynamicComposite,byte[]>> result){
  StoreContext context=stateManager.getContext();
  Collection<Object> collection=(Collection<Object>)stateManager.newProxy(fieldId);
  for (  HColumn<DynamicComposite,byte[]> col : result.get().getColumns()) {
    ByteBuffer buff=col.getName().get(0,buffSerializer);
    Object nativeId=elementKeyStrategy.getInstance(buff);
    Object saved=context.find(context.newObjectId(targetClass,nativeId),true,null);
    if (saved == null) {
      logger.warn(""String_Node_Str"",new Object[]{nativeId,this.fieldName,this.targetClass});
      continue;
    }
    collection.add(saved);
  }
  stateManager.store(fieldId,collection);
  return result.get().getColumns().size() > 0;
}",0.8836601307189542
2547,"@Override public void addField(OpenJPAStateManager stateManager,Mutator<byte[]> mutator,long clock,byte[] key,String cfName,IndexQueue queue){
  Object field=stateManager.fetch(fieldId);
  byte[] idKey=constructKey(key,unorderedMarker);
  if (field == null) {
    mutator.addDeletion(idKey,CF_NAME,null,null);
    return;
  }
  writeAdds(stateManager,(Collection<?>)field,mutator,clock,idKey,queue);
  writeDeletes(stateManager,(Collection<?>)field,mutator,clock,idKey,queue);
}","@Override public void addField(OpenJPAStateManager stateManager,Mutator<byte[]> mutator,long clock,byte[] key,String cfName,IndexQueue queue){
  Object field=stateManager.fetch(fieldId);
  byte[] idKey=constructKey(key,unorderedMarker);
  if (field == null || ((Collection<?>)field).isEmpty()) {
    mutator.addDeletion(idKey,CF_NAME,null,null);
    return;
  }
  writeAdds(stateManager,(Collection<?>)field,mutator,clock,idKey,queue);
  writeDeletes(stateManager,(Collection<?>)field,mutator,clock,idKey,queue);
}",0.9637096774193548
2548,"/** 
 * Remove all indexes for elements
 * @param ctx
 * @param value
 * @param mutator
 * @param clock
 * @param orderKey
 * @param idKey
 * @param cfName
 */
@SuppressWarnings(""String_Node_Str"") private void writeDeletes(OpenJPAStateManager stateManager,Collection value,Mutator<byte[]> mutator,long clock,byte[] idKey,IndexQueue queue){
  Collection objects=getRemoved(value);
  if (objects == null) {
    return;
  }
  DynamicComposite idComposite=null;
  ByteBuffer currentId=null;
  StoreContext context=stateManager.getContext();
  OpenJPAStateManager currentSm=null;
  Object oid=null;
  for (  Object current : objects) {
    currentSm=context.getStateManager(current);
    oid=currentSm.fetchObjectId();
    currentId=elementKeyStrategy.toByteBuffer(oid);
    idComposite=newComposite();
    idComposite.addComponent(currentId,buffSerializer);
    mutator.addDeletion(idKey,CF_NAME,idComposite,compositeSerializer,clock);
    DynamicComposite idAudit=new DynamicComposite();
    idAudit.addComponent(currentId,buffSerializer);
    queue.addDelete(new IndexAudit(idKey,idKey,idAudit,clock,CF_NAME,false));
  }
}","/** 
 * Remove all indexes for elements
 * @param ctx
 * @param value
 * @param mutator
 * @param clock
 * @param orderKey
 * @param idKey
 * @param cfName
 */
@SuppressWarnings(""String_Node_Str"") private void writeDeletes(OpenJPAStateManager stateManager,Collection value,Mutator<byte[]> mutator,long clock,byte[] idKey,IndexQueue queue){
  Collection objects=getRemoved(value);
  if (objects == null) {
    return;
  }
  DynamicComposite idComposite=null;
  ByteBuffer currentId=null;
  StoreContext context=stateManager.getContext();
  OpenJPAStateManager currentSm=null;
  Object oid=null;
  for (  Object current : objects) {
    currentSm=context.getStateManager(current);
    oid=currentSm.fetchObjectId();
    currentId=elementKeyStrategy.toByteBuffer(oid);
    idComposite=newComposite();
    idComposite.addComponent(currentId,buffSerializer,getCassType(buffSerializer));
    mutator.addDeletion(idKey,CF_NAME,idComposite,compositeSerializer,clock);
    DynamicComposite idAudit=new DynamicComposite();
    idAudit.addComponent(currentId,buffSerializer,getCassType(buffSerializer));
    queue.addDelete(new IndexAudit(idKey,idKey,idAudit,clock,CF_NAME,false));
  }
}",0.975609756097561
2549,"/** 
 * Perform all deletions for this index
 * @param audit
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void deleteInternal(IndexAudit audit){
  SliceQuery<byte[],DynamicComposite,byte[]> query=new ThriftSliceQuery(config.getKeyspace(),BytesArraySerializer.get(),compositeSerializer,BytesArraySerializer.get());
  DynamicComposite start=audit.getColumnId();
  DynamicComposite end=new DynamicComposite();
  List<Component<?>> startComponents=start.getComponents();
  Component current;
  int i=0;
  for (; i < startComponents.size() - 1; i++) {
    current=start.getComponent(i);
    end.setComponent(i,current.getValue(),current.getSerializer(),current.getComparator(),ComponentEquality.EQUAL);
  }
  current=start.getComponent(i);
  end.setComponent(i,current.getValue(),current.getSerializer(),current.getComparator(),ComponentEquality.GREATER_THAN_EQUAL);
  ColumnSlice<DynamicComposite,byte[]> slice=null;
  Mutator<byte[]> mutator=createMutator();
  do {
    query.setRange(start,end,false,MAX_COUNT);
    query.setKey(audit.getIdRowKey());
    query.setColumnFamily(audit.getColumnFamily());
    slice=query.execute().get();
    for (    HColumn<DynamicComposite,byte[]> col : slice.getColumns()) {
      deleteColumn(audit,col.getName(),mutator);
      start=col.getName();
    }
  }
 while (slice.getColumns().size() == MAX_COUNT);
  mutator.execute();
}","/** 
 * Perform all deletions for this index
 * @param audit
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void deleteInternal(IndexAudit audit){
  SliceQuery<byte[],DynamicComposite,byte[]> query=new ThriftSliceQuery(config.getKeyspace(),BytesArraySerializer.get(),compositeSerializer,BytesArraySerializer.get());
  DynamicComposite start=audit.getColumnId();
  DynamicComposite end=new DynamicComposite();
  List<Component<?>> startComponents=start.getComponents();
  Component current;
  int i=0;
  for (; i < startComponents.size() - 1; i++) {
    current=start.getComponent(i);
    end.setComponent(i,current.getValue(),current.getSerializer(),current.getComparator(),ComponentEquality.EQUAL);
  }
  current=start.getComponent(i);
  end.setComponent(i,current.getValue(),current.getSerializer(),current.getComparator(),ComponentEquality.GREATER_THAN_EQUAL);
  ColumnSlice<DynamicComposite,byte[]> slice=null;
  HColumn<DynamicComposite,byte[]> maxColumn=null;
  Mutator<byte[]> mutator=createMutator();
  do {
    query.setRange(start,end,false,MAX_COUNT);
    query.setKey(audit.getIdRowKey());
    query.setColumnFamily(audit.getColumnFamily());
    slice=query.execute().get();
    for (    HColumn<DynamicComposite,byte[]> col : slice.getColumns()) {
      deleteColumn(audit,col.getName(),mutator);
      start=col.getName();
    }
  }
 while (slice.getColumns().size() == MAX_COUNT);
  mutator.execute();
}",0.9819978821037768
2550,"@Override public byte[] toByteArray(Object oid){
  return dynamicSerializer.toBytes(createComposite(((OpenJPAId)oid).getIdObject()));
}","@Override public byte[] toByteArray(Object oid){
  Object id=((OpenJPAId)oid).getIdObject();
  if (id == null) {
    return null;
  }
  return dynamicSerializer.toBytes(createComposite(id));
}",0.654434250764526
2551,"/** 
 * Get the value as a byte array
 * @param target
 * @return
 */
public byte[] toByteArray(Object oid);","/** 
 * Get the value as a byte array
 * @param target
 * @return The byte array.  Could be null if the oid is null
 */
public byte[] toByteArray(Object oid);",0.8120300751879699
2552,"/** 
 * Get the bytes that represent this key.  Can either be a single field or a multi field
 * @param target
 * @return
 */
public ByteBuffer toByteBuffer(Object oid);","/** 
 * Get the bytes that represent this key.  Can either be a single field or a multi field
 * @param target
 * @return The ByteBuffer.  Could be null if the oid is null
 */
public ByteBuffer toByteBuffer(Object oid);",0.8711340206185567
2553,"@Override public byte[] toByteArray(Object oid){
  Object id=((OpenJPAId)oid).getIdObject();
  return idSerializer.toBytes(id);
}","@Override public byte[] toByteArray(Object oid){
  Object id=((OpenJPAId)oid).getIdObject();
  if (id == null) {
    return null;
  }
  return idSerializer.toBytes(id);
}",0.862876254180602
2554,"/** 
 * Get the stored entity and it's object id if it exists in the datastore
 * @param stateManager
 * @param keyspace
 * @return
 */
public Class<?> getStoredEntityType(OpenJPAStateManager sm,Keyspace keyspace,MetaCache metaCache){
  Object oid=sm.getObjectId();
  Class<?> oidType=((OpenJPAId)oid).getType();
  if (oidType == null) {
    return null;
  }
  byte[] rowKey=keyStrategy.toByteArray(sm.getObjectId());
  String descrim=strategy.getStoredType(rowKey,columnFamilyName,keyspace);
  if (descrim == null) {
    return null;
  }
  return strategy.getClass(descrim,oidType,metaCache);
}","/** 
 * Get the stored entity and it's object id if it exists in the datastore
 * @param stateManager
 * @param keyspace
 * @return
 */
public Class<?> getStoredEntityType(OpenJPAStateManager sm,Keyspace keyspace,MetaCache metaCache){
  Object oid=sm.getObjectId();
  Class<?> oidType=((OpenJPAId)oid).getType();
  if (oidType == null) {
    return null;
  }
  byte[] rowKey=keyStrategy.toByteArray(oid);
  if (rowKey == null) {
    return null;
  }
  String descrim=strategy.getStoredType(rowKey,columnFamilyName,keyspace);
  if (descrim == null) {
    return null;
  }
  return strategy.getClass(descrim,oidType,metaCache);
}",0.8788870703764321
2555,"public IndexDefinition(CassandraClassMetaData metaData,FieldOrder[] indexedFields,IndexOrder[] orderFields){
  this.metaData=metaData;
  this.indexedFields=indexedFields;
  this.orderFields=orderFields;
}","public IndexDefinition(FieldOrder[] indexedFields,IndexOrder[] orderFields){
  this.indexedFields=indexedFields;
  this.orderFields=orderFields;
}",0.8342857142857143
2556,"/** 
 * Add a new index definition for the given field with the order expression. This is mostly copied from the default annotation scanner
 * @param orderExpression
 * @param field
 */
public void add(String fieldExpression,String orderExpression,CassandraClassMetaData metaData){
  String[] decs=Strings.split(orderExpression,""String_Node_Str"",0);
  IndexOrder[] orders=new IndexOrder[decs.length];
  int spc;
  boolean asc;
  for (int i=0; i < decs.length; i++) {
    decs[i]=decs[i].trim();
    spc=decs[i].indexOf(' ');
    if (spc == -1)     asc=true;
 else {
      asc=decs[i].substring(spc + 1).trim().toLowerCase().startsWith(""String_Node_Str"");
      decs[i]=decs[i].substring(0,spc);
    }
    orders[i]=new IndexOrder(decs[i],asc);
    FieldMetaData fmd=metaData.getDeclaredField(decs[i]);
    if (fmd != null)     fmd.setUsedInOrderBy(true);
  }
  decs=Strings.split(fieldExpression,""String_Node_Str"",0);
  FieldOrder[] fields=new FieldOrder[decs.length];
  for (int i=0; i < fields.length; i++) {
    decs[i]=decs[i].trim();
    spc=decs[i].indexOf(' ');
    if (spc == -1)     asc=true;
 else {
      asc=decs[i].substring(spc + 1).trim().toLowerCase().startsWith(""String_Node_Str"");
      decs[i]=decs[i].substring(0,spc);
    }
    fields[i]=new FieldOrder(decs[i],asc);
  }
  IndexDefinition indexDef=new IndexDefinition(metaData,fields,orders);
  indexDefs.add(indexDef);
}","/** 
 * Add a new index definition for the given field with the order expression. This is mostly copied from the default annotation scanner
 * @param orderExpression
 * @param field
 */
public void add(String fieldExpression,String orderExpression,CassandraClassMetaData metaData){
  String[] decs=Strings.split(orderExpression,""String_Node_Str"",0);
  IndexOrder[] orders=new IndexOrder[decs.length];
  int spc;
  boolean asc;
  for (int i=0; i < decs.length; i++) {
    decs[i]=decs[i].trim();
    spc=decs[i].indexOf(' ');
    if (spc == -1)     asc=true;
 else {
      asc=decs[i].substring(spc + 1).trim().toLowerCase().startsWith(""String_Node_Str"");
      decs[i]=decs[i].substring(0,spc);
    }
    orders[i]=new IndexOrder(decs[i],asc);
    FieldMetaData fmd=metaData.getDeclaredField(decs[i]);
    if (fmd != null)     fmd.setUsedInOrderBy(true);
  }
  decs=Strings.split(fieldExpression,""String_Node_Str"",0);
  FieldOrder[] fields=new FieldOrder[decs.length];
  for (int i=0; i < fields.length; i++) {
    decs[i]=decs[i].trim();
    spc=decs[i].indexOf(' ');
    if (spc == -1)     asc=true;
 else {
      asc=decs[i].substring(spc + 1).trim().toLowerCase().startsWith(""String_Node_Str"");
      decs[i]=decs[i].substring(0,spc);
    }
    fields[i]=new FieldOrder(decs[i],asc);
  }
  IndexDefinition indexDef=new IndexDefinition(fields,orders);
  indexDefs.add(indexDef);
}",0.9744144144144145
2557,"@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  Class<?> type=cassandraStore.getDataStoreId(stateManager.getId(),this.getContext());
  if (type == null) {
    return false;
  }
  log.debug(""String_Node_Str"");
  stateManager.initialize(type,pcState);
  stateManager.load(fetchConfiguration);
  return true;
}","@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  Class<?> type=cassandraStore.getDataStoreId(stateManager.getId(),this.getContext());
  if (type == null) {
    return false;
  }
  Class<?> requestedType=((OpenJPAId)stateManager.getId()).getType();
  if (!requestedType.isAssignableFrom(type)) {
    return false;
  }
  log.debug(""String_Node_Str"");
  stateManager.initialize(type,pcState);
  stateManager.load(fetchConfiguration);
  return true;
}",0.8510182207931404
2558,"/** 
 * Find the persisted class in cassandra. If this is not a subclass, the oid is always returned
 * @param oid
 * @return
 */
public Class<?> getDataStoreId(Object oid,StoreContext ctx){
  Class<?> requested=((OpenJPAId)oid).getType();
  ClassMetaData metaData=ctx.getConfiguration().getMetaDataRepositoryInstance().getMetaData(requested,ctx.getClassLoader(),true);
  EntityFacade entityFacade=conf.getMetaCache().getFacade(metaData,conf.getSerializer());
  return entityFacade.getStoredEntityType(oid,keyspace,conf.getMetaCache());
}","/** 
 * Find the persisted class in cassandra. If this is not a subclass, the oid is always returned
 * @param oid
 * @return
 */
public Class<?> getDataStoreId(Object oid,StoreContext ctx){
  if (((OpenJPAId)oid).getIdObject() == null) {
    return null;
  }
  Class<?> requested=((OpenJPAId)oid).getType();
  ClassMetaData metaData=ctx.getConfiguration().getMetaDataRepositoryInstance().getMetaData(requested,ctx.getClassLoader(),true);
  EntityFacade entityFacade=conf.getMetaCache().getFacade(metaData,conf.getSerializer());
  return entityFacade.getStoredEntityType(oid,keyspace,conf.getMetaCache());
}",0.9065502183406112
2559,"@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  Class<?> type=stateManager.getMetaData().getDescribedType();
  if (Modifier.isAbstract(type.getModifiers())) {
    return false;
  }
  log.debug(""String_Node_Str"");
  stateManager.initialize(type,pcState);
  return cassandraStore.getObject(stateManager,stateManager.getUnloaded(fetchConfiguration));
}","@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  Class<?> type=cassandraStore.getDataStoreId(stateManager.getId(),this.getContext());
  if (type == null) {
    return false;
  }
  log.debug(""String_Node_Str"");
  stateManager.initialize(type,pcState);
  stateManager.load(fetchConfiguration);
  return true;
}",0.6794258373205742
2560,"/** 
 * Load all columns for this class specified in the bit set
 * @param stateManager
 * @param fieldSet
 * @return true if the entity was present (I.E the marker column was found)otherwise false is returned.
 */
public boolean loadColumns(OpenJPAStateManager stateManager,BitSet fieldSet,Keyspace keyspace,MetaCache metaCache){
  List<String> fields=new ArrayList<String>();
  StringColumnField<?> field=null;
  AbstractCollectionField<?> collectionField=null;
  Object entityId=stateManager.getObjectId();
  boolean read=false;
  if (MappingUtils.getTargetObject(entityId) == null) {
    return false;
  }
  for (int i=fieldSet.nextSetBit(0); i >= 0; i=fieldSet.nextSetBit(i + 1)) {
    field=columnFieldIds.get(i);
    if (field == null) {
      collectionField=collectionFieldIds.get(i);
      if (collectionField == null) {
        continue;
      }
      int size=stateManager.getContext().getFetchConfiguration().getFetchBatchSize();
      SliceQuery<byte[],DynamicComposite,byte[]> query=collectionField.createQuery(entityId,keyspace,size);
      read|=collectionField.readField(stateManager,query.execute());
      continue;
    }
    fields.add(field.getName());
  }
  SliceQuery<byte[],String,byte[]> query=MappingUtils.buildSliceQuery(entityId,fields,columnFamilyName,keyspace);
  QueryResult<ColumnSlice<String,byte[]>> result=query.execute();
  for (int i=fieldSet.nextSetBit(0); i >= 0; i=fieldSet.nextSetBit(i + 1)) {
    field=columnFieldIds.get(i);
    if (field == null) {
      continue;
    }
    read|=field.readField(stateManager,result);
  }
  if (!read) {
    return exists(stateManager,keyspace,metaCache);
  }
  return true;
}","/** 
 * Load all columns for this class specified in the bit set
 * @param stateManager
 * @param fieldSet
 * @return true if the entity was present (I.E the marker column was found)otherwise false is returned.
 */
public boolean loadColumns(OpenJPAStateManager stateManager,BitSet fieldSet,Keyspace keyspace,MetaCache metaCache){
  List<String> fields=new ArrayList<String>();
  StringColumnField<?> field=null;
  AbstractCollectionField<?> collectionField=null;
  Object entityId=stateManager.getObjectId();
  if (MappingUtils.getTargetObject(entityId) == null) {
    return false;
  }
  for (int i=fieldSet.nextSetBit(0); i >= 0; i=fieldSet.nextSetBit(i + 1)) {
    field=columnFieldIds.get(i);
    if (field == null) {
      collectionField=collectionFieldIds.get(i);
      if (collectionField == null) {
        continue;
      }
      int size=stateManager.getContext().getFetchConfiguration().getFetchBatchSize();
      SliceQuery<byte[],DynamicComposite,byte[]> query=collectionField.createQuery(entityId,keyspace,size);
      collectionField.readField(stateManager,query.execute());
      continue;
    }
    fields.add(field.getName());
  }
  fields.add(this.strategy.getColumnName());
  SliceQuery<byte[],String,byte[]> query=MappingUtils.buildSliceQuery(entityId,fields,columnFamilyName,keyspace);
  QueryResult<ColumnSlice<String,byte[]>> result=query.execute();
  for (int i=fieldSet.nextSetBit(0); i >= 0; i=fieldSet.nextSetBit(i + 1)) {
    field=columnFieldIds.get(i);
    if (field == null) {
      continue;
    }
    field.readField(stateManager,result);
  }
  return result.get().getColumns().size() > 0;
}",0.9372333942717856
2561,"public AsyncInMemoryIndexingService(CassandraStoreConfiguration conf){
  Thread audit=new Thread(new AuditThread());
  audit.setDaemon(true);
  audit.start();
  Thread delete=new Thread(new DeleteThread());
  delete.setDaemon(true);
  delete.start();
}","public AsyncInMemoryIndexingService(){
  Thread audit=new Thread(new AuditThread());
  audit.setDaemon(true);
  audit.start();
  Thread delete=new Thread(new DeleteThread());
  delete.setDaemon(true);
  delete.start();
}",0.9322033898305084
2562,"/** 
 * Create an instance of the object set from the given prop key. If one is not preset, defaultClass will be used
 * @param propKey
 * @param defaultClass
 * @return
 */
private Object createInstance(String propKey,String defaultClass){
  String className=getValue(propKey).getOriginalValue();
  if (className == null) {
    className=defaultClass;
  }
  try {
    Class<?> clazz=Class.forName(className);
    return clazz.newInstance();
  }
 catch (  Exception e) {
    throw new UserException(String.format(""String_Node_Str"",className,EmbeddedSerializer.class),e);
  }
}","/** 
 * Create an instance of the object set from the given prop key. If one is not preset, defaultClass will be used
 * @param propKey
 * @param defaultClass
 * @return
 * @throws ClassNotFoundException
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
private Object createInstance(String className,String defaultClass) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
  if (className == null) {
    className=defaultClass;
  }
  Class<?> clazz=Class.forName(className);
  return clazz.newInstance();
}",0.4360105913503971
2563,"/** 
 * Get the serializer configured
 * @return
 */
public EmbeddedSerializer getSerializer(){
  if (serializer != null) {
    return serializer;
  }
  serializer=(EmbeddedSerializer)createInstance(SERIALIZER_PROP,JavaSerializer.class.getName());
  return serializer;
}","/** 
 * Get the serializer configured
 * @return
 */
public EmbeddedSerializer getSerializer(){
  if (serializer != null) {
    return serializer;
  }
  String className=getValue(SERIALIZER_PROP).getOriginalValue();
  try {
    serializer=(EmbeddedSerializer)createInstance(className,JavaSerializer.class.getName());
  }
 catch (  Exception e) {
    throw new UserException(String.format(""String_Node_Str"",className,EmbeddedSerializer.class),e);
  }
  return serializer;
}",0.5660377358490566
2564,"/** 
 * @return the indexingService
 */
public IndexingService getIndexingService(){
  if (indexingService != null) {
    return indexingService;
  }
  this.indexingService=(IndexingService)createInstance(INDEXING_PROP,SyncInMemoryIndexingService.class.getName());
  this.indexingService.postCreate(this);
  return this.indexingService;
}","/** 
 * @return the indexingService
 */
public IndexingService getIndexingService(){
  if (indexingService != null) {
    return indexingService;
  }
  String className=getValue(INDEXING_PROP).getString();
  try {
    this.indexingService=(IndexingService)createInstance(className,SyncInMemoryIndexingService.class.getName());
  }
 catch (  Exception e) {
    throw new UserException(String.format(""String_Node_Str"",className,IndexingService.class),e);
  }
  this.indexingService.postCreate(this);
  return this.indexingService;
}",0.6175115207373272
2565,"/** 
 * Test that after saving an entity with embedded object flush is correctly called if only the embedded entity is updated.  Causing bugs in non transactional read then a transactional write.
 */
@Test public void embeddedFieldOnlyDirty(){
  EntityManager em=entityManagerFactory.createEntityManager();
  em.getTransaction().begin();
  Customer james=new Customer();
  james.setEmail(""String_Node_Str"");
  james.setName(""String_Node_Str"");
  james.setPhoneNumber(new Phone(""String_Node_Str"",PhoneType.MOBILE));
  em.persist(james);
  em.getTransaction().commit();
  em.close();
  EntityManager em2=entityManagerFactory.createEntityManager();
  em2.getTransaction().begin();
  Customer returned=em2.find(Customer.class,james.getId());
  assertEquals(james,returned);
  assertEquals(james.getPhoneNumber(),returned.getPhoneNumber());
  assertEquals(james.getPhoneNumber().getPhoneNumber(),returned.getPhoneNumber().getPhoneNumber());
  assertEquals(james.getPhoneNumber().getType(),returned.getPhoneNumber().getType());
  em2.getTransaction().commit();
  returned.getPhoneNumber().setPhoneNumber(""String_Node_Str"");
  em2.getTransaction().begin();
  em2.persist(returned);
  em2.getTransaction().commit();
  em2.close();
  EntityManager em3=entityManagerFactory.createEntityManager();
  Customer returned2=em3.find(Customer.class,james.getId());
  assertEquals(returned,returned2);
  assertEquals(returned.getPhoneNumber(),returned2.getPhoneNumber());
  assertEquals(returned.getPhoneNumber().getPhoneNumber(),returned2.getPhoneNumber().getPhoneNumber());
  assertEquals(returned.getPhoneNumber().getType(),returned2.getPhoneNumber().getType());
}","/** 
 * Test that after saving an entity with embedded object flush is correctly called if only the embedded entity is updated.  Causing bugs in non transactional read then a transactional write.
 */
@Test public void embeddedFieldOnlyDirty(){
  EntityManager em=entityManagerFactory.createEntityManager();
  em.getTransaction().begin();
  Customer james=new Customer();
  james.setEmail(""String_Node_Str"");
  james.setName(""String_Node_Str"");
  james.setPhoneNumber(new Phone(""String_Node_Str"",PhoneType.MOBILE));
  em.persist(james);
  em.getTransaction().commit();
  em.close();
  EntityManager em2=entityManagerFactory.createEntityManager();
  em2.getTransaction().begin();
  Customer returned=em2.find(Customer.class,james.getId());
  em2.getTransaction().commit();
  assertEquals(james,returned);
  assertEquals(james.getPhoneNumber(),returned.getPhoneNumber());
  assertEquals(james.getPhoneNumber().getPhoneNumber(),returned.getPhoneNumber().getPhoneNumber());
  assertEquals(james.getPhoneNumber().getType(),returned.getPhoneNumber().getType());
  returned.getPhoneNumber().setPhoneNumber(""String_Node_Str"");
  em2.getTransaction().begin();
  em2.persist(returned);
  em2.getTransaction().commit();
  em2.close();
  EntityManager em3=entityManagerFactory.createEntityManager();
  Customer returned2=em3.find(Customer.class,james.getId());
  assertEquals(returned,returned2);
  assertEquals(returned.getPhoneNumber(),returned2.getPhoneNumber());
  assertEquals(returned.getPhoneNumber().getPhoneNumber(),returned2.getPhoneNumber().getPhoneNumber());
  assertEquals(returned.getPhoneNumber().getType(),returned2.getPhoneNumber().getType());
}",0.9799878714372346
2566,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!(obj instanceof IndexDefinition))   return false;
  IndexDefinition other=(IndexDefinition)obj;
  if (!Arrays.equals(indexedFields,other.indexedFields))   return false;
  if (!Arrays.equals(orderFields,other.orderFields))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!(obj instanceof IndexDefinition))   return false;
  IndexDefinition other=(IndexDefinition)obj;
  if (!Arrays.equals(orderFields,other.orderFields))   return false;
  if (indexedFields.length != other.indexedFields.length) {
    return false;
  }
  int matchCount=0;
  for (int i=0; i < indexedFields.length; i++) {
    for (int j=0; j < other.indexedFields.length; j++) {
      if (indexedFields[i].equals(other.indexedFields[i])) {
        matchCount++;
        continue;
      }
    }
  }
  return matchCount == indexedFields.length;
}",0.5067698259187621
2567,"/** 
 * Compare 2 index definitions. Index definitions are compared in the following way If an order is defined, then all order fields must be preset and in the same order for order comparison to == 0 If these orders are not the same, the shortest number of order operands is returned as less. If the order operands are the same, the fields are compared. The fields follow the same logic of operands Indexes with less fields are returned with < 0 to encourage the use of shorter rows for faster querying Not a null safe comparator
 * @author Todd Nine
 */
@Override public int compareTo(IndexDefinition def2){
  int compare=0;
  IndexOrder[] def2Order=def2.getOrderFields();
  if (orderFields.length > def2Order.length) {
    return 1;
  }
 else   if (orderFields.length < def2Order.length) {
    return -1;
  }
  for (int i=0; i < orderFields.length; i++) {
    compare=orderFields[i].getName().compareTo(def2Order[i].getName());
    if (compare != 0) {
      return compare;
    }
  }
  FieldOrder[] def2Field=def2.getIndexedFields();
  if (indexedFields.length > def2Field.length) {
    return 1;
  }
 else   if (indexedFields.length < def2Field.length) {
    return -1;
  }
  for (int i=0; i < indexedFields.length; i++) {
    compare=indexedFields[i].compareTo(def2Field[i]);
    if (compare != 0) {
      return compare;
    }
  }
  return 0;
}","/** 
 * Compare 2 index definitions. Index definitions are compared in the following way If an order is defined, then all order fields must be preset and in the same order for order comparison to == 0 If these orders are not the same, the shortest number of order operands is returned as less. If the order operands are the same, the fields are compared. The fields follow the same logic of operands Indexes with less fields are returned with < 0 to encourage the use of shorter rows for faster querying Not a null safe comparator
 * @author Todd Nine
 */
@Override public int compareTo(IndexDefinition def2){
  int compare=0;
  IndexOrder[] def2Order=def2.getOrderFields();
  if (orderFields.length > def2Order.length) {
    return 1;
  }
 else   if (orderFields.length < def2Order.length) {
    return -1;
  }
  for (int i=0; i < orderFields.length; i++) {
    compare=orderFields[i].getName().compareTo(def2Order[i].getName());
    if (compare != 0) {
      return compare;
    }
  }
  FieldOrder[] def2Field=def2.getIndexedFields();
  if (indexedFields.length > def2Field.length) {
    return 1;
  }
 else   if (indexedFields.length < def2Field.length) {
    return -1;
  }
  int matchCount=0;
  for (int i=0; i < indexedFields.length; i++) {
    for (int j=0; j < def2Field.length; j++) {
      if (indexedFields[i].getName().equals(def2Field[j].getName())) {
        matchCount++;
        break;
      }
    }
  }
  return matchCount - indexedFields.length;
}",0.9051509769094138
2568,"@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  log.debug(""String_Node_Str"");
  stateManager.initialize(stateManager.getMetaData().getDescribedType(),pcState);
  return cassandraStore.getObject(stateManager,stateManager.getUnloaded(fetchConfiguration));
}","@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  Class<?> type=stateManager.getMetaData().getDescribedType();
  if (Modifier.isAbstract(type.getModifiers())) {
    return false;
  }
  log.debug(""String_Node_Str"");
  stateManager.initialize(type,pcState);
  return cassandraStore.getObject(stateManager,stateManager.getUnloaded(fetchConfiguration));
}",0.7729591836734694
2569,"/** 
 * Read the field and load all ids found
 * @param stateManager
 * @param result
 */
public void readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<DynamicComposite,byte[]>> result){
  Object[] fields=null;
  StoreContext context=stateManager.getContext();
  Collection<Object> collection=(Collection<Object>)stateManager.newProxy(fieldId);
  DynamicComposite dynamicCol=null;
  for (  HColumn<DynamicComposite,byte[]> col : result.get().getColumns()) {
    Object nativeId=col.getName().get(compositeFieldLength - 1,this.idSerizlizer);
    collection.add(context.find(context.newObjectId(targetClass,nativeId),true,null));
  }
  stateManager.storeObject(fieldId,collection);
}","/** 
 * Read the field and load all ids found
 * @param stateManager
 * @param result
 */
public void readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<DynamicComposite,byte[]>> result){
  Object[] fields=null;
  StoreContext context=stateManager.getContext();
  Collection<Object> collection=(Collection<Object>)stateManager.newProxy(fieldId);
  DynamicComposite dynamicCol=null;
  for (  HColumn<DynamicComposite,byte[]> col : result.get().getColumns()) {
    Object nativeId=col.getName().get(compositeFieldLength - 1,this.idSerizlizer);
    Object oid=context.newObjectId(targetClass,nativeId);
    Object found=context.find(oid,true,null);
    if (found == null) {
      continue;
    }
    collection.add(found);
  }
  stateManager.storeObject(fieldId,collection);
}",0.7908540685944856
2570,"@Override public void readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<DynamicComposite,byte[]>> result){
  Object[] fields=null;
  StoreContext context=stateManager.getContext();
  Collection<Object> collection=(Collection<Object>)stateManager.newProxy(fieldId);
  DynamicComposite dynamicCol=null;
  for (  HColumn<DynamicComposite,byte[]> col : result.get().getColumns()) {
    Object nativeId=col.getName().get(0,this.idSerizlizer);
    collection.add(context.find(context.newObjectId(targetClass,nativeId),true,null));
  }
  stateManager.storeObject(fieldId,collection);
}","@Override public void readField(OpenJPAStateManager stateManager,QueryResult<ColumnSlice<DynamicComposite,byte[]>> result){
  Object[] fields=null;
  StoreContext context=stateManager.getContext();
  Collection<Object> collection=(Collection<Object>)stateManager.newProxy(fieldId);
  DynamicComposite dynamicCol=null;
  for (  HColumn<DynamicComposite,byte[]> col : result.get().getColumns()) {
    Object nativeId=col.getName().get(0,this.idSerizlizer);
    Object saved=context.find(context.newObjectId(targetClass,nativeId),true,null);
    collection.add(saved);
  }
  stateManager.storeObject(fieldId,collection);
}",0.9555189456342668
2571,"@Override public boolean isCached(List<Object> arg0,BitSet arg1){
  log.debug(""String_Node_Str"");
  return false;
}","@Override public boolean isCached(List<Object> oids,BitSet edata){
  log.debug(""String_Node_Str"");
  return false;
}",0.935064935064935
2572,"@Override public boolean load(OpenJPAStateManager stateManager,BitSet fields,FetchConfiguration arg2,int arg3,Object arg4){
  log.debug(""String_Node_Str"");
  return cassandraStore.getObject(stateManager,fields);
}","@Override public boolean load(OpenJPAStateManager stateManager,BitSet fields,FetchConfiguration fetch,int lockLevel,Object edata){
  log.debug(""String_Node_Str"");
  return cassandraStore.getObject(stateManager,fields);
}",0.9053117782909932
2573,"@Override public boolean exists(OpenJPAStateManager arg0,Object arg1){
  log.debug(""String_Node_Str"");
  return false;
}","@Override public boolean exists(OpenJPAStateManager stateManager,Object edata){
  log.debug(""String_Node_Str"");
  return cassandraStore.exists(stateManager);
}",0.8100358422939068
2574,"@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  log.debug(""String_Node_Str"");
  cassandraStore.open();
  stateManager.initialize(stateManager.getMetaData().getDescribedType(),pcState);
  cassandraStore.getObject(stateManager,stateManager.getUnloaded(fetchConfiguration));
  return true;
}","@Override public boolean initialize(OpenJPAStateManager stateManager,PCState pcState,FetchConfiguration fetchConfiguration,Object obj){
  log.debug(""String_Node_Str"");
  cassandraStore.open();
  stateManager.initialize(stateManager.getMetaData().getDescribedType(),pcState);
  return cassandraStore.getObject(stateManager,stateManager.getUnloaded(fetchConfiguration));
}",0.9705882352941176
2575,"/** 
 * Default constructor
 * @param classMetaData The class meta data
 * @param mappingUtils The mapping utils to use for byte mapping
 */
public EntityFacade(ClassMetaData classMetaData,MappingUtils mappingUtils){
  clazz=classMetaData.getDescribedType();
  this.columnFamilyName=mappingUtils.getColumnFamily(clazz);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",classMetaData.getPrimaryKeyFields()[0].getType(),classMetaData.getPrimaryKeyFields()[0].getObjectIdFieldTypeCode());
  }
  this.keySerializer=MappingUtils.getSerializer(classMetaData.getPrimaryKeyFields()[0]);
  columnFieldIds=new HashMap<Integer,ColumnField<?>>();
  collectionFieldIds=new HashMap<Integer,AbstractCollectionField<?>>();
  this.mappingUtils=mappingUtils;
  FieldMetaData[] fmds=classMetaData.getFields();
  ColumnField<?> field=null;
  for (int i=0; i < fmds.length; i++) {
    if (fmds[i].getManagement() == FieldMetaData.MANAGE_NONE || fmds[i].isPrimaryKey()) {
      continue;
    }
    if (fmds[i].getAssociationType() == FieldMetaData.ONE_TO_MANY || fmds[i].getAssociationType() == FieldMetaData.MANY_TO_MANY) {
      AbstractCollectionField<?> collection=null;
      if (fmds[i].getOrders().length > 0) {
        collection=new OrderedCollectionField(fmds[i],mappingUtils);
      }
 else {
        collection=new UnorderedCollectionField(fmds[i],mappingUtils);
      }
      collectionFieldIds.put(collection.getFieldId(),collection);
      continue;
    }
    if (fmds[i].getAssociationType() == FieldMetaData.MANY_TO_ONE || fmds[i].getAssociationType() == FieldMetaData.ONE_TO_ONE) {
      ToOneColumnField<?> toOne=new ToOneColumnField(fmds[i],mappingUtils);
      columnFieldIds.put(i,toOne);
      continue;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",new Object[]{fmds[i].getName(),fmds[i].getTypeCode(),fmds[i].getAssociationType(),fmds[i].getDeclaredType().getName(),fmds[i].getElement().getDeclaredTypeMetaData()});
    }
    field=new ColumnField(fmds[i]);
    columnFieldIds.put(field.getFieldId(),field);
  }
  field=new StaticColumn();
  columnFieldIds.put(field.getFieldId(),field);
}","/** 
 * Default constructor
 * @param classMetaData The class meta data
 * @param mappingUtils The mapping utils to use for byte mapping
 */
public EntityFacade(ClassMetaData classMetaData,MappingUtils mappingUtils){
  clazz=classMetaData.getDescribedType();
  this.columnFamilyName=mappingUtils.getColumnFamily(clazz);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",classMetaData.getPrimaryKeyFields()[0].getType(),classMetaData.getPrimaryKeyFields()[0].getObjectIdFieldTypeCode());
  }
  this.keySerializer=MappingUtils.getSerializer(classMetaData.getPrimaryKeyFields()[0]);
  columnFieldIds=new HashMap<Integer,ColumnField<?>>();
  collectionFieldIds=new HashMap<Integer,AbstractCollectionField<?>>();
  this.mappingUtils=mappingUtils;
  FieldMetaData[] fmds=classMetaData.getFields();
  ColumnField<?> field=null;
  for (int i=0; i < fmds.length; i++) {
    if (fmds[i].getManagement() == FieldMetaData.MANAGE_NONE || fmds[i].isPrimaryKey()) {
      continue;
    }
    if (fmds[i].getAssociationType() == FieldMetaData.ONE_TO_MANY || fmds[i].getAssociationType() == FieldMetaData.MANY_TO_MANY) {
      AbstractCollectionField<?> collection=null;
      if (fmds[i].getOrders().length > 0) {
        collection=new OrderedCollectionField(fmds[i],mappingUtils);
      }
 else {
        collection=new UnorderedCollectionField(fmds[i],mappingUtils);
      }
      collectionFieldIds.put(collection.getFieldId(),collection);
      continue;
    }
    if (fmds[i].getAssociationType() == FieldMetaData.MANY_TO_ONE || fmds[i].getAssociationType() == FieldMetaData.ONE_TO_ONE) {
      ToOneColumn<?> toOne=new ToOneColumn(fmds[i],mappingUtils);
      columnFieldIds.put(i,toOne);
      continue;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",new Object[]{fmds[i].getName(),fmds[i].getTypeCode(),fmds[i].getAssociationType(),fmds[i].getDeclaredType().getName(),fmds[i].getElement().getDeclaredTypeMetaData()});
    }
    field=new ColumnField(fmds[i]);
    columnFieldIds.put(field.getFieldId(),field);
  }
  field=new StaticColumn();
  columnFieldIds.put(field.getFieldId(),field);
}",0.997648165569144
2576,"/** 
 * Create columns and add them to the collection of columns.
 * @param stateManager
 * @param objects
 * @param orders
 * @param clock
 */
private void createColumns(OpenJPAStateManager stateManager,Collection<?> objects,Set<HColumn<Composite,byte[]>> orders,Set<HColumn<Composite,byte[]>> keys,long clock){
  StoreContext ctx=stateManager.getContext();
  Composite orderComposite=null;
  Composite idComposite=null;
  for (  Object current : objects) {
    Object currentId=mappingUtils.getTargetObject(ctx.getObjectId(current));
    idComposite=new Composite();
    orderComposite=new Composite();
    idComposite.add(currentId);
    for (    OrderField order : orderBy) {
      order.addField(idComposite,current);
      order.addField(orderComposite,current);
    }
    orderComposite.add(currentId);
    orders.add(new HColumnImpl<Composite,byte[]>(orderComposite,HOLDER,clock,compositeSerializer,BytesArraySerializer.get()));
    keys.add(new HColumnImpl<Composite,byte[]>(idComposite,HOLDER,clock,compositeSerializer,BytesArraySerializer.get()));
  }
}","/** 
 * Create columns and add them to the collection of columns.
 * @param stateManager
 * @param objects
 * @param orders
 * @param clock
 */
private void createColumns(OpenJPAStateManager stateManager,Collection<?> objects,Set<HColumn<Composite,byte[]>> orders,Set<HColumn<Composite,byte[]>> keys,long clock){
  StoreContext ctx=stateManager.getContext();
  Composite orderComposite=null;
  Composite idComposite=null;
  for (  Object current : objects) {
    Object currentId=mappingUtils.getTargetObject(ctx.getObjectId(current));
    idComposite=new Composite();
    orderComposite=new Composite();
    idComposite.add(currentId);
    for (    OrderField order : orderBy) {
      order.addField(stateManager,idComposite,current);
      order.addField(stateManager,orderComposite,current);
    }
    orderComposite.add(currentId);
    orders.add(new HColumnImpl<Composite,byte[]>(orderComposite,HOLDER,clock,compositeSerializer,BytesArraySerializer.get()));
    keys.add(new HColumnImpl<Composite,byte[]>(idComposite,HOLDER,clock,compositeSerializer,BytesArraySerializer.get()));
  }
}",0.9879294336118848
2577,"/** 
 * Add the field this order represents to the composite
 * @param composite
 * @param instance
 */
protected void addField(Composite composite,Object instance){
  if (instance == null) {
    return;
  }
  if (!(instance instanceof PersistenceCapable)) {
    throw new MetaDataException(String.format(""String_Node_Str"",instance.getClass(),PersistenceCapable.class));
  }
  OpenJPAStateManager stateManager=(OpenJPAStateManager)((PersistenceCapable)instance).pcGetStateManager();
  if (stateManager == null) {
    throw new UserException(String.format(""String_Node_Str"",targetFieldName,instance));
  }
  Object value=stateManager.fetch(targetFieldIndex);
  composite.add(value);
}","/** 
 * Add the field this order represents to the composite
 * @param composite
 * @param instance
 */
protected void addField(OpenJPAStateManager manager,Composite composite,Object instance){
  if (instance == null) {
    return;
  }
  OpenJPAStateManager stateManager=manager.getContext().getStateManager(instance);
  if (stateManager == null) {
    throw new UserException(String.format(""String_Node_Str"",targetFieldName,instance));
  }
  Object value=stateManager.fetch(targetFieldIndex);
  composite.add(value);
}",0.762063227953411
2578,"public static ChatConfig getFromMeta(){
  ChatConfig config=new ChatConfig();
  String chatURI=PageAssist.getMeta(""String_Node_Str"");
  config.openChat=XmppURI.uri(chatURI);
  config.sendButtonVisible=PageAssist.isMetaTrue(""String_Node_Str"");
  return config;
}","public static ChatConfig getFromMeta(){
  ChatConfig config=new ChatConfig();
  String chatURI=PageAssist.getMeta(""String_Node_Str"");
  config.openChat=XmppURI.uri(chatURI);
  config.sendButtonVisible=PageAssist.isMetaTrue(""String_Node_Str"");
  config.enableEmoticons=PageAssist.isMetaTrue(""String_Node_Str"");
  return config;
}",0.8862478777589134
2579,"public HablarChat(final Hablar hablar,final ChatConfig chatConfig,final XmppRoster roster,final ChatManager chatManager,final StateManager stateManager){
  new HablarChatManager(roster,chatManager,hablar,chatConfig);
  hablar.addPageAddedHandler(new PageAddedHandler(){
    @Override public void onPageAdded(    final PageAddedEvent event){
      if (event.isType(PairChatPresenter.TYPE)) {
        final PairChatPage page=(PairChatPage)event.getPage();
        new HablarChatStateManager(stateManager,page);
      }
    }
  }
,true);
}","public HablarChat(final Hablar hablar,final ChatConfig chatConfig,final XmppRoster roster,final ChatManager chatManager,final StateManager stateManager){
  ChatMessageFormatter.addReplacements(new StandardChatMessageFormatReplacements());
  if (chatConfig.enableEmoticons) {
    ChatMessageFormatter.addReplacements(new EmoticonsChatMessageFormatReplacements());
  }
  new HablarChatManager(roster,chatManager,hablar,chatConfig);
  hablar.addPageAddedHandler(new PageAddedHandler(){
    @Override public void onPageAdded(    final PageAddedEvent event){
      if (event.isType(PairChatPresenter.TYPE)) {
        final PairChatPage page=(PairChatPage)event.getPage();
        new HablarChatStateManager(stateManager,page);
      }
    }
  }
,true);
}",0.8342412451361868
2580,"@Override public void onChatChanged(ChatChangedEvent event){
  if (event.isCreated()) {
    createChat(event.getChat(),Visibility.notFocused);
  }
  if (event.isOpened()) {
    final PairChatPage page=chatPages.get(event.getChat());
    if (page != null) {
      page.requestVisibility(Visibility.focused);
    }
 else {
      createChat(event.getChat(),Visibility.notFocused);
    }
  }
  if (event.isClosed()) {
    final PairChatPage page=chatPages.get(event.getChat().getURI());
    page.requestVisibility(Visibility.hidden);
  }
}","@Override public void onChatChanged(ChatChangedEvent event){
  if (event.isCreated()) {
    createChat(event.getChat(),Visibility.notFocused);
  }
  if (event.isOpened()) {
    final PairChatPage page=chatPages.get(event.getChat());
    if (page != null) {
      page.requestVisibility(Visibility.focused);
    }
 else {
      createChat(event.getChat(),Visibility.notFocused);
    }
  }
  if (event.isClosed()) {
    final PairChatPage page=chatPages.get(event.getChat());
    page.requestVisibility(Visibility.hidden);
  }
}",0.9915174363807728
2581,"public HablarChatManager(final Hablar hablarPresenter,final ChatConfig config,final ChatPageFactory chatPageFactory,final PairChatPresenterFactory chatPresenterFactory){
  hablar=hablarPresenter;
  this.chatPageFactory=chatPageFactory;
  this.chatPresenterFactory=chatPresenterFactory;
  chatPages=new HashMap<Chat,PairChatPage>();
  roster=Suco.get(Roster.class);
  final ChatManager chatManager=Suco.get(ChatManager.class);
  if (config.openChat != null) {
    chatManager.open(config.openChat);
  }
  chatManager.addChatChangedHandler(new ChatChangedHandler(){
    @Override public void onChatChanged(    ChatChangedEvent event){
      if (event.isCreated()) {
        createChat(event.getChat(),Visibility.notFocused);
      }
      if (event.isOpened()) {
        final PairChatPage page=chatPages.get(event.getChat());
        if (page != null) {
          page.requestVisibility(Visibility.focused);
        }
 else {
          createChat(event.getChat(),Visibility.notFocused);
        }
      }
      if (event.isClosed()) {
        final PairChatPage page=chatPages.get(event.getChat().getURI());
        page.requestVisibility(Visibility.hidden);
      }
    }
  }
);
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final XmppURI jid=item.getJID();
      for (      final Entry<Chat,PairChatPage> entry : chatPages.entrySet()) {
        if (entry.getKey().getURI().equalsNoResource(jid)) {
          entry.getValue().setPresence(item.isAvailable(),item.getShow());
        }
      }
    }
  }
);
  sendButtonVisible=config.sendButtonVisible;
}","public HablarChatManager(final Hablar hablarPresenter,final ChatConfig config,final ChatPageFactory chatPageFactory,final PairChatPresenterFactory chatPresenterFactory){
  hablar=hablarPresenter;
  this.chatPageFactory=chatPageFactory;
  this.chatPresenterFactory=chatPresenterFactory;
  chatPages=new HashMap<Chat,PairChatPage>();
  roster=Suco.get(Roster.class);
  final ChatManager chatManager=Suco.get(ChatManager.class);
  if (config.openChat != null) {
    chatManager.open(config.openChat);
  }
  chatManager.addChatChangedHandler(new ChatChangedHandler(){
    @Override public void onChatChanged(    ChatChangedEvent event){
      if (event.isCreated()) {
        createChat(event.getChat(),Visibility.notFocused);
      }
      if (event.isOpened()) {
        final PairChatPage page=chatPages.get(event.getChat());
        if (page != null) {
          page.requestVisibility(Visibility.focused);
        }
 else {
          createChat(event.getChat(),Visibility.notFocused);
        }
      }
      if (event.isClosed()) {
        final PairChatPage page=chatPages.get(event.getChat());
        page.requestVisibility(Visibility.hidden);
      }
    }
  }
);
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final XmppURI jid=item.getJID();
      for (      final Entry<Chat,PairChatPage> entry : chatPages.entrySet()) {
        if (entry.getKey().getURI().equalsNoResource(jid)) {
          entry.getValue().setPresence(item.isAvailable(),item.getShow());
        }
      }
    }
  }
);
  sendButtonVisible=config.sendButtonVisible;
}",0.9972230792965134
2582,"public RoomNotificationPresenter(final RoomPresenter roomPresenter,final Room room){
  this.roomPresenter=roomPresenter;
  final Session session=Suco.get(Session.class);
  me=session.getCurrentUser().getNode();
  room.onOccupantAdded(new Listener<Occupant>(){
    @Override public void onEvent(    final Occupant occupant){
      final String body=i18n().occupantHasJoined(occupant.getNick());
      show(body);
    }
  }
);
  room.onOccupantRemoved(new Listener<Occupant>(){
    @Override public void onEvent(    final Occupant occupant){
      if (!me.equals(occupant.getUserUri().getNode())) {
        final String body=i18n().occupantHasLeft(occupant.getNick());
        show(body);
      }
    }
  }
);
  room.onSubjectChanged(new Listener2<Occupant,String>(){
    @Override public void onEvent(    final Occupant who,    final String newSubject){
      String message;
      if (who != null) {
        message=i18n().roomSubjectChanged(who.getNick(),newSubject);
      }
 else {
        message=i18n().roomSubjectChangedAnonymous(newSubject);
      }
      show(message);
    }
  }
);
  room.onInvitationSent(new Listener2<XmppURI,String>(){
    @Override public void onEvent(    final XmppURI uri,    final String reason){
      final Roster roster=Suco.get(Roster.class);
      final RosterItem item=roster.getItemByJID(uri);
      final String name=item != null ? item.getName() : uri.getNode();
      final String body=isEmpty(reason) ? i18n().invitationSent(name) : i18n().invitationSentWithReason(name,reason);
      show(body);
    }
    private boolean isEmpty(    final String reason){
      return reason == null || reason.trim().equals(""String_Node_Str"");
    }
  }
);
}","public RoomNotificationPresenter(final RoomPresenter roomPresenter,final Room room){
  this.roomPresenter=roomPresenter;
  final Session session=Suco.get(Session.class);
  me=session.getCurrentUser().getNode();
  room.onOccupantAdded(new Listener<Occupant>(){
    @Override public void onEvent(    final Occupant occupant){
      final String body=i18n().occupantHasJoined(occupant.getNick());
      show(body);
    }
  }
);
  room.onOccupantRemoved(new Listener<Occupant>(){
    @Override public void onEvent(    final Occupant occupant){
      if (!me.equals(occupant.getUserUri().getNode())) {
        final String body=i18n().occupantHasLeft(occupant.getNick());
        show(body);
      }
    }
  }
);
  room.onSubjectChanged(new Listener2<Occupant,String>(){
    @Override public void onEvent(    final Occupant who,    final String newSubject){
      String message;
      if (who != null) {
        message=i18n().roomSubjectChanged(who.getNick(),newSubject);
      }
 else {
        message=i18n().roomSubjectChangedAnonymous(newSubject);
      }
      show(message);
    }
  }
);
  room.onInvitationSent(new Listener2<XmppURI,String>(){
    @Override public void onEvent(    final XmppURI uri,    final String reason){
      final Roster roster=Suco.get(Roster.class);
      final RosterItem item=roster.getItemByJID(uri);
      final String name=((item != null) && (item.getName() != null)) ? item.getName() : uri.getNode();
      final String body=isEmpty(reason) ? i18n().invitationSent(name) : i18n().invitationSentWithReason(name,reason);
      show(body);
    }
    private boolean isEmpty(    final String reason){
      return reason == null || reason.trim().equals(""String_Node_Str"");
    }
  }
);
}",0.990604815032296
2583,"@Override public void onEvent(final XmppURI uri,final String reason){
  final Roster roster=Suco.get(Roster.class);
  final RosterItem item=roster.getItemByJID(uri);
  final String name=item != null ? item.getName() : uri.getNode();
  final String body=isEmpty(reason) ? i18n().invitationSent(name) : i18n().invitationSentWithReason(name,reason);
  show(body);
}","@Override public void onEvent(final XmppURI uri,final String reason){
  final Roster roster=Suco.get(Roster.class);
  final RosterItem item=roster.getItemByJID(uri);
  final String name=((item != null) && (item.getName() != null)) ? item.getName() : uri.getNode();
  final String body=isEmpty(reason) ? i18n().invitationSent(name) : i18n().invitationSentWithReason(name,reason);
  show(body);
}",0.9576719576719576
2584,"private void receiveMessage(final Message message){
  final String messageBody=message.getBody();
  if (Empty.not(messageBody)) {
    final Delay delay=DelayHelper.getDelay(message);
    final String color=ColorHelper.getColor(message.getFrom().getJID());
    final ChatMessage chatMessage=new ChatMessage(null,color,userName,messageBody,ChatMessage.MessageType.incoming);
    if (delay != null) {
      chatMessage.setDate(delay.getStamp());
    }
    addMessage(chatMessage);
    fireUserMessage(messageBody);
    if (getVisibility() == Visibility.hidden) {
      requestVisibility(Visibility.notFocused);
    }
  }
}","private void receiveMessage(final Message message){
  final String messageBody=message.getBody();
  if ((Type.error != message.getType()) && Empty.not(messageBody)) {
    final Delay delay=DelayHelper.getDelay(message);
    final String color=ColorHelper.getColor(message.getFrom().getJID());
    final ChatMessage chatMessage=new ChatMessage(null,color,userName,messageBody,ChatMessage.MessageType.incoming);
    if (delay != null) {
      chatMessage.setDate(delay.getStamp());
    }
    addMessage(chatMessage);
    fireUserMessage(messageBody);
    if (getVisibility() == Visibility.hidden) {
      requestVisibility(Visibility.notFocused);
    }
  }
}",0.9709803921568628
2585,"public PairChatPresenter(final XmppRoster roster,final HablarEventBus eventBus,final Chat chat,final ChatDisplay display){
  super(TYPE,Idify.uriId(chat.getURI().toString()),eventBus,chat,display);
  this.roster=roster;
  this.chat=chat;
  display.setId(getId());
  final XmppURI fromURI=chat.getURI();
  userName=roster.getJidName(fromURI);
  model.init(Icons.BUDDY_OFF,userName,userName + ""String_Node_Str"" + fromURI.toString());
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  chat.addMessageReceivedHandler(new MessageHandler(){
    @Override public void onMessage(    final MessageEvent event){
      receiveMessage(event.getMessage());
    }
  }
);
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(chat,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(chat,display);
      }
    }
  }
);
}","public PairChatPresenter(final XmppRoster roster,final HablarEventBus eventBus,final Chat chat,final ChatDisplay display){
  super(TYPE,Idify.uriId(chat.getURI().toString()),eventBus,chat,display);
  this.chat=chat;
  display.setId(getId());
  final XmppURI fromURI=chat.getURI();
  userName=roster.getJidName(fromURI);
  model.init(Icons.BUDDY_OFF,userName,userName + ""String_Node_Str"" + fromURI.toString());
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  chat.addMessageReceivedHandler(new MessageHandler(){
    @Override public void onMessage(    final MessageEvent event){
      receiveMessage(event.getMessage());
    }
  }
);
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(chat,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(chat,display);
      }
    }
  }
);
}",0.9902568644818424
2586,"public void setItem(final RosterItem item){
  this.item=item;
  String name=item.getName();
  if (name == null) {
    name=item.getJID().getShortName();
  }
  display.getName().setText(name);
  final String jidString=item.getJID().toString();
  display.getJid().setText(jidString);
  final String status=item.getStatus();
  final boolean hasStatus=(status != null) && (status.trim().length() > 0);
  if (hasStatus) {
    display.getStatus().setText(status);
  }
  display.setStatusVisible(hasStatus);
  display.setIcon(PresenceIcon.get(item.isAvailable(),item.getShow()));
  final String title=clickActionDescription + name + ""String_Node_Str""+ jidString+ ""String_Node_Str"";
  display.setWidgetTitle(title);
  display.setColor(ColorHelper.getColor(item.getJID()));
}","public void setItem(final RosterItem item){
  this.item=item;
  String name=item.getName();
  if (name == null) {
    name=item.getJID().getShortName();
  }
  display.getName().setText(name);
  final String jidString=item.getJID().toString();
  display.getJid().setText(jidString);
  final String status=item.getStatus();
  final boolean hasStatus=(status != null) && (status.trim().length() > 0);
  if (hasStatus) {
    display.getStatus().setText(status);
  }
  display.setStatusVisible(hasStatus);
  display.setIcon(PresenceIcon.get(item.isAvailable(),item.getShow()));
  final String title=clickActionDescription + name + ""String_Node_Str""+ jidString+ ""String_Node_Str"";
  display.setWidgetTitle(title);
}",0.96135593220339
2587,"protected void unfocus(final Page<?> page){
  if (focusedPage != null && focusedPage == page) {
    page.setVisibility(Visibility.notFocused);
    focusedPage=null;
  }
 else   if (page.getVisibility() == Visibility.hidden) {
    final PageAndHead widgets=getWidgets(page);
    display.add(widgets.pageWidget,widgets.headWidget);
    if (focusedPage != null) {
      focus(focusedPage);
      page.setVisibility(Visibility.notFocused);
    }
 else {
      focus(page);
    }
  }
}","protected void unfocus(final Page<?> page){
}",0.1714285714285714
2588,"protected boolean hide(final Page<?> page){
  if (focusedPage == page && lastFocused != null) {
    focus(lastFocused);
    lastFocused=focusedPage;
  }
  final PageAndHead widgets=getWidgets(page);
  if (widgets != null) {
    display.remove(widgets.pageWidget);
    page.setVisibility(Visibility.hidden);
    if (page == focusedPage) {
      focusedPage=null;
    }
    return true;
  }
  return false;
}","protected boolean hide(final Page<?> page){
  if ((focusedPage == page) && (lastFocused != null)) {
    focus(lastFocused);
    lastFocused=focusedPage;
  }
  final PageAndHead widgets=getWidgets(page);
  if (widgets != null) {
    display.remove(widgets.pageWidget);
    page.setVisibility(Visibility.hidden);
    if (page == focusedPage) {
      focusedPage=null;
    }
    return true;
  }
  return false;
}",0.9485294117647058
2589,"public MainContainer(final HablarEventBus eventBus,final MainLayout layout){
  this.eventBus=eventBus;
  display=layout;
  pages=new HashMap<Page<?>,PageAndHead>();
  eventBus.addHandler(VisibilityChangeRequestEvent.TYPE,new VisibilityChangeRequestHandler(){
    @Override public void onVisibilityChangeRequest(    final VisibilityChangeRequestEvent event){
      final Page<?> page=event.getPage();
      if (pages.containsKey(page)) {
        changeVisibility(page,event.getNewVisibility());
      }
    }
  }
);
  focusedPage=null;
}","public MainContainer(final HablarEventBus eventBus,final MainLayout layout){
  this.eventBus=eventBus;
  display=layout;
  pages=new HashMap<Page<?>,PageAndHead>();
  VisibilityChangeRequestEvent.bind(eventBus,new VisibilityChangeRequestHandler(){
    @Override public void onVisibilityChangeRequest(    final VisibilityChangeRequestEvent event){
      final Page<?> page=event.getPage();
      if (pages.containsKey(page)) {
        changeVisibility(page,event.getNewVisibility());
      }
    }
  }
);
  focusedPage=null;
}",0.9255419415645616
2590,"public OverlayContainer(final HablarEventBus eventBus,final OverlayPanel panel){
  this.panel=panel;
  pages=new ArrayList<Page<?>>();
  panel.setVisible(false);
  eventBus.addHandler(VisibilityChangeRequestEvent.TYPE,new VisibilityChangeRequestHandler(){
    @Override public void onVisibilityChangeRequest(    final VisibilityChangeRequestEvent event){
      changeVisibility(event.getNewVisibility(),event.getPage());
    }
  }
);
}","public OverlayContainer(final HablarEventBus eventBus,final OverlayPanel panel){
  this.panel=panel;
  pages=new ArrayList<Page<?>>();
  panel.setVisible(false);
  VisibilityChangeRequestEvent.bind(eventBus,new VisibilityChangeRequestHandler(){
    @Override public void onVisibilityChangeRequest(    final VisibilityChangeRequestEvent event){
      changeVisibility(event.getNewVisibility(),event.getPage());
    }
  }
);
}",0.9080325960419092
2591,"@Override public String toDebugString(){
  return super.toDebugString() + pageState + ""String_Node_Str""+ page+ ""String_Node_Str"";
}","@Override public String toDebugString(){
  return super.toDebugString() + ""String_Node_Str"" + page+ ""String_Node_Str"";
}",0.9482071713147412
2592,"@Override protected void dispatch(VisibilityChangeRequestHandler handler){
  handler.onVisibilityChangeRequest(this);
}","@Override protected void dispatch(final VisibilityChangeRequestHandler handler){
  handler.onVisibilityChangeRequest(this);
}",0.9754098360655736
2593,"public VisibilityChangeRequestEvent(Page<?> page,Visibility newVisibility){
  this.page=page;
  this.newVisibility=newVisibility;
}","public VisibilityChangeRequestEvent(final Page<?> page,final Visibility newVisibility){
  this.page=page;
  this.newVisibility=newVisibility;
}",0.9562043795620438
2594,"@Override public String toDebugString(){
  return super.toDebugString() + newVisibility + ""String_Node_Str""+ page.getId()+ ""String_Node_Str"";
}","@Override public String toDebugString(){
  return super.toDebugString() + newVisibility + ""String_Node_Str""+ page.getId()+ ""String_Node_Str""+ page.getVisibility();
}",0.9285714285714286
2595,"public VariableDockContainer(final HablarEventBus eventBus,final DockConfig config,final PagesContainer main,final HablarDisplay display){
  this.eventBus=eventBus;
  this.display=display;
  this.helper=new VariableDockHelper();
  this.headerSize=config.headerSize;
  final Widget mainWidget=main.getWidget();
  mainWidget.removeFromParent();
  this.split=new SplitLayoutPanel();
  display.add(split);
  display.setWidgetLeftRight(split,0,Unit.PX,0,Unit.PX);
  display.setWidgetTopBottom(split,headerSize,Unit.PX,3,Unit.PX);
  this.rosterPanel=new LayoutPanel();
  if (""String_Node_Str"".equals(config.rosterDock)) {
    split.addWest(rosterPanel,config.rosterWidth);
  }
 else {
    split.addEast(rosterPanel,config.rosterWidth);
  }
  split.add(mainWidget);
  this.userPanel=new LayoutPanel();
  this.userPanel.addStyleName(""String_Node_Str"");
  display.add(userPanel);
  display.setWidgetLeftRight(userPanel,0,Unit.PX,0,Unit.PX);
  display.setWidgetTopHeight(userPanel,0,Unit.PX,24,Unit.PX);
  eventBus.addHandler(VisibilityChangeRequestEvent.TYPE,new VisibilityChangeRequestHandler(){
    @Override public void onVisibilityChangeRequest(    final VisibilityChangeRequestEvent event){
      final Page<?> page=event.getPage();
      if (page.getType().equals(UserPage.TYPE)) {
        changeVisibility(page,event.getNewVisibility());
      }
    }
  }
);
}","public VariableDockContainer(final HablarEventBus eventBus,final DockConfig config,final PagesContainer main,final HablarDisplay display){
  this.eventBus=eventBus;
  this.display=display;
  this.helper=new VariableDockHelper();
  this.headerSize=config.headerSize;
  final Widget mainWidget=main.getWidget();
  mainWidget.removeFromParent();
  this.split=new SplitLayoutPanel();
  display.add(split);
  display.setWidgetLeftRight(split,0,Unit.PX,0,Unit.PX);
  display.setWidgetTopBottom(split,headerSize,Unit.PX,3,Unit.PX);
  this.rosterPanel=new LayoutPanel();
  if (""String_Node_Str"".equals(config.rosterDock)) {
    split.addWest(rosterPanel,config.rosterWidth);
  }
 else {
    split.addEast(rosterPanel,config.rosterWidth);
  }
  split.add(mainWidget);
  this.userPanel=new LayoutPanel();
  this.userPanel.addStyleName(""String_Node_Str"");
  display.add(userPanel);
  display.setWidgetLeftRight(userPanel,0,Unit.PX,0,Unit.PX);
  display.setWidgetTopHeight(userPanel,0,Unit.PX,24,Unit.PX);
  VisibilityChangeRequestEvent.bind(eventBus,new VisibilityChangeRequestHandler(){
    @Override public void onVisibilityChangeRequest(    final VisibilityChangeRequestEvent event){
      final Page<?> page=event.getPage();
      if (page.getType().equals(UserPage.TYPE)) {
        changeVisibility(page,event.getNewVisibility());
      }
    }
  }
);
}",0.9863216266173752
2596,"public RoomNotificationPresenter(final XmppSession session,final XmppRoster roster,final RoomPresenter roomPresenter,final Room room){
  this.roomPresenter=roomPresenter;
  me=session.getCurrentUserURI().getNode();
  room.addOccupantChangedHandler(new OccupantChangedHandler(){
    @Override public void onOccupantChanged(    final OccupantChangedEvent event){
      if (event.isAdded()) {
        final String body=i18n().occupantHasJoined(event.getOccupant().getNick());
        show(body);
      }
 else       if (event.isRemoved()) {
        if (!me.equals(event.getOccupant().getUserUri().getNode())) {
          final String body=i18n().occupantHasLeft(event.getOccupant().getNick());
          show(body);
        }
      }
    }
  }
);
  RoomSubject.addRoomSubjectChangedHandler(room,new RoomSubjectChangedHandler(){
    @Override public void onSubjectChanged(    final RoomSubjectChangedEvent event){
      final Occupant occupant=room.getOccupantByOccupantUri(event.getOccupantUri());
      String message;
      if (occupant != null) {
        message=i18n().roomSubjectChanged(occupant.getNick(),event.getSubject());
      }
 else {
        message=i18n().roomSubjectChangedAnonymous(event.getSubject());
      }
      show(message);
    }
  }
);
  room.addRoomInvitationSentHandler(new RoomInvitationSentHandler(){
    private boolean isEmpty(    final String reason){
      return (reason == null) || reason.trim().equals(""String_Node_Str"");
    }
    @Override public void onRoomInvitationSent(    final RoomInvitationSentEvent event){
      final XmppURI userJid=event.getUserJid();
      final RosterItem item=roster.getItemByJID(userJid);
      final String name=((item != null) && (item.getName() != null)) ? item.getName() : userJid.getNode();
      final String body=isEmpty(event.getReasonText()) ? i18n().invitationSent(name) : i18n().invitationSentWithReason(name,event.getReasonText());
      show(body);
    }
  }
);
}","public RoomNotificationPresenter(final XmppSession session,final XmppRoster roster,final RoomPresenter roomPresenter,final Room room){
  this.roomPresenter=roomPresenter;
  me=session.getCurrentUserURI().getNode();
  room.addOccupantChangedHandler(new OccupantChangedHandler(){
    @Override public void onOccupantChanged(    final OccupantChangedEvent event){
      if (event.isAdded()) {
        final String body=i18n().occupantHasJoined(event.getOccupant().getNick());
        show(body);
      }
 else       if (event.isRemoved()) {
        final XmppURI occupantUserUri=event.getOccupant().getUserUri();
        final String node=occupantUserUri != null ? occupantUserUri.getNode() : null;
        if (!me.equals(node)) {
          final String body=i18n().occupantHasLeft(event.getOccupant().getNick());
          show(body);
        }
      }
    }
  }
);
  RoomSubject.addRoomSubjectChangedHandler(room,new RoomSubjectChangedHandler(){
    @Override public void onSubjectChanged(    final RoomSubjectChangedEvent event){
      final Occupant occupant=room.getOccupantByOccupantUri(event.getOccupantUri());
      String message;
      if (occupant != null) {
        message=i18n().roomSubjectChanged(occupant.getNick(),event.getSubject());
      }
 else {
        message=i18n().roomSubjectChangedAnonymous(event.getSubject());
      }
      show(message);
    }
  }
);
  room.addRoomInvitationSentHandler(new RoomInvitationSentHandler(){
    @Override public void onRoomInvitationSent(    final RoomInvitationSentEvent event){
      final XmppURI userJid=event.getUserJid();
      final RosterItem item=roster.getItemByJID(userJid);
      final String name=((item != null) && (item.getName() != null)) ? item.getName() : userJid.getNode();
      final String body=isEmpty(event.getReasonText()) ? i18n().invitationSent(name) : i18n().invitationSentWithReason(name,event.getReasonText());
      show(body);
    }
    private boolean isEmpty(    final String reason){
      return (reason == null) || reason.trim().equals(""String_Node_Str"");
    }
  }
);
}",0.8787425149700598
2597,"@Override public void onOccupantChanged(final OccupantChangedEvent event){
  if (event.isAdded()) {
    final String body=i18n().occupantHasJoined(event.getOccupant().getNick());
    show(body);
  }
 else   if (event.isRemoved()) {
    if (!me.equals(event.getOccupant().getUserUri().getNode())) {
      final String body=i18n().occupantHasLeft(event.getOccupant().getNick());
      show(body);
    }
  }
}","@Override public void onOccupantChanged(final OccupantChangedEvent event){
  if (event.isAdded()) {
    final String body=i18n().occupantHasJoined(event.getOccupant().getNick());
    show(body);
  }
 else   if (event.isRemoved()) {
    final XmppURI occupantUserUri=event.getOccupant().getUserUri();
    final String node=occupantUserUri != null ? occupantUserUri.getNode() : null;
    if (!me.equals(node)) {
      final String body=i18n().occupantHasLeft(event.getOccupant().getNick());
      show(body);
    }
  }
}",0.7878787878787878
2598,"private void onChatVisibilityChanged(final Page<?> page,Visibility visibility){
  if ((visibility == Visibility.focused || visibility == Visibility.hidden) && unattendedChatPages.remove(page)) {
    eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.removed,page));
  }
}","private void onChatVisibilityChanged(final Page<?> page,final Visibility visibility){
  if (((visibility == Visibility.focused) || (visibility == Visibility.hidden)) && unattendedChatPages.remove(page)) {
    eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.removed,page));
  }
}",0.8745644599303136
2599,"public UnattendedPagesManager(final HablarEventBus hablarEventBus,BrowserFocusHandler focusManager){
  eventBus=hablarEventBus;
  this.focusManager=focusManager;
  unattendedChatPages=new HashSet<Page<?>>();
  bind();
}","public UnattendedPagesManager(final HablarEventBus hablarEventBus,final BrowserFocusHandler focusManager){
  eventBus=hablarEventBus;
  this.focusManager=focusManager;
  unattendedChatPages=new HashSet<Page<?>>();
  bind();
}",0.9864864864864864
2600,"private void bind(){
  eventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    final UserMessageEvent event){
      final String messageType=event.getMessageType();
      if (isChatMessage(messageType)) {
        final Page<?> page=event.getPage();
        final Visibility visibility=page.getVisibility();
        if ((visibility != Visibility.focused || !focusManager.hasFocus()) && unattendedChatPages.add(page)) {
          eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.added,page));
        }
      }
    }
  }
);
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    final VisibilityChangedEvent event){
      final Page<?> page=event.getPage();
      if (isChatPage(page.getType())) {
        onChatVisibilityChanged(page,event.getVisibility());
      }
    }
  }
);
}","private void bind(){
  eventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    final UserMessageEvent event){
      final String messageType=event.getMessageType();
      if (isChatMessage(messageType)) {
        final Page<?> page=event.getPage();
        final Visibility visibility=page.getVisibility();
        GWT.log(""String_Node_Str"" + visibility);
        if (((visibility != Visibility.focused) || !focusManager.hasFocus()) && unattendedChatPages.add(page)) {
          eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.added,page));
        }
      }
    }
  }
);
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    final VisibilityChangedEvent event){
      final Page<?> page=event.getPage();
      if (isChatPage(page.getType())) {
        onChatVisibilityChanged(page,event.getVisibility());
      }
    }
  }
);
}",0.9700157811678064
2601,"@Override public void onUserMessage(final UserMessageEvent event){
  final String messageType=event.getMessageType();
  if (isChatMessage(messageType)) {
    final Page<?> page=event.getPage();
    final Visibility visibility=page.getVisibility();
    if ((visibility != Visibility.focused || !focusManager.hasFocus()) && unattendedChatPages.add(page)) {
      eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.added,page));
    }
  }
}","@Override public void onUserMessage(final UserMessageEvent event){
  final String messageType=event.getMessageType();
  if (isChatMessage(messageType)) {
    final Page<?> page=event.getPage();
    final Visibility visibility=page.getVisibility();
    GWT.log(""String_Node_Str"" + visibility);
    if (((visibility != Visibility.focused) || !focusManager.hasFocus()) && unattendedChatPages.add(page)) {
      eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.added,page));
    }
  }
}",0.943796394485684
2602,"/** 
 * Sets current browser focus status
 * @param hasFocus
 */
public void setFocus(boolean hasFocus){
  GWT.log(""String_Node_Str"" + hasFocus);
  this.hasFocus=hasFocus;
  focusListener.onBrowserFocusChanged(hasFocus);
}","/** 
 * Sets current browser focus status
 * @param hasFocus
 */
public void setFocus(boolean hasFocus){
  if (this.hasFocus == hasFocus) {
    return;
  }
  GWT.log(""String_Node_Str"" + hasFocus);
  this.hasFocus=hasFocus;
  focusListener.onBrowserFocusChanged(hasFocus);
}",0.896969696969697
2603,"@Override public void onBrowserFocusChanged(boolean hasFocus){
  if (currentFocused != null) {
    if (hasFocus == false) {
      currentFocused.getDisplay().setTextBoxFocus(false);
    }
 else     if (!unattendedManager.contains(currentFocused)) {
      currentFocused.getDisplay().setTextBoxFocus(true);
    }
  }
}","@Override public void onBrowserFocusChanged(boolean hasFocus){
  if (currentFocused != null) {
    if (hasFocus == false) {
      currentFocused.getDisplay().setTextBoxFocus(false);
    }
  }
}",0.7568627450980392
2604,"public BrowserFocusManager(HablarEventBus eventBus,final UnattendedPagesManager unattendedManager,BrowserFocusHandler handler){
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    VisibilityChangedEvent event){
      if (event.getVisibility() == Visibility.focused) {
        Page<?> page=event.getPage();
        if (PairChatPresenter.TYPE.equals(page.getType()) || RoomPresenter.TYPE.equals(page.getType())) {
          currentFocused=(ChatPresenter)page;
        }
      }
    }
  }
);
  handler.setFocusListener(new BrowserFocusListener(){
    @Override public void onBrowserFocusChanged(    boolean hasFocus){
      if (currentFocused != null) {
        if (hasFocus == false) {
          currentFocused.getDisplay().setTextBoxFocus(false);
        }
 else         if (!unattendedManager.contains(currentFocused)) {
          currentFocused.getDisplay().setTextBoxFocus(true);
        }
      }
    }
  }
);
}","public BrowserFocusManager(HablarEventBus eventBus,final UnattendedPagesManager unattendedManager,BrowserFocusHandler handler){
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    VisibilityChangedEvent event){
      if (event.getVisibility() == Visibility.focused) {
        Page<?> page=event.getPage();
        if (PairChatPresenter.TYPE.equals(page.getType()) || RoomPresenter.TYPE.equals(page.getType())) {
          currentFocused=(ChatPresenter)page;
        }
      }
    }
  }
);
  handler.setFocusListener(new BrowserFocusListener(){
    @Override public void onBrowserFocusChanged(    boolean hasFocus){
      if (currentFocused != null) {
        if (hasFocus == false) {
          currentFocused.getDisplay().setTextBoxFocus(false);
        }
      }
    }
  }
);
}",0.908207343412527
2605,"/** 
 * Adds the focus events to the browser
 */
@Override protected native void addFocusListenerEvents();","/** 
 * Adds the focus events to the browser Thanks to http://www.sitepen.com/blog/2008/10/13/the-cross-browser-window- focus-blues/
 */
@Override protected native void addFocusListenerEvents();",0.7066666666666667
2606,"@Override public void onModuleLoad(){
  CoreMessages messages=GWT.create(CoreMessages.class);
  ConfirmWidget.setMessages(messages);
}","@Override public void onModuleLoad(){
  BrowserFocusHandler.getInstance();
  CoreMessages messages=GWT.create(CoreMessages.class);
  ConfirmWidget.setMessages(messages);
}",0.8786885245901639
2607,"/** 
 * Expose the method to javascript (do not use this function, use getInstance().setFocus() instead)
 * @param hasFocus
 */
public static void changeFocus(boolean hasFocus){
  getInstance().setFocus(hasFocus);
}","/** 
 * Expose the method to javascript (do not use this function, use getInstance().setFocus() instead)
 * @param hasFocus
 */
public static void changeFocus(final boolean hasFocus){
  getInstance().setFocus(hasFocus);
}",0.9862385321100916
2608,"public static RosterPage installModule(final Hablar hablar,RosterConfig rosterConfig){
  final SubscriptionHandler subscriptionHandler=Suco.get(SubscriptionHandler.class);
  subscriptionHandler.setBehaviour(Behaviour.acceptAll);
  if (rosterConfig.rosterItemclickAction == null && rosterConfig.oneClickChat) {
    rosterConfig.rosterItemclickAction=new SimpleAction<RosterItem>(i18n().clickToOpenChat(),""String_Node_Str""){
      @Override public void execute(      RosterItem item){
        final ChatManager manager=Suco.get(ChatManager.class);
        manager.open(item.getJID());
      }
    }
;
  }
  final RosterPage roster=new RosterPresenter(hablar.getEventBus(),new RosterWidget(),rosterConfig);
  roster.setVisibility(Visibility.notFocused);
  hablar.addPage(roster);
  final Session session=Suco.get(Session.class);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    final Session session){
      setState(roster,session.getState());
    }
  }
);
  setState(roster,session.getState());
  roster.addHighPriorityActions();
  return roster;
}","public static RosterPage installModule(final Hablar hablar,RosterConfig rosterConfig){
  final SubscriptionHandler subscriptionHandler=Suco.get(SubscriptionHandler.class);
  subscriptionHandler.setBehaviour(Behaviour.acceptAll);
  if (rosterConfig.rosterItemClickAction == null && rosterConfig.oneClickChat) {
    rosterConfig.rosterItemClickAction=new SimpleAction<RosterItem>(i18n().clickToOpenChat(),""String_Node_Str""){
      @Override public void execute(      RosterItem item){
        final ChatManager manager=Suco.get(ChatManager.class);
        manager.open(item.getJID());
      }
    }
;
  }
  final RosterPage roster=new RosterPresenter(hablar.getEventBus(),new RosterWidget(),rosterConfig);
  roster.setVisibility(Visibility.notFocused);
  hablar.addPage(roster);
  final Session session=Suco.get(Session.class);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    final Session session){
      setState(roster,session.getState());
    }
  }
);
  setState(roster,session.getState());
  roster.addHighPriorityActions();
  return roster;
}",0.998158379373849
2609,"public RosterItemPresenter(final String groupName,final Menu<RosterItemPresenter> itemMenu,final RosterItemDisplay display,final RosterConfig rosterConfig){
  this.groupName=groupName;
  this.display=display;
  if (rosterConfig.rosterItemclickAction != null) {
    display.setWidgetTitle(rosterConfig.rosterItemclickAction.getDescription());
    display.getAction().addClickHandler(new ClickHandler(){
      @Override public void onClick(      final ClickEvent event){
        rosterConfig.rosterItemclickAction.execute(item);
      }
    }
);
    display.addStyleName(""String_Node_Str"");
  }
  display.getMenuAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.stopPropagation();
      event.preventDefault();
      final Element element=event.getRelativeElement();
      itemMenu.setTarget(RosterItemPresenter.this);
      itemMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
    }
  }
);
}","public RosterItemPresenter(final String groupName,final Menu<RosterItemPresenter> itemMenu,final RosterItemDisplay display,final RosterConfig rosterConfig){
  this.groupName=groupName;
  this.display=display;
  if (rosterConfig.rosterItemClickAction != null) {
    display.setWidgetTitle(rosterConfig.rosterItemClickAction.getDescription());
    display.getAction().addClickHandler(new ClickHandler(){
      @Override public void onClick(      final ClickEvent event){
        rosterConfig.rosterItemClickAction.execute(item);
      }
    }
);
    display.addStyleName(""String_Node_Str"");
  }
  display.getMenuAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.stopPropagation();
      event.preventDefault();
      final Element element=event.getRelativeElement();
      itemMenu.setTarget(RosterItemPresenter.this);
      itemMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
    }
  }
);
}",0.9969199178644764
2610,"public RosterGroupPresenter(final RosterGroup group,final Menu<RosterItemPresenter> itemMenu,final RosterGroupDisplay display,final RosterConfig rosterConfig){
  this.group=group;
  this.itemMenu=itemMenu;
  this.display=display;
  this.rosterConfig=rosterConfig;
  itemPresenters=new HashMap<XmppURI,RosterItemPresenter>();
  display.setVisible(group.isAllContacts());
  final Listener<RosterItem> updateListener=new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      updateRosterItemGroups();
    }
  }
;
  group.onItemAdded(updateListener);
  group.onItemChanged(updateListener);
  group.onItemRemoved(updateListener);
  group.addMainRosterItemChangedHandler(new RosterItemChangedHandler(){
    @Override public void onRosterItemChanged(    RosterItemChangedEvent event){
      updateRosterItemGroups();
    }
  }
);
  updateRosterItemGroups();
}","public RosterGroupPresenter(final RosterGroup group,final Menu<RosterItemPresenter> itemMenu,final RosterGroupDisplay display,final RosterConfig rosterConfig){
  this.group=group;
  this.itemMenu=itemMenu;
  this.display=display;
  this.rosterConfig=rosterConfig;
  itemPresenters=new HashMap<XmppURI,RosterItemPresenter>();
  display.setVisible(group.isAllContacts());
  group.addRosterItemChangedHandler(new RosterItemChangedHandler(){
    @Override public void onRosterItemChanged(    RosterItemChangedEvent event){
      updateRosterItemGroups();
    }
  }
);
  updateRosterItemGroups();
}",0.6567768037761295
2611,"public RosterBasicActions(){
  roster=Suco.get(Roster.class);
}","public RosterBasicActions(HablarEventBus eventBus){
  this.eventBus=eventBus;
  roster=Suco.get(Roster.class);
}",0.72
2612,"@Override public void execute(final RosterGroupPresenter target){
  final String groupName=target.getGroupName();
  final Collection<RosterItem> items=roster.getItemsByGroup(groupName);
  final String message=i18n().confirmDeleteGroup(groupName,""String_Node_Str"" + items.size());
  if (Window.confirm(message)) {
    deleteGroup(groupName,items);
  }
}","@Override public void execute(final RosterGroupPresenter target){
  final String groupName=target.getGroupName();
  final Collection<RosterItem> items=roster.getItemsByGroup(groupName);
  final String title=i18n().confirmDeleteGroupTitle(groupName);
  final String message=i18n().confirmDeleteGroup(groupName,""String_Node_Str"" + items.size());
  ConfirmPage.show(eventBus,title,message,new UserConfirmationHandler(){
    @Override public void cancel(){
    }
    @Override public void accept(){
      deleteGroup(groupName,items);
    }
  }
);
}",0.7246376811594203
2613,"public RosterPresenter(final HablarEventBus eventBus,final RosterDisplay display,final RosterConfig rosterConfig){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  roster=Suco.get(Roster.class);
  basicActions=new RosterBasicActions();
  this.rosterConfig=rosterConfig;
  groupPresenters=new HashMap<String,RosterGroupPresenter>();
  active=true;
  itemMenu=new Menu<RosterItemPresenter>(display.newRosterItemMenuDisplay(""String_Node_Str""));
  groupMenu=new Menu<RosterGroupPresenter>(display.newRosterGroupMenuDisplay(""String_Node_Str""));
  addRosterListeners();
  addSessionListeners();
  final String title=i18n().contacts();
  getState().init(Icons.ROSTER,title,title);
}","public RosterPresenter(final HablarEventBus eventBus,final RosterDisplay display,final RosterConfig rosterConfig){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  roster=Suco.get(Roster.class);
  basicActions=new RosterBasicActions(eventBus);
  this.rosterConfig=rosterConfig;
  groupPresenters=new HashMap<String,RosterGroupPresenter>();
  active=true;
  itemMenu=new Menu<RosterItemPresenter>(display.newRosterItemMenuDisplay(""String_Node_Str""));
  groupMenu=new Menu<RosterGroupPresenter>(display.newRosterGroupMenuDisplay(""String_Node_Str""));
  addRosterListeners();
  addSessionListeners();
  final String title=i18n().contacts();
  getState().init(Icons.ROSTER,title,title);
}",0.9942196531791908
2614,"public static VCardConfig getFromMeta(){
  VCardConfig config=new VCardConfig();
  config.vCardReadOnly=PageAssist.isMetaFalse(""String_Node_Str"");
  return config;
}","public static VCardConfig getFromMeta(){
  VCardConfig config=new VCardConfig();
  config.vCardReadOnly=PageAssist.isMetaTrue(""String_Node_Str"",false);
  return config;
}",0.9611940298507464
2615,"@Before public void setup(){
  HablarTester tester=new HablarTester();
  page=mock(Page.class);
  eventBus=tester.eventBus;
  state=new PageState(eventBus,page);
  when(page.getState()).thenReturn(state);
  display=tester.newDisplay(HeaderDisplay.class);
  presenter=new HeaderPresenter(eventBus,page,display);
}","@Before public void setup(){
  HablarTester tester=new HablarTester();
  page=mock(Page.class);
  eventBus=tester.eventBus;
  state=new PageState(eventBus,page);
  when(page.getState()).thenReturn(state);
  display=tester.newDisplay(HeaderDisplay.class);
  new HeaderPresenter(eventBus,page,display);
}",0.98371335504886
2616,"@Test public void shouldRemoveChatIfClosed(){
  final Page<?> page=createChatPage(Visibility.notFocused);
  tester.fire(new UserMessageEvent(page,""String_Node_Str"",PairChatPresenter.CHAT_MESSAGE));
  assertTrue(pages.contains(page));
  tester.fire(new VisibilityChangedEvent(page,Visibility.hidden));
  assertFalse(pages.contains(page));
}","/** 
 * Issue 287: An unattended chat tab can be closed without the unattended flag being reset
 */
@Test public void shouldRemoveChatIfClosed(){
  final Page<?> page=createChatPage(Visibility.notFocused);
  tester.fire(new UserMessageEvent(page,""String_Node_Str"",PairChatPresenter.CHAT_MESSAGE));
  assertTrue(pages.contains(page));
  tester.fire(new VisibilityChangedEvent(page,Visibility.hidden));
  assertFalse(pages.contains(page));
}",0.87146529562982
2617,"/** 
 * Retrieve Hablar configuration from meta tags in html
 */
public static HablarConfig getFromMeta(){
  final HablarConfig config=new HablarConfig();
  config.hasRoster=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasSearch=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasSignals=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasChat=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasVCard=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasCopyToClipboard=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasSound=PageAssist.isMetaTrue(""String_Node_Str"");
  config.dockRoster=PageAssist.getMeta(""String_Node_Str"");
  final String layout=PageAssist.getMeta(""String_Node_Str"");
  if (""String_Node_Str"".equals(layout)) {
    config.layout=HablarDisplay.Layout.tabs;
  }
 else {
    config.layout=HablarDisplay.Layout.accordion;
  }
  if (config.layout == HablarDisplay.Layout.tabs) {
    createTabHeaderSize(config);
  }
  config.roomsConfig=HablarRoomsConfig.getFromMeta();
  config.rosterConfig=RosterConfig.getFromMeta();
  config.searchConfig=SearchConfig.getFromMeta();
  config.soundConfig=SoundSignalsConfig.getFromMeta();
  return config;
}","/** 
 * Retrieve Hablar configuration from meta tags in html
 */
public static HablarConfig getFromMeta(){
  final HablarConfig config=new HablarConfig();
  config.hasRoster=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasSearch=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasSignals=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasChat=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasVCard=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasCopyToClipboard=PageAssist.isMetaTrue(""String_Node_Str"");
  config.hasSound=PageAssist.isMetaTrue(""String_Node_Str"");
  config.dockRoster=PageAssist.getMeta(""String_Node_Str"");
  final String layout=PageAssist.getMeta(""String_Node_Str"");
  if (""String_Node_Str"".equals(layout)) {
    config.layout=HablarDisplay.Layout.tabs;
  }
 else {
    config.layout=HablarDisplay.Layout.accordion;
  }
  if (config.layout == HablarDisplay.Layout.tabs) {
    createTabHeaderSize(config);
  }
  config.roomsConfig=HablarRoomsConfig.getFromMeta();
  config.rosterConfig=RosterConfig.getFromMeta();
  config.searchConfig=SearchConfig.getFromMeta();
  config.soundConfig=SoundSignalsConfig.getFromMeta();
  config.vcardConfig=VCardConfig.getFromMeta();
  return config;
}",0.9800166527893422
2618,"public static void install(final Hablar hablar){
  final OwnVCardPresenter ownVCardPage=new OwnVCardPresenter(hablar.getEventBus(),new VCardWidget(false,""String_Node_Str""));
  hablar.addPage(ownVCardPage,UserContainer.ROL);
  final OthersVCardPresenter othersVCardPage=new OthersVCardPresenter(hablar.getEventBus(),new OtherVCardWidget(true));
  hablar.addPage(othersVCardPage,OverlayContainer.ROL);
  hablar.addPageAddedHandler(new PageAddedHandler(){
    @Override public void onPageAdded(    final PageAddedEvent event){
      final RosterPage rosterPage=RosterPresenter.asRoster(event.getPage());
      if (rosterPage != null) {
        rosterPage.getItemMenu().addAction(createViewVCardAction(othersVCardPage));
      }
    }
  }
,true);
  prepareDefaultNicknameListener();
}","public static void install(final Hablar hablar,VCardConfig vCardConfig){
  VCardWidget vCardWidget=new VCardWidget(vCardConfig.vCardReadOnly,""String_Node_Str"");
  final OwnVCardPresenter ownVCardPage=new OwnVCardPresenter(hablar.getEventBus(),vCardWidget);
  hablar.addPage(ownVCardPage,UserContainer.ROL);
  final OthersVCardPresenter othersVCardPage=new OthersVCardPresenter(hablar.getEventBus(),new OtherVCardWidget(true));
  hablar.addPage(othersVCardPage,OverlayContainer.ROL);
  hablar.addPageAddedHandler(new PageAddedHandler(){
    @Override public void onPageAdded(    final PageAddedEvent event){
      final RosterPage rosterPage=RosterPresenter.asRoster(event.getPage());
      if (rosterPage != null) {
        rosterPage.getItemMenu().addAction(createViewVCardAction(othersVCardPage));
      }
    }
  }
,true);
  prepareDefaultNicknameListener();
}",0.8472306755934267
2619,"@Override protected void onPageOpen(){
  display.setPageTitle(i18n().invitePeopleToGroupChat());
  display.setAcceptText(i18n().acceptAction());
  final Roster roster=Suco.get(Roster.class);
  final String roomName=RoomName.decode(room.getURI().toString());
  display.getRoomName().setValue(roomName);
  display.setRoomNameEnabled(false);
  Set<String> occupantUris=new HashSet<String>();
  for (  Occupant occupant : room.getOccupants()) {
    occupantUris.add(occupant.getURI().getResource());
  }
  for (  RosterItem item : roster.getItems()) {
    if (!occupantUris.contains(item.getJID().getNode())) {
      createItem(item,false);
    }
  }
}","@Override protected void onPageOpen(){
  display.setPageTitle(i18n().invitePeopleToGroupChat());
  display.setAcceptText(i18n().acceptAction());
  final Roster roster=Suco.get(Roster.class);
  final String roomName=RoomName.decode(room.getURI().getNode());
  display.getRoomName().setValue(roomName);
  display.setRoomNameEnabled(false);
  final Set<String> occupantUris=new HashSet<String>();
  for (  final Occupant occupant : room.getOccupants()) {
    occupantUris.add(occupant.getURI().getResource());
  }
  for (  final RosterItem item : roster.getItems()) {
    if (!occupantUris.contains(item.getJID().getNode())) {
      createItem(item,false);
    }
  }
}",0.9748667174409748
2620,"@Override public void onKeyDown(KeyDownEvent event){
  DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
}","@Override public void onKeyDown(final KeyDownEvent event){
  DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
}",0.9763779527559056
2621,"@Override public void onValueChange(ValueChangeEvent<List<Selectable>> event){
  DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
}","@Override public void onValueChange(final ValueChangeEvent<List<Selectable>> event){
  DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
}",0.9803921568627452
2622,"public EditRoomPresenter(final String pageType,final HablarEventBus eventBus,final EditRoomDisplay display){
  super(pageType,eventBus,display);
  display.getCancel().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      requestVisibility(Visibility.hidden);
    }
  }
);
  display.getInvite().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      onAccept();
      requestVisibility(Visibility.notFocused);
    }
  }
);
  roomNameValidator=new CompositeValidatorChecker(display.getRoomNameError(),display.getAcceptEnabled());
  roomNameValidator.add(display.getRoomName(),Validators.notEmpty(i18n().emptyGroupChatName()));
  roomNameValidator.add(display.getRoomName(),Validators.isValidRoomName(i18n().notValidGroupChatName()));
  roomNameValidator.add(display.getSelectionList(),new ListNotEmptyValidator<Selectable>(i18n().selectionEmptyErrorMessage()));
  display.getRoomNameKeys().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    KeyDownEvent event){
      DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
    }
  }
);
  display.getSelectionList().addValueChangeHandler(new ValueChangeHandler<List<Selectable>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<Selectable>> event){
      DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
    }
  }
);
}","public EditRoomPresenter(final String pageType,final HablarEventBus eventBus,final EditRoomDisplay display){
  super(pageType,eventBus,display);
  display.getCancel().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      requestVisibility(Visibility.hidden);
    }
  }
);
  display.getInvite().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      onAccept();
      requestVisibility(Visibility.notFocused);
    }
  }
);
  roomNameValidator=new CompositeValidatorChecker(display.getRoomNameError(),display.getAcceptEnabled());
  roomNameValidator.add(display.getRoomName(),Validators.notEmpty(i18n().emptyGroupChatName()));
  roomNameValidator.add(display.getRoomName(),Validators.isValidRoomName(i18n().notValidGroupChatName()));
  roomNameValidator.add(display.getSelectionList(),new ListNotEmptyValidator<Selectable>(i18n().selectionEmptyErrorMessage()));
  display.getRoomNameKeys().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
    }
  }
);
  display.getSelectionList().addValueChangeHandler(new ValueChangeHandler<List<Selectable>>(){
    @Override public void onValueChange(    final ValueChangeEvent<List<Selectable>> event){
      DeferredCommand.addCommand(roomNameValidator.getDeferredCommand());
    }
  }
);
}",0.9958706125258088
2623,"@Override public Widget getWidget(){
  return widget;
}","@Override public Widget getWidget(){
  return rosterItemDisplay.asWidget();
}",0.8181818181818182
2624,"public RosterItemSelectable(RosterItem rosterItem,RosterItemWidget widget){
  this.rosterItem=rosterItem;
  this.widget=widget;
}","public RosterItemSelectable(RosterItem rosterItem,RosterItemDisplay rosterItemDisplay){
  this.rosterItem=rosterItem;
  this.rosterItemDisplay=rosterItemDisplay;
}",0.7602739726027398
2625,"@Override public HasClickHandlers getAction(){
  return widget.getAction();
}","@Override public HasClickHandlers getAction(){
  return rosterItemDisplay.getAction();
}",0.8727272727272727
2626,"@Override public int compareTo(Selectable o){
  RosterItemSelectable riSelectable=(RosterItemSelectable)o;
  RosterItem otherRosterItem=riSelectable.rosterItem;
  int retValue=statusValue(rosterItem) - statusValue(otherRosterItem);
  if (retValue == 0) {
    retValue=rosterItem.getName().compareTo(otherRosterItem.getName());
  }
  return retValue;
}","@Override public int compareTo(Selectable o){
}",0.236180904522613
2627,"public ChatPresenter(final HablarEventBus eventBus,final Chat chat,final ChatDisplay display){
  super(TYPE,Idify.uriId(chat.getURI().toString()),eventBus,display);
  this.chat=chat;
  display.setId(getId());
  final XmppURI fromURI=chat.getURI();
  userName=getName(fromURI);
  model.init(HablarIcons.get(IconType.buddyOff),userName);
  model.setPageTitleTooltip(userName);
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  chat.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        display.addMessage(userName,body,ChatDisplay.MessageType.incoming);
        fireUserMessage(body);
        if (getVisibility() == Visibility.hidden) {
          requestVisibility(Visibility.notFocused);
        }
      }
    }
  }
);
  chat.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(chat.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(chat,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(chat,display);
      }
    }
  }
);
}","public ChatPresenter(final HablarEventBus eventBus,final Chat chat,final ChatDisplay display){
  super(TYPE,Idify.uriId(chat.getURI().toString()),eventBus,display);
  this.chat=chat;
  display.setId(getId());
  final XmppURI fromURI=chat.getURI();
  userName=getName(fromURI);
  model.init(HablarIcons.get(IconType.buddyOff),userName,fromURI.toString());
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  chat.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        display.addMessage(userName,body,ChatDisplay.MessageType.incoming);
        fireUserMessage(body);
        if (getVisibility() == Visibility.hidden) {
          requestVisibility(Visibility.notFocused);
        }
      }
    }
  }
);
  chat.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(chat.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(chat,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(chat,display);
      }
    }
  }
);
}",0.9815303430079156
2628,"public ConsolePresenter(final HablarEventBus eventBus,final ConsoleDisplay display){
  super(TYPE,eventBus,display);
  model.init(HablarIcons.get(IconType.console),""String_Node_Str"");
  setVisibility(Visibility.hidden);
  model.setCloseable(true);
  final Session session=Suco.get(Session.class);
  final Connection connection=Suco.get(Connection.class);
  connection.onStanzaReceived(new Listener<IPacket>(){
    @Override public void onEvent(    final IPacket parameter){
      display.add(parameter.toString(),""String_Node_Str"",session.getState().toString());
    }
  }
);
  connection.onStanzaSent(new Listener<IPacket>(){
    @Override public void onEvent(    final IPacket parameter){
      display.add(parameter.toString(),""String_Node_Str"",session.getState().toString());
    }
  }
);
  display.getClear().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      display.clear();
    }
  }
);
  display.getInput().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        final HasText input=display.getInputText();
        if (event.getNativeEvent().getCtrlKey()) {
          final String newText=input.getText() + ""String_Node_Str"";
          input.setText(newText);
          display.setInputCursorPos(newText.length());
        }
 else {
          final String packet=input.getText();
          if (session.getState() == State.ready && !packet.isEmpty()) {
            session.send(GWTXMLService.toXML(packet));
            input.setText(""String_Node_Str"");
          }
        }
      }
    }
  }
);
}","public ConsolePresenter(final HablarEventBus eventBus,final ConsoleDisplay display){
  super(TYPE,eventBus,display);
  model.init(HablarIcons.get(IconType.console),""String_Node_Str"",""String_Node_Str"");
  setVisibility(Visibility.hidden);
  model.setCloseable(true);
  final Session session=Suco.get(Session.class);
  final Connection connection=Suco.get(Connection.class);
  connection.onStanzaReceived(new Listener<IPacket>(){
    @Override public void onEvent(    final IPacket parameter){
      display.add(parameter.toString(),""String_Node_Str"",session.getState().toString());
    }
  }
);
  connection.onStanzaSent(new Listener<IPacket>(){
    @Override public void onEvent(    final IPacket parameter){
      display.add(parameter.toString(),""String_Node_Str"",session.getState().toString());
    }
  }
);
  display.getClear().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      display.clear();
    }
  }
);
  display.getInput().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        final HasText input=display.getInputText();
        if (event.getNativeEvent().getCtrlKey()) {
          final String newText=input.getText() + ""String_Node_Str"";
          input.setText(newText);
          display.setInputCursorPos(newText.length());
        }
 else {
          final String packet=input.getText();
          if (session.getState() == State.ready && !packet.isEmpty()) {
            session.send(GWTXMLService.toXML(packet));
            input.setText(""String_Node_Str"");
          }
        }
      }
    }
  }
);
}",0.9946172248803828
2629,"public void init(final String style,final String title){
  pageIcon=style;
  pageTitle=title;
  pageTitleTooltip=title;
  fireChanged();
}","public void init(final String style,final String title,final String tooltip){
  pageIcon=style;
  pageTitle=title;
  pageTitleTooltip=tooltip;
  fireChanged();
}",0.903010033444816
2630,"public void setExternalState(String externalState){
  this.externalState=externalState;
  fireChanged();
}","public void setExternalState(final String externalState){
  this.externalState=externalState;
  fireChanged();
}",0.9724770642201837
2631,"public RoomPresenter(final HablarEventBus eventBus,final Room room,final RoomDisplay display){
  super(TYPE,""String_Node_Str"" + ++id,eventBus,display);
  this.room=room;
  display.setId(getId());
  new OccupantsPresenter(room,display.createOccupantsDisplay(room.getID()));
  final Session session=Suco.get(Session.class);
  final String me=session.getCurrentUser().getNode();
  final String roomName=RoomName.decode(room.getURI().getNode());
  setVisibility(Visibility.notFocused);
  model.init(HablarIcons.get(IconType.roster),roomName);
  model.setCloseable(true);
  room.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        final String from=message.getFrom().getResource();
        if (me.equals(from)) {
          display.addMessage(""String_Node_Str"",body,ChatDisplay.MessageType.sent);
        }
 else {
          display.addMessage(from,body,ChatDisplay.MessageType.incoming);
          fireUserMessage(roomName,from,body);
        }
      }
    }
  }
);
  room.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(room.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(room,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(room,display);
      }
    }
  }
);
}","public RoomPresenter(final HablarEventBus eventBus,final Room room,final RoomDisplay display){
  super(TYPE,""String_Node_Str"" + ++id,eventBus,display);
  this.room=room;
  display.setId(getId());
  new OccupantsPresenter(room,display.createOccupantsDisplay(room.getID()));
  final Session session=Suco.get(Session.class);
  final String me=session.getCurrentUser().getNode();
  final String roomName=RoomName.decode(room.getURI().getNode());
  setVisibility(Visibility.notFocused);
  model.init(HablarIcons.get(IconType.roster),roomName,roomName);
  model.setCloseable(true);
  room.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        final String from=message.getFrom().getResource();
        if (me.equals(from)) {
          display.addMessage(""String_Node_Str"",body,ChatDisplay.MessageType.sent);
        }
 else {
          display.addMessage(from,body,ChatDisplay.MessageType.incoming);
          fireUserMessage(roomName,from,body);
        }
      }
    }
  }
);
  room.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(room.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(room,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(room,display);
      }
    }
  }
);
}",0.9974366277413842
2632,"public RosterPresenter(final HablarEventBus eventBus,final RosterDisplay display,final RosterConfig rosterConfig){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  roster=Suco.get(Roster.class);
  basicActions=new RosterBasicActions();
  this.rosterConfig=rosterConfig;
  groupPresenters=new HashMap<String,RosterGroupPresenter>();
  active=true;
  itemMenu=new Menu<RosterItemPresenter>(display.newRosterItemMenuDisplay(""String_Node_Str""));
  groupMenu=new Menu<RosterGroupPresenter>(display.newRosterGroupMenuDisplay(""String_Node_Str""));
  addRosterListeners();
  addSessionListeners();
  getState().init(HablarIcons.get(IconType.roster),i18n().contacts());
}","public RosterPresenter(final HablarEventBus eventBus,final RosterDisplay display,final RosterConfig rosterConfig){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  roster=Suco.get(Roster.class);
  basicActions=new RosterBasicActions();
  this.rosterConfig=rosterConfig;
  groupPresenters=new HashMap<String,RosterGroupPresenter>();
  active=true;
  itemMenu=new Menu<RosterItemPresenter>(display.newRosterItemMenuDisplay(""String_Node_Str""));
  groupMenu=new Menu<RosterGroupPresenter>(display.newRosterGroupMenuDisplay(""String_Node_Str""));
  addRosterListeners();
  addSessionListeners();
  String title=i18n().contacts();
  getState().init(HablarIcons.get(IconType.roster),title,title);
}",0.9549418604651164
2633,"public SearchPage(final Visibility visibility,final boolean closeable,final SearchQueryFactory queryFactory,final HablarEventBus eventBus,final SearchWidget display){
  super(""String_Node_Str"",""String_Node_Str"" + ++index,eventBus,display);
  this.queryFactory=queryFactory;
  manager=Suco.get(SearchManager.class);
  setVisibility(visibility);
  model.setCloseable(closeable);
  model.init(HablarIcons.get(HablarIcons.IconType.search),i18n().searchUsers());
  final MenuDisplay<SearchResultItem> menuDisplay=display.createMenu(SEARCH_MENU);
  itemMenu=new Menu<SearchResultItem>(menuDisplay);
  bind();
}","public SearchPage(final Visibility visibility,final boolean closeable,final SearchQueryFactory queryFactory,final HablarEventBus eventBus,final SearchWidget display){
  super(""String_Node_Str"",""String_Node_Str"" + ++index,eventBus,display);
  this.queryFactory=queryFactory;
  manager=Suco.get(SearchManager.class);
  setVisibility(visibility);
  model.setCloseable(closeable);
  String title=i18n().searchUsers();
  model.init(HablarIcons.get(HablarIcons.IconType.search),title,title);
  final MenuDisplay<SearchResultItem> menuDisplay=display.createMenu(SEARCH_MENU);
  itemMenu=new Menu<SearchResultItem>(menuDisplay);
  bind();
}",0.8867313915857605
2634,"public PresencePage(final HablarEventBus eventBus,final PresenceDisplay display){
  super(TYPE,""String_Node_Str"" + ++id,eventBus,display);
  defaultActions=new ArrayList<SimpleAction<PresencePage>>();
  statusMenu=new Menu<PresencePage>(display.newStatusMenuDisplay(""String_Node_Str""));
  manager=Suco.get(PresenceManager.class);
  final String style=HablarIcons.get(IconType.buddy);
  model.init(style,i18n().presencePageTitle());
  display.setStatusIcon(HablarIcons.get(IconType.buddyOff));
  display.setPageTitle(i18n().presencePageTitle());
  storedPresenceManager=new StoredPresenceManager(Suco.get(PrivateStorageManager.class));
  createDefActions();
  updateMenu();
  final ClickHandler handler=new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      statusMenu.setTarget(PresencePage.this);
      statusMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
    }
  }
;
  display.getMenu().addClickHandler(handler);
  display.getIcon().addClickHandler(handler);
  display.getStatus().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        updateStatus(display);
      }
    }
  }
);
  display.getStatusFocus().addBlurHandler(new BlurHandler(){
    @Override public void onBlur(    final BlurEvent event){
      updateStatus(display);
    }
  }
);
  manager.onOwnPresenceChanged(new Listener<Presence>(){
    @Override public void onEvent(    final Presence presence){
      showPresence(presence.getStatus(),presence.getShow());
    }
  }
);
}","public PresencePage(final HablarEventBus eventBus,final PresenceDisplay display){
  super(TYPE,""String_Node_Str"" + ++id,eventBus,display);
  defaultActions=new ArrayList<SimpleAction<PresencePage>>();
  statusMenu=new Menu<PresencePage>(display.newStatusMenuDisplay(""String_Node_Str""));
  manager=Suco.get(PresenceManager.class);
  final String style=HablarIcons.get(IconType.buddy);
  String title=i18n().presencePageTitle();
  model.init(style,title,title);
  display.setStatusIcon(HablarIcons.get(IconType.buddyOff));
  display.setPageTitle(i18n().presencePageTitle());
  storedPresenceManager=new StoredPresenceManager(Suco.get(PrivateStorageManager.class));
  createDefActions();
  updateMenu();
  final ClickHandler handler=new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      statusMenu.setTarget(PresencePage.this);
      statusMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
    }
  }
;
  display.getMenu().addClickHandler(handler);
  display.getIcon().addClickHandler(handler);
  display.getStatus().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        updateStatus(display);
      }
    }
  }
);
  display.getStatusFocus().addBlurHandler(new BlurHandler(){
    @Override public void onBlur(    final BlurEvent event){
      updateStatus(display);
    }
  }
);
  manager.onOwnPresenceChanged(new Listener<Presence>(){
    @Override public void onEvent(    final Presence presence){
      showPresence(presence.getStatus(),presence.getShow());
    }
  }
);
}",0.9817216981132076
2635,"public OwnVCardPresenter(final HablarEventBus eventBus,final VCardDisplay display){
  super(eventBus,display);
  model.init(HablarIcons.get(IconType.buddyWait),I18nVCard.t.ownVCardTitle());
  display.setAcceptVisible(false);
  display.setCancelVisible(false);
  display.setPageTitle(I18nVCard.t.ownVCardTitle());
  setLoading(true,I18nVCard.t.waitingToLogin());
  final Session session=Suco.get(Session.class);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    final Session session){
      if (session.getState() == State.loggedIn) {
        requestVCard();
      }
    }
  }
);
  if (session.getState() == State.loggedIn) {
    requestVCard();
  }
}","public OwnVCardPresenter(final HablarEventBus eventBus,final VCardDisplay display){
  super(eventBus,display);
  String title=I18nVCard.t.ownVCardTitle();
  model.init(HablarIcons.get(IconType.buddyWait),title,title);
  display.setAcceptVisible(false);
  display.setCancelVisible(false);
  display.setPageTitle(I18nVCard.t.ownVCardTitle());
  setLoading(true,I18nVCard.t.waitingToLogin());
  final Session session=Suco.get(Session.class);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    final Session session){
      if (session.getState() == State.loggedIn) {
        requestVCard();
      }
    }
  }
);
  if (session.getState() == State.loggedIn) {
    requestVCard();
  }
}",0.7368421052631579
2636,"protected void togglePageBlink(final Page<?> page,final boolean on){
  if (page.getState().getExternalState().startsWith(""String_Node_Str"")) {
    if (on) {
      page.getState().setExternalState(""String_Node_Str"");
    }
 else {
      page.getState().setExternalState(""String_Node_Str"");
    }
    new Timer(){
      public void run(){
        togglePageBlink(page,!on);
      }
    }
.schedule(BLINK_TIME);
  }
}","protected void togglePageBlink(final Page<?> page,final boolean on){
  if ((page.getState() == null) || (page.getState().getExternalState() == null))   return;
  if (page.getState().getExternalState().startsWith(""String_Node_Str"")) {
    if (on) {
      page.getState().setExternalState(""String_Node_Str"");
    }
 else {
      page.getState().setExternalState(""String_Node_Str"");
    }
    new Timer(){
      public void run(){
        togglePageBlink(page,!on);
      }
    }
.schedule(BLINK_TIME);
  }
}",0.9009793253536452
2637,"public void show(final int left,final int top){
  for (  final Action<T> action : actions) {
    display.setActionVisible(action,action.isApplicable(target));
  }
  int menuLeft=left;
  if ((left + WIDTH) > Window.getClientWidth()) {
    menuLeft=left - WIDTH;
  }
  display.show(menuLeft,top + Y_OFFSET);
}","public void show(final int left,final int top){
  for (  final Action<T> action : actions) {
    display.setActionVisible(action,action.isApplicable(target));
  }
  int menuLeft=left;
  if ((left + WIDTH) > Window.getClientWidth()) {
    menuLeft=left - WIDTH;
  }
  display.show(menuLeft,top + Y_OFFSET);
  int width=display.asWidget().getOffsetWidth();
  if (width != WIDTH) {
    menuLeft=left;
    if ((left + width) > Window.getClientWidth()) {
      menuLeft=left - width;
    }
    display.show(menuLeft,top + Y_OFFSET);
  }
}",0.7309523809523809
2638,"public void show(final int left,final int top){
  for (  final Action<T> action : actions) {
    display.setActionVisible(action,action.isApplicable(target));
  }
  display.show(left,top);
}","public void show(final int left,final int top){
  for (  final Action<T> action : actions) {
    display.setActionVisible(action,action.isApplicable(target));
  }
  display.show(left - WIDTH,top + Y_OFFSET);
}",0.9523809523809524
2639,"@Override public void onClick(final ClickEvent event){
  event.preventDefault();
  final Element element=event.getRelativeElement();
  final int width=element.getClientWidth();
  groupMenu.setTarget(groupPresenter);
  groupMenu.show(element.getAbsoluteLeft() - width,element.getAbsoluteTop());
}","@Override public void onClick(final ClickEvent event){
  event.preventDefault();
  final Element element=event.getRelativeElement();
  groupMenu.setTarget(groupPresenter);
  groupMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
}",0.9033457249070632
2640,"public GroupHeaderPresenter(final RosterGroupPresenter groupPresenter,final Menu<RosterGroupPresenter> groupMenu,final GroupHeaderDisplay display){
  this.display=display;
  final RosterGroup group=groupPresenter.getRosterGroup();
  final boolean isAllContacts=group.getName() == null;
  display.setMenuVisible(!isAllContacts);
  display.getToggleVisibility().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      groupPresenter.toggleVisibility();
    }
  }
);
  display.getOpenMenu().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      final int width=element.getClientWidth();
      groupMenu.setTarget(groupPresenter);
      groupMenu.show(element.getAbsoluteLeft() - width,element.getAbsoluteTop());
    }
  }
);
  final Listener<RosterItem> updateGroup=new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem parameter){
      final String groupLabel=isAllContacts ? ""String_Node_Str"" : i18n().groupName(group.getName(),""String_Node_Str"" + group.getSize());
      display.getName().setText(groupLabel);
    }
  }
;
  group.onItemAdded(updateGroup);
  group.onItemRemoved(updateGroup);
}","public GroupHeaderPresenter(final RosterGroupPresenter groupPresenter,final Menu<RosterGroupPresenter> groupMenu,final GroupHeaderDisplay display){
  this.display=display;
  final RosterGroup group=groupPresenter.getRosterGroup();
  final boolean isAllContacts=group.getName() == null;
  display.setMenuVisible(!isAllContacts);
  display.getToggleVisibility().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      groupPresenter.toggleVisibility();
    }
  }
);
  display.getOpenMenu().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      groupMenu.setTarget(groupPresenter);
      groupMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
    }
  }
);
  final Listener<RosterItem> updateGroup=new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem parameter){
      final String groupLabel=isAllContacts ? ""String_Node_Str"" : i18n().groupName(group.getName(),""String_Node_Str"" + group.getSize());
      display.getName().setText(groupLabel);
    }
  }
;
  group.onItemAdded(updateGroup);
  group.onItemRemoved(updateGroup);
}",0.9781420765027322
2641,"public RosterItemPresenter(final String groupName,final Menu<RosterItemPresenter> itemMenu,final RosterItemDisplay display){
  this.groupName=groupName;
  this.display=display;
  final ChatManager manager=Suco.get(ChatManager.class);
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      manager.open(item.getJID());
    }
  }
);
  display.getMenuAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      final int width=element.getClientWidth();
      itemMenu.setTarget(RosterItemPresenter.this);
      itemMenu.show(element.getAbsoluteLeft() - width,element.getAbsoluteTop());
    }
  }
);
}","public RosterItemPresenter(final String groupName,final Menu<RosterItemPresenter> itemMenu,final RosterItemDisplay display){
  this.groupName=groupName;
  this.display=display;
  final ChatManager manager=Suco.get(ChatManager.class);
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      manager.open(item.getJID());
    }
  }
);
  display.getMenuAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      itemMenu.setTarget(RosterItemPresenter.this);
      itemMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
    }
  }
);
}",0.9641485275288092
2642,"@Override public void onClick(final ClickEvent event){
  event.preventDefault();
  final Element element=event.getRelativeElement();
  final int width=element.getClientWidth();
  itemMenu.setTarget(RosterItemPresenter.this);
  itemMenu.show(element.getAbsoluteLeft() - width,element.getAbsoluteTop());
}","@Override public void onClick(final ClickEvent event){
  event.preventDefault();
  final Element element=event.getRelativeElement();
  itemMenu.setTarget(RosterItemPresenter.this);
  itemMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
}",0.9061371841155236
2643,"@Override public void onClick(final ClickEvent event){
  event.preventDefault();
  final Element element=event.getRelativeElement();
  final int width=element.getClientWidth();
  itemMenu.setTarget(item);
  itemMenu.show(element.getAbsoluteLeft() - width,element.getAbsoluteTop());
}","@Override public void onClick(final ClickEvent event){
  event.preventDefault();
  final Element element=event.getRelativeElement();
  itemMenu.setTarget(item);
  itemMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
}",0.8988326848249028
2644,"public SearchResultItemPresenter(final SearchResultItem item,final Menu<SearchResultItem> itemMenu,final SearchResultItemDisplay display){
  this.item=item;
  this.display=display;
  display.getName().setText(item.getNick());
  display.getJid().setText(item.getJid().toString());
  display.getMenu().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      final int width=element.getClientWidth();
      itemMenu.setTarget(item);
      itemMenu.show(element.getAbsoluteLeft() - width,element.getAbsoluteTop());
    }
  }
);
}","public SearchResultItemPresenter(final SearchResultItem item,final Menu<SearchResultItem> itemMenu,final SearchResultItemDisplay display){
  this.item=item;
  this.display=display;
  display.getName().setText(item.getNick());
  display.getJid().setText(item.getJid().toString());
  display.getMenu().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      event.preventDefault();
      final Element element=event.getRelativeElement();
      itemMenu.setTarget(item);
      itemMenu.show(element.getAbsoluteLeft(),element.getAbsoluteTop());
    }
  }
);
}",0.9556962025316456
2645,"private void onChatVisibilityChanged(final Page<?> page){
  final Visibility visibility=page.getVisibility();
  if (visibility == Visibility.focused && unattendedChatPages.remove(page)) {
    eventBus.fireEvent(new UnattendedPagesChangedEvent(ChangeType.removed,page));
  }
}","private void onChatVisibilityChanged(final Page<?> page){
  final Visibility visibility=page.getVisibility();
  if (visibility == Visibility.focused && unattendedChatPages.remove(page)) {
    eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.removed,page));
  }
}",0.9854545454545456
2646,"private void bind(){
  eventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    final UserMessageEvent event){
      final String messageType=event.getMessageType();
      if (isChatMessage(messageType)) {
        final Page<?> page=event.getPage();
        final Visibility visibility=page.getVisibility();
        if (visibility != Visibility.focused && unattendedChatPages.add(page)) {
          eventBus.fireEvent(new UnattendedPagesChangedEvent(ChangeType.added,page));
        }
      }
    }
  }
);
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    final VisibilityChangedEvent event){
      final Page<?> page=event.getPage();
      if (isChatPage(page.getType())) {
        onChatVisibilityChanged(page);
      }
    }
  }
);
}","private void bind(){
  eventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    final UserMessageEvent event){
      final String messageType=event.getMessageType();
      if (isChatMessage(messageType)) {
        final Page<?> page=event.getPage();
        final Visibility visibility=page.getVisibility();
        if (visibility != Visibility.focused && unattendedChatPages.add(page)) {
          eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.added,page));
        }
      }
    }
  }
);
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    final VisibilityChangedEvent event){
      final Page<?> page=event.getPage();
      if (isChatPage(page.getType())) {
        onChatVisibilityChanged(page);
      }
    }
  }
);
}",0.995418098510882
2647,"@Override public void onUserMessage(final UserMessageEvent event){
  final String messageType=event.getMessageType();
  if (isChatMessage(messageType)) {
    final Page<?> page=event.getPage();
    final Visibility visibility=page.getVisibility();
    if (visibility != Visibility.focused && unattendedChatPages.add(page)) {
      eventBus.fireEvent(new UnattendedPagesChangedEvent(ChangeType.added,page));
    }
  }
}","@Override public void onUserMessage(final UserMessageEvent event){
  final String messageType=event.getMessageType();
  if (isChatMessage(messageType)) {
    final Page<?> page=event.getPage();
    final Visibility visibility=page.getVisibility();
    if (visibility != Visibility.focused && unattendedChatPages.add(page)) {
      eventBus.fireEvent(new UnattendedChatsChangedEvent(ChangeType.added,page));
    }
  }
}",0.9641148325358851
2648,"@Override public void onEvent(final Presence presence){
  setState(presence);
}","@Override public void onEvent(final Presence presence){
  updatePageState();
}",0.8789808917197452
2649,"private void saveData(){
  for (  final EditorPage<?> editor : pages) {
    editor.saveData();
  }
  updatePresence();
  model.setCloseable(false);
}","private void saveData(){
  for (  final EditorPage<?> editor : pages) {
    editor.saveData();
  }
  updatePageState();
  model.setCloseable(false);
}",0.9632107023411371
2650,"public UserPage(final HablarEventBus eventBus,final UserDisplay display){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  session=Suco.get(Session.class);
  manager=Suco.get(PresenceManager.class);
  pages=new ArrayList<EditorPage<?>>();
  setVisibility(Visibility.notFocused);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    final Session session){
      updatePresence();
    }
  }
);
  manager.onOwnPresenceChanged(new Listener<Presence>(){
    @Override public void onEvent(    final Presence presence){
      setState(presence);
    }
  }
);
  updatePresence();
  model.setPageIcon(HablarIcons.get(IconType.buddyOff));
  display.getClose().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      saveData();
      requestVisibility(Visibility.notFocused);
    }
  }
);
}","public UserPage(final HablarEventBus eventBus,final UserDisplay display){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  session=Suco.get(Session.class);
  manager=Suco.get(PresenceManager.class);
  pages=new ArrayList<EditorPage<?>>();
  setVisibility(Visibility.notFocused);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    final Session session){
      updatePageState();
    }
  }
);
  manager.onOwnPresenceChanged(new Listener<Presence>(){
    @Override public void onEvent(    final Presence presence){
      updatePageState();
    }
  }
);
  updatePageState();
  model.setPageIcon(HablarIcons.get(IconType.buddyOff));
  display.getClose().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      saveData();
      requestVisibility(Visibility.notFocused);
    }
  }
);
}",0.9664200341491178
2651,"public CopyToClipboardWidget(){
  initWidget(uiBinder.createAndBindUi(this));
}","public CopyToClipboardWidget(){
  initWidget(uiBinder.createAndBindUi(this));
  accept.ensureDebugId(""String_Node_Str"");
  cancel.ensureDebugId(""String_Node_Str"");
  content.ensureDebugId(""String_Node_Str"");
}",0.5486111111111112
2652,"@BeforeMethod public void setupSeleniumModule(final ITestContext context){
  if (!Suco.getComponents().hasProvider(WebDriver.class)) {
    Suco.install(new SeleniumModule());
  }
  if (webtester == null) {
    webtester=Suco.get(GenericWebTester.class);
    login=Suco.get(LoginPageObject.class);
    roster=Suco.get(RosterPageObject.class);
    openChat=Suco.get(OpenChatPageObject.class);
    search=Suco.get(SearchPageObject.class);
    chat=Suco.get(ChatPageObject.class);
    editBuddy=Suco.get(EditBuddyPageObject.class);
    groupChat=Suco.get(GroupChatPageObject.class);
    userPage=Suco.get(UserPageObject.class);
    otherVCardPage=Suco.get(OtherVCardPageObject.class);
  }
  webtester.home();
}","@BeforeMethod public void setupSeleniumModule(final ITestContext context){
  if (!Suco.getComponents().hasProvider(WebDriver.class)) {
    Suco.install(new SeleniumModule());
  }
  if (webtester == null) {
    webtester=Suco.get(GenericWebTester.class);
    login=Suco.get(LoginPageObject.class);
    roster=Suco.get(RosterPageObject.class);
    openChat=Suco.get(OpenChatPageObject.class);
    search=Suco.get(SearchPageObject.class);
    chat=Suco.get(ChatPageObject.class);
    editBuddy=Suco.get(EditBuddyPageObject.class);
    groupChat=Suco.get(GroupChatPageObject.class);
    userPage=Suco.get(UserPageObject.class);
    otherVCardPage=Suco.get(OtherVCardPageObject.class);
    copyToClipboard=Suco.get(CopyToClipboardPageObject.class);
  }
  webtester.home();
}",0.9572881355932203
2653,"protected void waitFor(final WebElement element,final String text){
  System.out.println(""String_Node_Str"" + text);
  waitFor(text,new Runnable(){
    @Override public void run(){
      final String elText=element.getText();
      Assert.assertTrue(elText.contains(text));
    }
  }
);
}","protected void waitFor(final WebElement element,final String text){
  System.out.println(""String_Node_Str"" + text);
  waitFor(text,new Runnable(){
    @Override public void run(){
      final String elText=element.getText();
      System.out.println(""String_Node_Str"" + elText);
      Assert.assertTrue(elText.contains(text));
    }
  }
);
}",0.9140127388535032
2654,"public RosterPresenter(final HablarEventBus eventBus,final RosterDisplay display){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  roster=Suco.get(Roster.class);
  groupPresenters=new HashMap<String,RosterGroupPresenter>();
  active=true;
  itemMenu=new Menu<RosterItemPresenter>(display.newRosterItemMenuDisplay(""String_Node_Str""));
  groupMenu=new Menu<RosterGroupPresenter>(display.newRosterGroupMenuDisplay(""String_Node_Str""));
  addRosterListeners();
  addSessionListeners();
  getState().init(HablarIcons.get(IconType.roster),i18n().contacts());
  roster.onGroupAdded(new Listener<RosterGroup>(){
    @Override public void onEvent(    final RosterGroup group){
      createGroup(group);
    }
  }
);
  roster.onGroupRemoved(new Listener<RosterGroup>(){
    @Override public void onEvent(    final RosterGroup group){
      display.remove(groupPresenters.get(group.getName()));
    }
  }
);
}","public RosterPresenter(final HablarEventBus eventBus,final RosterDisplay display){
  super(TYPE,""String_Node_Str"" + ++index,eventBus,display);
  roster=Suco.get(Roster.class);
  groupPresenters=new HashMap<String,RosterGroupPresenter>();
  active=true;
  itemMenu=new Menu<RosterItemPresenter>(display.newRosterItemMenuDisplay(""String_Node_Str""));
  groupMenu=new Menu<RosterGroupPresenter>(display.newRosterGroupMenuDisplay(""String_Node_Str""));
  addRosterListeners();
  addSessionListeners();
  getState().init(HablarIcons.get(IconType.roster),i18n().contacts());
}",0.7672530446549392
2655,"private void addRosterListeners(){
  roster.onItemAdded(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final String message=i18n().userAdded(item.getName());
      fireMessage(message);
    }
  }
);
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
    }
  }
);
  roster.onItemRemoved(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final String message=i18n().userRemoved(item.getName());
      fireMessage(message);
    }
  }
);
  if (roster.isRosterReady()) {
    loadRoster();
  }
}","private void addRosterListeners(){
  roster.onItemAdded(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final String message=i18n().userAdded(item.getJID().toString());
      fireMessage(message);
    }
  }
);
  roster.onItemRemoved(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final String message=i18n().userRemoved(item.getJID().toString());
      fireMessage(message);
    }
  }
);
  roster.onGroupAdded(new Listener<RosterGroup>(){
    @Override public void onEvent(    final RosterGroup group){
      createGroup(group);
    }
  }
);
  roster.onGroupRemoved(new Listener<RosterGroup>(){
    @Override public void onEvent(    final RosterGroup group){
      display.remove(groupPresenters.get(group.getName()));
    }
  }
);
  if (roster.isRosterReady()) {
    loadRoster();
  }
}",0.6627450980392157
2656,"private void addCustomPresenceActions(){
  storedPresenceManager.get(new Listener<IQResponse>(){
    @Override public void onEvent(    final IQResponse response){
      if (response.isSuccess()) {
        final List<StoredPresence> presences=StoredPresences.parse(response).get();
        if (presences.size() > 0) {
          for (          final StoredPresence presence : presences) {
            statusMenu.addAction(createCustomAction(presence.getStatus(),null,HablarIcons.get(IconType.buddyOn),presence.getStatus(),presence.getShow()));
          }
          statusMenu.addAction(clearCustomsAction);
        }
      }
    }
  }
);
}","private void addCustomPresenceActions(){
  storedPresenceManager.get(new Listener<IQResponse>(){
    @Override public void onEvent(    final IQResponse response){
      if (response.isSuccess()) {
        final List<StoredPresence> presences=StoredPresences.parse(response).get();
        if (presences.size() > 0) {
          for (          final StoredPresence presence : presences) {
            final Show show=presence.getShow();
            statusMenu.addAction(createCustomAction(presence.getStatus(),null,PresenceIcon.getIcon(true,show),presence.getStatus(),show));
          }
          statusMenu.addAction(clearCustomsAction);
        }
      }
    }
  }
);
}",0.9204892966360856
2657,"public ChatPresenter(final HablarEventBus eventBus,final Chat chat,final ChatDisplay display){
  super(TYPE,createId(chat.getURI().toString()),eventBus,display);
  this.chat=chat;
  display.setId(getId());
  final XmppURI fromURI=chat.getURI();
  userName=getName(fromURI);
  model.init(HablarIcons.get(IconType.buddyOff),userName);
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  chat.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        display.showMessage(userName,body,ChatDisplay.MessageType.incoming);
        getState().setUserMessage(i18n().newChatFrom(userName,ChatMessageFormatter.ellipsis(body,25)));
      }
    }
  }
);
  chat.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(chat.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(chat,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(chat,display);
      }
    }
  }
);
}","public ChatPresenter(final HablarEventBus eventBus,final Chat chat,final ChatDisplay display){
  super(TYPE,createId(chat.getURI().toString()),eventBus,display);
  this.chat=chat;
  display.setId(getId());
  final XmppURI fromURI=chat.getURI();
  userName=getName(fromURI);
  model.init(HablarIcons.get(IconType.buddyOff),userName);
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  chat.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        display.showMessage(userName,body,ChatDisplay.MessageType.incoming);
        fireUserMessage(body);
      }
    }
  }
);
  chat.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(chat.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(chat,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(chat,display);
      }
    }
  }
);
}",0.9683836589698046
2658,"private void setState(final State state){
  String actionText, pageTitle, pageIcon;
  boolean actionEnabled;
  if (state == State.ready) {
    actionText=i18n().logout();
    actionEnabled=true;
    final String userName=session.getCurrentUser().getNode();
    pageTitle=i18n().connectedAs(userName);
    pageIcon=HablarIcons.get(IconType.on);
  }
 else   if (state == State.disconnected) {
    actionText=i18n().login();
    actionEnabled=true;
    pageTitle=i18n().disconnected();
    pageIcon=HablarIcons.get(IconType.off);
  }
 else {
    pageTitle=actionText=i18n().waitDots();
    actionEnabled=false;
    pageIcon=HablarIcons.get(IconType.off);
  }
  display.getActionText().setText(actionText);
  display.setActionEnabled(actionEnabled);
  display.addMessage(""String_Node_Str"" + state.toString());
  getState().setPageTitle(pageTitle);
  getState().setPageIcon(pageIcon);
  getState().setUserMessage(""String_Node_Str"" + state);
}","private void setState(final State state){
  String actionText, pageTitle, pageIcon;
  boolean actionEnabled;
  if (state == State.ready) {
    actionText=i18n().logout();
    actionEnabled=true;
    final String userName=session.getCurrentUser().getNode();
    pageTitle=i18n().connectedAs(userName);
    pageIcon=HablarIcons.get(IconType.on);
  }
 else   if (state == State.disconnected) {
    actionText=i18n().login();
    actionEnabled=true;
    pageTitle=i18n().disconnected();
    pageIcon=HablarIcons.get(IconType.off);
  }
 else {
    pageTitle=actionText=i18n().waitDots();
    actionEnabled=false;
    pageIcon=HablarIcons.get(IconType.off);
  }
  display.getActionText().setText(actionText);
  display.setActionEnabled(actionEnabled);
  display.addMessage(""String_Node_Str"" + state.toString());
  getState().setPageTitle(pageTitle);
  getState().setPageIcon(pageIcon);
  fireUserMessage(state);
}",0.9793926247288504
2659,"public RoomPresenter(final HablarEventBus eventBus,final Room room,final RoomDisplay display){
  super(TYPE,""String_Node_Str"" + ++id,eventBus,display);
  this.room=room;
  display.setId(getId());
  new OccupantsPresenter(room,display.createOccupantsDisplay(room.getID()));
  final Session session=Suco.get(Session.class);
  final String me=session.getCurrentUser().getNode();
  final String roomName=room.getURI().getNode();
  model.init(HablarIcons.get(IconType.roster),roomName);
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  room.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        final String from=message.getFrom().getResource();
        if (me.equals(from)) {
          display.showMessage(""String_Node_Str"",body,ChatDisplay.MessageType.sent);
        }
 else {
          display.showMessage(from,body,ChatDisplay.MessageType.incoming);
          getState().setUserMessage(i18n().incommingMessage(roomName,from,ChatMessageFormatter.ellipsis(body,25)));
        }
      }
    }
  }
);
  room.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(room.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(room,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(room,display);
      }
    }
  }
);
}","public RoomPresenter(final HablarEventBus eventBus,final Room room,final RoomDisplay display){
  super(TYPE,""String_Node_Str"" + ++id,eventBus,display);
  this.room=room;
  display.setId(getId());
  new OccupantsPresenter(room,display.createOccupantsDisplay(room.getID()));
  final Session session=Suco.get(Session.class);
  final String me=session.getCurrentUser().getNode();
  final String roomName=room.getURI().getNode();
  model.init(HablarIcons.get(IconType.roster),roomName);
  setVisibility(Visibility.notFocused);
  model.setCloseable(true);
  room.onMessageReceived(new Listener<Message>(){
    @Override public void onEvent(    final Message message){
      final String body=ChatMessageFormatter.format(message.getBody());
      if (body != null) {
        final String from=message.getFrom().getResource();
        if (me.equals(from)) {
          display.showMessage(""String_Node_Str"",body,ChatDisplay.MessageType.sent);
        }
 else {
          display.showMessage(from,body,ChatDisplay.MessageType.incoming);
          fireUserMessage(roomName,from,body);
        }
      }
    }
  }
);
  room.onStateChanged(new Listener<State>(){
    @Override public void onEvent(    final State state){
      setState(state);
    }
  }
);
  setState(room.getState());
  display.getAction().addClickHandler(new ClickHandler(){
    @Override public void onClick(    final ClickEvent event){
      sendMessage(room,display);
    }
  }
);
  display.getTextBox().addKeyDownHandler(new KeyDownHandler(){
    @Override public void onKeyDown(    final KeyDownEvent event){
      if (event.getNativeKeyCode() == 13) {
        event.stopPropagation();
        event.preventDefault();
        sendMessage(room,display);
      }
    }
  }
);
}",0.9370234397062976
2660,"private void addRosterListeners(){
  roster.onRosterRetrieved(new Listener<Collection<RosterItem>>(){
    @Override public void onEvent(    final Collection<RosterItem> items){
      loadRoster();
    }
  }
);
  roster.onItemAdded(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      for (      final String name : item.getGroups()) {
        if (groups.get(name) == null) {
          createGroup(name);
        }
      }
      final String msg=i18n().userAdded(item.getName());
      getState().setUserMessage(msg);
    }
  }
);
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      for (      final String name : item.getGroups()) {
        if (groups.get(name) == null) {
          createGroup(name);
        }
      }
    }
  }
);
  roster.onItemRemoved(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final String msg=i18n().userRemoved(item.getName());
      getState().setUserMessage(msg);
    }
  }
);
  if (roster.isRosterReady()) {
    loadRoster();
  }
}","private void addRosterListeners(){
  roster.onRosterRetrieved(new Listener<Collection<RosterItem>>(){
    @Override public void onEvent(    final Collection<RosterItem> items){
      loadRoster();
    }
  }
);
  roster.onItemAdded(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      for (      final String name : item.getGroups()) {
        if (groups.get(name) == null) {
          createGroup(name);
        }
      }
      final String message=i18n().userAdded(item.getName());
      fireMessage(message);
    }
  }
);
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      for (      final String name : item.getGroups()) {
        if (groups.get(name) == null) {
          createGroup(name);
        }
      }
    }
  }
);
  roster.onItemRemoved(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      final String message=i18n().userRemoved(item.getName());
      fireMessage(message);
    }
  }
);
  if (roster.isRosterReady()) {
    loadRoster();
  }
}",0.9659192825112108
2661,"public static HablarIcons.IconType getIconType(boolean isAvailable,Show show){
  if (show == Show.dnd) {
    return HablarIcons.IconType.buddyDnd;
  }
 else   if (show == Show.xa) {
    return HablarIcons.IconType.buddyWait;
  }
 else   if (show == Show.away) {
    return HablarIcons.IconType.buddyWait;
  }
 else   if (isAvailable) {
    return HablarIcons.IconType.buddyOn;
  }
 else {
    return HablarIcons.IconType.buddyOff;
  }
}","public static HablarIcons.IconType getIconType(final boolean isAvailable,final Show show){
  if (show == Show.dnd) {
    return HablarIcons.IconType.buddyDnd;
  }
 else   if (show == Show.xa) {
    return HablarIcons.IconType.buddyWait;
  }
 else   if (show == Show.away) {
    return HablarIcons.IconType.buddyWait;
  }
 else   if (isAvailable) {
    return HablarIcons.IconType.buddyOn;
  }
 else {
    return HablarIcons.IconType.buddyOff;
  }
}",0.986425339366516
2662,"public static String getIcon(boolean available,Show show){
  return HablarIcons.get(getIconType(available,show));
}","public static String getIcon(final boolean available,final Show show){
  return HablarIcons.get(getIconType(available,show));
}",0.950413223140496
2663,"public RosterGroupPresenter(final String groupName,final Menu<RosterItemPresenter> itemMenu,final RosterGroupDisplay display){
  this.groupName=groupName;
  this.itemMenu=itemMenu;
  this.display=display;
  groupLabel=isAllContacts() ? ""String_Node_Str"" : ""String_Node_Str"" + groupName;
  items=new HashMap<XmppURI,RosterItemPresenter>();
  final Roster roster=Suco.get(Roster.class);
  final Collection<RosterItem> items=isAllContacts() ? roster.getItems() : roster.getItemsByGroup(groupName);
  for (  final RosterItem item : items) {
    getPresenter(item);
  }
}","public RosterGroupPresenter(final String groupName,final Menu<RosterItemPresenter> itemMenu,final RosterGroupDisplay display){
  this.groupName=groupName;
  this.itemMenu=itemMenu;
  this.display=display;
  groupLabel=isAllContacts() ? ""String_Node_Str"" : ""String_Node_Str"" + groupName;
  items=new HashMap<XmppURI,RosterItemPresenter>();
  final Roster roster=Suco.get(Roster.class);
  final Collection<RosterItem> items=isAllContacts() ? roster.getItems() : roster.getItemsByGroup(groupName);
  for (  final RosterItem item : items) {
    getPresenter(item);
  }
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    final RosterItem item){
      getPresenter(item).setItem(item);
    }
  }
);
}",0.8721109399075501
2664,"@Override public void setIcon(String iconStyle){
  if (currentStyle != null) {
    icon.removeStyleName(iconStyle);
  }
  currentStyle=iconStyle;
  icon.addStyleName(iconStyle);
}","@Override public void setIcon(final String iconStyle){
  if (currentStyle != null) {
    icon.removeStyleName(currentStyle);
  }
  currentStyle=iconStyle;
  icon.addStyleName(iconStyle);
}",0.9645776566757494
2665,"@Override public void setStatusVisible(boolean visible){
  status.setVisible(visible);
}","@Override public void setStatusVisible(final boolean visible){
  status.setVisible(visible);
}",0.967032967032967
2666,"public void setStatusMessage(String status){
  this.status=status;
  eventBus.fireEvent(new UserMessageEvent(status,this));
  if (visibility != Visibility.focused) {
    view.getHeader().requestFocus();
  }
}","public void setStatusMessage(String status){
  this.status=status;
  hablarEventBus.fireEvent(new UserMessageEvent(status,this));
  if (visibility != Visibility.focused) {
    view.getHeader().requestFocus();
  }
}",0.981042654028436
2667,"@Override public void onClick(ClickEvent event){
  eventBus.fireEvent(new ClosePageEvent(PageLogic.this));
}","@Override public void onClick(ClickEvent event){
  hablarEventBus.fireEvent(new ClosePageEvent(PageLogic.this));
}",0.963963963963964
2668,"private void bind(PageHeader header){
  header.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      eventBus.fireEvent(new OpenPageEvent(PageLogic.this));
    }
  }
);
  header.getCloseIcon().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      eventBus.fireEvent(new ClosePageEvent(PageLogic.this));
    }
  }
);
}","private void bind(PageHeader header){
  header.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      hablarEventBus.fireEvent(new OpenPageEvent(PageLogic.this));
    }
  }
);
  header.getCloseIcon().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      hablarEventBus.fireEvent(new ClosePageEvent(PageLogic.this));
    }
  }
);
}",0.980629539951574
2669,"public PageLogic(EventBus eventBus,PageView view,Visibility visibility){
  this.eventBus=eventBus;
  this.view=view;
  this.visibility=visibility;
  bind(view.getHeader());
}","public PageLogic(HablarEventBus hablarEventBus,PageView view,Visibility visibility){
  this.hablarEventBus=hablarEventBus;
  this.view=view;
  this.visibility=visibility;
  bind(view.getHeader());
}",0.9193548387096774
2670,"public PageWidget(EventBus eventBus,String pageType,Visibility visibility,final boolean closeable){
  this.pageType=pageType;
  this.header=new HeaderWidget(closeable);
  logic=new PageLogic(eventBus,this,visibility);
}","public PageWidget(HablarEventBus hablarEventBus,String pageType,Visibility visibility,final boolean closeable){
  this.pageType=pageType;
  this.header=new HeaderWidget(closeable);
  logic=new PageLogic(hablarEventBus,this,visibility);
}",0.9517543859649122
2671,"public PagesLogic(EventBus eventBus,PagesPanel view){
  this.eventBus=eventBus;
  this.view=view;
  this.hiddenPages=new ArrayList<PageView>();
  this.visiblePages=new ArrayList<PageView>();
  eventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    UserMessageEvent event){
    }
  }
);
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    VisibilityChangedEvent event){
      whenVisibilityChanged(event.getPage());
    }
  }
);
  eventBus.addHandler(ClosePageEvent.TYPE,new ClosePageHandler(){
    @Override public void onPageClosed(    PageLogic page){
      whenPageClosed(page);
    }
  }
);
  eventBus.addHandler(OpenPageEvent.TYPE,new OpenPageHandler(){
    @Override public void onOpenPage(    OpenPageEvent event){
      open(event.getPage().getView());
    }
  }
);
}","public PagesLogic(HablarEventBus hablarEventBus,PagesPanel view){
  this.hablarEventBus=hablarEventBus;
  this.view=view;
  this.hiddenPages=new ArrayList<PageView>();
  this.visiblePages=new ArrayList<PageView>();
  hablarEventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    UserMessageEvent event){
    }
  }
);
  hablarEventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    VisibilityChangedEvent event){
      whenVisibilityChanged(event.getPage());
    }
  }
);
  hablarEventBus.addHandler(ClosePageEvent.TYPE,new ClosePageHandler(){
    @Override public void onPageClosed(    PageLogic page){
      whenPageClosed(page);
    }
  }
);
  hablarEventBus.addHandler(OpenPageEvent.TYPE,new OpenPageHandler(){
    @Override public void onOpenPage(    OpenPageEvent event){
      open(event.getPage().getView());
    }
  }
);
}",0.966880341880342
2672,"/** 
 * @see Pages
 */
public void hide(PageView pageView){
  if (pageView.getVisibility() == Visibility.focused) {
    showPreviousPage();
  }
  if (currentPageView == pageView) {
    currentPageView=null;
  }
  if (previouslyVisiblePageView == pageView) {
    previouslyVisiblePageView=null;
  }
  visiblePages.remove(pageView);
  hiddenPages.add(pageView);
  pageView.setVisibility(Visibility.closed);
  view.removePageView(pageView);
  eventBus.fireEvent(new PageClosedEvent(pageView));
}","/** 
 * @see Pages
 */
public void hide(PageView pageView){
  if (pageView.getVisibility() == Visibility.focused) {
    showPreviousPage();
  }
  if (currentPageView == pageView) {
    currentPageView=null;
  }
  if (previouslyVisiblePageView == pageView) {
    previouslyVisiblePageView=null;
  }
  visiblePages.remove(pageView);
  hiddenPages.add(pageView);
  pageView.setVisibility(Visibility.closed);
  view.removePageView(pageView);
  hablarEventBus.fireEvent(new PageClosedEvent(pageView));
}",0.991919191919192
2673,"/** 
 * @see Pages
 */
public void open(PageView pageView){
  boolean isHidden=hiddenPages.contains(pageView);
  if (view.hasPageView(pageView) || isHidden) {
    if (currentPageView != pageView) {
      this.previouslyVisiblePageView=currentPageView;
      if (currentPageView != null) {
        currentPageView.setVisibility(Visibility.notFocused);
      }
      if (isHidden) {
        unhide(pageView);
      }
      view.showPageView(pageView);
      currentPageView=pageView;
      pageView.setVisibility(Visibility.focused);
    }
    GWT.log(""String_Node_Str"",null);
    eventBus.fireEvent(new PageOpenedEvent(pageView));
  }
}","/** 
 * @see Pages
 */
public void open(PageView pageView){
  boolean isHidden=hiddenPages.contains(pageView);
  if (view.hasPageView(pageView) || isHidden) {
    if (currentPageView != pageView) {
      this.previouslyVisiblePageView=currentPageView;
      if (currentPageView != null) {
        currentPageView.setVisibility(Visibility.notFocused);
      }
      if (isHidden) {
        unhide(pageView);
      }
      view.showPageView(pageView);
      currentPageView=pageView;
      pageView.setVisibility(Visibility.focused);
    }
    GWT.log(""String_Node_Str"",null);
    hablarEventBus.fireEvent(new PageOpenedEvent(pageView));
  }
}",0.95141065830721
2674,"public PagesWidget(EventBus eventBus,PagesPanel panel){
  logic=new PagesLogic(eventBus,panel);
  initWidget((Widget)panel);
}","public PagesWidget(HablarEventBus hablarEventBus,PagesPanel panel){
  logic=new PagesLogic(hablarEventBus,panel);
  initWidget((Widget)panel);
}",0.9185185185185184
2675,"private static void install(HablarWidget hablar,ChatConfig config){
  new ChatManagerLogic(hablar.getEventBus(),config,hablar.getPages());
}","private static void install(HablarWidget hablar,ChatConfig config){
  new ChatManagerLogic(hablar.getHablarEventBus(),config,hablar.getPages());
}",0.9790209790209792
2676,"private void createChat(Chat chat,Visibility visibility){
  ChatPageView chatPage=factory.create(chat,Visibility.notFocused,sendButtonVisible);
  chatPage.setControlsVisible(true);
  chatPages.put(chat,chatPage);
  pages.add(chatPage);
  RosterItem item=roster.getItemByJID(chat.getURI().getJID());
  Show show=item != null ? item.getShow() : Show.unknown;
  chatPage.setPresence(show);
}","private void createChat(Chat chat,Visibility visibility){
  ChatPageView chatPage=factory.create(chat,Visibility.notFocused,sendButtonVisible);
  chatPage.setControlsVisible(true);
  chatPages.put(chat.getURI(),chatPage);
  pages.add(chatPage);
  RosterItem item=roster.getItemByJID(chat.getURI().getJID());
  Show show=item != null ? item.getShow() : Show.unknown;
  GWT.log(""String_Node_Str"" + show,null);
  chatPage.setPresence(item.isAvailable(),show);
}",0.8676122931442081
2677,"@Override public ChatPageView create(Chat chat,Visibility visibility,boolean sendButtonVisible){
  return new ChatPageWidget(eventBus,chat,visibility,sendButtonVisible);
}","@Override public ChatPageView create(Chat chat,Visibility visibility,boolean sendButtonVisible){
  return new ChatPageWidget(hablarEventBus,chat,visibility,sendButtonVisible);
}",0.9770114942528736
2678,"public ChatManagerLogic(final EventBus eventBus,ChatConfig config,final Pages pages){
  this(config,pages,new ChatPageFactory(){
    @Override public ChatPageView create(    Chat chat,    Visibility visibility,    boolean sendButtonVisible){
      return new ChatPageWidget(eventBus,chat,visibility,sendButtonVisible);
    }
  }
);
}","public ChatManagerLogic(final HablarEventBus hablarEventBus,ChatConfig config,final Pages pages){
  this(config,pages,new ChatPageFactory(){
    @Override public ChatPageView create(    Chat chat,    Visibility visibility,    boolean sendButtonVisible){
      return new ChatPageWidget(hablarEventBus,chat,visibility,sendButtonVisible);
    }
  }
);
}",0.9678362573099416
2679,"public static String format(final String messageOrig){
  String message=messageOrig;
  message=TextUtils.escape(message);
  message=message.replaceAll(""String_Node_Str"",""String_Node_Str"");
  message=formatUrls(message);
  return message;
}","public static String format(final String message){
  if (message != null) {
    String formatted=TextUtils.escape(message);
    formatted=formatted.replaceAll(""String_Node_Str"",""String_Node_Str"");
    formatted=formatUrls(formatted);
    return formatted;
  }
 else {
    return null;
  }
}",0.5595463137996219
2680,"public PagesLogic(EventBus eventBus,PagesPanel view){
  this.eventBus=eventBus;
  this.view=view;
  this.hiddenPages=new ArrayList<PageView>();
  this.visiblePages=new ArrayList<PageView>();
  eventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    UserMessageEvent event){
    }
  }
);
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    VisibilityChangedEvent event){
      whenVisibilityChanged(event.getPage());
    }
  }
);
  eventBus.addHandler(ClosePageEvent.TYPE,new ClosePageHandler(){
    @Override public void onPageClosed(    PageLogic page){
      whenPageClosed(page);
    }
  }
);
}","public PagesLogic(EventBus eventBus,PagesPanel view){
  this.eventBus=eventBus;
  this.view=view;
  this.hiddenPages=new ArrayList<PageView>();
  this.visiblePages=new ArrayList<PageView>();
  eventBus.addHandler(UserMessageEvent.TYPE,new UserMessageHandler(){
    @Override public void onUserMessage(    UserMessageEvent event){
    }
  }
);
  eventBus.addHandler(VisibilityChangedEvent.TYPE,new VisibilityChangedHandler(){
    @Override public void onVisibilityChanged(    VisibilityChangedEvent event){
      whenVisibilityChanged(event.getPage());
    }
  }
);
  eventBus.addHandler(ClosePageEvent.TYPE,new ClosePageHandler(){
    @Override public void onPageClosed(    PageLogic page){
      whenPageClosed(page);
    }
  }
);
  eventBus.addHandler(OpenPageEvent.TYPE,new OpenPageHandler(){
    @Override public void onOpenPage(    OpenPageEvent event){
      open(event.getPage().getView());
    }
  }
);
}",0.8911854103343465
2681,"public static String updateTitle(final String message,final String title){
  final String extracted=title.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  return (message != null && !message.isEmpty() ? ""String_Node_Str"" + message + ""String_Node_Str"" : ""String_Node_Str"") + extracted;
}","public static String updateTitle(final String title,final String message){
  final String extracted=title.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  return (message != null && !message.isEmpty() ? ""String_Node_Str"" + message + ""String_Node_Str"" : ""String_Node_Str"") + extracted;
}",0.9655172413793104
2682,"@Override public void handleUnattendedMessage(UnattendedChatsChangedEvent event){
  final int size=event.getUnattendedChatPages().getSize();
  String message=size == 0 ? ""String_Node_Str"" : i18n.unreadChats(size);
  String oldTitle=display.getText();
  String newTitle=WindowTextHelper.updateTitle(message,oldTitle);
  display.setText(newTitle);
}","@Override public void handleUnattendedMessage(UnattendedChatsChangedEvent event){
  final int size=event.getUnattendedChatPages().getSize();
  String message=size == 0 ? ""String_Node_Str"" : i18n.unreadChats(size);
  String oldTitle=display.getText();
  String newTitle=WindowTextHelper.updateTitle(oldTitle,message);
  display.setText(newTitle);
}",0.9740634005763688
2683,"public WindowTitlePresenter(EventBus eventBus,final HasText display){
  final Msg i18n=Suco.get(Msg.class);
  eventBus.addHandler(UnattendedChatsChangedEvent.TYPE,new UnattendedMessageHandler(){
    @Override public void handleUnattendedMessage(    UnattendedChatsChangedEvent event){
      final int size=event.getUnattendedChatPages().getSize();
      String message=size == 0 ? ""String_Node_Str"" : i18n.unreadChats(size);
      String oldTitle=display.getText();
      String newTitle=WindowTextHelper.updateTitle(message,oldTitle);
      display.setText(newTitle);
    }
  }
);
}","public WindowTitlePresenter(EventBus eventBus,final HasText display){
  final Msg i18n=Suco.get(Msg.class);
  eventBus.addHandler(UnattendedChatsChangedEvent.TYPE,new UnattendedMessageHandler(){
    @Override public void handleUnattendedMessage(    UnattendedChatsChangedEvent event){
      final int size=event.getUnattendedChatPages().getSize();
      String message=size == 0 ? ""String_Node_Str"" : i18n.unreadChats(size);
      String oldTitle=display.getText();
      String newTitle=WindowTextHelper.updateTitle(oldTitle,message);
      display.setText(newTitle);
    }
  }
);
}",0.9845626072041166
2684,"public void setActive(final boolean active){
  GWT.log(""String_Node_Str"" + active,null);
  if (active) {
    roster.setWidgetTopHeight(actions,0,Unit.PX,20,Unit.PX);
    roster.setWidgetTopHeight(disabledPanel,0,Unit.PX,0,Unit.PX);
    roster.setWidgetTopBottom(list,20,Unit.PX,0,Unit.PX);
  }
 else {
    roster.setWidgetTopHeight(actions,0,Unit.PX,0,Unit.PX);
    roster.setWidgetTopBottom(disabledPanel,0,Unit.PX,0,Unit.PX);
    roster.setWidgetBottomHeight(list,0,Unit.PX,0,Unit.PX);
  }
  roster.animate(active ? 500 : 0);
}","public void setActive(final boolean active){
  GWT.log(""String_Node_Str"" + active,null);
  if (active) {
    roster.setWidgetTopHeight(actions,0,Unit.PX,20,Unit.PX);
    roster.setWidgetTopHeight(disabledPanel,0,Unit.PX,0,Unit.PX);
    roster.setWidgetTopBottom(scroll,20,Unit.PX,0,Unit.PX);
  }
 else {
    roster.setWidgetTopHeight(actions,0,Unit.PX,0,Unit.PX);
    roster.setWidgetTopBottom(disabledPanel,0,Unit.PX,0,Unit.PX);
    roster.setWidgetBottomHeight(scroll,0,Unit.PX,0,Unit.PX);
  }
  roster.animate(active ? 500 : 0);
}",0.9811676082862524
2685,"public HablarLogic(HablarConfig config,final Pages pages){
  this.config=config;
  this.pages=pages;
  final Session session=Suco.get(Session.class);
  loginPage=new LoginPage();
  if (config.hasLogin) {
    pages.add(loginPage,Visibility.open);
  }
  if (config.hasRoster) {
    rosterPage=new RosterPage();
    pages.add(rosterPage,Visibility.closed);
    if (config.hasSearch) {
      final SearchPage searchPage=new SearchPage();
      pages.add(searchPage,Visibility.hidden);
      rosterPage.addAction(searchPage.icons.searchIcon(),new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          pages.open(searchPage);
        }
      }
);
    }
  }
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    Session session){
      setState(session.getState());
    }
  }
);
  setState(session.getState());
}","public HablarLogic(HablarConfig config,final Pages pages){
  this.config=config;
  this.pages=pages;
  final Session session=Suco.get(Session.class);
  loginPage=new LoginPage();
  if (config.hasLogin) {
    pages.add(loginPage,Visibility.open);
  }
  if (config.hasRoster) {
    rosterPageWidget=new RosterPageWidget();
    pages.add(rosterPageWidget,Visibility.closed);
    if (config.hasSearch) {
      final SearchPage searchPage=new SearchPage();
      pages.add(searchPage,Visibility.hidden);
      rosterPageWidget.addAction(searchPage.icons.searchIcon(),new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          pages.open(searchPage);
        }
      }
);
    }
  }
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    Session session){
      setState(session.getState());
    }
  }
);
  setState(session.getState());
}",0.954954954954955
2686,"private void setState(State state){
  if (config.hasRoster && state == State.ready) {
    pages.open(rosterPage);
  }
 else   if (config.hasLogin && state == State.disconnected) {
    pages.open(loginPage);
  }
}","private void setState(State state){
  if (config.hasRoster && state == State.ready) {
    pages.open(rosterPageWidget);
  }
 else   if (config.hasLogin && state == State.disconnected) {
    pages.open(loginPage);
  }
}",0.986046511627907
2687,"public RosterLogic(final RosterView view){
  this.view=view;
  this.roster=Suco.get(Roster.class);
  this.items=new HashMap<XmppURI,RosterItemView>();
  this.chatManager=Suco.get(ChatManager.class);
  createMenu();
  roster.onRosterRetrieved(new Listener<Collection<RosterItem>>(){
    @Override public void onEvent(    Collection<RosterItem> items){
      GWT.log(""String_Node_Str"",null);
      for (      RosterItem item : items) {
        getOrCreateWidget(item);
      }
    }
  }
);
  roster.onItemAdded(new Listener<RosterItem>(){
    @Override public void onEvent(    RosterItem item){
      getOrCreateWidget(item);
      view.setStatusMessage(item.getName() + ""String_Node_Str"");
    }
  }
);
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    RosterItem item){
      getOrCreateWidget(item);
    }
  }
);
  Session session=Suco.get(Session.class);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    Session session){
      boolean isActive=session.getState() == State.ready;
      if (active != isActive) {
        active=isActive;
        view.setActive(isActive);
      }
    }
  }
);
  this.active=session.getState() == State.ready;
  view.setActive(active);
}","public RosterLogic(final RosterView view){
  this.view=view;
  this.roster=Suco.get(Roster.class);
  this.items=new HashMap<XmppURI,RosterItemView>();
  this.chatManager=Suco.get(ChatManager.class);
  createMenu();
  roster.onRosterRetrieved(new Listener<Collection<RosterItem>>(){
    @Override public void onEvent(    Collection<RosterItem> items){
      GWT.log(""String_Node_Str"",null);
      for (      RosterItem item : items) {
        getOrCreateWidget(item);
      }
    }
  }
);
  roster.onItemAdded(new Listener<RosterItem>(){
    @Override public void onEvent(    RosterItem item){
      getOrCreateWidget(item);
      view.setStatusMessage(item.getName() + ""String_Node_Str"");
    }
  }
);
  roster.onItemChanged(new Listener<RosterItem>(){
    @Override public void onEvent(    RosterItem item){
      getOrCreateWidget(item);
    }
  }
);
  roster.onItemRemoved(new Listener<RosterItem>(){
    @Override public void onEvent(    RosterItem item){
      view.removeItemView(getOrCreateWidget(item));
      view.setStatusMessage(item.getName() + ""String_Node_Str"");
    }
  }
);
  Session session=Suco.get(Session.class);
  session.onStateChanged(new Listener<Session>(){
    @Override public void onEvent(    Session session){
      boolean isActive=session.getState() == State.ready;
      if (active != isActive) {
        active=isActive;
        view.setActive(isActive);
      }
    }
  }
);
  this.active=session.getState() == State.ready;
  view.setActive(active);
}",0.8620563483351629
2688,"public static IconType getIcon(RosterItem item){
  Show show=item.getShow();
  if (show == Show.dnd) {
    return IconType.buddyDnd;
  }
 else   if (show == Show.xa) {
    return IconType.buddyWait;
  }
 else   if (show == Show.away) {
    return IconType.buddyWait;
  }
 else   if (item.isAvailable()) {
    return IconType.buddyOn;
  }
 else {
    return IconType.buddyOn;
  }
}","public static IconType getIcon(RosterItem item){
  Show show=item.getShow();
  if (show == Show.dnd) {
    return IconType.buddyDnd;
  }
 else   if (show == Show.xa) {
    return IconType.buddyWait;
  }
 else   if (show == Show.away) {
    return IconType.buddyWait;
  }
 else   if (item.isAvailable()) {
    return IconType.buddyOn;
  }
 else {
    return IconType.buddyOff;
  }
}",0.9776609724047306
2689,"@Override public void run(){
  PrintSubnetsTask task=new PrintSubnetsTask(m_pathToProject);
  task.run();
  m_subnets=task.getSubnets();
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
}","@Override public void run(){
  PrintSubnetsTask task=new PrintSubnetsTask(m_pathToProject);
  task.run();
  if (task.isOk()) {
    m_subnets=task.getSubnets();
  }
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
  }
}",0.9406593406593406
2690,"@Override public IStatus runInUIThread(IProgressMonitor monitor){
  m_table.removeAll();
  IPath path=m_project.getLocation();
  path=path.append(LUDevice.configFileName);
  try {
    List<LUDevice> devices=LUDevice.load(path);
    if (devices != null && devices.size() != 0) {
      for (      LUDevice itemDev : devices) {
        TableItem item=new TableItem(m_table,SWT.NONE);
        item.setText(0,itemDev.Name);
        item.setText(1,itemDev.URI);
        item.setText(2,itemDev.Application);
        item.setText(3,itemDev.Platfrom);
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(IProgressMonitor monitor){
  if (m_table.isDisposed())   return Status.OK_STATUS;
  m_table.removeAll();
  IPath path=m_project.getLocation();
  path=path.append(LUDevice.configFileName);
  try {
    List<LUDevice> devices=LUDevice.load(path);
    if (devices != null && devices.size() != 0) {
      for (      LUDevice itemDev : devices) {
        TableItem item=new TableItem(m_table,SWT.NONE);
        item.setText(0,itemDev.Name);
        item.setText(1,itemDev.URI);
        item.setText(2,itemDev.Application);
        item.setText(3,itemDev.Platfrom);
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  return Status.OK_STATUS;
}",0.9597069597069596
2691,"public DiscoverTask(String workDir,String subnetAddress){
  super(workDir,SysCommandExecutor.RUBY_BAT,""String_Node_Str"");
}","public DiscoverTask(String workDir,String subnetAddress){
  super(workDir,SysCommandExecutor.RUBY,""String_Node_Str"",""String_Node_Str"" + subnetAddress + ""String_Node_Str"");
}",0.8108108108108109
2692,"public PrintSubnetsTask(String workDir){
  super(workDir,SysCommandExecutor.RUBY_BAT,""String_Node_Str"");
}","public PrintSubnetsTask(String workDir){
  super(workDir,SysCommandExecutor.RUBY_BAT,""String_Node_Str"",""String_Node_Str"");
}",0.9217391304347826
2693,"public List<String> getSubnets(){
  List<String> fakeList=new ArrayList<String>();
  fakeList.add(""String_Node_Str"");
  fakeList.add(""String_Node_Str"");
  fakeList.add(""String_Node_Str"");
  return fakeList;
}","public List<String> getSubnets(){
  String out=getOutput();
  List<String> subnetsList=Arrays.asList(out.split(""String_Node_Str""));
  return subnetsList;
}",0.5840220385674931
2694,"@Override public void exec(){
  m_console.show();
  m_console.getStream().print(showCommand());
  SysCommandExecutor executor=new SysCommandExecutor();
  executor.setOutputLogDevice(getLogDevice(m_console.getOutputStream()));
  executor.setErrorLogDevice(getLogDevice(m_console.getErrorStream()));
  executor.setWorkingDirectory(m_workDir);
  Process process;
  try {
    process=executor.startCommand(m_decorator,m_cmdLine,null);
  }
 catch (  IOException e) {
    Activator.logError(e);
    return;
  }
  m_debugProcess=DebugPlugin.newProcess(m_launch,process,m_appName);
  if (m_debugProcess != null) {
    attachConsole(m_debugProcess,m_console);
  }
  new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      m_console.show();
      return Status.OK_STATUS;
    }
  }
.schedule(1000);
}","@Override public void exec(){
  m_console.show();
  m_console.getStream().print(showCommand());
  SysCommandExecutor executor=new SysCommandExecutor();
  executor.setOutputLogDevice(getLogDevice(m_console.getOutputStream()));
  executor.setErrorLogDevice(getLogDevice(m_console.getErrorStream()));
  executor.setWorkingDirectory(m_workDir);
  Process process;
  try {
    process=executor.startCommand(m_decorator,m_cmdLine,null);
  }
 catch (  IOException e) {
    Activator.logError(e);
    return;
  }
  m_debugProcess=DebugPlugin.newProcess(m_launch,process,m_appName);
  if (m_debugProcess != null) {
    attachConsole(m_debugProcess,m_console);
  }
  new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      m_console.show();
      return Status.OK_STATUS;
    }
  }
.schedule(1000);
  try {
    while (true) {
      Set<Integer> ids=OSHelper.getProcessesIds(""String_Node_Str"");
      if (ids.size() == 0) {
        break;
      }
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.8826638477801269
2695,"public BuildProjectAsDebug(RhodesConfigurationRO configuration,ILaunch launch,String startPathOverride,String[] additionalRubyExtensions){
  m_platformType=configuration.platformType();
  m_buildType=configuration.buildType();
  m_isReloadCode=configuration.reloadCode();
  m_isTrace=configuration.trace();
  m_selType=configuration.runType();
  m_launch=launch;
  m_startPathOverride=startPathOverride;
  m_additionalRubyExtensions=additionalRubyExtensions;
  m_currProject=ResourcesPlugin.getWorkspace().getRoot().getProject(configuration.project());
}","public BuildProjectAsDebug(RhodesConfigurationRO configuration,ILaunch launch,String startPathOverride,String[] additionalRubyExtensions,final IProgressMonitor monitor){
  m_platformType=configuration.platformType();
  m_buildType=configuration.buildType();
  m_isReloadCode=configuration.reloadCode();
  m_isTrace=configuration.trace();
  m_selType=configuration.runType();
  m_launch=launch;
  m_startPathOverride=startPathOverride;
  m_additionalRubyExtensions=additionalRubyExtensions;
  m_monitor=monitor;
  m_currProject=ResourcesPlugin.getWorkspace().getRoot().getProject(configuration.project());
}",0.9551724137931036
2696,"private IProcess debugSelectedBuildConfiguration(IProject currProject,RunType selType,ILaunch launch) throws Exception {
  if (!TokenChecker.processToken(currProject))   return null;
  IDebugTask task;
  if (m_buildType == BuildType.eRhoMobileCom) {
    task=new RhohubDebugRhodesAppTask(launch,selType,currProject.getLocation().toOSString(),currProject.getName(),m_platformType,m_isReloadCode,m_startPathOverride,m_additionalRubyExtensions);
  }
 else {
    task=new LocalDebugRhodesAppTask(launch,selType,currProject.getLocation().toOSString(),currProject.getName(),m_platformType,m_isReloadCode,m_isTrace,m_startPathOverride,m_additionalRubyExtensions);
  }
  task.run();
  return task.getDebugProcess();
}","private IProcess debugSelectedBuildConfiguration(IProject currProject,RunType selType,ILaunch launch) throws Exception {
  m_monitor.setTaskName(""String_Node_Str"" + m_currProject.getName());
  if (!TokenChecker.processToken(currProject))   return null;
  setupBuildFinishWait();
  IDebugTask task;
  if (m_buildType == BuildType.eRhoMobileCom) {
    task=new RhohubDebugRhodesAppTask(launch,selType,currProject.getLocation().toOSString(),currProject.getName(),m_platformType,m_isReloadCode,m_startPathOverride,m_additionalRubyExtensions);
  }
 else {
    task=new LocalDebugRhodesAppTask(launch,selType,currProject.getLocation().toOSString(),currProject.getName(),m_platformType,m_isReloadCode,m_isTrace,m_startPathOverride,m_additionalRubyExtensions);
  }
  task.run();
  waitBuildFinish();
  return task.getDebugProcess();
}",0.9237785016286644
2697,"public BuildProjectAsRelease(RhodesConfigurationRO configuration,ILaunch launch,String startPathOverride,String[] additionalRubyExtensions){
  m_platformType=configuration.platformType();
  m_buildType=configuration.buildType();
  m_isReloadCode=configuration.reloadCode();
  m_isTrace=configuration.trace();
  m_selType=configuration.runType();
  m_launch=launch;
  m_startPathOverride=startPathOverride;
  m_additionalRubyExtensions=additionalRubyExtensions;
  m_currProject=ResourcesPlugin.getWorkspace().getRoot().getProject(configuration.project());
}","public BuildProjectAsRelease(RhodesConfigurationRO configuration,ILaunch launch,String startPathOverride,String[] additionalRubyExtensions,final IProgressMonitor monitor){
  m_platformType=configuration.platformType();
  m_buildType=configuration.buildType();
  m_isReloadCode=configuration.reloadCode();
  m_isTrace=configuration.trace();
  m_selType=configuration.runType();
  m_launch=launch;
  m_startPathOverride=startPathOverride;
  m_additionalRubyExtensions=additionalRubyExtensions;
  m_monitor=monitor;
  m_currProject=ResourcesPlugin.getWorkspace().getRoot().getProject(configuration.project());
}",0.9553264604810996
2698,"public synchronized void launchLocalProject(IProject project,ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    RunType runType=getRunType(configuration);
    if (m_projectName == null || m_projectName.length() == 0 || runType.id == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    CancelMonitorObserver cancelObserver=new CancelMonitorObserver(monitor);
    try {
      Future<Object> cancelTask=executor.submit(new CleanProject(project,m_isClean,m_platformType,monitor));
      cancelTask.get();
      executor.submit(cancelObserver);
      if (mode.equals(ILaunchManager.DEBUG_MODE)) {
        DebugTarget target=null;
        ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
        job.schedule();
        try {
          OSHelper.killProcess(""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        Future<IProcess> debugTask=executor.submit(new BuildProjectAsDebug(new RhodesConfigurationRO(configuration),launch,m_startPathOverride,m_additionalRubyExtensions));
        IProcess debugProcess=debugTask.get();
        target=new DebugTarget(launch,null,project,runType,m_platformType);
        target.setProcess(debugProcess);
        launch.addDebugTarget(target);
      }
 else {
        Future<Boolean> releaseTask=executor.submit(new BuildProjectAsRelease(new RhodesConfigurationRO(configuration),launch,m_startPathOverride,m_additionalRubyExtensions));
        releaseTask.get();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
    cancelObserver.finishedTask();
    monitor.done();
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}","public synchronized void launchLocalProject(IProject project,ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    RunType runType=getRunType(configuration);
    if (m_projectName == null || m_projectName.length() == 0 || runType.id == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    CancelMonitorObserver cancelObserver=new CancelMonitorObserver(monitor);
    RhodesConfigurationRO rc=new RhodesConfigurationRO(configuration);
    try {
      Future<Object> cleanTask=executor.submit(new CleanProject(project,m_isClean,m_platformType,monitor));
      cleanTask.get();
      executor.submit(cancelObserver);
      if (mode.equals(ILaunchManager.DEBUG_MODE)) {
        ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
        job.schedule();
        try {
          OSHelper.killProcess(""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        Future<IProcess> debugTask=executor.submit(new BuildProjectAsDebug(rc,launch,m_startPathOverride,m_additionalRubyExtensions,monitor));
        IProcess debugProcess=debugTask.get();
        DebugTarget target=new DebugTarget(launch,null,project,runType,m_platformType);
        target.setProcess(debugProcess);
        launch.addDebugTarget(target);
      }
 else {
        Future<Boolean> releaseTask=executor.submit(new BuildProjectAsRelease(rc,launch,m_startPathOverride,m_additionalRubyExtensions,monitor));
        releaseTask.get();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
    cancelObserver.finishedTask();
    monitor.done();
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}",0.9479305740987984
2699,"public synchronized void launchLocalProject(IProject project,ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    RunType runType=getRunType(configuration);
    if (m_projectName == null || m_projectName.length() == 0 || runType.id == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    CancelMonitorObserver cancelObserver=new CancelMonitorObserver(monitor);
    RhodesConfigurationRO rc=new RhodesConfigurationRO(configuration);
    try {
      Future<Object> cleanTask=executor.submit(new CleanProject(project,m_isClean,m_platformType,monitor));
      cleanTask.get();
      executor.submit(cancelObserver);
      if (mode.equals(ILaunchManager.DEBUG_MODE)) {
        ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
        job.schedule();
        try {
          OSHelper.killProcess(""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        Future<IProcess> debugTask=executor.submit(new BuildProjectAsDebug(rc,launch,m_startPathOverride,m_additionalRubyExtensions,monitor));
        IProcess debugProcess=debugTask.get();
        DebugTarget target=new DebugTarget(launch,null,project,runType,m_platformType);
        target.setProcess(debugProcess);
        launch.addDebugTarget(target);
      }
 else {
        Future<Boolean> releaseTask=executor.submit(new BuildProjectAsRelease(rc,launch,m_startPathOverride,m_additionalRubyExtensions,monitor));
        releaseTask.get();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
    cancelObserver.finishedTask();
    monitor.done();
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}","public synchronized void launchLocalProject(IProject project,ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    RunType runType=getRunType(configuration);
    if (m_projectName == null || m_projectName.length() == 0 || runType.id == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    CancelMonitorObserver cancelObserver=new CancelMonitorObserver(monitor);
    RhodesConfigurationRO rc=new RhodesConfigurationRO(configuration);
    try {
      Future<Object> cleanTask=executor.submit(new CleanProject(project,m_isClean,m_platformType,monitor));
      cleanTask.get();
      executor.submit(cancelObserver);
      if (mode.equals(ILaunchManager.DEBUG_MODE)) {
        ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
        job.schedule();
        try {
          OSHelper.killProcess(""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        Future<IProcess> debugTask=executor.submit(new BuildProjectAsDebug(rc,launch,m_startPathOverride,m_additionalRubyExtensions,monitor));
        IProcess debugProcess=debugTask.get();
        if (!debugProcess.isTerminated()) {
          DebugTarget target=new DebugTarget(launch,null,project,runType,m_platformType);
          target.setProcess(debugProcess);
          launch.addDebugTarget(target);
        }
      }
 else {
        Future<Boolean> releaseTask=executor.submit(new BuildProjectAsRelease(rc,launch,m_startPathOverride,m_additionalRubyExtensions,monitor));
        releaseTask.get();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
    cancelObserver.finishedTask();
    monitor.done();
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}",0.9867899603698812
2700,"public void terminate() throws DebugException {
  try {
    m_debugServer.debugTerminate();
    if (ProjectFactory.getInstance().typeFromProject(m_debugProject).equals(RhoconnectProject.class)) {
      new StopSyncAppTask().run();
    }
    if (m_processHandle != null) {
      m_processHandle.terminate();
      m_processHandle=null;
    }
  }
 catch (  DebugServerException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","public void terminate() throws DebugException {
  try {
    m_debugServer.debugTerminate();
    if (ProjectFactory.getInstance().typeFromProject(m_debugProject).equals(RhoconnectProject.class)) {
      new StopSyncAppTask().run();
    }
 else     if (m_runType == RunType.eDevice || m_runType == RunType.eEmulator) {
      String workDir=m_debugProject.getLocation().makeAbsolute().toString();
      new StopRhodesAppTask(workDir,m_platformType,m_runType).run();
    }
    if (m_processHandle != null) {
      m_processHandle.terminate();
      m_processHandle=null;
    }
  }
 catch (  DebugServerException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8
2701,"private void waitDebugProcessing(){
  while (m_debugServer.debugIsProcessing()) {
  }
  try {
    Thread.currentThread().sleep(100);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","private void waitDebugProcessing(){
  try {
    while (m_debugServer.debugIsProcessing()) {
    }
    Thread.currentThread();
    Thread.sleep(100);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.7914691943127962
2702,"public DebugTarget(ILaunch launch,IProcess process,IProject debugProject){
  super(null);
  m_debugProject=debugProject;
  m_launchHandle=launch;
  m_debugTarget=this;
  m_processHandle=process;
  m_threadHandle=new DebugThread(this);
  m_allThreads=new IThread[]{m_threadHandle};
  DebugServer.setDebugOutputStream(System.out);
  if (m_debugServer != null) {
    m_debugServer.shutdown();
  }
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  DebugPlugin.getDefault().getExpressionManager().addExpressionListener(this);
  m_debugServer=new DebugServer(this);
  m_debugServer.start();
  m_debugServer.debugSkipBreakpoints(false);
}","public DebugTarget(ILaunch launch,IProcess process,IProject debugProject,RunType runType,PlatformType platformType){
  super(null);
  m_platformType=platformType;
  m_runType=runType;
  m_debugProject=debugProject;
  m_launchHandle=launch;
  m_debugTarget=this;
  m_processHandle=process;
  m_threadHandle=new DebugThread(this);
  m_allThreads=new IThread[]{m_threadHandle};
  DebugServer.setDebugOutputStream(System.out);
  if (m_debugServer != null) {
    m_debugServer.shutdown();
  }
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  DebugPlugin.getDefault().getExpressionManager().addExpressionListener(this);
  m_debugServer=new DebugServer(this);
  m_debugServer.start();
  m_debugServer.debugSkipBreakpoints(false);
}",0.933709449929478
2703,"public synchronized void launchLocalProject(IProject project,ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    DebugTarget target=null;
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    PlatformType currPlType=PlatformType.fromId(m_platformType);
    if (m_projectName == null || m_projectName.length() == 0 || m_runType == null || m_runType.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.schedule();
      try {
        OSHelper.killProcess(""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      target=new DebugTarget(launch,null,project);
    }
    try {
      cleanSelectedPlatform(project,m_isClean,monitor);
      startBuildThread(project,mode,launch);
      while (true) {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
      Activator.logError(e);
    }
catch (    FileNotFoundException e) {
      DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
      Activator.logError(e);
    }
catch (    IOException e) {
      e.printStackTrace();
      Activator.logError(e);
    }
    monitor.done();
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      target.setProcess(m_debugProcess);
      launch.addDebugTarget(target);
    }
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}","public synchronized void launchLocalProject(IProject project,ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    DebugTarget target=null;
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    PlatformType currPlType=PlatformType.fromId(m_platformType);
    if (m_projectName == null || m_projectName.length() == 0 || m_runType == null || m_runType.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.schedule();
      try {
        OSHelper.killProcess(""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      target=new DebugTarget(launch,null,project,RunType.fromString(m_runType),PlatformType.fromId(m_platformType));
    }
    try {
      cleanSelectedPlatform(project,m_isClean,monitor);
      startBuildThread(project,mode,launch);
      while (true) {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
      Activator.logError(e);
    }
catch (    FileNotFoundException e) {
      DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
      Activator.logError(e);
    }
catch (    IOException e) {
      e.printStackTrace();
      Activator.logError(e);
    }
    monitor.done();
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      target.setProcess(m_debugProcess);
      launch.addDebugTarget(target);
    }
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}",0.9847504621072088
2704,"public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    DebugTarget target=null;
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    if (m_projectName == null || m_projectName.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    try {
      if (mode.equals(ILaunchManager.DEBUG_MODE)) {
        ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
        job.schedule();
        target=new DebugTarget(launch,null,project);
      }
      startBuildThread(project,mode,launch);
      while (true) {
        try {
          if (monitor.isCanceled()) {
            new StopSyncAppTask().makeJob(""String_Node_Str"").schedule();
            return;
          }
          if (getProcessFinished()) {
            break;
          }
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    IllegalArgumentException e) {
      Activator.logError(e);
    }
catch (    Exception e) {
      e.printStackTrace();
    }
    monitor.done();
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      target.setProcess(m_debugProcess);
      launch.addDebugTarget(target);
    }
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}","public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    DebugTarget target=null;
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    setStandartConsoleOutputIsOff();
    ConsoleHelper.getBuildConsole().clear();
    ConsoleHelper.getBuildConsole().show();
    setupConfigAttributes(configuration);
    if (m_projectName == null || m_projectName.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    try {
      if (mode.equals(ILaunchManager.DEBUG_MODE)) {
        ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
        job.schedule();
        target=new DebugTarget(launch,null,project,RunType.eUnknow,PlatformType.eUnknown);
      }
      startBuildThread(project,mode,launch);
      while (true) {
        try {
          if (monitor.isCanceled()) {
            new StopSyncAppTask().makeJob(""String_Node_Str"").schedule();
            return;
          }
          if (getProcessFinished()) {
            break;
          }
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    IllegalArgumentException e) {
      Activator.logError(e);
    }
catch (    Exception e) {
      e.printStackTrace();
    }
    monitor.done();
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      target.setProcess(m_debugProcess);
      launch.addDebugTarget(target);
    }
  }
 catch (  IllegalArgumentException e) {
    DialogUtils.error(""String_Node_Str"",e.getMessage());
  }
}",0.9898720682302772
2705,"public List<Capabilities> getCapabilities(){
  List<String> rawList=(List<String>)super.getObject(""String_Node_Str"");
  List<String> androidList=(List<String>)super.getObject(""String_Node_Str"",""String_Node_Str"");
  if (androidList != null) {
    rawList.addAll(androidList);
  }
  return Capabilities.getCapabilitiesList(rawList);
}","public List<Capabilities> getCapabilities(){
  List<String> rawList=(List<String>)super.getObject(""String_Node_Str"");
  List<String> androidList=(List<String>)super.getObject(""String_Node_Str"",""String_Node_Str"");
  if (rawList != null) {
    if (androidList != null) {
      rawList.addAll(androidList);
    }
  }
 else {
    rawList=androidList;
  }
  return Capabilities.getCapabilitiesList(rawList);
}",0.8831521739130435
2706,"public static List<Capabilities> getCapabilitiesList(List<String> capabList){
  List<Capabilities> list=new ArrayList<Capabilities>();
  defaultCapabilityList();
  if (capabList != null) {
    for (    String pt : capabList) {
      list.add(Capabilities.fromId(pt));
    }
  }
  return list;
}","public static List<Capabilities> getCapabilitiesList(List<String> capabList){
  List<Capabilities> list=new ArrayList<Capabilities>();
  defaultCapabilityList();
  if (capabList != null) {
    for (    String pt : capabList) {
      Capabilities temp=Capabilities.fromId(pt);
      if (list.indexOf(temp) == -1)       list.add(Capabilities.fromId(pt));
    }
  }
  return list;
}",0.8469539375928677
2707,"/** 
 * Returns the current stack frames in the target.
 * @return the current stack frames in the target
 * @throws DebugException if unable to perform the request
 */
protected IStackFrame[] getStackFrames() throws DebugException {
  waitDebugProcessing();
  StackData stackData=new StackData(m_debugServer.debugGetFile(),m_debugServer.debugGetLine());
  IStackFrame[] theFrames=new IStackFrame[1];
  for (int i=0; i < 3; ++i) {
    try {
      stackData.m_currVariables=new ArrayList<rhogenwizard.debugger.backend.DebugVariable>();
      theFrames[0]=new DebugStackFrame(m_threadHandle,stackData,0);
      break;
    }
 catch (    DebugServerException e) {
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e1) {
      }
    }
  }
  return theFrames;
}","/** 
 * Returns the current stack frames in the target.
 * @return the current stack frames in the target
 * @throws DebugException if unable to perform the request
 */
protected IStackFrame[] getStackFrames() throws DebugException {
  waitDebugProcessing();
  StackData stackData=new StackData(m_debugServer.debugGetFile(),m_debugServer.debugGetLine());
  IStackFrame[] theFrames=new IStackFrame[1];
  for (int i=0; i < 3; ++i) {
    try {
      stackData.m_currVariables=m_debugServer.debugWatchList();
      theFrames[0]=new DebugStackFrame(m_threadHandle,stackData,0);
      break;
    }
 catch (    DebugServerException e) {
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e1) {
      }
    }
  }
  return theFrames;
}",0.949481865284974
2708,"@Override public void createControl(final Composite parent){
  Composite composite=SWTFactory.createComposite(parent,1,1,GridData.FILL_HORIZONTAL);
  m_comp=composite;
  Composite namecomp=SWTFactory.createComposite(composite,composite.getFont(),3,1,GridData.FILL_HORIZONTAL,0,0);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_appNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY,1);
  m_appNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.projectNameCfgAttribute,m_appNameText.getText());
        showApplyButton();
      }
    }
  }
);
  Button browseButton=SWTFactory.createPushButton(namecomp,""String_Node_Str"",null);
  browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectProjectDialog();
    }
  }
);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_selectPlatformCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,PlatformType.getPublicIds());
  m_selectPlatformCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodePlatformInformation(m_selectPlatformCombo.getText());
        showApplyButton();
      }
    }
  }
);
  m_selectPlatformCombo.select(0);
  GridData comboAligment=new GridData();
  comboAligment.horizontalAlignment=GridData.FILL;
  m_selectPlatformVersionCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,androidVersions);
  m_selectPlatformVersionCombo.setLayoutData(comboAligment);
  m_selectPlatformVersionCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodeVersionCombo(m_selectPlatformVersionCombo.getText());
        showApplyButton();
      }
    }
  }
);
  m_selectPlatformVersionCombo.select(0);
  m_platformTypeLabel=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_platformTypeCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,simulatorTypes);
  m_platformTypeCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        if (m_platformTypeCombo.getText().equals(RunType.platformDevice) && m_selectPlatformCombo.getText().equals(PlatformType.eIPhone.publicId)) {
          DialogUtils.warning(""String_Node_Str"",""String_Node_Str"");
          m_platformTypeCombo.select(m_platformTypeCombo.indexOf(RunType.platformRhoSim));
        }
        if (m_platformTypeCombo.getText().equals(RunType.platformDevice) && m_selectPlatformCombo.getText().equals(PlatformType.eWin32.publicId)) {
          DialogUtils.warning(""String_Node_Str"",""String_Node_Str"");
          m_platformTypeCombo.select(m_platformTypeCombo.indexOf(RunType.platformSim));
        }
        if (m_platformTypeCombo.getText().equals(RunType.platformSim) && m_selectPlatformCombo.getText().equals(PlatformType.eWCE.publicId)) {
          DialogUtils.warning(""String_Node_Str"",""String_Node_Str"");
          m_platformTypeCombo.select(m_platformTypeCombo.indexOf(RunType.platformDevice));
        }
        encodePlatformTypeCombo(m_platformTypeCombo.getText());
        encodePlatformInformation(m_selectPlatformCombo.getText());
        showApplyButton();
      }
    }
  }
);
  m_selectPlatformVersionCombo.select(0);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_androidEmuNameLabel=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_adroidEmuNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE,1);
  m_adroidEmuNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      encodeEmuNameText(m_adroidEmuNameText.getText());
    }
  }
);
  GridData checkBoxAligment=new GridData();
  checkBoxAligment.horizontalAlignment=GridData.FILL;
  checkBoxAligment.horizontalSpan=3;
  m_cleanButton=new Button(composite,SWT.CHECK);
  m_cleanButton.setText(""String_Node_Str"");
  m_cleanButton.setSelection(false);
  m_cleanButton.setLayoutData(checkBoxAligment);
  m_cleanButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.isCleanAttribute,m_cleanButton.getSelection());
        showApplyButton();
      }
    }
  }
);
  m_reloadButton=new Button(composite,SWT.CHECK);
  m_reloadButton.setText(""String_Node_Str"");
  m_reloadButton.setSelection(false);
  m_reloadButton.setLayoutData(checkBoxAligment);
  m_reloadButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.isReloadCodeAttribute,m_reloadButton.getSelection());
        showApplyButton();
      }
    }
  }
);
  m_traceButton=new Button(composite,SWT.CHECK);
  m_traceButton.setText(""String_Node_Str"");
  m_traceButton.setSelection(false);
  m_traceButton.setLayoutData(checkBoxAligment);
  m_traceButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.isTraceAttribute,m_traceButton.getSelection());
        showApplyButton();
      }
    }
  }
);
}","@Override public void createControl(final Composite parent){
  Composite composite=SWTFactory.createComposite(parent,1,1,GridData.FILL_HORIZONTAL);
  m_comp=composite;
  Composite namecomp=SWTFactory.createComposite(composite,composite.getFont(),3,1,GridData.FILL_HORIZONTAL,0,0);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_appNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY,1);
  m_appNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.projectNameCfgAttribute,m_appNameText.getText());
        showApplyButton();
      }
    }
  }
);
  Button browseButton=SWTFactory.createPushButton(namecomp,""String_Node_Str"",null);
  browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectProjectDialog();
    }
  }
);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_selectPlatformCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,PlatformType.getPublicIds());
  m_selectPlatformCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        try {
          encodePlatformInformation(m_selectPlatformCombo.getText());
          setPlatfromTypeCombo(m_configuration);
          showApplyButton();
        }
 catch (        CoreException e1) {
        }
      }
    }
  }
);
  m_selectPlatformCombo.select(0);
  GridData comboAligment=new GridData();
  comboAligment.horizontalAlignment=GridData.FILL;
  m_selectPlatformVersionCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,androidVersions);
  m_selectPlatformVersionCombo.setLayoutData(comboAligment);
  m_selectPlatformVersionCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodeVersionCombo(m_selectPlatformVersionCombo.getText());
        showApplyButton();
      }
    }
  }
);
  m_selectPlatformVersionCombo.select(0);
  m_platformTypeLabel=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_platformTypeCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,simulatorTypes);
  m_platformTypeCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        if (m_platformTypeCombo.getText().equals(RunType.platformDevice) && m_selectPlatformCombo.getText().equals(PlatformType.eIPhone.publicId)) {
          DialogUtils.warning(""String_Node_Str"",""String_Node_Str"");
          m_platformTypeCombo.select(m_platformTypeCombo.indexOf(RunType.platformRhoSim));
        }
        if (m_platformTypeCombo.getText().equals(RunType.platformDevice) && m_selectPlatformCombo.getText().equals(PlatformType.eWin32.publicId)) {
          DialogUtils.warning(""String_Node_Str"",""String_Node_Str"");
          m_platformTypeCombo.select(m_platformTypeCombo.indexOf(RunType.platformSim));
        }
        if (m_platformTypeCombo.getText().equals(RunType.platformSim) && m_selectPlatformCombo.getText().equals(PlatformType.eWCE.publicId)) {
          DialogUtils.warning(""String_Node_Str"",""String_Node_Str"");
          m_platformTypeCombo.select(m_platformTypeCombo.indexOf(RunType.platformDevice));
        }
        encodePlatformTypeCombo(m_platformTypeCombo.getText());
        encodePlatformInformation(m_selectPlatformCombo.getText());
        showApplyButton();
      }
    }
  }
);
  m_selectPlatformVersionCombo.select(0);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_androidEmuNameLabel=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_adroidEmuNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE,1);
  m_adroidEmuNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      encodeEmuNameText(m_adroidEmuNameText.getText());
    }
  }
);
  GridData checkBoxAligment=new GridData();
  checkBoxAligment.horizontalAlignment=GridData.FILL;
  checkBoxAligment.horizontalSpan=3;
  m_cleanButton=new Button(composite,SWT.CHECK);
  m_cleanButton.setText(""String_Node_Str"");
  m_cleanButton.setSelection(false);
  m_cleanButton.setLayoutData(checkBoxAligment);
  m_cleanButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.isCleanAttribute,m_cleanButton.getSelection());
        showApplyButton();
      }
    }
  }
);
  m_reloadButton=new Button(composite,SWT.CHECK);
  m_reloadButton.setText(""String_Node_Str"");
  m_reloadButton.setSelection(false);
  m_reloadButton.setLayoutData(checkBoxAligment);
  m_reloadButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.isReloadCodeAttribute,m_reloadButton.getSelection());
        showApplyButton();
      }
    }
  }
);
  m_traceButton=new Button(composite,SWT.CHECK);
  m_traceButton.setText(""String_Node_Str"");
  m_traceButton.setSelection(false);
  m_traceButton.setLayoutData(checkBoxAligment);
  m_traceButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(ConfigurationConstants.isTraceAttribute,m_traceButton.getSelection());
        showApplyButton();
      }
    }
  }
);
}",0.988997226943376
2709,"private void setPlatfromTypeCombo(ILaunchConfigurationWorkingCopy configuration) throws CoreException {
  String platformType=configuration.getAttribute(ConfigurationConstants.simulatorType,""String_Node_Str"");
  m_platformTypeCombo.setEnabled(true);
  m_platformTypeCombo.select(m_platformTypeCombo.indexOf(platformType));
}","private void setPlatfromTypeCombo(ILaunchConfigurationWorkingCopy configuration) throws CoreException {
  PlatformType selProjectPlatform=PlatformType.fromId(configuration.getAttribute(ConfigurationConstants.platforrmCfgAttribute,""String_Node_Str""));
  if (getLaunchConfigurationDialog().getMode().equals(ILaunchManager.DEBUG_MODE) && selProjectPlatform != PlatformType.eAndroid) {
    m_platformTypeCombo.setEnabled(false);
    m_platformTypeCombo.select(m_platformTypeCombo.indexOf(RunType.platformRhoSim));
  }
 else {
    String platformType=configuration.getAttribute(ConfigurationConstants.simulatorType,""String_Node_Str"");
    m_platformTypeCombo.setEnabled(true);
    m_platformTypeCombo.select(m_platformTypeCombo.indexOf(platformType));
  }
}",0.4609665427509293
2710,"@Override public String getResName(){
  String srcName=null;
  try {
    srcName=m_bp.getResourceName();
  }
 catch (  CoreException e) {
    srcName=new String();
  }
  srcName=srcName.replace('\\','/');
  srcName=srcName.substring(1,srcName.length());
  String[] srcPath=srcName.split(""String_Node_Str"");
  if (srcPath.length < 1)   return ""String_Node_Str"";
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  for (int i=1; i < srcPath.length; ++i) {
    sb.append(srcPath[i]);
    if (i + 1 < srcPath.length)     sb.append('/');
  }
  return sb.toString();
}","@Override public String getResName(){
  String[] srcName=m_bp.getResourcePath().segments();
  StringBuilder sb=new StringBuilder();
  sb.append('/');
  for (int i=1; i < srcName.length; i++) {
    sb.append(srcName[i]);
    sb.append('/');
  }
  sb.deleteCharAt(sb.length() - 1);
  return sb.toString();
}",0.3937007874015748
2711,"int createWizardDialog(IWizard wizard){
  WizardDialog buildWizardDialog=new WizardDialog(window.getShell(),wizard){
    @Override protected void configureShell(    Shell newShell){
      super.configureShell(newShell);
      newShell.setSize(wizardWidth,wizardHeigth);
    }
  }
;
  buildWizardDialog.create();
  return buildWizardDialog.open();
}","int createWizardDialog(IWizard wizard,final String finishButtonTitle){
  WizardDialog buildWizardDialog=new WizardDialog(window.getShell(),wizard){
    private Button m_finishButton;
    private Button m_cancelButton;
    private SelectionAdapter m_cancelListener;
    private Button createCancelButton(    Composite parent){
      m_cancelListener=new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent e){
          cancelPressed();
        }
      }
;
      ((GridLayout)parent.getLayout()).numColumns++;
      Button button=new Button(parent,SWT.PUSH);
      button.setText(IDialogConstants.CANCEL_LABEL);
      setButtonLayoutData(button);
      button.setFont(parent.getFont());
      button.setData(new Integer(IDialogConstants.CANCEL_ID));
      button.addSelectionListener(m_cancelListener);
      return button;
    }
    @Override public void updateButtons(){
      boolean canFinish=getWizard().canFinish();
      m_finishButton.setEnabled(canFinish);
    }
    @Override protected void createButtonsForButtonBar(    Composite parent){
      m_finishButton=createButton(parent,IDialogConstants.FINISH_ID,finishButtonTitle,true);
      m_cancelButton=createCancelButton(parent);
      if (parent.getDisplay().getDismissalAlignment() == SWT.RIGHT) {
        m_finishButton.moveBelow(null);
      }
    }
    @Override protected void configureShell(    Shell newShell){
      super.configureShell(newShell);
      newShell.setSize(wizardWidth,wizardHeigth);
    }
  }
;
  buildWizardDialog.create();
  return buildWizardDialog.open();
}",0.3625
2712,"/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 * @see IWorkbenchWindowActionDelegate#run
 */
@Override public void run(IAction action){
  IProject project=ProjectFactory.getInstance().getSelectedProject();
  if (project == null) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!RhodesProject.checkNature(project) && !RhoelementsProject.checkNature(project)) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  IRhoHubSetting setting=RhoHubBundleSetting.createGetter(project);
  if (setting.getToken().isEmpty() || setting.getServerUrl().isEmpty()) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!checkProjectProperties(project)) {
    if (DialogUtils.confirm(""String_Node_Str"",""String_Node_Str"" + project.getName() + ""String_Node_Str"")) {
      LinkWizard linkWizard=new LinkWizard(project);
      if (createWizardDialog(linkWizard) == Window.CANCEL)       return;
    }
 else {
      return;
    }
  }
  if (setting.isLinking()) {
    BuildWizard buildWizard=new BuildWizard(project);
    createWizardDialog(buildWizard);
  }
}","/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 * @see IWorkbenchWindowActionDelegate#run
 */
@Override public void run(IAction action){
  IProject project=ProjectFactory.getInstance().getSelectedProject();
  if (project == null) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!RhodesProject.checkNature(project) && !RhoelementsProject.checkNature(project)) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  IRhoHubSetting setting=RhoHubBundleSetting.createGetter(project);
  if (setting.getToken().isEmpty() || setting.getServerUrl().isEmpty()) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!checkProjectProperties(project)) {
    if (DialogUtils.confirm(""String_Node_Str"",""String_Node_Str"" + project.getName() + ""String_Node_Str""+ project.getName()+ ""String_Node_Str"")) {
      LinkWizard linkWizard=new LinkWizard(project);
      if (createWizardDialog(linkWizard,""String_Node_Str"") == Window.CANCEL)       return;
    }
 else {
      return;
    }
  }
  if (setting.isLinking()) {
    BuildWizard buildWizard=new BuildWizard(project);
    createWizardDialog(buildWizard,""String_Node_Str"");
  }
}",0.970257234726688
2713,"public PreferencesPageRhoHub(){
  super(GRID);
  setPreferenceStore(Activator.getDefault().getPreferenceStore());
  setDescription(MsgConstants.preferencesRhoHubTitle);
}","public PreferencesPageRhoHub(){
  super(GRID);
  setPreferenceStore(Activator.getDefault().getPreferenceStore());
  setDescription(""String_Node_Str"");
}",0.8633540372670807
2714,"public void createFieldEditors(){
  checkRhodesSdk();
  addField(new StringFieldEditor(IRhoHubSetting.rhoHubUrl,""String_Node_Str"",getFieldEditorParent()));
  addField(new StringFieldEditor(IRhoHubSetting.rhoHubToken,""String_Node_Str"",getFieldEditorParent()));
  addField(new StringFieldEditor(IRhoHubSetting.rhoHubSelectedRhodesVesion,""String_Node_Str"",getFieldEditorParent()));
}","public void createFieldEditors(){
  checkRhodesSdk();
  addField(new StringFieldEditor(IRhoHubSetting.rhoHubUrl,""String_Node_Str"",getFieldEditorParent()));
  addField(new StringFieldEditor(IRhoHubSetting.rhoHubToken,""String_Node_Str"",getFieldEditorParent()));
}",0.8143525741029641
2715,"@Override public void run(IProgressMonitor monitor){
  IRhoHubSetting store=RhoHubBundleSetting.createGetter(m_project.getProject());
  if (store != null) {
    try {
      monitor.beginTask(""String_Node_Str"",3);
      while (m_buildInfo.getStatus() == RemoteStatus.eQueued || m_buildInfo.getStatus() == RemoteStatus.eStarted) {
        m_status.getAndSet(RhoHub.getInstance(store).checkProjectBuildStatus(m_project,m_buildInfo));
        if (monitor.isCanceled())         break;
        Thread.sleep(waitSleep);
      }
      monitor.worked(1);
      if (m_status.get()) {
        ByteArrayOutputStream os=new ByteArrayOutputStream();
        HttpDownload hd=new HttpDownload(m_buildInfo.getBuildResultUrl(),os);
        hd.join(0);
        File resultFile=new File(m_dstDir + File.separator + m_buildInfo.getBuildResultFileName());
        FileOutputStream foStream=new FileOutputStream(resultFile);
        os.writeTo(foStream);
        foStream.close();
        os.close();
        monitor.worked(1);
        if (DialogUtils.confirm(""String_Node_Str"",""String_Node_Str"")) {
          Desktop.getDesktop().open(resultFile);
        }
        monitor.worked(1);
      }
      monitor.done();
    }
 catch (    IOException e) {
      m_status.getAndSet(false);
      e.printStackTrace();
    }
catch (    JSONException e) {
      m_status.getAndSet(false);
      e.printStackTrace();
    }
catch (    InterruptedException e) {
      m_status.getAndSet(false);
      e.printStackTrace();
    }
  }
}","@Override public void run(IProgressMonitor monitor){
  IRhoHubSetting store=RhoHubBundleSetting.createGetter(m_project.getProject());
  if (store != null) {
    try {
      monitor.beginTask(""String_Node_Str"",3);
      while (m_buildInfo.getStatus() == RemoteStatus.eQueued || m_buildInfo.getStatus() == RemoteStatus.eStarted) {
        m_status.getAndSet(RhoHub.getInstance(store).checkProjectBuildStatus(m_project,m_buildInfo));
        if (monitor.isCanceled())         break;
        Thread.sleep(waitSleep);
      }
      monitor.worked(1);
      if (m_status.get()) {
        ByteArrayOutputStream os=new ByteArrayOutputStream();
        HttpDownload hd=new HttpDownload(m_buildInfo.getBuildResultUrl(),os);
        hd.join(0);
        File resultFile=new File(m_dstDir + File.separator + m_buildInfo.getBuildResultFileName());
        FileOutputStream foStream=new FileOutputStream(resultFile);
        os.writeTo(foStream);
        foStream.close();
        os.close();
        monitor.worked(1);
        if (DialogUtils.confirm(""String_Node_Str"",m_project.getName() + ""String_Node_Str"")) {
          Desktop.getDesktop().open(resultFile);
        }
        monitor.worked(1);
      }
      monitor.done();
    }
 catch (    IOException e) {
      m_status.getAndSet(false);
      e.printStackTrace();
    }
catch (    JSONException e) {
      m_status.getAndSet(false);
      e.printStackTrace();
    }
catch (    InterruptedException e) {
      m_status.getAndSet(false);
      e.printStackTrace();
    }
  }
}",0.9927104042412194
2716,"public void createAppSettingBarControls(Composite composite){
  GridLayout layout=new GridLayout(4,true);
  layout.verticalSpacing=9;
  composite.setLayout(layout);
  GridData textAligment=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  GridData tableAligment=new GridData(SWT.FILL,SWT.FILL,true,true);
  tableAligment.heightHint=200;
  tableAligment.horizontalSpan=4;
  Label label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  m_textAppBranch=new Text(composite,SWT.BORDER | SWT.SINGLE);
  m_textAppBranch.setLayoutData(textAligment);
  m_textAppBranch.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_textRhodesBranch=new Text(composite,SWT.BORDER | SWT.SINGLE);
  m_textRhodesBranch.setLayoutData(textAligment);
  m_textRhodesBranch.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_comboPlatforms=new Combo(composite,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  m_comboPlatforms.setLayoutData(textAligment);
  m_comboPlatforms.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      List<PlatfromInfoHolder> versions=m_platformsInfo.get(m_comboPlatforms.getText());
      m_comboPlatformVersions.removeAll();
      for (      PlatfromInfoHolder ver : versions) {
        m_comboPlatformVersions.add(ver.plVersion);
        m_comboPlatformVersions.setData(ver.plVersion,ver.remotePlatform);
      }
      m_comboPlatformVersions.select(0);
    }
  }
);
  m_comboPlatformVersions=new Combo(composite,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  m_comboPlatformVersions.setLayoutData(textAligment);
  m_comboPlatformVersions.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_remoteBuildsList=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  m_remoteBuildsList.setLayoutData(tableAligment);
  m_remoteBuildsList.setEnabled(true);
  m_remoteBuildsList.setHeaderVisible(true);
  m_remoteBuildsList.setLinesVisible(true);
  TableColumn colName=new TableColumn(m_remoteBuildsList,SWT.LEFT);
  colName.setText(""String_Node_Str"");
  colName.setWidth(150);
  TableColumn colUrl=new TableColumn(m_remoteBuildsList,SWT.LEFT);
  colUrl.setText(""String_Node_Str"");
  colUrl.setWidth(150);
  TableColumn colStatus=new TableColumn(m_remoteBuildsList,SWT.RIGHT);
  colStatus.setText(""String_Node_Str"");
  colStatus.setWidth(200);
  enableControls(false);
}","public void createAppSettingBarControls(Composite composite){
  GridLayout layout=new GridLayout(4,true);
  layout.verticalSpacing=9;
  composite.setLayout(layout);
  GridData textAligment=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  GridData tableAligment=new GridData(SWT.FILL,SWT.FILL,true,true);
  tableAligment.heightHint=200;
  tableAligment.horizontalSpan=4;
  Label label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  m_textAppBranch=new Text(composite,SWT.BORDER | SWT.SINGLE);
  m_textAppBranch.setLayoutData(textAligment);
  m_textAppBranch.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_textRhodesBranch=new Text(composite,SWT.BORDER | SWT.SINGLE);
  m_textRhodesBranch.setLayoutData(textAligment);
  m_textRhodesBranch.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_comboPlatforms=new Combo(composite,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  m_comboPlatforms.setLayoutData(textAligment);
  m_comboPlatforms.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      List<PlatfromInfoHolder> versions=m_platformsInfo.get(m_comboPlatforms.getText());
      m_comboPlatformVersions.removeAll();
      for (      PlatfromInfoHolder ver : versions) {
        m_comboPlatformVersions.add(ver.plVersion);
        m_comboPlatformVersions.setData(ver.plVersion,ver.remotePlatform);
      }
      m_comboPlatformVersions.select(0);
    }
  }
);
  m_comboPlatformVersions=new Combo(composite,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY);
  m_comboPlatformVersions.setLayoutData(textAligment);
  m_comboPlatformVersions.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_remoteBuildsList=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  m_remoteBuildsList.setLayoutData(tableAligment);
  m_remoteBuildsList.setEnabled(true);
  m_remoteBuildsList.setHeaderVisible(true);
  m_remoteBuildsList.setLinesVisible(true);
  TableColumn colUrl=new TableColumn(m_remoteBuildsList,SWT.LEFT);
  colUrl.setText(""String_Node_Str"");
  colUrl.setWidth(150);
  TableColumn colStatus=new TableColumn(m_remoteBuildsList,SWT.RIGHT);
  colStatus.setText(""String_Node_Str"");
  colStatus.setWidth(200);
  enableControls(false);
}",0.9761253872790232
2717,"private void addTableLine(TableItem newItem,RemoteAppBuildDesc projectBuild) throws JSONException, MalformedURLException {
  TableEditor colOneEditor=new TableEditor(m_remoteBuildsList);
  colOneEditor.grabHorizontal=true;
  Label prjNameLabel=new Label(m_remoteBuildsList,SWT.LEFT);
  prjNameLabel.setText(projectBuild.getId().toString());
  colOneEditor.setEditor(prjNameLabel,newItem,0);
  TableEditor colTwoEditor=new TableEditor(m_remoteBuildsList);
  colTwoEditor.grabHorizontal=true;
  Button dwlButton=new Button(m_remoteBuildsList,SWT.PUSH | SWT.VIRTUAL);
  dwlButton.setText(""String_Node_Str"");
  dwlButton.setData(projectBuild.getBuildResultUrl());
  dwlButton.addSelectionListener(new SelectionListener(){
    private String getDirectory(){
      DirectoryDialog dlg=new DirectoryDialog(Display.getCurrent().getActiveShell());
      dlg.setFilterPath(""String_Node_Str"");
      dlg.setText(""String_Node_Str"");
      dlg.setMessage(""String_Node_Str"");
      return dlg.open();
    }
    @Override public void widgetSelected(    SelectionEvent e){
      Button parentBtn=(Button)e.widget;
      ExecutorService executor=Executors.newSingleThreadExecutor();
      executor.execute(new BuildDownload((URL)parentBtn.getData(),getDirectory()));
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  colTwoEditor.setEditor(dwlButton,newItem,1);
  TableEditor colThreeEditor=new TableEditor(m_remoteBuildsList);
  colThreeEditor.grabHorizontal=true;
  Label prjStatusLabel=new Label(m_remoteBuildsList,SWT.RIGHT);
  prjStatusLabel.setText(projectBuild.getBuildStatus().toString());
  colThreeEditor.setEditor(prjStatusLabel,newItem,2);
}","private void addTableLine(TableItem newItem,RemoteAppBuildDesc projectBuild) throws JSONException, MalformedURLException {
  TableEditor colTwoEditor=new TableEditor(m_remoteBuildsList);
  colTwoEditor.grabHorizontal=true;
  Button dwlButton=new Button(m_remoteBuildsList,SWT.PUSH | SWT.VIRTUAL);
  dwlButton.setText(""String_Node_Str"");
  dwlButton.setData(projectBuild.getBuildResultUrl());
  dwlButton.addSelectionListener(new SelectionListener(){
    private String getDirectory(){
      DirectoryDialog dlg=new DirectoryDialog(Display.getCurrent().getActiveShell());
      dlg.setFilterPath(""String_Node_Str"");
      dlg.setText(""String_Node_Str"");
      dlg.setMessage(""String_Node_Str"");
      return dlg.open();
    }
    @Override public void widgetSelected(    SelectionEvent e){
      Button parentBtn=(Button)e.widget;
      ExecutorService executor=Executors.newSingleThreadExecutor();
      executor.execute(new BuildDownload((URL)parentBtn.getData(),getDirectory()));
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  colTwoEditor.setEditor(dwlButton,newItem,0);
  TableEditor colThreeEditor=new TableEditor(m_remoteBuildsList);
  colThreeEditor.grabHorizontal=true;
  Label prjStatusLabel=new Label(m_remoteBuildsList,SWT.RIGHT);
  prjStatusLabel.setText(projectBuild.getBuildStatus().toString() + ""String_Node_Str"");
  colThreeEditor.setEditor(prjStatusLabel,newItem,1);
}",0.3577863577863578
2718,"@Override public void stopped(DebugState state,String file,int line,String className,String method){
  waitDebugProcessing();
  cleanState();
  installDeferredWatchs();
  waitDebugProcessing();
  if (state == DebugState.BREAKPOINT) {
    IBreakpoint[] breakpoints=DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(DebugConstants.debugModelId);
    for (int i=0; i < breakpoints.length; i++) {
      waitDebugProcessing();
      IBreakpoint breakpoint=breakpoints[i];
      if (breakpoint instanceof ScriptLineBreakpoint) {
        try {
          ScriptLineBreakpoint lineBreakpoint=(ScriptLineBreakpoint)breakpoint;
          String resPath=ResourceNameSelector.getInstance().convertBpName(ProjectFactory.getInstance().typeFromProject(m_debugProject),lineBreakpoint);
          if (lineBreakpoint.getLineNumber() == line && resPath.equals(file)) {
            m_threadHandle.setBreakpoints(new IBreakpoint[]{breakpoint});
            break;
          }
        }
 catch (        CoreException e) {
        }
catch (        BadProjectTagException e1) {
        }
      }
    }
    suspended(DebugEvent.BREAKPOINT);
  }
 else   if (DebugState.paused(state)) {
    m_threadHandle.setStepping(true);
    suspended(DebugEvent.STEP_END);
  }
}","@Override public void stopped(DebugState state,String file,int line,String className,String method){
  waitDebugProcessing();
  if (file.contains(fwTag)) {
    if (!isFoundFramework()) {
      try {
        resume();
      }
 catch (      DebugException e) {
        e.printStackTrace();
      }
      return;
    }
  }
  cleanState();
  installDeferredWatchs();
  waitDebugProcessing();
  if (state == DebugState.BREAKPOINT) {
    IBreakpoint[] breakpoints=DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(DebugConstants.debugModelId);
    for (int i=0; i < breakpoints.length; i++) {
      waitDebugProcessing();
      IBreakpoint breakpoint=breakpoints[i];
      if (breakpoint instanceof ScriptLineBreakpoint) {
        try {
          ScriptLineBreakpoint lineBreakpoint=(ScriptLineBreakpoint)breakpoint;
          String resPath=ResourceNameSelector.getInstance().convertBpName(ProjectFactory.getInstance().typeFromProject(m_debugProject),lineBreakpoint);
          if (lineBreakpoint.getLineNumber() == line && resPath.equals(file)) {
            m_threadHandle.setBreakpoints(new IBreakpoint[]{breakpoint});
            break;
          }
        }
 catch (        CoreException e) {
        }
catch (        BadProjectTagException e1) {
        }
      }
    }
    suspended(DebugEvent.BREAKPOINT);
  }
 else   if (DebugState.paused(state)) {
    m_threadHandle.setStepping(true);
    suspended(DebugEvent.STEP_END);
  }
}",0.9280415430267064
2719,"/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 * @see IWorkbenchWindowActionDelegate#run
 */
@Override public void run(IAction action){
  IProject project=ProjectFactory.getInstance().getSelectedProject();
  if (project == null) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!RhodesProject.checkNature(project) && !RhoelementsProject.checkNature(project)) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  IRhoHubSetting setting=RhoHubBundleSetting.createGetter(project);
  if (setting.getToken().isEmpty() || setting.getServerUrl().isEmpty()) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!checkProjectProperties(project)) {
    if (DialogUtils.confirm(""String_Node_Str"",""String_Node_Str"" + project.getName() + ""String_Node_Str"")) {
      LinkWizard linkWizard=new LinkWizard(project);
      if (createWizardDialog(linkWizard) == Window.CANCEL)       return;
    }
 else {
      return;
    }
  }
  if (setting.isLinking()) {
    BuildWizard buildWizard=new BuildWizard(project);
    createWizardDialog(buildWizard);
  }
}","/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 * @see IWorkbenchWindowActionDelegate#run
 */
@Override public void run(IAction action){
  IProject project=ProjectFactory.getInstance().getSelectedProject();
  if (project == null) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!RhodesProject.checkNature(project) && !RhoelementsProject.checkNature(project)) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  IRhoHubSetting setting=RhoHubBundleSetting.createGetter(project);
  if (setting.getToken().isEmpty() || setting.getServerUrl().isEmpty()) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!checkProjectProperties(project)) {
    if (DialogUtils.confirm(""String_Node_Str"",""String_Node_Str"" + project.getName() + ""String_Node_Str"")) {
      LinkWizard linkWizard=new LinkWizard(project);
      if (createWizardDialog(linkWizard) == Window.CANCEL)       return;
    }
 else {
      return;
    }
  }
  if (checkProjectProperties(project)) {
    BuildWizard buildWizard=new BuildWizard(project);
    createWizardDialog(buildWizard);
  }
}",0.9810387469084914
2720,"private boolean replaceRemoteSourcesFromLocal(IProject project,final String remoteGitRepo,final CredentialsProvider credProvider) throws InvalidRemoteException {
  InitCommand initCmd=Git.init();
  File repoDir=new File(project.getLocation().toOSString());
  initCmd.setDirectory(repoDir);
  initCmd.call();
  try {
    Git localRepo=Git.open(repoDir);
    AddCommand addCmd=localRepo.add();
    addCmd.addFilepattern(""String_Node_Str"");
    addCmd.call();
    CommitCommand commitCmd=localRepo.commit();
    commitCmd.setAll(true);
    commitCmd.setMessage(""String_Node_Str"");
    commitCmd.call();
    StoredConfig repoCfg=localRepo.getRepository().getConfig();
    repoCfg.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteGitRepo);
    repoCfg.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    repoCfg.save();
    PushCommand pushCmd=localRepo.push();
    pushCmd.setForce(true);
    pushCmd.setCredentialsProvider(credProvider);
    pushCmd.call();
    return true;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoFilepatternException e) {
    e.printStackTrace();
  }
catch (  NoHeadException e) {
    e.printStackTrace();
  }
catch (  NoMessageException e) {
    e.printStackTrace();
  }
catch (  ConcurrentRefUpdateException e) {
    e.printStackTrace();
  }
catch (  JGitInternalException e) {
    e.printStackTrace();
  }
catch (  WrongRepositoryStateException e) {
    e.printStackTrace();
  }
  return false;
}","private boolean replaceRemoteSourcesFromLocal(IProject project,final String remoteGitRepo,final CredentialsProvider credProvider) throws InvalidRemoteException {
  InitCommand initCmd=Git.init();
  File repoDir=new File(project.getLocation().toOSString());
  initCmd.setDirectory(repoDir);
  initCmd.call();
  try {
    Git localRepo=Git.open(repoDir);
    AddCommand addCmd=localRepo.add();
    addCmd.addFilepattern(""String_Node_Str"");
    addCmd.call();
    CommitCommand commitCmd=localRepo.commit();
    commitCmd.setAll(true);
    commitCmd.setMessage(""String_Node_Str"");
    commitCmd.call();
    StoredConfig repoCfg=localRepo.getRepository().getConfig();
    repoCfg.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteGitRepo);
    repoCfg.setString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    repoCfg.save();
    PushCommand pushCmd=localRepo.push();
    pushCmd.setForce(true);
    pushCmd.setCredentialsProvider(credProvider);
    pushCmd.call();
    return true;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NoFilepatternException e) {
    e.printStackTrace();
  }
catch (  NoHeadException e) {
    e.printStackTrace();
  }
catch (  NoMessageException e) {
    e.printStackTrace();
  }
catch (  ConcurrentRefUpdateException e) {
    e.printStackTrace();
  }
catch (  JGitInternalException e) {
    DialogUtils.error(""String_Node_Str"",e.toString());
    e.printStackTrace();
  }
catch (  WrongRepositoryStateException e) {
    e.printStackTrace();
  }
  return false;
}",0.98203201568115
2721,"/** 
 * @throws ProjectNotFoundExtension The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(IProgressMonitor monitor) throws CoreException, ProjectNotFoundException {
  try {
    monitor.beginTask(""String_Node_Str"",1);
    if (m_pageLink.isNewProject()) {
      if (RhoHub.getInstance(m_setting).createRemoteAppFromLocalSources(m_selectedProject,new GitCredentialsProvider()) == null) {
        DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
        IRhoHubSettingSetter setter=(IRhoHubSettingSetter)m_setting;
        setter.unsetLinking();
        OSHelper.deleteFolder(new File(m_selectedProject.getLocation().toOSString() + File.separator + ""String_Node_Str""));
        return;
      }
    }
 else {
      if (DialogUtils.quetsion(""String_Node_Str"",""String_Node_Str"")) {
        RhoHub.getInstance(m_setting).updateRemoteAppFromLocalSources(m_selectedProject,m_pageLink.getSelectedProjectUrl(),new GitCredentialsProvider());
      }
 else {
        return;
      }
    }
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.schedule();
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * @throws ProjectNotFoundExtension The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(IProgressMonitor monitor) throws CoreException, ProjectNotFoundException {
  try {
    monitor.beginTask(""String_Node_Str"",1);
    IRhoHubSettingSetter setter=(IRhoHubSettingSetter)m_setting;
    if (m_pageLink.isNewProject()) {
      if (RhoHub.getInstance(m_setting).createRemoteAppFromLocalSources(m_selectedProject,new GitCredentialsProvider()) == null) {
        DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
        setter.unsetLinking();
        OSHelper.deleteFolder(new File(m_selectedProject.getLocation().toOSString() + File.separator + ""String_Node_Str""));
        return;
      }
    }
 else {
      if (DialogUtils.quetsion(""String_Node_Str"",""String_Node_Str"")) {
        RhoHub.getInstance(m_setting).updateRemoteAppFromLocalSources(m_selectedProject,m_pageLink.getSelectedProjectUrl(),new GitCredentialsProvider());
      }
 else {
        return;
      }
    }
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.schedule();
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9488158899923606
2722,"void encodeVersionCombo(String selVersion){
  try {
    String selPlatform=m_configuration.getAttribute(ConfigurationConstants.platforrmCfgAttribute,""String_Node_Str"");
    PlatformType type=PlatformType.fromId(selPlatform);
    if (type == PlatformType.eAndroid) {
      m_configuration.setAttribute(ConfigurationConstants.androidVersionAttribute,selVersion);
      m_ymlFile.setAndroidVer(selVersion);
      m_ymlFile.save();
    }
 else     if (type == PlatformType.eBb) {
      m_configuration.setAttribute(ConfigurationConstants.blackberryVersionAttribute,selVersion);
      m_ymlFile.setBbVer(selVersion);
      m_ymlFile.save();
      showBbEmuName();
    }
 else     if (type == PlatformType.eIPhone) {
      m_configuration.setAttribute(ConfigurationConstants.iphoneVersionAttribute,selVersion);
      m_ymlFile.setIphoneVer(selVersion);
      m_ymlFile.save();
    }
 else     if (type == PlatformType.eWm) {
      m_configuration.setAttribute(ConfigurationConstants.wmVersionAttribute,selVersion);
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"" + getSelectProject().getName());
    e.printStackTrace();
  }
}","void encodeVersionCombo(String selVersion){
  try {
    String selPlatform=m_configuration.getAttribute(ConfigurationConstants.platforrmCfgAttribute,""String_Node_Str"");
    PlatformType type=PlatformType.fromId(selPlatform);
    if (type == PlatformType.eAndroid) {
      m_configuration.setAttribute(ConfigurationConstants.androidVersionAttribute,selVersion);
      m_ymlFile.setAndroidVer(selVersion);
      m_ymlFile.save();
    }
 else     if (type == PlatformType.eBb) {
      m_configuration.setAttribute(ConfigurationConstants.blackberryVersionAttribute,selVersion);
      m_ymlFile.setBbVer(selVersion);
      m_ymlFile.save();
      showBbEmuName();
    }
 else     if (type == PlatformType.eIPhone) {
      m_configuration.setAttribute(ConfigurationConstants.iphoneVersionAttribute,selVersion);
      m_ymlFile.setIphoneVer(selVersion);
      m_ymlFile.save();
    }
 else     if (type == PlatformType.eWm) {
      m_configuration.setAttribute(ConfigurationConstants.wmVersionAttribute,selVersion);
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.9257191927866036
2723,"public void showBbEmuName(){
  try {
    String sdkPath=m_ymlFile.getSdkConfigPath();
    String bbVer=m_ymlFile.getBlackberryVer();
    SdkYmlFile sdkFile=new SdkYmlFile(sdkPath);
    if (sdkFile != null && sdkFile.getBbSimPort(bbVer) != null)     m_adroidEmuNameText.setText(sdkFile.getBbSimPort(bbVer));
 else     m_adroidEmuNameText.setText(""String_Node_Str"");
    m_androidEmuNameLabel.setText(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}","public void showBbEmuName(){
  try {
    String sdkPath=m_ymlFile.getSdkConfigPath();
    String bbVer=m_ymlFile.getBlackberryVer();
    SdkYmlFile sdkFile=new SdkYmlFile(sdkPath);
    if (sdkFile.getBbSimPort(bbVer) != null)     m_adroidEmuNameText.setText(sdkFile.getBbSimPort(bbVer));
 else     m_adroidEmuNameText.setText(""String_Node_Str"");
    m_androidEmuNameLabel.setText(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}",0.659729448491155
2724,"private void encodeEmuNameText(String emuName){
  if (m_configuration != null && m_ymlFile != null) {
    try {
      String selProjectPlatform=m_configuration.getAttribute(ConfigurationConstants.platforrmCfgAttribute,""String_Node_Str"");
      if (selProjectPlatform.equals(PlatformType.eAndroid.id)) {
        m_configuration.setAttribute(ConfigurationConstants.androidEmuNameAttribute,emuName);
        if (!emuName.equals(""String_Node_Str"")) {
          m_ymlFile.setAndroidEmuName(emuName);
        }
 else {
          if (emuName == null || !emuName.equals(""String_Node_Str"")) {
            m_ymlFile.removeAndroidEmuName();
          }
        }
        m_ymlFile.save();
        showApplyButton();
      }
 else       if (selProjectPlatform.equals(PlatformType.eBb.id)) {
        String sdkPath=m_ymlFile.getSdkConfigPath();
        String bbVer=m_ymlFile.getBlackberryVer();
        Integer simVer=new Integer(emuName);
        SdkYmlFile sdkFile=new SdkYmlFile(sdkPath);
        sdkFile.setBbSimPort(bbVer,simVer);
        sdkFile.save();
        showApplyButton();
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","private void encodeEmuNameText(String emuName){
  if (m_configuration != null && m_ymlFile != null) {
    try {
      String selProjectPlatform=m_configuration.getAttribute(ConfigurationConstants.platforrmCfgAttribute,""String_Node_Str"");
      if (selProjectPlatform.equals(PlatformType.eAndroid.id)) {
        m_configuration.setAttribute(ConfigurationConstants.androidEmuNameAttribute,emuName);
        if (!emuName.equals(""String_Node_Str"")) {
          m_ymlFile.setAndroidEmuName(emuName);
        }
 else {
          m_ymlFile.removeAndroidEmuName();
        }
        m_ymlFile.save();
        showApplyButton();
      }
 else       if (selProjectPlatform.equals(PlatformType.eBb.id)) {
        String sdkPath=m_ymlFile.getSdkConfigPath();
        String bbVer=m_ymlFile.getBlackberryVer();
        Integer simVer=new Integer(emuName);
        SdkYmlFile sdkFile=new SdkYmlFile(sdkPath);
        sdkFile.setBbSimPort(bbVer,simVer);
        sdkFile.save();
        showApplyButton();
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.9662027833001988
2725,"/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 * @see IWorkbenchWindowActionDelegate#run
 */
@Override public void run(IAction action){
  IProject project=ProjectFactory.getInstance().getSelectedProject();
  if (project == null) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!RhodesProject.checkNature(project) && !RhoelementsProject.checkNature(project)) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  IRhoHubSetting setting=RhoHubBundleSetting.createGetter(project);
  if (setting.getToken().isEmpty() || setting.getServerUrl().isEmpty()) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!checkProjectProperties(project)) {
    if (DialogUtils.confirm(""String_Node_Str"",""String_Node_Str"" + project.getName() + ""String_Node_Str"")) {
      LinkWizard linkWizard=new LinkWizard(project);
      if (createWizardDialog(linkWizard) == Window.CANCEL)       return;
    }
 else {
      return;
    }
  }
  BuildWizard buildWizard=new BuildWizard(project);
  createWizardDialog(buildWizard);
}","/** 
 * The action has been activated. The argument of the method represents the 'real' action sitting in the workbench UI.
 * @see IWorkbenchWindowActionDelegate#run
 */
@Override public void run(IAction action){
  IProject project=ProjectFactory.getInstance().getSelectedProject();
  if (project == null) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!RhodesProject.checkNature(project) && !RhoelementsProject.checkNature(project)) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  IRhoHubSetting setting=RhoHubBundleSetting.createGetter(project);
  if (setting.getToken().isEmpty() || setting.getServerUrl().isEmpty()) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!checkProjectProperties(project)) {
    if (DialogUtils.confirm(""String_Node_Str"",""String_Node_Str"" + project.getName() + ""String_Node_Str"")) {
      LinkWizard linkWizard=new LinkWizard(project);
      if (createWizardDialog(linkWizard) == Window.CANCEL)       return;
    }
 else {
      return;
    }
  }
  if (setting.isLinking()) {
    BuildWizard buildWizard=new BuildWizard(project);
    createWizardDialog(buildWizard);
  }
}",0.9844341607067733
2726,"private JSONArray getAppList() throws CoreException, JSONException, InterruptedException {
  if (rhohubConfiguration == null)   return null;
  AppListTask task=new AppListTask(rhohubConfiguration);
  task.runAndWaitJob(""String_Node_Str"");
  if (!task.isOk())   return null;
  return task.getOutputAsJSON();
}","private JSONArray getAppList() throws CoreException, JSONException, InterruptedException {
  if (rhohubConfiguration == null)   return null;
  AppListTask task=new AppListTask(rhohubConfiguration);
  task.run();
  String s=task.getError();
  if (!task.isOk())   return null;
  return task.getOutputAsJSON();
}",0.9270664505672608
2727,"private void initialize(){
  setDescription(""String_Node_Str"");
  try {
    JSONList<RemoteProjectDesc> remoteProjects=RhoHub.getInstance(m_setting).getProjectsList();
    if (remoteProjects.size() == 0) {
      DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
      this.getShell().close();
      return;
    }
 else {
      for (      RemoteProjectDesc project : remoteProjects) {
        TableItem item=new TableItem(m_remoteProjectsList,SWT.NONE);
        item.setText(nameColIdx,project.getName());
        item.setText(urlColIdx,project.getGitLink());
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","private void initialize(){
  setDescription(""String_Node_Str"");
  try {
    JSONList<RemoteProjectDesc> remoteProjects=RhoHub.getInstance(m_setting).getProjectsList();
    for (    RemoteProjectDesc project : remoteProjects) {
      TableItem item=new TableItem(m_remoteProjectsList,SWT.NONE);
      item.setText(nameColIdx,project.getName());
      item.setText(urlColIdx,project.getGitLink());
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.8124536693847294
2728,"/** 
 * @throws ProjectNotFoundExtension The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(IProgressMonitor monitor) throws CoreException, ProjectNotFoundException {
  try {
    monitor.beginTask(""String_Node_Str"",1);
    if (m_pageLink.isNewProject()) {
      RhoHub.getInstance(m_setting).createRemoteAppFromLocalSources(m_selectedProject,new GitCredentialsProvider());
    }
 else {
      if (DialogUtils.quetsion(""String_Node_Str"",""String_Node_Str"")) {
        RhoHub.getInstance(m_setting).updateRemoteAppFromLocalSources(m_selectedProject,m_pageLink.getSelectedProjectUrl(),new GitCredentialsProvider());
      }
 else {
        return;
      }
    }
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.schedule();
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * @throws ProjectNotFoundExtension The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(IProgressMonitor monitor) throws CoreException, ProjectNotFoundException {
  try {
    monitor.beginTask(""String_Node_Str"",1);
    if (m_pageLink.isNewProject()) {
      if (RhoHub.getInstance(m_setting).createRemoteAppFromLocalSources(m_selectedProject,new GitCredentialsProvider()) == null) {
        DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
        IRhoHubSettingSetter setter=(IRhoHubSettingSetter)m_setting;
        setter.unsetLinking();
        return;
      }
    }
 else {
      if (DialogUtils.quetsion(""String_Node_Str"",""String_Node_Str"")) {
        RhoHub.getInstance(m_setting).updateRemoteAppFromLocalSources(m_selectedProject,m_pageLink.getSelectedProjectUrl(),new GitCredentialsProvider());
      }
 else {
        return;
      }
    }
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.schedule();
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8839779005524862
2729,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      try {
        doFinish(monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      ProjectNotFoundException e) {
        e.printStackTrace();
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,true,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    Throwable realException=e.getTargetException();
    return false;
  }
  return true;
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      try {
        doFinish(monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      ProjectNotFoundException e) {
        e.printStackTrace();
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,true,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    return false;
  }
  return true;
}",0.967940813810111
2730,"@Override public boolean get(URIish arg0,CredentialItem... arg1) throws UnsupportedCredentialItem {
  InputDialog dlg=new InputDialog(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null){
    @Override protected int getInputTextStyle(){
      return SWT.SINGLE | SWT.BORDER;
    }
  }
;
  dlg.open();
  CredentialItem.StringType pwdCred=(CredentialItem.StringType)arg1[0];
  pwdCred.setValue(dlg.getValue());
  return true;
}","@Override public boolean get(URIish arg0,final CredentialItem... arg1) throws UnsupportedCredentialItem {
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        InputDialog dlg=new InputDialog(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null){
          @Override protected int getInputTextStyle(){
            return SWT.SINGLE | SWT.BORDER;
          }
        }
;
        dlg.open();
        CredentialItem.StringType pwdCred=(CredentialItem.StringType)arg1[0];
        pwdCred.setValue(dlg.getValue());
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
);
  return true;
}",0.7632933104631218
2731,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  try {
    updateStatus(""String_Node_Str"");
    m_remotePlatforms=m_getPlatfomListFuture.get(waitTimeOutRhoHubServer,TimeUnit.MINUTES);
    initializePlatformsCombo();
    m_remoteProjectBuilds=m_getProjectBuildsFuture.get(waitTimeOutRhoHubServer,TimeUnit.MINUTES);
    initializeProjectBuildsTable();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  ExecutionException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  TimeoutException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  JSONException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  MalformedURLException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
  enableControls(true);
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  try {
    updateStatus(""String_Node_Str"");
    m_remotePlatforms=m_getPlatfomListFuture.get(waitTimeOutRhoHubServer,TimeUnit.MINUTES);
    initializePlatformsCombo();
    m_remoteProjectBuilds=m_getProjectBuildsFuture.get(waitTimeOutRhoHubServer,TimeUnit.MINUTES);
    initializeProjectBuildsTable();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return;
  }
catch (  ExecutionException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    return;
  }
catch (  TimeoutException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    return;
  }
catch (  JSONException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    return;
  }
catch (  MalformedURLException e) {
    DialogUtils.error(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  enableControls(true);
}",0.9697275479313824
2732,"void enableControls(boolean enable){
  m_comboPlatforms.setEnabled(enable);
  m_comboPlatformVersions.setEnabled(enable);
  m_textAppBranch.setEnabled(enable);
  m_textRhodesBranch.setEnabled(enable);
  m_remoteBuildsList.setEnabled(enable);
}","void enableControls(boolean enable){
  m_comboPlatforms.setEnabled(enable);
  m_comboPlatformVersions.setEnabled(enable);
  m_textAppBranch.setEnabled(enable);
  m_textRhodesBranch.setEnabled(enable);
  m_remoteBuildsList.setEnabled(enable);
  m_comboPlatforms.setEnabled(enable);
  m_comboPlatformVersions.setEnabled(enable);
}",0.851138353765324
2733,"public void createAppSettingBarControls(Composite composite){
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=9;
  composite.setLayout(layout);
  GridData tableAligment=new GridData(SWT.FILL,SWT.FILL,true,true);
  tableAligment.heightHint=200;
  GridData checkBoxAligment=new GridData();
  checkBoxAligment.horizontalAlignment=GridData.FILL;
  checkBoxAligment.horizontalSpan=3;
  m_newAppCheckBox=new Button(composite,SWT.CHECK);
  m_newAppCheckBox.setText(""String_Node_Str"");
  m_newAppCheckBox.setSelection(m_isNewProject);
  m_newAppCheckBox.setLayoutData(checkBoxAligment);
  m_newAppCheckBox.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialogChanged();
    }
  }
);
  Label label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  m_remoteProjectsList=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  m_remoteProjectsList.setLayoutData(tableAligment);
  m_remoteProjectsList.setEnabled(true);
  m_remoteProjectsList.setHeaderVisible(true);
  m_remoteProjectsList.setLinesVisible(true);
  TableColumn colName=new TableColumn(m_remoteProjectsList,SWT.LEFT);
  colName.setText(""String_Node_Str"");
  colName.setWidth(350);
  TableColumn colUrl=new TableColumn(m_remoteProjectsList,SWT.LEFT);
  colUrl.setText(""String_Node_Str"");
  colUrl.setWidth(400);
}","public void createAppSettingBarControls(Composite composite){
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=9;
  composite.setLayout(layout);
  GridData tableAligment=new GridData(SWT.FILL,SWT.FILL,true,true);
  tableAligment.heightHint=200;
  GridData checkBoxAligment=new GridData();
  checkBoxAligment.horizontalAlignment=GridData.FILL;
  checkBoxAligment.horizontalSpan=3;
  m_newAppCheckBox=new Button(composite,SWT.CHECK);
  m_newAppCheckBox.setText(""String_Node_Str"");
  m_newAppCheckBox.setSelection(m_isNewProject);
  m_newAppCheckBox.setLayoutData(checkBoxAligment);
  m_newAppCheckBox.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialogChanged();
    }
  }
);
  Label label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  m_remoteProjectsList=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  m_remoteProjectsList.setLayoutData(tableAligment);
  m_remoteProjectsList.setEnabled(true);
  m_remoteProjectsList.setHeaderVisible(true);
  m_remoteProjectsList.setLinesVisible(true);
  m_remoteProjectsList.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialogChanged();
    }
  }
);
  TableColumn colName=new TableColumn(m_remoteProjectsList,SWT.LEFT);
  colName.setText(""String_Node_Str"");
  colName.setWidth(350);
  TableColumn colUrl=new TableColumn(m_remoteProjectsList,SWT.LEFT);
  colUrl.setText(""String_Node_Str"");
  colUrl.setWidth(400);
}",0.945704467353952
2734,"/** 
 * Ensures that both text fields are set.
 */
private void dialogChanged(){
  m_remoteProjectsList.setEnabled(!m_newAppCheckBox.getSelection());
  m_isNewProject=m_newAppCheckBox.getSelection();
  updateStatus(""String_Node_Str"");
  updateStatus(null);
}","/** 
 * Ensures that both text fields are set.
 */
private void dialogChanged(){
  m_remoteProjectsList.setEnabled(!m_newAppCheckBox.getSelection());
  if (m_remoteProjectsList.getColumnCount() == 0 || m_remoteProjectsList.getItemCount() == 0 || m_remoteProjectsList.getSelection().length == 0)   return;
  TableItem[] selItem=m_remoteProjectsList.getSelection();
  m_isNewProject=m_newAppCheckBox.getSelection();
  m_selectedUrl=selItem[0].getText(urlColIdx);
  updateStatus(""String_Node_Str"");
  updateStatus(null);
}",0.6640926640926641
2735,"public String getSelectedProjectUrl(){
  return m_remoteProjectsList.getSelection()[urlColIdx].toString();
}","public String getSelectedProjectUrl(){
  return m_selectedUrl;
}",0.7093023255813954
2736,"/** 
 * @throws ProjectNotFoundExtension The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(IProgressMonitor monitor) throws CoreException, ProjectNotFoundException {
  try {
    monitor.beginTask(""String_Node_Str"",1);
    if (m_pageLink.isNewProject()) {
      RhoHub.getInstance(m_setting).createRemoteAppFromLocalSources(m_selectedProject,new GitCredentialsProvider());
    }
 else {
      if (DialogUtils.quetsion(""String_Node_Str"",""String_Node_Str"")) {
        RhoHub.getInstance(m_setting).updateRemoteAppFromLocalSources(m_selectedProject,m_pageLink.getSelectedProjectUrl(),new GitCredentialsProvider());
      }
    }
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.schedule();
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * @throws ProjectNotFoundExtension The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(IProgressMonitor monitor) throws CoreException, ProjectNotFoundException {
  try {
    monitor.beginTask(""String_Node_Str"",1);
    if (m_pageLink.isNewProject()) {
      RhoHub.getInstance(m_setting).createRemoteAppFromLocalSources(m_selectedProject,new GitCredentialsProvider());
    }
 else {
      if (DialogUtils.quetsion(""String_Node_Str"",""String_Node_Str"")) {
        RhoHub.getInstance(m_setting).updateRemoteAppFromLocalSources(m_selectedProject,m_pageLink.getSelectedProjectUrl(),new GitCredentialsProvider());
      }
 else {
        return;
      }
    }
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.schedule();
    monitor.done();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9834881320949432
2737,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      try {
        doFinish(monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      ProjectNotFoundException e) {
        e.printStackTrace();
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,true,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    Throwable realException=e.getTargetException();
    MessageDialog.openError(getShell(),""String_Node_Str"",realException.getMessage());
    return false;
  }
  return true;
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException {
      try {
        doFinish(monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      ProjectNotFoundException e) {
        e.printStackTrace();
      }
 finally {
        monitor.done();
      }
    }
  }
;
  try {
    getContainer().run(true,true,op);
  }
 catch (  InterruptedException e) {
    return false;
  }
catch (  InvocationTargetException e) {
    Throwable realException=e.getTargetException();
    return false;
  }
  return true;
}",0.9511363636363636
2738,"public int runCommand(List<String> commandLine) throws IOException, InterruptedException {
  if (m_cmdOutput != null) {
    m_cmdOutput.delete(0,m_cmdOutput.length());
  }
  Process process=runCommandHelper(decorateCommandLine(commandLine));
  process.getOutputStream().close();
  startOutputAndErrorReadThreads(process.getInputStream(),process.getErrorStream());
  try {
    return process.waitFor();
  }
  finally {
    notifyOutputAndErrorReadThreadsToStopReading();
  }
}","public int runCommand(List<String> commandLine) throws IOException, InterruptedException {
  Process process=startCommand(commandLine);
  try {
    return process.waitFor();
  }
  finally {
    notifyOutputAndErrorReadThreadsToStopReading();
  }
}",0.6232686980609419
2739,"@Override protected void exec(){
  m_console.show();
  m_console.getStream().print(showCommand());
  String[] commandLine=m_cmdLine.toArray(new String[0]);
  Process process;
  try {
    process=DebugPlugin.exec(commandLine,new File(m_workDir));
  }
 catch (  CoreException e) {
    return;
  }
  m_debugProcess=DebugPlugin.newProcess(m_launch,process,m_appName);
  if (m_debugProcess != null) {
    attachConsole(m_debugProcess,m_console);
  }
}","@Override protected void exec(){
  m_console.show();
  m_console.getStream().print(showCommand());
  SysCommandExecutor executor=new SysCommandExecutor();
  executor.setOutputLogDevice(getLogDevice(m_console.getOutputStream()));
  executor.setErrorLogDevice(getLogDevice(m_console.getErrorStream()));
  executor.setWorkingDirectory(m_workDir);
  Process process;
  try {
    process=executor.startCommand(m_cmdLine);
  }
 catch (  IOException e) {
    Activator.logError(e);
    return;
  }
  m_debugProcess=DebugPlugin.newProcess(m_launch,process,m_appName);
  if (m_debugProcess != null) {
    attachConsole(m_debugProcess,m_console);
  }
}",0.4705882352941176
2740,"public RubyCodeExecTask(String... codeLines){
  super(null,""String_Node_Str"",getArgs(codeLines));
  disableConsole();
}","public RubyCodeExecTask(String... codeLines){
  super(""String_Node_Str"",""String_Node_Str"",getArgs(codeLines));
  disableConsole();
}",0.9243027888446216
2741,"private static String[] getArgs(String[] codeLines){
  List<String> args=new ArrayList<String>();
  for (  String codeLine : codeLines) {
    args.add(""String_Node_Str"");
    args.add(codeLine);
  }
  return args.toArray(new String[0]);
}","private static String[] getArgs(String[] codeLines){
  List<String> args=new ArrayList<String>();
  for (  String codeLine : codeLines) {
    codeLine=codeLine.replaceAll(""String_Node_Str"",""String_Node_Str"");
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"" + codeLine + ""String_Node_Str"");
  }
  return args.toArray(new String[0]);
}",0.7563884156729132
2742,"@Test public void testRunDebugRhodesAppTask() throws Throwable {
  String appName=""String_Node_Str"";
  String projectLocation=OSHelper.concat(workspaceFolder,appName).getPath();
  String signature1=OSValidator.isWindows() ? ""String_Node_Str"" + unixSlashes(projectLocation) + ""String_Node_Str"" : ""String_Node_Str"" + projectLocation;
  String signature2=OSValidator.isWindows() ? ""String_Node_Str"" : ""String_Node_Str"";
  ProcessListViewer rhosimViewer=new ProcessListViewer(signature1);
  ProcessListViewer rakeViewer=new ProcessListViewer(signature2);
  try {
{
      RunTask task=new GenerateRhodesAppTask(workspaceFolder,appName);
      task.run();
      assertEquals(0,TaskResultConverter.getResultIntCode(task.getResult()));
    }
{
      String text[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String appRb=OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath();
      writeTextFile(appRb,join(""String_Node_Str"",text));
    }
    DebugCallback debugCallback=new DebugCallback(m_eventQueue,m_semaphore);
    final DebugServer debugServer=new DebugServer(debugCallback);
    final Throwable[] exception=new Throwable[1];
    Thread debugServerThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          debugServer.run();
        }
 catch (        Throwable t) {
          exception[0]=t;
        }
      }
    }
);
    debugServerThread.start();
{
      Map<String,Object> params=new HashMap<String,Object>();
      ILaunch launch=new Launch(null,ILaunchManager.DEBUG_MODE,null);
      params.put(RunDebugRhodesAppTask.workDir,projectLocation);
      params.put(RunDebugRhodesAppTask.appName,appName);
      params.put(RunDebugRhodesAppTask.platformType,PlatformType.eAndroid);
      params.put(RunDebugRhodesAppTask.reloadCode,false);
      params.put(RunDebugRhodesAppTask.launchObj,launch);
      params.put(RunDebugRhodesAppTask.traceFlag,false);
      Map<String,?> results=RhoTaskHolder.getInstance().runTask(RunDebugRhodesAppTask.class,params);
      assertEquals(TaskResultConverter.okCode,TaskResultConverter.getResultIntCode(results));
    }
    suspend(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",5);
    debugServer.debugBreakpoint(""String_Node_Str"",6);
    debugServer.debugRemoveBreakpoint(""String_Node_Str"",5);
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + unixSlashes(prependPrivate(OSHelper.concat(projectLocation,""String_Node_Str"").getPath())) + ""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",7);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugStepOver();
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",12);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",13);
    debugServer.debugRemoveAllBreakpoints();
    debugServer.debugStepReturn();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"" + prependPrivate(unixSlashes(OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath())) + ""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugTerminate();
    pass(""String_Node_Str"");
    debugServer.shutdown();
    resume();
    debugServerThread.join();
    if (exception[0] != null) {
      throw exception[0];
    }
  }
  finally {
    OSHelper.killProcesses(rhosimViewer.getNewProcesses());
    OSHelper.killProcesses(rakeViewer.getNewProcesses());
  }
}","@Test public void testRunDebugRhodesAppTask() throws Throwable {
  String appName=""String_Node_Str"";
  String projectLocation=OSHelper.concat(workspaceFolder,appName).getPath();
  String signature1=OSValidator.isWindows() ? ""String_Node_Str"" + unixSlashes(projectLocation) + ""String_Node_Str"" : ""String_Node_Str"" + projectLocation;
  String signature2=OSValidator.isWindows() ? ""String_Node_Str"" : ""String_Node_Str"";
  ProcessListViewer rhosimViewer=new ProcessListViewer(signature1);
  ProcessListViewer rakeViewer=new ProcessListViewer(signature2);
  try {
{
      RunTask task=new GenerateRhodesAppTask(workspaceFolder,appName);
      task.run();
      assertEquals(0,TaskResultConverter.getResultIntCode(task.getResult()));
    }
{
      String text[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String appRb=OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath();
      writeTextFile(appRb,join(""String_Node_Str"",text));
    }
    DebugCallback debugCallback=new DebugCallback(m_eventQueue,m_semaphore);
    final DebugServer debugServer=new DebugServer(debugCallback);
    final Throwable[] exception=new Throwable[1];
    Thread debugServerThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          debugServer.run();
        }
 catch (        Throwable t) {
          exception[0]=t;
        }
      }
    }
);
    debugServerThread.start();
{
      Map<String,Object> params=new HashMap<String,Object>();
      ILaunch launch=new Launch(null,ILaunchManager.DEBUG_MODE,null);
      RunTask task=new RunDebugRhodesAppTask(projectLocation,appName,PlatformType.eAndroid,false,launch,false);
      task.run();
      assertEquals(TaskResultConverter.okCode,TaskResultConverter.getResultIntCode(task.getResult()));
    }
    suspend(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",5);
    debugServer.debugBreakpoint(""String_Node_Str"",6);
    debugServer.debugRemoveBreakpoint(""String_Node_Str"",5);
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + unixSlashes(prependPrivate(OSHelper.concat(projectLocation,""String_Node_Str"").getPath())) + ""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",7);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugStepOver();
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",12);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",13);
    debugServer.debugRemoveAllBreakpoints();
    debugServer.debugStepReturn();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"" + prependPrivate(unixSlashes(OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath())) + ""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugTerminate();
    pass(""String_Node_Str"");
    debugServer.shutdown();
    resume();
    debugServerThread.join();
    if (exception[0] != null) {
      throw exception[0];
    }
  }
  finally {
    OSHelper.killProcesses(rhosimViewer.getNewProcesses());
    OSHelper.killProcesses(rakeViewer.getNewProcesses());
  }
}",0.9393753827311696
2743,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout();
  container.setLayout(layout);
  layout.numColumns=1;
  layout.verticalSpacing=9;
  Label label=new Label(container,SWT.NULL);
  label.setText(m_errorText);
  setControl(container);
  getShell().setSize(ZeroPage.zeroPageWidth,ZeroPage.zeroPageHeight);
  setErrorMessage(""String_Node_Str"");
  setPageComplete(true);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout();
  container.setLayout(layout);
  layout.numColumns=1;
  layout.verticalSpacing=9;
  Label label=new Label(container,SWT.NULL);
  label.setText(m_errorText);
  setControl(container);
  getShell().setSize(ZeroPage.zeroPageWidth,ZeroPage.zeroPageHeight);
  setErrorMessage(null);
  setPageComplete(true);
}",0.9764837625979844
2744,"@Override public String getResName(){
  return calcResName(getBp().getResourcePath().toOSString(),""String_Node_Str"");
}","@Override public String getResName(){
  final String token=""String_Node_Str"";
  return token + calcResName(getBp().getResourcePath().toOSString(),token);
}",0.7591240875912408
2745,"public String calcResName(String resName,String token){
  resName=resName.replace('\\','/');
  String[] segments=resName.split(token);
  if (segments.length > 1)   return segments[1];
  return segments[0];
}","public String calcResName(String resName,String token){
  resName=resName.replace('\\','/');
  String[] segments=resName.split(token);
  if (segments.length > 1)   return segments[1];
 else   return null;
}",0.910411622276029
2746,"@Test public void testRunDebugRhodesAppTask() throws Throwable {
  String appName=""String_Node_Str"";
  String projectLocation=OSHelper.concat(workspaceFolder,appName).getPath();
  String signature1=(OSValidator.isWindows()) ? ""String_Node_Str"" + unixSlashes(projectLocation) + ""String_Node_Str"" : ""String_Node_Str"" + projectLocation;
  String signature2=(OSValidator.isWindows()) ? ""String_Node_Str"" : ""String_Node_Str"";
  Set<Integer> before1=getProcessesIds(signature1);
  Set<Integer> before2=getProcessesIds(signature2);
  try {
{
      Map<String,Object> params=new HashMap<String,Object>();
      params.put(GenerateRhodesAppTask.appName,appName);
      params.put(GenerateRhodesAppTask.workDir,workspaceFolder);
      Map<String,?> results=RhoTaskHolder.getInstance().runTask(GenerateRhodesAppTask.class,params);
      assertEquals(0,TaskResultConverter.getResultIntCode(results));
    }
{
      String text[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String appRb=OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath();
      writeTextFile(appRb,join(""String_Node_Str"",text));
    }
    DebugCallback debugCallback=new DebugCallback(m_eventQueue,m_semaphore);
    final DebugServer debugServer=new DebugServer(debugCallback);
    final Throwable[] exception=new Throwable[1];
    Thread debugServerThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          debugServer.run();
        }
 catch (        Throwable t) {
          exception[0]=t;
        }
      }
    }
);
    debugServerThread.start();
{
      Map<String,Object> params=new HashMap<String,Object>();
      ILaunch launch=new Launch(null,ILaunchManager.DEBUG_MODE,null);
      params.put(RunDebugRhodesAppTask.workDir,projectLocation);
      params.put(RunDebugRhodesAppTask.appName,appName);
      params.put(RunDebugRhodesAppTask.platformType,PlatformType.eAndroid);
      params.put(RunDebugRhodesAppTask.reloadCode,false);
      params.put(RunDebugRhodesAppTask.launchObj,launch);
      params.put(RunDebugRhodesAppTask.traceFlag,false);
      Map<String,?> results=RhoTaskHolder.getInstance().runTask(RunDebugRhodesAppTask.class,params);
      assertEquals(TaskResultConverter.okCode,TaskResultConverter.getResultIntCode(results));
    }
    suspend(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",5);
    debugServer.debugBreakpoint(""String_Node_Str"",6);
    debugServer.debugRemoveBreakpoint(""String_Node_Str"",5);
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + unixSlashes(prependPrivate(OSHelper.concat(projectLocation,""String_Node_Str"").getPath())) + ""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",7);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugStepOver();
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",12);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",13);
    debugServer.debugRemoveAllBreakpoints();
    debugServer.debugStepReturn();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"" + prependPrivate(unixSlashes(OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath())) + ""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugTerminate();
    pass(""String_Node_Str"");
    debugServer.shutdown();
    resume();
    debugServerThread.join();
    if (exception[0] != null) {
      throw exception[0];
    }
  }
  finally {
    Set<Integer> after1=getProcessesIds(signature1);
    Set<Integer> after2=getProcessesIds(signature2);
    Set<Integer> diff1=new HashSet<Integer>(after1);
    diff1.removeAll(before1);
    for (    int pid : diff1) {
      OSHelper.killProcess(pid);
    }
    Set<Integer> diff2=new HashSet<Integer>(after2);
    diff2.removeAll(before2);
    for (    int pid : diff2) {
      OSHelper.killProcess(pid);
    }
  }
}","@Test public void testRunDebugRhodesAppTask() throws Throwable {
  String appName=""String_Node_Str"";
  String projectLocation=OSHelper.concat(workspaceFolder,appName).getPath();
  String signature1=OSValidator.isWindows() ? ""String_Node_Str"" + unixSlashes(projectLocation) + ""String_Node_Str"" : ""String_Node_Str"" + projectLocation;
  String signature2=OSValidator.isWindows() ? ""String_Node_Str"" : ""String_Node_Str"";
  Set<Integer> before1=getProcessesIds(signature1);
  Set<Integer> before2=getProcessesIds(signature2);
  try {
{
      Map<String,Object> params=new HashMap<String,Object>();
      params.put(GenerateRhodesAppTask.appName,appName);
      params.put(GenerateRhodesAppTask.workDir,workspaceFolder);
      Map<String,?> results=RhoTaskHolder.getInstance().runTask(GenerateRhodesAppTask.class,params);
      assertEquals(0,TaskResultConverter.getResultIntCode(results));
    }
{
      String text[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String appRb=OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath();
      writeTextFile(appRb,join(""String_Node_Str"",text));
    }
    DebugCallback debugCallback=new DebugCallback(m_eventQueue,m_semaphore);
    final DebugServer debugServer=new DebugServer(debugCallback);
    final Throwable[] exception=new Throwable[1];
    Thread debugServerThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          debugServer.run();
        }
 catch (        Throwable t) {
          exception[0]=t;
        }
      }
    }
);
    debugServerThread.start();
{
      Map<String,Object> params=new HashMap<String,Object>();
      ILaunch launch=new Launch(null,ILaunchManager.DEBUG_MODE,null);
      params.put(RunDebugRhodesAppTask.workDir,projectLocation);
      params.put(RunDebugRhodesAppTask.appName,appName);
      params.put(RunDebugRhodesAppTask.platformType,PlatformType.eAndroid);
      params.put(RunDebugRhodesAppTask.reloadCode,false);
      params.put(RunDebugRhodesAppTask.launchObj,launch);
      params.put(RunDebugRhodesAppTask.traceFlag,false);
      Map<String,?> results=RhoTaskHolder.getInstance().runTask(RunDebugRhodesAppTask.class,params);
      assertEquals(TaskResultConverter.okCode,TaskResultConverter.getResultIntCode(results));
    }
    suspend(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",5);
    debugServer.debugBreakpoint(""String_Node_Str"",6);
    debugServer.debugRemoveBreakpoint(""String_Node_Str"",5);
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + unixSlashes(prependPrivate(OSHelper.concat(projectLocation,""String_Node_Str"").getPath())) + ""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",7);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugStepOver();
    pass(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",12);
    debugServer.debugResume();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugBreakpoint(""String_Node_Str"",13);
    debugServer.debugRemoveAllBreakpoints();
    debugServer.debugStepReturn();
    pass(""String_Node_Str"",""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"" + prependPrivate(unixSlashes(OSHelper.concat(projectLocation,""String_Node_Str"",""String_Node_Str"").getPath())) + ""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugEvaluate(""String_Node_Str"");
    pass(""String_Node_Str"");
    debugServer.debugTerminate();
    pass(""String_Node_Str"");
    debugServer.shutdown();
    resume();
    debugServerThread.join();
    if (exception[0] != null) {
      throw exception[0];
    }
  }
  finally {
    Set<Integer> after1=getProcessesIds(signature1);
    Set<Integer> after2=getProcessesIds(signature2);
    Set<Integer> diff1=new HashSet<Integer>(after1);
    diff1.removeAll(before1);
    for (    int pid : diff1) {
      OSHelper.killProcess(pid);
    }
    Set<Integer> diff2=new HashSet<Integer>(after2);
    diff2.removeAll(before2);
    for (    int pid : diff2) {
      OSHelper.killProcess(pid);
    }
  }
}",0.9995748299319728
2747,"public static File concat(String... paths){
  File file=new File(""String_Node_Str"");
  for (int i=0; i < paths.length; i++) {
    file=new File(file,paths[i]);
  }
  return file;
}","public static File concat(String... paths){
  File file=new File((paths.length <= 0) ? ""String_Node_Str"" : paths[0]);
  for (int i=1; i < paths.length; i++) {
    file=new File(file,paths[i]);
  }
  return file;
}",0.910941475826972
2748,"private void notifyOutputAndErrorReadThreadsToStopReading() throws InterruptedException {
  m_cmdOutputThread.stopReading();
  m_cmdErrorThread.stopReading();
}","private void notifyOutputAndErrorReadThreadsToStopReading() throws InterruptedException {
  m_cmdOutputThread.join(1000);
  if (m_cmdOutputThread.isAlive()) {
    m_cmdOutputThread.stopReading();
  }
  m_cmdErrorThread.join(1000);
  if (m_cmdErrorThread.isAlive()) {
    m_cmdErrorThread.stopReading();
  }
}",0.6837606837606838
2749,"private void notifyOutputAndErrorReadThreadsToStopReading(){
  m_cmdOutputThread.stopReading();
  m_cmdErrorThread.stopReading();
}","private void notifyOutputAndErrorReadThreadsToStopReading() throws InterruptedException {
  m_cmdOutputThread.join();
  m_cmdErrorThread.join();
}",0.8303249097472925
2750,"private void readFile() throws IOException, InterruptedException {
  BufferedReader bufOut=new BufferedReader(new InputStreamReader(m_inputStream));
  String line=null;
  while (m_stopFlag == false) {
    if (bufOut.ready()) {
      line=bufOut.readLine();
      m_buffer.append(line + fNewLine);
      printToDisplayDevice(line);
    }
 else {
      int timeCounter=0;
      while (timeCounter < maxWaitingTimeForReadFile) {
        Thread.sleep(waitingTimePortion);
        timeCounter+=waitingTimePortion;
      }
    }
  }
  bufOut.close();
  printToConsole(""String_Node_Str"" + m_threadId);
}","private void readFile() throws IOException, InterruptedException {
  BufferedReader bufOut=new BufferedReader(new InputStreamReader(m_inputStream));
  String line=null;
  while (m_stopFlag == false) {
    if (bufOut.ready()) {
      line=bufOut.readLine();
      m_buffer.append(line + fNewLine);
      printToDisplayDevice(line);
    }
 else {
      int timeCounter=0;
      while (timeCounter < maxWaitingTimeForReadFile) {
        Thread.sleep(waitingTimePortion);
        timeCounter+=waitingTimePortion;
        if (m_stopFlag)         break;
      }
    }
  }
  bufOut.close();
  printToConsole(""String_Node_Str"" + m_threadId);
}",0.9683184402924452
2751,"public Map<String,?> runTask(Class<?> id,Map<String,Object> params){
  IRunTask task=m_holdTasks.get(id);
  if (task != null) {
    task.setData(params);
    task.run();
    return task.getResult();
  }
  throw new IndexOutOfBoundsException();
}","public Map<String,?> runTask(Class<? extends IRunTask> id,Map<String,Object> params){
  IRunTask task=m_holdTasks.get(id);
  if (task != null) {
    task.setData(params);
    task.run();
    return task.getResult();
  }
  throw new IndexOutOfBoundsException();
}",0.9664694280078896
2752,"public RhoTaskHolder(){
  m_holdTasks=new HashMap<Class<?>,IRunTask>();
  m_holdTasks.put(GenerateRhodesAppTask.class,new GenerateRhodesAppTask());
  m_holdTasks.put(GenerateRhodesModelTask.class,new GenerateRhodesModelTask());
  m_holdTasks.put(RunReleaseRhodesAppTask.class,new RunReleaseRhodesAppTask());
  m_holdTasks.put(RunDebugRhodesAppTask.class,new RunDebugRhodesAppTask());
  m_holdTasks.put(GenerateRhoconnectAppTask.class,new GenerateRhoconnectAppTask());
  m_holdTasks.put(GenerateRhoconnectAdapterTask.class,new GenerateRhoconnectAdapterTask());
  m_holdTasks.put(RunDebugRhoconnectAppTask.class,new RunDebugRhoconnectAppTask());
  m_holdTasks.put(RunReleaseRhoconnectAppTask.class,new RunReleaseRhoconnectAppTask());
  m_holdTasks.put(CleanPlatformTask.class,new CleanPlatformTask());
  m_holdTasks.put(CleanAllPlatfromTask.class,new CleanAllPlatfromTask());
  m_holdTasks.put(CompileRubyPartTask.class,new CompileRubyPartTask());
  m_holdTasks.put(BuildPlatformTask.class,new BuildPlatformTask());
  m_holdTasks.put(GenerateRhodesSpecTask.class,new GenerateRhodesSpecTask());
  m_holdTasks.put(GenerateRhodesExtensionTask.class,new GenerateRhodesExtensionTask());
}","public RhoTaskHolder(){
  m_holdTasks=new HashMap<Class<? extends IRunTask>,IRunTask>();
  m_holdTasks.put(GenerateRhodesAppTask.class,new GenerateRhodesAppTask());
  m_holdTasks.put(GenerateRhodesModelTask.class,new GenerateRhodesModelTask());
  m_holdTasks.put(RunReleaseRhodesAppTask.class,new RunReleaseRhodesAppTask());
  m_holdTasks.put(RunDebugRhodesAppTask.class,new RunDebugRhodesAppTask());
  m_holdTasks.put(GenerateRhoconnectAppTask.class,new GenerateRhoconnectAppTask());
  m_holdTasks.put(GenerateRhoconnectAdapterTask.class,new GenerateRhoconnectAdapterTask());
  m_holdTasks.put(RunDebugRhoconnectAppTask.class,new RunDebugRhoconnectAppTask());
  m_holdTasks.put(RunReleaseRhoconnectAppTask.class,new RunReleaseRhoconnectAppTask());
  m_holdTasks.put(CleanPlatformTask.class,new CleanPlatformTask());
  m_holdTasks.put(CleanAllPlatfromTask.class,new CleanAllPlatfromTask());
  m_holdTasks.put(CompileRubyPartTask.class,new CompileRubyPartTask());
  m_holdTasks.put(BuildPlatformTask.class,new BuildPlatformTask());
  m_holdTasks.put(GenerateRhodesSpecTask.class,new GenerateRhodesSpecTask());
  m_holdTasks.put(GenerateRhodesExtensionTask.class,new GenerateRhodesExtensionTask());
}",0.992854140395124
2753,"/** 
 * Just do the basics: create a basic project.
 * @param location
 * @param projectName
 * @throws AlredyCreatedException 
 * @throws CoreException 
 */
private IProject createBaseProject(BuildInfoHolder projectInfo) throws AlredyCreatedException, CoreException {
  IProject newProject=ResourcesPlugin.getWorkspace().getRoot().getProject(projectInfo.appName);
  if (!newProject.exists()) {
    URI projectLocation=projectInfo.getProjectLocation();
    String path=URIUtil.toPath(projectLocation).toOSString();
    if (!projectInfo.existCreate) {
      path=path + File.separatorChar + projectInfo.appName;
    }
    IProjectDescription desc=newProject.getWorkspace().newProjectDescription(newProject.getName());
    if (isProjectLocationInWorkspace(path))     projectInfo.isInDefaultWs=true;
    if (!projectInfo.isInDefaultWs) {
      desc.setLocationURI(URIUtil.toURI(path));
    }
    newProject.create(desc,null);
    if (!newProject.isOpen()) {
      newProject.open(null);
    }
  }
 else {
    throw new AlredyCreatedException(newProject);
  }
  return newProject;
}","/** 
 * Just do the basics: create a basic project.
 * @param location
 * @param projectName
 * @throws AlredyCreatedException 
 * @throws CoreException 
 */
private IProject createBaseProject(BuildInfoHolder projectInfo) throws AlredyCreatedException, CoreException {
  IProject newProject=ResourcesPlugin.getWorkspace().getRoot().getProject(projectInfo.appName);
  if (!newProject.exists()) {
    URI projectLocation=projectInfo.getProjectLocation();
    String path=URIUtil.toPath(projectLocation).toOSString();
    if (!projectInfo.existCreate) {
      path=path + File.separatorChar + projectInfo.appName;
    }
    IProjectDescription desc=newProject.getWorkspace().newProjectDescription(newProject.getName());
    if (isProjectLocationInWorkspace(path))     projectInfo.isInDefaultWs=true;
    if (!projectInfo.isInDefaultWs) {
      desc.setLocation(new Path(path));
    }
    newProject.create(desc,new NullProgressMonitor());
    if (!newProject.isOpen()) {
      newProject.open(new NullProgressMonitor());
    }
  }
 else {
    throw new AlredyCreatedException(newProject);
  }
  return newProject;
}",0.9689497716894976
2754,"public boolean isProjectLocationInWorkspace(final String projectPath){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=workspace.getRoot();
  String wsPath=root.getLocation().toOSString();
  return projectPath.contains(wsPath);
}","public boolean isProjectLocationInWorkspace(final String projectPath){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=workspace.getRoot();
  String wsPath=root.getLocation().toOSString();
  return projectPath.toLowerCase().equals(wsPath.toLowerCase());
}",0.8966789667896679
2755,"public void stopSyncApp() throws Exception {
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  String prevRunningRhoconnectApp=store.getString(ConfigurationConstants.lastSyncRunApp);
  if (prevRunningRhoconnectApp == null || prevRunningRhoconnectApp.length() == 0)   return;
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(prevRunningRhoconnectApp);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
  sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(prevRunningRhoconnectApp);
  cmdLine.clear();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
}","public void stopSyncApp() throws Exception {
  if (Activator.getDefault() == null)   return;
  IPreferenceStore store=Activator.getDefault().getPreferenceStore();
  if (store == null)   return;
  String prevRunningRhoconnectApp=store.getString(ConfigurationConstants.lastSyncRunApp);
  if (prevRunningRhoconnectApp == null || prevRunningRhoconnectApp.length() == 0)   return;
  File appFolder=new File(prevRunningRhoconnectApp);
  if (!appFolder.exists())   return;
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(prevRunningRhoconnectApp);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
  sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(prevRunningRhoconnectApp);
  cmdLine.clear();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
}",0.9039226833428085
2756,"public void configure() throws CoreException {
  IProjectDescription desc=project.getDescription();
  ICommand[] commands=desc.getBuildSpec();
  for (int i=0; i < commands.length; ++i) {
    if (commands[i].getBuilderName().equals(Builder.BUILDER_ID)) {
      return;
    }
  }
  ICommand[] newCommands=new ICommand[commands.length + 1];
  System.arraycopy(commands,0,newCommands,0,commands.length);
  ICommand command=desc.newCommand();
  command.setBuilderName(Builder.BUILDER_ID);
  newCommands[newCommands.length - 1]=command;
  desc.setBuildSpec(newCommands);
  project.setDescription(desc,null);
}","public void configure() throws CoreException {
  IProjectDescription desc=project.getDescription();
  ICommand[] commands=desc.getBuildSpec();
  for (int i=0; i < commands.length; ++i) {
    if (commands[i].getBuilderName().equals(Builder.BUILDER_ID)) {
      return;
    }
  }
  ICommand[] newCommands=new ICommand[commands.length + 1];
  System.arraycopy(commands,0,newCommands,0,commands.length);
  ICommand command=desc.newCommand();
  command.setBuilderName(Builder.BUILDER_ID);
  command.setBuilding(IncrementalProjectBuilder.CLEAN_BUILD,true);
  command.setBuilding(IncrementalProjectBuilder.FULL_BUILD,true);
  command.setBuilding(IncrementalProjectBuilder.INCREMENTAL_BUILD,true);
  newCommands[newCommands.length - 1]=command;
  desc.setBuildSpec(newCommands);
  project.setDescription(desc,null);
}",0.8541076487252125
2757,"public void configure() throws CoreException {
  IProjectDescription desc=project.getDescription();
  ICommand[] commands=desc.getBuildSpec();
  for (int i=0; i < commands.length; ++i) {
    if (commands[i].getBuilderName().equals(Builder.BUILDER_ID)) {
      return;
    }
  }
  ICommand[] newCommands=new ICommand[commands.length + 1];
  System.arraycopy(commands,0,newCommands,0,commands.length);
  ICommand command=desc.newCommand();
  command.setBuilderName(Builder.BUILDER_ID);
  newCommands[newCommands.length - 1]=command;
  desc.setBuildSpec(newCommands);
  project.setDescription(desc,null);
}","public void configure() throws CoreException {
  IProjectDescription desc=project.getDescription();
  ICommand[] commands=desc.getBuildSpec();
  for (int i=0; i < commands.length; ++i) {
    if (commands[i].getBuilderName().equals(Builder.BUILDER_ID)) {
      return;
    }
  }
  ICommand[] newCommands=new ICommand[commands.length + 1];
  System.arraycopy(commands,0,newCommands,0,commands.length);
  ICommand command=desc.newCommand();
  command.setBuilderName(Builder.BUILDER_ID);
  command.setBuilding(IncrementalProjectBuilder.CLEAN_BUILD,true);
  command.setBuilding(IncrementalProjectBuilder.FULL_BUILD,true);
  command.setBuilding(IncrementalProjectBuilder.INCREMENTAL_BUILD,true);
  newCommands[newCommands.length - 1]=command;
  desc.setBuildSpec(newCommands);
  project.setDescription(desc,null);
}",0.8541076487252125
2758,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    RhogenDebugTarget target=null;
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    ConsoleHelper.cleanBuildConsole();
    ConsoleHelper.showBuildConsole();
    setupConfigAttributes(configuration);
    PlatformType currPlType=PlatformType.fromString(m_platformType);
    if (OSHelper.isWindows() && currPlType == PlatformType.eBb) {
      RunExeHelper.killBbSimulator();
    }
    if (m_projectName == null || m_projectName.length() == 0 || m_runType == null || m_runType.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.run(monitor);
      try {
        OSHelper.killProcess(""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      target=new RhogenDebugTarget(launch,null,RhogenDebugTarget.EDebugPlatfrom.eRhodes);
    }
    try {
      cleanSelectedPlatform(project,m_isClean);
      startBuildThread(project,mode,launch);
      while (true) {
        try {
          if (monitor.isCanceled()) {
            OSHelper.killProcess(""String_Node_Str"");
            return;
          }
          if (getProcessFinished()) {
            break;
          }
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    IllegalArgumentException e) {
      ConsoleHelper.consolePrint(e.getMessage());
    }
catch (    Exception e) {
      e.printStackTrace();
    }
    monitor.done();
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      target.setProcess(m_debugProcess);
      launch.addDebugTarget(target);
    }
  }
 catch (  IllegalArgumentException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    msgJob.run(monitor);
  }
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    RhogenDebugTarget target=null;
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    ConsoleHelper.cleanBuildConsole();
    ConsoleHelper.showBuildConsole();
    setupConfigAttributes(configuration);
    PlatformType currPlType=PlatformType.fromString(m_platformType);
    if (OSHelper.isWindows() && currPlType == PlatformType.eBb) {
      RunExeHelper.killBbSimulator();
    }
    if (m_projectName == null || m_projectName.length() == 0 || m_runType == null || m_runType.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.run(monitor);
      try {
        OSHelper.killProcess(""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      target=new RhogenDebugTarget(launch,null,RhogenDebugTarget.EDebugPlatfrom.eRhodes);
    }
    try {
      cleanSelectedPlatform(project,m_isClean);
      startBuildThread(project,mode,launch);
      while (true) {
        try {
          if (monitor.isCanceled()) {
            OSHelper.killProcess(""String_Node_Str"");
            return;
          }
          if (getProcessFinished()) {
            break;
          }
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    IllegalArgumentException e) {
      ConsoleHelper.consolePrint(e.getMessage());
    }
catch (    Exception e) {
      e.printStackTrace();
    }
    monitor.done();
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      target.setProcess(m_debugProcess);
      launch.addDebugTarget(target);
    }
  }
 catch (  IllegalArgumentException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    msgJob.run(monitor);
  }
}",0.9848323007904294
2759,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  ConsoleHelper.showBuildConsole();
  setupConfigAttributes(configuration);
  if (m_projectName == null || m_projectName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.run(monitor);
      target=new RhogenDebugTarget(launch,null,RhogenDebugTarget.EDebugPlatfrom.eRhosync);
    }
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          StopRhoconnectAppAdapter.stopRhoconnectApp();
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
  }
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    RhogenDebugTarget target=null;
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    ConsoleHelper.cleanBuildConsole();
    ConsoleHelper.showBuildConsole();
    setupConfigAttributes(configuration);
    if (m_projectName == null || m_projectName.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"" + project.getName() + ""String_Node_Str"");
    }
    try {
      if (mode.equals(ILaunchManager.DEBUG_MODE)) {
        ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
        job.run(monitor);
        target=new RhogenDebugTarget(launch,null,RhogenDebugTarget.EDebugPlatfrom.eRhosync);
      }
      startBuildThread(project,mode,launch);
      while (true) {
        try {
          if (monitor.isCanceled()) {
            StopRhoconnectAppAdapter.stopRhoconnectApp();
            return;
          }
          if (getProcessFinished()) {
            break;
          }
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    IllegalArgumentException e) {
      ConsoleHelper.consolePrint(e.getMessage());
    }
catch (    Exception e) {
      e.printStackTrace();
    }
    monitor.done();
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      target.setProcess(m_debugProcess);
      launch.addDebugTarget(target);
    }
  }
 catch (  IllegalArgumentException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    msgJob.run(monitor);
  }
}",0.8985346972629251
2760,"public ISourceContainer[] computeSourceContainers(ILaunchConfiguration configuration,IProgressMonitor monitor) throws CoreException {
  String m_projectName=configuration.getAttribute(ConfigurationConstants.projectNameCfgAttribute,""String_Node_Str"");
  ISourceContainer sourceContainer=null;
  if (m_projectName != null) {
    IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(""String_Node_Str"" + m_projectName + ""String_Node_Str"");
    if (resource != null) {
      IContainer container=resource.getParent();
      if (container.getType() == IResource.PROJECT) {
        sourceContainer=new ProjectSourceContainer((IProject)container,false);
      }
 else       if (container.getType() == IResource.FOLDER) {
        sourceContainer=new FolderSourceContainer(container,false);
      }
    }
  }
  if (sourceContainer == null) {
    sourceContainer=new WorkspaceSourceContainer();
  }
  return new ISourceContainer[]{sourceContainer};
}","public ISourceContainer[] computeSourceContainers(ILaunchConfiguration configuration,IProgressMonitor monitor) throws CoreException {
  String m_projectName=configuration.getAttribute(ConfigurationConstants.projectNameCfgAttribute,""String_Node_Str"");
  ISourceContainer sourceContainer=null;
  if (m_projectName != null) {
    IResource resourceRhodes=ResourcesPlugin.getWorkspace().getRoot().findMember(""String_Node_Str"" + m_projectName + ""String_Node_Str"");
    IResource resourceRhoconnect=ResourcesPlugin.getWorkspace().getRoot().findMember(""String_Node_Str"" + m_projectName + ""String_Node_Str"");
    IContainer container=null;
    if (resourceRhodes != null) {
      container=resourceRhodes.getParent();
    }
 else     if (resourceRhoconnect != null) {
      container=resourceRhoconnect.getParent();
    }
    if (container != null) {
      if (container.getType() == IResource.PROJECT) {
        sourceContainer=new ProjectSourceContainer((IProject)container,false);
      }
 else       if (container.getType() == IResource.FOLDER) {
        sourceContainer=new FolderSourceContainer(container,false);
      }
    }
  }
  if (sourceContainer == null) {
    sourceContainer=new WorkspaceSourceContainer();
  }
  return new ISourceContainer[]{sourceContainer};
}",0.8230008984725966
2761,"public boolean isTerminated(){
  return getProcess().isTerminated();
}","public boolean isTerminated(){
  return m_processHandle.isTerminated();
}",0.8951048951048951
2762,"public void breakpointAdded(IBreakpoint breakpoint){
  if (supportsBreakpoint(breakpoint)) {
    try {
      if (breakpoint.isEnabled()) {
        ScriptLineBreakpoint lineBr=(ScriptLineBreakpoint)breakpoint;
        int lineNum=lineBr.getLineNumber();
        String srcFile=null;
        if (m_debugType == EDebugPlatfrom.eRhosync) {
          srcFile=prepareResNameForSyncDebugger(lineBr.getResourcePath().toOSString());
        }
 else {
          srcFile=prepareResNameForRhodesDebugger(lineBr.getResourcePath().toOSString());
        }
        m_debugServer.debugBreakpoint(srcFile,lineNum);
      }
    }
 catch (    CoreException e) {
    }
  }
}","public void breakpointAdded(IBreakpoint breakpoint){
  if (supportsBreakpoint(breakpoint)) {
    try {
      if (breakpoint.isEnabled()) {
        ScriptLineBreakpoint lineBr=(ScriptLineBreakpoint)breakpoint;
        int lineNum=lineBr.getLineNumber();
        String srcFile=null;
        if (m_debugType == EDebugPlatfrom.eRhosync) {
          srcFile=prepareResNameForRhoconnectDebugger(lineBr.getResourcePath().toOSString());
        }
 else {
          srcFile=prepareResNameForRhodesDebugger(lineBr.getResourcePath().toOSString());
        }
        m_debugServer.debugBreakpoint(srcFile,lineNum);
      }
    }
 catch (    CoreException e) {
    }
  }
}",0.8340943683409436
2763,"public void breakpointRemoved(IBreakpoint breakpoint,IMarkerDelta delta){
  if (supportsBreakpoint(breakpoint)) {
    try {
      ScriptLineBreakpoint lineBr=(ScriptLineBreakpoint)breakpoint;
      int lineNum=lineBr.getLineNumber();
      String srcFile=null;
      if (m_debugType == EDebugPlatfrom.eRhosync) {
        srcFile=prepareResNameForSyncDebugger(lineBr.getResourcePath().toOSString());
      }
 else {
        srcFile=prepareResNameForRhodesDebugger(lineBr.getResourcePath().toOSString());
      }
      m_debugServer.debugRemoveBreakpoint(srcFile,lineNum);
    }
 catch (    CoreException e) {
    }
  }
}","public void breakpointRemoved(IBreakpoint breakpoint,IMarkerDelta delta){
  if (supportsBreakpoint(breakpoint)) {
    try {
      ScriptLineBreakpoint lineBr=(ScriptLineBreakpoint)breakpoint;
      int lineNum=lineBr.getLineNumber();
      String srcFile=null;
      if (m_debugType == EDebugPlatfrom.eRhosync) {
        srcFile=prepareResNameForRhoconnectDebugger(lineBr.getResourcePath().toOSString());
      }
 else {
        srcFile=prepareResNameForRhodesDebugger(lineBr.getResourcePath().toOSString());
      }
      m_debugServer.debugRemoveBreakpoint(srcFile,lineNum);
    }
 catch (    CoreException e) {
    }
  }
}",0.9887459807073956
2764,"public boolean canTerminate(){
  return getProcess().canTerminate();
}","public boolean canTerminate(){
  return m_processHandle.canTerminate();
}",0.8951048951048951
2765,"@Override public void stopped(DebugState state,String file,int line,String className,String method){
  waitDebugProcessing();
  cleanState();
  installDeferredWatchs();
  waitDebugProcessing();
  if (state == DebugState.BREAKPOINT) {
    IBreakpoint[] breakpoints=DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(DebugConstants.debugModelId);
    for (int i=0; i < breakpoints.length; i++) {
      waitDebugProcessing();
      IBreakpoint breakpoint=breakpoints[i];
      if (breakpoint instanceof ScriptLineBreakpoint) {
        ScriptLineBreakpoint lineBreakpoint=(ScriptLineBreakpoint)breakpoint;
        String resPath=null;
        if (m_debugType == EDebugPlatfrom.eRhosync) {
          resPath=prepareResNameForSyncDebugger(lineBreakpoint.getResourcePath().toOSString());
        }
 else {
          resPath=prepareResNameForRhodesDebugger(lineBreakpoint.getResourcePath().toOSString());
        }
        try {
          if (lineBreakpoint.getLineNumber() == line && resPath.equals(file)) {
            m_threadHandle.setBreakpoints(new IBreakpoint[]{breakpoint});
            break;
          }
        }
 catch (        CoreException e) {
        }
      }
    }
    suspended(DebugEvent.BREAKPOINT);
  }
 else   if (DebugState.paused(state)) {
    m_threadHandle.setStepping(true);
    suspended(DebugEvent.STEP_END);
  }
}","@Override public void stopped(DebugState state,String file,int line,String className,String method){
  waitDebugProcessing();
  cleanState();
  installDeferredWatchs();
  waitDebugProcessing();
  if (state == DebugState.BREAKPOINT) {
    IBreakpoint[] breakpoints=DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(DebugConstants.debugModelId);
    for (int i=0; i < breakpoints.length; i++) {
      waitDebugProcessing();
      IBreakpoint breakpoint=breakpoints[i];
      if (breakpoint instanceof ScriptLineBreakpoint) {
        ScriptLineBreakpoint lineBreakpoint=(ScriptLineBreakpoint)breakpoint;
        String resPath=null;
        if (m_debugType == EDebugPlatfrom.eRhosync) {
          resPath=prepareResNameForRhoconnectDebugger(lineBreakpoint.getResourcePath().toOSString());
        }
 else {
          resPath=prepareResNameForRhodesDebugger(lineBreakpoint.getResourcePath().toOSString());
        }
        try {
          if (lineBreakpoint.getLineNumber() == line && resPath.equals(file)) {
            m_threadHandle.setBreakpoints(new IBreakpoint[]{breakpoint});
            break;
          }
        }
 catch (        CoreException e) {
        }
      }
    }
    suspended(DebugEvent.BREAKPOINT);
  }
 else   if (DebugState.paused(state)) {
    m_threadHandle.setStepping(true);
    suspended(DebugEvent.STEP_END);
  }
}",0.9948186528497408
2766,"private int runSelectedBuildConfiguration(IProject currProject) throws Exception {
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(RunDebugRhodesAppTask.workDir,currProject.getLocation().toOSString());
  Map results=RhoTaskHolder.getInstance().runTask(RunDebugRhodesAppTask.taskTag,params);
  return TaskResultConverter.getResultIntCode(results);
}","private int runSelectedBuildConfiguration(IProject currProject) throws Exception {
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(RunReleaseRhoconnectAppTask.workDir,currProject.getLocation().toOSString());
  Map results=RhoTaskHolder.getInstance().runTask(RunReleaseRhoconnectAppTask.taskTag,params);
  return TaskResultConverter.getResultIntCode(results);
}",0.4801061007957559
2767,"private IProcess debugSelectedBuildConfiguration(IProject currProject,ILaunch launch) throws Exception {
  return null;
}","private IProcess debugSelectedBuildConfiguration(IProject currProject,ILaunch launch) throws Exception {
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(RunDebugRhoconnectAppTask.workDir,currProject.getLocation().toOSString());
  params.put(RunDebugRhoconnectAppTask.appName,currProject.getName());
  params.put(RunDebugRhoconnectAppTask.launchObj,launch);
  Map results=RhoTaskHolder.getInstance().runTask(RunDebugRhoconnectAppTask.taskTag,params);
  return TaskResultConverter.getResultLaunchObj(results);
}",0.336906584992343
2768,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  ConsoleHelper.showBuildConsole();
  setupConfigAttributes(configuration);
  if (m_projectName == null || m_projectName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.run(monitor);
      target=new RhogenDebugTarget(launch,null,RhogenDebugTarget.EDebugPlatfrom.eRhosync);
    }
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
  }
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  ConsoleHelper.showBuildConsole();
  setupConfigAttributes(configuration);
  if (m_projectName == null || m_projectName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.run(monitor);
      target=new RhogenDebugTarget(launch,null,RhogenDebugTarget.EDebugPlatfrom.eRhosync);
    }
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          StopRhoconnectAppAdapter.stopRhoconnectApp();
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
  }
}",0.9611940298507464
2769,"public void terminate() throws DebugException {
  try {
    m_debugServer.debugTerminate();
    OSHelper.killProcess(""String_Node_Str"");
    if (m_debugType != EDebugPlatfrom.eRhosync) {
      m_processHandle.terminate();
    }
  }
 catch (  DebugServerException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","public void terminate() throws DebugException {
  try {
    m_debugServer.debugTerminate();
    if (m_debugType == EDebugPlatfrom.eRhosync) {
      RhodesAdapter adapter=new RhodesAdapter();
      adapter.stopSyncApp();
    }
    m_processHandle.terminate();
  }
 catch (  DebugServerException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8158253751705321
2770,"public void run(){
  try {
    Socket clientSocket=serverSocket.accept();
    inFromClient=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    outToClient=new OutputStreamWriter(new BufferedOutputStream(clientSocket.getOutputStream()),""String_Node_Str"");
    debugProtocol=new DebugProtocol(this,this.debugCallback);
    try {
      String data;
      while ((data=inFromClient.readLine()) != null) {
        if (debugOutput != null)         debugOutput.println(""String_Node_Str"" + data);
        debugProtocol.processCommand(data);
      }
    }
 catch (    EOFException e) {
    }
catch (    IOException e) {
    }
 finally {
      try {
        clientSocket.close();
      }
 catch (      IOException e) {
      }
    }
  }
 catch (  IOException ioe) {
  }
}","public void run(){
  try {
    Socket clientSocket=serverSocket.accept();
    inFromClient=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    outToClient=new OutputStreamWriter(new BufferedOutputStream(clientSocket.getOutputStream()),""String_Node_Str"");
    debugProtocol=new DebugProtocol(this,this.debugCallback);
    try {
      String data;
      while ((data=inFromClient.readLine()) != null) {
        if (debugOutput != null)         debugOutput.println(""String_Node_Str"" + data);
        debugProtocol.processCommand(data);
      }
    }
 catch (    EOFException e) {
    }
catch (    IOException e) {
    }
 finally {
      try {
        clientSocket.close();
      }
 catch (      IOException e) {
      }
    }
  }
 catch (  IOException ioe) {
  }
catch (  NullPointerException e) {
  }
}",0.9745815251084936
2771,"public RunExeHelper(String exeName){
  m_executor=new SysCommandExecutor();
  if (OSHelper.isWindows()) {
    m_exeName=exeName + ""String_Node_Str"";
  }
 else {
    m_exeName=exeName;
  }
}","public RunExeHelper(String exeName,boolean isExe){
  m_executor=new SysCommandExecutor();
  if (OSHelper.isWindows()) {
    if (isExe) {
      m_exeName=exeName + ""String_Node_Str"";
    }
 else {
      m_exeName=exeName + ""String_Node_Str"";
    }
  }
 else {
    m_exeName=exeName;
  }
}",0.634453781512605
2772,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  setupConfigAttributes(configuration);
  if (m_projectName == null || m_projectName.length() == 0 || m_platformName == null || m_platformName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
    job.run(monitor);
    try {
      OSHelper.killProcess(""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    target=new RhogenDebugTarget(launch,null);
  }
  try {
    cleanSelectedPlatform(project,m_isClean);
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
  }
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  setupConfigAttributes(configuration);
  if (OSHelper.isWindows() && m_platformType.equals(RhodesAdapter.platformBlackBerry)) {
    RunExeHelper.killBbSimulator();
  }
  if (m_projectName == null || m_projectName.length() == 0 || m_platformName == null || m_platformName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
    job.run(monitor);
    RunExeHelper.killRhoSimulator();
    target=new RhogenDebugTarget(launch,null);
  }
  try {
    cleanSelectedPlatform(project,m_isClean);
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
  }
}",0.92448132780083
2773,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(BuildInfoHolder infoHolder,IProgressMonitor monitor) throws CoreException {
  IProject newProject=null;
  try {
    monitor.beginTask(""String_Node_Str"" + infoHolder.appName,2);
    monitor.worked(1);
    monitor.setTaskName(""String_Node_Str"");
    newProject=RhodesProjectSupport.createProject(infoHolder);
    if (!checkRhodesVersion(CommonConstants.rhodesVersion)) {
      newProject.delete(true,monitor);
      ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      msgJob.run(monitor);
      return;
    }
    if (!infoHolder.existCreate) {
      if (m_rhogenAdapter.generateApp(infoHolder) != 0) {
        throw new IOException(""String_Node_Str"");
      }
    }
    newProject.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.run(monitor);
    monitor.worked(1);
  }
 catch (  IOException e) {
    newProject.delete(false,monitor);
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    msgJob.run(monitor);
  }
catch (  CheckProjectException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    msgJob.run(monitor);
  }
catch (  AlredyCreatedException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.toString());
    msgJob.run(monitor);
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(BuildInfoHolder infoHolder,IProgressMonitor monitor) throws CoreException {
  IProject newProject=null;
  try {
    monitor.beginTask(""String_Node_Str"" + infoHolder.appName,2);
    monitor.worked(1);
    monitor.setTaskName(""String_Node_Str"");
    newProject=RhodesProjectSupport.createProject(infoHolder);
    if (!infoHolder.existCreate) {
      if (m_rhogenAdapter.generateApp(infoHolder) != 0) {
        throw new IOException(""String_Node_Str"");
      }
    }
    newProject.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",UiConstants.rhodesPerspectiveId);
    job.run(monitor);
    monitor.worked(1);
  }
 catch (  IOException e) {
    newProject.delete(false,monitor);
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    msgJob.run(monitor);
  }
catch (  CheckProjectException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    msgJob.run(monitor);
  }
catch (  AlredyCreatedException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.toString());
    msgJob.run(monitor);
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.91968
2774,"boolean checkRhodesVersion(String rhodesVer) throws Exception {
  RunExeHelper runHelper=new RunExeHelper(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(rhodesVer);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(sb.toString());
  String cmdOutput=runHelper.run(cmdLine);
  cmdOutput=cmdOutput.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (cmdOutput.equals(okRhodesVersionFlag)) {
    return true;
  }
  return false;
}","boolean checkRhodesVersion(String rhodesVer) throws Exception {
  RunExeHelper runHelper=new RunExeHelper(""String_Node_Str"",false);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(rhodesVer);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(sb.toString());
  String cmdOutput=runHelper.run(cmdLine);
  cmdOutput=cmdOutput.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (cmdOutput.equals(okRhodesVersionFlag)) {
    return true;
  }
  return false;
}",0.99402390438247
2775,"boolean checkRhodesVersion(String rhodesVer) throws Exception {
  RunExeHelper runHelper=new RunExeHelper(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(rhodesVer);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(sb.toString());
  String cmdOutput=runHelper.run(cmdLine);
  cmdOutput=cmdOutput.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (cmdOutput.equals(okRhodesVersionFlag)) {
    return true;
  }
  return false;
}","boolean checkRhodesVersion(String rhodesVer) throws Exception {
  RunExeHelper runHelper=new RunExeHelper(""String_Node_Str"",false);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(rhodesVer);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(sb.toString());
  String cmdOutput=runHelper.run(cmdLine);
  cmdOutput=cmdOutput.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (cmdOutput.equals(okRhodesVersionFlag)) {
    return true;
  }
  return false;
}",0.99402390438247
2776,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  setupConfigAttributes(configuration);
  if (OSHelper.isWindows() && m_platformType.equals(RhodesAdapter.platformBlackBerry)) {
    RunExeHelper.killBbSimulator();
  }
  if (m_projectName == null || m_projectName.length() == 0 || m_platformName == null || m_platformName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
    job.run(monitor);
    RunExeHelper.killRhoSimulator();
    target=new RhogenDebugTarget(launch,null);
  }
  try {
    cleanSelectedPlatform(project,m_isClean);
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
  }
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  setupConfigAttributes(configuration);
  if (OSHelper.isWindows() && m_platformType.equals(RhodesAdapter.platformBlackBerry)) {
    RunExeHelper.killBbSimulator();
  }
  if (m_projectName == null || m_projectName.length() == 0 || m_platformName == null || m_platformName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
    job.run(monitor);
    RunExeHelper.killRhoSimulator();
    target=new RhogenDebugTarget(launch,null);
  }
  try {
    cleanSelectedPlatform(project,m_isClean);
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
    try {
      Thread.sleep(sleepWaitChangeConsole);
      ConsoleHelper.showAppConsole();
    }
 catch (    InterruptedException e) {
    }
  }
}",0.9626315789473684
2777,"private IProcess debugSelectedBuildConfiguration(IProject currProject,ILaunch launch) throws Exception {
  return null;
}","private IProcess debugSelectedBuildConfiguration(IProject currProject,ILaunch launch) throws Exception {
  IProcess debugProcess=rhodesAdapter.debugSyncApp(currProject.getName(),currProject.getLocation().toOSString(),launch);
  return debugProcess;
}",0.5929919137466307
2778,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  setupConfigAttributes(configuration);
  if (m_projectName == null || m_projectName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  RhogenDebugTarget target=null;
  setProcessFinished(false);
  rhodesLogHelper.stopLog();
  ConsoleHelper.cleanBuildConsole();
  setupConfigAttributes(configuration);
  if (m_projectName == null || m_projectName.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
  if (!project.isOpen()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",DebugConstants.debugPerspectiveId);
      job.run(monitor);
      OSHelper.killProcess(""String_Node_Str"");
      target=new RhogenDebugTarget(launch,null);
    }
    startBuildThread(project,mode,launch);
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          break;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
  if (mode.equals(ILaunchManager.DEBUG_MODE)) {
    target.setProcess(m_debugProcess);
    launch.addDebugTarget(target);
  }
}",0.8419921175206019
2779,"public int buildRhosyncApp(String workDir) throws Exception {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  return m_executor.runCommand(cmdLine);
}","public int buildRhosyncApp(String workDir) throws Exception {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
  sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  return m_executor.runCommand(cmdLine);
}",0.7623642943305187
2780,"public IProcess debugSyncApp(String projectName,String workDir,ILaunch launch) throws Exception {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  String[] commandLine=new String[cmdLine.size()];
  commandLine=cmdLine.toArray(commandLine);
  Process process=DebugPlugin.exec(commandLine,new File(workDir));
  return DebugPlugin.newProcess(launch,process,projectName);
}","public IProcess debugSyncApp(String projectName,String workDir,ILaunch launch) throws Exception {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
  sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  String[] commandLine=new String[cmdLine.size()];
  commandLine=cmdLine.toArray(commandLine);
  Process process=DebugPlugin.exec(commandLine,new File(workDir));
  return DebugPlugin.newProcess(launch,process,projectName);
}",0.8150572831423896
2781,"public IProcess debugApp(String projectName,String workDir,EPlatformType platformType,ILaunch launch) throws Exception {
  String platformName=convertDescFromPlatform(platformType);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  sb.append(""String_Node_Str"");
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  String[] commandLine=new String[cmdLine.size()];
  commandLine=cmdLine.toArray(commandLine);
  Process process=DebugPlugin.exec(commandLine,new File(workDir));
  return DebugPlugin.newProcess(launch,process,projectName);
}","public IProcess debugApp(String projectName,String workDir,EPlatformType platformType,ILaunch launch) throws Exception {
  String platformName=convertDescFromPlatform(platformType);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  sb.append(""String_Node_Str"");
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  cmdLine.add(""String_Node_Str"");
  cmdLine.add(""String_Node_Str"");
  String[] commandLine=new String[cmdLine.size()];
  commandLine=cmdLine.toArray(commandLine);
  Process process=DebugPlugin.exec(commandLine,new File(workDir));
  return DebugPlugin.newProcess(launch,process,projectName);
}",0.9496296296296296
2782,"public int buildAppOnRhoSim(String workDir,EPlatformType platformType) throws Exception {
  String platformName=convertDescFromPlatform(platformType);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  return m_executor.runCommand(cmdLine);
}","public int buildAppOnRhoSim(String workDir,EPlatformType platformType) throws Exception {
  String platformName=convertDescFromPlatform(platformType);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  sb.append(""String_Node_Str"");
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  cmdLine.add(""String_Node_Str"");
  cmdLine.add(""String_Node_Str"");
  return m_executor.runCommand(cmdLine);
}",0.9326732673267328
2783,"@Override public void exited(){
  m_isTerminated=true;
  m_isSuspended=false;
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  DebugPlugin.getDefault().getExpressionManager().removeExpressionListener(this);
  fireTerminateEvent();
  m_debugServer.shutdown();
}","@Override public void exited(){
  m_isTerminated=true;
  m_isSuspended=false;
  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
  DebugPlugin.getDefault().getExpressionManager().removeExpressionListener(this);
  fireTerminateEvent();
  try {
    m_debugServer.shutdown();
  }
 catch (  DebugServerException e) {
  }
}",0.9161490683229814
2784,"/** 
 * Returns the current stack frames in the target.
 * @return the current stack frames in the target
 * @throws DebugException if unable to perform the request
 */
protected IStackFrame[] getStackFrames() throws DebugException {
  StackData stackData=new StackData(m_debugServer.debugGetFile(),m_debugServer.debugGetLine());
  IStackFrame[] theFrames=new IStackFrame[1];
  for (int i=0; i < 3; ++i) {
    try {
      theFrames[0]=new RhogenStackFrame(m_threadHandle,stackData,0);
      break;
    }
 catch (    DebugServerException e) {
    }
  }
  return theFrames;
}","/** 
 * Returns the current stack frames in the target.
 * @return the current stack frames in the target
 * @throws DebugException if unable to perform the request
 */
protected IStackFrame[] getStackFrames() throws DebugException {
  StackData stackData=new StackData(m_debugServer.debugGetFile(),m_debugServer.debugGetLine());
  IStackFrame[] theFrames=new IStackFrame[1];
  for (int i=0; i < 3; ++i) {
    try {
      stackData.m_currVariables=m_debugServer.debugWatchList();
      theFrames[0]=new RhogenStackFrame(m_threadHandle,stackData,0);
      break;
    }
 catch (    DebugServerException e) {
    }
  }
  return theFrames;
}",0.947107438016529
2785,"public void terminate() throws DebugException {
  m_debugServer.debugTerminate();
}","public void terminate() throws DebugException {
  try {
    m_debugServer.debugTerminate();
    m_processHandle.terminate();
  }
 catch (  DebugServerException e) {
  }
}",0.6561264822134387
2786,"public void startBuildThread(final IProject project,final String mode,final ILaunch launch){
  Thread cancelingThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        if (mode.equals(ILaunchManager.DEBUG_MODE)) {
          m_debugProcess=debugSelectedBuildConfiguration(project,launch);
          if (m_debugProcess == null) {
            ConsoleHelper.consolePrint(""String_Node_Str"");
            setProcessFinished(true);
            return;
          }
        }
 else {
          if (runSelectedBuildConfiguration(project) != 0) {
            ConsoleHelper.consolePrint(""String_Node_Str"");
            setProcessFinished(true);
            return;
          }
        }
        startLogOutput(project,EPlatformType.eRsync);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      setProcessFinished(true);
    }
  }
);
  cancelingThread.start();
}","public void startBuildThread(final IProject project,final String mode,final ILaunch launch){
  Thread cancelingThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        OSHelper.setEnvVariable(""String_Node_Str"",""String_Node_Str"");
        OSHelper.setEnvVariable(""String_Node_Str"",""String_Node_Str"");
        ConsoleHelper.consolePrint(""String_Node_Str"");
        if (mode.equals(ILaunchManager.DEBUG_MODE)) {
          m_debugProcess=debugSelectedBuildConfiguration(project,launch);
          if (m_debugProcess == null) {
            ConsoleHelper.consolePrint(""String_Node_Str"");
            setProcessFinished(true);
            return;
          }
        }
 else {
          if (runSelectedBuildConfiguration(project) != 0) {
            ConsoleHelper.consolePrint(""String_Node_Str"");
            setProcessFinished(true);
            return;
          }
        }
        startLogOutput(project,EPlatformType.eRsync);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      setProcessFinished(true);
    }
  }
);
  cancelingThread.start();
}",0.9321047526673132
2787,"@Override public void run(){
  try {
    ConsoleHelper.consolePrint(""String_Node_Str"");
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      m_debugProcess=debugSelectedBuildConfiguration(project,launch);
      if (m_debugProcess == null) {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        setProcessFinished(true);
        return;
      }
    }
 else {
      if (runSelectedBuildConfiguration(project) != 0) {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        setProcessFinished(true);
        return;
      }
    }
    startLogOutput(project,EPlatformType.eRsync);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  setProcessFinished(true);
}","@Override public void run(){
  try {
    OSHelper.setEnvVariable(""String_Node_Str"",""String_Node_Str"");
    OSHelper.setEnvVariable(""String_Node_Str"",""String_Node_Str"");
    ConsoleHelper.consolePrint(""String_Node_Str"");
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      m_debugProcess=debugSelectedBuildConfiguration(project,launch);
      if (m_debugProcess == null) {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        setProcessFinished(true);
        return;
      }
    }
 else {
      if (runSelectedBuildConfiguration(project) != 0) {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        setProcessFinished(true);
        return;
      }
    }
    startLogOutput(project,EPlatformType.eRsync);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  setProcessFinished(true);
}",0.912
2788,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(BuildInfoHolder infoHolder,IProgressMonitor monitor) throws CoreException {
  try {
    monitor.beginTask(""String_Node_Str"" + infoHolder.appName,2);
    monitor.worked(1);
    monitor.setTaskName(""String_Node_Str"");
    IProject newProject=RhodesProjectSupport.createProject(infoHolder);
    if (!infoHolder.existCreate) {
      if (m_rhogenAdapter.generateApp(infoHolder) != 0) {
        throw new IOException(""String_Node_Str"");
      }
    }
    newProject.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",RhogenConstants.rhodesPerspectiveId);
    job.run(monitor);
    monitor.worked(1);
  }
 catch (  IOException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    msgJob.run(monitor);
  }
catch (  CheckProjectException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    msgJob.run(monitor);
  }
catch (  AlredyCreatedException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.toString());
    msgJob.run(monitor);
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(BuildInfoHolder infoHolder,IProgressMonitor monitor) throws CoreException {
  IProject newProject=null;
  try {
    monitor.beginTask(""String_Node_Str"" + infoHolder.appName,2);
    monitor.worked(1);
    monitor.setTaskName(""String_Node_Str"");
    newProject=RhodesProjectSupport.createProject(infoHolder);
    if (!infoHolder.existCreate) {
      if (m_rhogenAdapter.generateApp(infoHolder) != 0) {
        throw new IOException(""String_Node_Str"");
      }
    }
    newProject.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    ShowPerspectiveJob job=new ShowPerspectiveJob(""String_Node_Str"",RhogenConstants.rhodesPerspectiveId);
    job.run(monitor);
    monitor.worked(1);
  }
 catch (  IOException e) {
    newProject.delete(true,monitor);
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    msgJob.run(monitor);
  }
catch (  CheckProjectException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    msgJob.run(monitor);
  }
catch (  AlredyCreatedException e) {
    ShowMessageJob msgJob=new ShowMessageJob(""String_Node_Str"",""String_Node_Str"",e.toString());
    msgJob.run(monitor);
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9627791563275434
2789,"public IProcess debugApp(String workDir,EPlatformType platformType,ILaunch launch,boolean onDevice) throws Exception {
  String platformName=convertDescFromPlatform(platformType);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  if (onDevice) {
    sb.append(""String_Node_Str"");
  }
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  String[] commandLine=new String[cmdLine.size()];
  commandLine=cmdLine.toArray(commandLine);
  Process process=DebugPlugin.exec(commandLine,new File(workDir));
  return DebugPlugin.newProcess(launch,process,""String_Node_Str"");
}","public IProcess debugApp(String projectName,String workDir,EPlatformType platformType,ILaunch launch,boolean onDevice) throws Exception {
  String platformName=convertDescFromPlatform(platformType);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  if (onDevice) {
    sb.append(""String_Node_Str"");
  }
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  String[] commandLine=new String[cmdLine.size()];
  commandLine=cmdLine.toArray(commandLine);
  Process process=DebugPlugin.exec(commandLine,new File(workDir));
  return DebugPlugin.newProcess(launch,process,projectName);
}",0.9666913397483344
2790,"public void startBuildThread(final IProject project,final String mode,final ILaunch launch){
  final EPlatformType type=RhodesAdapter.convertPlatformFromDesc(m_platformName);
  Thread cancelingThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        if (mode.equals(ILaunchManager.DEBUG_MODE)) {
          if (type != RhodesAdapter.EPlatformType.eEmu) {
            if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
              ConsoleHelper.consolePrint(""String_Node_Str"");
              setProcessFinished(true);
              return;
            }
          }
 else {
            m_debugProcess=rhodesAdapter.debugApp(project.getLocation().toOSString(),type,launch,m_onDevice);
            if (m_debugProcess == null) {
              ConsoleHelper.consolePrint(""String_Node_Str"");
              setProcessFinished(true);
              return;
            }
          }
        }
 else {
          if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
            ConsoleHelper.consolePrint(""String_Node_Str"");
            setProcessFinished(true);
            return;
          }
        }
        ConsoleHelper.showAppConsole();
        startLogOutput(project,type);
        setProcessFinished(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  cancelingThread.start();
}","public void startBuildThread(final IProject project,final String mode,final ILaunch launch){
  final EPlatformType type=RhodesAdapter.convertPlatformFromDesc(m_platformName);
  Thread cancelingThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        if (mode.equals(ILaunchManager.DEBUG_MODE)) {
          if (type != RhodesAdapter.EPlatformType.eEmu) {
            if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
              ConsoleHelper.consolePrint(""String_Node_Str"");
              setProcessFinished(true);
              return;
            }
          }
 else {
            m_debugProcess=rhodesAdapter.debugApp(m_projectName,project.getLocation().toOSString(),type,launch,m_onDevice);
            if (m_debugProcess == null) {
              ConsoleHelper.consolePrint(""String_Node_Str"");
              setProcessFinished(true);
              return;
            }
          }
        }
 else {
          if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
            ConsoleHelper.consolePrint(""String_Node_Str"");
            setProcessFinished(true);
            return;
          }
        }
        ConsoleHelper.showAppConsole();
        startLogOutput(project,type);
        setProcessFinished(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  cancelingThread.start();
}",0.9952830188679244
2791,"@Override public void run(){
  try {
    ConsoleHelper.consolePrint(""String_Node_Str"");
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      if (type != RhodesAdapter.EPlatformType.eEmu) {
        if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
          ConsoleHelper.consolePrint(""String_Node_Str"");
          setProcessFinished(true);
          return;
        }
      }
 else {
        m_debugProcess=rhodesAdapter.debugApp(project.getLocation().toOSString(),type,launch,m_onDevice);
        if (m_debugProcess == null) {
          ConsoleHelper.consolePrint(""String_Node_Str"");
          setProcessFinished(true);
          return;
        }
      }
    }
 else {
      if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        setProcessFinished(true);
        return;
      }
    }
    ConsoleHelper.showAppConsole();
    startLogOutput(project,type);
    setProcessFinished(true);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    ConsoleHelper.consolePrint(""String_Node_Str"");
    if (mode.equals(ILaunchManager.DEBUG_MODE)) {
      if (type != RhodesAdapter.EPlatformType.eEmu) {
        if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
          ConsoleHelper.consolePrint(""String_Node_Str"");
          setProcessFinished(true);
          return;
        }
      }
 else {
        m_debugProcess=rhodesAdapter.debugApp(m_projectName,project.getLocation().toOSString(),type,launch,m_onDevice);
        if (m_debugProcess == null) {
          ConsoleHelper.consolePrint(""String_Node_Str"");
          setProcessFinished(true);
          return;
        }
      }
    }
 else {
      if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) != 0) {
        ConsoleHelper.consolePrint(""String_Node_Str"");
        setProcessFinished(true);
        return;
      }
    }
    ConsoleHelper.showAppConsole();
    startLogOutput(project,type);
    setProcessFinished(true);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9935720844811754
2792,"public Vector<DebugVariable> getWatchList(DebugVariableType[] types){
  Vector<DebugVariable> result=null;
  if (DebugState.paused(this.state)) {
    this.waitForEOL=this.classPosition.length() > 0 ? DebugVariableType.INSTANCE : DebugVariableType.LOCAL;
    this.watchProcessing=true;
    this.watchList=new Vector<DebugVariable>();
    this.waitingThread=Thread.currentThread();
    this.wasWatchEOL=false;
    for (    DebugVariableType t : types)     if ((t == DebugVariableType.GLOBAL) || (t == DebugVariableType.LOCAL) || (this.classPosition.length() > 0))     getVariablesPrivate(t);
    do {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
 while (!(this.wasWatchEOL && (this.lastWatchEOL == this.waitForEOL)));
    this.watchProcessing=false;
    result=this.watchList;
    this.watchList=null;
  }
  return result;
}","public Vector<DebugVariable> getWatchList(DebugVariableType[] types){
  Vector<DebugVariable> result=null;
  if (DebugState.paused(this.state) && (types.length > 0)) {
    boolean hasSomethingToWatch=false;
    for (    DebugVariableType t : types)     if ((t == DebugVariableType.GLOBAL) || (t == DebugVariableType.LOCAL) || (this.classPosition.length() > 0)) {
      hasSomethingToWatch=true;
      this.waitForEOL=t;
    }
    if (hasSomethingToWatch) {
      this.watchProcessing=true;
      this.watchList=new Vector<DebugVariable>();
      this.waitingThread=Thread.currentThread();
      this.wasWatchEOL=false;
      for (      DebugVariableType t : types)       if ((t == DebugVariableType.GLOBAL) || (t == DebugVariableType.LOCAL) || (this.classPosition.length() > 0))       getVariablesPrivate(t);
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
      }
 while (!(this.wasWatchEOL && (this.lastWatchEOL == this.waitForEOL)));
      this.watchProcessing=false;
      result=this.watchList;
      this.watchList=null;
    }
  }
  return result;
}",0.7848227658512231
2793,"/** 
 * Called after the   {@link DebugServer#debugEvaluate(String)} method call.
 * @param valid - <code>true</code> if evaluated successfully,<code>false</code> otherwise. 
 * @param code - original Ruby code.
 * @param value - the resulted value of the evaluated/executed Ruby codeor the error message if evaliation failed (when <code>valid</code> is <code>false</code>). 
 */
public void evaluation(boolean valid,String code,String value);","/** 
 * Called after the   {@link DebugServer#debugEvaluate(String)} method call.
 * @param valid - <code>true</code> if evaluated successfully,<code>false</code> otherwise. 
 * @param code - original Ruby code.
 * @param value - the resulted value of the evaluated/executed Ruby codeor the error message if evaluation failed (when <code>valid</code> is <code>false</code>). 
 */
public void evaluation(boolean valid,String code,String value);",0.9977426636568848
2794,"public DebugEvaluation instantEvaluate(String expression){
  if (DebugState.paused(this.state)) {
    this.watchProcessing=true;
    this.evaluationResult=null;
    this.waitingThread=Thread.currentThread();
    evaluatePrivate(expression);
    do {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
 while (this.evaluationResult == null);
    this.watchProcessing=false;
    return this.evaluationResult;
  }
  return null;
}","public DebugEvaluation instantEvaluate(String expression){
  DebugEvaluation result=null;
  if (DebugState.paused(this.state)) {
    this.watchProcessing=true;
    this.evaluationResult=null;
    this.waitingThread=Thread.currentThread();
    evaluatePrivate(expression);
    do {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
 while (this.evaluationResult == null);
    this.watchProcessing=false;
    result=this.evaluationResult;
    this.evaluationResult=null;
  }
  return result;
}",0.9187071498530852
2795,"public Vector<DebugVariable> getWatchList(){
  if (DebugState.paused(this.state)) {
    this.waitForEOL=DebugVariableType.LOCAL;
    this.watchProcessing=true;
    this.watchList=new Vector<DebugVariable>();
    this.waitingThread=Thread.currentThread();
    this.wasWatchEOL=false;
    getVariablesPrivate(DebugVariableType.GLOBAL);
    getVariablesPrivate(DebugVariableType.LOCAL);
    if (this.classPosition.length() > 0) {
      this.waitForEOL=DebugVariableType.INSTANCE;
      getVariablesPrivate(DebugVariableType.CLASS);
      getVariablesPrivate(DebugVariableType.INSTANCE);
    }
    do {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
 while (!(this.wasWatchEOL && (this.lastWatchEOL == this.waitForEOL)));
    this.watchProcessing=false;
    return this.watchList;
  }
  return null;
}","public Vector<DebugVariable> getWatchList(){
  Vector<DebugVariable> result=null;
  if (DebugState.paused(this.state)) {
    this.waitForEOL=DebugVariableType.LOCAL;
    this.watchProcessing=true;
    this.watchList=new Vector<DebugVariable>();
    this.waitingThread=Thread.currentThread();
    this.wasWatchEOL=false;
    getVariablesPrivate(DebugVariableType.GLOBAL);
    getVariablesPrivate(DebugVariableType.LOCAL);
    if (this.classPosition.length() > 0) {
      this.waitForEOL=DebugVariableType.INSTANCE;
      getVariablesPrivate(DebugVariableType.CLASS);
      getVariablesPrivate(DebugVariableType.INSTANCE);
    }
    do {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
 while (!(this.wasWatchEOL && (this.lastWatchEOL == this.waitForEOL)));
    this.watchProcessing=false;
    result=this.watchList;
    this.watchList=null;
  }
  return result;
}",0.9377828054298644
2796,"/** 
 * Create a debug server.
 * @param callback - object to receive events from the debug target (Rhodes application).
 */
public DebugServer(IDebugCallback callback){
  this.debugCallback=callback;
  this.initialize();
}","/** 
 * Create a debug server.
 * @param callback - object to receive events from the debug target(Rhodes application).
 */
public DebugServer(IDebugCallback callback){
  this.debugCallback=callback;
  this.initialize();
}",0.997752808988764
2797,"/** 
 * Suspend the execution of Ruby code. The   {@link IDebugCallback#step(String,int,String,String)}method is called when the actual stop occurs.
 */
public void debugSuspend(){
  if (this.debugProtocol != null)   this.debugProtocol.suspend();
}","/** 
 * Suspend the execution of Ruby code. The  {@link IDebugCallback#step(String,int,String,String)}method is called when the actual stop occurs.
 */
public void debugSuspend(){
  if (this.debugProtocol != null)   this.debugProtocol.suspend();
}",0.997979797979798
2798,"/** 
 * Set an output stream for a detailed debug information.
 * @param stream - output stream (if null, no debug information will be passed anywhere). 
 */
public static void setDebugOutputStream(PrintStream stream){
  debugOutput=stream;
}","/** 
 * Set an output stream for a detailed debug information.
 * @param stream - output stream (if null, no debug informationwill be passed anywhere). 
 */
public static void setDebugOutputStream(PrintStream stream){
  debugOutput=stream;
}",0.9979296066252588
2799,"/** 
 * Toggle breakpoints skip mode.
 * @param skip - if <code>true</code>, skip all breakpoints; if <code>false</code>, stop at breakpoints.
 */
public void debugSkipBreakpoints(boolean skip){
  if (this.debugProtocol != null)   this.debugProtocol.skipBreakpoints(skip);
}","/** 
 * Toggle breakpoints skip mode.
 * @param skip - if <code>true</code>, skip all breakpoints;if <code>false</code>, stop at breakpoints.
 */
public void debugSkipBreakpoints(boolean skip){
  if (this.debugProtocol != null)   this.debugProtocol.skipBreakpoints(skip);
}",0.9981718464351006
2800,"/** 
 * Resume a normal execution of the Rhodes application (after the stop at breakpoint or after   {@link #debugStepInto()},   {@link #debugStepOver()} or {@link #debugStepReturn()} method call). 
 */
public void debugResume(){
  if (this.debugProtocol != null)   this.debugProtocol.resume();
}","/** 
 * Resume a normal execution of the Rhodes application (after the stop at breakpoint or after   {@link #debugStepInto()},   {@link #debugStepOver()}or   {@link #debugStepReturn()} method call). 
 */
public void debugResume(){
  if (this.debugProtocol != null)   this.debugProtocol.resume();
}",0.988195615514334
2801,"/** 
 * Remove a breakpoint.
 * @param file - file path within <code>app</code> folder of the Rhodes application,e.g. <code>""application.rb""</code> (always use <code>'/'</code> as a folder/file name separator).
 * @param line - effective line number (starting with 1). Must point to non-empty line of code.
 */
public void debugRemoveBreakpoint(String file,int line){
  if (this.debugProtocol != null)   this.debugProtocol.removeBreakpoint(file,line);
}","/** 
 * Remove an existing breakpoint.
 * @param file - file path within <code>app</code> folder of the Rhodesapplication, e.g. <code>""application.rb""</code> (always use <code>'/'</code> as a folder/file name separator).
 * @param line - breakpoint effective line number (starting with 1).
 */
public void debugRemoveBreakpoint(String file,int line){
  if (this.debugProtocol != null)   this.debugProtocol.removeBreakpoint(file,line);
}",0.9313835770528684
2802,"/** 
 * Add a breakpoint.
 * @param file - file path within <code>app</code> folder of the Rhodes application,e.g. <code>""application.rb""</code> (always use <code>'/'</code> as a folder/file name separator).
 * @param line - effective line number (starting with 1). Must point to non-empty line of code.
 */
public void debugBreakpoint(String file,int line){
  if (this.debugProtocol != null)   this.debugProtocol.addBreakpoint(file,line);
}","/** 
 * Add a breakpoint.
 * @param file - file path within <code>app</code> folder of the Rhodesapplication, e.g. <code>""application.rb""</code> (always use <code>'/'</code> as a folder/file name separator).
 * @param line - effective line number (starting with 1). Must point tonon-empty line of code.
 */
public void debugBreakpoint(String file,int line){
  if (this.debugProtocol != null)   this.debugProtocol.addBreakpoint(file,line);
}",0.996594778660613
2803,"/** 
 * Terminates execution of the Rhodes application.
 */
public void debugTerminate(){
  if (this.debugProtocol != null)   this.debugProtocol.terminate();
}","/** 
 * Terminates execution of the Rhodes application. The  {@link IDebugCallback#exited()} method is called when the actualexit occurs.
 */
public void debugTerminate(){
  if (this.debugProtocol != null)   this.debugProtocol.terminate();
}",0.795
2804,"/** 
 * Get list and values of variables of the specified types. Result is returned by the number of   {@link IDebugCallback#watch(DebugVariableType,String,String)} method calls.
 * @param types - list of variable types ({@link DebugVariableType}) to watch. 
 */
public void debugGetVariables(DebugVariableType[] types){
  if (this.debugProtocol != null)   this.debugProtocol.getVariables(types);
}","/** 
 * Get list and values of variables of the specified types. Result is returned by the number of   {@link IDebugCallback#watch(DebugVariableType,String,String)}method calls preceded by   {@link IDebugCallback#watchBOL(DebugVariableType)}and concluded by   {@link IDebugCallback#watchEOL(DebugVariableType)} for eachtype of variables.
 * @param types - list of variable types ({@link DebugVariableType}) to watch. 
 */
public void debugGetVariables(DebugVariableType[] types){
  if (this.debugProtocol != null)   this.debugProtocol.getVariables(types);
}",0.831413612565445
2805,"/** 
 * Shutdown the debug server (close all connections and a server socket).
 */
public void shutdown(){
  this.interrupt();
  try {
    if (this.inFromClient != null)     this.inFromClient.close();
    if (this.outToClient != null)     this.outToClient.close();
    if (this.serverSocket != null)     this.serverSocket.close();
  }
 catch (  IOException ioe) {
  }
  this.inFromClient=null;
  this.outToClient=null;
  this.serverSocket=null;
  if (debugOutput != null)   debugOutput.println(""String_Node_Str"");
}","/** 
 * Shutdown the debug server (close the connection and the server socket).
 */
public void shutdown(){
  this.interrupt();
  try {
    if (this.inFromClient != null)     this.inFromClient.close();
    if (this.outToClient != null)     this.outToClient.close();
    if (this.serverSocket != null)     this.serverSocket.close();
  }
 catch (  IOException ioe) {
  }
  this.inFromClient=null;
  this.outToClient=null;
  this.serverSocket=null;
  if (debugOutput != null)   debugOutput.println(""String_Node_Str"");
}",0.9602327837051406
2806,"/** 
 * Called after the   {@link DebugServer#debugEvaluate(String)} method call.
 * @param valid - <code>true</code> if evaluated successfully, <code>false</code> otherwise. 
 * @param code - original Ruby code. 
 * @param value - the resulted value of the evaluated/executed Ruby codeor the error message if evaliation failed (when <code>valid</code> is <code>false</code>). 
 */
public void evaluation(boolean valid,String code,String value);","/** 
 * Called after the   {@link DebugServer#debugEvaluate(String)} method call.
 * @param valid - <code>true</code> if evaluated successfully,<code>false</code> otherwise. 
 * @param code - original Ruby code.
 * @param value - the resulted value of the evaluated/executed Ruby codeor the error message if evaliation failed (when <code>valid</code> is <code>false</code>). 
 */
public void evaluation(boolean valid,String code,String value);",0.9977477477477478
2807,"/** 
 * Variable watch. Called for each variable after the call of  {@link DebugServer#debugGetVariables()} or {@link DebugServer#debugGetVariables(DebugVariableType[])}. 
 * @param type - Ruby variable type {@link DebugVariableType}.
 * @param variable - name of the local variable.
 * @param value - current value of the local variable.
 */
public void watch(DebugVariableType type,String variable,String value);","/** 
 * Variable watch. Called for each variable after the call of  {@link DebugServer#debugGetVariables()} or{@link DebugServer#debugGetVariables(DebugVariableType[])}. 
 * @param type - Ruby variable type {@link DebugVariableType}.
 * @param variable - name of the local variable.
 * @param value - current value of the local variable.
 */
public void watch(DebugVariableType type,String variable,String value);",0.9987908101571948
2808,"/** 
 * Called after execution of next method of Ruby code after the  {@link DebugServer#debugStepOver()} or {@link DebugServer#debugStepInto()} method call.  
 * @param file - file path within <code>app</code> folder of the Rhodes application,e.g. <code>""application.rb""</code>.
 * @param line - effective line number (starting with 1).
 * @param className - class name of the current object ("""" if none).
 * @param method - name of the current method ("""" if none).
 */
public void step(String file,int line,String className,String method);","/** 
 * Called after execution of next method of Ruby code after the  {@link DebugServer#debugStepOver()},   {@link DebugServer#debugStepInto()}or   {@link DebugServer#debugStepReturn()} method call.  
 * @param file - file path within <code>app</code> folder of the Rhodesapplication, e.g. <code>""application.rb""</code>.
 * @param line - effective line number (starting with 1).
 * @param className - class name of the current object ("""" if none).
 * @param method - name of the current method ("""" if none).
 */
public void step(String file,int line,String className,String method);",0.9555160142348754
2809,"/** 
 * Watch Begin-Of-List. Called before the first   {@link #watch(DebugVariableType,String,String)}callback for the particular type of variables.  
 * @param type - type of variables ({@link DebugVariableType}). 
 */
public void watchBOL(DebugVariableType type);","/** 
 * Watch Begin-Of-List. Called before the first  {@link #watch(DebugVariableType,String,String)}callback for the particular type of variables.  
 * @param type - type of variables ({@link DebugVariableType}). 
 */
public void watchBOL(DebugVariableType type);",0.998109640831758
2810,"/** 
 * Watch End-Of-List. Called after the last   {@link #watch(DebugVariableType,String,String)}callback for the particular type of variables.  
 * @param type - type of variables ({@link DebugVariableType}). 
 */
public void watchEOL(DebugVariableType type);","/** 
 * Watch End-Of-List. Called after the last  {@link #watch(DebugVariableType,String,String)}callback for the particular type of variables.  
 * @param type - type of variables ({@link DebugVariableType}). 
 */
public void watchEOL(DebugVariableType type);",0.9980806142034548
2811,"/** 
 * Called when the breakpoint is reached.
 * @param file - file path within <code>app</code> folder of the Rhodes application,e.g. <code>""application.rb""</code>.
 * @param line - effective line number (starting with 1).
 * @param className - class name of the current object ("""" if none).
 * @param method - name of the current method ("""" if none).
 */
public void breakpoint(String file,int line,String className,String method);","/** 
 * Called when the breakpoint is reached.
 * @param file - file path within <code>app</code> folder of the Rhodesapplication, e.g. <code>""application.rb""</code>.
 * @param line - effective line number (starting with 1).
 * @param className - class name of the current object ("""" if none).
 * @param method - name of the current method ("""" if none).
 */
public void breakpoint(String file,int line,String className,String method);",0.9976958525345622
2812,"public void evaluate(String expression){
  debugServer.send(""String_Node_Str"" + expression);
}","public void evaluate(String expression){
  try {
    expression=URLEncoder.encode(expression,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  debugServer.send(""String_Node_Str"" + expression);
}",0.6025641025641025
2813,"/** 
 * Resume a normal execution of the Rhodes application (after the stop at breakpoint or after   {@link #debugStep()} method call). 
 */
public void debugResume(){
  if (this.debugProtocol != null)   this.debugProtocol.resume();
}","/** 
 * Resume a normal execution of the Rhodes application (after the stop at breakpoint or after   {@link #debugStepInto()},   {@link #debugStepOver()} or {@link #debugStepReturn()} method call). 
 */
public void debugResume(){
  if (this.debugProtocol != null)   this.debugProtocol.resume();
}",0.8830188679245283
2814,"/** 
 * Evaluate Ruby expression or execute arbitrary Ruby code. 
 * @param expression - expression to evaluate or Ruby code to execute.
 * @param includeCode - if <code>true</code>, return the original Ruby expression/codetogether with the calculated value though {@link IDebugCallback#evaluation(String,String)} method call.If <code>includeCode</code> is false, the result of evaluation/execution is returned by the  {@link IDebugCallback#evaluation(String)} method call.
 */
public void debugEvaluate(String expression,boolean includeCode){
  if (this.debugProtocol != null)   this.debugProtocol.evaluate(expression,includeCode);
}","/** 
 * Evaluate Ruby expression or execute arbitrary Ruby code. 
 * @param expression - expression to evaluate or Ruby code to execute.
 * @param includeCode - if <code>true</code>, return the original Ruby expression/codetogether with the calculated value though {@link IDebugCallback#evaluation(String,String)} method call.If <code>includeCode</code> is <code>false</code>, the result of evaluation/execution is returned by the  {@link IDebugCallback#evaluation(String)} method call.
 */
public void debugEvaluate(String expression,boolean includeCode){
  if (this.debugProtocol != null)   this.debugProtocol.evaluate(expression,includeCode);
}",0.9898516783762684
2815,"/** 
 * Variable watch. Called for each variable after the call of  {@link DebugServer#gebugGetVariables()}. 
 * @param type - Ruby variable type {@link DebugVariableType}.
 * @param variable - name of the local variable.
 * @param value - current value of the local variable.
 */
public void watch(DebugVariableType type,String variable,String value);","/** 
 * Variable watch. Called for each variable after the call of  {@link DebugServer#debugGetVariables()} or {@link DebugServer#debugGetVariables(DebugVariableType[])}. 
 * @param type - Ruby variable type {@link DebugVariableType}.
 * @param variable - name of the local variable.
 * @param value - current value of the local variable.
 */
public void watch(DebugVariableType type,String variable,String value);",0.8172323759791122
2816,"protected void processCommand(String cmd){
  boolean bp;
  if (cmd.endsWith(""String_Node_Str""))   cmd=cmd.substring(0,cmd.length() - 1);
  if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.CONNECTED;
    debugServer.send(""String_Node_Str"");
    debugCallback.connected();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.RUNNING;
    debugCallback.resumed();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.EXITED;
    debugCallback.exited();
  }
 else   if ((bp=cmd.startsWith(""String_Node_Str"")) || cmd.startsWith(""String_Node_Str"")) {
    this.state=bp ? DebugState.BREAKPOINT : DebugState.STEP;
    String[] brp=cmd.split(""String_Node_Str"");
    this.filePosition=brp[1].replace('|',':').replace('\\','/');
    this.linePosition=Integer.parseInt(brp[2]);
    this.classPosition=brp[3].replace('#',':');
    this.methodPosition=brp[4];
    if (bp)     debugCallback.breakpoint(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
 else     debugCallback.step(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.evaluation(cmd.substring(3).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    String var=cmd.substring(4);
    String val=""String_Node_Str"";
    int val_idx=var.indexOf(':');
    if (val_idx >= 0) {
      val=var.substring(val_idx + 1).replace(""String_Node_Str"",""String_Node_Str"");
      var=var.substring(0,val_idx).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    debugCallback.evaluation(var,val);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    DebugVariableType vt;
switch (cmd.charAt(2)) {
case 'G':
      vt=DebugVariableType.GLOBAL;
    break;
case 'C':
  vt=DebugVariableType.CLASS;
break;
case 'I':
vt=DebugVariableType.INSTANCE;
break;
default :
vt=DebugVariableType.LOCAL;
}
String var=cmd.substring(4);
String val=""String_Node_Str"";
int val_idx=var.indexOf(':');
if (val_idx >= 0) {
val=var.substring(val_idx + 1).replace(""String_Node_Str"",""String_Node_Str"");
var=var.substring(0,val_idx);
}
debugCallback.watch(vt,var,val);
}
 else {
debugCallback.unknown(cmd);
}
}","protected void processCommand(String cmd){
  boolean bp;
  if (cmd.endsWith(""String_Node_Str""))   cmd=cmd.substring(0,cmd.length() - 1);
  if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.CONNECTED;
    debugServer.send(""String_Node_Str"");
    debugCallback.connected();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.RUNNING;
    debugCallback.resumed();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.EXITED;
    debugCallback.exited();
  }
 else   if ((bp=cmd.startsWith(""String_Node_Str"")) || cmd.startsWith(""String_Node_Str"")) {
    this.state=bp ? DebugState.BREAKPOINT : DebugState.STEP;
    String[] brp=cmd.split(""String_Node_Str"");
    this.filePosition=brp[1].replace('|',':').replace('\\','/');
    this.linePosition=Integer.parseInt(brp[2]);
    this.classPosition=brp[3].replace('#',':');
    this.methodPosition=brp[4];
    if (bp)     debugCallback.breakpoint(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
 else     debugCallback.step(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.evaluation(cmd.substring(3).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    String var=cmd.substring(4);
    String val=""String_Node_Str"";
    int val_idx=var.indexOf(':');
    if (val_idx >= 0) {
      val=var.substring(val_idx + 1).replace(""String_Node_Str"",""String_Node_Str"");
      try {
        var=URLDecoder.decode(var.substring(0,val_idx),""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        var=var.substring(0,val_idx);
      }
    }
    debugCallback.evaluation(var,val);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    DebugVariableType vt;
switch (cmd.charAt(2)) {
case 'G':
      vt=DebugVariableType.GLOBAL;
    break;
case 'C':
  vt=DebugVariableType.CLASS;
break;
case 'I':
vt=DebugVariableType.INSTANCE;
break;
default :
vt=DebugVariableType.LOCAL;
}
String var=cmd.substring(4);
String val=""String_Node_Str"";
int val_idx=var.indexOf(':');
if (val_idx >= 0) {
val=var.substring(val_idx + 1).replace(""String_Node_Str"",""String_Node_Str"");
var=var.substring(0,val_idx);
}
debugCallback.watch(vt,var,val);
}
 else {
debugCallback.unknown(cmd);
}
}",0.9546712066397106
2817,"protected void processCommand(String cmd){
  if (cmd.endsWith(""String_Node_Str""))   cmd=cmd.substring(0,cmd.length() - 1);
  if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.CONNECTED;
    debugServer.send(""String_Node_Str"");
    debugCallback.connected();
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    this.state=DebugState.STOPPED;
    String[] bp=cmd.split(""String_Node_Str"");
    debugCallback.breakpoint(bp[1].replace('|',':').replace('\\','/'),Integer.parseInt(bp[2]));
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    String[] bp=cmd.split(""String_Node_Str"");
    debugCallback.evaluation(bp[1].replace(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    debugCallback.unknown(cmd);
  }
}","protected void processCommand(String cmd){
  if (cmd.endsWith(""String_Node_Str""))   cmd=cmd.substring(0,cmd.length() - 1);
  if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.CONNECTED;
    debugServer.send(""String_Node_Str"");
    debugCallback.connected();
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    this.state=DebugState.STOPPED;
    String[] bp=cmd.split(""String_Node_Str"");
    debugCallback.breakpoint(bp[1].replace('|',':').replace('\\','/'),Integer.parseInt(bp[2]));
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.evaluation(cmd.substring(3).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    debugCallback.unknown(cmd);
  }
}",0.9535689535689535
2818,"protected void processCommand(String cmd){
  boolean bp;
  if (cmd.endsWith(""String_Node_Str""))   cmd=cmd.substring(0,cmd.length() - 1);
  if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.CONNECTED;
    debugServer.send(""String_Node_Str"");
    debugCallback.connected();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.RUNNING;
    debugCallback.resumed();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.EXITED;
    debugCallback.exited();
  }
 else   if ((bp=cmd.startsWith(""String_Node_Str"")) || cmd.startsWith(""String_Node_Str"")) {
    this.state=bp ? DebugState.BREAKPOINT : DebugState.STEP;
    String[] brp=cmd.split(""String_Node_Str"");
    this.filePosition=brp[1].replace('|',':').replace('\\','/');
    this.linePosition=Integer.parseInt(brp[2]);
    this.classPosition=brp[3].replace('#',':');
    this.methodPosition=brp[4];
    if (bp)     debugCallback.breakpoint(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
 else     debugCallback.step(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.evaluation(cmd.substring(3).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    String var=cmd.substring(4);
    String val=""String_Node_Str"";
    int val_idx=var.indexOf(':');
    if (val_idx >= 0) {
      val=var.substring(val_idx + 1).replace(""String_Node_Str"",""String_Node_Str"");
      try {
        var=URLDecoder.decode(var.substring(0,val_idx),""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        var=var.substring(0,val_idx);
      }
    }
    debugCallback.evaluation(var,val);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    DebugVariableType vt=DebugVariableType.variableTypeById(cmd.charAt(2));
    String var=cmd.substring(4);
    String val=""String_Node_Str"";
    int val_idx=var.indexOf(':');
    if (val_idx >= 0) {
      val=var.substring(val_idx + 1).replace(""String_Node_Str"",""String_Node_Str"");
      var=var.substring(0,val_idx);
    }
    debugCallback.watch(vt,var,val);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.watchBOL(DebugVariableType.variableTypeById(cmd.charAt(7)));
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.watchEOL(DebugVariableType.variableTypeById(cmd.charAt(5)));
  }
 else {
    debugCallback.unknown(cmd);
  }
}","protected void processCommand(String cmd){
  boolean bp;
  if (cmd.endsWith(""String_Node_Str""))   cmd=cmd.substring(0,cmd.length() - 1);
  if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.CONNECTED;
    debugServer.send(""String_Node_Str"");
    debugCallback.connected();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.RUNNING;
    debugCallback.resumed();
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    this.state=DebugState.EXITED;
    debugCallback.exited();
  }
 else   if ((bp=cmd.startsWith(""String_Node_Str"")) || cmd.startsWith(""String_Node_Str"")) {
    this.state=bp ? DebugState.BREAKPOINT : DebugState.STEP;
    String[] brp=cmd.split(""String_Node_Str"");
    this.filePosition=brp[1].replace('|',':').replace('\\','/');
    this.linePosition=Integer.parseInt(brp[2]);
    this.classPosition=brp[3].replace('#',':');
    this.methodPosition=brp[4];
    if (bp)     debugCallback.breakpoint(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
 else     debugCallback.step(this.filePosition,this.linePosition,this.classPosition,this.methodPosition);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    boolean valid=cmd.charAt(4) == '0';
    String var=cmd.substring(6);
    String val=""String_Node_Str"";
    int val_idx=var.indexOf(':');
    if (val_idx >= 0) {
      val=var.substring(val_idx + 1);
      try {
        var=URLDecoder.decode(var.substring(0,val_idx),""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        var=var.substring(0,val_idx);
      }
    }
    debugCallback.evaluation(valid,var,val);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    DebugVariableType vt=DebugVariableType.variableTypeById(cmd.charAt(2));
    String var=cmd.substring(4);
    String val=""String_Node_Str"";
    int val_idx=var.indexOf(':');
    if (val_idx >= 0) {
      val=var.substring(val_idx + 1).replace(""String_Node_Str"",""String_Node_Str"");
      var=var.substring(0,val_idx);
    }
    debugCallback.watch(vt,var,val);
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.watchBOL(DebugVariableType.variableTypeById(cmd.charAt(7)));
  }
 else   if (cmd.startsWith(""String_Node_Str"")) {
    debugCallback.watchEOL(DebugVariableType.variableTypeById(cmd.charAt(5)));
  }
 else {
    debugCallback.unknown(cmd);
  }
}",0.941848602326056
2819,"public void evaluate(String expression,boolean includeName){
  debugServer.send((includeName ? ""String_Node_Str"" : ""String_Node_Str"") + expression);
}","public void evaluate(String expression){
  debugServer.send(""String_Node_Str"" + expression);
}",0.7704918032786885
2820,"/** 
 * Evaluate Ruby expression or execute arbitrary Ruby code. 
 * @param expression - expression to evaluate or Ruby code to execute.
 * @param includeCode - if <code>true</code>, returns the original Ruby expression/codetogether with the calculated value though {@link IDebugCallback#evaluation(String,String)} method call.If <code>includeCode</code> is <code>false</code>, the result of evaluation/execution is returned by the  {@link IDebugCallback#evaluation(String)} method call (not recommended!).
 */
public void debugEvaluate(String expression,boolean includeCode){
  if (this.debugProtocol != null)   this.debugProtocol.evaluate(expression,includeCode);
}","/** 
 * Evaluate Ruby expression or execute arbitrary Ruby code. 
 * @param expression - expression to evaluate or Ruby code to execute.Result of evaluation/execution is returned by the {@link IDebugCallback#evaluation(boolean,String,String)} method call.
 */
public void debugEvaluate(String expression){
  if (this.debugProtocol != null)   this.debugProtocol.evaluate(expression);
}",0.5480494766888677
2821,"/** 
 * Called after the   {@link DebugServer#debugEvaluate(String,boolean)} method call when second parameter is <code>true</code>.
 * @param code - original Ruby code. 
 * @param value - the resulted value of the evaluated/executed Ruby code. 
 */
public void evaluation(String code,String value);","/** 
 * Called after the   {@link DebugServer#debugEvaluate(String)} method call.
 * @param valid - <code>true</code> if evaluated successfully, <code>false</code> otherwise. 
 * @param code - original Ruby code. 
 * @param value - the resulted value of the evaluated/executed Ruby codeor the error message if evaliation failed (when <code>valid</code> is <code>false</code>). 
 */
public void evaluation(boolean valid,String code,String value);",0.5725806451612904
2822,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(String modelName,String modelParams,IProgressMonitor monitor) throws CoreException {
  try {
    monitor.beginTask(""String_Node_Str"" + modelName,2);
    monitor.worked(1);
    monitor.setTaskName(""String_Node_Str"");
    if (null != m_projectLocation) {
      m_rhogenAdapter.generateModel(m_projectLocation,modelName,modelParams);
    }
 else {
    }
    m_currentProject.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    monitor.worked(1);
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 */
private void doFinish(String modelName,String modelParams,IProgressMonitor monitor) throws CoreException {
  try {
    monitor.beginTask(""String_Node_Str"" + modelName,2);
    monitor.worked(1);
    monitor.setTaskName(""String_Node_Str"");
    if (null != m_projectLocation) {
      m_rhogenAdapter.generateModel(m_projectLocation,modelName,modelParams);
    }
 else {
    }
    m_currentProject.refreshLocal(IResource.DEPTH_INFINITE,monitor);
    monitor.worked(1);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.998546511627907
2823,"/** 
 * Saves the multi-page editor's document.
 */
public void doSave(IProgressMonitor monitor){
}","/** 
 * Saves the multi-page editor's document.
 */
public void doSave(IProgressMonitor monitor){
  m_editor.doSave(monitor);
}",0.8761061946902655
2824,"/** 
 * Calculates the contents of page 2 when the it is activated.
 */
protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  try {
    if (newPageIndex == 0) {
      String pathToFile=getFileLocation();
      m_ymlFile=new AppYmlFile(pathToFile);
      m_appLogText.setText(m_ymlFile.getAppLog());
      m_rhodesPathText.setText(m_ymlFile.getSdkPath());
      m_appNameText.setText(m_ymlFile.getAppName());
      showCapabilitiesText(m_ymlFile.getCapabilities());
      return;
    }
    if (newPageIndex == 1) {
      m_editor.setInput(new FileEditorInput(getFile()));
      getFile().getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
}","/** 
 * Calculates the contents of page 2 when the it is activated.
 */
protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  try {
    if (newPageIndex == 0) {
      m_editor.doSave(null);
      String pathToFile=getFileLocation();
      m_ymlFile=null;
      m_ymlFile=new AppYmlFile(pathToFile);
      String sdk=m_ymlFile.getSdkPath();
      String appName=m_ymlFile.getAppName();
      String logName=m_ymlFile.getAppLog();
      m_appLogText.setText(logName);
      m_rhodesPathText.setText(sdk);
      m_appNameText.setText(appName);
      showCapabilitiesText(m_ymlFile.getCapabilities());
      return;
    }
    if (newPageIndex == 1) {
      m_editor.setInput(new FileEditorInput(getFile()));
      getFile().getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.8091690544412607
2825,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  ConsoleHelper.consolePrint(""String_Node_Str"");
  ConsoleHelper.consoleAppPrint(""String_Node_Str"");
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  ConsoleHelper.consoleAppPrint(""String_Node_Str"");
  ConsoleHelper.consolePrint(""String_Node_Str"");
}",0.9850746268656716
2826,"public void setAndroidEmuName(String newName){
}","public void setAndroidEmuName(String newName){
  super.set(""String_Node_Str"",""String_Node_Str"",newName);
}",0.6233766233766234
2827,"public String getAndroidEmuName(){
  return ""String_Node_Str"";
}","public String getAndroidEmuName(){
  return super.get(""String_Node_Str"",""String_Node_Str"");
}",0.8152866242038217
2828,"public void save() throws FileNotFoundException {
  if (m_filePath.length() != 0) {
    StringBuilder sb=new StringBuilder();
    Iterator it=m_dataStorage.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry pairs=(Map.Entry)it.next();
      Object key=(Object)pairs.getKey();
      Object val=pairs.getValue();
      saveSelector(sb,""String_Node_Str"",key.toString(),val);
    }
    ConsoleHelper.consolePrint(sb.toString());
  }
}","public void save() throws FileNotFoundException {
  try {
    if (m_filePath.length() != 0) {
      String dataString=null;
      File outFile=new File(m_filePath);
      FileOutputStream os=new FileOutputStream(outFile);
      if (SNAKE_YAML_SAVE) {
        org.yaml.snakeyaml.Yaml dumpEncoder=new org.yaml.snakeyaml.Yaml();
        dataString=dumpEncoder.dump(m_dataStorage);
      }
 else {
        StringBuilder sb=new StringBuilder();
        Iterator it=m_dataStorage.entrySet().iterator();
        while (it.hasNext()) {
          Map.Entry pairs=(Map.Entry)it.next();
          Object key=(Object)pairs.getKey();
          Object val=pairs.getValue();
          saveSelector(sb,""String_Node_Str"",key.toString(),val);
        }
        dataString=sb.toString();
      }
      os.write(dataString.getBytes());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.625
2829,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    m_projectName=configuration.getAttribute(projectNameCfgAttribute,""String_Node_Str"");
    m_platformName=configuration.getAttribute(platforrmCfgAttribute,""String_Node_Str"");
    m_appLogName=configuration.getAttribute(prjectLogFileName,""String_Node_Str"");
    m_isClean=configuration.getAttribute(isCleanAttribute,false);
    m_onDevice=configuration.getAttribute(platforrmDeviceCfgAttribute,false);
    final EPlatformType type=RhodesAdapter.convertPlatformFromDesc(m_platformName);
    if (m_projectName == null || m_projectName.length() == 0 || m_platformName == null || m_platformName.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (m_isClean) {
      ConsoleHelper.consolePrint(""String_Node_Str"");
      rhodesAdapter.cleanPlatform(project.getLocation().toOSString(),type);
    }
    Thread cancelingThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          ConsoleHelper.consolePrint(""String_Node_Str"");
          if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) == 0) {
            ConsoleHelper.showAppConsole();
            startLogOutput(project,type);
          }
 else {
            ConsoleHelper.consolePrint(""String_Node_Str"");
          }
          setProcessFinished(true);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    cancelingThread.start();
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          return;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    ConsoleHelper.cleanBuildConsole();
    m_projectName=configuration.getAttribute(projectNameCfgAttribute,""String_Node_Str"");
    m_platformName=configuration.getAttribute(platforrmCfgAttribute,""String_Node_Str"");
    m_appLogName=configuration.getAttribute(prjectLogFileName,""String_Node_Str"");
    m_isClean=configuration.getAttribute(isCleanAttribute,false);
    m_onDevice=configuration.getAttribute(platforrmDeviceCfgAttribute,false);
    final EPlatformType type=RhodesAdapter.convertPlatformFromDesc(m_platformName);
    if (m_projectName == null || m_projectName.length() == 0 || m_platformName == null || m_platformName.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (!project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (m_isClean) {
      ConsoleHelper.consolePrint(""String_Node_Str"");
      rhodesAdapter.cleanPlatform(project.getLocation().toOSString(),type);
    }
    Thread cancelingThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          ConsoleHelper.consolePrint(""String_Node_Str"");
          if (rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice) == 0) {
            ConsoleHelper.showAppConsole();
            startLogOutput(project,type);
          }
 else {
            ConsoleHelper.consolePrint(""String_Node_Str"");
          }
          setProcessFinished(true);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    cancelingThread.start();
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          return;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
}",0.9919103920348477
2830,"@Override public void initializeFrom(ILaunchConfiguration configuration){
  try {
    Control scrollParent=getLaunchConfigurationDialog().getActiveTab().getControl().getParent();
    if (scrollParent instanceof ScrolledComposite) {
      ScrolledComposite sc=(ScrolledComposite)scrollParent;
      sc.setMinSize(scrollParent.computeSize(minTabSize,SWT.DEFAULT));
    }
    String selProjectName=null, selProjectPlatform=null, selAndroidEmuName=null;
    selProjectName=configuration.getAttribute(RhogenLaunchDelegate.projectNameCfgAttribute,""String_Node_Str"");
    selProjectPlatform=configuration.getAttribute(RhogenLaunchDelegate.platforrmCfgAttribute,""String_Node_Str"");
    boolean onDevice=configuration.getAttribute(RhogenLaunchDelegate.platforrmDeviceCfgAttribute,false);
    boolean isClean=configuration.getAttribute(RhogenLaunchDelegate.isCleanAttribute,false);
    if (selProjectName != ""String_Node_Str"") {
      m_selProject=ResourcesPlugin.getWorkspace().getRoot().getProject(selProjectName);
      m_appNameText.setText(selProjectName);
    }
    setPlatformCombo(selProjectPlatform,onDevice);
    m_cleanButton.setSelection(isClean);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","@Override public void initializeFrom(ILaunchConfiguration configuration){
  try {
    Control scrollParent=getLaunchConfigurationDialog().getActiveTab().getControl().getParent();
    if (scrollParent instanceof ScrolledComposite) {
      ScrolledComposite sc=(ScrolledComposite)scrollParent;
      sc.setMinSize(scrollParent.computeSize(minTabSize,SWT.DEFAULT));
    }
    String selProjectName=null, selProjectPlatform=null, selAndroidEmuName=null;
    selProjectName=configuration.getAttribute(RhogenLaunchDelegate.projectNameCfgAttribute,""String_Node_Str"");
    selProjectPlatform=configuration.getAttribute(RhogenLaunchDelegate.platforrmCfgAttribute,""String_Node_Str"");
    boolean onDevice=configuration.getAttribute(RhogenLaunchDelegate.platforrmDeviceCfgAttribute,false);
    boolean isClean=configuration.getAttribute(RhogenLaunchDelegate.isCleanAttribute,false);
    selAndroidEmuName=configuration.getAttribute(RhogenLaunchDelegate.androidEmuNameAttribute,""String_Node_Str"");
    if (selProjectName != ""String_Node_Str"") {
      m_selProject=ResourcesPlugin.getWorkspace().getRoot().getProject(selProjectName);
      m_appNameText.setText(selProjectName);
      m_adroidEmuNameText.setText(selAndroidEmuName);
      m_ymlFile=AppYmlFile.createFromProject(m_selProject);
    }
    setPlatformCombo(selProjectPlatform,onDevice);
    m_cleanButton.setSelection(isClean);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}",0.8922397940419272
2831,"private void setAndroidEmuName(){
  try {
    showAndroidEmuName(false);
    String selProjectPlatform=m_configuration.getAttribute(RhogenLaunchDelegate.platforrmCfgAttribute,""String_Node_Str"");
    String emuName=m_configuration.getAttribute(RhogenLaunchDelegate.androidEmuNameAttribute,""String_Node_Str"");
    if (selProjectPlatform.equals(RhodesAdapter.platformAdroid)) {
      showAndroidEmuName(true);
      if (!m_adroidEmuNameText.getText().equals(emuName)) {
        m_adroidEmuNameText.setText(emuName);
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","private void setAndroidEmuName(){
  try {
    showAndroidEmuName(false);
    String selProjectPlatform=m_configuration.getAttribute(RhogenLaunchDelegate.platforrmCfgAttribute,""String_Node_Str"");
    String emuName=m_configuration.getAttribute(RhogenLaunchDelegate.androidEmuNameAttribute,""String_Node_Str"");
    if (selProjectPlatform.equals(RhodesAdapter.platformAdroid)) {
      showAndroidEmuName(true);
      m_adroidEmuNameText.setText(emuName);
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.9351351351351352
2832,"@Override public void performApply(ILaunchConfigurationWorkingCopy configuration){
  m_configuration=configuration;
  try {
    m_ymlFile=AppYmlFile.createFromProject(m_selProject);
    if (m_ymlFile != null) {
      m_configuration.setAttribute(RhogenLaunchDelegate.androidVersionAttribute,m_ymlFile.getAndroidVer());
      m_configuration.setAttribute(RhogenLaunchDelegate.blackberryVersionAttribute,m_ymlFile.getBlackberryVer());
      m_configuration.setAttribute(RhogenLaunchDelegate.androidEmuNameAttribute,m_ymlFile.getAndroidEmuName());
      setPlatformVersionCombo();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}","@Override public void performApply(ILaunchConfigurationWorkingCopy configuration){
  m_configuration=configuration;
}",0.3031088082901554
2833,"public void modifyText(ModifyEvent e){
}","public void modifyText(ModifyEvent e){
  if (m_configuration != null && m_ymlFile != null) {
    try {
      m_configuration.setAttribute(RhogenLaunchDelegate.androidEmuNameAttribute,m_adroidEmuNameText.getText());
      m_ymlFile.setAndroidEmuName(m_adroidEmuNameText.getText());
      m_ymlFile.save();
      showApplyButton();
    }
 catch (    FileNotFoundException e1) {
      e1.printStackTrace();
    }
  }
}",0.1758241758241758
2834,"@SuppressWarnings(""String_Node_Str"") @Override public void createControl(final Composite parent){
  Composite composite=SWTFactory.createComposite(parent,1,1,GridData.FILL_HORIZONTAL);
  m_comp=composite;
  Composite namecomp=SWTFactory.createComposite(composite,composite.getFont(),3,1,GridData.FILL_HORIZONTAL,0,0);
  Label label=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_appNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY,1);
  m_appNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(RhogenLaunchDelegate.projectNameCfgAttribute,m_appNameText.getText());
        showApplyButton();
      }
    }
  }
);
  Button browseButton=SWTFactory.createPushButton(namecomp,""String_Node_Str"",null);
  browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectProjectDialog();
    }
  }
);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_selectPlatformCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,platformItems);
  m_selectPlatformCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodePlatformInformation(m_selectPlatformCombo.getText());
        showApplyButton();
      }
    }
  }
);
  GridData comboAligment=new GridData();
  comboAligment.horizontalAlignment=GridData.FILL;
  m_selectPlatformVersionCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,androidVersions);
  m_selectPlatformVersionCombo.setLayoutData(comboAligment);
  m_selectPlatformVersionCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodeVersionCombo(m_selectPlatformVersionCombo.getText());
        showApplyButton();
      }
    }
  }
);
  m_androidEmuNameLabel=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_adroidEmuNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY,1);
  m_adroidEmuNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
    }
  }
);
  Button changeButton=SWTFactory.createPushButton(namecomp,""String_Node_Str"",null);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodeAndroidEmuName(m_adroidEmuNameText.getText());
        showApplyButton();
      }
    }
  }
);
  GridData checkBoxAligment=new GridData();
  checkBoxAligment.horizontalAlignment=GridData.FILL;
  checkBoxAligment.horizontalSpan=3;
  m_cleanButton=new Button(composite,SWT.CHECK);
  m_cleanButton.setText(""String_Node_Str"");
  m_cleanButton.setSelection(false);
  m_cleanButton.setLayoutData(checkBoxAligment);
  m_cleanButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(RhogenLaunchDelegate.isCleanAttribute,m_cleanButton.getSelection());
        showApplyButton();
      }
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") @Override public void createControl(final Composite parent){
  Composite composite=SWTFactory.createComposite(parent,1,1,GridData.FILL_HORIZONTAL);
  m_comp=composite;
  Composite namecomp=SWTFactory.createComposite(composite,composite.getFont(),3,1,GridData.FILL_HORIZONTAL,0,0);
  Label label=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_appNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE | SWT.READ_ONLY,1);
  m_appNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(RhogenLaunchDelegate.projectNameCfgAttribute,m_appNameText.getText());
        showApplyButton();
      }
    }
  }
);
  Button browseButton=SWTFactory.createPushButton(namecomp,""String_Node_Str"",null);
  browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectProjectDialog();
    }
  }
);
  SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_selectPlatformCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,platformItems);
  m_selectPlatformCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodePlatformInformation(m_selectPlatformCombo.getText());
        showApplyButton();
      }
    }
  }
);
  GridData comboAligment=new GridData();
  comboAligment.horizontalAlignment=GridData.FILL;
  m_selectPlatformVersionCombo=SWTFactory.createCombo(namecomp,SWT.READ_ONLY,1,androidVersions);
  m_selectPlatformVersionCombo.setLayoutData(comboAligment);
  m_selectPlatformVersionCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        encodeVersionCombo(m_selectPlatformVersionCombo.getText());
        showApplyButton();
      }
    }
  }
);
  m_androidEmuNameLabel=SWTFactory.createLabel(namecomp,""String_Node_Str"",1);
  m_adroidEmuNameText=SWTFactory.createText(namecomp,SWT.BORDER | SWT.SINGLE,1);
  m_adroidEmuNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (m_configuration != null && m_ymlFile != null) {
        try {
          m_configuration.setAttribute(RhogenLaunchDelegate.androidEmuNameAttribute,m_adroidEmuNameText.getText());
          m_ymlFile.setAndroidEmuName(m_adroidEmuNameText.getText());
          m_ymlFile.save();
          showApplyButton();
        }
 catch (        FileNotFoundException e1) {
          e1.printStackTrace();
        }
      }
    }
  }
);
  GridData checkBoxAligment=new GridData();
  checkBoxAligment.horizontalAlignment=GridData.FILL;
  checkBoxAligment.horizontalSpan=3;
  m_cleanButton=new Button(composite,SWT.CHECK);
  m_cleanButton.setText(""String_Node_Str"");
  m_cleanButton.setSelection(false);
  m_cleanButton.setLayoutData(checkBoxAligment);
  m_cleanButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (m_configuration != null) {
        m_configuration.setAttribute(RhogenLaunchDelegate.isCleanAttribute,m_cleanButton.getSelection());
        showApplyButton();
      }
    }
  }
);
}",0.9196033562166284
2835,"public RhogenComboFieldEditor(String name,String labelText,String[][] entryNamesAndValues,Composite parent){
  init(name,labelText);
  Assert.isTrue(checkArray(entryNamesAndValues));
  fEntryNamesAndValues=entryNamesAndValues;
  createControl(parent);
}","public RhogenComboFieldEditor(String name,String labelText,String[][] entryNamesAndValues,Composite parent,IItemAddedNotifier notifier){
  init(name,labelText);
  Assert.isTrue(checkArray(entryNamesAndValues));
  fEntryNamesAndValues=entryNamesAndValues;
  fNewValueNotify=notifier;
  createControl(parent);
}",0.900355871886121
2836,"protected void doFillIntoGrid(Composite parent,int numColumns){
  int comboC=1;
  if (numColumns > 1) {
    comboC=numColumns - 1;
  }
  Control control=getLabelControl(parent);
  GridData gd=new GridData();
  gd.horizontalSpan=1;
  control.setLayoutData(gd);
  control=getComboBoxControl(parent);
  gd=new GridData();
  gd.horizontalSpan=comboC;
  gd.horizontalAlignment=GridData.FILL;
  control.setLayoutData(gd);
  control.setFont(parent.getFont());
}","protected void doFillIntoGrid(final Composite parent,int numColumns){
  int comboC=1;
  if (numColumns > 1) {
    comboC=numColumns - 1;
  }
  Control control=getLabelControl(parent);
  GridData gd=new GridData();
  gd.horizontalSpan=1;
  control.setLayoutData(gd);
  control=getComboBoxControl(parent);
  gd=new GridData();
  gd.horizontalAlignment=GridData.FILL;
  control.setLayoutData(gd);
  control.setFont(parent.getFont());
  fNewVersin=new Button(parent,SWT.PUSH);
  fNewVersin.setText(""String_Node_Str"");
  fNewVersin.setLayoutData(gd);
  fNewVersin.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final Shell parentShell=parent.getShell();
      InputDialog inputDlg=new InputDialog(parentShell,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
      inputDlg.open();
      if (fNewValueNotify != null) {
        fNewValueNotify.addNewValue(inputDlg.getValue());
      }
      fCombo.add(inputDlg.getValue());
      super.widgetSelected(e);
    }
  }
);
}",0.5691382765531062
2837,"protected void adjustForNumColumns(int numColumns){
  if (numColumns > 1) {
    Control control=getLabelControl();
    int left=numColumns;
    if (control != null) {
      ((GridData)control.getLayoutData()).horizontalSpan=1;
      left=left - 1;
    }
    ((GridData)fCombo.getLayoutData()).horizontalSpan=left;
  }
 else {
    Control control=getLabelControl();
    if (control != null) {
      ((GridData)control.getLayoutData()).horizontalSpan=1;
    }
    ((GridData)fCombo.getLayoutData()).horizontalSpan=1;
  }
}","protected void adjustForNumColumns(int numColumns){
  if (numColumns > 1) {
    Control control=getLabelControl();
    int left=numColumns;
    if (control != null) {
      ((GridData)control.getLayoutData()).horizontalSpan=1;
      left=left - 1;
    }
  }
 else {
    Control control=getLabelControl();
    if (control != null) {
      ((GridData)control.getLayoutData()).horizontalSpan=1;
    }
    ((GridData)fCombo.getLayoutData()).horizontalSpan=1;
  }
}",0.7122448979591837
2838,"public int getNumberOfControls(){
  return 2;
}","public int getNumberOfControls(){
  return 3;
}",0.9787234042553192
2839,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    m_projectName=configuration.getAttribute(projectNameCfgAttribute,""String_Node_Str"");
    m_platformName=configuration.getAttribute(platforrmCfgAttribute,""String_Node_Str"");
    m_appLogName=configuration.getAttribute(prjectLogFileName,""String_Node_Str"");
    if (configuration.getAttribute(platforrmDeviceCfgAttribute,""String_Node_Str"").equals(""String_Node_Str"")) {
      m_onDevice=true;
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (project == null || m_platformName == null || m_platformName.length() == 0 || !project.isOpen()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    Thread cancelingThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          EPlatformType type=RhodesAdapter.convertPlatformFromDesc(m_platformName);
          rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice);
          setProcessFinished(true);
          ConsoleHelper.showAppConsole();
          startLogOutput(project,type);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    cancelingThread.start();
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          return;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    setProcessFinished(false);
    rhodesLogHelper.stopLog();
    m_projectName=configuration.getAttribute(projectNameCfgAttribute,""String_Node_Str"");
    m_platformName=configuration.getAttribute(platforrmCfgAttribute,""String_Node_Str"");
    m_appLogName=configuration.getAttribute(prjectLogFileName,""String_Node_Str"");
    if (configuration.getAttribute(platforrmDeviceCfgAttribute,""String_Node_Str"").equals(""String_Node_Str"")) {
      m_onDevice=true;
    }
    if (m_projectName == null || m_projectName.length() == 0 || m_platformName == null || m_platformName.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    Thread cancelingThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          EPlatformType type=RhodesAdapter.convertPlatformFromDesc(m_platformName);
          rhodesAdapter.buildApp(project.getLocation().toOSString(),type,m_onDevice);
          setProcessFinished(true);
          ConsoleHelper.showAppConsole();
          startLogOutput(project,type);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    cancelingThread.start();
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          return;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(e.getMessage());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  monitor.done();
}",0.9078411405295316
2840,"@Override public void setDefaults(ILaunchConfigurationWorkingCopy configuration){
  m_configuration=configuration;
  if (m_selProject == null) {
    m_selProject=getSelectedProject();
  }
  if (m_selProject != null) {
    configuration.setAttribute(RhogenLaunchDelegate.projectNameCfgAttribute,m_selProject.getName());
  }
  configuration.setAttribute(RhogenLaunchDelegate.platforrmCfgAttribute,(String)""String_Node_Str"");
  configuration.setAttribute(RhogenLaunchDelegate.platforrmDeviceCfgAttribute,(String)""String_Node_Str"");
}","@Override public void setDefaults(ILaunchConfigurationWorkingCopy configuration){
  m_configuration=configuration;
  if (m_selProject == null) {
    m_selProject=getSelectedProject();
    if (m_selProject == null) {
      IProject[] allProjects=ResourcesPlugin.getWorkspace().getRoot().getProjects();
      if (allProjects.length == 1) {
        m_selProject=allProjects[0];
      }
    }
  }
  if (m_selProject != null) {
    configuration.setAttribute(RhogenLaunchDelegate.projectNameCfgAttribute,m_selProject.getName());
  }
  configuration.setAttribute(RhogenLaunchDelegate.platforrmCfgAttribute,(String)RhodesAdapter.platformAdroid);
  configuration.setAttribute(RhogenLaunchDelegate.platforrmDeviceCfgAttribute,(String)""String_Node_Str"");
}",0.664576802507837
2841,"public void createAppSettingBarControls(Composite composite){
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  layout.numColumns=3;
  layout.verticalSpacing=9;
  Label label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  m_appNameText=new Text(composite,SWT.BORDER | SWT.SINGLE);
  m_appNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  m_appNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  label=new Label(composite,SWT.NULL);
  m_defaultPathButton=new Button(composite,SWT.CHECK);
  m_defaultPathButton.setText(""String_Node_Str"");
  m_defaultPathButton.setSelection(true);
  m_defaultPathButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setControlsForDefaultPath();
      dialogChanged();
    }
  }
);
  label=new Label(composite,SWT.NULL);
  label=new Label(composite,SWT.NULL);
  label=new Label(composite,SWT.NULL);
  label.setText(""String_Node_Str"");
  m_appFolderText=new Text(composite,SWT.BORDER | SWT.SINGLE);
  m_appFolderText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  m_appFolderText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_browseButton=new Button(composite,SWT.PUSH);
  m_browseButton.setText(""String_Node_Str"");
  m_browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleBrowse();
    }
  }
);
}","public void createAppSettingBarControls(Composite composite){
  GridLayout layout=new GridLayout(1,true);
  layout.verticalSpacing=9;
  composite.setLayout(layout);
  RowData labelAligment=new RowData(labelWidht,SWT.DEFAULT);
  RowData textAligment=new RowData(textWidht,SWT.DEFAULT);
  Composite rowContainer1=new Composite(composite,SWT.NULL);
  rowContainer1.setLayout(new RowLayout());
  Label label=new Label(rowContainer1,SWT.NULL);
  label.setLayoutData(labelAligment);
  label.setText(""String_Node_Str"");
  m_appNameText=new Text(rowContainer1,SWT.BORDER | SWT.SINGLE);
  m_appNameText.setLayoutData(textAligment);
  m_appNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  Composite rowContainer2=new Composite(composite,SWT.NULL);
  rowContainer2.setLayout(new RowLayout());
  m_defaultPathButton=new Button(rowContainer2,SWT.CHECK);
  m_defaultPathButton.setText(""String_Node_Str"");
  m_defaultPathButton.setSelection(true);
  m_defaultPathButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setControlsForDefaultPath();
      dialogChanged();
    }
  }
);
  Composite rowContainer3=new Composite(composite,SWT.NULL);
  rowContainer3.setLayout(new RowLayout());
  label=new Label(rowContainer3,SWT.NULL);
  label.setText(""String_Node_Str"");
  label.setLayoutData(labelAligment);
  m_appFolderText=new Text(rowContainer3,SWT.BORDER | SWT.SINGLE);
  m_appFolderText.setLayoutData(textAligment);
  m_appFolderText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dialogChanged();
    }
  }
);
  m_browseButton=new Button(rowContainer3,SWT.PUSH);
  m_browseButton.setText(""String_Node_Str"");
  m_browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleBrowse();
    }
  }
);
}",0.7336170212765958
2842,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  ConsoleHelper.consolePrint(""String_Node_Str"");
}",0.8032128514056225
2843,"public static OutputStream getConsoleStream(){
  MessageConsole myConsole=findConsole(""String_Node_Str"");
  MessageConsoleStream out=myConsole.newMessageStream();
  return out;
}","public static OutputStream getConsoleStream(){
  if (msgConsole == null) {
    msgConsole=findConsole(""String_Node_Str"");
  }
  MessageConsoleStream out=msgConsole.newMessageStream();
  return out;
}",0.9071618037135278
2844,"public boolean generateModel(String workDir,String modelName,String modelParams) throws Exception {
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rhogenExe);
  cmdLine.add(""String_Node_Str"");
  cmdLine.add(modelName);
  cmdLine.add(modelParams);
  m_executor.runCommand(cmdLine);
  return true;
}","public boolean generateModel(String workDir,String modelName,String modelParams) throws Exception {
  m_executor.setWorkingDirectory(workDir);
  modelParams=modelParams.replace(' ','_');
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rhogenExe);
  cmdLine.add(""String_Node_Str"");
  cmdLine.add(modelName);
  cmdLine.add(modelParams);
  m_executor.runCommand(cmdLine);
  return true;
}",0.941952506596306
2845,"@Override public void log(String str){
  if (null != m_consoleStream) {
    m_consoleStream.println(str);
  }
}","@Override public void log(String str){
  if (null != m_consoleStream) {
    m_consoleStream.println(prepareString(str));
  }
}",0.9367088607594936
2846,"public boolean buildApp(String workDir,String platformName) throws Exception {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
  return true;
}","public boolean buildApp(String workDir,String platformName) throws Exception {
  ConsoleHelper.consolePrint(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
  return true;
}",0.9386733416770964
2847,"protected IProject[] build(int kind,Map args,IProgressMonitor monitor) throws CoreException {
  try {
    String platformName=(String)getProject().getSessionProperty(getPlatformQualifier());
    if (kind != CLEAN_BUILD && platformName != null) {
      ConsoleHelper.consolePrint(""String_Node_Str"" + getProject().getName() + ""String_Node_Str""+ platformName);
      m_rhodeAdapter.buildApp(getProject().getLocation().toOSString(),platformName);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","protected IProject[] build(int kind,Map args,final IProgressMonitor monitor) throws CoreException {
  try {
    String platformName=(String)getProject().getSessionProperty(getPlatformQualifier());
    if (kind != CLEAN_BUILD && platformName != null) {
      ConsoleHelper.consolePrint(""String_Node_Str"" + getProject().getName() + ""String_Node_Str""+ platformName);
      m_rhodeAdapter.buildApp(getProject().getLocation().toOSString(),platformName);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.994296577946768
2848,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  ConsoleHelper.consolePrint(""String_Node_Str"");
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  ConsoleHelper.consolePrint(""String_Node_Str"");
  ConsoleHelper.consoleAppPrint(""String_Node_Str"");
}",0.8514285714285714
2849,"public static OutputStream getConsoleStream(){
  if (msgConsole == null) {
    msgConsole=findConsole(""String_Node_Str"");
  }
  MessageConsoleStream out=msgConsole.newMessageStream();
  return out;
}","public static OutputStream getConsoleStream(){
  if (msgConsole == null) {
    msgConsole=findConsole(""String_Node_Str"");
    appConsole=findConsole(""String_Node_Str"");
  }
  MessageConsoleStream out=msgConsole.newMessageStream();
  return out;
}",0.8943820224719101
2850,"public void buildApp(String workDir,String platformName) throws Exception {
  ConsoleHelper.consolePrint(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
}","public void buildApp(String workDir,String platformName,boolean onDevice) throws Exception {
  ConsoleHelper.consolePrint(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(platformName);
  if (onDevice) {
    sb.append(""String_Node_Str"");
  }
  m_executor.setWorkingDirectory(workDir);
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(m_rakeExe);
  cmdLine.add(sb.toString());
  m_executor.runCommand(cmdLine);
}",0.9175141242937852
2851,"@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    setProcessFinished(false);
    m_projectName=configuration.getAttribute(projectNameCfgAttribute,""String_Node_Str"");
    m_platformName=configuration.getAttribute(platforrmCfgAttribute,""String_Node_Str"");
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (project == null || m_platformName == null || m_platformName.length() == 0) {
      throw new IllegalArgumentException();
    }
    Thread cancelingThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          rhodesAdapter.buildApp(project.getLocation().toOSString(),m_platformName);
          setProcessFinished(true);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    cancelingThread.start();
    while (true) {
      try {
        if (monitor.isCanceled()) {
          List<String> cmdLine=new ArrayList<String>();
          if (OSValidator.OSType.WINDOWS == OSValidator.detect()) {
            cmdLine.add(""String_Node_Str"");
            cmdLine.add(""String_Node_Str"");
            cmdLine.add(""String_Node_Str"");
            cmdLine.add(""String_Node_Str"");
          }
 else {
            cmdLine.add(""String_Node_Str"");
            cmdLine.add(""String_Node_Str"");
            cmdLine.add(""String_Node_Str"");
          }
          SysCommandExecutor executor=new SysCommandExecutor();
          executor.runCommand(cmdLine);
          return;
        }
        if (getProcessFinished()) {
          return;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(""String_Node_Str"");
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") public synchronized void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,final IProgressMonitor monitor) throws CoreException {
  try {
    setProcessFinished(false);
    if (m_appLogReader != null) {
      m_appLogReader.stopReading();
    }
    m_projectName=configuration.getAttribute(projectNameCfgAttribute,""String_Node_Str"");
    m_platformName=configuration.getAttribute(platforrmCfgAttribute,""String_Node_Str"");
    if (configuration.getAttribute(platforrmDeviceCfgAttribute,""String_Node_Str"").equals(""String_Node_Str"")) {
      m_onDevice=true;
    }
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(m_projectName);
    if (project == null || m_platformName == null || m_platformName.length() == 0) {
      throw new IllegalArgumentException();
    }
    Thread cancelingThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          rhodesAdapter.buildApp(project.getLocation().toOSString(),m_platformName,m_onDevice);
          setProcessFinished(true);
          startLogOutput(project);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
    cancelingThread.start();
    while (true) {
      try {
        if (monitor.isCanceled()) {
          OSHelper.killProcess(""String_Node_Str"",""String_Node_Str"");
          return;
        }
        if (getProcessFinished()) {
          return;
        }
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IllegalArgumentException e) {
    ConsoleHelper.consolePrint(""String_Node_Str"");
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.7764958411591092
2852,"@Override public void run(){
  try {
    rhodesAdapter.buildApp(project.getLocation().toOSString(),m_platformName);
    setProcessFinished(true);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    rhodesAdapter.buildApp(project.getLocation().toOSString(),m_platformName,m_onDevice);
    setProcessFinished(true);
    startLogOutput(project);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9111111111111112
2853,"public boolean generateApp(BuildInfoHolder holder) throws Exception {
  m_executor.setWorkingDirectory(holder.m_appDir);
  StringBuilder sb=new StringBuilder();
  sb.append(m_rhogenExe + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(holder.m_appName);
  sb.append(""String_Node_Str"" + holder.generateAttributeString());
  m_executor.runCommand(sb.toString());
  return true;
}","public boolean generateApp(BuildInfoHolder holder) throws Exception {
  m_executor.setWorkingDirectory(holder.getProjectLocationPath().toOSString());
  StringBuilder sb=new StringBuilder();
  sb.append(m_rhogenExe + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(holder.appName);
  sb.append(""String_Node_Str"" + holder.generateAttributeString());
  m_executor.runCommand(sb.toString());
  return true;
}",0.942189421894219
2854,"/** 
 * Just do the basics: create a basic project.
 * @param location
 * @param projectName
 */
private static IProject createBaseProject(String projectName,URI location){
  IProject newProject=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  if (!newProject.exists()) {
    URI projectLocation=location;
    String path=URIUtil.toPath(projectLocation).toOSString();
    path=path + ""String_Node_Str"" + projectName;
    IProjectDescription desc=newProject.getWorkspace().newProjectDescription(newProject.getName());
    desc.setLocationURI(URIUtil.toURI(path));
    try {
      newProject.create(desc,null);
      if (!newProject.isOpen()) {
        newProject.open(null);
      }
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
 else {
  }
  return newProject;
}","/** 
 * Just do the basics: create a basic project.
 * @param location
 * @param projectName
 */
private static IProject createBaseProject(BuildInfoHolder projectInfo){
  IProject newProject=ResourcesPlugin.getWorkspace().getRoot().getProject(projectInfo.appName);
  if (!newProject.exists()) {
    URI projectLocation=projectInfo.getProjectLocation();
    String path=URIUtil.toPath(projectLocation).toOSString();
    path=path + ""String_Node_Str"" + projectInfo.appName;
    IProjectDescription desc=newProject.getWorkspace().newProjectDescription(newProject.getName());
    if (!projectInfo.isInDefaultWs) {
      desc.setLocationURI(URIUtil.toURI(path));
    }
    try {
      newProject.create(desc,null);
      if (!newProject.isOpen()) {
        newProject.open(null);
      }
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
 else {
  }
  return newProject;
}",0.7623529411764706
2855,"public static IProject createProject(String projectName,URI location){
  Assert.isNotNull(projectName);
  Assert.isTrue(projectName.trim().length() != 0);
  IProject project=createBaseProject(projectName,location);
  return project;
}","public static IProject createProject(BuildInfoHolder projectInfo){
  Assert.isNotNull(projectInfo.appName);
  Assert.isTrue(projectInfo.appName.trim().length() != 0);
  IProject project=createBaseProject(projectInfo);
  return project;
}",0.6751592356687898
2856,"/** 
 * @see IObjectActionDelegate#setActivePart(IAction,IWorkbenchPart)
 */
public void setActivePart(IAction action,IWorkbenchPart targetPart){
  m_shell=targetPart.getSite().getShell();
  m_projectLocation=getCurrectProjectLocation(targetPart);
}","/** 
 * @see IObjectActionDelegate#setActivePart(IAction,IWorkbenchPart)
 */
public void setActivePart(IAction action,IWorkbenchPart targetPart){
  m_shell=targetPart.getSite().getShell();
  m_projectLocation=getCurrentProjectLocation(targetPart);
}",0.9959839357429718
2857,"public static void index(String language,String defaultLanguage){
  if (StringUtils.isBlank(defaultLanguage)) {
    defaultLanguage=Play.langs.get(0);
  }
  if (StringUtils.isBlank(language)) {
    language=defaultLanguage;
  }
  File workingFile=ApplicationMessages.getWorkingFile(language);
  Properties localizations;
  if (workingFile.exists()) {
    localizations=ApplicationMessages.readUtf8Properties(workingFile);
  }
 else {
    localizations=Messages.all(language);
  }
  Properties defaultLocalizations=Messages.all(defaultLanguage);
  SourceMessageKeys sources=ApplicationMessages.lookUp();
  List<String> newKeys=ApplicationMessages.findNewKeys(sources,localizations);
  List<String> obsoleteKeys=ApplicationMessages.findObsoleteKeys(sources,localizations);
  List<String> existingKeys=ApplicationMessages.findExistingKeys(sources,localizations);
  List<String> keepList=ApplicationMessages.readKeys(ApplicationMessages.getKeepFile());
  obsoleteKeys.removeAll(keepList);
  existingKeys.addAll(keepList);
  List<String> ignoreList=ApplicationMessages.readKeys(ApplicationMessages.getIgnoreFile());
  render(workingFile,language,defaultLanguage,localizations,defaultLocalizations,sources,newKeys,existingKeys,obsoleteKeys,keepList,ignoreList);
}","public static void index(String language,String defaultLanguage){
  if (StringUtils.isBlank(defaultLanguage)) {
    defaultLanguage=Play.langs.get(0);
  }
  if (StringUtils.isBlank(language)) {
    language=defaultLanguage;
  }
  File workingFile=ApplicationMessages.getWorkingFile(language);
  Properties localizations;
  if (workingFile.exists()) {
    localizations=ApplicationMessages.readUtf8Properties(workingFile);
  }
 else {
    localizations=Messages.all(language);
  }
  Properties defaultLocalizations=Messages.all(defaultLanguage);
  SourceMessageKeys sources=ApplicationMessages.lookUp();
  List<String> newKeys=ApplicationMessages.findNewKeys(sources,localizations);
  List<String> obsoleteKeys=ApplicationMessages.findObsoleteKeys(sources,localizations);
  List<String> existingKeys=ApplicationMessages.findExistingKeys(sources,localizations);
  List<String> keepList=ApplicationMessages.readKeys(ApplicationMessages.getKeepFile());
  List<String> ignoreList=ApplicationMessages.readKeys(ApplicationMessages.getIgnoreFile());
  obsoleteKeys.removeAll(keepList);
  existingKeys.addAll(keepList);
  newKeys.removeAll(ignoreList);
  render(workingFile,language,defaultLanguage,localizations,defaultLocalizations,sources,newKeys,existingKeys,obsoleteKeys,keepList,ignoreList);
}",0.9273655280722418
2858,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    final int uid=intent.getIntExtra(Intent.EXTRA_UID,-123);
    Api.applicationRemoved(context,uid);
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (!replacing) {
      final int uid=intent.getIntExtra(Intent.EXTRA_UID,-123);
      Api.applicationRemoved(context,uid);
    }
  }
}",0.8061224489795918
2859,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    final int uid=intent.getIntExtra(Intent.EXTRA_UID,-123);
    Api.applicationRemoved(context,uid);
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (!replacing) {
      final int uid=intent.getIntExtra(Intent.EXTRA_UID,-123);
      Api.applicationRemoved(context,uid);
    }
  }
}",0.8061224489795918
2860,"/** 
 * Asserts that the binary files are installed in the cache directory.
 * @param ctx context
 * @param showErrors indicates if errors should be alerted
 * @return false if the binary files could not be installed
 */
public static boolean assertBinaries(Context ctx,boolean showErrors){
  boolean changed=false;
  try {
    File file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.iptables_g1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.iptables_n1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.busybox_g1,file,""String_Node_Str"");
      changed=true;
    }
    if (changed) {
      Toast.makeText(ctx,R.string.toast_bin_installed,Toast.LENGTH_LONG).show();
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
    return false;
  }
  return true;
}","/** 
 * Asserts that the binary files are installed in the cache directory.
 * @param ctx context
 * @param showErrors indicates if errors should be alerted
 * @return false if the binary files could not be installed
 */
public static boolean assertBinaries(Context ctx,boolean showErrors){
  boolean changed=false;
  try {
    File file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if ((!file.exists()) && isARMv6()) {
      copyRawFile(ctx,R.raw.iptables_g1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if ((!file.exists()) && (!isARMv6())) {
      copyRawFile(ctx,R.raw.iptables_n1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.busybox_g1,file,""String_Node_Str"");
      changed=true;
    }
    if (changed) {
      Toast.makeText(ctx,R.string.toast_bin_installed,Toast.LENGTH_LONG).show();
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
    return false;
  }
  return true;
}",0.984924623115578
2861,"/** 
 * Create the generic shell script header used to determine which iptables binary to use.
 * @param ctx context
 * @return script header
 */
private static String scriptHeader(Context ctx){
  final String dir=ctx.getCacheDir().getAbsolutePath();
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + dir + ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}","/** 
 * Create the generic shell script header used to determine which iptables binary to use.
 * @param ctx context
 * @return script header
 */
private static String scriptHeader(Context ctx){
  final String dir=ctx.getCacheDir().getAbsolutePath();
  final String myiptables=dir + (isARMv6() ? ""String_Node_Str"" : ""String_Node_Str"");
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + dir + ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ myiptables+ ""String_Node_Str""+ ""String_Node_Str""+ myiptables+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.8718186024988431
2862,"/** 
 * Apply or save iptable rules, showing a visual indication
 */
private void applyOrSaveRules(){
  final Resources res=getResources();
  final Handler handler;
  final boolean enabled=Api.isEnabled(this);
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(enabled ? R.string.applying_rules : R.string.saving_rules),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (enabled) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if (Api.hasRootAccess(MainActivity.this,true) && Api.applyIptablesRules(MainActivity.this,true)) {
          Toast.makeText(MainActivity.this,R.string.rules_applied,Toast.LENGTH_SHORT).show();
        }
 else {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          Api.setEnabled(MainActivity.this,false);
        }
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Api.saveRules(MainActivity.this);
        Toast.makeText(MainActivity.this,R.string.rules_saved,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Apply or save iptable rules, showing a visual indication
 */
private void applyOrSaveRules(){
  final Resources res=getResources();
  final boolean enabled=Api.isEnabled(this);
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(enabled ? R.string.applying_rules : R.string.saving_rules),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (enabled) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if (Api.hasRootAccess(MainActivity.this,true) && Api.applyIptablesRules(MainActivity.this,true)) {
          Toast.makeText(MainActivity.this,R.string.rules_applied,Toast.LENGTH_SHORT).show();
        }
 else {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          Api.setEnabled(MainActivity.this,false);
        }
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Api.saveRules(MainActivity.this);
        Toast.makeText(MainActivity.this,R.string.rules_saved,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.95
2863,"@Override protected void onStart(){
  super.onStart();
  Api.applications=null;
}","@Override protected void onStart(){
  super.onStart();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Api.applications=null;
}",0.7788461538461539
2864,"/** 
 * If the applications are cached, just show them, otherwise load and show
 */
private void showOrLoadApplications(){
  final Resources res=getResources();
  if (Api.applications == null) {
    progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.reading_apps),true);
    final Handler handler=new Handler(){
      public void handleMessage(      Message msg){
        if (progress != null)         progress.dismiss();
        showApplications();
      }
    }
;
    new Thread(){
      public void run(){
        Api.getApps(MainActivity.this);
        handler.sendEmptyMessage(0);
      }
    }
.start();
  }
 else {
    showApplications();
  }
}","/** 
 * If the applications are cached, just show them, otherwise load and show
 */
private void showOrLoadApplications(){
  final Resources res=getResources();
  if (Api.applications == null) {
    final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.reading_apps),true);
    final Handler handler=new Handler(){
      public void handleMessage(      Message msg){
        progress.dismiss();
        showApplications();
      }
    }
;
    new Thread(){
      public void run(){
        Api.getApps(MainActivity.this);
        handler.sendEmptyMessage(0);
      }
    }
.start();
  }
 else {
    showApplications();
  }
}",0.9627465303140978
2865,"/** 
 * Show iptable rules on a dialog
 */
private void showRules(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      Api.showIptablesRules(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Show iptable rules on a dialog
 */
private void showRules(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      Api.showIptablesRules(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.9304511278195488
2866,"/** 
 * Clear logs
 */
private void clearLog(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.clearLog(MainActivity.this)) {
        Toast.makeText(MainActivity.this,R.string.log_cleared,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Clear logs
 */
private void clearLog(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.clearLog(MainActivity.this)) {
        Toast.makeText(MainActivity.this,R.string.log_cleared,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.9629032258064516
2867,"/** 
 * Purge iptable rules, showing a visual indication
 */
private void purgeRules(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.deleting_rules),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.purgeIptables(MainActivity.this,true)) {
        Toast.makeText(MainActivity.this,R.string.rules_deleted,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Purge iptable rules, showing a visual indication
 */
private void purgeRules(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.deleting_rules),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.purgeIptables(MainActivity.this,true)) {
        Toast.makeText(MainActivity.this,R.string.rules_deleted,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.965925925925926
2868,"/** 
 * Show logs on a dialog
 */
private void showLog(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      Api.showLog(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Show logs on a dialog
 */
private void showLog(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      Api.showLog(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.949671772428884
2869,"/** 
 * Asserts that the binary files are installed in the cache directory.
 * @param ctx context
 * @param showErrors indicates if errors should be alerted
 * @return false if the binary files could not be installed
 */
public static boolean assertBinaries(Context ctx,boolean showErrors){
  boolean changed=false;
  try {
    File file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.iptables_g1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.iptables_n1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.busybox_g1,file,""String_Node_Str"");
      changed=true;
    }
    if (changed) {
      Toast.makeText(ctx,R.string.toast_bin_installed,Toast.LENGTH_LONG).show();
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
    return false;
  }
  return true;
}","/** 
 * Asserts that the binary files are installed in the cache directory.
 * @param ctx context
 * @param showErrors indicates if errors should be alerted
 * @return false if the binary files could not be installed
 */
public static boolean assertBinaries(Context ctx,boolean showErrors){
  boolean changed=false;
  try {
    File file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if ((!file.exists()) && isARMv6()) {
      copyRawFile(ctx,R.raw.iptables_g1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if ((!file.exists()) && (!isARMv6())) {
      copyRawFile(ctx,R.raw.iptables_n1,file,""String_Node_Str"");
      changed=true;
    }
    file=new File(ctx.getCacheDir(),""String_Node_Str"");
    if (!file.exists()) {
      copyRawFile(ctx,R.raw.busybox_g1,file,""String_Node_Str"");
      changed=true;
    }
    if (changed) {
      Toast.makeText(ctx,R.string.toast_bin_installed,Toast.LENGTH_LONG).show();
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
    return false;
  }
  return true;
}",0.984924623115578
2870,"/** 
 * Create the generic shell script header used to determine which iptables binary to use.
 * @param ctx context
 * @return script header
 */
private static String scriptHeader(Context ctx){
  final String dir=ctx.getCacheDir().getAbsolutePath();
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + dir + ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}","/** 
 * Create the generic shell script header used to determine which iptables binary to use.
 * @param ctx context
 * @return script header
 */
private static String scriptHeader(Context ctx){
  final String dir=ctx.getCacheDir().getAbsolutePath();
  final String myiptables=dir + (isARMv6() ? ""String_Node_Str"" : ""String_Node_Str"");
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + dir + ""String_Node_Str""+ ""String_Node_Str""+ dir+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ myiptables+ ""String_Node_Str""+ ""String_Node_Str""+ myiptables+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.8718186024988431
2871,"/** 
 * Apply or save iptable rules, showing a visual indication
 */
private void applyOrSaveRules(){
  final Resources res=getResources();
  final Handler handler;
  final boolean enabled=Api.isEnabled(this);
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(enabled ? R.string.applying_rules : R.string.saving_rules),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (enabled) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if (Api.hasRootAccess(MainActivity.this,true) && Api.applyIptablesRules(MainActivity.this,true)) {
          Toast.makeText(MainActivity.this,R.string.rules_applied,Toast.LENGTH_SHORT).show();
        }
 else {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          Api.setEnabled(MainActivity.this,false);
        }
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Api.saveRules(MainActivity.this);
        Toast.makeText(MainActivity.this,R.string.rules_saved,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Apply or save iptable rules, showing a visual indication
 */
private void applyOrSaveRules(){
  final Resources res=getResources();
  final boolean enabled=Api.isEnabled(this);
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(enabled ? R.string.applying_rules : R.string.saving_rules),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (enabled) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if (Api.hasRootAccess(MainActivity.this,true) && Api.applyIptablesRules(MainActivity.this,true)) {
          Toast.makeText(MainActivity.this,R.string.rules_applied,Toast.LENGTH_SHORT).show();
        }
 else {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          Api.setEnabled(MainActivity.this,false);
        }
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Api.saveRules(MainActivity.this);
        Toast.makeText(MainActivity.this,R.string.rules_saved,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.95
2872,"@Override protected void onStart(){
  super.onStart();
  Api.applications=null;
}","@Override protected void onStart(){
  super.onStart();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Api.applications=null;
}",0.7788461538461539
2873,"/** 
 * If the applications are cached, just show them, otherwise load and show
 */
private void showOrLoadApplications(){
  final Resources res=getResources();
  if (Api.applications == null) {
    progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.reading_apps),true);
    final Handler handler=new Handler(){
      public void handleMessage(      Message msg){
        if (progress != null)         progress.dismiss();
        showApplications();
      }
    }
;
    new Thread(){
      public void run(){
        Api.getApps(MainActivity.this);
        handler.sendEmptyMessage(0);
      }
    }
.start();
  }
 else {
    showApplications();
  }
}","/** 
 * If the applications are cached, just show them, otherwise load and show
 */
private void showOrLoadApplications(){
  final Resources res=getResources();
  if (Api.applications == null) {
    final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.reading_apps),true);
    final Handler handler=new Handler(){
      public void handleMessage(      Message msg){
        progress.dismiss();
        showApplications();
      }
    }
;
    new Thread(){
      public void run(){
        Api.getApps(MainActivity.this);
        handler.sendEmptyMessage(0);
      }
    }
.start();
  }
 else {
    showApplications();
  }
}",0.9627465303140978
2874,"/** 
 * Show iptable rules on a dialog
 */
private void showRules(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      Api.showIptablesRules(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Show iptable rules on a dialog
 */
private void showRules(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      Api.showIptablesRules(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.9304511278195488
2875,"/** 
 * Clear logs
 */
private void clearLog(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.clearLog(MainActivity.this)) {
        Toast.makeText(MainActivity.this,R.string.log_cleared,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Clear logs
 */
private void clearLog(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.clearLog(MainActivity.this)) {
        Toast.makeText(MainActivity.this,R.string.log_cleared,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.9629032258064516
2876,"/** 
 * Purge iptable rules, showing a visual indication
 */
private void purgeRules(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.deleting_rules),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.purgeIptables(MainActivity.this,true)) {
        Toast.makeText(MainActivity.this,R.string.rules_deleted,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Purge iptable rules, showing a visual indication
 */
private void purgeRules(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.deleting_rules),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      if (!Api.hasRootAccess(MainActivity.this,true))       return;
      if (Api.purgeIptables(MainActivity.this,true)) {
        Toast.makeText(MainActivity.this,R.string.rules_deleted,Toast.LENGTH_SHORT).show();
      }
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.965925925925926
2877,"/** 
 * Show logs on a dialog
 */
private void showLog(){
  final Resources res=getResources();
  final Handler handler;
  progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      Api.showLog(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}","/** 
 * Show logs on a dialog
 */
private void showLog(){
  final Resources res=getResources();
  final ProgressDialog progress=ProgressDialog.show(this,res.getString(R.string.working),res.getString(R.string.please_wait),true);
  final Handler handler=new Handler(){
    public void handleMessage(    Message msg){
      if (progress != null)       progress.dismiss();
      Api.showLog(MainActivity.this);
    }
  }
;
  handler.sendEmptyMessageDelayed(0,100);
}",0.949671772428884
2878,"/** 
 * Purge and re-add all rules.
 * @param ctx application context (mandatory)
 * @param showErrors indicates if errors should be alerted
 */
public static boolean applyIptablesRules(Context ctx,boolean showErrors){
  if (ctx == null) {
    return false;
  }
  final SharedPreferences prefs=ctx.getSharedPreferences(PREFS_NAME,0);
  final boolean whitelist=prefs.getString(PREF_MODE,MODE_WHITELIST).equals(MODE_WHITELIST);
  final String itfs=prefs.getString(PREF_ITFS,ITF_3G);
  String itfFilter;
  if (itfs.indexOf(""String_Node_Str"") != -1) {
    itfFilter=""String_Node_Str"";
  }
 else   if (itfs.indexOf(ITF_3G) != -1) {
    itfFilter=""String_Node_Str"";
    ;
  }
 else {
    itfFilter=""String_Node_Str"";
    ;
  }
  final DroidApp[] apps=getApps(ctx);
  final StringBuilder newuids=new StringBuilder();
  for (int i=0; i < apps.length; i++) {
    if (apps[i].selected) {
      if (newuids.length() != 0)       newuids.append('|');
      newuids.append(apps[i].username);
    }
  }
  if (!newuids.toString().equals(prefs.getString(PREF_ALLOWEDUIDS,""String_Node_Str""))) {
    Editor edit=prefs.edit();
    edit.putString(PREF_ALLOWEDUIDS,newuids.toString());
    edit.commit();
  }
  final StringBuilder script=new StringBuilder();
  try {
    int code;
    script.append(""String_Node_Str"");
    final String targetRule=(whitelist ? ""String_Node_Str"" : ""String_Node_Str"");
    for (    DroidApp app : apps) {
      if (app.selected) {
        script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ app.uid+ ""String_Node_Str""+ targetRule+ ""String_Node_Str"");
      }
    }
    if (whitelist) {
      script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str"");
    }
    StringBuilder res=new StringBuilder();
    code=runScriptAsRoot(script.toString(),res);
    if (showErrors && code != 0) {
      String msg=res.toString();
      Log.e(""String_Node_Str"",msg);
      if (msg.indexOf(""String_Node_Str"") != -1 || msg.indexOf(""String_Node_Str"") != -1) {
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        if (msg.indexOf(""String_Node_Str"") != -1) {
          msg=msg.replace(""String_Node_Str"",""String_Node_Str"");
        }
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ msg.trim());
      }
    }
 else {
      return true;
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
  }
  return false;
}","/** 
 * Purge and re-add all rules.
 * @param ctx application context (mandatory)
 * @param showErrors indicates if errors should be alerted
 */
public static boolean applyIptablesRules(Context ctx,boolean showErrors){
  if (ctx == null) {
    return false;
  }
  final SharedPreferences prefs=ctx.getSharedPreferences(PREFS_NAME,0);
  final boolean whitelist=prefs.getString(PREF_MODE,MODE_WHITELIST).equals(MODE_WHITELIST);
  boolean wifi=false;
  final String itfs=prefs.getString(PREF_ITFS,ITF_3G);
  String itfFilter;
  if (itfs.indexOf(""String_Node_Str"") != -1) {
    itfFilter=""String_Node_Str"";
    wifi=true;
  }
 else   if (itfs.indexOf(ITF_3G) != -1) {
    itfFilter=""String_Node_Str"";
    ;
  }
 else {
    itfFilter=""String_Node_Str"";
    ;
    wifi=true;
  }
  final DroidApp[] apps=getApps(ctx);
  final StringBuilder newuids=new StringBuilder();
  for (int i=0; i < apps.length; i++) {
    if (apps[i].selected) {
      if (newuids.length() != 0)       newuids.append('|');
      newuids.append(apps[i].username);
    }
  }
  if (!newuids.toString().equals(prefs.getString(PREF_ALLOWEDUIDS,""String_Node_Str""))) {
    Editor edit=prefs.edit();
    edit.putString(PREF_ALLOWEDUIDS,newuids.toString());
    edit.commit();
  }
  final StringBuilder script=new StringBuilder();
  try {
    int code;
    script.append(""String_Node_Str"");
    final String targetRule=(whitelist ? ""String_Node_Str"" : ""String_Node_Str"");
    if (whitelist && wifi) {
      int uid=android.os.Process.getUidForName(""String_Node_Str"");
      if (uid != -1)       script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ uid+ ""String_Node_Str"");
      uid=android.os.Process.getUidForName(""String_Node_Str"");
      if (uid != -1)       script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ uid+ ""String_Node_Str"");
    }
    for (    DroidApp app : apps) {
      if (app.selected) {
        script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ app.uid+ ""String_Node_Str""+ targetRule+ ""String_Node_Str"");
      }
    }
    if (whitelist) {
      script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str"");
    }
    StringBuilder res=new StringBuilder();
    code=runScriptAsRoot(script.toString(),res);
    if (showErrors && code != 0) {
      String msg=res.toString();
      Log.e(""String_Node_Str"",msg);
      if (msg.indexOf(""String_Node_Str"") != -1 || msg.indexOf(""String_Node_Str"") != -1) {
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        if (msg.indexOf(""String_Node_Str"") != -1) {
          msg=msg.replace(""String_Node_Str"",""String_Node_Str"");
        }
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ msg.trim());
      }
    }
 else {
      return true;
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
  }
  return false;
}",0.8375397270517854
2879,"/** 
 * Purge and re-add all rules.
 * @param ctx application context (mandatory)
 * @param showErrors indicates if errors should be alerted
 */
public static boolean applyIptablesRules(Context ctx,boolean showErrors){
  if (ctx == null) {
    return false;
  }
  final SharedPreferences prefs=ctx.getSharedPreferences(PREFS_NAME,0);
  final boolean whitelist=prefs.getString(PREF_MODE,MODE_WHITELIST).equals(MODE_WHITELIST);
  final String itfs=prefs.getString(PREF_ITFS,ITF_3G);
  String itfFilter;
  if (itfs.indexOf(""String_Node_Str"") != -1) {
    itfFilter=""String_Node_Str"";
  }
 else   if (itfs.indexOf(ITF_3G) != -1) {
    itfFilter=""String_Node_Str"";
    ;
  }
 else {
    itfFilter=""String_Node_Str"";
    ;
  }
  final DroidApp[] apps=getApps(ctx);
  final StringBuilder newuids=new StringBuilder();
  for (int i=0; i < apps.length; i++) {
    if (apps[i].selected) {
      if (newuids.length() != 0)       newuids.append('|');
      newuids.append(apps[i].username);
    }
  }
  if (!newuids.toString().equals(prefs.getString(PREF_ALLOWEDUIDS,""String_Node_Str""))) {
    Editor edit=prefs.edit();
    edit.putString(PREF_ALLOWEDUIDS,newuids.toString());
    edit.commit();
  }
  final StringBuilder script=new StringBuilder();
  try {
    int code;
    script.append(""String_Node_Str"");
    final String targetRule=(whitelist ? ""String_Node_Str"" : ""String_Node_Str"");
    for (    DroidApp app : apps) {
      if (app.selected) {
        script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ app.uid+ ""String_Node_Str""+ targetRule+ ""String_Node_Str"");
      }
    }
    if (whitelist) {
      script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str"");
    }
    StringBuilder res=new StringBuilder();
    code=runScriptAsRoot(script.toString(),res);
    if (showErrors && code != 0) {
      String msg=res.toString();
      Log.e(""String_Node_Str"",msg);
      if (msg.indexOf(""String_Node_Str"") != -1 || msg.indexOf(""String_Node_Str"") != -1) {
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        if (msg.indexOf(""String_Node_Str"") != -1) {
          msg=msg.replace(""String_Node_Str"",""String_Node_Str"");
        }
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ msg.trim());
      }
    }
 else {
      return true;
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
  }
  return false;
}","/** 
 * Purge and re-add all rules.
 * @param ctx application context (mandatory)
 * @param showErrors indicates if errors should be alerted
 */
public static boolean applyIptablesRules(Context ctx,boolean showErrors){
  if (ctx == null) {
    return false;
  }
  final SharedPreferences prefs=ctx.getSharedPreferences(PREFS_NAME,0);
  final boolean whitelist=prefs.getString(PREF_MODE,MODE_WHITELIST).equals(MODE_WHITELIST);
  boolean wifi=false;
  final String itfs=prefs.getString(PREF_ITFS,ITF_3G);
  String itfFilter;
  if (itfs.indexOf(""String_Node_Str"") != -1) {
    itfFilter=""String_Node_Str"";
    wifi=true;
  }
 else   if (itfs.indexOf(ITF_3G) != -1) {
    itfFilter=""String_Node_Str"";
    ;
  }
 else {
    itfFilter=""String_Node_Str"";
    ;
    wifi=true;
  }
  final DroidApp[] apps=getApps(ctx);
  final StringBuilder newuids=new StringBuilder();
  for (int i=0; i < apps.length; i++) {
    if (apps[i].selected) {
      if (newuids.length() != 0)       newuids.append('|');
      newuids.append(apps[i].username);
    }
  }
  if (!newuids.toString().equals(prefs.getString(PREF_ALLOWEDUIDS,""String_Node_Str""))) {
    Editor edit=prefs.edit();
    edit.putString(PREF_ALLOWEDUIDS,newuids.toString());
    edit.commit();
  }
  final StringBuilder script=new StringBuilder();
  try {
    int code;
    script.append(""String_Node_Str"");
    final String targetRule=(whitelist ? ""String_Node_Str"" : ""String_Node_Str"");
    if (whitelist && wifi) {
      int uid=android.os.Process.getUidForName(""String_Node_Str"");
      if (uid != -1)       script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ uid+ ""String_Node_Str"");
      uid=android.os.Process.getUidForName(""String_Node_Str"");
      if (uid != -1)       script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ uid+ ""String_Node_Str"");
    }
    for (    DroidApp app : apps) {
      if (app.selected) {
        script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str""+ app.uid+ ""String_Node_Str""+ targetRule+ ""String_Node_Str"");
      }
    }
    if (whitelist) {
      script.append(""String_Node_Str"" + itfFilter + ""String_Node_Str"");
    }
    StringBuilder res=new StringBuilder();
    code=runScriptAsRoot(script.toString(),res);
    if (showErrors && code != 0) {
      String msg=res.toString();
      Log.e(""String_Node_Str"",msg);
      if (msg.indexOf(""String_Node_Str"") != -1 || msg.indexOf(""String_Node_Str"") != -1) {
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        if (msg.indexOf(""String_Node_Str"") != -1) {
          msg=msg.replace(""String_Node_Str"",""String_Node_Str"");
        }
        alert(ctx,""String_Node_Str"" + code + ""String_Node_Str""+ msg.trim());
      }
    }
 else {
      return true;
    }
  }
 catch (  Exception e) {
    if (showErrors)     alert(ctx,""String_Node_Str"" + e);
  }
  return false;
}",0.8375397270517854
2880,"public AnimationManager(){
  animationHandlerManager=new AnimationHandlerManager();
  animations=new ArrayList<Animation>();
}","public AnimationManager(){
  animationHandlerManager=new AnimationHandlerManager();
  animations=new ArrayList<Animation>();
  animationsToRemove=new ArrayList<Animation>();
}",0.8372093023255814
2881,"public void update(float delta){
  for (int i=0; i < animations.size(); i++)   animations.get(i).update(delta);
  animationHandlerManager.checkAnimationChanges();
}","public void update(float delta){
  for (int i=0; i < animations.size(); i++)   animations.get(i).update(delta);
  animationHandlerManager.checkAnimationChanges();
  for (int i=0; i < animationsToRemove.size(); i++) {
    Animation animation=animationsToRemove.get(i);
    animationHandlerManager.removeMonitorsFor(animation);
  }
  animations.remove(animationsToRemove);
  animationsToRemove.clear();
}",0.5795053003533569
2882,"public void remove(Animation animation){
  animations.remove(animation);
  animationHandlerManager.removeMonitorsFor(animation);
}","public void remove(Animation animation){
  animationsToRemove.add(animation);
}",0.7081339712918661
2883,"public void removeMonitorsFor(Animation animation){
  for (int i=0; i < animationMonitors.size(); i++) {
    if (animationMonitors.get(i).getAnimation() == animation)     animationMonitorsToRemove.add(animationMonitors.get(i));
  }
  animationMonitors.removeAll(animationMonitorsToRemove);
  animationMonitorsToRemove.clear();
}","public void removeMonitorsFor(Animation animation){
  for (int i=0; i < animationMonitors.size(); i++) {
    AnimationMonitor animationMonitor=animationMonitors.get(i);
    if (animationMonitor.getAnimation() == animation)     animationMonitorsToRemove.add(animationMonitor);
  }
  animationMonitors.removeAll(animationMonitorsToRemove);
  animationMonitorsToRemove.clear();
}",0.8863636363636364
2884,"public TransitionImpl(T mutableObject,TypeConverter<T> typeConverter){
  this.mutableObject=mutableObject;
  this.typeConverter=typeConverter;
  transition=new TransitionFloatArrayImpl(typeConverter.variables());
  typeConverter.copyFromObject(mutableObject,transition.get());
}","public TransitionImpl(T mutableObject,TypeConverter<T> typeConverter){
  this.mutableObject=mutableObject;
  this.typeConverter=typeConverter;
  transition=new TransitionFloatArrayImpl(typeConverter.variables());
  tmp=typeConverter.copyFromObject(mutableObject,tmp);
  transition.set(tmp);
}",0.9228070175438596
2885,"@Override public float[] copyFromObject(MyObject object,float[] x){
  x[0]=object.x;
  x[1]=object.y;
  x[2]=object.x + object.y;
  return x;
}","@Override public float[] copyFromObject(MyObject object,float[] x){
  if (x == null)   x=new float[variables()];
  x[0]=object.x;
  x[1]=object.y;
  x[2]=object.x + object.y;
  return x;
}",0.8640483383685801
2886,"@Test public void testBuilderWithCustomTypeConverter(){
  MyObject myObject=new MyObject();
  myObject.x=40f;
  myObject.y=40f;
  Transition<MyObject> transition=Transitions.transition(myObject,new MyObjectTypeConverter(){
    @Override public int variables(){
      return 3;
    }
    @Override public MyObject copyToObject(    MyObject object,    float[] x){
      object.x=2f * x[0] - 1f;
      object.y=-1f * x[1] - x[2] + 5f;
      return object;
    }
    @Override public float[] copyFromObject(    MyObject object,    float[] x){
      x[0]=object.x;
      x[1]=object.y;
      x[2]=object.x + object.y;
      return x;
    }
  }
).start(1f,2f,3f).end(1f,10f,20f,30f).build();
  assertThat(myObject.x,IsEqual.equalTo(1f));
  assertThat(myObject.y,IsEqual.equalTo(0f));
  transition.update(1f);
  assertThat(myObject.x,IsEqual.equalTo(19f));
  assertThat(myObject.y,IsEqual.equalTo(-45f));
}","@Test public void testBuilderWithCustomTypeConverter(){
  MyObject myObject=new MyObject();
  myObject.x=40f;
  myObject.y=40f;
  Transition<MyObject> transition=Transitions.transition(myObject,new MyObjectTypeConverter(){
    @Override public int variables(){
      return 3;
    }
    @Override public MyObject copyToObject(    MyObject object,    float[] x){
      object.x=2f * x[0] - 1f;
      object.y=-1f * x[1] - x[2] + 5f;
      return object;
    }
    @Override public float[] copyFromObject(    MyObject object,    float[] x){
      if (x == null)       x=new float[variables()];
      x[0]=object.x;
      x[1]=object.y;
      x[2]=object.x + object.y;
      return x;
    }
  }
).start(1f,2f,3f).end(1f,10f,20f,30f).build();
  assertThat(myObject.x,IsEqual.equalTo(1f));
  assertThat(myObject.y,IsEqual.equalTo(0f));
  transition.update(1f);
  assertThat(myObject.x,IsEqual.equalTo(19f));
  assertThat(myObject.y,IsEqual.equalTo(-45f));
}",0.9713668287412208
2887,"public static Builders.TimelineAnimationBuilder animation(Builders.TimelineBuilder timelineBuilder){
  return timelineAnimationBuilder.setTimeline(timelineBuilder.build());
}","public static Builders.TimelineAnimationBuilder animation(Builders.TimelineBuilder timelineBuilder){
  return timelineAnimationBuilder.setTimelineBuilder(timelineBuilder);
}",0.956772334293948
2888,"public TimelineAnimation build(){
  TimelineAnimation timelineAnimation=new TimelineAnimation(timeline,started);
  timelineAnimation.setDelay(delay);
  timelineAnimation.setSpeed(speed);
  reset();
  return timelineAnimation;
}","public TimelineAnimation build(){
  float duration=timelineBuilder.getDuration();
  TimelineAnimation timelineAnimation=new TimelineAnimation(timelineBuilder.build(),started);
  timelineAnimation.setDuration(duration);
  timelineAnimation.setDelay(delay);
  timelineAnimation.setSpeed(speed);
  reset();
  return timelineAnimation;
}",0.8107142857142857
2889,"@Test public void testAnimationBuilder(){
  TimelineAnimation timelineAnimation=Builders.animation(Builders.timeline().value(Builders.timelineValue(""String_Node_Str"").typeConverter(Converters.floatValue()).keyFrame(0,500f).keyFrame(500,12500f).keyFrame(1000,500f)).value(Builders.timelineValue(""String_Node_Str"").keyFrame(0,3f).keyFrame(500,10f).keyFrame(1000,50f))).speed(2f).delay(200).started(true).build();
  assertThat(timelineAnimation.getDelay(),IsEqual.equalTo(200f));
  System.out.println(timelineAnimation.getTimeline());
}","@Test public void testAnimationBuilder(){
  TimelineAnimation timelineAnimation=Builders.animation(Builders.timeline().value(Builders.timelineValue(""String_Node_Str"").typeConverter(Converters.floatValue()).keyFrame(0,500f).keyFrame(500,12500f).keyFrame(1000,500f)).value(Builders.timelineValue(""String_Node_Str"").keyFrame(0,3f).keyFrame(500,10f).keyFrame(1000,50f))).speed(2f).delay(200).started(true).build();
  assertThat(timelineAnimation.getDelay(),IsEqual.equalTo(200f));
  assertThat(timelineAnimation.getDuration(),IsEqual.equalTo(1200f));
  System.out.println(timelineAnimation.getTimeline());
}",0.9383802816901408
2890,"/** 
 * Returns the percentage of the current time over the total time.
 * @return
 */
public float get(){
  return ((float)currentTime / (float)transitionTime);
}","/** 
 * Returns the percentage of the current time over the total time.
 * @return
 */
public float get(){
  if (transitionTime == 0)   return 1f;
  return ((float)currentTime / (float)transitionTime);
}",0.7704918032786885
2891,"@Override public void set(T t,int time){
  this.desiredValue=typeConverter.copyFromObject(t,desiredValue);
  this.totalTime=time;
  if (currentValue != null) {
    this.startValue=currentValue;
    this.currentValue=null;
  }
  this.currentTime=0;
  if (time == 0)   this.currentValue=interpolator.interpolate(startValue,desiredValue,1f);
}","@Override public void set(T t,int time){
  this.desiredValue=typeConverter.copyFromObject(t,desiredValue);
  this.totalTime=time;
  if (currentValue != null)   copyArray(startValue,currentValue);
  this.currentTime=0;
  if (time == 0)   this.currentValue=interpolator.interpolate(startValue,desiredValue,1f);
}",0.84
2892,"public void stop(){
  currentTime=0;
  iteration=1;
  pause();
}","public void stop(){
  currentTime=0;
  iteration=1;
  playingDirection=PlayingDirection.Normal;
  pause();
}",0.7441860465116279
2893,"/** 
 * Updates the current value to the new value.
 * @param time - The time to update the current value.
 */
public void update(int time){
  if (currentTime == totalTime)   return;
  currentTime+=time;
  if (currentTime > totalTime)   currentTime=totalTime;
  float alpha=(float)currentTime / (float)totalTime;
  currentValue=interpolator.interpolate(startValue,desiredValue,alpha);
}","/** 
 * Updates the current value to the new value.
 * @param time - The time to update the current value.
 */
public void update(int time){
  if (currentTime == totalTime)   return;
  currentTime+=time;
  if (currentTime > totalTime)   currentTime=totalTime;
  if (desiredValue == null)   return;
  float alpha=(float)currentTime / (float)totalTime;
  currentValue=interpolator.interpolate(startValue,desiredValue,alpha);
}",0.9530864197530864
2894,"@Override public void set(T value){
  lastTime=timeProvider.getTime();
  interpolatedValue.setA(interpolatedValue.getInterpolatedValue());
  interpolatedValue.setB(value);
  interpolatedValue.setAlpha(0f);
}","@Override public void set(T value){
  lastTime=timeProvider.getTime();
  transition.set(value,1000);
}",0.5825242718446602
2895,"/** 
 * @param interpolatedValue
 * @param speed - The speed is specified in seconds and it is used to advance from one value to another value of the interpolated value.
 */
public InterpolatedProperty(InterpolatedValue<T> interpolatedValue,float speed){
  this(interpolatedValue,speed,new SystemTimeProvider());
}","/** 
 * @param transition - The transition to be used to set and get values for the property.
 * @param speed - The speed is specified in seconds and it is used to advance from one value to another value of the interpolated value.
 */
public InterpolatedProperty(Transition<T> transition,float speed){
  this(transition,speed,new SystemTimeProvider());
}",0.7365269461077845
2896,"@Override public T get(){
  long currentTime=timeProvider.getTime();
  float time=((float)(currentTime - lastTime)) * speed;
  interpolatedValue.setAlpha(time);
  return interpolatedValue.getInterpolatedValue();
}","@Override public T get(){
  long currentTime=timeProvider.getTime();
  float time=((float)(currentTime - lastTime)) * speed;
  transition.update((int)(time * 1000f));
  lastTime=currentTime;
  return transition.get();
}",0.6203703703703703
2897,"@Test public void shouldReturnInterpolatedValue(){
  UpdateableTimeProvider timeProvider=new UpdateableTimeProvider();
  InterpolatedProperty<Float> interpolatedProperty=new InterpolatedProperty<Float>(new FloatInterpolatedValue(100f),0.01f,timeProvider);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
  interpolatedProperty.set(200f);
  timeProvider.update(50);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(150f));
}","@Test public void shouldReturnInterpolatedValue(){
  InterpolatedProperty<Float> interpolatedProperty=new InterpolatedProperty<Float>(new Transition<Float>(100f,interpolator),0.01f,timeProvider);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
  interpolatedProperty.set(200f);
  timeProvider.update(50);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(150f));
  timeProvider.update(25);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(175f));
}",0.7822318526543879
2898,"@Test public void shouldReturnFirstValueWhenNoTimePassed(){
  UpdateableTimeProvider timeProvider=new UpdateableTimeProvider();
  InterpolatedProperty<Float> interpolatedProperty=new InterpolatedProperty<Float>(new FloatInterpolatedValue(100f),1f,timeProvider);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
  interpolatedProperty.set(200f);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
}","@Test public void shouldReturnFirstValueWhenNoTimePassed(){
  InterpolatedProperty<Float> interpolatedProperty=new InterpolatedProperty<Float>(new Transition<Float>(100f,interpolator),1f,timeProvider);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
  interpolatedProperty.set(200f);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
}",0.8607594936708861
2899,"@Test public void shouldReturnSecondValueWhenTimePassed(){
  UpdateableTimeProvider timeProvider=new UpdateableTimeProvider();
  InterpolatedProperty<Float> interpolatedProperty=new InterpolatedProperty<Float>(new FloatInterpolatedValue(100f),1f,timeProvider);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
  interpolatedProperty.set(200f);
  timeProvider.update(10000);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(200f));
}","@Test public void shouldReturnSecondValueWhenTimePassed(){
  InterpolatedProperty<Float> interpolatedProperty=new InterpolatedProperty<Float>(new Transition<Float>(100f,interpolator),1f,timeProvider);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(100f));
  interpolatedProperty.set(200f);
  timeProvider.update(10000);
  assertThat(interpolatedProperty.get(),IsEqual.equalTo(200f));
}",0.8702830188679245
2900,"/** 
 * Convenience method to retrieve a HTTP request,response or  an ICAP options response body from an aggregated IcapMessage. 
 * @param message
 * @return null or @see {@link ChannelBuffer} if a body exists.
 */
public static ChannelBuffer extractHttpBodyContentFromIcapMessage(IcapMessage message){
  ChannelBuffer buffer=null;
  if (message.getBodyType().equals(IcapMessageElementEnum.REQBODY) && message.getHttpRequest() != null) {
    buffer=message.getHttpRequest().getContent();
  }
 else   if (message.getBodyType().equals(IcapMessageElementEnum.RESBODY) && message.getHttpResponse() != null) {
    buffer=message.getHttpResponse().getContent();
  }
 else   if (message instanceof IcapResponse && message.getBodyType().equals(IcapMessageElementEnum.OPTBODY)) {
    IcapResponse response=(IcapResponse)message;
    buffer=response.getContent();
  }
  return buffer;
}","/** 
 * Convenience method to retrieve a HTTP request,response or  an ICAP options response body from an aggregated IcapMessage. 
 * @param message
 * @return null or @see {@link ChannelBuffer} if a body exists.
 */
public static ChannelBuffer extractHttpBodyContentFromIcapMessage(IcapMessage message){
  ChannelBuffer buffer=null;
  if (message != null) {
    if (message.getHttpRequest() != null && message.getHttpRequest().getContent().readableBytes() > 0) {
      buffer=message.getHttpRequest().getContent();
    }
 else     if (message.getHttpResponse() != null && message.getHttpResponse().getContent().readableBytes() > 0) {
      buffer=message.getHttpResponse().getContent();
    }
 else     if (message instanceof IcapResponse) {
      if (((IcapResponse)message).getContent().readableBytes() > 0) {
        buffer=((IcapResponse)message).getContent();
      }
    }
  }
  return buffer;
}",0.5208098987626547
2901,"private void validateMandatoryMessageHeaders(IcapMessage message,boolean isDecodingResponse){
  if (!isDecodingResponse) {
    if (!message.containsHeader(IcapHeaders.Names.HOST)) {
      throw new IcapDecodingError(""String_Node_Str"");
    }
  }
  if (!message.containsHeader(IcapHeaders.Names.ENCAPSULATED)) {
    throw new IcapDecodingError(""String_Node_Str"");
  }
}","private void validateMandatoryMessageHeaders(IcapMessage message,boolean isDecodingResponse,boolean isDecodingOptionsRequest){
  if (!isDecodingResponse) {
    if (!message.containsHeader(IcapHeaders.Names.HOST)) {
      throw new IcapDecodingError(""String_Node_Str"");
    }
  }
  if (!isDecodingOptionsRequest) {
    if (!message.containsHeader(IcapHeaders.Names.ENCAPSULATED)) {
      throw new IcapDecodingError(""String_Node_Str"");
    }
  }
}",0.9041769041769042
2902,"@Override public StateEnum onExit(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder,Object decisionInformation) throws DecodingException {
  IcapMessage message=icapMessageDecoder.message;
  Encapsulated encapsulated=message.getEncapsulatedHeader();
  if (message instanceof IcapRequest && ((IcapRequest)message).getMethod().equals(IcapMethod.OPTIONS)) {
    if (encapsulated.containsEntry(IcapMessageElementEnum.OPTBODY)) {
      return StateEnum.READ_CHUNK_SIZE_STATE;
    }
 else {
      return null;
    }
  }
 else {
    IcapMessageElementEnum entry=encapsulated.getNextEntry();
    if (entry != null) {
      if (entry.equals(IcapMessageElementEnum.REQHDR)) {
        return StateEnum.READ_HTTP_REQUEST_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESHDR)) {
        return StateEnum.READ_HTTP_RESPONSE_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.REQBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
    }
  }
  return null;
}","@Override public StateEnum onExit(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder,Object decisionInformation) throws DecodingException {
  IcapMessage message=icapMessageDecoder.message;
  Encapsulated encapsulated=message.getEncapsulatedHeader();
  if (message instanceof IcapRequest && ((IcapRequest)message).getMethod().equals(IcapMethod.OPTIONS)) {
    if (encapsulated != null && encapsulated.containsEntry(IcapMessageElementEnum.OPTBODY)) {
      return StateEnum.READ_CHUNK_SIZE_STATE;
    }
 else {
      return null;
    }
  }
 else {
    IcapMessageElementEnum entry=encapsulated.getNextEntry();
    if (entry != null) {
      if (entry.equals(IcapMessageElementEnum.REQHDR)) {
        return StateEnum.READ_HTTP_REQUEST_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESHDR)) {
        return StateEnum.READ_HTTP_RESPONSE_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.REQBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
    }
  }
  return null;
}",0.9896640826873384
2903,"@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws DecodingException {
  List<String[]> headerList=IcapDecoderUtil.readHeaders(buffer,icapMessageDecoder.maxIcapHeaderSize);
  icapMessageDecoder.message.clearHeaders();
  for (  String[] header : headerList) {
    icapMessageDecoder.message.addHeader(header[0],header[1]);
  }
  validateMandatoryMessageHeaders(icapMessageDecoder.message,icapMessageDecoder.isDecodingResponse());
  Encapsulated encapsulated=new Encapsulated(icapMessageDecoder.message.getHeader(IcapHeaders.Names.ENCAPSULATED));
  icapMessageDecoder.message.setEncapsulatedHeader(encapsulated);
  if (icapMessageDecoder.message instanceof IcapRequest && ((IcapRequest)icapMessageDecoder.message).getMethod().equals(IcapMethod.OPTIONS)) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.message);
  }
 else   if (!encapsulated.containsEntry(IcapMessageElementEnum.REQHDR) & !encapsulated.containsEntry(IcapMessageElementEnum.RESHDR)) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.message);
  }
  return StateReturnValue.createIrrelevantResult();
}","@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws DecodingException {
  List<String[]> headerList=IcapDecoderUtil.readHeaders(buffer,icapMessageDecoder.maxIcapHeaderSize);
  icapMessageDecoder.message.clearHeaders();
  for (  String[] header : headerList) {
    icapMessageDecoder.message.addHeader(header[0],header[1]);
  }
  boolean isRequest=icapMessageDecoder.message instanceof IcapRequest;
  boolean isOptionsRequest=isRequest && ((IcapRequest)icapMessageDecoder.message).getMethod().equals(IcapMethod.OPTIONS);
  validateMandatoryMessageHeaders(icapMessageDecoder.message,icapMessageDecoder.isDecodingResponse(),isOptionsRequest);
  Encapsulated encapsulated=null;
  String headerValue=icapMessageDecoder.message.getHeader(IcapHeaders.Names.ENCAPSULATED);
  if (headerValue != null) {
    encapsulated=new Encapsulated(icapMessageDecoder.message.getHeader(IcapHeaders.Names.ENCAPSULATED));
    icapMessageDecoder.message.setEncapsulatedHeader(encapsulated);
  }
  if (isOptionsRequest) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.message);
  }
 else   if (encapsulated != null && !encapsulated.containsEntry(IcapMessageElementEnum.REQHDR) & !encapsulated.containsEntry(IcapMessageElementEnum.RESHDR)) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.message);
  }
  return StateReturnValue.createIrrelevantResult();
}",0.6707787201233616
2904,"/** 
 * removes all headers with the same name from the list.
 * @param name Icap message header name
 */
public void removeHeader(String name){
  if (base == null || base.after == null) {
    base=null;
    return;
  }
  Entry entry=base.after;
  while (entry != null) {
    if (identicalKeys(entry.getKey(),name)) {
      Entry before=entry.before;
      Entry after=entry.after;
      before.after=after;
      after.before=before;
      entry=after;
    }
 else {
      entry=entry.after;
    }
  }
  if (identicalKeys(base.getKey(),name)) {
    base=base.after;
    base.before=null;
  }
}","/** 
 * removes all headers with the same name from the list.
 * @param name Icap message header name
 */
public void removeHeader(String name){
  if (base == null) {
    return;
  }
  Entry entry=null;
  if (base.after == null) {
    if (identicalKeys(base.getKey(),name)) {
      base=null;
      return;
    }
  }
 else {
    entry=base.after;
  }
  while (entry != null) {
    if (identicalKeys(entry.getKey(),name)) {
      Entry before=entry.before;
      Entry after=entry.after;
      before.after=after;
      after.before=before;
      entry=after;
    }
 else {
      entry=entry.after;
    }
  }
  if (identicalKeys(base.getKey(),name)) {
    base=base.after;
    base.before=null;
  }
}",0.839907192575406
2905,"/** 
 * reports that a given entry was processed and that the @see Encapsulated#getNextEntry() can now return the next entry in line or null if no more are present.
 * @param entryName the entry that was procesed.
 */
public void setEntryAsProcessed(IcapMessageElementEnum entryName){
  Entry entry=getEntryByName(entryName);
  entry.setIsProcessed();
}","/** 
 * reports that a given entry was processed and that the @see Encapsulated#getNextEntry() can now return the next entry in line or null if no more are present.
 * @param entryName the entry that was procesed.
 */
public void setEntryAsProcessed(IcapMessageElementEnum entryName){
  Entry entry=getEntryByName(entryName);
  if (entry != null) {
    entry.setIsProcessed();
  }
}",0.9605442176870748
2906,"/** 
 * parses the chunk size from a line.
 * @param line
 * @return -1 if the chunk size indicates that a preview message is early terminated.
 */
public static int getChunkSize(String line){
  String hex=line.trim();
  if (hex.equals(IcapCodecUtil.IEOF_SEQUENCE_STRING)) {
    return -1;
  }
  for (int i=0; i < hex.length(); i++) {
    char c=hex.charAt(i);
    if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {
      hex=hex.substring(0,i);
      break;
    }
  }
  return Integer.parseInt(hex,16);
}","/** 
 * parses the chunk size from a line.
 * @param line
 * @return -1 if the chunk size indicates that a preview message is early terminated.
 */
public static int getChunkSize(String line) throws DecodingException {
  String hex=line.trim();
  if (hex.equals(IcapCodecUtil.IEOF_SEQUENCE_STRING)) {
    return -1;
  }
  for (int i=0; i < hex.length(); i++) {
    char c=hex.charAt(i);
    if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {
      hex=hex.substring(0,i);
      break;
    }
  }
  try {
    return Integer.parseInt(hex,16);
  }
 catch (  NumberFormatException nfe) {
    throw new DecodingException(nfe);
  }
}",0.897196261682243
2907,"/** 
 * set the decoders message to NULL and the next checkpoint to @see   {@link StateEnum#SKIP_CONTROL_CHARS}
 * @return the message which was set to null in the instance.
 */
protected Object reset(){
  Object message=this.message;
  this.message=null;
  checkpoint(StateEnum.SKIP_CONTROL_CHARS);
  return message;
}","/** 
 * set the decoders message to NULL and the next checkpoint to @see   {@link StateEnum#SKIP_CONTROL_CHARS}
 */
private void reset(){
  this.message=null;
  checkpoint(StateEnum.SKIP_CONTROL_CHARS);
}",0.7418738049713193
2908,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  if (stateEnumValue != null) {
    try {
      State state=stateEnumValue.getState();
      LOG.debug(""String_Node_Str"" + state + ']');
      state.onEntry(buffer,this);
      StateReturnValue returnValue=state.execute(buffer,this);
      LOG.debug(""String_Node_Str"" + state + ""String_Node_Str""+ returnValue+ ""String_Node_Str"");
      StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
      LOG.debug(""String_Node_Str"" + nextState + ""String_Node_Str"");
      if (nextState != null) {
        checkpoint(nextState);
      }
 else {
        checkpoint();
      }
      if (returnValue.isRelevant()) {
        return returnValue.getValue();
      }
    }
 catch (    DecodingException e) {
      reset();
      throw e;
    }
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  if (stateEnumValue != null) {
    try {
      State state=stateEnumValue.getState();
      LOG.debug(""String_Node_Str"" + state + ']');
      state.onEntry(buffer,this);
      StateReturnValue returnValue=state.execute(buffer,this);
      LOG.debug(""String_Node_Str"" + state + ""String_Node_Str""+ returnValue+ ""String_Node_Str"");
      StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
      LOG.debug(""String_Node_Str"" + nextState + ""String_Node_Str"");
      if (nextState != null) {
        checkpoint(nextState);
      }
 else {
        reset();
      }
      if (returnValue.isRelevant()) {
        return returnValue.getValue();
      }
    }
 catch (    DecodingException e) {
      reset();
      throw e;
    }
  }
  return null;
}",0.9933299127757824
2909,"/** 
 * parses a valid icap protocol version string.
 * @param text the version (ICAP/1.0)
 */
private IcapVersion(String text){
  if (text == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Matcher m=VERSION_PATTERN.matcher(text.trim().toUpperCase());
  if (!m.matches()) {
    throw new IllegalArgumentException(""String_Node_Str"" + text);
  }
  protocolName=m.group(1);
  major=Integer.parseInt(m.group(2));
  minor=Integer.parseInt(m.group(3));
  this.text=text;
}","/** 
 * parses a valid icap protocol version string.
 * @param text the version (ICAP/1.0)
 */
private IcapVersion(String text){
  if (text == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Matcher m=VERSION_PATTERN.matcher(text.trim().toUpperCase());
  if (!m.matches()) {
    throw new IllegalArgumentException(""String_Node_Str"" + text + ""String_Node_Str"");
  }
  protocolName=m.group(1);
  major=Integer.parseInt(m.group(2));
  minor=Integer.parseInt(m.group(3));
  this.text=text;
}",0.9799196787148594
2910,"@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws DecodingException {
  String line=IcapDecoderUtil.readLine(buffer,icapMessageDecoder.maxInitialLineLength);
  int chunkSize=IcapDecoderUtil.getChunkSize(line);
  icapMessageDecoder.currentChunkSize=chunkSize;
  if (chunkSize == -1) {
    icapMessageDecoder.currentChunkSize=0;
    IcapDecoderUtil.readLine(buffer,Integer.MAX_VALUE);
    return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(true,true),DecisionState.IS_LAST_PREVIEW_CHUNK);
  }
 else   if (chunkSize == 0) {
    byte previewByte=buffer.getByte(buffer.readerIndex() + 1);
    if (previewByte == IcapCodecUtil.CR | previewByte == IcapCodecUtil.LF) {
      IcapDecoderUtil.readLine(buffer,10);
      if (icapMessageDecoder.message.isPreviewMessage()) {
        return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(true,false),DecisionState.IS_LAST_PREVIEW_CHUNK);
      }
 else {
        return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(icapMessageDecoder.message.isPreviewMessage(),false),DecisionState.IS_LAST_CHUNK);
      }
    }
 else {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_TRAILING_HEADERS);
    }
  }
 else {
    icapMessageDecoder.currentChunkSize=chunkSize;
    if (chunkSize >= icapMessageDecoder.maxChunkSize) {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_HUGE_CHUNK_IN_SMALER_CHUNKS);
    }
 else {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_CHUNK);
    }
  }
}","@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws DecodingException {
  int chunkSize=0;
  String previewLine=IcapDecoderUtil.previewLine(buffer,icapMessageDecoder.maxInitialLineLength);
  try {
    chunkSize=IcapDecoderUtil.getChunkSize(previewLine);
    IcapDecoderUtil.readLine(buffer,icapMessageDecoder.maxInitialLineLength);
  }
 catch (  DecodingException de) {
    return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.RESET);
  }
  icapMessageDecoder.currentChunkSize=chunkSize;
  if (chunkSize > 0) {
    if (chunkSize >= icapMessageDecoder.maxChunkSize) {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_HUGE_CHUNK_IN_SMALER_CHUNKS);
    }
 else {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_CHUNK);
    }
  }
 else   if (chunkSize == -1) {
    icapMessageDecoder.currentChunkSize=0;
    IcapDecoderUtil.readLine(buffer,Integer.MAX_VALUE);
    return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(true,true),DecisionState.IS_LAST_PREVIEW_CHUNK);
  }
 else   if (chunkSize == 0) {
    if (!checkForLineBreak(buffer)) {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_TRAILING_HEADERS);
    }
    IcapDecoderUtil.readLine(buffer,10);
    if (icapMessageDecoder.message.isPreviewMessage()) {
      return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(true,false),DecisionState.IS_LAST_PREVIEW_CHUNK);
    }
 else {
      return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(icapMessageDecoder.message.isPreviewMessage(),false),DecisionState.IS_LAST_CHUNK);
    }
  }
 else {
    return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.RESET);
  }
}",0.2828447339847991
2911,"@Override public StateEnum onExit(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder,Object decisionInformation) throws DecodingException {
  IcapMessage message=icapMessageDecoder.message;
  if (message == null) {
    return null;
  }
  Encapsulated encapsulated=message.getEncapsulatedHeader();
  if (message.getMethod().equals(IcapMethod.OPTIONS)) {
    if (encapsulated.containsEntry(IcapMessageElementEnum.OPTBODY)) {
      return StateEnum.READ_CHUNK_SIZE_STATE;
    }
 else {
      return null;
    }
  }
 else {
    IcapMessageElementEnum entry=encapsulated.getNextEntry();
    if (entry != null) {
      if (entry.equals(IcapMessageElementEnum.REQHDR)) {
        return StateEnum.READ_HTTP_REQUEST_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESHDR)) {
        return StateEnum.READ_HTTP_RESPONSE_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.REQBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
    }
  }
  return null;
}","@Override public StateEnum onExit(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder,Object decisionInformation) throws DecodingException {
  IcapMessage message=icapMessageDecoder.message;
  Encapsulated encapsulated=message.getEncapsulatedHeader();
  if (message.getMethod().equals(IcapMethod.OPTIONS)) {
    if (encapsulated.containsEntry(IcapMessageElementEnum.OPTBODY)) {
      return StateEnum.READ_CHUNK_SIZE_STATE;
    }
 else {
      return null;
    }
  }
 else {
    IcapMessageElementEnum entry=encapsulated.getNextEntry();
    if (entry != null) {
      if (entry.equals(IcapMessageElementEnum.REQHDR)) {
        return StateEnum.READ_HTTP_REQUEST_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESHDR)) {
        return StateEnum.READ_HTTP_RESPONSE_INITIAL_AND_HEADERS;
      }
 else       if (entry.equals(IcapMessageElementEnum.REQBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
 else       if (entry.equals(IcapMessageElementEnum.RESBODY)) {
        return StateEnum.READ_CHUNK_SIZE_STATE;
      }
    }
  }
  return null;
}",0.9795191451469278
2912,"@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws DecodingException {
  List<String[]> headerList=IcapDecoderUtil.readHeaders(buffer,icapMessageDecoder.maxIcapHeaderSize);
  icapMessageDecoder.message.clearHeaders();
  for (  String[] header : headerList) {
    icapMessageDecoder.message.addHeader(header[0],header[1]);
  }
  validateMandatoryMessageHeaders(icapMessageDecoder.message,icapMessageDecoder.isDecodingResponse());
  Encapsulated encapsulated=new Encapsulated(icapMessageDecoder.message.getHeader(IcapHeader.Names.ENCAPSULATED));
  icapMessageDecoder.message.setEncapsulatedHeader(encapsulated);
  if (icapMessageDecoder.message.getMethod().equals(IcapMethod.OPTIONS)) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.message);
  }
 else   if (!encapsulated.containsEntry(IcapMessageElementEnum.REQHDR) & !encapsulated.containsEntry(IcapMessageElementEnum.RESHDR)) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.reset());
  }
  return StateReturnValue.createIrrelevantResult();
}","@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws DecodingException {
  List<String[]> headerList=IcapDecoderUtil.readHeaders(buffer,icapMessageDecoder.maxIcapHeaderSize);
  icapMessageDecoder.message.clearHeaders();
  for (  String[] header : headerList) {
    icapMessageDecoder.message.addHeader(header[0],header[1]);
  }
  validateMandatoryMessageHeaders(icapMessageDecoder.message,icapMessageDecoder.isDecodingResponse());
  Encapsulated encapsulated=new Encapsulated(icapMessageDecoder.message.getHeader(IcapHeader.Names.ENCAPSULATED));
  icapMessageDecoder.message.setEncapsulatedHeader(encapsulated);
  if (icapMessageDecoder.message.getMethod().equals(IcapMethod.OPTIONS)) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.message);
  }
 else   if (!encapsulated.containsEntry(IcapMessageElementEnum.REQHDR) & !encapsulated.containsEntry(IcapMessageElementEnum.RESHDR)) {
    return StateReturnValue.createRelevantResult(icapMessageDecoder.message);
  }
  return StateReturnValue.createIrrelevantResult();
}",0.993607305936073
2913,"@Test public void testChunkSize(){
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",51,IcapDecoderUtil.getChunkSize(line));
}","@Test public void testChunkSize() throws DecodingException {
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",51,IcapDecoderUtil.getChunkSize(line));
}",0.9161290322580644
2914,"@Test public void testIEOFChunkSize(){
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",-1,IcapDecoderUtil.getChunkSize(line));
}","@Test public void testIEOFChunkSize() throws DecodingException {
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",-1,IcapDecoderUtil.getChunkSize(line));
}",0.9182389937106918
2915,"@Test public void testChunkSizeWithTrailingWhitespace(){
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",0,IcapDecoderUtil.getChunkSize(line));
}","@Test public void testChunkSizeWithTrailingWhitespace() throws DecodingException {
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",0,IcapDecoderUtil.getChunkSize(line));
}",0.9261363636363636
2916,"@Test public void testChunkSizeWithTrailingSemicolon(){
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",0,IcapDecoderUtil.getChunkSize(line));
}","@Test public void testChunkSizeWithTrailingSemicolon() throws DecodingException {
  String line=""String_Node_Str"";
  assertEquals(""String_Node_Str"",0,IcapDecoderUtil.getChunkSize(line));
}",0.9257142857142856
2917,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  buffer=new AnaylsisChannelBuffer(buffer);
  State state=stateEnumValue.getState();
  LOG.debug(""String_Node_Str"" + state + ']');
  state.onEntry(buffer,this);
  StateReturnValue returnValue=state.execute(buffer,this);
  LOG.debug(""String_Node_Str"" + state + ""String_Node_Str""+ returnValue+ ""String_Node_Str"");
  StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
  LOG.debug(""String_Node_Str"" + nextState + ""String_Node_Str"");
  if (nextState != null) {
    checkpoint(nextState);
  }
  if (returnValue.isRelevant()) {
    return returnValue.getValue();
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  if (stateEnumValue != null) {
    State state=stateEnumValue.getState();
    LOG.debug(""String_Node_Str"" + state + ']');
    state.onEntry(buffer,this);
    StateReturnValue returnValue=state.execute(buffer,this);
    LOG.debug(""String_Node_Str"" + state + ""String_Node_Str""+ returnValue+ ""String_Node_Str"");
    StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
    LOG.debug(""String_Node_Str"" + nextState + ""String_Node_Str"");
    if (nextState != null) {
      checkpoint(nextState);
    }
 else {
      checkpoint();
    }
    if (returnValue.isRelevant()) {
      return returnValue.getValue();
    }
  }
  return null;
}",0.8669064748201439
2918,"@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws Exception {
  String line=IcapDecoderUtil.readLine(buffer,icapMessageDecoder.maxInitialLineLength);
  int chunkSize=IcapDecoderUtil.getChunkSize(line);
  icapMessageDecoder.currentChunkSize=chunkSize;
  if (chunkSize == -1) {
    icapMessageDecoder.currentChunkSize=0;
    IcapDecoderUtil.readLine(buffer,Integer.MAX_VALUE);
    return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(true,true),DecisionState.IS_LAST_PREVIEW_CHUNK);
  }
 else   if (chunkSize == -2) {
    return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.IRRELEVANT);
  }
 else   if (chunkSize == 0) {
    byte previewByte=buffer.getByte(buffer.readerIndex() + 1);
    if (previewByte == IcapCodecUtil.CR | previewByte == IcapCodecUtil.LF) {
      if (icapMessageDecoder.message.isPreviewMessage()) {
        return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.IS_LAST_PREVIEW_CHUNK);
      }
 else {
        return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(icapMessageDecoder.message.isPreviewMessage(),false),DecisionState.IS_LAST_CHUNK);
      }
    }
 else {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_TRAILING_HEADERS);
    }
  }
 else {
    icapMessageDecoder.currentChunkSize=chunkSize;
    if (chunkSize >= icapMessageDecoder.maxChunkSize) {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_HUGE_CHUNK_IN_SMALER_CHUNKS);
    }
 else {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_CHUNK);
    }
  }
}","@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws Exception {
  String line=IcapDecoderUtil.readLine(buffer,icapMessageDecoder.maxInitialLineLength);
  int chunkSize=IcapDecoderUtil.getChunkSize(line);
  icapMessageDecoder.currentChunkSize=chunkSize;
  if (chunkSize == -1) {
    icapMessageDecoder.currentChunkSize=0;
    IcapDecoderUtil.readLine(buffer,Integer.MAX_VALUE);
    return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(true,true),DecisionState.IS_LAST_PREVIEW_CHUNK);
  }
 else   if (chunkSize == 0) {
    byte previewByte=buffer.getByte(buffer.readerIndex() + 1);
    if (previewByte == IcapCodecUtil.CR | previewByte == IcapCodecUtil.LF) {
      IcapDecoderUtil.readLine(buffer,10);
      if (icapMessageDecoder.message.isPreviewMessage()) {
        return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(true,false),DecisionState.IS_LAST_PREVIEW_CHUNK);
      }
 else {
        return StateReturnValue.createRelevantResultWithDecisionInformation(new DefaultIcapChunkTrailer(icapMessageDecoder.message.isPreviewMessage(),false),DecisionState.IS_LAST_CHUNK);
      }
    }
 else {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_TRAILING_HEADERS);
    }
  }
 else {
    icapMessageDecoder.currentChunkSize=chunkSize;
    if (chunkSize >= icapMessageDecoder.maxChunkSize) {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_HUGE_CHUNK_IN_SMALER_CHUNKS);
    }
 else {
      return StateReturnValue.createIrrelevantResultWithDecisionInformation(DecisionState.READ_CHUNK);
    }
  }
}",0.9365576102418208
2919,"@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof IcapMessage) {
    IcapMessage currentMessage=(IcapMessage)msg;
    message=currentMessage;
    if (message.getBody() == null || message.getBody().equals(IcapMessageElementEnum.NULLBODY)) {
      Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
      message=null;
      return;
    }
  }
 else   if (msg instanceof IcapChunkTrailer) {
    if (message == null) {
      ctx.sendUpstream(e);
    }
 else {
      IcapChunkTrailer trailer=(IcapChunkTrailer)msg;
      if (message.getBody().equals(IcapMessageElementEnum.REQBODY)) {
        for (        String name : trailer.getHeaderNames()) {
          message.getHttpRequest().addHeader(name,trailer.getHeader(name));
        }
      }
 else       if (message.getBody().equals(IcapMessageElementEnum.RESBODY)) {
        for (        String name : trailer.getHeaderNames()) {
          message.getHttpResponse().addHeader(name,trailer.getHeader(name));
        }
      }
      Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
    }
  }
 else   if (msg instanceof IcapChunk) {
    IcapChunk chunk=(IcapChunk)msg;
    if (message == null) {
      ctx.sendUpstream(e);
    }
 else     if (chunk.isLast()) {
      Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
      message=null;
    }
 else {
      ChannelBuffer chunkBuffer=chunk.getContent();
      if (message.getBody().equals(IcapMessageElementEnum.REQBODY)) {
        if (message.getHttpRequest() != null) {
          if (message.getHttpRequest().getContent().readableBytes() <= 0) {
            message.getHttpRequest().setContent(ChannelBuffers.dynamicBuffer());
          }
          message.getHttpRequest().getContent().writeBytes(chunkBuffer);
        }
 else {
        }
      }
 else       if (message.getBody().equals(IcapMessageElementEnum.RESBODY)) {
        if (message.getHttpResponse() != null) {
          if (message.getHttpResponse().getContent().readableBytes() <= 0) {
            message.getHttpResponse().setContent(ChannelBuffers.dynamicBuffer());
          }
          message.getHttpResponse().getContent().writeBytes(chunkBuffer);
        }
 else {
        }
      }
 else {
      }
    }
  }
 else {
    ctx.sendUpstream(e);
  }
}","@Override public void messageReceived(ChannelHandlerContext ctx,MessageEvent e) throws Exception {
  Object msg=e.getMessage();
  if (msg instanceof IcapMessage) {
    IcapMessage currentMessage=(IcapMessage)msg;
    message=currentMessage;
    if (message.getBody() == null || message.getBody().equals(IcapMessageElementEnum.NULLBODY)) {
      Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
      message=null;
      return;
    }
  }
 else   if (msg instanceof IcapChunkTrailer) {
    if (message == null) {
      ctx.sendUpstream(e);
    }
 else {
      IcapChunkTrailer trailer=(IcapChunkTrailer)msg;
      if (trailer.getHeaderNames().size() > 0) {
        for (        String name : trailer.getHeaderNames()) {
          if (message.getBody().equals(IcapMessageElementEnum.REQBODY)) {
            message.getHttpRequest().addHeader(name,trailer.getHeader(name));
          }
 else           if (message.getBody().equals(IcapMessageElementEnum.RESBODY)) {
            message.getHttpResponse().addHeader(name,trailer.getHeader(name));
          }
        }
      }
      Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
    }
  }
 else   if (msg instanceof IcapChunk) {
    IcapChunk chunk=(IcapChunk)msg;
    if (message == null) {
      ctx.sendUpstream(e);
    }
 else     if (chunk.isLast()) {
      Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
      message=null;
    }
 else {
      ChannelBuffer chunkBuffer=chunk.getContent();
      if (message.getBody().equals(IcapMessageElementEnum.REQBODY)) {
        if (message.getHttpRequest() != null) {
          if (message.getHttpRequest().getContent().readableBytes() <= 0) {
            message.getHttpRequest().setContent(ChannelBuffers.dynamicBuffer());
          }
          message.getHttpRequest().getContent().writeBytes(chunkBuffer);
        }
 else {
        }
      }
 else       if (message.getBody().equals(IcapMessageElementEnum.RESBODY)) {
        if (message.getHttpResponse() != null) {
          if (message.getHttpResponse().getContent().readableBytes() <= 0) {
            message.getHttpResponse().setContent(ChannelBuffers.dynamicBuffer());
          }
          message.getHttpResponse().getContent().writeBytes(chunkBuffer);
        }
 else {
        }
      }
 else {
      }
    }
  }
 else {
    ctx.sendUpstream(e);
  }
}",0.9002123142250531
2920,"protected void setupTricklePipeline(ServerBootstrap serverBootstrap,ClientBootstrap clientBootstrap,Handler serverHandler,Handler clientHandler){
  serverBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapRequestDecoder());
  serverBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapResponseEncoder());
  serverBootstrap.getPipeline().addLast(""String_Node_Str"",(SimpleChannelUpstreamHandler)serverHandler);
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",new TrickleDownstreamHandler(5,3));
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapRequestEncoder());
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapResponseDecoder());
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",(SimpleChannelUpstreamHandler)clientHandler);
}","protected void setupTricklePipeline(ServerBootstrap serverBootstrap,ClientBootstrap clientBootstrap,Handler serverHandler,Handler clientHandler){
  serverBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapRequestDecoder());
  serverBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapResponseEncoder());
  serverBootstrap.getPipeline().addLast(""String_Node_Str"",(SimpleChannelUpstreamHandler)serverHandler);
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",new TrickleDownstreamHandler(20,3));
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapRequestEncoder());
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",new IcapResponseDecoder());
  clientBootstrap.getPipeline().addLast(""String_Node_Str"",(SimpleChannelUpstreamHandler)clientHandler);
}",0.998104864181933
2921,"public void sendREQMODWithPreviewThroughAggregatorPipleline(){
  try {
    runSocketTest(new SendREQMODWithPreviewAggregatorServerHandler(),new SendREQMODWithPreviewClientHandler(),new Object[]{DataMockery.createREQMODWithPreviewAnnouncementIcapMessage(),DataMockery.createREQMODWithPreviewIcapChunk(),DataMockery.createREQMODWithPreviewLastIcapChunk()},PipelineType.AGGREGATOR);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","@Test public void sendREQMODWithPreviewThroughAggregatorPipleline(){
  try {
    runSocketTest(new SendREQMODWithPreviewAggregatorServerHandler(),new SendREQMODWithPreviewClientHandler(),new Object[]{DataMockery.createREQMODWithPreviewAnnouncementIcapMessage(),DataMockery.createREQMODWithPreviewIcapChunk(),DataMockery.createREQMODWithPreviewLastIcapChunk()},PipelineType.AGGREGATOR);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}",0.9938775510204082
2922,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  State state=stateEnumValue.getState();
  System.out.print(stateEnumValue.name() + ""String_Node_Str"");
  state.onEntry(buffer,this);
  StateReturnValue returnValue=state.execute(buffer,this);
  if (returnValue == null) {
    System.out.print(""String_Node_Str"");
  }
 else {
    System.out.print(returnValue.toString() + ""String_Node_Str"");
  }
  StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
  System.out.println(nextState);
  if (nextState != null) {
    checkpoint(nextState);
  }
 else {
    checkpoint();
  }
  if (returnValue.isRelevant()) {
    return returnValue.getValue();
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  State state=stateEnumValue.getState();
  System.out.print(stateEnumValue.name() + ""String_Node_Str"");
  state.onEntry(buffer,this);
  StateReturnValue returnValue=state.execute(buffer,this);
  if (returnValue == null) {
    System.out.print(""String_Node_Str"");
  }
 else {
    System.out.print(returnValue.toString() + ""String_Node_Str"");
  }
  StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
  System.out.println(nextState);
  if (nextState != null) {
    checkpoint(nextState);
  }
  if (returnValue.isRelevant()) {
    return returnValue.getValue();
  }
  return null;
}",0.896969696969697
2923,"private int correctBufferIndex(ChannelBuffer buffer){
  buffer.readerIndex(buffer.readerIndex() - IcapCodecUtil.IEOF_SEQUENCE.length);
  int counter=0;
  for (; ; ) {
    counter++;
    byte next=buffer.getByte(buffer.readerIndex() - 1);
    if (next == IcapCodecUtil.CR) {
      counter++;
      if (buffer.getByte(buffer.readerIndex() - 1) == IcapCodecUtil.LF) {
        break;
      }
    }
 else     if (next == IcapCodecUtil.LF) {
      break;
    }
  }
  buffer.readerIndex(buffer.readerIndex() - counter);
  return counter;
}","/** 
 * This method steps back across the given token length and the prepending newline characters ('\r' & '\n')  until the end of a chunk is reached.
 * @return the amount of newline characters that the index is put back. (classically: 1 '\n')
 */
private int correctBufferIndex(ChannelBuffer buffer,int size){
  buffer.readerIndex(buffer.readerIndex() - size);
  int counter=0;
  for (; ; ) {
    counter++;
    byte next=buffer.getByte(buffer.readerIndex() - counter);
    if (next == IcapCodecUtil.CR) {
      counter++;
      if (buffer.getByte(buffer.readerIndex() - counter) == IcapCodecUtil.LF) {
        break;
      }
    }
 else     if (next == IcapCodecUtil.LF) {
      break;
    }
  }
  buffer.readerIndex(buffer.readerIndex() - counter);
  return counter;
}",0.3834355828220859
2924,"@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws Exception {
  IcapChunk chunk=null;
  if (icapMessageDecoder.message.isPreview()) {
    Matcher ieofMatcher=new Matcher(IcapCodecUtil.IEOF_SEQUENCE);
    ChannelBuffer previewBuffer=ChannelBuffers.dynamicBuffer();
    int counter=0;
    while (counter <= icapMessageDecoder.currentChunkSize) {
      Byte bite=null;
      try {
        bite=buffer.readByte();
        counter++;
      }
 catch (      IndexOutOfBoundsException ioobe) {
        return StateReturnValue.createIrrelevantResultWithDecisionInformation(ReadChunkStateProcessing.READ_CHUNK_AGAIN);
      }
      previewBuffer.writeByte(bite);
      if (ieofMatcher.addByteAndMatch(bite)) {
        int step=correctBufferIndex(buffer);
        ChannelBuffer ieofBuffer=previewBuffer.copy(0,previewBuffer.readableBytes() - (IcapCodecUtil.IEOF_SEQUENCE.length + step + 1));
        chunk=new DefaultIcapChunk(ieofBuffer);
        chunk.setIsPreviewChunk();
        chunk.setIsEarlyTerminated();
        icapMessageDecoder.currentChunkSize=0;
        return StateReturnValue.createRelevantResultWithDecisionInformation(chunk,ReadChunkStateProcessing.GO_TO_DELIMITER);
      }
    }
    chunk=new DefaultIcapChunk(previewBuffer.copy(0,previewBuffer.readableBytes() - 1));
    chunk.setIsPreviewChunk();
    return StateReturnValue.createRelevantResultWithDecisionInformation(chunk,ReadChunkStateProcessing.GO_TO_DELIMITER);
  }
 else {
    chunk=new DefaultIcapChunk(buffer.readBytes(icapMessageDecoder.currentChunkSize));
    return StateReturnValue.createRelevantResultWithDecisionInformation(chunk,ReadChunkStateProcessing.GO_TO_DELIMITER);
  }
}","@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws Exception {
  IcapChunk chunk=null;
  if (icapMessageDecoder.message.isPreview()) {
    Matcher ieofMatcher=new Matcher(IcapCodecUtil.IEOF_SEQUENCE);
    ChannelBuffer previewBuffer=ChannelBuffers.dynamicBuffer();
    int counter=0;
    while (counter <= icapMessageDecoder.currentChunkSize) {
      Byte bite=null;
      try {
        bite=buffer.readByte();
        counter++;
      }
 catch (      IndexOutOfBoundsException ioobe) {
        return StateReturnValue.createIrrelevantResultWithDecisionInformation(ReadChunkStateProcessing.READ_CHUNK_AGAIN);
      }
      previewBuffer.writeByte(bite);
      if (ieofMatcher.addByteAndMatch(bite)) {
        int step=correctBufferIndex(buffer,IcapCodecUtil.IEOF_SEQUENCE.length);
        ChannelBuffer ieofBuffer=previewBuffer.copy(0,previewBuffer.readableBytes() - (IcapCodecUtil.IEOF_SEQUENCE.length + step));
        chunk=new DefaultIcapChunk(ieofBuffer);
        chunk.setIsPreviewChunk();
        chunk.setIsEarlyTerminated();
        icapMessageDecoder.currentChunkSize=0;
        return StateReturnValue.createRelevantResultWithDecisionInformation(chunk,ReadChunkStateProcessing.GO_TO_DELIMITER);
      }
    }
    int step=correctBufferIndex(buffer,0);
    chunk=new DefaultIcapChunk(previewBuffer.copy(0,previewBuffer.readableBytes() - step));
    chunk.setIsPreviewChunk();
    return StateReturnValue.createRelevantResultWithDecisionInformation(chunk,ReadChunkStateProcessing.GO_TO_DELIMITER);
  }
 else {
    chunk=new DefaultIcapChunk(buffer.readBytes(icapMessageDecoder.currentChunkSize));
    return StateReturnValue.createRelevantResultWithDecisionInformation(chunk,ReadChunkStateProcessing.GO_TO_DELIMITER);
  }
}",0.9243505566657152
2925,"@Override public int compareTo(Entry entry){
  if (entry.getName().equals(EntryName.NULLBODY)) {
    return 1;
  }
  return this.position.compareTo(entry.position);
}","@Override public int compareTo(Entry entry){
  return this.position.compareTo(entry.position);
}",0.732824427480916
2926,"@Test public void runTest(){
  try {
    super.runDecoderTest(new Handler(),new DefaultIcapRequest(IcapVersion.ICAP_1_0,IcapMethod.OPTIONS,""String_Node_Str""));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void runTest(){
  try {
    super.runDecoderTest(new Handler(),new DefaultIcapRequest(IcapVersion.ICAP_1_0,IcapMethod.OPTIONS,""String_Node_Str""));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9861111111111112
2927,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  State state=stateEnumValue.getState();
  state.onEntry(buffer,this);
  StateReturnValue returnValue=state.execute(buffer,this);
  StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
  if (nextState != null) {
    checkpoint(nextState);
  }
 else {
    checkpoint();
  }
  if (returnValue.isRelevant()) {
    return returnValue.getValue();
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer,StateEnum stateEnumValue) throws Exception {
  State state=stateEnumValue.getState();
  System.out.println(stateEnumValue.name());
  state.onEntry(buffer,this);
  StateReturnValue returnValue=state.execute(buffer,this);
  StateEnum nextState=state.onExit(buffer,this,returnValue.getDecisionInformation());
  if (nextState != null) {
    checkpoint(nextState);
  }
 else {
    checkpoint();
  }
  if (returnValue.isRelevant()) {
    return returnValue.getValue();
  }
  return null;
}",0.9633848657445078
2928,"@Override public StateEnum onExit(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder,Object decisionInformation) throws Exception {
  IcapMessage message=icapMessageDecoder.message;
  Encapsulated encapsulated=message.getEncapsulatedHeader();
  if (message.getMethod().equals(IcapMethod.OPTIONS)) {
    return StateEnum.OPTIONS_REQUEST_ACTION_STATE;
  }
  EntryName entry=encapsulated.getNextEntry();
  if (entry != null) {
    if (entry.equals(EntryName.REQHDR)) {
      return StateEnum.READ_HTTP_REQUEST_INITIAL_AND_HEADERS;
    }
    if (entry.equals(EntryName.RESHDR)) {
      return StateEnum.READ_HTTP_RESPONSE_INITIAL_AND_HEADERS;
    }
    if (entry.equals(EntryName.REQBODY) | entry.equals(EntryName.RESBODY)) {
      return StateEnum.BODY_PROCESSING_DECISION_STATE;
    }
  }
  return null;
}","@Override public StateEnum onExit(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder,Boolean decisionInformation) throws Exception {
  IcapMessage message=icapMessageDecoder.message;
  Encapsulated encapsulated=message.getEncapsulatedHeader();
  if (message.getMethod().equals(IcapMethod.OPTIONS) & decisionInformation) {
    return StateEnum.BODY_PROCESSING_DECISION_STATE;
  }
 else {
    if (message.getMethod().equals(IcapMethod.OPTIONS)) {
      return null;
    }
    EntryName entry=encapsulated.getNextEntry();
    if (entry != null) {
      if (entry.equals(EntryName.REQHDR)) {
        return StateEnum.READ_HTTP_REQUEST_INITIAL_AND_HEADERS;
      }
      if (entry.equals(EntryName.RESHDR)) {
        return StateEnum.READ_HTTP_RESPONSE_INITIAL_AND_HEADERS;
      }
      if (entry.equals(EntryName.REQBODY) | entry.equals(EntryName.RESBODY)) {
        return StateEnum.BODY_PROCESSING_DECISION_STATE;
      }
    }
  }
  return null;
}",0.711211778029445
2929,"@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws Exception {
  List<String[]> headerList=IcapDecoderUtil.readHeaders(buffer,icapMessageDecoder.maxIcapHeaderSize);
  icapMessageDecoder.message.clearHeaders();
  for (  String[] header : headerList) {
    icapMessageDecoder.message.addHeader(header[0],header[1]);
  }
  if (!icapMessageDecoder.message.containsHeader(IcapHeaders.Names.HOST)) {
    throw new Error(""String_Node_Str"");
  }
  if (!icapMessageDecoder.message.containsHeader(IcapHeaders.Names.ENCAPSULATED)) {
    throw new Error(""String_Node_Str"");
  }
  Encapsulated encapsulated=Encapsulated.parseHeader(icapMessageDecoder.message.getHeader(IcapHeaders.Names.ENCAPSULATED));
  icapMessageDecoder.message.setEncapsulatedHeader(encapsulated);
  return StateReturnValue.createIrrelevantResult();
}","@Override public StateReturnValue execute(ChannelBuffer buffer,IcapMessageDecoder icapMessageDecoder) throws Exception {
  List<String[]> headerList=IcapDecoderUtil.readHeaders(buffer,icapMessageDecoder.maxIcapHeaderSize);
  icapMessageDecoder.message.clearHeaders();
  for (  String[] header : headerList) {
    icapMessageDecoder.message.addHeader(header[0],header[1]);
  }
  if (!icapMessageDecoder.message.containsHeader(IcapHeaders.Names.HOST)) {
    throw new Error(""String_Node_Str"");
  }
  if (!icapMessageDecoder.message.containsHeader(IcapHeaders.Names.ENCAPSULATED)) {
    throw new Error(""String_Node_Str"");
  }
  Encapsulated encapsulated=Encapsulated.parseHeader(icapMessageDecoder.message.getHeader(IcapHeaders.Names.ENCAPSULATED));
  icapMessageDecoder.message.setEncapsulatedHeader(encapsulated);
  if (icapMessageDecoder.message.getMethod().equals(IcapMethod.OPTIONS) & icapMessageDecoder.message.getEncapsulatedHeader().containsEntry(EntryName.OPTBODY)) {
    return StateReturnValue.createIrrelevantResultWithDecisionInformation(Boolean.TRUE);
  }
  return StateReturnValue.createRelevantResultWithDecisionInformation(icapMessageDecoder.message,Boolean.FALSE);
}",0.8452903855539288
2930,"public StateReturnValue(boolean relevance,Object value,Object decisionInformation){
  this.relevance=relevance;
  this.value=value;
}","public StateReturnValue(boolean relevance,Object value,Object decisionInformation){
  this.relevance=relevance;
  this.value=value;
  this.decisionInformation=decisionInformation;
}",0.8471337579617835
2931,"public static final ChannelBuffer createWhiteSpacePrefixedOPTIONSRequest(){
  StringBuilder builder=new StringBuilder();
  addLine(builder,""String_Node_Str"");
  addLine(builder,""String_Node_Str"");
  addLine(builder,null);
  return ChannelBuffers.wrappedBuffer(builder.toString().getBytes());
}","public static final ChannelBuffer createWhiteSpacePrefixedOPTIONSRequest(){
  StringBuilder builder=new StringBuilder();
  addLine(builder,""String_Node_Str"");
  addLine(builder,""String_Node_Str"");
  addLine(builder,""String_Node_Str"");
  addLine(builder,null);
  return ChannelBuffers.wrappedBuffer(builder.toString().getBytes());
}",0.939102564102564
2932,"public static final ChannelBuffer createOPTIONSRequest(){
  StringBuilder builder=new StringBuilder();
  addLine(builder,""String_Node_Str"");
  addLine(builder,""String_Node_Str"");
  addLine(builder,null);
  return ChannelBuffers.wrappedBuffer(builder.toString().getBytes());
}","public static final ChannelBuffer createOPTIONSRequest(){
  StringBuilder builder=new StringBuilder();
  addLine(builder,""String_Node_Str"");
  addLine(builder,""String_Node_Str"");
  addLine(builder,""String_Node_Str"");
  addLine(builder,null);
  return ChannelBuffers.wrappedBuffer(builder.toString().getBytes());
}",0.935374149659864
2933,"@Test public void decodeREQMODRequestWithNullBody(){
  embedder.offer(DataMockery.createREQMODWithGetRequestNoBody());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
}","@Test public void decodeREQMODRequestWithNullBody(){
  embedder.offer(DataMockery.createREQMODWithGetRequestNoBody());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
  DataMockery.assertCreateREQMODWithGetRequestNoBody(result);
}",0.8663793103448276
2934,"@Test public void stripPrefixingWhitespacesFromMessage(){
  embedder.offer(DataMockery.createWhiteSpacePrefixedOPTIONSRequest());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
}","@Test public void stripPrefixingWhitespacesFromMessage(){
  embedder.offer(DataMockery.createWhiteSpacePrefixedOPTIONSRequest());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
  DataMockery.assertCreateWhiteSpacePrefixedOPTIONSRequest(result);
}",0.8617886178861789
2935,"@Test public void decodeRESPMODRequestWithNullBodyAndReverseRequestAlignement(){
  embedder.offer(DataMockery.createRESPMODWithGetRequestNoBodyAndReverseRequestAlignement());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
}","@Test public void decodeRESPMODRequestWithNullBodyAndReverseRequestAlignement(){
  embedder.offer(DataMockery.createRESPMODWithGetRequestNoBodyAndReverseRequestAlignement());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
  DataMockery.assertCreateRESPMODWithGetRequestNoBodyAndReverseRequestAlignement(result);
}",0.8509933774834437
2936,"public void decodeOPTIONRequestTest(){
  embedder.offer(DataMockery.createOPTIONSRequest());
  IcapMessage result=embedder.poll();
  assertEquals(true,true);
}","@Test public void decodeOPTIONRequestTest(){
  embedder.offer(DataMockery.createOPTIONSRequest());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
  DataMockery.assertCreateOPTIONSRequest(result);
}",0.7435897435897436
2937,"@Test public void decodeRESPMODRequestWithNullBody(){
  embedder.offer(DataMockery.createRESPMODWithGetRequestNoBody());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
}","@Test public void decodeRESPMODRequestWithNullBody(){
  embedder.offer(DataMockery.createRESPMODWithGetRequestNoBody());
  IcapMessage result=embedder.poll();
  assertNotNull(""String_Node_Str"",result);
  DataMockery.assertCreateRESPMODWithGetRequestNoBody(result);
}",0.8656716417910447
2938,"@Override public String toString(){
  StringBuilder buf=new StringBuilder();
  buf.append(getClass().getSimpleName());
  buf.append(""String_Node_Str"");
  buf.append(getProtocolVersion().getText());
  buf.append(')');
  buf.append(StringUtil.NEWLINE);
  appendHeaders(buf);
  if (httpRequest != null) {
    buf.append(""String_Node_Str"").append(StringUtil.NEWLINE);
    buf.append(httpRequest.toString());
  }
  if (httpResponse != null) {
    buf.append(""String_Node_Str"").append(StringUtil.NEWLINE);
    buf.append(httpResponse.toString());
  }
  if (getPreview() != null) {
    buf.append(""String_Node_Str"");
    buf.append(preview.toString());
  }
  buf.setLength(buf.length() - StringUtil.NEWLINE.length());
  return buf.toString();
}","@Override public String toString(){
  StringBuilder buf=new StringBuilder();
  buf.append(getClass().getSimpleName());
  buf.append(""String_Node_Str"");
  buf.append(getProtocolVersion().getText());
  buf.append(')');
  buf.append(StringUtil.NEWLINE);
  appendHeaders(buf);
  if (httpRequest != null) {
    buf.append(""String_Node_Str"").append(StringUtil.NEWLINE);
    buf.append(httpRequest.toString());
  }
  if (httpResponse != null) {
    buf.append(""String_Node_Str"").append(StringUtil.NEWLINE);
    buf.append(httpResponse.toString());
  }
  if (getPreview() != null) {
    buf.append(""String_Node_Str"");
    buf.append(preview.toString());
  }
  return buf.toString();
}",0.956829440905874
2939,"@Before public void setUp(){
  embedder=new DecoderEmbedder<ChannelBuffer>(new IcapMessageDecoder());
}","@Before public void setUp(){
  embedder=new DecoderEmbedder<ChannelBuffer>(new IcapRequestDecoder());
}",0.9514563106796116
2940,"private void sendShoutMessage(){
  String userName=""String_Node_Str"";
  String recip=tbPhoneNumber.getString();
  String msg=tbMessage.getString();
  ShoutController sc=new ShoutController();
  String data=sc.buildShoutData(userName);
  try {
    sc.sendSMSShout(recip,msg,data);
    ErrorAlert eAlert=new ErrorAlert(""String_Node_Str"",""String_Node_Str"",null,this);
    eAlert.show();
  }
 catch (  Exception e) {
    ErrorAlert eAlert=new ErrorAlert(""String_Node_Str"",""String_Node_Str"",null,this);
    eAlert.show();
    e.printStackTrace();
  }
}","private void sendShoutMessage(){
  String userName=""String_Node_Str"";
  String recip=tbPhoneNumber.getString();
  String msg=tbMessage.getString();
  ShoutController sc=new ShoutController();
  String data=sc.buildDataMessage(userName);
  try {
    sc.sendSMSShout(recip,msg,data);
    ErrorAlert eAlert=new ErrorAlert(""String_Node_Str"",""String_Node_Str"",null,this);
    eAlert.show();
  }
 catch (  Exception e) {
    ErrorAlert eAlert=new ErrorAlert(""String_Node_Str"",""String_Node_Str"",null,this);
    eAlert.show();
    e.printStackTrace();
  }
}",0.9890510948905108
2941,"public void wipingFileSuccess(String path){
  successCount++;
  _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_WIPING_WORD) + currentType + ""String_Node_Str""+ successCount);
}","public void wipingFileSuccess(String path){
  successCount++;
  _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_WIPING_WORD) + ""String_Node_Str"" + path);
}",0.9230769230769232
2942,"public void onClick(Component c){
  successCount=0;
  errCount=0;
  new Thread(this).start();
}","public void onClick(Component c){
  successCount=0;
  errCount=0;
  thread=new Thread(this);
  thread.start();
}",0.9178743961352656
2943,"/** 
 * Constructs a screen that shows a <code>TextBox</code> component in action.
 * @param previous is the screen to return to once this done.
 */
public WipeManualForm(ITCMainMIDlet midlet){
  _midlet=midlet;
  try {
    _prefs=new Preferences(ITCConstants.PANIC_PREFS_DB);
  }
 catch (  RecordStoreException e) {
    Logger.error(ITCConstants.TAG,""String_Node_Str"" + e,e);
  }
  setTitle(l10n.getString(L10nConstants.keys.TITLE_WIPE_MANUAL));
  Label label=new Label();
  label.setLabel(l10n.getString(L10nConstants.keys.WIPE_WARNING_MSG));
  label.setHorizontalAlignment(Graphics.LEFT);
  append(label);
  _cbContacts=new CheckBox();
  _cbContacts.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_CONTACTS));
  _cbContacts.setChecked(false);
  append(_cbContacts);
  _cbPhotos=new CheckBox();
  _cbPhotos.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_PHOTOS));
  _cbPhotos.setChecked(false);
  append(_cbPhotos);
  _cbAllStorage=new CheckBox();
  _cbAllStorage.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_FILES));
  _cbAllStorage.setChecked(false);
  append(_cbAllStorage);
  _cbCalendar=new CheckBox();
  _cbCalendar.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_CALENDAR));
  _cbCalendar.setChecked(false);
  append(_cbCalendar);
  Button btn=new Button();
  btn.setOnClickListener(this);
  btn.setLabel(l10n.getString(L10nConstants.keys.MENU_WIPE_NOW));
  append(btn);
  load();
}","/** 
 * Constructs a screen that shows a <code>TextBox</code> component in action.
 * @param previous is the screen to return to once this done.
 */
public WipeManualForm(ITCMainMIDlet midlet){
  _midlet=midlet;
  try {
    _prefs=new Preferences(ITCConstants.PANIC_PREFS_DB);
  }
 catch (  RecordStoreException e) {
    Logger.error(ITCConstants.TAG,""String_Node_Str"" + e,e);
  }
  setTitle(l10n.getString(L10nConstants.keys.TITLE_WIPE_MANUAL));
  Label label=new Label();
  label.setLabel(l10n.getString(L10nConstants.keys.WIPE_WARNING_MSG));
  label.setHorizontalAlignment(Graphics.LEFT);
  append(label);
  _cbContacts=new CheckBox();
  _cbContacts.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_CONTACTS));
  _cbContacts.setChecked(false);
  append(_cbContacts);
  _cbCalendar=new CheckBox();
  _cbCalendar.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_CALENDAR));
  _cbCalendar.setChecked(false);
  append(_cbCalendar);
  _cbPhotos=new CheckBox();
  _cbPhotos.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_PHOTOS));
  _cbPhotos.setChecked(false);
  append(_cbPhotos);
  _cbAllStorage=new CheckBox();
  _cbAllStorage.setLabel(l10n.getString(L10nConstants.keys.WIPE_MENU_FILES));
  _cbAllStorage.setChecked(false);
  append(_cbAllStorage);
  _cbZeroStorage=new CheckBox();
  _cbZeroStorage.setLabel(""String_Node_Str"");
  _cbZeroStorage.setChecked(false);
  append(_cbZeroStorage);
  Button btn=new Button();
  btn.setOnClickListener(this);
  btn.setLabel(l10n.getString(L10nConstants.keys.MENU_WIPE_NOW));
  append(btn);
  load();
}",0.8131942107034669
2944,"private void confirmAndWipe(){
  boolean confirmed=true;
  if (confirmed) {
    _lsCanvas=new LargeStringCanvas(""String_Node_Str"");
    _cmdExit=new Command(l10n.getString(L10nConstants.keys.MENU_EXIT),Command.EXIT,1);
    _lsCanvas.addCommand(_cmdExit);
    _lsCanvas.setCommandListener(this);
    Display.getDisplay(_midlet).setCurrent(_lsCanvas);
    try {
      _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_INPROGRESS));
      _wControl=new WipeController();
      _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_PERSONAL));
      currentType=l10n.getString(L10nConstants.keys.WIPE_TYPE_PERSONAL);
      _wControl.wipePIMData(_cbContacts.isChecked(),_cbCalendar.isChecked(),_cbCalendar.isChecked());
      try {
        if (_cbPhotos.isChecked()) {
          currentType=l10n.getString(L10nConstants.keys.WIPE_TYPE_PHOTOS);
          _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_PHOTOS));
          _wControl.wipeMedia(WipeController.TYPE_PHOTOS,false,this);
          _wControl.wipeMedia(WipeController.TYPE_PHOTOS,true,this);
          _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_VIDEOS));
          _wControl.wipeMedia(WipeController.TYPE_VIDEOS,false,this);
          _wControl.wipeMedia(WipeController.TYPE_VIDEOS,true,this);
          _lsCanvas.setLargeString(""String_Node_Str"");
          _wControl.wipeMedia(WipeController.TYPE_RECORDINGS,false,this);
          _wControl.wipeMedia(WipeController.TYPE_RECORDINGS,true,this);
        }
      }
 catch (      Exception e) {
        _lsCanvas.setLargeString(e.getMessage());
      }
      try {
        if (_cbAllStorage.isChecked()) {
          currentType=l10n.getString(L10nConstants.keys.WIPE_TYPE_FILES);
          _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_FILES));
          _wControl.wipeMedia(""String_Node_Str"",false,this);
          _wControl.wipeAllRootPaths(this);
        }
      }
 catch (      Exception e) {
        _lsCanvas.setLargeString(e.getMessage());
      }
      String msg=l10n.getString(L10nConstants.keys.WIPE_MSG_SUCCESS);
      if (successCount > 0)       msg+=""String_Node_Str"" + successCount + ' '+ l10n.getString(L10nConstants.keys.WIPE_STATUS_FILES_DELETED);
 else       msg+=""String_Node_Str"" + ""String_Node_Str"";
      if (errCount > 0)       msg+=""String_Node_Str"" + errCount + ' '+ l10n.getString(L10nConstants.keys.WIPE_STATUS_ERRORS);
      _lsCanvas.setLargeString(msg);
    }
 catch (    Exception e) {
      String msg=e.getMessage();
      _lsCanvas.setLargeString(msg);
      e.printStackTrace();
    }
  }
}","private void confirmAndWipe(){
  boolean confirmed=true;
  if (confirmed) {
    _lsCanvas=new LargeStringCanvas(""String_Node_Str"");
    _cmdExit=new Command(l10n.getString(L10nConstants.keys.MENU_EXIT),Command.EXIT,1);
    _lsCanvas.addCommand(_cmdExit);
    _lsCanvas.setCommandListener(this);
    Display.getDisplay(_midlet).setCurrent(_lsCanvas);
    try {
      String msg=""String_Node_Str"";
      if (_cbContacts.isChecked() || _cbCalendar.isChecked() || _cbPhotos.isChecked()|| _cbAllStorage.isChecked()) {
        WipeController.doWipe(_cbContacts.isChecked(),_cbCalendar.isChecked(),_cbPhotos.isChecked(),_cbAllStorage.isChecked(),_lsCanvas,this);
        if (_cbZeroStorage.isChecked()) {
          _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.KEY_ZERO_FILES));
          WipeController.zeroFillStorage(FileSystemRegistry.listRoots(),this);
        }
        if (successCount > 0) {
          msg+=l10n.getString(L10nConstants.keys.WIPE_MSG_SUCCESS);
          msg+=""String_Node_Str"" + successCount + ' '+ l10n.getString(L10nConstants.keys.WIPE_STATUS_FILES_DELETED);
        }
 else {
          msg+=l10n.getString(L10nConstants.keys.WIPE_MSG_COMPLETE);
          msg+=""String_Node_Str"" + ""String_Node_Str"";
        }
      }
 else {
        msg=""String_Node_Str"";
      }
      _lsCanvas.setLargeString(msg);
    }
 catch (    Exception e) {
      String msg=e.getMessage();
      _lsCanvas.setLargeString(msg);
      e.printStackTrace();
    }
  }
}",0.3439397619625941
2945,"public void commandAction(Command command,Displayable displayable){
  if (command == _cmdExit) {
    _wControl.cancel();
    _midlet.notifyDestroyed();
  }
}","public void commandAction(Command command,Displayable displayable){
  if (command == _cmdExit) {
    try {
      thread.interrupt();
    }
 catch (    Exception e) {
    }
    _midlet.showMainForm();
  }
}",0.6022099447513812
2946,"public void wipingFileError(String path,String err){
  errCount++;
  _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_WIPING_WORD) + currentType + ""String_Node_Str""+ errCount);
}","public void wipingFileError(String path,String err){
  errCount++;
  _lsCanvas.setLargeString(l10n.getString(L10nConstants.keys.WIPE_STATUS_WIPING_WORD) + ""String_Node_Str"" + path+ ""String_Node_Str""+ err);
}",0.8648648648648649
2947,"public LargeStringCanvas(String largeString){
  _largeString=largeString;
}","public LargeStringCanvas(String largeString){
  _largeString=processString(largeString);
}",0.9090909090909092
2948,"public void setLargeString(String largeString){
  _largeString=largeString;
  repaint();
}","public void setLargeString(String largeString){
  _largeString=processString(largeString);
  repaint();
}",0.9230769230769232
2949,"protected void paint(Graphics graphics){
  graphics.setColor(0,0,0);
  graphics.fillRect(0,0,getWidth(),getHeight());
  graphics.setColor(255,255,255);
  graphics.setFont(Font.getFont(Font.FACE_PROPORTIONAL,Font.STYLE_BOLD,Font.SIZE_LARGE));
  StringTokenizer st=new StringTokenizer(_largeString,""String_Node_Str"");
  int startY=getHeight() / 2;
  while (st.hasMoreTokens()) {
    graphics.drawString(st.nextToken(),getWidth() / 2,startY,Graphics.HCENTER | Graphics.BASELINE);
    startY+=graphics.getFont().getHeight() + 3;
  }
}","protected void paint(Graphics graphics){
  graphics.setColor(0,0,0);
  graphics.fillRect(0,0,getWidth(),getHeight());
  graphics.setColor(255,255,255);
  graphics.setFont(Font.getFont(Font.FACE_PROPORTIONAL,Font.STYLE_BOLD,Font.SIZE_LARGE));
  StringTokenizer st=new StringTokenizer(_largeString,NEWLINE);
  int startY=getHeight() / 2;
  while (st.hasMoreTokens()) {
    graphics.drawString(st.nextToken(),getWidth() / 2,startY,Graphics.HCENTER | Graphics.BASELINE);
    startY+=graphics.getFont().getHeight() + 3;
  }
}",0.6819047619047619
2950,"public void run(){
  persist();
  WipeController wc=new WipeController();
  boolean wipePermsOk=wc.checkAllPermissions();
  if (wipePermsOk) {
    _midlet.showAlert(l10n.getString(L10nConstants.keys.SETUP_TITLE),l10n.getString(L10nConstants.keys.WIPE_MESSAGE_SAVED),_midlet.getNextScreenIdx());
  }
 else {
    _midlet.showAlert(l10n.getString(L10nConstants.keys.TITLE_ERROR),l10n.getString(L10nConstants.keys.ERROR_PIM_DATA),_midlet.getCurrentScreenIdx());
  }
}","public void run(){
  persist();
  WipeController wc=new WipeController();
  boolean wipePermsOk=false;
  try {
    Preferences prefs=new Preferences(PanicConstants.PANIC_PREFS_DB);
    String prefBool=prefs.get(PanicConstants.PREFS_KEY_WIPE_CONTACTS);
    boolean wipeContacts=(prefBool != null && prefBool.equals(""String_Node_Str""));
    prefBool=prefs.get(PanicConstants.PREFS_KEY_WIPE_EVENTS);
    boolean wipeEvents=(prefBool != null && prefBool.equals(""String_Node_Str""));
    prefBool=prefs.get(PanicConstants.PREFS_KEY_WIPE_PHOTOS);
    boolean wipePhotos=(prefBool != null && prefBool.equals(""String_Node_Str""));
    prefBool=prefs.get(PanicConstants.PREFS_KEY_WIPE_ALL_FILES);
    boolean wipeAllFiles=(prefBool != null && prefBool.equals(""String_Node_Str""));
    wipePermsOk=wc.checkPermissions(wipeContacts,wipeEvents,wipePhotos,wipeAllFiles);
  }
 catch (  Exception e) {
    wipePermsOk=false;
  }
 finally {
    if (wipePermsOk) {
      _midlet.showAlert(l10n.getString(L10nConstants.keys.SETUP_TITLE),l10n.getString(L10nConstants.keys.WIPE_MESSAGE_SAVED),_midlet.getNextScreenIdx());
    }
 else {
      _midlet.showAlert(l10n.getString(L10nConstants.keys.TITLE_ERROR),l10n.getString(L10nConstants.keys.ERROR_PIM_DATA),_midlet.getCurrentScreenIdx());
    }
  }
}",0.4977011494252873
2951,"private static void wipeAssets(Uri uriBase,String authority,String[] rewriteStrings,String[] rewriteFiles){
  Cursor cursor=null;
  long _id=0;
  try {
    cursor=cr.query(uriBase,null,null,null,null);
    if (cursor != null && cursor.getCount() > 0) {
      cursor.moveToFirst();
      Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + cursor.getCount() + ""String_Node_Str""+ uriBase.toString());
      while (!cursor.isAfterLast()) {
        _id=cursor.getLong(cursor.getColumnIndex(""String_Node_Str""));
        ArrayList<ContentProviderOperation> cpo=new ArrayList<ContentProviderOperation>();
        for (        String s : rewriteStrings) {
          if (cursor.getString(cursor.getColumnIndex(s)) != null && cursor.getString(cursor.getColumnIndex(s)).length() > 0) {
            StringBuffer sb=new StringBuffer();
            for (            @SuppressWarnings(""String_Node_Str"") char c : cursor.getString(cursor.getColumnIndex(s)).toCharArray()) {
              sb.append(0);
            }
            cpo.add(ContentProviderOperation.newUpdate(ContentUris.withAppendedId(uriBase,_id)).withSelection(Data._ID + ""String_Node_Str"",new String[]{Integer.toString((int)_id)}).withValue(s,sb.toString()).build());
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + s + ""String_Node_Str""+ cursor.getString(cursor.getColumnIndex(s))+ ""String_Node_Str""+ s+ ""String_Node_Str""+ sb.toString());
          }
        }
        if (rewriteFiles != null && rewriteFiles.length > 0) {
          for (          String s : rewriteFiles) {
            if (cursor.getString(cursor.getColumnIndex(s)) != null && cursor.getString(cursor.getColumnIndex(s)).length() > 0) {
              File f=new File(cursor.getString(cursor.getColumnIndex(s)));
              if (f.isFile())               rewriteAndDelete(f);
            }
          }
        }
        if (!cpo.isEmpty()) {
          try {
            cr.applyBatch(authority,cpo);
          }
 catch (          RemoteException e) {
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
          }
catch (          OperationApplicationException e) {
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
          }
catch (          UnsupportedOperationException e) {
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
          }
          cpo.clear();
        }
        Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + ContentUris.withAppendedId(uriBase,_id).toString() + ""String_Node_Str"");
        try {
          cr.delete(ContentUris.withAppendedId(uriBase,_id),null,null);
        }
 catch (        UnsupportedOperationException e) {
          Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
        }
        cursor.moveToNext();
      }
    }
    cursor.close();
  }
 catch (  NullPointerException npe) {
  }
}","private static void wipeAssets(Uri uriBase,String authority,String[] rewriteStrings,String[] rewriteFiles){
  Cursor cursor=null;
  long _id=0;
  try {
    cursor=cr.query(uriBase,null,null,null,null);
    if (cursor != null && cursor.getCount() > 0) {
      cursor.moveToFirst();
      Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + cursor.getCount() + ""String_Node_Str""+ uriBase.toString());
      while (!cursor.isAfterLast()) {
        _id=cursor.getLong(cursor.getColumnIndex(""String_Node_Str""));
        ArrayList<ContentProviderOperation> cpo=new ArrayList<ContentProviderOperation>();
        for (        String s : rewriteStrings) {
          if (cursor.getString(cursor.getColumnIndex(s)) != null && cursor.getString(cursor.getColumnIndex(s)).length() > 0) {
            StringBuffer sb=new StringBuffer();
            for (            @SuppressWarnings(""String_Node_Str"") char c : cursor.getString(cursor.getColumnIndex(s)).toCharArray()) {
              sb.append(0);
            }
            cpo.add(ContentProviderOperation.newUpdate(ContentUris.withAppendedId(uriBase,_id)).withSelection(Data._ID + ""String_Node_Str"",new String[]{Integer.toString((int)_id)}).withValue(s,sb.toString()).build());
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + s + ""String_Node_Str""+ cursor.getString(cursor.getColumnIndex(s))+ ""String_Node_Str""+ s+ ""String_Node_Str""+ sb.toString());
          }
        }
        if (rewriteFiles != null && rewriteFiles.length > 0) {
          for (          String s : rewriteFiles) {
            if (cursor.getString(cursor.getColumnIndex(s)) != null && cursor.getString(cursor.getColumnIndex(s)).length() > 0) {
              File f=new File(cursor.getString(cursor.getColumnIndex(s)));
              if (f.isFile())               rewriteAndDelete(f);
            }
          }
        }
        if (!cpo.isEmpty()) {
          try {
            cr.applyBatch(authority,cpo);
          }
 catch (          RemoteException e) {
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
          }
catch (          OperationApplicationException e) {
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
          }
catch (          UnsupportedOperationException e) {
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
          }
          cpo.clear();
        }
        Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + ContentUris.withAppendedId(uriBase,_id).toString() + ""String_Node_Str"");
        try {
          cr.delete(ContentUris.withAppendedId(uriBase,_id),null,null);
        }
 catch (        UnsupportedOperationException e) {
          Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e);
          try {
            cr.delete(uriBase,Data._ID + ""String_Node_Str"",new String[]{Integer.toString((int)_id)});
          }
 catch (          UnsupportedOperationException e2) {
            Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + e2);
          }
        }
        cursor.moveToNext();
      }
    }
    cursor.close();
  }
 catch (  NullPointerException npe) {
  }
}",0.9312820512820512
2952,"public WizardForm(final Context c,int wNum){
  super(c);
  views=new ArrayList<View>();
  wizardText=c.getResources().getStringArray(R.array.WIZARD_TEXT);
  _l=new LinearLayout(c);
  lp=new LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  auxLP=new LayoutParams(LayoutParams.FILL_PARENT,350);
  _l.setOrientation(LinearLayout.VERTICAL);
  _l.setLayoutParams(lp);
  screenHeight=600;
  TextView intro=new TextView(c);
  intro.setText(wizardText[wNum - 1]);
  views.add(intro);
switch (wNum) {
case 1:
    TextView yourName=new TextView(c);
  yourName.setText(c.getResources().getString(R.string.KEY_WIZARD_YOURNAME));
views.add(yourName);
EditText yourNameTxt=new EditText(c);
views.add(yourNameTxt);
TextView yourLocation=new TextView(c);
yourLocation.setText(c.getResources().getString(R.string.KEY_WIZARD_YOURLOCATION));
views.add(yourLocation);
EditText yourLocationTxt=new EditText(c);
views.add(yourLocationTxt);
_containsPreferenceData=true;
break;
case 2:
ArrayList<WizardSelector> wizardSelector=new ArrayList<WizardSelector>();
String[] wizardChecks=c.getResources().getStringArray(R.array.WIZARD_CHECKS);
for (int x=0; x < wizardChecks.length; x++) {
wizardSelector.add(new WizardSelector(wizardChecks[x],x));
Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + x);
}
ListView list=new ListView(c);
list.setLayoutParams(auxLP);
list.setAdapter(new WizardArrayAdaptor(c,wizardSelector));
views.add(list);
break;
case 3:
TextView phoneNumber=new TextView(c);
phoneNumber.setText(c.getResources().getString(R.string.KEY_WIZARD_PHONENUMBER));
views.add(phoneNumber);
final EditText phoneNumberTxt=new EditText(c);
views.add(phoneNumberTxt);
final LinearLayout testSMSL=new LinearLayout(c);
testSMSL.setOrientation(LinearLayout.VERTICAL);
testSMSL.setLayoutParams(auxLP);
Button send=new Button(c);
send.setText(c.getResources().getString(R.string.KEY_WIZARD_SEND));
send.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
SMSSender sms=new SMSSender(c);
if (sms.sendSMS(phoneNumberTxt.getText().toString(),c.getResources().getString(R.string.KEY_WIZARD_SMSTESTMSG))) {
testSMSL.removeAllViews();
TextView smsConfirm=new TextView(c);
smsConfirm.setText(c.getResources().getString(R.string.WIZARD_CONFIRMATION_SMSTEST));
testSMSL.addView(smsConfirm);
}
}
}
);
testSMSL.addView(send);
views.add(testSMSL);
break;
case 4:
final LinearLayout testLocationL=new LinearLayout(c);
testLocationL.setOrientation(LinearLayout.VERTICAL);
testLocationL.setLayoutParams(auxLP);
Button enable=new Button(c);
enable.setText(c.getResources().getString(R.string.KEY_WIZARD_ENABLE));
enable.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
new PhoneInfo(c);
StringBuffer sb=new StringBuffer();
String phoneTest=PhoneInfo.testData();
if (phoneTest != null && phoneTest.compareTo(""String_Node_Str"") != 0) {
sb.append(c.getResources().getString(R.string.WIZARD_CONFIRMATION_LOCATIONTEST) + ""String_Node_Str"");
sb.append(phoneTest);
}
 else {
sb.append(c.getResources().getString(R.string.WIZARD_FAIL_LOCATIONTEST));
}
testLocationL.removeAllViews();
TextView testResults=new TextView(c);
testResults.setText(sb.toString());
testLocationL.addView(testResults);
}
}
);
testLocationL.addView(enable);
views.add(testLocationL);
break;
case 5:
TextView phoneNumbers=new TextView(c);
phoneNumbers.setText(c.getResources().getString(R.string.KEY_WIZARD_PHONENUMBERS));
views.add(phoneNumbers);
EditText phoneNumbersTxt=new EditText(c);
views.add(phoneNumbersTxt);
TextView alertMsg=new TextView(c);
alertMsg.setText(c.getResources().getString(R.string.KEY_WIZARD_ALERTMSG));
views.add(alertMsg);
EditText alertMsgTxt=new EditText(c);
views.add(alertMsgTxt);
_containsPreferenceData=true;
break;
case 6:
ArrayList<WipeSelector> wipeSelector=new ArrayList<WipeSelector>();
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_WIPECONTACTS),ITCConstants.Wipe.CONTACTS,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_WIPEPHOTOS),ITCConstants.Wipe.PHOTOS,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_CALLLOG),ITCConstants.Wipe.CALLLOG,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_SMS),ITCConstants.Wipe.SMS,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_CALENDAR),ITCConstants.Wipe.CALENDAR,false));
ListView wipeList=new ListView(c);
wipeList.setLayoutParams(auxLP);
wipeList.setAdapter(new WipeArrayAdaptor(c,wipeSelector));
views.add(wipeList);
break;
case 7:
ListView folderList=new ListView(c);
new FolderIterator();
ArrayList<WipeSelector> folderSelector=FolderIterator.getFolderList(c);
break;
}
for (View v : views) {
_l.addView(v);
}
}","public WizardForm(final Context c,int wNum){
  super(c);
  views=new ArrayList<View>();
  wizardText=c.getResources().getStringArray(R.array.WIZARD_TEXT);
  _l=new LinearLayout(c);
  lp=new LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  auxLP=new LayoutParams(LayoutParams.FILL_PARENT,350);
  _l.setOrientation(LinearLayout.VERTICAL);
  _l.setLayoutParams(lp);
  screenHeight=600;
  TextView intro=new TextView(c);
  intro.setText(wizardText[wNum - 1]);
  views.add(intro);
switch (wNum) {
case 1:
    TextView yourName=new TextView(c);
  yourName.setText(c.getResources().getString(R.string.KEY_WIZARD_YOURNAME));
views.add(yourName);
EditText yourNameTxt=new EditText(c);
views.add(yourNameTxt);
TextView yourLocation=new TextView(c);
yourLocation.setText(c.getResources().getString(R.string.KEY_WIZARD_YOURLOCATION));
views.add(yourLocation);
EditText yourLocationTxt=new EditText(c);
views.add(yourLocationTxt);
_containsPreferenceData=true;
break;
case 2:
ArrayList<WizardSelector> wizardSelector=new ArrayList<WizardSelector>();
String[] wizardChecks=c.getResources().getStringArray(R.array.WIZARD_CHECKS);
for (int x=0; x < wizardChecks.length; x++) {
wizardSelector.add(new WizardSelector(wizardChecks[x],x));
Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + x);
}
ListView list=new ListView(c);
list.setLayoutParams(auxLP);
list.setAdapter(new WizardArrayAdaptor(c,wizardSelector));
views.add(list);
break;
case 3:
TextView phoneNumber=new TextView(c);
phoneNumber.setText(c.getResources().getString(R.string.KEY_WIZARD_PHONENUMBER));
views.add(phoneNumber);
final EditText phoneNumberTxt=new EditText(c);
views.add(phoneNumberTxt);
final LinearLayout testSMSL=new LinearLayout(c);
testSMSL.setOrientation(LinearLayout.VERTICAL);
testSMSL.setLayoutParams(auxLP);
Button send=new Button(c);
send.setText(c.getResources().getString(R.string.KEY_WIZARD_SEND));
send.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
SMSSender sms=new SMSSender(c);
if (sms.sendSMS(phoneNumberTxt.getText().toString(),c.getResources().getString(R.string.KEY_WIZARD_SMSTESTMSG))) {
testSMSL.removeAllViews();
TextView smsConfirm=new TextView(c);
smsConfirm.setText(c.getResources().getString(R.string.WIZARD_CONFIRMATION_SMSTEST));
testSMSL.addView(smsConfirm);
}
}
}
);
testSMSL.addView(send);
views.add(testSMSL);
break;
case 4:
final LinearLayout testLocationL=new LinearLayout(c);
testLocationL.setOrientation(LinearLayout.VERTICAL);
testLocationL.setLayoutParams(auxLP);
Button enable=new Button(c);
enable.setText(c.getResources().getString(R.string.KEY_WIZARD_ENABLE));
enable.setOnClickListener(new OnClickListener(){
@Override public void onClick(View v){
new PhoneInfo(c);
StringBuffer sb=new StringBuffer();
String phoneTest=PhoneInfo.testData();
if (phoneTest != null && phoneTest.compareTo(""String_Node_Str"") != 0) {
sb.append(c.getResources().getString(R.string.WIZARD_CONFIRMATION_LOCATIONTEST) + ""String_Node_Str"");
sb.append(phoneTest);
}
 else {
sb.append(c.getResources().getString(R.string.WIZARD_FAIL_LOCATIONTEST));
}
testLocationL.removeAllViews();
TextView testResults=new TextView(c);
testResults.setText(sb.toString());
testLocationL.addView(testResults);
}
}
);
testLocationL.addView(enable);
views.add(testLocationL);
break;
case 5:
TextView phoneNumbers=new TextView(c);
phoneNumbers.setText(c.getResources().getString(R.string.KEY_WIZARD_PHONENUMBERS));
views.add(phoneNumbers);
EditText phoneNumbersTxt=new EditText(c);
views.add(phoneNumbersTxt);
TextView alertMsg=new TextView(c);
alertMsg.setText(c.getResources().getString(R.string.KEY_WIZARD_ALERTMSG));
views.add(alertMsg);
EditText alertMsgTxt=new EditText(c);
views.add(alertMsgTxt);
_containsPreferenceData=true;
break;
case 6:
ArrayList<WipeSelector> wipeSelector=new ArrayList<WipeSelector>();
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_WIPECONTACTS),ITCConstants.Wipe.CONTACTS,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_WIPEPHOTOS),ITCConstants.Wipe.PHOTOS,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_CALLLOG),ITCConstants.Wipe.CALLLOG,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_SMS),ITCConstants.Wipe.SMS,false));
wipeSelector.add(new WipeSelector(c.getString(R.string.KEY_WIPE_CALENDAR),ITCConstants.Wipe.CALENDAR,false));
ListView wipeList=new ListView(c);
wipeList.setLayoutParams(auxLP);
wipeList.setAdapter(new WipeArrayAdaptor(c,wipeSelector));
views.add(wipeList);
break;
case 7:
LinearLayout folderListHolder=new LinearLayout(c);
auxLP.height=500;
folderListHolder.setLayoutParams(auxLP);
ListView folderList=new ListView(c);
new FolderIterator();
ArrayList<WipeSelector> folderSelector=FolderIterator.getFolderList(c);
folderList.setAdapter(new WipeArrayAdaptor(c,folderSelector));
folderListHolder.addView(folderList);
views.add(folderListHolder);
break;
}
for (View v : views) {
_l.addView(v);
}
}",0.9752832131822864
2953,"private void doWipe(){
  checkedFolders=new ArrayList<File>();
  wc=new WipeController(getBaseContext());
  wc.wipePIMData(wipeSelector.get(0).getSelected(),wipeSelector.get(1).getSelected(),wipeSelector.get(2).getSelected(),wipeSelector.get(3).getSelected(),checkedFolders);
}","private void doWipe(){
  wc=new WipeController(getBaseContext());
  wc.wipePIMData(wipeSelector.get(0).getSelected(),wipeSelector.get(1).getSelected(),wipeSelector.get(2).getSelected(),wipeSelector.get(3).getSelected(),checkedFolders);
}",0.9221789883268484
2954,"@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.folder_selector);
  i=getIntent();
  selectedFolders=new ArrayList<File>();
  new FolderIterator();
  folderSelect=new ArrayList<WipeSelector>();
  folderSelect=FolderIterator.getFolderList(this);
  folderList=(ListView)findViewById(R.id.folderSelectionHolder);
  folderList.setAdapter(new WipeArrayAdaptor(this,folderSelect));
  if (i.hasExtra(""String_Node_Str"")) {
    selectedFolders.clear();
    selectedFolders=(ArrayList<File>)i.getSerializableExtra(""String_Node_Str"");
    Log.d(ITCConstants.Log.ITC,""String_Node_Str"" + selectedFolders.size() + ""String_Node_Str"");
    if (selectedFolders.size() > 0) {
      for (      WipeSelector w : folderSelect) {
        if (selectedFolders.contains(w.getFilePath())) {
          w.setSelected(true);
        }
      }
    }
  }
  confirmSelection=(Button)findViewById(R.id.confirmSelection);
  confirmSelection.setOnClickListener(this);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.folder_selector);
  i=getIntent();
  selectedFolders=new ArrayList<File>();
  new FolderIterator();
  folderSelect=new ArrayList<WipeSelector>();
  folderSelect=FolderIterator.getFolderList(this);
  folderList=(ListView)findViewById(R.id.folderSelectionHolder);
  folderList.setAdapter(new WipeArrayAdaptor(this,folderSelect));
  if (i.hasExtra(""String_Node_Str"")) {
    selectedFolders.clear();
    selectedFolders=(ArrayList<File>)i.getSerializableExtra(""String_Node_Str"");
    if (selectedFolders.size() > 0) {
      for (      WipeSelector w : folderSelect) {
        if (selectedFolders.contains(w.getFilePath())) {
          w.setSelected(true);
        }
      }
    }
  }
  confirmSelection=(Button)findViewById(R.id.confirmSelection);
  confirmSelection.setOnClickListener(this);
}",0.9519038076152304
2955,"public static ArgumentMatcher<ClassContext> isClassContextFor(final String simpleClassName){
  return new ArgumentMatcher<ClassContext>(){
    @Override public boolean matches(    Object argument){
      if (!(argument instanceof ClassContext)) {
        return false;
      }
 else {
        return ((ClassContext)argument).getClassDescriptor().getSimpleName().equals(simpleClassName);
      }
    }
  }
;
}","public static ArgumentMatcher<ClassContext> isClassContextFor(final String simpleClassName){
  return new ArgumentMatcher<ClassContext>(){
    @Override public boolean matches(    ClassContext argument){
      return argument.getClassDescriptor().getSimpleName().equals(simpleClassName);
    }
  }
;
}",0.5952045133991537
2956,"@Override public boolean matches(Object argument){
  if (!(argument instanceof ClassDescriptor)) {
    return false;
  }
 else {
    return ((ClassDescriptor)argument).getSimpleName().equals(simpleClassName);
  }
}","@Override public boolean matches(ClassDescriptor argument){
  return argument.getSimpleName().equals(simpleClassName);
}",0.6646706586826348
2957,"private ArgumentMatcher<ClassDescriptor> isClassDescriptorFor(final String simpleClassName){
  return new ArgumentMatcher<ClassDescriptor>(){
    @Override public boolean matches(    Object argument){
      if (!(argument instanceof ClassDescriptor)) {
        return false;
      }
 else {
        return ((ClassDescriptor)argument).getSimpleName().equals(simpleClassName);
      }
    }
  }
;
}","private ArgumentMatcher<ClassDescriptor> isClassDescriptorFor(final String simpleClassName){
  return new ArgumentMatcher<ClassDescriptor>(){
    @Override public boolean matches(    ClassDescriptor argument){
      return argument.getSimpleName().equals(simpleClassName);
    }
  }
;
}",0.624633431085044
2958,"public static BugReporter bugReporterForTesting(){
  return TestingBugReporter.tddBugReporter();
}","public static BugReporter bugReporterForTesting(){
  detectorRunner.assertInitialised();
  return TestingBugReporter.tddBugReporter();
}",0.8376068376068376
2959,"public static void assertBugReported(Class<?> classToTest,Detector2 detector,BugReporter bugReporter,Matcher<BugInstance> bugInstanceMatcher) throws Exception {
  runDetectorOnClass(detector,classToTest,bugReporter);
  asserter.assertBugReported(bugReporter,bugInstanceMatcher);
}","public static void assertBugReported(Class<?> classToTest,Detector2 detector,BugReporter bugReporter,Matcher<BugInstance> bugInstanceMatcher) throws Exception {
  detectorRunner.runDetectorOnClass(detector,classToTest,bugReporter);
  asserter.assertBugReported(bugReporter,bugInstanceMatcher);
}",0.9739130434782608
2960,"public static void assertAllBugsReported(Class<?> classToTest,Detector2 detector,BugReporter bugReporter,Matcher<BugInstance>... bugInstanceMatchers) throws Exception {
  runDetectorOnClass(detector,classToTest,bugReporter);
  asserter.assertAllBugsReported(bugReporter,bugInstanceMatchers);
}","public static void assertAllBugsReported(Class<?> classToTest,Detector2 detector,BugReporter bugReporter,Matcher<BugInstance>... bugInstanceMatchers) throws Exception {
  detectorRunner.runDetectorOnClass(detector,classToTest,bugReporter);
  asserter.assertAllBugsReported(bugReporter,bugInstanceMatchers);
}",0.9750415973377704
2961,"public static void assertNoBugsReported(Class<?> classToTest,Detector2 detector,BugReporter bugReporter) throws Exception {
  runDetectorOnClass(detector,classToTest,bugReporter);
  asserter.assertNoBugsReported(bugReporter);
}","public static void assertNoBugsReported(Class<?> classToTest,Detector2 detector,BugReporter bugReporter) throws Exception {
  detectorRunner.runDetectorOnClass(detector,classToTest,bugReporter);
  asserter.assertNoBugsReported(bugReporter);
}",0.9680170575692963
2962,"public static void clearRegistrar(){
  DetectorRunner.clearRegistrar();
}","public static void clearRegistrar(){
  detectorRunner.clearRegistrar();
}",0.9863013698630136
2963,"public static void addRegistrar(IAnalysisEngineRegistrar registrar){
  DetectorRunner.addRegistrar(registrar);
}","public static void addRegistrar(IAnalysisEngineRegistrar registrar){
  detectorRunner.addRegistrar(registrar);
}",0.9910714285714286
2964,"private void registerUserDefined(IAnalysisCache analysisCache){
  for (  IAnalysisEngineRegistrar registrar : userDefined) {
    registrar.registerAnalysisEngines(analysisCache);
  }
}","private static void registerUserDefined(IAnalysisCache analysisCache){
  for (  IAnalysisEngineRegistrar registrar : USER_DEFINED_ENGINE_REGISTRARS) {
    registrar.registerAnalysisEngines(analysisCache);
  }
}",0.883248730964467
2965,"private void setUpStaticDependenciesWithinFindBugs(BugReporter bugReporter) throws CheckedAnalysisException, IOException, InterruptedException {
  bugReporter.setPriorityThreshold(Priorities.LOW_PRIORITY);
  ClassPathImpl classPath=new ClassPathImpl();
  IAnalysisCache analysisCache=ClassFactory.instance().createAnalysisCache(classPath,bugReporter);
  new ClassContextClassAnalysisEngine().registerWith(analysisCache);
  new edu.umd.cs.findbugs.classfile.engine.asm.EngineRegistrar().registerAnalysisEngines(analysisCache);
  new edu.umd.cs.findbugs.classfile.engine.bcel.EngineRegistrar().registerAnalysisEngines(analysisCache);
  new edu.umd.cs.findbugs.classfile.engine.EngineRegistrar().registerAnalysisEngines(analysisCache);
  registerUserDefined(analysisCache);
  Global.setAnalysisCacheForCurrentThread(analysisCache);
  ICodeBaseLocator codeBaseLocator=new FilesystemCodeBaseLocator(""String_Node_Str"");
  ICodeBase codeBase=new DirectoryCodeBase(codeBaseLocator,new File(CODEBASE_DIRECTORY));
  codeBase.setApplicationCodeBase(true);
  classPath.addCodeBase(codeBase);
  addAuxCodeBasesFromClassPath(classPath);
  IClassFactory classFactory=ClassFactory.instance();
  IClassPathBuilder builder=classFactory.createClassPathBuilder(bugReporter);
  builder.addCodeBase(codeBaseLocator,true);
  builder.scanNestedArchives(true);
  IClassPathBuilderProgress progress=new NoOpFindBugsProgress();
  builder.build(classPath,progress);
  List<ClassDescriptor> appClassList=builder.getAppClassList();
  AnalysisCacheToAnalysisContextAdapter analysisContext=new AnalysisCacheToAnalysisContextAdapter();
  AnalysisContext.setCurrentAnalysisContext(analysisContext);
  analysisContext.setAppClassList(appClassList);
  analysisContext.setFieldSummary(new FieldSummary());
}","private static void setUpStaticDependenciesWithinFindBugs(BugReporter bugReporter) throws Exception {
  bugReporter.setPriorityThreshold(Priorities.LOW_PRIORITY);
  ClassPathImpl classPath=new ClassPathImpl();
  IAnalysisCache analysisCache=ClassFactory.instance().createAnalysisCache(classPath,bugReporter);
  new ClassContextClassAnalysisEngine().registerWith(analysisCache);
  new edu.umd.cs.findbugs.classfile.engine.asm.EngineRegistrar().registerAnalysisEngines(analysisCache);
  new edu.umd.cs.findbugs.classfile.engine.bcel.EngineRegistrar().registerAnalysisEngines(analysisCache);
  new edu.umd.cs.findbugs.classfile.engine.EngineRegistrar().registerAnalysisEngines(analysisCache);
  registerUserDefined(analysisCache);
  Global.setAnalysisCacheForCurrentThread(analysisCache);
  ICodeBaseLocator codeBaseLocator=new FilesystemCodeBaseLocator(""String_Node_Str"");
  ICodeBase codeBase=new DirectoryCodeBase(codeBaseLocator,new File(CODEBASE_DIRECTORY));
  codeBase.setApplicationCodeBase(true);
  classPath.addCodeBase(codeBase);
  addAuxCodeBasesFromClassPath(classPath);
  IClassFactory classFactory=ClassFactory.instance();
  IClassPathBuilder builder=classFactory.createClassPathBuilder(bugReporter);
  builder.addCodeBase(codeBaseLocator,true);
  builder.scanNestedArchives(true);
  IClassPathBuilderProgress progress=new NoOpFindBugsProgress();
  builder.build(classPath,progress);
  List<ClassDescriptor> appClassList=builder.getAppClassList();
  AnalysisCacheToAnalysisContextAdapter analysisContext=new AnalysisCacheToAnalysisContextAdapter();
  AnalysisContext.setCurrentAnalysisContext(analysisContext);
  analysisContext.setAppClassList(appClassList);
  analysisContext.setFieldSummary(new FieldSummary());
}",0.9837003145553332
2966,"static void clearRegistrar(){
  Singleton.DETECTOR_RUNNER.userDefined.clear();
}","void clearRegistrar(){
  assertInitialised();
  Singleton.USER_DEFINED_ENGINE_REGISTRARS.clear();
}",0.5921787709497207
2967,"private void addAuxCodeBasesFromClassPath(ClassPathImpl classPath) throws IOException, ResourceNotFoundException {
  Iterable<ICodeBaseLocator> codeBaseLocators=auxCodeBaseLocatorProvider.get(classPathEntries());
  for (  ICodeBaseLocator auxCodeBaseLocator : codeBaseLocators) {
    ICodeBase auxCodeBase=auxCodeBaseLocator.openCodeBase();
    classPath.addCodeBase(auxCodeBase);
  }
}","private static void addAuxCodeBasesFromClassPath(ClassPathImpl classPath) throws Exception {
  Iterable<ICodeBaseLocator> codeBaseLocators=AUX_CODEBASE_LOCATOR_PROVIDER.get(classPathEntries());
  for (  ICodeBaseLocator auxCodeBaseLocator : codeBaseLocators) {
    ICodeBase auxCodeBase=auxCodeBaseLocator.openCodeBase();
    classPath.addCodeBase(auxCodeBase);
  }
}",0.7304116865869854
2968,"public static void runDetectorOnClass(Detector pluginDetector,Class<?> classToTest,BugReporter bugReporter) throws CheckedAnalysisException, IOException, InterruptedException {
  Singleton.DETECTOR_RUNNER.doRunDetectorOnClass(new DetectorToDetector2Adapter(pluginDetector),classToTest,bugReporter);
}","public void runDetectorOnClass(Detector pluginDetector,Class<?> classToTest,BugReporter bugReporter) throws Exception {
  assertInitialised();
  Singleton.doRunDetectorOnClass(new DetectorToDetector2Adapter(pluginDetector),classToTest,bugReporter);
}",0.8254545454545454
2969,"private Iterable<String> classPathEntries(){
  return asList(getProperty(""String_Node_Str"").split(File.pathSeparator));
}","private static Iterable<String> classPathEntries(){
  return asList(getProperty(""String_Node_Str"").split(File.pathSeparator));
}",0.9718875502008032
2970,"static void addRegistrar(IAnalysisEngineRegistrar registrar){
  Singleton.DETECTOR_RUNNER.userDefined.add(registrar);
}","void addRegistrar(IAnalysisEngineRegistrar registrar){
  assertInitialised();
  Singleton.USER_DEFINED_ENGINE_REGISTRARS.add(registrar);
}",0.7159533073929961
2971,"private void doRunDetectorOnClass(Detector2 pluginDetector,Class<?> classToTest,BugReporter bugReporter) throws CheckedAnalysisException, IOException, InterruptedException {
  String dottedClassName=classToTest.getName();
  ClassDescriptor classDescriptor=createClassDescriptorFromDottedClassName(dottedClassName);
  pluginDetector.visitClass(classDescriptor);
}","private static void doRunDetectorOnClass(Detector2 pluginDetector,Class<?> classToTest,BugReporter bugReporter) throws Exception {
  String dottedClassName=classToTest.getName();
  ClassDescriptor classDescriptor=createClassDescriptorFromDottedClassName(dottedClassName);
  pluginDetector.visitClass(classDescriptor);
}",0.9162995594713657
2972,"@Test public void runDetectorOnClassVisitsDetectorWithClassContextOfSpecifiedClass() throws Exception {
  Detector detector=mock(Detector.class);
  BugReporter bugReporter=TestingBugReporter.tddBugReporter();
  DetectorRunner.runDetectorOnClass(detector,DetectorRunner.class,bugReporter);
  verify(detector).visitClassContext(argThat(isClassContextFor(""String_Node_Str"")));
}","@Test public void runDetectorOnClassVisitsDetectorWithClassContextOfSpecifiedClass() throws Exception {
  new DetectorRunner().runDetectorOnClass(detector,DetectorRunner.class,bugReporter);
  verify(detector).visitClassContext(argThat(isClassContextFor(""String_Node_Str"")));
}",0.7895545314900153
2973,"@Test public void runDetector2OnClassVisitsDetectorWithClassContextOfSpecifiedClass() throws Exception {
  Detector2 detector=mock(Detector2.class);
  BugReporter bugReporter=TestingBugReporter.tddBugReporter();
  DetectorRunner.runDetectorOnClass(detector,DetectorRunner.class,bugReporter);
  verify(detector).visitClass(argThat(isClassDescriptorFor(""String_Node_Str"")));
}","@Test public void runDetector2OnClassVisitsDetectorWithClassContextOfSpecifiedClass() throws Exception {
  new DetectorRunner().runDetectorOnClass(detector2,DetectorRunner.class,bugReporter);
  verify(detector2).visitClass(argThat(isClassDescriptorFor(""String_Node_Str"")));
}",0.6348228043143297
2974,"private SlotFilterBuilder createFilterBuilder(){
  SlotFilterBuilder slotFilterBuilder=SlotFilterBuilder.builder();
  for (  String binaryGlob : binary) {
    slotFilterBuilder.addBinaryGlobFilter(binaryGlob);
  }
  for (  String configGlob : binary) {
    slotFilterBuilder.addConfigGlobFilter(configGlob);
  }
  for (  String hostGlob : host) {
    slotFilterBuilder.addHostGlobFilter(hostGlob);
  }
  for (  String stateFilter : state) {
    slotFilterBuilder.addStateFilter(stateFilter);
  }
  for (  String shortId : uuid) {
    slotFilterBuilder.addSlotUuidFilter(shortId);
  }
  if (selectAll) {
    slotFilterBuilder.selectAll();
  }
  return slotFilterBuilder;
}","private SlotFilterBuilder createFilterBuilder(){
  SlotFilterBuilder slotFilterBuilder=SlotFilterBuilder.builder();
  for (  String binaryGlob : binary) {
    slotFilterBuilder.addBinaryGlobFilter(binaryGlob);
  }
  for (  String configGlob : config) {
    slotFilterBuilder.addConfigGlobFilter(configGlob);
  }
  for (  String hostGlob : host) {
    slotFilterBuilder.addHostGlobFilter(hostGlob);
  }
  for (  String stateFilter : state) {
    slotFilterBuilder.addStateFilter(stateFilter);
  }
  for (  String shortId : uuid) {
    slotFilterBuilder.addSlotUuidFilter(shortId);
  }
  if (selectAll) {
    slotFilterBuilder.selectAll();
  }
  return slotFilterBuilder;
}",0.9910581222056632
2975,"public void verifySlotExecution(Commander commander,SlotFilter slotFilter,String question,boolean defaultValue,SlotExecution slotExecution){
  Preconditions.checkArgument(slotFilter.isFiltered(),""String_Node_Str"");
  if (globalOptions.batch) {
    slotExecution.execute(commander,slotFilter,null);
  }
  CommanderResponse<List<SlotStatusRepresentation>> response=commander.show(slotFilter);
  displaySlots(response.getValue());
  if (response.getValue().isEmpty()) {
    return;
  }
  System.out.println();
  if (!ask(question,defaultValue)) {
    return;
  }
  SlotFilter uuidFilter=new SlotFilter();
  for (  SlotStatusRepresentation slot : response.getValue()) {
    uuidFilter.uuid.add(slot.getId().toString());
  }
  slotExecution.execute(commander,uuidFilter,response.getVersion());
}","public void verifySlotExecution(Commander commander,SlotFilter slotFilter,String question,boolean defaultValue,SlotExecution slotExecution){
  Preconditions.checkArgument(slotFilter.isFiltered(),""String_Node_Str"");
  if (globalOptions.batch) {
    slotExecution.execute(commander,slotFilter,null);
    return;
  }
  CommanderResponse<List<SlotStatusRepresentation>> response=commander.show(slotFilter);
  displaySlots(response.getValue());
  if (response.getValue().isEmpty()) {
    return;
  }
  System.out.println();
  if (!ask(question,defaultValue)) {
    return;
  }
  SlotFilter uuidFilter=new SlotFilter();
  for (  SlotStatusRepresentation slot : response.getValue()) {
    uuidFilter.uuid.add(slot.getId().toString());
  }
  slotExecution.execute(commander,uuidFilter,response.getVersion());
}",0.992462311557789
2976,"@Override public void deleteExpectedState(UUID slotId){
  Preconditions.checkNotNull(slotId,""String_Node_Str"");
  if (!isDomainCreate()) {
    List<Attribute> attributes=newArrayList();
    attributes.add(new Attribute(""String_Node_Str"",null));
    attributes.add(new Attribute(""String_Node_Str"",null));
    attributes.add(new Attribute(""String_Node_Str"",null));
    try {
      simpleDb.deleteAttributes(new DeleteAttributesRequest().withDomainName(domainName).withItemName(slotId.toString()).withAttributes(attributes));
      expectedStateStoreUp();
    }
 catch (    Exception e) {
      expectedStateStoreDown(e);
    }
  }
}","@Override public void deleteExpectedState(UUID slotId){
  Preconditions.checkNotNull(slotId,""String_Node_Str"");
  if (isDomainCreated()) {
    List<Attribute> attributes=newArrayList();
    attributes.add(new Attribute(""String_Node_Str"",null));
    attributes.add(new Attribute(""String_Node_Str"",null));
    attributes.add(new Attribute(""String_Node_Str"",null));
    try {
      simpleDb.deleteAttributes(new DeleteAttributesRequest().withDomainName(domainName).withItemName(slotId.toString()).withAttributes(attributes));
      expectedStateStoreUp();
    }
 catch (    Exception e) {
      expectedStateStoreDown(e);
    }
  }
}",0.9984126984126984
2977,"@Override public void setExpectedState(ExpectedSlotStatus slotStatus){
  Preconditions.checkNotNull(slotStatus,""String_Node_Str"");
  if (!isDomainCreate()) {
    List<ReplaceableAttribute> attributes=newArrayList();
    attributes.add(new ReplaceableAttribute(""String_Node_Str"",slotStatus.getStatus().toString(),true));
    if (slotStatus.getAssignment() != null) {
      attributes.add(new ReplaceableAttribute(""String_Node_Str"",slotStatus.getAssignment().getBinary(),true));
      attributes.add(new ReplaceableAttribute(""String_Node_Str"",slotStatus.getAssignment().getConfig(),true));
    }
    try {
      simpleDb.putAttributes(new PutAttributesRequest().withDomainName(domainName).withItemName(slotStatus.getId().toString()).withAttributes(attributes));
      expectedStateStoreUp();
    }
 catch (    Exception e) {
      expectedStateStoreDown(e);
    }
  }
}","@Override public void setExpectedState(ExpectedSlotStatus slotStatus){
  Preconditions.checkNotNull(slotStatus,""String_Node_Str"");
  if (isDomainCreated()) {
    List<ReplaceableAttribute> attributes=newArrayList();
    attributes.add(new ReplaceableAttribute(""String_Node_Str"",slotStatus.getStatus().toString(),true));
    if (slotStatus.getAssignment() != null) {
      attributes.add(new ReplaceableAttribute(""String_Node_Str"",slotStatus.getAssignment().getBinary(),true));
      attributes.add(new ReplaceableAttribute(""String_Node_Str"",slotStatus.getAssignment().getConfig(),true));
    }
    try {
      simpleDb.putAttributes(new PutAttributesRequest().withDomainName(domainName).withItemName(slotStatus.getId().toString()).withAttributes(attributes));
      expectedStateStoreUp();
    }
 catch (    Exception e) {
      expectedStateStoreDown(e);
    }
  }
}",0.9988465974625144
2978,"@Override public Collection<ExpectedSlotStatus> getAllExpectedStates(){
  List<ExpectedSlotStatus> slots=newArrayList();
  if (!isDomainCreate()) {
    try {
      String query=String.format(""String_Node_Str"",domainName);
      SelectResult select=simpleDb.select(new SelectRequest(query,true));
      for (      Item item : select.getItems()) {
        ExpectedSlotStatus expectedSlotStatus=loadSlotStatus(item);
        if (expectedSlotStatus != null) {
          slots.add(expectedSlotStatus);
        }
      }
      expectedStateStoreUp();
    }
 catch (    Exception e) {
      expectedStateStoreDown(e);
    }
  }
  return slots;
}","@Override public Collection<ExpectedSlotStatus> getAllExpectedStates(){
  List<ExpectedSlotStatus> slots=newArrayList();
  if (isDomainCreated()) {
    try {
      String query=String.format(""String_Node_Str"",domainName);
      SelectResult select=simpleDb.select(new SelectRequest(query,true));
      for (      Item item : select.getItems()) {
        ExpectedSlotStatus expectedSlotStatus=loadSlotStatus(item);
        if (expectedSlotStatus != null) {
          slots.add(expectedSlotStatus);
        }
      }
      expectedStateStoreUp();
    }
 catch (    Exception e) {
      expectedStateStoreDown(e);
    }
  }
  return slots;
}",0.9984326018808778
2979,"public Assignment upgradeAssignment(Repository repository,Assignment assignment){
  Preconditions.checkNotNull(assignment,""String_Node_Str"");
  String binary=assignment.getBinary();
  if (binaryVersion != null) {
    binary=repository.binaryUpgrade(binary,binaryVersion);
    Preconditions.checkArgument(binary != null,""String_Node_Str"" + binary + ""String_Node_Str""+ binaryVersion);
  }
  String config=assignment.getConfig();
  if (configVersion != null) {
    config=repository.configUpgrade(config,configVersion);
    Preconditions.checkArgument(binary != null,""String_Node_Str"" + config + ""String_Node_Str""+ configVersion);
  }
  return new Assignment(binary,config);
}","public Assignment upgradeAssignment(Repository repository,Assignment assignment){
  Preconditions.checkNotNull(assignment,""String_Node_Str"");
  String binary=assignment.getBinary();
  if (binaryVersion != null) {
    binary=repository.binaryUpgrade(binary,binaryVersion);
    Preconditions.checkArgument(binary != null,""String_Node_Str"" + assignment.getBinary() + ""String_Node_Str""+ binaryVersion);
  }
 else {
    Preconditions.checkArgument(repository.binaryToHttpUri(assignment.getBinary()) != null,""String_Node_Str"" + assignment.getBinary() + ""String_Node_Str"");
  }
  String config=assignment.getConfig();
  if (configVersion != null) {
    config=repository.configUpgrade(config,configVersion);
    Preconditions.checkArgument(config != null,""String_Node_Str"" + assignment.getConfig() + ""String_Node_Str""+ configVersion);
  }
 else {
    Preconditions.checkArgument(repository.configToHttpUri(assignment.getConfig()) != null,""String_Node_Str"" + assignment.getConfig() + ""String_Node_Str"");
  }
  return new Assignment(binary,config);
}",0.6604434072345391
2980,"private MavenCoordinates resolveSnapshotTimestamp(MavenCoordinates coordinates,String groupId){
  for (  URI repositoryBase : repositoryBases) {
    try {
      StringBuilder builder=new StringBuilder();
      builder.append(groupId.replace('.','/')).append('/');
      builder.append(coordinates.getArtifactId()).append('/');
      builder.append(coordinates.getVersion()).append('/');
      builder.append(""String_Node_Str"");
      URI uri=repositoryBase.resolve(builder.toString());
      MavenMetadata metadata=MavenMetadata.unmarshalMavenMetadata(Resources.toString(uri.toURL(),Charsets.UTF_8));
      for (      SnapshotVersion snapshotVersion : metadata.versioning.snapshotVersions) {
        if (coordinates.getPackaging().equals(snapshotVersion.extension) && Objects.equal(coordinates.getClassifier(),snapshotVersion.classifier)) {
          MavenCoordinates timestampSpec=new MavenCoordinates(groupId,coordinates.getArtifactId(),coordinates.getVersion(),coordinates.getPackaging(),coordinates.getClassifier(),snapshotVersion.value);
          return timestampSpec;
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
  return null;
}","private MavenCoordinates resolveSnapshotTimestamp(MavenCoordinates coordinates,String groupId){
  for (  URI repositoryBase : repositoryBases) {
    try {
      StringBuilder builder=new StringBuilder();
      builder.append(groupId.replace('.','/')).append('/');
      builder.append(coordinates.getArtifactId()).append('/');
      builder.append(coordinates.getVersion()).append('/');
      builder.append(""String_Node_Str"");
      URI uri=repositoryBase.resolve(builder.toString());
      MavenMetadata metadata=MavenMetadata.unmarshalMavenMetadata(toString(uri));
      for (      SnapshotVersion snapshotVersion : metadata.versioning.snapshotVersions) {
        if (coordinates.getPackaging().equals(snapshotVersion.extension) && Objects.equal(coordinates.getClassifier(),snapshotVersion.classifier)) {
          MavenCoordinates timestampSpec=new MavenCoordinates(groupId,coordinates.getArtifactId(),coordinates.getVersion(),coordinates.getPackaging(),coordinates.getClassifier(),snapshotVersion.value);
          return timestampSpec;
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
  return null;
}",0.985545335085414
2981,"@Override public String configShortName(String config){
  if (!config.startsWith(""String_Node_Str"")) {
    return null;
  }
  config=config.substring(1);
  MavenCoordinates coordinates=MavenCoordinates.fromConfigGAV(config);
  if (coordinates == null) {
    return config;
  }
  return coordinates.getArtifactId();
}","@Override public String configShortName(String config){
  if (!config.startsWith(""String_Node_Str"")) {
    return null;
  }
  MavenCoordinates coordinates=MavenCoordinates.fromConfigGAV(config);
  if (coordinates == null) {
    return config.substring(0).replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return coordinates.getArtifactId();
}",0.8627450980392157
2982,"public URI toHttpUri(MavenCoordinates coordinates,boolean required){
  coordinates=resolve(coordinates);
  List<URI> checkedUris=newArrayList();
  for (  URI repositoryBase : repositoryBases) {
    StringBuilder builder=new StringBuilder();
    builder.append(coordinates.getGroupId().replace('.','/')).append('/');
    builder.append(coordinates.getArtifactId()).append('/');
    builder.append(coordinates.getVersion()).append('/');
    builder.append(coordinates.getArtifactId()).append('-').append(coordinates.getFileVersion());
    if (coordinates.getClassifier() != null) {
      builder.append('-').append(coordinates.getClassifier());
    }
    builder.append('.').append(coordinates.getPackaging());
    URI uri=repositoryBase.resolve(builder.toString());
    if (isValidBinary(uri)) {
      return uri;
    }
    checkedUris.add(uri);
  }
  if (required) {
    throw new RuntimeException(""String_Node_Str"" + coordinates + ""String_Node_Str""+ checkedUris);
  }
 else {
    return null;
  }
}","public URI toHttpUri(MavenCoordinates coordinates,boolean required){
  coordinates=resolve(coordinates);
  if (coordinates == null) {
    return null;
  }
  List<URI> checkedUris=newArrayList();
  for (  URI repositoryBase : repositoryBases) {
    StringBuilder builder=new StringBuilder();
    builder.append(coordinates.getGroupId().replace('.','/')).append('/');
    builder.append(coordinates.getArtifactId()).append('/');
    builder.append(coordinates.getVersion()).append('/');
    builder.append(coordinates.getArtifactId()).append('-').append(coordinates.getFileVersion());
    if (coordinates.getClassifier() != null) {
      builder.append('-').append(coordinates.getClassifier());
    }
    builder.append('.').append(coordinates.getPackaging());
    URI uri=repositoryBase.resolve(builder.toString());
    if (isValidBinary(uri)) {
      return uri;
    }
    checkedUris.add(uri);
  }
  if (required) {
    throw new RuntimeException(""String_Node_Str"" + coordinates + ""String_Node_Str""+ checkedUris);
  }
 else {
    return null;
  }
}",0.9755859375
2983,"@Inject public MavenRepository(CoordinatorConfig config) throws Exception {
  this.defaultGroupIds=ImmutableList.copyOf(Splitter.on(""String_Node_Str"").trimResults().omitEmptyStrings().split(config.getDefaultRepositoryGroupId()));
  Builder<URI> builder=ImmutableList.builder();
  for (  String binaryRepoBase : config.getMavenRepoBases()) {
    if (!binaryRepoBase.endsWith(""String_Node_Str"")) {
      binaryRepoBase=binaryRepoBase + ""String_Node_Str"";
    }
    builder.add(URI.create(binaryRepoBase));
  }
  repositoryBases=builder.build();
}","@Inject public MavenRepository(CoordinatorConfig config){
  if (config.getDefaultRepositoryGroupId() != null) {
    this.defaultGroupIds=ImmutableList.copyOf(config.getDefaultRepositoryGroupId());
  }
 else {
    this.defaultGroupIds=ImmutableList.of();
  }
  Builder<URI> builder=ImmutableList.builder();
  for (  String binaryRepoBase : config.getRepositories()) {
    if (!binaryRepoBase.endsWith(""String_Node_Str"")) {
      binaryRepoBase=binaryRepoBase + ""String_Node_Str"";
    }
    builder.add(URI.create(binaryRepoBase));
  }
  repositoryBases=builder.build();
}",0.2603231597845601
2984,"public List<SlotStatus> install(Predicate<AgentStatus> filter,int limit,Assignment assignment){
  assignment=assignment.resolve(repository);
  Map<String,Integer> resources=readResources(assignment);
  Installation installation=new Installation(repository.configShortName(assignment.getConfig()),assignment,repository.binaryToHttpUri(assignment.getBinary()),repository.configToHttpUri(assignment.getConfig()),resources);
  List<SlotStatus> slots=newArrayList();
  List<RemoteAgent> agents=newArrayList(filter(this.agents.values(),Predicates.and(filterAgentsBy(filter),filterAgentsWithAssignment(assignment))));
  Collections.shuffle(agents);
  for (  RemoteAgent agent : agents) {
    if (slots.size() >= limit) {
      break;
    }
    AgentStatus status=agent.status();
    if (status.getState() != ONLINE) {
      continue;
    }
    Map<String,Integer> availableResources=getAvailableResources(status);
    if (!resourcesAreAvailable(availableResources,installation.getResources())) {
      continue;
    }
    SlotStatus slotStatus=agent.install(installation);
    stateManager.setExpectedState(new ExpectedSlotStatus(slotStatus.getId(),STOPPED,installation.getAssignment()));
    slots.add(slotStatus);
  }
  return ImmutableList.copyOf(slots);
}","public List<SlotStatus> install(Predicate<AgentStatus> filter,int limit,Assignment assignment){
  assignment=assignment.resolve(repository);
  Map<String,Integer> resources=readResources(assignment);
  URI binaryUri=repository.binaryToHttpUri(assignment.getBinary());
  Preconditions.checkNotNull(binaryUri,""String_Node_Str"",binaryUri);
  URI configUri=repository.configToHttpUri(assignment.getConfig());
  Preconditions.checkNotNull(configUri,""String_Node_Str"",configUri);
  Installation installation=new Installation(repository.configShortName(assignment.getConfig()),assignment,binaryUri,configUri,resources);
  List<SlotStatus> slots=newArrayList();
  List<RemoteAgent> agents=newArrayList(filter(this.agents.values(),Predicates.and(filterAgentsBy(filter),filterAgentsWithAssignment(assignment))));
  Collections.shuffle(agents);
  for (  RemoteAgent agent : agents) {
    if (slots.size() >= limit) {
      break;
    }
    AgentStatus status=agent.status();
    if (status.getState() != ONLINE) {
      continue;
    }
    Map<String,Integer> availableResources=getAvailableResources(status);
    if (!resourcesAreAvailable(availableResources,installation.getResources())) {
      continue;
    }
    SlotStatus slotStatus=agent.install(installation);
    stateManager.setExpectedState(new ExpectedSlotStatus(slotStatus.getId(),STOPPED,installation.getAssignment()));
    slots.add(slotStatus);
  }
  return ImmutableList.copyOf(slots);
}",0.8516320474777448
2985,"public SlotStatus install(Installation installation){
  String slotName=getNextSlotName(installation.getAssignment().getConfig().getComponent());
  URI slotUri=httpServerInfo.getHttpUri().resolve(""String_Node_Str"").resolve(slotName);
  Slot slot=new DeploymentSlot(slotUri,deploymentManagerFactory.createDeploymentManager(slotName),lifecycleManager,installation,config.getMaxLockWait());
  SlotStatus status;
  try {
    status=slot.assign(installation);
    slots.put(slotName,slot);
  }
 catch (  Exception e) {
    slot.terminate();
    throw Throwables.propagate(e);
  }
  return status;
}","public SlotStatus install(Installation installation){
  String slotName=getNextSlotName(installation.getAssignment().getConfig().getComponent());
  URI slotUri=httpServerInfo.getHttpUri().resolve(""String_Node_Str"").resolve(slotName);
  Slot slot=new DeploymentSlot(slotUri,deploymentManagerFactory.createDeploymentManager(slotName),lifecycleManager,installation,config.getMaxLockWait());
  slots.put(slotName,slot);
  return slot.getLastSlotStatus();
}",0.7578947368421053
2986,"@Test public void testGetAllSlotStatus(){
  SlotStatus slotStatus1=agent.install(APPLE_INSTALLATION);
  SlotStatus slotStatus2=agent.install(APPLE_INSTALLATION);
  Response response=resource.getAllSlotsStatus(uriInfo);
  assertEquals(response.getStatus(),Response.Status.OK.getStatusCode());
  assertInstanceOf(response.getEntity(),Collection.class);
  ExtraAssertions.assertEqualsNoOrder((Collection<?>)response.getEntity(),ImmutableMultiset.of(SlotStatusRepresentation.from(slotStatus1),SlotStatusRepresentation.from(slotStatus2)));
}","@Test public void testGetAllSlotStatus(){
  SlotStatus slotStatus1=agent.install(APPLE_INSTALLATION);
  SlotStatus slotStatus2=agent.install(APPLE_INSTALLATION);
  Response response=resource.getAllSlotsStatus(uriInfo);
  assertEquals(response.getStatus(),Response.Status.OK.getStatusCode());
  assertInstanceOf(response.getEntity(),Collection.class);
  assertEqualsNoOrder((Collection<?>)response.getEntity(),ImmutableMultiset.of(SlotStatusRepresentation.from(slotStatus1),SlotStatusRepresentation.from(slotStatus2)));
}",0.9848484848484848
2987,"@Inject public GitConfigRepository(GitConfigRepositoryConfig config,HttpServerInfo httpServerInfo) throws Exception {
  Preconditions.checkNotNull(config,""String_Node_Str"");
  if (config.getRemoteUri() == null) {
    repository=null;
    blobUri=null;
    localRepository=null;
    refreshInterval=null;
    executorService=null;
  }
 else {
    localRepository=new File(config.getLocalConfigRepo());
    log.info(""String_Node_Str"",localRepository.getAbsolutePath());
    Git git;
    if (!localRepository.isDirectory()) {
      git=Git.cloneRepository().setURI(config.getRemoteUri()).setBranch(""String_Node_Str"").setDirectory(localRepository).setBare(true).call();
    }
 else {
      git=Git.open(localRepository);
    }
    repository=git.getRepository();
    if (httpServerInfo.getHttpsUri() != null) {
      blobUri=httpServerInfo.getHttpsUri().resolve(""String_Node_Str"");
    }
 else {
      blobUri=httpServerInfo.getHttpUri().resolve(""String_Node_Str"");
    }
    refreshInterval=config.getRefreshInterval();
    executorService=Executors.newScheduledThreadPool(1,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").setDaemon(true).build());
  }
}","@Inject public GitConfigRepository(GitConfigRepositoryConfig config,HttpServerInfo httpServerInfo) throws Exception {
  Preconditions.checkNotNull(config,""String_Node_Str"");
  if (config.getRemoteUri() == null) {
    blobUri=null;
    localRepository=null;
    refreshInterval=null;
    executorService=null;
    repositoryUpdater=null;
  }
 else {
    localRepository=new File(config.getLocalConfigRepo());
    log.info(""String_Node_Str"",localRepository.getAbsolutePath());
    if (httpServerInfo.getHttpsUri() != null) {
      blobUri=httpServerInfo.getHttpsUri().resolve(""String_Node_Str"");
    }
 else {
      blobUri=httpServerInfo.getHttpUri().resolve(""String_Node_Str"");
    }
    refreshInterval=config.getRefreshInterval();
    executorService=Executors.newScheduledThreadPool(1,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").setDaemon(true).build());
    repositoryUpdater=new RepositoryUpdater(config);
  }
}",0.5794749403341288
2988,"@PostConstruct public void start(){
  if (executorService != null) {
    executorService.scheduleWithFixedDelay(new FetchGitConfigRepository(localRepository),0,(long)refreshInterval.toMillis(),TimeUnit.MILLISECONDS);
  }
}","@PostConstruct public void start(){
  if (executorService != null) {
    executorService.scheduleWithFixedDelay(repositoryUpdater,0,(long)refreshInterval.toMillis(),MILLISECONDS);
  }
}",0.8845208845208845
2989,"@Override public void run(){
  try {
    Git.open(localRepository).fetch().setTimeout(60).call();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    if (!localRepository.isDirectory()) {
      Git.cloneRepository().setURI(remoteGitUri).setDirectory(localRepository).setTimeout(60).call();
    }
 else {
      Git git=Git.open(localRepository);
      git.fetch().setRemote(""String_Node_Str"").setTimeout(60).call();
      git.merge().include(git.getRepository().getRef(""String_Node_Str"")).call();
    }
    failed=false;
  }
 catch (  Exception e) {
    if (!failed) {
      failed=true;
      log.error(""String_Node_Str"",e);
    }
  }
}",0.4028776978417266
2990,"@Override public Map<String,URI> getConfigMap(ConfigSpec configSpec){
  if (repository == null) {
    return null;
  }
  try {
    Ref headRef=repository.getRef(""String_Node_Str"");
    AnyObjectId headId=headRef.getObjectId();
    RevWalk revWalk=new RevWalk(repository);
    RevCommit headCommit=revWalk.parseCommit(headId);
    RevTree headTree=headCommit.getTree();
    TreeWalk treeWalk=new TreeWalk(repository);
    treeWalk.addTree(headTree);
    treeWalk.setRecursive(true);
    String pool=configSpec.getPool();
    if (pool == null) {
      pool=""String_Node_Str"";
    }
    String pathPrefix=String.format(""String_Node_Str"",configSpec.getEnvironment(),configSpec.getComponent(),pool,configSpec.getVersion());
    treeWalk.setFilter(PathFilter.create(pathPrefix));
    ImmutableMap.Builder<String,URI> blobs=ImmutableMap.builder();
    while (treeWalk.next()) {
      CanonicalTreeParser ft=treeWalk.getTree(0,CanonicalTreeParser.class);
      String path=ft.getEntryPathString();
      ObjectId objectId=treeWalk.getObjectId(0);
      String subPath=path.substring(pathPrefix.length());
      blobs.put(subPath,blobUri.resolve(objectId.getName()));
    }
    Map<String,URI> configMap=blobs.build();
    if (configMap.isEmpty()) {
      return null;
    }
 else {
      return configMap;
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","private List<String> getConfigMap(String basePath,File dir){
  ImmutableList.Builder<String> builder=ImmutableList.builder();
  for (  File file : FileUtils.listFiles(dir)) {
    String path=basePath + file.getName();
    if (file.isDirectory()) {
      builder.addAll(getConfigMap(path + ""String_Node_Str"",file));
    }
 else {
      builder.add(path);
    }
  }
  return builder.build();
}",0.0515695067264574
2991,"public InputSupplier<InputStream> getBlob(String objectIdString){
  if (repository == null) {
    return null;
  }
  final ObjectId objectId;
  try {
    objectId=ObjectId.fromString(objectIdString);
  }
 catch (  Exception e) {
    return null;
  }
  if (!repository.hasObject(objectId)) {
    return null;
  }
  return new InputSupplier<InputStream>(){
    @Override public InputStream getInput() throws IOException {
      ObjectLoader objectLoader=repository.open(objectId);
      return objectLoader.openStream();
    }
  }
;
}","public InputSupplier<? extends InputStream> getBlob(String objectIdString){
  if (localRepository == null) {
    return null;
  }
  File file=newFile(localRepository,objectIdString);
  if (!file.canRead()) {
    return null;
  }
  return Files.newInputStreamSupplier(file);
}",0.3320941759603469
2992,"@GET @Path(""String_Node_Str"") public Response getConfigFile(@PathParam(""String_Node_Str"") String objectId){
  InputSupplier<InputStream> blob=gitConfigRepository.getBlob(objectId);
  if (blob == null) {
    return Response.status(Status.NOT_FOUND).build();
  }
  return Response.ok(new InputSupplierStreamingOutput(blob)).build();
}","@GET @Path(""String_Node_Str"") public Response getConfigFile(@PathParam(""String_Node_Str"") String objectId){
  InputSupplier<? extends InputStream> blob=gitConfigRepository.getBlob(objectId);
  if (blob == null) {
    return Response.status(Status.NOT_FOUND).build();
  }
  return Response.ok(new InputSupplierStreamingOutput(blob)).build();
}",0.9851632047477744
2993,"@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response install(AssignmentRepresentation assignmentRepresentation,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@Context UriInfo uriInfo){
  Preconditions.checkNotNull(assignmentRepresentation,""String_Node_Str"");
  Preconditions.checkArgument(limit > 0,""String_Node_Str"");
  Assignment assignment=assignmentRepresentation.toAssignment();
  Map<String,URI> configMap=localConfigRepository.getConfigMap(assignment.getConfig());
  if (configMap == null) {
    configMap=gitConfigRepository.getConfigMap(assignment.getConfig());
  }
  if (configMap == null) {
    configMap=configRepository.getConfigMap(assignment.getConfig());
  }
  Installation installation=new Installation(assignment,binaryRepository.getBinaryUri(assignment.getBinary()),configMap);
  Predicate<AgentStatus> agentFilter=AgentFilterBuilder.build(uriInfo);
  List<SlotStatus> results=coordinator.install(agentFilter,limit,installation);
  return Response.ok(transform(results,fromSlotStatus())).build();
}","@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response install(AssignmentRepresentation assignmentRepresentation,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") int limit,@Context UriInfo uriInfo){
  Preconditions.checkNotNull(assignmentRepresentation,""String_Node_Str"");
  Preconditions.checkArgument(limit > 0,""String_Node_Str"");
  Assignment assignment=assignmentRepresentation.toAssignment();
  Map<String,URI> configMap=localConfigRepository.getConfigMap(assignment.getConfig());
  if (configMap == null) {
    configMap=gitConfigRepository.getConfigMap(assignment.getConfig());
  }
  if (configMap == null) {
    configMap=configRepository.getConfigMap(assignment.getConfig());
  }
  URI binaryUri=binaryRepository.getBinaryUri(assignment.getBinary());
  if (binaryUri == null) {
    return Response.status(Status.NOT_FOUND).entity(""String_Node_Str"" + assignment.getBinary()).build();
  }
  Installation installation=new Installation(assignment,binaryUri,configMap);
  Predicate<AgentStatus> agentFilter=AgentFilterBuilder.build(uriInfo);
  List<SlotStatus> results=coordinator.install(agentFilter,limit,installation);
  return Response.ok(transform(results,fromSlotStatus())).build();
}",0.8927808628791115
2994,"public static boolean isSymbolicLink(File file){
  try {
    File canonicalFile=file.getCanonicalFile();
    File absoluteFile=file.getAbsoluteFile();
    return !canonicalFile.getName().equals(absoluteFile.getName()) || !canonicalFile.getParent().equals(file.getParentFile().getCanonicalPath());
  }
 catch (  IOException e) {
    return true;
  }
}","public static boolean isSymbolicLink(File file){
  try {
    File canonicalFile=file.getCanonicalFile();
    File absoluteFile=file.getAbsoluteFile();
    return !canonicalFile.getName().equals(absoluteFile.getName()) || !canonicalFile.getParent().equals(absoluteFile.getParentFile().getCanonicalPath());
  }
 catch (  IOException e) {
    return true;
  }
}",0.9858757062146892
2995,"@Override public void onEviction(UUID id,AgentStatus agentStatus){
  try {
    slotsLock.writeLock().lock();
    for (    SlotStatus slotStatus : agentStatus.getSlots()) {
      slots.remove(slotStatus.getId());
    }
  }
  finally {
    slotsLock.writeLock().unlock();
  }
}","@Override public void onEviction(UUID id,AgentStatus agentStatus){
  slotsLock.writeLock().lock();
  try {
    for (    SlotStatus slotStatus : agentStatus.getSlots()) {
      slots.remove(slotStatus.getId());
    }
  }
  finally {
    slotsLock.writeLock().unlock();
  }
}",0.4051094890510949
2996,"@Inject public Coordinator(RemoteSlotFactory remoteSlotFactory,CoordinatorConfig config){
  Preconditions.checkNotNull(remoteSlotFactory,""String_Node_Str"");
  this.remoteSlotFactory=remoteSlotFactory;
  agents=new MapMaker().expireAfterWrite((long)config.getStatusExpiration().toMillis(),TimeUnit.MILLISECONDS).evictionListener(new MapEvictionListener<UUID,AgentStatus>(){
    @Override public void onEviction(    UUID id,    AgentStatus agentStatus){
      try {
        slotsLock.writeLock().lock();
        for (        SlotStatus slotStatus : agentStatus.getSlots()) {
          slots.remove(slotStatus.getId());
        }
      }
  finally {
        slotsLock.writeLock().unlock();
      }
    }
  }
).makeMap();
  slots=new MapMaker().makeMap();
}","@Inject public Coordinator(RemoteSlotFactory remoteSlotFactory,CoordinatorConfig config){
  Preconditions.checkNotNull(remoteSlotFactory,""String_Node_Str"");
  this.remoteSlotFactory=remoteSlotFactory;
  agents=new MapMaker().expireAfterWrite((long)config.getStatusExpiration().toMillis(),TimeUnit.MILLISECONDS).evictionListener(new MapEvictionListener<UUID,AgentStatus>(){
    @Override public void onEviction(    UUID id,    AgentStatus agentStatus){
      slotsLock.writeLock().lock();
      try {
        for (        SlotStatus slotStatus : agentStatus.getSlots()) {
          slots.remove(slotStatus.getId());
        }
      }
  finally {
        slotsLock.writeLock().unlock();
      }
    }
  }
).makeMap();
  slots=new MapMaker().makeMap();
}",0.9507978723404256
2997,"private String getNextSlotName(){
  int nextId=1;
  for (  String deploymentId : slots.keySet()) {
    Matcher matcher=SLOT_ID_PATTERN.matcher(deploymentId);
    if (matcher.matches()) {
      try {
        int id=Integer.parseInt(matcher.group(1));
        nextId=max(id,nextId + 1);
      }
 catch (      NumberFormatException ignored) {
      }
    }
  }
  for (int i=0; i < 10000; i++) {
    String deploymentId=""String_Node_Str"" + nextId++;
    if (!new File(slotsDir,deploymentId).exists()) {
      return deploymentId;
    }
  }
  throw new IllegalStateException(""String_Node_Str"");
}","private String getNextSlotName(){
  int nextId=1;
  for (  String deploymentId : slots.keySet()) {
    Matcher matcher=SLOT_ID_PATTERN.matcher(deploymentId);
    if (matcher.matches()) {
      try {
        int id=Integer.parseInt(matcher.group(1));
        nextId=max(nextId,id + 1);
      }
 catch (      NumberFormatException ignored) {
      }
    }
  }
  for (int i=0; i < 10000; i++) {
    String deploymentId=""String_Node_Str"" + (nextId + i);
    if (!new File(slotsDir,deploymentId).exists()) {
      return deploymentId;
    }
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.9747048903878583
2998,"@Override public URI getBinaryUri(BinarySpec binarySpec){
  String fileVersion=binarySpec.getVersion();
  if (binarySpec.getVersion().contains(""String_Node_Str"")) {
    StringBuilder builder=new StringBuilder();
    builder.append(binarySpec.getGroupId().replace('.','/')).append('/');
    builder.append(binarySpec.getArtifactId()).append('/');
    builder.append(binarySpec.getVersion()).append('/');
    builder.append(""String_Node_Str"");
    URI uri=binaryRepositoryBase.resolve(builder.toString());
    try {
      MavenMetadata metadata=MavenMetadata.unmarshalMavenMetadata(Resources.toString(toURL(uri),Charsets.UTF_8));
      fileVersion=String.format(""String_Node_Str"",binarySpec.getVersion().replaceAll(""String_Node_Str"",""String_Node_Str""),metadata.versioning.snapshot.timestamp,metadata.versioning.snapshot.buildNumber);
    }
 catch (    Exception ignored) {
    }
  }
  StringBuilder builder=new StringBuilder();
  builder.append(binarySpec.getGroupId().replace('.','/')).append('/');
  builder.append(binarySpec.getArtifactId()).append('/');
  builder.append(binarySpec.getVersion()).append('/');
  builder.append(binarySpec.getArtifactId()).append('-').append(fileVersion);
  if (binarySpec.getClassifier() != null) {
    builder.append('-').append(binarySpec.getArtifactId());
  }
  builder.append('.').append(binarySpec.getPackaging());
  return binaryRepositoryBase.resolve(builder.toString());
}","@Override public URI getBinaryUri(BinarySpec binarySpec){
  String fileVersion=binarySpec.getVersion();
  if (binarySpec.getVersion().contains(""String_Node_Str"")) {
    StringBuilder builder=new StringBuilder();
    builder.append(binarySpec.getGroupId().replace('.','/')).append('/');
    builder.append(binarySpec.getArtifactId()).append('/');
    builder.append(binarySpec.getVersion()).append('/');
    builder.append(""String_Node_Str"");
    URI uri=binaryRepositoryBase.resolve(builder.toString());
    try {
      MavenMetadata metadata=MavenMetadata.unmarshalMavenMetadata(Resources.toString(toURL(uri),Charsets.UTF_8));
      fileVersion=String.format(""String_Node_Str"",binarySpec.getVersion().replaceAll(""String_Node_Str"",""String_Node_Str""),metadata.versioning.snapshot.timestamp,metadata.versioning.snapshot.buildNumber);
    }
 catch (    Exception ignored) {
    }
  }
  StringBuilder builder=new StringBuilder();
  builder.append(binarySpec.getGroupId().replace('.','/')).append('/');
  builder.append(binarySpec.getArtifactId()).append('/');
  builder.append(binarySpec.getVersion()).append('/');
  builder.append(binarySpec.getArtifactId()).append('-').append(fileVersion);
  if (binarySpec.getClassifier() != null) {
    builder.append('-').append(binarySpec.getClassifier());
  }
  builder.append('.').append(binarySpec.getPackaging());
  return binaryRepositoryBase.resolve(builder.toString());
}",0.9943422913719944
2999,"public synchronized void announce() throws InterruptedException {
  try {
    AgentStatus agentStatus=agent.getAgentStatus();
    AgentStatusRepresentation agentStatusRepresentation=AgentStatusRepresentation.from(agentStatus,httpServerInfo.getHttpUri());
    String json=codec.toJson(agentStatusRepresentation);
    client.preparePut(announcementUrl).setBody(json).execute().get();
  }
 catch (  InterruptedException e) {
    throw e;
  }
catch (  Exception e) {
    log.warn(e,""String_Node_Str"" + announcementUrl);
  }
}","public synchronized void announce() throws InterruptedException {
  try {
    AgentStatus agentStatus=agent.getAgentStatus();
    AgentStatusRepresentation agentStatusRepresentation=AgentStatusRepresentation.from(agentStatus,httpServerInfo.getHttpUri());
    String json=codec.toJson(agentStatusRepresentation);
    Response response=client.preparePut(announcementUrl).setBody(json).setHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON).execute().get();
    if (response.getStatusCode() != 200) {
      log.warn(""String_Node_Str"" + announcementUrl + ""String_Node_Str""+ response.getStatusText());
    }
  }
 catch (  InterruptedException e) {
    throw e;
  }
catch (  Exception e) {
    log.warn(e,""String_Node_Str"" + announcementUrl);
  }
}",0.8198269079464988
3000,"@BeforeClass public void startServer() throws Exception {
  tempDir=DeploymentUtils.createTempDir(""String_Node_Str"");
  Map<String,String> properties=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",tempDir.getAbsolutePath()).build();
  Injector injector=Guice.createInjector(new TestingHttpServerModule(),new JaxrsModule(),new AgentMainModule(),new ConfigurationModule(new ConfigurationFactory(properties)));
  server=injector.getInstance(TestingHttpServer.class);
  agent=injector.getInstance(Agent.class);
  server.start();
  client=new AsyncHttpClient();
  testRepository=RepositoryTestHelper.createTestRepository();
  appleAssignment=newAssignment(""String_Node_Str"",""String_Node_Str"");
}","@BeforeClass public void startServer() throws Exception {
  tempDir=DeploymentUtils.createTempDir(""String_Node_Str"");
  Map<String,String> properties=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",tempDir.getAbsolutePath()).build();
  Injector injector=Guice.createInjector(new TestingHttpServerModule(),new JaxrsModule(),new AgentMainModule(),new ConfigurationModule(new ConfigurationFactory(properties)));
  server=injector.getInstance(TestingHttpServer.class);
  agent=injector.getInstance(Agent.class);
  server.start();
  client=new AsyncHttpClient();
  testRepository=RepositoryTestHelper.createTestRepository();
  appleAssignment=newAssignment(""String_Node_Str"",""String_Node_Str"");
}",0.973185088293002
