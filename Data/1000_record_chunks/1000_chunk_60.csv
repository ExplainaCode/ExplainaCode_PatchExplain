record_number,buggy_code,fixed_code,code_similarity
59001,"/** 
 * Constructor.
 */
public GLParallelCoordinates(final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(iGLCanvasID,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_PARALLEL_COORDINATES;
  renderStyle=new ParCoordsRenderStyle(viewFrustum);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).mappingType(EMappingType.EXPRESSION_INDEX_2_DAVID,EMappingType.DAVID_2_EXPRESSION_INDEX).externalIDType(EIDType.DAVID).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_EXPERIMENT).build();
  alIsAngleBlocking=new ArrayList<ArrayList<Integer>>();
  alIsAngleBlocking.add(new ArrayList<Integer>());
  iNumberOfRandomElements=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
}","/** 
 * Constructor.
 */
public GLParallelCoordinates(final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(iGLCanvasID,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_PARALLEL_COORDINATES;
  renderStyle=new ParCoordsRenderStyle(viewFrustum);
  super.renderStyle=this.renderStyle;
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).mappingType(EMappingType.EXPRESSION_INDEX_2_DAVID,EMappingType.DAVID_2_EXPRESSION_INDEX).externalIDType(EIDType.DAVID).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_EXPERIMENT).build();
  alIsAngleBlocking=new ArrayList<ArrayList<Integer>>();
  alIsAngleBlocking.add(new ArrayList<Integer>());
  iNumberOfRandomElements=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
}",0.976629766297663
59002,"@Override public synchronized void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
  if (bBusyModeChanged)   updateBusyMode(gl);
}","@Override public synchronized void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
  if (bBusyModeChanged || bBusyMode)   updateBusyMode(gl);
}",0.973365617433414
59003,"/** 
 * Constructor.
 */
public GLColorMappingBarMiniView(IViewFrustum viewFrustum){
  super();
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.BOLD,16),false);
  renderStyle=new GeneralRenderStyle(viewFrustum);
}","/** 
 * Constructor.
 */
public GLColorMappingBarMiniView(IViewFrustum viewFrustum){
  super();
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.BOLD,18),false);
  renderStyle=new GeneralRenderStyle(viewFrustum);
}",0.9956331877729258
59004,"@Override protected void performDefaults(){
  iNumberOfColorPoints=getPreferenceStore().getDefaultInt(NUMBER_OF_COLOR_MARKER_POINTS);
  numColorPointsSpinner.setSelection(iNumberOfColorPoints);
  alColorMarkerPointSpinners.get(0).setSelection((int)(getPreferenceStore().getDefaultDouble(COLOR_MARKER_POINT_VALUE + ""String_Node_Str"") * 100));
  alColorMarkerPointSpinners.get(1).setSelection((int)(getPreferenceStore().getDefaultDouble(COLOR_MARKER_POINT_VALUE + ""String_Node_Str"") * 100));
  alColorMarkerPointSpinners.get(2).setSelection((int)(getPreferenceStore().getDefaultDouble(COLOR_MARKER_POINT_VALUE + ""String_Node_Str"") * 100));
  alColorFieldEditors.get(0).loadDefault();
  alColorFieldEditors.get(1).loadDefault();
  alColorFieldEditors.get(2).loadDefault();
}","@Override protected void performDefaults(){
  iNumberOfColorPoints=getPreferenceStore().getDefaultInt(NUMBER_OF_COLOR_MARKER_POINTS);
  numColorPointsSpinner.setSelection(iNumberOfColorPoints);
  alColorMarkerPointSpinners.get(0).setSelection((int)(getPreferenceStore().getDefaultDouble(COLOR_MARKER_POINT_VALUE + ""String_Node_Str"") * 100 * 10));
  alColorMarkerPointSpinners.get(1).setSelection((int)(getPreferenceStore().getDefaultDouble(COLOR_MARKER_POINT_VALUE + ""String_Node_Str"") * 100 * 10));
  alColorMarkerPointSpinners.get(2).setSelection((int)(getPreferenceStore().getDefaultDouble(COLOR_MARKER_POINT_VALUE + ""String_Node_Str"") * 100 * 10));
  alColorFieldEditors.get(0).loadDefault();
  alColorFieldEditors.get(1).loadDefault();
  alColorFieldEditors.get(2).loadDefault();
}",0.9903660886319846
59005,"/** 
 * Initializes the array lists that contain the data. Must be run at program start, every time you exchange axis and polylines and every time you change storages or selections 
 */
@Override protected void initLists(){
  if (bRenderOnlyContext)   iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION))     initCompleteList();
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  initContentVariables();
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  storageSelectionManager.setVA(set.getVA(iStorageVAID));
}","/** 
 * Initializes the array lists that contain the data. Must be run at program start, every time you exchange axis and polylines and every time you change storages or selections 
 */
@Override protected void initLists(){
  if (bRenderOnlyContext)   iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION))     initCompleteList();
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  initContentVariables();
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  storageSelectionManager.setVA(set.getVA(iStorageVAID));
  fArGateBottomHeight=null;
  fArGateTipHeight=null;
}",0.9639210347174948
59006,"/** 
 * Provides a selection delta that contains all elements in the view, with the appropriate external and internal selection IDs
 * @return the SelectionDelta containing all entries in the selection manager
 */
public SelectionDelta getCompleteDelta(){
  SelectionDelta tempDelta=new SelectionDelta(externalIDType,internalIDType);
  HashMap<Integer,Boolean> tempHash;
  for (  ESelectionType selectionType : alSelectionTypes) {
    tempHash=hashSelectionTypes.get(selectionType);
    for (    Integer iElement : tempHash.keySet()) {
      Integer iExternalID=GeneralManager.get().getGenomeIdManager().getID(internalToExternalMapping,iElement);
      if (iExternalID == null || iExternalID == -1) {
        GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"" + iElement);
        continue;
      }
      tempDelta.addSelection(iExternalID,selectionType,iElement);
    }
  }
  return tempDelta;
}","/** 
 * Provides a selection delta that contains all elements in the view, with the appropriate external and internal selection IDs
 * @return the SelectionDelta containing all entries in the selectionmanager
 */
public SelectionDelta getCompleteDelta(){
  SelectionDelta tempDelta=new SelectionDelta(externalIDType,internalIDType);
  HashMap<Integer,Boolean> tempHash;
  for (  ESelectionType selectionType : alSelectionTypes) {
    tempHash=hashSelectionTypes.get(selectionType);
    for (    Integer iElement : tempHash.keySet()) {
      Integer iExternalID=GeneralManager.get().getGenomeIdManager().getID(internalToExternalMapping,iElement);
      if (iExternalID == null || iExternalID == -1) {
        GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"" + iElement);
        continue;
      }
      tempDelta.addSelection(iExternalID,selectionType,iElement);
    }
  }
  return tempDelta;
}",0.9994526546250684
59007,"/** 
 * Check whether an element is in any selection
 * @param iElementID the element id 
 * @return true if the element exists in the selection manager, else false
 */
public boolean checkStatus(int iElementID){
  for (  ESelectionType type : alSelectionTypes) {
    if (checkStatus(type,iElementID))     return true;
  }
  return false;
}","/** 
 * Check whether an element is in any selection
 * @param iElementID the element id
 * @return true if the element exists in the selection manager, else false
 */
public boolean checkStatus(int iElementID){
  for (  ESelectionType type : alSelectionTypes) {
    if (checkStatus(type,iElementID))     return true;
  }
  return false;
}",0.9985272459499264
59008,"/** 
 * Clear one specific selection type. The elements contained in that type are added to the ""normal"" type
 * @param sSelectionType the selection type to be cleared
 */
public void clearSelection(ESelectionType eSelectionType){
  if (eSelectionType == ESelectionType.REMOVE)   return;
  if (eSelectionType == eNormalType)   throw new IllegalArgumentException(""String_Node_Str"");
  if (hashSelectionTypes.get(eSelectionType).isEmpty())   return;
  for (  int iSelectionID : hashSelectionTypes.get(eSelectionType).keySet()) {
    selectionDelta.addSelection(iSelectionID,eNormalType);
  }
  hashSelectionTypes.get(eNormalType).putAll(hashSelectionTypes.get(eSelectionType));
  hashSelectionTypes.get(eSelectionType).clear();
}","/** 
 * Clear one specific selection type. The elements contained in that type are added to the ""normal"" type
 * @param sSelectionType the selection type to be cleared
 */
public void clearSelection(ESelectionType eSelectionType){
  if (eSelectionType == ESelectionType.REMOVE)   return;
  if (eSelectionType == eNormalType)   throw new IllegalArgumentException(""String_Node_Str"");
  if (hashSelectionTypes.get(eSelectionType) == null || hashSelectionTypes.get(eSelectionType).isEmpty())   return;
  for (  int iSelectionID : hashSelectionTypes.get(eSelectionType).keySet()) {
    selectionDelta.addSelection(iSelectionID,eNormalType);
  }
  hashSelectionTypes.get(eNormalType).putAll(hashSelectionTypes.get(eSelectionType));
  hashSelectionTypes.get(eSelectionType).clear();
}",0.9667553191489362
59009,"private void init(int iElementId,RemoteHierarchyLayer originHierarchyLayer,RemoteHierarchyLayer destinationHierarchyLayer){
  this.iElementId=iElementId;
  this.originHierarchyLayer=originHierarchyLayer;
  this.destinationHierarchyLayer=destinationHierarchyLayer;
}","private void init(int iElementId,RemoteHierarchyLevel originHierarchyLayer,RemoteHierarchyLevel destinationHierarchyLayer){
  this.iElementId=iElementId;
  this.originHierarchyLayer=originHierarchyLayer;
  this.destinationHierarchyLayer=destinationHierarchyLayer;
}",0.969811320754717
59010,"/** 
 * Constructor.
 * @param iElementId
 * @param originHierarchyLayer
 * @param destinationHierarchyLayer
 * @param iDestinationPosIndex
 */
public SlerpAction(int iElementId,RemoteHierarchyLayer originHierarchyLayer,RemoteHierarchyLayer destinationHierarchyLayer,int iDestinationPosIndex){
  this.iDestinationPosIndex=iDestinationPosIndex;
  init(iElementId,originHierarchyLayer,destinationHierarchyLayer);
}","/** 
 * Constructor.
 * @param iElementId
 * @param originHierarchyLayer
 * @param destinationHierarchyLayer
 * @param iDestinationPosIndex
 */
public SlerpAction(int iElementId,RemoteHierarchyLevel originHierarchyLayer,RemoteHierarchyLevel destinationHierarchyLayer,int iDestinationPosIndex){
  this.iDestinationPosIndex=iDestinationPosIndex;
  init(iElementId,originHierarchyLayer,destinationHierarchyLayer);
}",0.9805825242718448
59011,"public void start(){
  iOriginPosIndex=originHierarchyLayer.getPositionIndexByElementId(iElementId);
  if (iDestinationPosIndex == -1) {
    this.iDestinationPosIndex=destinationHierarchyLayer.getNextPositionIndex();
  }
  originHierarchyLayer.removeElement(iElementId);
  if (destinationHierarchyLayer.getElementList().size() < destinationHierarchyLayer.getCapacity()) {
    destinationHierarchyLayer.addElement(iElementId);
  }
 else {
    destinationHierarchyLayer.replaceElement(iElementId,iDestinationPosIndex);
  }
}","public void start(){
  iOriginPosIndex=originHierarchyLayer.getPositionIndexByElementId(iElementId);
  if (iOriginPosIndex == -1) {
    throw new IllegalStateException(""String_Node_Str"" + iElementId + ""String_Node_Str""+ originHierarchyLayer);
  }
  if (iDestinationPosIndex == -1) {
    this.iDestinationPosIndex=destinationHierarchyLayer.getNextPositionIndex();
    if (iDestinationPosIndex == -1)     throw new IllegalStateException(""String_Node_Str"" + iElementId + ""String_Node_Str""+ destinationHierarchyLayer);
  }
  originHierarchyLayer.removeElement(iElementId);
  if (destinationHierarchyLayer.getElementList().size() < destinationHierarchyLayer.getCapacity()) {
    destinationHierarchyLayer.addElement(iElementId);
  }
 else {
    destinationHierarchyLayer.replaceElement(iElementId,iDestinationPosIndex);
  }
}",0.7630402384500745
59012,"/** 
 * Initialization for gl called by a managing view Has to call init internally!
 * @param gl
 */
public abstract void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLayer layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas);","/** 
 * Initialization for gl called by a managing view Has to call init internally!
 * @param gl
 */
public abstract void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas);",0.987460815047022
59013,"@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLayer layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas){
  bIsLocal=false;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  Collection<GLCaleydoCanvas> cc=generalManager.getViewGLCanvasManager().getAllGLCanvasUsers();
  for (  GLCaleydoCanvas c : cc) {
    c.addKeyListener(keyListener_);
  }
  init(gl);
  grid_.setGridSize(30,60);
  grid_.setGlyphPositions(EIconIDs.DISPLAY_SCATTERPLOT);
}","@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas){
  bIsLocal=false;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  Collection<GLCaleydoCanvas> cc=generalManager.getViewGLCanvasManager().getAllGLCanvasUsers();
  for (  GLCaleydoCanvas c : cc) {
    c.addKeyListener(keyListener_);
  }
  init(gl);
  grid_.setGridSize(30,60);
  grid_.setGlyphPositions(EIconIDs.DISPLAY_SCATTERPLOT);
}",0.99288256227758
59014,"@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLayer layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  iMaxCols=5;
  init(gl);
}","@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  iMaxCols=5;
  init(gl);
}",0.989010989010989
59015,"@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLayer layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas){
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}","@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteHierarchyLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering3D remoteRenderingGLCanvas){
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.9885714285714284
59016,"/** 
 * Constructor.
 */
public AGLConnectionLineRenderer(final RemoteHierarchyLayer underInteractionLayer,final RemoteHierarchyLayer stackLayer,final RemoteHierarchyLayer poolLayer){
  this.underInteractionLayer=underInteractionLayer;
  this.stackLayer=stackLayer;
  connectedElementRepManager=GeneralManager.get().getViewGLCanvasManager().getConnectedElementRepresentationManager();
  hashViewToPointLists=new HashMap<Integer,ArrayList<ArrayList<Vec3f>>>();
}","/** 
 * Constructor.
 */
public AGLConnectionLineRenderer(final RemoteHierarchyLevel underInteractionLayer,final RemoteHierarchyLevel stackLayer,final RemoteHierarchyLevel poolLayer){
  this.underInteractionLayer=underInteractionLayer;
  this.stackLayer=stackLayer;
  connectedElementRepManager=GeneralManager.get().getViewGLCanvasManager().getConnectedElementRepresentationManager();
  hashViewToPointLists=new HashMap<Integer,ArrayList<ArrayList<Vec3f>>>();
}",0.9739696312364424
59017,"/** 
 * <p> Merge an external selection delta into the local selection, and return a possibly converted selection </p> <p> This method takes into account data mapping, when mapping types are set </p> <p> When an element in the selectionDelta is not contained in the selection manager it is added and then moved to the appropriate type </p> <p> If a virtual array is set, the virtual array is also modified if necessary. This is the case when new element which are not contained in the virtual array are added or when elements are removed. </p>
 * @param selectionDelta the selection delta
 * @return a ISelectionDelta that contains the internal ID of the manager asits primary ID
 */
public ISelectionDelta setDelta(ISelectionDelta selectionDelta){
  if (externalToInternalMapping != null) {
    ISelectionDelta externalSelectionDelta=selectionDelta;
    selectionDelta=new SelectionDelta(internalIDType);
    for (    SelectionItem item : externalSelectionDelta) {
      Integer iInternalID=GeneralManager.get().getGenomeIdManager().getID(externalToInternalMapping,item.getSelectionID());
      if (iInternalID == null || iInternalID == -1) {
        GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"" + item.getSelectionID());
        continue;
      }
      if (!checkStatus(iInternalID)) {
        if (item.getSelectionType() == ESelectionType.ADD) {
          initialAdd(iInternalID);
          if (virtualArray != null)           virtualArray.add(iInternalID);
        }
      }
 else {
        if (item.getSelectionType() == ESelectionType.REMOVE && virtualArray != null)         virtualArray.removeByElement(iInternalID);
      }
      if (item.getInternalID() != -1 && item.getInternalID() != iInternalID)       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getInternalID());
 else       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getSelectionID());
    }
  }
  bIsDeltaWritingEnabled=false;
  for (  SelectionItem selection : selectionDelta) {
    ESelectionType type=selection.getSelectionType();
    if (!alSelectionTypes.contains(type))     continue;
    addToType(type,selection.getSelectionID());
  }
  bIsDeltaWritingEnabled=true;
  return selectionDelta;
}","/** 
 * <p> Merge an external selection delta into the local selection, and return a possibly converted selection </p> <p> This method takes into account data mapping, when mapping types are set </p> <p> When an element in the selectionDelta is not contained in the selection manager it is added and then moved to the appropriate type </p> <p> If a virtual array is set, the virtual array is also modified if necessary. This is the case when new element which are not contained in the virtual array are added or when elements are removed. </p>
 * @param selectionDelta the selection delta
 * @return a ISelectionDelta that contains the internal ID of the manager asits primary ID
 */
public ISelectionDelta setDelta(ISelectionDelta selectionDelta){
  if (externalToInternalMapping != null) {
    ISelectionDelta externalSelectionDelta=selectionDelta;
    selectionDelta=new SelectionDelta(internalIDType);
    for (    SelectionItem item : externalSelectionDelta) {
      Integer iInternalID=GeneralManager.get().getGenomeIdManager().getID(externalToInternalMapping,item.getSelectionID());
      if (iInternalID == null || iInternalID == -1) {
        GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"" + item.getSelectionID());
        continue;
      }
      if (!checkStatus(iInternalID)) {
        if (item.getSelectionType() == ESelectionType.ADD) {
          initialAdd(iInternalID);
          if (virtualArray != null)           virtualArray.add(iInternalID);
        }
        continue;
      }
 else {
        if (item.getSelectionType() == ESelectionType.REMOVE && virtualArray != null)         virtualArray.removeByElement(iInternalID);
      }
      if (item.getInternalID() != -1 && item.getInternalID() != iInternalID)       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getInternalID());
 else       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getSelectionID());
    }
  }
  bIsDeltaWritingEnabled=false;
  for (  SelectionItem selection : selectionDelta) {
    ESelectionType type=selection.getSelectionType();
    if (!alSelectionTypes.contains(type))     continue;
    addToType(type,selection.getSelectionID());
  }
  bIsDeltaWritingEnabled=true;
  return selectionDelta;
}",0.9959982214317474
59018,"@Override public void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive)   handleDragging(gl);
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
}","@Override public void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
}",0.9087301587301588
59019,"@Override public void startAnimator(){
  fpsAnimator.start();
}","@Override public void startAnimator(){
  for (  GLCaleydoCanvas glCanvas : hashGLCanvasID2GLCanvas.values()) {
    fpsAnimator.add(glCanvas);
  }
  fpsAnimator.start();
}",0.5407725321888412
59020,"@Override public boolean registerGLCanvas(final GLCaleydoCanvas glCanvas){
  int iGLCanvasID=glCanvas.getID();
  if (hashGLCanvasID2GLCanvas.containsKey(iGLCanvasID)) {
    generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str"");
    return false;
  }
  hashGLCanvasID2GLCanvas.put(iGLCanvasID,glCanvas);
  fpsAnimator.add(glCanvas);
  return true;
}","@Override public boolean registerGLCanvas(final GLCaleydoCanvas glCanvas){
  int iGLCanvasID=glCanvas.getID();
  if (hashGLCanvasID2GLCanvas.containsKey(iGLCanvasID)) {
    generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str"");
    return false;
  }
  hashGLCanvasID2GLCanvas.put(iGLCanvasID,glCanvas);
  return true;
}",0.96158940397351
59021,"private void initializeContainedViews(final GL gl){
  if (iAlContainedViewIDs == null)   return;
  for (  int iContainedViewID : iAlContainedViewIDs) {
    AGLEventListener tmpGLEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iContainedViewID);
    if (tmpGLEventListener == this || tmpGLEventListener instanceof GLPathway) {
      continue;
    }
    int iViewID=(tmpGLEventListener).getID();
    if (underInteractionLayer.containsElement(-1)) {
      underInteractionLayer.addElement(iViewID);
      underInteractionLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.MEDIUM);
      generalManager.getGUIBridge().setActiveGLSubView(this,tmpGLEventListener);
    }
 else     if (stackLayer.containsElement(-1)) {
      stackLayer.addElement(iViewID);
      stackLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.LOW);
    }
 else     if (poolLayer.containsElement(-1)) {
      poolLayer.addElement(iViewID);
      poolLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.setDetailLevel(EDetailLevel.VERY_LOW);
    }
    pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID);
    ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
    arMediatorIDs.add(iViewID);
    generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,MediatorType.SELECTION_MEDIATOR,MediatorUpdateType.MEDIATOR_DEFAULT);
  }
}","private void initializeContainedViews(final GL gl){
  for (  int iContainedViewID : iAlContainedViewIDs) {
    AGLEventListener tmpGLEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iContainedViewID);
    if (tmpGLEventListener == this || tmpGLEventListener instanceof GLPathway) {
      continue;
    }
    int iViewID=(tmpGLEventListener).getID();
    if (underInteractionLayer.containsElement(-1)) {
      underInteractionLayer.addElement(iViewID);
      underInteractionLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.MEDIUM);
      generalManager.getGUIBridge().setActiveGLSubView(this,tmpGLEventListener);
    }
 else     if (stackLayer.containsElement(-1)) {
      stackLayer.addElement(iViewID);
      stackLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.LOW);
    }
 else     if (poolLayer.containsElement(-1)) {
      poolLayer.addElement(iViewID);
      poolLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.setDetailLevel(EDetailLevel.VERY_LOW);
    }
    pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID);
    ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
    arMediatorIDs.add(iViewID);
    generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,MediatorType.SELECTION_MEDIATOR,MediatorUpdateType.MEDIATOR_DEFAULT);
  }
}",0.988552531162554
59022,"/** 
 * Constructor
 * @param builder the builder
 */
private GenericSelectionManager(Builder builder){
  this.eNormalType=builder.normalType;
  this.externalToInternalMapping=builder.externalToInternalMapping;
  this.internalToExternalMapping=builder.internalToExternalMapping;
  this.internalIDType=builder.internalIDType;
  this.externalIDType=builder.externalIDType;
  if (builder.alSelectionTypes == null) {
    alSelectionTypes=new ArrayList<ESelectionType>();
    for (    ESelectionType selectionType : ESelectionType.values()) {
      alSelectionTypes.add(selectionType);
    }
  }
  hashSelectionTypes=new EnumMap<ESelectionType,HashMap<Integer,Boolean>>(ESelectionType.class);
  selectionDelta=new SelectionDelta(internalIDType);
  for (  ESelectionType eType : alSelectionTypes) {
    hashSelectionTypes.put(eType,new HashMap<Integer,Boolean>());
  }
}","/** 
 * Constructor
 * @param builder the builder
 */
private GenericSelectionManager(Builder builder){
  this.eNormalType=builder.normalType;
  this.externalToInternalMapping=builder.externalToInternalMapping;
  this.internalToExternalMapping=builder.internalToExternalMapping;
  this.internalIDType=builder.internalIDType;
  this.externalIDType=builder.externalIDType;
  if (builder.alSelectionTypes == null) {
    alSelectionTypes=new ArrayList<ESelectionType>();
    for (    ESelectionType selectionType : ESelectionType.values()) {
      if (selectionType != ESelectionType.ADD)       alSelectionTypes.add(selectionType);
    }
  }
  hashSelectionTypes=new EnumMap<ESelectionType,HashMap<Integer,Boolean>>(ESelectionType.class);
  selectionDelta=new SelectionDelta(internalIDType);
  for (  ESelectionType eType : alSelectionTypes) {
    hashSelectionTypes.put(eType,new HashMap<Integer,Boolean>());
  }
}",0.9735211267605632
59023,"@Override public void handleUpdate(IUniqueObject eventTrigger,ISelectionDelta selectionDelta){
  if (selectionDelta.getIDType() != EIDType.DAVID)   return;
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + eventTrigger.getClass().getSimpleName() + ""String_Node_Str""+ this.getClass().getName());
  contentSelectionManager.clearSelections();
  ISelectionDelta internalDelta=contentSelectionManager.setDelta(selectionDelta);
  handleConnectedElementRep(internalDelta);
  checkUnselection();
  setDisplayListDirty();
}","@Override public void handleUpdate(IUniqueObject eventTrigger,ISelectionDelta selectionDelta){
  if (selectionDelta.getIDType() != EIDType.DAVID)   return;
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + eventTrigger.getClass().getSimpleName() + ""String_Node_Str""+ this.getClass().getName());
  contentSelectionManager.clearSelections();
  ISelectionDelta internalDelta=contentSelectionManager.setDelta(selectionDelta);
  initForAddedElements();
  handleConnectedElementRep(internalDelta);
  checkUnselection();
  setDisplayListDirty();
}",0.9759704251386322
59024,"/** 
 * Constructor.
 */
public CmdViewCreateDataEntitySearcher(final ECommandType cmdType){
  super(cmdType);
  iAlViewReceiverID=new ArrayList<Integer>();
}","/** 
 * Constructor.
 */
public CmdViewCreateDataEntitySearcher(final ECommandType cmdType){
  super(cmdType);
  iAlViewReceiverIDs=new ArrayList<Integer>();
}",0.996845425867508
59025,"@Override public void setParameterHandler(final IParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
  StringTokenizer receiverToken=new StringTokenizer(sDetail,IGeneralManager.sDelimiter_Parser_DataItems);
  int iReceiverID=-1;
  while (receiverToken.hasMoreTokens()) {
    iReceiverID=StringConversionTool.convertStringToInt(receiverToken.nextToken(),-1);
    if (iReceiverID != -1)     iAlViewReceiverID.add(generalManager.getIDManager().getInternalFromExternalID(iReceiverID));
  }
}","@Override public void setParameterHandler(final IParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
  StringTokenizer receiverToken=new StringTokenizer(sDetail,IGeneralManager.sDelimiter_Parser_DataItems);
  int iReceiverID=-1;
  while (receiverToken.hasMoreTokens()) {
    iReceiverID=StringConversionTool.convertStringToInt(receiverToken.nextToken(),-1);
    if (iReceiverID != -1)     iAlViewReceiverIDs.add(generalManager.getIDManager().getInternalFromExternalID(iReceiverID));
  }
}",0.9990356798457088
59026,"@Override public void doCommand() throws CaleydoRuntimeException {
  IViewManager viewManager=generalManager.getViewGLCanvasManager();
  DataEntitySearcherViewRep dataEntitySearcherView=(DataEntitySearcherViewRep)viewManager.createView(EManagedObjectType.VIEW_SWT_DATA_ENTITY_SEARCHER,-1,sLabel);
  viewManager.registerItem(dataEntitySearcherView);
  viewManager.addViewRep(dataEntitySearcherView);
  dataEntitySearcherView.setAttributes(iAlViewReceiverID);
  commandManager.runDoCommand(this);
}","@Override public void doCommand() throws CaleydoRuntimeException {
  IViewManager viewManager=generalManager.getViewGLCanvasManager();
  DataEntitySearcherViewRep dataEntitySearcherView=(DataEntitySearcherViewRep)viewManager.createView(EManagedObjectType.VIEW_SWT_DATA_ENTITY_SEARCHER,-1,sLabel);
  viewManager.registerItem(dataEntitySearcherView);
  viewManager.addViewRep(dataEntitySearcherView);
  dataEntitySearcherView.setAttributes(iAlViewReceiverIDs);
  commandManager.runDoCommand(this);
}",0.998992950654582
59027,"@Override public void startAnimator(){
  for (  GLCaleydoCanvas glCanvas : hashGLCanvasID2GLCanvas.values()) {
    fpsAnimator.add(glCanvas);
  }
  fpsAnimator.start();
}","@Override public void startAnimator(){
  fpsAnimator.start();
}",0.5407725321888412
59028,"@Override public boolean registerGLCanvas(final GLCaleydoCanvas glCanvas){
  int iGLCanvasID=glCanvas.getID();
  if (hashGLCanvasID2GLCanvas.containsKey(iGLCanvasID)) {
    generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str"");
    return false;
  }
  hashGLCanvasID2GLCanvas.put(iGLCanvasID,glCanvas);
  return true;
}","@Override public boolean registerGLCanvas(final GLCaleydoCanvas glCanvas){
  int iGLCanvasID=glCanvas.getID();
  if (hashGLCanvasID2GLCanvas.containsKey(iGLCanvasID)) {
    generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str"");
    return false;
  }
  hashGLCanvasID2GLCanvas.put(iGLCanvasID,glCanvas);
  fpsAnimator.add(glCanvas);
  return true;
}",0.96158940397351
59029,"private void initializeContainedViews(final GL gl){
  for (  int iContainedViewID : iAlContainedViewIDs) {
    AGLEventListener tmpGLEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iContainedViewID);
    if (tmpGLEventListener == this || tmpGLEventListener instanceof GLPathway) {
      continue;
    }
    int iViewID=(tmpGLEventListener).getID();
    if (underInteractionLayer.containsElement(-1)) {
      underInteractionLayer.addElement(iViewID);
      underInteractionLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.MEDIUM);
      generalManager.getGUIBridge().setActiveGLSubView(this,tmpGLEventListener);
    }
 else     if (stackLayer.containsElement(-1)) {
      stackLayer.addElement(iViewID);
      stackLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.LOW);
    }
 else     if (poolLayer.containsElement(-1)) {
      poolLayer.addElement(iViewID);
      poolLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.setDetailLevel(EDetailLevel.VERY_LOW);
    }
    pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID);
    ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
    arMediatorIDs.add(iViewID);
    generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,MediatorType.SELECTION_MEDIATOR,MediatorUpdateType.MEDIATOR_DEFAULT);
  }
}","private void initializeContainedViews(final GL gl){
  if (iAlContainedViewIDs == null)   return;
  for (  int iContainedViewID : iAlContainedViewIDs) {
    AGLEventListener tmpGLEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iContainedViewID);
    if (tmpGLEventListener == this || tmpGLEventListener instanceof GLPathway) {
      continue;
    }
    int iViewID=(tmpGLEventListener).getID();
    if (underInteractionLayer.containsElement(-1)) {
      underInteractionLayer.addElement(iViewID);
      underInteractionLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.MEDIUM);
      generalManager.getGUIBridge().setActiveGLSubView(this,tmpGLEventListener);
    }
 else     if (stackLayer.containsElement(-1)) {
      stackLayer.addElement(iViewID);
      stackLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.LOW);
    }
 else     if (poolLayer.containsElement(-1)) {
      poolLayer.addElement(iViewID);
      poolLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.setDetailLevel(EDetailLevel.VERY_LOW);
    }
    pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID);
    ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
    arMediatorIDs.add(iViewID);
    generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,MediatorType.SELECTION_MEDIATOR,MediatorUpdateType.MEDIATOR_DEFAULT);
  }
}",0.988552531162554
59030,"@Override public void setActiveGLSubView(AGLEventListener parentGLEventListener,AGLEventListener subGLEventListener){
  AGLViewPart rcpView;
  rcpView=(GLRemoteRenderingView)PlatformUI.getWorkbench().getWorkbenchWindows()[0].getActivePage().getActivePart();
  final IToolBarManager toolBarManager=rcpView.getViewSite().getActionBars().getToolBarManager();
  toolBarManager.removeAll();
  GLRemoteRenderingView.createToolBarItems(parentGLEventListener.getID());
  GLRemoteRenderingView.fillToolBar(toolBarManager);
  toolBarManager.add(new Separator());
  if (parentGLEventListener instanceof GLRemoteRendering) {
    if (subGLEventListener instanceof GLPathway) {
      GLPathwayView.createToolBarItems(subGLEventListener.getID());
      GLPathwayView.fillToolBar(toolBarManager);
    }
 else     if (subGLEventListener instanceof GLHeatMap) {
      GLHeatMapView.createToolBarItems(subGLEventListener.getID());
      GLHeatMapView.fillToolBar(toolBarManager);
    }
 else     if (subGLEventListener instanceof GLParallelCoordinates) {
      GLParCoordsView.createToolBarItems(subGLEventListener.getID());
      GLParCoordsView.fillToolBar(toolBarManager);
    }
  }
  rcpView.getSWTComposite().getDisplay().asyncExec(new Runnable(){
    public void run(){
      toolBarManager.update(true);
    }
  }
);
}","@Override public void setActiveGLSubView(AGLEventListener parentGLEventListener,AGLEventListener subGLEventListener){
  for (  IWorkbenchPage rcpView : PlatformUI.getWorkbench().getWorkbenchWindows()[0].getPages()) {
    if (!(rcpView instanceof GLRemoteRenderingView))     continue;
    GLRemoteRenderingView remoteRenderingRCPView=(GLRemoteRenderingView)rcpView;
    final IToolBarManager toolBarManager=remoteRenderingRCPView.getViewSite().getActionBars().getToolBarManager();
    toolBarManager.removeAll();
    GLRemoteRenderingView.createToolBarItems(parentGLEventListener.getID());
    GLRemoteRenderingView.fillToolBar(toolBarManager);
    toolBarManager.add(new Separator());
    if (parentGLEventListener instanceof GLRemoteRendering) {
      if (subGLEventListener instanceof GLPathway) {
        GLPathwayView.createToolBarItems(subGLEventListener.getID());
        GLPathwayView.fillToolBar(toolBarManager);
      }
 else       if (subGLEventListener instanceof GLHeatMap) {
        GLHeatMapView.createToolBarItems(subGLEventListener.getID());
        GLHeatMapView.fillToolBar(toolBarManager);
      }
 else       if (subGLEventListener instanceof GLParallelCoordinates) {
        GLParCoordsView.createToolBarItems(subGLEventListener.getID());
        GLParCoordsView.fillToolBar(toolBarManager);
      }
    }
    remoteRenderingRCPView.getSWTComposite().getDisplay().asyncExec(new Runnable(){
      public void run(){
        toolBarManager.update(true);
      }
    }
);
  }
}",0.8811138878971796
59031,"/** 
 * Start Caleydo core.
 */
public synchronized void start(){
  try {
    parseXmlConfigFile(sFileName);
    if (generalManager.isStandalone()) {
      generalManager.getViewGLCanvasManager().startAnimator();
      swtGUIManager.runApplication();
    }
  }
 catch (  CaleydoRuntimeException gre) {
    generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"" + gre.toString());
    generalManager.getGUIBridge().closeApplication();
  }
}","/** 
 * Start Caleydo core.
 */
public synchronized void start(){
  parseXmlConfigFile(sFileName);
  if (generalManager.isStandalone()) {
    generalManager.getViewGLCanvasManager().startAnimator();
    swtGUIManager.runApplication();
  }
}",0.6997084548104956
59032,"public void initData(){
  set=null;
  for (  ISet currentSet : alSets) {
    if (currentSet.getSetType() == ESetType.GENE_EXPRESSION_DATA)     set=currentSet;
  }
  if (!mapVAIDs.isEmpty()) {
    for (    EStorageBasedVAType eSelectionType : EStorageBasedVAType.values()) {
      if (mapVAIDs.containsKey(eSelectionType))       set.removeVirtualArray(mapVAIDs.get(eSelectionType));
    }
    iContentVAID=-1;
    iStorageVAID=-1;
    mapVAIDs.clear();
  }
  if (set == null) {
    mapVAIDs.clear();
    contentSelectionManager.resetSelectionManager();
    storageSelectionManager.resetSelectionManager();
    connectedElementRepresentationManager.clear();
    return;
  }
  ArrayList<Integer> alTempList=new ArrayList<Integer>();
  int iVAID=set.createStorageVA(alTempList);
  mapVAIDs.put(EStorageBasedVAType.EXTERNAL_SELECTION,iVAID);
  alTempList=new ArrayList<Integer>();
  for (int iCount=0; iCount < set.size(); iCount++) {
    alTempList.add(iCount);
  }
  iVAID=set.createSetVA(alTempList);
  mapVAIDs.put(EStorageBasedVAType.STORAGE_SELECTION,iVAID);
  initLists();
}","public void initData(){
  set=null;
  for (  ISet currentSet : alSets) {
    if (currentSet.getSetType() == ESetType.GENE_EXPRESSION_DATA)     set=currentSet;
  }
  if (!mapVAIDs.isEmpty()) {
    iContentVAID=-1;
    iStorageVAID=-1;
    mapVAIDs.clear();
  }
  if (set == null) {
    mapVAIDs.clear();
    contentSelectionManager.resetSelectionManager();
    storageSelectionManager.resetSelectionManager();
    connectedElementRepresentationManager.clear();
    return;
  }
  ArrayList<Integer> alTempList=new ArrayList<Integer>();
  int iVAID=set.createStorageVA(alTempList);
  mapVAIDs.put(EStorageBasedVAType.EXTERNAL_SELECTION,iVAID);
  alTempList=new ArrayList<Integer>();
  for (int iCount=0; iCount < set.size(); iCount++) {
    alTempList.add(iCount);
  }
  iVAID=set.createSetVA(alTempList);
  mapVAIDs.put(EStorageBasedVAType.STORAGE_SELECTION,iVAID);
  initLists();
}",0.8997955010224948
59033,"private void renderHeatMap(final GL gl){
  renderStyle.updateFieldSizes();
  float fXPosition=0;
  float fYPosition=0;
  Vec2f vecFieldWidthAndHeight=null;
  int iCount=0;
  for (  Integer iContentIndex : set.getVA(iContentVAID)) {
    vecFieldWidthAndHeight=renderStyle.getFieldWidthAndHeight(iCount++);
    fYPosition=0;
    for (    Integer iStorageIndex : set.getVA(iStorageVAID)) {
      renderElement(gl,iStorageIndex,iContentIndex,fXPosition,fYPosition,vecFieldWidthAndHeight);
      fYPosition+=vecFieldWidthAndHeight.y();
    }
    float fFontScaling=0;
    float fColumnDegrees=0;
    float fLineDegrees=0;
    if (bRenderStorageHorizontally) {
      fColumnDegrees=0;
      fLineDegrees=25;
    }
 else {
      fColumnDegrees=60;
      fLineDegrees=90;
    }
    if (vecFieldWidthAndHeight.x() > 0.08f) {
      boolean bRenderShortName=false;
      if (vecFieldWidthAndHeight.x() < 0.2f) {
        fFontScaling=renderStyle.getSmallFontScalingFactor();
      }
 else {
        bRenderShortName=true;
        fFontScaling=renderStyle.getHeadingFontScalingFactor();
      }
      if (detailLevel == EDetailLevel.HIGH) {
        String sContent=getRefSeqFromStorageIndex(iContentIndex);
        if (sContent == null)         sContent=""String_Node_Str"";
        renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 2.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        if (bRenderShortName) {
          sContent=getShortNameFromDavid(iContentIndex);
          if (sContent == null)           sContent=""String_Node_Str"";
          renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 4.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        }
      }
    }
    renderStyle.setXDistanceAt(set.getVA(iContentVAID).indexOf(iContentIndex),fXPosition);
    fXPosition+=vecFieldWidthAndHeight.x();
    if (detailLevel == EDetailLevel.HIGH) {
      if (iCount == set.getVA(iContentVAID).size()) {
        fYPosition=0;
        for (        Integer iStorageIndex : set.getVA(iStorageVAID)) {
          renderCaption(gl,set.get(iStorageIndex).getLabel(),fXPosition + 0.1f,fYPosition + vecFieldWidthAndHeight.y() / 2,fColumnDegrees,renderStyle.getSmallFontScalingFactor());
          fYPosition+=vecFieldWidthAndHeight.y();
        }
      }
    }
  }
}","private void renderHeatMap(final GL gl){
  renderStyle.updateFieldSizes();
  float fXPosition=0;
  float fYPosition=0;
  Vec2f vecFieldWidthAndHeight=null;
  int iCount=0;
  for (  Integer iContentIndex : set.getVA(iContentVAID)) {
    vecFieldWidthAndHeight=renderStyle.getFieldWidthAndHeight(iCount++);
    fYPosition=0;
    for (    Integer iStorageIndex : set.getVA(iStorageVAID)) {
      renderElement(gl,iStorageIndex,iContentIndex,fXPosition,fYPosition,vecFieldWidthAndHeight);
      fYPosition+=vecFieldWidthAndHeight.y();
    }
    float fFontScaling=0;
    float fColumnDegrees=0;
    float fLineDegrees=0;
    if (bRenderStorageHorizontally) {
      fColumnDegrees=0;
      fLineDegrees=25;
    }
 else {
      fColumnDegrees=60;
      fLineDegrees=90;
    }
    if (vecFieldWidthAndHeight.x() > 0.1f) {
      boolean bRenderShortName=false;
      if (vecFieldWidthAndHeight.x() < 0.2f) {
        fFontScaling=renderStyle.getSmallFontScalingFactor();
      }
 else {
        bRenderShortName=true;
        fFontScaling=renderStyle.getHeadingFontScalingFactor();
      }
      if (detailLevel == EDetailLevel.HIGH) {
        String sContent=getRefSeqFromStorageIndex(iContentIndex);
        if (sContent == null)         sContent=""String_Node_Str"";
        renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 2.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        if (bRenderShortName) {
          sContent=getShortNameFromDavid(iContentIndex);
          if (sContent == null)           sContent=""String_Node_Str"";
          renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 4.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        }
      }
    }
    renderStyle.setXDistanceAt(set.getVA(iContentVAID).indexOf(iContentIndex),fXPosition);
    fXPosition+=vecFieldWidthAndHeight.x();
    if (detailLevel == EDetailLevel.HIGH) {
      if (iCount == set.getVA(iContentVAID).size()) {
        fYPosition=0;
        for (        Integer iStorageIndex : set.getVA(iStorageVAID)) {
          renderCaption(gl,set.get(iStorageIndex).getLabel(),fXPosition + 0.1f,fYPosition + vecFieldWidthAndHeight.y() / 2,fColumnDegrees,renderStyle.getSmallFontScalingFactor());
          fYPosition+=vecFieldWidthAndHeight.y();
        }
      }
    }
  }
}",0.9993456924754636
59034,"@Override protected void initLists(){
  if (bRenderOnlyContext)   iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION))     initCompleteList();
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  contentSelectionManager.resetSelectionManager();
  storageSelectionManager.resetSelectionManager();
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  if (renderStyle != null) {
    renderStyle.setActiveVirtualArray(iContentVAID);
  }
  int iNumberOfColumns=set.getVA(iContentVAID).size();
  int iNumberOfRows=set.getVA(iStorageVAID).size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(set.getVA(iStorageVAID).get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(set.getVA(iContentVAID).get(iColumnCount));
  }
  renderStyle=new HeatMapRenderStyle(viewFrustum,contentSelectionManager,set,iContentVAID,iStorageVAID,set.getVA(iStorageVAID).size(),bRenderStorageHorizontally);
  vecTranslation=new Vec3f(0,renderStyle.getYCenter() * 2,0);
}","@Override protected void initLists(){
  if (bRenderOnlyContext)   iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION))     initCompleteList();
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  contentSelectionManager.resetSelectionManager();
  storageSelectionManager.resetSelectionManager();
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  if (renderStyle != null) {
    renderStyle.setActiveVirtualArray(iContentVAID);
  }
  int iNumberOfColumns=set.getVA(iContentVAID).size();
  int iNumberOfRows=set.getVA(iStorageVAID).size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(set.getVA(iStorageVAID).get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(set.getVA(iContentVAID).get(iColumnCount));
  }
  renderStyle=new HeatMapRenderStyle(viewFrustum,contentSelectionManager,set,iContentVAID,iStorageVAID,set.getVA(iStorageVAID).size(),bRenderStorageHorizontally);
  renderStyle.setDetailLevel(detailLevel);
  vecTranslation=new Vec3f(0,renderStyle.getYCenter() * 2,0);
}",0.9833912707609116
59035,"/** 
 * Reset all selections and deselections
 */
@Override public void resetSelections(){
  for (int iCount=0; iCount < fArGateTipHeight.length; iCount++) {
    fArGateTipHeight[iCount]=0;
    fArGateBottomHeight[iCount]=renderStyle.getGateYOffset() - renderStyle.getGateTipHeight();
  }
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  bIsAngularBrushingActive=false;
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    alCurrent.clear();
  }
  for (  ArrayList<Integer> alCurrent : alIsGateBlocking) {
    alCurrent.clear();
  }
  setDisplayListDirty();
}","/** 
 * Reset all selections and deselections
 */
@Override public void resetSelections(){
  for (int iCount=0; iCount < fArGateTipHeight.length; iCount++) {
    fArGateTipHeight[iCount]=0;
    fArGateBottomHeight[iCount]=renderStyle.getGateYOffset() - renderStyle.getGateTipHeight();
  }
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  bIsAngularBrushingActive=false;
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    alCurrent.clear();
  }
  for (  ArrayList<Integer> alCurrent : alIsGateBlocking) {
    alCurrent.clear();
  }
  setDisplayListDirty();
  connectedElementRepresentationManager.clear();
}",0.961628817541112
59036,"public static void startCaleydoCore(){
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    if (bPathwayViewerMode)     sCaleydoXMLfile=BOOTSTRAP_FILE_PATHWAY_VIEWER_MODE;
 else     sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
    caleydoCore.setXmlFileName(sCaleydoXMLfile);
    caleydoCore.start();
    Display display=PlatformUI.createDisplay();
    Shell shell=new Shell(display);
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (WizardDialog.CANCEL == projectWizardDialog.open()) {
      bDoExit=true;
    }
    shell.dispose();
  }
 else {
    caleydoCore.setXmlFileName(sCaleydoXMLfile);
    caleydoCore.start();
  }
  if (!bDoExit) {
    new PathwayLoadingProgressIndicatorAction().run(null);
  }
  initializeColorMapping();
  openViewsInRCP();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  GeneralManager.get().getEventPublisher().registerReceiverToMediatorGroup(EMediatorType.SELECTION_MEDIATOR,InfoArea.getInfoArea());
  GeneralManager.get().getViewGLCanvasManager().startAnimator();
}","public static void startCaleydoCore(){
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    Display display=PlatformUI.createDisplay();
    Shell shell=new Shell(display);
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (WizardDialog.CANCEL == projectWizardDialog.open()) {
      bDoExit=true;
    }
switch (applicationMode) {
case PATHWAY_VIEWER:
      sCaleydoXMLfile=BOOTSTRAP_FILE_PATHWAY_VIEWER_MODE;
    break;
case SAMPLE_DATA:
  sCaleydoXMLfile=BOOTSTRAP_FILE_SAMPLE_DATA_MODE;
break;
default :
sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
}
caleydoCore.setXmlFileName(sCaleydoXMLfile);
caleydoCore.start();
if (applicationMode == EApplicationMode.STANDARD) {
WizardDialog dataImportWizard=new WizardDialog(shell,new DataImportWizard(shell));
if (WizardDialog.CANCEL == dataImportWizard.open()) {
bDoExit=true;
}
}
shell.dispose();
}
 else {
caleydoCore.setXmlFileName(sCaleydoXMLfile);
caleydoCore.start();
}
if (!bDoExit) {
new PathwayLoadingProgressIndicatorAction().run(null);
}
initializeColorMapping();
openViewsInRCP();
PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
GeneralManager.get().getEventPublisher().registerReceiverToMediatorGroup(EMediatorType.SELECTION_MEDIATOR,InfoArea.getInfoArea());
GeneralManager.get().getViewGLCanvasManager().startAnimator();
}",0.4244897959183673
59037,"private static void openViewsInRCP(){
  if (bPathwayViewerMode) {
    Iterator<EStartViewType> iterStartViewsType=alStartViews.iterator();
    EStartViewType type;
    while (iterStartViewsType.hasNext()) {
      type=iterStartViewsType.next();
      if (type != EStartViewType.REMOTE && type != EStartViewType.BROWSER) {
        iterStartViewsType.remove();
      }
    }
  }
  try {
    if (alStartViews.contains(EStartViewType.REMOTE)) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLRemoteRenderingView.ID);
      alStartViews.remove(EStartViewType.REMOTE);
    }
    for (    EStartViewType startViewsMode : alStartViews) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(startViewsMode.getRCPViewID());
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
}","private static void openViewsInRCP(){
  if (applicationMode == EApplicationMode.PATHWAY_VIEWER) {
    Iterator<EStartViewType> iterStartViewsType=alStartViews.iterator();
    EStartViewType type;
    while (iterStartViewsType.hasNext()) {
      type=iterStartViewsType.next();
      if (type != EStartViewType.REMOTE && type != EStartViewType.BROWSER) {
        iterStartViewsType.remove();
      }
    }
  }
  try {
    if (alStartViews.contains(EStartViewType.REMOTE)) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLRemoteRenderingView.ID);
      alStartViews.remove(EStartViewType.REMOTE);
    }
    for (    EStartViewType startViewsMode : alStartViews) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(startViewsMode.getRCPViewID());
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
}",0.9622425629290616
59038,"public void execute(){
  createData();
  setDataInViews();
  Application.bPathwayViewerMode=false;
}","public void execute(){
  createData();
  setDataInViews();
}",0.75
59039,"@Override protected final void fillToolBar(){
  if (Application.bPathwayViewerMode) {
    MessageBox alert=new MessageBox(new Shell(),SWT.OK);
    alert.setMessage(""String_Node_Str"");
    alert.open();
    dispose();
    return;
  }
  createGLCanvas();
  createGLEventListener(ECommandType.CREATE_GL_PARALLEL_COORDINATES_3D,glCanvas.getID());
  createToolBarItems(iGLEventListenerID);
  IToolBarManager toolBarManager=getViewSite().getActionBars().getToolBarManager();
  fillToolBar(toolBarManager);
}","@Override protected final void fillToolBar(){
  if (Application.applicationMode == EApplicationMode.PATHWAY_VIEWER) {
    MessageBox alert=new MessageBox(new Shell(),SWT.OK);
    alert.setMessage(""String_Node_Str"");
    alert.open();
    dispose();
    return;
  }
  createGLCanvas();
  createGLEventListener(ECommandType.CREATE_GL_PARALLEL_COORDINATES_3D,glCanvas.getID());
  createToolBarItems(iGLEventListenerID);
  IToolBarManager toolBarManager=getViewSite().getActionBars().getToolBarManager();
  fillToolBar(toolBarManager);
}",0.9381044487427466
59040,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  if (!Application.bPathwayViewerMode) {
    iAlContainedViewIDs.add(createGLEventListener(ECommandType.CREATE_GL_HEAT_MAP_3D,-1));
    iAlContainedViewIDs.add(createGLEventListener(ECommandType.CREATE_GL_PARALLEL_COORDINATES_3D,-1));
  }
  createGLEventListener(ECommandType.CREATE_GL_BUCKET_3D,glCanvas.getID());
  ArrayList<Integer> iAlReceiverIDs=new ArrayList<Integer>();
  iAlReceiverIDs.add(iGLEventListenerID);
  CmdViewCreateDataEntitySearcher cmd=(CmdViewCreateDataEntitySearcher)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_VIEW_DATA_ENTITY_SEARCHER);
  cmd.setAttributes(iAlReceiverIDs);
  cmd.doCommand();
  GLRemoteRendering glRemoteRenderedView=((GLRemoteRendering)GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iGLEventListenerID));
  glRemoteRenderedView.setInitialContainedViews(iAlContainedViewIDs);
  glRemoteRenderedView.enableBusyMode(false);
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  if (Application.applicationMode != EApplicationMode.PATHWAY_VIEWER) {
    iAlContainedViewIDs.add(createGLEventListener(ECommandType.CREATE_GL_HEAT_MAP_3D,-1));
    iAlContainedViewIDs.add(createGLEventListener(ECommandType.CREATE_GL_PARALLEL_COORDINATES_3D,-1));
  }
  createGLEventListener(ECommandType.CREATE_GL_BUCKET_3D,glCanvas.getID());
  ArrayList<Integer> iAlReceiverIDs=new ArrayList<Integer>();
  iAlReceiverIDs.add(iGLEventListenerID);
  CmdViewCreateDataEntitySearcher cmd=(CmdViewCreateDataEntitySearcher)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_VIEW_DATA_ENTITY_SEARCHER);
  cmd.setAttributes(iAlReceiverIDs);
  cmd.doCommand();
  GLRemoteRendering glRemoteRenderedView=((GLRemoteRendering)GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iGLEventListenerID));
  glRemoteRenderedView.setInitialContainedViews(iAlContainedViewIDs);
  glRemoteRenderedView.enableBusyMode(false);
}",0.9575988565983802
59041,"public static void startCaleydoCore(){
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    Display display=PlatformUI.createDisplay();
    Shell shell=new Shell(display);
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (WizardDialog.CANCEL == projectWizardDialog.open()) {
      bDoExit=true;
    }
switch (applicationMode) {
case PATHWAY_VIEWER:
      sCaleydoXMLfile=BOOTSTRAP_FILE_PATHWAY_VIEWER_MODE;
    break;
case SAMPLE_DATA:
  sCaleydoXMLfile=BOOTSTRAP_FILE_SAMPLE_DATA_MODE;
break;
default :
sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
}
caleydoCore.setXmlFileName(sCaleydoXMLfile);
caleydoCore.start();
if (applicationMode == EApplicationMode.STANDARD) {
WizardDialog dataImportWizard=new WizardDialog(shell,new DataImportWizard(shell));
if (WizardDialog.CANCEL == dataImportWizard.open()) {
bDoExit=true;
}
}
shell.dispose();
}
 else {
caleydoCore.setXmlFileName(sCaleydoXMLfile);
caleydoCore.start();
}
if (!bDoExit) {
new PathwayLoadingProgressIndicatorAction().run(null);
}
initializeColorMapping();
openViewsInRCP();
GeneralManager.get().getEventPublisher().registerReceiverToMediatorGroup(EMediatorType.SELECTION_MEDIATOR,InfoArea.getInfoArea());
}","public static void startCaleydoCore(){
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    Display display=PlatformUI.createDisplay();
    Shell shell=new Shell(display);
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (WizardDialog.CANCEL == projectWizardDialog.open()) {
      bDoExit=true;
      return;
    }
switch (applicationMode) {
case PATHWAY_VIEWER:
      sCaleydoXMLfile=BOOTSTRAP_FILE_PATHWAY_VIEWER_MODE;
    break;
case SAMPLE_DATA:
  sCaleydoXMLfile=BOOTSTRAP_FILE_SAMPLE_DATA_MODE;
break;
default :
sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
}
caleydoCore.setXmlFileName(sCaleydoXMLfile);
caleydoCore.start();
if (applicationMode == EApplicationMode.STANDARD) {
WizardDialog dataImportWizard=new WizardDialog(shell,new DataImportWizard(shell));
if (WizardDialog.CANCEL == dataImportWizard.open()) {
bDoExit=true;
}
}
shell.dispose();
}
 else {
caleydoCore.setXmlFileName(sCaleydoXMLfile);
caleydoCore.start();
}
if (!bDoExit) {
new PathwayLoadingProgressIndicatorAction().run(null);
}
initializeColorMapping();
openViewsInRCP();
GeneralManager.get().getEventPublisher().registerReceiverToMediatorGroup(EMediatorType.SELECTION_MEDIATOR,InfoArea.getInfoArea());
}",0.994341147938561
59042,"public boolean remove(KeyType key,ValueType value){
  Set<ValueType> hashTmp=super.get(key);
  if (hashTmp == null)   return false;
  return hashTmp.remove(value);
}","@Override public ValueType remove(Object arg0){
  Set<ValueType> tempSet=internalMap.remove(arg0);
  if (tempSet == null)   return null;
 else   return tempSet.iterator().next();
}",0.5681159420289855
59043,"public void put(KeyType key,ValueType value){
  Set<ValueType> hashTmp=super.get(key);
  if (hashTmp == null) {
    hashTmp=new HashSet<ValueType>();
  }
  hashTmp.add(value);
  super.put(key,hashTmp);
}","/** 
 * Behaves similar to a classical hashMap but does not replace the key, it adds it instead. 
 * @return always null
 */
@Override public ValueType put(KeyType key,ValueType value){
  Set<ValueType> tmpSet=internalMap.get(key);
  if (tmpSet == null) {
    tmpSet=new HashSet<ValueType>();
  }
  tmpSet.add(value);
  internalMap.put(key,tmpSet);
  return null;
}",0.5246478873239436
59044,"/** 
 * <p> Merge an external selection delta into the local selection, and return a possibly converted selection </p> <p> This method takes into account data mapping, when mapping types are set </p> <p> When an element in the selectionDelta is not contained in the selection manager it is added and then moved to the appropriate type </p> <p> If a virtual array is set, the virtual array is also modified if necessary. This is the case when new element which are not contained in the virtual array are added or when elements are removed. </p>
 * @param selectionDelta the selection delta
 * @return a ISelectionDelta that contains the internal ID of the manager asits primary ID
 */
public ISelectionDelta setDelta(ISelectionDelta selectionDelta){
  if (externalToInternalMapping != null) {
    ISelectionDelta externalSelectionDelta=selectionDelta;
    selectionDelta=new SelectionDelta(internalIDType);
    for (    SelectionItem item : externalSelectionDelta) {
      Integer iInternalID=GeneralManager.get().getGenomeIdManager().getID(externalToInternalMapping,item.getSelectionID());
      if (iInternalID == null || iInternalID == -1) {
        GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"" + item.getSelectionID());
        continue;
      }
      if (!checkStatus(iInternalID)) {
        if (item.getSelectionType() != ESelectionType.REMOVE) {
          initialAdd(iInternalID);
          if (virtualArray != null)           virtualArray.add(iInternalID);
        }
      }
 else {
        if (item.getSelectionType() == ESelectionType.REMOVE && virtualArray != null)         virtualArray.removeByElement(iInternalID);
      }
      if (item.getInternalID() != -1 && item.getInternalID() != iInternalID)       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getInternalID());
 else       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getSelectionID());
    }
  }
  bIsDeltaWritingEnabled=false;
  for (  SelectionItem selection : selectionDelta) {
    ESelectionType type=selection.getSelectionType();
    if (!alSelectionTypes.contains(type))     continue;
    addToType(type,selection.getSelectionID());
  }
  bIsDeltaWritingEnabled=true;
  return selectionDelta;
}","/** 
 * <p> Merge an external selection delta into the local selection, and return a possibly converted selection </p> <p> This method takes into account data mapping, when mapping types are set </p> <p> When an element in the selectionDelta is not contained in the selection manager it is added and then moved to the appropriate type </p> <p> If a virtual array is set, the virtual array is also modified if necessary. This is the case when new element which are not contained in the virtual array are added or when elements are removed. </p>
 * @param selectionDelta the selection delta
 * @return a ISelectionDelta that contains the internal ID of the manager asits primary ID
 */
public ISelectionDelta setDelta(ISelectionDelta selectionDelta){
  if (externalToInternalMapping != null) {
    ISelectionDelta externalSelectionDelta=selectionDelta;
    selectionDelta=new SelectionDelta(internalIDType);
    for (    SelectionItem item : externalSelectionDelta) {
      Integer iInternalID=GeneralManager.get().getGenomeIdManager().getID(externalToInternalMapping,item.getSelectionID());
      if (iInternalID == null || iInternalID == -1) {
        GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"" + item.getSelectionID());
        continue;
      }
      if (!checkStatus(iInternalID)) {
        if (item.getSelectionType() == ESelectionType.ADD) {
          initialAdd(iInternalID);
          if (virtualArray != null)           virtualArray.add(iInternalID);
        }
      }
 else {
        if (item.getSelectionType() == ESelectionType.REMOVE && virtualArray != null)         virtualArray.removeByElement(iInternalID);
      }
      if (item.getInternalID() != -1 && item.getInternalID() != iInternalID)       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getInternalID());
 else       selectionDelta.addSelection(iInternalID,item.getSelectionType(),item.getSelectionID());
    }
  }
  bIsDeltaWritingEnabled=false;
  for (  SelectionItem selection : selectionDelta) {
    ESelectionType type=selection.getSelectionType();
    if (!alSelectionTypes.contains(type))     continue;
    addToType(type,selection.getSelectionID());
  }
  bIsDeltaWritingEnabled=true;
  return selectionDelta;
}",0.8855677002007584
59045,"public boolean checkStatus(int iElementID){
  for (  ESelectionType type : alSelectionTypes) {
    if (checkStatus(type,iElementID))     return true;
  }
  return false;
}","/** 
 * Check whether an element is in any selection
 * @param iElementID the element id 
 * @return true if the element exists in the selection manager, else false
 */
public boolean checkStatus(int iElementID){
  for (  ESelectionType type : alSelectionTypes) {
    if (checkStatus(type,iElementID))     return true;
  }
  return false;
}",0.6692759295499021
59046,"/** 
 * Constructor.
 */
public IDMappingManager(){
  hashType2Mapping=new HashMap<EMappingType,HashMap<?,?>>();
}","/** 
 * Constructor.
 */
public IDMappingManager(){
  hashType2Mapping=new HashMap<EMappingType,Map<?,?>>();
}",0.9821428571428572
59047,"public GLCaleydoCanvas(final GLCapabilities glCapabilities){
  super(glCapabilities);
  joglMouseListener=new PickingJoglMouseListener();
  this.iGLCanvasID=GeneralManager.get().getIDManager().createID(EManagedObjectType.VIEW_GL_CANVAS);
  this.addMouseListener(joglMouseListener);
  this.addMouseMotionListener(joglMouseListener);
  this.addMouseWheelListener(joglMouseListener);
}","public GLCaleydoCanvas(final GLCapabilities glCapabilities){
  super(glCapabilities);
  this.getContext().setSynchronized(true);
  joglMouseListener=new PickingJoglMouseListener();
  this.iGLCanvasID=GeneralManager.get().getIDManager().createID(EManagedObjectType.VIEW_GL_CANVAS);
  this.addMouseListener(joglMouseListener);
  this.addMouseMotionListener(joglMouseListener);
  this.addMouseWheelListener(joglMouseListener);
}",0.946716232961586
59048,"private void loadViewToUnderInteractionLayer(final int iViewID){
  if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE)   return;
  arSlerpActions.clear();
  generalManager.getViewGLCanvasManager().getGLEventListener(iViewID).broadcastElements(ESelectionType.NORMAL);
  if (stackLayer.containsElement(iViewID)) {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,stackLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    if (underInteractionLayer.getElementIdByPositionIndex(0) != -1) {
      SlerpAction reverseSlerpAction=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,stackLayer);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
 else {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,poolLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    if (!stackLayer.containsElement(-1)) {
      SlerpAction reverseSlerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex()),stackLayer,true);
      arSlerpActions.add(reverseSlerpAction);
      generalManager.getViewGLCanvasManager().getGLEventListener(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex())).broadcastElements(ESelectionType.REMOVE);
    }
    SlerpAction reverseSlerpAction2=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction2);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
  iSlerpFactor=0;
}","private void loadViewToUnderInteractionLayer(final int iViewID){
  if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE)   return;
  arSlerpActions.clear();
  generalManager.getViewGLCanvasManager().getGLEventListener(iViewID).broadcastElements(ESelectionType.ADD);
  if (stackLayer.containsElement(iViewID)) {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,stackLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    if (underInteractionLayer.getElementIdByPositionIndex(0) != -1) {
      SlerpAction reverseSlerpAction=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,stackLayer);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
 else {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,poolLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    if (!stackLayer.containsElement(-1)) {
      SlerpAction reverseSlerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex()),stackLayer,true);
      arSlerpActions.add(reverseSlerpAction);
      generalManager.getViewGLCanvasManager().getGLEventListener(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex())).broadcastElements(ESelectionType.REMOVE);
    }
    SlerpAction reverseSlerpAction2=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction2);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
  iSlerpFactor=0;
}",0.9974175035868006
59049,"private void initializeContainedViews(final GL gl){
  for (  int iContainedViewID : iAlContainedViewIDs) {
    AGLEventListener tmpGLEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iContainedViewID);
    if (tmpGLEventListener == this || tmpGLEventListener instanceof GLPathway) {
      continue;
    }
    int iViewID=(tmpGLEventListener).getID();
    if (underInteractionLayer.containsElement(-1)) {
      underInteractionLayer.addElement(iViewID);
      underInteractionLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.MEDIUM);
      generalManager.getGUIBridge().setActiveGLSubView(this,tmpGLEventListener);
    }
 else     if (stackLayer.containsElement(-1)) {
      stackLayer.addElement(iViewID);
      stackLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.NORMAL);
      tmpGLEventListener.setDetailLevel(EDetailLevel.LOW);
    }
 else     if (poolLayer.containsElement(-1)) {
      poolLayer.addElement(iViewID);
      poolLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.setDetailLevel(EDetailLevel.VERY_LOW);
    }
    pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID);
    ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
    arMediatorIDs.add(iViewID);
    generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,EMediatorType.SELECTION_MEDIATOR,EMediatorUpdateType.MEDIATOR_DEFAULT);
  }
}","private void initializeContainedViews(final GL gl){
  for (  int iContainedViewID : iAlContainedViewIDs) {
    AGLEventListener tmpGLEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iContainedViewID);
    if (tmpGLEventListener == this || tmpGLEventListener instanceof GLPathway) {
      continue;
    }
    int iViewID=(tmpGLEventListener).getID();
    if (underInteractionLayer.containsElement(-1)) {
      underInteractionLayer.addElement(iViewID);
      underInteractionLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.ADD);
      tmpGLEventListener.setDetailLevel(EDetailLevel.MEDIUM);
      generalManager.getGUIBridge().setActiveGLSubView(this,tmpGLEventListener);
    }
 else     if (stackLayer.containsElement(-1)) {
      stackLayer.addElement(iViewID);
      stackLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.broadcastElements(ESelectionType.ADD);
      tmpGLEventListener.setDetailLevel(EDetailLevel.LOW);
    }
 else     if (poolLayer.containsElement(-1)) {
      poolLayer.addElement(iViewID);
      poolLayer.setElementVisibilityById(true,iViewID);
      tmpGLEventListener.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
      tmpGLEventListener.setDetailLevel(EDetailLevel.VERY_LOW);
    }
    pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID);
    ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
    arMediatorIDs.add(iViewID);
    generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,EMediatorType.SELECTION_MEDIATOR,EMediatorUpdateType.MEDIATOR_DEFAULT);
  }
}",0.9963954685890836
59050,"private void initializeNewPathways(final GL gl){
  if (!iAlUninitializedPathwayIDs.isEmpty() && arSlerpActions.isEmpty()) {
    int iTmpPathwayID=iAlUninitializedPathwayIDs.get(0);
    if (!generalManager.getPathwayManager().isPathwayVisible(iTmpPathwayID)) {
      ArrayList<Integer> iAlSetIDs=new ArrayList<Integer>();
      for (      ISet tmpSet : alSets) {
        iAlSetIDs.add(tmpSet.getID());
      }
      CmdCreateGLPathway cmdPathway=(CmdCreateGLPathway)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_PATHWAY_3D);
      cmdPathway.setAttributes(iTmpPathwayID,iAlSetIDs,EProjectionMode.ORTHOGRAPHIC,-4,4,4,-4,-20,20);
      cmdPathway.doCommand();
      GLPathway pathway=(GLPathway)cmdPathway.getCreatedObject();
      int iGeneratedViewID=pathway.getID();
      ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
      arMediatorIDs.add(iGeneratedViewID);
      generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,EMediatorType.SELECTION_MEDIATOR,EMediatorUpdateType.MEDIATOR_DEFAULT);
      if (underInteractionLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,underInteractionLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.MEDIUM);
        pathway.broadcastElements(ESelectionType.NORMAL);
      }
 else       if (stackLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,stackLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.LOW);
        pathway.broadcastElements(ESelectionType.NORMAL);
      }
 else       if (poolLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,poolLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.VERY_LOW);
      }
 else {
        generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
        iAlUninitializedPathwayIDs.remove(0);
        return;
      }
      spawnLayer.addElement(iGeneratedViewID);
    }
    iAlUninitializedPathwayIDs.remove(0);
    if (iAlUninitializedPathwayIDs.isEmpty())     enableBusyMode(false);
 else     enableBusyMode(true);
    generalManager.getViewGLCanvasManager().getConnectedElementRepresentationManager().clear();
  }
}","private void initializeNewPathways(final GL gl){
  if (!iAlUninitializedPathwayIDs.isEmpty() && arSlerpActions.isEmpty()) {
    int iTmpPathwayID=iAlUninitializedPathwayIDs.get(0);
    if (!generalManager.getPathwayManager().isPathwayVisible(iTmpPathwayID)) {
      ArrayList<Integer> iAlSetIDs=new ArrayList<Integer>();
      for (      ISet tmpSet : alSets) {
        iAlSetIDs.add(tmpSet.getID());
      }
      CmdCreateGLPathway cmdPathway=(CmdCreateGLPathway)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_PATHWAY_3D);
      cmdPathway.setAttributes(iTmpPathwayID,iAlSetIDs,EProjectionMode.ORTHOGRAPHIC,-4,4,4,-4,-20,20);
      cmdPathway.doCommand();
      GLPathway pathway=(GLPathway)cmdPathway.getCreatedObject();
      int iGeneratedViewID=pathway.getID();
      ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
      arMediatorIDs.add(iGeneratedViewID);
      generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,EMediatorType.SELECTION_MEDIATOR,EMediatorUpdateType.MEDIATOR_DEFAULT);
      if (underInteractionLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,underInteractionLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.MEDIUM);
        pathway.broadcastElements(ESelectionType.ADD);
      }
 else       if (stackLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,stackLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.LOW);
        pathway.broadcastElements(ESelectionType.ADD);
      }
 else       if (poolLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,poolLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.VERY_LOW);
      }
 else {
        generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
        iAlUninitializedPathwayIDs.remove(0);
        return;
      }
      spawnLayer.addElement(iGeneratedViewID);
    }
    iAlUninitializedPathwayIDs.remove(0);
    if (iAlUninitializedPathwayIDs.isEmpty())     enableBusyMode(false);
 else     enableBusyMode(true);
    generalManager.getViewGLCanvasManager().getConnectedElementRepresentationManager().clear();
  }
}",0.996741491672701
59051,"/** 
 * @param iNumberOfRandomElements
 */
public final void setNumberOfSamplesToShow(int iNumberOfRandomElements){
  if (iNumberOfRandomElements != this.iNumberOfRandomElements && bUseRandomSampling) {
    this.iNumberOfRandomElements=iNumberOfRandomElements;
    initData();
    return;
  }
  this.iNumberOfRandomElements=iNumberOfRandomElements;
}","/** 
 * Set the number of samples which are shown in the view. The distribution is purely random
 * @param iNumberOfRandomElements the number
 */
public final void setNumberOfSamplesToShow(int iNumberOfRandomElements){
  if (iNumberOfRandomElements != this.iNumberOfRandomElements && bUseRandomSampling) {
    this.iNumberOfRandomElements=iNumberOfRandomElements;
    initData();
    return;
  }
  this.iNumberOfRandomElements=iNumberOfRandomElements;
}",0.8717310087173101
59052,"private void renderHeatMap(final GL gl){
  renderStyle.updateFieldSizes();
  float fXPosition=0;
  float fYPosition=0;
  Vec2f vecFieldWidthAndHeight=null;
  int iCount=0;
  for (  Integer iContentIndex : set.getVA(iContentVAID)) {
    vecFieldWidthAndHeight=renderStyle.getFieldWidthAndHeight(iCount++);
    fYPosition=0;
    for (    Integer iStorageIndex : set.getVA(iStorageVAID)) {
      renderElement(gl,iStorageIndex,iContentIndex,fXPosition,fYPosition,vecFieldWidthAndHeight);
      fYPosition+=vecFieldWidthAndHeight.y();
    }
    float fFontScaling=0;
    float fColumnDegrees=0;
    float fLineDegrees=0;
    if (bRenderStorageHorizontally) {
      fColumnDegrees=0;
      fLineDegrees=25;
    }
 else {
      fColumnDegrees=60;
      fLineDegrees=90;
    }
    if (vecFieldWidthAndHeight.x() > 0.08f) {
      boolean bRenderShortName=false;
      if (vecFieldWidthAndHeight.x() < 0.2f) {
        fFontScaling=renderStyle.getSmallFontScalingFactor();
      }
 else {
        bRenderShortName=true;
        fFontScaling=renderStyle.getHeadingFontScalingFactor();
      }
      if (detailLevel == EDetailLevel.HIGH) {
        String sContent=getRefSeqFromStorageIndex(iContentIndex);
        renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 2.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        if (bRenderShortName) {
          sContent=getShortNameFromDavid(iContentIndex);
          renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 4.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        }
      }
    }
    renderStyle.setXDistanceAt(set.getVA(iContentVAID).indexOf(iContentIndex),fXPosition);
    fXPosition+=vecFieldWidthAndHeight.x();
    if (detailLevel == EDetailLevel.HIGH) {
      if (iCount == set.getVA(iContentVAID).size()) {
        fYPosition=0;
        for (        Integer iStorageIndex : set.getVA(iStorageVAID)) {
          renderCaption(gl,set.get(iStorageIndex).getLabel(),fXPosition + 0.1f,fYPosition + vecFieldWidthAndHeight.y() / 2,fColumnDegrees,renderStyle.getSmallFontScalingFactor());
          fYPosition+=vecFieldWidthAndHeight.y();
        }
      }
    }
  }
}","private void renderHeatMap(final GL gl){
  renderStyle.updateFieldSizes();
  float fXPosition=0;
  float fYPosition=0;
  Vec2f vecFieldWidthAndHeight=null;
  int iCount=0;
  for (  Integer iContentIndex : set.getVA(iContentVAID)) {
    vecFieldWidthAndHeight=renderStyle.getFieldWidthAndHeight(iCount++);
    fYPosition=0;
    for (    Integer iStorageIndex : set.getVA(iStorageVAID)) {
      renderElement(gl,iStorageIndex,iContentIndex,fXPosition,fYPosition,vecFieldWidthAndHeight);
      fYPosition+=vecFieldWidthAndHeight.y();
    }
    float fFontScaling=0;
    float fColumnDegrees=0;
    float fLineDegrees=0;
    if (bRenderStorageHorizontally) {
      fColumnDegrees=0;
      fLineDegrees=25;
    }
 else {
      fColumnDegrees=60;
      fLineDegrees=90;
    }
    if (vecFieldWidthAndHeight.x() > 0.08f) {
      boolean bRenderShortName=false;
      if (vecFieldWidthAndHeight.x() < 0.2f) {
        fFontScaling=renderStyle.getSmallFontScalingFactor();
      }
 else {
        bRenderShortName=true;
        fFontScaling=renderStyle.getHeadingFontScalingFactor();
      }
      if (detailLevel == EDetailLevel.HIGH) {
        String sContent=getRefSeqFromStorageIndex(iContentIndex);
        if (sContent == null)         sContent=""String_Node_Str"";
        renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 2.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        if (bRenderShortName) {
          sContent=getShortNameFromDavid(iContentIndex);
          if (sContent == null)           sContent=""String_Node_Str"";
          renderCaption(gl,sContent,fXPosition + vecFieldWidthAndHeight.x() / 6 * 4.5f,fYPosition + 0.1f,fLineDegrees,fFontScaling);
        }
      }
    }
    renderStyle.setXDistanceAt(set.getVA(iContentVAID).indexOf(iContentIndex),fXPosition);
    fXPosition+=vecFieldWidthAndHeight.x();
    if (detailLevel == EDetailLevel.HIGH) {
      if (iCount == set.getVA(iContentVAID).size()) {
        fYPosition=0;
        for (        Integer iStorageIndex : set.getVA(iStorageVAID)) {
          renderCaption(gl,set.get(iStorageIndex).getLabel(),fXPosition + 0.1f,fYPosition + vecFieldWidthAndHeight.y() / 2,fColumnDegrees,renderStyle.getSmallFontScalingFactor());
          fYPosition+=vecFieldWidthAndHeight.y();
        }
      }
    }
  }
}",0.969438202247191
59053,"/** 
 * Constructor.
 * @param iViewID
 * @param iGLCanvasID
 * @param sLabel
 * @param viewFrustum
 */
public GLHeatMap(final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(iGLCanvasID,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HEAT_MAP;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).externalIDType(EIDType.DAVID).mappingType(EMappingType.EXPRESSION_INDEX_2_DAVID,EMappingType.DAVID_2_EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_EXPERIMENT).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  colorMappingBar=new GLColorMappingBarMiniView(viewFrustum);
}","/** 
 * Constructor.
 * @param iViewID
 * @param iGLCanvasID
 * @param sLabel
 * @param viewFrustum
 */
public GLHeatMap(final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(iGLCanvasID,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HEAT_MAP;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).externalIDType(EIDType.DAVID).mappingType(EMappingType.EXPRESSION_INDEX_2_DAVID,EMappingType.DAVID_2_EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_EXPERIMENT).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  colorMappingBar=new GLColorMappingBarMiniView(viewFrustum);
  iNumberOfRandomElements=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
}",0.9565217391304348
59054,"public static void startCaleydoCore(){
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    Display display=PlatformUI.createDisplay();
    Shell shell=new Shell(display);
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (WizardDialog.CANCEL == projectWizardDialog.open()) {
      bDoExit=true;
    }
    shell.dispose();
    if (bPathwayViewerMode)     sCaleydoXMLfile=BOOTSTRAP_FILE_PATHWAY_VIEWER_MODE;
 else     sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
    caleydoCore.setXmlFileName(sCaleydoXMLfile);
    caleydoCore.start();
  }
 else {
    caleydoCore.setXmlFileName(sCaleydoXMLfile);
    caleydoCore.start();
  }
  GeneralManager.get().getViewGLCanvasManager().startAnimator();
  if (!bDoExit) {
    new PathwayLoadingProgressIndicatorAction().run(null);
  }
  openViewsInRCP();
}","public static void startCaleydoCore(){
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    Display display=PlatformUI.createDisplay();
    Shell shell=new Shell(display);
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (WizardDialog.CANCEL == projectWizardDialog.open()) {
      bDoExit=true;
    }
    shell.dispose();
    if (bPathwayViewerMode)     sCaleydoXMLfile=BOOTSTRAP_FILE_PATHWAY_VIEWER_MODE;
 else     sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
    caleydoCore.setXmlFileName(sCaleydoXMLfile);
    caleydoCore.start();
  }
 else {
    caleydoCore.setXmlFileName(sCaleydoXMLfile);
    caleydoCore.start();
  }
  if (!bDoExit) {
    new PathwayLoadingProgressIndicatorAction().run(null);
  }
  openViewsInRCP();
  GeneralManager.get().getViewGLCanvasManager().startAnimator();
}",0.8817330210772834
59055,"/** 
 * TODO: Documentation
 * @param uniqueManagedObject
 * @param gl
 * @param pickingTriggerMouseAdapter
 * @param bIsMaster
 */
public void handlePicking(final int iViewID,final GL gl,final boolean bIsMaster){
  if (bEnablePicking == false)   return;
  AGLEventListener canvasUser=(GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iViewID));
  PickingJoglMouseListener pickingTriggerMouseAdapter=canvasUser.getParentGLCanvas().getJoglMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasLeftMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    hashViewIDToIsMouseOverPickingEvent.put(iViewID,true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(iViewID) != null && hashViewIDToLastMouseMovedTimeStamp.get(iViewID) != null && hashViewIDToIsMouseOverPickingEvent.get(iViewID) == true && System.nanoTime() - hashViewIDToLastMouseMovedTimeStamp.get(iViewID) >= 0) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null) {
    return;
  }
  hashViewIDToIsMouseOverPickingEvent.put(iViewID,false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(viewport[3] - viewport[1]) / (viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=canvasUser.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  canvasUser.display(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,iViewID,ePickingMode,bIsMaster,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}","/** 
 * TODO: Documentation
 * @param uniqueManagedObject
 * @param gl
 * @param pickingTriggerMouseAdapter
 * @param bIsMaster
 */
public void handlePicking(final int iViewID,final GL gl,final boolean bIsMaster){
  if (bEnablePicking == false)   return;
  AGLEventListener canvasUser=(GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iViewID));
  PickingJoglMouseListener pickingTriggerMouseAdapter=canvasUser.getParentGLCanvas().getJoglMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasLeftMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    hashViewIDToIsMouseOverPickingEvent.put(iViewID,true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(iViewID) != null && hashViewIDToLastMouseMovedTimeStamp.get(iViewID) != null && hashViewIDToIsMouseOverPickingEvent.get(iViewID) == true && System.nanoTime() - hashViewIDToLastMouseMovedTimeStamp.get(iViewID) >= 0) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null) {
    return;
  }
  hashViewIDToIsMouseOverPickingEvent.put(iViewID,false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=canvasUser.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  canvasUser.display(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,iViewID,ePickingMode,bIsMaster,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}",0.997584541062802
59056,"public static void loadAllPathwaysByType(final IGeneralManager generalManager,final PathwayDatabase pathwayDatabase){
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str"");
  GLRemoteRendering tmpGLRemoteRendering3D=null;
  for (  GLEventListener tmpGLEventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
    if (tmpGLEventListener instanceof GLRemoteRendering) {
      tmpGLRemoteRendering3D=((GLRemoteRendering)tmpGLEventListener);
      tmpGLRemoteRendering3D.enableBusyMode(true);
      break;
    }
  }
  BufferedReader file=null;
  String sLine=null;
  String sFileName=""String_Node_Str"";
  String sPathwayPath=pathwayDatabase.getXMLPath();
  float fProgressFactor=0;
  if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=IGeneralManager.CALEYDO_HOME_PATH + PATHWAY_LIST_KEGG;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_KEGG;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
 else   if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=IGeneralManager.CALEYDO_HOME_PATH + PATHWAY_LIST_BIOCARTA;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_BIOCARTA;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
  int iPathwayIndex=0;
  try {
    if (generalManager.getClass().getClassLoader().getResourceAsStream(sFileName) != null) {
      file=new BufferedReader(new InputStreamReader(generalManager.getClass().getClassLoader().getResourceAsStream(sFileName)));
    }
 else {
      file=new BufferedReader(new FileReader(sFileName));
    }
    StringTokenizer tokenizer;
    String sPathwayName;
    PathwayGraph tmpPathwayGraph;
    while ((sLine=file.readLine()) != null) {
      tokenizer=new StringTokenizer(sLine,""String_Node_Str"");
      sPathwayName=tokenizer.nextToken();
      if (!sPathwayName.endsWith(""String_Node_Str"") && !sLine.contains(""String_Node_Str""))       continue;
      generalManager.getXmlParserManager().parseXmlFileByName(sPathwayPath + sPathwayName);
      tmpPathwayGraph=((PathwayManager)generalManager.getPathwayManager()).getCurrenPathwayGraph();
      tmpPathwayGraph.setWidth(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      tmpPathwayGraph.setHeight(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      int iImageWidth=tmpPathwayGraph.getWidth();
      int iImageHeight=tmpPathwayGraph.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1) {
        generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + iImageWidth + ""String_Node_Str""+ iImageHeight);
      }
      iPathwayIndex++;
      if (iPathwayIndex % 10 == 0) {
        generalManager.getSWTGUIManager().setProgressBarPercentageFromExternalThread((int)(fProgressFactor * iPathwayIndex));
      }
    }
  }
 catch (  FileNotFoundException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName + ""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  }
catch (  IOException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName,CaleydoRuntimeExceptionType.DATAHANDLING);
  }
  if (tmpGLRemoteRendering3D != null)   tmpGLRemoteRendering3D.enableBusyMode(false);
  generalManager.getPathwayManager().notifyPathwayLoadingFinished(true);
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str"");
}","public static void loadAllPathwaysByType(final IGeneralManager generalManager,final PathwayDatabase pathwayDatabase){
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str"");
  GLRemoteRendering tmpGLRemoteRendering3D=null;
  for (  GLEventListener tmpGLEventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
    if (tmpGLEventListener instanceof GLRemoteRendering) {
      tmpGLRemoteRendering3D=((GLRemoteRendering)tmpGLEventListener);
      tmpGLRemoteRendering3D.enableBusyMode(true);
      break;
    }
  }
  BufferedReader file=null;
  String sLine=null;
  String sFileName=""String_Node_Str"";
  String sPathwayPath=pathwayDatabase.getXMLPath();
  float fProgressFactor=0;
  if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=IGeneralManager.CALEYDO_HOME_PATH + PATHWAY_LIST_KEGG;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_KEGG;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
 else   if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=IGeneralManager.CALEYDO_HOME_PATH + PATHWAY_LIST_BIOCARTA;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_BIOCARTA;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
  int iPathwayIndex=0;
  try {
    if (generalManager.getClass().getClassLoader().getResourceAsStream(sFileName) != null) {
      file=new BufferedReader(new InputStreamReader(generalManager.getClass().getClassLoader().getResourceAsStream(sFileName)));
    }
 else {
      file=new BufferedReader(new FileReader(sFileName));
    }
    StringTokenizer tokenizer;
    String sPathwayName;
    PathwayGraph tmpPathwayGraph;
    while ((sLine=file.readLine()) != null) {
      tokenizer=new StringTokenizer(sLine,""String_Node_Str"");
      sPathwayName=tokenizer.nextToken();
      if (!sPathwayName.endsWith(""String_Node_Str"") && !sLine.contains(""String_Node_Str""))       continue;
      generalManager.getXmlParserManager().parseXmlFileByName(sPathwayPath + sPathwayName);
      tmpPathwayGraph=((PathwayManager)generalManager.getPathwayManager()).getCurrenPathwayGraph();
      tmpPathwayGraph.setWidth(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      tmpPathwayGraph.setHeight(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      int iImageWidth=tmpPathwayGraph.getWidth();
      int iImageHeight=tmpPathwayGraph.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1) {
        generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + iImageWidth + ""String_Node_Str""+ iImageHeight);
      }
      iPathwayIndex++;
      if (iPathwayIndex % 10 == 0) {
        generalManager.getSWTGUIManager().setProgressBarPercentageFromExternalThread((int)(fProgressFactor * iPathwayIndex));
      }
    }
  }
 catch (  FileNotFoundException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName + ""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  }
catch (  IOException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName,CaleydoRuntimeExceptionType.DATAHANDLING);
  }
  if (tmpGLRemoteRendering3D != null)   tmpGLRemoteRendering3D.enableBusyMode(false);
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str"");
}",0.9894033967194078
59057,"@Override public void run(){
  super.run();
  Iterator<PathwayDatabase> iterPathwayDatabase=pathwayDatabases.iterator();
  while (iterPathwayDatabase.hasNext()) {
    loadAllPathwaysByType(generalManager,iterPathwayDatabase.next());
  }
}","@Override public void run(){
  super.run();
  Iterator<PathwayDatabase> iterPathwayDatabase=pathwayDatabases.iterator();
  while (iterPathwayDatabase.hasNext()) {
    loadAllPathwaysByType(generalManager,iterPathwayDatabase.next());
  }
  generalManager.getPathwayManager().notifyPathwayLoadingFinished(true);
}",0.8670309653916212
59058,"@Override public void triggerParsingPathwayDatabases(){
  pathwayLoaderThread=new PathwayLoaderThread(hashPathwayDatabase.values());
}","@Override public void triggerParsingPathwayDatabases(){
  new PathwayLoaderThread(hashPathwayDatabase.values());
}",0.9193548387096774
59059,"@Override public IStatus run(IProgressMonitor monitor){
  monitor.beginTask(""String_Node_Str"",100);
  monitor.subTask(""String_Node_Str"");
  PathwayLoaderThread.loadAllPathwaysByType(GeneralManager.get(),GeneralManager.get().getPathwayManager().getPathwayDatabaseByType(EPathwayDatabaseType.KEGG));
  monitor.worked(50);
  monitor.subTask(""String_Node_Str"");
  PathwayLoaderThread.loadAllPathwaysByType(GeneralManager.get(),GeneralManager.get().getPathwayManager().getPathwayDatabaseByType(EPathwayDatabaseType.BIOCARTA));
  monitor.worked(50);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus run(IProgressMonitor monitor){
  monitor.beginTask(""String_Node_Str"",100);
  monitor.subTask(""String_Node_Str"");
  PathwayLoaderThread.loadAllPathwaysByType(GeneralManager.get(),GeneralManager.get().getPathwayManager().getPathwayDatabaseByType(EPathwayDatabaseType.KEGG));
  monitor.worked(50);
  monitor.subTask(""String_Node_Str"");
  PathwayLoaderThread.loadAllPathwaysByType(GeneralManager.get(),GeneralManager.get().getPathwayManager().getPathwayDatabaseByType(EPathwayDatabaseType.BIOCARTA));
  monitor.worked(50);
  GeneralManager.get().getPathwayManager().notifyPathwayLoadingFinished(true);
  monitor.done();
  return Status.OK_STATUS;
}",0.937251787132645
59060,"/** 
 * Constructor.
 * @param iId
 * @param sReactionId
 * @param sType
 */
public PathwayReactionEdgeGraphItem(final int iId,final String sReactionId,final String sType){
  super(iId,EGraphItemKind.EDGE);
  this.sReactionId=sReactionId;
  type=EPathwayReactionEdgeType.valueOf(sType);
}","/** 
 * Constructor.
 * @param sReactionId
 * @param sType
 */
public PathwayReactionEdgeGraphItem(final String sReactionId,final String sType){
  super(EGraphItemKind.EDGE);
  this.sReactionId=sReactionId;
  type=EPathwayReactionEdgeType.valueOf(sType);
}",0.8823529411764706
59061,"/** 
 * Constructor.
 * @param iId
 */
public PathwayReactionEdgeGraphItemRep(final int iId){
  super(iId,EGraphItemKind.EDGE);
}","/** 
 * Constructor.
 */
public PathwayReactionEdgeGraphItemRep(){
  super(EGraphItemKind.EDGE);
}",0.8634361233480177
59062,"/** 
 * Constructor.
 * @param iId
 * @param sType
 */
public PathwayRelationEdgeGraphItem(final int iId,final String sType){
  super(iId,EGraphItemKind.EDGE);
  type=EPathwayRelationEdgeType.valueOf(sType);
}","/** 
 * Constructor.
 * @param sType
 */
public PathwayRelationEdgeGraphItem(final String sType){
  super(EGraphItemKind.EDGE);
  type=EPathwayRelationEdgeType.valueOf(sType);
}",0.917098445595855
59063,"/** 
 * Constructor.
 * @param iId
 */
public PathwayRelationEdgeGraphItemRep(final int iId){
  super(iId,EGraphItemKind.EDGE);
}","/** 
 * Constructor.
 */
public PathwayRelationEdgeGraphItemRep(){
  super(EGraphItemKind.EDGE);
}",0.8634361233480177
59064,"public void runApplication(){
  Iterator<Shell> shellIterator;
  Shell currentShell;
  setProgressBarVisible(false);
  shellIterator=windowMap.values().iterator();
  while (shellIterator.hasNext()) {
    currentShell=shellIterator.next();
    currentShell.setVisible(true);
  }
  GeneralManager.get().getViewGLCanvasManager().createAnimator();
  shellIterator=windowMap.values().iterator();
  while (shellIterator.hasNext()) {
    currentShell=shellIterator.next();
    while (!currentShell.isDisposed()) {
      if (!display.readAndDispatch())       display.sleep();
    }
  }
}","public void runApplication(){
  Iterator<Shell> shellIterator;
  Shell currentShell;
  if (loadingProgressBarWindow != null)   setProgressBarVisible(false);
  shellIterator=windowMap.values().iterator();
  while (shellIterator.hasNext()) {
    currentShell=shellIterator.next();
    currentShell.setVisible(true);
  }
  GeneralManager.get().getViewGLCanvasManager().createAnimator();
  shellIterator=windowMap.values().iterator();
  while (shellIterator.hasNext()) {
    currentShell=shellIterator.next();
    while (!currentShell.isDisposed()) {
      if (!display.readAndDispatch())       display.sleep();
    }
  }
}",0.96661101836394
59065,"public void setProgressBarVisible(final boolean state){
}","public void setProgressBarVisible(final boolean state){
  loadingProgressBarWindow.setVisible(state);
  loadingProgressBar.setVisible(state);
}",0.57
59066,"public IGraphItem createRelationEdge(final IGraphItem graphItemIn,final IGraphItem graphItemOut,final String sType);","public IGraphItem createRelationEdge(final List<IGraphItem> alGraphItemIn,final List<IGraphItem> alGraphItemOut,final String sType);",0.9193548387096774
59067,"public IGraphItem createReactionEdge(final IGraph parentPathway,final String sReactionName,final String sReactionType){
  int iGeneratedId=-1;
  IGraphItem pathwayReactionEdge=new PathwayReactionEdgeGraphItem(iGeneratedId,sReactionName,sReactionType);
  iGeneratedId=-1;
  IGraphItem pathwayReactionEdgeRep=new PathwayReactionEdgeGraphItemRep(iGeneratedId);
  IGraph rootPathway=generalManager.getPathwayManager().getRootPathway();
  rootPathway.addItem(pathwayReactionEdge);
  pathwayReactionEdge.addGraph(rootPathway,EGraphItemHierarchy.GRAPH_PARENT);
  parentPathway.addItem(pathwayReactionEdgeRep);
  pathwayReactionEdgeRep.addGraph(parentPathway,EGraphItemHierarchy.GRAPH_PARENT);
  pathwayReactionEdgeRep.addItem(pathwayReactionEdge,EGraphItemProperty.ALIAS_PARENT);
  pathwayReactionEdge.addItem(pathwayReactionEdgeRep,EGraphItemProperty.ALIAS_CHILD);
  return pathwayReactionEdgeRep;
}","public IGraphItem createReactionEdge(final IGraph parentPathway,final String sReactionName,final String sReactionType){
  IGraphItem pathwayReactionEdge=new PathwayReactionEdgeGraphItem(sReactionName,sReactionType);
  IGraphItem pathwayReactionEdgeRep=new PathwayReactionEdgeGraphItemRep();
  IGraph rootPathway=generalManager.getPathwayManager().getRootPathway();
  rootPathway.addItem(pathwayReactionEdge);
  pathwayReactionEdge.addGraph(rootPathway,EGraphItemHierarchy.GRAPH_PARENT);
  parentPathway.addItem(pathwayReactionEdgeRep);
  pathwayReactionEdgeRep.addGraph(parentPathway,EGraphItemHierarchy.GRAPH_PARENT);
  pathwayReactionEdgeRep.addItem(pathwayReactionEdge,EGraphItemProperty.ALIAS_PARENT);
  pathwayReactionEdge.addItem(pathwayReactionEdgeRep,EGraphItemProperty.ALIAS_CHILD);
  return pathwayReactionEdgeRep;
}",0.7923211169284468
59068,"public void createRelationEdgeRep(final IGraph parentPathway,final IGraphItem pathwayRelationEdge,final IGraphItem graphItemIn,final IGraphItem graphItemOut){
  int iGeneratedId=-1;
  IGraphItem pathwayRelationEdgeRep=new PathwayRelationEdgeGraphItemRep(iGeneratedId);
  parentPathway.addItem(pathwayRelationEdgeRep);
  pathwayRelationEdgeRep.addGraph(parentPathway,EGraphItemHierarchy.GRAPH_PARENT);
  pathwayRelationEdgeRep.addItem(pathwayRelationEdge,EGraphItemProperty.ALIAS_PARENT);
  pathwayRelationEdge.addItem(pathwayRelationEdgeRep,EGraphItemProperty.ALIAS_CHILD);
  pathwayRelationEdgeRep.addItemDoubleLinked(graphItemIn,EGraphItemProperty.INCOMING);
  pathwayRelationEdgeRep.addItemDoubleLinked(graphItemOut,EGraphItemProperty.OUTGOING);
}","public void createRelationEdgeRep(final IGraph parentPathway,final IGraphItem pathwayRelationEdge,final IGraphItem graphItemIn,final IGraphItem graphItemOut){
  IGraphItem pathwayRelationEdgeRep=new PathwayRelationEdgeGraphItemRep();
  parentPathway.addItem(pathwayRelationEdgeRep);
  pathwayRelationEdgeRep.addGraph(parentPathway,EGraphItemHierarchy.GRAPH_PARENT);
  pathwayRelationEdgeRep.addItem(pathwayRelationEdge,EGraphItemProperty.ALIAS_PARENT);
  pathwayRelationEdge.addItem(pathwayRelationEdgeRep,EGraphItemProperty.ALIAS_CHILD);
  pathwayRelationEdgeRep.addItemDoubleLinked(graphItemIn,EGraphItemProperty.INCOMING);
  pathwayRelationEdgeRep.addItemDoubleLinked(graphItemOut,EGraphItemProperty.OUTGOING);
}",0.9310580204778156
59069,"public IGraphItem createRelationEdge(final IGraphItem graphItemIn,final IGraphItem graphItemOut,final String sType){
  int iGeneratedId=-1;
  IGraphItem pathwayRelationEdge=new PathwayRelationEdgeGraphItem(iGeneratedId,sType);
  IGraph rootPathway=generalManager.getPathwayManager().getRootPathway();
  rootPathway.addItem(pathwayRelationEdge);
  pathwayRelationEdge.addGraph(rootPathway,EGraphItemHierarchy.GRAPH_PARENT);
  pathwayRelationEdge.addItemDoubleLinked(graphItemIn,EGraphItemProperty.INCOMING);
  pathwayRelationEdge.addItemDoubleLinked(graphItemOut,EGraphItemProperty.OUTGOING);
  return pathwayRelationEdge;
}","public IGraphItem createRelationEdge(final List<IGraphItem> alGraphItemIn,final List<IGraphItem> alGraphItemOut,final String sType){
  IGraphItem pathwayRelationEdge=new PathwayRelationEdgeGraphItem(sType);
  IGraph rootPathway=generalManager.getPathwayManager().getRootPathway();
  rootPathway.addItem(pathwayRelationEdge);
  pathwayRelationEdge.addGraph(rootPathway,EGraphItemHierarchy.GRAPH_PARENT);
  for (  IGraphItem graphItemIn : alGraphItemIn) {
    pathwayRelationEdge.addItemDoubleLinked(graphItemIn,EGraphItemProperty.INCOMING);
  }
  for (  IGraphItem graphItemOut : alGraphItemOut) {
    pathwayRelationEdge.addItemDoubleLinked(graphItemOut,EGraphItemProperty.OUTGOING);
  }
  return pathwayRelationEdge;
}",0.7451564828614009
59070,"public static void loadAllPathwaysByType(final IGeneralManager generalManager,final PathwayDatabase pathwayDatabase){
  GLCanvasRemoteRendering3D tmpGLRemoteRendering3D=null;
  for (  GLEventListener tmpGLEventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
    if (tmpGLEventListener instanceof GLCanvasRemoteRendering3D) {
      tmpGLRemoteRendering3D=((GLCanvasRemoteRendering3D)tmpGLEventListener);
      tmpGLRemoteRendering3D.enableBusyMode(true);
      break;
    }
  }
  BufferedReader file=null;
  String sLine=null;
  String sFileName=""String_Node_Str"";
  String sPathwayPath=pathwayDatabase.getXMLPath();
  float fProgressFactor=0;
  if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=generalManager.getCaleydoHomePath() + PATHWAY_LIST_KEGG;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_KEGG;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
 else   if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=generalManager.getCaleydoHomePath() + PATHWAY_LIST_BIOCARTA;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_BIOCARTA;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
  int iPathwayIndex=0;
  try {
    if (generalManager.getClass().getClassLoader().getResourceAsStream(sFileName) != null) {
      file=new BufferedReader(new InputStreamReader(generalManager.getClass().getClassLoader().getResourceAsStream(sFileName)));
    }
 else {
      file=new BufferedReader(new FileReader(sFileName));
    }
    StringTokenizer tokenizer;
    String sPathwayName;
    PathwayGraph tmpPathwayGraph;
    while ((sLine=file.readLine()) != null) {
      tokenizer=new StringTokenizer(sLine,""String_Node_Str"");
      sPathwayName=tokenizer.nextToken();
      if (!sPathwayName.endsWith(""String_Node_Str"") && !sLine.contains(""String_Node_Str""))       continue;
      generalManager.getXmlParserManager().parseXmlFileByName(sPathwayPath + sPathwayName);
      tmpPathwayGraph=generalManager.getPathwayManager().getCurrenPathwayGraph();
      tmpPathwayGraph.setWidth(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      tmpPathwayGraph.setHeight(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      int iImageWidth=tmpPathwayGraph.getWidth();
      int iImageHeight=tmpPathwayGraph.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1)       generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + iImageWidth + ""String_Node_Str""+ iImageHeight);
      iPathwayIndex++;
      if (iPathwayIndex % 10 == 0) {
        generalManager.getSWTGUIManager().setProgressBarPercentageFromExternalThread((int)(fProgressFactor * iPathwayIndex));
      }
    }
  }
 catch (  FileNotFoundException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName + ""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  }
catch (  IOException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName,CaleydoRuntimeExceptionType.DATAHANDLING);
  }
  if (tmpGLRemoteRendering3D != null)   tmpGLRemoteRendering3D.enableBusyMode(false);
}","public static void loadAllPathwaysByType(final IGeneralManager generalManager,final PathwayDatabase pathwayDatabase){
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str"");
  GLCanvasRemoteRendering3D tmpGLRemoteRendering3D=null;
  for (  GLEventListener tmpGLEventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
    if (tmpGLEventListener instanceof GLCanvasRemoteRendering3D) {
      tmpGLRemoteRendering3D=((GLCanvasRemoteRendering3D)tmpGLEventListener);
      tmpGLRemoteRendering3D.enableBusyMode(true);
      break;
    }
  }
  BufferedReader file=null;
  String sLine=null;
  String sFileName=""String_Node_Str"";
  String sPathwayPath=pathwayDatabase.getXMLPath();
  float fProgressFactor=0;
  if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=generalManager.getCaleydoHomePath() + PATHWAY_LIST_KEGG;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_KEGG;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
 else   if (pathwayDatabase.getName().equals(""String_Node_Str"")) {
    sFileName=generalManager.getCaleydoHomePath() + PATHWAY_LIST_BIOCARTA;
    fProgressFactor=100f / APPROX_PATHWAY_COUNT_BIOCARTA;
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
  int iPathwayIndex=0;
  try {
    if (generalManager.getClass().getClassLoader().getResourceAsStream(sFileName) != null) {
      file=new BufferedReader(new InputStreamReader(generalManager.getClass().getClassLoader().getResourceAsStream(sFileName)));
    }
 else {
      file=new BufferedReader(new FileReader(sFileName));
    }
    StringTokenizer tokenizer;
    String sPathwayName;
    PathwayGraph tmpPathwayGraph;
    while ((sLine=file.readLine()) != null) {
      tokenizer=new StringTokenizer(sLine,""String_Node_Str"");
      sPathwayName=tokenizer.nextToken();
      if (!sPathwayName.endsWith(""String_Node_Str"") && !sLine.contains(""String_Node_Str""))       continue;
      generalManager.getXmlParserManager().parseXmlFileByName(sPathwayPath + sPathwayName);
      tmpPathwayGraph=generalManager.getPathwayManager().getCurrenPathwayGraph();
      tmpPathwayGraph.setWidth(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      tmpPathwayGraph.setHeight(StringConversionTool.convertStringToInt(tokenizer.nextToken(),-1));
      int iImageWidth=tmpPathwayGraph.getWidth();
      int iImageHeight=tmpPathwayGraph.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1)       generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + iImageWidth + ""String_Node_Str""+ iImageHeight);
      iPathwayIndex++;
      if (iPathwayIndex % 10 == 0) {
        generalManager.getSWTGUIManager().setProgressBarPercentageFromExternalThread((int)(fProgressFactor * iPathwayIndex));
      }
    }
  }
 catch (  FileNotFoundException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName + ""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  }
catch (  IOException e) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + sFileName,CaleydoRuntimeExceptionType.DATAHANDLING);
  }
  if (tmpGLRemoteRendering3D != null)   tmpGLRemoteRendering3D.enableBusyMode(false);
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str"");
}",0.9659987856709168
59071,"/** 
 * Reacts on the elements of the entry tag. An example entry tag looks like this: <entry id=""1"" name=""ec:1.8.4.1"" type=""enzyme"" reaction=""rn:R01292"" link=""http://www.genome.jp/dbget-bin/www_bget?enzyme+1.8.4.1"">
 */
protected void handleEntryTag(){
  int iEntryId=0;
  String sName=""String_Node_Str"";
  String sType=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  String sReactionId=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      iEntryId=new Integer(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionId=attributes.getValue(iAttributeIndex);
    }
  }
  iCurrentEntryId=iEntryId;
  alCurrentVertex.clear();
  if (sType.equals(""String_Node_Str"")) {
    StringTokenizer sTokenText=new StringTokenizer(sName,""String_Node_Str"");
    int iDavidId=-1;
    String sTmpVertexName=""String_Node_Str"";
    while (sTokenText.hasMoreTokens()) {
      sTmpVertexName=sTokenText.nextToken();
      iDavidId=generalManager.getGenomeIdManager().getIdIntFromIntByMapping(StringConversionTool.convertStringToInt(sTmpVertexName.substring(4),-1),EMappingType.ENTREZ_GENE_ID_2_DAVID);
      if (iDavidId == -1) {
        generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + sTmpVertexName + ""String_Node_Str"");
        continue;
      }
      currentVertex=generalManager.getPathwayItemManager().createVertexGene(sTmpVertexName,sType,sExternalLink,sReactionId,iDavidId);
      alCurrentVertex.add(currentVertex);
    }
  }
 else {
    currentVertex=generalManager.getPathwayItemManager().createVertex(sName,sType,sExternalLink,sReactionId);
    alCurrentVertex.add(currentVertex);
  }
}","/** 
 * Reacts on the elements of the entry tag. An example entry tag looks like this: <entry id=""1"" name=""ec:1.8.4.1"" type=""enzyme"" reaction=""rn:R01292"" link=""http://www.genome.jp/dbget-bin/www_bget?enzyme+1.8.4.1"">
 */
protected void handleEntryTag(){
  int iEntryId=0;
  String sName=""String_Node_Str"";
  String sType=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  String sReactionId=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      iEntryId=new Integer(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionId=attributes.getValue(iAttributeIndex);
    }
  }
  iCurrentEntryId=iEntryId;
  alCurrentVertex.clear();
  if (sType.equals(""String_Node_Str"")) {
    StringTokenizer sTokenText=new StringTokenizer(sName,""String_Node_Str"");
    int iDavidId=-1;
    String sTmpVertexName=""String_Node_Str"";
    while (sTokenText.hasMoreTokens()) {
      sTmpVertexName=sTokenText.nextToken();
      iDavidId=generalManager.getGenomeIdManager().getIdIntFromIntByMapping(StringConversionTool.convertStringToInt(sTmpVertexName.substring(4),-1),EMappingType.ENTREZ_GENE_ID_2_DAVID);
      if (iDavidId == -1) {
        generalManager.getLogger().log(Level.FINE,""String_Node_Str"" + sTmpVertexName + ""String_Node_Str"");
        continue;
      }
      currentVertex=generalManager.getPathwayItemManager().createVertexGene(sTmpVertexName,sType,sExternalLink,sReactionId,iDavidId);
      alCurrentVertex.add(currentVertex);
    }
  }
 else {
    currentVertex=generalManager.getPathwayItemManager().createVertex(sName,sType,sExternalLink,sReactionId);
    alCurrentVertex.add(currentVertex);
  }
}",0.9976226496650096
59072,"/** 
 * Reacts on the elements of the relation tag. An example relation tag looks like this: <relation entry1=""28"" entry2=""32"" type=""ECrel"">
 */
protected void handleRelationTag(){
  int iSourceVertexId=0;
  int iTargetVertexId=0;
  String sType=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str""))     sType=attributes.getValue(iAttributeIndex);
 else     if (sAttributeName.equals(""String_Node_Str""))     iSourceVertexId=new Integer(attributes.getValue(iAttributeIndex));
 else     if (sAttributeName.equals(""String_Node_Str""))     iTargetVertexId=new Integer(attributes.getValue(iAttributeIndex));
  }
  IGraphItem graphItemIn=hashKgmlEntryIdToVertexRepId.get(iSourceVertexId);
  IGraphItem graphItemOut=hashKgmlEntryIdToVertexRepId.get(iTargetVertexId);
  IGraphItem relationEdge=generalManager.getPathwayItemManager().createRelationEdge(((PathwayVertexGraphItemRep)graphItemIn).getPathwayVertexGraphItem(),((PathwayVertexGraphItemRep)graphItemOut).getPathwayVertexGraphItem(),sType);
  generalManager.getPathwayItemManager().createRelationEdgeRep(currentPathway,relationEdge,graphItemIn,graphItemOut);
}","/** 
 * Reacts on the elements of the relation tag. An example relation tag looks like this: <relation entry1=""28"" entry2=""32"" type=""ECrel"">
 */
protected void handleRelationTag(){
  int iSourceVertexId=0;
  int iTargetVertexId=0;
  String sType=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str""))     sType=attributes.getValue(iAttributeIndex);
 else     if (sAttributeName.equals(""String_Node_Str""))     iSourceVertexId=new Integer(attributes.getValue(iAttributeIndex));
 else     if (sAttributeName.equals(""String_Node_Str""))     iTargetVertexId=new Integer(attributes.getValue(iAttributeIndex));
  }
  IGraphItem graphItemIn=hashKgmlEntryIdToVertexRepId.get(iSourceVertexId);
  IGraphItem graphItemOut=hashKgmlEntryIdToVertexRepId.get(iTargetVertexId);
  IGraphItem relationEdge=generalManager.getPathwayItemManager().createRelationEdge(((PathwayVertexGraphItemRep)graphItemIn).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT),((PathwayVertexGraphItemRep)graphItemOut).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT),sType);
  generalManager.getPathwayItemManager().createRelationEdgeRep(currentPathway,relationEdge,graphItemIn,graphItemOut);
}",0.8617771509167842
59073,"public final ArrayList<Vec3f> getMappingColorArrayByVertexRep(final PathwayVertexGraphItemRep pathwayVertexRep){
  if (pathwayVertexRep == null) {
    return new ArrayList<Vec3f>();
  }
  if (pathwayVertexRep.getPathwayVertexGraphItem().getType().equals(EPathwayVertexType.gene)) {
    ArrayList<Vec3f> arMappingColor=new ArrayList<Vec3f>();
    if (pathwayVertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).size() > 1) {
      arMappingColor.add(new Vec3f(0,1,1));
    }
 else {
      int iDavidId=generalManager.getPathwayItemManager().getDavidIdByPathwayVertexGraphItemId(pathwayVertexRep.getPathwayVertexGraphItem().getId());
      int iExpressionStorageIndex=genomeIdManager.getIdIntFromIntByMapping(iDavidId,EMappingType.DAVID_2_EXPRESSION_STORAGE_ID);
      if (iExpressionStorageIndex == -1) {
        arMappingColor.add(new Vec3f(-1,-1,-1));
        return arMappingColor;
      }
      Iterator<IStorage> iterMappingStorage=alMappingStorage.iterator();
      IStorage expressionStorage=null;
      while (iterMappingStorage.hasNext()) {
        expressionStorage=iterMappingStorage.next();
        float fExpressionValue=expressionStorage.getFloat(EDataRepresentation.NORMALIZED,iExpressionStorageIndex);
        arMappingColor.add(expressionColorMapper.colorMappingLookup(fExpressionValue));
      }
    }
    return arMappingColor;
  }
 else   if (pathwayVertexRep.getPathwayVertexGraphItem().getType().equals(EPathwayVertexType.enzyme)) {
    ArrayList<Vec3f> arMappingColor=new ArrayList<Vec3f>();
    arMappingColor.add(new Vec3f(-1,-1,-1));
    return arMappingColor;
  }
  return new ArrayList<Vec3f>();
}","public final ArrayList<Vec3f> getMappingColorArrayByVertexRep(final PathwayVertexGraphItemRep pathwayVertexRep){
  if (pathwayVertexRep == null) {
    return new ArrayList<Vec3f>();
  }
  if (pathwayVertexRep.getType().equals(EPathwayVertexType.gene)) {
    ArrayList<Vec3f> arMappingColor=new ArrayList<Vec3f>();
    if (pathwayVertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).size() > 1) {
      arMappingColor.add(new Vec3f(0,1,1));
    }
 else {
      int iDavidId=generalManager.getPathwayItemManager().getDavidIdByPathwayVertexGraphItemId(pathwayVertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0).getId());
      int iExpressionStorageIndex=genomeIdManager.getIdIntFromIntByMapping(iDavidId,EMappingType.DAVID_2_EXPRESSION_STORAGE_ID);
      if (iExpressionStorageIndex == -1) {
        arMappingColor.add(new Vec3f(-1,-1,-1));
        return arMappingColor;
      }
      Iterator<IStorage> iterMappingStorage=alMappingStorage.iterator();
      IStorage expressionStorage=null;
      while (iterMappingStorage.hasNext()) {
        expressionStorage=iterMappingStorage.next();
        float fExpressionValue=expressionStorage.getFloat(EDataRepresentation.NORMALIZED,iExpressionStorageIndex);
        arMappingColor.add(expressionColorMapper.colorMappingLookup(fExpressionValue));
      }
    }
    return arMappingColor;
  }
 else   if (pathwayVertexRep.getType().equals(EPathwayVertexType.enzyme)) {
    ArrayList<Vec3f> arMappingColor=new ArrayList<Vec3f>();
    arMappingColor.add(new Vec3f(-1,-1,-1));
    return arMappingColor;
  }
  return new ArrayList<Vec3f>();
}",0.9629400864731316
59074,"public void setParameterHandler(final IParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
}","public void setParameterHandler(final IParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
  String sAttrib1=parameterHandler.getValueString(CommandQueueSaxType.TAG_ATTRIBUTE1.getXmlKey());
  if (sAttrib1.length() > 0) {
    if (sAttrib1.equalsIgnoreCase(""String_Node_Str""))     storageType=EManagerObjectType.STORAGE_NOMINAL;
 else     if (sAttrib1.equalsIgnoreCase(""String_Node_Str"") || sAttrib1.equalsIgnoreCase(""String_Node_Str""))     storageType=EManagerObjectType.STORAGE_NUMERICAL;
  }
}",0.3796296296296296
59075,"public void setAttributes(int iStorageID){
  iUniqueId=iStorageID;
}","public void setAttributes(int iStorageID,EManagerObjectType stroageType){
  iUniqueId=iStorageID;
  this.storageType=stroageType;
}",0.6834170854271356
59076,"/** 
 * Load data from file using a token pattern.
 * @see org.caleydo.core.parser.ascii.microarray.MicroArrayLoader1Storage#loadData()
 * @see org.caleydo.core.command.ICommand#doCommand()
 */
public void doCommand() throws CaleydoRuntimeException {
  IStorageManager storageManager=generalManager.getStorageManager();
  IStorage storage=(IStorage)storageManager.createStorage(EManagerObjectType.STORAGE);
  storage.setId(iUniqueId);
  storage.setLabel(sLabel);
  storageManager.registerItem(storage,storage.getId());
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + iUniqueId);
  commandManager.runDoCommand(this);
}","/** 
 * Load data from file using a token pattern.
 * @see org.caleydo.core.parser.ascii.microarray.MicroArrayLoader1Storage#loadData()
 * @see org.caleydo.core.command.ICommand#doCommand()
 */
public void doCommand() throws CaleydoRuntimeException {
  IStorageManager storageManager=generalManager.getStorageManager();
  IStorage storage=(IStorage)storageManager.createStorage(storageType);
  storage.setId(iUniqueId);
  storage.setLabel(sLabel);
  storageManager.registerItem(storage,storage.getId());
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + iUniqueId);
  commandManager.runDoCommand(this);
}",0.9768185451638688
59077,"public T get(EDataKind dataKind,int index){
  return null;
}","public T get(EDataKind dataKind,int index){
  return (T)((NominalStringCContainer)(hashCContainers.get(dataKind))).get(index);
}",0.6170212765957447
59078,"@SuppressWarnings(""String_Node_Str"") public void setRawData(ArrayList<T> alData){
  if (bRawDataSet)   throw new CaleydoRuntimeException(""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  bRawDataSet=true;
  if (alData.isEmpty()) {
    throw new CaleydoRuntimeException(""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  }
 else {
    if (alData.get(0) instanceof String) {
      ArrayList<String> sAlData=(ArrayList<String>)alData;
      NominalStringCContainer sStorage=new NominalStringCContainer(sAlData);
      hashCContainers.put(EDataKind.RAW,sStorage);
    }
 else {
      throw new CaleydoRuntimeException(""String_Node_Str"" + ""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void setRawData(ArrayList<T> alData){
  if (bRawDataSet)   throw new CaleydoRuntimeException(""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  bRawDataSet=true;
  if (alData.isEmpty()) {
    throw new CaleydoRuntimeException(""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
  }
 else {
    if (alData.get(0) instanceof String) {
      rawDataType=ERawDataType.STRING;
      ArrayList<String> sAlData=(ArrayList<String>)alData;
      NominalStringCContainer sStorage=new NominalStringCContainer(sAlData);
      hashCContainers.put(EDataKind.RAW,sStorage);
    }
 else {
      throw new CaleydoRuntimeException(""String_Node_Str"" + ""String_Node_Str"",CaleydoRuntimeExceptionType.DATAHANDLING);
    }
  }
}",0.9740173217854764
59079,"public IStorage createStorage(final EManagerObjectType useStorageType){
  if (useStorageType.getGroupType() != EManagerType.DATA_STORAGE) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + useStorageType.name());
  }
  final int iNewId=this.createId(useStorageType);
switch (useStorageType) {
case STORAGE:
    return new NumericalStorage(iNewId,generalManager);
default :
  throw new CaleydoRuntimeException(""String_Node_Str"" + useStorageType.toString() + ""String_Node_Str"");
}
}","public IStorage createStorage(final EManagerObjectType useStorageType){
  if (useStorageType.getGroupType() != EManagerType.DATA_STORAGE) {
    throw new CaleydoRuntimeException(""String_Node_Str"" + useStorageType.name());
  }
  final int iNewId=this.createId(useStorageType);
switch (useStorageType) {
case STORAGE_NUMERICAL:
    return new NumericalStorage(iNewId,generalManager);
case STORAGE_NOMINAL:
  return new NominalStorage<String>(iNewId,generalManager);
default :
throw new CaleydoRuntimeException(""String_Node_Str"" + useStorageType.toString() + ""String_Node_Str"");
}
}",0.9119850187265918
59080,"protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  progressBarSetStoreInitTitle(""String_Node_Str"" + this.getFileName(),0,alTargetStorages.size());
  String sLine;
  int iColumnIndex=0;
  int iParsedLineIndex=0;
  while (((sLine=brFile.readLine()) != null) && (iLineInFile < iStopParsingAtLine)) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    while (strTokenLine.hasMoreTokens()) {
      for (      EStorageType columnDataType : alColumnDataTypes) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iParsedLineIndex]=StringConversionTool.convertStringToInt(strTokenLine.nextToken(),-1);
        iColumnIndex++;
      break;
case FLOAT:
    alFloatBuffers.get(iColumnIndex)[iParsedLineIndex]=StringConversionTool.convertStringToFloat(strTokenLine.nextToken(),-1);
  iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).set(iParsedLineIndex,strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
default :
throw new CaleydoRuntimeException(""String_Node_Str"" + columnDataType.toString(),CaleydoRuntimeExceptionType.DATAHANDLING);
}
if (iColumnIndex == alColumnDataTypes.size()) continue;
}
}
iLineInFile++;
iParsedLineIndex++;
super.progressBarStoredIncrement();
}
super.progressBarResetTitle();
super.progressBarIncrement(10);
}","protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  progressBarSetStoreInitTitle(""String_Node_Str"" + this.getFileName(),0,alTargetStorages.size());
  String sLine;
  int iColumnIndex=0;
  int iParsedLineIndex=0;
  while (((sLine=brFile.readLine()) != null) && (iLineInFile < iStopParsingAtLine)) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    while (strTokenLine.hasMoreTokens()) {
      for (      EStorageType columnDataType : alColumnDataTypes) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iParsedLineIndex]=StringConversionTool.convertStringToInt(strTokenLine.nextToken(),-1);
        iColumnIndex++;
      break;
case FLOAT:
    alFloatBuffers.get(iColumnIndex)[iParsedLineIndex]=StringConversionTool.convertStringToFloat(strTokenLine.nextToken(),-1);
  iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).add(strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
default :
throw new CaleydoRuntimeException(""String_Node_Str"" + columnDataType.toString(),CaleydoRuntimeExceptionType.DATAHANDLING);
}
if (iColumnIndex == alColumnDataTypes.size()) continue;
}
}
iLineInFile++;
iParsedLineIndex++;
super.progressBarStoredIncrement();
}
super.progressBarResetTitle();
super.progressBarIncrement(10);
}",0.9921011058451816
59081,"public HashMap<Integer,GlyphEntry> loadGlyphs(ISet glyphData){
  GLCanvasGlyphGenerator generator=generalManager.getGlyphManager().getGlyphGenerator();
  glyphs=new HashMap<Integer,GlyphEntry>();
  ArrayList<IStorage> alStorages=new ArrayList<IStorage>();
  for (  IStorage tmpStorage : glyphData) {
    alStorages.add(tmpStorage);
  }
  ArrayList<int[]> aliStoreMapped=new ArrayList<int[]>();
  ArrayList<String[]> alsStoreString=new ArrayList<String[]>();
  ArrayList<String> alsStoreStringColTitel=new ArrayList<String>();
{
    int counter=0;
    int pcounter=0;
    for (    IStorage tmpStorage : alStorages) {
      GlyphAttributeType glyphAttributeType=generalManager.getGlyphManager().getGlyphAttributeTypeWithExternalColumnNumber(counter);
      if (glyphAttributeType != null) {
        if (tmpStorage instanceof NominalStorage && tmpStorage.getRawDataType() == ERawDataType.STRING) {
          INominalStorage<String> nominalStorage=(INominalStorage<String>)tmpStorage;
          int[] temp2=new int[nominalStorage.size()];
          for (int i=0; i < nominalStorage.size(); ++i) {
            int t2=glyphAttributeType.getIndex(nominalStorage.get(EDataKind.RAW,i));
            if (nominalStorage.get(EDataKind.RAW,i) == null) {
              this.generalManager.getLogger().log(Level.WARNING,""String_Node_Str"");
              temp2[i]=-1;
            }
            if (glyphAttributeType.doesAutomaticAttribute() && t2 == -1) {
              try {
                t2=Integer.parseInt(nominalStorage.get(EDataKind.RAW,i));
              }
 catch (              NumberFormatException ex) {
              }
              glyphAttributeType.addAttribute(t2,nominalStorage.get(EDataKind.RAW,i),(float)t2);
            }
            if (t2 == -1 && !(nominalStorage.get(EDataKind.RAW,i)).equals(""String_Node_Str""))             this.generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + tmpStorage.getLabel() + ""String_Node_Str""+ nominalStorage.get(EDataKind.RAW,i));
            temp2[i]=t2;
            glyphAttributeType.incDistribution(t2);
          }
          aliStoreMapped.add(temp2);
        }
 else {
          this.generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + tmpStorage.getLabel());
        }
        glyphAttributeType.setInternalColumnNumber(pcounter);
        ++pcounter;
      }
 else {
        if (tmpStorage instanceof NominalStorage && tmpStorage.getRawDataType() == ERawDataType.STRING) {
          alsStoreStringColTitel.add(tmpStorage.getLabel());
          String[] sArTmp=new String[tmpStorage.size()];
          for (int iCount=0; iCount < tmpStorage.size(); iCount++) {
            sArTmp[iCount]=((INominalStorage<String>)tmpStorage).get(EDataKind.RAW,iCount);
          }
          alsStoreString.add(sArTmp);
        }
 else         System.out.println(""String_Node_Str"" + tmpStorage.getLabel());
      }
      ++counter;
    }
  }
  if (aliStoreMapped.size() <= 0) {
    this.generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
    return glyphs;
  }
  int size=aliStoreMapped.get(0).length;
  int counter=1;
  for (int i=0; i < size; ++i) {
    GlyphEntry g=new GlyphEntry(generalManager,counter,generator);
    for (    int[] s : aliStoreMapped)     g.addParameter(s[i]);
    for (int j=0; j < alsStoreStringColTitel.size(); ++j)     g.addStringParameter(alsStoreStringColTitel.get(j),alsStoreString.get(j)[i]);
    glyphs.put(counter,g);
    ++counter;
  }
  generalManager.getGlyphManager().addGlyphs(glyphs);
  return glyphs;
}","public HashMap<Integer,GlyphEntry> loadGlyphs(ISet glyphData){
  GLCanvasGlyphGenerator generator=generalManager.getGlyphManager().getGlyphGenerator();
  glyphs=new HashMap<Integer,GlyphEntry>();
  ArrayList<IStorage> alStorages=new ArrayList<IStorage>();
  for (  IStorage tmpStorage : glyphData) {
    alStorages.add(tmpStorage);
  }
  ArrayList<int[]> aliStoreMapped=new ArrayList<int[]>();
  ArrayList<String[]> alsStoreString=new ArrayList<String[]>();
  ArrayList<String> alsStoreStringColTitel=new ArrayList<String>();
{
    int counter=0;
    int pcounter=0;
    for (    IStorage tmpStorage : alStorages) {
      GlyphAttributeType glyphAttributeType=generalManager.getGlyphManager().getGlyphAttributeTypeWithExternalColumnNumber(counter);
      if (glyphAttributeType != null) {
        if (tmpStorage instanceof NominalStorage && tmpStorage.getRawDataType() == ERawDataType.STRING) {
          INominalStorage<String> nominalStorage=(INominalStorage<String>)tmpStorage;
          int[] temp2=new int[nominalStorage.size()];
          for (int i=0; i < nominalStorage.size(); ++i) {
            int t2=glyphAttributeType.getIndex(nominalStorage.get(EDataKind.RAW,i));
            if (nominalStorage.get(EDataKind.RAW,i) == null) {
              this.generalManager.getLogger().log(Level.WARNING,""String_Node_Str"");
              temp2[i]=-1;
            }
            if (glyphAttributeType.doesAutomaticAttribute() && t2 == -1) {
              try {
                t2=Integer.parseInt(nominalStorage.get(EDataKind.RAW,i));
              }
 catch (              NumberFormatException ex) {
              }
              glyphAttributeType.addAttribute(t2,nominalStorage.get(EDataKind.RAW,i),(float)t2);
            }
            if (t2 == -1 && !(nominalStorage.get(EDataKind.RAW,i)).equals(""String_Node_Str""))             this.generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + tmpStorage.getLabel() + ""String_Node_Str""+ nominalStorage.get(EDataKind.RAW,i));
            temp2[i]=t2;
            glyphAttributeType.incDistribution(t2);
          }
          aliStoreMapped.add(temp2);
        }
 else {
          throw new CaleydoRuntimeException(""String_Node_Str"",CaleydoRuntimeExceptionType.VIEW);
        }
        glyphAttributeType.setInternalColumnNumber(pcounter);
        ++pcounter;
      }
 else {
        if (tmpStorage instanceof NominalStorage && tmpStorage.getRawDataType() == ERawDataType.STRING) {
          alsStoreStringColTitel.add(tmpStorage.getLabel());
          String[] sArTmp=new String[tmpStorage.size()];
          for (int iCount=0; iCount < tmpStorage.size(); iCount++) {
            sArTmp[iCount]=((INominalStorage<String>)tmpStorage).get(EDataKind.RAW,iCount);
          }
          alsStoreString.add(sArTmp);
        }
 else         System.out.println(""String_Node_Str"" + tmpStorage.getLabel());
      }
      ++counter;
    }
  }
  if (aliStoreMapped.size() <= 0) {
    this.generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
    return glyphs;
  }
  int size=aliStoreMapped.get(0).length;
  int counter=1;
  for (int i=0; i < size; ++i) {
    GlyphEntry g=new GlyphEntry(generalManager,counter,generator);
    for (    int[] s : aliStoreMapped)     g.addParameter(s[i]);
    for (int j=0; j < alsStoreStringColTitel.size(); ++j)     g.addStringParameter(alsStoreStringColTitel.get(j),alsStoreString.get(j)[i]);
    glyphs.put(counter,g);
    ++counter;
  }
  generalManager.getGlyphManager().addGlyphs(glyphs);
  return glyphs;
}",0.9807555238774056
59082,"public void initData(){
  alDataStorages.clear();
  if (alSetData == null)   return;
  if (alSetSelection == null)   return;
  for (  ISet tmpSet : alSetData) {
    if (tmpSet.getSetType().equals(SetType.SET_GENE_EXPRESSION_DATA)) {
      for (      IStorage tmpStorage : tmpSet.getStorageByDim(0))       alDataStorages.add(tmpStorage);
    }
  }
  ArrayList<Integer> alTempList=alSetSelection.get(0).getSelectionIdArray();
  if (alTempList == null) {
    alTempList=new ArrayList<Integer>();
  }
  mapSelections.put(ESelectionType.EXTERNAL_SELECTION,alTempList);
  int iStorageLength=0;
  if (alDataStorages.size() > 0) {
    iStorageLength=alDataStorages.get(0).getArrayFloat().length;
  }
  alTempList=new ArrayList<Integer>(iStorageLength);
  for (int iCount=0; iCount < iStorageLength; iCount++) {
    if (bRenderOnlyContext) {
      int iDavidId=getDavidIDFromStorageIndex(iCount);
      if (iDavidId == -1) {
        generalManager.getLogger().log(Level.FINE,""String_Node_Str"");
        continue;
      }
 else {
        PathwayVertexGraphItem tmpPathwayVertexGraphItem=((PathwayVertexGraphItem)generalManager.getPathwayItemManager().getItem(generalManager.getPathwayItemManager().getPathwayVertexGraphItemIdByDavidId(iDavidId)));
        if (tmpPathwayVertexGraphItem == null) {
          generalManager.getLogger().log(Level.FINE,""String_Node_Str"");
          continue;
        }
      }
    }
    alTempList.add(iCount);
  }
  mapSelections.put(ESelectionType.COMPLETE_SELECTION,alTempList);
  alTempList=new ArrayList<Integer>();
  for (int iCount=0; iCount < alDataStorages.size(); iCount++) {
    alTempList.add(iCount);
  }
  mapSelections.put(ESelectionType.STORAGE_SELECTION,alTempList);
  initLists();
}","public void initData(){
  alDataStorages.clear();
  if (alSetData == null)   return;
  if (alSetSelection == null)   return;
  for (  ISet tmpSet : alSetData) {
    if (tmpSet.getSetType().equals(SetType.SET_GENE_EXPRESSION_DATA)) {
      for (      IStorage tmpStorage : tmpSet.getStorageByDim(0))       alDataStorages.add(tmpStorage);
    }
  }
  ArrayList<Integer> alTempList=alSetSelection.get(0).getSelectionIdArray();
  if (alTempList == null) {
    alTempList=new ArrayList<Integer>();
  }
  mapSelections.put(ESelectionType.EXTERNAL_SELECTION,alTempList);
  int iStorageLength=0;
  if (alDataStorages.size() > 0) {
    iStorageLength=2000;
  }
  alTempList=new ArrayList<Integer>(iStorageLength);
  for (int iCount=0; iCount < iStorageLength; iCount++) {
    if (bRenderOnlyContext) {
      int iDavidId=getDavidIDFromStorageIndex(iCount);
      if (iDavidId == -1) {
        generalManager.getLogger().log(Level.FINE,""String_Node_Str"");
        continue;
      }
 else {
        PathwayVertexGraphItem tmpPathwayVertexGraphItem=((PathwayVertexGraphItem)generalManager.getPathwayItemManager().getItem(generalManager.getPathwayItemManager().getPathwayVertexGraphItemIdByDavidId(iDavidId)));
        if (tmpPathwayVertexGraphItem == null) {
          generalManager.getLogger().log(Level.FINE,""String_Node_Str"");
          continue;
        }
      }
    }
    alTempList.add(iCount);
  }
  mapSelections.put(ESelectionType.COMPLETE_SELECTION,alTempList);
  alTempList=new ArrayList<Integer>();
  for (int iCount=0; iCount < alDataStorages.size(); iCount++) {
    alTempList.add(iCount);
  }
  mapSelections.put(ESelectionType.STORAGE_SELECTION,alTempList);
  initLists();
}",0.986470588235294
59083,"protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (remoteRenderingGLCanvas.getHierarchyLayerByGLCanvasListenerId(iUniqueId).getCapacity() > 5) {
    return;
  }
  ArrayList<Integer> iAlOldSelection;
switch (pickingType) {
case HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
  verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
break;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
pickingManager.flushHits(iUniqueId,pickingType);
break;
}
}","protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (remoteRenderingGLCanvas != null) {
    if (remoteRenderingGLCanvas.getHierarchyLayerByGLCanvasListenerId(iUniqueId).getCapacity() > 5) {
      return;
    }
  }
  ArrayList<Integer> iAlOldSelection;
switch (pickingType) {
case HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
  verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
break;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
pickingManager.flushHits(iUniqueId,pickingType);
break;
}
}",0.9808486669170108
59084,"private void renderCoordinateSystem(GL gl,final int iNumberAxis){
  textRenderer.setColor(0,0,0,1);
  gl.glColor4fv(ParCoordsRenderStyle.X_AXIS_COLOR,0);
  gl.glLineWidth(ParCoordsRenderStyle.X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(-0.1f,0.0f,0.0f);
  gl.glVertex3f(((iNumberAxis - 1) * fAxisSpacing) + 0.1f,0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=verticalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
  Set<Integer> mouseOverSet=verticalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
  ArrayList<Integer> alAxisSelection;
  if (bRenderStorageHorizontally)   alAxisSelection=alContentSelection;
 else   alAxisSelection=alStorageSelection;
  int iCount=0;
  while (iCount < iNumberAxis) {
    if (selectedSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_SELECTED_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_SELECTED_LINE_WIDTH);
    }
 else     if (mouseOverSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_LINE_WIDTH);
    }
 else {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_LINE_WIDTH);
    }
    gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.Y_AXIS_SELECTION,alAxisSelection.get(iCount)));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(iCount * fAxisSpacing,ParCoordsRenderStyle.Y_AXIS_LOW,ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing - ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing + ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glEnd();
    String sAxisLabel=null;
switch (eAxisDataType) {
case EXPERIMENT:
      sAxisLabel=alDataStorages.get(iCount).getLabel();
    break;
case GENE:
  sAxisLabel=getRefSeqFromStorageIndex(alContentSelection.get(iCount));
break;
default :
sAxisLabel=""String_Node_Str"";
}
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glTranslatef(iCount * fAxisSpacing,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
gl.glRotatef(25,0,0,1);
textRenderer.begin3DRendering();
textRenderer.draw3D(sAxisLabel,0,0,0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glRotatef(-25,0,0,1);
gl.glTranslatef(-iCount * fAxisSpacing,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
textRenderer.begin3DRendering();
textRenderer.draw3D(String.valueOf(1),iCount * fAxisSpacing + 2 * ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glPopAttrib();
gl.glPopName();
int iNumberOfButtons=0;
if (iCount != 0 || iCount != iNumberAxis - 1) iNumberOfButtons=4;
 else iNumberOfButtons=3;
float fXButtonOrigin=0;
float fYButtonOrigin=0;
int iPickingID=-1;
fXButtonOrigin=iCount * fAxisSpacing - (iNumberOfButtons * renderStyle.getButtonWidht() + (iNumberOfButtons - 1) * renderStyle.getButtonSpacing()) / 2;
fYButtonOrigin=-renderStyle.getAxisButtonYOffset();
if (iCount != 0) {
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_LEFT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_LEFT);
}
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.REMOVE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.REMOVE);
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.DUPLICATE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.DUPLICATE);
if (iCount != iNumberAxis - 1) {
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_RIGHT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_RIGHT);
}
iCount++;
}
}","private void renderCoordinateSystem(GL gl,final int iNumberAxis){
  textRenderer.setColor(0,0,0,1);
  gl.glColor4fv(ParCoordsRenderStyle.X_AXIS_COLOR,0);
  gl.glLineWidth(ParCoordsRenderStyle.X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(-0.1f,0.0f,0.0f);
  gl.glVertex3f(((iNumberAxis - 1) * fAxisSpacing) + 0.1f,0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=verticalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
  Set<Integer> mouseOverSet=verticalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
  ArrayList<Integer> alAxisSelection;
  if (bRenderStorageHorizontally)   alAxisSelection=alContentSelection;
 else   alAxisSelection=alStorageSelection;
  int iCount=0;
  while (iCount < iNumberAxis) {
    if (selectedSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_SELECTED_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_SELECTED_LINE_WIDTH);
    }
 else     if (mouseOverSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_LINE_WIDTH);
    }
 else {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_LINE_WIDTH);
    }
    gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.Y_AXIS_SELECTION,alAxisSelection.get(iCount)));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(iCount * fAxisSpacing,ParCoordsRenderStyle.Y_AXIS_LOW,ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing - ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing + ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glEnd();
    String sAxisLabel=null;
switch (eAxisDataType) {
case EXPERIMENT:
      sAxisLabel=alDataStorages.get(alStorageSelection.get(iCount)).getLabel();
    break;
case GENE:
  sAxisLabel=getRefSeqFromStorageIndex(alContentSelection.get(iCount));
break;
default :
sAxisLabel=""String_Node_Str"";
}
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glTranslatef(iCount * fAxisSpacing,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
gl.glRotatef(25,0,0,1);
textRenderer.begin3DRendering();
textRenderer.draw3D(sAxisLabel,0,0,0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glRotatef(-25,0,0,1);
gl.glTranslatef(-iCount * fAxisSpacing,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
textRenderer.begin3DRendering();
textRenderer.draw3D(String.valueOf(1),iCount * fAxisSpacing + 2 * ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glPopAttrib();
gl.glPopName();
int iNumberOfButtons=0;
if (iCount != 0 || iCount != iNumberAxis - 1) iNumberOfButtons=4;
 else iNumberOfButtons=3;
float fXButtonOrigin=0;
float fYButtonOrigin=0;
int iPickingID=-1;
fXButtonOrigin=iCount * fAxisSpacing - (iNumberOfButtons * renderStyle.getButtonWidht() + (iNumberOfButtons - 1) * renderStyle.getButtonSpacing()) / 2;
fYButtonOrigin=-renderStyle.getAxisButtonYOffset();
if (iCount != 0) {
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_LEFT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_LEFT);
}
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.REMOVE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.REMOVE);
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.DUPLICATE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.DUPLICATE);
if (iCount != iNumberAxis - 1) {
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_RIGHT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_RIGHT);
}
iCount++;
}
}",0.996005326231691
59085,"protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (remoteRenderingGLCanvas.getHierarchyLayerByGLCanvasListenerId(iUniqueId).getCapacity() > 5) {
    return;
  }
  ArrayList<Integer> iAlOldSelection;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
  horizontalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
horizontalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (ePolylineDataType == EInputDataType.GENE && !bAngularBrushingSelectPolyline) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
if (ePolylineDataType == EInputDataType.GENE) propagateGeneSelection(iExternalID,1,iAlOldSelection);
horizontalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
horizontalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
rePosition(iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
System.out.println(""String_Node_Str"");
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
if (iExternalID == EIconIDs.TOGGLE_RENDER_ARRAY_AS_POLYLINE.ordinal()) {
if (bRenderStorageHorizontally == true) renderStorageAsPolyline();
 else renderStorageAsPolyline();
}
 else if (iExternalID == EIconIDs.TOGGLE_PREVENT_OCCLUSION.ordinal()) {
if (bPreventOcclusion == true) preventOcclusion(false);
 else preventOcclusion(true);
}
 else if (iExternalID == EIconIDs.TOGGLE_RENDER_SELECTION.ordinal()) {
if (bRenderSelection == true) renderSelection(false);
 else renderSelection(true);
}
 else if (iExternalID == EIconIDs.RESET_SELECTIONS.ordinal()) {
resetSelections();
}
 else if (iExternalID == EIconIDs.SAVE_SELECTIONS.ordinal()) {
ArrayList<Integer> iAlSelection=new ArrayList<Integer>();
ArrayList<Integer> iAlGroup=new ArrayList<Integer>();
if (bRenderSelection) {
Set<Integer> deselectedSet=horizontalSelectionManager.getElements(EViewInternalSelectionType.DESELECTED);
addSetToSelection(deselectedSet,iAlSelection,iAlGroup,-1);
propagateGenes(iAlSelection,iAlGroup);
}
 else {
Set<Integer> set=horizontalSelectionManager.getElements(EViewInternalSelectionType.NORMAL);
addSetToSelection(set,iAlSelection,iAlGroup,0);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
addSetToSelection(set,iAlSelection,iAlGroup,1);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
addSetToSelection(set,iAlSelection,iAlGroup,2);
}
mergeSelection(iAlSelection,iAlGroup,null);
propagateGeneSet();
renderSelection(true);
extSelectionManager.clear();
}
 else if (iExternalID == EIconIDs.ANGULAR_BRUSHING.ordinal()) {
bAngularBrushingSelectPolyline=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (bRenderStorageHorizontally) {
alContentSelection.remove(iExternalID);
}
 else {
alStorageSelection.remove(iExternalID);
}
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID > 0 && iExternalID < alSelection.size()) {
int iTemp=alSelection.get(iExternalID - 1);
alSelection.set(iExternalID - 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID >= 0 && iExternalID < alSelection.size() - 1) {
int iTemp=alSelection.get(iExternalID + 1);
alSelection.set(iExternalID + 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
alSelection.add(iExternalID + 1,alSelection.get(iExternalID));
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueId,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}","protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (remoteRenderingGLCanvas != null) {
    if (remoteRenderingGLCanvas.getHierarchyLayerByGLCanvasListenerId(iUniqueId).getCapacity() > 5) {
      return;
    }
  }
  ArrayList<Integer> iAlOldSelection;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
  horizontalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
horizontalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (ePolylineDataType == EInputDataType.GENE && !bAngularBrushingSelectPolyline) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
if (ePolylineDataType == EInputDataType.GENE) propagateGeneSelection(iExternalID,1,iAlOldSelection);
horizontalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
horizontalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
rePosition(iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
System.out.println(""String_Node_Str"");
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
if (iExternalID == EIconIDs.TOGGLE_RENDER_ARRAY_AS_POLYLINE.ordinal()) {
if (bRenderStorageHorizontally == true) renderStorageAsPolyline();
 else renderStorageAsPolyline();
}
 else if (iExternalID == EIconIDs.TOGGLE_PREVENT_OCCLUSION.ordinal()) {
if (bPreventOcclusion == true) preventOcclusion(false);
 else preventOcclusion(true);
}
 else if (iExternalID == EIconIDs.TOGGLE_RENDER_SELECTION.ordinal()) {
if (bRenderSelection == true) renderSelection(false);
 else renderSelection(true);
}
 else if (iExternalID == EIconIDs.RESET_SELECTIONS.ordinal()) {
resetSelections();
}
 else if (iExternalID == EIconIDs.SAVE_SELECTIONS.ordinal()) {
ArrayList<Integer> iAlSelection=new ArrayList<Integer>();
ArrayList<Integer> iAlGroup=new ArrayList<Integer>();
if (bRenderSelection) {
Set<Integer> deselectedSet=horizontalSelectionManager.getElements(EViewInternalSelectionType.DESELECTED);
addSetToSelection(deselectedSet,iAlSelection,iAlGroup,-1);
propagateGenes(iAlSelection,iAlGroup);
}
 else {
Set<Integer> set=horizontalSelectionManager.getElements(EViewInternalSelectionType.NORMAL);
addSetToSelection(set,iAlSelection,iAlGroup,0);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
addSetToSelection(set,iAlSelection,iAlGroup,1);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
addSetToSelection(set,iAlSelection,iAlGroup,2);
}
mergeSelection(iAlSelection,iAlGroup,null);
propagateGeneSet();
renderSelection(true);
extSelectionManager.clear();
}
 else if (iExternalID == EIconIDs.ANGULAR_BRUSHING.ordinal()) {
bAngularBrushingSelectPolyline=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (bRenderStorageHorizontally) {
alContentSelection.remove(iExternalID);
}
 else {
alStorageSelection.remove(iExternalID);
}
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID > 0 && iExternalID < alSelection.size()) {
int iTemp=alSelection.get(iExternalID - 1);
alSelection.set(iExternalID - 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID >= 0 && iExternalID < alSelection.size() - 1) {
int iTemp=alSelection.get(iExternalID + 1);
alSelection.set(iExternalID + 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
alSelection.add(iExternalID + 1,alSelection.get(iExternalID));
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueId,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}",0.9954247905961848
59086,"public ParserTokenHandler(final StorageType setType,final int iSetIndex){
  this.bArrayListNotVector=true;
  this.iIndex=iSetIndex;
  this.enumStorageType=setType;
}","/** 
 * Constructor.
 */
public ParserTokenHandler(final StorageType setType,final int iSetIndex){
  this.bArrayListNotVector=true;
  this.iIndex=iSetIndex;
  this.enumStorageType=setType;
}",0.9295774647887324
59087,"/** 
 * Defines a pattern for parsing 
 */
public final boolean setTokenPattern(final String tokenPattern){
  boolean bAllTokensProper=true;
  StringTokenizer tokenizer=new StringTokenizer(tokenPattern);
  final String sTokenPatternParserSeperator=IGeneralManager.sDelimiter_Parser_DataType;
  alTokenTargetToParserTokenType.clear();
  while (tokenizer.hasMoreTokens()) {
    String sBuffer=tokenizer.nextToken(sTokenPatternParserSeperator);
    if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      alTokenTargetToParserTokenType.add(new ParserTokenHandler(StorageType.ABORT));
      return bAllTokensProper;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      alTokenTargetToParserTokenType.add(new ParserTokenHandler(StorageType.SKIP));
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.INT.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.INT,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.FLOAT.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.FLOAT,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.DOUBLE.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.DOUBLE,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.STRING.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.STRING,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else {
      bAllTokensProper=false;
      System.err.println(""String_Node_Str"" + sBuffer + ""String_Node_Str"");
    }
  }
  return bAllTokensProper;
}","/** 
 * Defines a pattern for parsing 
 */
public final boolean setTokenPattern(final String tokenPattern){
  boolean bAllTokensProper=true;
  StringTokenizer tokenizer=new StringTokenizer(tokenPattern);
  final String sTokenPatternParserSeperator=IGeneralManager.sDelimiter_Parser_DataType;
  alTokenTargetToParserTokenType.clear();
  while (tokenizer.hasMoreTokens()) {
    String sBuffer=tokenizer.nextToken(sTokenPatternParserSeperator);
    if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      alTokenTargetToParserTokenType.add(new ParserTokenHandler(StorageType.ABORT));
      return bAllTokensProper;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      alTokenTargetToParserTokenType.add(new ParserTokenHandler(StorageType.SKIP));
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.INT.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.INT,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.FLOAT.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.FLOAT,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.DOUBLE.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.DOUBLE,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else     if (sBuffer.equalsIgnoreCase(""String_Node_Str"")) {
      int iIndexFromType=StorageType.STRING.ordinal();
      ParserTokenHandler addType=new ParserTokenHandler(StorageType.STRING,iIndexPerArray[iIndexFromType]);
      alTokenTargetToParserTokenType.add(addType);
      iIndexPerArray[iIndexFromType]++;
    }
 else {
      bAllTokensProper=false;
      generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + tokenPattern);
    }
  }
  return bAllTokensProper;
}",0.9766174801362087
59088,"protected int loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  ListIterator<ParserTokenHandler> iterForAllocationInit=alTokenTargetToParserTokenType.listIterator();
  ParserTokenHandler bufferAllocationTokenInit;
  Vector<StorageType> vecBuffersTorage=new Vector<StorageType>();
  progressBarSetStoreInitTitle(""String_Node_Str"" + this.getFileName(),0,alTargetStorages.size());
  for (  IStorage tmpStorage : alTargetStorages) {
    boolean bStayInLoop=true;
    while ((iterForAllocationInit.hasNext()) && (bStayInLoop)) {
      bufferAllocationTokenInit=iterForAllocationInit.next();
switch (bufferAllocationTokenInit.getType()) {
case INT:
        tmpStorage.setSize(StorageType.INT,iNumberOfLinesInFile);
      vecBuffersTorage.addElement(StorageType.INT);
    bStayInLoop=false;
  break;
case FLOAT:
tmpStorage.setSize(StorageType.FLOAT,iNumberOfLinesInFile);
vecBuffersTorage.addElement(StorageType.FLOAT);
bStayInLoop=false;
break;
case STRING:
tmpStorage.setSize(StorageType.STRING,iNumberOfLinesInFile);
vecBuffersTorage.addElement(StorageType.STRING);
bStayInLoop=false;
break;
default :
}
}
}
Vector<String> vecBufferText=new Vector<String>(10);
StringBuffer strLineBuffer=new StringBuffer();
String sLine;
int lineInFile=0;
int lineInFile_CurrentDataIndex=0;
while (((sLine=brFile.readLine()) != null) && (lineInFile <= iStopParsingAtLine)) {
if (lineInFile >= this.iStartParsingAtLine) {
boolean bMaintainLoop=true;
StringTokenizer strTokenText=new StringTokenizer(sLine,""String_Node_Str"");
strLineBuffer.setLength(0);
vecBufferText.clear();
int iCountTokens=strTokenText.countTokens();
if ((iCountTokens % 2) == 0) {
strTokenText=new StringTokenizer(sLine.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
}
if (iCountTokens > 1) {
strLineBuffer.append(strTokenText.nextToken());
boolean bToggle_Buffer=true;
while (strTokenText.hasMoreTokens()) {
String sBuffer=strTokenText.nextToken().trim();
if (bToggle_Buffer) {
vecBufferText.addElement(sBuffer);
strLineBuffer.append(sBuffer);
strLineBuffer.append(""String_Node_Str"");
bToggle_Buffer=false;
}
 else {
strLineBuffer.append(sBuffer);
bToggle_Buffer=true;
}
}
}
 else {
strLineBuffer.append(sLine);
}
StringTokenizer strToken=new StringTokenizer(new String(strLineBuffer));
ListIterator<ParserTokenHandler> iterPerLine=alTokenTargetToParserTokenType.listIterator();
int iDataArrayIndexPerLine=0;
ParserTokenHandler bufferIter=null;
while ((strToken.hasMoreTokens()) && (bMaintainLoop)) {
String sTokenObject=strToken.nextToken();
String[] bufferStringArray=null;
try {
bufferIter=iterPerLine.next();
switch (bufferIter.getType()) {
case ABORT:
bMaintainLoop=false;
break;
case INT:
int[] bufferIntArray=alTargetStorages.get(iDataArrayIndexPerLine).getArrayInt();
if (bufferIntArray == null) {
generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
break;
}
bufferIntArray[lineInFile_CurrentDataIndex]=new Integer(sTokenObject);
iDataArrayIndexPerLine++;
break;
case FLOAT:
float[] bufferFloatArray=alTargetStorages.get(iDataArrayIndexPerLine).getArrayFloat();
bufferFloatArray[lineInFile_CurrentDataIndex]=new Float(sTokenObject);
iDataArrayIndexPerLine++;
break;
case STRING:
bufferStringArray=alTargetStorages.get(iDataArrayIndexPerLine).getArrayString();
if (bufferStringArray == null) {
generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
break;
}
bufferStringArray[lineInFile_CurrentDataIndex]=sTokenObject;
if (bufferStringArray.length > iDataArrayIndexPerLine) {
iDataArrayIndexPerLine++;
}
 else {
System.err.println(""String_Node_Str"" + lineInFile_CurrentDataIndex + ""String_Node_Str""+ iDataArrayIndexPerLine+ ""String_Node_Str""+ bufferStringArray[lineInFile_CurrentDataIndex]+ ""String_Node_Str"");
;
}
iDataArrayIndexPerLine++;
break;
case SKIP:
break;
default :
System.err.println(""String_Node_Str"");
}
}
 catch (NoSuchElementException nsee) {
bMaintainLoop=false;
}
catch (NumberFormatException nfe) {
if (bufferIter == null) {
}
 else {
}
}
catch (ArrayIndexOutOfBoundsException aie) {
String info=""String_Node_Str"" + lineInFile_CurrentDataIndex + ""String_Node_Str"";
if (bufferStringArray != null) {
info+=bufferStringArray.toString();
}
 else {
info+=""String_Node_Str"";
}
info+=""String_Node_Str"" + aie.toString();
System.out.println(""String_Node_Str"" + iDataArrayIndexPerLine + ""String_Node_Str""+ aie.toString());
iDataArrayIndexPerLine++;
}
}
lineInFile_CurrentDataIndex++;
}
lineInFile++;
super.progressBarStoredIncrement();
}
iLineInFile=lineInFile;
iLineInFile_CurrentDataIndex=lineInFile_CurrentDataIndex;
super.progressBarResetTitle();
super.progressBarIncrement(10);
return lineInFile - this.iStartParsingAtLine;
}","protected int loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  ListIterator<ParserTokenHandler> iterForAllocationInit=alTokenTargetToParserTokenType.listIterator();
  ParserTokenHandler bufferAllocationTokenInit;
  Vector<StorageType> vecBuffersTorage=new Vector<StorageType>();
  progressBarSetStoreInitTitle(""String_Node_Str"" + this.getFileName(),0,alTargetStorages.size());
  for (  IStorage tmpStorage : alTargetStorages) {
    boolean bStayInLoop=true;
    while ((iterForAllocationInit.hasNext()) && (bStayInLoop)) {
      bufferAllocationTokenInit=iterForAllocationInit.next();
switch (bufferAllocationTokenInit.getType()) {
case INT:
        tmpStorage.setSize(StorageType.INT,iNumberOfLinesInFile);
      vecBuffersTorage.addElement(StorageType.INT);
    bStayInLoop=false;
  break;
case FLOAT:
tmpStorage.setSize(StorageType.FLOAT,iNumberOfLinesInFile);
vecBuffersTorage.addElement(StorageType.FLOAT);
bStayInLoop=false;
break;
case STRING:
tmpStorage.setSize(StorageType.STRING,iNumberOfLinesInFile);
vecBuffersTorage.addElement(StorageType.STRING);
bStayInLoop=false;
break;
default :
}
}
}
Vector<String> vecBufferText=new Vector<String>(10);
StringBuffer strLineBuffer=new StringBuffer();
String sLine;
int lineInFile=0;
int lineInFile_CurrentDataIndex=0;
while (((sLine=brFile.readLine()) != null) && (lineInFile <= iStopParsingAtLine)) {
if (lineInFile >= this.iStartParsingAtLine) {
boolean bMaintainLoop=true;
StringTokenizer strTokenText=new StringTokenizer(sLine,""String_Node_Str"");
strLineBuffer.setLength(0);
vecBufferText.clear();
int iCountTokens=strTokenText.countTokens();
if ((iCountTokens % 2) == 0) {
strTokenText=new StringTokenizer(sLine.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
}
if (iCountTokens > 1) {
strLineBuffer.append(strTokenText.nextToken());
boolean bToggle_Buffer=true;
while (strTokenText.hasMoreTokens()) {
String sBuffer=strTokenText.nextToken().trim();
if (bToggle_Buffer) {
vecBufferText.addElement(sBuffer);
strLineBuffer.append(sBuffer);
strLineBuffer.append(""String_Node_Str"");
bToggle_Buffer=false;
}
 else {
strLineBuffer.append(sBuffer);
bToggle_Buffer=true;
}
}
}
 else {
strLineBuffer.append(sLine);
}
StringTokenizer strToken=new StringTokenizer(new String(strLineBuffer));
ListIterator<ParserTokenHandler> iterPerLine=alTokenTargetToParserTokenType.listIterator();
int iDataArrayIndexPerLine=0;
ParserTokenHandler bufferIter=null;
while ((strToken.hasMoreTokens()) && (bMaintainLoop)) {
String sTokenObject=strToken.nextToken();
String[] bufferStringArray=null;
try {
bufferIter=iterPerLine.next();
switch (bufferIter.getType()) {
case ABORT:
bMaintainLoop=false;
break;
case INT:
int[] bufferIntArray=alTargetStorages.get(iDataArrayIndexPerLine).getArrayInt();
if (bufferIntArray == null) {
generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
break;
}
bufferIntArray[lineInFile_CurrentDataIndex]=new Integer(sTokenObject);
iDataArrayIndexPerLine++;
break;
case FLOAT:
float[] bufferFloatArray=alTargetStorages.get(iDataArrayIndexPerLine).getArrayFloat();
bufferFloatArray[lineInFile_CurrentDataIndex]=new Float(sTokenObject);
iDataArrayIndexPerLine++;
break;
case STRING:
bufferStringArray=alTargetStorages.get(iDataArrayIndexPerLine).getArrayString();
if (bufferStringArray == null) {
generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
break;
}
bufferStringArray[lineInFile_CurrentDataIndex]=sTokenObject;
iDataArrayIndexPerLine++;
break;
case SKIP:
break;
default :
generalManager.getLogger().log(Level.WARNING,""String_Node_Str"");
}
}
 catch (NoSuchElementException nsee) {
bMaintainLoop=false;
}
catch (NumberFormatException nfe) {
if (bufferIter == null) {
}
 else {
}
}
catch (ArrayIndexOutOfBoundsException aie) {
String info=""String_Node_Str"" + lineInFile_CurrentDataIndex + ""String_Node_Str"";
if (bufferStringArray != null) {
info+=bufferStringArray.toString();
}
 else {
info+=""String_Node_Str"";
}
info+=""String_Node_Str"" + aie.toString();
System.out.println(""String_Node_Str"" + iDataArrayIndexPerLine + ""String_Node_Str""+ aie.toString());
iDataArrayIndexPerLine++;
}
}
lineInFile_CurrentDataIndex++;
}
lineInFile++;
super.progressBarStoredIncrement();
}
iLineInFile=lineInFile;
iLineInFile_CurrentDataIndex=lineInFile_CurrentDataIndex;
super.progressBarResetTitle();
super.progressBarIncrement(10);
return lineInFile - this.iStartParsingAtLine;
}",0.960758665794637
59089,"public void setupGlyphDictionary(ISet glyphDictionary){
  if (glyphDictionary == null) {
    this.generalManager.getLogger().log(Level.WARNING,""String_Node_Str"");
    return;
  }
  HashMap<String,GlyphAttributeType> dataTypes=new HashMap<String,GlyphAttributeType>();
  IStorage storageIDs=glyphDictionary.getStorageByDimAndIndex(0,0);
  IStorage storageDomains=glyphDictionary.getStorageByDimAndIndex(0,1);
  int size=storageDomains.getSize(StorageType.STRING);
  System.out.println(storageDomains.getLabel());
  for (int i=0; i < size; ++i) {
    System.out.println(storageDomains.getArrayString()[i]);
  }
}","public void setupGlyphDictionary(ISet glyphDictionary){
  if (glyphDictionary == null) {
    this.generalManager.getLogger().log(Level.WARNING,""String_Node_Str"");
    return;
  }
  HashMap<String,GlyphAttributeType> dataTypes=new HashMap<String,GlyphAttributeType>();
  IStorage storageDomains=glyphDictionary.getStorageByDimAndIndex(0,1);
  IStorage storageNominal=glyphDictionary.getStorageByDimAndIndex(0,2);
  IStorage storageGroup=glyphDictionary.getStorageByDimAndIndex(0,3);
  IStorage storageOrdinal=glyphDictionary.getStorageByDimAndIndex(0,4);
  int size=storageDomains.getSize(StorageType.STRING);
  System.out.println(storageDomains.getLabel());
  for (int i=0; i < size; ++i) {
    System.out.println(storageDomains.getArrayString()[i]);
  }
}",0.7935578330893118
59090,"public void render(final GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  int iLineCount=0;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  int panelHeight=0;
  if (sAlContent.isEmpty())   panelHeight=0;
 else   panelHeight=(sAlContent.size() + 1) * AInfoOverlayRenderStyle.LINE_HEIGHT;
  if (panelHeight > AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT)   panelHeight=AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT;
  if (drawable.getWidth() == 0 || drawable.getHeight() == 0)   return;
  Graphics2D g2d=glOverlay.createGraphics();
  g2d.setComposite(AlphaComposite.Src);
  int iXPos=(viewport[2] - AInfoOverlayRenderStyle.OVERLAY_WIDTH) / 2;
  int iYPos=0;
  g2d.setColor(new Color(1,1,1,0));
  g2d.fillRect(iXPos,iYPos,AInfoOverlayRenderStyle.OVERLAY_WIDTH,AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT);
  g2d.setColor(AInfoOverlayRenderStyle.backgroundColor);
  g2d.fillRect(iXPos,iYPos,AInfoOverlayRenderStyle.OVERLAY_WIDTH,panelHeight);
  g2d.setColor(AInfoOverlayRenderStyle.borderColor);
  g2d.drawRect(iXPos,iYPos,AInfoOverlayRenderStyle.OVERLAY_WIDTH,panelHeight);
  g2d.setColor(AInfoOverlayRenderStyle.fontColor);
  g2d.setFont(font);
  Iterator<String> iterContentCreator=sAlContent.iterator();
  while (iterContentCreator.hasNext()) {
    iLineCount++;
    g2d.drawString(iterContentCreator.next(),(viewport[2] - AInfoOverlayRenderStyle.OVERLAY_WIDTH) / 2 + 10,iLineCount * AInfoOverlayRenderStyle.LINE_HEIGHT);
  }
  glOverlay.markDirty((viewport[2] - AInfoOverlayRenderStyle.OVERLAY_WIDTH) / 2,0,AInfoOverlayRenderStyle.OVERLAY_WIDTH,AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT);
  glOverlay.drawAll();
  g2d.dispose();
}","public void render(final GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  int iLineCount=0;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  int panelHeight=0;
  if (sAlContent.isEmpty())   panelHeight=0;
 else   panelHeight=(sAlContent.size() + 1) * AInfoOverlayRenderStyle.LINE_HEIGHT;
  if (panelHeight > AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT)   panelHeight=AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT;
  if (drawable.getWidth() == 0 || drawable.getHeight() == 0)   return;
  Graphics2D g2d=glOverlay.createGraphics();
  g2d.setComposite(AlphaComposite.Src);
  int iXPos=(viewport[2] - AInfoOverlayRenderStyle.OVERLAY_WIDTH) / 2;
  int iYPos=0;
  g2d.setColor(new Color(1,1,1,0));
  g2d.fillRect(iXPos,iYPos,AInfoOverlayRenderStyle.OVERLAY_WIDTH,AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT);
  g2d.setColor(AInfoOverlayRenderStyle.backgroundColor);
  g2d.fillRect(iXPos,iYPos,AInfoOverlayRenderStyle.OVERLAY_WIDTH,panelHeight);
  g2d.setColor(AInfoOverlayRenderStyle.borderColor);
  g2d.drawRect(iXPos,iYPos,AInfoOverlayRenderStyle.OVERLAY_WIDTH - 1,panelHeight);
  g2d.setColor(AInfoOverlayRenderStyle.fontColor);
  g2d.setFont(font);
  Iterator<String> iterContentCreator=sAlContent.iterator();
  while (iterContentCreator.hasNext()) {
    iLineCount++;
    g2d.drawString(iterContentCreator.next(),(viewport[2] - AInfoOverlayRenderStyle.OVERLAY_WIDTH) / 2 + 10,iLineCount * AInfoOverlayRenderStyle.LINE_HEIGHT);
  }
  glOverlay.markDirty((viewport[2] - AInfoOverlayRenderStyle.OVERLAY_WIDTH) / 2,0,AInfoOverlayRenderStyle.OVERLAY_WIDTH,AInfoOverlayRenderStyle.MAX_OVERLAY_HEIGHT);
  glOverlay.drawAll();
  g2d.dispose();
}",0.9987973541791942
59091,"public void init(GL gl){
  grid_=new GLCanvasGlyphGrid();
  grid_.buildGrid(gl);
  for (  ISet tmpSet : alSetData) {
    IStorage storagePatientID=tmpSet.getStorageByDimAndIndex(0,0);
    IStorage storageTestInt=tmpSet.getStorageByDimAndIndex(0,1);
    IStorage storageTestFloat=tmpSet.getStorageByDimAndIndex(0,2);
    IStorage storageTestText=tmpSet.getStorageByDimAndIndex(0,3);
  }
}","public void init(GL gl){
  ISet glyphMapping=null;
  ISet glyphData=null;
  for (  ISet tmpSet : alSetData) {
    System.out.println(tmpSet.getLabel());
    if (tmpSet.getLabel().equals(""String_Node_Str""))     glyphMapping=tmpSet;
    if (tmpSet.getLabel().equals(""String_Node_Str""))     glyphData=tmpSet;
  }
  grid_=new GLCanvasGlyphGrid();
  grid_.loadGlyphs(gl,glyphMapping,glyphData);
  grid_.buildGrid(gl);
  Iterator<GlyphEntry> git=grid_.getGlyphList().values().iterator();
  while (git.hasNext()) {
    GlyphEntry e=git.next();
    e.generateGLLists(gl);
  }
}",0.2133891213389121
59092,"public void displayLocal(GL gl){
  pickingManager.handlePicking(iUniqueId,gl,true);
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","public void displayLocal(GL gl){
  gl.glTranslatef(0f,0f,-10f);
  gl.glRotatef(45f,1,0,0);
  gl.glRotatef(80f,-1,0,0);
  pickingManager.handlePicking(iUniqueId,gl,true);
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.7922705314009661
59093,"public void display(GL gl){
  gl.glPushMatrix();
  gl.glRotatef(45f,0,0,1);
  gl.glScalef(0.2f,0.2f,0.2f);
  GLSharedObjects.drawAxis(gl);
  gl.glBegin(GL.GL_POLYGON);
{
    displayList_=gl.glGenLists(1);
    gl.glNewList(displayList_,GL.GL_COMPILE);
    Iterator<GlyphEntry> git=grid_.getGlyphList().values().iterator();
    while (git.hasNext()) {
      GlyphEntry e=git.next();
      Vec2i pos=grid_.getGridPosition(e.getX(),e.getY());
      gl.glTranslatef((float)pos.x(),-(float)pos.y(),0f);
      gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.GLYPH_FIELD_SELECTION,e.getID()));
      gl.glCallList(e.getGlList(gl));
      gl.glPopName();
      gl.glTranslatef(-(float)pos.x(),(float)pos.y(),0f);
    }
    gl.glEndList();
  }
  int g=grid_.getGridLayout();
  if (displayList_ >= 0)   gl.glCallList(displayList_);
  gl.glEnd();
  gl.glPopMatrix();
  if (mouseListener_ != null)   mouseListener_.render();
}","public void display(GL gl){
  if (grid_ == null)   return;
  gl.glPushMatrix();
  gl.glRotatef(45f,0,0,1);
  gl.glScalef(0.15f,0.15f,0.15f);
  GLSharedObjects.drawAxis(gl);
  if (displayList_ < 0 || bRedrawDisplayList_) {
    gl.glDeleteLists(displayList_,1);
    displayList_=gl.glGenLists(1);
    gl.glNewList(displayList_,GL.GL_COMPILE);
    if (grid_.getGlyphList() == null) {
      gl.glPopMatrix();
      return;
    }
    Iterator<GlyphEntry> git=grid_.getGlyphList().values().iterator();
    while (git.hasNext()) {
      GlyphEntry e=git.next();
      Vec2i pos=grid_.getGridPosition(e.getX(),e.getY());
      gl.glTranslatef((float)pos.x(),-(float)pos.y(),0f);
      gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.GLYPH_FIELD_SELECTION,e.getID()));
      gl.glCallList(e.getGlList(gl));
      gl.glPopName();
      gl.glTranslatef(-(float)pos.x(),(float)pos.y(),0f);
    }
    gl.glEndList();
    bRedrawDisplayList_=false;
  }
  if (displayListGrid_ >= 0)   gl.glCallList(displayListGrid_);
  if (displayList_ >= 0)   gl.glCallList(displayList_);
  gl.glPopMatrix();
  if (mouseListener_ != null)   mouseListener_.render();
}",0.8061420345489443
59094,"protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (pickingType != EPickingType.GLYPH_FIELD_SELECTION)   return;
switch (pickingMode) {
case CLICKED:
    GlyphEntry g=grid_.getGlyph(iExternalID);
  System.out.println(""String_Node_Str"" + Integer.toString(iExternalID) + ""String_Node_Str""+ g.getX()+ ""String_Node_Str""+ g.getY());
grid_.deSelectAll();
g.select();
break;
default :
}
pickingManager.flushHits(iUniqueId,pickingType);
}","protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (pickingType != EPickingType.GLYPH_FIELD_SELECTION)   return;
switch (pickingMode) {
case CLICKED:
    GlyphEntry g=grid_.getGlyph(iExternalID);
  int patientid=g.getParameter(1);
int stagingT=g.getParameter(2);
System.out.println(""String_Node_Str"" + Integer.toString(iExternalID) + ""String_Node_Str""+ g.getX()+ ""String_Node_Str""+ g.getY()+ ""String_Node_Str""+ patientid+ ""String_Node_Str""+ stagingT);
grid_.deSelectAll();
g.select();
bRedrawDisplayList_=true;
break;
default :
}
pickingManager.flushHits(iUniqueId,pickingType);
}",0.8584070796460177
59095,"public void initLocal(GL gl){
  init(gl);
  parentGLCanvas.removeMouseWheelListener(pickingTriggerMouseAdapter);
  parentGLCanvas.addMouseWheelListener(mouseListener_);
}","public void initLocal(GL gl){
  init(gl);
  displayListGrid_=grid_.getGridLayout();
  parentGLCanvas.removeMouseWheelListener(pickingTriggerMouseAdapter);
  parentGLCanvas.addMouseWheelListener(mouseListener_);
}",0.8900523560209425
59096,"public void displayRemote(GL gl){
  if (bIsTranslationAnimationActive) {
    doTranslation();
  }
  if (bIsDisplayListDirtyRemote) {
    buildDisplayList(gl,iGLDisplayListIndexRemote);
    bIsDisplayListDirtyRemote=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  display(gl);
  checkForHits(gl);
}","public void displayRemote(GL gl){
  if (bIsTranslationAnimationActive) {
    bIsDisplayListDirtyRemote=true;
    doTranslation();
  }
  if (bIsDisplayListDirtyRemote) {
    buildDisplayList(gl,iGLDisplayListIndexRemote);
    bIsDisplayListDirtyRemote=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  display(gl);
  checkForHits(gl);
}",0.9454545454545454
59097,"private void renderCoordinateSystem(GL gl,final int iNumberAxis){
  textRenderer.setColor(0,0,0,1);
  gl.glColor4fv(ParCoordsRenderStyle.X_AXIS_COLOR,0);
  gl.glLineWidth(ParCoordsRenderStyle.X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(-0.1f,0.0f,0.0f);
  gl.glVertex3f(((iNumberAxis - 1) * fAxisSpacing) + 0.1f,0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=verticalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
  Set<Integer> mouseOverSet=verticalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
  ArrayList<Integer> alAxisSelection;
  if (bRenderStorageHorizontally)   alAxisSelection=alContentSelection;
 else   alAxisSelection=alStorageSelection;
  int iCount=0;
  while (iCount < iNumberAxis) {
    if (selectedSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_SELECTED_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_SELECTED_LINE_WIDTH);
    }
 else     if (mouseOverSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_LINE_WIDTH);
    }
 else {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_LINE_WIDTH);
    }
    gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.Y_AXIS_SELECTION,alAxisSelection.get(iCount)));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(iCount * fAxisSpacing,ParCoordsRenderStyle.Y_AXIS_LOW,ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing - ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing + ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glEnd();
    String sAxisLabel=null;
switch (eAxisDataType) {
case EXPERIMENT:
      sAxisLabel=""String_Node_Str"" + iCount;
    break;
case GENE:
  sAxisLabel=getRefSeqFromStorageIndex(alContentSelection.get(iCount));
break;
default :
sAxisLabel=""String_Node_Str"";
}
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glTranslatef(iCount * fAxisSpacing,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
gl.glRotatef(25,0,0,1);
textRenderer.begin3DRendering();
textRenderer.draw3D(sAxisLabel,0,0,0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glRotatef(-25,0,0,1);
gl.glTranslatef(-iCount * fAxisSpacing,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
textRenderer.begin3DRendering();
textRenderer.draw3D(String.valueOf(1),iCount * fAxisSpacing + 2 * ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glPopAttrib();
gl.glPopName();
int iNumberOfButtons=0;
if (iCount != 0 || iCount != iNumberAxis - 1) iNumberOfButtons=4;
 else iNumberOfButtons=3;
float fXButtonOrigin=0;
float fYButtonOrigin=0;
int iPickingID=-1;
fXButtonOrigin=iCount * fAxisSpacing - (iNumberOfButtons * renderStyle.getButtonWidht() + (iNumberOfButtons - 1) * renderStyle.getButtonSpacing()) / 2;
fYButtonOrigin=-renderStyle.getAxisButtonYOffset();
if (iCount != 0) {
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_LEFT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_LEFT);
}
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.REMOVE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.REMOVE);
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.DUPLICATE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.DUPLICATE);
if (iCount != iNumberAxis - 1) {
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_RIGHT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_RIGHT);
}
iCount++;
}
}","private void renderCoordinateSystem(GL gl,final int iNumberAxis){
  textRenderer.setColor(0,0,0,1);
  gl.glColor4fv(ParCoordsRenderStyle.X_AXIS_COLOR,0);
  gl.glLineWidth(ParCoordsRenderStyle.X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(-0.1f,0.0f,0.0f);
  gl.glVertex3f(((iNumberAxis - 1) * fAxisSpacing) + 0.1f,0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=verticalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
  Set<Integer> mouseOverSet=verticalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
  ArrayList<Integer> alAxisSelection;
  if (bRenderStorageHorizontally)   alAxisSelection=alContentSelection;
 else   alAxisSelection=alStorageSelection;
  int iCount=0;
  while (iCount < iNumberAxis) {
    if (selectedSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_SELECTED_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_SELECTED_LINE_WIDTH);
    }
 else     if (mouseOverSet.contains(alAxisSelection.get(iCount))) {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_MOUSE_OVER_LINE_WIDTH);
    }
 else {
      gl.glColor4fv(ParCoordsRenderStyle.Y_AXIS_COLOR,0);
      gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_LINE_WIDTH);
    }
    gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.Y_AXIS_SELECTION,alAxisSelection.get(iCount)));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(iCount * fAxisSpacing,ParCoordsRenderStyle.Y_AXIS_LOW,ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing - ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glVertex3f(iCount * fAxisSpacing + ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),ParCoordsRenderStyle.AXIS_Z);
    gl.glEnd();
    String sAxisLabel=null;
switch (eAxisDataType) {
case EXPERIMENT:
      sAxisLabel=""String_Node_Str"" + alAxisSelection.get(iCount);
    break;
case GENE:
  sAxisLabel=getRefSeqFromStorageIndex(alContentSelection.get(iCount));
break;
default :
sAxisLabel=""String_Node_Str"";
}
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glTranslatef(iCount * fAxisSpacing,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
gl.glRotatef(25,0,0,1);
textRenderer.begin3DRendering();
textRenderer.draw3D(sAxisLabel,0,0,0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glRotatef(-25,0,0,1);
gl.glTranslatef(-iCount * fAxisSpacing,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
textRenderer.begin3DRendering();
textRenderer.draw3D(String.valueOf(1),iCount * fAxisSpacing + 2 * ParCoordsRenderStyle.AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glPopAttrib();
gl.glPopName();
int iNumberOfButtons=0;
if (iCount != 0 || iCount != iNumberAxis - 1) iNumberOfButtons=4;
 else iNumberOfButtons=3;
float fXButtonOrigin=0;
float fYButtonOrigin=0;
int iPickingID=-1;
fXButtonOrigin=iCount * fAxisSpacing - (iNumberOfButtons * renderStyle.getButtonWidht() + (iNumberOfButtons - 1) * renderStyle.getButtonSpacing()) / 2;
fYButtonOrigin=-renderStyle.getAxisButtonYOffset();
if (iCount != 0) {
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_LEFT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_LEFT);
}
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.REMOVE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.REMOVE);
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.DUPLICATE_AXIS,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.DUPLICATE);
if (iCount != iNumberAxis - 1) {
fXButtonOrigin=fXButtonOrigin + renderStyle.getButtonWidht() + renderStyle.getButtonSpacing();
iPickingID=pickingManager.getPickingID(iUniqueId,EPickingType.MOVE_AXIS_RIGHT,iCount);
renderButton(gl,fXButtonOrigin,fYButtonOrigin,iPickingID,EIconTextures.ARROW_RIGHT);
}
iCount++;
}
}",0.996328029375765
59098,"protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (remoteRenderingGLCanvas.getHierarchyLayerByGLCanvasListenerId(iUniqueId).getCapacity() > 5) {
    return;
  }
  ArrayList<Integer> iAlOldSelection;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
  horizontalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
horizontalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (ePolylineDataType == EInputDataType.GENE && !bAngularBrushingSelectPolyline) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
if (ePolylineDataType == EInputDataType.GENE) propagateGeneSelection(iExternalID,1,iAlOldSelection);
horizontalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
horizontalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
System.out.println(""String_Node_Str"");
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
if (iExternalID == EIconIDs.TOGGLE_RENDER_ARRAY_AS_POLYLINE.ordinal()) {
if (bRenderStorageHorizontally == true) renderStorageAsPolyline();
 else renderStorageAsPolyline();
}
 else if (iExternalID == EIconIDs.TOGGLE_PREVENT_OCCLUSION.ordinal()) {
if (bPreventOcclusion == true) preventOcclusion(false);
 else preventOcclusion(true);
}
 else if (iExternalID == EIconIDs.TOGGLE_RENDER_SELECTION.ordinal()) {
if (bRenderSelection == true) renderSelection(false);
 else renderSelection(true);
}
 else if (iExternalID == EIconIDs.RESET_SELECTIONS.ordinal()) {
resetSelections();
}
 else if (iExternalID == EIconIDs.SAVE_SELECTIONS.ordinal()) {
ArrayList<Integer> iAlSelection=new ArrayList<Integer>();
ArrayList<Integer> iAlGroup=new ArrayList<Integer>();
if (bRenderSelection) {
Set<Integer> deselectedSet=horizontalSelectionManager.getElements(EViewInternalSelectionType.DESELECTED);
addSetToSelection(deselectedSet,iAlSelection,iAlGroup,-1);
propagateGenes(iAlSelection,iAlGroup);
}
 else {
Set<Integer> set=horizontalSelectionManager.getElements(EViewInternalSelectionType.NORMAL);
addSetToSelection(set,iAlSelection,iAlGroup,0);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
addSetToSelection(set,iAlSelection,iAlGroup,1);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
addSetToSelection(set,iAlSelection,iAlGroup,2);
}
mergeSelection(iAlSelection,iAlGroup,null);
propagateGeneSet();
renderSelection(true);
extSelectionManager.clear();
}
 else if (iExternalID == EIconIDs.ANGULAR_BRUSHING.ordinal()) {
bAngularBrushingSelectPolyline=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (bRenderStorageHorizontally) {
alContentSelection.remove(iExternalID);
}
 else {
alStorageSelection.remove(iExternalID);
}
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID > 0 && iExternalID < alSelection.size()) {
int iTemp=alSelection.get(iExternalID - 1);
alSelection.set(iExternalID - 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID >= 0 && iExternalID < alSelection.size() - 1) {
int iTemp=alSelection.get(iExternalID + 1);
alSelection.set(iExternalID + 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
alSelection.add(iExternalID + 1,alSelection.get(iExternalID));
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueId,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}","protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (remoteRenderingGLCanvas.getHierarchyLayerByGLCanvasListenerId(iUniqueId).getCapacity() > 5) {
    return;
  }
  ArrayList<Integer> iAlOldSelection;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
  horizontalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
horizontalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (ePolylineDataType == EInputDataType.GENE && !bAngularBrushingSelectPolyline) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
if (ePolylineDataType == EInputDataType.GENE) propagateGeneSelection(iExternalID,1,iAlOldSelection);
horizontalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
horizontalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
rePosition(iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
System.out.println(""String_Node_Str"");
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
if (iExternalID == EIconIDs.TOGGLE_RENDER_ARRAY_AS_POLYLINE.ordinal()) {
if (bRenderStorageHorizontally == true) renderStorageAsPolyline();
 else renderStorageAsPolyline();
}
 else if (iExternalID == EIconIDs.TOGGLE_PREVENT_OCCLUSION.ordinal()) {
if (bPreventOcclusion == true) preventOcclusion(false);
 else preventOcclusion(true);
}
 else if (iExternalID == EIconIDs.TOGGLE_RENDER_SELECTION.ordinal()) {
if (bRenderSelection == true) renderSelection(false);
 else renderSelection(true);
}
 else if (iExternalID == EIconIDs.RESET_SELECTIONS.ordinal()) {
resetSelections();
}
 else if (iExternalID == EIconIDs.SAVE_SELECTIONS.ordinal()) {
ArrayList<Integer> iAlSelection=new ArrayList<Integer>();
ArrayList<Integer> iAlGroup=new ArrayList<Integer>();
if (bRenderSelection) {
Set<Integer> deselectedSet=horizontalSelectionManager.getElements(EViewInternalSelectionType.DESELECTED);
addSetToSelection(deselectedSet,iAlSelection,iAlGroup,-1);
propagateGenes(iAlSelection,iAlGroup);
}
 else {
Set<Integer> set=horizontalSelectionManager.getElements(EViewInternalSelectionType.NORMAL);
addSetToSelection(set,iAlSelection,iAlGroup,0);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
addSetToSelection(set,iAlSelection,iAlGroup,1);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
addSetToSelection(set,iAlSelection,iAlGroup,2);
}
mergeSelection(iAlSelection,iAlGroup,null);
propagateGeneSet();
renderSelection(true);
extSelectionManager.clear();
}
 else if (iExternalID == EIconIDs.ANGULAR_BRUSHING.ordinal()) {
bAngularBrushingSelectPolyline=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (bRenderStorageHorizontally) {
alContentSelection.remove(iExternalID);
}
 else {
alStorageSelection.remove(iExternalID);
}
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID > 0 && iExternalID < alSelection.size()) {
int iTemp=alSelection.get(iExternalID - 1);
alSelection.set(iExternalID - 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID >= 0 && iExternalID < alSelection.size() - 1) {
int iTemp=alSelection.get(iExternalID + 1);
alSelection.set(iExternalID + 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
alSelection.add(iExternalID + 1,alSelection.get(iExternalID));
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueId,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}",0.9214476190476192
59099,"public void mouseDragged(MouseEvent e){
  int x=e.getX();
  int y=e.getY();
  Dimension size=e.getComponent().getSize();
  if (!bMouseRightButtonDown) {
    if (!bMouseMiddleButtonDown) {
      Rotf currentRotX=new Rotf();
      Rotf currentRotY=new Rotf();
      float fpercentX=(float)(x - prevMouseX) / (float)(size.width) * fMouseSensitivityRotation;
      float fpercentY=(float)(y - prevMouseY) / (float)(size.height) * fMouseSensitivityRotation;
      currentRotX.set(new Vec3f(0,1,0),fpercentX * MathUtil.PI);
      currentRotY.set(new Vec3f(1,0,0),fpercentY * MathUtil.PI);
      currentRotX=currentRotX.times(currentRotY);
      prevMouseX=x;
      prevMouseY=y;
      Iterator<AGLCanvasUser> iterGLCanvas=alGlCanvas.iterator();
      while (iterGLCanvas.hasNext()) {
        iterGLCanvas.next().getViewCamera().addCameraRotation(currentRotX);
      }
    }
 else {
      float zoomX=fZoomScale * (float)(x - prevMouseX);
      float zoomY=fZoomScale * (float)(prevMouseY - y);
      if ((zoomX < 0.0f) && (zoomY > 0.0f)) {
        zoomX=-zoomX;
      }
      prevMouseX=x;
      prevMouseY=y;
      Iterator<AGLCanvasUser> iterGLCanvas=alGlCanvas.iterator();
      while (iterGLCanvas.hasNext()) {
        iterGLCanvas.next().getViewCamera().addCameraScale(new Vec3f(0,0,zoomY + zoomX));
      }
    }
  }
 else {
    Vec3f addVec3f=new Vec3f(fPanScale * ((float)(x - prevMouseX) / (float)size.width),fPanScale * ((float)(prevMouseY - y) / (float)size.height),0.0f);
    prevMouseX=x;
    prevMouseY=y;
    Iterator<AGLCanvasUser> iterGLCanvas=alGlCanvas.iterator();
    while (iterGLCanvas.hasNext()) {
      iterGLCanvas.next().getViewCamera().addCameraPosition(addVec3f);
    }
  }
}","public void mouseDragged(MouseEvent e){
  int x=e.getX();
  int y=e.getY();
  Dimension size=e.getComponent().getSize();
  if (!bMouseRightButtonDown) {
    if (!bMouseMiddleButtonDown) {
    }
 else {
      float zoomX=fZoomScale * (float)(x - prevMouseX);
      float zoomY=fZoomScale * (float)(prevMouseY - y);
      if ((zoomX < 0.0f) && (zoomY > 0.0f)) {
        zoomX=-zoomX;
      }
      prevMouseX=x;
      prevMouseY=y;
      Iterator<AGLCanvasUser> iterGLCanvas=alGlCanvas.iterator();
      while (iterGLCanvas.hasNext()) {
        iterGLCanvas.next().getViewCamera().addCameraScale(new Vec3f(0,0,zoomY + zoomX));
      }
    }
  }
 else {
    Vec3f addVec3f=new Vec3f(fPanScale * ((float)(x - prevMouseX) / (float)size.width),fPanScale * ((float)(prevMouseY - y) / (float)size.height),0.0f);
    prevMouseX=x;
    prevMouseY=y;
    Iterator<AGLCanvasUser> iterGLCanvas=alGlCanvas.iterator();
    while (iterGLCanvas.hasNext()) {
      iterGLCanvas.next().getViewCamera().addCameraPosition(addVec3f);
    }
  }
}",0.4433823529411764
59100,"public void enable(final boolean bEnableRendering){
  this.bEnableRendering=bEnableRendering;
}","public void enable(final boolean bEnableRendering){
}",0.7162162162162162
59101,"public void displayLocal(final GL gl){
  if (pickingTriggerMouseAdapter.wasRightMouseButtonPressed()) {
    bEnableNavigationOverlay=!bEnableNavigationOverlay;
    glConnectionLineRenderer.enableRendering(!bEnableNavigationOverlay);
  }
  pickingManager.handlePicking(iUniqueId,gl,true);
  display(gl);
  if (pickingTriggerMouseAdapter.getPickedPoint() != null)   dragAndDrop.setCurrentMousePos(gl,pickingTriggerMouseAdapter.getPickedPoint());
  checkForHits(gl);
  if (pickingTriggerMouseAdapter.wasMouseReleased())   dragAndDrop.stopDragAction();
  pickingTriggerMouseAdapter.resetEvents();
}","public void displayLocal(final GL gl){
  if (pickingTriggerMouseAdapter.wasRightMouseButtonPressed()) {
    bEnableNavigationOverlay=!bEnableNavigationOverlay;
    glConnectionLineRenderer.enableRendering(!bEnableNavigationOverlay);
  }
  pickingManager.handlePicking(iUniqueId,gl,true);
  display(gl);
  if (pickingTriggerMouseAdapter.getPickedPoint() != null)   dragAndDrop.setCurrentMousePos(gl,pickingTriggerMouseAdapter.getPickedPoint());
  if (pickingTriggerMouseAdapter.wasMouseReleased())   dragAndDrop.stopDragAction();
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.8569023569023569
59102,"public void renderMemoPad(final GL gl){
  if (trashCanTexture == null)   return;
  TextureCoords texCoords=trashCanTexture.getImageTexCoords();
  gl.glPushName(generalManager.getSingelton().getViewGLCanvasManager().getPickingManager().getPickingID(iUniqueId,EPickingType.MEMO_PAD_SELECTION,MEMO_PAD_TRASH_CAN_PICKING_ID));
  trashCanTexture.enable();
  trashCanTexture.bind();
  gl.glColor3f(1,1,1);
  gl.glBegin(GL.GL_QUADS);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(-0.1f,0.09f,4.1f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(-0.5f,0.09f,4.1f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(-0.5f,0.455f,4.1f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(-0.1f,0.455f,4.1f);
  gl.glEnd();
  trashCanTexture.disable();
  gl.glPopName();
  if (textRenderer == null)   return;
  String sTmp=""String_Node_Str"";
  textRenderer.begin3DRendering();
  textRenderer.setColor(0.7f,0.7f,0.7f,1.0f);
  float fPosition=3f;
  for (int iCharacterIndex=0; iCharacterIndex < sTmp.length(); iCharacterIndex++) {
    textRenderer.draw3D(sTmp.subSequence(iCharacterIndex,iCharacterIndex + 1),-1.03f,fPosition,4.001f,0.003f);
    fPosition-=0.3f;
  }
  sTmp=""String_Node_Str"";
  fPosition=3f;
  for (int iCharacterIndex=0; iCharacterIndex < sTmp.length(); iCharacterIndex++) {
    textRenderer.draw3D(sTmp.subSequence(iCharacterIndex,iCharacterIndex + 1),4.79f,fPosition,4.001f,0.003f);
    fPosition-=0.3f;
  }
  textRenderer.end3DRendering();
}","public void renderMemoPad(final GL gl){
  if (trashCanTexture == null)   return;
  TextureCoords texCoords=trashCanTexture.getImageTexCoords();
  gl.glPushName(generalManager.getSingelton().getViewGLCanvasManager().getPickingManager().getPickingID(iUniqueId,EPickingType.MEMO_PAD_SELECTION,MEMO_PAD_TRASH_CAN_PICKING_ID));
  trashCanTexture.enable();
  trashCanTexture.bind();
  gl.glColor3f(1,1,1);
  gl.glBegin(GL.GL_QUADS);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(-0.15f,0.09f,4.1f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(-0.5f,0.09f,4.1f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(-0.5f,0.41f,4.1f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(-0.15f,0.41f,4.1f);
  gl.glEnd();
  trashCanTexture.disable();
  gl.glPopName();
  if (textRenderer == null)   return;
  String sTmp=""String_Node_Str"";
  textRenderer.begin3DRendering();
  textRenderer.setColor(0.7f,0.7f,0.7f,1.0f);
  float fPosition=3f;
  for (int iCharacterIndex=0; iCharacterIndex < sTmp.length(); iCharacterIndex++) {
    textRenderer.draw3D(sTmp.subSequence(iCharacterIndex,iCharacterIndex + 1),-1.03f,fPosition,4.001f,0.003f);
    fPosition-=0.3f;
  }
  sTmp=""String_Node_Str"";
  fPosition=3f;
  for (int iCharacterIndex=0; iCharacterIndex < sTmp.length(); iCharacterIndex++) {
    textRenderer.draw3D(sTmp.subSequence(iCharacterIndex,iCharacterIndex + 1),4.79f,fPosition,4.001f,0.003f);
    fPosition-=0.3f;
  }
  textRenderer.end3DRendering();
}",0.9421702404158544
59103,"protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
      iMouseOverViewID=iExternalID;
    generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
  break;
case CLICKED:
generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
if (poolLayer.containsElement(iExternalID)) {
loadViewToUnderInteractionLayer(iExternalID);
}
break;
case DRAGGED:
if (!dragAndDrop.isDragActionRunning()) dragAndDrop.startDragAction(iExternalID);
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.VIEW_SELECTION);
break;
case BUCKET_LOCK_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_lock=iExternalID;
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_LOCK_ICON_SELECTION);
break;
case BUCKET_MOVE_IN_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
loadViewToUnderInteractionLayer(iExternalID);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=iExternalID;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_IN_ICON_SELECTION);
break;
case BUCKET_MOVE_OUT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,poolLayer);
arSlerpActions.add(slerpActionTransition);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=iExternalID;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION);
break;
case BUCKET_MOVE_LEFT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 3) iDestinationPosIndex=0;
 else iDestinationPosIndex++;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=iExternalID;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION);
break;
case BUCKET_MOVE_RIGHT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 0) iDestinationPosIndex=3;
 else iDestinationPosIndex--;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=iExternalID;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION);
break;
case MEMO_PAD_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
int iDraggedObjectId=dragAndDrop.getDraggedObjectedId();
if (iExternalID == MEMO_PAD_TRASH_CAN_PICKING_ID) {
if (iDraggedObjectId != -1) {
memoLayer.removeElement(iDraggedObjectId);
underInteractionLayer.removeElement(iDraggedObjectId);
stackLayer.removeElement(iDraggedObjectId);
poolLayer.removeElement(iDraggedObjectId);
dragAndDrop.stopDragAction();
}
}
 else if (iExternalID == MEMO_PAD_PICKING_ID) {
if (iDraggedObjectId != -1) {
if (!memoLayer.containsElement(iDraggedObjectId)) {
memoLayer.addElement(iDraggedObjectId);
memoLayer.setElementVisibilityById(true,iDraggedObjectId);
}
dragAndDrop.stopDragAction();
}
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MEMO_PAD_SELECTION);
break;
}
}","protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
      iMouseOverViewID=iExternalID;
    generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
  break;
case CLICKED:
generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
if (poolLayer.containsElement(iExternalID)) {
loadViewToUnderInteractionLayer(iExternalID);
}
if (!dragAndDrop.isDragActionRunning()) dragAndDrop.startDragAction(iExternalID);
break;
case DRAGGED:
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.VIEW_SELECTION);
break;
case BUCKET_LOCK_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_lock=iExternalID;
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_LOCK_ICON_SELECTION);
break;
case BUCKET_MOVE_IN_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
loadViewToUnderInteractionLayer(iExternalID);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=iExternalID;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_IN_ICON_SELECTION);
break;
case BUCKET_MOVE_OUT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,poolLayer);
arSlerpActions.add(slerpActionTransition);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=iExternalID;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION);
break;
case BUCKET_MOVE_LEFT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 3) iDestinationPosIndex=0;
 else iDestinationPosIndex++;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=iExternalID;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION);
break;
case BUCKET_MOVE_RIGHT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 0) iDestinationPosIndex=3;
 else iDestinationPosIndex--;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=iExternalID;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION);
break;
case MEMO_PAD_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
int iDraggedObjectId=dragAndDrop.getDraggedObjectedId();
if (iExternalID == MEMO_PAD_TRASH_CAN_PICKING_ID) {
if (iDraggedObjectId != -1) {
memoLayer.removeElement(iDraggedObjectId);
underInteractionLayer.removeElement(iDraggedObjectId);
stackLayer.removeElement(iDraggedObjectId);
poolLayer.removeElement(iDraggedObjectId);
}
}
 else if (iExternalID == MEMO_PAD_PICKING_ID) {
if (iDraggedObjectId != -1) {
if (!memoLayer.containsElement(iDraggedObjectId)) {
memoLayer.addElement(iDraggedObjectId);
memoLayer.setElementVisibilityById(true,iDraggedObjectId);
}
}
}
dragAndDrop.stopDragAction();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MEMO_PAD_SELECTION);
break;
}
}",0.9824804856895056
59104,"@Override public void displayRemote(GL gl){
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public void displayRemote(GL gl){
  display(gl);
  checkForHits(gl);
}",0.7843137254901961
59105,"/** 
 * Unselect all lines that are deselected with the gates
 * @param iAxisNumber
 */
private void handleUnselection(int iAxisNumber){
  ArrayList<Integer> alCurrentGateBlocks=alIsGateBlocking.get(iAxisNumber);
  alCurrentGateBlocks.clear();
  IStorage currentStorage=null;
  for (int iPolylineCount=0; iPolylineCount < horizontalSelectionManager.getNumberOfElements(); iPolylineCount++) {
    int iStorageIndex=0;
    if (bRenderStorageHorizontally) {
      currentStorage=alDataStorages.get(alStorageSelection.get(iPolylineCount));
      iStorageIndex=alContentSelection.get(iAxisNumber);
    }
 else {
      iStorageIndex=alContentSelection.get(iPolylineCount);
      currentStorage=alDataStorages.get(alStorageSelection.get(iAxisNumber));
    }
    float fCurrentValue=currentStorage.getArrayFloat()[iStorageIndex] * renderStyle.getAxisHeight();
    if (fCurrentValue < fArGateTipHeight[iAxisNumber] && fCurrentValue > fArGateBottomHeight[iAxisNumber]) {
      if (horizontalSelectionManager.checkStatus(EViewInternalSelectionType.SELECTION,iPolylineCount))       bRenderInfoArea=false;
      alCurrentGateBlocks.add(alPolylineSelection.get(iPolylineCount));
    }
  }
}","/** 
 * Unselect all lines that are deselected with the gates
 * @param iAxisNumber
 */
private void handleUnselection(int iAxisNumber){
  ArrayList<Integer> alCurrentGateBlocks=alIsGateBlocking.get(iAxisNumber);
  alCurrentGateBlocks.clear();
  IStorage currentStorage=null;
  for (int iPolylineCount=0; iPolylineCount < horizontalSelectionManager.getNumberOfElements(); iPolylineCount++) {
    int iStorageIndex=0;
    if (bRenderStorageHorizontally) {
      currentStorage=alDataStorages.get(alStorageSelection.get(iPolylineCount));
      iStorageIndex=alContentSelection.get(iAxisNumber);
    }
 else {
      iStorageIndex=alContentSelection.get(iPolylineCount);
      currentStorage=alDataStorages.get(alStorageSelection.get(iAxisNumber));
    }
    float fCurrentValue=currentStorage.getArrayFloat()[iStorageIndex] * renderStyle.getAxisHeight();
    if (fCurrentValue <= fArGateTipHeight[iAxisNumber] && fCurrentValue >= fArGateBottomHeight[iAxisNumber]) {
      if (horizontalSelectionManager.checkStatus(EViewInternalSelectionType.SELECTION,iPolylineCount))       bRenderInfoArea=false;
      alCurrentGateBlocks.add(alPolylineSelection.get(iPolylineCount));
    }
  }
}",0.9991503823279524
59106,"public void displayRemote(final GL gl){
  if (bIsTranslationActive) {
    doTranslation();
  }
  if (bIsDisplayListDirtyRemote) {
    buildPolyLineDisplayList(gl,iGLDisplayListIndexRemote);
    bIsDisplayListDirtyRemote=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","public void displayRemote(final GL gl){
  if (bIsTranslationActive) {
    doTranslation();
  }
  if (bIsDisplayListDirtyRemote) {
    buildPolyLineDisplayList(gl,iGLDisplayListIndexRemote);
    bIsDisplayListDirtyRemote=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  display(gl);
  checkForHits(gl);
}",0.935103244837758
59107,"protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (glToolboxRenderer.getContainingLayer() != null)   if (glToolboxRenderer.getContainingLayer().getCapacity() >= 10)   return;
  ArrayList<Integer> iAlOldSelection;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
  horizontalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
horizontalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (ePolylineDataType == EInputDataType.GENE && !bAngularBrushingSelectPolyline) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
if (ePolylineDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
horizontalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
horizontalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
rePosition(iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
System.out.println(""String_Node_Str"");
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
if (iExternalID == EIconIDs.TOGGLE_RENDER_ARRAY_AS_POLYLINE.ordinal()) {
if (bRenderStorageHorizontally == true) renderStorageAsPolyline();
 else renderStorageAsPolyline();
}
 else if (iExternalID == EIconIDs.TOGGLE_PREVENT_OCCLUSION.ordinal()) {
if (bPreventOcclusion == true) preventOcclusion(false);
 else preventOcclusion(true);
}
 else if (iExternalID == EIconIDs.TOGGLE_RENDER_SELECTION.ordinal()) {
if (bRenderSelection == true) renderSelection(false);
 else renderSelection(true);
}
 else if (iExternalID == EIconIDs.RESET_SELECTIONS.ordinal()) {
resetSelections();
}
 else if (iExternalID == EIconIDs.SAVE_SELECTIONS.ordinal()) {
ArrayList<Integer> iAlSelection=new ArrayList<Integer>();
ArrayList<Integer> iAlGroup=new ArrayList<Integer>();
if (bRenderSelection) {
Set<Integer> deselectedSet=horizontalSelectionManager.getElements(EViewInternalSelectionType.DESELECTED);
addSetToSelection(deselectedSet,iAlSelection,iAlGroup,-1);
propagateGenes(iAlSelection,iAlGroup);
}
 else {
Set<Integer> set=horizontalSelectionManager.getElements(EViewInternalSelectionType.NORMAL);
addSetToSelection(set,iAlSelection,iAlGroup,0);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
addSetToSelection(set,iAlSelection,iAlGroup,1);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
addSetToSelection(set,iAlSelection,iAlGroup,2);
}
mergeSelection(iAlSelection,iAlGroup,null);
propagateGeneSet();
renderSelection(true);
}
 else if (iExternalID == EIconIDs.ANGULAR_BRUSHING.ordinal()) {
bAngularBrushingSelectPolyline=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (bRenderStorageHorizontally) {
alContentSelection.remove(iExternalID);
}
 else {
alStorageSelection.remove(iExternalID);
}
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID > 0 && iExternalID < alSelection.size()) {
int iTemp=alSelection.get(iExternalID - 1);
alSelection.set(iExternalID - 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID >= 0 && iExternalID < alSelection.size() - 1) {
int iTemp=alSelection.get(iExternalID + 1);
alSelection.set(iExternalID + 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
alSelection.add(iExternalID + 1,alSelection.get(iExternalID));
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueId,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}","protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (glToolboxRenderer.getContainingLayer() != null)   if (glToolboxRenderer.getContainingLayer().getCapacity() >= 10)   return;
  ArrayList<Integer> iAlOldSelection;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
  horizontalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
horizontalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (ePolylineDataType == EInputDataType.GENE && !bAngularBrushingSelectPolyline) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(horizontalSelectionManager,EViewInternalSelectionType.SELECTION);
if (ePolylineDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
horizontalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
horizontalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
rePosition(iExternalID);
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
case MOUSE_OVER:
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eAxisDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case CLICKED:
System.out.println(""String_Node_Str"");
break;
case DRAGGED:
System.out.println(""String_Node_Str"");
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueId,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
if (iExternalID == EIconIDs.TOGGLE_RENDER_ARRAY_AS_POLYLINE.ordinal()) {
if (bRenderStorageHorizontally == true) renderStorageAsPolyline();
 else renderStorageAsPolyline();
}
 else if (iExternalID == EIconIDs.TOGGLE_PREVENT_OCCLUSION.ordinal()) {
if (bPreventOcclusion == true) preventOcclusion(false);
 else preventOcclusion(true);
}
 else if (iExternalID == EIconIDs.TOGGLE_RENDER_SELECTION.ordinal()) {
if (bRenderSelection == true) renderSelection(false);
 else renderSelection(true);
}
 else if (iExternalID == EIconIDs.RESET_SELECTIONS.ordinal()) {
resetSelections();
}
 else if (iExternalID == EIconIDs.SAVE_SELECTIONS.ordinal()) {
ArrayList<Integer> iAlSelection=new ArrayList<Integer>();
ArrayList<Integer> iAlGroup=new ArrayList<Integer>();
if (bRenderSelection) {
Set<Integer> deselectedSet=horizontalSelectionManager.getElements(EViewInternalSelectionType.DESELECTED);
addSetToSelection(deselectedSet,iAlSelection,iAlGroup,-1);
propagateGenes(iAlSelection,iAlGroup);
}
 else {
Set<Integer> set=horizontalSelectionManager.getElements(EViewInternalSelectionType.NORMAL);
addSetToSelection(set,iAlSelection,iAlGroup,0);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
addSetToSelection(set,iAlSelection,iAlGroup,1);
set=horizontalSelectionManager.getElements(EViewInternalSelectionType.SELECTION);
addSetToSelection(set,iAlSelection,iAlGroup,2);
}
mergeSelection(iAlSelection,iAlGroup,null);
propagateGeneSet();
renderSelection(true);
extSelectionManager.clear();
}
 else if (iExternalID == EIconIDs.ANGULAR_BRUSHING.ordinal()) {
bAngularBrushingSelectPolyline=true;
}
bIsDisplayListDirtyLocal=true;
bIsDisplayListDirtyRemote=true;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (bRenderStorageHorizontally) {
alContentSelection.remove(iExternalID);
}
 else {
alStorageSelection.remove(iExternalID);
}
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID > 0 && iExternalID < alSelection.size()) {
int iTemp=alSelection.get(iExternalID - 1);
alSelection.set(iExternalID - 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
if (iExternalID >= 0 && iExternalID < alSelection.size() - 1) {
int iTemp=alSelection.get(iExternalID + 1);
alSelection.set(iExternalID + 1,alSelection.get(iExternalID));
alSelection.set(iExternalID,iTemp);
refresh();
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
ArrayList<Integer> alSelection;
if (bRenderStorageHorizontally) alSelection=alContentSelection;
 else alSelection=alStorageSelection;
alSelection.add(iExternalID + 1,alSelection.get(iExternalID));
refresh();
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueId,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}",0.9979524112123138
59108,"private void renderSelection(final GL gl,EViewInternalSelectionType eSelectionType){
  Set<Integer> selectedSet=verticalSelectionManager.getElements(eSelectionType);
  float fHeight=0;
  float fXPosition=0;
  float fYPosition=0;
switch (eSelectionType) {
case SELECTION:
    gl.glColor4fv(HeatMapRenderStyle.SELECTED_COLOR,0);
  gl.glLineWidth(HeatMapRenderStyle.SELECTED_LINE_WIDTH);
break;
case MOUSE_OVER:
gl.glColor4fv(HeatMapRenderStyle.MOUSE_OVER_COLOR,0);
gl.glLineWidth(HeatMapRenderStyle.MOUSE_OVER_LINE_WIDTH);
break;
}
for (Integer iCurrentColumn : selectedSet) {
int iColumnIndex=alContentSelection.indexOf(iCurrentColumn);
Vec2f vecFieldWidthAndHeight=renderStyle.getFieldWidthAndHeight(iColumnIndex);
fHeight=alStorageSelection.size() * vecFieldWidthAndHeight.y();
fXPosition=renderStyle.getXDistanceAt(iColumnIndex);
fYPosition=renderStyle.getYCenter() - vecFieldWidthAndHeight.y() * alStorageSelection.size() / 2;
gl.glBegin(GL.GL_LINE_LOOP);
gl.glVertex3f(fXPosition,fYPosition,HeatMapRenderStyle.SELECTION_Z);
gl.glVertex3f(fXPosition + vecFieldWidthAndHeight.x(),fYPosition,HeatMapRenderStyle.SELECTION_Z);
gl.glVertex3f(fXPosition + vecFieldWidthAndHeight.x(),fYPosition + fHeight,HeatMapRenderStyle.SELECTION_Z);
gl.glVertex3f(fXPosition,fYPosition + fHeight,HeatMapRenderStyle.SELECTION_Z);
gl.glEnd();
fHeight=0;
fXPosition=0;
}
}","private void renderSelection(final GL gl,EViewInternalSelectionType eSelectionType){
  Set<Integer> selectedSet=verticalSelectionManager.getElements(eSelectionType);
  float fHeight=0;
  float fXPosition=0;
  float fYPosition=0;
switch (eSelectionType) {
case SELECTION:
    gl.glColor4fv(HeatMapRenderStyle.SELECTED_COLOR,0);
  gl.glLineWidth(HeatMapRenderStyle.SELECTED_LINE_WIDTH);
break;
case MOUSE_OVER:
gl.glColor4fv(HeatMapRenderStyle.MOUSE_OVER_COLOR,0);
gl.glLineWidth(HeatMapRenderStyle.MOUSE_OVER_LINE_WIDTH);
break;
}
for (Integer iCurrentColumn : selectedSet) {
int iColumnIndex=alContentSelection.indexOf(iCurrentColumn);
if (iColumnIndex == -1) continue;
Vec2f vecFieldWidthAndHeight=renderStyle.getFieldWidthAndHeight(iColumnIndex);
fHeight=alStorageSelection.size() * vecFieldWidthAndHeight.y();
fXPosition=renderStyle.getXDistanceAt(iColumnIndex);
fYPosition=renderStyle.getYCenter() - vecFieldWidthAndHeight.y() * alStorageSelection.size() / 2;
gl.glBegin(GL.GL_LINE_LOOP);
gl.glVertex3f(fXPosition,fYPosition,HeatMapRenderStyle.SELECTION_Z);
gl.glVertex3f(fXPosition + vecFieldWidthAndHeight.x(),fYPosition,HeatMapRenderStyle.SELECTION_Z);
gl.glVertex3f(fXPosition + vecFieldWidthAndHeight.x(),fYPosition + fHeight,HeatMapRenderStyle.SELECTION_Z);
gl.glVertex3f(fXPosition,fYPosition + fHeight,HeatMapRenderStyle.SELECTION_Z);
gl.glEnd();
fHeight=0;
fXPosition=0;
}
}",0.9416058394160584
59109,"public ArrayList<Integer> getSelectionIdArray(){
  return iAlSelectionID;
}","public ArrayList<Integer> getSelectionIdArray(){
  if (iAlSelectionID == null)   return null;
  ArrayList<Integer> alTmp=new ArrayList<Integer>();
  for (  Integer iCurrent : iAlSelectionID) {
    alTmp.add(iCurrent.intValue());
  }
  return alTmp;
}",0.4061538461538461
59110,"public void mergeSelection(ArrayList<Integer> iAlNewSelectionID,ArrayList<Integer> iAlNewSelectionGroup,ArrayList<Integer> iAlNewOptional){
  if (iAlSelectionID == null) {
    iAlSelectionID=new ArrayList<Integer>();
    if (iAlNewSelectionGroup != null) {
      iAlSelectionGroup=new ArrayList<Integer>();
    }
    if (iAlNewOptional != null) {
      iAlSelectionGroup=new ArrayList<Integer>();
    }
  }
  int iCount=0;
  for (  Integer iCurrent : iAlNewSelectionID) {
    if (iAlSelectionID.contains(iCurrent)) {
      int iIndex=iAlSelectionID.indexOf(iCurrent);
      if (iAlNewSelectionGroup.get(iCount) == -1) {
        iAlSelectionID.remove(iIndex);
        if (iAlSelectionGroup != null)         iAlSelectionGroup.remove(iIndex);
        if (iAlSelectionOptionalData != null)         iAlSelectionOptionalData.remove(iIndex);
      }
 else {
        if (iAlSelectionGroup != null) {
          int iBiggerSelection=Math.max(iAlNewSelectionGroup.get(iCount),iAlSelectionGroup.get(iCount));
          iAlSelectionGroup.set(iIndex,iBiggerSelection);
        }
        if (iAlSelectionOptionalData != null)         iAlSelectionOptionalData.set(iIndex,iAlNewOptional.get(iCount));
      }
    }
 else {
      iAlSelectionID.add(iCurrent);
      if (iAlSelectionGroup != null)       iAlSelectionGroup.add(iAlNewSelectionGroup.get(iCount));
      if (iAlSelectionOptionalData != null)       iAlSelectionOptionalData.add(iAlNewSelectionGroup.get(iCount));
    }
    iCount++;
  }
}","public void mergeSelection(ArrayList<Integer> iAlNewSelectionID,ArrayList<Integer> iAlNewSelectionGroup,ArrayList<Integer> iAlNewOptional){
  if (iAlSelectionID == null) {
    iAlSelectionID=new ArrayList<Integer>();
    if (iAlNewSelectionGroup != null) {
      iAlSelectionGroup=new ArrayList<Integer>();
    }
    if (iAlNewOptional != null) {
      iAlSelectionGroup=new ArrayList<Integer>();
    }
  }
  int iCount=0;
  for (  Integer iCurrent : iAlNewSelectionID) {
    if (iAlSelectionID.contains(iCurrent)) {
      int iIndex=iAlSelectionID.indexOf(iCurrent);
      if (iAlNewSelectionGroup.get(iCount) == -1) {
        iAlSelectionID.remove(iIndex);
        if (iAlSelectionGroup != null)         iAlSelectionGroup.remove(iIndex);
        if (iAlSelectionOptionalData != null)         iAlSelectionOptionalData.remove(iIndex);
      }
 else {
        if (iAlSelectionGroup != null) {
          int iBiggerSelection=Math.max(iAlNewSelectionGroup.get(iCount),iAlSelectionGroup.get(iIndex));
          iAlSelectionGroup.set(iIndex,iBiggerSelection);
        }
        if (iAlSelectionOptionalData != null)         iAlSelectionOptionalData.set(iIndex,iAlNewOptional.get(iCount));
      }
    }
 else {
      iAlSelectionID.add(iCurrent);
      if (iAlSelectionGroup != null)       iAlSelectionGroup.add(iAlNewSelectionGroup.get(iCount));
      if (iAlSelectionOptionalData != null)       iAlSelectionOptionalData.add(iAlNewOptional.get(iCount));
    }
    iCount++;
  }
}",0.9891745602165088
59111,"public ArrayList<Integer> getGroupArray(){
  return iAlSelectionGroup;
}","public ArrayList<Integer> getGroupArray(){
  if (iAlSelectionGroup == null)   return null;
  ArrayList<Integer> alTmp=new ArrayList<Integer>();
  for (  Integer iCurrent : iAlSelectionGroup) {
    alTmp.add(iCurrent.intValue());
  }
  return alTmp;
}",0.391304347826087
59112,"protected ArrayList<Integer> cleanSelection(ArrayList<Integer> iAlSelection,ArrayList<Integer> iAlGroup){
  ArrayList<Integer> alDelete=new ArrayList<Integer>(1);
  for (int iCount=0; iCount < iAlSelection.size(); iCount++) {
    if (iAlSelection.get(iCount) == -1) {
      alDelete.add(iCount);
      continue;
    }
    iAlSelection.set(iCount,iAlSelection.get(iCount) / 1000);
  }
  for (int iCount=alDelete.size() - 1; iCount >= 0; iCount--) {
    iAlSelection.remove(iCount);
    iAlGroup.remove(iCount);
  }
  return iAlSelection;
}","protected void cleanSelection(ArrayList<Integer> iAlSelection,ArrayList<Integer> iAlGroup){
  ArrayList<Integer> alDelete=new ArrayList<Integer>(1);
  for (int iCount=0; iCount < iAlSelection.size(); iCount++) {
    if (iAlSelection.get(iCount) == -1) {
      alDelete.add(iCount);
      continue;
    }
    iAlSelection.set(iCount,iAlSelection.get(iCount) / 1000);
  }
  for (int iCount=alDelete.size() - 1; iCount >= 0; iCount--) {
    iAlSelection.remove(alDelete.get(iCount).intValue());
    iAlGroup.remove(alDelete.get(iCount).intValue());
  }
}",0.8907254361799817
59113,"protected ArrayList<Integer> convertAccessionToExpressionIndices(ArrayList<Integer> iAlSelection){
  ArrayList<Integer> iAlSelectionStorageIndices=new ArrayList<Integer>();
  for (int iCount=0; iCount < iAlSelection.size(); iCount++) {
    int iTmp=generalManager.getSingelton().getGenomeIdManager().getIdIntFromIntByMapping(iAlSelection.get(iCount),EGenomeMappingType.ACCESSION_2_MICROARRAY_EXPRESSION);
    if (iTmp == -1)     continue;
    iAlSelectionStorageIndices.add(iTmp);
  }
  return iAlSelectionStorageIndices;
}","protected ArrayList<Integer> convertAccessionToExpressionIndices(ArrayList<Integer> iAlSelection){
  ArrayList<Integer> iAlSelectionStorageIndices=new ArrayList<Integer>();
  for (int iCount=0; iCount < iAlSelection.size(); iCount++) {
    int iTmp=generalManager.getSingelton().getGenomeIdManager().getIdIntFromIntByMapping(iAlSelection.get(iCount),EGenomeMappingType.ACCESSION_2_MICROARRAY_EXPRESSION);
    iAlSelectionStorageIndices.add(iTmp);
  }
  return iAlSelectionStorageIndices;
}",0.8241106719367589
59114,"@Override public ArrayList<String> getInfo(){
  ArrayList<String> alInfo=new ArrayList<String>();
  alInfo.add(""String_Node_Str"");
  return alInfo;
}","@Override public ArrayList<String> getInfo(){
  ArrayList<String> alInfo=new ArrayList<String>();
  alInfo.add(""String_Node_Str"");
  alInfo.add(""String_Node_Str"" + alContentSelection.size() + ""String_Node_Str"");
  return alInfo;
}",0.7862796833773087
59115,"protected void initLists(){
  Set<Integer> setMouseOver=verticalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
  horizontalSelectionManager.resetSelectionManager();
  alContentSelection=mapSelections.get(eWhichContentSelection);
  alStorageSelection=mapSelections.get(eWhichStorageSelection);
  if (renderStyle != null) {
    renderStyle.setContentSelection(alContentSelection);
  }
  int iNumberOfRowsToRender=alStorageSelection.size();
  int iNumberOfColumns=alContentSelection.size();
  for (int iRowCount=0; iRowCount < iNumberOfRowsToRender; iRowCount++) {
    horizontalSelectionManager.initialAdd(alStorageSelection.get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    verticalSelectionManager.initialAdd(alContentSelection.get(iColumnCount));
    if (setMouseOver.contains(alContentSelection.get(iColumnCount))) {
      verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,alContentSelection.get(iColumnCount));
    }
  }
}","protected void initLists(){
  Set<Integer> setMouseOver=verticalSelectionManager.getElements(EViewInternalSelectionType.MOUSE_OVER);
  horizontalSelectionManager.resetSelectionManager();
  verticalSelectionManager.resetSelectionManager();
  alContentSelection=mapSelections.get(eWhichContentSelection);
  alStorageSelection=mapSelections.get(eWhichStorageSelection);
  if (renderStyle != null) {
    renderStyle.setContentSelection(alContentSelection);
  }
  int iNumberOfRowsToRender=alStorageSelection.size();
  int iNumberOfColumns=alContentSelection.size();
  for (int iRowCount=0; iRowCount < iNumberOfRowsToRender; iRowCount++) {
    horizontalSelectionManager.initialAdd(alStorageSelection.get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    verticalSelectionManager.initialAdd(alContentSelection.get(iColumnCount));
    if (setMouseOver.contains(alContentSelection.get(iColumnCount))) {
      verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,alContentSelection.get(iColumnCount));
    }
  }
}",0.9752144899904672
59116,"public void start(){
  iOriginPosIndex=originHierarchyLayer.getPositionIndexByElementId(iElementId);
  if (iDestinationPosIndex == -1) {
    if (destinationHierarchyLayer.containsElement(-1))     this.iDestinationPosIndex=destinationHierarchyLayer.getPositionIndexByElementId(-1);
 else     this.iDestinationPosIndex=destinationHierarchyLayer.getNextPositionIndex();
  }
  originHierarchyLayer.removeElement(iElementId);
  if (destinationHierarchyLayer.getElementList().size() < destinationHierarchyLayer.getCapacity())   destinationHierarchyLayer.addElement(iElementId);
 else   destinationHierarchyLayer.replaceElement(iElementId,iDestinationPosIndex);
}","public void start(){
  iOriginPosIndex=originHierarchyLayer.getPositionIndexByElementId(iElementId);
  if (iDestinationPosIndex == -1) {
    this.iDestinationPosIndex=destinationHierarchyLayer.getNextPositionIndex();
  }
  originHierarchyLayer.removeElement(iElementId);
  if (destinationHierarchyLayer.getElementList().size() < destinationHierarchyLayer.getCapacity())   destinationHierarchyLayer.addElement(iElementId);
 else   destinationHierarchyLayer.replaceElement(iElementId,iDestinationPosIndex);
}",0.3356282271944922
59117,"private void slerpView(final GL gl,SlerpAction slerpAction){
  int iViewId=slerpAction.getElementId();
  SlerpMod slerpMod=new SlerpMod();
  if ((iSlerpFactor == 0)) {
    slerpMod.playSlerpSound();
  }
  Transform transform=slerpMod.interpolate(slerpAction.getOriginHierarchyLayer().getTransformByPositionIndex(slerpAction.getOriginPosIndex()),slerpAction.getDestinationHierarchyLayer().getTransformByPositionIndex(slerpAction.getDestinationPosIndex()),(float)iSlerpFactor / SLERP_RANGE);
  gl.glPushMatrix();
  slerpMod.applySlerp(gl,transform);
  ((AGLCanvasUser)generalManager.getSingelton().getViewGLCanvasManager().getItem(iViewId)).displayRemote(gl);
  gl.glPopMatrix();
  if (iSlerpFactor >= SLERP_RANGE) {
    arSlerpActions.remove(slerpAction);
    slerpAction.getDestinationHierarchyLayer().setElementVisibilityById(true,iViewId);
    iSlerpFactor=0;
  }
  if (arSlerpActions.isEmpty())   glConnectionLineRenderer.enableRendering(true);
}","private void slerpView(final GL gl,SlerpAction slerpAction){
  int iViewId=slerpAction.getElementId();
  SlerpMod slerpMod=new SlerpMod();
  if ((iSlerpFactor == 0)) {
    slerpMod.playSlerpSound();
  }
  Transform transform=slerpMod.interpolate(slerpAction.getOriginHierarchyLayer().getTransformByPositionIndex(slerpAction.getOriginPosIndex()),slerpAction.getDestinationHierarchyLayer().getTransformByPositionIndex(slerpAction.getDestinationPosIndex()),(float)iSlerpFactor / SLERP_RANGE);
  gl.glPushMatrix();
  slerpMod.applySlerp(gl,transform);
  ((AGLCanvasUser)generalManager.getSingelton().getViewGLCanvasManager().getItem(iViewId)).displayRemote(gl);
  gl.glPopMatrix();
  if (iSlerpFactor >= SLERP_RANGE) {
    arSlerpActions.remove(slerpAction);
    slerpAction.getDestinationHierarchyLayer().setElementVisibilityById(true,iViewId);
    iSlerpFactor=0;
  }
  if (arSlerpActions.isEmpty()) {
    glConnectionLineRenderer.enableRendering(true);
    generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().enable(!bEnableNavigationOverlay);
  }
}",0.9391390400791688
59118,"private void updatePoolLayer(){
  float fSelectedScaling=1;
  float fYAdd=0;
  int iSelectedViewIndex=poolLayer.getPositionIndexByElementId(iMouseOverViewID);
  for (int iViewIndex=0; iViewIndex < poolLayer.getCapacity(); iViewIndex++) {
    if (iViewIndex == iSelectedViewIndex) {
      fSelectedScaling=8;
    }
 else {
      fSelectedScaling=1;
    }
    Transform transform=new Transform();
    transform.setTranslation(new Vec3f(4.1f,0.1f * iViewIndex + fYAdd,4));
    if (iViewIndex == iSelectedViewIndex) {
      fYAdd+=0.1 * fSelectedScaling;
    }
    transform.setScale(new Vec3f(SCALING_FACTOR_POOL_LAYER * fSelectedScaling,SCALING_FACTOR_POOL_LAYER * fSelectedScaling,SCALING_FACTOR_POOL_LAYER * fSelectedScaling));
    poolLayer.setTransformByPositionIndex(iViewIndex,transform);
  }
}","private void updatePoolLayer(){
  float fSelectedScaling=1;
  float fYAdd=0;
  int iSelectedViewIndex=poolLayer.getPositionIndexByElementId(iMouseOverViewID);
  for (int iViewIndex=0; iViewIndex < poolLayer.getCapacity(); iViewIndex++) {
    if (iViewIndex == iSelectedViewIndex) {
      fSelectedScaling=4;
    }
 else {
      fSelectedScaling=1;
    }
    Transform transform=new Transform();
    transform.setTranslation(new Vec3f(4.1f,0.2f * iViewIndex + fYAdd,4));
    if (iViewIndex == iSelectedViewIndex) {
      fYAdd+=0.2 * fSelectedScaling;
    }
    transform.setScale(new Vec3f(SCALING_FACTOR_POOL_LAYER * fSelectedScaling,SCALING_FACTOR_POOL_LAYER * fSelectedScaling,SCALING_FACTOR_POOL_LAYER * fSelectedScaling));
    poolLayer.setTransformByPositionIndex(iViewIndex,transform);
  }
}",0.9962406015037594
59119,"private void loadViewToUnderInteractionLayer(final int iViewID){
  generalManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iViewID+ ""String_Node_Str"",LoggerType.VERBOSE);
  if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE)   return;
  arSlerpActions.clear();
  glConnectionLineRenderer.enableRendering(false);
  if (stackLayer.containsElement(iViewID)) {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,stackLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    SlerpAction reverseSlerpAction=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,stackLayer);
    arSlerpActions.add(reverseSlerpAction);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
 else {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,poolLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    SlerpAction reverseSlerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex()),stackLayer,true);
    arSlerpActions.add(reverseSlerpAction);
    SlerpAction reverseSlerpAction2=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction2);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
  iSlerpFactor=0;
}","private void loadViewToUnderInteractionLayer(final int iViewID){
  generalManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iViewID+ ""String_Node_Str"",LoggerType.VERBOSE);
  if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE)   return;
  arSlerpActions.clear();
  glConnectionLineRenderer.enableRendering(false);
  if (stackLayer.containsElement(iViewID)) {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,stackLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    SlerpAction reverseSlerpAction=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,stackLayer);
    arSlerpActions.add(reverseSlerpAction);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
 else {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,poolLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    if (!stackLayer.containsElement(-1)) {
      SlerpAction reverseSlerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex()),stackLayer,true);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction reverseSlerpAction2=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction2);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
  iSlerpFactor=0;
}",0.9827417779225008
59120,"public void displayLocal(final GL gl){
  if (pickingTriggerMouseAdapter.wasRightMouseButtonPressed()) {
    bEnableNavigationOverlay=!bEnableNavigationOverlay;
  }
  pickingManager.handlePicking(iUniqueId,gl,true);
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","public void displayLocal(final GL gl){
  if (pickingTriggerMouseAdapter.wasRightMouseButtonPressed()) {
    bEnableNavigationOverlay=!bEnableNavigationOverlay;
    generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().enable(!bEnableNavigationOverlay);
  }
  pickingManager.handlePicking(iUniqueId,gl,true);
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.8368794326241135
59121,"private void buildPoolLayer(final GL gl){
  for (int iViewIndex=0; iViewIndex < poolLayer.getCapacity(); iViewIndex++) {
    Transform transform=new Transform();
    transform.setTranslation(new Vec3f(4.1f,0.1f * iViewIndex,4));
    transform.setScale(new Vec3f(SCALING_FACTOR_POOL_LAYER,SCALING_FACTOR_POOL_LAYER,SCALING_FACTOR_POOL_LAYER));
    poolLayer.setTransformByPositionIndex(iViewIndex,transform);
  }
}","private void buildPoolLayer(final GL gl){
  for (int iViewIndex=0; iViewIndex < poolLayer.getCapacity(); iViewIndex++) {
    Transform transform=new Transform();
    transform.setTranslation(new Vec3f(4.1f,0.2f * iViewIndex,4));
    transform.setScale(new Vec3f(SCALING_FACTOR_POOL_LAYER,SCALING_FACTOR_POOL_LAYER,SCALING_FACTOR_POOL_LAYER));
    poolLayer.setTransformByPositionIndex(iViewIndex,transform);
  }
}",0.9975786924939468
59122,"private void renderNavigationOverlay(final GL gl,final int iViewID){
  if (!bEnableNavigationOverlay)   return;
  generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().enable(false);
  glConnectionLineRenderer.enableRendering(false);
  EPickingType leftWallPickingType=null;
  EPickingType rightWallPickingType=null;
  EPickingType topWallPickingType=null;
  EPickingType bottomWallPickingType=null;
  Vec4f tmpColor_out=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_in=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_left=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_right=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_lock=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Texture textureLock=glIconTextureManager.getIconTexture(EIconTextures.LOCK);
  Texture textureMoveLeft=null;
  Texture textureMoveRight=null;
  Texture textureMoveOut=null;
  Texture textureMoveIn=null;
  TextureCoords texCoords=textureLock.getImageTexCoords();
  if (iNavigationMouseOverViewID_lock == iViewID)   tmpColor_lock.set(1,0.3f,0.3f,0.9f);
  if (stackLayer.getPositionIndexByElementId(iViewID) == 0) {
    topWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
 else   if (stackLayer.getPositionIndexByElementId(iViewID) == 2) {
    topWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
 else   if (stackLayer.getPositionIndexByElementId(iViewID) == 1) {
    topWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
 else   if (stackLayer.getPositionIndexByElementId(iViewID) == 3) {
    topWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
  gl.glLineWidth(4);
  gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.BUCKET_LOCK_ICON_SELECTION,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glEnd();
  textureLock.enable();
  textureLock.bind();
  gl.glColor4f(tmpColor_lock.x(),tmpColor_lock.y(),tmpColor_lock.z(),tmpColor_lock.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(2.66f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(2.66f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(5.33f,2.66f,0.03f);
  gl.glEnd();
  textureLock.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,bottomWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(8,0,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_in.x(),tmpColor_in.y(),tmpColor_in.z(),tmpColor_in.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.05f,0.05f,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(7.95f,0.02f,0.02f);
  gl.glEnd();
  textureMoveIn.enable();
  textureMoveIn.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(2.66f,0.05f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(2.66f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(5.33f,0.05f,0.03f);
  gl.glEnd();
  textureMoveIn.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,rightWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(8,0,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(8,8,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_right.x(),tmpColor_right.y(),tmpColor_right.z(),tmpColor_right.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(7.95f,0.05f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(7.95f,7.95f,0.02f);
  gl.glEnd();
  textureMoveRight.enable();
  textureMoveRight.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(7.95f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(5.33f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(7.95f,5.33f,0.03f);
  gl.glEnd();
  textureMoveRight.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,leftWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,0.02f);
  gl.glVertex3f(0,8,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_left.x(),tmpColor_left.y(),tmpColor_left.z(),tmpColor_left.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.05f,0.05f,0.02f);
  gl.glVertex3f(0.05f,7.95f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glEnd();
  textureMoveLeft.enable();
  textureMoveLeft.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(0.05f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(0.05f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(2.66f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(2.66f,2.66f,0.03f);
  gl.glEnd();
  textureMoveLeft.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,topWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,8,0.02f);
  gl.glVertex3f(8,8,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_out.x(),tmpColor_out.y(),tmpColor_out.z(),tmpColor_out.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.05f,7.95f,0.02f);
  gl.glVertex3f(7.95f,7.95f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glEnd();
  textureMoveOut.enable();
  textureMoveOut.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(2.66f,7.95f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(5.33f,7.95f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(2.66f,5.33f,0.03f);
  gl.glEnd();
  textureMoveOut.disable();
  gl.glPopName();
}","private void renderNavigationOverlay(final GL gl,final int iViewID){
  if (!bEnableNavigationOverlay)   return;
  glConnectionLineRenderer.enableRendering(false);
  EPickingType leftWallPickingType=null;
  EPickingType rightWallPickingType=null;
  EPickingType topWallPickingType=null;
  EPickingType bottomWallPickingType=null;
  Vec4f tmpColor_out=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_in=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_left=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_right=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Vec4f tmpColor_lock=new Vec4f(0.9f,0.9f,0.9f,0.9f);
  Texture textureLock=glIconTextureManager.getIconTexture(EIconTextures.LOCK);
  Texture textureMoveLeft=null;
  Texture textureMoveRight=null;
  Texture textureMoveOut=null;
  Texture textureMoveIn=null;
  TextureCoords texCoords=textureLock.getImageTexCoords();
  if (iNavigationMouseOverViewID_lock == iViewID)   tmpColor_lock.set(1,0.3f,0.3f,0.9f);
  if (stackLayer.getPositionIndexByElementId(iViewID) == 0) {
    topWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
 else   if (stackLayer.getPositionIndexByElementId(iViewID) == 2) {
    topWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
 else   if (stackLayer.getPositionIndexByElementId(iViewID) == 1) {
    topWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
 else   if (stackLayer.getPositionIndexByElementId(iViewID) == 3) {
    topWallPickingType=EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION;
    bottomWallPickingType=EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION;
    leftWallPickingType=EPickingType.BUCKET_MOVE_IN_ICON_SELECTION;
    rightWallPickingType=EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION;
    if (iNavigationMouseOverViewID_out == iViewID)     tmpColor_right.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_in == iViewID)     tmpColor_left.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_left == iViewID)     tmpColor_out.set(1,0.3f,0.3f,0.9f);
 else     if (iNavigationMouseOverViewID_right == iViewID)     tmpColor_in.set(1,0.3f,0.3f,0.9f);
    textureMoveIn=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
    textureMoveOut=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveLeft=glIconTextureManager.getIconTexture(EIconTextures.ARROW_DOWN);
    textureMoveRight=glIconTextureManager.getIconTexture(EIconTextures.ARROW_LEFT);
  }
  gl.glLineWidth(4);
  gl.glPushName(pickingManager.getPickingID(iUniqueId,EPickingType.BUCKET_LOCK_ICON_SELECTION,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glEnd();
  textureLock.enable();
  textureLock.bind();
  gl.glColor4f(tmpColor_lock.x(),tmpColor_lock.y(),tmpColor_lock.z(),tmpColor_lock.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(2.66f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(2.66f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(5.33f,2.66f,0.03f);
  gl.glEnd();
  textureLock.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,bottomWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(8,0,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_in.x(),tmpColor_in.y(),tmpColor_in.z(),tmpColor_in.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.05f,0.05f,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(7.95f,0.02f,0.02f);
  gl.glEnd();
  textureMoveIn.enable();
  textureMoveIn.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(2.66f,0.05f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(2.66f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(5.33f,0.05f,0.03f);
  gl.glEnd();
  textureMoveIn.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,rightWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(8,0,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(8,8,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_right.x(),tmpColor_right.y(),tmpColor_right.z(),tmpColor_right.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(7.95f,0.05f,0.02f);
  gl.glVertex3f(5.33f,2.66f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(7.95f,7.95f,0.02f);
  gl.glEnd();
  textureMoveRight.enable();
  textureMoveRight.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(7.95f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(5.33f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(7.95f,5.33f,0.03f);
  gl.glEnd();
  textureMoveRight.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,leftWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,0.02f);
  gl.glVertex3f(0,8,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_left.x(),tmpColor_left.y(),tmpColor_left.z(),tmpColor_left.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.05f,0.05f,0.02f);
  gl.glVertex3f(0.05f,7.95f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glVertex3f(2.66f,2.66f,0.02f);
  gl.glEnd();
  textureMoveLeft.enable();
  textureMoveLeft.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(0.05f,2.66f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(0.05f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(2.66f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(2.66f,2.66f,0.03f);
  gl.glEnd();
  textureMoveLeft.disable();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueId,topWallPickingType,iViewID));
  gl.glColor4f(0.5f,0.5f,0.5f,1);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,8,0.02f);
  gl.glVertex3f(8,8,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glEnd();
  gl.glColor4f(tmpColor_out.x(),tmpColor_out.y(),tmpColor_out.z(),tmpColor_out.w());
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.05f,7.95f,0.02f);
  gl.glVertex3f(7.95f,7.95f,0.02f);
  gl.glVertex3f(5.33f,5.33f,0.02f);
  gl.glVertex3f(2.66f,5.33f,0.02f);
  gl.glEnd();
  textureMoveOut.enable();
  textureMoveOut.bind();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(2.66f,7.95f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(5.33f,7.95f,0.03f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(5.33f,5.33f,0.03f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(2.66f,5.33f,0.03f);
  gl.glEnd();
  textureMoveOut.disable();
  gl.glPopName();
}",0.9955669955669956
59123,"protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
      iMouseOverViewID=iExternalID;
    generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
  break;
case CLICKED:
generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
if (poolLayer.containsElement(iExternalID)) {
loadViewToUnderInteractionLayer(iExternalID);
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.VIEW_SELECTION);
break;
case BUCKET_LOCK_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_lock=iExternalID;
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_LOCK_ICON_SELECTION);
break;
case BUCKET_MOVE_IN_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
loadViewToUnderInteractionLayer(iExternalID);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=iExternalID;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_IN_ICON_SELECTION);
break;
case BUCKET_MOVE_OUT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
glConnectionLineRenderer.enableRendering(false);
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,poolLayer);
arSlerpActions.add(slerpActionTransition);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=iExternalID;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION);
break;
case BUCKET_MOVE_LEFT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
glConnectionLineRenderer.enableRendering(false);
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 3) iDestinationPosIndex=0;
 else iDestinationPosIndex++;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(-1));
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=iExternalID;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION);
break;
case BUCKET_MOVE_RIGHT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
glConnectionLineRenderer.enableRendering(false);
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 0) iDestinationPosIndex=3;
 else iDestinationPosIndex--;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(-1));
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=iExternalID;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
break;
}
}","protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
      iMouseOverViewID=iExternalID;
    generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
  break;
case CLICKED:
generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setDataAboutView(iExternalID);
if (poolLayer.containsElement(iExternalID)) {
loadViewToUnderInteractionLayer(iExternalID);
}
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.VIEW_SELECTION);
break;
case BUCKET_LOCK_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_lock=iExternalID;
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_LOCK_ICON_SELECTION);
break;
case BUCKET_MOVE_IN_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
loadViewToUnderInteractionLayer(iExternalID);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=iExternalID;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_IN_ICON_SELECTION);
break;
case BUCKET_MOVE_OUT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
glConnectionLineRenderer.enableRendering(false);
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,poolLayer);
arSlerpActions.add(slerpActionTransition);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=iExternalID;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION);
break;
case BUCKET_MOVE_LEFT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
glConnectionLineRenderer.enableRendering(false);
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 3) iDestinationPosIndex=0;
 else iDestinationPosIndex++;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=iExternalID;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION);
break;
case BUCKET_MOVE_RIGHT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) break;
arSlerpActions.clear();
glConnectionLineRenderer.enableRendering(false);
int iDestinationPosIndex=stackLayer.getPositionIndexByElementId(iExternalID);
if (iDestinationPosIndex == 0) iDestinationPosIndex=3;
 else iDestinationPosIndex--;
if (stackLayer.getElementIdByPositionIndex(iDestinationPosIndex) == -1) {
SlerpAction slerpAction=new SlerpAction(iExternalID,stackLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(iExternalID,stackLayer,transitionLayer);
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(iDestinationPosIndex),stackLayer,stackLayer,stackLayer.getPositionIndexByElementId(iExternalID));
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(iExternalID,transitionLayer,stackLayer,iDestinationPosIndex);
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=iExternalID;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueId,EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION);
break;
}
}",0.920514610551511
59124,"public void buildPathwayDisplayList(final GL gl,final AUniqueManagedObject containingView,final int iPathwayId){
  refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iPathwayId,LoggerType.VERBOSE);
  PathwayGraph refTmpPathway=(PathwayGraph)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId);
  int iVerticesDisplayListId=-1;
  int iEdgesDisplayListId=-1;
  if (hashPathwayId2VerticesDisplayListId.containsKey(iPathwayId)) {
    iVerticesDisplayListId=hashPathwayId2VerticesDisplayListId.get(iPathwayId);
  }
 else {
    iVerticesDisplayListId=gl.glGenLists(1);
    hashPathwayId2VerticesDisplayListId.put(iPathwayId,iVerticesDisplayListId);
  }
  gl.glNewList(iVerticesDisplayListId,GL.GL_COMPILE);
  extractVertices(gl,containingView,refTmpPathway);
  gl.glEndList();
  if (hashPathwayId2EdgesDisplayListId.containsKey(iPathwayId)) {
    iEdgesDisplayListId=hashPathwayId2EdgesDisplayListId.get(iPathwayId);
  }
 else {
    iEdgesDisplayListId=gl.glGenLists(1);
    hashPathwayId2EdgesDisplayListId.put(iPathwayId,iEdgesDisplayListId);
  }
  gl.glNewList(iEdgesDisplayListId,GL.GL_COMPILE);
  extractEdges(gl,refTmpPathway);
  gl.glEndList();
}","public void buildPathwayDisplayList(final GL gl,final AUniqueManagedObject containingView,final int iPathwayId){
  PathwayGraph refTmpPathway=(PathwayGraph)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId);
  int iVerticesDisplayListId=-1;
  int iEdgesDisplayListId=-1;
  if (hashPathwayId2VerticesDisplayListId.containsKey(iPathwayId)) {
    iVerticesDisplayListId=hashPathwayId2VerticesDisplayListId.get(iPathwayId);
  }
 else {
    iVerticesDisplayListId=gl.glGenLists(1);
    hashPathwayId2VerticesDisplayListId.put(iPathwayId,iVerticesDisplayListId);
  }
  gl.glNewList(iVerticesDisplayListId,GL.GL_COMPILE);
  extractVertices(gl,containingView,refTmpPathway);
  gl.glEndList();
  if (hashPathwayId2EdgesDisplayListId.containsKey(iPathwayId)) {
    iEdgesDisplayListId=hashPathwayId2EdgesDisplayListId.get(iPathwayId);
  }
 else {
    iEdgesDisplayListId=gl.glGenLists(1);
    hashPathwayId2EdgesDisplayListId.put(iPathwayId,iEdgesDisplayListId);
  }
  gl.glNewList(iEdgesDisplayListId,GL.GL_COMPILE);
  extractEdges(gl,refTmpPathway);
  gl.glEndList();
}",0.944202266782912
59125,"public final int getNextPositionIndex(){
  if (llElementId.size() < iCapacity) {
    return llElementId.size();
  }
 else   if (llElementId.contains(-1)) {
    return llElementId.indexOf(-1);
  }
 else {
    return llElementId.indexOf(llElementIdImportanceQueue.getLast());
  }
}","public final int getNextPositionIndex(){
  if (llElementId.contains(-1)) {
    return llElementId.indexOf(-1);
  }
 else {
    return llElementId.indexOf(llElementIdImportanceQueue.getLast());
  }
}",0.8301886792452831
59126,"protected void propagateGeneSelection(int iExternalID,ArrayList<Integer> iAlOldSelection){
  int iAccessionID=getAccesionIDFromStorageIndex(iExternalID);
  generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setData(iUniqueId,iAccessionID,EInputDataType.GENE,getInfo());
  ArrayList<Integer> iAlTmpSelectionId=new ArrayList<Integer>(2);
  ArrayList<Integer> iAlTmpGroup=new ArrayList<Integer>(2);
  if (iAccessionID != -1) {
    iAlTmpSelectionId.add(iAccessionID);
    iAlTmpGroup.add(2);
    extSelectionManager.modifySelection(iAccessionID,createElementRep(iExternalID),ESelectionMode.ReplacePick);
  }
  for (  Integer iCurrent : iAlOldSelection) {
    iAccessionID=getAccesionIDFromStorageIndex(iCurrent);
    if (iAccessionID != -1) {
      iAlTmpSelectionId.add(iAccessionID);
      iAlTmpGroup.add(0);
    }
  }
  propagateGeneSet(iAlTmpSelectionId,iAlTmpGroup);
}","protected void propagateGeneSelection(int iExternalID,int iNewGroupID,ArrayList<Integer> iAlOldSelection){
  int iAccessionID=getAccesionIDFromStorageIndex(iExternalID);
  generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setData(iUniqueId,iAccessionID,EInputDataType.GENE,getInfo());
  ArrayList<Integer> iAlTmpSelectionId=new ArrayList<Integer>(2);
  ArrayList<Integer> iAlTmpGroup=new ArrayList<Integer>(2);
  if (iAccessionID != -1) {
    iAlTmpSelectionId.add(iAccessionID);
    iAlTmpGroup.add(iNewGroupID);
    extSelectionManager.modifySelection(iAccessionID,createElementRep(iExternalID),ESelectionMode.ReplacePick);
  }
  for (  Integer iCurrent : iAlOldSelection) {
    iAccessionID=getAccesionIDFromStorageIndex(iCurrent);
    if (iAccessionID != -1) {
      iAlTmpSelectionId.add(iAccessionID);
      iAlTmpGroup.add(0);
    }
  }
  propagateGeneSet(iAlTmpSelectionId,iAlTmpGroup);
}",0.9845984598459846
59127,"protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
      extSelectionManager.clear();
    ArrayList<Integer> iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
  verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,iAlOldSelection);
}
break;
case MOUSE_OVER:
extSelectionManager.clear();
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
generalManager.getSingelton().getViewGLCanvasManager().getInfoAreaManager().setData(iUniqueId,getAccesionIDFromStorageIndex(iExternalID),EInputDataType.GENE,getInfo());
}
break;
}
pickingManager.flushHits(iUniqueId,pickingType);
break;
}
}","protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  ArrayList<Integer> iAlOldSelection;
switch (pickingType) {
case FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
      extSelectionManager.clear();
    iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
  verticalSelectionManager.clearSelection(EViewInternalSelectionType.SELECTION);
verticalSelectionManager.addToType(EViewInternalSelectionType.SELECTION,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,2,iAlOldSelection);
}
break;
case MOUSE_OVER:
extSelectionManager.clear();
iAlOldSelection=prepareSelection(verticalSelectionManager,EViewInternalSelectionType.SELECTION);
verticalSelectionManager.clearSelection(EViewInternalSelectionType.MOUSE_OVER);
verticalSelectionManager.addToType(EViewInternalSelectionType.MOUSE_OVER,iExternalID);
if (eFieldDataType == EInputDataType.GENE) {
propagateGeneSelection(iExternalID,1,iAlOldSelection);
}
break;
}
pickingManager.flushHits(iUniqueId,pickingType);
break;
}
}",0.8342293906810035
59128,"protected void initLists(){
  horizontalSelectionManager.resetSelectionManager();
  verticalSelectionManager.resetSelectionManager();
  alContentSelection=mapSelections.get(eWhichContentSelection);
  alStorageSelection=mapSelections.get(eWhichStorageSelection);
  int iNumberOfRowsToRender=alStorageSelection.size();
  int iNumberOfColumns=alContentSelection.size();
  for (int iRowCount=0; iRowCount < iNumberOfRowsToRender; iRowCount++) {
    horizontalSelectionManager.initialAdd(alStorageSelection.get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    verticalSelectionManager.initialAdd(alContentSelection.get(iColumnCount));
  }
}","protected void initLists(){
  horizontalSelectionManager.resetSelectionManager();
  verticalSelectionManager.resetSelectionManager();
  alContentSelection=mapSelections.get(eWhichContentSelection);
  alStorageSelection=mapSelections.get(eWhichStorageSelection);
  if (renderStyle != null) {
    renderStyle.setContentSelection(alContentSelection);
  }
  int iNumberOfRowsToRender=alStorageSelection.size();
  int iNumberOfColumns=alContentSelection.size();
  for (int iRowCount=0; iRowCount < iNumberOfRowsToRender; iRowCount++) {
    horizontalSelectionManager.initialAdd(alStorageSelection.get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    verticalSelectionManager.initialAdd(alContentSelection.get(iColumnCount));
  }
}",0.9383561643835616
59129,"private void loadViewToUnderInteractionLayer(final int iViewID){
  generalManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iViewID+ ""String_Node_Str"",LoggerType.VERBOSE);
  if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE)   return;
  arSlerpActions.clear();
  glConnectionLineRenderer.enableRendering(false);
  if (stackLayer.containsElement(iViewID)) {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,stackLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    SlerpAction reverseSlerpAction=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,stackLayer);
    arSlerpActions.add(reverseSlerpAction);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
 else {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,poolLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    if (!stackLayer.containsElement(-1)) {
      SlerpAction reverseSlerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex()),stackLayer,true);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction reverseSlerpAction2=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction2);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
  iSlerpFactor=0;
}","private void loadViewToUnderInteractionLayer(final int iViewID){
  generalManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iViewID+ ""String_Node_Str"",LoggerType.VERBOSE);
  if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE)   return;
  arSlerpActions.clear();
  if (stackLayer.containsElement(iViewID)) {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,stackLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    SlerpAction reverseSlerpAction=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,stackLayer);
    arSlerpActions.add(reverseSlerpAction);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
 else {
    SlerpAction slerpActionTransition=new SlerpAction(iViewID,poolLayer,transitionLayer);
    arSlerpActions.add(slerpActionTransition);
    if (!stackLayer.containsElement(-1)) {
      SlerpAction reverseSlerpAction=new SlerpAction(stackLayer.getElementIdByPositionIndex(stackLayer.getNextPositionIndex()),stackLayer,true);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction reverseSlerpAction2=new SlerpAction(underInteractionLayer.getElementIdByPositionIndex(0),underInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction2);
    SlerpAction slerpAction=new SlerpAction(iViewID,transitionLayer,underInteractionLayer);
    arSlerpActions.add(slerpAction);
  }
  iSlerpFactor=0;
}",0.9834038398958672
59130,"public ParCoordsRenderStyle(){
  polylineOcclusionPrevColor=new Vec4f(0.0f,0.0f,0.0f,1.0f);
}","public ParCoordsRenderStyle(){
  polylineOcclusionPrevColor=new Vec4f(0.0f,0.0f,0.0f,1.0f);
  polylineDeselectedColor=new Vec4f(0.0f,0.0f,0.0f,0.1f);
}",0.7622950819672131
59131,"public Vec4f getPolylineOcclusionPrevColor(int numberOfRenderedLines){
  if (numberOfRenderedLines > 100) {
    polylineOcclusionPrevColor.set(3,0.1f);
  }
 else {
    polylineOcclusionPrevColor.set(3,0.6f);
  }
  return polylineOcclusionPrevColor;
}","public Vec4f getPolylineOcclusionPrevColor(int iNumberOfRenderedLines){
  fOcclusionPrevAlpha=(float)(4 / Math.sqrt(iNumberOfRenderedLines));
  polylineOcclusionPrevColor.set(3,fOcclusionPrevAlpha);
  return polylineOcclusionPrevColor;
}",0.5462012320328542
59132,"public void handlePicking(AUniqueManagedObject uniqueManagedObject,GL gl,PickingJoglMouseListener pickingTriggerMouseAdapter,boolean bIsMaster){
  int iViewID=uniqueManagedObject.getId();
  Point pickPoint=null;
  boolean bMouseReleased=pickingTriggerMouseAdapter.wasMouseReleased();
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasMousePressed() || bMouseReleased) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    hashViewIDToIsMouseOverPickingEvent.put(iViewID,true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(iViewID) != null && hashViewIDToLastMouseMovedTimeStamp.get(iViewID) != null && hashViewIDToIsMouseOverPickingEvent.get(iViewID) == true && System.nanoTime() - hashViewIDToLastMouseMovedTimeStamp.get(iViewID) >= 0) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null) {
    return;
  }
  hashViewIDToIsMouseOverPickingEvent.put(iViewID,false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix((double)pickPoint.x,(double)(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=((AGLCanvasUser)uniqueManagedObject).getViewFrustum();
  if (fAspectRatio < 1.0) {
    fAspectRatio=1.0f / fAspectRatio;
    if (viewFrustum.getProjectionMode().equals(ProjectionMode.ORTHOGRAPHIC)) {
      gl.glOrtho(viewFrustum.getLeft() * fAspectRatio,viewFrustum.getRight() * fAspectRatio,viewFrustum.getBottom(),viewFrustum.getTop(),viewFrustum.getNear(),viewFrustum.getFar());
    }
 else {
      gl.glFrustum(viewFrustum.getLeft() * fAspectRatio,viewFrustum.getRight() * fAspectRatio,viewFrustum.getBottom(),viewFrustum.getTop(),viewFrustum.getNear(),viewFrustum.getFar());
    }
  }
 else {
    if (viewFrustum.getProjectionMode().equals(ProjectionMode.ORTHOGRAPHIC)) {
      gl.glOrtho(viewFrustum.getLeft(),viewFrustum.getRight(),viewFrustum.getBottom() * fAspectRatio,viewFrustum.getTop() * fAspectRatio,viewFrustum.getNear(),viewFrustum.getFar());
    }
 else {
      gl.glFrustum(viewFrustum.getLeft(),viewFrustum.getRight(),viewFrustum.getBottom() * fAspectRatio,viewFrustum.getTop() * fAspectRatio,viewFrustum.getNear(),viewFrustum.getFar());
    }
  }
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  ((AGLCanvasUser)uniqueManagedObject).displayLocal(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,uniqueManagedObject,ePickingMode,bIsMaster,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}","/** 
 * TODO: Documentation
 * @param uniqueManagedObject
 * @param gl
 * @param pickingTriggerMouseAdapter
 * @param bIsMaster
 */
public void handlePicking(AUniqueManagedObject uniqueManagedObject,GL gl,PickingJoglMouseListener pickingTriggerMouseAdapter,boolean bIsMaster){
  int iViewID=uniqueManagedObject.getId();
  Point pickPoint=null;
  boolean bMouseReleased=pickingTriggerMouseAdapter.wasMouseReleased();
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasMousePressed() || bMouseReleased) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    hashViewIDToIsMouseOverPickingEvent.put(iViewID,true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(iViewID) != null && hashViewIDToLastMouseMovedTimeStamp.get(iViewID) != null && hashViewIDToIsMouseOverPickingEvent.get(iViewID) == true && System.nanoTime() - hashViewIDToLastMouseMovedTimeStamp.get(iViewID) >= 0) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null) {
    return;
  }
  hashViewIDToIsMouseOverPickingEvent.put(iViewID,false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix((double)pickPoint.x,(double)(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=((AGLCanvasUser)uniqueManagedObject).getViewFrustum();
  if (fAspectRatio < 1.0) {
    fAspectRatio=1.0f / fAspectRatio;
    if (viewFrustum.getProjectionMode().equals(ProjectionMode.ORTHOGRAPHIC)) {
      gl.glOrtho(viewFrustum.getLeft() * fAspectRatio,viewFrustum.getRight() * fAspectRatio,viewFrustum.getBottom(),viewFrustum.getTop(),viewFrustum.getNear(),viewFrustum.getFar());
    }
 else {
      gl.glFrustum(viewFrustum.getLeft() * fAspectRatio,viewFrustum.getRight() * fAspectRatio,viewFrustum.getBottom(),viewFrustum.getTop(),viewFrustum.getNear(),viewFrustum.getFar());
    }
  }
 else {
    if (viewFrustum.getProjectionMode().equals(ProjectionMode.ORTHOGRAPHIC)) {
      gl.glOrtho(viewFrustum.getLeft(),viewFrustum.getRight(),viewFrustum.getBottom() * fAspectRatio,viewFrustum.getTop() * fAspectRatio,viewFrustum.getNear(),viewFrustum.getFar());
    }
 else {
      gl.glFrustum(viewFrustum.getLeft(),viewFrustum.getRight(),viewFrustum.getBottom() * fAspectRatio,viewFrustum.getTop() * fAspectRatio,viewFrustum.getNear(),viewFrustum.getFar());
    }
  }
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  ((AGLCanvasUser)uniqueManagedObject).display(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,uniqueManagedObject,ePickingMode,bIsMaster,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}",0.9820563195808776
59133,"public void mouseDragged(MouseEvent e){
  int x=e.getX();
  int y=e.getY();
  Dimension size=e.getComponent().getSize();
  if (!bMouseRightButtonDown) {
    if (!bMouseMiddleButtonDown) {
      Rotf currentRotX=new Rotf();
      Rotf currentRotY=new Rotf();
      float fpercentX=(float)(x - prevMouseX) / (float)(size.width) * fMouseSensitivityRotation;
      float fpercentY=(float)(y - prevMouseY) / (float)(size.height) * fMouseSensitivityRotation;
      currentRotX.set(new Vec3f(0,1,0),fpercentX * MathUtil.PI);
      currentRotY.set(new Vec3f(0,1,0),fpercentY * MathUtil.PI);
      currentRotX=currentRotX.times(currentRotY);
      prevMouseX=x;
      prevMouseY=y;
      gLCanvas.getViewCamera().addCameraRotation(currentRotX);
    }
  }
 else {
    Vec3f addVec3f=new Vec3f(fPanScale * ((float)(x - prevMouseX) / (float)size.width),fPanScale * ((float)(prevMouseY - y) / (float)size.height),0.0f);
    prevMouseX=x;
    prevMouseY=y;
    gLCanvas.getViewCamera().addCameraPosition(addVec3f);
  }
}","public void mouseDragged(MouseEvent e){
  int x=e.getX();
  int y=e.getY();
  Dimension size=e.getComponent().getSize();
  if (!bMouseRightButtonDown) {
    if (!bMouseMiddleButtonDown) {
    }
  }
 else {
    Vec3f addVec3f=new Vec3f(fPanScale * ((float)(x - prevMouseX) / (float)size.width),fPanScale * ((float)(prevMouseY - y) / (float)size.height),0.0f);
    prevMouseX=x;
    prevMouseY=y;
    gLCanvas.getViewCamera().addCameraPosition(addVec3f);
  }
}",0.3647540983606557
59134,"public final boolean wasMousePressed(){
  boolean bTmp=bMousePressed;
  bMousePressed=false;
  return bTmp;
}","public final boolean wasMousePressed(){
  boolean bTmp=bMousePressed;
  return bTmp;
}",0.882051282051282
59135,"public final boolean wasMouseReleased(){
  boolean bTmp=bMouseReleased;
  bMouseReleased=false;
  return bTmp;
}","public final boolean wasMouseReleased(){
  boolean bTmp=bMouseReleased;
  return bTmp;
}",0.88
59136,"public final boolean wasMouseDragged(){
  boolean bTmp=bMouseDragged;
  bMouseDragged=false;
  return bTmp;
}","public final boolean wasMouseDragged(){
  boolean bTmp=bMouseDragged;
  return bTmp;
}",0.882051282051282
59137,"public final boolean wasMouseMoved(){
  boolean bTmp=bMouseMoved;
  bMouseMoved=false;
  return bTmp;
}","public final boolean wasMouseMoved(){
  boolean bTmp=bMouseMoved;
  return bTmp;
}",0.8864864864864865
59138,"/** 
 * Initialization for gl called by a managing view Has to call init internally!
 * @param gl
 */
public abstract void initRemote(final GL gl);","/** 
 * Initialization for gl called by a managing view Has to call init internally!
 * @param gl
 */
public abstract void initRemote(final GL gl,final PickingJoglMouseListener pickingTriggerMouseAdapter);",0.8352272727272727
59139,"public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
}","public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.8533333333333334
59140,"public void initRemote(final GL gl){
  init(gl);
}","public void initRemote(final GL gl,final PickingJoglMouseListener pickingTriggerMouseAdapter){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.4545454545454545
59141,"public void initRemote(final GL gl){
  init(gl);
}","public void initRemote(final GL gl,final PickingJoglMouseListener pickingTriggerMouseAdapter){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.4545454545454545
59142,"public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
}","public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.8533333333333334
59143,"public void initRemote(final GL gl){
  init(gl);
}","public void initRemote(final GL gl,final PickingJoglMouseListener pickingTriggerMouseAdapter){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.4545454545454545
59144,"public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
}","public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.8533333333333334
59145,"public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
}","public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.8533333333333334
59146,"public void initRemote(final GL gl){
  init(gl);
}","public void initRemote(final GL gl,final PickingJoglMouseListener pickingTriggerMouseAdapter){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.4545454545454545
59147,"public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
}","public void displayLocal(final GL gl){
  pickingManager.handlePicking(this,gl,pickingTriggerMouseAdapter,true);
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}",0.8533333333333334
59148,"public void initRemote(final GL gl){
  init(gl);
}","public void initRemote(final GL gl,final PickingJoglMouseListener pickingTriggerMouseAdapter){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.4545454545454545
59149,"/** 
 * Reacts on the elements of the pathway tag. An example pathway tag looks like this: <pathway name=""path:map00271""  org=""map"" number=""00271""  title=""Methionine metabolism""  image=""http://www.genome.jp/kegg/pathway/map/map00271.gif""  link=""http://www.genome.jp/dbget-bin/show_pathway?map00271"">
 */
protected void handlePathwayTag(){
  String sName=""String_Node_Str"";
  String sTitle=""String_Node_Str"";
  String sImageLink=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  int iKeggId=0;
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sTitle=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      iKeggId=new Integer(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sImageLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
  }
  if (sTitle.isEmpty())   sTitle=""String_Node_Str"";
  String sPathwayTexturePath=sImageLink.substring(sImageLink.lastIndexOf('/') + 1,sImageLink.length());
  sPathwayTexturePath=refGeneralManager.getSingelton().getPathwayManager().getPathwayDatabaseByType(EPathwayDatabaseType.KEGG).getImagePath() + sPathwayTexturePath;
  ImageIcon img=new ImageIcon(sPathwayTexturePath);
  int iWidth=img.getIconWidth();
  int iHeight=img.getIconHeight();
  currentPathway=refGeneralManager.getSingelton().getPathwayManager().createPathway(EPathwayDatabaseType.KEGG,iKeggId,sName,sTitle,sImageLink,sExternalLink,iWidth,iHeight);
}","/** 
 * Reacts on the elements of the pathway tag. An example pathway tag looks like this: <pathway name=""path:map00271""  org=""map"" number=""00271""  title=""Methionine metabolism""  image=""http://www.genome.jp/kegg/pathway/map/map00271.gif""  link=""http://www.genome.jp/dbget-bin/show_pathway?map00271"">
 */
protected void handlePathwayTag(){
  String sName=""String_Node_Str"";
  String sTitle=""String_Node_Str"";
  String sImageLink=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  int iKeggId=0;
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sTitle=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      iKeggId=new Integer(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sImageLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
  }
  if (sTitle.isEmpty())   sTitle=""String_Node_Str"";
  String sPathwayTexturePath=sImageLink.substring(sImageLink.lastIndexOf('/') + 1,sImageLink.length());
  sPathwayTexturePath=refGeneralManager.getSingelton().getPathwayManager().getPathwayDatabaseByType(EPathwayDatabaseType.KEGG).getImagePath() + sPathwayTexturePath;
  ImageIcon img=new ImageIcon(sPathwayTexturePath);
  int iWidth=img.getIconWidth();
  int iHeight=img.getIconHeight();
  img=null;
  currentPathway=refGeneralManager.getSingelton().getPathwayManager().createPathway(EPathwayDatabaseType.KEGG,iKeggId,sName,sTitle,sImageLink,sExternalLink,iWidth,iHeight);
}",0.9969924812030077
59150,"public void renderPart(GL gl){
  if (iLazyPathwayLoadingId != -1) {
    loadPathwayToUnderInteractionPosition(iLazyPathwayLoadingId);
    iLazyPathwayLoadingId=-1;
  }
  handlePicking(gl);
  if (arSlerpActions.isEmpty() && bSelectionChanged && selectedVertex != null) {
    bSelectionChanged=false;
    bRebuildVisiblePathwayDisplayLists=true;
  }
  if (bRebuildVisiblePathwayDisplayLists)   rebuildVisiblePathwayDisplayLists(gl);
  if (dragAndDrop.isDragActionRunning()) {
    dragAndDrop.renderDragThumbnailTexture(gl);
  }
  if (bUpdateReceived) {
    int[] iArSelectionId=alSetSelection.get(0).getSelectionIdArray();
    ArrayList<IGraphItem> alSelectedVertexReps=new ArrayList<IGraphItem>();
    IPathwayItemManager pathwayItemManager=refGeneralManager.getSingelton().getPathwayItemManager();
    for (int iItemIndex=0; iItemIndex < iArSelectionId.length; iItemIndex++) {
      alSelectedVertexReps.add((IGraphItem)pathwayItemManager.getItem(iArSelectionId[iItemIndex]));
    }
    loadDependentPathways(gl,alSelectedVertexReps);
    bUpdateReceived=false;
  }
  time.update();
  doSlerpActions(gl);
  renderScene(gl);
  renderInfoArea(gl);
  renderConnectingLines(gl);
}","public void renderPart(GL gl){
  if (iLazyPathwayLoadingId != -1) {
    loadPathwayToUnderInteractionPosition(iLazyPathwayLoadingId);
    iLazyPathwayLoadingId=-1;
  }
  handlePicking(gl);
  if (arSlerpActions.isEmpty() && bSelectionChanged && selectedVertex != null) {
    bSelectionChanged=false;
    bRebuildVisiblePathwayDisplayLists=true;
  }
  if (bRebuildVisiblePathwayDisplayLists)   rebuildVisiblePathwayDisplayLists(gl);
  if (dragAndDrop.isDragActionRunning()) {
    dragAndDrop.renderDragThumbnailTexture(gl);
  }
  if (bUpdateReceived) {
    int[] iArSelectionId=alSetSelection.get(0).getSelectionIdArray();
    ArrayList<IGraphItem> alSelectedVertexReps=new ArrayList<IGraphItem>();
    IPathwayItemManager pathwayItemManager=refGeneralManager.getSingelton().getPathwayItemManager();
    for (int iItemIndex=0; iItemIndex < iArSelectionId.length; iItemIndex++) {
      alSelectedVertexReps.add((IGraphItem)pathwayItemManager.getItem(iArSelectionId[iItemIndex]));
    }
    loadDependentPathways(gl,alSelectedVertexReps);
    bUpdateReceived=false;
  }
  time.update();
  doSlerpActions(gl);
  renderConnectingLines(gl);
  renderScene(gl);
  renderInfoArea(gl);
}",0.9753401360544216
59151,"private void renderPathwayById(final GL gl,final int iPathwayId,final JukeboxHierarchyLayer layer){
  if (!layer.getElementVisibilityById(iPathwayId))   return;
  gl.glPushMatrix();
  Transform transform=layer.getTransformByElementId(iPathwayId);
  Vec3f translation=transform.getTranslation();
  Rotf rot=transform.getRotation();
  Vec3f scale=transform.getScale();
  Vec3f axis=new Vec3f();
  float fAngle=rot.get(axis);
  gl.glTranslatef(translation.x(),translation.y(),translation.z());
  gl.glScalef(scale.x(),scale.y(),scale.z());
  gl.glRotatef(Vec3f.convertRadiant2Grad(fAngle),axis.x(),axis.y(),axis.z());
  if (bEnablePathwayTextures) {
    if (!layer.getElementList().isEmpty() && pathwayUnderInteractionLayer.getElementIdByPositionIndex(0) == iPathwayId) {
      refGLPathwayTextureManager.renderPathway(gl,iPathwayId,fTextureTransparency,true);
    }
 else {
      refGLPathwayTextureManager.renderPathway(gl,iPathwayId,fTextureTransparency,false);
    }
  }
  float tmp=GLPathwayManager.SCALING_FACTOR_Y * ((PathwayGraph)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getHeight();
  gl.glTranslatef(0,tmp,0);
  if (layer.equals(pathwayLayeredLayer)) {
    refGLPathwayManager.renderPathway(gl,iPathwayId,false);
  }
 else {
    refGLPathwayManager.renderPathway(gl,iPathwayId,true);
  }
  gl.glTranslatef(0,-tmp,0);
  gl.glPopMatrix();
}","private void renderPathwayById(final GL gl,final int iPathwayId,final JukeboxHierarchyLayer layer){
  if (!layer.getElementVisibilityById(iPathwayId))   return;
  gl.glPushMatrix();
  Transform transform=layer.getTransformByElementId(iPathwayId);
  Vec3f translation=transform.getTranslation();
  Rotf rot=transform.getRotation();
  Vec3f scale=transform.getScale();
  Vec3f axis=new Vec3f();
  float fAngle=rot.get(axis);
  gl.glTranslatef(translation.x(),translation.y(),translation.z());
  gl.glScalef(scale.x(),scale.y(),scale.z());
  gl.glRotatef(Vec3f.convertRadiant2Grad(fAngle),axis.x(),axis.y(),axis.z());
  if (bEnablePathwayTextures) {
    if (!layer.getElementList().isEmpty() && pathwayUnderInteractionLayer.getElementIdByPositionIndex(0) == iPathwayId) {
      if (layer.equals(pathwayLayeredLayer)) {
        refGLPathwayTextureManager.renderPathway(gl,iPathwayId,fTextureTransparency,true);
      }
 else {
        refGLPathwayTextureManager.renderPathway(gl,iPathwayId,1.0f,true);
      }
    }
 else {
      refGLPathwayTextureManager.renderPathway(gl,iPathwayId,fTextureTransparency,false);
    }
  }
  float tmp=GLPathwayManager.SCALING_FACTOR_Y * ((PathwayGraph)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getHeight();
  gl.glTranslatef(0,tmp,0);
  if (layer.equals(pathwayLayeredLayer)) {
    refGLPathwayManager.renderPathway(gl,iPathwayId,false);
  }
 else {
    refGLPathwayManager.renderPathway(gl,iPathwayId,true);
  }
  gl.glTranslatef(0,-tmp,0);
  gl.glPopMatrix();
}",0.9490358126721764
59152,"public void renderMemoPad(final GL gl){
  gl.glLoadName(MEMO_PAD_PICKING_ID);
  gl.glColor3f(0.5f,0.5f,0.5f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(-0.7f,-1.5f,0.0f);
  gl.glVertex3f(-0.7f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-1.5f,0.0f);
  gl.glEnd();
  gl.glLineWidth(2);
  gl.glColor3f(0.2f,0.2f,0.2f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(-0.7f,-1.5f,0.0f);
  gl.glVertex3f(-0.7f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-1.5f,0.0f);
  gl.glEnd();
  if (textRenderer == null)   return;
  textRenderer.begin3DRendering();
  textRenderer.setColor(0.7f,0.7f,0.7f,1.0f);
  textRenderer.draw3D(""String_Node_Str"",1.3f,-2.2f,0.01f,0.005f);
  textRenderer.end3DRendering();
  Iterator<Integer> iterMemoPathwayIndex=memoPad.getElementList().iterator();
  while (iterMemoPathwayIndex.hasNext()) {
    int iPathwayId=iterMemoPathwayIndex.next();
    gl.glPushMatrix();
    Transform transform=memoPad.getTransformByElementId(iPathwayId);
    Vec3f translation=transform.getTranslation();
    gl.glTranslatef(translation.x(),translation.y(),translation.z());
    Vec3f scale=transform.getScale();
    gl.glScalef(scale.x(),scale.y(),scale.z());
    refGLPathwayTextureManager.renderPathway(gl,iPathwayId,1f,false);
    float tmp=refGLPathwayTextureManager.getTextureByPathwayId(iPathwayId).getImageHeight() * GLPathwayManager.SCALING_FACTOR_Y;
    gl.glTranslatef(0,tmp,0.01f);
    refGLPathwayManager.renderPathway(gl,iPathwayId,false);
    gl.glTranslatef(0,-tmp,0.01f);
    gl.glPopMatrix();
  }
  renderTrashCan(gl);
}","public void renderMemoPad(final GL gl){
  gl.glLoadName(MEMO_PAD_PICKING_ID);
  gl.glColor3f(0.7f,0.7f,0.7f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(-0.7f,-1.5f,0.0f);
  gl.glVertex3f(-0.7f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-1.5f,0.0f);
  gl.glEnd();
  gl.glLineWidth(2);
  gl.glColor3f(0.4f,0.4f,0.4f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(-0.7f,-1.5f,0.0f);
  gl.glVertex3f(-0.7f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-2.3f,0.0f);
  gl.glVertex3f(4.0f,-1.5f,0.0f);
  gl.glEnd();
  if (textRenderer == null)   return;
  textRenderer.begin3DRendering();
  textRenderer.setColor(0.7f,0.7f,0.7f,1.0f);
  textRenderer.draw3D(""String_Node_Str"",1.3f,-2.2f,0.01f,0.005f);
  textRenderer.end3DRendering();
  Iterator<Integer> iterMemoPathwayIndex=memoPad.getElementList().iterator();
  while (iterMemoPathwayIndex.hasNext()) {
    int iPathwayId=iterMemoPathwayIndex.next();
    gl.glPushMatrix();
    Transform transform=memoPad.getTransformByElementId(iPathwayId);
    Vec3f translation=transform.getTranslation();
    gl.glTranslatef(translation.x(),translation.y(),translation.z());
    Vec3f scale=transform.getScale();
    gl.glScalef(scale.x(),scale.y(),scale.z());
    refGLPathwayTextureManager.renderPathway(gl,iPathwayId,1f,false);
    float tmp=refGLPathwayTextureManager.getTextureByPathwayId(iPathwayId).getImageHeight() * GLPathwayManager.SCALING_FACTOR_Y;
    gl.glTranslatef(0,tmp,0.01f);
    refGLPathwayManager.renderPathway(gl,iPathwayId,false);
    gl.glTranslatef(0,-tmp,0.01f);
    gl.glPopMatrix();
  }
  renderTrashCan(gl);
}",0.9861548143486468
59153,"public void appendMappingToFile(final String sBioCartaGeneID,final String sAccessionNumber){
  outputWriter.append(sAccessionNumber + ""String_Node_Str"" + sBioCartaGeneID+ ""String_Node_Str"");
}","public void appendMappingToFile(final String sBioCartaGeneID,final String sAccessionNumber){
  outputWriter.println(sAccessionNumber + ""String_Node_Str"" + sBioCartaGeneID);
  outputWriter.flush();
}",0.8974358974358975
59154,"public MappingBuilder_BioCartaGeneID2Accession() throws IOException {
  outputWriter=new PrintWriter(OUTPUT_FILE_PATH);
}","public MappingBuilder_BioCartaGeneID2Accession() throws IOException {
  outputWriter=new PrintWriter(new BufferedWriter(new FileWriter(OUTPUT_FILE_PATH),100000));
}",0.8491228070175438
59155,"/** 
 * Add a selection
 * @param iElementID
 * @param selectedElementRep
 */
public void addSelection(final int iElementID,final SelectedElementRep selectedElementRep){
  if (!hashSelectedElementID2SelectedElementReps.containsKey(iElementID)) {
    hashSelectedElementID2SelectedElementReps.put(iElementID,new ArrayList<SelectedElementRep>());
    hashSelectedElementID2SelectedElementReps.get(iElementID).add(selectedElementRep);
  }
}","/** 
 * Add a selection
 * @param iElementID
 * @param selectedElementRep
 */
public void addSelection(final int iElementID,final SelectedElementRep selectedElementRep){
  if (!hashSelectedElementID2SelectedElementReps.containsKey(iElementID)) {
    hashSelectedElementID2SelectedElementReps.put(iElementID,new ArrayList<SelectedElementRep>());
  }
  hashSelectedElementID2SelectedElementReps.get(iElementID).add(selectedElementRep);
}",0.993119266055046
59156,"public void mouseDragged(MouseEvent e){
  int x=e.getX();
  int y=e.getY();
  Dimension size=e.getComponent().getSize();
  if (!bMouseRightButtonDown) {
    if (!bMouseMiddleButtonDown) {
      Rotf currentRotX=new Rotf();
      Rotf currentRotY=new Rotf();
      float fpercentX=(float)(x - prevMouseX) / (float)(size.width) * fMouseSensitivityRotation;
      float fpercentY=(float)(y - prevMouseY) / (float)(size.height) * fMouseSensitivityRotation;
      currentRotX.set(new Vec3f(0,1,0),fpercentX * MathUtil.PI);
      currentRotY.set(new Vec3f(0,1,0),fpercentY * MathUtil.PI);
      currentRotX=currentRotX.times(currentRotY);
      prevMouseX=x;
      prevMouseY=y;
      gLCanvas.getViewCamera().addCameraRotation(currentRotX);
    }
 else {
      float zoomX=fZoomScale * (float)(x - prevMouseX);
      float zoomY=fZoomScale * (float)(prevMouseY - y);
      if ((zoomX < 0.0f) && (zoomY > 0.0f)) {
        zoomX=-zoomX;
      }
      prevMouseX=x;
      prevMouseY=y;
      gLCanvas.getViewCamera().addCameraScale(new Vec3f(0,0,zoomY + zoomX));
    }
  }
 else {
    Vec3f addVec3f=new Vec3f(fPanScale * ((float)(x - prevMouseX) / (float)size.width),fPanScale * ((float)(prevMouseY - y) / (float)size.height),0.0f);
    prevMouseX=x;
    prevMouseY=y;
    gLCanvas.getViewCamera().addCameraPosition(addVec3f);
  }
}","public void mouseDragged(MouseEvent e){
  int x=e.getX();
  int y=e.getY();
  Dimension size=e.getComponent().getSize();
  if (!bMouseRightButtonDown) {
  }
 else {
    Vec3f addVec3f=new Vec3f(fPanScale * ((float)(x - prevMouseX) / (float)size.width),fPanScale * ((float)(prevMouseY - y) / (float)size.height),0.0f);
    prevMouseX=x;
    prevMouseY=y;
    gLCanvas.getViewCamera().addCameraPosition(addVec3f);
  }
}",0.2652123995407577
59157,"protected void checkForHits(){
  if (pickingManager.getHits(this,GLPathwayManager.PATHWAY_VERTEX_SELECTION) != null) {
    ArrayList<Pick> tempList=pickingManager.getHits(this,GLPathwayManager.PATHWAY_VERTEX_SELECTION);
    if (tempList != null) {
      if (tempList.size() != 0) {
        int iElementID=pickingManager.getExternalIDFromPickingID(this,tempList.get(0).getPickingID());
        PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)generalManager.getSingelton().getPathwayItemManager().getItem(iElementID);
        PathwayVertexGraphItem tmpVertexGraphItem=(PathwayVertexGraphItem)tmpVertexGraphItemRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0);
        int iGeneID=generalManager.getSingelton().getGenomeIdManager().getIdIntFromStringByMapping(tmpVertexGraphItem.getName().substring(4),EGenomeMappingType.NCBI_GENEID_CODE_2_NCBI_GENEID);
        if (iGeneID == -1) {
          return;
        }
        int iAccessionID=generalManager.getSingelton().getGenomeIdManager().getIdIntFromIntByMapping(iGeneID,EGenomeMappingType.NCBI_GENEID_2_ACCESSION);
        selectionManager.clear();
        int iPathwayHeight=((PathwayGraph)generalManager.getSingelton().getPathwayManager().getItem(iPathwayID)).getHeight();
        selectionManager.modifySelection(iAccessionID,new SelectedElementRep(this.getId(),tmpVertexGraphItemRep.getXOrigin(),iPathwayHeight - tmpVertexGraphItemRep.getYOrigin()),ESelectionMode.ReplacePick);
        int[] iArTmpSelectionId=new int[1];
        int[] iArTmpDepth=new int[1];
        iArTmpSelectionId[0]=iAccessionID;
        iArTmpDepth[0]=0;
        alSetSelection.get(0).getWriteToken();
        alSetSelection.get(0).updateSelectionSet(iUniqueId,iArTmpSelectionId,iArTmpDepth,new int[0]);
        alSetSelection.get(0).returnWriteToken();
        alSetSelection.get(0).updateSelectionSet(iUniqueId);
      }
    }
    pickingManager.flushHits(this,GLPathwayManager.PATHWAY_VERTEX_SELECTION);
  }
}","protected void checkForHits(){
  if (pickingManager.getHits(this,GLPathwayManager.PATHWAY_VERTEX_SELECTION) != null) {
    ArrayList<Pick> tempList=pickingManager.getHits(this,GLPathwayManager.PATHWAY_VERTEX_SELECTION);
    if (tempList != null) {
      if (tempList.size() != 0) {
        int iElementID=pickingManager.getExternalIDFromPickingID(this,tempList.get(0).getPickingID());
        PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)generalManager.getSingelton().getPathwayItemManager().getItem(iElementID);
        PathwayVertexGraphItem tmpVertexGraphItem=(PathwayVertexGraphItem)tmpVertexGraphItemRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0);
        int iGeneID=generalManager.getSingelton().getGenomeIdManager().getIdIntFromStringByMapping(tmpVertexGraphItem.getName().substring(4),EGenomeMappingType.NCBI_GENEID_CODE_2_NCBI_GENEID);
        if (iGeneID == -1) {
          return;
        }
        int iAccessionID=generalManager.getSingelton().getGenomeIdManager().getIdIntFromIntByMapping(iGeneID,EGenomeMappingType.NCBI_GENEID_2_ACCESSION);
        selectionManager.clear();
        int iPathwayHeight=((PathwayGraph)generalManager.getSingelton().getPathwayManager().getItem(iPathwayID)).getHeight();
        selectionManager.modifySelection(iAccessionID,new SelectedElementRep(this.getId(),tmpVertexGraphItemRep.getXOrigin(),iPathwayHeight - tmpVertexGraphItemRep.getYOrigin()),ESelectionMode.AddPick);
        int[] iArTmpSelectionId=new int[1];
        int[] iArTmpDepth=new int[1];
        iArTmpSelectionId[0]=iAccessionID;
        iArTmpDepth[0]=0;
        alSetSelection.get(0).getWriteToken();
        alSetSelection.get(0).updateSelectionSet(iUniqueId,iArTmpSelectionId,iArTmpDepth,new int[0]);
        alSetSelection.get(0).returnWriteToken();
      }
    }
    pickingManager.flushHits(this,GLPathwayManager.PATHWAY_VERTEX_SELECTION);
  }
}",0.9817433787606068
59158,"private void pickObjects(final GL gl,Point pickPoint){
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix((double)pickPoint.x,(double)(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  if (fAspectRatio < 1.0) {
    fAspectRatio=1.0f / fAspectRatio;
    gl.glOrtho(-4 * fAspectRatio,4 * fAspectRatio,-4 * 1.0,4 * 1.0,-1.0,1.0);
  }
 else   gl.glOrtho(-4 * 1.0,4 * 1.0,-4 * fAspectRatio,4 * fAspectRatio,-1.0,1.0);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  renderScene(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  processHits(gl,iHitCount,iArPickingBuffer,tmpPickPoint);
}","private void pickObjects(final GL gl,Point pickPoint){
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix((double)pickPoint.x,(double)(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  if (fAspectRatio < 1.0) {
    fAspectRatio=1.0f / fAspectRatio;
    gl.glOrtho(-4 * fAspectRatio,4 * fAspectRatio,-4 * 1.0,4 * 1.0,-1.0,1.0);
  }
 else   gl.glOrtho(-4 * 1.0,4 * 1.0,-4 * fAspectRatio,4 * fAspectRatio,-1.0,1.0);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  renderScene(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingManager.processHits(this,iHitCount,iArPickingBuffer,EPickingMode.CLICKED);
}",0.9437939110070258
59159,"private void doSlerpActions(final GL gl){
  if (arSlerpActions.isEmpty())   return;
  if (iSlerpFactor < 1000) {
    iSlerpFactor+=1200 * time.deltaT();
    if (iSlerpFactor > 1000)     iSlerpFactor=1000;
    System.out.println(""String_Node_Str"" + iSlerpFactor);
  }
  slerpPathway(gl,arSlerpActions.get(0));
}","private void doSlerpActions(final GL gl){
  if (arSlerpActions.isEmpty())   return;
  if (iSlerpFactor < 1000) {
    iSlerpFactor+=1200 * time.deltaT();
    if (iSlerpFactor > 1000)     iSlerpFactor=1000;
  }
  slerpPathway(gl,arSlerpActions.get(0));
}",0.896797153024911
59160,"/** 
 * Get the GLCanvas.
 * @return The GLCanvas that is supposed to be filled by the View.
 */
public GLCanvas getGLCanvas(){
  return refGLCanvas;
}","/** 
 * Get the GLCanvas embedded in a JPanel. Obviously this is faster than the GLCanvas AWT embedded frame!
 * @return The GLCanvas that is supposed to be filled by the View.
 */
public GLJPanel getGLCanvas(){
  return refGLCanvas;
}",0.7512953367875648
59161,"private List<List<IGraphItem>> createDepthSortedList(final int iSetDepth){
  List<List<IGraphItem>> resultDepthSortedList=new ArrayList<List<IGraphItem>>(iSetDepth);
  for (int i=0; i < iSearchDepth; i++) {
    depthSortedList.add(i,new ArrayList<IGraphItem>());
  }
  return resultDepthSortedList;
}","private List<List<IGraphItem>> createDepthSortedList(final int iSetDepth){
  List<List<IGraphItem>> resultDepthSortedList=new ArrayList<List<IGraphItem>>(iSetDepth);
  for (int i=0; i < iSearchDepth; i++) {
    resultDepthSortedList.add(i,new ArrayList<IGraphItem>());
  }
  return resultDepthSortedList;
}",0.768976897689769
59162,"public final List<List<IGraphItem>> getSearchResultDepthOrdered(){
  List<List<IGraphItem>> resultList=createDepthSortedList(iSearchDepth);
  Iterator<List<IGraphItem>> iterDepthLevels=depthSortedList.iterator();
  for (int i=0; iterDepthLevels.hasNext(); i++) {
    List<IGraphItem> resultListDepthLevels=resultList.get(i);
    Iterator<IGraphItem> iterInnerLoop=iterDepthLevels.next().iterator();
    while (iterInnerLoop.hasNext()) {
      resultListDepthLevels.add(iterInnerLoop.next());
    }
  }
  return resultList;
}","/** 
 * Create a deep copy of teh search result list.
 * @return deep copy of the search result list
 */
public final List<List<IGraphItem>> getSearchResultDepthOrdered(){
  List<List<IGraphItem>> resultList=createDepthSortedList(depthSortedList.size());
  Iterator<List<IGraphItem>> iterRawDataTopLevel=depthSortedList.iterator();
  int index=0;
  while (iterRawDataTopLevel.hasNext()) {
    List<IGraphItem> currentRawDataDepthList=iterRawDataTopLevel.next();
    Iterator<IGraphItem> iterRawDataInnerLoop=currentRawDataDepthList.iterator();
    ArrayList<IGraphItem> resultListDeepCopy=new ArrayList<IGraphItem>(currentRawDataDepthList.size());
    while (iterRawDataInnerLoop.hasNext()) {
      resultListDeepCopy.add(iterRawDataInnerLoop.next());
    }
    resultList.set(index,resultListDeepCopy);
    index++;
  }
  return resultList;
}",0.3291880029261156
59163,"public void updateReceiver(Object eventTrigger,ISet updatedSet){
  refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + eventTrigger.getClass().getSimpleName()+ ""String_Node_Str""+ eventTrigger.toString()+ ""String_Node_Str"",LoggerType.STATUS);
  refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + updatedSet.toString(),LoggerType.STATUS);
  if (this.hashExternalId_2_HeatmapIndex == null) {
    init_External2InternalHashMap();
  }
  IStorage[] storage=updatedSet.getStorageByDim(0);
  ArrayList<Integer> resultBuffer=new ArrayList<Integer>(10);
  ArrayList<Integer> resultBufferMode=new ArrayList<Integer>(10);
  for (int i=0; i < storage.length; i++) {
    int[] intBuffer=storage[0].getArrayInt();
    int[] intBufferMode=storage[1].getArrayInt();
    for (int j=0; j < intBuffer.length; j++) {
      Iterator<IGraphItem> iterGraphItemRep=((IGraphItem)refGeneralManager.getSingelton().getPathwayItemManager().getItem(intBuffer[j])).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).iterator();
      while (iterGraphItemRep.hasNext()) {
        Integer indexInt=hashExternalId_2_HeatmapIndex.get(iterGraphItemRep.next().getId());
        if (indexInt != null) {
          System.err.print(""String_Node_Str"" + intBuffer[j] + ""String_Node_Str""+ indexInt+ ""String_Node_Str"");
          resultBuffer.add(indexInt);
          if (intBufferMode.length != 0) {
            resultBufferMode.add(intBufferMode[j]);
          }
 else {
            resultBufferMode.add(iSelectedMode_identifyier);
          }
        }
 else {
          System.err.print(""String_Node_Str"" + intBuffer[j] + ""String_Node_Str"");
        }
      }
    }
  }
  if (!resultBuffer.isEmpty()) {
    System.err.print(""String_Node_Str"");
    setSelectedIndex_asArrayList(resultBuffer,resultBufferMode);
  }
}","public void updateReceiver(Object eventTrigger,ISet updatedSet){
  refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + eventTrigger.getClass().getSimpleName()+ ""String_Node_Str""+ eventTrigger.toString()+ ""String_Node_Str"",LoggerType.STATUS);
  refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + updatedSet.toString(),LoggerType.STATUS);
  if (this.hashExternalId_2_HeatmapIndex == null) {
    init_External2InternalHashMap();
  }
  IStorage[] storage=updatedSet.getStorageByDim(0);
  ArrayList<Integer> resultBuffer=new ArrayList<Integer>(10);
  ArrayList<Integer> resultBufferMode=new ArrayList<Integer>(10);
  int[] intBuffer=storage[0].getArrayInt();
  int[] intBufferMode=storage[1].getArrayInt();
  for (int j=0; j < intBuffer.length; j++) {
    Iterator<IGraphItem> iterGraphItemRep=((IGraphItem)refGeneralManager.getSingelton().getPathwayItemManager().getItem(intBuffer[j])).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).iterator();
    while (iterGraphItemRep.hasNext()) {
      Integer indexInt=hashExternalId_2_HeatmapIndex.get(iterGraphItemRep.next().getId());
      if (indexInt != null) {
        System.err.print(""String_Node_Str"" + intBuffer[j] + ""String_Node_Str""+ indexInt+ ""String_Node_Str"");
        resultBuffer.add(indexInt);
        if (intBufferMode.length != 0) {
          resultBufferMode.add(intBufferMode[j]);
        }
 else {
          resultBufferMode.add(iSelectedMode_identifyier);
        }
      }
 else {
        System.err.print(""String_Node_Str"" + intBuffer[j] + ""String_Node_Str"");
      }
    }
  }
  if (!resultBuffer.isEmpty()) {
    System.err.print(""String_Node_Str"");
    setSelectedIndex_asArrayList(resultBuffer,resultBufferMode);
  }
}",0.9765904709446434
59164,"/** 
 * Create a deep copy of teh search result list.
 * @return deep copy of the search result list
 */
public final List<List<IGraphItem>> getSearchResultDepthOrdered(){
  List<List<IGraphItem>> resultList=createDepthSortedList(depthSortedList.size());
  Iterator<List<IGraphItem>> iterRawDataTopLevel=depthSortedList.iterator();
  int index=0;
  while (iterRawDataTopLevel.hasNext()) {
    List<IGraphItem> currentRawDataDepthList=iterRawDataTopLevel.next();
    Iterator<IGraphItem> iterRawDataInnerLoop=currentRawDataDepthList.iterator();
    ArrayList<IGraphItem> resultListDeepCopy=new ArrayList<IGraphItem>(currentRawDataDepthList.size());
    while (iterRawDataInnerLoop.hasNext()) {
      resultListDeepCopy.add(iterRawDataInnerLoop.next());
    }
    resultList.set(index,resultListDeepCopy);
    index++;
  }
  return resultList;
}","/** 
 * Create a deep copy of teh search result list.
 * @return deep copy of the search result list
 */
public final List<List<IGraphItem>> getSearchResultDepthOrdered(){
  List<List<IGraphItem>> resultList=createDepthSortedList(depthSortedList.size());
  for (int iIndex=0; iIndex < depthSortedList.size(); iIndex++) {
    List<IGraphItem> currentRawDataDepthList=depthSortedList.get(iIndex);
    Iterator<IGraphItem> iterRawDataInnerLoop=currentRawDataDepthList.iterator();
    ArrayList<IGraphItem> resultListDeepCopy=new ArrayList<IGraphItem>(currentRawDataDepthList.size());
    while (iterRawDataInnerLoop.hasNext()) {
      resultListDeepCopy.add(iterRawDataInnerLoop.next());
    }
    resultList.set(iIndex,resultListDeepCopy);
  }
  return resultList;
}",0.3609209707529558
59165,"public List<IGraphItem> getSearchResult(){
  if (iSearchDepth < 1) {
    return new ArrayList<IGraphItem>(0);
  }
  List<IGraphItem> resultList=new ArrayList<IGraphItem>();
  List<IGraphItem> tmpList=this.itemSource.getAllItemsByProp(prop);
  Iterator<IGraphItem> iterTmpGraphItems=tmpList.iterator();
  while (iterTmpGraphItems.hasNext()) {
    resultList.add(iterTmpGraphItems.next());
  }
  if (iSearchDepth == 1) {
    depthSortedList.add(0,resultList);
    return resultList;
  }
  List<IGraphItem> currentSourceList=new ArrayList<IGraphItem>(resultList);
  depthSortedList.add(0,currentSourceList);
  for (int iCurrentDepthIndex=1; iCurrentDepthIndex < this.iSearchDepth; iCurrentDepthIndex++) {
    List<IGraphItem> currentLevel=new ArrayList<IGraphItem>();
    Iterator<IGraphItem> iter=currentSourceList.iterator();
    while (iter.hasNext()) {
      Iterator<IGraphItem> iterInner=iter.next().getAllItemsByProp(prop).iterator();
      while (iterInner.hasNext()) {
        IGraphItem item=iterInner.next();
        if (!resultList.contains(item)) {
          resultList.add(item);
          currentLevel.add(item);
        }
      }
    }
    depthSortedList.add(iCurrentDepthIndex,currentLevel);
    currentSourceList=currentLevel;
  }
  return resultList;
}","public List<IGraphItem> getSearchResult(){
  if (iSearchDepth < 1) {
    return new ArrayList<IGraphItem>(0);
  }
  List<IGraphItem> resultList=new ArrayList<IGraphItem>();
  List<IGraphItem> tmpList=this.itemSource.getAllItemsByProp(prop);
  Iterator<IGraphItem> iterTmpGraphItems=tmpList.iterator();
  while (iterTmpGraphItems.hasNext()) {
    resultList.add(iterTmpGraphItems.next());
  }
  if (iSearchDepth == 1) {
    depthSortedList.set(0,resultList);
    return resultList;
  }
  List<IGraphItem> currentSourceList=new ArrayList<IGraphItem>(resultList);
  depthSortedList.set(0,currentSourceList);
  for (int iCurrentDepthIndex=1; iCurrentDepthIndex < this.iSearchDepth; iCurrentDepthIndex++) {
    List<IGraphItem> currentLevel=new ArrayList<IGraphItem>();
    Iterator<IGraphItem> iter=currentSourceList.iterator();
    while (iter.hasNext()) {
      Iterator<IGraphItem> iterInner=iter.next().getAllItemsByProp(prop).iterator();
      while (iterInner.hasNext()) {
        IGraphItem item=iterInner.next();
        if (!resultList.contains(item)) {
          resultList.add(item);
          currentLevel.add(item);
        }
      }
    }
    depthSortedList.set(iCurrentDepthIndex,currentLevel);
    currentSourceList=currentLevel;
  }
  return resultList;
}",0.9929078014184396
59166,"protected void processHits(final GL gl,int iHitCount,int iArPickingBuffer[]){
  IPathwayVertexRep refPickedVertexRep;
  int iPtr=0;
  int i=0;
  int iPickedObjectId=0;
  iPtr++;
  iPtr++;
  iPtr++;
  iPickedObjectId=iArPickingBuffer[iPtr];
  System.out.println(""String_Node_Str"" + iPickedObjectId);
  if (iPickedObjectId <= 100) {
    int iPathwayId=refHashPoolLinePickId2PathwayId.get(iPickedObjectId);
    System.out.println(""String_Node_Str"" + iPathwayId);
    if (bIsMouseOverPickingEvent) {
      if (iMouseOverPickedPathwayId != iPathwayId) {
        iMouseOverPickedPathwayId=iPathwayId;
        playPathwayPoolTickSound();
      }
      return;
    }
    if (iSlerpFactor > 0 && iSlerpFactor < 1000)     return;
    arSlerpActions.clear();
    if (!pathwayUnderInteractionLayer.getElementList().isEmpty()) {
      SlerpAction reverseSlerpAction=new SlerpAction(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0),pathwayUnderInteractionLayer,true,true,0);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false,false,pathwayLayeredLayer.getElementList().size());
    arSlerpActions.add(slerpAction);
    iSlerpFactor=0;
    return;
  }
 else   if (iPickedObjectId == 101) {
    return;
  }
  refPickedVertexRep=refPathwayManager.getVertexRepByPickID(iPickedObjectId);
  iMouseOverPickedPathwayId=-1;
  if (refPickedVertexRep == null)   return;
  System.out.println(""String_Node_Str"" + refPickedVertexRep.getName());
  loadNodeInformationInBrowser(refPickedVertexRep.getVertex().getVertexLink());
  if (refPickedVertexRep.getVertex().getVertexType().equals(PathwayVertexType.map)) {
    if (iSlerpFactor > 0 && iSlerpFactor < 1000)     return;
    String strTmp=""String_Node_Str"";
    strTmp=refPickedVertexRep.getVertex().getElementTitle();
    arSlerpActions.clear();
    int iPathwayId=-1;
    try {
      iPathwayId=Integer.parseInt(strTmp.substring(strTmp.length() - 4));
    }
 catch (    NumberFormatException e) {
      return;
    }
    if (!refGeneralManager.getSingelton().getPathwayManager().hasItem(iPathwayId))     return;
    System.out.println(""String_Node_Str"" + iPathwayId);
    if (!pathwayUnderInteractionLayer.getElementList().isEmpty()) {
      SlerpAction reverseSlerpAction=new SlerpAction(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0),pathwayUnderInteractionLayer,true,true,0);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction slerpAction=null;
    if (pathwayLayeredLayer.containsElement(iPathwayId)) {
      slerpAction=new SlerpAction(iPathwayId,pathwayLayeredLayer,false,false,0);
    }
 else {
      slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false,false,pathwayLayeredLayer.getElementList().size());
    }
    arSlerpActions.add(slerpAction);
    iSlerpFactor=0;
  }
}","protected void processHits(final GL gl,int iHitCount,int iArPickingBuffer[]){
  IPathwayVertexRep refPickedVertexRep;
  int iPtr=0;
  int i=0;
  int iPickedObjectId=0;
  iPtr++;
  iPtr++;
  iPtr++;
  iPickedObjectId=iArPickingBuffer[iPtr];
  if (iPickedObjectId == 0) {
    iMouseOverPickedPathwayId=-1;
    return;
  }
  System.out.println(""String_Node_Str"" + iPickedObjectId);
  if (iPickedObjectId < 101) {
    int iPathwayId=refHashPoolLinePickId2PathwayId.get(iPickedObjectId);
    System.out.println(""String_Node_Str"" + iPathwayId);
    if (bIsMouseOverPickingEvent) {
      if (iMouseOverPickedPathwayId != iPathwayId) {
        iMouseOverPickedPathwayId=iPathwayId;
        playPathwayPoolTickSound();
      }
      return;
    }
    if (iSlerpFactor > 0 && iSlerpFactor < 1000)     return;
    arSlerpActions.clear();
    if (!pathwayUnderInteractionLayer.getElementList().isEmpty()) {
      SlerpAction reverseSlerpAction=new SlerpAction(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0),pathwayUnderInteractionLayer,true,true,0);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false,false,pathwayLayeredLayer.getElementList().size());
    arSlerpActions.add(slerpAction);
    iSlerpFactor=0;
    return;
  }
 else   if (iPickedObjectId == 101) {
    return;
  }
  refPickedVertexRep=refPathwayManager.getVertexRepByPickID(iPickedObjectId);
  iMouseOverPickedPathwayId=-1;
  if (refPickedVertexRep == null)   return;
  System.out.println(""String_Node_Str"" + refPickedVertexRep.getName());
  loadNodeInformationInBrowser(refPickedVertexRep.getVertex().getVertexLink());
  if (refPickedVertexRep.getVertex().getVertexType().equals(PathwayVertexType.map)) {
    if (iSlerpFactor > 0 && iSlerpFactor < 1000)     return;
    String strTmp=""String_Node_Str"";
    strTmp=refPickedVertexRep.getVertex().getElementTitle();
    arSlerpActions.clear();
    int iPathwayId=-1;
    try {
      iPathwayId=Integer.parseInt(strTmp.substring(strTmp.length() - 4));
    }
 catch (    NumberFormatException e) {
      return;
    }
    if (!refGeneralManager.getSingelton().getPathwayManager().hasItem(iPathwayId))     return;
    System.out.println(""String_Node_Str"" + iPathwayId);
    if (!pathwayUnderInteractionLayer.getElementList().isEmpty()) {
      SlerpAction reverseSlerpAction=new SlerpAction(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0),pathwayUnderInteractionLayer,true,true,0);
      arSlerpActions.add(reverseSlerpAction);
    }
    SlerpAction slerpAction=null;
    if (pathwayLayeredLayer.containsElement(iPathwayId)) {
      slerpAction=new SlerpAction(iPathwayId,pathwayLayeredLayer,false,false,0);
    }
 else {
      slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false,false,pathwayLayeredLayer.getElementList().size());
    }
    arSlerpActions.add(slerpAction);
    iSlerpFactor=0;
  }
}",0.9688641502870065
59167,"private void renderPathwayPool(final GL gl){
  ArrayList<Integer> alMagnificationFactor=new ArrayList<Integer>();
  for (int i=0; i < alSetData.get(0).getStorageByDimAndIndex(0,0).getSize(StorageType.INT); i++) {
    alMagnificationFactor.add(0);
  }
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  int iPathwayId=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    if (iMouseOverPickedPathwayId == iPathwayId) {
      if ((iPathwayIndex - 2 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 2) < 1))       alMagnificationFactor.set(iPathwayIndex - 2,1);
      if ((iPathwayIndex - 1 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 1) < 2))       alMagnificationFactor.set(iPathwayIndex - 1,2);
      alMagnificationFactor.set(iPathwayIndex,3);
      if ((iPathwayIndex + 1 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 1) < 2))       alMagnificationFactor.set(iPathwayIndex + 1,2);
      if ((iPathwayIndex + 2 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 2) < 1))       alMagnificationFactor.set(iPathwayIndex + 2,1);
    }
 else     if (pathwayLayeredLayer.containsElement(iPathwayId)) {
      alMagnificationFactor.set(iPathwayIndex,2);
    }
  }
  recalculatePathwayPoolTransformation(alMagnificationFactor);
  float fYPos=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    gl.glPushMatrix();
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    gl.glLoadName(iPathwayIndex);
    if (!refHashPoolLinePickId2PathwayId.containsKey(iPathwayIndex))     refHashPoolLinePickId2PathwayId.put(iPathwayIndex,iPathwayId);
    Transform transform=pathwayPoolLayer.getTransformByElementId(iPathwayId);
    Vec3f translation=transform.getTranslation();
    gl.glTranslatef(translation.x(),translation.y(),translation.z());
    gl.glColor4f(0,0,0,1);
    if (alMagnificationFactor.get(iPathwayIndex) == 3) {
      GLTextUtils.renderText(gl,((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle(),18,0,-0.06f,1);
      fYPos=-0.15f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 2) {
      GLTextUtils.renderText(gl,((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle(),12,0,-0.04f,1);
      fYPos=-0.1f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 1) {
      GLTextUtils.renderText(gl,((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle(),10,0,-0.02f,1);
      fYPos=-0.07f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 0) {
      fYPos=-0.03f;
      gl.glColor3f(0,0,0);
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(0,0,0);
      gl.glVertex3f(0,fYPos,0);
      gl.glVertex3f(0.1f,fYPos,0);
      gl.glVertex3f(0.1f,0,0);
      gl.glEnd();
    }
    gl.glColor4f(0,0,0,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(0,fYPos,0.1f);
    gl.glVertex3f(0.5f,fYPos,0.1f);
    gl.glVertex3f(0.5f,0,0.1f);
    gl.glEnd();
    gl.glPopMatrix();
  }
}","private void renderPathwayPool(final GL gl){
  ArrayList<Integer> alMagnificationFactor=new ArrayList<Integer>();
  for (int i=0; i < alSetData.get(0).getStorageByDimAndIndex(0,0).getSize(StorageType.INT); i++) {
    alMagnificationFactor.add(0);
  }
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  int iPathwayId=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    if (iMouseOverPickedPathwayId == iPathwayId) {
      if ((iPathwayIndex - 2 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 2) < 1))       alMagnificationFactor.set(iPathwayIndex - 2,1);
      if ((iPathwayIndex - 1 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 1) < 2))       alMagnificationFactor.set(iPathwayIndex - 1,2);
      alMagnificationFactor.set(iPathwayIndex,3);
      if ((iPathwayIndex + 1 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 1) < 2))       alMagnificationFactor.set(iPathwayIndex + 1,2);
      if ((iPathwayIndex + 2 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 2) < 1))       alMagnificationFactor.set(iPathwayIndex + 2,1);
    }
 else     if (pathwayLayeredLayer.containsElement(iPathwayId)) {
      alMagnificationFactor.set(iPathwayIndex,2);
    }
  }
  recalculatePathwayPoolTransformation(alMagnificationFactor);
  float fYPos=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    gl.glPushMatrix();
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    gl.glLoadName(iPathwayIndex + 1);
    if (!refHashPoolLinePickId2PathwayId.containsKey(iPathwayIndex + 1))     refHashPoolLinePickId2PathwayId.put(iPathwayIndex + 1,iPathwayId);
    Transform transform=pathwayPoolLayer.getTransformByElementId(iPathwayId);
    Vec3f translation=transform.getTranslation();
    gl.glTranslatef(translation.x(),translation.y(),translation.z());
    gl.glColor4f(0,0,0,1);
    if (alMagnificationFactor.get(iPathwayIndex) == 3) {
      GLTextUtils.renderText(gl,((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle(),18,0,-0.06f,1);
      fYPos=-0.15f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 2) {
      GLTextUtils.renderText(gl,((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle(),12,0,-0.04f,1);
      fYPos=-0.1f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 1) {
      GLTextUtils.renderText(gl,((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle(),10,0,-0.02f,1);
      fYPos=-0.07f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 0) {
      fYPos=-0.03f;
      gl.glColor3f(0,0,0);
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(0,0,0);
      gl.glVertex3f(0,fYPos,0);
      gl.glVertex3f(0.1f,fYPos,0);
      gl.glVertex3f(0.1f,0,0);
      gl.glEnd();
    }
    gl.glColor4f(0,0,0,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(0,fYPos,0.1f);
    gl.glVertex3f(0.5f,fYPos,0.1f);
    gl.glVertex3f(0.5f,0,0.1f);
    gl.glEnd();
    gl.glPopMatrix();
  }
}",0.9981544140264534
59168,"private void drawPickedObjectInfoSingle(final GL gl,final PathwayVertex pickedVertex,final boolean bDrawDisplaced){
  if (fArWorldCoordinatePosition == null)   return;
  gl.glPushMatrix();
  gl.glTranslatef(fArWorldCoordinatePosition[0],fArWorldCoordinatePosition[1],fZValue);
  if (bDrawDisplaced) {
    float fOffsetX=1.0f;
    float fOffsetY=1.0f;
    gl.glScalef(fScaleFactor,fScaleFactor,fScaleFactor);
    gl.glLineWidth(2);
    gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
    gl.glBegin(GL.GL_TRIANGLES);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX,fOffsetY - fHeight,0);
    gl.glVertex3f(fOffsetX,fOffsetY,0);
    gl.glEnd();
    gl.glColor3f(0.2f,0.2f,0.2f);
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX,fOffsetY - fHeight,0);
    gl.glVertex3f(fOffsetX,fOffsetY,0);
    gl.glEnd();
    gl.glTranslatef(fOffsetX,fOffsetY,0.0f);
  }
  if (fScaleFactor < 1.0f) {
    gl.glPopMatrix();
    return;
  }
  float fMaxWidth=calculateInfoAreaWidth(pickedVertex);
  gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(fMaxWidth,0,0);
  gl.glVertex3f(fMaxWidth,-fHeight,0);
  gl.glVertex3f(0,-fHeight,0);
  gl.glEnd();
  gl.glColor3f(0.2f,0.2f,0.2f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(fMaxWidth,0,0);
  gl.glVertex3f(fMaxWidth,-fHeight,0);
  gl.glVertex3f(0,-fHeight,0);
  gl.glEnd();
  drawMappingAnnotation(gl,pickedVertex);
  gl.glPopMatrix();
}","private void drawPickedObjectInfoSingle(final GL gl,final PathwayVertex pickedVertex,final boolean bDrawDisplaced){
  if (fArWorldCoordinatePosition == null)   return;
  gl.glPushMatrix();
  gl.glTranslatef(fArWorldCoordinatePosition[0],fArWorldCoordinatePosition[1],fZValue);
  if (bDrawDisplaced) {
    float fOffsetX=0.5f;
    float fOffsetY=0.7f;
    gl.glScalef(fScaleFactor,fScaleFactor,fScaleFactor);
    gl.glLineWidth(2);
    gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
    gl.glBegin(GL.GL_TRIANGLES);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX,fOffsetY - fHeight,0);
    gl.glVertex3f(fOffsetX,fOffsetY,0);
    gl.glEnd();
    gl.glColor3f(0.2f,0.2f,0.2f);
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX,fOffsetY - fHeight,0);
    gl.glVertex3f(fOffsetX,fOffsetY,0);
    gl.glEnd();
    gl.glTranslatef(fOffsetX,fOffsetY,0.0f);
  }
  if (fScaleFactor < 1.0f) {
    gl.glPopMatrix();
    return;
  }
  float fMaxWidth=calculateInfoAreaWidth(pickedVertex);
  gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(fMaxWidth,0,0);
  gl.glVertex3f(fMaxWidth,-fHeight,0);
  gl.glVertex3f(0,-fHeight,0);
  gl.glEnd();
  gl.glColor3f(0.2f,0.2f,0.2f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(fMaxWidth,0,0);
  gl.glVertex3f(fMaxWidth,-fHeight,0);
  gl.glVertex3f(0,-fHeight,0);
  gl.glEnd();
  drawMappingAnnotation(gl,pickedVertex);
  gl.glPopMatrix();
}",0.9959785522788204
59169,"public static void renderTextInRegion(final GL gl,String showText,final int iSize,final float fx,final float fy,final float fz,final float fWidth,final float fHeight){
  int iMaxLineChars=(int)(fWidth / 0.006f);
  if (iMaxLineChars < 3)   return;
  float fLineHeight=0.03f;
  int iTotalLines=showText.length() / iMaxLineChars;
  String sTmpText;
  for (int iLineIndex=0; iLineIndex <= iTotalLines; iLineIndex++) {
    if (showText.length() <= iMaxLineChars) {
      renderText(gl,showText,iSize,fx,fy + iLineIndex * fLineHeight,fz);
      showText=""String_Node_Str"";
    }
 else {
      sTmpText=showText.subSequence(0,iMaxLineChars).toString();
      if (sTmpText.contains(""String_Node_Str""))       sTmpText=sTmpText.substring(0,sTmpText.lastIndexOf(' '));
      renderText(gl,sTmpText,iSize,fx,fy + iLineIndex * fLineHeight,fz);
      showText=showText.substring(sTmpText.length(),showText.length());
    }
  }
}","public static void renderTextInRegion(final GL gl,String showText,final int iSize,final float fx,final float fy,final float fz,final float fWidth,final float fHeight){
  int iMaxLineChars=(int)(fWidth / 0.006f);
  if (iMaxLineChars < 3)   return;
  float fLineHeight=0.03f;
  int iTotalLines=showText.length() / iMaxLineChars;
  String sTmpText;
  for (int iLineIndex=0; iLineIndex <= iTotalLines; iLineIndex++) {
    if (showText.length() <= iMaxLineChars) {
      renderText(gl,showText,iSize,fx,fy - iLineIndex * fLineHeight,fz);
      showText=""String_Node_Str"";
    }
 else {
      sTmpText=showText.subSequence(0,iMaxLineChars).toString();
      if (sTmpText.contains(""String_Node_Str""))       sTmpText=sTmpText.substring(0,sTmpText.lastIndexOf(' '));
      renderText(gl,sTmpText,iSize,fx,fy - iLineIndex * fLineHeight,fz);
      showText=showText.substring(sTmpText.length(),showText.length());
    }
  }
}",0.9978118161925602
59170,"private void rebuildVisiblePathwayDisplayLists(final GL gl){
  Iterator<Integer> iterVisiblePathway=pathwayLayeredLayer.getElementList().iterator();
  while (iterVisiblePathway.hasNext()) {
    refGLPathwayManager.buildPathwayDisplayList(gl,iterVisiblePathway.next());
  }
  if (!pathwayLayeredLayer.containsElement(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0))) {
    refGLPathwayManager.buildPathwayDisplayList(gl,pathwayUnderInteractionLayer.getElementIdByPositionIndex(0));
  }
}","private void rebuildVisiblePathwayDisplayLists(final GL gl){
  refGLPathwayManager.clearOldPickingIDs();
  Iterator<Integer> iterVisiblePathway=pathwayLayeredLayer.getElementList().iterator();
  while (iterVisiblePathway.hasNext()) {
    refGLPathwayManager.buildPathwayDisplayList(gl,iterVisiblePathway.next());
  }
  if (!pathwayLayeredLayer.containsElement(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0))) {
    refGLPathwayManager.buildPathwayDisplayList(gl,pathwayUnderInteractionLayer.getElementIdByPositionIndex(0));
  }
}",0.4403846153846154
59171,"private void renderPathwayPool(final GL gl){
  ArrayList<Integer> alMagnificationFactor=new ArrayList<Integer>();
  for (int i=0; i < alSetData.get(0).getStorageByDimAndIndex(0,0).getSize(StorageType.INT); i++) {
    alMagnificationFactor.add(0);
  }
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  int iPathwayId=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    if (iMouseOverPickedPathwayId == iPathwayId) {
      if ((iPathwayIndex - 2 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 2) < 1))       alMagnificationFactor.set(iPathwayIndex - 2,1);
      if ((iPathwayIndex - 1 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 1) < 2))       alMagnificationFactor.set(iPathwayIndex - 1,2);
      alMagnificationFactor.set(iPathwayIndex,3);
      if ((iPathwayIndex + 1 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 1) < 2))       alMagnificationFactor.set(iPathwayIndex + 1,2);
      if ((iPathwayIndex + 2 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 2) < 1))       alMagnificationFactor.set(iPathwayIndex + 2,1);
    }
 else     if (pathwayLayeredLayer.containsElement(iPathwayId) || pathwayUnderInteractionLayer.containsElement(iPathwayId)) {
      alMagnificationFactor.set(iPathwayIndex,2);
    }
 else     if (refHashPathwayContainingSelectedVertex2VertexCount.containsKey(iPathwayId)) {
      alMagnificationFactor.set(iPathwayIndex,1);
    }
  }
  recalculatePathwayPoolTransformation(alMagnificationFactor);
  String sRenderText;
  float fYPos=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    gl.glPushMatrix();
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    gl.glLoadName(iPathwayIndex + 1);
    if (!refHashPoolLinePickId2PathwayId.containsKey(iPathwayIndex + 1))     refHashPoolLinePickId2PathwayId.put(iPathwayIndex + 1,iPathwayId);
    Transform transform=pathwayPoolLayer.getTransformByElementId(iPathwayId);
    Vec3f translation=transform.getTranslation();
    gl.glTranslatef(translation.x(),translation.y(),translation.z());
    sRenderText=((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle();
    if (refHashPathwayContainingSelectedVertex2VertexCount.containsKey(iPathwayId)) {
      sRenderText=sRenderText + ""String_Node_Str"" + refHashPathwayContainingSelectedVertex2VertexCount.get(iPathwayId).toString();
    }
    if (pathwayUnderInteractionLayer.containsElement(iPathwayId))     gl.glColor4f(1,0,0,1);
 else     gl.glColor4f(0,0,0,1);
    if (alMagnificationFactor.get(iPathwayIndex) == 3) {
      GLTextUtils.renderText(gl,sRenderText,18,0,0.06f,1);
      fYPos=0.15f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 2) {
      GLTextUtils.renderText(gl,sRenderText,12,0,0.04f,1);
      fYPos=0.1f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 1) {
      GLTextUtils.renderText(gl,sRenderText,10,0,0.02f,1);
      fYPos=0.07f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 0) {
      fYPos=0.02f;
      gl.glColor3f(0,0,0);
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(0,0,0);
      gl.glVertex3f(0,fYPos,0);
      gl.glVertex3f(0.1f,fYPos,0);
      gl.glVertex3f(0.1f,0,0);
      gl.glEnd();
    }
    gl.glColor4f(0,0,0,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(0,fYPos,0.1f);
    gl.glVertex3f(0.5f,fYPos,0.1f);
    gl.glVertex3f(0.5f,0,0.1f);
    gl.glEnd();
    gl.glPopMatrix();
  }
}","private void renderPathwayPool(final GL gl){
  ArrayList<Integer> alMagnificationFactor=new ArrayList<Integer>();
  for (int i=0; i < alSetData.get(0).getStorageByDimAndIndex(0,0).getSize(StorageType.INT); i++) {
    alMagnificationFactor.add(0);
  }
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  int iPathwayId=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    if (iMouseOverPickedPathwayId == iPathwayId) {
      if ((iPathwayIndex - 2 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 2) < 1)) {
        alMagnificationFactor.set(iPathwayIndex - 2,1);
      }
      if ((iPathwayIndex - 1 >= 0) && (alMagnificationFactor.get(iPathwayIndex - 1) < 2)) {
        alMagnificationFactor.set(iPathwayIndex - 1,2);
      }
      alMagnificationFactor.set(iPathwayIndex,3);
      if ((iPathwayIndex + 1 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 1) < 2)) {
        alMagnificationFactor.set(iPathwayIndex + 1,2);
      }
      if ((iPathwayIndex + 2 < alMagnificationFactor.size()) && (alMagnificationFactor.get(iPathwayIndex + 2) < 1)) {
        alMagnificationFactor.set(iPathwayIndex + 2,1);
      }
    }
 else     if (pathwayLayeredLayer.containsElement(iPathwayId) || pathwayUnderInteractionLayer.containsElement(iPathwayId)) {
      alMagnificationFactor.set(iPathwayIndex,2);
    }
 else     if (refHashPathwayContainingSelectedVertex2VertexCount.containsKey(iPathwayId)) {
      alMagnificationFactor.set(iPathwayIndex,1);
    }
  }
  recalculatePathwayPoolTransformation(alMagnificationFactor);
  String sRenderText;
  float fYPos=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    gl.glPushMatrix();
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    gl.glLoadName(iPathwayIndex + 1);
    if (!refHashPoolLinePickId2PathwayId.containsKey(iPathwayIndex + 1))     refHashPoolLinePickId2PathwayId.put(iPathwayIndex + 1,iPathwayId);
    Transform transform=pathwayPoolLayer.getTransformByElementId(iPathwayId);
    Vec3f translation=transform.getTranslation();
    gl.glTranslatef(translation.x(),translation.y(),translation.z());
    sRenderText=((Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId)).getTitle();
    if (refHashPathwayContainingSelectedVertex2VertexCount.containsKey(iPathwayId)) {
      sRenderText=sRenderText + ""String_Node_Str"" + refHashPathwayContainingSelectedVertex2VertexCount.get(iPathwayId).toString();
    }
    if (pathwayUnderInteractionLayer.containsElement(iPathwayId))     gl.glColor4f(1,0,0,1);
 else     gl.glColor4f(0,0,0,1);
    if (alMagnificationFactor.get(iPathwayIndex) == 3) {
      GLTextUtils.renderText(gl,sRenderText,18,0,0.06f,0);
      fYPos=0.15f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 2) {
      GLTextUtils.renderText(gl,sRenderText,12,0,0.04f,0);
      fYPos=0.1f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 1) {
      GLTextUtils.renderText(gl,sRenderText,10,0,0.02f,0);
      fYPos=0.07f;
    }
 else     if (alMagnificationFactor.get(iPathwayIndex) == 0) {
      fYPos=0.02f;
      gl.glColor3f(0,0,0);
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(0,0,0);
      gl.glVertex3f(0,fYPos,0);
      gl.glVertex3f(0.1f,fYPos,0);
      gl.glVertex3f(0.1f,0,0);
      gl.glEnd();
    }
    gl.glColor4f(0,0,0,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(0,fYPos,0.1f);
    gl.glVertex3f(0.5f,fYPos,0.1f);
    gl.glVertex3f(0.5f,0,0.1f);
    gl.glEnd();
    gl.glPopMatrix();
  }
}",0.99268094334508
59172,"public void renderInfoArea(final GL gl,final PathwayVertex pickedVertex){
  if (fScaleFactor < 1.0)   fScaleFactor+=0.04;
  if (pickedVertex.getVertexType().equals(PathwayVertexType.gene))   extractMultipleGeneMapping(pickedVertex);
  if (pickedVertex.getElementTitle().contains(""String_Node_Str"")) {
    drawPickedObjectInfoStar(gl,pickedVertex);
  }
 else {
    drawPickedObjectInfoSingle(gl,pickedVertex,true);
  }
}","public void renderInfoArea(final GL gl,final PathwayVertex pickedVertex){
  if (fScaleFactor < 1.0)   fScaleFactor+=0.04;
  if (pickedVertex.getVertexType().equals(PathwayVertexType.gene))   extractMultipleGeneMapping(pickedVertex);
  if (pickedVertex.getElementTitle().contains(""String_Node_Str"") && pickedVertex.getElementTitle().contains(""String_Node_Str"")) {
    drawPickedObjectInfoStar(gl,pickedVertex);
  }
 else {
    drawPickedObjectInfoSingle(gl,pickedVertex,true);
  }
}",0.9311111111111112
59173,"private void drawPickedObjectInfoSingle(final GL gl,final PathwayVertex pickedVertex,final boolean bDrawDisplaced){
  if (fArWorldCoordinatePosition == null)   return;
  gl.glPushMatrix();
  float fHalfWidth=0.5f;
  float fHalfHeight=0.2f;
  float fOffsetX=1.0f;
  float fOffsetY=-0.5f;
  gl.glTranslatef(fArWorldCoordinatePosition[0],fArWorldCoordinatePosition[1],fZValue);
  if (bDrawDisplaced) {
    gl.glScalef(fScaleFactor,fScaleFactor,fScaleFactor);
    gl.glLineWidth(2);
    gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
    gl.glBegin(GL.GL_TRIANGLES);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY + fHalfHeight,0);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY - fHalfHeight,0);
    gl.glEnd();
    gl.glColor3f(0.2f,0.2f,0.2f);
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY + fHalfHeight,0);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY - fHalfHeight,0);
    gl.glEnd();
    gl.glTranslatef(fOffsetX,fOffsetY,0.0f);
  }
  gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(-fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,fHalfHeight,0);
  gl.glVertex3f(-fHalfWidth,fHalfHeight,0);
  gl.glEnd();
  gl.glColor3f(0.2f,0.2f,0.2f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(-fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,fHalfHeight,0);
  gl.glVertex3f(-fHalfWidth,fHalfHeight,0);
  gl.glEnd();
  if (fScaleFactor < 0.8f) {
    gl.glPopMatrix();
    return;
  }
  gl.glColor3f(1,1,1);
  GLTextUtils.renderText(gl,""String_Node_Str"" + pickedVertex.getElementTitle(),12,-fHalfWidth + 0.05f,-fHalfHeight + 0.09f,-0.01f);
  float fLineHeight=0.1f;
  gl.glTranslatef(0.0f,fLineHeight,0.0f);
  GLTextUtils.renderText(gl,""String_Node_Str"" + pickedVertex.getVertexRepByIndex(0).getName(),12,-fHalfWidth + 0.05f,-fHalfHeight + 0.09f,-0.01f);
  gl.glScalef(3.0f,3.0f,3.0f);
  float fNodeWidth=pickedVertex.getVertexRepByIndex(0).getWidth() / 2.0f * GLPathwayManager.SCALING_FACTOR_X;
  if (pickedVertex.getVertexType().equals(PathwayVertexType.gene)) {
    refGLPathwayManager.mapExpressionByGeneId(gl,sLLMultipleGeneMappingID.removeFirst(),fNodeWidth);
  }
 else {
    refGLPathwayManager.mapExpression(gl,pickedVertex,fNodeWidth);
  }
  gl.glPopMatrix();
}","private void drawPickedObjectInfoSingle(final GL gl,final PathwayVertex pickedVertex,final boolean bDrawDisplaced){
  if (fArWorldCoordinatePosition == null)   return;
  gl.glPushMatrix();
  float fHalfWidth=0.5f;
  float fHalfHeight=0.2f;
  float fOffsetX=1.0f;
  float fOffsetY=-0.5f;
  gl.glTranslatef(fArWorldCoordinatePosition[0],fArWorldCoordinatePosition[1],fZValue);
  if (bDrawDisplaced) {
    gl.glScalef(fScaleFactor,fScaleFactor,fScaleFactor);
    gl.glLineWidth(2);
    gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
    gl.glBegin(GL.GL_TRIANGLES);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY + fHalfHeight,0);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY - fHalfHeight,0);
    gl.glEnd();
    gl.glColor3f(0.2f,0.2f,0.2f);
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,-fZValue);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY + fHalfHeight,0);
    gl.glVertex3f(fOffsetX - fHalfWidth,fOffsetY - fHalfHeight,0);
    gl.glEnd();
    gl.glTranslatef(fOffsetX,fOffsetY,0.0f);
  }
  gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(-fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,fHalfHeight,0);
  gl.glVertex3f(-fHalfWidth,fHalfHeight,0);
  gl.glEnd();
  gl.glColor3f(0.2f,0.2f,0.2f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(-fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,-fHalfHeight,0);
  gl.glVertex3f(fHalfWidth,fHalfHeight,0);
  gl.glVertex3f(-fHalfWidth,fHalfHeight,0);
  gl.glEnd();
  if (fScaleFactor < 0.8f) {
    gl.glPopMatrix();
    return;
  }
  float fNodeWidth=pickedVertex.getVertexRepByIndex(0).getWidth() / 2.0f * GLPathwayManager.SCALING_FACTOR_X;
  String sElementId;
  gl.glScalef(3.0f,3.0f,3.0f);
  if (pickedVertex.getVertexType().equals(PathwayVertexType.gene)) {
    sElementId=sLLMultipleGeneMappingID.getFirst();
    refGLPathwayManager.mapExpressionByGeneId(gl,sLLMultipleGeneMappingID.removeFirst(),fNodeWidth);
  }
 else {
    sElementId=pickedVertex.getElementTitle();
    refGLPathwayManager.mapExpression(gl,pickedVertex,fNodeWidth);
  }
  gl.glScalef(1 / 3.0f,1 / 3.0f,1 / 3.0f);
  gl.glColor3f(1,1,1);
  GLTextUtils.renderText(gl,""String_Node_Str"" + sElementId,12,-fHalfWidth + 0.05f,-fHalfHeight + 0.09f,-0.01f);
  gl.glPopMatrix();
}",0.8452078032230704
59174,"protected void processHits(final GL gl,int iHitCount,int iArPickingBuffer[],final Point pickPoint){
  IPathwayVertexRep refPickedVertexRep;
  int iPtr=0;
  int i=0;
  int iPickedObjectId=0;
  iPtr++;
  iPtr++;
  iPtr++;
  iPickedObjectId=iArPickingBuffer[iPtr];
  if (iPickedObjectId == 0) {
    iMouseOverPickedPathwayId=-1;
    selectedVertex=null;
    infoAreaRenderer.resetAnimation();
    return;
  }
  if (!arSlerpActions.isEmpty())   return;
  if (iPickedObjectId < MAX_LOADED_PATHWAYS) {
    int iPathwayId=refHashPoolLinePickId2PathwayId.get(iPickedObjectId);
    System.out.println(""String_Node_Str"" + iPathwayId);
    if (bIsMouseOverPickingEvent) {
      if (iMouseOverPickedPathwayId != iPathwayId) {
        iMouseOverPickedPathwayId=iPathwayId;
        playPathwayPoolTickSound();
      }
      return;
    }
    loadPathwayToUnderInteractionPosition(iPathwayId);
    return;
  }
 else   if (iPickedObjectId == MAX_LOADED_PATHWAYS) {
    return;
  }
  refPickedVertexRep=refGLPathwayManager.getVertexRepByPickID(iPickedObjectId);
  if (refPickedVertexRep == null)   return;
  loadNodeInformationInBrowser(refPickedVertexRep.getVertex().getVertexLink());
  iMouseOverPickedPathwayId=-1;
  System.out.println(""String_Node_Str"" + refPickedVertexRep.getName());
  infoAreaRenderer.convertWindowCoordinatesToWorldCoordinates(gl,pickPoint.x,pickPoint.y);
  if (bIsMouseOverPickingEvent) {
    if (selectedVertex != null && !selectedVertex.equals(refPickedVertexRep.getVertex()))     infoAreaRenderer.resetAnimation();
    selectedVertex=refPickedVertexRep.getVertex();
    bSelectionChanged=true;
    return;
  }
  if (refPickedVertexRep.getVertex().getVertexType().equals(PathwayVertexType.map)) {
    String strTmp=""String_Node_Str"";
    strTmp=refPickedVertexRep.getVertex().getElementTitle();
    int iPathwayId=-1;
    try {
      iPathwayId=Integer.parseInt(strTmp.substring(strTmp.length() - 4));
    }
 catch (    NumberFormatException e) {
      return;
    }
    loadPathwayToUnderInteractionPosition(iPathwayId);
    return;
  }
 else   if (refPickedVertexRep.getVertex().getVertexType().equals(PathwayVertexType.enzyme)) {
    selectedVertex=refPickedVertexRep.getVertex();
    bSelectionChanged=true;
    loadDependentPathwayContainingVertex(gl,refPickedVertexRep.getVertex());
  }
}","protected void processHits(final GL gl,int iHitCount,int iArPickingBuffer[],final Point pickPoint){
  IPathwayVertexRep refPickedVertexRep;
  int iPtr=0;
  int i=0;
  int iPickedObjectId=0;
  iPtr++;
  iPtr++;
  iPtr++;
  iPickedObjectId=iArPickingBuffer[iPtr];
  if (iPickedObjectId == 0) {
    iMouseOverPickedPathwayId=-1;
    selectedVertex=null;
    infoAreaRenderer.resetAnimation();
    return;
  }
  if (!arSlerpActions.isEmpty())   return;
  if (iPickedObjectId < MAX_LOADED_PATHWAYS) {
    int iPathwayId=refHashPoolLinePickId2PathwayId.get(iPickedObjectId);
    System.out.println(""String_Node_Str"" + iPathwayId);
    if (bIsMouseOverPickingEvent) {
      if (iMouseOverPickedPathwayId != iPathwayId) {
        iMouseOverPickedPathwayId=iPathwayId;
        playPathwayPoolTickSound();
      }
      return;
    }
    loadPathwayToUnderInteractionPosition(gl,iPathwayId);
    return;
  }
 else   if (iPickedObjectId == MAX_LOADED_PATHWAYS) {
    return;
  }
  refPickedVertexRep=refGLPathwayManager.getVertexRepByPickID(iPickedObjectId);
  if (refPickedVertexRep == null)   return;
  loadNodeInformationInBrowser(refPickedVertexRep.getVertex().getVertexLink());
  iMouseOverPickedPathwayId=-1;
  System.out.println(""String_Node_Str"" + refPickedVertexRep.getName());
  infoAreaRenderer.convertWindowCoordinatesToWorldCoordinates(gl,pickPoint.x,pickPoint.y);
  if (bIsMouseOverPickingEvent) {
    if (selectedVertex != null && !selectedVertex.equals(refPickedVertexRep.getVertex()))     infoAreaRenderer.resetAnimation();
    selectedVertex=refPickedVertexRep.getVertex();
    bSelectionChanged=true;
    return;
  }
  if (refPickedVertexRep.getVertex().getVertexType().equals(PathwayVertexType.map)) {
    String strTmp=""String_Node_Str"";
    strTmp=refPickedVertexRep.getVertex().getElementTitle();
    int iPathwayId=-1;
    try {
      iPathwayId=Integer.parseInt(strTmp.substring(strTmp.length() - 4));
    }
 catch (    NumberFormatException e) {
      return;
    }
    loadPathwayToUnderInteractionPosition(gl,iPathwayId);
    return;
  }
 else   if (refPickedVertexRep.getVertex().getVertexType().equals(PathwayVertexType.enzyme)) {
    selectedVertex=refPickedVertexRep.getVertex();
    bSelectionChanged=true;
    loadDependentPathwayContainingVertex(gl,refPickedVertexRep.getVertex());
  }
}",0.9987001733102252
59175,"private void loadPathwayToUnderInteractionPosition(int iPathwayId){
  refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iPathwayId+ ""String_Node_Str"",LoggerType.VERBOSE);
  if (iSlerpFactor > 0 && iSlerpFactor < 1000)   return;
  arSlerpActions.clear();
  if (!refGeneralManager.getSingelton().getPathwayManager().hasItem(iPathwayId))   return;
  if (!pathwayUnderInteractionLayer.getElementList().isEmpty()) {
    SlerpAction reverseSlerpAction=new SlerpAction(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0),pathwayUnderInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction);
  }
  SlerpAction slerpAction;
  slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false);
  arSlerpActions.add(slerpAction);
  slerpAction=new SlerpAction(iPathwayId,pathwayLayeredLayer,false);
  arSlerpActions.add(slerpAction);
  iSlerpFactor=0;
  int[] tmp=new int[1];
  tmp[0]=iPathwayId;
  alSetSelection.get(0).updateSelectionSet(iUniqueId,new int[0],new int[0],tmp);
}","private void loadPathwayToUnderInteractionPosition(final GL gl,final int iPathwayId){
  refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iPathwayId+ ""String_Node_Str"",LoggerType.VERBOSE);
  if (iSlerpFactor > 0 && iSlerpFactor < 1000)   return;
  arSlerpActions.clear();
  if (!refGeneralManager.getSingelton().getPathwayManager().hasItem(iPathwayId))   return;
  if (!pathwayUnderInteractionLayer.getElementList().isEmpty()) {
    SlerpAction reverseSlerpAction=new SlerpAction(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0),pathwayUnderInteractionLayer,true);
    arSlerpActions.add(reverseSlerpAction);
  }
  SlerpAction slerpAction;
  slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false);
  arSlerpActions.add(slerpAction);
  slerpAction=new SlerpAction(iPathwayId,pathwayLayeredLayer,false);
  arSlerpActions.add(slerpAction);
  iSlerpFactor=0;
  rebuildVisiblePathwayDisplayLists(gl);
  int[] tmp=new int[1];
  tmp[0]=iPathwayId;
  alSetSelection.get(0).updateSelectionSet(iUniqueId,new int[0],new int[0],tmp);
}",0.972077614765736
59176,"private void doSlerpActions(final GL gl){
  if (!arSlerpActions.isEmpty()) {
    slerpPathway(gl,arSlerpActions.get(0));
    selectedVertex=null;
  }
 else   if (arSlerpActions.isEmpty() && bSelectionChanged) {
    highlightIdenticalNodes(gl,selectedVertex);
    bSelectionChanged=false;
    Iterator<Integer> iterVisiblePathway=pathwayLayeredLayer.getElementList().iterator();
    while (iterVisiblePathway.hasNext()) {
      refGLPathwayManager.buildPathwayDisplayList(gl,iterVisiblePathway.next());
    }
    refGLPathwayManager.buildPathwayDisplayList(gl,pathwayUnderInteractionLayer.getElementIdByPositionIndex(0));
  }
  if (iSlerpFactor < 1000) {
    iSlerpFactor+=15;
  }
}","private void doSlerpActions(final GL gl){
  if (!arSlerpActions.isEmpty()) {
    slerpPathway(gl,arSlerpActions.get(0));
  }
 else   if (arSlerpActions.isEmpty() && bSelectionChanged) {
    bSelectionChanged=false;
    highlightIdenticalNodes(gl,selectedVertex);
    rebuildVisiblePathwayDisplayLists(gl);
  }
  if (iSlerpFactor < 1000) {
    iSlerpFactor+=15;
  }
}",0.6189111747851003
59177,"@SuppressWarnings(""String_Node_Str"") protected void highlightIdenticalNodes(final GL gl,final PathwayVertex refVertex){
  iAlSelectedElements.clear();
  Pathway refTmpPathway=null;
  PathwayVertex refTmpVertex=null;
  Iterator<PathwayVertex> iterIdenticalVertices=null;
  int iPathwayId=0;
  LinkedList<Integer> tmpVisiblePathways=(LinkedList<Integer>)pathwayLayeredLayer.getElementList().clone();
  tmpVisiblePathways.add(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0));
  Iterator<Integer> iterVisiblePathway=tmpVisiblePathways.iterator();
  while (iterVisiblePathway.hasNext()) {
    iPathwayId=iterVisiblePathway.next();
    refTmpPathway=(Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId);
    iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refVertex.getElementTitle()).iterator();
    while (iterIdenticalVertices.hasNext()) {
      refTmpVertex=iterIdenticalVertices.next();
      if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
        if (refTmpVertex != null) {
          iAlSelectedElements.add(refTmpVertex.getElementId());
          System.out.println(""String_Node_Str"" + refTmpVertex.getElementTitle() + ""String_Node_Str"");
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected void highlightIdenticalNodes(final GL gl,final PathwayVertex refVertex){
  iAlSelectedElements.clear();
  Pathway refTmpPathway=null;
  PathwayVertex refTmpVertex=null;
  Iterator<PathwayVertex> iterIdenticalVertices=null;
  int iPathwayId=0;
  LinkedList<Integer> tmpVisiblePathways=(LinkedList<Integer>)pathwayLayeredLayer.getElementList().clone();
  if (!tmpVisiblePathways.contains(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0)))   tmpVisiblePathways.add(pathwayUnderInteractionLayer.getElementIdByPositionIndex(0));
  Iterator<Integer> iterVisiblePathway=tmpVisiblePathways.iterator();
  while (iterVisiblePathway.hasNext()) {
    iPathwayId=iterVisiblePathway.next();
    System.out.println(""String_Node_Str"" + iPathwayId + ""String_Node_Str"");
    refTmpPathway=(Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId);
    iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refVertex.getElementTitle()).iterator();
    while (iterIdenticalVertices.hasNext()) {
      refTmpVertex=iterIdenticalVertices.next();
      if (refTmpPathway.isVertexInPathway(refTmpVertex) == true && refTmpVertex.getVertexRepByIndex(0) != null) {
        iAlSelectedElements.add(refTmpVertex.getElementId());
        System.out.println(""String_Node_Str"" + refTmpVertex.getElementTitle() + ""String_Node_Str"");
      }
    }
  }
}",0.9139314369073668
59178,"private void buildPathwayPool(final GL gl){
  float fTiltAngleDegree=90;
  float fTiltAngleRad=Vec3f.convertGrad2Radiant(fTiltAngleDegree);
  int iMaxLines=200;
  Transform transform;
  for (int iLineIndex=0; iLineIndex < iMaxLines; iLineIndex++) {
    transform=new Transform();
    transform.setRotation(new Rotf(fTiltAngleRad,-1,0,0));
    pathwayPoolLayer.setTransformByPositionIndex(iLineIndex,transform);
  }
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  int iPathwayId=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    boolean bLoadingOK=refGeneralManager.getSingelton().getPathwayManager().loadPathwayById(iPathwayId);
    if (!bLoadingOK)     return;
    refGLPathwayManager.buildPathwayDisplayList(gl,iPathwayId);
    pathwayPoolLayer.addElement(iPathwayId);
  }
}","private void buildPathwayPool(final GL gl){
  float fTiltAngleDegree=90;
  float fTiltAngleRad=Vec3f.convertGrad2Radiant(fTiltAngleDegree);
  int iMaxLines=200;
  Transform transform;
  for (int iLineIndex=0; iLineIndex < iMaxLines; iLineIndex++) {
    transform=new Transform();
    transform.setRotation(new Rotf(fTiltAngleRad,-1,0,0));
    pathwayPoolLayer.setTransformByPositionIndex(iLineIndex,transform);
  }
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  int iPathwayId=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    boolean bLoadingOK=refGeneralManager.getSingelton().getPathwayManager().loadPathwayById(iPathwayId);
    if (!bLoadingOK)     return;
    pathwayPoolLayer.addElement(iPathwayId);
  }
}",0.965103598691385
59179,"public void loadDependentPathwayContainingVertex(final GL gl,final PathwayVertex refVertex){
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  Iterator<PathwayVertex> iterIdenticalVertices=null;
  Pathway refTmpPathway=null;
  PathwayVertex refTmpVertex=null;
  int iPathwayId=0;
  int iMaxPathways=4;
  int iMaxPathwayCount=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    refTmpPathway=(Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId);
    iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refVertex.getElementTitle()).iterator();
    while (iterIdenticalVertices.hasNext()) {
      refTmpVertex=iterIdenticalVertices.next();
      if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
        if (refTmpVertex != null) {
          SlerpAction slerpAction;
          if (!pathwayLayeredLayer.containsElement(iPathwayId)) {
            if (iMaxPathwayCount >= iMaxPathways)             return;
            iMaxPathwayCount++;
            slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false);
            arSlerpActions.add(slerpAction);
            iSlerpFactor=0;
          }
        }
      }
    }
  }
}","public void loadDependentPathwayContainingVertex(final GL gl,final PathwayVertex refVertex){
  IStorage tmpStorage=alSetData.get(0).getStorageByDimAndIndex(0,0);
  int[] iArPathwayIDs=tmpStorage.getArrayInt();
  Iterator<PathwayVertex> iterIdenticalVertices=null;
  Pathway refTmpPathway=null;
  PathwayVertex refTmpVertex=null;
  int iPathwayId=0;
  int iMaxPathways=4;
  int iMaxPathwayCount=0;
  for (int iPathwayIndex=0; iPathwayIndex < tmpStorage.getSize(StorageType.INT); iPathwayIndex++) {
    iPathwayId=iArPathwayIDs[iPathwayIndex];
    refTmpPathway=(Pathway)refGeneralManager.getSingelton().getPathwayManager().getItem(iPathwayId);
    iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refVertex.getElementTitle()).iterator();
    while (iterIdenticalVertices.hasNext()) {
      refTmpVertex=iterIdenticalVertices.next();
      if (refTmpPathway.isVertexInPathway(refTmpVertex) == true && refTmpVertex.getVertexRepByIndex(0) != null) {
        System.out.println(""String_Node_Str"" + iPathwayId);
        SlerpAction slerpAction;
        if (!pathwayLayeredLayer.containsElement(iPathwayId)) {
          if (iMaxPathwayCount >= iMaxPathways)           break;
          iMaxPathwayCount++;
          slerpAction=new SlerpAction(iPathwayId,pathwayPoolLayer,false);
          arSlerpActions.add(slerpAction);
          iSlerpFactor=0;
        }
      }
    }
  }
  rebuildVisiblePathwayDisplayLists(gl);
}",0.8282616299405386
59180,"public Texture loadPathwayTextureById(int iPathwayID){
  if (refHashPathwayIdToTexture.containsKey(iPathwayID))   return refHashPathwayIdToTexture.get(iPathwayID);
  String sPathwayTexturePath=""String_Node_Str"";
  Texture refPathwayTexture;
  if (iPathwayID < 10) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
 else   if (iPathwayID < 100 && iPathwayID >= 10) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
 else   if (iPathwayID < 1000 && iPathwayID >= 100) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
 else   if (iPathwayID < 10000 && iPathwayID >= 1000) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
  sPathwayTexturePath=refGeneralManager.getSingelton().getPathwayManager().getPathwayImagePath() + sPathwayTexturePath + ""String_Node_Str"";
  try {
    refPathwayTexture=TextureIO.newTexture(TextureIO.newTextureData(new File(sPathwayTexturePath),false,""String_Node_Str""));
    refHashPathwayIdToTexture.put(iPathwayID,refPathwayTexture);
    refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iPathwayID,LoggerType.VERBOSE);
    return refPathwayTexture;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + sPathwayTexturePath);
    e.printStackTrace();
  }
  return null;
}","public Texture loadPathwayTextureById(int iPathwayID){
  if (refHashPathwayIdToTexture.containsKey(iPathwayID))   return refHashPathwayIdToTexture.get(iPathwayID);
  String sPathwayTexturePath=""String_Node_Str"";
  Texture refPathwayTexture;
  if (iPathwayID < 10) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
 else   if (iPathwayID < 100 && iPathwayID >= 10) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
 else   if (iPathwayID < 1000 && iPathwayID >= 100) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
 else   if (iPathwayID < 10000 && iPathwayID >= 1000) {
    sPathwayTexturePath=""String_Node_Str"" + Integer.toString(iPathwayID);
  }
  sPathwayTexturePath=refGeneralManager.getSingelton().getPathwayManager().getPathwayImagePath() + sPathwayTexturePath + ""String_Node_Str"";
  try {
    refPathwayTexture=TextureIO.newTexture(TextureIO.newTextureData(new File(sPathwayTexturePath),true,""String_Node_Str""));
    refHashPathwayIdToTexture.put(iPathwayID,refPathwayTexture);
    refGeneralManager.getSingelton().logMsg(this.getClass().getSimpleName() + ""String_Node_Str"" + iPathwayID,LoggerType.VERBOSE);
    return refPathwayTexture;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + sPathwayTexturePath);
    e.printStackTrace();
  }
  return null;
}",0.9974573192880494
59181,"protected void handleSubtypeTag(){
  String sName=""String_Node_Str"";
  int iCompoundId=0;
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str""))     sName=attributes.getValue(iAttributeIndex);
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      if (attributes.getValue(iAttributeIndex).contains(""String_Node_Str"") || attributes.getValue(iAttributeIndex).contains(""String_Node_Str"") || attributes.getValue(iAttributeIndex).contains(""String_Node_Str"")|| attributes.getValue(iAttributeIndex).contains(""String_Node_Str""))       iCompoundId=0;
 else       iCompoundId=new Integer(attributes.getValue(iAttributeIndex));
    }
  }
  if (sName.equals(""String_Node_Str"")) {
    refGeneralManager.getSingelton().getPathwayElementManager().addRelationCompound(kgmlIdToElementIdLUT.get(iCompoundId));
  }
}","protected void handleSubtypeTag(){
  String sName=""String_Node_Str"";
  int iCompoundId=0;
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str""))     sName=attributes.getValue(iAttributeIndex);
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      if (attributes.getValue(iAttributeIndex).contains(""String_Node_Str"") || attributes.getValue(iAttributeIndex).contains(""String_Node_Str"") || attributes.getValue(iAttributeIndex).contains(""String_Node_Str"")|| attributes.getValue(iAttributeIndex).contains(""String_Node_Str"")|| attributes.getValue(iAttributeIndex).contains(""String_Node_Str""))       iCompoundId=0;
 else       iCompoundId=new Integer(attributes.getValue(iAttributeIndex));
    }
  }
  if (sName.equals(""String_Node_Str"")) {
    refGeneralManager.getSingelton().getPathwayElementManager().addRelationCompound(kgmlIdToElementIdLUT.get(iCompoundId));
  }
}",0.9696969696969696
59182,"public void addGLCanvasUser(IGLCanvasUser user){
  if (vecGLCanvasUser.contains(user)) {
    throw new CerberusRuntimeException(""String_Node_Str"");
  }
  if (!super.abEnableRendering.get()) {
    vecGLCanvasUser.addElement(user);
    initGLCanvasUser();
  }
 else {
    super.abEnableRendering.set(false);
    vecGLCanvasUser.addElement(user);
    super.abEnableRendering.set(true);
  }
  refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + getId() + ""String_Node_Str""+ user.getId()+ ""String_Node_Str""+ user.toString(),LoggerType.TRANSITION);
}","public void addGLCanvasUser(IGLCanvasUser user){
  if (vecGLCanvasUser.contains(user)) {
    throw new CerberusRuntimeException(""String_Node_Str"");
  }
  if (!super.abEnableRendering.get()) {
    vecGLCanvasUser.addElement(user);
    initGLCanvasUser();
  }
 else {
    super.abEnableRendering.set(false);
    vecGLCanvasUser.addElement(user);
    initGLCanvasUser();
    super.abEnableRendering.set(true);
  }
  refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + getId() + ""String_Node_Str""+ user.getId()+ ""String_Node_Str""+ user.toString(),LoggerType.TRANSITION);
}",0.9787234042553192
59183,"public synchronized void initGLCanvasUser(){
  if (this.refGLCanvas != null) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString(),LoggerType.STATUS);
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    if (!iter.hasNext()) {
      refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString()+ ""String_Node_Str"",LoggerType.MINOR_ERROR);
      return;
    }
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString()+ ""String_Node_Str"",LoggerType.STATUS);
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (!glCanvas.isInitGLDone()) {
        glCanvas.initGLCanvas(refGLCanvas);
      }
    }
    return;
  }
  refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString()+ ""String_Node_Str"",LoggerType.MINOR_ERROR);
}","public synchronized void initGLCanvasUser(){
  if (this.refGLCanvas != null) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString(),LoggerType.STATUS);
    if (vecGLCanvasUser.isEmpty()) {
      refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString()+ ""String_Node_Str"",LoggerType.MINOR_ERROR);
      return;
    }
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString()+ ""String_Node_Str"",LoggerType.STATUS);
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (!glCanvas.isInitGLDone()) {
        glCanvas.initGLCanvas(refGLCanvas);
      }
    }
    return;
  }
  refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iUniqueId + ""String_Node_Str""+ this.getClass().toString()+ ""String_Node_Str"",LoggerType.MINOR_ERROR);
}",0.9297725024727992
59184,"/** 
 * Method takes uses the parent container ID to retrieve the  GUI widget by calling the createWidget method from the SWT GUI Manager. Method is implemented in the subclasses because only there the type of the needed widget is available.
 */
public void retrieveGUIContainer();","/** 
 * Method takes uses the parent container ID to retrieve the  GUI widget by calling the createWidget method from the SWT GUI Manager. Method is implemented in the subclasses because only there the type of the needed widget is available.
 * @deprecated use initView()
 */
public void retrieveGUIContainer();",0.9493243243243245
59185,public boolean isInitGLDone();,"/** 
 * Should be used by void render(GLAutoDrawable canvas); to test if initGLCanvas was done.
 * @return
 */
public boolean isInitGLDone();",0.3508771929824561
59186,public abstract void render(GLAutoDrawable canvas);,"/** 
 * Attention: Each IGLCanvasUser object has to take care that its initGLCanvas(GLCanvas canvas); method is called. The IGLCanvasDirector tries to call it once inside the initGLCanvasUser(), if the IGLCanvasUser is registered  by that time to the Vector <IGLCanvasUser> vecGLCanvasUser; and calls setInitGLDone(); afterwards. Solution: Check if initGLCanvas(GLCanvas canvas); was called prio to render(GLAutoDrawable canvas);  by calling boolean isInitGLDone();
 * @param canvas
 */
public abstract void render(GLAutoDrawable canvas);",0.1731748726655348
59187,"protected final void setInitGLDone(){
  if (bInitGLcanvawsWasCalled) {
    System.err.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
 else {
    System.err.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
  bInitGLcanvawsWasCalled=true;
}","public final void setInitGLDone(){
  if (bInitGLcanvawsWasCalled) {
    System.err.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
 else {
    System.err.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
  bInitGLcanvawsWasCalled=true;
}",0.9838472834067548
59188,"protected final void setInitGLDone(){
  if (bInitGLcanvawsWasCalled) {
    System.err.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
 else {
    System.out.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
  bInitGLcanvawsWasCalled=true;
}","public final void setInitGLDone(){
  if (bInitGLcanvawsWasCalled) {
    System.err.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
 else {
    System.out.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
  bInitGLcanvawsWasCalled=true;
}",0.9838472834067548
59189,"public final void render(GLAutoDrawable canvas){
  this.gl=canvas.getGL();
  gl.glPushMatrix();
  gl.glTranslatef(origin.x(),origin.y(),origin.z());
  gl.glRotatef(rotation.x(),rotation.y(),rotation.z(),rotation.w());
  if (pickPoint != null) {
    pickObjects(gl);
  }
  renderPart(gl,GL.GL_RENDER);
  gl.glPopMatrix();
}","public final void render(GLAutoDrawable canvas){
  this.gl=canvas.getGL();
  if (!bInitGLcanvawsWasCalled) {
    initGLCanvas((GLCanvas)canvas);
  }
  gl.glPushMatrix();
  gl.glTranslatef(origin.x(),origin.y(),origin.z());
  gl.glRotatef(rotation.x(),rotation.y(),rotation.z(),rotation.w());
  if (pickPoint != null) {
    pickObjects(gl);
  }
  renderPart(gl,GL.GL_RENDER);
  gl.glPopMatrix();
}",0.8969359331476323
59190,"public void addGLCanvasUser(IGLCanvasUser user){
  if (vecGLCanvasUser.contains(user)) {
    throw new CerberusRuntimeException(""String_Node_Str"");
  }
  if (!super.abEnableRendering.get()) {
    vecGLCanvasUser.addElement(user);
    initGLCanvasUser();
  }
 else {
    super.abEnableRendering.set(false);
    vecGLCanvasUser.addElement(user);
    initGLCanvasUser();
    super.abEnableRendering.set(true);
  }
  refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + getId() + ""String_Node_Str""+ user.getId()+ ""String_Node_Str""+ user.toString(),LoggerType.TRANSITION);
}","public void addGLCanvasUser(IGLCanvasUser user){
  if (vecGLCanvasUser.contains(user)) {
    throw new CerberusRuntimeException(""String_Node_Str"");
  }
  vecGLCanvasUser.addElement(user);
  refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + getId() + ""String_Node_Str""+ user.getId()+ ""String_Node_Str""+ user.toString(),LoggerType.TRANSITION);
}",0.7190527448869752
59191,"public void renderGLCanvasUser(GLAutoDrawable drawable){
  if (abEnableRendering.get()) {
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (glCanvas.isInitGLDone()) {
        glCanvas.render(drawable);
      }
    }
  }
}","public void renderGLCanvasUser(GLAutoDrawable drawable){
  if (abEnableRendering.get()) {
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      iter.next().render(drawable);
    }
  }
}",0.7777777777777778
59192,"public static boolean parseOnce(InputSource inStream,final String sInputStreamLabel,ContentHandler handler,final ILoggerManager refLoggerManager){
  if (handler == null) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str"",LoggerType.ERROR_ONLY);
    return false;
  }
  try {
    XMLReader reader=XMLReaderFactory.createXMLReader();
    reader.setContentHandler(handler);
    try {
      reader.parse(inStream);
    }
 catch (    IOException e) {
      refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ e.toString(),LoggerType.ERROR_ONLY);
    }
catch (    Exception e) {
      refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ e.toString()+ ""String_Node_Str"",LoggerType.ERROR_ONLY);
      e.printStackTrace();
    }
    inStream.getCharacterStream().close();
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str"",LoggerType.STATUS);
  }
 catch (  SAXException se) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ se.toString(),LoggerType.ERROR_ONLY);
  }
catch (  IOException ioe) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ ioe.toString(),LoggerType.ERROR_ONLY);
  }
catch (  Exception e) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ e.toString(),LoggerType.ERROR_ONLY);
  }
  return true;
}","public static boolean parseOnce(InputSource inStream,final String sInputStreamLabel,ContentHandler handler,final ILoggerManager refLoggerManager){
  if (handler == null) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str"",LoggerType.ERROR_ONLY);
    return false;
  }
  try {
    XMLReader reader=XMLReaderFactory.createXMLReader();
    DefaultHandler entityResolver=new DefaultHandler();
    reader.setFeature(""String_Node_Str"",false);
    reader.setEntityResolver(entityResolver);
    reader.setContentHandler(handler);
    try {
      reader.parse(inStream);
    }
 catch (    IOException e) {
      refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ e.toString(),LoggerType.ERROR_ONLY);
    }
catch (    Exception e) {
      refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ e.toString()+ ""String_Node_Str"",LoggerType.ERROR_ONLY);
      e.printStackTrace();
    }
    inStream.getCharacterStream().close();
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str"",LoggerType.STATUS);
  }
 catch (  SAXException se) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ se.toString(),LoggerType.ERROR_ONLY);
  }
catch (  IOException ioe) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ ioe.toString(),LoggerType.ERROR_ONLY);
  }
catch (  Exception e) {
    refLoggerManager.logMsg(""String_Node_Str"" + sInputStreamLabel + ""String_Node_Str""+ e.toString(),LoggerType.ERROR_ONLY);
  }
  return true;
}",0.9510124101894188
59193,"public void initView(){
  refSWTContainer.setLayout(new FillLayout(SWT.VERTICAL));
  Label viewComboLabel=new Label(refSWTContainer,SWT.LEFT);
  viewComboLabel.setText(""String_Node_Str"");
  viewComboLabel.setSize(150,30);
  final Combo viewCombo=new Combo(refSWTContainer,SWT.READ_ONLY);
  Label dataComboLabel=new Label(refSWTContainer,SWT.LEFT);
  dataComboLabel.setText(""String_Node_Str"");
  dataComboLabel.setSize(150,30);
  final Combo dataCombo=new Combo(refSWTContainer,SWT.READ_ONLY);
  viewCombo.setSize(150,30);
  viewCombo.setEnabled(true);
  dataCombo.setSize(150,30);
  dataCombo.setEnabled(false);
  viewCombo.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      if (bIsDataInitialized == true)       return;
      fillCombos();
      viewCombo.removeAll();
      viewCombo.setItems(viewComboItems);
      dataCombo.setEnabled(true);
      bIsDataInitialized=true;
    }
  }
);
  viewCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      fillDataSets(viewCombo,dataCombo);
      viewCombo.select(viewCombo.getSelectionIndex());
    }
  }
);
  dataCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      int iSelectedViewDataSetId=StringConversionTool.convertStringToInt(arSetIDs.get(dataCombo.getSelectionIndex()),0);
      hashComboText2View.get(arFilteredViews.get(viewCombo.getSelectionIndex())).setDataSetId(iSelectedViewDataSetId);
      bIsDataInitialized=false;
    }
  }
);
}","public void initView(){
  refSWTContainer.setLayout(new RowLayout(SWT.VERTICAL));
  Label viewComboLabel=new Label(refSWTContainer,SWT.LEFT);
  viewComboLabel.setText(""String_Node_Str"");
  viewComboLabel.setLayoutData(new RowData(150,30));
  final Combo viewCombo=new Combo(refSWTContainer,SWT.READ_ONLY);
  Label dataComboLabel=new Label(refSWTContainer,SWT.LEFT);
  dataComboLabel.setText(""String_Node_Str"");
  dataComboLabel.setLayoutData(new RowData(150,30));
  final Combo dataCombo=new Combo(refSWTContainer,SWT.READ_ONLY);
  viewCombo.setLayoutData(new RowData(150,30));
  viewCombo.setEnabled(true);
  dataCombo.setLayoutData(new RowData(150,30));
  dataCombo.setEnabled(false);
  viewCombo.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      if (bIsDataInitialized == true)       return;
      fillCombos();
      viewCombo.removeAll();
      viewCombo.setItems(viewComboItems);
      dataCombo.setEnabled(true);
      bIsDataInitialized=true;
    }
  }
);
  viewCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      fillDataSets(viewCombo,dataCombo);
      viewCombo.select(viewCombo.getSelectionIndex());
    }
  }
);
  dataCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      int iSelectedViewDataSetId=StringConversionTool.convertStringToInt(arSetIDs.get(dataCombo.getSelectionIndex()),0);
      hashComboText2View.get(arFilteredViews.get(viewCombo.getSelectionIndex())).setDataSetId(iSelectedViewDataSetId);
      bIsDataInitialized=false;
    }
  }
);
}",0.9636880328386486
59194,"protected void fillMappingFile() throws ServiceException, IOException {
  String strGeneID=""String_Node_Str"";
  String strAccessionNumber;
  String[] strArEnzymeQueryResult=null;
  String[] strArHomeSapiensGenes=null;
  int iNumberOfGenes;
  KEGGLocator locator=new KEGGLocator();
  KEGGPortType serv=locator.getKEGGPort();
  EUtilsServiceLocator service=new EUtilsServiceLocator();
  EUtilsServiceSoap utils=service.geteUtilsServiceSoap();
  EFetchRequest parameters=new EFetchRequest();
  parameters.setDb(""String_Node_Str"");
  parameters.setRettype(""String_Node_Str"");
  EFetchResult entrezEFetchResult=null;
  iNumberOfGenes=serv.get_number_of_genes_by_organism(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + iNumberOfGenes);
  strArHomeSapiensGenes=serv.get_genes_by_organism(""String_Node_Str"",1,iNumberOfGenes);
  for (int iGeneIndex=0; iGeneIndex < strArHomeSapiensGenes.length; iGeneIndex++) {
    strGeneID=strArHomeSapiensGenes[iGeneIndex];
    System.out.println(""String_Node_Str"" + strGeneID);
    strArEnzymeQueryResult=serv.get_enzymes_by_gene(strGeneID);
    strGeneID=strGeneID.substring(4);
    if (strArEnzymeQueryResult.length == 0) {
      System.out.println(""String_Node_Str"" + strGeneID + strDelimiter);
      mappingGeneID2EnzymeOutputStream.println(strGeneID + strDelimiter);
    }
    for (int iResultIndex=0; iResultIndex < strArEnzymeQueryResult.length; iResultIndex++) {
      System.out.println(""String_Node_Str"" + strGeneID + strDelimiter+ strArEnzymeQueryResult[iResultIndex]);
      mappingGeneID2EnzymeOutputStream.println(strGeneID + strDelimiter + strArEnzymeQueryResult[iResultIndex]);
    }
    parameters.setId(strGeneID);
    entrezEFetchResult=utils.run_eFetch(parameters);
    GeneCommentaryType[] geneCommentaries=entrezEFetchResult.getEntrezgeneSet().getEntrezgene(0).getEntrezgene_comments().getGeneCommentary();
    for (int iGeneCommentaryIndex=0; iGeneCommentaryIndex < geneCommentaries.length; iGeneCommentaryIndex++) {
      if (geneCommentaries[iGeneCommentaryIndex].getGeneCommentary_heading() != null && geneCommentaries[iGeneCommentaryIndex].getGeneCommentary_heading().equals(""String_Node_Str"")) {
        strAccessionNumber=geneCommentaries[iGeneCommentaryIndex].getGeneCommentary_comment().getGeneCommentary(0).getGeneCommentary_products().getGeneCommentary(0).getGeneCommentary_accession();
        System.out.println(""String_Node_Str"" + strGeneID + strDelimiter+ strAccessionNumber);
        mappingGeneID2AccessionOutputStream.println(strGeneID + strDelimiter + strAccessionNumber);
        break;
      }
    }
  }
  mappingGeneID2EnzymeOutputStream.close();
  mappingGeneID2AccessionOutputStream.close();
  System.out.println(""String_Node_Str"");
}","protected void fillMappingFile() throws ServiceException, IOException {
  String strGeneID=""String_Node_Str"";
  String strAccessionNumber=""String_Node_Str"";
  String[] strArEnzymeQueryResult=null;
  String[] strArHomeSapiensGenes=null;
  int iNumberOfGenes;
  GeneCommentaryType[] tmpGeneCommentaries=null;
  GeneCommentaryType[] geneCommentaries=null;
  GeneCommentaryType[] lastGeneCommentaries=null;
  KEGGLocator locator=new KEGGLocator();
  KEGGPortType serv=locator.getKEGGPort();
  EUtilsServiceLocator service=new EUtilsServiceLocator();
  EUtilsServiceSoap utils=service.geteUtilsServiceSoap();
  EFetchRequest parameters=new EFetchRequest();
  parameters.setDb(""String_Node_Str"");
  parameters.setRettype(""String_Node_Str"");
  EFetchResult entrezEFetchResult=null;
  iNumberOfGenes=serv.get_number_of_genes_by_organism(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + iNumberOfGenes);
  strArHomeSapiensGenes=serv.get_genes_by_organism(""String_Node_Str"",1,iNumberOfGenes);
  for (int iGeneIndex=0; iGeneIndex < strArHomeSapiensGenes.length; iGeneIndex++) {
    strGeneID=strArHomeSapiensGenes[iGeneIndex];
    System.out.println(""String_Node_Str"" + strGeneID);
    strArEnzymeQueryResult=serv.get_enzymes_by_gene(strGeneID);
    strGeneID=strGeneID.substring(4);
    if (strArEnzymeQueryResult.length == 0) {
      System.out.println(""String_Node_Str"" + strGeneID + strDelimiter);
      mappingGeneID2EnzymeOutputStream.println(strGeneID + strDelimiter);
    }
    for (int iResultIndex=0; iResultIndex < strArEnzymeQueryResult.length; iResultIndex++) {
      System.out.println(""String_Node_Str"" + strGeneID + strDelimiter+ strArEnzymeQueryResult[iResultIndex]);
      mappingGeneID2EnzymeOutputStream.println(strGeneID + strDelimiter + strArEnzymeQueryResult[iResultIndex]);
    }
    parameters.setId(strGeneID);
    entrezEFetchResult=utils.run_eFetch(parameters);
    geneCommentaries=entrezEFetchResult.getEntrezgeneSet().getEntrezgene(0).getEntrezgene_comments().getGeneCommentary();
    for (int iGeneCommentaryIndex=0; iGeneCommentaryIndex < geneCommentaries.length; iGeneCommentaryIndex++) {
      if (geneCommentaries[iGeneCommentaryIndex].getGeneCommentary_heading() != null && geneCommentaries[iGeneCommentaryIndex].getGeneCommentary_heading().equals(""String_Node_Str"")) {
        tmpGeneCommentaries=geneCommentaries[iGeneCommentaryIndex].getGeneCommentary_comment().getGeneCommentary();
        for (int iTmpGeneCommentaryIndex=0; iTmpGeneCommentaryIndex < tmpGeneCommentaries.length; iTmpGeneCommentaryIndex++) {
          if (tmpGeneCommentaries[iTmpGeneCommentaryIndex].getGeneCommentary_heading() != null && tmpGeneCommentaries[iTmpGeneCommentaryIndex].getGeneCommentary_heading().equals(""String_Node_Str"")) {
            lastGeneCommentaries=tmpGeneCommentaries[iTmpGeneCommentaryIndex].getGeneCommentary_products().getGeneCommentary();
            for (int iLastGeneCommentaryIndex=0; iLastGeneCommentaryIndex < lastGeneCommentaries.length; iLastGeneCommentaryIndex++) {
              if (lastGeneCommentaries[iLastGeneCommentaryIndex].getGeneCommentary_heading() != null && lastGeneCommentaries[iLastGeneCommentaryIndex].getGeneCommentary_heading().equals(""String_Node_Str"")) {
                strAccessionNumber=lastGeneCommentaries[iLastGeneCommentaryIndex].getGeneCommentary_accession();
                break;
              }
            }
            break;
          }
        }
        System.out.println(""String_Node_Str"" + strGeneID + strDelimiter+ strAccessionNumber);
        mappingGeneID2AccessionOutputStream.println(strGeneID + strDelimiter + strAccessionNumber);
        break;
      }
    }
  }
  mappingGeneID2EnzymeOutputStream.close();
  mappingGeneID2AccessionOutputStream.close();
  System.out.println(""String_Node_Str"");
}",0.7992627860543695
59195,"/** 
 * Start application by parsing a XMl file.  XML file is eihter local or received from a Muddleware server.
 * @param filename XML bootstrap file
 */
public void run(){
  if (bEnableBootstrapViaMuddleware) {
    logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
    runUsingMuddleWare(""String_Node_Str"");
  }
 else {
    logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
    runFromLocalXML_File();
  }
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
  refSWTGUIManager.runApplication();
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
  refOneForAllManager.destroyOnExit();
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
}","/** 
 * Start application by parsing a XMl file.  XML file is eihter local or received from a Muddleware server.
 * @param filename XML bootstrap file
 */
public void run(){
  if (bEnableBootstrapViaMuddleware) {
    logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
    runUsingMuddleWare(""String_Node_Str"");
  }
 else {
    logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
    refXmlParserManager.parseXmlFileByName(sFileName);
  }
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
  refSWTGUIManager.runApplication();
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
  refOneForAllManager.destroyOnExit();
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
  logger.logMsg(""String_Node_Str"",LoggerType.STATUS);
}",0.9617258176757132
59196,"/** 
 * Identifies each application in the network with a unique Id form [1..99] issued by the network server.
 * @return unique networkHostId of this host.
 */
public abstract int getNetworkPostfix();","/** 
 * Identifies each application in the network with a unique Id form [1..99] issued by the network server.
 * @see cerberus.manager.IGeneralManager#iUniqueId_WorkspaceOffset
 * @return unique networkHostId of this host.
 */
public abstract int getNetworkPostfix();",0.8571428571428571
59197,"/** 
 * Call initAll() before using this class!
 * @see cerberus.data.manager.singelton.OneForAllManager#initAll()
 */
public OneForAllManager(final SingeltonManager sef_SingeltonManager){
  if (refSingeltonManager == null) {
    refSingeltonManager=new SingeltonManager(this);
    refSingeltonManager.initManager();
  }
 else {
    refSingeltonManager=sef_SingeltonManager;
  }
}","/** 
 * Call initAll() before using this class!
 * @see cerberus.data.manager.singelton.OneForAllManager#initAll()
 */
public OneForAllManager(final SingeltonManager sef_SingeltonManager){
  if (refSingeltonManager == null) {
    refSingeltonManager=new SingeltonManager(this);
    refSingeltonManager.initManager();
  }
 else {
    refSingeltonManager=sef_SingeltonManager;
  }
  refSingeltonManager.setNetworkPostfix(1);
}",0.945273631840796
59198,"public void setNetworkPostfix(int iSetNetworkPrefix){
  if ((iSetNetworkPrefix < IGeneralManager.iUniqueId_WorkspaceOffset) && (iSetNetworkPrefix > 0)) {
    iNetworkApplicationIdPostfix=iSetNetworkPrefix;
  }
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * @see cerberus.manager.singelton.Singelton#setNetworkPostfix(int)
 * @see cerberus.manager.IGeneralManager#iUniqueId_WorkspaceOffset
 */
public void setNetworkPostfix(int iSetNetworkPrefix){
  if ((iSetNetworkPrefix < IGeneralManager.iUniqueId_WorkspaceOffset) && (iSetNetworkPrefix >= 0)) {
    iNetworkApplicationIdPostfix=iSetNetworkPrefix;
    return;
  }
  throw new RuntimeException(""String_Node_Str"" + IGeneralManager.iUniqueId_WorkspaceOffset + ""String_Node_Str"");
}",0.7017543859649122
59199,"public void renderPart(GL gl){
  this.gl=gl;
  int iDisplayListNodeId=0;
  int iDisplayListEdgeId=0;
  for (int iDisplayListIndex=0; iDisplayListIndex < iArPathwayNodeDisplayListIDs.size(); iDisplayListIndex++) {
    iDisplayListNodeId=iArPathwayNodeDisplayListIDs.get(iDisplayListIndex);
    iDisplayListEdgeId=iArPathwayEdgeDisplayListIDs.get(iDisplayListIndex);
    if (bShowPathwayTexture == false) {
      gl.glCallList(iDisplayListEdgeId);
    }
    gl.glCallList(iDisplayListNodeId);
  }
  if (bShowPathwayTexture == true) {
    Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
    Texture refPathwayTexture=null;
    Pathway refTmpPathway=null;
    float fTmpZLayerValue=0.0f;
    while (iterPathways.hasNext()) {
      refTmpPathway=iterPathways.next();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fTmpZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
      gl.glEnable(GL.GL_TEXTURE_2D);
      refPathwayTexture.bind();
      gl.glTexEnvf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_ENV_MODE,GL.GL_REPLACE);
      gl.glColor3f(0.9f,0.9f,0.9f);
      TextureCoords texCoords=refPathwayTexture.getImageTexCoords();
      gl.glBegin(GL.GL_QUADS);
      gl.glTexCoord2f(0,texCoords.top());
      gl.glVertex3f(0.0f,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fPathwayTextureAspectRatio,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),0);
      gl.glVertex3f(fPathwayTextureAspectRatio,1f,fTmpZLayerValue);
      gl.glTexCoord2f(0,0);
      gl.glVertex3f(0.0f,1f,fTmpZLayerValue);
      gl.glEnd();
      gl.glDisable(GL.GL_TEXTURE_2D);
    }
  }
  Color nodeColor=refRenderStyle.getHighlightedNodeColor();
  if (!iArSelectionStorageVertexIDs.isEmpty()) {
    Pathway refTmpPathway=null;
    PathwayVertex refCurrentVertex=null;
    PathwayVertex refTmpVertex=null;
    IPathwayVertexRep refCurrentVertexRep=null;
    Texture refPathwayTexture=null;
    Iterator<PathwayVertex> iterSelectedVertices=iArSelectionStorageVertexIDs.iterator();
    Iterator<Integer> iterSelectedNeighborDistance=iArSelectionStorageNeighborDistance.iterator();
    Iterator<PathwayVertex> iterIdenticalVertices=null;
    Iterator<Pathway> iterDrawnPathways=null;
    while (iterSelectedVertices.hasNext()) {
      fZLayerValue=0.0f;
      refCurrentVertex=iterSelectedVertices.next();
      createVertex(refCurrentVertex.getVertexRepByIndex(iVertexRepIndex),true,nodeColor);
      iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
      while (iterDrawnPathways.hasNext()) {
        refTmpPathway=iterDrawnPathways.next();
        iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refCurrentVertex.getElementTitle()).iterator();
        while (iterIdenticalVertices.hasNext()) {
          refTmpVertex=iterIdenticalVertices.next();
          if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
            fZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
            refCurrentVertexRep=refTmpVertex.getVertexRepByIndex(iVertexRepIndex);
            if (refCurrentVertexRep != null) {
              refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
              fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
              fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
              fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
              createVertex(refCurrentVertexRep,true,nodeColor);
              if (!refTmpPathway.equals(refBasicPathway)) {
                connectVertices(refCurrentVertexRep,refCurrentVertex.getVertexRepByIndex(iVertexRepIndex));
              }
            }
          }
        }
      }
    }
  }
}","public void renderPart(GL gl){
  this.gl=gl;
  int iDisplayListNodeId=0;
  int iDisplayListEdgeId=0;
  for (int iDisplayListIndex=0; iDisplayListIndex < iArPathwayNodeDisplayListIDs.size(); iDisplayListIndex++) {
    iDisplayListNodeId=iArPathwayNodeDisplayListIDs.get(iDisplayListIndex);
    iDisplayListEdgeId=iArPathwayEdgeDisplayListIDs.get(iDisplayListIndex);
    if (bShowPathwayTexture == false) {
      gl.glCallList(iDisplayListEdgeId);
    }
    gl.glCallList(iDisplayListNodeId);
  }
  if (bShowPathwayTexture == true) {
    Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
    Texture refPathwayTexture=null;
    Pathway refTmpPathway=null;
    float fTmpZLayerValue=0.0f;
    while (iterPathways.hasNext()) {
      refTmpPathway=iterPathways.next();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fTmpZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
      gl.glEnable(GL.GL_TEXTURE_2D);
      refPathwayTexture.bind();
      gl.glTexEnvf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_ENV_MODE,GL.GL_REPLACE);
      gl.glColor3f(0.9f,0.9f,0.9f);
      TextureCoords texCoords=refPathwayTexture.getImageTexCoords();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
      fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
      fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
      gl.glBegin(GL.GL_QUADS);
      gl.glTexCoord2f(0,texCoords.top());
      gl.glVertex3f(0.0f,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fPathwayTextureAspectRatio,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),0);
      gl.glVertex3f(fPathwayTextureAspectRatio,1f,fTmpZLayerValue);
      gl.glTexCoord2f(0,0);
      gl.glVertex3f(0.0f,1f,fTmpZLayerValue);
      gl.glEnd();
      gl.glDisable(GL.GL_TEXTURE_2D);
    }
  }
  Color nodeColor=refRenderStyle.getHighlightedNodeColor();
  if (!iArSelectionStorageVertexIDs.isEmpty()) {
    Pathway refTmpPathway=null;
    PathwayVertex refCurrentVertex=null;
    PathwayVertex refTmpVertex=null;
    IPathwayVertexRep refCurrentVertexRep=null;
    Texture refPathwayTexture=null;
    Iterator<PathwayVertex> iterSelectedVertices=iArSelectionStorageVertexIDs.iterator();
    Iterator<Integer> iterSelectedNeighborDistance=iArSelectionStorageNeighborDistance.iterator();
    Iterator<PathwayVertex> iterIdenticalVertices=null;
    Iterator<Pathway> iterDrawnPathways=null;
    while (iterSelectedVertices.hasNext()) {
      fZLayerValue=0.0f;
      refCurrentVertex=iterSelectedVertices.next();
      createVertex(refCurrentVertex.getVertexRepByIndex(iVertexRepIndex),true,nodeColor);
      iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
      while (iterDrawnPathways.hasNext()) {
        refTmpPathway=iterDrawnPathways.next();
        iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refCurrentVertex.getElementTitle()).iterator();
        while (iterIdenticalVertices.hasNext()) {
          refTmpVertex=iterIdenticalVertices.next();
          if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
            fZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
            refCurrentVertexRep=refTmpVertex.getVertexRepByIndex(iVertexRepIndex);
            if (refCurrentVertexRep != null) {
              refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
              fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
              fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
              fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
              createVertex(refCurrentVertexRep,true,nodeColor);
              if (!refTmpPathway.equals(refBasicPathway)) {
                connectVertices(refCurrentVertexRep,refCurrentVertex.getVertexRepByIndex(iVertexRepIndex));
              }
            }
          }
        }
      }
    }
  }
}",0.9569049951028404
59200,"public void init(GLAutoDrawable canvas){
  setInitGLDone();
  this.gl=canvas.getGL();
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glLineWidth(1.0f);
  float[] fMatSpecular={1.0f,1.0f,1.0f,1.0f};
  float[] fMatShininess={25.0f};
  float[] fLightPosition={-1.0f,0.0f,0.0f,1.0f};
  float[] fWhiteLight={1.0f,1.0f,1.0f,1.0f};
  float[] fModelAmbient={0.2f,0.2f,0.2f,1.0f};
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
  gl.glLightfv(GL.GL_LIGHT0,GL.GL_POSITION,fLightPosition,0);
  gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT,fModelAmbient,0);
  gl.glEnable(GL.GL_LIGHTING);
  gl.glEnable(GL.GL_LIGHT0);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  buildPathwayDisplayList();
}","public void init(GLAutoDrawable canvas){
  setInitGLDone();
  this.gl=canvas.getGL();
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glLineWidth(1.0f);
  float[] fMatSpecular={1.0f,1.0f,1.0f,1.0f};
  float[] fMatShininess={25.0f};
  float[] fLightPosition={-1.0f,0.0f,0.0f,1.0f};
  float[] fWhiteLight={1.0f,1.0f,1.0f,1.0f};
  float[] fModelAmbient={0.3f,0.3f,0.3f,1.0f};
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
  gl.glLightfv(GL.GL_LIGHT0,GL.GL_POSITION,fLightPosition,0);
  gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT,fModelAmbient,0);
  gl.glEnable(GL.GL_LIGHTING);
  gl.glEnable(GL.GL_LIGHT0);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  buildPathwayDisplayList();
}",0.9875
59201,"public void resetPathway(){
  refCurrentPathway=null;
  refCurrentPathwayImageMap=null;
  refGraphModel=new DefaultGraphModel();
  refPathwayGraph.setModel(refGraphModel);
  refGraphLayoutCache.setModel(refGraphModel);
  refGraphModel.addUndoableEditListener(refUndoManager);
  vecVertices.removeAllElements();
  vecRelationEdges.removeAllElements();
  vecReactionEdges.removeAllElements();
  iNeighbourhoodUndoCount=0;
  bNeighbourhoodShown=false;
}","public void resetPathway(){
  refGraphModel=new DefaultGraphModel();
  refPathwayGraph.setModel(refGraphModel);
  refGraphLayoutCache.setModel(refGraphModel);
  refGraphModel.addUndoableEditListener(refUndoManager);
  vecVertices.removeAllElements();
  vecRelationEdges.removeAllElements();
  vecReactionEdges.removeAllElements();
  iNeighbourhoodUndoCount=0;
  bNeighbourhoodShown=false;
}",0.9285714285714286
59202,"public void loadPathwayFromFile(String sFilePath){
  super.loadPathwayFromFile(sFilePath);
  resetPathway();
  iPathwayId=Integer.parseInt(sFilePath.substring(sFilePath.lastIndexOf('/') + 4,sFilePath.lastIndexOf('/') + 9));
  drawView();
  refPathwayGraph.setBackgroundImage(null);
  if (bShowBackgroundOverlay == true) {
    String sPathwayImageFilePath=refCurrentPathway.getTitle();
    sPathwayImageFilePath=sPathwayImageFilePath.substring(5);
    sPathwayImageFilePath=""String_Node_Str"" + sPathwayImageFilePath + ""String_Node_Str"";
    loadBackgroundOverlayImage(sPathwayImageFilePath);
  }
  refGraphLayoutCache.reload();
}","public void loadPathwayFromFile(String sFilePath){
  super.loadPathwayFromFile(sFilePath);
  refCurrentPathway=null;
  refCurrentPathwayImageMap=null;
  resetPathway();
  iPathwayId=Integer.parseInt(sFilePath.substring(sFilePath.lastIndexOf('/') + 4,sFilePath.lastIndexOf('/') + 9));
  drawView();
  refPathwayGraph.setBackgroundImage(null);
  if (bShowBackgroundOverlay == true) {
    String sPathwayImageFilePath=refCurrentPathway.getTitle();
    sPathwayImageFilePath=sPathwayImageFilePath.substring(5);
    sPathwayImageFilePath=""String_Node_Str"" + sPathwayImageFilePath + ""String_Node_Str"";
    loadBackgroundOverlayImage(sPathwayImageFilePath);
  }
  refGraphLayoutCache.reload();
}",0.9544072948328268
59203,"public void loadImageMapFromFile(String sImageMapPath){
  resetPathway();
  refGeneralManager.getSingelton().getXmlParserManager().parseXmlFileByName(sImageMapPath);
  refCurrentPathwayImageMap=refGeneralManager.getSingelton().getPathwayManager().getCurrentPathwayImageMap();
  loadBackgroundOverlayImage(refCurrentPathwayImageMap.getImageLink());
}","public void loadImageMapFromFile(String sImageMapPath){
  refCurrentPathway=null;
  refCurrentPathwayImageMap=null;
  resetPathway();
  refGeneralManager.getSingelton().getXmlParserManager().parseXmlFileByName(sImageMapPath);
  refCurrentPathwayImageMap=refGeneralManager.getSingelton().getPathwayManager().getCurrentPathwayImageMap();
  loadBackgroundOverlayImage(refCurrentPathwayImageMap.getImageLink());
}",0.920844327176781
59204,"public void drawView(){
  super.drawView();
  if (refGeneralManager.getSingelton().getPathwayManager().getCurrentPathway() != null) {
    if (iPathwayId != 0) {
      HashMap<Integer,Pathway> pathwayLUT=((IPathwayManager)refGeneralManager.getSingelton().getPathwayManager()).getPathwayLUT();
      refCurrentPathway=pathwayLUT.get(iPathwayId);
    }
 else {
      refCurrentPathway=refGeneralManager.getSingelton().getPathwayManager().getCurrentPathway();
    }
    extractVertices();
    extractEdges();
    finishGraphBuilding();
  }
 else   if (iPathwayLevel == 1) {
    refCurrentPathwayImageMap=refGeneralManager.getSingelton().getPathwayManager().getCurrentPathwayImageMap();
    loadBackgroundOverlayImage(refCurrentPathwayImageMap.getImageLink());
  }
  if (bGraphSet == false) {
    final Dimension dimOverviewMap=new Dimension(200,200);
    final Dimension dimPathway=new Dimension(iWidth,iHeight);
    JScrollPane refScrollPane=new JScrollPane(refPathwayGraph);
    refScrollPane.setMinimumSize(dimPathway);
    refScrollPane.setMaximumSize(dimPathway);
    refScrollPane.setPreferredSize(dimPathway);
    refScrollPane.setAlignmentX(0.5f);
    refScrollPane.setAlignmentY(0.5f);
    refEmbeddedFrame.add(refScrollPane);
    refOverviewPanel=new GPOverviewPanel(refPathwayGraph,refScrollPane);
    bGraphSet=true;
  }
}","public void drawView(){
  super.drawView();
  if (refGeneralManager.getSingelton().getPathwayManager().getCurrentPathway() != null) {
    if (iPathwayId != 0) {
      HashMap<Integer,Pathway> pathwayLUT=((IPathwayManager)refGeneralManager.getSingelton().getPathwayManager()).getPathwayLUT();
      refCurrentPathway=pathwayLUT.get(iPathwayId);
    }
 else     if (refCurrentPathway == null) {
      refCurrentPathway=refGeneralManager.getSingelton().getPathwayManager().getCurrentPathway();
    }
    extractVertices();
    extractEdges();
    finishGraphBuilding();
  }
 else   if (iPathwayLevel == 1) {
    refCurrentPathwayImageMap=refGeneralManager.getSingelton().getPathwayManager().getCurrentPathwayImageMap();
    loadBackgroundOverlayImage(refCurrentPathwayImageMap.getImageLink());
  }
  if (bGraphSet == false) {
    final Dimension dimOverviewMap=new Dimension(200,200);
    final Dimension dimPathway=new Dimension(iWidth,iHeight);
    JScrollPane refScrollPane=new JScrollPane(refPathwayGraph);
    refScrollPane.setMinimumSize(dimPathway);
    refScrollPane.setMaximumSize(dimPathway);
    refScrollPane.setPreferredSize(dimPathway);
    refScrollPane.setAlignmentX(0.5f);
    refScrollPane.setAlignmentY(0.5f);
    refEmbeddedFrame.add(refScrollPane);
    refOverviewPanel=new GPOverviewPanel(refPathwayGraph,refScrollPane);
    bGraphSet=true;
  }
}",0.987012987012987
59205,"public void renderPart(GL gl){
  this.gl=gl;
  int iDisplayListNodeId=0;
  int iDisplayListEdgeId=0;
  for (int iDisplayListIndex=0; iDisplayListIndex < iArPathwayNodeDisplayListIDs.size(); iDisplayListIndex++) {
    iDisplayListNodeId=iArPathwayNodeDisplayListIDs.get(iDisplayListIndex);
    iDisplayListEdgeId=iArPathwayEdgeDisplayListIDs.get(iDisplayListIndex);
    if (bShowPathwayTexture == false) {
      gl.glCallList(iDisplayListEdgeId);
    }
    gl.glCallList(iDisplayListNodeId);
  }
  if (bShowPathwayTexture == true) {
    Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
    Texture refPathwayTexture=null;
    Pathway refTmpPathway=null;
    float fTmpZLayerValue=0.0f;
    while (iterPathways.hasNext()) {
      refTmpPathway=iterPathways.next();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fTmpZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
      gl.glEnable(GL.GL_TEXTURE_2D);
      refPathwayTexture.bind();
      gl.glTexEnvf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_ENV_MODE,GL.GL_REPLACE);
      gl.glColor3f(0.9f,0.9f,0.9f);
      TextureCoords texCoords=refPathwayTexture.getImageTexCoords();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
      fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
      fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
      gl.glBegin(GL.GL_QUADS);
      gl.glTexCoord2f(0,texCoords.top());
      gl.glVertex3f(0.0f,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fPathwayTextureAspectRatio,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),0);
      gl.glVertex3f(fPathwayTextureAspectRatio,1f,fTmpZLayerValue);
      gl.glTexCoord2f(0,0);
      gl.glVertex3f(0.0f,1f,fTmpZLayerValue);
      gl.glEnd();
      gl.glDisable(GL.GL_TEXTURE_2D);
    }
  }
  Color nodeColor=refRenderStyle.getHighlightedNodeColor();
  if (!iArSelectionStorageVertexIDs.isEmpty()) {
    Pathway refTmpPathway=null;
    PathwayVertex refCurrentVertex=null;
    PathwayVertex refTmpVertex=null;
    IPathwayVertexRep refCurrentVertexRep=null;
    Texture refPathwayTexture=null;
    Iterator<PathwayVertex> iterSelectedVertices=iArSelectionStorageVertexIDs.iterator();
    Iterator<Integer> iterSelectedNeighborDistance=iArSelectionStorageNeighborDistance.iterator();
    Iterator<PathwayVertex> iterIdenticalVertices=null;
    Iterator<Pathway> iterDrawnPathways=null;
    while (iterSelectedVertices.hasNext()) {
      fZLayerValue=0.0f;
      refCurrentVertex=iterSelectedVertices.next();
      createVertex(refCurrentVertex.getVertexRepByIndex(iVertexRepIndex),true,nodeColor);
      iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
      while (iterDrawnPathways.hasNext()) {
        refTmpPathway=iterDrawnPathways.next();
        iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refCurrentVertex.getElementTitle()).iterator();
        while (iterIdenticalVertices.hasNext()) {
          refTmpVertex=iterIdenticalVertices.next();
          if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
            fZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
            refCurrentVertexRep=refTmpVertex.getVertexRepByIndex(iVertexRepIndex);
            if (refCurrentVertexRep != null) {
              refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
              fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
              fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
              fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
              createVertex(refCurrentVertexRep,true,nodeColor);
              if (!refTmpPathway.equals(refBasicPathway)) {
                connectVertices(refCurrentVertexRep,refCurrentVertex.getVertexRepByIndex(iVertexRepIndex));
              }
            }
          }
        }
      }
    }
  }
}","public void renderPart(GL gl){
  this.gl=gl;
  int iDisplayListNodeId=0;
  int iDisplayListEdgeId=0;
  for (int iDisplayListIndex=0; iDisplayListIndex < iArPathwayNodeDisplayListIDs.size(); iDisplayListIndex++) {
    iDisplayListNodeId=iArPathwayNodeDisplayListIDs.get(iDisplayListIndex);
    iDisplayListEdgeId=iArPathwayEdgeDisplayListIDs.get(iDisplayListIndex);
    if (bShowPathwayTexture == false) {
      gl.glCallList(iDisplayListEdgeId);
    }
    gl.glCallList(iDisplayListNodeId);
  }
  if (bShowPathwayTexture == true) {
    Iterator<Pathway> iterPathways=refHashPathwayToZLayerValue.keySet().iterator();
    Texture refPathwayTexture=null;
    Pathway refTmpPathway=null;
    float fTmpZLayerValue=0.0f;
    while (iterPathways.hasNext()) {
      refTmpPathway=iterPathways.next();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fTmpZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
      gl.glEnable(GL.GL_TEXTURE_2D);
      refPathwayTexture.bind();
      gl.glTexEnvf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_ENV_MODE,GL.GL_REPLACE);
      gl.glColor3f(0.9f,0.9f,0.9f);
      TextureCoords texCoords=refPathwayTexture.getImageTexCoords();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
      fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
      fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
      gl.glBegin(GL.GL_QUADS);
      gl.glTexCoord2f(0,texCoords.top());
      gl.glVertex3f(0.0f,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fPathwayTextureAspectRatio,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),0);
      gl.glVertex3f(fPathwayTextureAspectRatio,1f,fTmpZLayerValue);
      gl.glTexCoord2f(0,0);
      gl.glVertex3f(0.0f,1f,fTmpZLayerValue);
      gl.glEnd();
      gl.glDisable(GL.GL_TEXTURE_2D);
    }
  }
 else {
    Iterator<Pathway> iterPathways=refHashPathwayToZLayerValue.keySet().iterator();
    Texture refPathwayTexture=null;
    Pathway refTmpPathway=null;
    float fTmpZLayerValue=0.0f;
    while (iterPathways.hasNext()) {
      refTmpPathway=iterPathways.next();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fTmpZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
      gl.glColor3f(0.9f,0.9f,0.9f);
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
      fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
      fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(0.0f,0.0f,fTmpZLayerValue);
      gl.glVertex3f(fPathwayTextureAspectRatio,0.0f,fTmpZLayerValue);
      gl.glVertex3f(fPathwayTextureAspectRatio,1f,fTmpZLayerValue);
      gl.glVertex3f(0.0f,1f,fTmpZLayerValue);
      gl.glEnd();
    }
  }
  Color nodeColor=refRenderStyle.getHighlightedNodeColor();
  if (!iArSelectionStorageVertexIDs.isEmpty()) {
    Pathway refTmpPathway=null;
    PathwayVertex refCurrentVertex=null;
    PathwayVertex refTmpVertex=null;
    IPathwayVertexRep refCurrentVertexRep=null;
    Texture refPathwayTexture=null;
    Iterator<PathwayVertex> iterSelectedVertices=iArSelectionStorageVertexIDs.iterator();
    Iterator<Integer> iterSelectedNeighborDistance=iArSelectionStorageNeighborDistance.iterator();
    Iterator<PathwayVertex> iterIdenticalVertices=null;
    Iterator<Pathway> iterDrawnPathways=null;
    while (iterSelectedVertices.hasNext()) {
      fZLayerValue=0.0f;
      refCurrentVertex=iterSelectedVertices.next();
      refPathwayTexture=refHashPathwayToTexture.get(refBasicPathway);
      fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
      fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
      fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
      createVertex(refCurrentVertex.getVertexRepByIndex(iVertexRepIndex),true,nodeColor);
      iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
      while (iterDrawnPathways.hasNext()) {
        refTmpPathway=iterDrawnPathways.next();
        iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refCurrentVertex.getElementTitle()).iterator();
        while (iterIdenticalVertices.hasNext()) {
          refTmpVertex=iterIdenticalVertices.next();
          if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
            fZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
            refCurrentVertexRep=refTmpVertex.getVertexRepByIndex(iVertexRepIndex);
            if (refCurrentVertexRep != null) {
              refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
              fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
              fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
              fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
              createVertex(refCurrentVertexRep,true,nodeColor);
              if (!refTmpPathway.equals(refBasicPathway)) {
                connectVertices(refCurrentVertexRep,refCurrentVertex.getVertexRepByIndex(iVertexRepIndex));
              }
            }
          }
        }
      }
    }
  }
}",0.8454957221942627
59206,"/** 
 * Constructor
 * @param refGeneralManager
 */
public GLCanvasPathway3D(final IGeneralManager refGeneralManager,int iViewId,int iParentContainerId,String sLabel){
  super(refGeneralManager,-1,iParentContainerId,""String_Node_Str"");
  openGLCanvasDirector=refGeneralManager.getSingelton().getViewGLCanvasManager().getGLCanvasDirector(iParentContainerId);
  refSWTContainer=((SwtJoglGLCanvasViewRep)openGLCanvasDirector).getSWTContainer();
  refSWTContainer.setLayout(new GridLayout(1,false));
  new Pathway3DToolbar(refSWTContainer,this);
  this.canvas=openGLCanvasDirector.getGLCanvas();
  viewingFrame=new float[2][2];
  viewingFrame[X][MIN]=0.0f;
  viewingFrame[X][MAX]=1.0f;
  viewingFrame[Y][MIN]=0.0f;
  viewingFrame[Y][MAX]=1.0f;
  iArSelectionStorageVertexIDs=new ArrayList<PathwayVertex>();
  iArSelectionStorageNeighborDistance=new ArrayList<Integer>();
  iArPathwayNodeDisplayListIDs=new ArrayList<Integer>();
  iArPathwayEdgeDisplayListIDs=new ArrayList<Integer>();
  refHashPathwayToZLayerValue=new HashMap<Pathway,Float>();
  refHashPathwayToTexture=new HashMap<Pathway,Texture>();
}","/** 
 * Constructor
 * @param refGeneralManager
 */
public GLCanvasPathway3D(final IGeneralManager refGeneralManager,int iViewId,int iParentContainerId,String sLabel){
  super(refGeneralManager,iViewId,iParentContainerId,""String_Node_Str"");
  openGLCanvasDirector=refGeneralManager.getSingelton().getViewGLCanvasManager().getGLCanvasDirector(iParentContainerId);
  refSWTContainer=((SwtJoglGLCanvasViewRep)openGLCanvasDirector).getSWTContainer();
  refSWTContainer.setLayout(new GridLayout(1,false));
  new Pathway3DToolbar(refSWTContainer,this);
  this.canvas=openGLCanvasDirector.getGLCanvas();
  viewingFrame=new float[2][2];
  viewingFrame[X][MIN]=0.0f;
  viewingFrame[X][MAX]=1.0f;
  viewingFrame[Y][MIN]=0.0f;
  viewingFrame[Y][MAX]=1.0f;
  iArSelectionStorageVertexIDs=new ArrayList<PathwayVertex>();
  iArSelectionStorageNeighborDistance=new ArrayList<Integer>();
  iArPathwayNodeDisplayListIDs=new ArrayList<Integer>();
  iArPathwayEdgeDisplayListIDs=new ArrayList<Integer>();
  refHashPathwayToZLayerValue=new HashMap<Pathway,Float>();
  refHashPathwayToTexture=new HashMap<Pathway,Texture>();
}",0.9959183673469388
59207,"public void createVertex(IPathwayVertexRep vertexRep,boolean bHightlighVertex,Color nodeColor){
  fCanvasXPos=viewingFrame[X][MIN] + (vertexRep.getXPosition() * fScalingFactorX);
  fCanvasYPos=viewingFrame[Y][MIN] + (vertexRep.getYPosition() * fScalingFactorY);
  String sShapeType=vertexRep.getShapeType();
  gl.glTranslatef(fCanvasXPos,fCanvasYPos,fZLayerValue);
  if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
    }
 else {
      gl.glColor4f(1.0f,0.0f,1.0f,1.0f);
    }
    gl.glCallList(iContainedPathwayNodeDisplayListId);
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
      gl.glCallList(iHighlightedCompoundNodeDisplayListId);
    }
 else {
      gl.glColor4f(0.0f,1.0f,0.0f,1.0f);
      gl.glCallList(iCompoundNodeDisplayListId);
    }
    gl.glCallList(iCompoundNodeDisplayListId);
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
      gl.glCallList(iHighlightedEnzymeNodeDisplayListId);
    }
 else {
      gl.glColor4f(0.53f,0.81f,1.0f,1.0f);
      gl.glCallList(iEnzymeNodeDisplayListId);
    }
  }
  gl.glTranslatef(-fCanvasXPos,-fCanvasYPos,-fZLayerValue);
}","public void createVertex(IPathwayVertexRep vertexRep,boolean bHightlighVertex,Color nodeColor){
  fCanvasXPos=viewingFrame[X][MIN] + (vertexRep.getXPosition() * fScalingFactorX);
  fCanvasYPos=viewingFrame[Y][MIN] + (vertexRep.getYPosition() * fScalingFactorY);
  String sShapeType=vertexRep.getShapeType();
  gl.glTranslatef(fCanvasXPos,fCanvasYPos,fZLayerValue);
  if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
    }
 else {
      gl.glColor4f(1.0f,0.0f,1.0f,1.0f);
    }
    fPathwayNodeWidth=vertexRep.getWidth() / 2.0f * fScalingFactorX;
    fPathwayNodeHeight=vertexRep.getHeight() / 2.0f * fScalingFactorY;
    fillNodeDisplayList();
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
      gl.glCallList(iHighlightedCompoundNodeDisplayListId);
    }
 else {
      gl.glColor4f(0.0f,1.0f,0.0f,1.0f);
      gl.glCallList(iCompoundNodeDisplayListId);
    }
    gl.glCallList(iCompoundNodeDisplayListId);
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
      gl.glCallList(iHighlightedEnzymeNodeDisplayListId);
    }
 else {
      gl.glColor4f(0.53f,0.81f,1.0f,1.0f);
      gl.glCallList(iEnzymeNodeDisplayListId);
    }
  }
  gl.glTranslatef(-fCanvasXPos,-fCanvasYPos,-fZLayerValue);
}",0.9344804765056254
59208,"public void init(GLAutoDrawable canvas){
  setInitGLDone();
  this.gl=canvas.getGL();
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glLineWidth(1.0f);
  float[] fMatSpecular={1.0f,1.0f,1.0f,1.0f};
  float[] fMatShininess={25.0f};
  float[] fLightPosition={-1.0f,0.0f,0.0f,1.0f};
  float[] fWhiteLight={1.0f,1.0f,1.0f,1.0f};
  float[] fModelAmbient={0.3f,0.3f,0.3f,1.0f};
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
  gl.glLightfv(GL.GL_LIGHT0,GL.GL_POSITION,fLightPosition,0);
  gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT,fModelAmbient,0);
  gl.glEnable(GL.GL_LIGHTING);
  gl.glEnable(GL.GL_LIGHT0);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  buildPathwayDisplayList();
}","public void init(GLAutoDrawable canvas){
  System.err.println(""String_Node_Str"");
  this.gl=canvas.getGL();
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glLineWidth(1.0f);
  float[] fMatSpecular={1.0f,1.0f,1.0f,1.0f};
  float[] fMatShininess={25.0f};
  float[] fLightPosition={-1.0f,0.0f,0.0f,1.0f};
  float[] fWhiteLight={1.0f,1.0f,1.0f,1.0f};
  float[] fModelAmbient={0.3f,0.3f,0.3f,1.0f};
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
  gl.glLightfv(GL.GL_LIGHT0,GL.GL_POSITION,fLightPosition,0);
  gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT,fModelAmbient,0);
  gl.glEnable(GL.GL_LIGHTING);
  gl.glEnable(GL.GL_LIGHT0);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  buildPathwayDisplayList();
  setInitGLDone();
}",0.9616879511382566
59209,"protected void buildPathwayDisplayList(){
  String[] strPathwayPaths=new String[3];
  strPathwayPaths[0]=""String_Node_Str"";
  strPathwayPaths[1]=""String_Node_Str"";
  strPathwayPaths[2]=""String_Node_Str"";
  String[] strPathwayTexturePaths=new String[3];
  strPathwayTexturePaths[0]=""String_Node_Str"";
  strPathwayTexturePaths[1]=""String_Node_Str"";
  strPathwayTexturePaths[2]=""String_Node_Str"";
  loadPathwayFromFile(strPathwayPaths[0]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[0]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  refBasicPathway=refCurrentPathway;
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[1]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[1]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[2]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[2]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
  Texture refPathwayTexture=null;
  System.out.println(""String_Node_Str"");
  while (iterPathways.hasNext()) {
    System.out.println(""String_Node_Str"");
    int iVerticesDiplayListId=gl.glGenLists(1);
    int iEdgeDisplayListId=gl.glGenLists(1);
    iArPathwayNodeDisplayListIDs.add(iVerticesDiplayListId);
    iArPathwayEdgeDisplayListIDs.add(iEdgeDisplayListId);
    refCurrentPathway=iterPathways.next();
    System.out.println(""String_Node_Str"" + refCurrentPathway.getTitle());
    fZLayerValue=refHashPathwayToZLayerValue.get(refCurrentPathway);
    refPathwayTexture=refHashPathwayToTexture.get(refCurrentPathway);
    fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
    fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
    fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
    System.out.println(""String_Node_Str"" + fScalingFactorX);
    System.out.println(""String_Node_Str"" + fScalingFactorY);
    System.out.println(""String_Node_Str"" + fPathwayTextureAspectRatio);
    buildEnzymeNodeDisplayList();
    buildHighlightedEnzymeNodeDisplayList();
    buildCompoundNodeDisplayList();
    buildHighlightedCompoundNodeDisplayList();
    buildContainedPathwayNodeDisplayList();
    gl.glNewList(iVerticesDiplayListId,GL.GL_COMPILE);
    extractVertices();
    gl.glEndList();
    gl.glNewList(iEdgeDisplayListId,GL.GL_COMPILE);
    extractEdges();
    gl.glEndList();
  }
}","protected void buildPathwayDisplayList(){
  String[] strPathwayPaths=new String[3];
  strPathwayPaths[0]=""String_Node_Str"";
  strPathwayPaths[1]=""String_Node_Str"";
  strPathwayPaths[2]=""String_Node_Str"";
  String[] strPathwayTexturePaths=new String[3];
  strPathwayTexturePaths[0]=""String_Node_Str"";
  strPathwayTexturePaths[1]=""String_Node_Str"";
  strPathwayTexturePaths[2]=""String_Node_Str"";
  loadPathwayFromFile(strPathwayPaths[0]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[0]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  refBasicPathway=refCurrentPathway;
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[1]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[1]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[2]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[2]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  Iterator<Pathway> iterPathways=refHashPathwayToZLayerValue.keySet().iterator();
  Texture refPathwayTexture=null;
  System.out.println(""String_Node_Str"");
  while (iterPathways.hasNext()) {
    System.out.println(""String_Node_Str"");
    int iVerticesDiplayListId=gl.glGenLists(1);
    int iEdgeDisplayListId=gl.glGenLists(1);
    iArPathwayNodeDisplayListIDs.add(iVerticesDiplayListId);
    iArPathwayEdgeDisplayListIDs.add(iEdgeDisplayListId);
    refCurrentPathway=iterPathways.next();
    System.out.println(""String_Node_Str"" + refCurrentPathway.getTitle());
    fZLayerValue=refHashPathwayToZLayerValue.get(refCurrentPathway);
    refPathwayTexture=refHashPathwayToTexture.get(refCurrentPathway);
    fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
    fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
    fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
    System.out.println(""String_Node_Str"" + fScalingFactorX);
    System.out.println(""String_Node_Str"" + fScalingFactorY);
    System.out.println(""String_Node_Str"" + fPathwayTextureAspectRatio);
    buildEnzymeNodeDisplayList();
    buildHighlightedEnzymeNodeDisplayList();
    buildCompoundNodeDisplayList();
    buildHighlightedCompoundNodeDisplayList();
    gl.glNewList(iVerticesDiplayListId,GL.GL_COMPILE);
    extractVertices();
    gl.glEndList();
    gl.glNewList(iEdgeDisplayListId,GL.GL_COMPILE);
    extractEdges();
    gl.glEndList();
  }
}",0.9724734565473848
59210,"protected void buildHighlightedEnzymeNodeDisplayList(){
  iHighlightedEnzymeNodeDisplayListId=gl.glGenLists(1);
  fPathwayNodeWidth=refRenderStyle.getEnzymeNodeWidth() / 2.0f * fScalingFactorX;
  fPathwayNodeHeight=refRenderStyle.getEnzymeNodeHeight() / 2.0f * fScalingFactorY;
  gl.glNewList(iHighlightedEnzymeNodeDisplayListId,GL.GL_COMPILE);
  gl.glScaled(1.1f,1.1f,1.1f);
  fillNodeDisplayList();
  gl.glScaled(1.0f / 1.1f,1.0f / 1.1f,1.0f / 1.1f);
  gl.glEndList();
}","protected void buildHighlightedEnzymeNodeDisplayList(){
  iHighlightedEnzymeNodeDisplayListId=gl.glGenLists(1);
  fPathwayNodeWidth=refRenderStyle.getEnzymeNodeWidth() / 2.0f * fScalingFactorX;
  fPathwayNodeHeight=refRenderStyle.getEnzymeNodeHeight() / 2.0f * fScalingFactorY;
  gl.glNewList(iHighlightedEnzymeNodeDisplayListId,GL.GL_COMPILE);
  gl.glScaled(1.2f,1.2f,1.2f);
  fillNodeDisplayList();
  gl.glScaled(1.0f / 1.2f,1.0f / 1.2f,1.0f / 1.2f);
  gl.glEndList();
}",0.9872881355932204
59211,"protected void buildHighlightedCompoundNodeDisplayList(){
  iHighlightedCompoundNodeDisplayListId=gl.glGenLists(1);
  fPathwayNodeWidth=refRenderStyle.getCompoundNodeWidth() / 2.0f * fScalingFactorX;
  fPathwayNodeHeight=refRenderStyle.getCompoundNodeHeight() / 2.0f * fScalingFactorY;
  gl.glNewList(iHighlightedCompoundNodeDisplayListId,GL.GL_COMPILE);
  gl.glScaled(1.1f,1.1f,1.1f);
  fillNodeDisplayList();
  gl.glScaled(1.0f / 1.1f,1.0f / 1.1f,1.0f / 1.1f);
  gl.glEndList();
}","protected void buildHighlightedCompoundNodeDisplayList(){
  iHighlightedCompoundNodeDisplayListId=gl.glGenLists(1);
  fPathwayNodeWidth=refRenderStyle.getCompoundNodeWidth() / 2.0f * fScalingFactorX;
  fPathwayNodeHeight=refRenderStyle.getCompoundNodeHeight() / 2.0f * fScalingFactorY;
  gl.glNewList(iHighlightedCompoundNodeDisplayListId,GL.GL_COMPILE);
  gl.glScaled(1.2f,1.2f,1.2f);
  fillNodeDisplayList();
  gl.glScaled(1.0f / 1.2f,1.0f / 1.2f,1.0f / 1.2f);
  gl.glEndList();
}",0.9875518672199172
59212,"/** 
 * Constructor. Initializes the pathway render style. TODO: load pathway style from XML file.
 */
public PathwayRenderStyle(){
  enzymeNodeShape=NodeShape.RECTANGULAR;
  compoundNodeShape=NodeShape.ROUND;
  pathwayNodeShape=NodeShape.ROUNDRECTANGULAR;
  enzymeNodeColor=Color.BLUE;
  compoundNodeColor=Color.GREEN;
  pathwayNodeColor=Color.MAGENTA;
  highlightedNodeColor=Color.YELLOW;
  neighborhoodNodeColor_1=Color.RED;
  neighborhoodNodeColor_2=Color.ORANGE;
  neighborhoodNodeColor_3=Color.YELLOW;
  relationEdgeLineStyle=EdgeLineStyle.NORMAL;
  reactionEdgeLineStyle=EdgeLineStyle.NORMAL;
  maplinkEdgeLineStyle=EdgeLineStyle.DASHED;
  relationEdgeArrowHeadStyle=EdgeArrowHeadStyle.FILLED;
  reactionEdgeArrowHeadStyle=EdgeArrowHeadStyle.FILLED;
  mapEdgeArrowHeadStyle=EdgeArrowHeadStyle.EMPTY;
  relationEdgeColor=Color.GREEN;
  reactionEdgeColor=Color.BLUE;
  maplinkEdgeColor=Color.MAGENTA;
  fEnzymeNodeWidth=45;
  fEnzymeNodeHeight=17;
  fCompoundNodeWidth=8;
  fCompoundNodeHeight=8;
  fPathwayNodeWidth=70;
  fPathwayNodeHeight=27;
}","/** 
 * Constructor. Initializes the pathway render style. TODO: load pathway style from XML file.
 */
public PathwayRenderStyle(){
  enzymeNodeShape=NodeShape.RECTANGULAR;
  compoundNodeShape=NodeShape.ROUND;
  pathwayNodeShape=NodeShape.ROUNDRECTANGULAR;
  enzymeNodeColor=Color.BLUE;
  compoundNodeColor=Color.GREEN;
  pathwayNodeColor=Color.MAGENTA;
  highlightedNodeColor=Color.RED;
  neighborhoodNodeColor_1=Color.RED;
  neighborhoodNodeColor_2=Color.ORANGE;
  neighborhoodNodeColor_3=Color.YELLOW;
  relationEdgeLineStyle=EdgeLineStyle.NORMAL;
  reactionEdgeLineStyle=EdgeLineStyle.NORMAL;
  maplinkEdgeLineStyle=EdgeLineStyle.DASHED;
  relationEdgeArrowHeadStyle=EdgeArrowHeadStyle.FILLED;
  reactionEdgeArrowHeadStyle=EdgeArrowHeadStyle.FILLED;
  mapEdgeArrowHeadStyle=EdgeArrowHeadStyle.EMPTY;
  relationEdgeColor=Color.GREEN;
  reactionEdgeColor=Color.BLUE;
  maplinkEdgeColor=Color.MAGENTA;
  fEnzymeNodeWidth=45;
  fEnzymeNodeHeight=17;
  fCompoundNodeWidth=8;
  fCompoundNodeHeight=8;
  fPathwayNodeWidth=70;
  fPathwayNodeHeight=27;
}",0.9957163255592576
59213,"public void renderPart(GL gl){
  this.gl=gl;
  int iDisplayListNodeId=0;
  int iDisplayListEdgeId=0;
  for (int iDisplayListIndex=0; iDisplayListIndex < iArPathwayNodeDisplayListIDs.size(); iDisplayListIndex++) {
    iDisplayListNodeId=iArPathwayNodeDisplayListIDs.get(iDisplayListIndex);
    iDisplayListEdgeId=iArPathwayEdgeDisplayListIDs.get(iDisplayListIndex);
    if (bShowPathwayTexture == false) {
      gl.glCallList(iDisplayListEdgeId);
    }
    gl.glCallList(iDisplayListNodeId);
  }
  if (bShowPathwayTexture == true) {
    Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
    Texture refPathwayTexture=null;
    Pathway refTmpPathway=null;
    float fTmpZLayerValue=0.0f;
    while (iterPathways.hasNext()) {
      refTmpPathway=iterPathways.next();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fTmpZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
      gl.glEnable(GL.GL_TEXTURE_2D);
      refPathwayTexture.bind();
      gl.glTexEnvf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_ENV_MODE,GL.GL_REPLACE);
      gl.glColor3f(0.9f,0.9f,0.9f);
      TextureCoords texCoords=refPathwayTexture.getImageTexCoords();
      gl.glBegin(GL.GL_QUADS);
      gl.glTexCoord2f(0,texCoords.top());
      gl.glVertex3f(0.0f,0.0f,fTmpZLayerValue + 0.01f);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fPathwayTextureAspectRatio,0.0f,fTmpZLayerValue + 0.01f);
      gl.glTexCoord2f(texCoords.right(),0);
      gl.glVertex3f(fPathwayTextureAspectRatio,1f,fTmpZLayerValue + 0.01f);
      gl.glTexCoord2f(0,0);
      gl.glVertex3f(0.0f,1f,fTmpZLayerValue + 0.01f);
      gl.glEnd();
      gl.glDisable(GL.GL_TEXTURE_2D);
    }
  }
  Color nodeColor=refRenderStyle.getHighlightedNodeColor();
  if (!iArSelectionStorageVertexIDs.isEmpty()) {
    Pathway refTmpPathway=null;
    PathwayVertex refCurrentVertex=null;
    PathwayVertex refTmpVertex=null;
    IPathwayVertexRep refCurrentVertexRep=null;
    Iterator<PathwayVertex> iterSelectedVertices=iArSelectionStorageVertexIDs.iterator();
    Iterator<Integer> iterSelectedNeighborDistance=iArSelectionStorageNeighborDistance.iterator();
    Iterator<PathwayVertex> iterIdenticalVertices=null;
    Iterator<Pathway> iterDrawnPathways=null;
    while (iterSelectedVertices.hasNext()) {
      fZLayerValue=0.0f;
      refCurrentVertex=iterSelectedVertices.next();
      createVertex(refCurrentVertex.getVertexRepByIndex(iVertexRepIndex),true,nodeColor);
      iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
      while (iterDrawnPathways.hasNext()) {
        refTmpPathway=iterDrawnPathways.next();
        iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refCurrentVertex.getElementTitle()).iterator();
        while (iterIdenticalVertices.hasNext()) {
          refTmpVertex=iterIdenticalVertices.next();
          if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
            fZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
            refCurrentVertexRep=refTmpVertex.getVertexRepByIndex(iVertexRepIndex);
            if (refCurrentVertexRep != null) {
              createVertex(refCurrentVertexRep,true,nodeColor);
              if (!refTmpPathway.equals(refBasicPathway)) {
                connectVertices(refCurrentVertexRep,refCurrentVertex.getVertexRepByIndex(iVertexRepIndex));
              }
            }
          }
        }
      }
    }
  }
}","public void renderPart(GL gl){
  this.gl=gl;
  int iDisplayListNodeId=0;
  int iDisplayListEdgeId=0;
  for (int iDisplayListIndex=0; iDisplayListIndex < iArPathwayNodeDisplayListIDs.size(); iDisplayListIndex++) {
    iDisplayListNodeId=iArPathwayNodeDisplayListIDs.get(iDisplayListIndex);
    iDisplayListEdgeId=iArPathwayEdgeDisplayListIDs.get(iDisplayListIndex);
    if (bShowPathwayTexture == false) {
      gl.glCallList(iDisplayListEdgeId);
    }
    gl.glCallList(iDisplayListNodeId);
  }
  if (bShowPathwayTexture == true) {
    Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
    Texture refPathwayTexture=null;
    Pathway refTmpPathway=null;
    float fTmpZLayerValue=0.0f;
    while (iterPathways.hasNext()) {
      refTmpPathway=iterPathways.next();
      refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
      fTmpZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
      gl.glEnable(GL.GL_TEXTURE_2D);
      refPathwayTexture.bind();
      gl.glTexEnvf(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_ENV_MODE,GL.GL_REPLACE);
      gl.glColor3f(0.9f,0.9f,0.9f);
      TextureCoords texCoords=refPathwayTexture.getImageTexCoords();
      gl.glBegin(GL.GL_QUADS);
      gl.glTexCoord2f(0,texCoords.top());
      gl.glVertex3f(0.0f,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fPathwayTextureAspectRatio,0.0f,fTmpZLayerValue);
      gl.glTexCoord2f(texCoords.right(),0);
      gl.glVertex3f(fPathwayTextureAspectRatio,1f,fTmpZLayerValue);
      gl.glTexCoord2f(0,0);
      gl.glVertex3f(0.0f,1f,fTmpZLayerValue);
      gl.glEnd();
      gl.glDisable(GL.GL_TEXTURE_2D);
    }
  }
  Color nodeColor=refRenderStyle.getHighlightedNodeColor();
  if (!iArSelectionStorageVertexIDs.isEmpty()) {
    Pathway refTmpPathway=null;
    PathwayVertex refCurrentVertex=null;
    PathwayVertex refTmpVertex=null;
    IPathwayVertexRep refCurrentVertexRep=null;
    Texture refPathwayTexture=null;
    Iterator<PathwayVertex> iterSelectedVertices=iArSelectionStorageVertexIDs.iterator();
    Iterator<Integer> iterSelectedNeighborDistance=iArSelectionStorageNeighborDistance.iterator();
    Iterator<PathwayVertex> iterIdenticalVertices=null;
    Iterator<Pathway> iterDrawnPathways=null;
    while (iterSelectedVertices.hasNext()) {
      fZLayerValue=0.0f;
      refCurrentVertex=iterSelectedVertices.next();
      createVertex(refCurrentVertex.getVertexRepByIndex(iVertexRepIndex),true,nodeColor);
      iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
      while (iterDrawnPathways.hasNext()) {
        refTmpPathway=iterDrawnPathways.next();
        iterIdenticalVertices=refGeneralManager.getSingelton().getPathwayElementManager().getPathwayVertexListByName(refCurrentVertex.getElementTitle()).iterator();
        while (iterIdenticalVertices.hasNext()) {
          refTmpVertex=iterIdenticalVertices.next();
          if (refTmpPathway.isVertexInPathway(refTmpVertex) == true) {
            fZLayerValue=refHashPathwayToZLayerValue.get(refTmpPathway);
            refCurrentVertexRep=refTmpVertex.getVertexRepByIndex(iVertexRepIndex);
            if (refCurrentVertexRep != null) {
              refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
              fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
              fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
              fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
              createVertex(refCurrentVertexRep,true,nodeColor);
              if (!refTmpPathway.equals(refBasicPathway)) {
                connectVertices(refCurrentVertexRep,refCurrentVertex.getVertexRepByIndex(iVertexRepIndex));
              }
            }
          }
        }
      }
    }
  }
}",0.9391491653204092
59214,"protected void buildContainedPathwayNodeDisplayList(){
  iContainedPathwayNodeDisplayListId=gl.glGenLists(1);
  fPathwayNodeWidth=refRenderStyle.getPathwayNodeWidth() / 2.0f * fScalingFactorX;
  fPathwayNodeHeight=refRenderStyle.getPathwayNodeHeight() / 2.0f * fScalingFactorY;
  gl.glNewList(iContainedPathwayNodeDisplayListId,GL.GL_COMPILE);
  fillNodeDisplayList();
  gl.glEndList();
}","protected void buildContainedPathwayNodeDisplayList(){
  iContainedPathwayNodeDisplayListId=gl.glGenLists(1);
  fPathwayNodeWidth=refRenderStyle.getPathwayNodeWidth() / 2.0f * fScalingFactorX;
  fPathwayNodeHeight=refRenderStyle.getPathwayNodeHeight() / 2.0f * fScalingFactorY;
  gl.glNewList(iContainedPathwayNodeDisplayListId,GL.GL_COMPILE);
  fillHighlightedNodeDisplayList();
  gl.glEndList();
}",0.9860228716645488
59215,"protected void fillNodeDisplayList(){
  gl.glBegin(GL.GL_QUADS);
  gl.glTranslatef(0,0,fZLayerValue);
  gl.glNormal3f(0.0f,0.0f,1.0f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,0.02f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,0.02f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,0.02f);
  gl.glNormal3f(0.0f,0.0f,-1.0f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,-0.02f);
  gl.glNormal3f(0.0f,1.0f,0.0f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,0.02f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,0.02f);
  gl.glNormal3f(0.0f,-1.0f,0.0f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,-0.02f);
  gl.glNormal3f(1.0f,0.0f,0.0f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,0.02f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,0.02f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,-0.02f);
  gl.glNormal3f(-1.0f,0.0f,0.0f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,-0.02f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,0.02f);
  gl.glTranslatef(0,0,-fZLayerValue);
  gl.glEnd();
}","protected void fillNodeDisplayList(){
  gl.glBegin(GL.GL_QUADS);
  gl.glTranslatef(0,0,fZLayerValue);
  gl.glNormal3f(0.0f,0.0f,1.0f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,0.015f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,0.015f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,0.015f);
  gl.glNormal3f(0.0f,0.0f,-1.0f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,-0.015f);
  gl.glNormal3f(0.0f,1.0f,0.0f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,0.015f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,0.015f);
  gl.glNormal3f(0.0f,-1.0f,0.0f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,-0.015f);
  gl.glNormal3f(1.0f,0.0f,0.0f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(fPathwayNodeWidth,fPathwayNodeHeight,0.015f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,0.015f);
  gl.glVertex3f(fPathwayNodeWidth,-fPathwayNodeHeight,-0.015f);
  gl.glNormal3f(-1.0f,0.0f,0.0f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,-0.015f);
  gl.glVertex3f(-fPathwayNodeWidth,-fPathwayNodeHeight,0.015f);
  gl.glTranslatef(0,0,-fZLayerValue);
  gl.glEnd();
}",0.3875802997858672
59216,"public void createVertex(IPathwayVertexRep vertexRep,boolean bHightlighVertex,Color nodeColor){
  fCanvasXPos=viewingFrame[X][MIN] + (vertexRep.getXPosition() * fScalingFactorX);
  fCanvasYPos=viewingFrame[Y][MIN] + (vertexRep.getYPosition() * fScalingFactorY);
  String sShapeType=vertexRep.getShapeType();
  gl.glTranslatef(fCanvasXPos,fCanvasYPos,fZLayerValue);
  if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true)     gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
 else     gl.glColor4f(1.0f,0.0f,1.0f,1.0f);
    gl.glCallList(iContainedPathwayNodeDisplayListId);
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true)     gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
 else     gl.glColor4f(0.0f,1.0f,0.0f,1.0f);
    gl.glCallList(iCompoundNodeDisplayListId);
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true)     gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
 else     gl.glColor4f(0.53f,0.81f,1.0f,1.0f);
    gl.glCallList(iEnzymeNodeDisplayListId);
  }
  gl.glTranslatef(-fCanvasXPos,-fCanvasYPos,-fZLayerValue);
}","public void createVertex(IPathwayVertexRep vertexRep,boolean bHightlighVertex,Color nodeColor){
  fCanvasXPos=viewingFrame[X][MIN] + (vertexRep.getXPosition() * fScalingFactorX);
  fCanvasYPos=viewingFrame[Y][MIN] + (vertexRep.getYPosition() * fScalingFactorY);
  String sShapeType=vertexRep.getShapeType();
  gl.glTranslatef(fCanvasXPos,fCanvasYPos,fZLayerValue);
  if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
    }
 else {
      gl.glColor4f(1.0f,0.0f,1.0f,1.0f);
    }
    gl.glCallList(iContainedPathwayNodeDisplayListId);
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
      gl.glCallList(iHighlightedCompoundNodeDisplayListId);
    }
 else {
      gl.glColor4f(0.0f,1.0f,0.0f,1.0f);
      gl.glCallList(iCompoundNodeDisplayListId);
    }
    gl.glCallList(iCompoundNodeDisplayListId);
  }
 else   if (sShapeType.equals(""String_Node_Str"")) {
    if (bHightlighVertex == true) {
      gl.glColor4f(nodeColor.getRed(),nodeColor.getGreen(),nodeColor.getBlue(),1.0f);
      gl.glCallList(iHighlightedEnzymeNodeDisplayListId);
    }
 else {
      gl.glColor4f(0.53f,0.81f,1.0f,1.0f);
      gl.glCallList(iEnzymeNodeDisplayListId);
    }
  }
  gl.glTranslatef(-fCanvasXPos,-fCanvasYPos,-fZLayerValue);
}",0.9056322267810518
59217,"public void init(GLAutoDrawable canvas){
  bInitGLcanvawsWasCalled=true;
  this.gl=canvas.getGL();
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glLineWidth(1.0f);
  float[] fMatSpecular={1.0f,1.0f,1.0f,1.0f};
  float[] fMatShininess={25.0f};
  float[] fLightPosition={-1.0f,0.0f,0.0f,1.0f};
  float[] fWhiteLight={1.0f,1.0f,1.0f,1.0f};
  float[] fModelAmbient={0.2f,0.2f,0.2f,1.0f};
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
  gl.glLightfv(GL.GL_LIGHT0,GL.GL_POSITION,fLightPosition,0);
  gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT,fModelAmbient,0);
  gl.glEnable(GL.GL_LIGHTING);
  gl.glEnable(GL.GL_LIGHT0);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  buildPathwayDisplayList();
}","public void init(GLAutoDrawable canvas){
  setInitGLDone();
  this.gl=canvas.getGL();
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glLineWidth(1.0f);
  float[] fMatSpecular={1.0f,1.0f,1.0f,1.0f};
  float[] fMatShininess={25.0f};
  float[] fLightPosition={-1.0f,0.0f,0.0f,1.0f};
  float[] fWhiteLight={1.0f,1.0f,1.0f,1.0f};
  float[] fModelAmbient={0.2f,0.2f,0.2f,1.0f};
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
  gl.glLightfv(GL.GL_LIGHT0,GL.GL_POSITION,fLightPosition,0);
  gl.glLightModelfv(GL.GL_LIGHT_MODEL_AMBIENT,fModelAmbient,0);
  gl.glEnable(GL.GL_LIGHTING);
  gl.glEnable(GL.GL_LIGHT0);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  buildPathwayDisplayList();
}",0.975747320924986
59218,"protected void buildPathwayDisplayList(){
  String[] strPathwayPaths=new String[3];
  strPathwayPaths[0]=""String_Node_Str"";
  strPathwayPaths[1]=""String_Node_Str"";
  strPathwayPaths[2]=""String_Node_Str"";
  String[] strPathwayTexturePaths=new String[3];
  strPathwayTexturePaths[0]=""String_Node_Str"";
  strPathwayTexturePaths[1]=""String_Node_Str"";
  strPathwayTexturePaths[2]=""String_Node_Str"";
  loadBackgroundOverlayImage(strPathwayTexturePaths[0]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  refBasicPathway=refCurrentPathway;
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[1]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[1]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[2]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[2]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
  Texture refPathwayTexture=null;
  while (iterPathways.hasNext()) {
    System.out.println(""String_Node_Str"");
    int iVerticesDiplayListId=gl.glGenLists(1);
    int iEdgeDisplayListId=gl.glGenLists(1);
    iArPathwayNodeDisplayListIDs.add(iVerticesDiplayListId);
    iArPathwayEdgeDisplayListIDs.add(iEdgeDisplayListId);
    refCurrentPathway=iterPathways.next();
    System.out.println(""String_Node_Str"" + refCurrentPathway.getTitle());
    fZLayerValue=refHashPathwayToZLayerValue.get(refCurrentPathway);
    refPathwayTexture=refHashPathwayToTexture.get(refCurrentPathway);
    fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
    fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
    fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
    System.out.println(""String_Node_Str"" + fScalingFactorX);
    System.out.println(""String_Node_Str"" + fScalingFactorY);
    System.out.println(""String_Node_Str"" + fPathwayTextureAspectRatio);
    buildEnzymeNodeDisplayList();
    buildContainedPathwayNodeDisplayList();
    buildCompoundNodeDisplayList();
    gl.glNewList(iVerticesDiplayListId,GL.GL_COMPILE);
    extractVertices();
    gl.glEndList();
    gl.glNewList(iEdgeDisplayListId,GL.GL_COMPILE);
    extractEdges();
    gl.glEndList();
  }
}","protected void buildPathwayDisplayList(){
  String[] strPathwayPaths=new String[3];
  strPathwayPaths[0]=""String_Node_Str"";
  strPathwayPaths[1]=""String_Node_Str"";
  strPathwayPaths[2]=""String_Node_Str"";
  String[] strPathwayTexturePaths=new String[3];
  strPathwayTexturePaths[0]=""String_Node_Str"";
  strPathwayTexturePaths[1]=""String_Node_Str"";
  strPathwayTexturePaths[2]=""String_Node_Str"";
  loadPathwayFromFile(strPathwayPaths[0]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[0]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  refBasicPathway=refCurrentPathway;
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[1]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[1]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  fZLayerValue+=1.0f;
  loadPathwayFromFile(strPathwayPaths[2]);
  loadBackgroundOverlayImage(strPathwayTexturePaths[2]);
  refHashPathwayToZLayerValue.put(refCurrentPathway,fZLayerValue);
  Iterator<Pathway> iterPathways=refGeneralManager.getSingelton().getPathwayManager().getPathwayIterator();
  Texture refPathwayTexture=null;
  System.out.println(""String_Node_Str"");
  while (iterPathways.hasNext()) {
    System.out.println(""String_Node_Str"");
    int iVerticesDiplayListId=gl.glGenLists(1);
    int iEdgeDisplayListId=gl.glGenLists(1);
    iArPathwayNodeDisplayListIDs.add(iVerticesDiplayListId);
    iArPathwayEdgeDisplayListIDs.add(iEdgeDisplayListId);
    refCurrentPathway=iterPathways.next();
    System.out.println(""String_Node_Str"" + refCurrentPathway.getTitle());
    fZLayerValue=refHashPathwayToZLayerValue.get(refCurrentPathway);
    refPathwayTexture=refHashPathwayToTexture.get(refCurrentPathway);
    fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
    fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
    fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
    System.out.println(""String_Node_Str"" + fScalingFactorX);
    System.out.println(""String_Node_Str"" + fScalingFactorY);
    System.out.println(""String_Node_Str"" + fPathwayTextureAspectRatio);
    buildEnzymeNodeDisplayList();
    buildHighlightedEnzymeNodeDisplayList();
    buildCompoundNodeDisplayList();
    buildHighlightedCompoundNodeDisplayList();
    buildContainedPathwayNodeDisplayList();
    gl.glNewList(iVerticesDiplayListId,GL.GL_COMPILE);
    extractVertices();
    gl.glEndList();
    gl.glNewList(iEdgeDisplayListId,GL.GL_COMPILE);
    extractEdges();
    gl.glEndList();
  }
}",0.9433734939759036
59219,"protected void connectVertices(IPathwayVertexRep refVertexRep1,IPathwayVertexRep refVertexRep2){
  float fZLayerValue1=0.0f;
  float fZLayerValue2=0.0f;
  Pathway refTmpPathway=null;
  Iterator<Pathway> iterDrawnPathways=null;
  iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
  while (iterDrawnPathways.hasNext()) {
    refTmpPathway=iterDrawnPathways.next();
    if (refTmpPathway.isVertexInPathway(refVertexRep1.getVertex()) == true) {
      fZLayerValue1=refHashPathwayToZLayerValue.get(refTmpPathway);
    }
    if (refTmpPathway.isVertexInPathway(refVertexRep2.getVertex()) == true) {
      fZLayerValue2=refHashPathwayToZLayerValue.get(refTmpPathway);
    }
  }
  float fCanvasXPos1=viewingFrame[X][MIN] + refVertexRep1.getXPosition() * fScalingFactorX;
  float fCanvasYPos1=viewingFrame[Y][MIN] + refVertexRep1.getYPosition() * fScalingFactorY;
  float fCanvasXPos2=viewingFrame[X][MIN] + refVertexRep2.getXPosition() * fScalingFactorX;
  float fCanvasYPos2=viewingFrame[Y][MIN] + refVertexRep2.getYPosition() * fScalingFactorY;
  gl.glColor4f(1.0f,1.0f,0.0f,1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(fCanvasXPos1,fCanvasYPos1,fZLayerValue1);
  gl.glVertex3f(fCanvasXPos2,fCanvasYPos2,fZLayerValue2);
  gl.glEnd();
}","protected void connectVertices(IPathwayVertexRep refVertexRep1,IPathwayVertexRep refVertexRep2){
  float fZLayerValue1=0.0f;
  float fZLayerValue2=0.0f;
  Pathway refTmpPathway=null;
  Iterator<Pathway> iterDrawnPathways=null;
  Texture refPathwayTexture=null;
  float fCanvasXPos1=0.0f;
  float fCanvasYPos1=0.0f;
  float fCanvasXPos2=0.0f;
  float fCanvasYPos2=0.0f;
  iterDrawnPathways=refHashPathwayToZLayerValue.keySet().iterator();
  while (iterDrawnPathways.hasNext()) {
    refTmpPathway=iterDrawnPathways.next();
    refPathwayTexture=refHashPathwayToTexture.get(refTmpPathway);
    fPathwayTextureAspectRatio=(float)refPathwayTexture.getImageWidth() / (float)refPathwayTexture.getImageHeight();
    fScalingFactorX=fPathwayTextureAspectRatio / (float)refPathwayTexture.getImageWidth();
    fScalingFactorY=1.0f / (float)refPathwayTexture.getImageHeight();
    if (refTmpPathway.isVertexInPathway(refVertexRep1.getVertex()) == true) {
      fZLayerValue1=refHashPathwayToZLayerValue.get(refTmpPathway);
      fCanvasXPos1=viewingFrame[X][MIN] + refVertexRep1.getXPosition() * fScalingFactorX;
      fCanvasYPos1=viewingFrame[Y][MIN] + refVertexRep1.getYPosition() * fScalingFactorY;
    }
    if (refTmpPathway.isVertexInPathway(refVertexRep2.getVertex()) == true) {
      fZLayerValue2=refHashPathwayToZLayerValue.get(refTmpPathway);
      fCanvasXPos2=viewingFrame[X][MIN] + refVertexRep2.getXPosition() * fScalingFactorX;
      fCanvasYPos2=viewingFrame[Y][MIN] + refVertexRep2.getYPosition() * fScalingFactorY;
    }
  }
  gl.glColor4f(1.0f,1.0f,0.0f,1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(fCanvasXPos1,fCanvasYPos1,fZLayerValue1);
  gl.glVertex3f(fCanvasXPos2,fCanvasYPos2,fZLayerValue2);
  gl.glEnd();
}",0.7187919463087248
59220,"public boolean registerGLCanvasUser(final IGLCanvasUser canvas,final int iCanvasId){
  if (hashGLCanvasUser.containsKey(iCanvasId)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"");
    return false;
  }
  if (hashGLCanvasUser.containsValue(canvas)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"");
    return false;
  }
  hashGLCanvasUser.put(iCanvasId,canvas);
  hashGLCanvasUser_revert.put(canvas,iCanvasId);
synchronized (getClass()) {
    hashGLCanvasId_2_vecGLEventListener.put(iCanvasId,new Vector<GLEventListener>());
  }
  return true;
}","public boolean registerGLCanvasUser(final IGLCanvasUser canvas,final int iCanvasId){
  if (hashGLCanvasUser.containsKey(iCanvasId)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"",LoggerType.MINOR_ERROR);
    return false;
  }
  if (hashGLCanvasUser.containsValue(canvas)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"",LoggerType.MINOR_ERROR);
    return false;
  }
  hashGLCanvasUser.put(iCanvasId,canvas);
  hashGLCanvasUser_revert.put(canvas,iCanvasId);
synchronized (getClass()) {
    hashGLCanvasId_2_vecGLEventListener.put(iCanvasId,new Vector<GLEventListener>());
  }
  return true;
}",0.9654654654654654
59221,"public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  System.out.println(""String_Node_Str"" + gl.getClass().getName());
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.0f);
  gl.glClearDepth(1.0f);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  drawable.addMouseListener(this.refMouseHandler);
  drawable.addMouseMotionListener(this.refMouseHandler);
  if (refGLCanvasDirector != null) {
    refGLCanvasDirector.initGLCanvasUser(drawable);
  }
}","public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  System.out.println(""String_Node_Str"" + gl.getClass().getName() + ""String_Node_Str""+ this.getClass().toString());
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.0f);
  gl.glClearDepth(1.0f);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  drawable.addMouseListener(this.refMouseHandler);
  drawable.addMouseMotionListener(this.refMouseHandler);
  if (refGLCanvasDirector != null) {
    refGLCanvasDirector.initGLCanvasUser(drawable);
  }
}",0.9590443686006824
59222,"/** 
 * @param setGeneralManager
 */
protected AGLCanvasUser(final IGeneralManager setGeneralManager,int iViewId,int iParentContainerId,String sLabel){
  super(iViewId,setGeneralManager);
  openGLCanvasDirector=setGeneralManager.getSingelton().getViewGLCanvasManager().getGLCanvasDirector(iParentContainerId);
  this.canvas=openGLCanvasDirector.getGLCanvas();
}","/** 
 * @param setGeneralManager
 */
protected AGLCanvasUser(final IGeneralManager setGeneralManager,int iViewId,int iParentContainerId,String sLabel){
}",0.5953307392996109
59223,"protected final void setInitGLDone(){
  bInitGLcanvawsWasCalled=true;
}","protected final void setInitGLDone(){
  if (bInitGLcanvawsWasCalled) {
    System.err.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
 else {
    System.out.println(""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ this.getId());
  }
  bInitGLcanvawsWasCalled=true;
}",0.3438256658595641
59224,"public Composite getSWTContainer(){
  return refSWTContainer;
}","/** 
 * Work around, fix as soon as possible! FIXME: Work around, fix as soon as possible
 * @deprecated work around, fix as soon as possible
 * @return
 */
public Composite getSWTContainer(){
  return refSWTContainer;
}",0.4452296819787986
59225,"public void initGLCanvasUser(GLAutoDrawable drawable){
  if (abEnableRendering.get()) {
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      IGLCanvasUser currentGLCanvasUser=iter.next();
      currentGLCanvasUser.init(drawable);
    }
  }
}","public void initGLCanvasUser(GLAutoDrawable drawable){
  if (abEnableRendering.get()) {
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (!glCanvas.isInitGLDone()) {
        glCanvas.init(drawable);
      }
    }
  }
}",0.8282828282828283
59226,"public boolean registerGLCanvasUser(final IGLCanvasUser canvas,final int iCanvasId){
  if (hashGLCanvasUser.containsKey(iCanvasId)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"",LoggerType.MINOR_ERROR);
    return false;
  }
  if (hashGLCanvasUser.containsValue(canvas)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"",LoggerType.MINOR_ERROR);
    return false;
  }
  hashGLCanvasUser.put(iCanvasId,canvas);
  hashGLCanvasUser_revert.put(canvas,iCanvasId);
synchronized (getClass()) {
    hashGLCanvasId_2_vecGLEventListener.put(iCanvasId,new Vector<GLEventListener>());
  }
  return true;
}","public boolean registerGLCanvasUser(final IGLCanvasUser canvas,final int iCanvasId){
  if (hashGLCanvasUser.containsKey(iCanvasId)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"",LoggerType.MINOR_ERROR);
    return false;
  }
  if (hashGLCanvasUser.containsValue(canvas)) {
    refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str"",LoggerType.MINOR_ERROR);
    return false;
  }
  hashGLCanvasUser.put(iCanvasId,canvas);
  hashGLCanvasUser_revert.put(canvas,iCanvasId);
synchronized (getClass()) {
    hashGLCanvasId_2_vecGLEventListener.put(iCanvasId,new Vector<GLEventListener>());
  }
  refGeneralManager.getSingelton().logMsg(""String_Node_Str"" + iCanvasId + ""String_Node_Str""+ this.iUniqueId_current+ ""String_Node_Str""+ this.getClass().toString(),LoggerType.FULL);
  return true;
}",0.8723540731237973
59227,"public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  System.out.println(""String_Node_Str"" + gl.getClass().getName() + ""String_Node_Str""+ this.getClass().toString());
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.0f);
  gl.glClearDepth(1.0f);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  drawable.addMouseListener(this.refMouseHandler);
  drawable.addMouseMotionListener(this.refMouseHandler);
  if (refGLCanvasDirector != null) {
    refGLCanvasDirector.initGLCanvasUser(drawable);
  }
}","public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  System.out.println(""String_Node_Str"" + gl.getClass().getName() + ""String_Node_Str""+ this.getClass().toString());
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.0f);
  gl.glClearDepth(1.0f);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  drawable.addMouseListener(this.refMouseHandler);
  drawable.addMouseMotionListener(this.refMouseHandler);
  if (refGLCanvasDirector != null) {
    refGLCanvasDirector.initGLCanvasUser(drawable);
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}",0.9568627450980391
59228,"public void reshape(GLAutoDrawable drawable,final int x,final int y,final int width,final int height){
  GL gl=canvas.getGL();
  System.err.println(""String_Node_Str"");
  this.renderPart(gl);
}","public void reshape(GLAutoDrawable drawable,final int x,final int y,final int width,final int height){
  GL gl=canvas.getGL();
  System.out.println(""String_Node_Str"");
  this.renderPart(gl);
}",0.984375
59229,"public void reshapeGLCanvasUser(GLAutoDrawable drawable,final int x,final int y,final int width,final int height){
  if (abEnableRendering.get()) {
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (glCanvas.isInitGLDone()) {
        glCanvas.render(drawable);
      }
    }
  }
}","public void reshapeGLCanvasUser(GLAutoDrawable drawable,final int x,final int y,final int width,final int height){
  if (abEnableRendering.get()) {
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (glCanvas.isInitGLDone()) {
        glCanvas.reshape(drawable,x,y,width,height);
      }
    }
  }
}",0.9421052631578948
59230,"public void initGLCanvasUser(GLAutoDrawable drawable){
  if (abEnableRendering.get()) {
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (!glCanvas.isInitGLDone()) {
        glCanvas.init(drawable);
      }
    }
  }
}","public void initGLCanvasUser(GLAutoDrawable drawable){
  if (abEnableRendering.get()) {
    System.out.println(""String_Node_Str"" + this.getClass().toString());
    Iterator<IGLCanvasUser> iter=vecGLCanvasUser.iterator();
    while (iter.hasNext()) {
      IGLCanvasUser glCanvas=iter.next();
      if (!glCanvas.isInitGLDone()) {
        glCanvas.init(drawable);
      }
    }
  }
}",0.8959537572254336
59231,"public void mousePressed(final MouseEvent event){
  DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
  if (clickedCell == null) {
    for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
      refUndoManager.undo(refGraphLayoutCache);
    }
    bNeighbourhoodShown=false;
    return;
  }
  if (clickedCell.getUserObject() == null) {
    super.mousePressed(event);
    return;
  }
  final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
  if (sUrl == ""String_Node_Str"") {
    super.mousePressed(event);
    return;
  }
  String sSearchPattern=""String_Node_Str"";
  String sPathwayFilePath;
  if (sUrl.contains((CharSequence)sSearchPattern)) {
    int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
    sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
    sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"" + sPathwayFilePath);
    int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
    System.out.println(""String_Node_Str"" + iPathwayIdIndex);
    iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
    refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
    loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
    bNeighbourhoodShown=false;
  }
 else {
    final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
    refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
      public void run(){
        ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
      }
    }
);
    if (bNeighbourhoodShown == true) {
      for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
        refUndoManager.undo(refGraphLayoutCache);
      }
      iNeighbourhoodUndoCount=0;
      bNeighbourhoodShown=false;
    }
    showNeighbourhood(clickedCell,iNeighbourhoodDistance);
    bNeighbourhoodShown=true;
  }
  super.mousePressed(event);
}","public void mousePressed(final MouseEvent event){
  DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
  if (clickedCell == null) {
    for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
      refUndoManager.undo(refGraphLayoutCache);
    }
    iNeighbourhoodUndoCount=0;
    bNeighbourhoodShown=false;
    return;
  }
  if (clickedCell.getUserObject() == null) {
    super.mousePressed(event);
    return;
  }
  if (!clickedCell.getUserObject().getClass().getSimpleName().equals(""String_Node_Str"")) {
    super.mousePressed(event);
    return;
  }
  final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
  if (sUrl == ""String_Node_Str"") {
    super.mousePressed(event);
    return;
  }
  String sSearchPattern=""String_Node_Str"";
  String sPathwayFilePath;
  if (sUrl.contains((CharSequence)sSearchPattern)) {
    int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
    sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
    sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"" + sPathwayFilePath);
    int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
    System.out.println(""String_Node_Str"" + iPathwayIdIndex);
    iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
    refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
    loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
    bNeighbourhoodShown=false;
  }
 else {
    final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
    refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
      public void run(){
        ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
      }
    }
);
    if (bNeighbourhoodShown == true) {
      for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
        refUndoManager.undo(refGraphLayoutCache);
      }
      iNeighbourhoodUndoCount=0;
      bNeighbourhoodShown=false;
    }
    showNeighbourhood(clickedCell,iNeighbourhoodDistance);
    bNeighbourhoodShown=true;
  }
  super.mousePressed(event);
}",0.9618899041675952
59232,"public void initView(){
class PathwayMarqueeHandler extends BasicMarqueeHandler {
    public boolean isForceMarqueeEvent(    MouseEvent event){
      if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 1)       return true;
 else       return super.isForceMarqueeEvent(event);
    }
    public void mousePressed(    final MouseEvent event){
      DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
      if (clickedCell == null) {
        for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
          refUndoManager.undo(refGraphLayoutCache);
        }
        bNeighbourhoodShown=false;
        return;
      }
      if (clickedCell.getUserObject() == null) {
        super.mousePressed(event);
        return;
      }
      final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
      if (sUrl == ""String_Node_Str"") {
        super.mousePressed(event);
        return;
      }
      String sSearchPattern=""String_Node_Str"";
      String sPathwayFilePath;
      if (sUrl.contains((CharSequence)sSearchPattern)) {
        int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
        sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
        sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        System.out.println(""String_Node_Str"" + sPathwayFilePath);
        int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
        System.out.println(""String_Node_Str"" + iPathwayIdIndex);
        iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
        refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
        loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
        bNeighbourhoodShown=false;
      }
 else {
        final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
        refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
          public void run(){
            ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
          }
        }
);
        if (bNeighbourhoodShown == true) {
          for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
            refUndoManager.undo(refGraphLayoutCache);
          }
          iNeighbourhoodUndoCount=0;
          bNeighbourhoodShown=false;
        }
        showNeighbourhood(clickedCell,iNeighbourhoodDistance);
        bNeighbourhoodShown=true;
      }
      super.mousePressed(event);
    }
  }
  refGraphModel=new DefaultGraphModel();
  refGraphLayoutCache=new GraphLayoutCache(refGraphModel,new GPCellViewFactory(),true);
  refPathwayGraph=new JGraph(refGraphModel,refGraphLayoutCache);
  refPathwayGraph.setCloneable(true);
  refPathwayGraph.setMarqueeHandler(new PathwayMarqueeHandler());
  refUndoManager=new GraphUndoManager();
  refGraphModel.addUndoableEditListener(refUndoManager);
}","public void initView(){
class PathwayMarqueeHandler extends BasicMarqueeHandler {
    public boolean isForceMarqueeEvent(    MouseEvent event){
      if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 1)       return true;
 else       return super.isForceMarqueeEvent(event);
    }
    public void mousePressed(    final MouseEvent event){
      DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
      if (clickedCell == null) {
        for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
          refUndoManager.undo(refGraphLayoutCache);
        }
        iNeighbourhoodUndoCount=0;
        bNeighbourhoodShown=false;
        return;
      }
      if (clickedCell.getUserObject() == null) {
        super.mousePressed(event);
        return;
      }
      if (!clickedCell.getUserObject().getClass().getSimpleName().equals(""String_Node_Str"")) {
        super.mousePressed(event);
        return;
      }
      final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
      if (sUrl == ""String_Node_Str"") {
        super.mousePressed(event);
        return;
      }
      String sSearchPattern=""String_Node_Str"";
      String sPathwayFilePath;
      if (sUrl.contains((CharSequence)sSearchPattern)) {
        int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
        sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
        sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        System.out.println(""String_Node_Str"" + sPathwayFilePath);
        int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
        System.out.println(""String_Node_Str"" + iPathwayIdIndex);
        iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
        refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
        loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
        bNeighbourhoodShown=false;
      }
 else {
        final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
        refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
          public void run(){
            ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
          }
        }
);
        if (bNeighbourhoodShown == true) {
          for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
            refUndoManager.undo(refGraphLayoutCache);
          }
          iNeighbourhoodUndoCount=0;
          bNeighbourhoodShown=false;
        }
        showNeighbourhood(clickedCell,iNeighbourhoodDistance);
        bNeighbourhoodShown=true;
      }
      super.mousePressed(event);
    }
  }
  refGraphModel=new DefaultGraphModel();
  refGraphLayoutCache=new GraphLayoutCache(refGraphModel,new GPCellViewFactory(),true);
  refPathwayGraph=new JGraph(refGraphModel,refGraphLayoutCache);
  refPathwayGraph.setCloneable(true);
  refPathwayGraph.setMarqueeHandler(new PathwayMarqueeHandler());
  refUndoManager=new GraphUndoManager();
  refGraphModel.addUndoableEditListener(refUndoManager);
}",0.9701185770750989
59233,"public void loadPathwayFromFile(String sFilePath){
  refGraphModel=new DefaultGraphModel();
  refPathwayGraph.setModel(refGraphModel);
  refGraphLayoutCache.setModel(refGraphModel);
  refGraphModel.addUndoableEditListener(refUndoManager);
  refGeneralManager.getSingelton().getXmlParserManager().parseXmlFileByName(sFilePath);
  drawView();
}","public void loadPathwayFromFile(String sFilePath){
  refGraphModel=new DefaultGraphModel();
  refPathwayGraph.setModel(refGraphModel);
  refGraphLayoutCache.setModel(refGraphModel);
  refGraphModel.addUndoableEditListener(refUndoManager);
  vecVertices.removeAllElements();
  vecRelationEdges.removeAllElements();
  vecReactionEdges.removeAllElements();
  iNeighbourhoodUndoCount=0;
  bNeighbourhoodShown=false;
  refGeneralManager.getSingelton().getXmlParserManager().parseXmlFileByName(sFilePath);
  drawView();
  refGraphLayoutCache.reload();
}",0.7694038245219348
59234,"public void drawView(){
  HashMap<Integer,Pathway> pathwayLUT=((IPathwayManager)refGeneralManager.getSingelton().getPathwayManager()).getPathwayLUT();
  if (iPathwayId == 0) {
    Iterator<Pathway> iter=pathwayLUT.values().iterator();
    refCurrentPathway=iter.next();
  }
 else {
    refCurrentPathway=pathwayLUT.get(iPathwayId);
  }
  Vector<PathwayVertex> vertexList;
  Iterator<PathwayVertex> vertexIterator;
  PathwayVertex vertex;
  Vector<IPathwayVertexRep> vertexReps;
  Iterator<IPathwayVertexRep> vertexRepIterator;
  PathwayVertexRep vertexRep;
  Vector<APathwayEdge> edgeList;
  Iterator<APathwayEdge> edgeIterator;
  APathwayEdge edge;
  PathwayRelationEdge relationEdge;
  PathwayReactionEdge reactionEdge;
  vertexList=refCurrentPathway.getVertexList();
  vertexIterator=vertexList.iterator();
  while (vertexIterator.hasNext()) {
    vertex=vertexIterator.next();
    vertexReps=vertex.getVertexReps();
    vertexRepIterator=vertexReps.iterator();
    while (vertexRepIterator.hasNext()) {
      vertexRep=(PathwayVertexRep)vertexRepIterator.next();
      createVertex(vertex,vertexRep.getName(),vertexRep.getHeight(),vertexRep.getWidth(),vertexRep.getXPosition(),vertexRep.getYPosition(),vertexRep.getShapeType());
    }
  }
  edgeList=refCurrentPathway.getEdgeList();
  edgeIterator=edgeList.iterator();
  while (edgeIterator.hasNext()) {
    edge=edgeIterator.next();
    if (bShowRelationEdges == false)     break;
    if (edge.getClass().getName().equals(""String_Node_Str"")) {
      relationEdge=(PathwayRelationEdge)edge;
      if (relationEdge.getCompoundId() == -1) {
        createEdge(relationEdge.getElementId1(),relationEdge.getElementId2(),false,relationEdge);
      }
 else {
        createEdge(relationEdge.getElementId1(),relationEdge.getCompoundId(),false,relationEdge);
        if (relationEdge.getEdgeRelationType() == EdgeRelationType.maplink) {
          createEdge(relationEdge.getElementId2(),relationEdge.getCompoundId(),true,relationEdge);
        }
 else {
          createEdge(relationEdge.getCompoundId(),relationEdge.getElementId2(),false,relationEdge);
        }
      }
    }
  }
  vertexIterator=vertexList.iterator();
  while (vertexIterator.hasNext()) {
    vertex=vertexIterator.next();
    vertexReps=vertex.getVertexReps();
    vertexRepIterator=vertexReps.iterator();
    if (vertex.getVertexType() == PathwayVertexType.enzyme) {
      IPathwayElementManager pathwayElementManager=((IPathwayElementManager)refGeneralManager.getSingelton().getPathwayElementManager());
      System.out.println(""String_Node_Str"" + vertex.getVertexReactionName());
      edge=pathwayElementManager.getEdgeLUT().get(pathwayElementManager.getReactionName2EdgeIdLUT().get(vertex.getVertexReactionName()));
      if (edge != null) {
        if (bShowReactionEdges == false)         break;
        if (edge.getClass().getName().equals(""String_Node_Str"")) {
          reactionEdge=(PathwayReactionEdge)edge;
          createEdge(reactionEdge.getSubstrates().get(0),vertex.getElementId(),false,reactionEdge);
          createEdge(vertex.getElementId(),reactionEdge.getProducts().get(0),true,reactionEdge);
        }
      }
    }
  }
}","public void drawView(){
  HashMap<Integer,Pathway> pathwayLUT=((IPathwayManager)refGeneralManager.getSingelton().getPathwayManager()).getPathwayLUT();
  if (iPathwayId == 0) {
    Iterator<Pathway> iter=pathwayLUT.values().iterator();
    refCurrentPathway=iter.next();
  }
 else {
    refCurrentPathway=pathwayLUT.get(iPathwayId);
  }
  Vector<PathwayVertex> vertexList;
  Iterator<PathwayVertex> vertexIterator;
  PathwayVertex vertex;
  Vector<IPathwayVertexRep> vertexReps;
  Iterator<IPathwayVertexRep> vertexRepIterator;
  PathwayVertexRep vertexRep;
  Vector<APathwayEdge> edgeList;
  Iterator<APathwayEdge> edgeIterator;
  APathwayEdge edge;
  PathwayRelationEdge relationEdge;
  PathwayReactionEdge reactionEdge;
  vertexList=refCurrentPathway.getVertexList();
  vertexIterator=vertexList.iterator();
  while (vertexIterator.hasNext()) {
    vertex=vertexIterator.next();
    vertexReps=vertex.getVertexReps();
    vertexRepIterator=vertexReps.iterator();
    while (vertexRepIterator.hasNext()) {
      vertexRep=(PathwayVertexRep)vertexRepIterator.next();
      createVertex(vertex,vertexRep.getName(),vertexRep.getHeight(),vertexRep.getWidth(),vertexRep.getXPosition(),vertexRep.getYPosition(),vertexRep.getShapeType());
    }
  }
  edgeList=refCurrentPathway.getEdgeList();
  edgeIterator=edgeList.iterator();
  while (edgeIterator.hasNext()) {
    edge=edgeIterator.next();
    if (bShowRelationEdges == false)     break;
    if (edge.getClass().getName().equals(""String_Node_Str"")) {
      relationEdge=(PathwayRelationEdge)edge;
      if (relationEdge.getCompoundId() == -1) {
        createEdge(relationEdge.getElementId1(),relationEdge.getElementId2(),false,relationEdge);
      }
 else {
        createEdge(relationEdge.getElementId1(),relationEdge.getCompoundId(),false,relationEdge);
        if (relationEdge.getEdgeRelationType() == EdgeRelationType.ECrel) {
          createEdge(relationEdge.getCompoundId(),relationEdge.getElementId2(),false,relationEdge);
        }
 else {
          createEdge(relationEdge.getElementId2(),relationEdge.getCompoundId(),true,relationEdge);
        }
      }
    }
  }
  vertexIterator=vertexList.iterator();
  while (vertexIterator.hasNext()) {
    vertex=vertexIterator.next();
    vertexReps=vertex.getVertexReps();
    vertexRepIterator=vertexReps.iterator();
    if (vertex.getVertexType() == PathwayVertexType.enzyme) {
      IPathwayElementManager pathwayElementManager=((IPathwayElementManager)refGeneralManager.getSingelton().getPathwayElementManager());
      System.out.println(""String_Node_Str"" + vertex.getVertexReactionName());
      edge=pathwayElementManager.getEdgeLUT().get(pathwayElementManager.getReactionName2EdgeIdLUT().get(vertex.getVertexReactionName()));
      if (edge != null) {
        if (bShowReactionEdges == false)         break;
        if (edge.getClass().getName().equals(""String_Node_Str"")) {
          reactionEdge=(PathwayReactionEdge)edge;
          createEdge(reactionEdge.getSubstrates().get(0),vertex.getElementId(),false,reactionEdge);
          createEdge(vertex.getElementId(),reactionEdge.getProducts().get(0),true,reactionEdge);
        }
      }
    }
  }
}",0.9611128675308253
59235,"protected void initToolbar(){
  refToolBar=new ToolBar(refSWTContainer,SWT.NONE);
  refToolBar.setBounds(0,0,iWidth,30);
  refAddEnzymeNodeItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refZoomOrigItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refZoomInItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refZoomOutItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refNeighbourItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refShowOverviewMapItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",null,null,""String_Node_Str"");
  refFilterEdgesItem=createToolItem(refToolBar,SWT.DROP_DOWN,""String_Node_Str"",null,null,""String_Node_Str"");
  final Menu filterEdgeMenu=new Menu(refSWTContainer.getShell(),SWT.POP_UP);
  MenuItem refShowRelationsItem=new MenuItem(filterEdgeMenu,SWT.CHECK);
  refShowRelationsItem.setText(""String_Node_Str"");
  refShowRelationsItem.setSelection(true);
  MenuItem refShowReactionsItem=new MenuItem(filterEdgeMenu,SWT.CHECK);
  refShowReactionsItem.setText(""String_Node_Str"");
  refShowReactionsItem.setSelection(true);
  refFilterEdgesItem.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      Rectangle rect=refFilterEdgesItem.getBounds();
      Point pt=new Point(rect.x,rect.y + rect.height);
      pt=refToolBar.toDisplay(pt);
      filterEdgeMenu.setLocation(pt.x,pt.y);
      filterEdgeMenu.setVisible(true);
    }
  }
);
  Listener edgeFilterListener=new Listener(){
    public void handleEvent(    Event event){
      System.out.println(""String_Node_Str"" + event.widget.getClass().getSimpleName());
      if (!event.widget.getClass().getSimpleName().equals(""String_Node_Str""))       return;
      MenuItem clickedMenuItem=((MenuItem)event.widget);
      if (((MenuItem)event.widget).getText().equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.showRelationEdges(clickedMenuItem.getSelection());
      }
 else       if (((MenuItem)event.widget).getText().equals(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + clickedMenuItem.getSelection());
        refPathwayGraphViewRep.showReactionEdges(clickedMenuItem.getSelection());
      }
    }
  }
;
  Listener toolbarListener=new Listener(){
    public void handleEvent(    Event event){
      ToolItem clickedToolItem=(ToolItem)event.widget;
      String sToolItemIdentifier=((String)clickedToolItem.getToolTipText());
      if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.zoomOrig();
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.zoomIn();
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.zoomOut();
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.showOverviewMapInNewWindow(new Dimension(250,250));
      }
    }
  }
;
  refZoomOrigItem.addListener(SWT.Selection,toolbarListener);
  refZoomInItem.addListener(SWT.Selection,toolbarListener);
  refZoomOutItem.addListener(SWT.Selection,toolbarListener);
  refNeighbourItem.addListener(SWT.Selection,toolbarListener);
  refShowOverviewMapItem.addListener(SWT.Selection,toolbarListener);
  refShowRelationsItem.addListener(SWT.Selection,edgeFilterListener);
  refShowReactionsItem.addListener(SWT.Selection,edgeFilterListener);
}","protected void initToolbar(){
  refToolBar=new ToolBar(refSWTContainer,SWT.NONE);
  refToolBar.setBounds(0,0,iWidth,30);
  refAddEnzymeNodeItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refZoomOrigItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refZoomInItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refZoomOutItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refNeighbourItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",new Image(refSWTContainer.getDisplay(),""String_Node_Str""),null,""String_Node_Str"");
  refShowOverviewMapItem=createToolItem(refToolBar,SWT.PUSH,""String_Node_Str"",null,null,""String_Node_Str"");
  refFilterEdgesItem=createToolItem(refToolBar,SWT.DROP_DOWN,""String_Node_Str"",null,null,""String_Node_Str"");
  final Menu filterEdgeMenu=new Menu(refSWTContainer.getShell(),SWT.POP_UP);
  MenuItem refShowRelationsItem=new MenuItem(filterEdgeMenu,SWT.CHECK);
  refShowRelationsItem.setText(""String_Node_Str"");
  refShowRelationsItem.setSelection(true);
  MenuItem refShowReactionsItem=new MenuItem(filterEdgeMenu,SWT.CHECK);
  refShowReactionsItem.setText(""String_Node_Str"");
  refShowReactionsItem.setSelection(true);
  refFilterEdgesItem.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      Rectangle rect=refFilterEdgesItem.getBounds();
      Point pt=new Point(rect.x,rect.y + rect.height);
      pt=refToolBar.toDisplay(pt);
      filterEdgeMenu.setLocation(pt.x,pt.y);
      filterEdgeMenu.setVisible(true);
    }
  }
);
  Listener edgeFilterListener=new Listener(){
    public void handleEvent(    Event event){
      if (!event.widget.getClass().getSimpleName().equals(""String_Node_Str"")) {
        return;
      }
      MenuItem clickedMenuItem=((MenuItem)event.widget);
      if (((MenuItem)event.widget).getText().equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.showRelationEdges(clickedMenuItem.getSelection());
      }
 else       if (((MenuItem)event.widget).getText().equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.showReactionEdges(clickedMenuItem.getSelection());
      }
    }
  }
;
  Listener toolbarListener=new Listener(){
    public void handleEvent(    Event event){
      ToolItem clickedToolItem=(ToolItem)event.widget;
      String sToolItemIdentifier=((String)clickedToolItem.getToolTipText());
      if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.zoomOrig();
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.zoomIn();
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.zoomOut();
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        NumberInputDialog neighbourhoodInputDialog=new NumberInputDialog(refSWTContainer.getShell());
        refPathwayGraphViewRep.setNeighbourhoodDistance(neighbourhoodInputDialog.open());
      }
 else       if (sToolItemIdentifier.equals(""String_Node_Str"")) {
        refPathwayGraphViewRep.showOverviewMapInNewWindow(new Dimension(250,250));
      }
    }
  }
;
  refZoomOrigItem.addListener(SWT.Selection,toolbarListener);
  refZoomInItem.addListener(SWT.Selection,toolbarListener);
  refZoomOutItem.addListener(SWT.Selection,toolbarListener);
  refNeighbourItem.addListener(SWT.Selection,toolbarListener);
  refShowOverviewMapItem.addListener(SWT.Selection,toolbarListener);
  refShowRelationsItem.addListener(SWT.Selection,edgeFilterListener);
  refShowReactionsItem.addListener(SWT.Selection,edgeFilterListener);
}",0.9313838655893292
59236,"public void handleEvent(Event event){
  ToolItem clickedToolItem=(ToolItem)event.widget;
  String sToolItemIdentifier=((String)clickedToolItem.getToolTipText());
  if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.zoomOrig();
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.zoomIn();
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.zoomOut();
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.showOverviewMapInNewWindow(new Dimension(250,250));
  }
}","public void handleEvent(Event event){
  ToolItem clickedToolItem=(ToolItem)event.widget;
  String sToolItemIdentifier=((String)clickedToolItem.getToolTipText());
  if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.zoomOrig();
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.zoomIn();
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.zoomOut();
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    NumberInputDialog neighbourhoodInputDialog=new NumberInputDialog(refSWTContainer.getShell());
    refPathwayGraphViewRep.setNeighbourhoodDistance(neighbourhoodInputDialog.open());
  }
 else   if (sToolItemIdentifier.equals(""String_Node_Str"")) {
    refPathwayGraphViewRep.showOverviewMapInNewWindow(new Dimension(250,250));
  }
}",0.8800521512385919
59237,"protected void showNeighbourhood(DefaultGraphCell cell,int iDistance){
  refUndoManager.undo(refGraphLayoutCache);
  List<DefaultGraphCell> neighbourCells=refGraphLayoutCache.getNeighbours(cell,null,false,false);
  Iterator<DefaultGraphCell> cellIter=neighbourCells.iterator();
  Map<DefaultGraphCell,Map> nested=new Hashtable<DefaultGraphCell,Map>();
  Map attributeMap=new Hashtable();
  GraphConstants.setGradientColor(attributeMap,Color.red);
  DefaultGraphCell tmpCell;
  while (cellIter.hasNext()) {
    tmpCell=cellIter.next();
    nested.put(tmpCell,attributeMap);
  }
  refGraphLayoutCache.edit(nested,null,null,null);
}","protected void showNeighbourhood(DefaultGraphCell cell,int iDistance){
  List<DefaultGraphCell> neighbourCells=refGraphLayoutCache.getNeighbours(cell,null,false,false);
  Iterator<DefaultGraphCell> cellIter=neighbourCells.iterator();
  Map<DefaultGraphCell,Map> nested=new Hashtable<DefaultGraphCell,Map>();
  Map attributeMap=new Hashtable();
  GraphConstants.setGradientColor(attributeMap,new Color(1.0f,0.0f,0.0f));
  DefaultGraphCell tmpCell;
  while (cellIter.hasNext()) {
    tmpCell=cellIter.next();
    nested.put(tmpCell,attributeMap);
    for (int iDistanceCount=1; iDistanceCount < iDistance; iDistanceCount++) {
      showNeighbourhood(tmpCell,iDistance - 1);
    }
  }
  refGraphLayoutCache.edit(nested,null,null,null);
  iNeighbourhoodUndoCount++;
}",0.1120689655172413
59238,"public void mousePressed(final MouseEvent event){
  DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
  if (clickedCell != null) {
    final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
    String sSearchPattern=""String_Node_Str"";
    String sPathwayFilePath;
    if (sUrl.contains((CharSequence)sSearchPattern)) {
      int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
      sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
      sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      System.out.println(""String_Node_Str"" + sPathwayFilePath);
      int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
      System.out.println(""String_Node_Str"" + iPathwayIdIndex);
      iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
      refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
      loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
    }
 else {
      final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
      refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
        public void run(){
          ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
        }
      }
);
      showNeighbourhood(clickedCell,iNeighbourhoodDistance);
    }
  }
  super.mousePressed(event);
}","public void mousePressed(final MouseEvent event){
  DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
  if (clickedCell != null) {
    final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
    String sSearchPattern=""String_Node_Str"";
    String sPathwayFilePath;
    if (sUrl.contains((CharSequence)sSearchPattern)) {
      int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
      sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
      sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      System.out.println(""String_Node_Str"" + sPathwayFilePath);
      int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
      System.out.println(""String_Node_Str"" + iPathwayIdIndex);
      iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
      refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
      loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
      bNeighbourhoodShown=false;
    }
 else {
      final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
      refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
        public void run(){
          ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
        }
      }
);
      if (bNeighbourhoodShown == true) {
        for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
          refUndoManager.undo(refGraphLayoutCache);
        }
        bNeighbourhoodShown=false;
      }
      showNeighbourhood(clickedCell,iNeighbourhoodDistance);
      bNeighbourhoodShown=true;
    }
  }
  super.mousePressed(event);
}",0.9098457888493476
59239,"public void initView(){
class PathwayMarqueeHandler extends BasicMarqueeHandler {
    public boolean isForceMarqueeEvent(    MouseEvent event){
      if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 1)       return true;
 else       return super.isForceMarqueeEvent(event);
    }
    public void mousePressed(    final MouseEvent event){
      DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
      if (clickedCell != null) {
        final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
        String sSearchPattern=""String_Node_Str"";
        String sPathwayFilePath;
        if (sUrl.contains((CharSequence)sSearchPattern)) {
          int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
          sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
          sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          System.out.println(""String_Node_Str"" + sPathwayFilePath);
          int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
          System.out.println(""String_Node_Str"" + iPathwayIdIndex);
          iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
          refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
          loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
        }
 else {
          final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
          refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
            public void run(){
              ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
            }
          }
);
          showNeighbourhood(clickedCell,iNeighbourhoodDistance);
        }
      }
      super.mousePressed(event);
    }
  }
  refGraphModel=new DefaultGraphModel();
  refGraphLayoutCache=new GraphLayoutCache(refGraphModel,new DefaultCellViewFactory());
  refPathwayGraph=new JGraph(refGraphModel,refGraphLayoutCache);
  refPathwayGraph.getGraphLayoutCache().setFactory(new GPCellViewFactory());
  refPathwayGraph.setCloneable(true);
  refPathwayGraph.setMarqueeHandler(new PathwayMarqueeHandler());
  refUndoManager=new GraphUndoManager();
  refGraphModel.addUndoableEditListener(refUndoManager);
}","public void initView(){
class PathwayMarqueeHandler extends BasicMarqueeHandler {
    public boolean isForceMarqueeEvent(    MouseEvent event){
      if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 1)       return true;
 else       return super.isForceMarqueeEvent(event);
    }
    public void mousePressed(    final MouseEvent event){
      DefaultGraphCell clickedCell=(DefaultGraphCell)refPathwayGraph.getFirstCellForLocation(event.getX(),event.getY());
      if (clickedCell != null) {
        final String sUrl=((PathwayVertex)clickedCell.getUserObject()).getVertexLink();
        String sSearchPattern=""String_Node_Str"";
        String sPathwayFilePath;
        if (sUrl.contains((CharSequence)sSearchPattern)) {
          int iFilePathStartIndex=sUrl.lastIndexOf(sSearchPattern) + sSearchPattern.length();
          sPathwayFilePath=sUrl.substring(iFilePathStartIndex);
          sPathwayFilePath=sPathwayFilePath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          System.out.println(""String_Node_Str"" + sPathwayFilePath);
          int iPathwayIdIndex=sUrl.lastIndexOf(""String_Node_Str"") + 5;
          System.out.println(""String_Node_Str"" + iPathwayIdIndex);
          iPathwayId=StringConversionTool.convertStringToInt(sUrl.substring(iPathwayIdIndex,iPathwayIdIndex + 3),0);
          refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + iPathwayId);
          loadPathwayFromFile(""String_Node_Str"" + sPathwayFilePath);
          bNeighbourhoodShown=false;
        }
 else {
          final IViewManager tmpViewManager=refGeneralManager.getSingelton().getViewGLCanvasManager();
          refEmbeddedFrameComposite.getDisplay().asyncExec(new Runnable(){
            public void run(){
              ((HTMLBrowserViewRep)tmpViewManager.getItem(iHTMLBrowserId)).setUrl(sUrl);
            }
          }
);
          if (bNeighbourhoodShown == true) {
            for (int iUndoCount=0; iUndoCount < iNeighbourhoodUndoCount; iUndoCount++) {
              refUndoManager.undo(refGraphLayoutCache);
            }
            bNeighbourhoodShown=false;
          }
          showNeighbourhood(clickedCell,iNeighbourhoodDistance);
          bNeighbourhoodShown=true;
        }
      }
      super.mousePressed(event);
    }
  }
  refGraphModel=new DefaultGraphModel();
  refGraphLayoutCache=new GraphLayoutCache(refGraphModel,new DefaultCellViewFactory());
  refPathwayGraph=new JGraph(refGraphModel,refGraphLayoutCache);
  refPathwayGraph.getGraphLayoutCache().setFactory(new GPCellViewFactory());
  refPathwayGraph.setCloneable(true);
  refPathwayGraph.setMarqueeHandler(new PathwayMarqueeHandler());
  refUndoManager=new GraphUndoManager();
  refGraphModel.addUndoableEditListener(refUndoManager);
}",0.9353846153846154
59240,"@Override public void doCommandPart() throws CerberusRuntimeException {
  GLCanvasHistogram2D canvas=(GLCanvasHistogram2D)openGLCanvasUser;
  canvas.setOriginRotation(vec3fOrigin,vec4fRotation);
  canvas.setResolution(fResolution);
  canvas.setHistogramLength((int)fResolution[10]);
  canvas.setTargetSetId(iTargetCollectionSetId);
  canvas.setHistogramLength(200);
}","@Override public void doCommandPart() throws CerberusRuntimeException {
  GLCanvasHistogram2D canvas=(GLCanvasHistogram2D)openGLCanvasUser;
  canvas.setOriginRotation(vec3fOrigin,vec4fRotation);
  canvas.setResolution(fResolution);
  canvas.setTargetSetId(iTargetCollectionSetId);
  canvas.setHistogramLength((int)fResolution[10]);
  canvas.setHistogramLength(200);
}",0.8664850136239782
59241,"public void createHistogram(final int iHistogramLevels){
  if (targetSet == null) {
    refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"",LoggerType.STATUS);
    return;
  }
  IStorage refBufferStorage=targetSet.getStorageByDimAndIndex(0,0);
  ISelection refBufferSelection=targetSet.getSelectionByDimAndIndex(0,0);
  System.out.println(""String_Node_Str"" + refBufferSelection.getLabel() + ""String_Node_Str"");
  if (refBufferStorage == null) {
    return;
  }
  HistogramStatisticsSet histogramCreatorSet=new HistogramStatisticsSet();
  histogramCreatorSet.addData(targetSet);
  histogramCreatorSet.setIntervalEqualSpacedInt(iHistogramLevels,enumCurrentHistogramMode,true,0,0);
  HistogramData refResultBuffer=histogramCreatorSet.getUpdatedHistogramData();
  listHistogramData.clear();
  if (refResultBuffer != null) {
    listHistogramData.add(refResultBuffer);
  }
}","public void createHistogram(final int iHistogramLevels){
  if (targetSet == null) {
    refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"",LoggerType.STATUS);
    return;
  }
  if (iHistogramLevels < 1) {
    refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"",LoggerType.FULL);
    return;
  }
  IStorage refBufferStorage=targetSet.getStorageByDimAndIndex(0,0);
  ISelection refBufferSelection=targetSet.getSelectionByDimAndIndex(0,0);
  refGeneralManager.getSingelton().getLoggerManager().logMsg(""String_Node_Str"" + refBufferSelection.getLabel() + ""String_Node_Str"",LoggerType.FULL);
  if (refBufferStorage == null) {
    return;
  }
  HistogramStatisticsSet histogramCreatorSet=new HistogramStatisticsSet();
  histogramCreatorSet.addData(targetSet);
  histogramCreatorSet.setIntervalEqualSpacedInt(iHistogramLevels,enumCurrentHistogramMode,true,0,0);
  HistogramData refResultBuffer=histogramCreatorSet.getUpdatedHistogramData();
  listHistogramData.clear();
  if (refResultBuffer != null) {
    listHistogramData.add(refResultBuffer);
  }
}",0.8808446455505279
59242,"public void createSelectionTable(int iRequestedSelectionId){
  TableItem item;
  reinitializeTable();
  iCurrentlyRequestedCollectionId=iRequestedSelectionId;
  final TableColumn offsetColumn=new TableColumn(refTable,SWT.NONE);
  offsetColumn.setText(""String_Node_Str"");
  final TableColumn lengthColumn=new TableColumn(refTable,SWT.NONE);
  lengthColumn.setText(""String_Node_Str"");
  final TableColumn multiOffsetColumn=new TableColumn(refTable,SWT.NONE);
  multiOffsetColumn.setText(""String_Node_Str"");
  final TableColumn multiRepeatColumn=new TableColumn(refTable,SWT.NONE);
  multiRepeatColumn.setText(""String_Node_Str"");
  refCurrentSelection=refSelectionManager.getItemSelection(iRequestedSelectionId);
  item=new TableItem(refTable,SWT.NONE);
  item.setText(new String[]{Integer.toString(refCurrentSelection.getOffset()),Integer.toString(refCurrentSelection.length()),Integer.toString(refCurrentSelection.getMultiOffset()),Integer.toString(refCurrentSelection.getMultiRepeat())});
  offsetColumn.pack();
  lengthColumn.pack();
  multiOffsetColumn.pack();
  multiRepeatColumn.pack();
}","public void createSelectionTable(int iRequestedSelectionId){
  TableItem item;
  reinitializeTable();
  refPreviousPageButton.setEnabled(false);
  refNextPageButton.setEnabled(false);
  iCurrentlyRequestedCollectionId=iRequestedSelectionId;
  final TableColumn offsetColumn=new TableColumn(refTable,SWT.NONE);
  offsetColumn.setText(""String_Node_Str"");
  final TableColumn lengthColumn=new TableColumn(refTable,SWT.NONE);
  lengthColumn.setText(""String_Node_Str"");
  final TableColumn multiOffsetColumn=new TableColumn(refTable,SWT.NONE);
  multiOffsetColumn.setText(""String_Node_Str"");
  final TableColumn multiRepeatColumn=new TableColumn(refTable,SWT.NONE);
  multiRepeatColumn.setText(""String_Node_Str"");
  refCurrentSelection=refSelectionManager.getItemSelection(iRequestedSelectionId);
  item=new TableItem(refTable,SWT.NONE);
  item.setText(new String[]{Integer.toString(refCurrentSelection.getOffset()),Integer.toString(refCurrentSelection.length()),Integer.toString(refCurrentSelection.getMultiOffset()),Integer.toString(refCurrentSelection.getMultiRepeat())});
  offsetColumn.pack();
  lengthColumn.pack();
  multiOffsetColumn.pack();
  multiRepeatColumn.pack();
}",0.9638128861429832
59243,"protected void drawStorageTable(){
  TableItem item;
  TableColumn column;
  int iTableColumnIndex=0;
  int iTmpNumberOfDataItems=0;
  int iNumberOfTableItems=refCurrentStorage.getMaximumLengthOfAllArrays();
  int iStartItemIndex=iCurrentTablePage * MAX_TABLE_ROWS;
  reinitializeTable();
  int iNumberOfTableItemsToLoad=iNumberOfTableItems;
  if (iNumberOfTableItems > MAX_TABLE_ROWS) {
    iNumberOfTableItemsToLoad=MAX_TABLE_ROWS;
    refNextPageButton.setEnabled(true);
  }
  for (int iTableRowIndex=0; iTableRowIndex < iNumberOfTableItemsToLoad; iTableRowIndex++) {
    new TableItem(refTable,SWT.NONE);
  }
  if (refCurrentStorage.getSize(StorageType.INT) != 0) {
    int[] intData=refCurrentStorage.getArrayInt();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (intData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=intData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,Float.toString(intData[iStartItemIndex + dataIndex]));
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (refCurrentStorage.getSize(StorageType.FLOAT) != 0) {
    float[] floatData=refCurrentStorage.getArrayFloat();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (floatData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=floatData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,Float.toString(floatData[iStartItemIndex + dataIndex]));
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (refCurrentStorage.getSize(StorageType.STRING) != 0) {
    String[] stringData=refCurrentStorage.getArrayString();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (stringData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=stringData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,stringData[iStartItemIndex + dataIndex]);
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (refCurrentStorage.getSize(StorageType.BOOLEAN) != 0) {
    boolean[] booleanData=refCurrentStorage.getArrayBoolean();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (booleanData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=booleanData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,Boolean.toString(booleanData[iStartItemIndex + dataIndex]));
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
    refNextPageButton.setEnabled(false);
  }
}","protected void drawStorageTable(){
  TableItem item;
  TableColumn column;
  int iTableColumnIndex=0;
  int iTmpNumberOfDataItems=0;
  int iNumberOfTableItems=refCurrentStorage.getMaximumLengthOfAllArrays();
  int iStartItemIndex=iCurrentTablePage * MAX_TABLE_ROWS;
  reinitializeTable();
  int iNumberOfTableItemsToLoad=iNumberOfTableItems;
  if (iNumberOfTableItems > MAX_TABLE_ROWS) {
    iNumberOfTableItemsToLoad=MAX_TABLE_ROWS;
    refNextPageButton.setEnabled(true);
  }
  for (int iTableRowIndex=0; iTableRowIndex < iNumberOfTableItemsToLoad; iTableRowIndex++) {
    new TableItem(refTable,SWT.NONE);
  }
  if (refCurrentStorage.getSize(StorageType.INT) > 1) {
    int[] intData=refCurrentStorage.getArrayInt();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (intData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=intData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,Float.toString(intData[iStartItemIndex + dataIndex]));
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (refCurrentStorage.getSize(StorageType.FLOAT) > 1) {
    float[] floatData=refCurrentStorage.getArrayFloat();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (floatData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=floatData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,Float.toString(floatData[iStartItemIndex + dataIndex]));
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (refCurrentStorage.getSize(StorageType.STRING) > 1) {
    String[] stringData=refCurrentStorage.getArrayString();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (stringData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=stringData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,stringData[iStartItemIndex + dataIndex]);
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (refCurrentStorage.getSize(StorageType.BOOLEAN) > 1) {
    boolean[] booleanData=refCurrentStorage.getArrayBoolean();
    column=new TableColumn(refTable,SWT.NONE);
    column.setText(""String_Node_Str"");
    if (booleanData.length > iNumberOfTableItemsToLoad) {
      if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
        iTmpNumberOfDataItems=iNumberOfTableItems % MAX_TABLE_ROWS;
      }
 else       iTmpNumberOfDataItems=iNumberOfTableItemsToLoad;
    }
 else {
      iTmpNumberOfDataItems=booleanData.length;
    }
    for (int dataIndex=0; dataIndex < iTmpNumberOfDataItems; dataIndex++) {
      item=refTable.getItem(dataIndex);
      item.setText(iTableColumnIndex,Boolean.toString(booleanData[iStartItemIndex + dataIndex]));
    }
    column.pack();
    iTableColumnIndex++;
  }
  if (iCurrentTablePage >= (iNumberOfTableItems / (float)MAX_TABLE_ROWS - 1)) {
    refNextPageButton.setEnabled(false);
  }
}",0.9964699949571356
59244,"public static void main(String[] args){
  String sRawDataFileName=""String_Node_Str"";
  OneForAllManager oneForAllManager=new OneForAllManager(null);
  oneForAllManager.setStateSWT(true);
  oneForAllManager.initAll();
  GeneralManager generalManager=oneForAllManager.getGeneralManager();
  CmdSystemLoadFileViaImporter commandFileImporter=new CmdSystemLoadFileViaImporter(generalManager,sRawDataFileName,""String_Node_Str"",""String_Node_Str"");
  commandFileImporter.doCommand();
  SWTGUIManagerSimple swtGuiManager=(SWTGUIManagerSimple)generalManager.getManagerByBaseType(ManagerObjectType.GUI_SWT);
  ViewManagerSimple viewManager=(ViewManagerSimple)generalManager.getManagerByBaseType(ManagerObjectType.VIEW);
  viewManager.createView(ManagerObjectType.VIEW_DATA_EXPLORER);
  swtGuiManager.runApplication();
}","public static void main(String[] args){
  String sRawDataFileName=""String_Node_Str"";
  OneForAllManager oneForAllManager=new OneForAllManager(null);
  oneForAllManager.setStateSWT(true);
  oneForAllManager.initAll();
  GeneralManager generalManager=oneForAllManager.getGeneralManager();
  CmdSystemLoadFileViaImporter commandFileImporter=new CmdSystemLoadFileViaImporter(generalManager,sRawDataFileName,""String_Node_Str"",15101);
  commandFileImporter.doCommand();
  SWTGUIManagerSimple swtGuiManager=(SWTGUIManagerSimple)generalManager.getManagerByBaseType(ManagerObjectType.GUI_SWT);
  ViewManagerSimple viewManager=(ViewManagerSimple)generalManager.getManagerByBaseType(ManagerObjectType.VIEW);
  viewManager.createView(ManagerObjectType.VIEW_DATA_EXPLORER);
  swtGuiManager.runApplication();
}",0.986284289276808
59245,"public static final byte[] sha1(String input) throws Exception {
  MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
  md.update(input.getBytes());
  return md.digest();
}","public static final byte[] sha1(String... inputs) throws Exception {
  MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
  for (  String input : inputs) {
    md.update(input.getBytes());
  }
  return md.digest();
}",0.8640776699029126
59246,"/** 
 * FOR INTERNAL USE ONLY.  Aligned merge two sets of aggregaets...possibly modifying one of them. Can only be used if BOTH sets of aggregates are only held in the current scope AND going out of scope immediately after the merge.   Combine two aggregate sets according to the passed reducer.  Aligns coordinates between the two sets.  The resulting aggregate set will have a realized subset region sufficient to cover the realized subset region of both source aggregate sets (regardless of  the values found in those sources).  If one of the two aggregate sets provided is already of sufficient size, it will be used as both a source and a target. Therefore, this may involve a **DESTRUCTIVE** update of one of the sets of aggregates.
 * @param left Aggregate set to use for left-hand arguments
 * @param right Aggregate set to use for right-hand arguments
 * @param identity Identity value for the rollup function
 * @param rollup Reduction operation
 * @return Resulting aggregate set (may be new or a destructively updated left or right parameter) 
 */
public static <T>Aggregates<T> __unsafeMerge(Aggregates<T> left,Aggregates<T> right,T identity,BiFunction<T,T,T> rollup){
  if (left == null || left.empty()) {
    return right;
  }
  if (right == null || right.empty()) {
    return left;
  }
  if ((left instanceof ConstantAggregates) && Util.isEqual(identity,left.defaultValue())) {
    return right;
  }
  if ((right instanceof ConstantAggregates) && Util.isEqual(identity,right.defaultValue())) {
    return left;
  }
  List<Aggregates<T>> sources=new ArrayList<Aggregates<T>>();
  Aggregates<T> target;
  Rectangle rb=new Rectangle(right.lowX(),right.lowY(),right.highX() - right.lowX(),right.highY() - right.lowY());
  Rectangle lb=new Rectangle(left.lowX(),left.lowY(),left.highX() - left.lowX(),left.highY() - left.lowY());
  Rectangle bounds=rb.union(lb);
  if (lb.contains(bounds)) {
    target=left;
    sources.add(right);
  }
 else   if (rb.contains(bounds)) {
    target=right;
    sources.add(left);
  }
 else {
    sources.add(left);
    sources.add(right);
    target=AggregateUtils.make((int)bounds.getMinX(),(int)bounds.getMinY(),(int)bounds.getMaxX(),(int)bounds.getMaxY(),identity);
  }
  for (  Aggregates<T> source : sources) {
    for (int x=Math.max(0,source.lowX()); x < source.highX(); x++) {
      for (int y=Math.max(0,source.lowY()); y < source.highY(); y++) {
        T newVal=source.get(x,y);
        if (Util.isEqual(identity,newVal)) {
          continue;
        }
        T comb=rollup.apply(target.get(x,y),source.get(x,y));
        target.set(x,y,comb);
      }
    }
  }
  return target;
}","/** 
 * FOR INTERNAL USE ONLY.  Aligned merge two sets of aggregaets...possibly modifying one of them. Can only be used if BOTH sets of aggregates are only held in the current scope AND going out of scope immediately after the merge.   Combine two aggregate sets according to the passed reducer.  Aligns coordinates between the two sets.  The resulting aggregate set will have a realized subset region sufficient to cover the realized subset region of both source aggregate sets (regardless of  the values found in those sources).  If one of the two aggregate sets provided is already of sufficient size, it will be used as both a source and a target. Therefore, this may involve a **DESTRUCTIVE** update of one of the sets of aggregates.
 * @param left Aggregate set to use for left-hand arguments
 * @param right Aggregate set to use for right-hand arguments
 * @param identity Identity value for the rollup function
 * @param rollup Reduction operation
 * @return Resulting aggregate set (may be new or a destructively updated left or right parameter) 
 */
public static <T>Aggregates<T> __unsafeMerge(Aggregates<T> left,Aggregates<T> right,T identity,BiFunction<T,T,T> rollup){
  if (left == null || left.empty()) {
    return right;
  }
  if (right == null || right.empty()) {
    return left;
  }
  if ((left instanceof ConstantAggregates) && Util.isEqual(identity,left.defaultValue())) {
    return right;
  }
  if ((right instanceof ConstantAggregates) && Util.isEqual(identity,right.defaultValue())) {
    return left;
  }
  List<Aggregates<T>> sources=new ArrayList<Aggregates<T>>();
  Aggregates<T> target;
  Rectangle rb=new Rectangle(right.lowX(),right.lowY(),right.highX() - right.lowX(),right.highY() - right.lowY());
  Rectangle lb=new Rectangle(left.lowX(),left.lowY(),left.highX() - left.lowX(),left.highY() - left.lowY());
  Rectangle bounds=rb.union(lb);
  if (lb.contains(bounds)) {
    target=left;
    sources.add(right);
  }
 else   if (rb.contains(bounds)) {
    target=right;
    sources.add(left);
  }
 else {
    sources.add(left);
    sources.add(right);
    target=AggregateUtils.make((int)bounds.getMinX(),(int)bounds.getMinY(),(int)bounds.getMaxX(),(int)bounds.getMaxY(),identity);
  }
  for (  Aggregates<T> source : sources) {
    for (int x=source.lowX(); x < source.highX(); x++) {
      for (int y=source.lowY(); y < source.highY(); y++) {
        T newVal=source.get(x,y);
        if (Util.isEqual(identity,newVal)) {
          continue;
        }
        T comb=rollup.apply(target.get(x,y),source.get(x,y));
        target.set(x,y,comb);
      }
    }
  }
  return target;
}",0.9954303122619954
59247,"@Override public void set(int x,int y,A val){
  base.set(x,y,val);
  if (x < lowX && x >= base.lowX()) {
    lowX=x;
  }
  if (y < lowY && y >= base.lowY()) {
    lowY=y;
  }
  if (x > highX && x <= base.highX()) {
    highX=x + 1;
  }
  if (y > highY && y <= base.highY()) {
    highY=y + 1;
  }
}","@Override public void set(int x,int y,A val){
  base.set(x,y,val);
  if (x < lowX && x >= base.lowX()) {
    lowX=x;
  }
  if (y < lowY && y >= base.lowY()) {
    lowY=y;
  }
  if (x >= highX && x + 1 <= base.highX()) {
    highX=x + 1;
  }
  if (y >= highY && y + 1 <= base.highY()) {
    highY=y + 1;
  }
}",0.9108910891089108
59248,"@Override public void set(int x,int y,A val){
  base.set(x,y,val);
  if (x < lowX && x >= base.lowX()) {
    lowX=x;
  }
  if (y < lowY && y >= base.lowY()) {
    lowY=y;
  }
  if (x >= highX && x < base.highX()) {
    highX=x + 1;
  }
  if (y >= highY && y < base.highY()) {
    highY=y + 1;
  }
}","@Override public void set(int x,int y,A val){
  base.set(x,y,val);
  if (x < lowX && x >= base.lowX()) {
    lowX=x;
  }
  if (y < lowY && y >= base.lowY()) {
    lowY=y;
  }
  if (x > highX && x <= base.highX()) {
    highX=x + 1;
  }
  if (y > highY && y <= base.highY()) {
    highY=y + 1;
  }
}",0.906040268456376
59249,"/** 
 * Common aggregates serialization code. Note: Values must be either a collection or a reference-type array (sorry, no primitive arrays)
 */
private static void serializeContainer(Aggregates<?> aggs,OutputStream out,Schema schema,FORMAT format,GenericRecord defaultVal,List<GenericRecord> values){
  GenericRecord aggregates=new GenericData.Record(schema);
  aggregates.put(""String_Node_Str"",aggs.lowX());
  aggregates.put(""String_Node_Str"",aggs.lowY());
  aggregates.put(""String_Node_Str"",aggs.highX() - aggs.lowX());
  aggregates.put(""String_Node_Str"",aggs.highY() - aggs.lowX());
  aggregates.put(""String_Node_Str"",values);
  aggregates.put(""String_Node_Str"",defaultVal);
  aggregates.put(""String_Node_Str"",0);
  aggregates.put(""String_Node_Str"",META);
  try {
switch (format) {
case BINARY:
      emitBinary(aggregates,schema,out);
    break;
case JSON:
  emitJSON(aggregates,schema,out);
break;
}
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"",e);
}
}","/** 
 * Common aggregates serialization code. Note: Values must be either a collection or a reference-type array (sorry, no primitive arrays)
 */
private static void serializeContainer(Aggregates<?> aggs,OutputStream out,Schema schema,FORMAT format,GenericRecord defaultVal,List<GenericRecord> values){
  GenericRecord aggregates=new GenericData.Record(schema);
  aggregates.put(""String_Node_Str"",aggs.lowX());
  aggregates.put(""String_Node_Str"",aggs.lowY());
  aggregates.put(""String_Node_Str"",aggs.highX() - aggs.lowX());
  aggregates.put(""String_Node_Str"",aggs.highY() - aggs.lowY());
  aggregates.put(""String_Node_Str"",values);
  aggregates.put(""String_Node_Str"",defaultVal);
  aggregates.put(""String_Node_Str"",0);
  aggregates.put(""String_Node_Str"",META);
  try {
switch (format) {
case BINARY:
      emitBinary(aggregates,schema,out);
    break;
case JSON:
  emitJSON(aggregates,schema,out);
break;
}
}
 catch (IOException e) {
throw new RuntimeException(""String_Node_Str"",e);
}
}",0.9989858012170384
59250,"@Test public void CountToJSON() throws Exception {
  Aggregates<Integer> ref=count;
  Schema s=new SchemaComposer().addResource(""String_Node_Str"").resolved();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  AggregateSerializer.serialize(ref,baos,s,FORMAT.JSON,new Converters.FromCount(s));
  String output=new String(baos.toByteArray(),""String_Node_Str"");
  try (JsonParser p=new JsonFactory().createJsonParser(output)){
    ObjectMapper mapper=new ObjectMapper();
    JsonNode n=mapper.readTree(p);
    assertEquals(ref.lowX(),n.get(""String_Node_Str"").getIntValue());
    assertEquals(ref.lowY(),n.get(""String_Node_Str"").getIntValue());
    assertEquals(ref.highX(),n.get(""String_Node_Str"").getIntValue());
    assertEquals(ref.highY(),n.get(""String_Node_Str"").getIntValue());
  }
 }","@Test public void CountToJSON() throws Exception {
  Aggregates<Integer> ref=count;
  Schema s=new SchemaComposer().addResource(""String_Node_Str"").resolved();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  AggregateSerializer.serialize(ref,baos,s,FORMAT.JSON,new Converters.FromCount(s));
  String output=new String(baos.toByteArray(),""String_Node_Str"");
  try (JsonParser p=new JsonFactory().createJsonParser(output)){
    ObjectMapper mapper=new ObjectMapper();
    JsonNode n=mapper.readTree(p);
    int xOffset=n.get(""String_Node_Str"").getIntValue();
    int yOffset=n.get(""String_Node_Str"").getIntValue();
    int highX=n.get(""String_Node_Str"").getIntValue() + xOffset;
    int highY=n.get(""String_Node_Str"").getIntValue() + yOffset;
    assertEquals(ref.lowX(),xOffset);
    assertEquals(ref.lowY(),yOffset);
    assertEquals(ref.highX(),highX);
    assertEquals(ref.highY(),highY);
  }
 }",0.755868544600939
59251,"@BeforeClass public static void load() throws Exception {
  Glyphset<Rectangle2D,Color> glyphs=GlyphsetUtils.autoLoad(new File(""String_Node_Str""),.1,DynamicQuadTree.<Rectangle2D,Color>make());
  Renderer r=new ParallelRenderer();
  AffineTransform vt=new AffineTransform(241.4615556310524,0.0,0.0,241.4615556310524,238.49100176586487,236.13546883394775);
  Selector<Rectangle2D> s=TouchesPixel.make(glyphs);
  count=r.aggregate(glyphs,s,new Numbers.Count<Object>(),vt,500,500);
  rles=r.aggregate(glyphs,s,new Categories.CountCategories<Color>(Util.COLOR_SORTER),vt,500,500);
}","@BeforeClass public static void load() throws Exception {
  Glyphset<Rectangle2D,Color> glyphs=GlyphsetUtils.autoLoad(new File(""String_Node_Str""),.1,DynamicQuadTree.<Rectangle2D,Color>make());
  Renderer r=new ParallelRenderer();
  AffineTransform vt=new AffineTransform(241.4615556310524,0.0,0.0,241.4615556310524,238.49100176586487,236.13546883394775);
  Selector<Rectangle2D> s=TouchesPixel.make(glyphs);
  count=r.aggregate(glyphs,s,new Numbers.Count<Object>(),vt,500,500);
  cocs=r.aggregate(glyphs,s,new Categories.CountCategories<Color>(Util.COLOR_SORTER),vt,500,500);
}",0.9948006932409011
59252,"/** 
 * What bounding box closely contains all of the glyphs passed.
 */
public static Rectangle2D bounds(Rectangle2D... rs){
  Rectangle2D bounds=new Rectangle2D.Double(0,0,-1,-1);
  for (  Rectangle2D r : rs) {
    if (r != null) {
      add(bounds,r);
    }
  }
  return bounds;
}","/** 
 * What bounding box closely contains all of the glyphs passed.
 */
public static Rectangle2D bounds(Rectangle2D... rs){
  Rectangle2D bounds=rs[0].getBounds2D();
  for (  Rectangle2D r : rs) {
    if (r != null) {
      add(bounds,r);
    }
  }
  return bounds;
}",0.9130434782608696
59253,"/** 
 * After carving out seams, any crossing seams need to be straightened to preserve the 1:1 matching between rows. If items are matched like so and A is carved .... A   B            B \ /     ===>   / / \           /  C   D            C Notice that B now points off the grid and C has no match.  But it is easy to patch up, all diagonals happen in pairs, so Just set B to match DOWN instead of LEFT and you are fixed.  Fixes only need to happen along the old seam where the link was not down.
 * @param seam  The seam removed
 * @param oldMatching What the matching values were (used to check for non-down links)
 * @param newMatching The post-carved links (updated in place)
 */
public static Aggregates<Integer> repairMatching(final int[] seam,Aggregates<Integer> oldMatching,Aggregates<Integer> newMatching){
  for (int i=0; i < seam.length; i++) {
    int x=seam[i];
    int y=i + oldMatching.lowY();
    int oldDir=oldMatching.get(x,y);
    if (oldDir == 1) {
      newMatching.set(x - 1,y,ZERO);
    }
 else     if (oldDir == -1) {
      newMatching.set(x,y,ZERO);
    }
  }
  return newMatching;
}","/** 
 * After carving out seams, any crossing seams need to be straightened to preserve the 1:1 matching between rows. If items are matched like so and A is carved .... A   B            B \ /     ===>   / / \           /  C   D            C Notice that B now points off the grid and C has no match.  But it is easy to patch up, all diagonals happen in pairs, so Just set B to match DOWN instead of LEFT and you are fixed.  Fixes only need to happen along the old seam where the link was not down.
 * @param seam  The seam removed
 * @param oldMatching What the matching values were (used to check for non-down links)
 * @param newMatching The post-carved links (updated in place)
 */
public static Aggregates<Integer> repairMatching(final int[] seam,Aggregates<Integer> oldMatching,Aggregates<Integer> newMatching){
  for (int i=0; i < seam.length; i++) {
    int x=seam[i];
    int y=i + oldMatching.lowY();
    int oldDir=oldMatching.get(x,y);
    if (oldDir == 1) {
      newMatching.set(x,y,ZERO);
    }
 else     if (oldDir == -1) {
      newMatching.set(x - 1,y,ZERO);
    }
  }
  return newMatching;
}",0.934115523465704
59254,"public Aggregates<A> vertical(Aggregates<? extends A> aggregates,Renderer rend){
  Aggregates<Double> pixelEnergy=rend.transfer(aggregates,new Energy<>(delta));
  EdgeEnergy energy=new EdgeEnergy(pixelEnergy);
  Aggregates<Integer> matchings=AggregateUtils.make(aggregates,Integer.MIN_VALUE);
  for (int k=aggregates.lowY(); k < aggregates.highY(); k++) {
    double F1=0, F2=0, F3=0;
    for (int m=aggregates.lowX(); m < aggregates.highX(); m++) {
      double CZ=energy.between(m,k,m,k + 1);
      double CY=energy.between(m,k,m - 1,k + 1);
      double BZ=energy.between(m - 1,k,m,k + 1);
      double AX=energy.between(m - 2,k,m - 2,k + 1);
      if (matchings.get(m - 2,k) == m - 1) {
        double FA=F1 + CZ;
        double FB=F3 + CY + BZ+ AX;
        if (FA > FB) {
          matchings.set(k,m,0);
          F3=F2;
          F2=F1;
          F1=FA;
        }
 else {
          matchings.set(k,m,-1);
          matchings.set(k,m - 1,1);
          matchings.set(k,m - 2,0);
          F3=F2;
          F2=F1;
          F1=FB;
        }
      }
 else {
        double FA=F1 + CZ;
        double FB=F2 + CY + BZ;
        if (FA > FB) {
          matchings.set(k,m,0);
          F3=F2;
          F2=F1;
          F1=FA;
        }
 else {
          matchings.set(k,m,-1);
          matchings.set(k,m - 1,1);
          F3=F2;
          F2=F1;
          F1=FB;
        }
      }
    }
  }
  return null;
}","public Aggregates<A> vertical(Aggregates<? extends A> aggregates,Renderer rend){
  Aggregates<Double> pixelEnergy=rend.transfer(aggregates,new Energy<>(delta));
  EdgeEnergy energy=new EdgeEnergy(pixelEnergy);
  Aggregates<Integer> matchings=matchings(pixelEnergy,energy);
  double[] seamEnergies=new double[pixelEnergy.highX() - pixelEnergy.lowX()];
  for (int x=pixelEnergy.lowX(); x < pixelEnergy.highX(); x++) {
    int sourceX=x;
    for (int y=pixelEnergy.lowY(); y < pixelEnergy.highY(); y++) {
      int targetX=sourceX + matchings.get(sourceX,y);
      seamEnergies[x]+=energy.between(sourceX,y,targetX,y + 1);
      sourceX=targetX;
    }
  }
  SortedMap<Double,List<Integer>> seamOrder=new TreeMap<>();
  for (int i=0; i < seamEnergies.length; ++i) {
    Double seamEnergy=seamEnergies[i];
    List<Integer> idxs=seamOrder.get(seamEnergy);
    if (idxs == null) {
      idxs=new ArrayList<>();
    }
    int size=idxs.size() + 1;
    idxs.add(((size + 1) * 7253) % size,i);
    seamOrder.put(seamEnergy,idxs);
  }
  @SuppressWarnings(""String_Node_Str"") Aggregates<A> result=(Aggregates<A>)aggregates;
  for (int i=0; i < seams; i++) {
    List<Integer> headList=seamOrder.get(seamOrder.firstKey());
    int targetSeam=headList.get(0);
    headList.remove(0);
    if (headList.size() == 0) {
      seamOrder.remove(seamOrder.firstKey());
    }
    int[] seam=compileVSeam(targetSeam,matchings);
    result=carve(result,seam);
    matchings=carve(matchings,seam);
  }
  return result;
}",0.2191592005513439
59255,"public LocalCarve(Delta<A> delta,Direction dir,A empty,int seams){
  this.delta=delta;
  this.empty=empty;
  this.dir=dir;
  this.seams=seams;
}","/** 
 * @param delta Comparison function used to compute the energy matrix
 * @param dir Direction seams run
 * @param empty 
 * @param seams How many seams to remove
 */
public LocalCarve(Delta<A> delta,Direction dir,A empty,int seams){
  this.delta=delta;
  this.empty=empty;
  this.dir=dir;
  this.seams=seams;
}",0.6274509803921569
59256,"@Test public void testMidSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,0d);
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
      cumEng.set(x,y,(double)Math.abs(x - cumEng.highX() / 2));
    }
  }
  int[] seam=SeamCarving.Carve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (  int e : seam) {
    assertThat(e,is(4));
  }
}","@Test public void testMidSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,0d);
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
      cumEng.set(x,y,(double)Math.abs(x - cumEng.highX() / 2));
    }
  }
  int[] seam=SeamCarving.OptimalCarve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (  int e : seam) {
    assertThat(e,is(4));
  }
}",0.992161254199328
59257,"@Test public void testFindRightSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,0d);
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
      cumEng.set(x,y,(double)-x);
    }
  }
  int[] seam=SeamCarving.Carve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (int i=0; i < seam.length; i++) {
    assertThat(""String_Node_Str"" + i,seam[i],is(cumEng.highX() - 1));
  }
}","@Test public void testFindRightSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,0d);
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
      cumEng.set(x,y,(double)-x);
    }
  }
  int[] seam=SeamCarving.OptimalCarve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (int i=0; i < seam.length; i++) {
    assertThat(""String_Node_Str"" + i,seam[i],is(cumEng.highX() - 1));
  }
}",0.9927461139896372
59258,"@Test public void testFindLeftSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,0d);
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
      cumEng.set(x,y,(double)x);
    }
  }
  int[] seam=SeamCarving.Carve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (int i=0; i < seam.length; i++) {
    assertThat(""String_Node_Str"" + i,seam[i],is(0));
  }
}","@Test public void testFindLeftSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,0d);
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
      cumEng.set(x,y,(double)x);
    }
  }
  int[] seam=SeamCarving.OptimalCarve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (int i=0; i < seam.length; i++) {
    assertThat(""String_Node_Str"" + i,seam[i],is(0));
  }
}",0.9924487594390508
59259,"@Test public void testDiagSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,10d);
  for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
    cumEng.set(y,y,0d);
  }
  int[] seam=SeamCarving.Carve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (int i=0; i < seam.length; i++) {
    assertThat(seam[i],is(i));
  }
}","@Test public void testDiagSeam(){
  Aggregates<Double> cumEng=AggregateUtils.make(9,9,10d);
  for (int y=cumEng.lowY(); y < cumEng.highY(); y++) {
    cumEng.set(y,y,0d);
  }
  int[] seam=SeamCarving.OptimalCarve.findVSeam(cumEng);
  assertThat(seam.length,is(cumEng.highY() - cumEng.lowY()));
  for (int i=0; i < seam.length; i++) {
    assertThat(seam[i],is(i));
  }
}",0.990450204638472
59260,"/** 
 * Remove N seams.
 * @param aggregates Item to carve
 * @param dropList List of items to remove.  For x=int[A][B], x is the B'th x index to drop in row A (i.e., a sorted transpose of a seam list).
 */
public static <A>Aggregates<A> carveN(final Aggregates<? extends A> aggregates,final int[][] dropList){
  Aggregates<A> result=AggregateUtils.make(aggregates,(A)aggregates.defaultValue());
  for (int y=aggregates.lowY(); y < aggregates.highY(); y++) {
    int i=y - aggregates.lowY();
    int dropCount=0;
    for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
      if (dropList[i][dropCount] == x) {
        dropCount++;
        continue;
      }
      result.set(x - dropCount,y,aggregates.get(x,y));
    }
  }
  return result;
}","/** 
 * Remove N seams.
 * @param aggregates Item to carve
 * @param dropList List of items to remove.  For x=int[A][B], x is the B'th x index to drop in row A (i.e., a sorted transpose of a seam list).
 */
public static <A>Aggregates<A> carveN(final Aggregates<? extends A> aggregates,final int[][] dropList){
  Aggregates<A> result=AggregateUtils.make(aggregates.lowX(),aggregates.lowY(),aggregates.highX() - dropList[0].length,aggregates.highY(),(A)aggregates.defaultValue());
  for (int y=aggregates.lowY(); y < aggregates.highY(); y++) {
    int i=y - aggregates.lowY();
    int dropCount=0;
    for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
      if (dropList[i][dropCount] == x) {
        dropCount++;
        continue;
      }
      result.set(x - dropCount,y,aggregates.get(x,y));
    }
  }
  return result;
}",0.9469026548672568
59261,"/** 
 * Locate the indicated number of seams given the matchings and energy functions. Assumes the matching function is total (e.g., all values are -1/0/1). Will pick the lowest energy seams first.
 * @param seams Number of seams to remove
 * @param matchings Total matching
 * @param energy Energy function.
 * @return For x=int[A][B], x is the B'th x index to drop in row A
 */
private static int[][] computeDropList(int seams,Aggregates<Integer> matchings,Weights energy){
  double[] seamEnergies=new double[matchings.highX() - matchings.lowX()];
  for (int x=matchings.lowX(); x < matchings.highX(); x++) {
    int sourceX=x;
    for (int y=matchings.lowY(); y < matchings.highY() - 1; y++) {
      int targetX=sourceX + matchings.get(sourceX,y);
      seamEnergies[x - matchings.lowX()]+=energy.between(sourceX,y,targetX,y + 1);
      sourceX=targetX;
    }
  }
  SortedMap<Double,List<Integer>> seamOrder=new TreeMap<>();
  for (int i=0; i < seamEnergies.length; i++) {
    Double seamEnergy=seamEnergies[i];
    List<Integer> idxs=seamOrder.get(seamEnergy);
    if (idxs == null) {
      idxs=new ArrayList<>();
    }
    int size=idxs.size() + 1;
    idxs.add(((size + 1) * 7253) % size,i);
    seamOrder.put(seamEnergy,idxs);
  }
  int[][] seamPoints=new int[seams][];
  for (int i=0; i < seams; i++) {
    List<Integer> headList=seamOrder.get(seamOrder.firstKey());
    int targetSeam=headList.get(0);
    headList.remove(0);
    if (headList.size() == 0) {
      seamOrder.remove(seamOrder.firstKey());
    }
    seamPoints[i]=compileVSeam(targetSeam,matchings);
  }
  int[][] dropList=transpose(seamPoints);
  for (int i=0; i < dropList.length; i++) {
    Arrays.sort(dropList[i]);
  }
  return dropList;
}","/** 
 * Locate the indicated number of seams given the matchings and energy functions. Assumes the matching function is total (e.g., all values are -1/0/1). Will pick the lowest energy seams first.
 * @param seams Number of seams to remove
 * @param matchings Total matching
 * @param energy Energy function.
 * @return For x=int[A][B], x is the B'th x index to drop in row A
 */
private static int[][] computeDropList(int seams,Aggregates<Integer> matchings,Weights energy){
  double[] seamEnergies=new double[matchings.highX() - matchings.lowX()];
  for (int x=matchings.lowX(); x < matchings.highX(); x++) {
    int sourceX=x;
    for (int y=matchings.lowY(); y < matchings.highY() - 1; y++) {
      int targetX=sourceX + matchings.get(sourceX,y);
      seamEnergies[x - matchings.lowX()]+=energy.between(sourceX,y,targetX,y + 1);
      sourceX=targetX;
    }
  }
  SortedMap<Double,List<Integer>> seamOrder=new TreeMap<>();
  for (int i=0; i < seamEnergies.length; i++) {
    Double seamEnergy=seamEnergies[i];
    List<Integer> idxs=seamOrder.get(seamEnergy);
    if (idxs == null) {
      idxs=new ArrayList<>();
    }
    int size=idxs.size() + 1;
    idxs.add(((size + 1) * 7253) % size,i + matchings.lowX());
    seamOrder.put(seamEnergy,idxs);
  }
  int[][] seamPoints=new int[seams][];
  for (int i=0; i < seams; i++) {
    List<Integer> headList=seamOrder.get(seamOrder.firstKey());
    int targetSeam=headList.get(0);
    headList.remove(0);
    if (headList.size() == 0) {
      seamOrder.remove(seamOrder.firstKey());
    }
    seamPoints[i]=compileVSeam(targetSeam,matchings);
  }
  int[][] dropList=transpose(seamPoints);
  for (int i=0; i < dropList.length; i++) {
    Arrays.sort(dropList[i]);
  }
  return dropList;
}",0.9945007235890014
59262,"/** 
 * Tool to aggregate of pairs into pair of aggregates. In some ways, this is the converse of wrapping two aggregates into a composite with a Pairer. TODO: Is it possible to test if aggs already is a CompositeWrapper with the requested left/right values?
 */
public static final <L,R>CompositeWrapper<L,R,Pair<L,R>> convert(Aggregates<Pair<L,R>> aggs,L leftEmpty,R rightEmpty){
  Aggregates<L> leftAggs=AggregateUtils.make(aggs,leftEmpty);
  Aggregates<R> rightAggs=AggregateUtils.make(aggs,rightEmpty);
  for (int x=aggs.lowX(); x < aggs.highX(); x++) {
    for (int y=aggs.lowY(); y < aggs.lowY(); y++) {
      Pair<L,R> v=aggs.get(x,y);
      leftAggs.set(x,y,v.left);
      rightAggs.set(x,y,v.right);
    }
  }
  return new CompositeWrapper<>(leftAggs,rightAggs,new Pairer<L,R>());
}","/** 
 * Tool to aggregate of pairs into pair of aggregates. In some ways, this is the converse of wrapping two aggregates into a composite with a Pairer. TODO: Is it possible to test if aggs already is a CompositeWrapper with the requested left/right values?
 */
public static final <L,R>CompositeWrapper<L,R,Pair<L,R>> convert(Aggregates<Pair<L,R>> aggs,L leftEmpty,R rightEmpty){
  Aggregates<L> leftAggs=AggregateUtils.make(aggs,leftEmpty);
  Aggregates<R> rightAggs=AggregateUtils.make(aggs,rightEmpty);
  for (int x=aggs.lowX(); x < aggs.highX(); x++) {
    for (int y=aggs.lowY(); y < aggs.highY(); y++) {
      Pair<L,R> v=aggs.get(x,y);
      leftAggs.set(x,y,v.left);
      rightAggs.set(x,y,v.right);
    }
  }
  return new CompositeWrapper<>(leftAggs,rightAggs,new Pairer<L,R>());
}",0.9955835962145112
59263,"public static void main(String[] args) throws Exception {
  Rectangle viewBounds=new Rectangle(0,0,500,500);
  Renderer renderer=new ParallelRenderer();
  Glyphset<Point2D,CategoricalCounts<String>> populationSource=ar.app.components.sequentialComposer.OptionDataset.CENSUS_TRACTS.dataset();
  AffineTransform viewTransform=Util.zoomFit(populationSource.bounds(),viewBounds.width,viewBounds.height);
  Aggregates<Integer> population=renderer.aggregate(populationSource,TouchesPixel.make(populationSource),new Numbers.Count<>(),viewTransform,viewBounds.width,viewBounds.height);
  System.out.println(""String_Node_Str"");
  File statesSource=new File(""String_Node_Str"");
  final Map<String,Shape> rawShapes=GeoJSONTools.flipY(GeoJSONTools.loadShapesJSON(statesSource,false));
  Glyphset<Shape,String> states=WrappedCollection.wrap(rawShapes.entrySet(),new Shaper.MapValue<String,Shape>(),new Valuer.MapKey<String,Shape>());
  System.out.println(""String_Node_Str"");
  Aggregates<String> labels=renderer.aggregate(states,TouchesPixel.make(states),new General.Last<>(""String_Node_Str""),viewTransform,viewBounds.width,viewBounds.height);
  Aggregates<Pair<String,Integer>> pairs=CompositeWrapper.wrap(labels,population);
  System.out.println(""String_Node_Str"");
  Transfer.Specialized<Pair<String,Integer>,Pair<String,Integer>> carver=new SeamCarving.Carve<>(new DeltaPair(),Direction.V,EMPTY);
  final Transfer<Integer,Color> colorPopulation=Seq.start(new General.ValuerTransfer<>(new MathValuers.Log<Integer>(10d),0d)).then(new General.Replace<>(Double.NEGATIVE_INFINITY,0d,0d)).then(new Numbers.Interpolate<Double>(new Color(255,0,0,25),new Color(255,0,0,255)));
  final Transfer<String,Color> color2012=new General.MapWrapper<>(results2012,Color.gray);
  final Transfer<String,Color> color2008=new General.MapWrapper<>(results2008,Color.gray);
  int step=100;
  for (int seams=0; seams < viewBounds.width; seams+=step) {
    System.out.println(""String_Node_Str"" + seams + ""String_Node_Str"");
    final Transfer.Specialized<Pair<String,Integer>,Pair<String,Integer>> carve=new NTimes.Specialized<>(seams,carver);
    Aggregates<Pair<String,Integer>> carved=renderer.transfer(pairs,carve);
    CompositeWrapper<String,Integer,?> composite=CompositeWrapper.convert(carved,""String_Node_Str"",0);
    Aggregates<Integer> carvedPop=composite.right();
    Aggregates<String> carvedStates=composite.left();
    Aggregates<Color> popImg=renderer.transfer(carvedPop,colorPopulation.specialize(carvedPop));
    Aggregates<Color> states2012=renderer.transfer(carvedStates,color2012.specialize(carvedStates));
    Aggregates<Color> states2008=renderer.transfer(carvedStates,color2008.specialize(carvedStates));
    Util.writeImage(AggregateUtils.asImage(states2008),new File(String.format(""String_Node_Str"",seams)));
    Util.writeImage(AggregateUtils.asImage(states2012),new File(String.format(""String_Node_Str"",seams)));
    Util.writeImage(AggregateUtils.asImage(popImg),new File(String.format(""String_Node_Str"",seams)));
    System.out.println(""String_Node_Str"" + seams + ""String_Node_Str"");
  }
}","public static void main(String[] args) throws Exception {
  Rectangle viewBounds=new Rectangle(0,0,200,200);
  Renderer renderer=new ParallelRenderer();
  final Glyphset<Point2D,CategoricalCounts<String>> populationSource=ar.app.components.sequentialComposer.OptionDataset.CENSUS_TRACTS.dataset();
  final AffineTransform viewTransform=Util.zoomFit(populationSource.bounds(),viewBounds.width,viewBounds.height);
  final Aggregates<Integer> population=renderer.aggregate(populationSource,TouchesPixel.make(populationSource),new Numbers.Count<>(),viewTransform,viewBounds.width,viewBounds.height);
  System.out.println(""String_Node_Str"");
  File statesSource=new File(""String_Node_Str"");
  final Map<String,Shape> rawShapes=simplifyKeys(GeoJSONTools.flipY(GeoJSONTools.loadShapesJSON(statesSource,false)));
  final Glyphset<Shape,String> states=WrappedCollection.wrap(rawShapes.entrySet(),new Shaper.MapValue<String,Shape>(),new Valuer.MapKey<String,Shape>());
  System.out.println(""String_Node_Str"");
  Aggregates<String> labels=renderer.aggregate(states,TouchesPixel.make(states),new General.Last<>(""String_Node_Str""),viewTransform,viewBounds.width,viewBounds.height);
  Aggregates<Pair<String,Integer>> pairs=CompositeWrapper.wrap(labels,population);
  System.out.println(""String_Node_Str"");
  Transfer.Specialized<Pair<String,Integer>,Pair<String,Integer>> carver=new SeamCarving.Carve<>(new DeltaPair(),Direction.V,EMPTY);
  final Transfer<Integer,Color> colorPopulation=Seq.start(new General.ValuerTransfer<>(new MathValuers.Log<Integer>(10d),0d)).then(new General.Replace<>(Double.NEGATIVE_INFINITY,0d,0d)).then(new Numbers.Interpolate<Double>(new Color(255,0,0,25),new Color(255,0,0,255)));
  final Transfer<String,Color> color2012=new General.MapWrapper<>(results2012,Color.gray);
  final Transfer<String,Color> color2008=new General.MapWrapper<>(results2008,Color.gray);
  int step=100;
  for (int seams=0; seams < viewBounds.width; seams+=step) {
    System.out.println(""String_Node_Str"" + seams + ""String_Node_Str"");
    final Transfer.Specialized<Pair<String,Integer>,Pair<String,Integer>> carve=new NTimes.Specialized<>(seams,carver);
    Aggregates<Pair<String,Integer>> carved=renderer.transfer(pairs,carve);
    CompositeWrapper<String,Integer,?> composite=CompositeWrapper.convert(carved,""String_Node_Str"",0);
    Aggregates<Integer> carvedPop=composite.right();
    Aggregates<String> carvedStates=composite.left();
    Aggregates<Color> popImg=renderer.transfer(carvedPop,colorPopulation.specialize(carvedPop));
    Aggregates<Color> states2012=renderer.transfer(carvedStates,color2012.specialize(carvedStates));
    Aggregates<Color> states2008=renderer.transfer(carvedStates,color2008.specialize(carvedStates));
    Util.writeImage(AggregateUtils.asImage(popImg),new File(String.format(""String_Node_Str"",seams)));
    Util.writeImage(AggregateUtils.asImage(states2008),new File(String.format(""String_Node_Str"",seams)));
    Util.writeImage(AggregateUtils.asImage(states2012),new File(String.format(""String_Node_Str"",seams)));
    System.out.println(""String_Node_Str"" + seams + ""String_Node_Str"");
  }
}",0.9458588462777956
59264,"public boolean validPoint(int x,int y){
  return x >= pixelEnergy.lowX() && x < pixelEnergy.highX() && y >= pixelEnergy.lowY() && x < pixelEnergy.highY();
}","public boolean validPoint(int x,int y){
  return x >= pixelEnergy.lowX() && x < pixelEnergy.highX() && y >= pixelEnergy.lowY() && y < pixelEnergy.highY();
}",0.9935897435897436
59265,"public Aggregates<A> vertical(Aggregates<? extends A> aggregates,Renderer rend){
  Aggregates<Double> pixelEnergy=rend.transfer(aggregates,new Energy<>(delta));
  EdgeEnergy energy=new EdgeEnergy(pixelEnergy);
  Aggregates<Integer> matchings=matchings(pixelEnergy,energy);
  double[] seamEnergies=new double[pixelEnergy.highX() - pixelEnergy.lowX()];
  for (int x=pixelEnergy.lowX(); x < pixelEnergy.highX(); x++) {
    int sourceX=x;
    for (int y=pixelEnergy.lowY(); y < pixelEnergy.highY(); y++) {
      int targetX=sourceX + matchings.get(sourceX,y);
      seamEnergies[x]+=energy.between(sourceX,y,targetX,y + 1);
      sourceX=targetX;
    }
  }
  SortedMap<Double,List<Integer>> seamOrder=new TreeMap<>();
  for (int i=0; i < seamEnergies.length; ++i) {
    Double seamEnergy=seamEnergies[i];
    List<Integer> idxs=seamOrder.get(seamEnergy);
    if (idxs == null) {
      idxs=new ArrayList<>();
    }
    int size=idxs.size() + 1;
    idxs.add(((size + 1) * 7253) % size,i);
    seamOrder.put(seamEnergy,idxs);
  }
  @SuppressWarnings(""String_Node_Str"") Aggregates<A> result=(Aggregates<A>)aggregates;
  for (int i=0; i < seams; i++) {
    List<Integer> headList=seamOrder.get(seamOrder.firstKey());
    int targetSeam=headList.get(0);
    headList.remove(0);
    if (headList.size() == 0) {
      seamOrder.remove(seamOrder.firstKey());
    }
    int[] seam=compileVSeam(targetSeam,matchings);
    result=carve(result,seam);
    matchings=carve(matchings,seam);
  }
  return result;
}","public Aggregates<A> vertical(Aggregates<? extends A> aggregates,Renderer rend){
  Aggregates<Double> pixelEnergy=rend.transfer(aggregates,new Energy<>(delta));
  EdgeEnergy energy=new EdgeEnergy(pixelEnergy);
  Aggregates<Integer> matchings=matchings(pixelEnergy,energy);
  double[] seamEnergies=new double[pixelEnergy.highX() - pixelEnergy.lowX()];
  for (int x=pixelEnergy.lowX(); x < pixelEnergy.highX(); x++) {
    int sourceX=x;
    for (int y=pixelEnergy.lowY(); y < pixelEnergy.highY() - 1; y++) {
      int targetX=sourceX + matchings.get(sourceX,y);
      seamEnergies[x]+=energy.between(sourceX,y,targetX,y + 1);
      sourceX=targetX;
    }
  }
  SortedMap<Double,List<Integer>> seamOrder=new TreeMap<>();
  for (int i=0; i < seamEnergies.length; ++i) {
    Double seamEnergy=seamEnergies[i];
    List<Integer> idxs=seamOrder.get(seamEnergy);
    if (idxs == null) {
      idxs=new ArrayList<>();
    }
    int size=idxs.size() + 1;
    idxs.add(((size + 1) * 7253) % size,i);
    seamOrder.put(seamEnergy,idxs);
  }
  @SuppressWarnings(""String_Node_Str"") Aggregates<A> result=(Aggregates<A>)aggregates;
  for (int i=0; i < seams; i++) {
    List<Integer> headList=seamOrder.get(seamOrder.firstKey());
    int targetSeam=headList.get(0);
    headList.remove(0);
    if (headList.size() == 0) {
      seamOrder.remove(seamOrder.firstKey());
    }
    int[] seam=compileVSeam(targetSeam,matchings);
    result=carve(result,seam);
    matchings=carve(matchings,seam);
  }
  return result;
}",0.9986639946559788
59266,"public static final int[] compileVSeam(int x,Aggregates<Integer> matchings){
  final int[] seam=new int[matchings.highY() - matchings.lowY()];
  for (int y=0; y < seam.length; y++) {
    seam[y]=x;
    x=x + matchings.get(x,y);
  }
  return seam;
}","public static final int[] compileVSeam(int x,Aggregates<Integer> matchings){
  final int[] seam=new int[matchings.highY() - matchings.lowY()];
  for (int y=matchings.lowY(); y < seam.length; y++) {
    seam[y]=x;
    x=x + matchings.get(x,y);
  }
  return seam;
}",0.9667318982387476
59267,"/** 
 * Match each pixel in each row with another pixel in the next row down. All matchings are 1:1 and the total matching maximizes the sum of the energy  in pairs between the rows.  This maximization has been shown to increase  the variance, therefore it tends to produce seams that are either clearly  important or clearly not.   This is a strictly local calculation.  There are other methods (method w2 in particular) that also take into account global information. 
 * @param aggregates
 * @param energy
 * @return
 */
public static final Aggregates<Integer> matchings(Aggregates<Double> aggregates,EdgeEnergy energy){
  Aggregates<Integer> matchings=AggregateUtils.make(aggregates,Integer.MIN_VALUE);
  for (int y=aggregates.lowY(); y < aggregates.highY(); y++) {
    double F1=0, F2=0, F3=0;
    for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
      double CZ=energy.between(x,y,x,y + 1);
      double CY=energy.between(x,y,x - 1,y + 1);
      double BZ=energy.between(x - 1,y,x,y + 1);
      double AX=energy.between(x - 2,y,x - 2,y + 1);
      if (matchings.get(x - 2,y) == x - 1) {
        double FA=F1 + CZ;
        double FB=F3 + CY + BZ+ AX;
        if (FA > FB) {
          matchings.set(x,y,0);
          F3=F2;
          F2=F1;
          F1=FA;
        }
 else {
          matchings.set(x,y,-1);
          matchings.set(x - 1,y,1);
          matchings.set(x - 2,y,0);
          F3=F2;
          F2=F1;
          F1=FB;
        }
      }
 else {
        double FA=F1 + CZ;
        double FB=F2 + CY + BZ;
        if (FA > FB) {
          matchings.set(x,y,0);
          F3=F2;
          F2=F1;
          F1=FA;
        }
 else {
          matchings.set(x,y,-1);
          matchings.set(x - 1,y,1);
          F3=F2;
          F2=F1;
          F1=FB;
        }
      }
    }
  }
  return matchings;
}","public static final Aggregates<Integer> matchings(Aggregates<Double> aggregates,EdgeEnergy energy){
  Aggregates<Integer> matchings=AggregateUtils.make(aggregates,Integer.MIN_VALUE);
  for (int y=aggregates.lowY(); y < aggregates.highY(); y++) {
    double F1=0, F2=0, F3=0;
    for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
      double CZ=energy.between(x,y,x,y + 1);
      double CY=energy.between(x,y,x - 1,y + 1);
      double BZ=energy.between(x - 1,y,x,y + 1);
      double AX=energy.between(x - 2,y,x - 2,y + 1);
      if (matchings.get(x - 2,y) == x - 1) {
        double FA=F1 + CZ;
        double FB=F3 + CY + BZ+ AX;
        if (FA >= FB) {
          matchings.set(x,y,ZERO);
          F3=F2;
          F2=F1;
          F1=FA;
        }
 else {
          matchings.set(x,y,NEGATIVE_ONE);
          matchings.set(x - 1,y,ONE);
          matchings.set(x - 2,y,ZERO);
          F3=F2;
          F2=F1;
          F1=FB;
        }
      }
 else {
        double FA=F1 + CZ;
        double FB=F2 + CY + BZ;
        if (FA >= FB) {
          matchings.set(x,y,ZERO);
          F3=F2;
          F2=F1;
          F1=FA;
        }
 else {
          matchings.set(x,y,NEGATIVE_ONE);
          matchings.set(x - 1,y,ONE);
          F3=F2;
          F2=F1;
          F1=FB;
        }
      }
    }
  }
  return matchings;
}",0.7164084729687006
59268,"public void transferDefaults(){
  OptionDataset od=datasets.getItemAt(datasets.getSelectedIndex());
  aggregators.setSelectedItem(od.defaultAggregator());
  transferBuilder.configureTo(od.defaultTransfers());
  actionProvider.fireActionListeners();
}","public void transferDefaults(){
  OptionDataset<?,?> od=datasets.getItemAt(datasets.getSelectedIndex());
  aggregators.setSelectedItem(od.defaultAggregator());
  transferBuilder.configureTo(od.defaultTransfers());
  actionProvider.fireActionListeners();
}",0.99009900990099
59269,"public void configureTo(final List<OptionTransfer> transfers){
  for (  TransferRow tr : transferRows) {
    center.remove(tr);
  }
  transferRows.clear();
  for (int i=0; i < transfers.size(); i++) {
    TransferRow tr=addTransferRow();
    tr.setTransfer(transfers.get(i));
  }
}","public void configureTo(final List<OptionTransfer<?>> transfers){
  for (  TransferRow tr : transferRows) {
    center.remove(tr);
  }
  transferRows.clear();
  for (int i=0; i < transfers.size(); i++) {
    TransferRow tr=addTransferRow();
    tr.setTransfer(transfers.get(i));
  }
}",0.9946902654867256
59270,"/** 
 * Write a buffered image to a file.
 */
public static void writeImage(BufferedImage img,File f){
  try {
    if (f.getParentFile() != null && !f.getParentFile().exists()) {
      f.getParentFile().mkdirs();
    }
    if (!f.getName().toUpperCase().endsWith(""String_Node_Str"")) {
      f=new File(f.getName() + ""String_Node_Str"");
    }
    if (!ImageIO.write(img,""String_Node_Str"",f)) {
      throw new RuntimeException(""String_Node_Str"" + f.getName());
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Write a buffered image to a file.
 */
public static void writeImage(final BufferedImage src,File f){
  try {
    if (f.getParentFile() != null && !f.getParentFile().exists()) {
      f.getParentFile().mkdirs();
    }
    BufferedImage noAlpha=new BufferedImage(src.getWidth(),src.getHeight(),BufferedImage.TYPE_INT_RGB);
    Color bgColor=Color.white;
    for (int x=0; x < src.getWidth(); x++) {
      for (int y=0; y < src.getHeight(); y++) {
        Color fgColor=new Color(src.getRGB(x,y),true);
        int r, g, b;
        r=fgColor.getRed() * fgColor.getAlpha() + bgColor.getRed() * (255 - fgColor.getAlpha());
        g=fgColor.getGreen() * fgColor.getAlpha() + bgColor.getGreen() * (255 - fgColor.getAlpha());
        b=fgColor.getBlue() * fgColor.getAlpha() + bgColor.getBlue() * (255 - fgColor.getAlpha());
        Color result=new Color(r / 255,g / 255,b / 255);
        noAlpha.setRGB(x,y,result.getRGB());
      }
    }
    if (!f.getName().toUpperCase().endsWith(""String_Node_Str"")) {
      f=new File(f.getName() + ""String_Node_Str"");
    }
    if (!ImageIO.write(noAlpha,""String_Node_Str"",f)) {
      throw new RuntimeException(""String_Node_Str"" + f.getName());
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.5887590428491931
59271,"public <A,B>void changeDisplay() throws Exception {
  ARComponent old=this.display;
  if (old != null) {
    frame.remove(old);
  }
  Aggregates<?> aggs=remoteRender(host,port,dataset(),aggregate(),remoteTransfers());
  ARComponent newDisplay=new SimpleDisplay(aggs,localTransfer(),renderer);
  frame.add(newDisplay,BorderLayout.CENTER);
  this.display=newDisplay;
  frame.revalidate();
}","public <A,B>void changeDisplay() throws Exception {
  ARComponent old=this.display;
  if (old != null) {
    frame.remove(old);
  }
  Aggregates<?> aggs=remoteRender(host,port,dataset(),aggregate(),remoteTransfers());
  ARComponent newDisplay=new TransferDisplay(aggs,localTransfer(),renderer);
  frame.add(newDisplay,BorderLayout.CENTER);
  this.display=newDisplay;
  frame.revalidate();
}",0.9820051413881749
59272,"@SuppressWarnings(""String_Node_Str"") public static <T>T convert(Number v,Class<T> t){
  if (t.equals(Double.class)) {
    return (T)(Double)v.doubleValue();
  }
  if (t.equals(Integer.class)) {
    return (T)(Integer)v.intValue();
  }
  if (t.equals(Float.class)) {
    return (T)(Float)v.floatValue();
  }
  if (t.equals(Long.class)) {
    return (T)(Long)v.longValue();
  }
  if (t.equals(Short.class)) {
    return (T)(Short)v.shortValue();
  }
  if (t.equals(Boolean.class)) {
    return (T)Boolean.FALSE;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + t.getSimpleName());
}","public static <T>T convert(Number v,Class<T> t){
  if (t.equals(Double.class)) {
    return (T)(Double)v.doubleValue();
  }
  if (t.equals(Integer.class)) {
    return (T)(Integer)v.intValue();
  }
  if (t.equals(Float.class)) {
    return (T)(Float)v.floatValue();
  }
  if (t.equals(Long.class)) {
    return (T)(Long)v.longValue();
  }
  if (t.equals(Short.class)) {
    return (T)(Short)v.shortValue();
  }
  if (t.equals(Boolean.class)) {
    return (T)Boolean.FALSE;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + t.getSimpleName());
}",0.9680207433016422
59273,"@SuppressWarnings(""String_Node_Str"") protected static <IN,MID,OUT>Transfer extend(Transfer<IN,MID> first,Transfer<MID,OUT> second){
  if (first == null) {
    return second;
  }
  if (second == null) {
    return first;
  }
  if (first instanceof Seq) {
    return ((Seq<IN,?,MID>)first).then(second);
  }
  return new Seq<>(first,second);
}","protected static <IN,MID,OUT>Transfer extend(Transfer<IN,MID> first,Transfer<MID,OUT> second){
  if (first == null) {
    return second;
  }
  if (second == null) {
    return first;
  }
  if (first instanceof Seq) {
    return ((Seq<IN,?,MID>)first).then(second);
  }
  return new Seq<>(first,second);
}",0.9426356589147288
59274,"public Controls(){
  super(""String_Node_Str"");
  this.setLayout(new GridLayout(1,0));
  add(new LabeledItem(""String_Node_Str"",spinner));
  add(aboveColor);
  add(belowColor);
  spinner.addChangeListener(actionProvider.changeDelegate());
  aboveColor.addActionListener(actionProvider.actionDelegate());
  belowColor.addActionListener(actionProvider.actionDelegate());
}","public Controls(){
  super(""String_Node_Str"");
  add(new LabeledItem(""String_Node_Str"",spinner));
  spinner.addChangeListener(actionProvider.changeDelegate());
}",0.6086956521739131
59275,"@Override public void actionPerformed(ActionEvent e){
  OptionDataset od=datasets.getItemAt(datasets.getSelectedIndex());
  aggregators.setSelectedItem(od.defaultAggregator());
  transfers.configureTo(od.defaultTransfers());
}","@Override public void actionPerformed(ActionEvent e){
  OptionDataset od=datasets.getItemAt(datasets.getSelectedIndex());
  aggregators.setSelectedItem(od.defaultAggregator());
  transfers.configureTo(od.defaultTransfers());
  actionProvider.fireActionListeners();
}",0.91869918699187
59276,"public SequentialComposer(){
  AppUtil.loadStaticItems(datasets,OptionDataset.class,OptionDataset.class,""String_Node_Str"");
  AppUtil.loadStaticItems(aggregators,OptionAggregator.class,OptionAggregator.class,""String_Node_Str"");
  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  datasets.addActionListener(actionProvider.actionDelegate());
  datasets.addItemListener(actionProvider.itemDelegate());
  aggregators.addActionListener(actionProvider.actionDelegate());
  aggregators.addItemListener(actionProvider.itemDelegate());
  transfers.addActionListener(actionProvider.actionDelegate());
  JPanel ds=new JPanel();
  ds.setLayout(new BorderLayout());
  ds.add(datasets,BorderLayout.CENTER);
  ds.add(transferDefaults,BorderLayout.EAST);
  this.add(new LabeledItem(""String_Node_Str"",ds));
  this.add(new LabeledItem(""String_Node_Str"",aggregators));
  this.add(new LabeledItem(""String_Node_Str"",transfers));
  transferDefaults.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      OptionDataset od=datasets.getItemAt(datasets.getSelectedIndex());
      aggregators.setSelectedItem(od.defaultAggregator());
      transfers.configureTo(od.defaultTransfers());
    }
  }
);
}","public SequentialComposer(){
  AppUtil.loadStaticItems(datasets,OptionDataset.class,OptionDataset.class,""String_Node_Str"");
  AppUtil.loadStaticItems(aggregators,OptionAggregator.class,OptionAggregator.class,""String_Node_Str"");
  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  datasets.addActionListener(actionProvider.actionDelegate());
  datasets.addItemListener(actionProvider.itemDelegate());
  aggregators.addActionListener(actionProvider.actionDelegate());
  aggregators.addItemListener(actionProvider.itemDelegate());
  transfers.addActionListener(actionProvider.actionDelegate());
  JPanel ds=new JPanel();
  ds.setLayout(new BorderLayout());
  ds.add(datasets,BorderLayout.CENTER);
  ds.add(transferDefaults,BorderLayout.EAST);
  this.add(new LabeledItem(""String_Node_Str"",ds));
  this.add(new LabeledItem(""String_Node_Str"",aggregators));
  this.add(new LabeledItem(""String_Node_Str"",transfers));
  transferDefaults.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      OptionDataset od=datasets.getItemAt(datasets.getSelectedIndex());
      aggregators.setSelectedItem(od.defaultAggregator());
      transfers.configureTo(od.defaultTransfers());
      actionProvider.fireActionListeners();
    }
  }
);
}",0.9824701195219124
59277,"public void dataset(Glyphset<?,?> data,Aggregator<?,?> aggregator,Transfer<?,?> transfer){
  this.dataset=data;
  this.aggregator=aggregator;
  this.transfer(transfer);
  this.aggregates=null;
  this.repaint();
}","public void dataset(Glyphset<?,?> data,Aggregator<?,?> aggregator,Transfer<?,?> transfer){
  this.dataset=data;
  this.aggregator=aggregator;
  this.transfer(transfer);
  aggregates(null,null);
  fullRender=true;
  renderError=false;
  this.repaint();
}",0.8258064516129032
59278,"@Override public CategoricalCounts<T> identity(){
  return new CategoricalCounts<>();
}","@Override public CategoricalCounts<T> identity(){
  return new CategoricalCounts<>(comp);
}",0.9775280898876404
59279,public Aggregates<? extends OUT> process(Aggregates<? extends IN> aggregates);,public Aggregates<OUT> process(Aggregates<? extends IN> aggregates);,0.9315068493150684
59280,"/** 
 * From a set of color aggregates, make a new image.
 */
public static BufferedImage asImage(Aggregates<Color> aggs,int width,int height,Color background){
  if (aggs instanceof ImageAggregates) {
    return ((ImageAggregates)aggs).image();
  }
  BufferedImage i=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  Graphics g=i.getGraphics();
  g.setColor(background);
  g.fillRect(0,0,width,height);
  g.dispose();
  for (int x=Math.max(0,aggs.lowX()); x < Math.min(width,aggs.highX()); x++) {
    for (int y=Math.max(0,aggs.lowY()); y < Math.min(height,aggs.highY()); y++) {
      Color c=aggs.get(x,y);
      if (c != null) {
        i.setRGB(x,y,c.getRGB());
      }
    }
  }
  return i;
}","/** 
 * From a set of color aggregates, make a new image.
 */
public static BufferedImage asImage(Aggregates<? extends Color> aggs,int width,int height,Color background){
  if (aggs instanceof ImageAggregates) {
    return ((ImageAggregates)aggs).image();
  }
  BufferedImage i=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  Graphics g=i.getGraphics();
  g.setColor(background);
  g.fillRect(0,0,width,height);
  g.dispose();
  for (int x=Math.max(0,aggs.lowX()); x < Math.min(width,aggs.highX()); x++) {
    for (int y=Math.max(0,aggs.lowY()); y < Math.min(height,aggs.highY()); y++) {
      Color c=aggs.get(x,y);
      if (c != null) {
        i.setRGB(x,y,c.getRGB());
      }
    }
  }
  return i;
}",0.993006993006993
59281,"public <IN,OUT>Aggregates<OUT> transfer(Aggregates<? extends IN> aggregates,Transfer.Specialized<IN,OUT> t){
  if (t instanceof Transfer.ControlFlow) {
    return (Aggregates<OUT>)((Transfer.ControlFlow<IN,OUT>)t).process(aggregates);
  }
 else {
    Aggregates<OUT> result=AggregateUtils.make(aggregates,t.emptyValue());
    long taskSize=Math.max(TRANSFER_TASK_MIN,AggregateUtils.size(aggregates) / pool.getParallelism());
    PixelParallelTransfer<IN,OUT> task=new PixelParallelTransfer<>(aggregates,result,t,taskSize,aggregates.lowX(),aggregates.lowY(),aggregates.highX(),aggregates.highY());
    pool.invoke(task);
    return result;
  }
}","public <IN,OUT>Aggregates<OUT> transfer(Aggregates<? extends IN> aggregates,Transfer.Specialized<IN,OUT> t){
  if (t instanceof Transfer.ControlFlow) {
    return ((Transfer.ControlFlow<IN,OUT>)t).process(aggregates);
  }
 else {
    Aggregates<OUT> result=AggregateUtils.make(aggregates,t.emptyValue());
    long taskSize=Math.max(TRANSFER_TASK_MIN,AggregateUtils.size(aggregates) / pool.getParallelism());
    PixelParallelTransfer<IN,OUT> task=new PixelParallelTransfer<>(aggregates,result,t,taskSize,aggregates.lowX(),aggregates.lowY(),aggregates.highX(),aggregates.highY());
    pool.invoke(task);
    return result;
  }
}",0.9866247049567268
59282,"@Override public Aggregates<A> process(Aggregates<? extends A> aggregates){
  return (Aggregates<A>)cache.get(aggregates);
}","@Override public Aggregates<A> process(Aggregates<? extends A> aggregates){
  return cache.get(aggregates);
}",0.9356223175965666
59283,"public Aggregates<? extends A> vertical(Aggregates<? extends A> aggs){
  Transfer<A,Double> energy=new Seq<>(new Energy<>(delta),new CumulativeEnergy());
  Aggregates<Double> cumEng=Resources.DEFAULT_RENDERER.transfer(aggs,energy.specialize(aggs));
  int[] vseam=findVSeam(cumEng);
  Aggregates<A> rslt=AggregateUtils.make(aggs.lowX(),aggs.lowY(),aggs.highX() - 1,aggs.highY(),(A)aggs.defaultValue());
  for (int y=aggs.lowY(); y < aggs.highY(); y++) {
    int split=vseam[y - aggs.lowY()];
    for (int x=aggs.lowX(); x < split; x++) {
      rslt.set(x,y,aggs.get(x,y));
    }
    for (int x=split; x < aggs.highX(); x++) {
      rslt.set(x,y,aggs.get(x + 1,y));
    }
  }
  return rslt;
}","public Aggregates<A> vertical(Aggregates<? extends A> aggs){
  Transfer<A,Double> energy=new Seq<>(new Energy<>(delta),new CumulativeEnergy());
  Aggregates<? extends Double> cumEng=Resources.DEFAULT_RENDERER.transfer(aggs,energy.specialize(aggs));
  int[] vseam=findVSeam(cumEng);
  Aggregates<A> rslt=AggregateUtils.make(aggs.lowX(),aggs.lowY(),aggs.highX() - 1,aggs.highY(),(A)aggs.defaultValue());
  for (int y=aggs.lowY(); y < aggs.highY(); y++) {
    int split=vseam[y - aggs.lowY()];
    for (int x=aggs.lowX(); x < split; x++) {
      rslt.set(x,y,aggs.get(x,y));
    }
    for (int x=split; x < aggs.highX(); x++) {
      rslt.set(x,y,aggs.get(x + 1,y));
    }
  }
  return rslt;
}",0.836231884057971
59284,"public static int[] findVSeam(Aggregates<Double> cumEng){
  int[] vseam=new int[cumEng.highY() - cumEng.lowY()];
  double min=Integer.MAX_VALUE;
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    Double eng=cumEng.get(x,cumEng.highY() - 1);
    if (min > eng) {
      min=eng;
      vseam[vseam.length - 1]=x;
    }
  }
  for (int y=cumEng.highY() - 2; y >= cumEng.lowY(); y--) {
    int x=vseam[y - cumEng.lowY() + 1];
    double upLeft=x - 1 >= cumEng.lowX() ? cumEng.get(x - 1,y) : Double.MAX_VALUE;
    double up=cumEng.get(x,y);
    double upRight=x + 1 < cumEng.highX() ? cumEng.get(x + 1,y) : Double.MAX_VALUE;
    if (upLeft < up && upLeft < upRight) {
      x=x - 1;
    }
 else     if (up > upRight) {
      x=x + 1;
    }
    vseam[y - cumEng.lowY()]=x;
  }
  return vseam;
}","public static int[] findVSeam(Aggregates<? extends Double> cumEng){
  int[] vseam=new int[cumEng.highY() - cumEng.lowY()];
  double min=Integer.MAX_VALUE;
  for (int x=cumEng.lowX(); x < cumEng.highX(); x++) {
    Double eng=cumEng.get(x,cumEng.highY() - 1);
    if (min > eng) {
      min=eng;
      vseam[vseam.length - 1]=x;
    }
  }
  for (int y=cumEng.highY() - 2; y >= cumEng.lowY(); y--) {
    int x=vseam[y - cumEng.lowY() + 1];
    double upLeft=x - 1 >= cumEng.lowX() ? cumEng.get(x - 1,y) : Double.MAX_VALUE;
    double up=cumEng.get(x,y);
    double upRight=x + 1 < cumEng.highX() ? cumEng.get(x + 1,y) : Double.MAX_VALUE;
    if (upLeft < up && upLeft < upRight) {
      x=x - 1;
    }
 else     if (up > upRight) {
      x=x + 1;
    }
    vseam[y - cumEng.lowY()]=x;
  }
  return vseam;
}",0.9937421777221528
59285,"public Aggregates<? extends A> horizontal(Aggregates<? extends A> aggs){
  return TransposeWrapper.transpose(vertical(TransposeWrapper.transpose(aggs)));
}","public Aggregates<A> horizontal(Aggregates<? extends A> aggs){
  return TransposeWrapper.transpose(vertical(TransposeWrapper.transpose(aggs)));
}",0.9666666666666668
59286,"@Override public Aggregates<? extends Double> build(Aggregates<? extends Double> aggregates){
  Aggregates<Double> cached=AggregateUtils.make(aggregates,0d);
  for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
    cached.set(x,aggregates.lowY(),aggregates.get(x,aggregates.lowY()));
  }
  for (int y=aggregates.lowY() + 1; y < aggregates.highY(); y++) {
    for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
      double upLeft=x - 1 >= aggregates.lowX() ? cached.get(x - 1,y - 1) : Double.MAX_VALUE;
      double up=cached.get(x,y - 1);
      double upRight=x + 1 < aggregates.highX() ? cached.get(x + 1,y - 1) : Double.MAX_VALUE;
      double min=Math.min(upRight,Math.min(upLeft,up));
      cached.set(x,y,min + aggregates.get(x,y));
    }
  }
  return cached;
}","@Override public Aggregates<Double> build(Aggregates<? extends Double> aggregates){
  Aggregates<Double> cached=AggregateUtils.make(aggregates,0d);
  for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
    cached.set(x,aggregates.lowY(),aggregates.get(x,aggregates.lowY()));
  }
  for (int y=aggregates.lowY() + 1; y < aggregates.highY(); y++) {
    for (int x=aggregates.lowX(); x < aggregates.highX(); x++) {
      double upLeft=x - 1 >= aggregates.lowX() ? cached.get(x - 1,y - 1) : Double.MAX_VALUE;
      double up=cached.get(x,y - 1);
      double upRight=x + 1 < aggregates.highX() ? cached.get(x + 1,y - 1) : Double.MAX_VALUE;
      double min=Math.min(upRight,Math.min(upLeft,up));
      cached.set(x,y,min + aggregates.get(x,y));
    }
  }
  return cached;
}",0.9936061381074168
59287,"@Override public Aggregates<? extends OUT> build(Aggregates<? extends IN> aggs){
  Aggregates<OUT> left=null;
  for (int i=0; i < specialized.length; i++) {
    Aggregates<OUT> right=renderer.transfer(aggs,specialized[i]);
    left=AggregationStrategies.horizontalRollup(left,right,merge);
  }
  return left;
}","@Override public Aggregates<OUT> build(Aggregates<? extends IN> aggs){
  Aggregates<OUT> left=null;
  for (int i=0; i < specialized.length; i++) {
    Aggregates<OUT> right=renderer.transfer(aggs,specialized[i]);
    left=AggregationStrategies.horizontalRollup(left,right,merge);
  }
  return left;
}",0.9836065573770492
59288,"public Aggregates<? extends IN> build(Aggregates<? extends IN> aggs){
  for (int i=0; i < n; i++) {
    Transfer.Specialized<IN,IN> spec=op.specialize(aggs);
    aggs=renderer.transfer(aggs,spec);
  }
  return aggs;
}","public Aggregates<IN> build(Aggregates<? extends IN> aggs){
  Transfer.Specialized<IN,IN> spec=op.specialize(aggs);
  Aggregates<IN> out=renderer.transfer(aggs,spec);
  for (int i=0; i < n - 1; i++) {
    spec=op.specialize(out);
    out=renderer.transfer(out,spec);
  }
  return out;
}",0.441351888667992
59289,"public Aggregates<? extends IN> build(Aggregates<? extends IN> aggs){
  while (!pred.value(aggs)) {
    aggs=renderer.transfer(aggs,op);
  }
  return aggs;
}","public Aggregates<IN> build(Aggregates<? extends IN> aggs){
  Aggregates<IN> out=renderer.transfer(aggs,op);
  while (!pred.value(out)) {
    out=renderer.transfer(out,op);
  }
  return out;
}",0.6361031518624641
59290,"public void set(Aggregates<? extends IN> key,Aggregates<? extends OUT> cache){
synchronized (guard) {
    this.key=key;
    this.cache=cache;
  }
}","public void set(Aggregates<? extends IN> key,Aggregates<OUT> cache){
synchronized (guard) {
    this.key=key;
    this.cache=cache;
  }
}",0.9647887323943662
59291,public Aggregates<? extends OUT> build(Aggregates<? extends IN> aggs);,public Aggregates<OUT> build(Aggregates<? extends IN> aggs);,0.9230769230769232
59292,"public Aggregates<? extends OUT> get(Aggregates<? extends IN> key){
synchronized (guard) {
    if (this.key != key) {
      cache=target.build(key);
      this.key=key;
    }
  }
  return cache;
}","public Aggregates<OUT> get(Aggregates<? extends IN> key){
synchronized (guard) {
    if (this.key != key) {
      cache=target.build(key);
      this.key=key;
    }
  }
  return cache;
}",0.9738219895287958
59293,"public String toString(){
  return String.format(""String_Node_Str"",min,max,mean,stdev);
}","public String toString(){
  if (min instanceof Integer || min instanceof Long) {
    return String.format(""String_Node_Str"",min,max,mean,stdev);
  }
 else {
    return String.format(""String_Node_Str"",min,max,mean,stdev);
  }
}",0.5650793650793651
59294,"public Spread(V empty,Spreader<V> spreader,Aggregator<V,V> combiner){
  this.empty=empty;
  this.spreader=spreader;
  this.combiner=combiner;
}","public Spread(Spreader<V> spreader,Aggregator<V,V> combiner){
  this.spreader=spreader;
  this.combiner=combiner;
}",0.8914728682170543
59295,"private static byte[] encodeArray(Number[] nums,TYPE[] types){
  int recordLength=recordLength(types);
  byte[] rslt=new byte[recordLength];
  int offset=0;
  for (int i=0; i < nums.length; i++) {
    byte[] nb=encode(nums[i],types[i]);
    System.arraycopy(nb,0,rslt,offset,nb.length);
    offset+=nb.length;
  }
  return rslt;
}","private static byte[] encodeArray(Number[] nums,TYPE[] types){
  int recordLength=recordLength(types);
  byte[] rslt=new byte[recordLength];
  int offset=0;
  for (int i=0; i < nums.length; i++) {
    if (types[i] == TYPE.CHAR) {
      continue;
    }
    byte[] nb=encode(nums[i],types[i]);
    System.arraycopy(nb,0,rslt,offset,nb.length);
    offset+=nb.length;
  }
  return rslt;
}",0.9230769230769232
59296,"public static TYPE typeFor(char t){
  if (t == 'i') {
    return TYPE.INT;
  }
 else   if (t == 'l') {
    return TYPE.LONG;
  }
 else   if (t == 's') {
    return TYPE.SHORT;
  }
 else   if (t == 'd') {
    return TYPE.DOUBLE;
  }
 else   if (t == 'f') {
    return TYPE.FLOAT;
  }
 else   if (t == 'b') {
    return TYPE.BYTE;
  }
 else   if (t == 'x') {
    return TYPE.X;
  }
 else {
    throw new RuntimeException(String.format(""String_Node_Str"",t));
  }
}","public static TYPE typeFor(char t){
  if (t == 'i') {
    return TYPE.INT;
  }
 else   if (t == 'l') {
    return TYPE.LONG;
  }
 else   if (t == 's') {
    return TYPE.SHORT;
  }
 else   if (t == 'd') {
    return TYPE.DOUBLE;
  }
 else   if (t == 'f') {
    return TYPE.FLOAT;
  }
 else   if (t == 'b') {
    return TYPE.BYTE;
  }
 else   if (t == 'c') {
    return TYPE.CHAR;
  }
 else   if (t == 'x') {
    return TYPE.X;
  }
 else {
    throw new RuntimeException(String.format(""String_Node_Str"",t));
  }
}",0.948559670781893
59297,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void main(String[] args) throws Exception {
  int iterations=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int cores=Integer.parseInt(arg(args,""String_Node_Str"",Integer.toString(Runtime.getRuntime().availableProcessors())));
  int task=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  String config=arg(args,""String_Node_Str"",""String_Node_Str"");
  String rend=arg(args,""String_Node_Str"",""String_Node_Str"").toUpperCase();
  int width=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int height=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  boolean header=Boolean.valueOf(arg(args,""String_Node_Str"",""String_Node_Str""));
  Presets.Preset source=null;
  for (  Class clss : Presets.class.getClasses()) {
    if (clss.getSimpleName().equals(config)) {
      source=(Presets.Preset)clss.getConstructor().newInstance();
    }
  }
  if (source == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + config);
  }
  Aggregator aggregator=source.aggregator();
  Transfer transfer=source.transfer();
  Glyphset glyphs=source.glyphset();
  ParallelGlyphs.THREAD_POOL_SIZE=cores;
  ParallelSpatial.THREAD_POOL_SIZE=cores;
  Renderer render;
  if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelGlyphs(task);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelSpatial(task);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new SerialSpatial();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rend);
  }
  glyphs.bounds();
  AffineTransform ivt=Util.zoomFit(glyphs.bounds(),width,height).createInverse();
  if (header) {
    System.out.println(""String_Node_Str"");
  }
  try {
    for (int i=0; i < iterations; i++) {
      long start=System.currentTimeMillis();
      Aggregates<Integer> aggs=render.aggregate(glyphs,aggregator,ivt,width,height);
      long end=System.currentTimeMillis();
      long aggTime=end - start;
      start=System.currentTimeMillis();
      Transfer.Specialized<Number,Color> ts=transfer.specialize(aggs);
      Aggregates<Color> colors=render.transfer(aggs,ts);
      end=System.currentTimeMillis();
      long transTime=end - start;
      aggs.get(0,0);
      colors.get(0,0);
      System.out.printf(""String_Node_Str"",source,aggTime,transTime,i,width,height,rend,cores,task);
      System.out.flush();
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void main(String[] args) throws Exception {
  int iterations=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int cores=Integer.parseInt(arg(args,""String_Node_Str"",Integer.toString(Runtime.getRuntime().availableProcessors())));
  int task=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  String config=arg(args,""String_Node_Str"",""String_Node_Str"");
  String rend=arg(args,""String_Node_Str"",""String_Node_Str"").toUpperCase();
  int width=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int height=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  boolean header=Boolean.valueOf(arg(args,""String_Node_Str"",""String_Node_Str""));
  Presets.Preset source=null;
  for (  Class clss : Presets.class.getClasses()) {
    if (clss.getSimpleName().equals(config)) {
      source=(Presets.Preset)clss.getConstructor().newInstance();
    }
  }
  if (source == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + config);
  }
  Aggregator aggregator=source.aggregator();
  Transfer transfer=source.transfer();
  Glyphset glyphs=source.glyphset();
  ParallelGlyphs.THREAD_POOL_SIZE=cores;
  ParallelSpatial.THREAD_POOL_SIZE=cores;
  Renderer render;
  if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelGlyphs(task);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelSpatial(task);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new SerialSpatial();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rend);
  }
  AffineTransform vt=Util.zoomFit(glyphs.bounds(),width,height);
  if (header) {
    System.out.println(""String_Node_Str"");
  }
  try {
    for (int i=0; i < iterations; i++) {
      long start=System.currentTimeMillis();
      Aggregates<Integer> aggs=render.aggregate(glyphs,aggregator,vt,width,height);
      long end=System.currentTimeMillis();
      long aggTime=end - start;
      start=System.currentTimeMillis();
      Transfer.Specialized<Number,Color> ts=transfer.specialize(aggs);
      Aggregates<Color> colors=render.transfer(aggs,ts);
      end=System.currentTimeMillis();
      long transTime=end - start;
      aggs.get(0,0);
      colors.get(0,0);
      System.out.printf(""String_Node_Str"",source,aggTime,transTime,i,width,height,rend,cores,task);
      System.out.flush();
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}",0.992819716669901
59298,"@Test public void testValueCircle4(){
  Renderer r=new ParallelGlyphs();
  Aggregator<Integer,Integer> combiner=new Numbers.Count<>();
  Aggregates<Integer> aggs=new FlatAggregates<Integer>(9,9,0);
  aggs.set(4,4,4);
  Spreader<Integer> spread2=new General.Spread.ValueCircle<>();
  General.Spread<Integer> transfer2=new General.Spread<Integer>(0,spread2,combiner);
  Specialized<Integer,Integer> s2=transfer2.specialize(aggs);
  Aggregates<Integer> rslt=r.transfer(aggs,s2);
  System.out.println(AggregateUtils.toString(rslt));
  assertThat(String.format(""String_Node_Str"",0,0),rslt.get(0,0),is(0));
  assertThat(String.format(""String_Node_Str"",1,1),rslt.get(1,1),is(0));
  assertThat(String.format(""String_Node_Str"",3,3),rslt.get(3,3),is(4));
  assertThat(String.format(""String_Node_Str"",3,5),rslt.get(3,5),is(4));
  assertThat(String.format(""String_Node_Str"",3,6),rslt.get(3,6),is(4));
  assertThat(String.format(""String_Node_Str"",5,5),rslt.get(5,5),is(4));
  assertThat(String.format(""String_Node_Str"",5,6),rslt.get(5,6),is(4));
  assertThat(String.format(""String_Node_Str"",6,6),rslt.get(6,6),is(4));
  assertThat(String.format(""String_Node_Str"",8,8),rslt.get(8,8),is(0));
}","@Test public void testValueCircle4(){
  Renderer r=new ParallelGlyphs();
  Aggregator<Integer,Integer> combiner=new Numbers.Count<>();
  Aggregates<Integer> aggs=new FlatAggregates<Integer>(9,9,0);
  aggs.set(4,4,4);
  Spreader<Integer> spread2=new General.Spread.ValueCircle<>();
  General.Spread<Integer> transfer2=new General.Spread<Integer>(0,spread2,combiner);
  Specialized<Integer,Integer> s2=transfer2.specialize(aggs);
  Aggregates<Integer> rslt=r.transfer(aggs,s2);
  assertThat(String.format(""String_Node_Str"",0,0),rslt.get(0,0),is(0));
  assertThat(String.format(""String_Node_Str"",1,1),rslt.get(1,1),is(0));
  assertThat(String.format(""String_Node_Str"",3,3),rslt.get(3,3),is(4));
  assertThat(String.format(""String_Node_Str"",3,5),rslt.get(3,5),is(4));
  assertThat(String.format(""String_Node_Str"",3,6),rslt.get(3,6),is(4));
  assertThat(String.format(""String_Node_Str"",5,5),rslt.get(5,5),is(4));
  assertThat(String.format(""String_Node_Str"",5,6),rslt.get(5,6),is(4));
  assertThat(String.format(""String_Node_Str"",6,6),rslt.get(6,6),is(4));
  assertThat(String.format(""String_Node_Str"",8,8),rslt.get(8,8),is(0));
}",0.9769865392965696
59299,"public void actionPerformed(ActionEvent e){
  JCheckBox b=(JCheckBox)e.getSource();
  Transfer<?,?> old=target.transfer();
  if (b.isSelected() && !(old instanceof Advise.OverUnder)) {
    target.transfer(new Advise.OverUnder(Color.BLACK,Color.gray,old,10));
  }
 else   if (!b.isSelected() && (old instanceof Advise.OverUnder)) {
    target.transfer(((Advise.OverUnder)old).baseTransfer());
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void actionPerformed(ActionEvent e){
  JCheckBox b=(JCheckBox)e.getSource();
  Transfer<?,?> old=target.transfer();
  if (b.isSelected() && !(old instanceof Advise.OverUnder)) {
    target.transfer(new Advise.OverUnder(Color.BLACK,Color.gray,old,10));
  }
 else   if (!b.isSelected() && (old instanceof Advise.OverUnder)) {
    target.transfer(((Advise.OverUnder)old).baseTransfer());
  }
}",0.9330199764982372
59300,"public ClipwarnControl(){
  this.add(new LabeledItem(""String_Node_Str"",clipwarn));
  clipwarn.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JCheckBox b=(JCheckBox)e.getSource();
      Transfer<?,?> old=target.transfer();
      if (b.isSelected() && !(old instanceof Advise.OverUnder)) {
        target.transfer(new Advise.OverUnder(Color.BLACK,Color.gray,old,10));
      }
 else       if (!b.isSelected() && (old instanceof Advise.OverUnder)) {
        target.transfer(((Advise.OverUnder)old).baseTransfer());
      }
    }
  }
);
}","public ClipwarnControl(){
  this.add(new LabeledItem(""String_Node_Str"",clipwarn));
  clipwarn.addActionListener(new ActionListener(){
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void actionPerformed(    ActionEvent e){
      JCheckBox b=(JCheckBox)e.getSource();
      Transfer<?,?> old=target.transfer();
      if (b.isSelected() && !(old instanceof Advise.OverUnder)) {
        target.transfer(new Advise.OverUnder(Color.BLACK,Color.gray,old,10));
      }
 else       if (!b.isSelected() && (old instanceof Advise.OverUnder)) {
        target.transfer(((Advise.OverUnder)old).baseTransfer());
      }
    }
  }
);
}",0.953469387755102
59301,"@SuppressWarnings(""String_Node_Str"") public LiftIf(double cutoff,Transfer<CategoricalCounts<Color>,Color> baseline){
  super(new Pred(cutoff),new General.Const(Color.black),baseline,baseline.emptyValue());
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public LiftIf(double cutoff,Transfer<CategoricalCounts<Color>,Color> baseline){
  super(new Pred(cutoff),new General.Const(Color.black),baseline,baseline.emptyValue());
}",0.9539170506912442
59302,"public void run(){
  long start=System.currentTimeMillis();
  try {
    Rectangle databounds=viewTransform().createTransformedShape(dataset.bounds()).getBounds();
    renderTransform=Util.zoomFit(dataset.bounds(),databounds.width,databounds.height);
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Aggregates<?> a=renderer.aggregate(dataset,(Aggregator)aggregator,renderTransform.createInverse(),databounds.width,databounds.height);
    SubsetDisplay.this.aggregates(a,renderTransform);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),aggregates.highX() - aggregates.lowX(),aggregates.highY() - aggregates.lowY());
    }
  }
 catch (  Exception e) {
    renderError=true;
  }
  SubsetDisplay.this.repaint();
}","public void run(){
  long start=System.currentTimeMillis();
  try {
    Rectangle databounds=viewTransform().createTransformedShape(dataset.bounds()).getBounds();
    renderTransform=Util.zoomFit(dataset.bounds(),databounds.width,databounds.height);
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Aggregates<?> a=renderer.aggregate(dataset,(Aggregator)aggregator,renderTransform.createInverse(),databounds.width,databounds.height);
    SubsetDisplay.this.aggregates(a,renderTransform);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),aggregates.highX() - aggregates.lowX(),aggregates.highY() - aggregates.lowY());
    }
  }
 catch (  Exception e) {
    renderError=true;
    System.err.println(e.getMessage());
  }
  SubsetDisplay.this.repaint();
}",0.9753390875462392
59303,"/** 
 * Set the target host control.
 */
public void host(EnhanceHost host){
  if (host != showOverlay.host()) {
    enhance.setSelected(false);
    showOverlay.host(host);
  }
}","/** 
 * Set the target host control.
 */
public void host(EnhanceHost host){
  if (host != showOverlay.host()) {
    showOverlay.clear();
    enhance.setSelected(false);
    showOverlay.host(host);
  }
}",0.7191601049868767
59304,public void clear();,"public void clear(){
  box.setSelected(false);
}",0.5882352941176471
59305,"@Override public Specialized specialize(Aggregates<? extends Number> aggregates){
  Transfer.Specialized<Number,Color> ts=basis.specialize(aggregates);
  return new Specialized(maxDV,maxDV,maxDV,maxDV,distance,ts,out);
}","@Override public Specialized specialize(Aggregates<? extends Number> aggregates){
  Transfer.Specialized<Number,Color> ts=basis.specialize(aggregates);
  return new Specialized(minV,maxV,minDV,maxDV,distance,ts,out);
}",0.9497716894977168
59306,"@Override public OUT at(int x,int y,Aggregates<? extends IN> rootAggregates){
synchronized (cacheGuard) {
    if (cacheKey == null) {
      Aggregates tempAggs=rootAggregates;
      for (      Transfer.Specialized ts : specialized) {
        tempAggs=renderer.transfer(tempAggs,ts);
      }
      cachedAggs=tempAggs;
    }
    cacheKey=rootAggregates;
  }
  return (OUT)cachedAggs.get(x,y);
}","@Override public OUT at(int x,int y,Aggregates<? extends IN> rootAggregates){
synchronized (cacheGuard) {
    if (cacheKey == null || cacheKey != rootAggregates) {
      Aggregates tempAggs=rootAggregates;
      for (      Transfer.Specialized ts : specialized) {
        tempAggs=renderer.transfer(tempAggs,ts);
      }
      cachedAggs=tempAggs;
    }
    cacheKey=rootAggregates;
  }
  return (OUT)cachedAggs.get(x,y);
}",0.9632352941176472
59307,"/** 
 * Combine two aggregate sets according to the passed reducer. The resulting aggregate set will have a realized subset region sufficient to cover the realized subset region of both source aggregate sets (regardless of  the values found in those sources).  If one of the two aggregate sets provided is already of sufficient size, it will be used as both a source and a target.
 * @param left Aggregate set to use for left-hand arguments
 * @param right Aggregate set to use for right-hand arguments
 * @param red Reduction operation
 * @return Resulting aggregate set (may be new or a destructively updated left or right parameter) 
 */
public static <T>Aggregates<T> horizontalRollup(Aggregates<T> left,Aggregates<T> right,Aggregator<?,T> red){
  if (left == null) {
    return right;
  }
  if (right == null) {
    return left;
  }
  T identity=red.identity();
  if ((left instanceof ConstantAggregates) && Util.isEqual(identity,left.defaultValue())) {
    return right;
  }
  if ((right instanceof ConstantAggregates) && Util.isEqual(identity,right.defaultValue())) {
    return right;
  }
  List<Aggregates<T>> sources=new ArrayList<Aggregates<T>>();
  Aggregates<T> target;
  Rectangle rb=new Rectangle(right.lowX(),right.lowY(),right.highX() - right.lowX(),right.highY() - right.lowY());
  Rectangle lb=new Rectangle(left.lowX(),left.lowY(),left.highX() - left.lowX(),left.highY() - left.lowY());
  Rectangle bounds=rb.union(lb);
  if (lb.contains(bounds)) {
    target=left;
    sources.add(right);
  }
 else   if (rb.contains(bounds)) {
    target=right;
    sources.add(left);
  }
 else {
    sources.add(left);
    sources.add(right);
    target=new FlatAggregates<T>(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height,red.identity());
  }
  for (  Aggregates<T> source : sources) {
    for (int x=Math.max(0,source.lowX()); x < source.highX(); x++) {
      for (int y=Math.max(0,source.lowY()); y < source.highY(); y++) {
        T comb=red.rollup(Arrays.asList(target.get(x,y),source.get(x,y)));
        target.set(x,y,comb);
      }
    }
  }
  return target;
}","/** 
 * Combine two aggregate sets according to the passed reducer. The resulting aggregate set will have a realized subset region sufficient to cover the realized subset region of both source aggregate sets (regardless of  the values found in those sources).  If one of the two aggregate sets provided is already of sufficient size, it will be used as both a source and a target.
 * @param left Aggregate set to use for left-hand arguments
 * @param right Aggregate set to use for right-hand arguments
 * @param red Reduction operation
 * @return Resulting aggregate set (may be new or a destructively updated left or right parameter) 
 */
public static <T>Aggregates<T> horizontalRollup(Aggregates<T> left,Aggregates<T> right,Aggregator<?,T> red){
  if (left == null) {
    return right;
  }
  if (right == null) {
    return left;
  }
  T identity=red.identity();
  if ((left instanceof ConstantAggregates) && Util.isEqual(identity,left.defaultValue())) {
    return right;
  }
  if ((right instanceof ConstantAggregates) && Util.isEqual(identity,right.defaultValue())) {
    return left;
  }
  List<Aggregates<T>> sources=new ArrayList<Aggregates<T>>();
  Aggregates<T> target;
  Rectangle rb=new Rectangle(right.lowX(),right.lowY(),right.highX() - right.lowX(),right.highY() - right.lowY());
  Rectangle lb=new Rectangle(left.lowX(),left.lowY(),left.highX() - left.lowX(),left.highY() - left.lowY());
  Rectangle bounds=rb.union(lb);
  if (lb.contains(bounds)) {
    target=left;
    sources.add(right);
  }
 else   if (rb.contains(bounds)) {
    target=right;
    sources.add(left);
  }
 else {
    sources.add(left);
    sources.add(right);
    target=new FlatAggregates<T>(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height,red.identity());
  }
  for (  Aggregates<T> source : sources) {
    for (int x=Math.max(0,source.lowX()); x < source.highX(); x++) {
      for (int y=Math.max(0,source.lowY()); y < source.highY(); y++) {
        T comb=red.rollup(Arrays.asList(target.get(x,y),source.get(x,y)));
        target.set(x,y,comb);
      }
    }
  }
  return target;
}",0.9983281585860998
59308,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void run(){
  long start=System.currentTimeMillis();
  try {
    renderTransform=viewTransform();
    Aggregates<?> a=renderer.aggregate(dataset,(Aggregator)aggregator,inverseViewTransformRef,baseWidth,baseHeight);
    ARSubsetPanel.this.baseAggregates(a);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),baseAggregates.highX() - baseAggregates.lowX(),baseAggregates.highY() - baseAggregates.lowY());
    }
  }
 catch (  Exception e) {
    renderError=true;
  }
  ARSubsetPanel.this.repaint();
}","public void run(){
  long start=System.currentTimeMillis();
  try {
    Rectangle databounds=viewTransform().createTransformedShape(dataset.bounds()).getBounds();
    renderTransform=Util.zoomFit(dataset.bounds(),databounds.width,databounds.height);
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Aggregates<?> a=renderer.aggregate(dataset,(Aggregator)aggregator,renderTransform.createInverse(),databounds.width,databounds.height);
    ARSubsetPanel.this.baseAggregates(a);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),baseAggregates.highX() - baseAggregates.lowX(),baseAggregates.highY() - baseAggregates.lowY());
    }
  }
 catch (  Exception e) {
    renderError=true;
  }
  ARSubsetPanel.this.repaint();
}",0.6844694307800422
59309,"public ARPanel withTransfer(Transfer<?,?> t){
  ARPanel p=new ARPanel(aggregator,t,dataset,renderer);
  p.viewTransformRef=this.viewTransformRef;
  p.inverseViewTransformRef=this.inverseViewTransformRef;
  p.aggregates=this.aggregates;
  return p;
}","public ARPanel withTransfer(Transfer<?,?> t){
  ARPanel p=new ARPanel(aggregator,t,dataset,renderer);
  p.viewTransformRef=this.viewTransformRef;
  p.inverseViewTransformRef=this.inverseViewTransformRef;
  p.aggregates(this.aggregates);
  return p;
}",0.933867735470942
59310,"public void aggregates(Aggregates<?> aggregates){
  this.aggregates=aggregates;
}","public void aggregates(Aggregates<?> aggregates){
  this.aggregates=aggregates;
  this.display.setAggregates(aggregates);
}",0.7941176470588235
59311,"public static void main(String[] args) throws Exception {
  String[] rawRes=arg(args,""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  String outPrefix=arg(args,""String_Node_Str"",""String_Node_Str"");
  double size=Double.parseDouble(arg(args,""String_Node_Str"",""String_Node_Str""));
  Aggregator<Object,Integer> aggregator=new WrappedAggregator.Count().op();
  Renderer render=new ParallelGlyphs();
  Glyphset<Color> glyphs=new MemMapList<Color>(new File(source),new ToRect(size,size,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  glyphs.bounds();
  try {
    for (    String rres : rawRes) {
      int res=Integer.parseInt(rres);
      System.out.printf(""String_Node_Str"",source,res);
      AffineTransform ivt=Util.zoomFit(glyphs.bounds(),res,res).createInverse();
      Aggregates<Integer> aggs=render.reduce(glyphs,aggregator,ivt,res,res);
      String filename=String.format(""String_Node_Str"",outPrefix,res);
      System.out.printf(""String_Node_Str"",filename);
      AggregatesToCSV.export(aggs,new File(filename));
      System.out.printf(""String_Node_Str"",filename);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  String[] rawRes=arg(args,""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  String outPrefix=arg(args,""String_Node_Str"",""String_Node_Str"");
  double size=Double.parseDouble(arg(args,""String_Node_Str"",""String_Node_Str""));
  Aggregator<Object,Integer> aggregator=new WrappedAggregator.Count().op();
  Renderer render=new ParallelGlyphs();
  Glyphset<Color> glyphs=new MemMapList<Color>(new File(source),new ToRect(size,size,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  glyphs.bounds();
  try {
    for (    String rres : rawRes) {
      int res=Integer.parseInt(rres);
      System.out.printf(""String_Node_Str"",source,res);
      AffineTransform ivt=Util.zoomFit(glyphs.bounds(),res,res).createInverse();
      Aggregates<Integer> aggs=render.aggregate(glyphs,aggregator,ivt,res,res);
      String filename=String.format(""String_Node_Str"",outPrefix,res);
      System.out.printf(""String_Node_Str"",filename);
      AggregatesToCSV.export(aggs,new File(filename));
      System.out.printf(""String_Node_Str"",filename);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}",0.9949980761831474
59312,"public static void main(String[] args) throws Exception {
  int iterations=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int cores=Integer.parseInt(arg(args,""String_Node_Str"",Integer.toString(Runtime.getRuntime().availableProcessors())));
  int task=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  String rend=arg(args,""String_Node_Str"",""String_Node_Str"").toUpperCase();
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  int width=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int height=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  Aggregator<Object,Integer> aggregator=new WrappedAggregator.Count().op();
  ParallelGlyphs.THREAD_POOL_SIZE=cores;
  ParallelSpatial.THREAD_POOL_SIZE=cores;
  Renderer render;
  Glyphset<Color> glyphs;
  if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelGlyphs(task);
    glyphs=new MemMapList<Color>(new File(source),new ToRect(.005,.005,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelSpatial(task);
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new SerialSpatial();
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rend);
  }
  glyphs.bounds();
  AffineTransform ivt=Util.zoomFit(glyphs.bounds(),width,height).createInverse();
  System.out.println(""String_Node_Str"");
  long total=0;
  try {
    for (int i=0; i < iterations; i++) {
      long start=System.currentTimeMillis();
      Aggregates<Integer> aggs=render.reduce(glyphs,aggregator,ivt,width,height);
      long end=System.currentTimeMillis();
      System.out.printf(""String_Node_Str"",source,end - start,i,rend,cores,task);
      total+=(end - start);
    }
    System.out.printf(""String_Node_Str"",source,total / ((double)iterations),rend,cores,task);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  int iterations=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int cores=Integer.parseInt(arg(args,""String_Node_Str"",Integer.toString(Runtime.getRuntime().availableProcessors())));
  int task=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  String rend=arg(args,""String_Node_Str"",""String_Node_Str"").toUpperCase();
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  int width=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int height=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  Aggregator<Object,Integer> aggregator=new WrappedAggregator.Count().op();
  ParallelGlyphs.THREAD_POOL_SIZE=cores;
  ParallelSpatial.THREAD_POOL_SIZE=cores;
  Renderer render;
  Glyphset<Color> glyphs;
  if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelGlyphs(task);
    glyphs=new MemMapList<Color>(new File(source),new ToRect(.005,.005,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelSpatial(task);
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new SerialSpatial();
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rend);
  }
  glyphs.bounds();
  AffineTransform ivt=Util.zoomFit(glyphs.bounds(),width,height).createInverse();
  System.out.println(""String_Node_Str"");
  long total=0;
  try {
    for (int i=0; i < iterations; i++) {
      long start=System.currentTimeMillis();
      Aggregates<Integer> aggs=render.aggregate(glyphs,aggregator,ivt,width,height);
      long end=System.currentTimeMillis();
      System.out.printf(""String_Node_Str"",source,end - start,i,rend,cores,task);
      total+=(end - start);
    }
    System.out.printf(""String_Node_Str"",source,total / ((double)iterations),rend,cores,task);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}",0.996930342384888
59313,"public static void main(String[] args) throws Exception {
  JFrame frame=new JFrame();
  frame.setLayout(new BorderLayout());
  frame.setSize(500,500);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  ArrayList<Indexed> items=new ArrayList<>();
  DelimitedReader reader=new DelimitedReader(new File(""String_Node_Str""),1,""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  while (reader.hasNext()) {
    String[] parts=reader.next();
    if (parts == null) {
      continue;
    }
    double[] vals=new double[parts.length];
    for (int i=0; i < parts.length; i++) {
      vals[i]=Double.parseDouble(parts[i]);
    }
    items.add(new Indexed.ArrayWrapper(vals));
  }
  System.out.println(items.size() + ""String_Node_Str"");
  Glyphset<Double> dataset=WrappedCollection.wrap(items,new Indexed.ToRect(.05,2,3),new Indexed.ToValue<Indexed,Double>(4),Double.class);
  Renderer r=new ParallelGlyphs();
  Aggregator<Object,Integer> aggregator=new Numbers.Count();
  Transfer<Number,Color> transfer=new Numbers.Interpolate(new Color(255,0,0,25),new Color(255,0,0,255));
  final ARPanel panel=new ARPanel(aggregator,transfer,dataset,r);
  frame.add(panel,BorderLayout.CENTER);
  frame.setVisible(true);
  frame.revalidate();
  frame.validate();
  SwingUtilities.invokeAndWait(new Runnable(){
    public void run(){
      panel.zoomFit();
    }
  }
);
  int width=800;
  int height=800;
  AffineTransform vt=Util.zoomFit(dataset.bounds(),width,height);
  vt.invert();
  Aggregates<Integer> aggregates=r.reduce(dataset,aggregator,vt,width,height);
  Aggregates<Color> colors=r.transfer(aggregates,transfer);
  Util.asImage(colors,width,height,Color.white);
}","public static void main(String[] args) throws Exception {
  ArrayList<Indexed> items=new ArrayList<>();
  DelimitedReader reader=new DelimitedReader(new File(""String_Node_Str""),1,""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  while (reader.hasNext()) {
    String[] parts=reader.next();
    if (parts == null) {
      continue;
    }
    double[] vals=new double[parts.length];
    for (int i=0; i < parts.length; i++) {
      vals[i]=Double.parseDouble(parts[i]);
    }
    items.add(new Indexed.ArrayWrapper(vals));
  }
  System.out.println(items.size() + ""String_Node_Str"");
  Glyphset<Double> dataset=WrappedCollection.wrap(items,new Indexed.ToRect(.05,2,3),new Indexed.ToValue<Indexed,Double>(4),Double.class);
  Renderer r=new ParallelGlyphs();
  Aggregator<Object,Integer> aggregator=new Numbers.Count();
  Transfer<Number,Color> transfer=new Numbers.Interpolate(new Color(255,0,0,25),new Color(255,0,0,255));
  int width=800;
  int height=800;
  AffineTransform vt=Util.zoomFit(dataset.bounds(),width,height);
  vt.invert();
  Aggregates<Integer> aggregates=r.aggregate(dataset,aggregator,vt,width,height);
  Aggregates<Color> colors=r.transfer(aggregates,transfer);
  @SuppressWarnings(""String_Node_Str"") BufferedImage image=Util.asImage(colors,width,height,Color.white);
  JFrame frame=new JFrame(""String_Node_Str"");
  frame.setLayout(new BorderLayout());
  frame.setSize(width,height);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.add(new ARDisplay(aggregates,transfer),BorderLayout.CENTER);
  frame.setVisible(true);
  frame.revalidate();
  frame.validate();
  JFrame frame2=new JFrame(""String_Node_Str"");
  frame2.setLayout(new BorderLayout());
  frame2.setSize(width,height);
  frame2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  final ARPanel panel=new ARPanel(aggregator,transfer,dataset,r);
  frame2.add(panel,BorderLayout.CENTER);
  frame2.setVisible(true);
  frame2.revalidate();
  frame2.validate();
  SwingUtilities.invokeAndWait(new Runnable(){
    public void run(){
      panel.zoomFit();
    }
  }
);
}",0.216563923880997
59314,"@Override public void paintComponent(Graphics g){
  boolean doRender=(image == null || differentSizes(image,ARDisplay.this)) && transfer != null && aggregates != null;
  if (doRender && !renderError) {
    renderThread=new Thread(new TransferRender(),""String_Node_Str"");
    renderThread.setDaemon(true);
    renderThread.start();
  }
  if (image != null) {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
    Graphics2D g2=(Graphics2D)g;
    g2.drawRenderedImage(image,g2.getTransform());
  }
 else {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
  }
}","@Override public void paintComponent(Graphics g){
  boolean doRender=(renderAgain || image == null) && transfer != null && aggregates != null;
  if (doRender && !renderError) {
    renderThread=new Thread(new TransferRender(),""String_Node_Str"");
    renderThread.setDaemon(true);
    renderThread.start();
  }
  if (image != null) {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
    Graphics2D g2=(Graphics2D)g;
    g2.drawRenderedImage(image,g2.getTransform());
  }
 else {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
  }
}",0.9485714285714286
59315,"public ARDisplay withTransfer(Transfer<?,?> t){
  return new ARDisplay(aggregates,t);
}","public void withTransfer(Transfer<?,?> transfer){
  this.transfer=transfer;
  renderAgain=true;
  renderError=false;
}",0.5365853658536586
59316,"public void run(){
  long start=System.currentTimeMillis();
  int width=ARDisplay.this.getWidth();
  int height=ARDisplay.this.getHeight();
  try {
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Aggregates<Color> colors=renderer.transfer((Aggregates)aggregates,(Transfer)transfer);
    image=Util.asImage(colors,width,height,Util.CLEAR);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),image.getWidth(),image.getHeight());
    }
  }
 catch (  ClassCastException e) {
    renderError=true;
  }
  ARDisplay.this.repaint();
}","public void run(){
  try {
    long start=System.currentTimeMillis();
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Aggregates<Color> colors=renderer.transfer((Aggregates)aggregates,(Transfer)transfer);
    image=Util.asImage(colors,ARDisplay.this.getWidth(),ARDisplay.this.getHeight(),Util.CLEAR);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),image.getWidth(),image.getHeight());
    }
  }
 catch (  ClassCastException e) {
    renderError=true;
  }
 finally {
    renderAgain=false;
  }
  ARDisplay.this.repaint();
}",0.6297520661157024
59317,"public ARDisplay(Aggregates<?> aggregates,Transfer<?,?> transfer){
  super();
  this.transfer=transfer;
  this.aggregates=aggregates;
}","public ARDisplay(Aggregates<?> aggregates,Transfer<?,?> transfer){
  super();
  this.transfer=transfer;
  this.aggregates=aggregates;
  this.addComponentListener(new ComponentListener(){
    public void componentResized(    ComponentEvent e){
      ARDisplay.this.renderAgain=true;
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentHidden(    ComponentEvent e){
    }
  }
);
}",0.4379084967320261
59318,"public void run(){
  long start=System.currentTimeMillis();
  int width=ARPanel.this.getWidth();
  int height=ARPanel.this.getHeight();
  try {
    @SuppressWarnings(""String_Node_Str"") Aggregates<Color> colors=renderer.transfer(aggregates,transfer);
    image=Util.asImage(colors,width,height,Util.CLEAR);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),image.getWidth(),image.getHeight());
    }
  }
 catch (  ClassCastException e) {
    renderError=true;
  }
  ARPanel.this.repaint();
}","@SuppressWarnings(""String_Node_Str"") public void run(){
  int width=ARPanel.this.getWidth();
  int height=ARPanel.this.getHeight();
  long start=System.currentTimeMillis();
  AffineTransform ivt=inverseViewTransform();
  try {
    aggregates=renderer.aggregate(dataset,aggregator,ivt,width,height);
    display.setAggregates(aggregates);
    long end=System.currentTimeMillis();
    if (PERF_REP) {
      System.out.printf(""String_Node_Str"",(end - start),aggregates.highX() - aggregates.lowX(),aggregates.highY() - aggregates.lowY());
    }
  }
 catch (  ClassCastException e) {
    renderError=true;
  }
  ARPanel.this.repaint();
}",0.5988225399495374
59319,"public ARPanel(Aggregator<?,?> reduction,Transfer<?,?> transfer,Glyphset<?> glyphs,Renderer renderer){
  super();
  this.reduction=reduction;
  this.transfer=transfer;
  this.dataset=glyphs;
  this.renderer=renderer;
  ZoomPanHandler h=new ZoomPanHandler();
  super.addMouseListener(h);
  super.addMouseMotionListener(h);
}","public ARPanel(Aggregator<?,?> reduction,Transfer<?,?> transfer,Glyphset<?> glyphs,Renderer renderer){
  super();
  display=new ARDisplay(null,transfer);
  ARDisplay.PERF_REP=PERF_REP;
  this.setLayout(new BorderLayout());
  this.add(display,BorderLayout.CENTER);
  this.invalidate();
  this.aggregator=reduction;
  this.dataset=glyphs;
  this.renderer=renderer;
  ZoomPanHandler h=new ZoomPanHandler();
  super.addMouseListener(h);
  super.addMouseMotionListener(h);
}",0.7121212121212122
59320,"public ARPanel withReduction(Aggregator<?,?> r){
  ARPanel p=new ARPanel(r,transfer,dataset,renderer);
  p.viewTransformRef=this.viewTransformRef;
  p.inverseViewTransformRef=this.inverseViewTransformRef;
  return p;
}","public ARPanel withReduction(Aggregator<?,?> r){
  ARPanel p=new ARPanel(r,display.transfer(),dataset,renderer);
  p.viewTransformRef=this.viewTransformRef;
  p.inverseViewTransformRef=this.inverseViewTransformRef;
  return p;
}",0.8654708520179372
59321,"public ARPanel withRenderer(Renderer r){
  ARPanel p=new ARPanel(reduction,transfer,dataset,r);
  return p;
}","public ARPanel withRenderer(Renderer r){
  ARPanel p=new ARPanel(aggregator,display.transfer(),dataset,r);
  return p;
}",0.8995633187772926
59322,"public ARPanel withTransfer(Transfer<?,?> t){
  ARPanel p=new ARPanel(reduction,t,dataset,renderer);
  p.viewTransformRef=this.viewTransformRef;
  p.inverseViewTransformRef=this.inverseViewTransformRef;
  p.aggregates=this.aggregates;
  return p;
}","public ARPanel withTransfer(Transfer<?,?> t){
  ARPanel p=new ARPanel(aggregator,t,dataset,renderer);
  p.viewTransformRef=this.viewTransformRef;
  p.inverseViewTransformRef=this.inverseViewTransformRef;
  p.aggregates=this.aggregates;
  return p;
}",0.317907444668008
59323,"public String toString(){
  return String.format(""String_Node_Str"",dataset,transfer,reduction);
}","public String toString(){
  return String.format(""String_Node_Str"",dataset,display.transfer(),aggregator);
}",0.8975609756097561
59324,"public ARPanel withDataset(Glyphset<?> data){
  return new ARPanel(reduction,transfer,data,renderer);
}","public ARPanel withDataset(Glyphset<?> data){
  return new ARPanel(aggregator,display.transfer(),data,renderer);
}",0.8940092165898618
59325,"public Aggregator<?,?> reduction(){
  return reduction;
}","public Aggregator<?,?> reduction(){
  return aggregator;
}",0.9043478260869564
59326,"public static void main(String[] args) throws Exception {
  String[] rawRes=arg(args,""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  String outPrefix=arg(args,""String_Node_Str"",""String_Node_Str"");
  double size=Double.parseDouble(arg(args,""String_Node_Str"",""String_Node_Str""));
  Aggregator<Object,Integer> aggregator=new WrappedAggregator.Count().op();
  Renderer render=new ParallelGlyphs();
  Glyphset<Color> glyphs=new MemMapList<Color>(new File(source),new ToRect(size,size,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  glyphs.bounds();
  try {
    for (    String rres : rawRes) {
      int res=Integer.parseInt(rres);
      System.out.printf(""String_Node_Str"",source,res);
      AffineTransform ivt=Util.zoomFit(glyphs.bounds(),res,res).createInverse();
      Aggregates aggs=render.reduce(glyphs,aggregator,ivt,res,res);
      String filename=String.format(""String_Node_Str"",outPrefix,res);
      System.out.printf(""String_Node_Str"",filename);
      AggregatesToCSV.export(aggs,new File(filename));
      System.out.printf(""String_Node_Str"",filename);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  String[] rawRes=arg(args,""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  String outPrefix=arg(args,""String_Node_Str"",""String_Node_Str"");
  double size=Double.parseDouble(arg(args,""String_Node_Str"",""String_Node_Str""));
  Aggregator<Object,Integer> aggregator=new WrappedAggregator.Count().op();
  Renderer render=new ParallelGlyphs();
  Glyphset<Color> glyphs=new MemMapList<Color>(new File(source),new ToRect(size,size,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  glyphs.bounds();
  try {
    for (    String rres : rawRes) {
      int res=Integer.parseInt(rres);
      System.out.printf(""String_Node_Str"",source,res);
      AffineTransform ivt=Util.zoomFit(glyphs.bounds(),res,res).createInverse();
      Aggregates<Integer> aggs=render.reduce(glyphs,aggregator,ivt,res,res);
      String filename=String.format(""String_Node_Str"",outPrefix,res);
      System.out.printf(""String_Node_Str"",filename);
      AggregatesToCSV.export(aggs,new File(filename));
      System.out.printf(""String_Node_Str"",filename);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}",0.9965210668728256
59327,"public static void main(String[] args) throws Exception {
  int iterations=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int cores=Integer.parseInt(arg(args,""String_Node_Str"",Integer.toString(Runtime.getRuntime().availableProcessors())));
  int task=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  String rend=arg(args,""String_Node_Str"",""String_Node_Str"").toUpperCase();
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  Aggregator<?,?> aggregator=new WrappedAggregator.Count().op();
  Transfer<?,?> transfer=new WrappedTransfer.RedWhiteLinear().op();
  ARPanel.PERF_MON=true;
  ParallelGlyphs.THREAD_POOL_SIZE=cores;
  ParallelSpatial.THREAD_POOL_SIZE=cores;
  Renderer render;
  Glyphset<Color> glyphs;
  if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelGlyphs(task);
    glyphs=new MemMapList<Color>(new File(source),new ToRect(.005,.005,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelSpatial(task);
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new SerialSpatial();
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rend);
  }
  glyphs.bounds();
  JFrame f=new JFrame();
  f.setLayout(new BorderLayout());
  f.setSize(500,500);
  f.setVisible(true);
  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  System.out.println(""String_Node_Str"");
  long total=0;
  try {
    for (int i=0; i < iterations; i++) {
      ARPanel panel=new ARPanel(aggregator,transfer,glyphs,render);
      f.add(panel,BorderLayout.CENTER);
      long start=System.currentTimeMillis();
      f.validate();
      panel.zoomFit();
      f.repaint();
synchronized (panel) {
        panel.wait();
      }
      f.remove(panel);
      long end=System.currentTimeMillis();
      System.out.printf(""String_Node_Str"",source,end - start,i,rend,cores,task);
      total+=(end - start);
    }
    System.out.printf(""String_Node_Str"",source,total / ((double)iterations),rend,cores,task);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}","public static void main(String[] args) throws Exception {
  int iterations=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int cores=Integer.parseInt(arg(args,""String_Node_Str"",Integer.toString(Runtime.getRuntime().availableProcessors())));
  int task=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  String rend=arg(args,""String_Node_Str"",""String_Node_Str"").toUpperCase();
  String source=arg(args,""String_Node_Str"",""String_Node_Str"");
  int width=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  int height=Integer.parseInt(arg(args,""String_Node_Str"",""String_Node_Str""));
  Aggregator<Object,Integer> aggregator=new WrappedAggregator.Count().op();
  ParallelGlyphs.THREAD_POOL_SIZE=cores;
  ParallelSpatial.THREAD_POOL_SIZE=cores;
  Renderer render;
  Glyphset<Color> glyphs;
  if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelGlyphs(task);
    glyphs=new MemMapList<Color>(new File(source),new ToRect(.005,.005,false,0,1),new Constant<Indexed>(Color.red),Color.class);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new ParallelSpatial(task);
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else   if (rend.startsWith(""String_Node_Str"")) {
    render=new SerialSpatial();
    glyphs=GlyphsetUtils.load(null,source,.005);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + rend);
  }
  glyphs.bounds();
  AffineTransform ivt=Util.zoomFit(glyphs.bounds(),width,height).createInverse();
  System.out.println(""String_Node_Str"");
  long total=0;
  try {
    for (int i=0; i < iterations; i++) {
      long start=System.currentTimeMillis();
      Aggregates<Integer> aggs=render.reduce(glyphs,aggregator,ivt,width,height);
      long end=System.currentTimeMillis();
      System.out.printf(""String_Node_Str"",source,end - start,i,rend,cores,task);
      total+=(end - start);
    }
    System.out.printf(""String_Node_Str"",source,total / ((double)iterations),rend,cores,task);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + source);
    e.printStackTrace();
  }
  System.exit(0);
}",0.7991812599499659
59328,"/** 
 * @param args
 * @throws Exception 
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  if (args.length > 0 && args[0].toUpperCase().equals(""String_Node_Str"")) {
    new ARApp();
  }
 else {
    System.out.println(""String_Node_Str"");
    new ARDemoApp();
  }
}","/** 
 * @param args
 * @throws Exception 
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  ARPanel.PERF_REP=true;
  if (args.length > 0 && args[0].toUpperCase().equals(""String_Node_Str"")) {
    new ARApp();
  }
 else {
    System.out.println(""String_Node_Str"");
    new ARDemoApp();
  }
}",0.9618320610687024
59329,"public void run(){
  long start=System.currentTimeMillis();
  int width=ARPanel.this.getWidth();
  int height=ARPanel.this.getHeight();
  @SuppressWarnings(""String_Node_Str"") Aggregates<Color> colors=renderer.transfer(aggregates,transfer);
  image=Util.asImage(colors,width,height,Util.CLEAR);
  long end=System.currentTimeMillis();
  if (!PERF_MON) {
    System.out.printf(""String_Node_Str"",(end - start),image.getWidth(),image.getHeight());
  }
  ARPanel.this.repaint();
}","public void run(){
  long start=System.currentTimeMillis();
  int width=ARPanel.this.getWidth();
  int height=ARPanel.this.getHeight();
  @SuppressWarnings(""String_Node_Str"") Aggregates<Color> colors=renderer.transfer(aggregates,transfer);
  image=Util.asImage(colors,width,height,Util.CLEAR);
  long end=System.currentTimeMillis();
  if (PERF_REP) {
    System.out.printf(""String_Node_Str"",(end - start),image.getWidth(),image.getHeight());
  }
  ARPanel.this.repaint();
}",0.9926082365364308
59330,"@Override public void paintComponent(Graphics g){
  Runnable action=null;
  if (renderer == null || dataset == null || dataset.isEmpty() || transfer == null || reduction == null || !transfer.input().isAssignableFrom(reduction.output())) {
    g.setColor(Color.GRAY);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
  }
 else   if (renderAgain || aggregates == null || differentSizes(image,ARPanel.this)) {
    action=new FullRender();
  }
 else   if (image == null) {
    action=new TransferRender();
  }
  if (action != null && (renderThread == null || !renderThread.isAlive())) {
    renderAgain=false;
    renderThread=new Thread(action,""String_Node_Str"");
    renderThread.setDaemon(true);
    renderThread.start();
  }
  if (image != null) {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
    Graphics2D g2=(Graphics2D)g;
    g2.drawRenderedImage(image,g2.getTransform());
    if (PERF_MON) {
synchronized (this) {
        this.notifyAll();
      }
    }
  }
 else {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
  }
}","@Override public void paintComponent(Graphics g){
  Runnable action=null;
  if (renderer == null || dataset == null || dataset.isEmpty() || transfer == null || reduction == null || !transfer.input().isAssignableFrom(reduction.output())) {
    g.setColor(Color.GRAY);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
  }
 else   if (renderAgain || aggregates == null || differentSizes(image,ARPanel.this)) {
    action=new FullRender();
  }
 else   if (image == null) {
    action=new TransferRender();
  }
  if (action != null && (renderThread == null || !renderThread.isAlive())) {
    renderAgain=false;
    renderThread=new Thread(action,""String_Node_Str"");
    renderThread.setDaemon(true);
    renderThread.start();
  }
  if (image != null) {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
    Graphics2D g2=(Graphics2D)g;
    g2.drawRenderedImage(image,g2.getTransform());
  }
 else {
    g.setColor(Color.WHITE);
    g.fillRect(0,0,this.getWidth(),this.getHeight());
  }
}",0.9613572101790764
59331,"/** 
 * Calculate the affine transform to fit a box of the given size/location onto a 0,0,width,height space.
 */
public static AffineTransform zoomFit(Rectangle2D content,int width,int height){
  if (content == null) {
    return new AffineTransform();
  }
  double ws=width / content.getWidth();
  double hs=height / content.getHeight();
  double scale=Math.min(ws,hs);
  double tx=content.getCenterX();
  double ty=content.getCenterY();
  AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
  t.translate(tx,ty);
  return t;
}","/** 
 * Calculate the affine transform to fit a box of the given size/location onto a 0,0,width,height space.
 */
public static AffineTransform zoomFit(Rectangle2D content,int width,int height){
  if (content == null) {
    return new AffineTransform();
  }
  double ws=width / content.getWidth();
  double hs=height / content.getHeight();
  double scale=Math.min(ws,hs);
  double tx=content.getMinX();
  double ty=content.getMinY();
  AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
  t.translate(-tx,-ty);
  return t;
}",0.9814814814814816
59332,"public void zoomFit(){
  try {
    Rectangle2D bounds=dataset().bounds();
    AffineTransform t=Util.zoomFit(bounds,getWidth(),getHeight());
    Point2D center=new Point2D.Double(bounds.getCenterX(),bounds.getCenterY());
    this.zoomAbs(center,t.getScaleX());
    this.panToAbs(center);
  }
 catch (  Exception e) {
  }
}","public void zoomFit(){
  try {
    Rectangle2D content=dataset().bounds();
    if (content == null) {
      return;
    }
    double w=getWidth() / content.getWidth();
    double h=getHeight() / content.getHeight();
    double scale=Math.min(w,h);
    scale=scale / getScale();
    Point2D center=new Point2D.Double(content.getCenterX(),content.getCenterY());
    zoomAbs(center,scale);
    panToAbs(center);
  }
 catch (  Exception e) {
  }
}",0.5019607843137255
59333,"public ConstantAggregates(int lowX,int lowY,int highX,int highY,A value){
  this.val=value;
  this.lowX=lowX;
  this.lowY=lowY;
  this.highX=highX;
  this.highY=highY;
}","public ConstantAggregates(int lowX,int lowY,int highX,int highY,A value){
  if (lowX > highX) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",lowX,highX));
  }
  if (lowY > highY) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",lowY,highY));
  }
  this.val=value;
  this.lowX=lowX;
  this.lowY=lowY;
  this.highX=highX;
  this.highY=highY;
}",0.6035714285714285
59334,"public int lowX(){
  return 0;
}","public int lowX(){
  return lowX;
}",0.9253731343283582
59335,"public int lowY(){
  return 0;
}","public int lowY(){
  return lowY;
}",0.9253731343283582
59336,"public int highX(){
  return 0;
}","public int highX(){
  return highX;
}",0.9142857142857144
59337,"public int highY(){
  return 0;
}","public int highY(){
  return highY;
}",0.9142857142857144
59338,"/** 
 * Create a regional set of aggregates. Though any integer-pair may be used as an index, the default value will be returned for any point outside of the region defined by (lowX, lowY) and (highX, highY). This class treats row of highX and the column highY as the outside of the  region of interest (much like length is used in arrays).
 * @param lowX Lowest valid x
 * @param lowY Lowest valid y 
 * @param highX Lowest invalid x > lowX 
 * @param highY Lowest invalid y > highX
 * @param defaultVal 
 */
@SuppressWarnings(""String_Node_Str"") public FlatAggregates(final int lowX,final int lowY,final int highX,final int highY,A defaultVal){
  if (lowX >= highX) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",lowX,highX));
  }
  if (lowY >= highY) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",lowY,highY));
  }
  this.lowX=lowX;
  this.lowY=lowY;
  this.highX=highX;
  this.highY=highY;
  this.defaultVal=defaultVal;
  int size=(highX - lowX) * (highY - lowY);
  size=Math.max(0,size);
  values=(A[])new Object[size];
  Arrays.fill(values,defaultVal);
}","/** 
 * Create a regional set of aggregates. Though any integer-pair may be used as an index, the default value will be returned for any point outside of the region defined by (lowX, lowY) and (highX, highY). This class treats row of highX and the column highY as the outside of the  region of interest (much like length is used in arrays).
 * @param lowX Lowest valid x
 * @param lowY Lowest valid y 
 * @param highX Lowest invalid x > lowX 
 * @param highY Lowest invalid y > highX
 * @param defaultVal 
 */
@SuppressWarnings(""String_Node_Str"") public FlatAggregates(final int lowX,final int lowY,final int highX,final int highY,A defaultVal){
  if (lowX > highX) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",lowX,highX));
  }
  if (lowY > highY) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",lowY,highY));
  }
  this.lowX=lowX;
  this.lowY=lowY;
  this.highX=highX;
  this.highY=highY;
  this.defaultVal=defaultVal;
  int size=(highX - lowX) * (highY - lowY);
  size=Math.max(0,size);
  values=(A[])new Object[size];
  Arrays.fill(values,defaultVal);
}",0.9990999099909992
59339,"private final Aggregates<A> local(){
  Glyphset.RandomAccess<G> subset=new GlyphSubset<G>(glyphs,low,high);
  Rectangle bounds=view.createTransformedShape(Util.bounds(subset)).getBounds();
  bounds=bounds.intersection(new Rectangle(0,0,width,height));
  if (bounds.isEmpty()) {
    return new ConstantAggregates<>(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height,op.identity());
  }
  Aggregates<A> aggregates=new FlatAggregates<>(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height,op.identity());
  Point2D lowP=new Point2D.Double();
  Point2D highP=new Point2D.Double();
  for (  Glyph<G> g : subset) {
    Rectangle2D b=g.shape().getBounds2D();
    lowP.setLocation(b.getMinX(),b.getMinY());
    highP.setLocation(b.getMaxX(),b.getMaxY());
    view.transform(lowP,lowP);
    view.transform(highP,highP);
    int lowx=(int)Math.floor(lowP.getX());
    int lowy=(int)Math.floor(lowP.getY());
    int highx=(int)Math.ceil(highP.getX());
    int highy=(int)Math.ceil(highP.getY());
    Rectangle pixel=new Rectangle(lowx,lowy,1,1);
    A v=op.at(pixel,new GlyphSingleton<G>(g,subset.valueType()),inverseView);
    for (int x=Math.max(0,lowx); x < highx && x < width; x++) {
      for (int y=Math.max(0,lowy); y < highy && y < height; y++) {
        aggregates.set(x,y,reducer.combine(aggregates.at(x,y),v));
      }
    }
  }
  recorder.update(high - low);
  return aggregates;
}","private final Aggregates<A> local(){
  Glyphset.RandomAccess<G> subset=new GlyphSubset<G>(glyphs,low,high);
  Rectangle bounds=view.createTransformedShape(Util.bounds(subset)).getBounds();
  bounds=bounds.intersection(new Rectangle(0,0,width,height));
  if (bounds.isEmpty()) {
    int x2=bounds.x + bounds.width;
    int y2=bounds.y + bounds.height;
    return new ConstantAggregates<>(Math.min(x2,bounds.x),Math.min(y2,bounds.y),Math.max(x2,bounds.x),Math.min(y2,bounds.y),op.identity());
  }
  Aggregates<A> aggregates=new FlatAggregates<>(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height,op.identity());
  Point2D lowP=new Point2D.Double();
  Point2D highP=new Point2D.Double();
  for (  Glyph<G> g : subset) {
    Rectangle2D b=g.shape().getBounds2D();
    lowP.setLocation(b.getMinX(),b.getMinY());
    highP.setLocation(b.getMaxX(),b.getMaxY());
    view.transform(lowP,lowP);
    view.transform(highP,highP);
    int lowx=(int)Math.floor(lowP.getX());
    int lowy=(int)Math.floor(lowP.getY());
    int highx=(int)Math.ceil(highP.getX());
    int highy=(int)Math.ceil(highP.getY());
    Rectangle pixel=new Rectangle(lowx,lowy,1,1);
    A v=op.at(pixel,new GlyphSingleton<G>(g,subset.valueType()),inverseView);
    for (int x=Math.max(0,lowx); x < highx && x < width; x++) {
      for (int y=Math.max(0,lowy); y < highy && y < height; y++) {
        aggregates.set(x,y,reducer.combine(aggregates.at(x,y),v));
      }
    }
  }
  recorder.update(high - low);
  return aggregates;
}",0.9225496915695682
59340,"/** 
 * Combine two aggregate sets according to the passed reducer. The resulting aggregate set will have a realized subset region sufficient to cover the realized sbuset region of both source aggregate sets (regardless of  the values found in those sources).  If one of the two aggregate sets provided is already of sufficient size, it will be used as both a source and a target.
 * @param left Aggregate set to use for left-hand arguments
 * @param right Aggregate set to use for right-hand arguments
 * @param red Reduction operation
 * @return Resulting aggregate set (may be new or a destructively updated left or right parameter) 
 */
public static <T>Aggregates<T> reduceAggregates(Aggregates<T> left,Aggregates<T> right,AggregateReducer<T,T,T> red){
  if (left == null) {
    return right;
  }
  if (right == null) {
    return left;
  }
  List<Aggregates<T>> sources=new ArrayList<Aggregates<T>>();
  Aggregates<T> target;
  Rectangle rb=new Rectangle(right.lowX(),right.lowY(),right.highX() - right.lowX(),right.highY() - right.lowY());
  Rectangle lb=new Rectangle(left.lowX(),left.lowY(),left.highX() - left.lowX(),left.highY() - left.lowY());
  Rectangle bounds=rb.union(lb);
  if (lb.contains(bounds)) {
    sources.add(right);
    target=left;
  }
 else   if (rb.contains(bounds)) {
    sources.add(left);
    target=right;
  }
 else {
    sources.add(right);
    sources.add(left);
    target=new FlatAggregates<T>(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height,red.identity());
  }
  for (  Aggregates<T> source : sources) {
    for (int x=Math.max(0,source.lowX()); x < source.highX(); x++) {
      for (int y=Math.max(0,source.lowY()); y < source.highY(); y++) {
        target.set(x,y,red.combine(target.at(x,y),source.at(x,y)));
      }
    }
  }
  return target;
}","/** 
 * Combine two aggregate sets according to the passed reducer. The resulting aggregate set will have a realized subset region sufficient to cover the realized sbuset region of both source aggregate sets (regardless of  the values found in those sources).  If one of the two aggregate sets provided is already of sufficient size, it will be used as both a source and a target.
 * @param left Aggregate set to use for left-hand arguments
 * @param right Aggregate set to use for right-hand arguments
 * @param red Reduction operation
 * @return Resulting aggregate set (may be new or a destructively updated left or right parameter) 
 */
public static <T>Aggregates<T> reduceAggregates(Aggregates<T> left,Aggregates<T> right,AggregateReducer<T,T,T> red){
  if (left == null) {
    return right;
  }
  if (right == null) {
    return left;
  }
  T identity=red.identity();
  if ((left instanceof ConstantAggregates) && isEqual(identity,left.defaultValue())) {
    return right;
  }
  if ((right instanceof ConstantAggregates) && isEqual(identity,right.defaultValue())) {
    return right;
  }
  List<Aggregates<T>> sources=new ArrayList<Aggregates<T>>();
  Aggregates<T> target;
  Rectangle rb=new Rectangle(right.lowX(),right.lowY(),right.highX() - right.lowX(),right.highY() - right.lowY());
  Rectangle lb=new Rectangle(left.lowX(),left.lowY(),left.highX() - left.lowX(),left.highY() - left.lowY());
  Rectangle bounds=rb.union(lb);
  if (lb.contains(bounds)) {
    sources.add(right);
    target=left;
  }
 else   if (rb.contains(bounds)) {
    sources.add(left);
    target=right;
  }
 else {
    sources.add(right);
    sources.add(left);
    target=new FlatAggregates<T>(bounds.x,bounds.y,bounds.x + bounds.width,bounds.y + bounds.height,red.identity());
  }
  for (  Aggregates<T> source : sources) {
    for (int x=Math.max(0,source.lowX()); x < source.highX(); x++) {
      for (int y=Math.max(0,source.lowY()); y < source.highY(); y++) {
        target.set(x,y,red.combine(target.at(x,y),source.at(x,y)));
      }
    }
  }
  return target;
}",0.9355089355089355
59341,"public void get(byte[] target,long offset,int length){
  ensure(offset,length);
  buffer.get(target);
}","public void get(byte[] target,long offset,int length){
  ensure(offset,length);
  this.position(offset);
  buffer.get(target);
}",0.8917748917748918
59342,"public void zoomFit(){
  try {
    Rectangle2D content=dataset().bounds();
    if (content == null) {
      return;
    }
    double w=image.getWidth() / content.getWidth();
    double h=image.getHeight() / content.getHeight();
    double scale=Math.min(w,h);
    scale=scale / getScale();
    Point2D center=new Point2D.Double(content.getCenterX(),content.getCenterY());
    zoomAbs(center,scale);
    panToAbs(center);
  }
 catch (  Exception e) {
  }
}","public void zoomFit(){
  try {
    Rectangle2D content=dataset().bounds();
    if (content == null) {
      return;
    }
    double w=getWidth() / content.getWidth();
    double h=getHeight() / content.getHeight();
    double scale=Math.min(w,h);
    scale=scale / getScale();
    Point2D center=new Point2D.Double(content.getCenterX(),content.getCenterY());
    zoomAbs(center,scale);
    panToAbs(center);
  }
 catch (  Exception e) {
  }
}",0.9866369710467706
59343,"public void actionPerformed(ActionEvent e){
  int rc=fc.showOpenDialog(panel);
  if (rc == JFileChooser.APPROVE_OPTION) {
    inputFile=fc.getSelectedFile();
  }
  panel.fireActionListeners();
}","public void actionPerformed(ActionEvent e){
  int rc=fc.showOpenDialog(panel);
  if (rc == JFileChooser.APPROVE_OPTION) {
    inputFile=fc.getSelectedFile();
    panel.fireActionListeners();
  }
}",0.9846153846153848
59344,"public FileOptions(ARApp parnt){
  export=new ExportAggregates(parnt);
  this.add(chooseFile);
  this.add(export);
  fc.setFileFilter(CSV_HBIN);
  final CompoundPanel panel=this;
  chooseFile.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int rc=fc.showOpenDialog(panel);
      if (rc == JFileChooser.APPROVE_OPTION) {
        inputFile=fc.getSelectedFile();
      }
      panel.fireActionListeners();
    }
  }
);
}","public FileOptions(ARApp parnt){
  export=new ExportAggregates(parnt);
  this.add(chooseFile);
  this.add(export);
  fc.setFileFilter(CSV_HBIN);
  final CompoundPanel panel=this;
  chooseFile.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int rc=fc.showOpenDialog(panel);
      if (rc == JFileChooser.APPROVE_OPTION) {
        inputFile=fc.getSelectedFile();
        panel.fireActionListeners();
      }
    }
  }
);
}",0.9230769230769232
59345,"public RLE combine(RLE left,RLE right){
  if (left == null || left.size() == 0) {
    return right;
  }
  if (right == null || left.size() == 0) {
    return left;
  }
  HashSet<Object> categories=new HashSet<Object>();
  categories.addAll(left.keys);
  categories.addAll(right.keys);
  for (  Object category : categories) {
    int v1=left.val(category);
    int v2=right.val(category);
    left.add(category,v1 + v2);
  }
  return left;
}","public RLE combine(RLE left,RLE right){
  if (left == null || left.size() == 0) {
    return right;
  }
  if (right == null || left.size() == 0) {
    return left;
  }
  HashSet<Object> categories=new HashSet<Object>();
  categories.addAll(left.keys);
  categories.addAll(right.keys);
  RLE total=new RLE();
  for (  Object category : categories) {
    int v1=left.val(category);
    int v2=right.val(category);
    total.add(category,v1 + v2);
  }
  return total;
}",0.9547960308710032
59346,"private ByteBuffer ensure(long position,int bytes){
  if ((buffer.limit() - buffer.position()) < bytes) {
    filePos=buffer.position() + filePos;
    try {
      buffer=inputStream.getChannel().map(FileChannel.MapMode.READ_ONLY,filePos,Math.min(bufferSize,(fileSize - filePos)));
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
 else   if (filePos > position) {
    filePos=position;
    try {
      buffer=inputStream.getChannel().map(FileChannel.MapMode.READ_ONLY,filePos,Math.min(bufferSize,(fileSize - filePos)));
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  return buffer;
}","private ByteBuffer ensure(long position,int bytes){
  if ((position < filePos) || (position + bytes) > (buffer.limit() + filePos)) {
    filePos=position;
    try {
      buffer=inputStream.getChannel().map(FileChannel.MapMode.READ_ONLY,filePos,Math.min(bufferSize,(fileSize - filePos)));
    }
 catch (    IOException e) {
      throw new RuntimeException(String.format(""String_Node_Str"",position,bytes),e);
    }
  }
  return buffer;
}",0.5737122557726465
59347,"public void position(long at){
  ensure(at,margin);
}","public void position(long at){
  ensure(at,margin).position((int)(at - filePos));
}",0.7794117647058824
59348,"public BigFileByteBuffer(File source,int margin,int bufferSize) throws IOException {
  inputStream=new FileInputStream(source);
  FileChannel channel=inputStream.getChannel();
  fileSize=channel.size();
  filePos=0;
  buffer=channel.map(FileChannel.MapMode.READ_ONLY,filePos,Math.min(bufferSize,(fileSize - filePos)));
  this.margin=margin;
  this.bufferSize=bufferSize;
}","public BigFileByteBuffer(File source,int margin,int bufferSize) throws IOException {
  inputStream=new FileInputStream(source);
  FileChannel channel=inputStream.getChannel();
  fileSize=channel.size();
  filePos=0;
  buffer=channel.map(FileChannel.MapMode.READ_ONLY,filePos,Math.min(bufferSize,fileSize));
  this.margin=margin;
  this.bufferSize=bufferSize;
}",0.9617486338797814
59349,"public Status(){
  setLayout(new GridLayout(2,1));
  this.add(new LabeledItem(""String_Node_Str"",progress));
  progress.setMaximum(100);
  progress.setMinimum(0);
  progress.setStringPainted(true);
}","public Status(){
  setLayout(new GridLayout(2,1));
  this.add(new LabeledItem(""String_Node_Str"",progress));
  progress.setMaximum(100);
  progress.setMinimum(0);
  progress.setStringPainted(true);
  t.setDaemon(true);
  t.start();
}",0.9209302325581395
59350,"public UpdateTask(Status target,int id,double status,String message){
  this.target=target;
  this.id=id;
  this.status=status;
  this.message=message;
}","public UpdateTask(double status,String message){
  this.status=status;
  this.message=message;
}",0.7710843373493976
59351,"public void startMonitoring(Renderer renderer){
  stopMonitoring();
  progress.setString(""String_Node_Str"");
  Thread t=new Thread(new Monitor(this,++current,renderer),""String_Node_Str"");
  t.setDaemon(true);
  t.start();
}","public void startMonitoring(Renderer renderer){
  progress.setString(""String_Node_Str"");
  this.watching=renderer;
}",0.6371681415929203
59352,"public void run(){
  target.setStatus(id,status,message);
}","public void run(){
  Status.this.setStatus(status,message);
}",0.8833333333333333
59353,"public void setStatus(int id,double status,String message){
  if (id != this.current) {
    return;
  }
  status=Math.max(status,0);
  progress.setValue((int)(status * 100));
  progress.setString(message);
}","public void setStatus(double status,String message){
  status=Math.max(status,0);
  progress.setValue((int)(status * 100));
  progress.setString(message);
}",0.859504132231405
59354,"public boolean isEmpty(){
  return buffer == null || buffer.get().limit() <= 0;
}","public boolean isEmpty(){
  return buffer.get() == null || buffer.get().limit() <= 0;
}",0.9642857142857144
59355,"public MemMapList(File source,double glyphSize,Painter<Double> painter,TYPE[] types){
  this.glyphSize=glyphSize;
  this.source=source;
  this.painter=painter;
  if (types == null) {
    int length=0;
    while (true) {
      if (buffer.get().getInt() == 30) {
        break;
      }
      length++;
    }
    recordEntries=length;
    types=new TYPE[recordEntries];
    for (int i=0; i < recordEntries; i++) {
      int t=buffer.get().getInt();
      if (t == 105) {
        types[i]=TYPE.INT;
      }
 else       if (t == 100) {
        types[i]=TYPE.DOUBLE;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + i);
      }
    }
    this.types=types;
    headerOffset=(1 + types.length) * 4;
  }
 else {
    recordEntries=0;
    headerOffset=0;
    this.types=types;
  }
  int acc=0;
  for (  TYPE t : types) {
    acc+=t.bytes;
  }
  this.recordSize=acc;
}","public MemMapList(File source,double glyphSize,Painter<Double> painter,TYPE[] types){
  this.glyphSize=glyphSize;
  this.source=source;
  this.painter=painter;
  if (source != null && types == null) {
    int length=0;
    while (true) {
      char c=(char)buffer.get().get();
      if (c == 0x1E) {
        break;
      }
      length++;
    }
    recordEntries=length;
    types=new TYPE[recordEntries];
    buffer.get().position(0);
    for (int i=0; i < recordEntries; i++) {
      char t=(char)buffer.get().get();
      if (t == 'i') {
        types[i]=TYPE.INT;
      }
 else       if (t == 'l') {
        types[i]=TYPE.LONG;
      }
 else       if (t == 's') {
        types[i]=TYPE.SHORT;
      }
 else       if (t == 'd') {
        types[i]=TYPE.DOUBLE;
      }
 else       if (t == 'f') {
        types[i]=TYPE.FLOAT;
      }
 else       if (t == 'b') {
        types[i]=TYPE.BYTE;
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + i);
      }
    }
    this.types=types;
    headerOffset=(1 + types.length);
    int acc=0;
    for (    TYPE t : this.types) {
      acc+=t.bytes;
    }
    this.recordSize=acc;
  }
 else {
    recordEntries=0;
    headerOffset=0;
    this.types=null;
    this.recordSize=-1;
  }
}",0.6801695713612812
59356,"public int size(){
  return buffer == null ? 0 : buffer.get().limit() / ENTRY_SIZE;
}","public int size(){
  return buffer.get() == null ? 0 : (buffer.get().limit() - headerOffset) / recordSize;
}",0.7875647668393783
59357,"private double value(ByteBuffer buffer,int offset){
  if (types[offset] == TYPE.INT) {
    return buffer.getInt();
  }
  if (types[offset] == TYPE.DOUBLE) {
    return buffer.getDouble();
  }
  throw new RuntimeException(""String_Node_Str"" + offset);
}","private double value(ByteBuffer buffer,int offset){
  TYPE t=types[offset];
switch (t) {
case INT:
    return buffer.getInt();
case SHORT:
  return buffer.getShort();
case LONG:
return buffer.getLong();
case DOUBLE:
return buffer.getDouble();
case FLOAT:
return buffer.getFloat();
case BYTE:
return buffer.get();
}
throw new RuntimeException(""String_Node_Str"" + offset);
}",0.5842696629213483
59358,"public void playPauseToggle(){
  if (currentLyrics == null && trackList.size() > 0 && getCurrentPosition() >= 0) {
    play();
  }
 else {
    Intent intent=new Intent(application,MusicPlayerService.class);
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",""String_Node_Str"");
    intent.putExtras(bundle);
    application.startService(intent);
  }
}","public void playPauseToggle(){
  try {
    Intent intent=new Intent(application,MusicPlayerService.class);
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",""String_Node_Str"");
    Track track=trackList.get(getCurrentPosition());
    bundle.putString(""String_Node_Str"",track.getTrackTitle());
    bundle.putString(""String_Node_Str"",track.getArtistName());
    bundle.putString(""String_Node_Str"",track.getThumbnailUrl());
    intent.putExtras(bundle);
    application.startService(intent);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.5723404255319149
59359,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  Bundle bundle=intent.getExtras();
  String type=bundle.getString(""String_Node_Str"");
  String trackTitle=bundle.getString(""String_Node_Str"");
  String artistName=bundle.getString(""String_Node_Str"");
  String thumbnailUrl=bundle.getString(""String_Node_Str"");
  if (type.equals(""String_Node_Str"")) {
    play(trackTitle,artistName,thumbnailUrl);
  }
 else   if (type.equals(""String_Node_Str"")) {
    mediaPlayer.pause();
  }
 else   if (type.equals(""String_Node_Str"")) {
    isLoaded=false;
    mediaPlayer.stop();
    mediaPlayer.reset();
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (mediaPlayer.isPlaying()) {
      mediaPlayer.pause();
    }
 else {
      try {
        mediaPlayer.start();
      }
 catch (      Exception e) {
        play(trackTitle,artistName,thumbnailUrl);
      }
    }
  }
  playlistAdapter.notifyDataSetChanged();
  return Service.START_NOT_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  Bundle bundle=intent.getExtras();
  String type=bundle.getString(""String_Node_Str"");
  String trackTitle=bundle.getString(""String_Node_Str"");
  String artistName=bundle.getString(""String_Node_Str"");
  String thumbnailUrl=bundle.getString(""String_Node_Str"");
  if (type.equals(""String_Node_Str"")) {
    play(trackTitle,artistName,thumbnailUrl);
  }
 else   if (type.equals(""String_Node_Str"")) {
    mediaPlayer.pause();
  }
 else   if (type.equals(""String_Node_Str"")) {
    isLoaded=false;
    mediaPlayer.stop();
    mediaPlayer.reset();
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (mediaPlayer.isPlaying()) {
      mediaPlayer.pause();
    }
 else {
      if (!(isLoading() || isLoaded())) {
        play(trackTitle,artistName,thumbnailUrl);
      }
 else {
        try {
          mediaPlayer.start();
        }
 catch (        Exception e) {
          play(trackTitle,artistName,thumbnailUrl);
        }
      }
    }
  }
  playlistAdapter.notifyDataSetChanged();
  return Service.START_NOT_STICKY;
}",0.9348249027237354
59360,"ReaderWriterProcess createProcess() throws GMServiceException {
  try {
    return factory.getProcess(gmCommand);
  }
 catch (  IOException e) {
    throw new GMServiceException(e.getMessage(),e);
  }
}","ReaderWriterProcess createProcess() throws GMServiceException {
  try {
    return gmFactory.getProcess();
  }
 catch (  IOException e) {
    throw new GMServiceException(e.getMessage(),e);
  }
}",0.9672544080604534
59361,"protected GMConnectionPool(Factory factory,GMConnectionPoolConfig config,CommandSelector commandSelector){
  super(factory,notNull(config));
  factory.pool=this;
  evictAfterNumberOfUse=config.getEvictAfterNumberOfUse();
  notNull(commandSelector).setGmPath(config.getGMPath());
  this.gmCommand=commandSelector.gmCommand();
}","private GMConnectionPool(Factory factory,GMConnectionPoolConfig config){
  super(factory,getParentConfig(config));
  factory.pool=this;
  evictAfterNumberOfUse=config.getEvictAfterNumberOfUse();
  this.builder=GMProcessFactoryImpl.BUILDER;
  gmFactory=builder.buildFactory(config.getGMPath());
}",0.5442834138486312
59362,"/** 
 * Gets the path to GraphicsMagick executable set by   {@link #setGMPath(String)} or{@link GMConnectionPoolConfig#DEFAULT_GM_PATH} if it was not explicitly set.
 * @return the path to GraphicsMagick executable
 */
public String getGMPath(){
  return gmCommand[0];
}","/** 
 * Gets the path to GraphicsMagick executable set by   {@link #setGMPath(String)} or{@link GMConnectionPoolConfig#DEFAULT_GM_PATH} if it was not explicitly set.
 * @return the path to GraphicsMagick executable
 */
public String getGMPath(){
  return gmFactory.getGMPath();
}",0.9471766848816028
59363,"/** 
 * Sets the path to GraphicsMagick executable.
 * @param gmPath the path to GraphicsMagick executable
 */
public void setGMPath(@Nonnull String gmPath){
  if (gmPath == null)   throw new NullPointerException(""String_Node_Str"");
  gmCommand[0]=gmPath;
}","/** 
 * Sets the path to GraphicsMagick executable.
 * @param gmPath the path to GraphicsMagick executable
 */
public void setGMPath(@Nonnull String gmPath){
  if (gmPath == null)   throw new NullPointerException(""String_Node_Str"");
  gmFactory=builder.buildFactory(gmPath);
}",0.9043151969981238
59364,"@Override public void run(JaxWsExampleApplicationConfiguration jaxWsExampleApplicationConfiguration,Environment environment) throws Exception {
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new SimpleService()));
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new JavaFirstServiceImpl()).authentication(new BasicAuthentication(new BasicAuthenticator(),""String_Node_Str"")));
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new WsdlFirstServiceImpl()).cxfInInterceptors(new LoggingInInterceptor()).cxfOutInterceptors(new LoggingOutInterceptor()));
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new HibernateExampleService(new PersonDAO(hibernate.getSessionFactory()))).sessionFactory(hibernate.getSessionFactory()));
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new MtomServiceImpl()).enableMtom());
  environment.jersey().register(new AccessWsdlFirstServiceResource(jaxWsBundle.getClient(new ClientBuilder<WsdlFirstService>(WsdlFirstService.class,""String_Node_Str"").handlers(new WsdlFirstClientHandler()))));
  environment.jersey().register(new AccessMtomServiceResource(jaxWsBundle.getClient(new ClientBuilder<MtomService>(MtomService.class,""String_Node_Str"").enableMtom())));
  environment.jersey().register(new AccessProtectedServiceResource(jaxWsBundle.getClient(new ClientBuilder<JavaFirstService>(JavaFirstService.class,""String_Node_Str"").cxfInInterceptors(new LoggingInInterceptor()).cxfOutInterceptors(new LoggingOutInterceptor()))));
}","@Override public void run(JaxWsExampleApplicationConfiguration jaxWsExampleApplicationConfiguration,Environment environment) throws Exception {
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new SimpleService()));
  anotherJaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new SimpleService()));
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new JavaFirstServiceImpl()).authentication(new BasicAuthentication(new BasicAuthenticator(),""String_Node_Str"")));
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new WsdlFirstServiceImpl()).cxfInInterceptors(new LoggingInInterceptor()).cxfOutInterceptors(new LoggingOutInterceptor()));
  PersonDAO personDAO=new PersonDAO(hibernate.getSessionFactory());
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new HibernateExampleService(personDAO)).sessionFactory(hibernate.getSessionFactory()));
  anotherJaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new HibernateExampleService(personDAO)).sessionFactory(hibernate.getSessionFactory()));
  jaxWsBundle.publishEndpoint(new EndpointBuilder(""String_Node_Str"",new MtomServiceImpl()).enableMtom());
  environment.jersey().register(new AccessWsdlFirstServiceResource(jaxWsBundle.getClient(new ClientBuilder<>(WsdlFirstService.class,""String_Node_Str"").handlers(new WsdlFirstClientHandler()))));
  environment.jersey().register(new AccessMtomServiceResource(jaxWsBundle.getClient(new ClientBuilder<>(MtomService.class,""String_Node_Str"").enableMtom())));
  environment.jersey().register(new AccessProtectedServiceResource(jaxWsBundle.getClient(new ClientBuilder<>(JavaFirstService.class,""String_Node_Str"").cxfInInterceptors(new LoggingInInterceptor()).cxfOutInterceptors(new LoggingOutInterceptor()))));
}",0.8118103191172085
59365,"@Override public void initialize(Bootstrap<JaxWsExampleApplicationConfiguration> bootstrap){
  bootstrap.addBundle(hibernate);
  bootstrap.addBundle(jaxWsBundle);
}","@Override public void initialize(Bootstrap<JaxWsExampleApplicationConfiguration> bootstrap){
  bootstrap.addBundle(hibernate);
  bootstrap.addBundle(jaxWsBundle);
  bootstrap.addBundle(anotherJaxWsBundle);
}",0.8840970350404312
59366,"/** 
 * Implements com.yammer.dropwizard.Bundle#run()
 */
@Override public void run(Environment environment){
  checkArgument(environment != null,""String_Node_Str"");
  environment.servlets().addServlet(""String_Node_Str"",jaxwsEnvironment.buildServlet()).addMapping(servletPath);
  environment.lifecycle().addServerLifecycleListener(new ServerLifecycleListener(){
    @Override public void serverStarted(    Server server){
      jaxwsEnvironment.logEndpoints();
    }
  }
);
}","/** 
 * Implements com.yammer.dropwizard.Bundle#run()
 */
@Override public void run(Environment environment){
  checkArgument(environment != null,""String_Node_Str"");
  environment.servlets().addServlet(""String_Node_Str"" + jaxwsEnvironment.getDefaultPath(),jaxwsEnvironment.buildServlet()).addMapping(servletPath);
  environment.lifecycle().addServerLifecycleListener(new ServerLifecycleListener(){
    @Override public void serverStarted(    Server server){
      jaxwsEnvironment.logEndpoints();
    }
  }
);
}",0.9634888438133874
59367,"/** 
 * Publish JAX-WS server side endpoint.
 */
public void publishEndpoint(EndpointBuilder endpointBuilder){
  checkArgument(endpointBuilder != null,""String_Node_Str"");
  Endpoint endpoint=Endpoint.publish(endpointBuilder.getPath(),endpointBuilder.getService());
  if (endpointBuilder.isMtomEnabled()) {
    ((SOAPBinding)endpoint.getBinding()).setMTOMEnabled(true);
  }
  org.apache.cxf.endpoint.Endpoint cxfendpoint=null;
  ServerRegistry sr=bus.getExtension(org.apache.cxf.endpoint.ServerRegistry.class);
  for (  Server s : sr.getServers()) {
    Class<?> endpointClass=((Class)s.getEndpoint().getService().get(""String_Node_Str""));
    if (endpointBuilder.getService().getClass().getName().equals(endpointClass.getName()) || (endpointClass.isInterface() && endpointClass.isAssignableFrom(endpointBuilder.getService().getClass()))) {
      cxfendpoint=s.getEndpoint();
      break;
    }
  }
  if (cxfendpoint == null) {
    throw new RuntimeException(""String_Node_Str"" + endpointBuilder.getService().getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str"");
  }
  Invoker invoker=cxfendpoint.getService().getInvoker();
  ValidatorFactory vf=Validation.buildDefaultValidatorFactory();
  invoker=this.createValidatingInvoker(invoker,vf.getValidator());
  if (endpointBuilder.getSessionFactory() != null) {
    invoker=unitOfWorkInvokerBuilder.create(endpointBuilder.getService(),invoker,endpointBuilder.getSessionFactory());
    cxfendpoint.getService().setInvoker(invoker);
  }
  invoker=instrumentedInvokerBuilder.create(endpointBuilder.getService(),invoker);
  cxfendpoint.getService().setInvoker(invoker);
  if (endpointBuilder.getAuthentication() != null) {
    BasicAuthenticationInterceptor basicAuthInterceptor=this.createBasicAuthenticationInterceptor();
    basicAuthInterceptor.setAuthenticator(endpointBuilder.getAuthentication());
    cxfendpoint.getInInterceptors().add(basicAuthInterceptor);
  }
  if (endpointBuilder.getCxfInInterceptors() != null) {
    cxfendpoint.getInInterceptors().addAll(endpointBuilder.getCxfInInterceptors());
  }
  if (endpointBuilder.getCxfInFaultInterceptors() != null) {
    cxfendpoint.getInFaultInterceptors().addAll(endpointBuilder.getCxfInFaultInterceptors());
  }
  if (endpointBuilder.getCxfOutInterceptors() != null) {
    cxfendpoint.getOutInterceptors().addAll(endpointBuilder.getCxfOutInterceptors());
  }
  if (endpointBuilder.getCxfOutFaultInterceptors() != null) {
    cxfendpoint.getOutFaultInterceptors().addAll(endpointBuilder.getCxfOutFaultInterceptors());
  }
}","/** 
 * Publish JAX-WS server side endpoint.
 */
public void publishEndpoint(EndpointBuilder endpointBuilder){
  checkArgument(endpointBuilder != null,""String_Node_Str"");
  EndpointImpl cxfendpoint=new EndpointImpl(bus,endpointBuilder.getService());
  cxfendpoint.publish(endpointBuilder.getPath());
  if (endpointBuilder.isMtomEnabled()) {
    ((SOAPBinding)cxfendpoint.getBinding()).setMTOMEnabled(true);
  }
  Invoker invoker=cxfendpoint.getService().getInvoker();
  ValidatorFactory vf=Validation.buildDefaultValidatorFactory();
  invoker=this.createValidatingInvoker(invoker,vf.getValidator());
  if (endpointBuilder.getSessionFactory() != null) {
    invoker=unitOfWorkInvokerBuilder.create(endpointBuilder.getService(),invoker,endpointBuilder.getSessionFactory());
    cxfendpoint.getService().setInvoker(invoker);
  }
  invoker=instrumentedInvokerBuilder.create(endpointBuilder.getService(),invoker);
  cxfendpoint.getService().setInvoker(invoker);
  if (endpointBuilder.getAuthentication() != null) {
    BasicAuthenticationInterceptor basicAuthInterceptor=this.createBasicAuthenticationInterceptor();
    basicAuthInterceptor.setAuthenticator(endpointBuilder.getAuthentication());
    cxfendpoint.getInInterceptors().add(basicAuthInterceptor);
  }
  if (endpointBuilder.getCxfInInterceptors() != null) {
    cxfendpoint.getInInterceptors().addAll(endpointBuilder.getCxfInInterceptors());
  }
  if (endpointBuilder.getCxfInFaultInterceptors() != null) {
    cxfendpoint.getInFaultInterceptors().addAll(endpointBuilder.getCxfInFaultInterceptors());
  }
  if (endpointBuilder.getCxfOutInterceptors() != null) {
    cxfendpoint.getOutInterceptors().addAll(endpointBuilder.getCxfOutInterceptors());
  }
  if (endpointBuilder.getCxfOutFaultInterceptors() != null) {
    cxfendpoint.getOutFaultInterceptors().addAll(endpointBuilder.getCxfOutFaultInterceptors());
  }
}",0.8165116806532093
59368,"public void logEndpoints(){
  ServerRegistry sr=bus.getExtension(org.apache.cxf.endpoint.ServerRegistry.class);
  if (sr.getServers().size() > 0) {
    String endpoints=""String_Node_Str"";
    for (    Server s : sr.getServers()) {
      endpoints+=""String_Node_Str"" + this.defaultPath + s.getEndpoint().getEndpointInfo().getAddress()+ ""String_Node_Str""+ s.getEndpoint().getEndpointInfo().getInterface().getName()+ ""String_Node_Str"";
    }
    log.info(""String_Node_Str"" + endpoints);
  }
 else {
    log.info(""String_Node_Str"");
  }
}","public void logEndpoints(){
  ServerRegistry sr=bus.getExtension(org.apache.cxf.endpoint.ServerRegistry.class);
  if (sr.getServers().size() > 0) {
    String endpoints=""String_Node_Str"";
    for (    Server s : sr.getServers()) {
      endpoints+=""String_Node_Str"" + this.defaultPath + s.getEndpoint().getEndpointInfo().getAddress()+ ""String_Node_Str""+ s.getEndpoint().getEndpointInfo().getInterface().getName()+ ""String_Node_Str"";
    }
    log.info(""String_Node_Str"" + this.defaultPath + ""String_Node_Str""+ endpoints);
  }
 else {
    log.info(""String_Node_Str"");
  }
}",0.9656419529837252
59369,"@Test public void initializeAndRun(){
  JAXWSBundle jaxwsBundle=new JAXWSBundle(""String_Node_Str"",jaxwsEnvironment);
  try {
    jaxwsBundle.run(null);
  }
 catch (  Exception e) {
    assertThat(e,is(instanceOf(IllegalArgumentException.class)));
  }
  jaxwsBundle.initialize(bootstrap);
  verify(jaxwsEnvironment).setInstrumentedInvokerBuilder(any(InstrumentedInvokerFactory.class));
  jaxwsBundle.run(environment);
  verify(servletEnvironment).addServlet(eq(""String_Node_Str""),any(Servlet.class));
  verify(lifecycleEnvironment).addServerLifecycleListener(any(ServerLifecycleListener.class));
  verify(servlet).addMapping(""String_Node_Str"");
}","@Test public void initializeAndRun(){
  JAXWSBundle jaxwsBundle=new JAXWSBundle(""String_Node_Str"",jaxwsEnvironment);
  try {
    jaxwsBundle.run(null);
  }
 catch (  Exception e) {
    assertThat(e,is(instanceOf(IllegalArgumentException.class)));
  }
  jaxwsBundle.initialize(bootstrap);
  verify(jaxwsEnvironment).setInstrumentedInvokerBuilder(any(InstrumentedInvokerFactory.class));
  jaxwsBundle.run(environment);
  verify(servletEnvironment).addServlet(startsWith(""String_Node_Str""),any(Servlet.class));
  verify(lifecycleEnvironment).addServerLifecycleListener(any(ServerLifecycleListener.class));
  verify(servlet).addMapping(""String_Node_Str"");
}",0.9907550077041604
59370,"/** 
 * {@inheritDoc}<p/> Updates the view related to the Controller specified in the given meta-data identification string. <p/> Note the meta-data item neither contains nor composes details of the related Java type because it doesn't create any ITD.
 */
public MetadataItem get(final String jqueryJspMetadataId){
  final JavaType controller=JQueryJspMetadata.getJavaType(jqueryJspMetadataId);
  final String jqueryMetadataKey=JQueryMetadata.createIdentifier(controller,JQueryJspMetadata.getPath(jqueryJspMetadataId));
  final JQueryMetadata jqueryMetadata=(JQueryMetadata)getMetadataService().get(jqueryMetadataKey);
  if (jqueryMetadata != null && jqueryMetadata.isValid()) {
    getOperations().updateCrudJsp(controller,jqueryMetadata);
  }
 else {
    return null;
  }
  final String finderMetadataKey=WebFinderMetadata.createIdentifier(controller,JQueryJspMetadata.getPath(jqueryJspMetadataId));
  final WebFinderMetadata finderMetadata=(WebFinderMetadata)getMetadataService().get(finderMetadataKey);
  if (finderMetadata != null) {
    if (finderMetadata.isValid()) {
      getOperations().updateFindJsp(controller,finderMetadata);
    }
 else {
      return null;
    }
  }
  return new JQueryJspMetadata(jqueryJspMetadataId,jqueryMetadata);
}","/** 
 * {@inheritDoc}<p/> Updates the view related to the Controller specified in the given meta-data identification string. <p/> Note the meta-data item neither contains nor composes details of the related Java type because it doesn't create any ITD.
 */
public MetadataItem get(final String jqueryJspMetadataId){
  final JavaType controller=JQueryJspMetadata.getJavaType(jqueryJspMetadataId);
  final String jqueryMetadataKey=JQueryMetadata.createIdentifier(controller,JQueryJspMetadata.getPath(jqueryJspMetadataId));
  final JQueryMetadata jqueryMetadata=(JQueryMetadata)getMetadataService().get(jqueryMetadataKey);
  if (jqueryMetadata != null && jqueryMetadata.isValid()) {
    getOperations().updateCrudJsp(controller,jqueryMetadata);
  }
 else {
    return null;
  }
  final String finderMetadataKey=WebFinderMetadata.createIdentifier(controller,JQueryJspMetadata.getPath(jqueryJspMetadataId));
  final WebFinderMetadata finderMetadata=(WebFinderMetadata)getMetadataService().get(finderMetadataKey);
  if (finderMetadata != null) {
    if (finderMetadata.isValid()) {
      getFileManager().commit();
      getOperations().updateFindJsp(controller,finderMetadata);
    }
 else {
      return null;
    }
  }
  return new JQueryJspMetadata(jqueryJspMetadataId,jqueryMetadata);
}",0.98698224852071
59371,"/** 
 * Registers the dependency between upstream   {@link JQueryMetadata}, upstream   {@link WebFinderMetadata} and this meta-data as downstream.<p/> Registers this listener to be invoked when implementation of {@link JQueryMetadata} or {@link WebFinderMetadata} (both acts as sourcemeta-data) identification has requested to notify a particular destination meta-data identification of an event. Note this class listens for  {@link JQueryJspMetadata} destination meta-data only.
 * @param context
 */
protected void activate(final ComponentContext cContext){
  context=cContext.getBundleContext();
  getMetadataDependencyRegistry().registerDependency(JQueryMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().registerDependency(WebFinderMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().addNotificationListener(this);
}","/** 
 * Registers the dependency between upstream   {@link JQueryMetadata}, upstream   {@link WebFinderMetadata} and this meta-data as downstream.<p/> Registers this listener to be invoked when implementation of {@link JQueryMetadata} or {@link WebFinderMetadata} (both acts as sourcemeta-data) identification has requested to notify a particular destination meta-data identification of an event. Note this class listens for  {@link JQueryJspMetadata} destination meta-data only.
 * @param context
 */
protected void activate(final ComponentContext cContext){
  context=cContext.getBundleContext();
  getMetadataDependencyRegistry().registerDependency(JQueryMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().registerDependency(WebFinderMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().registerDependency(WebScaffoldMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().addNotificationListener(this);
}",0.9283276450511946
59372,"public void notify(final String upstreamDependency,String downstreamDependency){
  if (MetadataIdentificationUtils.isIdentifyingClass(downstreamDependency)) {
    if (JQueryMetadata.isValid(upstreamDependency)) {
      final JavaType controller=JQueryMetadata.getJavaType(upstreamDependency);
      final LogicalPath path=JQueryMetadata.getPath(upstreamDependency);
      downstreamDependency=JQueryJspMetadata.createIdentifier(controller,path);
    }
 else     if (WebFinderMetadata.isValid(upstreamDependency)) {
      final JavaType controller=WebFinderMetadata.getJavaType(upstreamDependency);
      final LogicalPath path=WebFinderMetadata.getPath(upstreamDependency);
      downstreamDependency=JQueryJspMetadata.createIdentifier(controller,path);
    }
 else {
      return;
    }
    if (getMetadataDependencyRegistry().getDownstream(upstreamDependency).contains(downstreamDependency)) {
      return;
    }
    getMetadataService().evictAndGet(downstreamDependency);
  }
}","public void notify(final String upstreamDependency,String downstreamDependency){
  getJspMetadataListener().notify(upstreamDependency,downstreamDependency);
  if (MetadataIdentificationUtils.isIdentifyingClass(downstreamDependency)) {
    if (JQueryMetadata.isValid(upstreamDependency)) {
      final JavaType controller=JQueryMetadata.getJavaType(upstreamDependency);
      final LogicalPath path=JQueryMetadata.getPath(upstreamDependency);
      downstreamDependency=JQueryJspMetadata.createIdentifier(controller,path);
    }
 else     if (WebFinderMetadata.isValid(upstreamDependency)) {
      final JavaType controller=WebFinderMetadata.getJavaType(upstreamDependency);
      final LogicalPath path=WebFinderMetadata.getPath(upstreamDependency);
      downstreamDependency=JQueryJspMetadata.createIdentifier(controller,path);
    }
 else     if (WebScaffoldMetadata.isValid(upstreamDependency)) {
      final JavaType controller=WebScaffoldMetadata.getJavaType(upstreamDependency);
      final LogicalPath path=WebScaffoldMetadata.getPath(upstreamDependency);
      downstreamDependency=JQueryJspMetadata.createIdentifier(controller,path);
    }
 else {
      return;
    }
    if (getMetadataDependencyRegistry().getDownstream(upstreamDependency).contains(downstreamDependency)) {
      return;
    }
    getMetadataService().evictAndGet(downstreamDependency);
  }
}",0.8290816326530612
59373,"/** 
 * Removes the dependencies with   {@link JQueryMetadata} and{@link WebFinderMetadata}. <p/> De-register this instance to receive MetadataNotificationListener events.
 * @param context
 */
protected void deactivate(final ComponentContext context){
  getMetadataDependencyRegistry().deregisterDependency(JQueryMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().deregisterDependency(WebFinderMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().removeNotificationListener(this);
}","/** 
 * Removes the dependencies with   {@link JQueryMetadata} and{@link WebFinderMetadata}. <p/> De-register this instance to receive MetadataNotificationListener events.
 * @param context
 */
protected void deactivate(final ComponentContext context){
  getMetadataDependencyRegistry().deregisterDependency(JQueryMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().deregisterDependency(WebFinderMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().deregisterDependency(WebScaffoldMetadata.getMetadataIdentiferType(),JQueryJspMetadata.getMetadataIdentiferType());
  getMetadataDependencyRegistry().removeNotificationListener(this);
}",0.8916363636363637
59374,"/** 
 * Return an instance of the Metadata offered by this add-on
 */
protected ItdTypeDetailsProvidingMetadataItem getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  final WebJpaBatchAnnotationValues annotationValues=new WebJpaBatchAnnotationValues(governorPhysicalTypeMetadata);
  final JavaType service=annotationValues.getService();
  if (!annotationValues.isAnnotationFound() || service == null) {
    return null;
  }
  final String serviceMid=getTypeLocationService().getPhysicalTypeIdentifier(service);
  if (serviceMid == null) {
    return null;
  }
  LogicalPath path=WebJpaBatchMetadata.getPath(metadataIdentificationString);
  WebScaffoldAnnotationValues webScaffoldMetadataValue=new WebScaffoldAnnotationValues(governorPhysicalTypeMetadata);
  String serviceMetadataKey=JpaBatchMetadata.createIdentifier(service,path);
  getMetadataDependencyRegistry().registerDependency(serviceMetadataKey,metadataIdentificationString);
  JpaBatchMetadata serviceMetadata=(JpaBatchMetadata)getMetadataService().get(serviceMetadataKey);
  return new WebJpaBatchMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,annotationValues,serviceMetadata,webScaffoldMetadataValue);
}","/** 
 * Return an instance of the Metadata offered by this add-on
 */
protected ItdTypeDetailsProvidingMetadataItem getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  final WebJpaBatchAnnotationValues annotationValues=new WebJpaBatchAnnotationValues(governorPhysicalTypeMetadata);
  final JavaType service=annotationValues.getService();
  if (!annotationValues.isAnnotationFound() || service == null) {
    return null;
  }
  final String serviceMid=getTypeLocationService().getPhysicalTypeIdentifier(service);
  if (serviceMid == null) {
    return null;
  }
  LogicalPath path=WebJpaBatchMetadata.getPath(metadataIdentificationString);
  WebScaffoldAnnotationValues webScaffoldMetadataValue=new WebScaffoldAnnotationValues(governorPhysicalTypeMetadata);
  String serviceMetadataKey=JpaBatchMetadata.createIdentifier(service,path);
  getMetadataDependencyRegistry().registerDependency(serviceMetadataKey,metadataIdentificationString);
  JpaBatchMetadata serviceMetadata=(JpaBatchMetadata)getMetadataService().get(serviceMetadataKey);
  if (serviceMetadata == null) {
    return null;
  }
  return new WebJpaBatchMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,annotationValues,serviceMetadata,webScaffoldMetadataValue);
}",0.979467680608365
59375,"/** 
 * This method annotate all controllers if has Geo Fields
 * @param path
 */
public void annotateAllGeoEntityControllers(List<String> paths){
  Set<ClassOrInterfaceTypeDetails> entityControllers=typeLocationService.findClassesOrInterfaceDetailsWithAnnotation(ROO_WEB_SCAFFOLD_ANNOTATION);
  Validate.notNull(entityControllers,""String_Node_Str"");
  List<JavaType> mapControllers=GeoUtils.getAllMapsControllers(typeLocationService);
  Iterator<ClassOrInterfaceTypeDetails> it=entityControllers.iterator();
  while (it.hasNext()) {
    ClassOrInterfaceTypeDetails entityController=it.next();
    AnnotationMetadata scaffoldAnnotation=entityController.getAnnotation(ROO_WEB_SCAFFOLD_ANNOTATION);
    Object entity=scaffoldAnnotation.getAttribute(""String_Node_Str"").getValue();
    ClassOrInterfaceTypeDetails entityDetails=typeLocationService.getTypeDetails((JavaType)entity);
    List<? extends FieldMetadata> entityFields=entityDetails.getDeclaredFields();
    Iterator<? extends FieldMetadata> fieldsIterator=entityFields.iterator();
    while (fieldsIterator.hasNext()) {
      FieldMetadata field=fieldsIterator.next();
      JavaType fieldType=field.getFieldType();
      JavaPackage fieldPackage=fieldType.getPackage();
      if (fieldPackage.toString().equals(""String_Node_Str"")) {
        ClassOrInterfaceTypeDetailsBuilder detailsBuilder=new ClassOrInterfaceTypeDetailsBuilder(entityController);
        AnnotationMetadataBuilder annotationBuilder=new AnnotationMetadataBuilder(GVNIX_WEB_ENTITY_MAP_LAYER_ANNOTATION);
        detailsBuilder.updateTypeAnnotation(annotationBuilder.build());
        typeManagementService.createOrUpdateTypeOnDisk(detailsBuilder.build());
        if (!(paths.size() == 1 && paths.get(0).equals(""String_Node_Str""))) {
          Iterator<String> pathIterator=paths.iterator();
          while (pathIterator.hasNext()) {
            String currentPath=pathIterator.next();
            JavaType mapController=GeoUtils.getMapControllerByPath(currentPath,typeLocationService);
            annotateMapController(mapController,typeLocationService,typeManagementService,entityController.getType());
          }
        }
 else {
          for (          JavaType mapController : mapControllers) {
            annotateMapController(mapController,typeLocationService,typeManagementService,entityController.getType());
          }
        }
        break;
      }
    }
  }
}","/** 
 * This method annotate all controllers if has Geo Fields
 * @param path
 */
public void annotateAllGeoEntityControllers(List<String> paths){
  Set<ClassOrInterfaceTypeDetails> entityControllers=typeLocationService.findClassesOrInterfaceDetailsWithAnnotation(ROO_WEB_SCAFFOLD_ANNOTATION);
  Validate.notNull(entityControllers,""String_Node_Str"");
  List<JavaType> mapControllers=GeoUtils.getAllMapsControllers(typeLocationService);
  Iterator<ClassOrInterfaceTypeDetails> it=entityControllers.iterator();
  while (it.hasNext()) {
    ClassOrInterfaceTypeDetails entityController=it.next();
    AnnotationMetadata scaffoldAnnotation=entityController.getAnnotation(ROO_WEB_SCAFFOLD_ANNOTATION);
    Object entity=scaffoldAnnotation.getAttribute(""String_Node_Str"").getValue();
    ClassOrInterfaceTypeDetails entityDetails=typeLocationService.getTypeDetails((JavaType)entity);
    AnnotationMetadata gvNIXEntityMapLayerAnnotation=entityDetails.getAnnotation(GVNIX_ENTITY_MAP_LAYER_ANNOTATION);
    if (gvNIXEntityMapLayerAnnotation != null) {
      List<? extends FieldMetadata> entityFields=entityDetails.getDeclaredFields();
      Iterator<? extends FieldMetadata> fieldsIterator=entityFields.iterator();
      while (fieldsIterator.hasNext()) {
        FieldMetadata field=fieldsIterator.next();
        JavaType fieldType=field.getFieldType();
        JavaPackage fieldPackage=fieldType.getPackage();
        if (fieldPackage.toString().equals(""String_Node_Str"")) {
          ClassOrInterfaceTypeDetailsBuilder detailsBuilder=new ClassOrInterfaceTypeDetailsBuilder(entityController);
          AnnotationMetadataBuilder annotationBuilder=new AnnotationMetadataBuilder(GVNIX_WEB_ENTITY_MAP_LAYER_ANNOTATION);
          detailsBuilder.updateTypeAnnotation(annotationBuilder.build());
          typeManagementService.createOrUpdateTypeOnDisk(detailsBuilder.build());
          if (!(paths.size() == 1 && paths.get(0).equals(""String_Node_Str""))) {
            Iterator<String> pathIterator=paths.iterator();
            while (pathIterator.hasNext()) {
              String currentPath=pathIterator.next();
              JavaType mapController=GeoUtils.getMapControllerByPath(currentPath,typeLocationService);
              annotateMapController(mapController,typeLocationService,typeManagementService,entityController.getType());
            }
          }
 else {
            for (            JavaType mapController : mapControllers) {
              annotateMapController(mapController,typeLocationService,typeManagementService,entityController.getType());
            }
          }
          break;
        }
      }
    }
  }
}",0.955123113582208
59376,"/** 
 * This method adds specific GEO entities to all available maps or specific map
 */
@Override public void add(JavaType controller,JavaSymbolName path){
  if (!checkExistsMapElement()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Validate.notNull(controller,""String_Node_Str"");
  ClassOrInterfaceTypeDetails controllerDetails=typeLocationService.getTypeDetails(controller);
  AnnotationMetadata scaffoldAnnotation=controllerDetails.getAnnotation(ROO_WEB_SCAFFOLD_ANNOTATION);
  Validate.notNull(scaffoldAnnotation,String.format(""String_Node_Str"",controller.getFullyQualifiedTypeName()));
  boolean isValidEntity=GeoUtils.isGeoEntity(scaffoldAnnotation,typeLocationService);
  Validate.isTrue(isValidEntity,String.format(""String_Node_Str"",scaffoldAnnotation.getAttribute(""String_Node_Str"").getValue()));
  List<String> paths=new ArrayList<String>();
  if (path != null) {
    String pathList=path.toString();
    String[] pathsToAdd=pathList.split(""String_Node_Str"");
    for (    String currentPath : pathsToAdd) {
      currentPath=currentPath.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      ClassOrInterfaceTypeDetails mapController=GeoUtils.getMapControllerByPath(typeLocationService,currentPath);
      Validate.notNull(mapController,String.format(""String_Node_Str"",currentPath));
      paths.add(currentPath);
    }
  }
 else {
    paths.add(""String_Node_Str"");
  }
  annotateGeoEntityController(controller,paths);
}","/** 
 * This method adds specific GEO entities to all available maps or specific map
 */
@Override public void add(JavaType controller,JavaSymbolName path){
  if (!checkExistsMapElement()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Validate.notNull(controller,""String_Node_Str"");
  ClassOrInterfaceTypeDetails controllerDetails=typeLocationService.getTypeDetails(controller);
  AnnotationMetadata scaffoldAnnotation=controllerDetails.getAnnotation(ROO_WEB_SCAFFOLD_ANNOTATION);
  Validate.notNull(scaffoldAnnotation,String.format(""String_Node_Str"",controller.getFullyQualifiedTypeName()));
  boolean isValidEntity=GeoUtils.isGeoEntity(scaffoldAnnotation,typeLocationService);
  Validate.isTrue(isValidEntity,String.format(""String_Node_Str"",scaffoldAnnotation.getAttribute(""String_Node_Str"").getValue()));
  JavaType entity=(JavaType)scaffoldAnnotation.getAttribute(new JavaSymbolName(""String_Node_Str"")).getValue();
  ClassOrInterfaceTypeDetails entityDetails=typeLocationService.getTypeDetails(entity);
  AnnotationMetadata gvNIXEntityMapLayerAnnotation=entityDetails.getAnnotation(GVNIX_ENTITY_MAP_LAYER_ANNOTATION);
  Validate.notNull(gvNIXEntityMapLayerAnnotation,String.format(""String_Node_Str"",entity.getSimpleTypeName()));
  List<String> paths=new ArrayList<String>();
  if (path != null) {
    String pathList=path.toString();
    String[] pathsToAdd=pathList.split(""String_Node_Str"");
    for (    String currentPath : pathsToAdd) {
      currentPath=currentPath.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
      ClassOrInterfaceTypeDetails mapController=GeoUtils.getMapControllerByPath(typeLocationService,currentPath);
      Validate.notNull(mapController,String.format(""String_Node_Str"",currentPath));
      paths.add(currentPath);
    }
  }
 else {
    paths.add(""String_Node_Str"");
  }
  annotateGeoEntityController(controller,paths);
}",0.8724106874812368
59377,"/** 
 * This method imports all necessary element to build a gvNIX GEO application
 */
@Override public void setup(){
  updatePomDependencies();
  annotateApplicationConversionService();
  installComponents();
}","/** 
 * This method imports all necessary element to build a gvNIX GEO application
 */
@Override public void setup(){
  updatePomDependencies();
  updateWebMvcConfig();
  annotateApplicationConversionService();
  installComponents();
}",0.9461883408071748
59378,"/** 
 * Obtains the descriptor of the filtered field
 * @param fieldName
 * @param entity
 * @return
 */
public static <T>TypeDescriptor getTypeDescriptor(String fieldName,PathBuilder<T> entity){
  Class<?> entityType=entity.getType();
  if (entityType == Object.class) {
    entityType=entity.getRoot().getType();
  }
  String fieldNameToFindType=fieldName;
  BeanWrapper beanWrapper=getBeanWrapper(entityType);
  TypeDescriptor fieldDescriptor=null;
  if (fieldName.contains(SEPARATOR_FIELDS)) {
    String[] fieldNameSplitted=StringUtils.split(fieldName,SEPARATOR_FIELDS);
    for (int i=0; i < fieldNameSplitted.length - 1; i++) {
      beanWrapper=getBeanWrapper(beanWrapper.getPropertyType(fieldNameSplitted[i]));
    }
    fieldNameToFindType=fieldNameSplitted[fieldNameSplitted.length - 1];
  }
  fieldDescriptor=beanWrapper.getPropertyTypeDescriptor(fieldNameToFindType);
  return fieldDescriptor;
}","/** 
 * Obtains the descriptor of the filtered field
 * @param fieldName
 * @param entityType
 * @return
 */
public static <T>TypeDescriptor getTypeDescriptor(String fieldName,Class<T> entityType){
  String fieldNameToFindType=fieldName;
  BeanWrapper beanWrapper=getBeanWrapper(entityType);
  TypeDescriptor fieldDescriptor=null;
  if (fieldName.contains(SEPARATOR_FIELDS)) {
    String[] fieldNameSplitted=StringUtils.split(fieldName,SEPARATOR_FIELDS);
    for (int i=0; i < fieldNameSplitted.length - 1; i++) {
      beanWrapper=getBeanWrapper(beanWrapper.getPropertyType(fieldNameSplitted[i]));
    }
    fieldNameToFindType=fieldNameSplitted[fieldNameSplitted.length - 1];
  }
  fieldDescriptor=beanWrapper.getPropertyTypeDescriptor(fieldNameToFindType);
  return fieldDescriptor;
}",0.913274336283186
59379,"/** 
 * Prepares filter part for a query of findByCriteria
 * @param entity
 * @param filterByAssociations
 * @param datatablesCriterias
 * @param associationMap
 * @param filtersByColumnPredicate
 * @return
 */
private static <T>BooleanBuilder prepareQueryFilterPart(PathBuilder<T> entity,Map<String,List<String>> filterByAssociations,DatatablesCriterias datatablesCriterias,Map<String,PathBuilder<?>> associationMap,BooleanBuilder filtersByColumnPredicate,ConversionService conversionService,MessageSource messageSource){
  for (  ColumnDef column : datatablesCriterias.getColumnDefs()) {
    String searchStr=column.getSearch();
    boolean findInColumn=column.isFilterable() && StringUtils.isNotEmpty(searchStr);
    if (findInColumn) {
      String fieldName=unescapeDot(column.getName());
      Class<?> fieldType=QuerydslUtils.getFieldType(fieldName,entity);
      TypeDescriptor descriptor=QuerydslUtils.getTypeDescriptor(fieldName,entity);
      filtersByColumnPredicate=filtersByColumnPredicate.and(QuerydslUtils.createExpression(entity,fieldName,descriptor,searchStr,conversionService,messageSource));
      List<String> attributes=filterByAssociations.get(fieldName);
      if (attributes != null && attributes.size() > 0) {
        BooleanBuilder filtersByAssociationPredicate=new BooleanBuilder();
        PathBuilder<?> associationPath=associationMap.get(fieldName);
        List<String> associationFields=filterByAssociations.get(fieldName);
        for (        String associationFieldName : associationFields) {
          Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
          filtersByAssociationPredicate=filtersByAssociationPredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
        }
        filtersByColumnPredicate=filtersByColumnPredicate.and(filtersByAssociationPredicate.getValue());
      }
    }
  }
  return filtersByColumnPredicate;
}","/** 
 * Prepares filter part for a query of findByCriteria
 * @param entity
 * @param filterByAssociations
 * @param datatablesCriterias
 * @param associationMap
 * @param filtersByColumnPredicate
 * @return
 */
private static <T>BooleanBuilder prepareQueryFilterPart(PathBuilder<T> entity,Map<String,List<String>> filterByAssociations,DatatablesCriterias datatablesCriterias,Map<String,PathBuilder<?>> associationMap,BooleanBuilder filtersByColumnPredicate,ConversionService conversionService,MessageSource messageSource){
  for (  ColumnDef column : datatablesCriterias.getColumnDefs()) {
    String searchStr=column.getSearch();
    boolean findInColumn=column.isFilterable() && StringUtils.isNotEmpty(searchStr);
    if (findInColumn) {
      String fieldName=unescapeDot(column.getName());
      Class<?> fieldType=QuerydslUtils.getFieldType(fieldName,entity);
      filtersByColumnPredicate=filtersByColumnPredicate.and(QuerydslUtils.createExpression(entity,fieldName,searchStr,conversionService,messageSource));
      List<String> attributes=filterByAssociations.get(fieldName);
      if (attributes != null && attributes.size() > 0) {
        BooleanBuilder filtersByAssociationPredicate=new BooleanBuilder();
        PathBuilder<?> associationPath=associationMap.get(fieldName);
        List<String> associationFields=filterByAssociations.get(fieldName);
        for (        String associationFieldName : associationFields) {
          Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
          filtersByAssociationPredicate=filtersByAssociationPredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
        }
        filtersByColumnPredicate=filtersByColumnPredicate.and(filtersByAssociationPredicate.getValue());
      }
    }
  }
  return filtersByColumnPredicate;
}",0.975983648441492
59380,"/** 
 * Prepare search part for a query of findByCriteria
 * @param entity
 * @param filterByAssociations
 * @param datatablesCriterias
 * @param findInAllColumns
 * @param associationMap
 * @param filtersByTablePredicate
 * @return
 */
private static <T>BooleanBuilder prepareQuerySearchPart(PathBuilder<T> entity,Map<String,List<String>> filterByAssociations,DatatablesCriterias datatablesCriterias,boolean findInAllColumns,Map<String,PathBuilder<?>> associationMap,BooleanBuilder filtersByTablePredicate,ConversionService conversionService){
  String searchStr=datatablesCriterias.getSearch();
  if (findInAllColumns) {
    boolean expressionExists=false;
    for (    ColumnDef column : datatablesCriterias.getColumnDefs()) {
      if (column.isFilterable()) {
        String fieldName=unescapeDot(column.getName());
        Class<?> fieldType=QuerydslUtils.getFieldType(fieldName,entity);
        TypeDescriptor descriptor=QuerydslUtils.getTypeDescriptor(fieldName,entity);
        Predicate expression=QuerydslUtils.createExpression(entity,fieldName,descriptor,searchStr,conversionService);
        if (expression != null) {
          filtersByTablePredicate=filtersByTablePredicate.or(expression);
          expressionExists=true;
        }
        List<String> attributes=filterByAssociations.get(fieldName);
        if (attributes != null && attributes.size() > 0) {
          PathBuilder<?> associationPath=associationMap.get(fieldName);
          List<String> associationFields=filterByAssociations.get(fieldName);
          for (          String associationFieldName : associationFields) {
            Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
            filtersByTablePredicate=filtersByTablePredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
          }
        }
      }
    }
    if (!expressionExists) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return filtersByTablePredicate;
}","/** 
 * Prepare search part for a query of findByCriteria
 * @param entity
 * @param filterByAssociations
 * @param datatablesCriterias
 * @param findInAllColumns
 * @param associationMap
 * @param filtersByTablePredicate
 * @return
 */
private static <T>BooleanBuilder prepareQuerySearchPart(PathBuilder<T> entity,Map<String,List<String>> filterByAssociations,DatatablesCriterias datatablesCriterias,boolean findInAllColumns,Map<String,PathBuilder<?>> associationMap,BooleanBuilder filtersByTablePredicate,ConversionService conversionService){
  String searchStr=datatablesCriterias.getSearch();
  if (findInAllColumns) {
    boolean expressionExists=false;
    for (    ColumnDef column : datatablesCriterias.getColumnDefs()) {
      if (column.isFilterable()) {
        String fieldName=unescapeDot(column.getName());
        Class<?> fieldType=QuerydslUtils.getFieldType(fieldName,entity);
        Predicate expression=QuerydslUtils.createExpression(entity,fieldName,searchStr,conversionService);
        if (expression != null) {
          filtersByTablePredicate=filtersByTablePredicate.or(expression);
          expressionExists=true;
        }
        List<String> attributes=filterByAssociations.get(fieldName);
        if (attributes != null && attributes.size() > 0) {
          PathBuilder<?> associationPath=associationMap.get(fieldName);
          List<String> associationFields=filterByAssociations.get(fieldName);
          for (          String associationFieldName : associationFields) {
            Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
            filtersByTablePredicate=filtersByTablePredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
          }
        }
      }
    }
    if (!expressionExists) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return filtersByTablePredicate;
}",0.9662363455809336
59381,"/** 
 * Return where clause expression for number properties by casting it to string before check its value. <p/> Querydsl Expr:  {@code entityPath.fieldName.stringValue() eq searchStrDatabase operation:}{  {@code str(entity.fieldName) = searchStr <p/> Like operation is case sensitive.}
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code weight} in {@code Pet} entity, {@code age} in{@code Pet.owner} entity.
 * @param searchStr the value to find, may be null
 * @return PredicateOperation
 */
public static <T,N extends java.lang.Number & java.lang.Comparable<?>>BooleanExpression createNumberExpressionEqual(PathBuilder<T> entityPath,String fieldName,Class<N> fieldType,TypeDescriptor descriptor,String searchStr,ConversionService conversionService){
  if (StringUtils.isEmpty(searchStr)) {
    return null;
  }
  NumberPath<N> numberExpression=entityPath.getNumber(fieldName,fieldType);
  TypeDescriptor strDesc=STRING_TYPE_DESCRIPTOR;
  if (conversionService != null) {
    return numberExpression.eq((N)conversionService.convert(searchStr,strDesc,descriptor));
  }
 else {
    numberExpression.stringValue().like(""String_Node_Str"".concat(searchStr).concat(""String_Node_Str""));
  }
  return null;
}","/** 
 * Return where clause expression for number properties by casting it to string before check its value. <p/> Querydsl Expr:  {@code entityPath.fieldName.stringValue() eq searchStrDatabase operation:}{  {@code str(entity.fieldName) = searchStr<p/> Like operation is case sensitive.}
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code weight} in {@code Pet} entity, {@code age} in{@code Pet.owner} entity.
 * @param searchStr the value to find, may be null
 * @return PredicateOperation
 */
public static <T,N extends java.lang.Number & java.lang.Comparable<?>>BooleanExpression createNumberExpressionEqual(PathBuilder<T> entityPath,String fieldName,Class<N> fieldType,TypeDescriptor descriptor,String searchStr,ConversionService conversionService){
  if (StringUtils.isEmpty(searchStr)) {
    return null;
  }
  NumberPath<N> numberExpression=entityPath.getNumber(fieldName,fieldType);
  TypeDescriptor strDesc=STRING_TYPE_DESCRIPTOR;
  if (conversionService != null) {
    return numberExpression.eq((N)conversionService.convert(searchStr,strDesc,descriptor));
  }
 else {
    numberExpression.stringValue().like(""String_Node_Str"".concat(searchStr).concat(""String_Node_Str""));
  }
  return null;
}",0.9996250468691412
59382,"/** 
 * Obtains the class type of the property named as   {@code fieldName} of theentity.
 * @param fieldName the field name.
 * @param entity the entity with a property named as {@code fieldName}
 * @return the class type
 */
public static <T>Class<?> getFieldType(String fieldName,PathBuilder<T> entity){
  Class<?> entityType=entity.getType();
  String fieldNameToFindType=fieldName;
  Class<?>[] classArray=ArrayUtils.<Class<?>>toArray(entityType);
  if (fieldName.contains(SEPARATOR_FIELDS)) {
    String[] fieldNameSplitted=StringUtils.split(fieldName,SEPARATOR_FIELDS);
    for (int i=0; i < fieldNameSplitted.length - 1; i++) {
      Class<?> fieldType=BeanUtils.findPropertyType(fieldNameSplitted[i],ArrayUtils.<Class<?>>toArray(entityType));
      classArray=ArrayUtils.add(classArray,fieldType);
      entityType=fieldType;
    }
    fieldNameToFindType=fieldNameSplitted[fieldNameSplitted.length - 1];
  }
  return BeanUtils.findPropertyType(fieldNameToFindType,classArray);
}","/** 
 * Obtains the class type of the property named as   {@code fieldName} of theentity.
 * @param fieldName the field name.
 * @param entity the entity with a property named as {@code fieldName}
 * @return the class type
 */
public static <T>Class<?> getFieldType(String fieldName,PathBuilder<T> entity){
  TypeDescriptor descriptor=getTypeDescriptor(fieldName,entity);
  return descriptor.getType();
}",0.4640804597701149
59383,"/** 
 * Obtains the descriptor of the filtered field
 * @param fieldName
 * @param entity
 * @return
 */
public static <T>TypeDescriptor getTypeDescriptor(String fieldName,PathBuilder<T> entity){
  Class<?> entityType=entity.getType();
  String fieldNameToFindType=fieldName;
  BeanWrapper beanWrapper=getBeanWrapper(entityType);
  TypeDescriptor fieldDescriptor=beanWrapper.getPropertyTypeDescriptor(fieldNameToFindType);
  return fieldDescriptor;
}","/** 
 * Obtains the descriptor of the filtered field
 * @param fieldName
 * @param entity
 * @return
 */
public static <T>TypeDescriptor getTypeDescriptor(String fieldName,PathBuilder<T> entity){
  Class<?> entityType=entity.getType();
  if (entityType == Object.class) {
    entityType=entity.getRoot().getType();
  }
  String fieldNameToFindType=fieldName;
  BeanWrapper beanWrapper=getBeanWrapper(entityType);
  TypeDescriptor fieldDescriptor=null;
  if (fieldName.contains(SEPARATOR_FIELDS)) {
    String[] fieldNameSplitted=StringUtils.split(fieldName,SEPARATOR_FIELDS);
    for (int i=0; i < fieldNameSplitted.length - 1; i++) {
      beanWrapper=getBeanWrapper(beanWrapper.getPropertyType(fieldNameSplitted[i]));
    }
    fieldNameToFindType=fieldNameSplitted[fieldNameSplitted.length - 1];
  }
  fieldDescriptor=beanWrapper.getPropertyTypeDescriptor(fieldNameToFindType);
  return fieldDescriptor;
}",0.6627393225331369
59384,"/** 
 * Return equal expression for   {@code entityPath.fieldName}. <p/> Expr:   {@code entityPath.fieldName eq searchObj}
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code name} in {@code Pet} entity, {@code firstName} in{@code Pet.owner} entity.
 * @param searchObj the value to find, may be null
 * @return BooleanExpression
 */
public static <T>BooleanExpression createObjectExpression(PathBuilder<T> entityPath,String fieldName,Object searchObj){
  return createExpression(entityPath,fieldName,searchObj,null);
}","/** 
 * Return an expression for   {@code entityPath.fieldName} with the{@code operator} or ""equal"" by default.<p/> Expr:  {@code entityPath.fieldName eq searchObj}
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code name} in {@code Pet} entity, {@code firstName} in{@code Pet.owner} entity.
 * @param searchObj the value to find, may be null
 * @param operator the operator to use into the expression. Supportedoperators: <ul> <li>For all types:  {@code eq},   {@code in},   {@code ne},  {@code notIn},   {@code isNull} and {@code isNotNull}.</li> <li> For strings and numbers:   {@code goe},   {@code gt},   {@code loe},  {@code lt} and {@code like}.</li> <li> For booleans:   {@code goe},  {@code gt},   {@code loe} and {@code lt}.</li> <li> For dates:  {@code goe},   {@code gt},   {@code before},   {@code loe},   {@code lt}and   {@code after}. </li> </ul>
 * @return BooleanExpression
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>BooleanExpression createObjectExpression(PathBuilder<T> entityPath,String fieldName,Object searchObj,String operator,ConversionService conversionService){
  if (searchObj == null) {
    return null;
  }
  TypeDescriptor typeDescriptor=getTypeDescriptor(fieldName,entityPath);
  if (typeDescriptor == null) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName,entityPath.getType()));
  }
  if (StringUtils.isBlank(operator) || StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).eq(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).in(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).ne(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).notIn(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).isNull();
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).isNotNull();
  }
  Class<?> fieldType=getFieldType(fieldName,entityPath);
  if (String.class == fieldType && String.class == searchObj.getClass()) {
    return createStringExpression(entityPath,fieldName,searchObj,operator);
  }
 else   if ((Boolean.class == fieldType || boolean.class == fieldType) && String.class == searchObj.getClass()) {
    return createBooleanExpression(entityPath,fieldName,searchObj,operator);
  }
 else   if ((Number.class.isAssignableFrom(fieldType) || NUMBER_PRIMITIVES.contains(fieldType)) && String.class == searchObj.getClass() && isValidValueFor((String)searchObj,typeDescriptor,conversionService)) {
    return createNumericExpression(entityPath,fieldName,searchObj,operator,fieldType);
  }
 else   if ((Date.class.isAssignableFrom(fieldType) || Calendar.class.isAssignableFrom(fieldType)) && String.class == searchObj.getClass()) {
    return createDateExpression(entityPath,fieldName,searchObj,operator,fieldType);
  }
 else   if (fieldType.isEnum() && String.class == searchObj.getClass()) {
    return createEnumExpression(entityPath,fieldName,(String)searchObj,(Class<? extends Enum>)fieldType);
  }
  return entityPath.get(fieldName).eq(searchObj);
}",0.2630176798256236
59385,"/** 
 * Creates a WHERE clause by the intersection of the given search-arguments
 * @param entity Entity {@link PathBuilder}. It represents the entity for class generation and alias-usage for path generation. <p/> Example: To retrieve a   {@code Customer} with the first name 'Bob'entity must be a  {@link PathBuilder} created for {@code Customer}class and searchArgs must contain the entry  {@code 'firstName':'Bob'}
 * @param searchArgs Search arguments to be used to create the WHERE clause.It can contain  {@code _operator_} entries for each field that wantto use its own operator. By default  {@code EQUALS} operator isused. <p/> Operator entry example:  {@code _operator_weight = LT} theexpression for  {@code weight} field will do a less-than valuecomparison
 * @return the WHERE clause
 */
public static <T>BooleanBuilder createPredicateByAnd(PathBuilder<T> entity,Map<String,Object> searchArgs){
  BooleanBuilder predicate=new BooleanBuilder();
  if (searchArgs == null || searchArgs.isEmpty()) {
    return predicate;
  }
  for (  Entry<String,Object> entry : searchArgs.entrySet()) {
    String key=entry.getKey();
    if (!key.startsWith(OPERATOR_PREFIX)) {
      Object valueToSearch=entry.getValue();
      String operator=(String)searchArgs.get(OPERATOR_PREFIX.concat(key));
      if (valueToSearch instanceof Collection) {
        @SuppressWarnings(""String_Node_Str"") Collection<Object> valueColl=(Collection<Object>)valueToSearch;
        for (        Object valueObj : valueColl) {
          predicate.and(createExpression(entity,key,valueObj,operator));
        }
      }
 else {
        predicate.and(createExpression(entity,key,valueToSearch,operator));
      }
    }
  }
  return predicate;
}","/** 
 * Creates a WHERE clause by the intersection of the given search-arguments
 * @param entity Entity {@link PathBuilder}. It represents the entity for class generation and alias-usage for path generation. <p/> Example: To retrieve a   {@code Customer} with the first name 'Bob'entity must be a  {@link PathBuilder} created for {@code Customer}class and searchArgs must contain the entry  {@code 'firstName':'Bob'}
 * @param searchArgs Search arguments to be used to create the WHERE clause.It can contain  {@code _operator_} entries for each field that wantto use its own operator. By default  {@code EQUALS} operator isused. <p/> Operator entry example:  {@code _operator_weight = LT} theexpression for  {@code weight} field will do a less-than valuecomparison
 * @return the WHERE clause
 */
public static <T>BooleanBuilder createPredicateByAnd(PathBuilder<T> entity,Map<String,Object> searchArgs,ConversionService conversionService){
  BooleanBuilder predicate=new BooleanBuilder();
  if (searchArgs == null || searchArgs.isEmpty()) {
    return predicate;
  }
  for (  Entry<String,Object> entry : searchArgs.entrySet()) {
    String key=entry.getKey();
    if (!key.startsWith(OPERATOR_PREFIX)) {
      Object valueToSearch=entry.getValue();
      String operator=(String)searchArgs.get(OPERATOR_PREFIX.concat(key));
      if (valueToSearch instanceof Collection) {
        @SuppressWarnings(""String_Node_Str"") Collection<Object> valueColl=(Collection<Object>)valueToSearch;
        for (        Object valueObj : valueColl) {
          predicate.and(createObjectExpression(entity,key,valueObj,operator,conversionService));
        }
      }
 else {
        predicate.and(createObjectExpression(entity,key,valueToSearch,operator,conversionService));
      }
    }
  }
  return predicate;
}",0.9760820045558086
59386,"/** 
 * Return where clause expression for number properties by casting it to string before check its value. <p/> Querydsl Expr:  {@code entityPath.fieldName.stringValue() like ('%' + searchStr + '%')}Database operation:  {@code str(entity.fieldName) like ('%' + searchStr + '%')}<p/> Like operation is case sensitive.
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code weight} in {@code Pet} entity, {@code age} in{@code Pet.owner} entity.
 * @param searchStr the value to find, may be null
 * @return PredicateOperation
 */
public static <T,N extends java.lang.Number & java.lang.Comparable<?>>BooleanExpression createNumberExpression(PathBuilder<T> entityPath,String fieldName,Class<N> fieldType,TypeDescriptor descriptor,String searchStr,ConversionService conversionService){
  if (StringUtils.isEmpty(searchStr)) {
    return null;
  }
  NumberPath<N> numberExpression=entityPath.getNumber(fieldName,fieldType);
  BooleanExpression expression=null;
  try {
    Object number=conversionService.convert(searchStr,STRING_TYPE_DESCRIPTOR,descriptor);
    expression=numberExpression.stringValue().like(""String_Node_Str"".concat(number.toString()).concat(""String_Node_Str""));
  }
 catch (  ConversionException e) {
    expression=numberExpression.stringValue().like(""String_Node_Str"".concat(searchStr).concat(""String_Node_Str""));
  }
  return expression;
}","/** 
 * Return where clause expression for number properties by casting it to string before check its value. <p/> Querydsl Expr:  {@code entityPath.fieldName.stringValue() like ('%' + searchStr + '%')}Database operation:  {@code str(entity.fieldName) like ('%' + searchStr + '%')}<p/> Like operation is case sensitive.
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code weight} in {@code Pet} entity, {@code age} in{@code Pet.owner} entity.
 * @param searchStr the value to find, may be null
 * @return PredicateOperation
 */
public static <T,N extends java.lang.Number & java.lang.Comparable<?>>BooleanExpression createNumberExpression(PathBuilder<T> entityPath,String fieldName,Class<N> fieldType,TypeDescriptor descriptor,String searchStr,ConversionService conversionService){
  if (StringUtils.isEmpty(searchStr)) {
    return null;
  }
  NumberPath<N> numberExpression=entityPath.getNumber(fieldName,fieldType);
  BooleanExpression expression=null;
  try {
    Object number=conversionService.convert(searchStr,STRING_TYPE_DESCRIPTOR,descriptor);
    String toSearch=number.toString();
    if (number instanceof BigDecimal && ((BigDecimal)number).scale() > 1) {
      toSearch=StringUtils.stripEnd(toSearch,""String_Node_Str"");
      if (StringUtils.endsWith(toSearch,""String_Node_Str"")) {
        toSearch=toSearch.concat(""String_Node_Str"");
      }
    }
    expression=numberExpression.stringValue().like(""String_Node_Str"".concat(toSearch).concat(""String_Node_Str""));
  }
 catch (  ConversionException e) {
    expression=numberExpression.stringValue().like(""String_Node_Str"".concat(searchStr).concat(""String_Node_Str""));
  }
  return expression;
}",0.8979217603911981
59387,"/** 
 * Return an expression for   {@code entityPath.fieldName} with the{@code operator} or ""equal"" by default.<p/> Expr:  {@code entityPath.fieldName eq searchObj}
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code name} in {@code Pet} entity, {@code firstName} in{@code Pet.owner} entity.
 * @param searchObj the value to find, may be null
 * @param operator the operator to use into the expression. Supportedoperators: <ul> <li>For all types:  {@code eq},   {@code in},   {@code ne},  {@code notIn},   {@code isNull} and {@code isNotNull}.</li> <li> For strings and numbers:   {@code goe},   {@code gt},   {@code loe},  {@code lt} and {@code like}.</li> <li> For booleans:   {@code goe},  {@code gt},   {@code loe} and {@code lt}.</li> <li> For dates:  {@code goe},   {@code gt},   {@code before},   {@code loe},   {@code lt}and   {@code after}. </li> </ul>
 * @return BooleanExpression
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>BooleanExpression createExpression(PathBuilder<T> entityPath,String fieldName,Object searchObj,String operator){
  if (searchObj == null) {
    return null;
  }
  if (StringUtils.isBlank(operator) || StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).eq(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).in(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).ne(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).notIn(searchObj);
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).isNull();
  }
 else   if (StringUtils.equalsIgnoreCase(operator,""String_Node_Str"")) {
    return entityPath.get(fieldName).isNotNull();
  }
  Class<?> fieldType=getFieldType(fieldName,entityPath);
  if (String.class == fieldType && String.class == searchObj.getClass()) {
    return createStringExpression(entityPath,fieldName,searchObj,operator);
  }
 else   if ((Boolean.class == fieldType || boolean.class == fieldType) && String.class == searchObj.getClass()) {
    return createBooleanExpression(entityPath,fieldName,searchObj,operator);
  }
 else   if ((Number.class.isAssignableFrom(fieldType) || NUMBER_PRIMITIVES.contains(fieldType)) && String.class == searchObj.getClass() && NumberUtils.isNumber((String)searchObj)) {
    return createNumericExpression(entityPath,fieldName,searchObj,operator,fieldType);
  }
 else   if ((Date.class.isAssignableFrom(fieldType) || Calendar.class.isAssignableFrom(fieldType)) && String.class == searchObj.getClass()) {
    return createDateExpression(entityPath,fieldName,searchObj,operator,fieldType);
  }
 else   if (fieldType.isEnum() && String.class == searchObj.getClass()) {
    return createEnumExpression(entityPath,fieldName,(String)searchObj,(Class<? extends Enum>)fieldType);
  }
  return entityPath.get(fieldName).eq(searchObj);
}","/** 
 * Utility for constructing where clause expressions.
 * @param entityPath Full path to entity and associations. For example:{@code Pet} , {@code Pet.owner}
 * @param fieldName Property name in the given entity path. For example:{@code name} in {@code Pet} entity, {@code firstName} in{@code Pet.owner} entity.
 * @param fieldType Property value {@code Class}
 * @param searchStr the value to find, may be null
 * @return Predicate
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>Predicate createExpression(PathBuilder<T> entityPath,String fieldName,String searchStr,ConversionService conversionService,MessageSource messageSource){
  TypeDescriptor descriptor=getTypeDescriptor(fieldName,entityPath);
  if (descriptor == null) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName,entityPath.getType()));
  }
  Class<?> fieldType=descriptor.getType();
  if (String.class == fieldType) {
    return createStringExpressionWithOperators(entityPath,fieldName,searchStr,conversionService,messageSource);
  }
 else   if (Boolean.class == fieldType || boolean.class == fieldType) {
    return createBooleanExpressionWithOperators(entityPath,fieldName,searchStr,conversionService,messageSource);
  }
 else   if (Number.class.isAssignableFrom(fieldType) || NUMBER_PRIMITIVES.contains(fieldType)) {
    return createNumberExpressionGenericsWithOperators(entityPath,fieldName,descriptor,searchStr,conversionService,messageSource);
  }
 else   if (Date.class.isAssignableFrom(fieldType) || Calendar.class.isAssignableFrom(fieldType)) {
    String datePattern=""String_Node_Str"";
    if (messageSource != null) {
      datePattern=messageSource.getMessage(""String_Node_Str"",null,LocaleContextHolder.getLocale());
    }
    BooleanExpression expression=createDateExpressionWithOperators(entityPath,fieldName,(Class<Date>)fieldType,searchStr,conversionService,messageSource,datePattern);
    return expression;
  }
 else   if (fieldType.isEnum()) {
    return createEnumExpression(entityPath,fieldName,searchStr,(Class<? extends Enum>)fieldType);
  }
  return null;
}",0.3682228915662651
59388,"/** 
 * Replace some vars with values in a template file name. <p> Vars has next format: ${entity_package}. Template will be placed at same package in src/main/resources. </p>
 * @param templateName File name with a template.
 * @param checksumField Checksum field to get field name (one var value).
 * @param persistenceMemberLocator To get identifier field (one var value).
 * @return String replacing vars with values.
 */
private String generateITDContent(String templateName,FieldMetadata checksumField,PersistenceMemberLocator persistenceMemberLocator){
  String template;
  try {
    template=IOUtils.toString(new InputStreamReader(this.getClass().getResourceAsStream(templateName)));
  }
 catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"" + templateName,ioe);
  }
  Map<String,String> params=new HashMap<String,String>(10);
  params.put(""String_Node_Str"",this.digestMethod);
  params.put(""String_Node_Str"",governorTypeDetails.getName().getPackage().getFullyQualifiedPackageName());
  params.put(""String_Node_Str"",governorTypeDetails.getName().getSimpleTypeName());
  params.put(""String_Node_Str"",entityMetadata.getFindMethod().getMethodName().getSymbolName());
  params.put(""String_Node_Str"",persistenceMemberLocator.getIdentifierFields(governorPhysicalTypeMetadata.getMemberHoldingTypeDetails().getName()).get(0).getFieldName().getSymbolName());
  params.put(""String_Node_Str"",checksumField.getFieldName().getSymbolName());
  params.put(""String_Node_Str"",getCodeToTranformFieldsToString());
  return replaceParams(template,params);
}","/** 
 * Replace some vars with values in a template file name. <p> Vars has next format: ${entity_package}. Template will be placed at same package in src/main/resources. </p>
 * @param templateName File name with a template.
 * @param checksumField Checksum field to get field name (one var value).
 * @param persistenceMemberLocator To get identifier field (one var value).
 * @return String replacing vars with values.
 */
private String generateITDContent(String templateName,FieldMetadata checksumField,PersistenceMemberLocator persistenceMemberLocator,Map<String,String> params){
  String template;
  try {
    template=IOUtils.toString(new InputStreamReader(this.getClass().getResourceAsStream(templateName)));
  }
 catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"" + templateName,ioe);
  }
  return replaceParams(template,params);
}",0.6631234668847097
59389,"public OCCChecksumMetadata(String identifier,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,JpaActiveRecordMetadata entityMetadata,MemberDetailsScanner memberDetailsScanner,TypeManagementService typeManagementService,PersistenceMemberLocator persistenceMemberLocator){
  super(identifier);
  Validate.notNull(aspectName,""String_Node_Str"");
  Validate.notNull(governorPhysicalTypeMetadata,""String_Node_Str"");
  this.aspectName=aspectName;
  this.governorPhysicalTypeMetadata=governorPhysicalTypeMetadata;
  this.memberDetailsScanner=memberDetailsScanner;
  this.persistenceMemberLocator=persistenceMemberLocator;
  PhysicalTypeDetails physicalTypeDetails=governorPhysicalTypeMetadata.getMemberHoldingTypeDetails();
  if (!(physicalTypeDetails instanceof ClassOrInterfaceTypeDetails)) {
    valid=false;
  }
 else {
    governorTypeDetails=(ClassOrInterfaceTypeDetails)physicalTypeDetails;
  }
  this.destination=governorTypeDetails.getName();
  Validate.isTrue(isValid(identifier),""String_Node_Str"" + identifier + ""String_Node_Str"");
  if (entityMetadata != null) {
    this.entityMetadata=entityMetadata;
    if (!isValid()) {
      return;
    }
    AnnotationMetadata annotation=MemberFindingUtils.getDeclaredTypeAnnotation(governorTypeDetails,new JavaType(GvNIXEntityOCCChecksum.class.getName()));
    if (annotation != null) {
      AutoPopulationUtils.populate(this,annotation);
    }
    FieldMetadata field=getChecksumField();
    MethodMetadata getter=getChecksumAccessor();
    MethodMetadata setter=getChecksumMutator();
    addChecksumFieldToEntity(field,getter,setter,typeManagementService);
    itdFileContents=generateITDContents(field,persistenceMemberLocator);
  }
}","public OCCChecksumMetadata(String identifier,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,JpaActiveRecordMetadata entityMetadata,MemberDetailsScanner memberDetailsScanner,TypeManagementService typeManagementService,PersistenceMemberLocator persistenceMemberLocator,FieldMetadata idField,FieldMetadata versionField){
  super(identifier);
  Validate.notNull(aspectName,""String_Node_Str"");
  Validate.notNull(governorPhysicalTypeMetadata,""String_Node_Str"");
  this.aspectName=aspectName;
  this.governorPhysicalTypeMetadata=governorPhysicalTypeMetadata;
  this.memberDetailsScanner=memberDetailsScanner;
  this.persistenceMemberLocator=persistenceMemberLocator;
  this.idField=idField;
  this.versionField=versionField;
  PhysicalTypeDetails physicalTypeDetails=governorPhysicalTypeMetadata.getMemberHoldingTypeDetails();
  if (!(physicalTypeDetails instanceof ClassOrInterfaceTypeDetails)) {
    valid=false;
  }
 else {
    governorTypeDetails=(ClassOrInterfaceTypeDetails)physicalTypeDetails;
  }
  this.destination=governorTypeDetails.getName();
  Validate.isTrue(isValid(identifier),""String_Node_Str"" + identifier + ""String_Node_Str"");
  if (entityMetadata != null) {
    this.entityMetadata=entityMetadata;
    if (!isValid()) {
      return;
    }
    AnnotationMetadata annotation=MemberFindingUtils.getDeclaredTypeAnnotation(governorTypeDetails,new JavaType(GvNIXEntityOCCChecksum.class.getName()));
    if (annotation != null) {
      AutoPopulationUtils.populate(this,annotation);
    }
    FieldMetadata field=getChecksumField();
    MethodMetadata getter=getChecksumAccessor();
    MethodMetadata setter=getChecksumMutator();
    addChecksumFieldToEntity(field,getter,setter,typeManagementService);
    itdFileContents=generateITDContents(field,persistenceMemberLocator);
  }
}",0.969576343474552
59390,"/** 
 * Replace some vars with values in all AspectJ template portions and concat results in order into one string. <p> Vars has next format: ${entity_package}. Template portions will be placed at same package in src/main/resources. If some method placed in a portion already defined (push-in), don't add it to result string. </p>
 * @param checksumField Checksum field to get field name (one var value).
 * @param persistenceMemberLocator To get identifier field (one var value).
 * @return All template portions replacing vars with values and concatenatedin order.
 */
private String generateITDContents(FieldMetadata checksumField,PersistenceMemberLocator persistenceMemberLocator){
  StringBuilder contents=new StringBuilder();
  contents.append(generateITDContent(ITD_TEMPLATE_CLASS_START,checksumField,persistenceMemberLocator));
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(METHOD_GET_MESSAGE_DIGEST,checksumField,persistenceMemberLocator));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(ITD_TEMPLATE_METHOD_REMOVE,checksumField,persistenceMemberLocator));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(ITD_TEMPLATE_METHOD_MERGE,checksumField,persistenceMemberLocator));
  }
  List<JavaType> parameters=new ArrayList<JavaType>();
  parameters.add(new JavaType(governorTypeDetails.getName().getSimpleTypeName()));
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str"")) == null) {
    contents.append(generateITDContent(METHOD_CHECK_CONCURRENCY,checksumField,persistenceMemberLocator));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(METHOD_LOAD_CHECKSUM,checksumField,persistenceMemberLocator));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(METHOD_CHECKSUM_DIGEST,checksumField,persistenceMemberLocator));
  }
  contents.append(generateITDContent(ITD_TEMPLATE_CLASS_END,checksumField,persistenceMemberLocator));
  return contents.toString();
}","/** 
 * Replace some vars with values in all AspectJ template portions and concat results in order into one string. <p> Vars has next format: ${entity_package}. Template portions will be placed at same package in src/main/resources. If some method placed in a portion already defined (push-in), don't add it to result string. </p>
 * @param checksumField Checksum field to get field name (one var value).
 * @param persistenceMemberLocator To get identifier field (one var value).
 * @return All template portions replacing vars with values and concatenatedin order.
 */
private String generateITDContents(FieldMetadata checksumField,PersistenceMemberLocator persistenceMemberLocator){
  StringBuilder contents=new StringBuilder();
  Map<String,String> params=prepareParamsMap(checksumField);
  contents.append(generateITDContent(ITD_TEMPLATE_CLASS_START,checksumField,persistenceMemberLocator,params));
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(METHOD_GET_MESSAGE_DIGEST,checksumField,persistenceMemberLocator,params));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(ITD_TEMPLATE_METHOD_REMOVE,checksumField,persistenceMemberLocator,params));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(ITD_TEMPLATE_METHOD_MERGE,checksumField,persistenceMemberLocator,params));
  }
  List<JavaType> parameters=new ArrayList<JavaType>();
  parameters.add(new JavaType(governorTypeDetails.getName().getSimpleTypeName()));
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str"")) == null) {
    contents.append(generateITDContent(METHOD_CHECK_CONCURRENCY,checksumField,persistenceMemberLocator,params));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(METHOD_LOAD_CHECKSUM,checksumField,persistenceMemberLocator,params));
  }
  if (MemberFindingUtils.getDeclaredMethod(governorTypeDetails,new JavaSymbolName(""String_Node_Str""),null) == null) {
    contents.append(generateITDContent(METHOD_CHECKSUM_DIGEST,checksumField,persistenceMemberLocator,params));
  }
  contents.append(generateITDContent(ITD_TEMPLATE_CLASS_END,checksumField,persistenceMemberLocator,params));
  return contents.toString();
}",0.9768454383534534
59391,"protected OCCChecksumMetadata getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  Path path=Path.SRC_MAIN_JAVA;
  String entityMetadataKey=JpaActiveRecordMetadata.createIdentifier(governorPhysicalTypeMetadata.getMemberHoldingTypeDetails().getName(),LogicalPath.getInstance(path,""String_Node_Str""));
  JpaActiveRecordMetadata entityMetadata=(JpaActiveRecordMetadata)metadataService.get(entityMetadataKey);
  if (entityMetadata == null) {
    return null;
  }
  FieldMetadata versionField=persistenceMemberLocator.getVersionField(governorPhysicalTypeMetadata.getMemberHoldingTypeDetails().getName());
  if (versionField != null) {
    String declaredByType=entityMetadataKey.substring(entityMetadataKey.lastIndexOf('?') + 1);
    if (!versionField.getDeclaredByMetadataId().endsWith(declaredByType)) {
      throw new IllegalStateException(""String_Node_Str"".concat(""String_Node_Str"").concat(""String_Node_Str"").concat(""String_Node_Str"").concat(""String_Node_Str"").concat(declaredByType));
    }
  }
  OCCChecksumMetadata metadata=new OCCChecksumMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,entityMetadata,memberDetailsScanner,typeManagementService,persistenceMemberLocator);
  return metadata;
}","protected OCCChecksumMetadata getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  Path path=Path.SRC_MAIN_JAVA;
  JavaType entityType=governorPhysicalTypeMetadata.getMemberHoldingTypeDetails().getName();
  String entityMetadataKey=JpaActiveRecordMetadata.createIdentifier(entityType,LogicalPath.getInstance(path,""String_Node_Str""));
  JpaActiveRecordMetadata entityMetadata=(JpaActiveRecordMetadata)metadataService.get(entityMetadataKey);
  if (entityMetadata == null) {
    return null;
  }
  FieldMetadata versionField=persistenceMemberLocator.getVersionField(entityType);
  if (versionField != null) {
    String declaredByType=entityMetadataKey.substring(entityMetadataKey.lastIndexOf('?') + 1);
    if (!versionField.getDeclaredByMetadataId().endsWith(declaredByType)) {
      throw new IllegalStateException(""String_Node_Str"".concat(""String_Node_Str"").concat(""String_Node_Str"").concat(""String_Node_Str"").concat(""String_Node_Str"").concat(declaredByType));
    }
  }
  List<FieldMetadata> idFields=persistenceMemberLocator.getIdentifierFields(entityType);
  if (idFields.isEmpty()) {
    return null;
  }
  FieldMetadata idField=idFields.get(0);
  OCCChecksumMetadata metadata=new OCCChecksumMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,entityMetadata,memberDetailsScanner,typeManagementService,persistenceMemberLocator,idField,versionField);
  return metadata;
}",0.8458244111349036
59392,"/** 
 * Execute a select query on entityClass using <a href=""http://www.querydsl.com/"">Querydsl</a> which enables the construction of type-safe SQL-like queries.
 * @param entity builder for entity to use in search. Represents the entityand gives access to its properties for query purposes
 * @param filterByAssociations (optional) for each related entity to joincontain as key the name of the association and as value the List of related entity fields to filter by
 * @param orderByAssociations (optional) for each related entity to ordercontain as key the name of the association and as value the List of related entity fields to order by
 * @param entityManager {@code entityClass} {@link EntityManager}
 * @param datatablesCriterias datatables parameters for query
 * @param basePredicate (optional) base filter conditions
 * @param distinct use distinct query
 * @return
 */
public static <T,E extends Comparable<?>>SearchResults<T> findByCriteria(PathBuilder<T> entity,Map<String,List<String>> filterByAssociations,Map<String,List<String>> orderByAssociations,EntityManager entityManager,DatatablesCriterias datatablesCriterias,BooleanBuilder basePredicate,boolean distinct) throws IllegalArgumentException {
  Assert.notNull(entityManager);
  Assert.notNull(datatablesCriterias);
  if (CollectionUtils.isEmpty(filterByAssociations)) {
    filterByAssociations=new HashMap<String,List<String>>();
  }
  if (CollectionUtils.isEmpty(orderByAssociations)) {
    orderByAssociations=new HashMap<String,List<String>>();
  }
  boolean isPaged=datatablesCriterias.getDisplaySize() != null && datatablesCriterias.getDisplaySize() > 0;
  boolean findInAllColumns=StringUtils.isNotEmpty(datatablesCriterias.getSearch()) && datatablesCriterias.hasOneFilterableColumn();
  JPAQuery query=new JPAQuery(entityManager);
  query=query.from(entity);
  JPAQuery baseQuery=new JPAQuery(entityManager);
  baseQuery=baseQuery.from(entity);
  Map<String,PathBuilder<?>> associationMap=new HashMap<String,PathBuilder<?>>();
  query=prepareQueryAssociationMap(entity,filterByAssociations,datatablesCriterias,findInAllColumns,query,associationMap);
  BooleanBuilder filtersByColumnPredicate=new BooleanBuilder();
  BooleanBuilder filtersByTablePredicate=new BooleanBuilder();
  try {
    if (datatablesCriterias.hasOneFilteredColumn()) {
      filtersByColumnPredicate=prepareQueryFilterPart(entity,filterByAssociations,datatablesCriterias,associationMap,filtersByColumnPredicate);
    }
    filtersByTablePredicate=prepareQuerySearchPart(entity,filterByAssociations,datatablesCriterias,findInAllColumns,associationMap,filtersByTablePredicate);
  }
 catch (  Exception e) {
    SearchResults<T> searchResults=new SearchResults<T>(new ArrayList<T>(0),0,isPaged,new Long(datatablesCriterias.getDisplayStart()),new Long(datatablesCriterias.getDisplaySize()),0);
    return searchResults;
  }
  List<OrderSpecifier<?>> orderSpecifiersList=prepareQueryOrder(entity,orderByAssociations,datatablesCriterias,associationMap);
  Long offset=null;
  Long limit=null;
  if (isPaged) {
    limit=new Long(datatablesCriterias.getDisplaySize());
  }
  if (datatablesCriterias.getDisplayStart() != null && datatablesCriterias.getDisplayStart() >= 0) {
    offset=new Long(datatablesCriterias.getDisplayStart());
  }
  QueryModifiers queryModifiers=new QueryModifiers(limit,offset);
  List<T> elements=null;
  if (distinct) {
    query=query.distinct();
  }
  if (basePredicate == null) {
    basePredicate=new BooleanBuilder();
  }
  baseQuery.where(basePredicate);
  query=query.where(basePredicate.and(filtersByColumnPredicate.getValue()).and(filtersByTablePredicate.getValue()));
  query.restrict(queryModifiers);
  long totalResultCount=0;
  if (isPaged) {
    totalResultCount=query.count();
  }
  elements=query.orderBy(orderSpecifiersList.toArray(new OrderSpecifier[orderSpecifiersList.size()])).list(entity);
  if (!isPaged) {
    totalResultCount=elements.size();
  }
  long totalBaseCount=baseQuery.count();
  if (offset == null) {
    offset=new Long(0);
  }
  if (limit == null) {
    limit=totalBaseCount;
  }
  SearchResults<T> searchResults=new SearchResults<T>(elements,totalResultCount,isPaged,offset,limit,totalBaseCount);
  return searchResults;
}","/** 
 * Execute a select query on entityClass using <a href=""http://www.querydsl.com/"">Querydsl</a> which enables the construction of type-safe SQL-like queries.
 * @param entity builder for entity to use in search. Represents the entityand gives access to its properties for query purposes
 * @param filterByAssociations (optional) for each related entity to joincontain as key the name of the association and as value the List of related entity fields to filter by
 * @param orderByAssociations (optional) for each related entity to ordercontain as key the name of the association and as value the List of related entity fields to order by
 * @param entityManager {@code entityClass} {@link EntityManager}
 * @param datatablesCriterias datatables parameters for query
 * @param basePredicate (optional) base filter conditions
 * @param distinct use distinct query
 * @return
 */
public static <T,E extends Comparable<?>>SearchResults<T> findByCriteria(PathBuilder<T> entity,Map<String,List<String>> filterByAssociations,Map<String,List<String>> orderByAssociations,EntityManager entityManager,DatatablesCriterias datatablesCriterias,BooleanBuilder basePredicate,boolean distinct) throws IllegalArgumentException {
  Assert.notNull(entityManager);
  Assert.notNull(datatablesCriterias);
  if (CollectionUtils.isEmpty(filterByAssociations)) {
    filterByAssociations=new HashMap<String,List<String>>();
  }
  if (CollectionUtils.isEmpty(orderByAssociations)) {
    orderByAssociations=new HashMap<String,List<String>>();
  }
  boolean isPaged=datatablesCriterias.getDisplaySize() != null && datatablesCriterias.getDisplaySize() > 0;
  boolean findInAllColumns=StringUtils.isNotEmpty(datatablesCriterias.getSearch()) && datatablesCriterias.hasOneFilterableColumn();
  JPAQuery query=new JPAQuery(entityManager);
  query=query.from(entity);
  JPAQuery baseQuery=new JPAQuery(entityManager);
  baseQuery=baseQuery.from(entity);
  Map<String,PathBuilder<?>> associationMap=new HashMap<String,PathBuilder<?>>();
  query=prepareQueryAssociationMap(entity,filterByAssociations,datatablesCriterias,findInAllColumns,query,associationMap);
  BooleanBuilder filtersByColumnPredicate=new BooleanBuilder();
  BooleanBuilder filtersByTablePredicate=new BooleanBuilder();
  try {
    if (datatablesCriterias.hasOneFilteredColumn()) {
      filtersByColumnPredicate=prepareQueryFilterPart(entity,filterByAssociations,datatablesCriterias,associationMap,filtersByColumnPredicate);
    }
    filtersByTablePredicate=prepareQuerySearchPart(entity,filterByAssociations,datatablesCriterias,findInAllColumns,associationMap,filtersByTablePredicate);
  }
 catch (  Exception e) {
    SearchResults<T> searchResults=new SearchResults<T>(new ArrayList<T>(0),0,isPaged,new Long(datatablesCriterias.getDisplayStart()),new Long(datatablesCriterias.getDisplaySize()),0);
    return searchResults;
  }
  List<OrderSpecifier<?>> orderSpecifiersList=prepareQueryOrder(entity,orderByAssociations,datatablesCriterias,associationMap);
  Long offset=null;
  Long limit=null;
  if (isPaged) {
    limit=new Long(datatablesCriterias.getDisplaySize());
  }
  if (datatablesCriterias.getDisplayStart() != null && datatablesCriterias.getDisplayStart() >= 0) {
    offset=new Long(datatablesCriterias.getDisplayStart());
  }
  QueryModifiers queryModifiers=new QueryModifiers(limit,offset);
  List<T> elements=null;
  if (distinct) {
    query=query.distinct();
  }
  if (basePredicate == null) {
    basePredicate=new BooleanBuilder();
  }
  baseQuery.where(basePredicate);
  query=query.where(basePredicate.and(filtersByColumnPredicate.getValue()).and(filtersByTablePredicate.getValue()));
  long totalResultCount=0;
  if (isPaged) {
    totalResultCount=query.count();
  }
  elements=query.orderBy(orderSpecifiersList.toArray(new OrderSpecifier[orderSpecifiersList.size()])).restrict(queryModifiers).list(entity);
  if (!isPaged) {
    totalResultCount=elements.size();
  }
  long totalBaseCount=baseQuery.count();
  if (offset == null) {
    offset=new Long(0);
  }
  if (limit == null) {
    limit=totalBaseCount;
  }
  SearchResults<T> searchResults=new SearchResults<T>(elements,totalResultCount,isPaged,offset,limit,totalBaseCount);
  return searchResults;
}",0.9930218805440568
59393,"public JpaAuditMetadata(String identifier,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,JpaAuditAnnotationValues annotationValues,String entityPlural,RevisionLogMetadataBuilder revisionLogBuilder,List<FieldMetadata> identifiers){
  super(identifier,aspectName,governorPhysicalTypeMetadata);
  Validate.isTrue(isValid(identifier),""String_Node_Str"" + identifier + ""String_Node_Str"");
  this.helper=new ItdBuilderHelper(this,governorPhysicalTypeMetadata,builder.getImportRegistrationResolver());
  this.annotationValues=annotationValues;
  this.revisionLogBuilder=revisionLogBuilder;
  this.entity=governorPhysicalTypeMetadata.getType();
  this.entityName=JavaSymbolName.getReservedWordSafeName(entity).getSymbolName();
  this.entityPlural=entityPlural;
  this.entityListType=new JavaType(LIST.getFullyQualifiedTypeName(),0,DataType.TYPE,null,Arrays.asList(entity));
  this.identifier=identifiers.get(0);
  this.isAbstract=governorPhysicalTypeMetadata.getMemberHoldingTypeDetails().isAbstract();
  if (!isAbstract()) {
    builder.addField(getFieldAuditCreation());
    builder.addMethod(getGetAuditCreationMethod());
    builder.addMethod(getSetAuditCreationMethod());
    builder.addField(getFieldAuditCreatedBy());
    builder.addMethod(getGetAuditCreatedByMethod());
    builder.addMethod(getSetAuditCreatedByMethod());
    builder.addField(getFieldAuditLastUpdate());
    builder.addMethod(getGetAuditLastUpdateMethod());
    builder.addMethod(getSetAuditLastUpdateMethod());
    builder.addField(getFieldAuditLastUpdatedBy());
    builder.addMethod(getGetAuditLastUpdatedByMethod());
    builder.addMethod(getSetAuditLastUpdatedByMethod());
  }
  if (revisionLogBuilder != null) {
    initializeEntityDependenDefinitions();
    this.buildContext=createBuildContext();
    this.revisionLogBuilder.initialize(buildContext);
    if (!isAbstract) {
      builder.addMethod(getFindAllFromDateMethod());
      builder.addMethod(getFindAllFromRevisionMethod());
      builder.addMethod(getFindFromDateMethod());
      builder.addMethod(getFindFromRevisionMethod());
      builder.addMethod(getGetRevisionsMethod());
      builder.addMethod(getGetRevisionsInstanceMethod());
      builder.addMethod(getGetRevisionNumberForDateMethod());
      builder.addMethod(getFindRevisionByDatesMethod());
      builder.addMethod(getFindRevisionsMethod());
      builder.addInnerType(getRevisionClass());
    }
    revisionLogBuilder.addCustomArtifact(builder);
    this.revisionLogBuilder.done();
  }
  itdTypeDetails=builder.build();
}","public JpaAuditMetadata(String identifier,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,JpaAuditAnnotationValues annotationValues,String entityPlural,RevisionLogMetadataBuilder revisionLogBuilder,List<FieldMetadata> identifiers){
  super(identifier,aspectName,governorPhysicalTypeMetadata);
  Validate.isTrue(isValid(identifier),""String_Node_Str"" + identifier + ""String_Node_Str"");
  this.helper=new ItdBuilderHelper(this,governorPhysicalTypeMetadata,builder.getImportRegistrationResolver());
  this.annotationValues=annotationValues;
  this.revisionLogBuilder=revisionLogBuilder;
  this.entity=governorPhysicalTypeMetadata.getType();
  this.entityName=entity.getSimpleTypeName();
  this.entityPlural=entityPlural;
  this.entityListType=new JavaType(LIST.getFullyQualifiedTypeName(),0,DataType.TYPE,null,Arrays.asList(entity));
  this.identifier=identifiers.get(0);
  this.isAbstract=governorPhysicalTypeMetadata.getMemberHoldingTypeDetails().isAbstract();
  if (!isAbstract()) {
    builder.addField(getFieldAuditCreation());
    builder.addMethod(getGetAuditCreationMethod());
    builder.addMethod(getSetAuditCreationMethod());
    builder.addField(getFieldAuditCreatedBy());
    builder.addMethod(getGetAuditCreatedByMethod());
    builder.addMethod(getSetAuditCreatedByMethod());
    builder.addField(getFieldAuditLastUpdate());
    builder.addMethod(getGetAuditLastUpdateMethod());
    builder.addMethod(getSetAuditLastUpdateMethod());
    builder.addField(getFieldAuditLastUpdatedBy());
    builder.addMethod(getGetAuditLastUpdatedByMethod());
    builder.addMethod(getSetAuditLastUpdatedByMethod());
  }
  if (revisionLogBuilder != null) {
    initializeEntityDependenDefinitions();
    this.buildContext=createBuildContext();
    this.revisionLogBuilder.initialize(buildContext);
    if (!isAbstract) {
      builder.addMethod(getFindAllFromDateMethod());
      builder.addMethod(getFindAllFromRevisionMethod());
      builder.addMethod(getFindFromDateMethod());
      builder.addMethod(getFindFromRevisionMethod());
      builder.addMethod(getGetRevisionsMethod());
      builder.addMethod(getGetRevisionsInstanceMethod());
      builder.addMethod(getGetRevisionNumberForDateMethod());
      builder.addMethod(getFindRevisionByDatesMethod());
      builder.addMethod(getFindRevisionsMethod());
      builder.addInnerType(getRevisionClass());
    }
    revisionLogBuilder.addCustomArtifact(builder);
    this.revisionLogBuilder.done();
  }
  itdTypeDetails=builder.build();
}",0.985748218527316
59394,"/** 
 * @return Creates constructor for XXRevsion class
 */
private ConstructorMetadata createRevisionItemConstructor(){
  List<AnnotatedJavaType> parameterTypes=new ArrayList<AnnotatedJavaType>(2);
  parameterTypes.add(new AnnotatedJavaType(context.getEntity()));
  parameterTypes.add(new AnnotatedJavaType(revisionEntityMetadata.getType()));
  parameterTypes.add(new AnnotatedJavaType(REVISON_TYPE));
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>();
  List<JavaType> throwsTypes=new ArrayList<JavaType>();
  List<JavaSymbolName> parameterNames=new ArrayList<JavaSymbolName>(3);
  parameterNames.add(new JavaSymbolName(context.getEntityName()));
  parameterNames.add(REV_ITEM_REVISON_ENTITY_FIELD);
  parameterNames.add(REV_ITEM_REVISON_TYPE_FIELD);
  InvocableMemberBodyBuilder body=new InvocableMemberBodyBuilder();
  helper.buildSetterMethodBody(body,parameterNames.get(0));
  helper.buildSetterMethodBody(body,parameterNames.get(1));
  helper.buildSetterMethodBody(body,parameterNames.get(2));
  ConstructorMetadataBuilder builder=new ConstructorMetadataBuilder(context.getMetadataId());
  builder.setParameterTypes(parameterTypes);
  builder.setParameterNames(parameterNames);
  builder.setModifier(Modifier.PUBLIC);
  builder.setAnnotations(annotations);
  builder.setThrowsTypes(throwsTypes);
  builder.setBodyBuilder(body);
  return builder.build();
}","/** 
 * @return Creates constructor for XXRevsion class
 */
private ConstructorMetadata createRevisionItemConstructor(){
  List<AnnotatedJavaType> parameterTypes=new ArrayList<AnnotatedJavaType>(2);
  parameterTypes.add(new AnnotatedJavaType(context.getEntity()));
  parameterTypes.add(new AnnotatedJavaType(revisionEntityMetadata.getType()));
  parameterTypes.add(new AnnotatedJavaType(REVISON_TYPE));
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>();
  List<JavaType> throwsTypes=new ArrayList<JavaType>();
  List<JavaSymbolName> parameterNames=new ArrayList<JavaSymbolName>(3);
  parameterNames.add(new JavaSymbolName(StringUtils.uncapitalize(context.getEntityName())));
  parameterNames.add(REV_ITEM_REVISON_ENTITY_FIELD);
  parameterNames.add(REV_ITEM_REVISON_TYPE_FIELD);
  InvocableMemberBodyBuilder body=new InvocableMemberBodyBuilder();
  helper.buildSetterMethodBody(body,parameterNames.get(0));
  helper.buildSetterMethodBody(body,parameterNames.get(1));
  helper.buildSetterMethodBody(body,parameterNames.get(2));
  ConstructorMetadataBuilder builder=new ConstructorMetadataBuilder(context.getMetadataId());
  builder.setParameterTypes(parameterTypes);
  builder.setParameterNames(parameterNames);
  builder.setModifier(Modifier.PUBLIC);
  builder.setAnnotations(annotations);
  builder.setThrowsTypes(throwsTypes);
  builder.setBodyBuilder(body);
  return builder.build();
}",0.9908062234794908
59395,"/** 
 * {@inheritDoc}
 */
@Override public void addCustomArtifact(ItdTypeDetailsBuilder builder){
  if (governorTypeDetails.getAnnotation(AUDITED_ANNOTATION) == null) {
    builder.addAnnotation(new AnnotationMetadataBuilder(AUDITED_ANNOTATION));
  }
  if (!context.isAbstractEntity()) {
    builder.addMethod(getAuditReaderStaticMethod());
    builder.addMethod(getAuditReaderMethod());
    builder.addMethod(getPropertyMethod());
    builder.addMethod(getPropertyMethodWithWrapper());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void addCustomArtifact(ItdTypeDetailsBuilder builder){
  if (governorTypeDetails.getAnnotation(AUDITED_ANNOTATION) == null) {
    builder.addAnnotation(new AnnotationMetadataBuilder(AUDITED_ANNOTATION));
  }
  if (!context.isAbstractEntity()) {
    builder.addMethod(getAuditReaderStaticMethod());
    builder.addMethod(getPropertyMethod());
    builder.addMethod(getPropertyMethodWithWrapper());
  }
}",0.9092849519743864
59396,"/** 
 * @return creates getAuditReader() method
 */
private MethodMetadata getAuditReaderStaticMethod(){
  return commonGetAuditReaderStaticMethod(context,AUDIT_READER_STATIC_METHOD,Modifier.PUBLIC + Modifier.STATIC,""String_Node_Str"");
}","/** 
 * @return creates getAuditReader() method
 */
private MethodMetadata getAuditReaderStaticMethod(){
  return commonGetAuditReaderStaticMethod(context,AUDIT_READER_STATIC_METHOD,Modifier.PUBLIC + Modifier.STATIC,""String_Node_Str"",null);
}",0.9895615866388308
59397,"/** 
 * Generates a method on itd without parameters, annotation or throws declarations
 * @param context
 * @param methodName
 * @param modifiers
 * @param bodyStr
 * @return
 */
private MethodMetadata commonGetAuditReaderStaticMethod(Context context,JavaSymbolName methodName,int modifiers,String bodyStr){
  List<AnnotatedJavaType> parameterTypes=new ArrayList<AnnotatedJavaType>(0);
  final MethodMetadata method=helper.methodExists(methodName,parameterTypes);
  if (method != null) {
    return method;
  }
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>();
  List<JavaType> throwsTypes=new ArrayList<JavaType>();
  List<JavaSymbolName> parameterNames=new ArrayList<JavaSymbolName>();
  InvocableMemberBodyBuilder body=new InvocableMemberBodyBuilder();
  body.appendFormalLine(String.format(bodyStr,helper.getFinalTypeName(AUDIT_READER_FACTORY)));
  MethodMetadataBuilder methodBuilder=new MethodMetadataBuilder(context.getMetadataId(),modifiers,methodName,AUDIT_READER,parameterTypes,parameterNames,body);
  methodBuilder.setAnnotations(annotations);
  methodBuilder.setThrowsTypes(throwsTypes);
  return methodBuilder.build();
}","/** 
 * Generates a method on itd without parameters, annotation or throws declarations
 * @param context
 * @param methodName
 * @param modifiers
 * @param bodyStr
 * @param annotations (optional)
 * @return
 */
private MethodMetadata commonGetAuditReaderStaticMethod(Context context,JavaSymbolName methodName,int modifiers,String bodyStr,List<AnnotationMetadataBuilder> aAnnotations){
  List<AnnotatedJavaType> parameterTypes=new ArrayList<AnnotatedJavaType>(0);
  final MethodMetadata method=helper.methodExists(methodName,parameterTypes);
  if (method != null) {
    return method;
  }
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>();
  if (aAnnotations != null && !aAnnotations.isEmpty()) {
    annotations.addAll(aAnnotations);
  }
  List<JavaType> throwsTypes=new ArrayList<JavaType>();
  List<JavaSymbolName> parameterNames=new ArrayList<JavaSymbolName>();
  InvocableMemberBodyBuilder body=new InvocableMemberBodyBuilder();
  body.appendFormalLine(String.format(bodyStr,helper.getFinalTypeName(AUDIT_READER_FACTORY)));
  MethodMetadataBuilder methodBuilder=new MethodMetadataBuilder(context.getMetadataId(),modifiers,methodName,AUDIT_READER,parameterTypes,parameterNames,body);
  methodBuilder.setAnnotations(annotations);
  methodBuilder.setThrowsTypes(throwsTypes);
  return methodBuilder.build();
}",0.92990099009901
59398,"/** 
 * Return an instance of the Metadata offered by this add-on
 */
protected ItdTypeDetailsProvidingMetadataItem getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  final JpaAuditAnnotationValues annotationValues=new JpaAuditAnnotationValues(governorPhysicalTypeMetadata);
  RevisionLogProvider logProvider=operations.getActiveRevisionLogProvider();
  JavaType entity=JpaAuditMetadata.getJavaType(metadataIdentificationString);
  LogicalPath entityPath=JpaAuditMetadata.getPath(metadataIdentificationString);
  String jpaMetadataId=JpaActiveRecordMetadata.createIdentifier(entity,entityPath);
  JpaActiveRecordMetadata jpaMetadata=(JpaActiveRecordMetadata)metadataService.get(jpaMetadataId);
  List<FieldMetadata> identifiers=persistenceMemberLocator.getIdentifierFields(entity);
  String plural=jpaMetadata.getPlural();
  RevisionLogMetadataBuilder revisionLogBuilder=null;
  if (logProvider == null) {
    if (annotationValues.getStoreRevisionLog() == StoreRevisionLog.YES) {
      LOGGER.warning(governorPhysicalTypeMetadata.getType().getSimpleTypeName().concat(""String_Node_Str""));
    }
  }
 else {
    boolean useRevisionLog=false;
    if (annotationValues.getStoreRevisionLog() == null || annotationValues.getStoreRevisionLog() == StoreRevisionLog.PROVIDER_DEFAULT) {
      useRevisionLog=logProvider.getDefaultValueOfRevisionLogAttribute();
    }
 else     if (annotationValues.getStoreRevisionLog() == StoreRevisionLog.YES) {
      useRevisionLog=true;
    }
    if (useRevisionLog) {
      revisionLogBuilder=logProvider.getMetadataBuilder(governorPhysicalTypeMetadata);
    }
  }
  return new JpaAuditMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,annotationValues,plural,revisionLogBuilder,identifiers);
}","/** 
 * Return an instance of the Metadata offered by this add-on
 */
protected ItdTypeDetailsProvidingMetadataItem getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  final JpaAuditAnnotationValues annotationValues=new JpaAuditAnnotationValues(governorPhysicalTypeMetadata);
  RevisionLogProvider logProvider=operations.getActiveRevisionLogProvider();
  JavaType entity=JpaAuditMetadata.getJavaType(metadataIdentificationString);
  LogicalPath entityPath=JpaAuditMetadata.getPath(metadataIdentificationString);
  String jpaMetadataId=JpaActiveRecordMetadata.createIdentifier(entity,entityPath);
  metadataDependencyRegistry.registerDependency(jpaMetadataId,metadataIdentificationString);
  JpaActiveRecordMetadata jpaMetadata=(JpaActiveRecordMetadata)metadataService.get(jpaMetadataId);
  if (jpaMetadata == null) {
    return null;
  }
  List<FieldMetadata> identifiers=persistenceMemberLocator.getIdentifierFields(entity);
  if (identifiers == null || identifiers.isEmpty()) {
    return null;
  }
  String plural=jpaMetadata.getPlural();
  RevisionLogMetadataBuilder revisionLogBuilder=null;
  if (logProvider == null) {
    if (annotationValues.getStoreRevisionLog() == StoreRevisionLog.YES) {
      LOGGER.warning(governorPhysicalTypeMetadata.getType().getSimpleTypeName().concat(""String_Node_Str""));
    }
  }
 else {
    boolean useRevisionLog=false;
    if (annotationValues.getStoreRevisionLog() == null || annotationValues.getStoreRevisionLog() == StoreRevisionLog.PROVIDER_DEFAULT) {
      useRevisionLog=logProvider.getDefaultValueOfRevisionLogAttribute();
    }
 else     if (annotationValues.getStoreRevisionLog() == StoreRevisionLog.YES) {
      useRevisionLog=true;
    }
    if (useRevisionLog) {
      revisionLogBuilder=logProvider.getMetadataBuilder(governorPhysicalTypeMetadata);
    }
  }
  return new JpaAuditMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,annotationValues,plural,revisionLogBuilder,identifiers);
}",0.944073884043099
59399,"@Override public void setup(JavaType serviceClass,JavaType userType){
  JavaType targetServiceClass;
  if (serviceClass == null) {
    targetServiceClass=generateUserServiceJavaType();
  }
 else {
    targetServiceClass=serviceClass;
  }
  JavaType targetUserType;
  if (userType == null) {
    targetUserType=JavaType.STRING;
  }
 else {
    targetUserType=userType;
  }
  Validate.isTrue(!JdkJavaType.isPartOfJavaLang(targetServiceClass.getSimpleTypeName()),""String_Node_Str"",targetServiceClass);
  int modifier=Modifier.PUBLIC;
  final String declaredByMetadataId=PhysicalTypeIdentifier.createIdentifier(targetServiceClass,pathResolver.getFocusedPath(Path.SRC_MAIN_JAVA));
  File targetUserServiceFile=new File(typeLocationService.getPhysicalTypeCanonicalPath(declaredByMetadataId));
  if (targetUserServiceFile.exists()) {
    Validate.isTrue(!targetUserServiceFile.exists(),""String_Node_Str"",targetServiceClass);
  }
  final ClassOrInterfaceTypeDetailsBuilder cidBuilder=new ClassOrInterfaceTypeDetailsBuilder(declaredByMetadataId,modifier,targetServiceClass,PhysicalTypeCategory.CLASS);
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>(2);
  AnnotationMetadataBuilder jpaAuditUserServiceAnnotation=new AnnotationMetadataBuilder(new JavaType(GvNIXJpaAuditUserService.class));
  if (!JavaType.STRING.equals(targetUserType)) {
    jpaAuditUserServiceAnnotation.addClassAttribute(""String_Node_Str"",targetUserType);
  }
  annotations.add(jpaAuditUserServiceAnnotation);
  cidBuilder.setAnnotations(annotations);
  typeManagementService.createOrUpdateTypeOnDisk(cidBuilder.build());
  refreshAuditedEntities();
  PathResolver pathResolver=projectOperations.getPathResolver();
  LogicalPath path=pathResolver.getFocusedPath(Path.SRC_MAIN_JAVA);
  String metadataId=JpaAuditUserServiceMetadata.createIdentifier(serviceClass,path);
  JpaAuditUserServiceMetadata metadata=(JpaAuditUserServiceMetadata)metadataService.get(metadataId);
  if (isSpringSecurityInstalled()) {
    if (JavaType.STRING.equals(targetUserType)) {
      LOGGER.warning(String.format(""String_Node_Str"",targetServiceClass,JpaAuditUserServiceMetadata.GET_USER_METHOD));
    }
 else     if (!(metadata.isUserTypeSpringSecUserDetails() && metadata.isUserTypeEntity())) {
      LOGGER.warning(String.format(""String_Node_Str"",targetServiceClass,JpaAuditUserServiceMetadata.GET_USER_METHOD,targetUserType));
    }
  }
 else {
    LOGGER.warning(String.format(""String_Node_Str"",targetServiceClass,JpaAuditUserServiceMetadata.GET_USER_METHOD));
  }
}","@Override public void setup(JavaType serviceClass,JavaType userType){
  JavaType targetServiceClass;
  if (serviceClass == null) {
    targetServiceClass=generateUserServiceJavaType();
  }
 else {
    targetServiceClass=serviceClass;
  }
  JavaType targetUserType;
  if (userType == null) {
    targetUserType=JavaType.STRING;
  }
 else {
    targetUserType=userType;
  }
  Validate.isTrue(!JdkJavaType.isPartOfJavaLang(targetServiceClass.getSimpleTypeName()),""String_Node_Str"",targetServiceClass);
  int modifier=Modifier.PUBLIC;
  final String declaredByMetadataId=PhysicalTypeIdentifier.createIdentifier(targetServiceClass,pathResolver.getFocusedPath(Path.SRC_MAIN_JAVA));
  File targetUserServiceFile=new File(typeLocationService.getPhysicalTypeCanonicalPath(declaredByMetadataId));
  if (targetUserServiceFile.exists()) {
    Validate.isTrue(!targetUserServiceFile.exists(),""String_Node_Str"",targetServiceClass);
  }
  final ClassOrInterfaceTypeDetailsBuilder cidBuilder=new ClassOrInterfaceTypeDetailsBuilder(declaredByMetadataId,modifier,targetServiceClass,PhysicalTypeCategory.CLASS);
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>(2);
  AnnotationMetadataBuilder jpaAuditUserServiceAnnotation=new AnnotationMetadataBuilder(new JavaType(GvNIXJpaAuditUserService.class));
  if (!JavaType.STRING.equals(targetUserType)) {
    jpaAuditUserServiceAnnotation.addClassAttribute(""String_Node_Str"",targetUserType);
  }
  annotations.add(jpaAuditUserServiceAnnotation);
  cidBuilder.setAnnotations(annotations);
  typeManagementService.createOrUpdateTypeOnDisk(cidBuilder.build());
  refreshAuditedEntities();
  PathResolver pathResolver=projectOperations.getPathResolver();
  LogicalPath path=pathResolver.getFocusedPath(Path.SRC_MAIN_JAVA);
  String metadataId=JpaAuditUserServiceMetadata.createIdentifier(targetServiceClass,path);
  JpaAuditUserServiceMetadata metadata=(JpaAuditUserServiceMetadata)metadataService.get(metadataId);
  if (isSpringSecurityInstalled()) {
    if (JavaType.STRING.equals(targetUserType)) {
      LOGGER.warning(String.format(""String_Node_Str"",targetServiceClass,JpaAuditUserServiceMetadata.GET_USER_METHOD));
    }
 else     if (!(metadata.isUserTypeSpringSecUserDetails() && metadata.isUserTypeEntity())) {
      LOGGER.warning(String.format(""String_Node_Str"",targetServiceClass,JpaAuditUserServiceMetadata.GET_USER_METHOD,targetUserType));
    }
  }
 else {
    LOGGER.warning(String.format(""String_Node_Str"",targetServiceClass,JpaAuditUserServiceMetadata.GET_USER_METHOD));
  }
}",0.9984313725490196
59400,"/** 
 * Populate a   {@link DataSet} from given entity list.<p/> Field values will be converted to String using given {@link ConversionService} and Date fields will be converted to Date using{@link DateFormat} with given date patterns.
 * @param entities List of T entities to convert to Datatables data
 * @param pkFieldName The T entity field that contains the PK
 * @param totalRecords Total amount of records
 * @param totalDisplayRecords Amount of records found
 * @param columns {@link ColumnDef} list
 * @param datePatterns Patterns to convert Date fields to String. The Mapcontains one pattern for each entity Date field keyed by field name. For Roo compatibility the key could follow the pattern {@code lower_case( ENTITY ) + ""_"" + lower_case( FIELD ) + ""_date_format""}too
 * @param conversionService
 * @return
 */
public static <T>DataSet<Map<String,String>> populateDataSet(List<T> entities,String pkFieldName,long totalRecords,long totalDisplayRecords,List<ColumnDef> columns,Map<String,Object> datePatterns,ConversionService conversionService){
  Assert.notNull(pkFieldName);
  Assert.notNull(columns);
  Assert.notNull(conversionService);
  List<Map<String,String>> rows=new ArrayList<Map<String,String>>(entities.size());
  if (CollectionUtils.isEmpty(entities)) {
    return new DataSet<Map<String,String>>(rows,0l,0l);
  }
  if (CollectionUtils.isEmpty(datePatterns)) {
    datePatterns=new HashMap<String,Object>();
  }
  Set<String> fields=new HashSet<String>();
  fields.add(pkFieldName);
  for (  ColumnDef colum : columns) {
    fields.add(colum.getName());
  }
  DateFormat defaultFormat=SimpleDateFormat.getDateInstance();
  for (  Object entity : entities) {
    Map<String,String> row=new HashMap<String,String>(fields.size());
    BeanWrapper entityBean=new BeanWrapperImpl(entity);
    for (    String fieldName : fields) {
      if (!entityBean.isReadableProperty(fieldName)) {
        logger.debug(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""));
        continue;
      }
      Object value=null;
      String valueStr=null;
      try {
        value=entityBean.getPropertyValue(fieldName);
        if (value != null) {
          if (Calendar.class.isAssignableFrom(value.getClass())) {
            value=((Calendar)value).getTime();
          }
          if (Date.class.isAssignableFrom(value.getClass())) {
            String pattern=getPattern(datePatterns,entityBean.getWrappedClass(),fieldName);
            DateFormat format=StringUtils.isEmpty(pattern) ? defaultFormat : new SimpleDateFormat(pattern);
            valueStr=format.format(value);
          }
 else           if (conversionService.canConvert(value.getClass(),String.class)) {
            valueStr=conversionService.convert(value,String.class);
          }
 else {
            valueStr=ObjectUtils.getDisplayString(value);
          }
        }
 else {
          valueStr=""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""),ex);
      }
      row.put(fieldName,valueStr);
      if (pkFieldName.equalsIgnoreCase(fieldName)) {
        row.put(""String_Node_Str"",valueStr);
      }
    }
    rows.add(row);
  }
  DataSet<Map<String,String>> dataSet=new DataSet<Map<String,String>>(rows,totalRecords,totalDisplayRecords);
  return dataSet;
}","/** 
 * Populate a   {@link DataSet} from given entity list.<p/> Field values will be converted to String using given {@link ConversionService} and Date fields will be converted to Date using{@link DateFormat} with given date patterns.
 * @param entities List of T entities to convert to Datatables data
 * @param pkFieldName The T entity field that contains the PK
 * @param totalRecords Total amount of records
 * @param totalDisplayRecords Amount of records found
 * @param columns {@link ColumnDef} list
 * @param datePatterns Patterns to convert Date fields to String. The Mapcontains one pattern for each entity Date field keyed by field name. For Roo compatibility the key could follow the pattern {@code ENTITY + ""_"" + lower_case( FIELD ) + ""_date_format""} too
 * @param conversionService
 * @return
 */
public static <T>DataSet<Map<String,String>> populateDataSet(List<T> entities,String pkFieldName,long totalRecords,long totalDisplayRecords,List<ColumnDef> columns,Map<String,Object> datePatterns,ConversionService conversionService){
  Assert.notNull(pkFieldName);
  Assert.notNull(columns);
  Assert.notNull(conversionService);
  List<Map<String,String>> rows=new ArrayList<Map<String,String>>(entities.size());
  if (CollectionUtils.isEmpty(entities)) {
    return new DataSet<Map<String,String>>(rows,0l,0l);
  }
  if (CollectionUtils.isEmpty(datePatterns)) {
    datePatterns=new HashMap<String,Object>();
  }
  Set<String> fields=new HashSet<String>();
  fields.add(pkFieldName);
  for (  ColumnDef colum : columns) {
    fields.add(colum.getName());
  }
  DateFormat defaultFormat=SimpleDateFormat.getDateInstance();
  for (  Object entity : entities) {
    Map<String,String> row=new HashMap<String,String>(fields.size());
    BeanWrapper entityBean=new BeanWrapperImpl(entity);
    for (    String fieldName : fields) {
      if (!entityBean.isReadableProperty(fieldName)) {
        logger.debug(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""));
        continue;
      }
      Object value=null;
      String valueStr=null;
      try {
        value=entityBean.getPropertyValue(fieldName);
        if (value != null) {
          if (Calendar.class.isAssignableFrom(value.getClass())) {
            value=((Calendar)value).getTime();
          }
          if (Date.class.isAssignableFrom(value.getClass())) {
            String pattern=getPattern(datePatterns,entityBean.getWrappedClass(),fieldName);
            DateFormat format=StringUtils.isEmpty(pattern) ? defaultFormat : new SimpleDateFormat(pattern);
            valueStr=format.format(value);
          }
 else           if (conversionService.canConvert(value.getClass(),String.class)) {
            valueStr=conversionService.convert(value,String.class);
          }
 else {
            valueStr=ObjectUtils.getDisplayString(value);
          }
        }
 else {
          valueStr=""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""),ex);
      }
      row.put(fieldName,valueStr);
      if (pkFieldName.equalsIgnoreCase(fieldName)) {
        row.put(""String_Node_Str"",valueStr);
      }
    }
    rows.add(row);
  }
  DataSet<Map<String,String>> dataSet=new DataSet<Map<String,String>>(rows,totalRecords,totalDisplayRecords);
  return dataSet;
}",0.9978414160310836
59401,"/** 
 * Get Date pattern by field name <p/> If no pattern found, try standard Roo key  {@code lower_case( ENTITY ) + ""_"" + lower_case( FIELD ) + ""_date_format""}
 * @param datePatterns Contains field name and related data pattern
 * @param entityClass Entity class to which the field belong to
 * @param fieldName Field to search pattern
 * @return
 */
private static String getPattern(Map<String,Object> datePatterns,Class<?> entityClass,String fieldName){
  String pattern=(String)datePatterns.get(fieldName.toLowerCase());
  if (!StringUtils.isEmpty(pattern)) {
    return pattern;
  }
  String rooKey=entityClass.getSimpleName().toLowerCase().concat(""String_Node_Str"").concat(fieldName.toLowerCase()).concat(""String_Node_Str"");
  pattern=(String)datePatterns.get(rooKey);
  return pattern;
}","/** 
 * Get Date pattern by field name <p/> If no pattern found, try standard Roo key  {@code ENTITY + ""_"" + lower_case( FIELD ) + ""_date_format""}
 * @param datePatterns Contains field name and related data pattern
 * @param entityClass Entity class to which the field belong to
 * @param fieldName Field to search pattern
 * @return
 */
private static String getPattern(Map<String,Object> datePatterns,Class<?> entityClass,String fieldName){
  String pattern=(String)datePatterns.get(fieldName.toLowerCase());
  if (!StringUtils.isEmpty(pattern)) {
    return pattern;
  }
  String rooKey=entityClass.getSimpleName().concat(""String_Node_Str"").concat(fieldName.toLowerCase()).concat(""String_Node_Str"");
  pattern=(String)datePatterns.get(rooKey);
  return pattern;
}",0.982051282051282
59402,"/** 
 * Populate a   {@link DataSet} from given entity list.<p/> Field values will be converted to String using given {@link ConversionService} and Date fields will be converted to Date using{@link DateFormat} with given date patterns.
 * @param entities List of T entities to convert to Datatables data
 * @param pkFieldName The T entity field that contains the PK
 * @param totalRecords Total amount of records
 * @param totalDisplayRecords Amount of records found
 * @param columns {@link ColumnDef} list
 * @param datePatterns Patterns to convert Date fields to String. The Mapcontains one pattern for each entity Date field keyed by field name. For Roo compatibility the key could follow the pattern {@code ENTITY + ""_"" + lower_case( FIELD ) + ""_date_format""} too
 * @param conversionService
 * @return
 */
public static <T>DataSet<Map<String,String>> populateDataSet(List<T> entities,String pkFieldName,long totalRecords,long totalDisplayRecords,List<ColumnDef> columns,Map<String,Object> datePatterns,ConversionService conversionService){
  Assert.notNull(pkFieldName);
  Assert.notNull(columns);
  Assert.notNull(conversionService);
  List<Map<String,String>> rows=new ArrayList<Map<String,String>>(entities.size());
  if (CollectionUtils.isEmpty(entities)) {
    return new DataSet<Map<String,String>>(rows,0l,0l);
  }
  if (CollectionUtils.isEmpty(datePatterns)) {
    datePatterns=new HashMap<String,Object>();
  }
  Set<String> fields=new HashSet<String>();
  fields.add(pkFieldName);
  for (  ColumnDef colum : columns) {
    fields.add(colum.getName());
  }
  DateFormat defaultFormat=SimpleDateFormat.getDateInstance();
  for (  Object entity : entities) {
    Map<String,String> row=new HashMap<String,String>(fields.size());
    BeanWrapper entityBean=new BeanWrapperImpl(entity);
    for (    String fieldName : fields) {
      if (!entityBean.isReadableProperty(fieldName)) {
        logger.debug(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""));
        continue;
      }
      Object value=null;
      String valueStr=null;
      try {
        value=entityBean.getPropertyValue(fieldName);
        if (value != null) {
          if (Calendar.class.isAssignableFrom(value.getClass())) {
            value=((Calendar)value).getTime();
          }
          if (Date.class.isAssignableFrom(value.getClass())) {
            String pattern=getPattern(datePatterns,entityBean.getWrappedClass(),fieldName);
            DateFormat format=StringUtils.isEmpty(pattern) ? defaultFormat : new SimpleDateFormat(pattern);
            valueStr=format.format(value);
          }
 else           if (conversionService.canConvert(value.getClass(),String.class)) {
            valueStr=conversionService.convert(value,String.class);
          }
 else {
            valueStr=ObjectUtils.getDisplayString(value);
          }
        }
 else {
          valueStr=""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""),ex);
      }
      row.put(fieldName,valueStr);
      if (pkFieldName.equalsIgnoreCase(fieldName)) {
        row.put(""String_Node_Str"",valueStr);
      }
    }
    rows.add(row);
  }
  DataSet<Map<String,String>> dataSet=new DataSet<Map<String,String>>(rows,totalRecords,totalDisplayRecords);
  return dataSet;
}","/** 
 * Populate a   {@link DataSet} from given entity list.<p/> Field values will be converted to String using given {@link ConversionService} and Date fields will be converted to Date using{@link DateFormat} with given date patterns.
 * @param entities List of T entities to convert to Datatables data
 * @param pkFieldName The T entity field that contains the PK
 * @param totalRecords Total amount of records
 * @param totalDisplayRecords Amount of records found
 * @param columns {@link ColumnDef} list
 * @param datePatterns Patterns to convert Date fields to String. The Mapcontains one pattern for each entity Date field keyed by field name. For Roo compatibility the key could follow the pattern {@code uncapitalize( ENTITY ) + ""_"" + lower_case( FIELD ) + ""_date_format""}too
 * @param conversionService
 * @return
 */
public static <T>DataSet<Map<String,String>> populateDataSet(List<T> entities,String pkFieldName,long totalRecords,long totalDisplayRecords,List<ColumnDef> columns,Map<String,Object> datePatterns,ConversionService conversionService){
  Assert.notNull(pkFieldName);
  Assert.notNull(columns);
  Assert.notNull(conversionService);
  List<Map<String,String>> rows=new ArrayList<Map<String,String>>(entities.size());
  if (CollectionUtils.isEmpty(entities)) {
    return new DataSet<Map<String,String>>(rows,0l,0l);
  }
  if (CollectionUtils.isEmpty(datePatterns)) {
    datePatterns=new HashMap<String,Object>();
  }
  Set<String> fields=new HashSet<String>();
  fields.add(pkFieldName);
  for (  ColumnDef colum : columns) {
    fields.add(colum.getName());
  }
  DateFormat defaultFormat=SimpleDateFormat.getDateInstance();
  for (  Object entity : entities) {
    Map<String,String> row=new HashMap<String,String>(fields.size());
    BeanWrapper entityBean=new BeanWrapperImpl(entity);
    for (    String fieldName : fields) {
      if (!entityBean.isReadableProperty(fieldName)) {
        logger.debug(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""));
        continue;
      }
      Object value=null;
      String valueStr=null;
      try {
        value=entityBean.getPropertyValue(fieldName);
        if (value != null) {
          if (Calendar.class.isAssignableFrom(value.getClass())) {
            value=((Calendar)value).getTime();
          }
          if (Date.class.isAssignableFrom(value.getClass())) {
            String pattern=getPattern(datePatterns,entityBean.getWrappedClass(),fieldName);
            DateFormat format=StringUtils.isEmpty(pattern) ? defaultFormat : new SimpleDateFormat(pattern);
            valueStr=format.format(value);
          }
 else           if (conversionService.canConvert(value.getClass(),String.class)) {
            valueStr=conversionService.convert(value,String.class);
          }
 else {
            valueStr=ObjectUtils.getDisplayString(value);
          }
        }
 else {
          valueStr=""String_Node_Str"";
        }
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str"").concat(""String_Node_Str"").concat(entity.toString()).concat(""String_Node_Str""),ex);
      }
      row.put(fieldName,valueStr);
      if (pkFieldName.equalsIgnoreCase(fieldName)) {
        row.put(""String_Node_Str"",valueStr);
      }
    }
    rows.add(row);
  }
  DataSet<Map<String,String>> dataSet=new DataSet<Map<String,String>>(rows,totalRecords,totalDisplayRecords);
  return dataSet;
}",0.9975543087325563
59403,"/** 
 * Get Date pattern by field name <p/> If no pattern found, try standard Roo key  {@code ENTITY + ""_"" + lower_case( FIELD ) + ""_date_format""}
 * @param datePatterns Contains field name and related data pattern
 * @param entityClass Entity class to which the field belong to
 * @param fieldName Field to search pattern
 * @return
 */
private static String getPattern(Map<String,Object> datePatterns,Class<?> entityClass,String fieldName){
  String pattern=(String)datePatterns.get(fieldName.toLowerCase());
  if (!StringUtils.isEmpty(pattern)) {
    return pattern;
  }
  String rooKey=entityClass.getSimpleName().concat(""String_Node_Str"").concat(fieldName.toLowerCase()).concat(""String_Node_Str"");
  pattern=(String)datePatterns.get(rooKey);
  return pattern;
}","/** 
 * Get Date pattern by field name <p/> If no pattern found, try standard Roo key  {@code uncapitalize( ENTITY ) + ""_"" + lower_case( FIELD ) + ""_date_format""}
 * @param datePatterns Contains field name and related data pattern
 * @param entityClass Entity class to which the field belong to
 * @param fieldName Field to search pattern
 * @return
 */
private static String getPattern(Map<String,Object> datePatterns,Class<?> entityClass,String fieldName){
  String pattern=(String)datePatterns.get(fieldName.toLowerCase());
  if (!StringUtils.isEmpty(pattern)) {
    return pattern;
  }
  String rooKey=StringUtils.uncapitalize(entityClass.getSimpleName()).concat(""String_Node_Str"").concat(fieldName.toLowerCase()).concat(""String_Node_Str"");
  pattern=(String)datePatterns.get(rooKey);
  return pattern;
}",0.9733163913595934
59404,"/** 
 * Return an instance of the Metadata offered by this add-on
 */
protected ItdTypeDetailsProvidingMetadataItem getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  JavaType javaType=DatatablesMetadata.getJavaType(metadataIdentificationString);
  LogicalPath path=DatatablesMetadata.getPath(metadataIdentificationString);
  final DatatablesAnnotationValues annotationValues=new DatatablesAnnotationValues(governorPhysicalTypeMetadata);
  String webScaffoldMetadataId=WebScaffoldMetadata.createIdentifier(javaType,path);
  WebScaffoldMetadata webScaffoldMetadata=(WebScaffoldMetadata)metadataService.get(webScaffoldMetadataId);
  metadataDependencyRegistry.registerDependency(webScaffoldMetadataId,metadataIdentificationString);
  JavaType webScaffoldAspectName=webScaffoldMetadata.getAspectName();
  WebScaffoldAnnotationValues webScaffoldAnnotationValues=webScaffoldMetadata.getAnnotationValues();
  JavaType entity=webScaffoldAnnotationValues.getFormBackingObject();
  String webJpaBatchMetadataId=WebJpaBatchMetadata.createIdentifier(javaType,path);
  WebJpaBatchMetadata webJpaBatchMetadata=(WebJpaBatchMetadata)metadataService.get(webJpaBatchMetadataId);
  String jpaMetadataId=JpaActiveRecordMetadata.createIdentifier(entity,path);
  JpaActiveRecordMetadata jpaMetadata=(JpaActiveRecordMetadata)metadataService.get(jpaMetadataId);
  if (jpaMetadata == null) {
    return null;
  }
  metadataDependencyRegistry.registerDependency(jpaMetadataId,metadataIdentificationString);
  String jpaQueryMetadataId=JpaQueryMetadata.createIdentifier(entity,path);
  JpaQueryMetadata jpaQueryMetadata=(JpaQueryMetadata)metadataService.get(jpaQueryMetadataId);
  metadataDependencyRegistry.registerDependency(jpaQueryMetadataId,metadataIdentificationString);
  List<FieldMetadata> identifiers=persistenceMemberLocator.getIdentifierFields(entity);
  String plural=jpaMetadata.getPlural();
  JavaSymbolName entityManagerMethodName=jpaMetadata.getEntityManagerMethod().getMethodName();
  final MemberDetails entityMemberDetails=getMemberDetails(entity);
  final Map<JavaSymbolName,DateTimeFormatDetails> datePatterns=webMetadataService.getDatePatterns(entity,entityMemberDetails,metadataIdentificationString);
  Map<FinderMetadataDetails,QueryHolderTokens> findersRegistered=null;
  String webFinderMetadataId=WebFinderMetadata.createIdentifier(javaType,path);
  WebFinderMetadata webFinderMetadata=(WebFinderMetadata)metadataService.get(webFinderMetadataId);
  metadataDependencyRegistry.registerDependency(webFinderMetadataId,metadataIdentificationString);
  if (webFinderMetadata != null) {
    findersRegistered=getFindersRegisterd(entity,path,entityMemberDetails,plural,jpaMetadata.getEntityName());
  }
  return new DatatablesMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,annotationValues,entity,identifiers,plural,entityManagerMethodName,datePatterns,webScaffoldAspectName,webJpaBatchMetadata,jpaQueryMetadata,webScaffoldAnnotationValues,findersRegistered);
}","/** 
 * Return an instance of the Metadata offered by this add-on
 */
protected ItdTypeDetailsProvidingMetadataItem getMetadata(String metadataIdentificationString,JavaType aspectName,PhysicalTypeMetadata governorPhysicalTypeMetadata,String itdFilename){
  JavaType javaType=DatatablesMetadata.getJavaType(metadataIdentificationString);
  LogicalPath path=DatatablesMetadata.getPath(metadataIdentificationString);
  final DatatablesAnnotationValues annotationValues=new DatatablesAnnotationValues(governorPhysicalTypeMetadata);
  String webScaffoldMetadataId=WebScaffoldMetadata.createIdentifier(javaType,path);
  WebScaffoldMetadata webScaffoldMetadata=(WebScaffoldMetadata)metadataService.get(webScaffoldMetadataId);
  metadataDependencyRegistry.registerDependency(webScaffoldMetadataId,metadataIdentificationString);
  JavaType webScaffoldAspectName=webScaffoldMetadata.getAspectName();
  WebScaffoldAnnotationValues webScaffoldAnnotationValues=webScaffoldMetadata.getAnnotationValues();
  JavaType entity=webScaffoldAnnotationValues.getFormBackingObject();
  LogicalPath entityPath=PhysicalTypeUtils.getPath(entity,typeLocationService);
  String webJpaBatchMetadataId=WebJpaBatchMetadata.createIdentifier(javaType,path);
  WebJpaBatchMetadata webJpaBatchMetadata=(WebJpaBatchMetadata)metadataService.get(webJpaBatchMetadataId);
  String jpaMetadataId=JpaActiveRecordMetadata.createIdentifier(entity,entityPath);
  JpaActiveRecordMetadata jpaMetadata=(JpaActiveRecordMetadata)metadataService.get(jpaMetadataId);
  if (jpaMetadata == null) {
    return null;
  }
  metadataDependencyRegistry.registerDependency(jpaMetadataId,metadataIdentificationString);
  String jpaQueryMetadataId=JpaQueryMetadata.createIdentifier(entity,path);
  JpaQueryMetadata jpaQueryMetadata=(JpaQueryMetadata)metadataService.get(jpaQueryMetadataId);
  metadataDependencyRegistry.registerDependency(jpaQueryMetadataId,metadataIdentificationString);
  List<FieldMetadata> identifiers=persistenceMemberLocator.getIdentifierFields(entity);
  String plural=jpaMetadata.getPlural();
  JavaSymbolName entityManagerMethodName=jpaMetadata.getEntityManagerMethod().getMethodName();
  final MemberDetails entityMemberDetails=getMemberDetails(entity);
  final Map<JavaSymbolName,DateTimeFormatDetails> datePatterns=webMetadataService.getDatePatterns(entity,entityMemberDetails,metadataIdentificationString);
  Map<FinderMetadataDetails,QueryHolderTokens> findersRegistered=null;
  String webFinderMetadataId=WebFinderMetadata.createIdentifier(javaType,path);
  WebFinderMetadata webFinderMetadata=(WebFinderMetadata)metadataService.get(webFinderMetadataId);
  metadataDependencyRegistry.registerDependency(webFinderMetadataId,metadataIdentificationString);
  if (webFinderMetadata != null) {
    findersRegistered=getFindersRegisterd(entity,path,entityMemberDetails,plural,jpaMetadata.getEntityName());
  }
  return new DatatablesMetadata(metadataIdentificationString,aspectName,governorPhysicalTypeMetadata,annotationValues,entity,identifiers,plural,entityManagerMethodName,datePatterns,webScaffoldAspectName,webJpaBatchMetadata,jpaQueryMetadata,webScaffoldAnnotationValues,findersRegistered);
}",0.985897435897436
59405,"@Override public void updateWebMvcConfigFile(){
  String webMvcXmlPath=projectOperations.getPathResolver().getIdentifier(getWebappPath(),""String_Node_Str"");
  Validate.isTrue(fileManager.exists(webMvcXmlPath),""String_Node_Str"");
  MutableFile webMvcXmlMutableFile=null;
  Document webMvcXml;
  try {
    webMvcXmlMutableFile=fileManager.updateFile(webMvcXmlPath);
    webMvcXml=XmlUtils.getDocumentBuilder().parse(webMvcXmlMutableFile.getInputStream());
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  Element root=webMvcXml.getDocumentElement();
  List<Element> annotationDrivenFound=XmlUtils.findElements(""String_Node_Str"",root);
  Validate.isTrue(!annotationDrivenFound.isEmpty(),""String_Node_Str"");
  Validate.isTrue(annotationDrivenFound.size() == 1,""String_Node_Str"");
  Element annotationDriven=annotationDrivenFound.get(0);
  Element argumentResolver=null;
  Element bean=null;
  boolean addBean=false;
  if (!annotationDriven.hasChildNodes()) {
    addBean=true;
  }
 else {
    bean=XmlUtils.findFirstElement(""String_Node_Str"".concat(DATATABLES_CRITERIA_RESOLVER).concat(""String_Node_Str""),annotationDriven);
    if (bean == null) {
      addBean=true;
      argumentResolver=XmlUtils.findFirstElement(ARGUMENT_RESOLVERS,annotationDriven);
    }
  }
  if (addBean) {
    if (argumentResolver == null) {
      argumentResolver=webMvcXml.createElement(""String_Node_Str"" + ARGUMENT_RESOLVERS);
      annotationDriven.appendChild(argumentResolver);
    }
    bean=webMvcXml.createElement(""String_Node_Str"");
    bean.setAttribute(""String_Node_Str"",DATATABLES_CRITERIA_RESOLVER);
    argumentResolver.appendChild(bean);
    XmlUtils.writeXml(webMvcXmlMutableFile.getOutputStream(),webMvcXml);
  }
}","@Override public void updateWebMvcConfigFile(){
  LogicalPath webappPath=WebProjectUtils.getWebappPath(projectOperations);
  String webMvcXmlPath=projectOperations.getPathResolver().getIdentifier(webappPath,""String_Node_Str"");
  Validate.isTrue(fileManager.exists(webMvcXmlPath),""String_Node_Str"");
  MutableFile webMvcXmlMutableFile=null;
  Document webMvcXml;
  try {
    webMvcXmlMutableFile=fileManager.updateFile(webMvcXmlPath);
    webMvcXml=XmlUtils.getDocumentBuilder().parse(webMvcXmlMutableFile.getInputStream());
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  Element root=webMvcXml.getDocumentElement();
  List<Element> annotationDrivenFound=XmlUtils.findElements(""String_Node_Str"",root);
  Validate.isTrue(!annotationDrivenFound.isEmpty(),""String_Node_Str"");
  Validate.isTrue(annotationDrivenFound.size() == 1,""String_Node_Str"");
  Element annotationDriven=annotationDrivenFound.get(0);
  Element argumentResolver=null;
  Element bean=null;
  boolean addBean=false;
  if (!annotationDriven.hasChildNodes()) {
    addBean=true;
  }
 else {
    bean=XmlUtils.findFirstElement(""String_Node_Str"".concat(DATATABLES_CRITERIA_RESOLVER).concat(""String_Node_Str""),annotationDriven);
    if (bean == null) {
      addBean=true;
      argumentResolver=XmlUtils.findFirstElement(ARGUMENT_RESOLVERS,annotationDriven);
    }
  }
  if (addBean) {
    if (argumentResolver == null) {
      argumentResolver=webMvcXml.createElement(""String_Node_Str"" + ARGUMENT_RESOLVERS);
      annotationDriven.appendChild(argumentResolver);
    }
    bean=webMvcXml.createElement(""String_Node_Str"");
    bean.setAttribute(""String_Node_Str"",DATATABLES_CRITERIA_RESOLVER);
    argumentResolver.appendChild(bean);
    XmlUtils.writeXml(webMvcXmlMutableFile.getOutputStream(),webMvcXml);
  }
}",0.973371104815864
59406,"@Override public void updateTags(){
  PathResolver pathResolver=projectOperations.getPathResolver();
  LogicalPath webappPath=getWebappPath();
  OperationUtils.updateDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),fileManager,context,getClass());
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
}","@Override public void updateTags(){
  PathResolver pathResolver=projectOperations.getPathResolver();
  LogicalPath webappPath=WebProjectUtils.getWebappPath(projectOperations);
  OperationUtils.updateDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),fileManager,context,getClass());
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
  copyDirectoryContents(""String_Node_Str"",pathResolver.getIdentifier(webappPath,""String_Node_Str""),true);
}",0.9672424061941632
59407,"@Override public void updateWebXmlFile(){
  String webXmlPath=projectOperations.getPathResolver().getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"");
  Validate.isTrue(fileManager.exists(webXmlPath),""String_Node_Str"");
  MutableFile webXmlMutableFile=null;
  Document webXml;
  try {
    webXmlMutableFile=fileManager.updateFile(webXmlPath);
    webXml=XmlUtils.getDocumentBuilder().parse(webXmlMutableFile.getInputStream());
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  Element root=webXml.getDocumentElement();
  boolean modified=false;
  Element filter=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (filter == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  Element filterMapping=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (filterMapping == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  Element servlet=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (servlet == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  Element servletMapping=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (servletMapping == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  if (modified) {
    XmlUtils.writeXml(webXmlMutableFile.getOutputStream(),webXml);
  }
}","@Override public void updateWebXmlFile(){
  LogicalPath webappPath=WebProjectUtils.getWebappPath(projectOperations);
  String webXmlPath=projectOperations.getPathResolver().getIdentifier(webappPath,""String_Node_Str"");
  Validate.isTrue(fileManager.exists(webXmlPath),""String_Node_Str"");
  MutableFile webXmlMutableFile=null;
  Document webXml;
  try {
    webXmlMutableFile=fileManager.updateFile(webXmlPath);
    webXml=XmlUtils.getDocumentBuilder().parse(webXmlMutableFile.getInputStream());
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  Element root=webXml.getDocumentElement();
  boolean modified=false;
  Element filter=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (filter == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  Element filterMapping=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (filterMapping == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  Element servlet=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (servlet == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  Element servletMapping=XmlUtils.findFirstElement(""String_Node_Str"",root);
  if (servletMapping == null) {
    insertXmlElement(webXml,root,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    modified=true;
  }
  if (modified) {
    XmlUtils.writeXml(webXmlMutableFile.getOutputStream(),webXml);
  }
}",0.9590163934426228
59408,"/** 
 * Adds I18n properties to the specified message bundle file. The file is given by the language parameter. <p> Note that properties to add are taken from messages[_xx].properties files and added to messages[_xx].properties in the destination project. <p> <strong>This method doesn't check if messages[_xx].properties file exist in the add-on invoking it</strong>
 * @param language Language locale as string (en, es, ca, ...)
 * @param invokingClass Class of the Add-on invoking this method. It'sneeded in order to load local resources
 * @param propFileOperations
 * @param projectOperations
 * @param fileManager
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void addPropertiesToMessageBundle(String language,Class invokingClass,PropFileOperations propFileOperations,ProjectOperations projectOperations,FileManager fileManager){
  Properties properties=new Properties();
  String propertiesFolderPath=""String_Node_Str"".concat(invokingClass.getPackage().getName()).replace('.','/');
  String messageBundleRelativeFilePath=""String_Node_Str"";
  String messageBundle=projectOperations.getPathResolver().getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),messageBundleRelativeFilePath);
  try {
    if (language == ""String_Node_Str"") {
      propertiesFolderPath=propertiesFolderPath.concat(""String_Node_Str"");
      properties.load(invokingClass.getResourceAsStream(propertiesFolderPath));
    }
 else {
      messageBundleRelativeFilePath=""String_Node_Str"".concat(language).concat(""String_Node_Str"");
      messageBundle=projectOperations.getPathResolver().getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),messageBundleRelativeFilePath);
      propertiesFolderPath=propertiesFolderPath.concat(""String_Node_Str"" + language + ""String_Node_Str"");
      properties.load(invokingClass.getResourceAsStream(propertiesFolderPath));
    }
    if (fileManager.exists(messageBundle)) {
      propFileOperations.addProperties(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),messageBundleRelativeFilePath,new HashMap<String,String>((Map)properties),true,true);
    }
 else {
      logger.warning(messageBundle.concat(""String_Node_Str""));
    }
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"".concat(language).concat(""String_Node_Str""));
  }
}","/** 
 * Copy properties associated with the given class to the message bundle of given language. <p/> Note that properties to add are taken from messages[_xx].properties files and added to messages[_xx].properties in the destination project. <p/> <strong>This method doesn't check if messages[_xx].properties file exist in the add-on invoking it</strong>
 * @param language Language locale as string (en, es, ca, ...)
 * @param invokingClass Class of the Add-on invoking this method. It'sneeded in order to load local resources
 * @param propFileOperations
 * @param projectOperations
 * @param fileManager
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static void addPropertiesToMessageBundle(String language,Class invokingClass,PropFileOperations propFileOperations,ProjectOperations projectOperations,FileManager fileManager){
  Properties properties=new Properties();
  LogicalPath webappPath=WebProjectUtils.getWebappPath(projectOperations);
  String sourcePropertyFile=""String_Node_Str"".concat(invokingClass.getPackage().getName()).replace('.','/');
  String targetFilePath=""String_Node_Str"";
  String targetFile=projectOperations.getPathResolver().getIdentifier(webappPath,targetFilePath);
  try {
    if (language == ""String_Node_Str"") {
      sourcePropertyFile=sourcePropertyFile.concat(""String_Node_Str"");
      properties.load(invokingClass.getResourceAsStream(sourcePropertyFile));
    }
 else {
      targetFilePath=""String_Node_Str"".concat(language).concat(""String_Node_Str"");
      targetFile=projectOperations.getPathResolver().getIdentifier(webappPath,targetFilePath);
      sourcePropertyFile=sourcePropertyFile.concat(""String_Node_Str"".concat(language).concat(""String_Node_Str""));
      properties.load(invokingClass.getResourceAsStream(sourcePropertyFile));
    }
    if (fileManager.exists(targetFile)) {
      propFileOperations.addProperties(webappPath,targetFilePath,new HashMap<String,String>((Map)properties),true,true);
    }
 else {
      logger.warning(targetFile.concat(""String_Node_Str""));
    }
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"".concat(language).concat(""String_Node_Str""));
  }
}",0.5731277533039647
59409,"/** 
 * Creates if it doesn't exist the messages_xx.properties file for the given I18n locale. <p> Note that English locale is an especial case where the file is messages.properties
 * @param i18n
 */
public static void installI18nMessages(I18n i18n,ProjectOperations projectOperations,FileManager fileManager){
  Validate.notNull(i18n,""String_Node_Str"");
  if (i18n.getLocale() == null) {
    logger.warning(""String_Node_Str"");
    return;
  }
  String targetDirectory=projectOperations.getPathResolver().getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"");
  String messageBundle=targetDirectory + ""String_Node_Str"" + i18n.getLocale().getLanguage()+ ""String_Node_Str"";
  if (i18n.getLocale().equals(Locale.ENGLISH)) {
    messageBundle=targetDirectory + ""String_Node_Str"";
  }
  if (!fileManager.exists(messageBundle)) {
    OutputStream outputStream=null;
    try {
      outputStream=fileManager.createFile(messageBundle).getOutputStream();
      IOUtils.copy(i18n.getMessageBundle(),outputStream);
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
 finally {
      IOUtils.closeQuietly(outputStream);
    }
  }
  return;
}","/** 
 * Creates if it doesn't exist the messages_xx.properties file for the given I18n locale. <p> Note that English locale is an especial case where the file is messages.properties
 * @param i18n
 */
public static void installI18nMessages(I18n i18n,ProjectOperations projectOperations,FileManager fileManager){
  Validate.notNull(i18n,""String_Node_Str"");
  if (i18n.getLocale() == null) {
    logger.warning(""String_Node_Str"");
    return;
  }
  LogicalPath webappPath=WebProjectUtils.getWebappPath(projectOperations);
  String targetDirectory=projectOperations.getPathResolver().getIdentifier(webappPath,""String_Node_Str"");
  String messageBundle=targetDirectory.concat(""String_Node_Str"").concat(i18n.getLocale().getLanguage()).concat(""String_Node_Str"");
  if (i18n.getLocale().equals(Locale.ENGLISH)) {
    messageBundle=targetDirectory.concat(""String_Node_Str"");
  }
  if (!fileManager.exists(messageBundle)) {
    OutputStream outputStream=null;
    try {
      outputStream=fileManager.createFile(messageBundle).getOutputStream();
      IOUtils.copy(i18n.getMessageBundle(),outputStream);
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
 finally {
      IOUtils.closeQuietly(outputStream);
    }
  }
  return;
}",0.8800641797031689
59410,"/** 
 * Gets <code>populateDatatablesConfig</code> method <br> This method insert on Model all configuration properties which will need "".tagx"" to render final page. <br> This properties are: <ul> <li><em>datatablesHasBatchSupport</em> informs if there is batch entity operations support on controller (used for multy-row delete operation)</li> <li><em>datatablesUseAjax</em> informs datatbles data mode (<em>true</em> : AJAX <em>false</em> DOM)</li> <li><em>datatablesNotStandardMode</em> informs render mode (<em>true</em> : standar datatable view <em>false</em> single-item-page, one-cell-per-item, render-jspx datatable mode)</li> </ul>
 * @return
 */
private MethodMetadata getPopulateDatatablesConfig(){
  List<AnnotatedJavaType> parameterTypes=AnnotatedJavaType.convertFromJavaTypes(MODEL);
  final MethodMetadata method=methodExists(POPULATE_DATATABLES_CONFIG,parameterTypes);
  if (method != null) {
    return method;
  }
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>();
  AnnotationMetadataBuilder annotation=new AnnotationMetadataBuilder(MODEL_ATTRIBUTE);
  annotations.add(annotation);
  List<JavaType> throwsTypes=new ArrayList<JavaType>();
  List<JavaSymbolName> parameterNames=new ArrayList<JavaSymbolName>();
  parameterNames.add(UI_MODEL);
  InvocableMemberBodyBuilder bodyBuilder=new InvocableMemberBodyBuilder();
  bodyBuilder.appendFormalLine(String.format(""String_Node_Str"",hasJpaBatchSupport()));
  bodyBuilder.appendFormalLine(String.format(""String_Node_Str"",isAjax()));
  bodyBuilder.appendFormalLine(String.format(""String_Node_Str"",!isStantardMode()));
  MethodMetadataBuilder methodBuilder=new MethodMetadataBuilder(getId(),Modifier.PUBLIC,POPULATE_DATATABLES_CONFIG,JavaType.VOID_PRIMITIVE,parameterTypes,parameterNames,bodyBuilder);
  methodBuilder.setAnnotations(annotations);
  methodBuilder.setThrowsTypes(throwsTypes);
  return methodBuilder.build();
}","/** 
 * Gets <code>populateDatatablesConfig</code> method <br> This method insert on Model all configuration properties which will need "".tagx"" to render final page. <br> This properties are: <ul> <li><em>datatablesHasBatchSupport</em> informs if there is batch entity operations support on controller (used for multi-row delete operation)</li> <li><em>datatablesUseAjax</em> informs datatables data mode ( <em>true</em> : AJAX <em>false</em> DOM)</li> <li><em>finderNameParam</em> sets the name of parameter that will contain the   {@code finderName} (only for AJAX mode)</li><li><em>datatablesNotStandardMode</em> informs render mode (<em>true</em> : standar datatable view <em>false</em> single-item-page, one-cell-per-item, render-jspx datatable mode)</li> </ul>
 * @return
 */
private MethodMetadata getPopulateDatatablesConfig(){
  List<AnnotatedJavaType> parameterTypes=AnnotatedJavaType.convertFromJavaTypes(MODEL);
  final MethodMetadata method=methodExists(POPULATE_DATATABLES_CONFIG,parameterTypes);
  if (method != null) {
    return method;
  }
  List<AnnotationMetadataBuilder> annotations=new ArrayList<AnnotationMetadataBuilder>();
  AnnotationMetadataBuilder annotation=new AnnotationMetadataBuilder(MODEL_ATTRIBUTE);
  annotations.add(annotation);
  List<JavaType> throwsTypes=new ArrayList<JavaType>();
  List<JavaSymbolName> parameterNames=new ArrayList<JavaSymbolName>();
  parameterNames.add(UI_MODEL);
  InvocableMemberBodyBuilder bodyBuilder=new InvocableMemberBodyBuilder();
  bodyBuilder.appendFormalLine(String.format(""String_Node_Str"",hasJpaBatchSupport()));
  bodyBuilder.appendFormalLine(String.format(""String_Node_Str"",isAjax()));
  bodyBuilder.appendFormalLine(String.format(""String_Node_Str"",!isStantardMode()));
  if (isAjax()) {
    bodyBuilder.appendFormalLine(""String_Node_Str"");
  }
  MethodMetadataBuilder methodBuilder=new MethodMetadataBuilder(getId(),Modifier.PUBLIC,POPULATE_DATATABLES_CONFIG,JavaType.VOID_PRIMITIVE,parameterTypes,parameterNames,bodyBuilder);
  methodBuilder.setAnnotations(annotations);
  methodBuilder.setThrowsTypes(throwsTypes);
  return methodBuilder.build();
}",0.9420182580804344
59411,"/** 
 * Updates de list.jspx page of target controller to use datatables component.
 */
public void updateControllerJspPages(JavaType controller,DatatablesMetadata datatablesMetadata){
  Validate.notNull(datatablesMetadata,""String_Node_Str"");
  String controllerPath=datatablesMetadata.getWebScaffoldAnnotationValues().getPath();
  updateListJspx(controller,controllerPath);
  Map<FinderMetadataDetails,QueryHolderTokens> finders=datatablesMetadata.getFindersRegistered();
  if (finders != null && !finders.isEmpty()) {
    updateFindersJspx(controller,controllerPath,finders);
  }
}","/** 
 * Updates de list.jspx page of target controller to use datatables component.
 */
public void updateControllerJspPages(JavaType controller,DatatablesMetadata datatablesMetadata){
  Validate.notNull(datatablesMetadata,""String_Node_Str"");
  String controllerPath=datatablesMetadata.getWebScaffoldAnnotationValues().getPath();
  updateListJspx(controller,controllerPath);
}",0.7841501564129302
59412,"/** 
 * Execute a select query on entityClass using <a href=""http://www.querydsl.com/"">Querydsl</a> which enables the construction of type-safe SQL-like queries.
 * @param entityClass entity to use in search
 * @param filterByAssociations (optional) for each related entity to joincontain as key the name of the association and as value the List of related entity fields to filter by
 * @param orderByAssociations (optional) for each related entity to ordercontain as key the name of the association and as value the List of related entity fields to order by
 * @param entityManager {@code entityClass} {@link EntityManager}
 * @param datatablesCriterias datatables parameters for query
 * @param baseSearchValuesMap (optional) base filter values
 * @param distinct use distinct query
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static <T,E extends Comparable<?>>SearchResults<T> findByCriteria(Class<T> entityClass,Map<String,List<String>> filterByAssociations,Map<String,List<String>> orderByAssociations,EntityManager entityManager,DatatablesCriterias datatablesCriterias,Map<String,Object> baseSearchValuesMap,boolean distinct) throws IllegalArgumentException {
  Assert.notNull(entityClass);
  Assert.notNull(entityManager);
  Assert.notNull(datatablesCriterias);
  if (CollectionUtils.isEmpty(filterByAssociations)) {
    filterByAssociations=new HashMap<String,List<String>>();
  }
  if (CollectionUtils.isEmpty(orderByAssociations)) {
    orderByAssociations=new HashMap<String,List<String>>();
  }
  boolean isPaged=datatablesCriterias.getDisplaySize() != null && datatablesCriterias.getDisplaySize() > 0;
  boolean findInAllColumns=StringUtils.isNotEmpty(datatablesCriterias.getSearch()) && datatablesCriterias.hasOneFilterableColumn();
  PathBuilder<T> entity=new PathBuilder<T>(entityClass,""String_Node_Str"");
  JPAQuery query=new JPAQuery(entityManager);
  query=query.from(entity);
  JPAQuery baseQuery=new JPAQuery(entityManager);
  baseQuery=baseQuery.from(entity);
  Map<String,PathBuilder<?>> associationMap=new HashMap<String,PathBuilder<?>>();
  for (  ColumnDef column : datatablesCriterias.getColumnDefs()) {
    boolean findInColumn=StringUtils.isNotEmpty(column.getSearch());
    String associationName=column.getName();
    if (!filterByAssociations.containsKey(associationName)) {
      continue;
    }
    if (!column.isSortable() && !column.isFilterable()) {
      continue;
    }
    if (!column.isSortable() && !findInColumn && !findInAllColumns) {
      continue;
    }
    PathBuilder<?> associationPath=entity.get(associationName);
    query=query.join(associationPath);
    associationMap.put(associationName,associationPath);
  }
  BooleanBuilder filtersByColumnPredicate=new BooleanBuilder();
  BooleanBuilder filtersByTablePredicate=new BooleanBuilder();
  try {
    if (datatablesCriterias.hasOneFilteredColumn()) {
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        String searchStr=column.getSearch();
        boolean findInColumn=column.isFilterable() && StringUtils.isNotEmpty(searchStr);
        if (findInColumn) {
          String fieldName=column.getName();
          Class<?> fieldType=BeanUtils.findPropertyType(fieldName,ArrayUtils.<Class<?>>toArray(entityClass));
          filtersByColumnPredicate=filtersByColumnPredicate.and(QuerydslUtils.createExpression(entity,fieldName,fieldType,searchStr));
          List<String> attributes=filterByAssociations.get(fieldName);
          if (attributes != null && attributes.size() > 0) {
            BooleanBuilder filtersByAssociationPredicate=new BooleanBuilder();
            PathBuilder<?> associationPath=associationMap.get(fieldName);
            List<String> associationFields=filterByAssociations.get(fieldName);
            for (            String associationFieldName : associationFields) {
              Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
              filtersByAssociationPredicate=filtersByAssociationPredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
            }
            filtersByColumnPredicate=filtersByColumnPredicate.and(filtersByAssociationPredicate.getValue());
          }
        }
      }
    }
    String searchStr=datatablesCriterias.getSearch();
    if (findInAllColumns) {
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        if (column.isFilterable()) {
          String fieldName=column.getName();
          Class<?> fieldType=BeanUtils.findPropertyType(fieldName,ArrayUtils.<Class<?>>toArray(entityClass));
          filtersByTablePredicate=filtersByTablePredicate.or(QuerydslUtils.createExpression(entity,fieldName,fieldType,searchStr));
          List<String> attributes=filterByAssociations.get(fieldName);
          if (attributes != null && attributes.size() > 0) {
            PathBuilder<?> associationPath=associationMap.get(fieldName);
            List<String> associationFields=filterByAssociations.get(fieldName);
            for (            String associationFieldName : associationFields) {
              Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
              filtersByTablePredicate=filtersByTablePredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    SearchResults<T> searchResults=new SearchResults<T>(new ArrayList<T>(0),0,isPaged,new Long(datatablesCriterias.getDisplayStart()),new Long(datatablesCriterias.getDisplaySize()),0);
    return searchResults;
  }
  List<OrderSpecifier<?>> orderSpecifiersList=new ArrayList<OrderSpecifier<?>>();
  if (datatablesCriterias.hasOneSortedColumn()) {
    for (    ColumnDef column : datatablesCriterias.getSortingColumnDefs()) {
      if (!column.isSortable()) {
        continue;
      }
      if (column.getSortDirection() == null) {
        continue;
      }
      Order order=Order.DESC;
      if (column.getSortDirection() == SortDirection.ASC) {
        order=Order.ASC;
      }
      String fieldName=column.getName();
      Class<E> fieldType=(Class<E>)BeanUtils.findPropertyType(fieldName,ArrayUtils.<Class<?>>toArray(entityClass));
      List<String> attributes=orderByAssociations.get(fieldName);
      try {
        if (attributes != null && attributes.size() > 0) {
          PathBuilder<?> associationPath=associationMap.get(fieldName);
          List<String> associationFields=orderByAssociations.get(fieldName);
          for (          String associationFieldName : associationFields) {
            Class<E> associationFieldType=(Class<E>)BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
            orderSpecifiersList.add(QuerydslUtils.createOrderSpecifier(associationPath,associationFieldName,associationFieldType,order));
          }
        }
 else {
          orderSpecifiersList.add(QuerydslUtils.createOrderSpecifier(entity,fieldName,fieldType,order));
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  Long offset=null;
  Long limit=null;
  if (isPaged) {
    limit=new Long(datatablesCriterias.getDisplaySize());
  }
  if (datatablesCriterias.getDisplayStart() >= 0) {
    offset=new Long(datatablesCriterias.getDisplayStart());
  }
  QueryModifiers queryModifiers=new QueryModifiers(limit,offset);
  List<T> elements=null;
  if (distinct) {
    query=query.distinct();
  }
  BooleanBuilder basePredicate=QuerydslUtils.createPredicateByAnd(entityClass,baseSearchValuesMap);
  baseQuery.where(basePredicate);
  query=query.where(basePredicate.and(filtersByColumnPredicate.getValue()).and(filtersByTablePredicate.getValue()));
  elements=query.orderBy(orderSpecifiersList.toArray(new OrderSpecifier[orderSpecifiersList.size()])).restrict(queryModifiers).list(entity);
  long totalResultCount;
  if (isPaged) {
    totalResultCount=query.count();
  }
 else {
    totalResultCount=elements.size();
  }
  long totalBaseCount=baseQuery.count();
  SearchResults<T> searchResults=new SearchResults<T>(elements,totalResultCount,isPaged,offset,limit,totalBaseCount);
  return searchResults;
}","/** 
 * Execute a select query on entityClass using <a href=""http://www.querydsl.com/"">Querydsl</a> which enables the construction of type-safe SQL-like queries.
 * @param entityClass entity to use in search
 * @param filterByAssociations (optional) for each related entity to joincontain as key the name of the association and as value the List of related entity fields to filter by
 * @param orderByAssociations (optional) for each related entity to ordercontain as key the name of the association and as value the List of related entity fields to order by
 * @param entityManager {@code entityClass} {@link EntityManager}
 * @param datatablesCriterias datatables parameters for query
 * @param baseSearchValuesMap (optional) base filter values
 * @param distinct use distinct query
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static <T,E extends Comparable<?>>SearchResults<T> findByCriteria(Class<T> entityClass,Map<String,List<String>> filterByAssociations,Map<String,List<String>> orderByAssociations,EntityManager entityManager,DatatablesCriterias datatablesCriterias,Map<String,Object> baseSearchValuesMap,boolean distinct) throws IllegalArgumentException {
  Assert.notNull(entityClass);
  Assert.notNull(entityManager);
  Assert.notNull(datatablesCriterias);
  if (CollectionUtils.isEmpty(filterByAssociations)) {
    filterByAssociations=new HashMap<String,List<String>>();
  }
  if (CollectionUtils.isEmpty(orderByAssociations)) {
    orderByAssociations=new HashMap<String,List<String>>();
  }
  boolean isPaged=datatablesCriterias.getDisplaySize() != null && datatablesCriterias.getDisplaySize() > 0;
  boolean findInAllColumns=StringUtils.isNotEmpty(datatablesCriterias.getSearch()) && datatablesCriterias.hasOneFilterableColumn();
  PathBuilder<T> entity=new PathBuilder<T>(entityClass,""String_Node_Str"");
  JPAQuery query=new JPAQuery(entityManager);
  query=query.from(entity);
  JPAQuery baseQuery=new JPAQuery(entityManager);
  baseQuery=baseQuery.from(entity);
  Map<String,PathBuilder<?>> associationMap=new HashMap<String,PathBuilder<?>>();
  for (  ColumnDef column : datatablesCriterias.getColumnDefs()) {
    boolean findInColumn=StringUtils.isNotEmpty(column.getSearch());
    String associationName=column.getName();
    if (!filterByAssociations.containsKey(associationName)) {
      continue;
    }
    if (!column.isSortable() && !column.isFilterable()) {
      continue;
    }
    if (!column.isSortable() && !findInColumn && !findInAllColumns) {
      continue;
    }
    PathBuilder<?> associationPath=entity.get(associationName);
    query=query.join(associationPath);
    associationMap.put(associationName,associationPath);
  }
  BooleanBuilder filtersByColumnPredicate=new BooleanBuilder();
  BooleanBuilder filtersByTablePredicate=new BooleanBuilder();
  try {
    if (datatablesCriterias.hasOneFilteredColumn()) {
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        String searchStr=column.getSearch();
        boolean findInColumn=column.isFilterable() && StringUtils.isNotEmpty(searchStr);
        if (findInColumn) {
          String fieldName=column.getName();
          Class<?> fieldType=BeanUtils.findPropertyType(fieldName,ArrayUtils.<Class<?>>toArray(entityClass));
          filtersByColumnPredicate=filtersByColumnPredicate.and(QuerydslUtils.createExpression(entity,fieldName,fieldType,searchStr));
          List<String> attributes=filterByAssociations.get(fieldName);
          if (attributes != null && attributes.size() > 0) {
            BooleanBuilder filtersByAssociationPredicate=new BooleanBuilder();
            PathBuilder<?> associationPath=associationMap.get(fieldName);
            List<String> associationFields=filterByAssociations.get(fieldName);
            for (            String associationFieldName : associationFields) {
              Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
              filtersByAssociationPredicate=filtersByAssociationPredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
            }
            filtersByColumnPredicate=filtersByColumnPredicate.and(filtersByAssociationPredicate.getValue());
          }
        }
      }
    }
    String searchStr=datatablesCriterias.getSearch();
    if (findInAllColumns) {
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        if (column.isFilterable()) {
          String fieldName=column.getName();
          Class<?> fieldType=BeanUtils.findPropertyType(fieldName,ArrayUtils.<Class<?>>toArray(entityClass));
          filtersByTablePredicate=filtersByTablePredicate.or(QuerydslUtils.createExpression(entity,fieldName,fieldType,searchStr));
          List<String> attributes=filterByAssociations.get(fieldName);
          if (attributes != null && attributes.size() > 0) {
            PathBuilder<?> associationPath=associationMap.get(fieldName);
            List<String> associationFields=filterByAssociations.get(fieldName);
            for (            String associationFieldName : associationFields) {
              Class<?> associationFieldType=BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
              filtersByTablePredicate=filtersByTablePredicate.or(QuerydslUtils.createExpression(associationPath,associationFieldName,associationFieldType,searchStr));
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    SearchResults<T> searchResults=new SearchResults<T>(new ArrayList<T>(0),0,isPaged,new Long(datatablesCriterias.getDisplayStart()),new Long(datatablesCriterias.getDisplaySize()),0);
    return searchResults;
  }
  List<OrderSpecifier<?>> orderSpecifiersList=new ArrayList<OrderSpecifier<?>>();
  if (datatablesCriterias.hasOneSortedColumn()) {
    for (    ColumnDef column : datatablesCriterias.getSortingColumnDefs()) {
      if (!column.isSortable()) {
        continue;
      }
      if (column.getSortDirection() == null) {
        continue;
      }
      Order order=Order.DESC;
      if (column.getSortDirection() == SortDirection.ASC) {
        order=Order.ASC;
      }
      String fieldName=column.getName();
      Class<E> fieldType=(Class<E>)BeanUtils.findPropertyType(fieldName,ArrayUtils.<Class<?>>toArray(entityClass));
      List<String> attributes=orderByAssociations.get(fieldName);
      try {
        if (attributes != null && attributes.size() > 0) {
          PathBuilder<?> associationPath=associationMap.get(fieldName);
          List<String> associationFields=orderByAssociations.get(fieldName);
          for (          String associationFieldName : associationFields) {
            Class<E> associationFieldType=(Class<E>)BeanUtils.findPropertyType(associationFieldName,ArrayUtils.<Class<?>>toArray(fieldType));
            orderSpecifiersList.add(QuerydslUtils.createOrderSpecifier(associationPath,associationFieldName,associationFieldType,order));
          }
        }
 else {
          orderSpecifiersList.add(QuerydslUtils.createOrderSpecifier(entity,fieldName,fieldType,order));
        }
      }
 catch (      Exception ex) {
      }
    }
  }
  Long offset=null;
  Long limit=null;
  if (isPaged) {
    limit=new Long(datatablesCriterias.getDisplaySize());
  }
  if (datatablesCriterias.getDisplayStart() >= 0) {
    offset=new Long(datatablesCriterias.getDisplayStart());
  }
  QueryModifiers queryModifiers=new QueryModifiers(limit,offset);
  List<T> elements=null;
  if (distinct) {
    query=query.distinct();
  }
  BooleanBuilder basePredicate=QuerydslUtils.createPredicateByAnd(entity,baseSearchValuesMap);
  baseQuery.where(basePredicate);
  query=query.where(basePredicate.and(filtersByColumnPredicate.getValue()).and(filtersByTablePredicate.getValue()));
  elements=query.orderBy(orderSpecifiersList.toArray(new OrderSpecifier[orderSpecifiersList.size()])).restrict(queryModifiers).list(entity);
  long totalResultCount;
  if (isPaged) {
    totalResultCount=query.count();
  }
 else {
    totalResultCount=elements.size();
  }
  long totalBaseCount=baseQuery.count();
  SearchResults<T> searchResults=new SearchResults<T>(elements,totalResultCount,isPaged,offset,limit,totalBaseCount);
  return searchResults;
}",0.9996988496054928
59413,"/** 
 * Creates a WHERE clause by the intersection of the given search-arguments
 * @param entityClass Entity
 * @param searchArgs Search arguments to be used to create the WHERE clause.It can contain  {@code _operator_} entries for each field that wantto use its own operator. By default  {@code EQUALS} operator isused. <p/> Operator entry example:  {@code _operator_weight = LT} theexpression for  {@code weight} field will do a less-than valuecomparison
 * @return the WHERE clause
 */
public static <T>BooleanBuilder createPredicateByAnd(Class<T> entityClass,Map<String,Object> searchArgs){
  BooleanBuilder predicate=new BooleanBuilder();
  if (searchArgs.isEmpty()) {
    return predicate;
  }
  PathBuilder<T> entityPath=new PathBuilder<T>(entityClass,""String_Node_Str"");
  if (searchArgs != null && !searchArgs.isEmpty()) {
    for (    Entry<String,Object> entry : searchArgs.entrySet()) {
      predicate.and(createObjectExpression(entityPath,entry.getKey(),entry.getValue()));
    }
  }
  return predicate;
}","/** 
 * Creates a WHERE clause by the intersection of the given search-arguments
 * @param entity Entity {@link PathBuilder}. It represents the entity for class generation and alias-usage for path generation. <p/> Example: To retrieve a   {@code Customer} with the first name 'Bob'entity must be a  {@link PathBuilder} created for {@code Customer}class and searchArgs must contain the entry  {@code 'firstName':'Bob'}
 * @param searchArgs Search arguments to be used to create the WHERE clause.It can contain  {@code _operator_} entries for each field that wantto use its own operator. By default  {@code EQUALS} operator isused. <p/> Operator entry example:  {@code _operator_weight = LT} theexpression for  {@code weight} field will do a less-than valuecomparison
 * @return the WHERE clause
 */
public static <T>BooleanBuilder createPredicateByAnd(PathBuilder<T> entity,Map<String,Object> searchArgs){
  BooleanBuilder predicate=new BooleanBuilder();
  if (searchArgs.isEmpty()) {
    return predicate;
  }
  if (searchArgs != null && !searchArgs.isEmpty()) {
    for (    Entry<String,Object> entry : searchArgs.entrySet()) {
      predicate.and(createObjectExpression(entity,entry.getKey(),entry.getValue()));
    }
  }
  return predicate;
}",0.8084730803177406
59414,"/** 
 * Execute a select query on entityClass using   {@code DatatablesCriterias}information for filter, sort and paginate result.
 * @param entityClass entity to use in search
 * @param entityManager {@code entityClass} {@link EntityManager}
 * @param datatablesCriterias datatables parameters for query
 * @param distinct use distinct query
 * @return
 */
public static <T>FindResult<T> findByCriteria(Class<T> entityClass,EntityManager entityManager,DatatablesCriterias datatablesCriterias,boolean distinct){
  CriteriaBuilder builder=entityManager.getCriteriaBuilder();
  CriteriaQuery<T> query=builder.createQuery(entityClass);
  CriteriaQuery<Long> countQuery=builder.createQuery(Long.class);
  EntityType<T> entity=entityManager.getMetamodel().entity(entityClass);
  boolean isPaged=datatablesCriterias.getDisplaySize() != null && datatablesCriterias.getDisplaySize() > 0;
  Root<T> from=query.from(entityClass);
  Predicate filterCondition=null;
  Predicate searchCondition=null;
  try {
    if (datatablesCriterias.hasOneFilteredColumn()) {
      List<Predicate> condition=new ArrayList<Predicate>();
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        if (column.isFilterable() && StringUtils.isNotBlank(column.getSearch())) {
          Predicate fieldlike=getFindCondition(entity,from,column.getName(),column.getSearch(),builder,true);
          if (fieldlike != null) {
            condition.add(fieldlike);
          }
        }
      }
      if (!condition.isEmpty()) {
        filterCondition=builder.and(condition.toArray(new Predicate[]{}));
      }
    }
    String toSearch=datatablesCriterias.getSearch();
    if (StringUtils.isNotBlank(toSearch) && datatablesCriterias.hasOneFilterableColumn()) {
      List<Predicate> condition=new ArrayList<Predicate>();
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        if (column.isFilterable()) {
          Predicate fieldlike=getFindCondition(entity,from,column.getName(),toSearch,builder,false);
          if (fieldlike != null) {
            condition.add(fieldlike);
          }
        }
      }
      if (!condition.isEmpty()) {
        searchCondition=builder.or(condition.toArray(new Predicate[]{}));
      }
    }
  }
 catch (  EmptyResultException e) {
    return new FindResult<T>(new ArrayList<T>(0),0,isPaged,(long)datatablesCriterias.getDisplayStart(),datatablesCriterias.getDisplaySize());
  }
  if (filterCondition != null && searchCondition != null) {
    query.where(builder.and(filterCondition,searchCondition));
    countQuery.where(builder.and(filterCondition,searchCondition));
  }
 else   if (filterCondition != null) {
    query.where(filterCondition);
    countQuery.where(filterCondition);
  }
 else   if (searchCondition != null) {
    query.where(searchCondition);
    countQuery.where(searchCondition);
  }
  if (datatablesCriterias.hasOneSortedColumn()) {
    List<Order> orderList=new ArrayList<Order>();
    for (    ColumnDef column : datatablesCriterias.getSortingColumnDefs()) {
      if (column.getSortDirection() == null) {
        continue;
      }
 else       if (column.getSortDirection() == SortDirection.ASC) {
        orderList.add(builder.asc(from.get(column.getName())));
      }
 else {
        orderList.add(builder.desc(from.get(column.getName())));
      }
    }
    if (!orderList.isEmpty()) {
      query.orderBy(orderList);
    }
  }
  CriteriaQuery<T> select=query.select(from);
  CriteriaQuery<Long> count=null;
  if (distinct) {
    count=countQuery.select(builder.countDistinct(countQuery.from(entityClass)));
  }
 else {
    count=countQuery.select(builder.count(countQuery.from(entityClass)));
  }
  select.distinct(distinct);
  TypedQuery<T> typedQuery=entityManager.createQuery(select);
  long startItem=0;
  int pageSize=0;
  if (isPaged) {
    pageSize=datatablesCriterias.getDisplaySize();
    typedQuery.setMaxResults(pageSize);
  }
  if (datatablesCriterias.getDisplayStart() >= 0) {
    startItem=datatablesCriterias.getDisplayStart();
    typedQuery.setFirstResult((int)startItem);
  }
  List<T> elements=typedQuery.getResultList();
  long totalResultCount=elements.size();
  if (isPaged) {
    totalResultCount=entityManager.createQuery(count).getSingleResult();
  }
  return new FindResult<T>(elements,totalResultCount,isPaged,startItem,pageSize);
}","/** 
 * Execute a select query on entityClass using   {@code DatatablesCriterias}information for filter, sort and paginate result.
 * @param entityClass entity to use in search
 * @param entityManager {@code entityClass} {@link EntityManager}
 * @param datatablesCriterias datatables parameters for query
 * @param distinct use distinct query
 * @return
 */
public static <T>FindResult<T> findByCriteria(Class<T> entityClass,EntityManager entityManager,DatatablesCriterias datatablesCriterias,boolean distinct){
  CriteriaBuilder builder=entityManager.getCriteriaBuilder();
  CriteriaQuery<T> query=builder.createQuery(entityClass);
  CriteriaQuery<Long> countQuery=builder.createQuery(Long.class);
  EntityType<T> entity=entityManager.getMetamodel().entity(entityClass);
  boolean isPaged=datatablesCriterias.getDisplaySize() != null && datatablesCriterias.getDisplaySize() > 0;
  Root<T> from=query.from(entityClass);
  Predicate filterCondition=null;
  Predicate searchCondition=null;
  try {
    if (datatablesCriterias.hasOneFilteredColumn()) {
      List<Predicate> condition=new ArrayList<Predicate>();
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        if (column.isFilterable() && StringUtils.isNotBlank(column.getSearch())) {
          Predicate fieldlike=getFindCondition(entity,from,column.getName(),column.getSearch(),builder,true);
          if (fieldlike != null) {
            condition.add(fieldlike);
          }
        }
      }
      if (!condition.isEmpty()) {
        filterCondition=builder.and(condition.toArray(new Predicate[]{}));
      }
    }
    String toSearch=datatablesCriterias.getSearch();
    if (StringUtils.isNotBlank(toSearch) && datatablesCriterias.hasOneFilterableColumn()) {
      List<Predicate> condition=new ArrayList<Predicate>();
      for (      ColumnDef column : datatablesCriterias.getColumnDefs()) {
        if (column.isFilterable()) {
          Predicate fieldlike=getFindCondition(entity,from,column.getName(),toSearch,builder,false);
          if (fieldlike != null) {
            condition.add(fieldlike);
          }
        }
      }
      if (!condition.isEmpty()) {
        searchCondition=builder.or(condition.toArray(new Predicate[]{}));
      }
    }
  }
 catch (  EmptyResultException e) {
    return new FindResult<T>(new ArrayList<T>(0),0,isPaged,(long)datatablesCriterias.getDisplayStart(),datatablesCriterias.getDisplaySize());
  }
  if (filterCondition != null && searchCondition != null) {
    query.where(builder.and(filterCondition,searchCondition));
    countQuery.where(builder.and(filterCondition,searchCondition));
  }
 else   if (filterCondition != null) {
    query.where(filterCondition);
    countQuery.where(filterCondition);
  }
 else   if (searchCondition != null) {
    query.where(searchCondition);
    countQuery.where(searchCondition);
  }
  if (datatablesCriterias.hasOneSortedColumn()) {
    List<Order> orderList=new ArrayList<Order>();
    for (    ColumnDef column : datatablesCriterias.getSortingColumnDefs()) {
      if (column.getSortDirection() == null) {
        continue;
      }
      Path<Object> col;
      try {
        col=from.get(column.getName());
      }
 catch (      Exception e) {
        col=null;
      }
      if (col == null) {
        LOOGER.finer(""String_Node_Str"".concat(column.getName()).concat(""String_Node_Str""));
        continue;
      }
      if (column.getSortDirection() == SortDirection.ASC) {
        orderList.add(builder.asc(col));
      }
 else {
        orderList.add(builder.desc(col));
      }
    }
    if (!orderList.isEmpty()) {
      query.orderBy(orderList);
    }
  }
  CriteriaQuery<T> select=query.select(from);
  CriteriaQuery<Long> count=null;
  if (distinct) {
    count=countQuery.select(builder.countDistinct(countQuery.from(entityClass)));
  }
 else {
    count=countQuery.select(builder.count(countQuery.from(entityClass)));
  }
  select.distinct(distinct);
  TypedQuery<T> typedQuery=entityManager.createQuery(select);
  long startItem=0;
  int pageSize=0;
  if (isPaged) {
    pageSize=datatablesCriterias.getDisplaySize();
    typedQuery.setMaxResults(pageSize);
  }
  if (datatablesCriterias.getDisplayStart() >= 0) {
    startItem=datatablesCriterias.getDisplayStart();
    typedQuery.setFirstResult((int)startItem);
  }
  List<T> elements=typedQuery.getResultList();
  long totalResultCount=elements.size();
  if (isPaged) {
    totalResultCount=entityManager.createQuery(count).getSingleResult();
  }
  return new FindResult<T>(elements,totalResultCount,isPaged,startItem,pageSize);
}",0.9535562037244784
59415,"/** 
 * Return find condition for   {@code entity.fieldName} base on{@code stringExpression} expression
 * @param entity
 * @param from
 * @param fieldName
 * @param stringExpression
 * @param builder
 * @param force require an expression (if not applicable return a{@code false} expression
 * @return condition or null if (field not found || field type not supported|| stringExpression not applicable)
 * @throws EmptyResultException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>Predicate getFindCondition(EntityType<T> entity,Root<T> from,String fieldName,String stringExpression,CriteriaBuilder builder,boolean force) throws EmptyResultException {
  Attribute<? super T,?> field=null;
  try {
    field=entity.getAttribute(fieldName);
  }
 catch (  IllegalArgumentException e) {
    return null;
  }
  if (field == null) {
    return null;
  }
  Class<?> type=field.getJavaType();
  if (String.class == type) {
    return getStringFindCondition(from,stringExpression,builder,field);
  }
 else   if (Boolean.class == type || boolean.class == type) {
    return getBooleanFindCondition(from,stringExpression,builder,field,force);
  }
 else   if (Number.class.isAssignableFrom(type) || NUMBER_PRIMITIVES.contains(type)) {
    if (NumberUtils.isNumber(stringExpression)) {
      return getTextSearchFindCondition(from,stringExpression,builder,field,false);
    }
 else {
      if (force) {
        throw new EmptyResultException();
      }
      return null;
    }
  }
 else   if (Date.class.isAssignableFrom(type) || Calendar.class.isAssignableFrom(type)) {
    return getTextSearchFindCondition(from,stringExpression,builder,field,true);
  }
 else   if (type.isEnum()) {
    return getEnumFindCondition(from,stringExpression,builder,field,(Class<? extends Enum>)type,force);
  }
  return null;
}","/** 
 * Return find condition for   {@code entity.fieldName} base on{@code stringExpression} expression
 * @param entity
 * @param from
 * @param fieldName
 * @param stringExpression
 * @param builder
 * @param force require an expression (if not applicable return a{@code false} expression
 * @return condition or null if (field not found || field type not supported|| stringExpression not applicable)
 * @throws EmptyResultException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>Predicate getFindCondition(EntityType<T> entity,Root<T> from,String fieldName,String stringExpression,CriteriaBuilder builder,boolean force) throws EmptyResultException {
  Attribute<? super T,?> field=null;
  try {
    field=entity.getAttribute(fieldName);
  }
 catch (  IllegalArgumentException e) {
    LOOGER.finer(""String_Node_Str"".concat(fieldName).concat(""String_Node_Str""));
    return null;
  }
  if (field == null) {
    return null;
  }
  Class<?> type=field.getJavaType();
  if (String.class == type) {
    return getStringFindCondition(from,stringExpression,builder,field);
  }
 else   if (Boolean.class == type || boolean.class == type) {
    return getBooleanFindCondition(from,stringExpression,builder,field,force);
  }
 else   if (Number.class.isAssignableFrom(type) || NUMBER_PRIMITIVES.contains(type)) {
    if (NumberUtils.isNumber(stringExpression)) {
      return getTextSearchFindCondition(from,stringExpression,builder,field,false);
    }
 else {
      if (force) {
        throw new EmptyResultException();
      }
      return null;
    }
  }
 else   if (Date.class.isAssignableFrom(type) || Calendar.class.isAssignableFrom(type)) {
    return getTextSearchFindCondition(from,stringExpression,builder,field,true);
  }
 else   if (type.isEnum()) {
    return getEnumFindCondition(from,stringExpression,builder,field,(Class<? extends Enum>)type,force);
  }
  return null;
}",0.9783364535972184
59416,"private void excludeFieldsInToStringAnnotation(final String fieldName){
  final AnnotationMetadata toStringAnnotation=governorTypeDetails.getAnnotation(ROO_TO_STRING);
  if (toStringAnnotation == null) {
    return;
  }
  final List<AnnotationAttributeValue<?>> attributes=new ArrayList<AnnotationAttributeValue<?>>();
  final List<StringAttributeValue> ignoreFields=new ArrayList<StringAttributeValue>();
  boolean alreadyAdded=false;
  final AnnotationAttributeValue<?> value=toStringAnnotation.getAttribute(new JavaSymbolName(""String_Node_Str""));
  if (value == null) {
    return;
  }
  final String errMsg=""String_Node_Str"";
  Validate.isInstanceOf(ArrayAttributeValue.class,value,errMsg);
  final ArrayAttributeValue<?> arrayVal=(ArrayAttributeValue<?>)value;
  for (  final Object obj : arrayVal.getValue()) {
    Validate.isInstanceOf(StringAttributeValue.class,obj,errMsg);
    final StringAttributeValue sv=(StringAttributeValue)obj;
    if (sv.getValue().equals(fieldName)) {
      alreadyAdded=true;
    }
    ignoreFields.add(sv);
  }
  if (!alreadyAdded) {
    ignoreFields.add(new StringAttributeValue(new JavaSymbolName(""String_Node_Str""),fieldName));
  }
  attributes.add(new ArrayAttributeValue<StringAttributeValue>(new JavaSymbolName(""String_Node_Str""),ignoreFields));
  final AnnotationMetadataBuilder toStringAnnotationBuilder=new AnnotationMetadataBuilder(ROO_TO_STRING,attributes);
  updatedGovernorBuilder=new ClassOrInterfaceTypeDetailsBuilder(governorTypeDetails);
  updatedGovernorBuilder.updateTypeAnnotation(toStringAnnotationBuilder.build(),new HashSet<JavaSymbolName>());
}","private void excludeFieldsInToStringAnnotation(final String fieldName){
  final AnnotationMetadata toStringAnnotation=governorTypeDetails.getAnnotation(ROO_TO_STRING);
  if (toStringAnnotation == null) {
    return;
  }
  final List<AnnotationAttributeValue<?>> attributes=new ArrayList<AnnotationAttributeValue<?>>();
  final List<StringAttributeValue> ignoreFields=new ArrayList<StringAttributeValue>();
  boolean alreadyAdded=false;
  AnnotationAttributeValue<?> value=toStringAnnotation.getAttribute(new JavaSymbolName(""String_Node_Str""));
  if (value == null) {
    value=new ArrayAttributeValue<StringAttributeValue>(new JavaSymbolName(""String_Node_Str""),new ArrayList<StringAttributeValue>());
  }
  final String errMsg=""String_Node_Str"";
  Validate.isInstanceOf(ArrayAttributeValue.class,value,errMsg);
  final ArrayAttributeValue<?> arrayVal=(ArrayAttributeValue<?>)value;
  for (  final Object obj : arrayVal.getValue()) {
    Validate.isInstanceOf(StringAttributeValue.class,obj,errMsg);
    final StringAttributeValue sv=(StringAttributeValue)obj;
    if (sv.getValue().equals(fieldName)) {
      alreadyAdded=true;
    }
    ignoreFields.add(sv);
  }
  if (!alreadyAdded) {
    ignoreFields.add(new StringAttributeValue(new JavaSymbolName(""String_Node_Str""),fieldName));
  }
  attributes.add(new ArrayAttributeValue<StringAttributeValue>(new JavaSymbolName(""String_Node_Str""),ignoreFields));
  final AnnotationMetadataBuilder toStringAnnotationBuilder=new AnnotationMetadataBuilder(ROO_TO_STRING,attributes);
  updatedGovernorBuilder=new ClassOrInterfaceTypeDetailsBuilder(governorTypeDetails);
  updatedGovernorBuilder.updateTypeAnnotation(toStringAnnotationBuilder.build(),new HashSet<JavaSymbolName>());
}",0.957907396271798
59417,"/** 
 * Read the values of GvNIXRelationsPattern and for each field defined as relation retrieve its java type.
 * @param mid Metadata identification string
 * @param controller Controller physical type metadata
 * @param entity Entity java type
 * @param webMetadataService Web metadata service
 * @return Map with java types and java type details
 */
private List<JavaType> getRelationFields(String mid,PhysicalTypeMetadata controller,JavaType entity,WebMetadataService webMetadataService){
  Set<String> relations=_patternService.getRelationsFields(controller);
  List<FieldMetadata> scaffoldFields=getScaffoldEligibleFields(entity,mid,webMetadataService);
  List<JavaType> validFields=new ArrayList<JavaType>();
  for (  FieldMetadata scaffoldEligibleField : scaffoldFields) {
    if (relations.contains(scaffoldEligibleField.getFieldName().getSymbolName())) {
      JavaType validField=scaffoldEligibleField.getFieldType();
      if (validField.isCommonCollectionType() && !validField.getParameters().isEmpty()) {
        validField=validField.getParameters().get(0);
      }
      validFields.add(validField);
    }
  }
  return validFields;
}","/** 
 * Read the values of GvNIXRelationsPattern and for each field defined as relation retrieve its java type.
 * @param mid Metadata identification string
 * @param controller Controller physical type metadata
 * @param entity Entity java type
 * @param webMetadataService Web metadata service
 * @return Map with java types and java type details
 */
private List<JavaType> getRelationFields(String mid,PhysicalTypeMetadata controller,JavaType entity,WebMetadataService webMetadataService){
  List<String> relations=_patternService.getControllerRelationsPatternsFields(controller);
  List<FieldMetadata> scaffoldFields=getScaffoldEligibleFields(entity,mid,webMetadataService);
  List<JavaType> validFields=new ArrayList<JavaType>();
  for (  FieldMetadata scaffoldEligibleField : scaffoldFields) {
    if (relations.contains(scaffoldEligibleField.getFieldName().getSymbolName())) {
      JavaType validField=scaffoldEligibleField.getFieldType();
      if (validField.isCommonCollectionType() && !validField.getParameters().isEmpty()) {
        validField=validField.getParameters().get(0);
      }
      validFields.add(validField);
    }
  }
  return validFields;
}",0.9900733707380232
59418,"/** 
 * Return an instance of the Metadata offered by this add-on.
 */
@Override protected ItdTypeDetailsProvidingMetadataItem getMetadata(String mid,JavaType aspect,PhysicalTypeMetadata controllerMetadata,String file){
  WebScaffoldAnnotationValues webScaffoldAnnotationValues=new WebScaffoldAnnotationValues(controllerMetadata);
  if (!webScaffoldAnnotationValues.isAnnotationFound() || webScaffoldAnnotationValues.getFormBackingObject() == null || controllerMetadata.getMemberHoldingTypeDetails() == null) {
    return null;
  }
  JavaType controllerType=PatternMetadata.getJavaType(mid);
  LogicalPath path=PatternMetadata.getPath(mid);
  String webScaffoldMetadataId=WebScaffoldMetadata.createIdentifier(controllerType,path);
  WebScaffoldMetadata webScaffoldMetadata=(WebScaffoldMetadata)metadataService.get(webScaffoldMetadataId);
  if (webScaffoldMetadata == null) {
    return null;
  }
  ClassOrInterfaceTypeDetails controllerTypeDetails=(ClassOrInterfaceTypeDetails)controllerMetadata.getMemberHoldingTypeDetails();
  Validate.notNull(controllerTypeDetails,""String_Node_Str"");
  Validate.isTrue(!patternService.isPatternDuplicated(null),""String_Node_Str"");
  List<StringAttributeValue> patternList=patternService.getPatternAttributes(controllerType);
  JavaType entity=webScaffoldAnnotationValues.getFormBackingObject();
  PhysicalTypeMetadata entityMetadata=(PhysicalTypeMetadata)metadataService.get(PhysicalTypeIdentifier.createIdentifier(entity,LogicalPath.getInstance(Path.SRC_MAIN_JAVA,""String_Node_Str"")));
  Validate.notNull(entityMetadata,""String_Node_Str"" + entity.getFullyQualifiedTypeName());
  MemberDetails entityDetails=getMemberDetails(entityMetadata);
  MemberHoldingTypeDetails entityPersistentDetails=MemberFindingUtils.getMostConcreteMemberHoldingTypeDetailsWithTag(entityDetails,CustomDataKeys.PERSISTENT_TYPE);
  SortedMap<JavaType,JavaTypeMetadataDetails> relatedEntities=webMetadataService.getRelatedApplicationTypeMetadata(entity,entityDetails,mid);
  if (entityPersistentDetails == null || relatedEntities == null || relatedEntities.get(entity) == null || relatedEntities.get(entity).getPersistenceDetails() == null) {
    return null;
  }
  JavaType oldEntity=webScaffoldMidToEntityMap.get(mid);
  if (oldEntity != null) {
    entityToWebScaffoldMidMap.remove(oldEntity);
  }
  entityToWebScaffoldMidMap.put(entity,mid);
  webScaffoldMidToEntityMap.put(mid,entity);
  MemberDetails controllerDetails=getMemberDetails(controllerMetadata);
  Map<JavaSymbolName,DateTimeFormatDetails> entityDateTypes=webMetadataService.getDatePatterns(entity,entityDetails,mid);
  OperationUtils.installWebDialogClass(aspect.getPackage().getFullyQualifiedPackageName().concat(""String_Node_Str""),projectOperations.getPathResolver(),fileManager);
  SortedMap<JavaType,JavaTypeMetadataDetails> relatedFields=getRelationFieldsDetails(mid,controllerMetadata,entity,webMetadataService);
  Map<JavaType,Map<JavaSymbolName,DateTimeFormatDetails>> relatedDates=getRelationFieldsDateFormat(mid,controllerMetadata,entity,webMetadataService);
  return new PatternMetadata(mid,aspect,controllerMetadata,controllerDetails,webScaffoldMetadata,patternList,entityMetadata,relatedEntities,relatedFields,relatedDates,entityDateTypes);
}","/** 
 * Return an instance of the Metadata offered by this add-on.
 */
@Override protected ItdTypeDetailsProvidingMetadataItem getMetadata(String mid,JavaType aspect,PhysicalTypeMetadata controllerMetadata,String file){
  WebScaffoldAnnotationValues webScaffoldAnnotationValues=new WebScaffoldAnnotationValues(controllerMetadata);
  if (!webScaffoldAnnotationValues.isAnnotationFound() || webScaffoldAnnotationValues.getFormBackingObject() == null || controllerMetadata.getMemberHoldingTypeDetails() == null) {
    return null;
  }
  JavaType controllerType=PatternMetadata.getJavaType(mid);
  LogicalPath path=PatternMetadata.getPath(mid);
  String webScaffoldMetadataId=WebScaffoldMetadata.createIdentifier(controllerType,path);
  WebScaffoldMetadata webScaffoldMetadata=(WebScaffoldMetadata)metadataService.get(webScaffoldMetadataId);
  if (webScaffoldMetadata == null) {
    return null;
  }
  ClassOrInterfaceTypeDetails controllerTypeDetails=(ClassOrInterfaceTypeDetails)controllerMetadata.getMemberHoldingTypeDetails();
  Validate.notNull(controllerTypeDetails,""String_Node_Str"");
  Validate.isTrue(!patternService.existsMasterPatternDuplicated(),""String_Node_Str"");
  List<StringAttributeValue> patternList=patternService.getControllerMasterPattern(controllerType);
  JavaType entity=webScaffoldAnnotationValues.getFormBackingObject();
  PhysicalTypeMetadata entityMetadata=(PhysicalTypeMetadata)metadataService.get(PhysicalTypeIdentifier.createIdentifier(entity,LogicalPath.getInstance(Path.SRC_MAIN_JAVA,""String_Node_Str"")));
  Validate.notNull(entityMetadata,""String_Node_Str"" + entity.getFullyQualifiedTypeName());
  MemberDetails entityDetails=getMemberDetails(entityMetadata);
  MemberHoldingTypeDetails entityPersistentDetails=MemberFindingUtils.getMostConcreteMemberHoldingTypeDetailsWithTag(entityDetails,CustomDataKeys.PERSISTENT_TYPE);
  SortedMap<JavaType,JavaTypeMetadataDetails> relatedEntities=webMetadataService.getRelatedApplicationTypeMetadata(entity,entityDetails,mid);
  if (entityPersistentDetails == null || relatedEntities == null || relatedEntities.get(entity) == null || relatedEntities.get(entity).getPersistenceDetails() == null) {
    return null;
  }
  JavaType oldEntity=webScaffoldMidToEntityMap.get(mid);
  if (oldEntity != null) {
    entityToWebScaffoldMidMap.remove(oldEntity);
  }
  entityToWebScaffoldMidMap.put(entity,mid);
  webScaffoldMidToEntityMap.put(mid,entity);
  MemberDetails controllerDetails=getMemberDetails(controllerMetadata);
  Map<JavaSymbolName,DateTimeFormatDetails> entityDateTypes=webMetadataService.getDatePatterns(entity,entityDetails,mid);
  OperationUtils.installWebDialogClass(aspect.getPackage().getFullyQualifiedPackageName().concat(""String_Node_Str""),projectOperations.getPathResolver(),fileManager);
  SortedMap<JavaType,JavaTypeMetadataDetails> relatedFields=getRelationFieldsDetails(mid,controllerMetadata,entity,webMetadataService);
  Map<JavaType,Map<JavaSymbolName,DateTimeFormatDetails>> relatedDates=getRelationFieldsDateFormat(mid,controllerMetadata,entity,webMetadataService);
  return new PatternMetadata(mid,aspect,controllerMetadata,controllerDetails,webScaffoldMetadata,patternList,entityMetadata,relatedEntities,relatedFields,relatedDates,entityDateTypes);
}",0.9932119716136996
59419,"/** 
 * Disables Roo MenuOperationsImpl service. <p> <em>IMPORTANT:</em> OSGi container will inject gvNIX MenuOperationsImpl service to clients.
 */
protected void disableRooMenuOperations(){
  logger.fine(""String_Node_Str"");
  ServiceReference rooServiceRef=componentContext.getBundleContext().getServiceReference(MenuOperations.class.getName());
  Long componentId=(Long)rooServiceRef.getProperty(""String_Node_Str"");
  try {
    executeFelixCommand(""String_Node_Str"".concat(componentId.toString()));
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}","/** 
 * {@inheritDoc}
 */
public void disableRooMenuOperations(){
  logger.fine(""String_Node_Str"");
  ServiceReference rooServiceRef=componentContext.getBundleContext().getServiceReference(MenuOperations.class.getName());
  Long componentId=(Long)rooServiceRef.getProperty(""String_Node_Str"");
  try {
    executeFelixCommand(""String_Node_Str"".concat(componentId.toString()));
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}",0.60075329566855
59420,"/** 
 * {@inheritDoc} 
 */
protected void activate(ComponentContext context){
  componentContext=context;
  if (isGvNixMenuAvailable()) {
    disableRooMenuOperations();
  }
}","/** 
 * {@inheritDoc} 
 */
protected void activate(ComponentContext context){
  componentContext=context;
}",0.7588652482269503
59421,"/** 
 * Given a reportFormat it generates/updates the JSPX showing the form with the generate report submit button.
 * @param report
 */
public void installMvcArtifacts(String report){
  String[] reportNameFormat=ReportMetadata.stripGvNixReportValue(report);
  PathResolver pathResolver=projectOperations.getPathResolver();
  String controllerPath=webScaffoldMetadata.getAnnotationValues().getPath();
  String destinationDirectory=pathResolver.getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"" + controllerPath);
  if (!fileManager.exists(destinationDirectory)) {
    fileManager.createDirectory(destinationDirectory);
  }
 else {
    File file=new File(destinationDirectory);
    Assert.isTrue(file.isDirectory(),destinationDirectory + ""String_Node_Str"");
  }
  Document document=getReportFormJsp(reportNameFormat[0],controllerPath);
  writeToDiskIfNecessary(pathResolver.getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"" + controllerPath + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str""),document);
  Map<String,String> properties=new HashMap<String,String>();
  tilesOperations.addViewDefinition(controllerPath,LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),controllerPath + ""String_Node_Str"" + reportNameFormat[0],TilesOperationsImpl.DEFAULT_TEMPLATE,""String_Node_Str"" + controllerPath + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"");
  menuOperations.addMenuItem(new JavaSymbolName(formbackingObject.getSimpleTypeName()),new JavaSymbolName(reportNameFormat[0] + ""String_Node_Str""),""String_Node_Str"" + formbackingObject.getSimpleTypeName().toLowerCase() + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",""String_Node_Str"" + controllerPath + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",MenuOperations.DEFAULT_MENU_ITEM_PREFIX,LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""));
  properties.put(""String_Node_Str"" + formbackingObject.getSimpleTypeName().toLowerCase() + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",new JavaSymbolName(formbackingObject.getSimpleTypeName()).getReadableSymbolName() + ""String_Node_Str"" + reportNameFormat[0]+ ""String_Node_Str"");
  properties.put(""String_Node_Str"" + formbackingObject.getSimpleTypeName().toLowerCase() + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",new JavaSymbolName(formbackingObject.getSimpleTypeName()).getReadableSymbolName() + ""String_Node_Str"" + reportNameFormat[0]+ ""String_Node_Str"");
  propFileOperations.addProperties(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"",properties,true,false);
}","/** 
 * Given a reportFormat it generates/updates the JSPX showing the form with the generate report submit button.
 * @param report
 */
public void installMvcArtifacts(String report){
  String[] reportNameFormat=ReportMetadata.stripGvNixReportValue(report);
  String controllerPath=webScaffoldMetadata.getAnnotationValues().getPath();
  String destinationDirectory=pathResolver.getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"" + controllerPath);
  if (!fileManager.exists(destinationDirectory)) {
    fileManager.createDirectory(destinationDirectory);
  }
 else {
    File file=new File(destinationDirectory);
    Assert.isTrue(file.isDirectory(),destinationDirectory + ""String_Node_Str"");
  }
  Document document=getReportFormJsp(reportNameFormat[0],controllerPath);
  writeToDiskIfNecessary(pathResolver.getIdentifier(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"" + controllerPath + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str""),document);
  Map<String,String> properties=new HashMap<String,String>();
  tilesOperations.addViewDefinition(controllerPath,LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),controllerPath + ""String_Node_Str"" + reportNameFormat[0],TilesOperationsImpl.DEFAULT_TEMPLATE,""String_Node_Str"" + controllerPath + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"");
  menuOperations.addMenuItem(new JavaSymbolName(formbackingObject.getSimpleTypeName()),new JavaSymbolName(reportNameFormat[0] + ""String_Node_Str""),""String_Node_Str"" + formbackingObject.getSimpleTypeName().toLowerCase() + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",""String_Node_Str"" + controllerPath + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",MenuOperations.DEFAULT_MENU_ITEM_PREFIX,LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""));
  properties.put(""String_Node_Str"" + formbackingObject.getSimpleTypeName().toLowerCase() + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",new JavaSymbolName(formbackingObject.getSimpleTypeName()).getReadableSymbolName() + ""String_Node_Str"" + reportNameFormat[0]+ ""String_Node_Str"");
  properties.put(""String_Node_Str"" + formbackingObject.getSimpleTypeName().toLowerCase() + ""String_Node_Str""+ reportNameFormat[0]+ ""String_Node_Str"",new JavaSymbolName(formbackingObject.getSimpleTypeName()).getReadableSymbolName() + ""String_Node_Str"" + reportNameFormat[0]+ ""String_Node_Str"");
  propFileOperations.addProperties(LogicalPath.getInstance(Path.SRC_MAIN_WEBAPP,""String_Node_Str""),""String_Node_Str"",properties,true,false);
}",0.9877335346291752
59422,"/** 
 * <p> Generates file names for certificate file to copy into project resource folder until it find a unused one. </p> <p> The first try is <code>{target-folder}/{certificate_fileName}</code> </p> <p> Pattern: <code>{target-folder}/{certificate_name}_{counter}.{certificate_extension}</code> </p>
 * @param certificate
 * @param importedServiceClass
 * @return
 */
private File computeCertificateTargetName(File certificate,JavaType importedServiceClass){
  String certificateName=certificate.getName();
  String extension=certificateName.substring(certificateName.lastIndexOf('.'),certificateName.length());
  certificateName=certificateName.substring(0,certificateName.lastIndexOf('.'));
  String targetPath=WSServiceSecurityMetadata.getCertificatePath(importedServiceClass,certificate.getName());
  targetPath=projectOperations.getPathResolver().getIdentifier(Path.SRC_MAIN_RESOURCES,targetPath);
  int index=1;
  String baseNamePath=targetPath.replace(certificate.getName(),""String_Node_Str"");
  while (fileManager.exists(targetPath)) {
    targetPath=baseNamePath.concat(certificateName).concat(""String_Node_Str"" + index).concat(extension);
    targetPath=projectOperations.getPathResolver().getIdentifier(Path.SRC_MAIN_RESOURCES,targetPath);
    index++;
  }
  return new File(targetPath);
}","/** 
 * <p> Generates file names for certificate file to copy into project resource folder until it find a unused one. </p> <p> The first try is <code>{target-folder}/{certificate_fileName}</code> </p> <p> Pattern: <code>{target-folder}/{certificate_name}_{counter}.{certificate_extension}</code> </p>
 * @param certificate
 * @param importedServiceClass
 * @return
 */
private File computeCertificateTargetName(File certificate,JavaType importedServiceClass){
  String certificateName=certificate.getName();
  String extension=certificateName.substring(certificateName.lastIndexOf('.'),certificateName.length());
  certificateName=certificateName.substring(0,certificateName.lastIndexOf('.'));
  String targetPath=WSServiceSecurityMetadata.getCertificatePath(importedServiceClass,certificate.getName());
  String baseNamePath=targetPath.replace(certificate.getName(),""String_Node_Str"");
  targetPath=projectOperations.getPathResolver().getIdentifier(Path.SRC_MAIN_RESOURCES,targetPath);
  int index=1;
  while (fileManager.exists(targetPath)) {
    targetPath=baseNamePath.concat(certificateName).concat(""String_Node_Str"" + index).concat(extension);
    targetPath=projectOperations.getPathResolver().getIdentifier(Path.SRC_MAIN_RESOURCES,targetPath);
    index++;
  }
  return new File(targetPath);
}",0.9362519201228878
59423,"void draw(SpriteBatch batch,BitmapFont font){
  if (drawResource) {
    batch.draw(Assets.copperOre,x,y,width,height);
    if (closeEnough() && Player.move) {
      font.draw(batch,""String_Node_Str"",50,50);
    }
  }
}","void draw(SpriteBatch batch,BitmapFont font){
  if (drawResource) {
    batch.draw(Assets.copperOre,x,y,width,height);
    if (closeEnough() && Player.ableToMove) {
      font.draw(batch,""String_Node_Str"",50,50);
    }
  }
}",0.9819004524886876
59424,"void input(){
  if (Gdx.input.isKeyPressed(Keys.ESCAPE)) {
    Player.move=true;
    inventoryVisible=false;
  }
}","void input(){
  if (Gdx.input.isKeyPressed(Keys.ESCAPE)) {
    Player.ableToMove=true;
    inventoryVisible=false;
  }
}",0.9658119658119658
59425,"void draw(SpriteBatch batch,BitmapFont font){
  if (inventoryVisible) {
    batch.draw(Assets.inventory,0,0);
    Player.move=false;
    font.draw(batch,Tree.amountOfWoodString,350,290);
    font.draw(batch,Fishing.amountOfFishString,350,225);
  }
}","void draw(SpriteBatch batch,BitmapFont font){
  if (inventoryVisible) {
    batch.draw(Assets.inventory,0,0);
    Player.ableToMove=false;
    font.draw(batch,Tree.amountOfWoodString,350,290);
    font.draw(batch,Fishing.amountOfFishString,350,225);
  }
}",0.984126984126984
59426,"void draw(SpriteBatch batch,BitmapFont font){
  if (drawResource) {
    batch.draw(Assets.ironOre,x,y,width,height);
    if (closeEnough() && Player.move) {
      font.draw(batch,""String_Node_Str"",50,50);
    }
  }
}","void draw(SpriteBatch batch,BitmapFont font){
  if (drawResource) {
    batch.draw(Assets.ironOre,x,y,width,height);
    if (closeEnough() && Player.ableToMove) {
      font.draw(batch,""String_Node_Str"",50,50);
    }
  }
}",0.9817351598173516
59427,"void input(){
  if (move) {
    if (!House.inHouse) {
      if (((Gdx.input.isKeyPressed(Keys.W)) || Android.up) && isAbleToMoveUp) {
        up=true;
        currentDirection=1;
      }
 else       up=false;
      if (((Gdx.input.isKeyPressed(Keys.A)) || Android.left) && isAbleToMoveLeft) {
        left=true;
        currentDirection=2;
      }
 else       left=false;
      if (((Gdx.input.isKeyPressed(Keys.S)) || Android.down) && isAbleToMoveDown) {
        currentDirection=0;
        down=true;
      }
 else       down=false;
      if (((Gdx.input.isKeyPressed(Keys.D)) || Android.right) && isAbleToMoveRight) {
        right=true;
        currentDirection=3;
      }
 else       right=false;
    }
 else {
      if ((Gdx.input.isKeyPressed(Keys.W))) {
        y+=playerSpeed;
        up=true;
      }
 else       up=false;
      if ((Gdx.input.isKeyPressed(Keys.A))) {
        x-=playerSpeed;
        left=true;
      }
 else       left=false;
      if ((Gdx.input.isKeyPressed(Keys.S))) {
        y-=playerSpeed;
        down=true;
      }
 else       down=false;
      if ((Gdx.input.isKeyPressed(Keys.D))) {
        x+=playerSpeed;
        right=true;
      }
 else       right=false;
    }
  }
}","void input(){
  if (ableToMove) {
    if (!House.inHouse) {
      if (((Gdx.input.isKeyPressed(Keys.W)) || Android.up) && isAbleToMoveUp) {
        up=true;
        currentDirection=1;
      }
 else       up=false;
      if (((Gdx.input.isKeyPressed(Keys.A)) || Android.left) && isAbleToMoveLeft) {
        left=true;
        currentDirection=2;
      }
 else       left=false;
      if (((Gdx.input.isKeyPressed(Keys.S)) || Android.down) && isAbleToMoveDown) {
        currentDirection=0;
        down=true;
      }
 else       down=false;
      if (((Gdx.input.isKeyPressed(Keys.D)) || Android.right) && isAbleToMoveRight) {
        right=true;
        currentDirection=3;
      }
 else       right=false;
    }
 else {
      if ((Gdx.input.isKeyPressed(Keys.W))) {
        y+=playerSpeed;
        up=true;
      }
 else       up=false;
      if ((Gdx.input.isKeyPressed(Keys.A))) {
        x-=playerSpeed;
        left=true;
      }
 else       left=false;
      if ((Gdx.input.isKeyPressed(Keys.S))) {
        y-=playerSpeed;
        down=true;
      }
 else       down=false;
      if ((Gdx.input.isKeyPressed(Keys.D))) {
        x+=playerSpeed;
        right=true;
      }
 else       right=false;
    }
  }
  if (Gdx.input.isButtonPressed(Keys.SHIFT_LEFT)) {
    playerSpeed=4;
  }
 else   playerSpeed=2;
}",0.95796986518636
59428,"void move(){
  if (move) {
    if (up) {
      GameScreen.yRate=(playerSpeed);
      y+=playerSpeed;
      Level.grassY-=playerSpeed;
    }
 else     if (down) {
      GameScreen.yRate=-playerSpeed;
      y-=playerSpeed;
      Level.grassY+=playerSpeed;
    }
 else {
      GameScreen.yRate=0;
    }
    if (left) {
      GameScreen.xRate=-playerSpeed;
      x-=playerSpeed;
      Level.grassX+=playerSpeed;
    }
 else     if (right) {
      GameScreen.xRate=(playerSpeed);
      x+=playerSpeed;
      Level.grassX-=playerSpeed;
    }
 else {
      GameScreen.xRate=0;
    }
  }
}","void move(){
  if (ableToMove) {
    if (up) {
      GameScreen.yRate=(playerSpeed);
      y+=playerSpeed;
      Level.grassY-=playerSpeed;
    }
 else     if (down) {
      GameScreen.yRate=-playerSpeed;
      y-=playerSpeed;
      Level.grassY+=playerSpeed;
    }
 else {
      GameScreen.yRate=0;
    }
    if (left) {
      GameScreen.xRate=-playerSpeed;
      x-=playerSpeed;
      Level.grassX+=playerSpeed;
    }
 else     if (right) {
      GameScreen.xRate=(playerSpeed);
      x+=playerSpeed;
      Level.grassX-=playerSpeed;
    }
 else {
      GameScreen.xRate=0;
    }
  }
 else {
    GameScreen.yRate=0;
    GameScreen.xRate=0;
  }
}",0.9429967426710096
59429,"void draw(SpriteBatch batch,BitmapFont font){
  if (move)   batch.draw(Assets.mainChar,x,y);
}","void draw(SpriteBatch batch,BitmapFont font){
  if (ableToMove)   batch.draw(Assets.mainChar,x,y);
}",0.9587628865979382
59430,"void draw(SpriteBatch batch,BitmapFont font){
  if (drawResource) {
    batch.draw(Assets.material,x,y,width,height);
    if (closeEnough() && Player.move) {
      if (Gdx.app.getType() == ApplicationType.Android) {
        font.draw(batch,""String_Node_Str"",Android.size + 10,50);
      }
 else       font.draw(batch,""String_Node_Str"",50,50);
    }
  }
}","void draw(SpriteBatch batch,BitmapFont font){
  if (drawResource) {
    batch.draw(Assets.material,x,y,width,height);
    if (closeEnough() && Player.ableToMove) {
      if (Gdx.app.getType() == ApplicationType.Android) {
        font.draw(batch,""String_Node_Str"",Android.size + 10,50);
      }
 else       font.draw(batch,""String_Node_Str"",50,50);
    }
  }
}",0.988795518207283
59431,"void gui(){
  robotTimer+=Gdx.graphics.getDeltaTime();
  if (robotTimer > 60) {
    robotResources+=1;
    robotTimer=0;
  }
  amountOfStoneString=Integer.toString(robotResources);
  if (bot.closeEnough() && Gdx.input.isKeyPressed(Keys.L)) {
    menuOpen=true;
  }
  if (menuOpen) {
    Player.move=false;
    if (Gdx.input.isKeyPressed(Keys.ESCAPE)) {
      Player.move=true;
      menuOpen=false;
    }
    if (Gdx.input.getX() > 406 && Gdx.input.getX() < 559 && Gdx.input.getY() > 406 && Gdx.input.getY() < 478) {
      if (Gdx.input.isTouched()) {
        Resource.amountOfStone+=robotResources;
        robotResources=0;
      }
    }
  }
}","void gui(){
  robotTimer+=Gdx.graphics.getDeltaTime();
  if (robotTimer > 60) {
    robotResources+=1;
    robotTimer=0;
  }
  amountOfStoneString=Integer.toString(robotResources);
  if (bot.closeEnough() && Gdx.input.isKeyPressed(Keys.L)) {
    menuOpen=true;
  }
  if (menuOpen) {
    Player.ableToMove=false;
    if (Gdx.input.isKeyPressed(Keys.ESCAPE)) {
      Player.ableToMove=true;
      menuOpen=false;
    }
    if (Gdx.input.getX() > 406 && Gdx.input.getX() < 559 && Gdx.input.getY() > 406 && Gdx.input.getY() < 478) {
      if (Gdx.input.isTouched()) {
        Resource.amountOfStone+=robotResources;
        robotResources=0;
      }
    }
  }
}",0.9877112135176652
59432,"void update(){
  timer+=Gdx.graphics.getDeltaTime();
  if (Tutorial.step == 4 && closeEnough()) {
    timer=0;
    Tutorial.step=5;
  }
  if (Tutorial.step == 6 && closeEnough()) {
    timer=0;
    Tutorial.step=7;
  }
}","void update(){
  timer+=Gdx.graphics.getDeltaTime();
  if (Tutorial.step == 4 && closeEnough()) {
    timer=0;
    TradeShop.cash-=50;
    Tutorial.step=5;
  }
  if (Tutorial.step == 6 && closeEnough()) {
    timer=0;
    Tutorial.step=7;
  }
}",0.9482758620689656
59433,"void update(){
  timer+=Gdx.graphics.getDeltaTime();
  if (Fishing.amountOfFish >= 5 && Tutorial.step == 2) {
    Tutorial.step=3;
  }
  if (cash >= 50 && Tutorial.step == 3) {
    Tutorial.step=4;
  }
}","void update(){
  timer+=Gdx.graphics.getDeltaTime();
  if (Fishing.amountOfFish >= 5 && Tutorial.step == 2) {
    Tutorial.step=3;
  }
  if (cash >= 50 && Tutorial.step == 3) {
    Fishing.amountOfFish-=5;
    Tutorial.step=4;
  }
}",0.9333333333333332
59434,"void handleInput(){
  if (Tutorial.step == 3 && closeEnough()) {
    if (Gdx.input.getX() > 785 && Gdx.input.getX() < 836 && Gdx.input.getY() > 470 && Gdx.input.getY() < 515 && Gdx.input.isTouched()) {
      Messages.messagesArray.add(new Message(""String_Node_Str"",Messages.sec));
      timer=0;
      Tutorial.step+=1;
    }
  }
}","void handleInput(){
  if (Tutorial.step == 3 && closeEnough()) {
    if (Gdx.input.getX() > 785 && Gdx.input.getX() < 836 && Gdx.input.getY() > 470 && Gdx.input.getY() < 515 && Gdx.input.isTouched()) {
      Messages.messagesArray.add(new Message(""String_Node_Str"",Messages.sec));
      timer=0;
      cash-=50;
      Tutorial.step+=1;
    }
  }
}",0.976401179941003
59435,"void draw(SpriteBatch batch,BitmapFont font){
  root.setX(x);
  root.setY(y);
  leaveRoot.setX(x);
  leaveRoot.setY(y);
  renderer.draw(batch,leavesSkel);
  renderer.draw(batch,treeSkel);
  if (closeEnough() && Player.move && !treeDone)   font.draw(batch,""String_Node_Str"",50,50);
  treeSkel.updateWorldTransform();
  leavesSkel.updateWorldTransform();
}","void draw(SpriteBatch batch,BitmapFont font){
  root.setX(x);
  root.setY(y);
  leaveRoot.setX(x);
  leaveRoot.setY(y);
  renderer.draw(batch,leavesSkel);
  renderer.draw(batch,treeSkel);
  if (closeEnough() && Player.ableToMove && !treeDone)   font.draw(batch,""String_Node_Str"",50,50);
  treeSkel.updateWorldTransform();
  leavesSkel.updateWorldTransform();
}",0.988795518207283
59436,"void doCollision(){
  if (Player.x < 110) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3554 && Player.y > 2466 && Player.x > 1374 && Player.x < 1394) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3666 && Player.y > 3526 && Player.x > 1192 && Player.x < 1250) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3706 && Player.y > 3606 && Player.x > 1363 && Player.x < 1388) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3680 && Player.y > 3602 && Player.x > 1538 && Player.x < 1568) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3550 && Player.y > 2240 && Player.x > 3002 && Player.x < 3034) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2260 && Player.y > 2002 && Player.x > 2744 && Player.x < 2782) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2260 && Player.y > 1946 && Player.x > 2672 && Player.x < 2706) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2422 && Player.y > 2236 && Player.x > 1360 && Player.x < 1394) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2422 && Player.y > 1878 && Player.x > 886 && Player.x < 944) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2034 && Player.y > 1900 && Player.x > 706 && Player.x < 718) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2422 && Player.y > 2030 && Player.x > 812 && Player.x < 852) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2532 && Player.y > 2396 && Player.x > 730 && Player.x < 770) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2516 && Player.y > 2466 && Player.x > 810 && Player.x < 848) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3442 && Player.y > 2916 && Player.x > 2894 && Player.x < 2934) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2930 && Player.y > 2856 && Player.x > 2856 && Player.x < 2866) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2868 && Player.y > 2336 && Player.x > 2894 && Player.x < 2934) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2820 && Player.y > 2338 && Player.x > 2068 && Player.x < 2114) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2884 && Player.y > 2338 && Player.x > 2150 && Player.x < 2190) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3108 && Player.y > 2866 && Player.x > 1464 && Player.x < 1498) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3434 && Player.y > 3154 && Player.x > 1464 && Player.x < 1500) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2258 && Player.y > 1878 && Player.x > 1466 && Player.x < 1502) {
    Player.isAbleToMoveLeft=false;
  }
 else   Player.isAbleToMoveLeft=true;
  if (Player.x > 3788) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3554 && Player.y > 2466 && Player.x > 1344 && Player.x < 1383) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3666 && Player.y > 3526 && Player.x > 1202 && Player.x < 1240) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3661 && Player.y > 3602 && Player.x > 1282 && Player.x < 1302) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3706 && Player.y > 3606 && Player.x > 1458 && Player.x < 1488) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3660 && Player.y > 3546 && Player.x > 1600 && Player.x < 1610) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3558 && Player.y > 3522 && Player.x > 1458 && Player.x < 1488) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3550 && Player.y > 2236 && Player.x > 2992 && Player.x < 3024) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2260 && Player.y > 2002 && Player.x > 2732 && Player.x < 2766) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2034 && Player.y > 1938 && Player.x > 3688 && Player.x < 3708) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2260 && Player.y > 1930 && Player.x > 2658 && Player.x < 2696) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2422 && Player.y > 2236 && Player.x > 1346 && Player.x < 1384) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2422 && Player.y > 1878 && Player.x > 876 && Player.x < 914) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2422 && Player.y > 2030 && Player.x > 802 && Player.x < 842) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2532 && Player.y > 2396 && Player.x > 718 && Player.x < 760) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2516 && Player.y > 2466 && Player.x > 800 && Player.x < 828) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3442 && Player.y > 2916 && Player.x > 2884 && Player.x < 2924) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2868 && Player.y > 2336 && Player.x > 2882 && Player.x < 2924) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2820 && Player.y > 2334 && Player.x > 1454 && Player.x < 1498) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2884 && Player.y > 2338 && Player.x > 2140 && Player.x < 2180) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3108 && Player.y > 2866 && Player.x > 1454 && Player.x < 1488) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3178 && Player.y > 3090 && Player.x > 1486 && Player.x < 1496) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3434 && Player.y > 3154 && Player.x > 1454 && Player.x < 1490) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2258 && Player.y > 1878 && Player.x > 1456 && Player.x < 1492) {
    Player.isAbleToMoveRight=false;
  }
 else   Player.isAbleToMoveRight=true;
  if (Player.y < 224) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3526 && Player.y < 3558 && Player.x > 1206 && Player.x < 1390) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3532 && Player.y < 3558 && Player.x > 1458 && Player.x < 3022) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2240 && Player.y < 2264 && Player.x > 2738 && Player.x < 3028) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2008 && Player.y < 2034 && Player.x > 2738 && Player.x < 2836) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 1932 && Player.y < 1960 && Player.x > 2662 && Player.x < 3836) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2238 && Player.y < 2264 && Player.x > 1462 && Player.x < 2690) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2400 && Player.y < 2426 && Player.x > 880 && Player.x < 1384) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 1888 && Player.y < 1910 && Player.x > 664 && Player.x < 1502) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2032 && Player.y < 2048 && Player.x > 664 && Player.x < 848) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2400 && Player.y < 2426 && Player.x > 722 && Player.x < 848) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2470 && Player.y < 2500 && Player.x > 806 && Player.x < 1386) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3418 && Player.y < 3448 && Player.x > 1458 && Player.x < 2928) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2920 && Player.y < 2946 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2848 && Player.y < 2872 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2340 && Player.y < 2372 && Player.x > 2144 && Player.x < 2928) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2790 && Player.y < 2824 && Player.x > 1458 && Player.x < 2114) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2872 && Player.y < 2900 && Player.x > 1458 && Player.x < 2190) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3090 && Player.y < 3112 && Player.x > 1458 && Player.x < 1528) {
    Player.isAbleToMoveDown=false;
  }
 else   Player.isAbleToMoveDown=true;
  if (Player.y > 3690) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3522 && Player.y < 3548 && Player.x > 1206 && Player.x < 1390) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3654 && Player.y < 3664 && Player.x > 1245 && Player.x < 1288) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3602 && Player.y < 3616 && Player.x > 1286 && Player.x < 1388) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3602 && Player.y < 3636 && Player.x > 1464 && Player.x < 1564) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3654 && Player.y < 3666 && Player.x > 1562 && Player.x < 1620) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3522 && Player.y < 3548 && Player.x > 1458 && Player.x < 3022) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2230 && Player.y < 2254 && Player.x > 2738 && Player.x < 3028) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 1998 && Player.y < 2024 && Player.x > 2738 && Player.x < 3836) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 1922 && Player.y < 1950 && Player.x > 2662 && Player.x < 3836) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2228 && Player.y < 2254 && Player.x > 1462 && Player.x < 2698) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2390 && Player.y < 2416 && Player.x > 880 && Player.x < 1384) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 1874 && Player.y < 1900 && Player.x > 664 && Player.x < 1502) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2022 && Player.y < 2058 && Player.x > 664 && Player.x < 848) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2390 && Player.y < 2416 && Player.x > 722 && Player.x < 848) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2500 && Player.y < 2516 && Player.x > 758 && Player.x < 832) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2460 && Player.y < 2486 && Player.x > 806 && Player.x < 1386) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3408 && Player.y < 3438 && Player.x > 1458 && Player.x < 2928) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2910 && Player.y < 2932 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2838 && Player.y < 2862 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2334 && Player.y < 2354 && Player.x > 2144 && Player.x < 2930) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2334 && Player.y < 2354 && Player.x > 1458 && Player.x < 2110) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2862 && Player.y < 2886 && Player.x > 1458 && Player.x < 2190) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3148 && Player.y < 3188 && Player.x > 1458 && Player.x < 1528) {
    Player.isAbleToMoveUp=false;
  }
 else   Player.isAbleToMoveUp=true;
}","void doCollision(){
  if (Player.x < 110) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3554 && Player.y > 2466 && Player.x > 1374 && Player.x < 1394) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3666 && Player.y > 3526 && Player.x > 1192 && Player.x < 1250) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3706 && Player.y > 3606 && Player.x > 1363 && Player.x < 1388) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3680 && Player.y > 3602 && Player.x > 1538 && Player.x < 1568) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3550 && Player.y > 2240 && Player.x > 3002 && Player.x < 3034) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2260 && Player.y > 2002 && Player.x > 2744 && Player.x < 2782) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2260 && Player.y > 1946 && Player.x > 2672 && Player.x < 2706) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2422 && Player.y > 2236 && Player.x > 1360 && Player.x < 1394) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2422 && Player.y > 1878 && Player.x > 886 && Player.x < 944) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2034 && Player.y > 1900 && Player.x > 706 && Player.x < 718) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2422 && Player.y > 2030 && Player.x > 812 && Player.x < 852) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2532 && Player.y > 2396 && Player.x > 730 && Player.x < 770) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2516 && Player.y > 2466 && Player.x > 810 && Player.x < 848) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3442 && Player.y > 2916 && Player.x > 2894 && Player.x < 2934) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2930 && Player.y > 2856 && Player.x > 2856 && Player.x < 2866) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2868 && Player.y > 2336 && Player.x > 2894 && Player.x < 2934) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2820 && Player.y > 2338 && Player.x > 2068 && Player.x < 2114) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2884 && Player.y > 2338 && Player.x > 2150 && Player.x < 2190) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3108 && Player.y > 2866 && Player.x > 1464 && Player.x < 1498) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 3434 && Player.y > 3154 && Player.x > 1464 && Player.x < 1500) {
    Player.isAbleToMoveLeft=false;
  }
 else   if (Player.y < 2258 && Player.y > 1878 && Player.x > 1466 && Player.x < 1502) {
    Player.isAbleToMoveLeft=false;
  }
 else   Player.isAbleToMoveLeft=true;
  if (Player.x > 3788) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3554 && Player.y > 2466 && Player.x > 1344 && Player.x < 1383) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3666 && Player.y > 3526 && Player.x > 1202 && Player.x < 1240) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3661 && Player.y > 3602 && Player.x > 1282 && Player.x < 1302) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3706 && Player.y > 3606 && Player.x > 1458 && Player.x < 1488) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3660 && Player.y > 3546 && Player.x > 1600 && Player.x < 1610) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3558 && Player.y > 3522 && Player.x > 1458 && Player.x < 1488) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3550 && Player.y > 2236 && Player.x > 2992 && Player.x < 3024) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2260 && Player.y > 2002 && Player.x > 2732 && Player.x < 2766) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2034 && Player.y > 1938 && Player.x > 3688 && Player.x < 3708) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2260 && Player.y > 1930 && Player.x > 2658 && Player.x < 2696) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2422 && Player.y > 2236 && Player.x > 1346 && Player.x < 1384) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2422 && Player.y > 1878 && Player.x > 876 && Player.x < 914) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2422 && Player.y > 2030 && Player.x > 802 && Player.x < 842) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2532 && Player.y > 2396 && Player.x > 718 && Player.x < 760) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2516 && Player.y > 2466 && Player.x > 800 && Player.x < 828) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3442 && Player.y > 2916 && Player.x > 2884 && Player.x < 2924) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2868 && Player.y > 2336 && Player.x > 2882 && Player.x < 2924) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2820 && Player.y > 2334 && Player.x > 1454 && Player.x < 1498) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2884 && Player.y > 2338 && Player.x > 2140 && Player.x < 2180) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3108 && Player.y > 2866 && Player.x > 1454 && Player.x < 1488) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3178 && Player.y > 3090 && Player.x > 1486 && Player.x < 1496) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 3434 && Player.y > 3154 && Player.x > 1454 && Player.x < 1490) {
    Player.isAbleToMoveRight=false;
  }
 else   if (Player.y < 2258 && Player.y > 1878 && Player.x > 1456 && Player.x < 1492) {
    Player.isAbleToMoveRight=false;
  }
 else   Player.isAbleToMoveRight=true;
  if (Player.y < 224) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3526 && Player.y < 3558 && Player.x > 1206 && Player.x < 1390) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3532 && Player.y < 3558 && Player.x > 1458 && Player.x < 3022) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2240 && Player.y < 2264 && Player.x > 2738 && Player.x < 3028) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2008 && Player.y < 2034 && Player.x > 2738 && Player.x < 2836) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 1932 && Player.y < 1960 && Player.x > 2662 && Player.x < 3836) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2238 && Player.y < 2264 && Player.x > 1462 && Player.x < 2690) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2400 && Player.y < 2426 && Player.x > 880 && Player.x < 1384) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 1888 && Player.y < 1910 && Player.x > 664 && Player.x < 1502) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2032 && Player.y < 2048 && Player.x > 664 && Player.x < 848) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2400 && Player.y < 2426 && Player.x > 722 && Player.x < 848) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2470 && Player.y < 2500 && Player.x > 806 && Player.x < 1386) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3418 && Player.y < 3448 && Player.x > 1458 && Player.x < 2928) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2920 && Player.y < 2946 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2848 && Player.y < 2872 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2340 && Player.y < 2372 && Player.x > 2144 && Player.x < 2928) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2790 && Player.y < 2824 && Player.x > 1458 && Player.x < 2114) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 2872 && Player.y < 2900 && Player.x > 1458 && Player.x < 2190) {
    Player.isAbleToMoveDown=false;
  }
 else   if (Player.y > 3090 && Player.y < 3112 && Player.x > 1458 && Player.x < 1528) {
    Player.isAbleToMoveDown=false;
  }
 else   Player.isAbleToMoveDown=true;
  if (Player.y > 3690) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3522 && Player.y < 3548 && Player.x > 1206 && Player.x < 1390) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3654 && Player.y < 3664 && Player.x > 1245 && Player.x < 1288) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3602 && Player.y < 3616 && Player.x > 1286 && Player.x < 1388) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3602 && Player.y < 3636 && Player.x > 1464 && Player.x < 1564) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3654 && Player.y < 3666 && Player.x > 1562 && Player.x < 1620) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3522 && Player.y < 3548 && Player.x > 1458 && Player.x < 3022) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2230 && Player.y < 2254 && Player.x > 2738 && Player.x < 3028) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 1998 && Player.y < 2024 && Player.x > 2738 && Player.x < 3836) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 1922 && Player.y < 1950 && Player.x > 2662 && Player.x < 3836) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2228 && Player.y < 2254 && Player.x > 1462 && Player.x < 2698) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2390 && Player.y < 2416 && Player.x > 880 && Player.x < 1384) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 1874 && Player.y < 1900 && Player.x > 664 && Player.x < 1502) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2022 && Player.y < 2058 && Player.x > 664 && Player.x < 848) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2390 && Player.y < 2416 && Player.x > 722 && Player.x < 848) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2500 && Player.y < 2516 && Player.x > 758 && Player.x < 832) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2460 && Player.y < 2486 && Player.x > 806 && Player.x < 1386) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3408 && Player.y < 3438 && Player.x > 1458 && Player.x < 2928) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2910 && Player.y < 2932 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2838 && Player.y < 2862 && Player.x > 2822 && Player.x < 2930) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2334 && Player.y < 2354 && Player.x > 2144 && Player.x < 2930) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2334 && Player.y < 2354 && Player.x > 1458 && Player.x < 2110) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2862 && Player.y < 2886 && Player.x > 1458 && Player.x < 2190) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 3148 && Player.y < 3188 && Player.x > 1458 && Player.x < 1528) {
    Player.isAbleToMoveUp=false;
  }
 else   if (Player.y > 2230 && Player.y < 2240 && Player.x > 1354 && Player.x < 1386) {
    Player.isAbleToMoveUp=false;
  }
 else   Player.isAbleToMoveUp=true;
}",0.9944323192730836
59437,"public GameScreen(Game game){
  this.game=game;
  float w=Gdx.graphics.getWidth();
  float h=Gdx.graphics.getHeight();
  batch=new SpriteBatch();
  camera=new OrthographicCamera(w,h);
  mapCamera=new OrthographicCamera(w,h);
  camera.update();
  mapCamera.update();
  mapRenderer=new OrthogonalTiledMapRenderer(Assets.mainTiledMap,batch);
  camera.translate(w / 2,h / 2);
  mapCamera.translate(1422 + 16,3562 + 24);
  shapeRenderer=new ShapeRenderer();
  level=new Level();
  player=new Player();
  resource=new Resource();
  arrays=new ArrayListsz();
  topMenu=new TopMenu();
  iron=new Iron();
  inv=new Inventory();
  fps=new FPSLogger();
  android=new Android();
  points=new Points();
  collision=new CollisionDetection();
  message=new Messages();
  swordShop=new SwordShop();
  fishing=new Fishing();
  trade=new TradeShop();
  arrays.treeArrayEstablisher();
  if (Gdx.app.getType() == ApplicationType.Android) {
    currentFont=Assets.cgfFont;
  }
 else   currentFont=new BitmapFont();
  world=new World(new Vector2(0,0),true);
  rayHandler=new RayHandler(world);
  rayHandler.setCombinedMatrix(mapCamera.combined);
  Time.createLights(rayHandler);
}","public GameScreen(Game game){
  this.game=game;
  float w=Gdx.graphics.getWidth();
  float h=Gdx.graphics.getHeight();
  batch=new SpriteBatch();
  camera=new OrthographicCamera(w,h);
  mapCamera=new OrthographicCamera(w,h);
  camera.update();
  mapCamera.update();
  mapRenderer=new OrthogonalTiledMapRenderer(Assets.mainTiledMap,batch);
  camera.translate(w / 2,h / 2);
  mapCamera.translate(1422 + 16,3562 + 24);
  shapeRenderer=new ShapeRenderer();
  level=new Level();
  player=new Player();
  resource=new Resource();
  arrays=new ArrayListsz();
  topMenu=new TopMenu();
  iron=new Iron();
  inv=new Inventory();
  fps=new FPSLogger();
  android=new Android();
  points=new Points();
  collision=new CollisionDetection();
  message=new Messages();
  swordShop=new SwordShop();
  fishing=new Fishing();
  trade=new TradeShop();
  arrays.treeArrayEstablisher();
  if (Gdx.app.getType() == ApplicationType.Android) {
    currentFont=Assets.cgfFont;
  }
 else   currentFont=new BitmapFont();
  world=new World(new Vector2(0,0),true);
  rayHandler=new RayHandler(world);
  Time.createLights(rayHandler);
}",0.96113074204947
59438,"public void draw(float deltaTime){
  Gdx.gl.glClearColor(255f,255f,255f,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  batch.begin();
  batch.setProjectionMatrix(camera.combined);
  level.draw(batch);
  batch.end();
  batch.setProjectionMatrix(mapCamera.combined);
  mapCamera.translate(xRate,yRate);
  mapCamera.update();
  mapRenderer.setView(mapCamera);
  mapRenderer.render();
  batch.begin();
  batch.setProjectionMatrix(mapCamera.combined);
  swordShop.draw(batch);
  trade.draw(batch);
  arrays.drawTreeTrunk(batch);
  player.draw(batch,currentFont);
  arrays.drawBrush(batch,currentFont);
  batch.end();
  rayHandler.updateAndRender();
  batch.begin();
  batch.setProjectionMatrix(camera.combined);
  player.drawTools(batch);
  topMenu.draw(batch,currentFont);
  player.drawTools(batch);
  points.draw(batch);
  message.drawText(currentFont,batch);
  inv.draw(batch,currentFont);
  swordShop.drawInputText(batch,currentFont);
  trade.drawInputText(batch,currentFont);
  batch.end();
  points.drawBars(shapeRenderer);
}","public void draw(float deltaTime){
  Gdx.gl.glClearColor(255f,255f,255f,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  batch.begin();
  batch.setProjectionMatrix(camera.combined);
  level.draw(batch);
  batch.end();
  batch.setProjectionMatrix(mapCamera.combined);
  mapCamera.translate(xRate,yRate);
  mapCamera.update();
  mapRenderer.setView(mapCamera);
  mapRenderer.render();
  batch.begin();
  batch.setProjectionMatrix(mapCamera.combined);
  swordShop.draw(batch);
  trade.draw(batch);
  arrays.drawTreeTrunk(batch);
  player.draw(batch,currentFont);
  batch.setProjectionMatrix(camera.combined);
  player.drawCurrent(batch);
  batch.setProjectionMatrix(mapCamera.combined);
  arrays.drawBrush(batch,currentFont);
  batch.end();
  rayHandler.setCombinedMatrix(mapCamera.combined);
  rayHandler.updateAndRender();
  batch.begin();
  batch.setProjectionMatrix(camera.combined);
  player.drawTools(batch);
  topMenu.draw(batch,currentFont);
  player.drawTools(batch);
  points.draw(batch);
  message.drawText(currentFont,batch);
  inv.draw(batch,currentFont);
  swordShop.drawInputText(batch,currentFont);
  trade.drawInputText(batch,currentFont);
  batch.end();
  shapeRenderer.setProjectionMatrix(camera.combined);
  points.drawBars(shapeRenderer);
}",0.8994755244755245
59439,"private void handleInput(){
  if (Gdx.input.isKeyPressed(Input.Keys.O)) {
    camera.zoom+=0.02;
    mapCamera.zoom+=0.02;
  }
  if (Gdx.input.isKeyPressed(Input.Keys.I)) {
    camera.zoom-=0.02;
    mapCamera.zoom-=0.02;
  }
}","/** 
 * Handle input for zooming in and out 
 */
private void handleInput(){
  if (Gdx.input.isKeyPressed(Input.Keys.O)) {
    camera.zoom+=0.02;
    mapCamera.zoom+=0.02;
  }
  if (Gdx.input.isKeyPressed(Input.Keys.I)) {
    camera.zoom-=0.02;
    mapCamera.zoom-=0.02;
  }
  if (Gdx.input.isKeyPressed(Input.Keys.U)) {
    camera.zoom=1;
    mapCamera.zoom=1;
  }
}",0.7643097643097643
59440,"public static void update(RayHandler rayHandler){
  timeOfDay+=Gdx.graphics.getDeltaTime();
  if (timeOfDay > 840)   timeOfDay=0;
  sunset();
  sunrise();
  rayHandler.setAmbientLight(getAmbientLight());
}","public static void update(RayHandler rayHandler){
  timeOfDay+=Gdx.graphics.getDeltaTime();
  if (timeOfDay > 840)   timeOfDay=0;
  sunset();
  sunrise();
  rayHandler.setAmbientLight(getAmbientLight());
  if (isNight() || isDay()) {
    lightColor.set(255,237,138,colorAlpha);
    for (int i=0; i < pointLights.size; i++) {
      pointLights.get(i).setColor(lightColor);
    }
  }
}",0.6972789115646258
59441,"void draw(SpriteBatch batch){
  if (Tutorial.step >= 7) {
    batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (3 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,70,70);
  }
  batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (0 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,50,50);
  if (Tutorial.step >= 5) {
    batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (2 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,50,50);
  }
  if (Tutorial.step >= 2) {
    batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (1 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,80,80);
  }
  if ((Player.currentDirection == 2 || Player.currentDirection == 3) && !(TopMenu.currentTool == 5) && !(TopMenu.currentTool == 4)) {
    if (Gdx.input.isKeyPressed(Keys.B)) {
      isTooling=true;
      renderer.draw(batch,toolSkel);
    }
 else {
      isTooling=false;
    }
  }
}","void draw(SpriteBatch batch){
  if (Tutorial.step >= 7) {
    batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (3 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,70,70);
  }
  batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (0 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,50,50);
  if (Tutorial.step >= 5) {
    batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (2 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,50,50);
  }
  if (Tutorial.step >= 2) {
    batch.draw(Assets.toolsMasterAtlas.findRegion(""String_Node_Str""),(startOfTopBar + (1 * boxWidth)) + toolX,Gdx.graphics.getHeight() - toolY,80,80);
  }
}",0.8379310344827586
59442,"/** 
 * Scans class for JPA annotations and determines the access type. If no JPA access type can be figured, defaults to AccessType.PROPERTY.
 * @param clazz
 * @return @Nonnull
 */
private AccessType determineAccessType(final Class<?> clazz){
  final Access access=clazz.getAnnotation(Access.class);
  if (access != null) {
    return access.value();
  }
  for (  Method m : clazz.getMethods()) {
    if (Modifier.isStatic(m.getModifiers())) {
      continue;
    }
    String methodName=m.getName();
    if (methodName.startsWith(""String_Node_Str"") && methodName.length() > 3 && m.getParameterTypes().length == 0) {
      if (m.getAnnotation(Id.class) != null) {
        return AccessType.PROPERTY;
      }
    }
  }
  for (Class<?> c=clazz; c != null; c=c.getSuperclass()) {
    for (    Field f : c.getDeclaredFields()) {
      if (Modifier.isStatic(f.getModifiers()) || Modifier.isFinal(f.getModifiers())) {
        continue;
      }
      if (f.getAnnotation(Id.class) != null) {
        return AccessType.FIELD;
      }
    }
  }
  return AccessType.PROPERTY;
}","/** 
 * Scans class for JPA annotations and determines the access type. If no JPA access type can be figured, defaults to AccessType.PROPERTY.
 * @param clazz
 * @return @Nonnull
 */
private AccessType determineAccessType(final Class<?> clazz){
  final Access access=clazz.getAnnotation(Access.class);
  if (access != null) {
    return access.value();
  }
  for (  Method m : clazz.getMethods()) {
    if (Modifier.isStatic(m.getModifiers())) {
      continue;
    }
    String methodName=m.getName();
    if ((methodName.startsWith(""String_Node_Str"") && methodName.length() > 3 && m.getParameterTypes().length == 0) || (methodName.startsWith(""String_Node_Str"") && methodName.length() > 2 && m.getParameterTypes().length == 0)) {
      if (m.getAnnotation(Id.class) != null) {
        return AccessType.PROPERTY;
      }
    }
  }
  for (Class<?> c=clazz; c != null; c=c.getSuperclass()) {
    for (    Field f : c.getDeclaredFields()) {
      if (Modifier.isStatic(f.getModifiers()) || Modifier.isFinal(f.getModifiers())) {
        continue;
      }
      if (f.getAnnotation(Id.class) != null) {
        return AccessType.FIELD;
      }
    }
  }
  return AccessType.PROPERTY;
}",0.9502222222222222
59443,"/** 
 * Get a list of recent trades.
 * @see http://www.reddit.com/r/Bitcoin/comments/1qteyu/any_apis_for_chinese_exchanges/
 * @param since_micros The GMT-relative epoch in microseconds.
 * @param currencyPair The currency pair to query.
 * @return The trades as a list of Trade objects.
 * @throws TradeDataNotAvailableException if the ticker is not available.
 */
public CryptoCoinTrade[] getTrades(long since_micros,CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ this._name);
  }
  String url=""String_Node_Str"" + ""String_Node_Str"" + DOMAIN + ""String_Node_Str""+ getBtcChinaCurrencyPairName(currencyPair);
  throw new NotYetImplementedException(""String_Node_Str"" + this._name);
}","/** 
 * Get a list of recent trades.
 * @see http://www.reddit.com/r/Bitcoin/comments/1qteyu/any_apis_for_chinese_exchanges/
 * @param since_micros The GMT-relative epoch in microseconds.
 * @param currencyPair The currency pair to query.
 * @return The trades as a list of Trade objects.
 * @throws TradeDataNotAvailableException if the trades are not available.
 */
public CryptoCoinTrade[] getTrades(long since_micros,CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ this._name);
  }
  String url=""String_Node_Str"" + ""String_Node_Str"" + DOMAIN + ""String_Node_Str""+ getBtcChinaCurrencyPairName(currencyPair);
  throw new NotYetImplementedException(""String_Node_Str"" + this._name);
}",0.99009900990099
59444,"/** 
 * Create a new btcchina.com depth object from the JSON response from the server.
 * @param jsonResponse The jsonResponse from the btc-e.com server.
 * @param currencyPair The currency pair, that was queried.
 * @param tradeSite The trade site, that delivered the data.
 */
public BtcChinaDepth(JSONObject jsonResponse,CurrencyPair currencyPair,TradeSite tradeSite){
  super(currencyPair,tradeSite);
  parseJSONDepthArrays(jsonResponse);
}","/** 
 * Create a new btcchina.com depth object from the JSON response from the server.
 * @param jsonResponse The jsonResponse from the server.
 * @param currencyPair The currency pair, that was queried.
 * @param tradeSite The trade site, that delivered the data.
 */
public BtcChinaDepth(JSONObject jsonResponse,CurrencyPair currencyPair,TradeSite tradeSite){
  super(currencyPair,tradeSite);
  parseJSONDepthArrays(jsonResponse);
}",0.9886104783599088
59445,"/** 
 * Perform a HTTP get request.
 * @param url The url to query.
 * @param headerlines Optional header lines for the request.
 * @return The reply as a string, or null if an error occured.
 */
public synchronized static String httpGet(String url,Map<String,String> headerlines){
  URL requestURL;
  HttpURLConnection connection;
  String agent=""String_Node_Str"";
  BufferedReader reader;
  String currentLine;
  StringBuffer result=new StringBuffer();
  if (TRUST_ALL_SSL_CERTS && (_trustAllCerts == null)) {
    installAllCertsTruster();
  }
  try {
    requestURL=new URL(url);
  }
 catch (  MalformedURLException me) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + url);
    return null;
  }
  try {
    connection=(HttpURLConnection)requestURL.openConnection();
    connection.setConnectTimeout(15 * 1000);
  }
 catch (  IOException ioe) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + url);
    return null;
  }
  connection.setRequestProperty(""String_Node_Str"",agent);
  if (headerlines != null) {
    for (    Map.Entry<String,String> entry : headerlines.entrySet()) {
      connection.setRequestProperty(entry.getKey(),entry.getValue());
    }
  }
  try {
    connection.setRequestMethod(""String_Node_Str"");
    reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    while ((currentLine=reader.readLine()) != null) {
      result.append(currentLine);
    }
    reader.close();
  }
 catch (  ProtocolException pe) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + pe.toString());
    result=null;
  }
catch (  IOException ioe) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + url + ""String_Node_Str""+ ioe.toString());
    result=null;
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
  }
  return result != null ? result.toString() : null;
}","/** 
 * Perform a HTTP get request.
 * @param url The url to query.
 * @param headerlines Optional header lines for the request.
 * @return The reply as a string, or null if an error occured.
 */
public synchronized static String httpGet(String url,Map<String,String> headerlines){
  URL requestURL;
  HttpURLConnection connection;
  String agent=""String_Node_Str"";
  BufferedReader reader;
  String currentLine;
  StringBuffer result=new StringBuffer();
  if (TRUST_ALL_SSL_CERTS && (_trustAllCerts == null)) {
    installAllCertsTruster();
  }
  try {
    requestURL=new URL(url);
  }
 catch (  MalformedURLException me) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + url);
    return null;
  }
  try {
    connection=(HttpURLConnection)requestURL.openConnection();
    connection.setConnectTimeout(15 * 1000);
  }
 catch (  IOException ioe) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + url);
    return null;
  }
  connection.setRequestProperty(""String_Node_Str"",agent);
  if (headerlines != null) {
    for (    Map.Entry<String,String> entry : headerlines.entrySet()) {
      connection.setRequestProperty(entry.getKey(),entry.getValue());
    }
  }
  try {
    connection.setRequestMethod(""String_Node_Str"");
    reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    while ((currentLine=reader.readLine()) != null) {
      result.append(currentLine);
    }
    reader.close();
  }
 catch (  FileNotFoundException fnfe) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + fnfe.toString());
    result=null;
  }
catch (  ProtocolException pe) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + pe.toString());
    result=null;
  }
catch (  IOException ioe) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + url + ""String_Node_Str""+ ioe.toString());
    result=null;
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
  }
  return result != null ? result.toString() : null;
}",0.9634551495016612
59446,"/** 
 * Get the market depth as a Depth object.
 * @param currencyPair The queried currency pair.
 * @throws TradeDataNotAvailableException if the depth is not available.
 * @see https://www.mintpal.com/api#marketorders
 */
public Depth getDepth(CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ _name);
  }
  JSONObject buyJSON=null, sellJSON=null;
  String url=_url + ""String_Node_Str"" + currencyPair.getCurrency().getName()+ ""String_Node_Str""+ currencyPair.getPaymentCurrency().getName()+ ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url + ""String_Node_Str"");
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      if (jsonResult.containsKey(""String_Node_Str"")) {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ currencyPair.toString()+ ""String_Node_Str""+ jsonResult.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
      }
 else {
        buyJSON=jsonResult;
      }
    }
 catch (    JSONException je) {
      LogUtils.getInstance().getLogger().error(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
 else {
    throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
  }
  try {
    Thread.sleep(getMinimumRequestInterval() / 1000L);
  }
 catch (  InterruptedException ie) {
  }
  requestResult=HttpUtils.httpGet(url + ""String_Node_Str"");
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      if (jsonResult.containsKey(""String_Node_Str"")) {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ currencyPair.toString()+ ""String_Node_Str""+ jsonResult.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
      }
 else {
        sellJSON=jsonResult;
      }
    }
 catch (    JSONException je) {
      LogUtils.getInstance().getLogger().error(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
 else {
    throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
  }
  return new MintPalDepth(buyJSON,sellJSON,currencyPair,this);
}","/** 
 * Get the market depth as a Depth object.
 * @param currencyPair The queried currency pair.
 * @throws TradeDataNotAvailableException if the depth is not available.
 * @see https://www.mintpal.com/api#marketorders
 */
public Depth getDepth(CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ _name);
  }
  JSONObject buyJSON=null, sellJSON=null;
  String url=_url + ""String_Node_Str"" + currencyPair.getCurrency().toString()+ ""String_Node_Str""+ currencyPair.getPaymentCurrency().toString()+ ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url + ""String_Node_Str"");
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      if (jsonResult.containsKey(""String_Node_Str"")) {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ currencyPair.toString()+ ""String_Node_Str""+ jsonResult.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
      }
 else {
        buyJSON=jsonResult;
      }
    }
 catch (    JSONException je) {
      LogUtils.getInstance().getLogger().error(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
 else {
    throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
  }
  try {
    Thread.sleep(getMinimumRequestInterval() / 1000L);
  }
 catch (  InterruptedException ie) {
  }
  requestResult=HttpUtils.httpGet(url + ""String_Node_Str"");
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      if (jsonResult.containsKey(""String_Node_Str"")) {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ currencyPair.toString()+ ""String_Node_Str""+ jsonResult.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
      }
 else {
        sellJSON=jsonResult;
      }
    }
 catch (    JSONException je) {
      LogUtils.getInstance().getLogger().error(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
 else {
    throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
  }
  return new MintPalDepth(buyJSON,sellJSON,currencyPair,this);
}",0.9943904263275992
59447,"/** 
 * Get the market depth as a Depth object.
 * @param currencyPair The queried currency pair.
 * @throws TradeDataNotAvailableException if the depth is not available.
 */
public Depth getDepth(CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ _name);
  }
  String url=_url + ""String_Node_Str"" + currencyPair.getPaymentCurrency().getName()+ ""String_Node_Str""+ currencyPair.getCurrency().getName()+ ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      boolean successFlag=jsonResult.getBoolean(""String_Node_Str"");
      if (successFlag) {
        return new BittrexDepth(jsonResult.getJSONObject(""String_Node_Str""),currencyPair,this);
      }
 else {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ currencyPair.toString()+ ""String_Node_Str""+ jsonResult.getString(""String_Node_Str""));
        return null;
      }
    }
 catch (    JSONException je) {
      System.err.println(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
  throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
}","/** 
 * Get the market depth as a Depth object.
 * @param currencyPair The queried currency pair.
 * @throws TradeDataNotAvailableException if the depth is not available.
 */
public Depth getDepth(CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ _name);
  }
  String url=_url + ""String_Node_Str"" + currencyPair.getPaymentCurrency().toString()+ ""String_Node_Str""+ currencyPair.getCurrency().toString()+ ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      boolean successFlag=jsonResult.getBoolean(""String_Node_Str"");
      if (successFlag) {
        return new BittrexDepth(jsonResult.getJSONObject(""String_Node_Str""),currencyPair,this);
      }
 else {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ currencyPair.toString()+ ""String_Node_Str""+ jsonResult.getString(""String_Node_Str""));
        return null;
      }
    }
 catch (    JSONException je) {
      System.err.println(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
  throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
}",0.9897470950102528
59448,"/** 
 * Create a new connection to the btc-e.com website.
 */
public KrakenClient(){
  super();
  _name=""String_Node_Str"";
  _url=""String_Node_Str"";
  requestSupportedCurrencyPairs();
}","/** 
 * Create a new connection to the btc-e.com website.
 */
public KrakenClient(){
  super();
  _name=""String_Node_Str"";
  _url=""String_Node_Str"";
  if (requestSupportedCurrencyPairs()) {
    _supportedCurrencyPairs=_registeredCurrencyPairNames.keySet().toArray(new CurrencyPair[_registeredCurrencyPairNames.size()]);
  }
 else {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name);
    _supportedCurrencyPairs=new CurrencyPair[0];
  }
}",0.5683229813664596
59449,"/** 
 * Fetch the supported currency pairs from the Kraken server.
 */
private boolean requestSupportedCurrencyPairs(){
  String url=_url + ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    JSONObject jsonResult=JSONObject.fromObject(requestResult);
    if (jsonResult.containsKey(""String_Node_Str"")) {
      JSONObject pairListJSON=jsonResult.getJSONObject(""String_Node_Str"");
      for (Iterator keyIterator=pairListJSON.keys(); keyIterator.hasNext(); ) {
        String krakenPairName=(String)keyIterator.next();
        JSONObject currentCurrencyPairJSON=pairListJSON.getJSONObject(krakenPairName);
        de.andreas_rueckert.trade.Currency currency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.Currency paymentCurrency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.CurrencyPair currentPair=new de.andreas_rueckert.trade.CurrencyPairImpl(currency,paymentCurrency);
        addCurrencyPairName(currentPair,krakenPairName);
        System.out.println(""String_Node_Str"" + currentPair.toString());
      }
    }
  }
  return false;
}","/** 
 * Fetch the supported currency pairs from the Kraken server.
 */
private boolean requestSupportedCurrencyPairs(){
  String url=_url + ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    JSONObject jsonResult=JSONObject.fromObject(requestResult);
    if (jsonResult.containsKey(""String_Node_Str"")) {
      JSONObject pairListJSON=jsonResult.getJSONObject(""String_Node_Str"");
      for (Iterator keyIterator=pairListJSON.keys(); keyIterator.hasNext(); ) {
        String krakenPairName=(String)keyIterator.next();
        JSONObject currentCurrencyPairJSON=pairListJSON.getJSONObject(krakenPairName);
        de.andreas_rueckert.trade.Currency currency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.Currency paymentCurrency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.CurrencyPair currentPair=new de.andreas_rueckert.trade.CurrencyPairImpl(currency,paymentCurrency);
        addCurrencyPairName(currentPair,krakenPairName);
      }
      return true;
    }
  }
  return false;
}",0.963291649858814
59450,"/** 
 * Get the market depth as a Depth object.
 * @param currencyPair The queried currency pair.
 * @throws TradeDataNotAvailableException if the depth is not available.
 */
public Depth getDepth(CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ _name);
  }
  String url=_url + ""String_Node_Str"" + currencyPair.getCurrency().getName()+ ""String_Node_Str""+ currencyPair.getPaymentCurrency().getName()+ ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      boolean successFlag=jsonResult.getBoolean(""String_Node_Str"");
      if (successFlag) {
        return new BittrexDepth(jsonResult.getJSONObject(""String_Node_Str""),currencyPair,this);
      }
 else {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ jsonResult.getString(""String_Node_Str""));
        return null;
      }
    }
 catch (    JSONException je) {
      System.err.println(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
  throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
}","/** 
 * Get the market depth as a Depth object.
 * @param currencyPair The queried currency pair.
 * @throws TradeDataNotAvailableException if the depth is not available.
 */
public Depth getDepth(CurrencyPair currencyPair) throws TradeDataNotAvailableException {
  if (!isSupportedCurrencyPair(currencyPair)) {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.toString() + ""String_Node_Str""+ _name);
  }
  String url=_url + ""String_Node_Str"" + currencyPair.getPaymentCurrency().getName()+ ""String_Node_Str""+ currencyPair.getCurrency().getName()+ ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    try {
      JSONObject jsonResult=JSONObject.fromObject(requestResult);
      boolean successFlag=jsonResult.getBoolean(""String_Node_Str"");
      if (successFlag) {
        return new BittrexDepth(jsonResult.getJSONObject(""String_Node_Str""),currencyPair,this);
      }
 else {
        LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str""+ currencyPair.toString()+ ""String_Node_Str""+ jsonResult.getString(""String_Node_Str""));
        return null;
      }
    }
 catch (    JSONException je) {
      System.err.println(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      throw new TradeDataNotAvailableException(""String_Node_Str"" + this._name);
    }
  }
  throw new TradeDataNotAvailableException(this._name + ""String_Node_Str"");
}",0.9798611111111112
59451,"/** 
 * Fetch the supported currency pairs from the Kraken server.
 */
private final boolean requestSupportedCurrencyPairs(){
  String url=_url + ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    JSONObject jsonResult=JSONObject.fromObject(requestResult);
    if (jsonResult.containsKey(""String_Node_Str"")) {
      JSONObject pairListJSON=jsonResult.getJSONObject(""String_Node_Str"");
      for (Iterator keyIterator=pairListJSON.keys(); keyIterator.hasNext(); ) {
        String krakenPairName=(String)keyIterator.next();
        JSONObject currentCurrencyPairJSON=pairListJSON.getJSONObject(krakenPairName);
        de.andreas_rueckert.trade.Currency currency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.Currency paymentCurrency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.CurrencyPair currentPair=new de.andreas_rueckert.trade.CurrencyPairImpl(currency,paymentCurrency);
        addCurrencyPairName(currentPair,krakenPairName);
        JSONArray jsonFees=currentCurrencyPairJSON.getJSONArray(""String_Node_Str"");
        CurrencyPairFeeSet feeSet=new CurrencyPairFeeSet(currentPair);
        for (int currentFeeIndex=0; currentFeeIndex < jsonFees.size(); ++currentFeeIndex) {
          JSONArray jsonCurrentFee=jsonFees.getJSONArray(currentFeeIndex);
          feeSet.addFee(new Amount(jsonCurrentFee.getDouble(0)),new BigDecimal(jsonCurrentFee.getDouble(1)));
          System.out.println(""String_Node_Str"" + jsonCurrentFee.getDouble(1) + ""String_Node_Str""+ currentPair.toString());
        }
        _currencyPairFees.put(currentPair,feeSet);
      }
      return true;
    }
  }
  return false;
}","/** 
 * Fetch the supported currency pairs from the Kraken server.
 */
private final boolean requestSupportedCurrencyPairs(){
  String url=_url + ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    JSONObject jsonResult=JSONObject.fromObject(requestResult);
    if (jsonResult.containsKey(""String_Node_Str"")) {
      JSONObject pairListJSON=jsonResult.getJSONObject(""String_Node_Str"");
      for (Iterator keyIterator=pairListJSON.keys(); keyIterator.hasNext(); ) {
        String krakenPairName=(String)keyIterator.next();
        JSONObject currentCurrencyPairJSON=pairListJSON.getJSONObject(krakenPairName);
        de.andreas_rueckert.trade.Currency currency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.Currency paymentCurrency=CurrencySymbolMapper.getCurrencyForIso4217Name(currentCurrencyPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.CurrencyPair currentPair=new de.andreas_rueckert.trade.CurrencyPairImpl(currency,paymentCurrency);
        addCurrencyPairName(currentPair,krakenPairName);
        JSONArray jsonFees=currentCurrencyPairJSON.getJSONArray(""String_Node_Str"");
        CurrencyPairFeeSet feeSet=new CurrencyPairFeeSet(currentPair);
        for (int currentFeeIndex=0; currentFeeIndex < jsonFees.size(); ++currentFeeIndex) {
          JSONArray jsonCurrentFee=jsonFees.getJSONArray(currentFeeIndex);
          feeSet.addFee(new Amount(jsonCurrentFee.getDouble(0)),new BigDecimal(jsonCurrentFee.getDouble(1)));
        }
        _currencyPairFees.put(currentPair,feeSet);
      }
      return true;
    }
  }
  return false;
}",0.9653228080067664
59452,"/** 
 * Get the shortest allowed requet interval in microseconds. This is just a dummy implementation to compile the code. API implementations overwrite this method.
 * @return The shortest allowed request interval in microseconds.
 */
public long getMinimumRequestInterval(){
  throw new NotYetImplementedException(""String_Node_Str"");
}","/** 
 * Get the shortest allowed requet interval in microseconds. This is just a dummy implementation to compile the code. API implementations overwrite this method.
 * @return The shortest allowed request interval in microseconds.
 */
public long getMinimumRequestInterval(){
  throw new NotYetImplementedException(""String_Node_Str"" + _name);
}",0.9882697947214076
59453,"/** 
 * Request the markets from the website.
 */
private final Map<CurrencyPair,String> requestMarketIDs(){
  Map<CurrencyPair,String> resultBuffer=new HashMap<CurrencyPair,String>();
  JSONArray JSONresult=(JSONArray)authenticatedHTTPRequest(""String_Node_Str"",null,null);
  for (int i=0; i < JSONresult.size(); i++) {
    JSONObject currentMarket=JSONresult.getJSONObject(i);
    String marketID=""String_Node_Str"" + currentMarket.getInt(""String_Node_Str"");
    Currency currency=CurrencyImpl.findByString(currentMarket.getString(""String_Node_Str""));
    Currency paymentCurrency=CurrencyImpl.findByString(currentMarket.getString(""String_Node_Str""));
    resultBuffer.put(new CurrencyPairImpl(currency,paymentCurrency),marketID);
  }
  return resultBuffer;
}","/** 
 * Request the markets from the website.
 */
private final Map<CurrencyPair,String> requestMarketIDs(){
  Map<CurrencyPair,String> resultBuffer=new HashMap<CurrencyPair,String>();
  JSONArray JSONresult=(JSONArray)authenticatedHTTPRequest(""String_Node_Str"",null,null);
  for (int i=0; i < JSONresult.size(); i++) {
    JSONObject currentMarket=JSONresult.getJSONObject(i);
    String marketID=""String_Node_Str"" + currentMarket.getInt(""String_Node_Str"");
    Currency currency=CurrencyImpl.findByString(currentMarket.getString(""String_Node_Str"").toUpperCase());
    Currency paymentCurrency=CurrencyImpl.findByString(currentMarket.getString(""String_Node_Str"").toUpperCase());
    resultBuffer.put(new CurrencyPairImpl(currency,paymentCurrency),marketID);
  }
  return resultBuffer;
}",0.981888745148771
59454,"/** 
 * Get the withdraw fees as percent(!) for a given currency.
 * @param currency The currency, we want the fee for.
 * @return The withdraw fee as percent(!).
 */
public BigDecimal getWithdrawFee(Currency currency){
  if (_withdrawFees == null) {
    _withdrawFees=new HashMap<Currency,BigDecimal>();
    _withdrawFees.put(CurrencyImpl.n365,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.AC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.AUR,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.BC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.BTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.BTCS,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.CAIX,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.CINNI,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.COMM,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.CTM,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DGB,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DOGE,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DOPE,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DRK,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ECC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.EMC2,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.EMO,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.FAC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.FLT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.GRS,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.GRUMP,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.HIRO,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.HVC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.IVC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.KARM,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.KDC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.LTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.METH,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MINT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MRC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MRS,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MYR,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MZC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.NAUT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.NC2,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.NOBL,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.OLY,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PANDA,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PENG,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PLC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PND,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.POT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.Q2C,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.RBBT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.RIC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SAT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SPA,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SUN,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SYNC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.TAK,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.TES,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.TOP,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.UNO,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.USDe,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.UTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.VTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.WC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.XC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.XLB,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.XXL,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.YC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ZED,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ZEIT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ZET,new BigDecimal(""String_Node_Str""));
  }
  return _withdrawFees.get(currency);
}","/** 
 * Get the withdraw fees as percent(!) for a given currency.
 * @param currency The currency, we want the fee for.
 * @return The withdraw fee as percent(!).
 */
public BigDecimal getWithdrawFee(Currency currency){
  if (_withdrawFees == null) {
    _withdrawFees=new HashMap<Currency,BigDecimal>();
    _withdrawFees.put(CurrencyImpl.n365,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.AC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.AUR,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.BC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.BTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.BTCS,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.CAIX,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.CINNI,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.COMM,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.CTM,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DGB,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DOGE,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DOPE,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.DRK,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ECC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.EMC2,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.EMO,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.FAC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.FLT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.GRS,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.GRUMP,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.HIRO,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.HVC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.IVC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.KARM,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.KDC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.LTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.METH,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MINT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MRC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MRS,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MYR,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.MZC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.NAUT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.NC2,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.NOBL,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.OLY,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PANDA,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PENG,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PLC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.PND,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.POT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.Q2C,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.RBBT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.RIC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SAT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SPA,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SUN,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.SYNC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.TAK,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.TES,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.TOP,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.UNO,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.USDE,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.UTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.VTC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.WC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.XC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.XLB,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.XXL,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.YC,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ZED,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ZEIT,new BigDecimal(""String_Node_Str""));
    _withdrawFees.put(CurrencyImpl.ZET,new BigDecimal(""String_Node_Str""));
  }
  return _withdrawFees.get(currency);
}",0.9998064640990904
59455,"/** 
 * Request the supported currency pairs from the bittrex server.
 * @return true, if the currencies were returned, false in case of an error.
 */
private final boolean requestSupportedCurrencyPairs(){
  String url=_url + ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    try {
      JSONArray jsonResult=JSONArray.fromObject(requestResult);
      List<CurrencyPair> resultBuffer=new ArrayList<CurrencyPair>();
      for (int currentPairIndex=0; currentPairIndex < jsonResult.size(); ++currentPairIndex) {
        JSONObject currentPairJSON=jsonResult.getJSONObject(currentPairIndex);
        de.andreas_rueckert.trade.Currency currency=de.andreas_rueckert.trade.CurrencyImpl.findByString(currentPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.Currency paymentCurrency=de.andreas_rueckert.trade.CurrencyImpl.findByString(currentPairJSON.getString(""String_Node_Str""));
        de.andreas_rueckert.trade.CurrencyPair currentPair=new de.andreas_rueckert.trade.CurrencyPairImpl(currency,paymentCurrency);
        resultBuffer.add(currentPair);
      }
      _supportedCurrencyPairs=resultBuffer.toArray(new CurrencyPair[resultBuffer.size()]);
      return true;
    }
 catch (    JSONException je) {
      LogUtils.getInstance().getLogger().error(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      return false;
    }
  }
 else {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str"");
  }
  return false;
}","/** 
 * Request the supported currency pairs from the bittrex server.
 * @return true, if the currencies were returned, false in case of an error.
 */
private final boolean requestSupportedCurrencyPairs(){
  String url=_url + ""String_Node_Str"";
  String requestResult=HttpUtils.httpGet(url);
  if (requestResult != null) {
    try {
      JSONArray jsonResult=JSONArray.fromObject(requestResult);
      List<CurrencyPair> resultBuffer=new ArrayList<CurrencyPair>();
      for (int currentPairIndex=0; currentPairIndex < jsonResult.size(); ++currentPairIndex) {
        JSONObject currentPairJSON=jsonResult.getJSONObject(currentPairIndex);
        de.andreas_rueckert.trade.Currency currency=de.andreas_rueckert.trade.CurrencyImpl.findByString(currentPairJSON.getString(""String_Node_Str"").toUpperCase());
        de.andreas_rueckert.trade.Currency paymentCurrency=de.andreas_rueckert.trade.CurrencyImpl.findByString(currentPairJSON.getString(""String_Node_Str"").toUpperCase());
        de.andreas_rueckert.trade.CurrencyPair currentPair=new de.andreas_rueckert.trade.CurrencyPairImpl(currency,paymentCurrency);
        resultBuffer.add(currentPair);
      }
      _supportedCurrencyPairs=resultBuffer.toArray(new CurrencyPair[resultBuffer.size()]);
      return true;
    }
 catch (    JSONException je) {
      LogUtils.getInstance().getLogger().error(""String_Node_Str"" + this._name + ""String_Node_Str""+ je.toString());
      return false;
    }
  }
 else {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + _name + ""String_Node_Str"");
  }
  return false;
}",0.9910141206675224
59456,"/** 
 * Create a new MintPal depth object from the JSON responses from the server.
 * @param jsonBuy The buy orders as a JSON object.
 * @param jsonSell The sell orders as a JSON object.
 * @param currencyPair The currency pair, that was queried.
 * @param tradeSite The trade site, that delivered the data.
 */
public MintPalDepth(JSONObject jsonBuy,JSONObject jsonSell,CurrencyPair currencyPair,TradeSite tradeSite){
  super(currencyPair,tradeSite);
  JSONArray buys=jsonBuy.getJSONArray(""String_Node_Str"");
  for (int i=0; i < buys.size(); ++i) {
    JSONObject buyOrder=buys.getJSONObject(i);
    _buys.add(new DepthOrderImpl(OrderType.BUY,new Price(buyOrder.getDouble(""String_Node_Str"")),_currencyPair,new Amount(buyOrder.getString(""String_Node_Str""))));
  }
  Collections.sort(_buys);
  JSONArray sells=jsonSell.getJSONArray(""String_Node_Str"");
  for (int i=0; i < sells.size(); ++i) {
    JSONObject sellOrder=buys.getJSONObject(i);
    _sells.add(new DepthOrderImpl(OrderType.SELL,new Price(sellOrder.getDouble(""String_Node_Str"")),_currencyPair,new Amount(sellOrder.getString(""String_Node_Str""))));
  }
  Collections.sort(_sells);
}","/** 
 * Create a new MintPal depth object from the JSON responses from the server.
 * @param jsonBuy The buy orders as a JSON object.
 * @param jsonSell The sell orders as a JSON object.
 * @param currencyPair The currency pair, that was queried.
 * @param tradeSite The trade site, that delivered the data.
 */
public MintPalDepth(JSONObject jsonBuy,JSONObject jsonSell,CurrencyPair currencyPair,TradeSite tradeSite){
  super(currencyPair,tradeSite);
  JSONArray buys=jsonBuy.getJSONArray(""String_Node_Str"");
  for (int i=0; i < buys.size(); ++i) {
    JSONObject buyOrder=buys.getJSONObject(i);
    _buys.add(new DepthOrderImpl(OrderType.BUY,new Price(buyOrder.getDouble(""String_Node_Str"")),_currencyPair,new Amount(buyOrder.getString(""String_Node_Str""))));
  }
  Collections.sort(_buys);
  JSONArray sells=jsonSell.getJSONArray(""String_Node_Str"");
  for (int i=0; i < sells.size(); ++i) {
    JSONObject sellOrder=sells.getJSONObject(i);
    _sells.add(new DepthOrderImpl(OrderType.SELL,new Price(sellOrder.getDouble(""String_Node_Str"")),_currencyPair,new Amount(sellOrder.getString(""String_Node_Str""))));
  }
  Collections.sort(_sells);
}",0.9969311705392372
59457,"/** 
 * Compute the EMA over a timespan before the a given end time.
 * @see http://www.iexplain.org/ema-how-to-calculate/
 * @see http://stockcharts.com/help/doku.php?id=chart_school:technical_indicators:moving_averages#exponential_moving_a
 * @param trades The list of trades.
 * @param startTime The start time as microseconds.
 * @param endTime The end time as microseconds.
 * @param timePeriod The time period as microseconds (day, hour etc).
 * @return The EMA of the trade prices.
 * @throws NotEnoughTradesException if there are not enough trades in the array to perform the computation.
 */
public Price ema(Trade[] trades,long startTime,long endTime,long timePeriod) throws NotEnoughTradesException {
  long timeInterval=endTime - startTime;
  int nPeriods=(int)(timeInterval / timePeriod);
  if (nPeriods == 0) {
    return null;
  }
  double[] weights=new double[nPeriods + 1];
  weights[weights.length - 1]=0.0d;
  for (int currentTimePeriod=weights.length - 2; currentTimePeriod >= 0; --currentTimePeriod) {
    weights[currentTimePeriod]=(1.0d - weights[currentTimePeriod + 1]) * (2.0d / (currentTimePeriod + 2));
  }
  Price totalPrice=new Price(""String_Node_Str"");
  double totalWeight=0.0d;
  for (int index=0; index < trades.length; ++index) {
    Trade currentTrade=trades[index];
    long currentTimestamp=currentTrade.getTimestamp();
    if ((startTime == -1L) || (currentTimestamp >= startTime)) {
      if ((endTime == -1L) || (currentTimestamp <= endTime)) {
        long endDistance=endTime - currentTimestamp;
        int currentTimePeriod=(int)(endDistance / timePeriod);
        double weight=weights[weights.length - 2 - currentTimePeriod];
        totalPrice=new Price(totalPrice.add(currentTrade.getPrice().multiply(new BigDecimal(weight))));
        totalWeight+=weight;
      }
    }
  }
  return new Price(totalPrice.divide(new BigDecimal(totalWeight,MathContext.DECIMAL128)));
}","/** 
 * Compute the EMA over a timespan before the a given end time.
 * @see http://www.iexplain.org/ema-how-to-calculate/
 * @see http://stockcharts.com/help/doku.php?id=chart_school:technical_indicators:moving_averages#exponential_moving_a
 * @param trades The list of trades.
 * @param startTime The start time as microseconds.
 * @param endTime The end time as microseconds.
 * @param timePeriod The time period as microseconds (day, hour etc).
 * @return The EMA of the trade prices.
 * @throws NotEnoughTradesException if there are not enough trades in the array to perform the computation.
 */
public Price ema(Trade[] trades,long startTime,long endTime,long timePeriod) throws NotEnoughTradesException {
  long timeInterval=endTime - startTime;
  int nPeriods=(int)(timeInterval / timePeriod);
  if (nPeriods == 0) {
    return null;
  }
  double[] weights=new double[nPeriods + 1];
  weights[weights.length - 1]=0.0d;
  for (int currentTimePeriod=weights.length - 2; currentTimePeriod >= 0; --currentTimePeriod) {
    weights[currentTimePeriod]=(1.0d - weights[currentTimePeriod + 1]) * (2.0d / (currentTimePeriod + 2));
  }
  Price totalPrice=new Price(""String_Node_Str"");
  double totalWeight=0.0d;
  for (int index=0; index < trades.length; ++index) {
    Trade currentTrade=trades[index];
    long currentTimestamp=currentTrade.getTimestamp();
    if ((startTime == -1L) || (currentTimestamp >= startTime)) {
      if ((endTime == -1L) || (currentTimestamp <= endTime)) {
        long endDistance=endTime - currentTimestamp;
        int currentTimePeriod=(int)(endDistance / timePeriod);
        double weight=weights[weights.length - 2 - currentTimePeriod];
        totalPrice=new Price(totalPrice.add(currentTrade.getPrice().multiply(new BigDecimal(weight))));
        totalWeight+=weight;
      }
    }
  }
  return new Price(totalPrice.divide(new BigDecimal(totalWeight,MathContext.DECIMAL128),MathContext.DECIMAL128));
}",0.9940306254866338
59458,"/** 
 * Gets the fee for a currency pair trade, 
 * @param the fee
 * @return
 */
public BigDecimal getFeeForCurrencyPairTrade(CurrencyPair pair){
  for (  CurrencyPair currencyPair : _supportedCurrencyPairs) {
    if (currencyPair.getCurrency().equals(pair.getCurrency()) && currencyPair.getPaymentCurrency().equals(pair.getPaymentCurrency())) {
      return currencyPairFeeTrade.get(pair);
    }
  }
  return null;
}","/** 
 * Gets the fee for a currency pair trade, 
 * @param the fee
 * @return
 */
public BigDecimal getFeeForCurrencyPairTrade(CurrencyPair pair){
  for (  CurrencyPair currencyPair : _supportedCurrencyPairs) {
    if (currencyPair.getCurrency().equals(pair.getCurrency()) && currencyPair.getPaymentCurrency().equals(pair.getPaymentCurrency())) {
      return currencyPairFeeTrade.get(currencyPair);
    }
  }
  return null;
}",0.9881516587677726
59459,"/** 
 * Format the price for a given currency pair.
 * @param price The price to format.
 * @param currencyPair The currency pair to trade.
 */
private final String formatPrice(BigDecimal price,CurrencyPair currencyPair){
  if (currencyPair.getCurrency().equals(CurrencyImpl.BTC) && currencyPair.getPaymentCurrency().equals(CurrencyImpl.USD)) {
    DecimalFormat btcDecimalFormat=new DecimalFormat(""String_Node_Str"");
    return btcDecimalFormat.format(price);
  }
 else   if (currencyPair.getCurrency().equals(CurrencyImpl.LTC)) {
    DecimalFormat ltcDecimalFormat=new DecimalFormat(""String_Node_Str"");
    return ltcDecimalFormat.format(price);
  }
 else {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.getName() + ""String_Node_Str"");
  }
}","/** 
 * Format the price for a given currency pair.
 * @param price The price to format.
 * @param currencyPair The currency pair to trade.
 */
private final String formatPrice(BigDecimal price,CurrencyPair currencyPair){
  if (currencyPair.getCurrency().equals(CurrencyImpl.BTC) && currencyPair.getPaymentCurrency().equals(CurrencyImpl.USD)) {
    DecimalFormat btcDecimalFormat=new DecimalFormat(""String_Node_Str"");
    return btcDecimalFormat.format(price);
  }
 else   if (currencyPair.getCurrency().equals(CurrencyImpl.LTC)) {
    DecimalFormat ltcDecimalFormat=new DecimalFormat(""String_Node_Str"",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
    return ltcDecimalFormat.format(price);
  }
 else {
    throw new CurrencyNotSupportedException(""String_Node_Str"" + currencyPair.getName() + ""String_Node_Str"");
  }
}",0.9693174702567312
59460,"/** 
 * Get the fee for an order in the resulting currency.
 * @param order The order to use for the fee computation.
 * @return The fee in the resulting currency (currency value for buy, payment currency value for sell).
 */
public Price getFeeForOrder(SiteOrder order){
  if (order instanceof WithdrawOrder) {
    if (order.getCurrencyPair().getCurrency().equals(CurrencyImpl.BTC)) {
      return new Price(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
      throw new CurrencyNotSupportedException(""String_Node_Str"" + order.toString());
    }
  }
 else   if (order instanceof DepositOrder) {
    Currency depositedCurrency=((DepositOrder)order).getCurrency();
    if (depositedCurrency.equals(CurrencyImpl.BTC)) {
      return new Price(""String_Node_Str"",CurrencyImpl.BTC);
    }
 else {
      throw new NotYetImplementedException(""String_Node_Str"" + getName() + ""String_Node_Str""+ depositedCurrency.getName());
    }
  }
 else {
    return super.getFeeForOrder(order);
  }
}","/** 
 * Get the fee for an order in the resulting currency.
 * @param order The order to use for the fee computation.
 * @return The fee in the resulting currency (currency value for buy, payment currency value for sell).
 */
public Price getFeeForOrder(SiteOrder order){
  if (order instanceof WithdrawOrder) {
    if (order.getCurrencyPair().getCurrency().equals(CurrencyImpl.BTC)) {
      return new Price(""String_Node_Str"");
    }
 else {
      throw new CurrencyNotSupportedException(""String_Node_Str"" + order.toString());
    }
  }
 else   if (order instanceof DepositOrder) {
    Currency depositedCurrency=((DepositOrder)order).getCurrency();
    if (depositedCurrency.equals(CurrencyImpl.BTC)) {
      return new Price(""String_Node_Str"",CurrencyImpl.BTC);
    }
 else {
      throw new NotYetImplementedException(""String_Node_Str"" + getName() + ""String_Node_Str""+ depositedCurrency.getName());
    }
  }
 else {
    return super.getFeeForOrder(order);
  }
}",0.5776428932726353
59461,"/** 
 * Format an amount btc-e compliant.
 * @param amount The amount to format.
 */
private final String formatAmount(BigDecimal amount){
  DecimalFormat amountFormat=new DecimalFormat(""String_Node_Str"");
  return amountFormat.format(amount);
}","/** 
 * Format an amount btc-e compliant.
 * @param amount The amount to format.
 */
private final String formatAmount(BigDecimal amount){
  DecimalFormat amountFormat=new DecimalFormat(""String_Node_Str"",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
  return amountFormat.format(amount);
}",0.9090909090909092
59462,"/** 
 * Check all the orders and change their status eventually.
 */
void updateOrders(){
  boolean continueChecks=true;
  while (continueChecks) {
    continueChecks=false;
    for (int orderIndex=0; orderIndex < getOrders().values().size(); ++orderIndex) {
      Order currentOrder=getOrders().get(orderIndex);
      if (currentOrder.hasDependencies()) {
        for (int currentDependencyIndex=0; currentDependencyIndex < currentOrder.getDependencies().size(); ) {
          if (currentOrder.getDependencies().get(currentDependencyIndex).getStatus() == OrderStatus.FILLED) {
            currentOrder.getDependencies().remove(currentDependencyIndex);
            continueChecks=true;
          }
 else {
            ++currentDependencyIndex;
          }
        }
        if (!currentOrder.hasDependencies()) {
          executeOrder(currentOrder);
        }
      }
    }
  }
}","/** 
 * Check all the orders and change their status eventually.
 */
void updateOrders(){
  boolean continueChecks=true;
  while (continueChecks) {
    continueChecks=false;
    for (int orderIndex=0; orderIndex < getOrders().size(); ++orderIndex) {
      String orderKey=(String)(getOrders().keySet().toArray()[orderIndex]);
      Order currentOrder=getOrders().get(orderKey);
      if (currentOrder == null) {
        System.out.println(""String_Node_Str"");
      }
      if (currentOrder.hasDependencies()) {
        for (int currentDependencyIndex=0; currentDependencyIndex < currentOrder.getDependencies().size(); ) {
          if (currentOrder.getDependencies().get(currentDependencyIndex).getStatus() == OrderStatus.FILLED) {
            currentOrder.getDependencies().remove(currentDependencyIndex);
            continueChecks=true;
          }
 else {
            ++currentDependencyIndex;
          }
        }
        if (!currentOrder.hasDependencies()) {
          executeOrder(currentOrder);
        }
      }
    }
  }
}",0.8725182863113897
59463,"/** 
 * Private constructor for singleton pattern).
 */
private ModuleLoader(){
  for (  File currentJar : getModuleJars()) {
    loadClassesFromJar(currentJar);
  }
}","/** 
 * Private constructor for singleton pattern).
 */
private ModuleLoader(){
  File[] moduleJars=getModuleJars();
  if (moduleJars != null) {
    for (    File currentJar : getModuleJars()) {
      LogUtils.getInstance().getLogger().info(""String_Node_Str"" + currentJar.getName());
      loadClassesFromJar(currentJar);
    }
  }
 else {
    LogUtils.getInstance().getLogger().warn(""String_Node_Str"");
  }
}",0.5659722222222222
59464,"/** 
 * Get all the jars from the modules as an array of files.
 * @return All the module jars as an array of files.
 */
private File[] getModuleJars(){
  File extDir=new File(getJarLocation(),""String_Node_Str"");
  return extDir.listFiles(new JarFilenameFilter());
}","/** 
 * Get all the jars from the modules as an array of files.
 * @return All the module jars as an array of files.
 */
private File[] getModuleJars(){
  File extDir=new File(getJarLocation(),""String_Node_Str"");
  if (!extDir.isDirectory()) {
    LogUtils.getInstance().getLogger().error(extDir.getName() + ""String_Node_Str"");
    return null;
  }
  return extDir.listFiles(new JarFilenameFilter());
}",0.7754491017964071
59465,"/** 
 * Get the location of the jar, this ModuleLoader is in. So we can compute the ext/ directory relative to this jar file.
 * @see http://stackoverflow.com/questions/320542/how-to-get-the-path-of-a-running-jar-file
 * @return The location of this loaded jar file.
 */
private File getJarLocation(){
  String path=ModuleLoader.class.getProtectionDomain().getCodeSource().getLocation().getPath();
  try {
    String decodedPath=URLDecoder.decode(path,""String_Node_Str"");
    return new File(decodedPath);
  }
 catch (  UnsupportedEncodingException uee) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + uee);
  }
  return null;
}","/** 
 * Get the location of the jar, this ModuleLoader is in. So we can compute the ext/ directory relative to this jar file.
 * @see http://stackoverflow.com/questions/320542/how-to-get-the-path-of-a-running-jar-file
 * @return The location of this loaded jar file.
 */
private File getJarLocation(){
  String path=ModuleLoader.class.getProtectionDomain().getCodeSource().getLocation().getPath();
  try {
    String decodedPath=URLDecoder.decode(path,""String_Node_Str"");
    return new File(decodedPath).getParentFile();
  }
 catch (  UnsupportedEncodingException uee) {
    LogUtils.getInstance().getLogger().error(""String_Node_Str"" + uee);
  }
  return null;
}",0.9877862595419848
59466,"/** 
 * Logs method calls, such as module runs, console commands, and plugin actions 
 */
public void logMethodCall(String methodName,Object[] params){
  try {
    if (methodName.startsWith(""String_Node_Str"")) {
      if (methodName.endsWith(""String_Node_Str""))       logConsole(params[0].toString(),params[1].toString(),true);
 else       if (methodName.endsWith(""String_Node_Str""))       logConsole(params[0].toString(),params[1].toString(),true);
 else       if (methodName.endsWith(""String_Node_Str""))       logConsole(params[0].toString(),""String_Node_Str"" + params[1].toString(),true);
 else       if (methodName.endsWith(""String_Node_Str""))       activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str""+ params[1]+ ""String_Node_Str""+ params[2]);
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      logConsole(""String_Node_Str"" + params[0].toString(),params[1].toString(),true);
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]);
    }
  }
 catch (  MsfException mex) {
  }
}","/** 
 * Logs method calls, such as module runs, console commands, and plugin actions 
 */
public void logMethodCall(String methodName,Object[] params){
  try {
    if (methodName.startsWith(""String_Node_Str"")) {
      if (methodName.endsWith(""String_Node_Str""))       logConsole(params[0],params[1].toString(),true);
 else       if (methodName.endsWith(""String_Node_Str""))       logConsole(params[0],params[1].toString(),true);
 else       if (methodName.endsWith(""String_Node_Str""))       logConsole(params[0],""String_Node_Str"" + params[1].toString(),true);
 else       if (methodName.endsWith(""String_Node_Str""))       activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str""+ params[1]+ ""String_Node_Str""+ params[2]);
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      logConsole(""String_Node_Str"" + params[0],params[1].toString(),true);
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]+ ""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + params[0]);
    }
  }
 catch (  MsfException mex) {
  }
}",0.9864615384615384
59467,"/** 
 * Logs received data 
 */
public void logMethodReturn(String methodName,Object[] params,Object result){
  try {
    if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + ((Map)result).get(""String_Node_Str"")+ ""String_Node_Str"");
      sessions.put(""String_Node_Str"" + ((Map)result).get(""String_Node_Str""),result);
      ((Map)result).put(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      List consoles=((List)((Map)result).get(""String_Node_Str""));
      for (      Object console : consoles) {
        activityLog.add(now() + ""String_Node_Str"" + ((Map)console).get(""String_Node_Str"")+ ""String_Node_Str"");
        sessions.put(""String_Node_Str"" + ((Map)console).get(""String_Node_Str""),result);
        ((Map)console).put(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      logConsole(""String_Node_Str"" + params[0],new String(RpcConnection.getData((Map)result)),false);
    }
 else     if (methodName.startsWith(""String_Node_Str"") && methodName.endsWith(""String_Node_Str"")) {
      logConsole(params[0].toString(),new String(RpcConnection.getData((Map)result)),false);
    }
  }
 catch (  MsfException mex) {
  }
}","/** 
 * Logs received data 
 */
public void logMethodReturn(String methodName,Object[] params,Object result){
  try {
    if (methodName.equals(""String_Node_Str"")) {
      activityLog.add(now() + ""String_Node_Str"" + ((Map)result).get(""String_Node_Str"")+ ""String_Node_Str"");
      sessions.put(""String_Node_Str"" + ((Map)result).get(""String_Node_Str""),result);
      ((Map)result).put(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      List consoles=((List)((Map)result).get(""String_Node_Str""));
      for (      Object console : consoles) {
        activityLog.add(now() + ""String_Node_Str"" + ((Map)console).get(""String_Node_Str"")+ ""String_Node_Str"");
        sessions.put(""String_Node_Str"" + ((Map)console).get(""String_Node_Str""),result);
        ((Map)console).put(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else     if (methodName.equals(""String_Node_Str"")) {
      logConsole(""String_Node_Str"" + params[0],new String(RpcConnection.getData((Map)result)),false);
    }
 else     if (methodName.startsWith(""String_Node_Str"") && methodName.endsWith(""String_Node_Str"")) {
      logConsole(params[0],new String(RpcConnection.getData((Map)result)),false);
    }
  }
 catch (  MsfException mex) {
  }
}",0.9956538917423944
59468,"/** 
 * Record console communication 
 */
public void logConsole(String sessionId,String message,boolean sending){
  Map session=(Map)sessions.get(sessionId);
  if (session == null || message.length() == 0)   return;
  if ((message.indexOf('\n') - message.length()) % message.length() != -1)   message=""String_Node_Str"" + message;
  ArrayList consoleLog=(ArrayList)session.get(""String_Node_Str"");
  if (consoleLog == null) {
    consoleLog=new ArrayList(30);
    session.put(""String_Node_Str"",consoleLog);
  }
  message=htmlEntities(message);
  if (sending)   consoleLog.add(now() + ""String_Node_Str"" + message);
 else   consoleLog.add(now() + ""String_Node_Str"" + message);
}","/** 
 * Record console communication 
 */
public void logConsole(Object sessionId,String message,boolean sending){
  Map session=(Map)sessions.get(sessionId);
  if (session == null || message.length() == 0)   return;
  if ((message.indexOf('\n') - message.length()) % message.length() != -1)   message=""String_Node_Str"" + message;
  ArrayList consoleLog=(ArrayList)session.get(""String_Node_Str"");
  if (consoleLog == null) {
    consoleLog=new ArrayList(30);
    session.put(""String_Node_Str"",consoleLog);
  }
  message=htmlEntities(message);
  if (sending)   consoleLog.add(now() + ""String_Node_Str"" + message);
 else   consoleLog.add(now() + ""String_Node_Str"" + message);
}",0.9911111111111112
59469,"@Test public void testCallbacks() throws InterruptedException {
  Context appContext=InstrumentationRegistry.getTargetContext();
  CallbackDispatcher dispatcher=new DefaultCallbackDispatcher(appContext);
  CallbackCounter callbackCounter=new CallbackCounter();
  dispatcher.registerCallback(callbackCounter);
  dispatcher.dispatchStart(""String_Node_Str"");
  dispatcher.dispatchProgress(""String_Node_Str"",10,100);
  dispatcher.dispatchSuccess(appContext,""String_Node_Str"",Collections.singletonMap(""String_Node_Str"",""String_Node_Str""));
  dispatcher.dispatchError(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,null));
  dispatcher.dispatchReschedule(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.FILE_DOES_NOT_EXIST,null));
  Thread.sleep(DISPATCH_SLEEP_MILLIS);
  assertEquals(1,callbackCounter.start);
  assertEquals(1,callbackCounter.progress);
  assertEquals(1,callbackCounter.success);
  assertEquals(1,callbackCounter.error);
  assertEquals(1,callbackCounter.reschedule);
  dispatcher.dispatchProgress(""String_Node_Str"",10,100);
  dispatcher.dispatchSuccess(appContext,""String_Node_Str"",Collections.singletonMap(""String_Node_Str"",""String_Node_Str""));
  dispatcher.dispatchError(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,null));
  Thread.sleep(DISPATCH_SLEEP_MILLIS);
  assertEquals(2,callbackCounter.progress);
  assertEquals(2,callbackCounter.success);
  assertEquals(2,callbackCounter.error);
  dispatcher.unregisterCallback(callbackCounter);
  dispatcher.dispatchProgress(""String_Node_Str"",10,100);
  dispatcher.dispatchSuccess(appContext,""String_Node_Str"",Collections.singletonMap(""String_Node_Str"",""String_Node_Str""));
  dispatcher.dispatchError(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,null));
  Thread.sleep(DISPATCH_SLEEP_MILLIS);
  assertEquals(2,callbackCounter.progress);
  assertEquals(2,callbackCounter.success);
  assertEquals(2,callbackCounter.error);
}","@Test public void testCallbacks() throws InterruptedException {
  Context appContext=InstrumentationRegistry.getTargetContext();
  CallbackDispatcher dispatcher=new DefaultCallbackDispatcher(appContext);
  CallbackCounter callbackCounter=new CallbackCounter();
  CallbackCounter oneRequestCallbackCounter=new CallbackCounter();
  dispatcher.registerCallback(callbackCounter);
  dispatcher.registerCallback(""String_Node_Str"",oneRequestCallbackCounter);
  dispatcher.dispatchStart(""String_Node_Str"");
  dispatcher.dispatchProgress(""String_Node_Str"",10,100);
  dispatcher.dispatchSuccess(appContext,""String_Node_Str"",Collections.singletonMap(""String_Node_Str"",""String_Node_Str""));
  dispatcher.dispatchError(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,null));
  dispatcher.dispatchReschedule(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.FILE_DOES_NOT_EXIST,null));
  Thread.sleep(DISPATCH_SLEEP_MILLIS);
  assertEquals(1,oneRequestCallbackCounter.start);
  assertEquals(1,oneRequestCallbackCounter.progress);
  assertEquals(1,oneRequestCallbackCounter.success);
  assertEquals(1,oneRequestCallbackCounter.error);
  assertEquals(1,oneRequestCallbackCounter.reschedule);
  assertEquals(1,callbackCounter.start);
  assertEquals(1,callbackCounter.progress);
  assertEquals(1,callbackCounter.success);
  assertEquals(1,callbackCounter.error);
  assertEquals(1,callbackCounter.reschedule);
  dispatcher.dispatchProgress(""String_Node_Str"",10,100);
  dispatcher.dispatchSuccess(appContext,""String_Node_Str"",Collections.singletonMap(""String_Node_Str"",""String_Node_Str""));
  dispatcher.dispatchError(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,null));
  Thread.sleep(DISPATCH_SLEEP_MILLIS);
  assertEquals(2,callbackCounter.progress);
  assertEquals(2,callbackCounter.success);
  assertEquals(2,callbackCounter.error);
  dispatcher.unregisterCallback(callbackCounter);
  dispatcher.dispatchProgress(""String_Node_Str"",10,100);
  dispatcher.dispatchSuccess(appContext,""String_Node_Str"",Collections.singletonMap(""String_Node_Str"",""String_Node_Str""));
  dispatcher.dispatchError(appContext,""String_Node_Str"",new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,null));
  Thread.sleep(DISPATCH_SLEEP_MILLIS);
  assertEquals(1,oneRequestCallbackCounter.start);
  assertEquals(1,oneRequestCallbackCounter.progress);
  assertEquals(1,oneRequestCallbackCounter.success);
  assertEquals(1,oneRequestCallbackCounter.error);
  assertEquals(1,oneRequestCallbackCounter.reschedule);
  assertEquals(2,callbackCounter.progress);
  assertEquals(2,callbackCounter.success);
  assertEquals(2,callbackCounter.error);
}",0.842286947141316
59470,"/** 
 * {@inheritDoc}
 */
@Override public void executeRequestsNow(int howMany){
  int started=0;
  for (  JobRequest jobRequest : JobManager.instance().getAllJobRequests()) {
    if (isSoonButNotImmediate(jobRequest)) {
      JobRequest.Builder builder=jobRequest.cancelAndEdit();
      builder.setExecutionWindow(10000,jobRequest.getEndMs()).build().schedule();
      started++;
    }
    if (started == howMany) {
      break;
    }
  }
  Logger.d(TAG,String.format(""String_Node_Str"",started));
}","/** 
 * {@inheritDoc}
 */
@Override public void executeRequestsNow(int howMany){
  int started=0;
  for (  JobRequest jobRequest : JobManager.instance().getAllJobRequests()) {
    if (isSoonButNotImmediate(jobRequest)) {
      JobRequest.Builder builder=jobRequest.cancelAndEdit();
      long endMillis=Math.max(jobRequest.getEndMs(),RUN_NOW_TIME_WINDOW_END);
      builder.setExecutionWindow(RUN_NOW_TIME_WINDOW_START,endMillis).build().schedule();
      started++;
    }
    if (started == howMany) {
      break;
    }
  }
  Logger.d(TAG,String.format(""String_Node_Str"",started));
}",0.8726937269372693
59471,"private boolean isSoonButNotImmediate(JobRequest jobRequest){
  return jobRequest.getStartMs() < SOON_THRESHOLD;
}","private boolean isSoonButNotImmediate(JobRequest jobRequest){
  return IMMEDIATE_THRESHOLD < jobRequest.getStartMs() && jobRequest.getStartMs() < SOON_THRESHOLD;
}",0.8231046931407943
59472,"/** 
 * {@inheritDoc}
 */
@Override public UploadStatus processRequest(Context context,RequestParams params){
  final String requestId=params.getString(""String_Node_Str"",null);
  final String uri=params.getString(""String_Node_Str"",null);
  final String optionsAsString=params.getString(""String_Node_Str"",null);
  final int maxErrorRetries=params.getInt(""String_Node_Str"",MediaManager.get().getGlobalUploadPolicy().getMaxErrorRetries());
  final int errorCount=params.getInt(""String_Node_Str"",0);
  Logger.i(TAG,String.format(""String_Node_Str"",requestId));
  if (errorCount > maxErrorRetries) {
    Logger.d(TAG,String.format(""String_Node_Str"",requestId,errorCount,maxErrorRetries));
    return FAILURE;
  }
  callbackDispatcher.dispatchStart(requestId);
  callbackDispatcher.wakeListenerServiceWithRequestStart(context,requestId);
  UploadStatus requestResultStatus;
  final Context appContext=context.getApplicationContext();
  Map resultData=null;
  boolean optionsLoadedSuccessfully=false;
  Map<String,Object> options=null;
  try {
    options=UploadRequest.decodeOptions(optionsAsString);
    optionsLoadedSuccessfully=true;
  }
 catch (  Exception e) {
    Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
  }
  ErrorInfo error=null;
  if (optionsLoadedSuccessfully) {
    if (StringUtils.isNotBlank(uri)) {
      Payload payload=PayloadFactory.fromUri(uri);
      if (payload != null) {
        int maxConcurrentRequests=MediaManager.get().getGlobalUploadPolicy().getMaxConcurrentRequests();
        int runningJobsCount=runningJobs.get();
        if (runningJobsCount < maxConcurrentRequests) {
          try {
            runningJobs.incrementAndGet();
            resultData=doProcess(requestId,appContext,options,params,payload);
            requestResultStatus=SUCCESS;
          }
 catch (          FileNotFoundException e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            requestResultStatus=FAILURE;
            error=new ErrorInfo(ErrorInfo.FILE_DOES_NOT_EXIST,e.getMessage());
          }
catch (          LocalUriNotFoundException e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            requestResultStatus=FAILURE;
            error=new ErrorInfo(ErrorInfo.URI_DOES_NOT_EXIST,e.getMessage());
          }
catch (          ResourceNotFoundException e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            error=new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,e.getMessage());
            requestResultStatus=FAILURE;
          }
catch (          EmptyByteArrayException e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            requestResultStatus=FAILURE;
            error=new ErrorInfo(ErrorInfo.BYTE_ARRAY_PAYLOAD_EMPTY,e.getMessage());
          }
catch (          InterruptedIOException e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            error=new ErrorInfo(ErrorInfo.REQUEST_CANCELLED,""String_Node_Str"");
            requestResultStatus=FAILURE;
          }
catch (          ErrorRetrievingSignatureException e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            requestResultStatus=FAILURE;
            error=new ErrorInfo(ErrorInfo.SIGNATURE_FAILURE,e.getMessage());
          }
catch (          IOException e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            error=new ErrorInfo(ErrorInfo.NETWORK_ERROR,e.getMessage());
            requestResultStatus=RESCHEDULE;
          }
catch (          Exception e) {
            Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
            error=new ErrorInfo(ErrorInfo.UNKNOWN_ERROR,e.getMessage());
            requestResultStatus=FAILURE;
          }
 finally {
            runningJobs.decrementAndGet();
          }
        }
 else {
          Logger.d(TAG,String.format(""String_Node_Str"",requestId,runningJobsCount,maxConcurrentRequests));
          requestResultStatus=RESCHEDULE;
        }
      }
 else {
        Logger.d(TAG,String.format(""String_Node_Str"",requestId));
        error=new ErrorInfo(ErrorInfo.PAYLOAD_LOAD_FAILURE,""String_Node_Str"");
        requestResultStatus=FAILURE;
      }
    }
 else {
      requestResultStatus=FAILURE;
      error=new ErrorInfo(ErrorInfo.PAYLOAD_EMPTY,""String_Node_Str"");
      Logger.d(TAG,String.format(""String_Node_Str"",requestId));
    }
  }
 else {
    requestResultStatus=FAILURE;
    error=new ErrorInfo(ErrorInfo.OPTIONS_FAILURE,""String_Node_Str"");
    Logger.d(TAG,String.format(""String_Node_Str"",requestId));
  }
  if (requestResultStatus.isFinal()) {
    if (requestResultStatus == SUCCESS) {
      callbackDispatcher.dispatchSuccess(context,requestId,resultData);
    }
 else {
      callbackDispatcher.dispatchError(context,requestId,error);
    }
    callbackDispatcher.wakeListenerServiceWithRequestFinished(context,requestId,requestResultStatus);
  }
 else {
    callbackDispatcher.dispatchReschedule(context,requestId,error);
  }
  Logger.i(TAG,String.format(""String_Node_Str"",requestId,requestResultStatus));
  return requestResultStatus;
}","/** 
 * {@inheritDoc}
 */
@Override public UploadStatus processRequest(Context context,RequestParams params){
  final String requestId=params.getString(""String_Node_Str"",null);
  final String uri=params.getString(""String_Node_Str"",null);
  final String optionsAsString=params.getString(""String_Node_Str"",null);
  final int maxErrorRetries=params.getInt(""String_Node_Str"",MediaManager.get().getGlobalUploadPolicy().getMaxErrorRetries());
  final int errorCount=params.getInt(""String_Node_Str"",0);
  Logger.i(TAG,String.format(""String_Node_Str"",requestId));
  if (errorCount > maxErrorRetries) {
    Logger.d(TAG,String.format(""String_Node_Str"",requestId,errorCount,maxErrorRetries));
    return FAILURE;
  }
  callbackDispatcher.dispatchStart(requestId);
  callbackDispatcher.wakeListenerServiceWithRequestStart(context,requestId);
  UploadStatus requestResultStatus;
  final Context appContext=context.getApplicationContext();
  Map resultData=null;
  boolean optionsLoadedSuccessfully=false;
  Map<String,Object> options=null;
  try {
    options=UploadRequest.decodeOptions(optionsAsString);
    optionsLoadedSuccessfully=true;
  }
 catch (  Exception e) {
    Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
  }
  ErrorInfo error=null;
  if (optionsLoadedSuccessfully) {
    if (StringUtils.isNotBlank(uri)) {
      Payload payload=PayloadFactory.fromUri(uri);
      if (payload != null) {
        try {
          runningJobs.incrementAndGet();
          resultData=doProcess(requestId,appContext,options,params,payload);
          requestResultStatus=SUCCESS;
        }
 catch (        FileNotFoundException e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          requestResultStatus=FAILURE;
          error=new ErrorInfo(ErrorInfo.FILE_DOES_NOT_EXIST,e.getMessage());
        }
catch (        LocalUriNotFoundException e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          requestResultStatus=FAILURE;
          error=new ErrorInfo(ErrorInfo.URI_DOES_NOT_EXIST,e.getMessage());
        }
catch (        ResourceNotFoundException e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          error=new ErrorInfo(ErrorInfo.RESOURCE_DOES_NOT_EXIST,e.getMessage());
          requestResultStatus=FAILURE;
        }
catch (        EmptyByteArrayException e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          requestResultStatus=FAILURE;
          error=new ErrorInfo(ErrorInfo.BYTE_ARRAY_PAYLOAD_EMPTY,e.getMessage());
        }
catch (        InterruptedIOException e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          error=new ErrorInfo(ErrorInfo.REQUEST_CANCELLED,""String_Node_Str"");
          requestResultStatus=FAILURE;
        }
catch (        ErrorRetrievingSignatureException e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          requestResultStatus=FAILURE;
          error=new ErrorInfo(ErrorInfo.SIGNATURE_FAILURE,e.getMessage());
        }
catch (        IOException e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          error=new ErrorInfo(ErrorInfo.NETWORK_ERROR,e.getMessage());
          requestResultStatus=RESCHEDULE;
        }
catch (        Exception e) {
          Logger.e(TAG,String.format(""String_Node_Str"",requestId),e);
          error=new ErrorInfo(ErrorInfo.UNKNOWN_ERROR,e.getMessage());
          requestResultStatus=FAILURE;
        }
 finally {
          runningJobs.decrementAndGet();
        }
      }
 else {
        Logger.d(TAG,String.format(""String_Node_Str"",requestId));
        error=new ErrorInfo(ErrorInfo.PAYLOAD_LOAD_FAILURE,""String_Node_Str"");
        requestResultStatus=FAILURE;
      }
    }
 else {
      requestResultStatus=FAILURE;
      error=new ErrorInfo(ErrorInfo.PAYLOAD_EMPTY,""String_Node_Str"");
      Logger.d(TAG,String.format(""String_Node_Str"",requestId));
    }
  }
 else {
    requestResultStatus=FAILURE;
    error=new ErrorInfo(ErrorInfo.OPTIONS_FAILURE,""String_Node_Str"");
    Logger.d(TAG,String.format(""String_Node_Str"",requestId));
  }
  if (requestResultStatus.isFinal()) {
    if (requestResultStatus == SUCCESS) {
      callbackDispatcher.dispatchSuccess(context,requestId,resultData);
    }
 else {
      callbackDispatcher.dispatchError(context,requestId,error);
    }
    callbackDispatcher.wakeListenerServiceWithRequestFinished(context,requestId,requestResultStatus);
  }
 else {
    callbackDispatcher.dispatchReschedule(context,requestId,error);
  }
  Logger.i(TAG,String.format(""String_Node_Str"",requestId,requestResultStatus));
  return requestResultStatus;
}",0.9263716092188456
59473,"private boolean sendBroadcast(Resource updatedResource){
  return LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(ACTION_RESOURCE_MODIFIED).putExtra(""String_Node_Str"",updatedResource));
}","private boolean sendBroadcast(Resource updatedResource){
  if (updatedResource != null) {
    return LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(ACTION_RESOURCE_MODIFIED).putExtra(""String_Node_Str"",updatedResource));
  }
  return false;
}",0.8812095032397408
59474,"@Override public void onError(final String requestId,final ErrorInfo error){
  backgroundThreadHandler.post(new Runnable(){
    @Override public void run(){
      final Resource resource;
      if (error.getCode() == ErrorInfo.REQUEST_CANCELLED) {
        resource=ResourceRepo.getInstance().getResource(requestId);
        if (resource != null) {
          ResourceRepo.getInstance().delete(resource.getLocalUri());
        }
      }
 else {
        resource=ResourceRepo.getInstance().resourceFailed(requestId,error.getCode(),error.getDescription());
      }
      if (resource != null) {
        sendBroadcast(resource);
      }
    }
  }
);
  cancelNotification(requestId);
  int id=idsProvider.incrementAndGet();
  requestIdsToNotificationIds.put(requestId,id);
  notificationManager.notify(id,getBuilder(requestId,Resource.UploadStatus.FAILED).setContentTitle(""String_Node_Str"").setContentText(error.getDescription()).setStyle(new NotificationCompat.BigTextStyle().setBigContentTitle(""String_Node_Str"").bigText(error.getDescription())).build());
  cleanupBitmap(requestId);
}","@Override public void onError(final String requestId,final ErrorInfo error){
  backgroundThreadHandler.post(new Runnable(){
    @Override public void run(){
      final Resource resource;
      if (error.getCode() == ErrorInfo.REQUEST_CANCELLED) {
        resource=ResourceRepo.getInstance().getResource(requestId);
        if (resource != null) {
          ResourceRepo.getInstance().delete(resource.getLocalUri());
        }
      }
 else {
        resource=ResourceRepo.getInstance().resourceFailed(requestId,error.getCode(),error.getDescription());
      }
      sendBroadcast(resource);
    }
  }
);
  cancelNotification(requestId);
  int id=idsProvider.incrementAndGet();
  requestIdsToNotificationIds.put(requestId,id);
  notificationManager.notify(id,getBuilder(requestId,Resource.UploadStatus.FAILED).setContentTitle(""String_Node_Str"").setContentText(error.getDescription()).setStyle(new NotificationCompat.BigTextStyle().setBigContentTitle(""String_Node_Str"").bigText(error.getDescription())).build());
  cleanupBitmap(requestId);
}",0.9811498586239396
59475,"private void addFileToDirectory(WPBFile parentDirectory,WPBFile file,InputStream is) throws WPBException, IOException {
  String dirPath=""String_Node_Str"";
  String filePath=null;
  if (parentDirectory != null) {
    dirPath=getDirectoryFullPath(parentDirectory.getExternalKey(),adminStorage);
  }
  if (dirPath.length() > 0) {
    filePath=dirPath + ""String_Node_Str"" + file.getFileName();
  }
 else {
    filePath=file.getFileName();
  }
  WPBFilePath cloudFile=new WPBFilePath(PUBLIC_BUCKET,filePath);
  cloudFileStorage.storeFile(is,cloudFile);
  cloudFileStorage.updateContentType(cloudFile,ContentTypeDetector.fileNameToContentType(file.getFileName()));
  WPBFileInfo fileInfo=cloudFileStorage.getFileInfo(cloudFile);
  file.setBlobKey(cloudFile.getPath());
  file.setHash(fileInfo.getCrc32());
  file.setSize(fileInfo.getSize());
  file.setContentType(fileInfo.getContentType());
  file.setAdjustedContentType(file.getContentType());
  file.setDirectoryFlag(0);
  if (parentDirectory != null) {
    file.setOwnerExtKey(parentDirectory.getExternalKey());
  }
 else {
    file.setOwnerExtKey(""String_Node_Str"");
  }
  WPBResource resource=new WPBResource(file.getExternalKey(),file.getFileName(),WPBResource.FILE_TYPE);
  if (file.getExternalKey() != null) {
    adminStorage.update(file);
    try {
      adminStorage.update(resource);
    }
 catch (    WPBException e) {
    }
  }
 else {
    adminStorage.addWithKey(file);
    try {
      adminStorage.addWithKey(resource);
    }
 catch (    WPBException e) {
    }
  }
}","private void addFileToDirectory(WPBFile parentDirectory,WPBFile file,InputStream is) throws WPBException, IOException {
  String dirPath=""String_Node_Str"";
  String filePath=null;
  if (parentDirectory != null) {
    dirPath=getDirectoryFullPath(parentDirectory.getExternalKey(),adminStorage);
  }
  if (dirPath.length() > 0) {
    filePath=dirPath + ""String_Node_Str"" + file.getFileName();
  }
 else {
    filePath=file.getFileName();
  }
  WPBFilePath cloudFile=new WPBFilePath(PUBLIC_BUCKET,filePath);
  cloudFileStorage.storeFile(is,cloudFile);
  cloudFileStorage.updateContentType(cloudFile,ContentTypeDetector.fileNameToContentType(file.getFileName()));
  WPBFileInfo fileInfo=cloudFileStorage.getFileInfo(cloudFile);
  file.setBlobKey(cloudFile.getPath());
  file.setHash(fileInfo.getCrc32());
  file.setSize(fileInfo.getSize());
  file.setContentType(fileInfo.getContentType());
  file.setAdjustedContentType(file.getContentType());
  file.setDirectoryFlag(0);
  if (parentDirectory != null) {
    file.setOwnerExtKey(parentDirectory.getExternalKey());
  }
 else {
    file.setOwnerExtKey(""String_Node_Str"");
  }
  WPBResource resource=new WPBResource(file.getExternalKey(),file.getFileName(),WPBResource.FILE_TYPE);
  adminStorage.delete(file.getExternalKey(),WPBFile.class);
  adminStorage.addWithKey(file);
  try {
    adminStorage.delete(resource.getRkey(),WPBResource.class);
    adminStorage.addWithKey(resource);
  }
 catch (  WPBException e) {
  }
}",0.8837675350701403
59476,"@After public void tearDown(){
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
}","@After public void tearDown(){
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
  Whitebox.setInternalState(DefaultWPBCacheFactory.class,""String_Node_Str"",(WPBCacheFactory)null);
}",0.8121442125237192
59477,"@Before public void setUp(){
  publicServlet=new WPBPublicContentServlet();
  loggerMock=EasyMock.createMock(Logger.class);
  Whitebox.setInternalState(WPBPublicContentServlet.class,""String_Node_Str"",loggerMock);
  requestMock=EasyMock.createMock(HttpServletRequest.class);
  responseMock=EasyMock.createMock(HttpServletResponse.class);
  urisCacheMock=EasyMock.createMock(WPBUrisCache.class);
  parametersCacheMock=EasyMock.createMock(WPBParametersCache.class);
  filesCacheMock=EasyMock.createMock(WPBFilesCache.class);
  messagesCacheMock=EasyMock.createMock(WPBMessagesCache.class);
  articlesCacheMock=EasyMock.createMock(WPBArticlesCache.class);
  pagesCacheMock=EasyMock.createMock(WPBPagesCache.class);
  modulesCacheMock=EasyMock.createMock(WPBPageModulesCache.class);
  projectCacheMock=EasyMock.createMock(WPBProjectCache.class);
  cacheInstances=new WPBCacheInstances(urisCacheMock,pagesCacheMock,modulesCacheMock,parametersCacheMock,filesCacheMock,articlesCacheMock,messagesCacheMock,projectCacheMock);
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
}","@Before public void setUp(){
  WPBCacheFactory cacheFactoryMock=EasyMock.createMock(WPBCacheFactory.class);
  Whitebox.setInternalState(DefaultWPBCacheFactory.class,""String_Node_Str"",cacheFactoryMock);
  publicServlet=new WPBPublicContentServlet();
  loggerMock=EasyMock.createMock(Logger.class);
  Whitebox.setInternalState(WPBPublicContentServlet.class,""String_Node_Str"",loggerMock);
  requestMock=EasyMock.createMock(HttpServletRequest.class);
  responseMock=EasyMock.createMock(HttpServletResponse.class);
  urisCacheMock=EasyMock.createMock(WPBUrisCache.class);
  parametersCacheMock=EasyMock.createMock(WPBParametersCache.class);
  filesCacheMock=EasyMock.createMock(WPBFilesCache.class);
  messagesCacheMock=EasyMock.createMock(WPBMessagesCache.class);
  articlesCacheMock=EasyMock.createMock(WPBArticlesCache.class);
  pagesCacheMock=EasyMock.createMock(WPBPagesCache.class);
  modulesCacheMock=EasyMock.createMock(WPBPageModulesCache.class);
  projectCacheMock=EasyMock.createMock(WPBProjectCache.class);
  cacheInstances=new WPBCacheInstances(urisCacheMock,pagesCacheMock,modulesCacheMock,parametersCacheMock,filesCacheMock,articlesCacheMock,messagesCacheMock,projectCacheMock);
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
  Whitebox.setInternalState(CmsConfigurationFactory.class,""String_Node_Str"",(Object)null);
}",0.9327110073901206
59478,"private void handleRequestTypeText(WPBPage webPage,HttpServletRequest req,HttpServletResponse resp,InternalModel model) throws WPBException, IOException {
  if (webPage == null) {
    resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  resp.setCharacterEncoding(""String_Node_Str"");
  Integer isTemplateSource=webPage.getIsTemplateSource();
  if (isTemplateSource != 1) {
    String ifNoneMatch=req.getHeader(HEADER_IF_NONE_MATCH);
    if (ifNoneMatch != null && ifNoneMatch.equals(webPage.getHash().toString())) {
      resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      return;
    }
    resp.addHeader(HEADER_ETAG,webPage.getHash().toString());
    String cqp=req.getParameter(cache_query_param);
    if (cqp != null) {
      resp.addHeader(HEADER_CACHE_CONTROL,""String_Node_Str"".concat(cache_max_age));
    }
  }
 else {
    resp.addHeader(HEADER_CACHE_CONTROL,""String_Node_Str"");
  }
  String content=pageContentBuilder.buildPageContent(req,webPage,model);
  resp.addHeader(HEADER_CONTENT_LENGTH,Integer.toString(content.length()));
  resp.setContentType(webPage.getContentType());
  ServletOutputStream os=resp.getOutputStream();
  os.write(content.getBytes(""String_Node_Str""));
}","private void handleRequestTypeText(WPBPage webPage,HttpServletRequest req,HttpServletResponse resp,InternalModel model) throws WPBException, IOException {
  if (webPage == null) {
    resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  resp.setCharacterEncoding(""String_Node_Str"");
  Integer isTemplateSource=webPage.getIsTemplateSource();
  if (isTemplateSource != 1) {
    String ifNoneMatch=req.getHeader(HEADER_IF_NONE_MATCH);
    if (ifNoneMatch != null && ifNoneMatch.equals(webPage.getHash().toString())) {
      resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      return;
    }
    resp.addHeader(HEADER_ETAG,webPage.getHash().toString());
    String cqp=req.getParameter(cache_query_param);
    if (cqp != null) {
      resp.addHeader(HEADER_CACHE_CONTROL,""String_Node_Str"".concat(cache_max_age));
    }
  }
 else {
    resp.addHeader(HEADER_CACHE_CONTROL,""String_Node_Str"");
  }
  byte[] content=pageContentBuilder.buildPageContent(req,webPage,model).getBytes(""String_Node_Str"");
  resp.addHeader(HEADER_CONTENT_LENGTH,Integer.toString(content.length));
  resp.setContentType(webPage.getContentType());
  ServletOutputStream os=resp.getOutputStream();
  os.write(content);
}",0.9710264900662252
59479,"public WBWebPage buildWebPage(Map<Object,Object> properties){
  WBWebPage page=new WBWebPage();
  if (properties.get(""String_Node_Str"") != null)   page.setExternalKey(properties.get(""String_Node_Str"").toString().trim());
 else   return null;
  if (properties.get(""String_Node_Str"") != null) {
    page.setContentType(properties.get(""String_Node_Str"").toString().trim());
  }
  if (properties.get(""String_Node_Str"") != null) {
    page.setName(properties.get(""String_Node_Str"").toString().trim());
  }
 else {
    page.setName(""String_Node_Str"");
  }
  if (properties.get(""String_Node_Str"") != null) {
    page.setHtmlSource(properties.get(""String_Node_Str"").toString().trim());
  }
 else {
    page.setHtmlSource(""String_Node_Str"");
  }
  page.setHash(page.crc32(page.getHtmlSource()));
  String lastModifiedStr=(String)properties.get(""String_Node_Str"");
  Long lastModified=0L;
  try {
    lastModified=lastModifiedStr != null ? Long.valueOf(lastModifiedStr) : 0;
  }
 catch (  NumberFormatException e) {
  }
  page.setLastModified(new Date(lastModified));
  String isTemplateSourceStr=(String)properties.get(""String_Node_Str"");
  Integer isTemplateSource=isTemplateSourceStr != null && !isTemplateSourceStr.equals(""String_Node_Str"") ? 1 : 0;
  page.setIsTemplateSource(isTemplateSource);
  return page;
}","public WBWebPage buildWebPage(Map<Object,Object> properties){
  WBWebPage page=new WBWebPage();
  if (properties.get(""String_Node_Str"") != null)   page.setExternalKey(properties.get(""String_Node_Str"").toString().trim());
 else   return null;
  if (properties.get(""String_Node_Str"") != null) {
    page.setContentType(properties.get(""String_Node_Str"").toString().trim());
  }
  if (properties.get(""String_Node_Str"") != null) {
    page.setName(properties.get(""String_Node_Str"").toString().trim());
  }
 else {
    page.setName(""String_Node_Str"");
  }
  if (properties.get(""String_Node_Str"") != null) {
    page.setPageModelProvider(properties.get(""String_Node_Str"").toString().trim());
  }
 else {
    page.setPageModelProvider(""String_Node_Str"");
  }
  if (properties.get(""String_Node_Str"") != null) {
    page.setHtmlSource(properties.get(""String_Node_Str"").toString().trim());
  }
 else {
    page.setHtmlSource(""String_Node_Str"");
  }
  page.setHash(page.crc32(page.getHtmlSource()));
  String lastModifiedStr=(String)properties.get(""String_Node_Str"");
  Long lastModified=0L;
  try {
    lastModified=lastModifiedStr != null ? Long.valueOf(lastModifiedStr) : 0;
  }
 catch (  NumberFormatException e) {
  }
  page.setLastModified(new Date(lastModified));
  String isTemplateSourceStr=(String)properties.get(""String_Node_Str"");
  Integer isTemplateSource=isTemplateSourceStr != null && !isTemplateSourceStr.equals(""String_Node_Str"") ? 1 : 0;
  page.setIsTemplateSource(isTemplateSource);
  return page;
}",0.9285460362602204
59480,"public void importContent(HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    ServletFileUpload upload=new ServletFileUpload();
    FileItemIterator iterator=upload.getItemIterator(request);
    while (iterator.hasNext()) {
      FileItemStream item=iterator.next();
      if (!item.isFormField() && item.getFieldName().equals(""String_Node_Str"")) {
        InputStream is=item.openStream();
        storageExporter.importFromZip(is);
        org.json.JSONObject returnJson=new org.json.JSONObject();
        returnJson.put(DATA,""String_Node_Str"");
        httpServletToolbox.writeBodyResponseAsJson(response,returnJson,null);
      }
    }
  }
 catch (  Exception e) {
    Map<String,String> errors=new HashMap<String,String>();
    errors.put(""String_Node_Str"",WBErrors.WB_CANNOT_IMPORT_PROJECT);
    httpServletToolbox.writeBodyResponseAsJson(response,jsonObjectConverter.JSONObjectFromMap(null),errors);
  }
}","public void importContent(HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    ServletFileUpload upload=new ServletFileUpload();
    FileItemIterator iterator=upload.getItemIterator(request);
    while (iterator.hasNext()) {
      FileItemStream item=iterator.next();
      if (!item.isFormField() && item.getFieldName().equals(""String_Node_Str"")) {
        InputStream is=item.openStream();
        storageExporter.importFromZip(is);
        WBCacheFactory wbCacheFactory=DefaultWBCacheFactory.getInstance();
        wbCacheFactory.createWBUrisCacheInstance().Refresh();
        wbCacheFactory.createWBWebPagesCacheInstance().Refresh();
        wbCacheFactory.createWBWebPageModulesCacheInstance().Refresh();
        wbCacheFactory.createWBArticlesCacheInstance().Refresh();
        wbCacheFactory.createWBMessagesCacheInstance().Refresh();
        wbCacheFactory.createWBFilesCacheInstance().Refresh();
        wbCacheFactory.createWBParametersCacheInstance().Refresh();
        wbCacheFactory.createWBProjectCacheInstance().Refresh();
        org.json.JSONObject returnJson=new org.json.JSONObject();
        returnJson.put(DATA,""String_Node_Str"");
        httpServletToolbox.writeBodyResponseAsJson(response,returnJson,null);
      }
    }
  }
 catch (  Exception e) {
    Map<String,String> errors=new HashMap<String,String>();
    errors.put(""String_Node_Str"",WBErrors.WB_CANNOT_IMPORT_PROJECT);
    httpServletToolbox.writeBodyResponseAsJson(response,jsonObjectConverter.JSONObjectFromMap(null),errors);
  }
}",0.7625049231981095
59481,"public void updateFileCustomProperties(WBCloudFile file,Map<String,String> customProps) throws IOException {
  String fullFilePath=getLocalFullDataPath(file);
  if (!checkIfFileExists(fullFilePath)) {
    throw new IOException(""String_Node_Str"");
  }
  String metaPath=getLocalFullMetaPath(file);
  Properties props=getFileProperties(metaPath);
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  props.putAll(customProps);
  storeFileProperties(props,fullFilePath);
}","public void updateFileCustomProperties(WBCloudFile file,Map<String,String> customProps) throws IOException {
  String fullFilePath=getLocalFullDataPath(file);
  if (!checkIfFileExists(fullFilePath)) {
    throw new IOException(""String_Node_Str"");
  }
  String metaPath=getLocalFullMetaPath(file);
  Properties props=getFileProperties(metaPath);
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  customProps.remove(""String_Node_Str"");
  props.putAll(customProps);
  storeFileProperties(props,metaPath);
}",0.9914651493598862
59482,"public void updateContentType(WBCloudFile file,String contentType) throws IOException {
  String fullFilePath=getLocalFullDataPath(file);
  if (!checkIfFileExists(fullFilePath)) {
    throw new IOException(""String_Node_Str"");
  }
  String metaPath=getLocalFullMetaPath(file);
  Properties props=getFileProperties(metaPath);
  props.put(""String_Node_Str"",contentType);
  storeFileProperties(props,fullFilePath);
}","public void updateContentType(WBCloudFile file,String contentType) throws IOException {
  String fullFilePath=getLocalFullDataPath(file);
  if (!checkIfFileExists(fullFilePath)) {
    throw new IOException(""String_Node_Str"");
  }
  String metaPath=getLocalFullMetaPath(file);
  Properties props=getFileProperties(metaPath);
  props.put(""String_Node_Str"",contentType);
  storeFileProperties(props,metaPath);
}",0.9853658536585366
59483,"public void serveFile(HttpServletRequest request,HttpServletResponse response,String uri) throws WBIOException {
  if (!uri.startsWith(LOCAL_FILE_SERVE_URL)) {
    return;
  }
  String fullFilePath=uri.substring(LOCAL_FILE_SERVE_URL.length());
  int pos=fullFilePath.indexOf('/');
  String bucket=fullFilePath.substring(0,pos);
  String file=fullFilePath.substring(pos + 1);
  file=new String(DatatypeConverter.parseBase64Binary(file));
  WBCloudFile cloudFile=new WBCloudFile(bucket,file);
  InputStream is=null;
  try {
    is=cloudFileStorage.getFileContent(cloudFile);
    IOUtils.copy(is,response.getOutputStream());
    WBCloudFileInfo fileInfo=cloudFileStorage.getFileInfo(cloudFile);
    response.setContentType(fileInfo.getContentType());
  }
 catch (  Exception e) {
    throw new WBIOException(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(is);
  }
}","public void serveFile(HttpServletRequest request,HttpServletResponse response,String uri) throws WBIOException {
  if (!uri.startsWith(LOCAL_FILE_SERVE_URL)) {
    return;
  }
  String fullFilePath=uri.substring(LOCAL_FILE_SERVE_URL.length());
  int pos=fullFilePath.indexOf('/');
  String bucket=fullFilePath.substring(0,pos);
  String file=fullFilePath.substring(pos + 1);
  file=new String(WBBase64Utility.fromSafePathBase64(file),Charset.forName(""String_Node_Str""));
  WBCloudFile cloudFile=new WBCloudFile(bucket,file);
  InputStream is=null;
  try {
    is=cloudFileStorage.getFileContent(cloudFile);
    IOUtils.copy(is,response.getOutputStream());
    WBCloudFileInfo fileInfo=cloudFileStorage.getFileInfo(cloudFile);
    response.setContentType(fileInfo.getContentType());
  }
 catch (  Exception e) {
    throw new WBIOException(""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(is);
  }
}",0.9440715883668904
59484,"private String sanitizeCloudFilePath(String path){
  String base64=DatatypeConverter.printBase64Binary(path.getBytes());
  base64=base64.replace('/','-');
  return base64;
}","private String sanitizeCloudFilePath(String path){
  return WBBase64Utility.toBase64(path.getBytes(Charset.forName(""String_Node_Str"")));
}",0.5466237942122186
59485,"@Override public void Refresh() throws WBIOException {
synchronized (lock) {
    Map<String,WBWebPageModule> tempMap=new HashMap<String,WBWebPageModule>();
    List<WBWebPageModule> recList=dataStorage.getAllRecords(WBWebPageModule.class);
    for (    WBWebPageModule item : recList) {
      tempMap.put(item.getExternalKey(),item);
    }
    localCache=tempMap;
  }
}","@Override public void Refresh() throws WBIOException {
synchronized (lock) {
    Map<String,WBWebPageModule> tempMapByID=new HashMap<String,WBWebPageModule>();
    Map<String,WBWebPageModule> tempMapByName=new HashMap<String,WBWebPageModule>();
    List<WBWebPageModule> recList=dataStorage.getAllRecords(WBWebPageModule.class);
    for (    WBWebPageModule item : recList) {
      tempMapByID.put(item.getExternalKey(),item);
      tempMapByName.put(item.getName(),item);
    }
    localCacheByID=tempMapByID;
    localCacheByName=tempMapByName;
  }
}",0.8013029315960912
59486,"public WBWebPageModule get(String pageName) throws WBIOException {
  return null;
}","public WBWebPageModule get(String moduleName) throws WBIOException {
  if (localCacheByName != null) {
    return localCacheByName.get(moduleName);
  }
  return null;
}",0.6374501992031872
59487,"public WBWebPageModule getByExternalKey(String externalKey) throws WBIOException {
  if (localCache == null) {
    Refresh();
  }
  if (localCache != null) {
    return localCache.get(externalKey);
  }
  return null;
}","public WBWebPageModule getByExternalKey(String externalKey) throws WBIOException {
  if (localCacheByID != null) {
    return localCacheByID.get(externalKey);
  }
  return null;
}",0.8614609571788413
59488,"@Override public void Refresh() throws WBIOException {
synchronized (lock) {
    Map<String,WBWebPage> tempMap=new HashMap<String,WBWebPage>();
    List<WBWebPage> recList=dataStorage.getAllRecords(WBWebPage.class);
    for (    WBWebPage item : recList) {
      tempMap.put(item.getExternalKey(),item);
    }
    localCache=tempMap;
  }
}","@Override public void Refresh() throws WBIOException {
synchronized (lock) {
    Map<String,WBWebPage> tempMapByID=new HashMap<String,WBWebPage>();
    Map<String,WBWebPage> tempMapByName=new HashMap<String,WBWebPage>();
    List<WBWebPage> recList=dataStorage.getAllRecords(WBWebPage.class);
    for (    WBWebPage item : recList) {
      tempMapByID.put(item.getExternalKey(),item);
      tempMapByName.put(item.getName(),item);
    }
    localCacheByExternalId=tempMapByID;
    localCacheByName=tempMapByName;
  }
}",0.7911318553092183
59489,"public WBWebPage get(String pageName) throws WBIOException {
  return null;
}","public WBWebPage get(String pageName) throws WBIOException {
  if (localCacheByName != null) {
    return localCacheByName.get(pageName);
  }
  return null;
}",0.6553191489361702
59490,"public WBWebPage getByExternalKey(String externalKey) throws WBIOException {
  if (localCache == null) {
    Refresh();
  }
  if (localCache != null) {
    return localCache.get(externalKey);
  }
  return null;
}","public WBWebPage getByExternalKey(String externalKey) throws WBIOException {
  if (localCacheByExternalId != null) {
    return localCacheByExternalId.get(externalKey);
  }
  return null;
}",0.8379052369077307
59491,"public void serveResource(HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    Long key=Long.valueOf((String)request.getAttribute(""String_Node_Str""));
    WBFile wbimage=adminStorage.get(key,WBFile.class);
    WBCloudFile cloudFile=new WBCloudFile(""String_Node_Str"",wbimage.getBlobKey());
    InputStream is=cloudFileStorage.getFileContent(cloudFile);
    IOUtils.copy(is,response.getOutputStream());
    response.setContentType(wbimage.getContentType());
  }
 catch (  Exception e) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
}","public void serveResource(HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    Long key=Long.valueOf((String)request.getAttribute(""String_Node_Str""));
    WBFile wbimage=adminStorage.get(key,WBFile.class);
    WBCloudFile cloudFile=new WBCloudFile(""String_Node_Str"",wbimage.getBlobKey());
    InputStream is=cloudFileStorage.getFileContent(cloudFile);
    IOUtils.copy(is,response.getOutputStream());
    response.setContentType(wbimage.getContentType());
    IOUtils.closeQuietly(is);
  }
 catch (  Exception e) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
}",0.9758064516129032
59492,"public void downloadResource(HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    Long key=Long.valueOf((String)request.getAttribute(""String_Node_Str""));
    WBFile wbimage=adminStorage.get(key,WBFile.class);
    WBCloudFile cloudFile=new WBCloudFile(""String_Node_Str"",wbimage.getBlobKey());
    InputStream is=cloudFileStorage.getFileContent(cloudFile);
    IOUtils.copy(is,response.getOutputStream());
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + wbimage.getFileName() + ""String_Node_Str"");
    response.setContentType(wbimage.getContentType());
  }
 catch (  Exception e) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
}","public void downloadResource(HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    Long key=Long.valueOf((String)request.getAttribute(""String_Node_Str""));
    WBFile wbimage=adminStorage.get(key,WBFile.class);
    WBCloudFile cloudFile=new WBCloudFile(""String_Node_Str"",wbimage.getBlobKey());
    InputStream is=cloudFileStorage.getFileContent(cloudFile);
    IOUtils.copy(is,response.getOutputStream());
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + wbimage.getFileName() + ""String_Node_Str"");
    response.setContentType(wbimage.getContentType());
    IOUtils.closeQuietly(is);
  }
 catch (  Exception e) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
}",0.9793956043956044
59493,"public WBMessageController(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=AdminDataStorageFactory.getInstance();
  validator=new WBMessageValidator();
  validator.setAdminStorage(adminStorage);
  WBCacheFactory wbCacheFactory=DefaultWBCacheFactory.getInstance();
  wbMessageCache=wbCacheFactory.createWBMessagesCacheInstance();
}","public WBMessageController(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=AdminDataStorageFactory.getInstance();
  validator=new WBMessageValidator();
  validator.setAdminStorage(adminStorage);
  WBCacheFactory wbCacheFactory=DefaultWBCacheFactory.getInstance();
  wbMessageCache=wbCacheFactory.createWBMessagesCacheInstance();
  adminStorage.addStorageListener(this);
}",0.9517078916372202
59494,"public String getPublicFileUrl(WBCloudFile file){
  String fullFilePath=getLocalFullDataPath(file);
  return basePublicUrlPath + fullFilePath;
}","public String getPublicFileUrl(WBCloudFile file){
  String partialPath=file.getBucket() + ""String_Node_Str"" + sanitizeCloudFilePath(file.getPath());
  return basePublicUrlPath + partialPath;
}",0.7261904761904762
59495,"public void initialize(WBBlobHandler blobHandler,WBCacheInstances cacheInstances){
  this.cacheInstances=cacheInstances;
  this.blobHandler=blobHandler;
}","public void initialize(WBCloudFileStorage cloudFileStorage,WBCacheInstances cacheInstances){
  this.cacheInstances=cacheInstances;
  this.cloudFileStorage=cloudFileStorage;
}",0.8170731707317073
59496,"public void execute(Environment env,Map params,TemplateModel[] loopVars,TemplateDirectiveBody body) throws TemplateException, IOException {
  if (body != null)   throw new TemplateModelException(""String_Node_Str"");
  String externalKey=null;
  if (params.containsKey(""String_Node_Str"")) {
    externalKey=(String)DeepUnwrap.unwrap((TemplateModel)params.get(""String_Node_Str""));
  }
 else {
    throw new TemplateModelException(""String_Node_Str"");
  }
  Integer size=0;
  if (params.containsKey(""String_Node_Str"")) {
    String strSize=(String)DeepUnwrap.unwrap((TemplateModel)params.get(""String_Node_Str""));
    try {
      size=Integer.valueOf(strSize);
    }
 catch (    NumberFormatException e) {
    }
  }
  try {
    String serveUrl=""String_Node_Str"";
    WBFile image=cacheInstances.getWBFilesCache().getByExternalKey(externalKey);
    if (image != null) {
    }
    String htmlImage=""String_Node_Str"" + serveUrl + ""String_Node_Str"";
    env.getOut().write(htmlImage);
  }
 catch (  WBIOException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    throw new TemplateModelException(""String_Node_Str"");
  }
}","public void execute(Environment env,Map params,TemplateModel[] loopVars,TemplateDirectiveBody body) throws TemplateException, IOException {
  if (body != null)   throw new TemplateModelException(""String_Node_Str"");
  String externalKey=null;
  if (params.containsKey(""String_Node_Str"")) {
    externalKey=(String)DeepUnwrap.unwrap((TemplateModel)params.get(""String_Node_Str""));
  }
 else {
    throw new TemplateModelException(""String_Node_Str"");
  }
  try {
    String serveUrl=""String_Node_Str"";
    WBFile image=cacheInstances.getWBFilesCache().getByExternalKey(externalKey);
    if (image != null) {
      WBCloudFile cloudFile=new WBCloudFile(""String_Node_Str"",image.getBlobKey());
      serveUrl=cloudFileStorage.getPublicFileUrl(cloudFile);
    }
    String htmlImage=""String_Node_Str"" + serveUrl + ""String_Node_Str"";
    env.getOut().write(htmlImage);
  }
 catch (  WBIOException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    throw new TemplateModelException(""String_Node_Str"");
  }
}",0.8098159509202454
59497,"public void initialize() throws WBIOException {
  log.log(Level.INFO,""String_Node_Str"");
  configuration=wbFreeMarkerFactory.createConfiguration();
  configuration.setDefaultEncoding(""String_Node_Str"");
  configuration.setOutputEncoding(""String_Node_Str"");
  templateLoader=wbFreeMarkerFactory.createWBFreeMarkerTemplateLoader(cacheInstances);
  cloudFileStorage=WBCloudFileStorageFactory.getInstance();
  configuration.setLocalizedLookup(false);
  configuration.setTemplateLoader(templateLoader);
  WBFreeMarkerModuleDirective moduleDirective=wbFreeMarkerFactory.createWBFreeMarkerModuleDirective();
  moduleDirective.initialize(this,cacheInstances);
  configuration.setSharedVariable(ModelBuilder.MODULE_DIRECTIVE,moduleDirective);
  WBFreeMarkerImageDirective imageDirective=wbFreeMarkerFactory.createWBFreeMarkerImageDirective();
  imageDirective.initialize(blobHandler,cacheInstances);
  configuration.setSharedVariable(ModelBuilder.IMAGE_DIRECTIVE,imageDirective);
  WBFreeMarkerArticleDirective articleDirective=wbFreeMarkerFactory.createWBFreeMarkerArticleDirective();
  articleDirective.initialize(this,cacheInstances);
  configuration.setSharedVariable(ModelBuilder.ARTICLE_DIRECTIVE,articleDirective);
}","public void initialize() throws WBIOException {
  log.log(Level.INFO,""String_Node_Str"");
  configuration=wbFreeMarkerFactory.createConfiguration();
  configuration.setDefaultEncoding(""String_Node_Str"");
  configuration.setOutputEncoding(""String_Node_Str"");
  templateLoader=wbFreeMarkerFactory.createWBFreeMarkerTemplateLoader(cacheInstances);
  cloudFileStorage=WBCloudFileStorageFactory.getInstance();
  configuration.setLocalizedLookup(false);
  configuration.setTemplateLoader(templateLoader);
  WBFreeMarkerModuleDirective moduleDirective=wbFreeMarkerFactory.createWBFreeMarkerModuleDirective();
  moduleDirective.initialize(this,cacheInstances);
  configuration.setSharedVariable(ModelBuilder.MODULE_DIRECTIVE,moduleDirective);
  WBFreeMarkerImageDirective imageDirective=wbFreeMarkerFactory.createWBFreeMarkerImageDirective();
  imageDirective.initialize(cloudFileStorage,cacheInstances);
  configuration.setSharedVariable(ModelBuilder.IMAGE_DIRECTIVE,imageDirective);
  WBFreeMarkerArticleDirective articleDirective=wbFreeMarkerFactory.createWBFreeMarkerArticleDirective();
  articleDirective.initialize(this,cacheInstances);
  configuration.setSharedVariable(ModelBuilder.ARTICLE_DIRECTIVE,articleDirective);
}",0.9889025893958076
59498,"@Before public void setUp(){
  cacheFactoryMock=PowerMock.createMock(WBCacheFactory.class);
  freeMarkerFactoryMock=PowerMock.createMock(WBFreeMarkerFactory.class);
  configurationMock=PowerMock.createMock(Configuration.class);
  templateLoaderMock=PowerMock.createMock(WBFreeMarkerTemplateLoader.class);
  moduleDirectiveMock=PowerMock.createMock(WBFreeMarkerModuleDirective.class);
  imageDirectiveMock=PowerMock.createMock(WBFreeMarkerImageDirective.class);
  articleDirectiveMock=PowerMock.createMock(WBFreeMarkerArticleDirective.class);
  blobHandlerMock=PowerMock.createMock(WBBlobHandler.class);
  messageCacheMock=PowerMock.createMock(WBMessagesCache.class);
  cacheInstancesMock=PowerMock.createMock(WBCacheInstances.class);
  Logger loggerMock=PowerMock.createMock(Logger.class);
  Whitebox.setInternalState(WBFreeMarkerTemplateEngine.class,loggerMock);
}","@Before public void setUp(){
  cacheFactoryMock=PowerMock.createMock(WBCacheFactory.class);
  freeMarkerFactoryMock=PowerMock.createMock(WBFreeMarkerFactory.class);
  configurationMock=PowerMock.createMock(Configuration.class);
  templateLoaderMock=PowerMock.createMock(WBFreeMarkerTemplateLoader.class);
  moduleDirectiveMock=PowerMock.createMock(WBFreeMarkerModuleDirective.class);
  imageDirectiveMock=PowerMock.createMock(WBFreeMarkerImageDirective.class);
  articleDirectiveMock=PowerMock.createMock(WBFreeMarkerArticleDirective.class);
  cloudStorageMock=PowerMock.createMock(WBCloudFileStorage.class);
  messageCacheMock=PowerMock.createMock(WBMessagesCache.class);
  cacheInstancesMock=PowerMock.createMock(WBCacheInstances.class);
  Logger loggerMock=PowerMock.createMock(Logger.class);
  Whitebox.setInternalState(WBFreeMarkerTemplateEngine.class,loggerMock);
}",0.9412442396313364
59499,"@Test @SuppressStaticInitializationFor(""String_Node_Str"") @PrepareForTest({Environment.class,WBFreeMarkerTemplateEngine.class}) public void test_initialize(){
  WBFreeMarkerTemplateEngine templateEngine=new WBFreeMarkerTemplateEngine(cacheInstancesMock);
  EasyMock.expect(freeMarkerFactoryMock.createConfiguration()).andReturn(configurationMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerModuleDirective()).andReturn(moduleDirectiveMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerTemplateLoader(cacheInstancesMock)).andReturn(templateLoaderMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerImageDirective()).andReturn(imageDirectiveMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerArticleDirective()).andReturn(articleDirectiveMock);
  configurationMock.setLocalizedLookup(false);
  configurationMock.setTemplateLoader(templateLoaderMock);
  moduleDirectiveMock.initialize(templateEngine,cacheInstancesMock);
  imageDirectiveMock.initialize(blobHandlerMock,cacheInstancesMock);
  configurationMock.setSharedVariable(ModelBuilder.MODULE_DIRECTIVE,moduleDirectiveMock);
  configurationMock.setSharedVariable(ModelBuilder.IMAGE_DIRECTIVE,imageDirectiveMock);
  configurationMock.setSharedVariable(ModelBuilder.ARTICLE_DIRECTIVE,articleDirectiveMock);
  Capture<String> captureDefaultEncoding=new Capture<String>();
  Capture<String> captureOutputEncoding=new Capture<String>();
  configurationMock.setDefaultEncoding(EasyMock.capture(captureDefaultEncoding));
  configurationMock.setOutputEncoding(EasyMock.capture(captureOutputEncoding));
  Whitebox.setInternalState(templateEngine,""String_Node_Str"",freeMarkerFactoryMock);
  PowerMock.replay(cacheFactoryMock,freeMarkerFactoryMock,configurationMock,templateLoaderMock,moduleDirectiveMock,messageCacheMock);
  try {
    templateEngine.initialize();
    PowerMock.verify(cacheFactoryMock,freeMarkerFactoryMock,configurationMock,templateLoaderMock,moduleDirectiveMock,messageCacheMock);
    assertTrue(captureDefaultEncoding.getValue().equals(""String_Node_Str""));
    assertTrue(captureOutputEncoding.getValue().equals(""String_Node_Str""));
  }
 catch (  Exception e) {
    assertTrue(false);
  }
}","@Test @SuppressStaticInitializationFor(""String_Node_Str"") @PrepareForTest({Environment.class,WBFreeMarkerTemplateEngine.class}) public void test_initialize(){
  WBFreeMarkerTemplateEngine templateEngine=new WBFreeMarkerTemplateEngine(cacheInstancesMock);
  EasyMock.expect(freeMarkerFactoryMock.createConfiguration()).andReturn(configurationMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerModuleDirective()).andReturn(moduleDirectiveMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerTemplateLoader(cacheInstancesMock)).andReturn(templateLoaderMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerImageDirective()).andReturn(imageDirectiveMock);
  EasyMock.expect(freeMarkerFactoryMock.createWBFreeMarkerArticleDirective()).andReturn(articleDirectiveMock);
  configurationMock.setLocalizedLookup(false);
  configurationMock.setTemplateLoader(templateLoaderMock);
  moduleDirectiveMock.initialize(templateEngine,cacheInstancesMock);
  imageDirectiveMock.initialize(cloudStorageMock,cacheInstancesMock);
  configurationMock.setSharedVariable(ModelBuilder.MODULE_DIRECTIVE,moduleDirectiveMock);
  configurationMock.setSharedVariable(ModelBuilder.IMAGE_DIRECTIVE,imageDirectiveMock);
  configurationMock.setSharedVariable(ModelBuilder.ARTICLE_DIRECTIVE,articleDirectiveMock);
  Capture<String> captureDefaultEncoding=new Capture<String>();
  Capture<String> captureOutputEncoding=new Capture<String>();
  configurationMock.setDefaultEncoding(EasyMock.capture(captureDefaultEncoding));
  configurationMock.setOutputEncoding(EasyMock.capture(captureOutputEncoding));
  Whitebox.setInternalState(templateEngine,""String_Node_Str"",freeMarkerFactoryMock);
  PowerMock.replay(cacheFactoryMock,freeMarkerFactoryMock,configurationMock,templateLoaderMock,moduleDirectiveMock,messageCacheMock);
  try {
    templateEngine.initialize();
    PowerMock.verify(cacheFactoryMock,freeMarkerFactoryMock,configurationMock,templateLoaderMock,moduleDirectiveMock,messageCacheMock);
    assertTrue(captureDefaultEncoding.getValue().equals(""String_Node_Str""));
    assertTrue(captureOutputEncoding.getValue().equals(""String_Node_Str""));
  }
 catch (  Exception e) {
    assertTrue(false);
  }
}",0.99479520253451
59500,"public static LocaleManager getInstance(){
  if (localeManager == null) {
    localeManager=new LocaleManager();
    try {
      localeManager.loadLocalesfromFile(LANGUAGES_CONFIG_FILE);
    }
 catch (    WBIOException e) {
      localeManager=null;
      e.printStackTrace();
      return null;
    }
  }
  return localeManager;
}","public static LocaleManager getInstance(){
  if (localeManager == null) {
    localeManager=new LocaleManager();
    try {
      localeManager.loadLocalesfromFile(LANGUAGES_CONFIG_FILE);
    }
 catch (    WBIOException e) {
      localeManager=null;
      return null;
    }
  }
  return localeManager;
}",0.95748031496063
59501,"private Object copyResultSetToObject(ResultSet resultSet,Class kind) throws SQLException, WBSerializerException {
  try {
    Object result=kind.newInstance();
    Field[] fields=kind.getDeclaredFields();
    for (    Field field : fields) {
      field.setAccessible(true);
      boolean storeField=(field.getAnnotation(AdminFieldKey.class) != null) || (field.getAnnotation(AdminFieldStore.class) != null) || (field.getAnnotation(AdminFieldTextStore.class) != null);
      if (storeField) {
        String fieldName=field.getName();
        String fieldNameUpperCase=field.getName().toUpperCase();
        PropertyDescriptor pd=new PropertyDescriptor(fieldName,kind);
        if (field.getType() == Long.class) {
          Long value=resultSet.getLong(fieldNameUpperCase);
          pd.getWriteMethod().invoke(result,value);
        }
 else         if (field.getType() == String.class) {
          String value=resultSet.getString(fieldNameUpperCase);
          pd.getWriteMethod().invoke(result,value);
        }
 else         if (field.getType() == Integer.class) {
          Integer value=resultSet.getInt(fieldNameUpperCase);
          pd.getWriteMethod().invoke(result,value);
        }
      }
    }
    return result;
  }
 catch (  Exception e) {
    throw new WBSerializerException(""String_Node_Str"",e);
  }
}","private Object copyResultSetToObject(ResultSet resultSet,Class kind) throws SQLException, WBSerializerException {
  try {
    Object result=kind.newInstance();
    Field[] fields=kind.getDeclaredFields();
    for (    Field field : fields) {
      field.setAccessible(true);
      boolean storeField=(field.getAnnotation(AdminFieldKey.class) != null) || (field.getAnnotation(AdminFieldStore.class) != null) || (field.getAnnotation(AdminFieldTextStore.class) != null);
      if (storeField) {
        String fieldName=field.getName();
        String fieldNameUpperCase=field.getName().toUpperCase();
        PropertyDescriptor pd=new PropertyDescriptor(fieldName,kind);
        if (field.getType() == Long.class) {
          Long value=resultSet.getLong(fieldNameUpperCase);
          pd.getWriteMethod().invoke(result,value);
        }
 else         if (field.getType() == String.class) {
          String value=resultSet.getString(fieldNameUpperCase);
          pd.getWriteMethod().invoke(result,value);
        }
 else         if (field.getType() == Integer.class) {
          Integer value=resultSet.getInt(fieldNameUpperCase);
          pd.getWriteMethod().invoke(result,value);
        }
 else         if (field.getType() == Date.class) {
          Timestamp ts=resultSet.getTimestamp(fieldNameUpperCase);
          Date value=new Date(ts.getTime());
          pd.getWriteMethod().invoke(result,value);
        }
      }
    }
    return result;
  }
 catch (  Exception e) {
    throw new WBSerializerException(""String_Node_Str"",e);
  }
}",0.9213561691716184
59502,"private int buildStatementForInsertUpdate(Object obj,Set<String> ignoreFields,PreparedStatement preparedStatement,Connection connection) throws SQLException, WBSerializerException {
  Class kind=obj.getClass();
  Field[] fields=kind.getDeclaredFields();
  int fieldIndex=0;
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    field.setAccessible(true);
    boolean storeField=(field.getAnnotation(AdminFieldKey.class) != null) || (field.getAnnotation(AdminFieldStore.class) != null) || (field.getAnnotation(AdminFieldTextStore.class) != null);
    if (storeField) {
      String fieldName=field.getName();
      if (ignoreFields != null && ignoreFields.contains(fieldName)) {
        continue;
      }
      fieldIndex=fieldIndex + 1;
      Object value=null;
      try {
        PropertyDescriptor pd=new PropertyDescriptor(fieldName,kind);
        value=pd.getReadMethod().invoke(obj);
      }
 catch (      Exception e) {
        throw new WBSerializerException(""String_Node_Str"",e);
      }
      if (field.getType() == Long.class) {
        Long valueLong=(Long)value;
        preparedStatement.setLong(fieldIndex,valueLong);
      }
 else       if (field.getType() == String.class) {
        String valueString=(String)value;
        if (field.getAnnotation(AdminFieldStore.class) != null) {
          preparedStatement.setString(fieldIndex,valueString);
        }
 else         if (field.getAnnotation(AdminFieldKey.class) != null) {
          preparedStatement.setString(fieldIndex,valueString);
        }
 else         if (field.getAnnotation(AdminFieldTextStore.class) != null) {
          Clob clob=connection.createClob();
          clob.setString(1,valueString);
          preparedStatement.setClob(fieldIndex,clob);
        }
      }
 else       if (field.getType() == Integer.class) {
        Integer valueInt=(Integer)value;
        preparedStatement.setInt(fieldIndex,valueInt);
      }
 else       if (field.getType() == Date.class) {
        Date date=(Date)value;
        java.sql.Date sqlDate=new java.sql.Date(date.getTime());
        preparedStatement.setDate(fieldIndex,sqlDate);
      }
    }
  }
  return fieldIndex;
}","private int buildStatementForInsertUpdate(Object obj,Set<String> ignoreFields,PreparedStatement preparedStatement,Connection connection) throws SQLException, WBSerializerException {
  Class kind=obj.getClass();
  Field[] fields=kind.getDeclaredFields();
  int fieldIndex=0;
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    field.setAccessible(true);
    boolean storeField=(field.getAnnotation(AdminFieldKey.class) != null) || (field.getAnnotation(AdminFieldStore.class) != null) || (field.getAnnotation(AdminFieldTextStore.class) != null);
    if (storeField) {
      String fieldName=field.getName();
      if (ignoreFields != null && ignoreFields.contains(fieldName)) {
        continue;
      }
      fieldIndex=fieldIndex + 1;
      Object value=null;
      try {
        PropertyDescriptor pd=new PropertyDescriptor(fieldName,kind);
        value=pd.getReadMethod().invoke(obj);
      }
 catch (      Exception e) {
        throw new WBSerializerException(""String_Node_Str"",e);
      }
      if (field.getType() == Long.class) {
        Long valueLong=(Long)value;
        preparedStatement.setLong(fieldIndex,valueLong);
      }
 else       if (field.getType() == String.class) {
        String valueString=(String)value;
        if (field.getAnnotation(AdminFieldStore.class) != null) {
          preparedStatement.setString(fieldIndex,valueString);
        }
 else         if (field.getAnnotation(AdminFieldKey.class) != null) {
          preparedStatement.setString(fieldIndex,valueString);
        }
 else         if (field.getAnnotation(AdminFieldTextStore.class) != null) {
          Clob clob=connection.createClob();
          clob.setString(1,valueString);
          preparedStatement.setClob(fieldIndex,clob);
        }
      }
 else       if (field.getType() == Integer.class) {
        Integer valueInt=(Integer)value;
        preparedStatement.setInt(fieldIndex,valueInt);
      }
 else       if (field.getType() == Date.class) {
        Date date=(Date)value;
        java.sql.Timestamp sqlDate=new java.sql.Timestamp(date.getTime());
        preparedStatement.setTimestamp(fieldIndex,sqlDate);
      }
    }
  }
  return fieldIndex;
}",0.9643268124280784
59503,"public static LocaleManager getInstance(){
  LocaleManager localeManager=new LocaleManager();
  try {
    localeManager.loadLocalesfromFile(LANGUAGES_CONFIG_FILE);
  }
 catch (  WBIOException e) {
    return null;
  }
  return localeManager;
}","public static LocaleManager getInstance(){
  if (localeManager == null) {
    localeManager=new LocaleManager();
    try {
      localeManager.loadLocalesfromFile(LANGUAGES_CONFIG_FILE);
    }
 catch (    WBIOException e) {
      localeManager=null;
      e.printStackTrace();
      return null;
    }
  }
  return localeManager;
}",0.6306620209059234
59504,"public WBFileControllerEx(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=AdminDataStorageFactory.getInstance();
  blobHandler=new WBGaeBlobHandler();
  validator=new WBFileValidator();
  cloudFileStorage=WBCloudFileStorageFactory.getInstance();
  WBCacheFactory wbCacheFactory=new DefaultWBCacheFactory();
  imageCache=wbCacheFactory.createWBImagesCacheInstance();
  adminStorage.addStorageListener(this);
}","public WBFileControllerEx(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=AdminDataStorageFactory.getInstance();
  validator=new WBFileValidator();
  cloudFileStorage=WBCloudFileStorageFactory.getInstance();
  WBCacheFactory wbCacheFactory=new DefaultWBCacheFactory();
  imageCache=wbCacheFactory.createWBImagesCacheInstance();
  adminStorage.addStorageListener(this);
}",0.958963282937365
59505,"private WBProject getProject() throws WBIOException {
  WBProject project=adminStorage.get(WBProject.PROJECT_KEY,WBProject.class);
  if (null == project) {
    project=new WBProject();
    project.setKey(""String_Node_Str"");
    project.setDefaultLanguage(""String_Node_Str"");
    project.setSupportedLanguages(""String_Node_Str"");
    project=adminStorage.add(project);
  }
  return project;
}","private WBProject getProject() throws WBIOException {
  WBProject project=adminStorage.get(WBProject.PROJECT_KEY,WBProject.class);
  if (null == project) {
    project=new WBProject();
    project.setKey(""String_Node_Str"");
    project.setDefaultLanguage(""String_Node_Str"");
    project.setLastModified(Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str"")).getTime());
    project.setSupportedLanguages(""String_Node_Str"");
    project=adminStorage.addWithKey(project);
  }
  return project;
}",0.877665544332211
59506,"public WBReadOnlyDataController(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=new GaeAdminDataStorage();
}","public WBReadOnlyDataController(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=AdminDataStorageFactory.getInstance();
}",0.9308510638297872
59507,"private int buildStatementForInsertUpdate(Object obj,Set<String> ignoreFields,PreparedStatement preparedStatement,Connection connection) throws SQLException, WBSerializerException {
  Class kind=obj.getClass();
  Field[] fields=kind.getDeclaredFields();
  int fieldIndex=0;
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    field.setAccessible(true);
    boolean storeField=(field.getAnnotation(AdminFieldKey.class) != null) || (field.getAnnotation(AdminFieldStore.class) != null) || (field.getAnnotation(AdminFieldTextStore.class) != null);
    if (storeField) {
      String fieldName=field.getName();
      if (ignoreFields != null && ignoreFields.contains(fieldName)) {
        continue;
      }
      fieldIndex=fieldIndex + 1;
      Object value=null;
      try {
        PropertyDescriptor pd=new PropertyDescriptor(fieldName,kind);
        value=pd.getReadMethod().invoke(obj);
      }
 catch (      Exception e) {
        throw new WBSerializerException(""String_Node_Str"",e);
      }
      if (field.getType() == Long.class) {
        Long valueLong=(Long)value;
        preparedStatement.setLong(fieldIndex,valueLong);
      }
 else       if (field.getType() == String.class) {
        String valueString=(String)value;
        if (field.getAnnotation(AdminFieldStore.class) != null) {
          preparedStatement.setString(fieldIndex,valueString);
        }
 else         if (field.getAnnotation(AdminFieldTextStore.class) != null) {
          Clob clob=connection.createClob();
          clob.setString(1,valueString);
          preparedStatement.setClob(fieldIndex,clob);
        }
      }
 else       if (field.getType() == Integer.class) {
        Integer valueInt=(Integer)value;
        preparedStatement.setInt(fieldIndex,valueInt);
      }
 else       if (field.getType() == Date.class) {
        Date date=(Date)value;
        java.sql.Date sqlDate=new java.sql.Date(date.getTime());
        preparedStatement.setDate(fieldIndex,sqlDate);
      }
    }
  }
  return fieldIndex;
}","private int buildStatementForInsertUpdate(Object obj,Set<String> ignoreFields,PreparedStatement preparedStatement,Connection connection) throws SQLException, WBSerializerException {
  Class kind=obj.getClass();
  Field[] fields=kind.getDeclaredFields();
  int fieldIndex=0;
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    field.setAccessible(true);
    boolean storeField=(field.getAnnotation(AdminFieldKey.class) != null) || (field.getAnnotation(AdminFieldStore.class) != null) || (field.getAnnotation(AdminFieldTextStore.class) != null);
    if (storeField) {
      String fieldName=field.getName();
      if (ignoreFields != null && ignoreFields.contains(fieldName)) {
        continue;
      }
      fieldIndex=fieldIndex + 1;
      Object value=null;
      try {
        PropertyDescriptor pd=new PropertyDescriptor(fieldName,kind);
        value=pd.getReadMethod().invoke(obj);
      }
 catch (      Exception e) {
        throw new WBSerializerException(""String_Node_Str"",e);
      }
      if (field.getType() == Long.class) {
        Long valueLong=(Long)value;
        preparedStatement.setLong(fieldIndex,valueLong);
      }
 else       if (field.getType() == String.class) {
        String valueString=(String)value;
        if (field.getAnnotation(AdminFieldStore.class) != null) {
          preparedStatement.setString(fieldIndex,valueString);
        }
 else         if (field.getAnnotation(AdminFieldKey.class) != null) {
          preparedStatement.setString(fieldIndex,valueString);
        }
 else         if (field.getAnnotation(AdminFieldTextStore.class) != null) {
          Clob clob=connection.createClob();
          clob.setString(1,valueString);
          preparedStatement.setClob(fieldIndex,clob);
        }
      }
 else       if (field.getType() == Integer.class) {
        Integer valueInt=(Integer)value;
        preparedStatement.setInt(fieldIndex,valueInt);
      }
 else       if (field.getType() == Date.class) {
        Date date=(Date)value;
        java.sql.Date sqlDate=new java.sql.Date(date.getTime());
        preparedStatement.setDate(fieldIndex,sqlDate);
      }
    }
  }
  return fieldIndex;
}",0.9658466682588964
59508,"@Test public void test_getIstance_OK(){
  try {
    LocaleManager manager=LocaleManager.getInstance();
    assertTrue(manager.getSupportedLanguages() != null);
  }
 catch (  Exception e) {
    assertTrue(false);
  }
}","@Test public void test_getIstance_OK(){
  try {
    LocaleManager manager=LocaleManager.getInstance();
    assertTrue(manager.getSupportedLanguages() != null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
}",0.9455337690631808
59509,"@Test public void test_getInstance_fail(){
  try {
    String path=""String_Node_Str"";
    Whitebox.setInternalState(LocaleManager.class,""String_Node_Str"",path);
    LocaleManager manager=LocaleManager.getInstance();
    assertTrue(manager == null);
  }
 catch (  Exception e) {
    assertTrue(false);
  }
}","@Test public void test_getInstance_fail(){
  try {
    String path=""String_Node_Str"";
    Whitebox.setInternalState(LocaleManager.class,""String_Node_Str"",path);
    Whitebox.setInternalState(LocaleManager.class,""String_Node_Str"",(LocaleManager)null);
    LocaleManager manager=LocaleManager.getInstance();
    assertTrue(manager == null);
  }
 catch (  Exception e) {
    assertTrue(false);
  }
}",0.8717948717948718
59510,"public String buildPageContent(HttpServletRequest request,URLMatcherResult urlMatcherResult,WBWebPage wbWebPage,WBProject project) throws WBException {
  if (wbWebPage.getIsTemplateSource() == 0) {
    return wbWebPage.getHtmlSource();
  }
  Map<String,Object> pageModel=getPageModel(request,urlMatcherResult,wbWebPage,project);
  String result=""String_Node_Str"";
  try {
    StringWriter out=new StringWriter();
    templateEngine.process(WBTemplateEngine.WEBPAGES_PATH_PREFIX + wbWebPage.getName(),pageModel,out);
    result+=out.toString();
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    throw new WBContentException(""String_Node_Str"" + urlMatcherResult.getUrlRequest());
  }
  return result;
}","public String buildPageContent(HttpServletRequest request,URLMatcherResult urlMatcherResult,WBWebPage wbWebPage,WBProject project) throws WBException {
  if ((wbWebPage.getIsTemplateSource() == null) || (wbWebPage.getIsTemplateSource() == 0)) {
    return wbWebPage.getHtmlSource();
  }
  Map<String,Object> pageModel=getPageModel(request,urlMatcherResult,wbWebPage,project);
  String result=""String_Node_Str"";
  try {
    StringWriter out=new StringWriter();
    templateEngine.process(WBTemplateEngine.WEBPAGES_PATH_PREFIX + wbWebPage.getName(),pageModel,out);
    result+=out.toString();
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,""String_Node_Str"",e);
    throw new WBContentException(""String_Node_Str"" + urlMatcherResult.getUrlRequest());
  }
  return result;
}",0.968894771674388
59511,"public WBArticleController(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=new GaeAdminDataStorage();
  validator=new WBArticleValidator();
  WBCacheFactory wbCacheFactory=new DefaultWBCacheFactory();
  wbArticleCache=wbCacheFactory.createWBArticlesCacheInstance();
}","public WBArticleController(){
  httpServletToolbox=new HttpServletToolbox();
  jsonObjectConverter=new WBJSONToFromObjectConverter();
  adminStorage=new GaeAdminDataStorage();
  validator=new WBArticleValidator();
  WBCacheFactory wbCacheFactory=new DefaultWBCacheFactory();
  wbArticleCache=wbCacheFactory.createWBArticlesCacheInstance();
  adminStorage.addStorageListener(this);
}",0.9432918395573996
59512,"public void createFromOwner(String fromOwnerExternalKey,String ownerExternalKey,HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    Map<String,String> errors=new HashMap<String,String>();
    if (ownerExternalKey == null || ownerExternalKey.equals(0L)) {
      errors.put(""String_Node_Str"",WBErrors.WBPARAMETER_NO_OWNER_KEY);
    }
    if (fromOwnerExternalKey == null || fromOwnerExternalKey.equals(0L)) {
      errors.put(""String_Node_Str"",WBErrors.WBPARAMETER_NO_FROMOWNER_KEY);
    }
    if (errors.size() > 0) {
      httpServletToolbox.writeBodyResponseAsJson(response,""String_Node_Str"",errors);
    }
    List<WBParameter> ownerParams=adminStorage.query(WBParameter.class,""String_Node_Str"",AdminQueryOperator.EQUAL,Long.valueOf(fromOwnerExternalKey));
    List<WBParameter> newParams=new ArrayList<WBParameter>();
    for (    WBParameter parameter : ownerParams) {
      parameter.setOwnerExternalKey(ownerExternalKey);
      parameter.setKey(null);
      parameter.setExternalKey(adminStorage.getUniqueId());
      parameter.setLastModified(Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str"")).getTime());
      WBParameter newParam=adminStorage.add(parameter);
      newParams.add(newParam);
    }
    String jsonReturn=jsonObjectConverter.JSONStringFromListObjects(newParams);
    httpServletToolbox.writeBodyResponseAsJson(response,jsonReturn.toString(),errors);
  }
 catch (  Exception e) {
    Map<String,String> errors=new HashMap<String,String>();
    errors.put(""String_Node_Str"",WBErrors.WB_CANT_CREATE_RECORD);
    httpServletToolbox.writeBodyResponseAsJson(response,""String_Node_Str"",errors);
  }
}","public void createFromOwner(String fromOwnerExternalKey,String ownerExternalKey,HttpServletRequest request,HttpServletResponse response,String requestUri) throws WBException {
  try {
    Map<String,String> errors=new HashMap<String,String>();
    if (ownerExternalKey == null || ownerExternalKey.equals(0L)) {
      errors.put(""String_Node_Str"",WBErrors.WBPARAMETER_NO_OWNER_KEY);
    }
    if (fromOwnerExternalKey == null || fromOwnerExternalKey.equals(0L)) {
      errors.put(""String_Node_Str"",WBErrors.WBPARAMETER_NO_FROMOWNER_KEY);
    }
    if (errors.size() > 0) {
      httpServletToolbox.writeBodyResponseAsJson(response,""String_Node_Str"",errors);
    }
    List<WBParameter> ownerParams=adminStorage.query(WBParameter.class,""String_Node_Str"",AdminQueryOperator.EQUAL,fromOwnerExternalKey);
    List<WBParameter> newParams=new ArrayList<WBParameter>();
    for (    WBParameter parameter : ownerParams) {
      parameter.setOwnerExternalKey(ownerExternalKey);
      parameter.setKey(null);
      parameter.setExternalKey(adminStorage.getUniqueId());
      parameter.setLastModified(Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str"")).getTime());
      WBParameter newParam=adminStorage.add(parameter);
      newParams.add(newParam);
    }
    String jsonReturn=jsonObjectConverter.JSONStringFromListObjects(newParams);
    httpServletToolbox.writeBodyResponseAsJson(response,jsonReturn.toString(),errors);
  }
 catch (  Exception e) {
    Map<String,String> errors=new HashMap<String,String>();
    errors.put(""String_Node_Str"",WBErrors.WB_CANT_CREATE_RECORD);
    httpServletToolbox.writeBodyResponseAsJson(response,""String_Node_Str"",errors);
  }
}",0.9934367541766108
59513,"public int getInt(String widgetSize,int defaultVal);","int getInt(String widgetSize,int defaultVal);",0.9278350515463918
59514,"public Storage putFloat(String key,Float value);","Storage putFloat(String key,Float value);",0.9213483146067416
59515,"public Storage putInt(String key,int value);","Storage putInt(String key,int value);",0.9135802469135802
59516,"public Storage putString(String key,String value);","Storage putString(String key,String value);",0.9247311827956988
59517,"public boolean getBoolean(String large_font,boolean defaultVal);","boolean getBoolean(String large_font,boolean defaultVal);",0.9421487603305784
59518,"public String getString(String key,String defaultVal);","String getString(String key,String defaultVal);",0.9306930693069309
59519,"public Storage putLong(String key,Long value);","Storage putLong(String key,Long value);",0.9176470588235294
59520,"public Storage putBoolean(String key,Boolean value);","Storage putBoolean(String key,Boolean value);",0.9278350515463918
59521,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  Preference about=findPreference(""String_Node_Str"");
  about.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showDisclaimer();
      return true;
    }
  }
);
  Preference help=findPreference(""String_Node_Str"");
  help.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelp();
      return true;
    }
  }
);
  for (int i=1; i < 11; i++) {
    String key=""String_Node_Str"" + i;
    findPreference(key).setOnPreferenceClickListener(new OnPreferenceClickListener(){
      @Override public boolean onPreferenceClick(      Preference preference){
        mSymbolSearchKey=preference.getKey();
        String query=preference.getSharedPreferences().getString(mSymbolSearchKey,""String_Node_Str"");
        startSearch(query,false,null,false);
        return true;
      }
    }
);
  }
  Preference help_usage=findPreference(""String_Node_Str"");
  help_usage.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpUsage();
      return true;
    }
  }
);
  Preference help_portfolio=findPreference(""String_Node_Str"");
  help_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPortfolio();
      return true;
    }
  }
);
  Preference help_prices=findPreference(""String_Node_Str"");
  help_prices.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPrices();
      return true;
    }
  }
);
  Preference updateNow=findPreference(""String_Node_Str"");
  updateNow.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      mPendingUpdate=true;
      finish();
      return true;
    }
  }
);
  Preference portfolio=findPreference(""String_Node_Str"");
  portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(PreferencesActivity.this,PortfolioActivity.class);
      startActivity(intent);
      return true;
    }
  }
);
  Preference backup_widget=findPreference(""String_Node_Str"");
  backup_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.backupWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.inputWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + mAppWidgetId + ""String_Node_Str""+ DateTools.getNowAsString(),callable);
      return true;
    }
  }
);
  Preference restore_widget=findPreference(""String_Node_Str"");
  restore_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      CharSequence[] backupNames=UserData.getWidgetBackupNames(PreferencesActivity.this);
      if (backupNames == null) {
        DialogTools.showSimpleDialog(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"");
        return true;
      }
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.restoreWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.choiceWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",backupNames,callable);
      return true;
    }
  }
);
  Preference delete_widget_backup=findPreference(""String_Node_Str"");
  delete_widget_backup.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      CharSequence[] backupNames=UserData.getWidgetBackupNames(PreferencesActivity.this);
      if (backupNames == null) {
        DialogTools.showSimpleDialog(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"");
        return true;
      }
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.deleteWidgetBackup(PreferencesActivity.this,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.choiceWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",backupNames,callable);
      return true;
    }
  }
);
  Preference rate_app=findPreference(""String_Node_Str"");
  rate_app.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showFeedbackOption();
      return true;
    }
  }
);
  Preference online_help=findPreference(""String_Node_Str"");
  online_help.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showOnlineHelp();
      return true;
    }
  }
);
  Preference online_faqs=findPreference(""String_Node_Str"");
  online_faqs.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showOnlineFaqs();
      return true;
    }
  }
);
  Preference feedback=findPreference(""String_Node_Str"");
  feedback.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_SEND);
      intent.setType(""String_Node_Str"");
      String[] toAddress={""String_Node_Str""};
      intent.putExtra(Intent.EXTRA_EMAIL,toAddress);
      intent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.app_name) + ""String_Node_Str"" + VersionTools.BUILD);
      intent.setType(""String_Node_Str"");
      try {
        startActivity(intent);
        return true;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
catch (      Throwable e) {
        e.printStackTrace();
      }
      DialogTools.showSimpleDialog(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
      return true;
    }
  }
);
  Preference change_history=findPreference(""String_Node_Str"");
  change_history.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showChangeLog();
      return true;
    }
  }
);
  mTimeSetListener=new TimePickerDialog.OnTimeSetListener(){
    @Override public void onTimeSet(    TimePicker view,    int hourOfDay,    int minute){
      setTimePickerPreference(hourOfDay,minute);
    }
  }
;
  Preference update_start=findPreference(""String_Node_Str"");
  update_start.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
  Preference update_end=findPreference(""String_Node_Str"");
  update_end.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  Preference about=findPreference(""String_Node_Str"");
  about.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showDisclaimer();
      return true;
    }
  }
);
  Preference help=findPreference(""String_Node_Str"");
  help.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelp();
      return true;
    }
  }
);
  for (int i=1; i < 11; i++) {
    String key=""String_Node_Str"" + i;
    findPreference(key).setOnPreferenceClickListener(new OnPreferenceClickListener(){
      @Override public boolean onPreferenceClick(      Preference preference){
        mSymbolSearchKey=preference.getKey();
        String query=preference.getSharedPreferences().getString(mSymbolSearchKey,""String_Node_Str"");
        startSearch(query,false,null,false);
        return true;
      }
    }
);
  }
  Preference help_usage=findPreference(""String_Node_Str"");
  help_usage.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpUsage();
      return true;
    }
  }
);
  Preference help_portfolio=findPreference(""String_Node_Str"");
  help_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPortfolio();
      return true;
    }
  }
);
  Preference help_prices=findPreference(""String_Node_Str"");
  help_prices.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPrices();
      return true;
    }
  }
);
  Preference updateNow=findPreference(""String_Node_Str"");
  updateNow.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      mPendingUpdate=true;
      finish();
      return true;
    }
  }
);
  Preference portfolio=findPreference(""String_Node_Str"");
  portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(PreferencesActivity.this,PortfolioActivity.class);
      startActivity(intent);
      return true;
    }
  }
);
  Preference backup_widget=findPreference(""String_Node_Str"");
  backup_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.backupWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.inputWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + mAppWidgetId + ""String_Node_Str""+ DateTools.getNowAsString(),callable);
      return true;
    }
  }
);
  Preference restore_widget=findPreference(""String_Node_Str"");
  restore_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      CharSequence[] backupNames=UserData.getWidgetBackupNames(PreferencesActivity.this);
      if (backupNames == null) {
        DialogTools.showSimpleDialog(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"");
        return true;
      }
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.restoreWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.choiceWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",backupNames,callable);
      return true;
    }
  }
);
  Preference delete_widget_backup=findPreference(""String_Node_Str"");
  delete_widget_backup.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      CharSequence[] backupNames=UserData.getWidgetBackupNames(PreferencesActivity.this);
      if (backupNames == null) {
        DialogTools.showSimpleDialog(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"");
        return true;
      }
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.deleteWidgetBackup(PreferencesActivity.this,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.choiceWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",backupNames,callable);
      return true;
    }
  }
);
  Preference rate_app=findPreference(""String_Node_Str"");
  rate_app.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showFeedbackOption();
      return true;
    }
  }
);
  Preference online_help=findPreference(""String_Node_Str"");
  online_help.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showOnlineHelp();
      return true;
    }
  }
);
  Preference online_faqs=findPreference(""String_Node_Str"");
  online_faqs.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showOnlineFaqs();
      return true;
    }
  }
);
  Preference feedback=findPreference(""String_Node_Str"");
  feedback.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_SEND);
      intent.setType(""String_Node_Str"");
      String[] toAddress={""String_Node_Str""};
      intent.putExtra(Intent.EXTRA_EMAIL,toAddress);
      intent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.app_name) + ""String_Node_Str"" + VersionTools.BUILD);
      intent.setType(""String_Node_Str"");
      try {
        startActivity(intent);
        return true;
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
      DialogTools.showSimpleDialog(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
      return true;
    }
  }
);
  Preference change_history=findPreference(""String_Node_Str"");
  change_history.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showChangeLog();
      return true;
    }
  }
);
  mTimeSetListener=new TimePickerDialog.OnTimeSetListener(){
    @Override public void onTimeSet(    TimePicker view,    int hourOfDay,    int minute){
      setTimePickerPreference(hourOfDay,minute);
    }
  }
;
  Preference update_start=findPreference(""String_Node_Str"");
  update_start.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
  Preference update_end=findPreference(""String_Node_Str"");
  update_end.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
}",0.9958732778871184
59522,"public WidgetStock(StockQuote quote,PortfolioStock portfolioStock){
  price=quote.getPrice();
  displayName=quote.getName();
  if (portfolioStock != null && !portfolioStock.getCustomName().equals(""String_Node_Str"")) {
    displayName=portfolioStock.getCustomName();
  }
  dailyChange=quote.getChange();
  dailyPercent=quote.getPercent();
  volume=NumberTools.getNormalisedVolume(quote.getVolume());
  Double elapsedYears=null;
  Double priceValue=NumberTools.parseDouble(quote.getPrice());
  Double dailyChangeValue=NumberTools.parseDouble(quote.getChange());
  Double buyPriceValue=null;
  Double quantityValue=null;
  Double limitHighValue=null;
  Double limitLowValue=null;
  if (portfolioStock != null) {
    buyPriceValue=NumberTools.parseDouble(portfolioStock.getPrice());
    quantityValue=NumberTools.parseDouble(portfolioStock.getQuantity());
    limitHighValue=NumberTools.parseDouble(portfolioStock.getHighLimit());
    limitLowValue=NumberTools.parseDouble(portfolioStock.getLowLimit());
  }
  Double priceChangeValue=null;
  try {
    priceChangeValue=priceValue - buyPriceValue;
  }
 catch (  Exception ignored) {
  }
  try {
    Date date=new SimpleDateFormat(""String_Node_Str"").parse(portfolioStock.getDate());
    double elapsed=(new Date().getTime() - date.getTime()) / 1000;
    elapsedYears=elapsed / 31536000;
  }
 catch (  Exception ignored) {
  }
  if (priceChangeValue != null) {
    totalChange=NumberTools.getTrimmedDouble(priceChangeValue,5);
  }
  if (priceChangeValue != null) {
    totalPercent=String.format(""String_Node_Str"",100 * (priceChangeValue / buyPriceValue)) + ""String_Node_Str"";
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalChangeAer=NumberTools.getTrimmedDouble(priceChangeValue / elapsedYears,5);
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalPercentAer=String.format(""String_Node_Str"",(100 * (priceChangeValue / buyPriceValue)) / elapsedYears) + ""String_Node_Str"";
  }
  if (priceValue != null && quantityValue != null) {
    plHolding=String.format(""String_Node_Str"",priceValue * quantityValue);
  }
  if (dailyChangeValue != null && quantityValue != null) {
    plDailyChange=String.format(""String_Node_Str"",dailyChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null) {
    plTotalChange=String.format(""String_Node_Str"",priceChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null && elapsedYears != null) {
    plTotalChangeAer=String.format(""String_Node_Str"",(priceChangeValue * quantityValue) / elapsedYears);
  }
  if (priceValue != null && limitHighValue != null) {
    limitHighTriggered=priceValue > limitHighValue;
  }
  if (priceValue != null && limitLowValue != null) {
    limitLowTriggered=priceValue < limitLowValue;
  }
}","public WidgetStock(StockQuote quote,PortfolioStock portfolioStock){
  price=quote.getPrice();
  displayName=quote.getName();
  if (portfolioStock != null && !portfolioStock.getCustomName().equals(""String_Node_Str"")) {
    displayName=portfolioStock.getCustomName();
  }
  dailyChange=quote.getChange();
  dailyPercent=quote.getPercent();
  volume=NumberTools.getNormalisedVolume(quote.getVolume());
  Double elapsedYears=null;
  Double priceValue=NumberTools.parseDouble(quote.getPrice());
  Double dailyChangeValue=NumberTools.parseDouble(quote.getChange());
  Double buyPriceValue=null;
  Double quantityValue=null;
  Double limitHighValue=null;
  Double limitLowValue=null;
  if (portfolioStock != null) {
    buyPriceValue=NumberTools.parseDouble(portfolioStock.getPrice());
    quantityValue=NumberTools.parseDouble(portfolioStock.getQuantity());
    limitHighValue=NumberTools.parseDouble(portfolioStock.getHighLimit());
    limitLowValue=NumberTools.parseDouble(portfolioStock.getLowLimit());
  }
  Double priceChangeValue=null;
  try {
    priceChangeValue=priceValue - buyPriceValue;
  }
 catch (  Exception ignored) {
  }
  try {
    Date date=new SimpleDateFormat(""String_Node_Str"").parse(portfolioStock.getDate());
    double elapsed=(new Date().getTime() - date.getTime()) / 1000;
    elapsedYears=elapsed / 31536000;
  }
 catch (  Exception ignored) {
  }
  if (priceChangeValue != null) {
    totalChange=NumberTools.getTrimmedDouble(priceChangeValue,5);
  }
  if (priceChangeValue != null) {
    totalPercent=String.format(""String_Node_Str"",100 * (priceChangeValue / buyPriceValue)) + ""String_Node_Str"";
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalChangeAer=NumberTools.getTrimmedDouble(priceChangeValue / elapsedYears,5);
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalPercentAer=String.format(""String_Node_Str"",(100 * (priceChangeValue / buyPriceValue)) / elapsedYears) + ""String_Node_Str"";
  }
  if (quantityValue != null) {
    plHolding=String.format(""String_Node_Str"",priceValue * quantityValue);
  }
  if (dailyChangeValue != null && quantityValue != null) {
    plDailyChange=String.format(""String_Node_Str"",dailyChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null) {
    plTotalChange=String.format(""String_Node_Str"",priceChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null && elapsedYears != null) {
    plTotalChangeAer=String.format(""String_Node_Str"",(priceChangeValue * quantityValue) / elapsedYears);
  }
  if (limitHighValue != null) {
    limitHighTriggered=priceValue > limitHighValue;
  }
  if (limitLowValue != null) {
    limitLowTriggered=priceValue < limitLowValue;
  }
}",0.8855182376309136
59523,"void showPortfolioItemEdit(AdapterView<?> a,int position){
  final Dialog portfolioItemEdit=new Dialog(this);
  portfolioItemEdit.setContentView(R.layout.portfolio_item);
  @SuppressWarnings(""String_Node_Str"") HashMap<String,String> stockMap=(HashMap<String,String>)a.getItemAtPosition(position);
  mStockSymbol=stockMap.get(""String_Node_Str"");
  StockQuote data=this.portfolioRepository.stocksQuotes.get(mStockSymbol);
  String currentPrice=""String_Node_Str"";
  if (data != null)   currentPrice=data.getPrice();
  String price=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String date=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String quantity=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitHigh=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitLow=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String customDisplay=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  if (price.equals(""String_Node_Str"")) {
    price=currentPrice;
    date=new SimpleDateFormat(""String_Node_Str"").format(new Date());
  }
  EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
  priceEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  priceEditText.setText(price);
  EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
  dateEditText.setInputType(InputType.TYPE_CLASS_DATETIME + InputType.TYPE_DATETIME_VARIATION_DATE);
  if (!date.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   dateEditText.setText(date);
  EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
  quantityEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_SIGNED + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!quantity.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   quantityEditText.setText(quantity);
  EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
  limitHighEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!limitHigh.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitHighEditText.setText(limitHigh);
  EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
  limitLowEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!limitLow.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitLowEditText.setText(limitLow);
  EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
  customDisplayText.setInputType(InputType.TYPE_CLASS_TEXT + InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
  if (!customDisplay.equals(""String_Node_Str"") && !customDisplay.equals(""String_Node_Str""))   customDisplayText.setText(customDisplay);
  Button okButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_save);
  okButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
      String price=priceEditText.getText().toString();
      EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
      String date=dateEditText.getText().toString();
      EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
      String quantity=quantityEditText.getText().toString();
      EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
      String limitHigh=limitHighEditText.getText().toString();
      EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
      String limitLow=limitLowEditText.getText().toString();
      EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
      String customDisplay=customDisplayText.getText().toString();
      if (price.equals(""String_Node_Str"")) {
        date=""String_Node_Str"";
        quantity=""String_Node_Str"";
        limitHigh=""String_Node_Str"";
        limitLow=""String_Node_Str"";
      }
 else {
        try {
          price=Double.toString(Double.parseDouble(price));
          if (!date.equals(""String_Node_Str"")) {
            SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
            date=formatter.format(formatter.parse(date.replaceAll(""String_Node_Str"",""String_Node_Str""))).toUpperCase();
          }
          if (!quantity.equals(""String_Node_Str"")) {
            quantity=Double.toString(Double.parseDouble(quantity));
          }
          if (!limitHigh.equals(""String_Node_Str"")) {
            limitHigh=Double.toString(Double.parseDouble(limitHigh));
          }
          if (!limitLow.equals(""String_Node_Str"")) {
            limitLow=Double.toString(Double.parseDouble(limitLow));
          }
        }
 catch (        Exception e) {
          portfolioItemEdit.dismiss();
          return;
        }
      }
      if (price.indexOf(""String_Node_Str"") == price.length() - 2) {
        price=price + ""String_Node_Str"";
      }
      portfolioRepository.updateStock(mStockSymbol,price,date,quantity,limitHigh,limitLow,customDisplay);
      refreshView();
      portfolioItemEdit.dismiss();
    }
  }
);
  Button cancelButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_cancel);
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      portfolioItemEdit.dismiss();
    }
  }
);
  portfolioItemEdit.setTitle(mStockSymbol + ""String_Node_Str"");
  portfolioItemEdit.show();
}","void showPortfolioItemEdit(AdapterView<?> a,int position){
  final Dialog portfolioItemEdit=new Dialog(this);
  portfolioItemEdit.setContentView(R.layout.portfolio_item);
  @SuppressWarnings(""String_Node_Str"") HashMap<String,String> stockMap=(HashMap<String,String>)a.getItemAtPosition(position);
  mStockSymbol=stockMap.get(""String_Node_Str"");
  StockQuote data=this.portfolioRepository.stocksQuotes.get(mStockSymbol);
  String currentPrice=""String_Node_Str"";
  if (data != null)   currentPrice=data.getPrice();
  String price=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String date=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String quantity=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitHigh=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitLow=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String customDisplay=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  if (price.equals(""String_Node_Str"")) {
    price=currentPrice;
    date=new SimpleDateFormat(""String_Node_Str"").format(new Date());
  }
  EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
  priceEditText.setKeyListener(InputTools.getDecimalKeyListener());
  priceEditText.setText(price);
  EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
  dateEditText.setInputType(InputType.TYPE_CLASS_DATETIME + InputType.TYPE_DATETIME_VARIATION_DATE);
  if (!date.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   dateEditText.setText(date);
  EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
  quantityEditText.setKeyListener(InputTools.getSignedDecimalKeyListener());
  if (!quantity.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   quantityEditText.setText(quantity);
  EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
  limitHighEditText.setKeyListener(InputTools.getDecimalKeyListener());
  if (!limitHigh.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitHighEditText.setText(limitHigh);
  EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
  limitLowEditText.setKeyListener(InputTools.getDecimalKeyListener());
  if (!limitLow.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitLowEditText.setText(limitLow);
  EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
  customDisplayText.setInputType(InputType.TYPE_CLASS_TEXT + InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
  if (!customDisplay.equals(""String_Node_Str"") && !customDisplay.equals(""String_Node_Str""))   customDisplayText.setText(customDisplay);
  Button okButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_save);
  okButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
      String price=priceEditText.getText().toString();
      EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
      String date=dateEditText.getText().toString();
      EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
      String quantity=quantityEditText.getText().toString();
      EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
      String limitHigh=limitHighEditText.getText().toString();
      EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
      String limitLow=limitLowEditText.getText().toString();
      EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
      String customDisplay=customDisplayText.getText().toString();
      if (price.equals(""String_Node_Str"")) {
        date=""String_Node_Str"";
        quantity=""String_Node_Str"";
        limitHigh=""String_Node_Str"";
        limitLow=""String_Node_Str"";
      }
 else {
        try {
          price=NumberTools.validatedDoubleString(price);
          if (!date.equals(""String_Node_Str"")) {
            SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
            date=formatter.format(formatter.parse(date.replaceAll(""String_Node_Str"",""String_Node_Str""))).toUpperCase();
          }
          if (!quantity.equals(""String_Node_Str"")) {
            quantity=NumberTools.validatedDoubleString(quantity);
          }
          if (!limitHigh.equals(""String_Node_Str"")) {
            limitHigh=NumberTools.validatedDoubleString(limitHigh);
          }
          if (!limitLow.equals(""String_Node_Str"")) {
            limitLow=NumberTools.validatedDoubleString(limitLow);
          }
        }
 catch (        Exception e) {
          portfolioItemEdit.dismiss();
          return;
        }
      }
      if (price.indexOf(""String_Node_Str"") == price.length() - 2) {
        price=price + ""String_Node_Str"";
      }
      portfolioRepository.updateStock(mStockSymbol,price,date,quantity,limitHigh,limitLow,customDisplay);
      refreshView();
      portfolioItemEdit.dismiss();
    }
  }
);
  Button cancelButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_cancel);
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      portfolioItemEdit.dismiss();
    }
  }
);
  portfolioItemEdit.setTitle(mStockSymbol + ""String_Node_Str"");
  portfolioItemEdit.show();
}",0.8125210366879838
59524,"public HashMap<String,StockQuote> getQuotes(Cache cache,List<String> symbols){
  HashMap<String,StockQuote> quotes=new HashMap<>();
  JSONArray jsonArray;
  JSONObject quoteJson;
  try {
    jsonArray=this.retrieveQuotesAsJson(cache,symbols);
    for (int i=0; i < jsonArray.length(); i++) {
      quoteJson=jsonArray.getJSONObject(i);
      StockQuote quote=new StockQuote(quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",quoteJson.optString(""String_Node_Str""));
      quotes.put(quote.getSymbol(),quote);
    }
  }
 catch (  JSONException e) {
    return null;
  }
  return quotes;
}","public HashMap<String,StockQuote> getQuotes(Cache cache,List<String> symbols){
  HashMap<String,StockQuote> quotes=new HashMap<>();
  JSONArray jsonArray;
  JSONObject quoteJson;
  try {
    jsonArray=this.retrieveQuotesAsJson(cache,symbols);
    for (int i=0; i < jsonArray.length(); i++) {
      quoteJson=jsonArray.getJSONObject(i);
      StockQuote quote=new StockQuote(quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",quoteJson.optString(""String_Node_Str""),Locale.US);
      quotes.put(quote.getSymbol(),quote);
    }
  }
 catch (  JSONException e) {
    return null;
  }
  return quotes;
}",0.9940758293838864
59525,"public HashMap<String,StockQuote> getQuotes(Cache cache,List<String> symbols){
  HashMap<String,StockQuote> quotes=new HashMap<>();
  HashMap<String,String> fxChanges=this.fxChangeRepository.getChanges(cache,symbols);
  JSONArray jsonArray;
  JSONObject quoteJson;
  try {
    jsonArray=this.retrieveQuotesAsJson(cache,symbols);
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.length(); i++) {
        quoteJson=jsonArray.getJSONObject(i);
        StockQuote quote=new StockQuote(quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),fxChanges.get(quoteJson.optString(""String_Node_Str"")));
        quotes.put(quote.getSymbol(),quote);
      }
    }
  }
 catch (  JSONException e) {
    return null;
  }
  return quotes;
}","public HashMap<String,StockQuote> getQuotes(Cache cache,List<String> symbols){
  HashMap<String,StockQuote> quotes=new HashMap<>();
  HashMap<String,String> fxChanges=this.fxChangeRepository.getChanges(cache,symbols);
  JSONArray jsonArray;
  JSONObject quoteJson;
  try {
    jsonArray=this.retrieveQuotesAsJson(cache,symbols);
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.length(); i++) {
        quoteJson=jsonArray.getJSONObject(i);
        StockQuote quote=new StockQuote(quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),quoteJson.optString(""String_Node_Str""),fxChanges.get(quoteJson.optString(""String_Node_Str"")),Locale.US);
        quotes.put(quote.getSymbol(),quote);
      }
    }
  }
 catch (  JSONException e) {
    return null;
  }
  return quotes;
}",0.9947916666666666
59526,"public List<Map<String,String>> getDisplayInfo(){
  NumberFormat numberFormat=NumberFormat.getInstance();
  List<Map<String,String>> info=new ArrayList<>();
  for (  String symbol : this.getSortedSymbols()) {
    StockQuote quote=this.stocksQuotes.get(symbol);
    PortfolioStock stock=this.getStock(symbol);
    Map<String,String> itemInfo=new HashMap<>();
    populateDisplayNames(quote,stock,itemInfo);
    String currentPrice=populateDisplayCurrentPrice(quote,itemInfo);
    if (hasInfoForStock(stock)) {
      String buyPrice=stock.getPrice();
      itemInfo.put(""String_Node_Str"",buyPrice);
      itemInfo.put(""String_Node_Str"",stock.getDate());
      populateDisplayHighLimit(stock,itemInfo);
      populateDisplayLowLimit(stock,itemInfo);
      itemInfo.put(""String_Node_Str"",stock.getQuantity());
      populateDisplayLastChange(numberFormat,symbol,quote,stock,itemInfo);
      populateDisplayTotalChange(numberFormat,symbol,stock,itemInfo,currentPrice,buyPrice);
      populateDisplayHoldingValue(numberFormat,symbol,stock,itemInfo,currentPrice);
    }
    itemInfo.put(""String_Node_Str"",symbol);
    info.add(itemInfo);
  }
  return info;
}","public List<Map<String,String>> getDisplayInfo(){
  NumberFormat numberFormat=NumberFormat.getInstance(Locale.getDefault());
  List<Map<String,String>> info=new ArrayList<>();
  for (  String symbol : this.getSortedSymbols()) {
    StockQuote quote=this.stocksQuotes.get(symbol);
    PortfolioStock stock=this.getStock(symbol);
    Map<String,String> itemInfo=new HashMap<>();
    populateDisplayNames(quote,stock,itemInfo);
    String currentPrice=populateDisplayCurrentPrice(quote,itemInfo);
    if (hasInfoForStock(stock)) {
      String buyPrice=stock.getPrice();
      itemInfo.put(""String_Node_Str"",buyPrice);
      itemInfo.put(""String_Node_Str"",stock.getDate());
      populateDisplayHighLimit(stock,itemInfo);
      populateDisplayLowLimit(stock,itemInfo);
      itemInfo.put(""String_Node_Str"",stock.getQuantity());
      populateDisplayLastChange(numberFormat,symbol,quote,stock,itemInfo);
      populateDisplayTotalChange(numberFormat,symbol,stock,itemInfo,currentPrice,buyPrice);
      populateDisplayHoldingValue(numberFormat,symbol,stock,itemInfo,currentPrice);
    }
    itemInfo.put(""String_Node_Str"",symbol);
    info.add(itemInfo);
  }
  return info;
}",0.991813873330461
59527,"public StockQuote(String symbol,String price,String change,String percent,String exchange,String volume,String name,String previousPrice){
  this.symbol=symbol;
  this.exchange=exchange;
  this.volume=volume;
  this.name=name;
  Double p0=null;
  boolean isFx=symbol.contains(""String_Node_Str"");
  if (isFx) {
    try {
      p0=Double.parseDouble(previousPrice);
    }
 catch (    Exception ignored) {
    }
  }
  Double p=null;
  if (!price.equals(""String_Node_Str"")) {
    try {
      p=Double.parseDouble(price);
      if (isFx) {
        this.price=NumberTools.getTrimmedDouble2(p,6);
      }
 else {
        this.price=NumberTools.getTrimmedDouble(p,6,4);
      }
    }
 catch (    Exception e) {
      this.price=""String_Node_Str"";
    }
    if (!this.isNonEmptyNumber(price) && p0 == null) {
      change=""String_Node_Str"";
    }
    if (!this.isNonEmptyNumber(percent) && p0 == null) {
      percent=""String_Node_Str"";
    }
  }
  Double c=null;
  if (this.isNonEmptyNumber(change)) {
    c=Double.parseDouble(change);
  }
 else   if (p0 != null && p != null) {
    c=p - p0;
  }
  if (c != null) {
    if (p != null && (p < 10 || isFx)) {
      this.change=NumberTools.getTrimmedDouble(c,5,3);
    }
 else {
      this.change=NumberTools.getTrimmedDouble(c,5);
    }
  }
  Double pc=null;
  if (this.isNonEmptyNumber(percent)) {
    pc=Double.parseDouble(percent.replace(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    if (c != null && p != null) {
      pc=(c / p) * 100;
    }
  }
  if (pc != null) {
    this.percent=String.format(""String_Node_Str"",pc) + ""String_Node_Str"";
  }
}","public StockQuote(String symbol,String price,String change,String percent,String exchange,String volume,String name,String previousPrice,Locale locale){
  this.symbol=symbol;
  this.exchange=exchange;
  this.volume=volume;
  this.name=name;
  Double p0=null;
  boolean isFx=symbol.contains(""String_Node_Str"");
  if (isFx) {
    try {
      p0=NumberTools.tryParseDouble(previousPrice,locale);
    }
 catch (    Exception ignored) {
    }
  }
  Double p=null;
  if (!price.equals(""String_Node_Str"")) {
    try {
      p=NumberTools.tryParseDouble(price,locale);
      if (isFx) {
        this.price=NumberTools.getTrimmedDouble2(p,6);
      }
 else {
        this.price=NumberTools.getTrimmedDouble(p,6,4);
      }
    }
 catch (    Exception e) {
      this.price=""String_Node_Str"";
    }
    if (!this.isNonEmptyNumber(price) && p0 == null) {
      change=""String_Node_Str"";
    }
    if (!this.isNonEmptyNumber(percent) && p0 == null) {
      percent=""String_Node_Str"";
    }
  }
  Double c=null;
  if (this.isNonEmptyNumber(change)) {
    try {
      c=NumberTools.tryParseDouble(change,locale);
    }
 catch (    ParseException ignored) {
    }
  }
 else   if (p0 != null && p != null) {
    c=p - p0;
  }
  if (c != null) {
    if (p != null && (p < 10 || isFx)) {
      this.change=NumberTools.getTrimmedDouble(c,5,3);
    }
 else {
      this.change=NumberTools.getTrimmedDouble(c,5);
    }
  }
  Double pc=null;
  if (this.isNonEmptyNumber(percent)) {
    try {
      pc=NumberTools.tryParseDouble(percent.replace(""String_Node_Str"",""String_Node_Str""),locale);
    }
 catch (    ParseException ignored) {
    }
  }
 else {
    if (c != null && p != null) {
      pc=(c / p) * 100;
    }
  }
  if (pc != null) {
    this.percent=String.format(""String_Node_Str"",pc) + ""String_Node_Str"";
  }
}",0.901060070671378
59528,"private HashMap<String,StockQuote> loadQuotes(){
  if (mCachedQuotes != null && !mCachedQuotes.isEmpty()) {
    return mCachedQuotes;
  }
  HashMap<String,StockQuote> quotes=new HashMap<>();
  String savedQuotesString=this.appStorage.getString(""String_Node_Str"",""String_Node_Str"");
  String timeStamp=this.appStorage.getString(""String_Node_Str"",""String_Node_Str"");
  if (!savedQuotesString.equals(""String_Node_Str"")) {
    JSONObject savedQuotes=new JSONObject();
    try {
      savedQuotes=new JSONObject(savedQuotesString);
    }
 catch (    JSONException ignored) {
    }
    try {
      String key;
      JSONObject details;
      for (Iterator iter=savedQuotes.keys(); iter.hasNext(); ) {
        key=(String)iter.next();
        details=savedQuotes.getJSONObject(key);
        quotes.put(key,new StockQuote(details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str"")));
      }
    }
 catch (    Exception e) {
      quotes=new HashMap<>();
    }
  }
  mCachedQuotes=quotes;
  mTimeStamp=timeStamp;
  return quotes;
}","private HashMap<String,StockQuote> loadQuotes(){
  if (mCachedQuotes != null && !mCachedQuotes.isEmpty()) {
    return mCachedQuotes;
  }
  HashMap<String,StockQuote> quotes=new HashMap<>();
  String savedQuotesString=this.appStorage.getString(""String_Node_Str"",""String_Node_Str"");
  String timeStamp=this.appStorage.getString(""String_Node_Str"",""String_Node_Str"");
  if (!savedQuotesString.equals(""String_Node_Str"")) {
    JSONObject savedQuotes=new JSONObject();
    try {
      savedQuotes=new JSONObject(savedQuotesString);
    }
 catch (    JSONException ignored) {
    }
    try {
      String key;
      JSONObject details;
      for (Iterator iter=savedQuotes.keys(); iter.hasNext(); ) {
        key=(String)iter.next();
        details=savedQuotes.getJSONObject(key);
        quotes.put(key,new StockQuote(details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),details.getString(""String_Node_Str""),Locale.getDefault()));
      }
    }
 catch (    Exception e) {
      quotes=new HashMap<>();
    }
  }
  mCachedQuotes=quotes;
  mTimeStamp=timeStamp;
  return quotes;
}",0.991889699918897
59529,"public WidgetStock(StockQuote quote,PortfolioStock portfolioStock){
  price=quote.getPrice();
  displayName=quote.getName();
  if (portfolioStock != null && !portfolioStock.getCustomName().equals(""String_Node_Str"")) {
    displayName=portfolioStock.getCustomName();
  }
  displayName=quote.getName();
  dailyChange=quote.getChange();
  dailyPercent=quote.getPercent();
  volume=NumberTools.getNormalisedVolume(quote.getVolume());
  Double elapsedYears=null;
  Double priceValue=NumberTools.parseDouble(quote.getPrice());
  Double dailyChangeValue=NumberTools.parseDouble(quote.getChange());
  Double buyPriceValue=null;
  Double quantityValue=null;
  Double limitHighValue=null;
  Double limitLowValue=null;
  if (portfolioStock != null) {
    buyPriceValue=NumberTools.parseDouble(portfolioStock.getPrice());
    quantityValue=NumberTools.parseDouble(portfolioStock.getQuantity());
    limitHighValue=NumberTools.parseDouble(portfolioStock.getHighLimit());
    limitLowValue=NumberTools.parseDouble(portfolioStock.getLowLimit());
  }
  Double priceChangeValue=null;
  try {
    priceChangeValue=priceValue - buyPriceValue;
  }
 catch (  Exception ignored) {
  }
  try {
    Date date=new SimpleDateFormat(""String_Node_Str"").parse(portfolioStock.getDate());
    double elapsed=(new Date().getTime() - date.getTime()) / 1000;
    elapsedYears=elapsed / 31536000;
  }
 catch (  Exception ignored) {
  }
  if (priceChangeValue != null) {
    totalChange=NumberTools.getTrimmedDouble(priceChangeValue,5);
  }
  if (priceChangeValue != null) {
    totalPercent=String.format(""String_Node_Str"",100 * (priceChangeValue / buyPriceValue)) + ""String_Node_Str"";
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalChangeAer=NumberTools.getTrimmedDouble(priceChangeValue / elapsedYears,5);
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalPercentAer=String.format(""String_Node_Str"",(100 * (priceChangeValue / buyPriceValue)) / elapsedYears) + ""String_Node_Str"";
  }
  if (priceValue != null && quantityValue != null) {
    plHolding=String.format(""String_Node_Str"",priceValue * quantityValue);
  }
  if (dailyChangeValue != null && quantityValue != null) {
    plDailyChange=String.format(""String_Node_Str"",dailyChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null) {
    plTotalChange=String.format(""String_Node_Str"",priceChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null && elapsedYears != null) {
    plTotalChangeAer=String.format(""String_Node_Str"",(priceChangeValue * quantityValue) / elapsedYears);
  }
  if (priceValue != null && limitHighValue != null) {
    limitHighTriggered=priceValue > limitHighValue;
  }
  if (priceValue != null && limitLowValue != null) {
    limitLowTriggered=priceValue < limitLowValue;
  }
}","public WidgetStock(StockQuote quote,PortfolioStock portfolioStock){
  price=quote.getPrice();
  displayName=quote.getName();
  if (portfolioStock != null && !portfolioStock.getCustomName().equals(""String_Node_Str"")) {
    displayName=portfolioStock.getCustomName();
  }
  dailyChange=quote.getChange();
  dailyPercent=quote.getPercent();
  volume=NumberTools.getNormalisedVolume(quote.getVolume());
  Double elapsedYears=null;
  Double priceValue=NumberTools.parseDouble(quote.getPrice());
  Double dailyChangeValue=NumberTools.parseDouble(quote.getChange());
  Double buyPriceValue=null;
  Double quantityValue=null;
  Double limitHighValue=null;
  Double limitLowValue=null;
  if (portfolioStock != null) {
    buyPriceValue=NumberTools.parseDouble(portfolioStock.getPrice());
    quantityValue=NumberTools.parseDouble(portfolioStock.getQuantity());
    limitHighValue=NumberTools.parseDouble(portfolioStock.getHighLimit());
    limitLowValue=NumberTools.parseDouble(portfolioStock.getLowLimit());
  }
  Double priceChangeValue=null;
  try {
    priceChangeValue=priceValue - buyPriceValue;
  }
 catch (  Exception ignored) {
  }
  try {
    Date date=new SimpleDateFormat(""String_Node_Str"").parse(portfolioStock.getDate());
    double elapsed=(new Date().getTime() - date.getTime()) / 1000;
    elapsedYears=elapsed / 31536000;
  }
 catch (  Exception ignored) {
  }
  if (priceChangeValue != null) {
    totalChange=NumberTools.getTrimmedDouble(priceChangeValue,5);
  }
  if (priceChangeValue != null) {
    totalPercent=String.format(""String_Node_Str"",100 * (priceChangeValue / buyPriceValue)) + ""String_Node_Str"";
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalChangeAer=NumberTools.getTrimmedDouble(priceChangeValue / elapsedYears,5);
  }
  if (priceChangeValue != null && elapsedYears != null) {
    totalPercentAer=String.format(""String_Node_Str"",(100 * (priceChangeValue / buyPriceValue)) / elapsedYears) + ""String_Node_Str"";
  }
  if (priceValue != null && quantityValue != null) {
    plHolding=String.format(""String_Node_Str"",priceValue * quantityValue);
  }
  if (dailyChangeValue != null && quantityValue != null) {
    plDailyChange=String.format(""String_Node_Str"",dailyChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null) {
    plTotalChange=String.format(""String_Node_Str"",priceChangeValue * quantityValue);
  }
  if (priceChangeValue != null && quantityValue != null && elapsedYears != null) {
    plTotalChangeAer=String.format(""String_Node_Str"",(priceChangeValue * quantityValue) / elapsedYears);
  }
  if (priceValue != null && limitHighValue != null) {
    limitHighTriggered=priceValue > limitHighValue;
  }
  if (priceValue != null && limitLowValue != null) {
    limitLowTriggered=priceValue < limitLowValue;
  }
}",0.9944986690328306
59530,"@Override public Storage getStorage(){
  SharedPreferences widgetPreferences=null;
  try {
    widgetPreferences=context.getSharedPreferences(context.getString(R.string.prefs_name) + this.id,0);
  }
 catch (  Resources.NotFoundException ignored) {
  }
  return new PreferenceStorage(widgetPreferences);
}","@Override public Storage getStorage(){
  SharedPreferences widgetPreferences=null;
  try {
    widgetPreferences=context.getApplicationContext().getSharedPreferences(context.getString(R.string.prefs_name) + this.id,0);
  }
 catch (  Resources.NotFoundException ignored) {
  }
  return new PreferenceStorage(widgetPreferences);
}",0.9620253164556962
59531,"public HashMap<String,String> getChanges(Cache cache,List<String> symbols){
  HashMap<String,String> changes=new HashMap<>();
  if (!this.hasFxSymbols(symbols)) {
    return changes;
  }
  try {
    JSONObject jsonChanges=retrieveChangesAsJson(cache);
    String symbol;
    for (Iterator<String> iter=jsonChanges.keys(); iter.hasNext(); ) {
      symbol=iter.next();
      changes.put(symbol,jsonChanges.getString(symbol));
    }
  }
 catch (  JSONException e) {
    return null;
  }
  return changes;
}","public HashMap<String,String> getChanges(Cache cache,List<String> symbols){
  HashMap<String,String> changes=new HashMap<>();
  if (!this.hasFxSymbols(symbols)) {
    return changes;
  }
  try {
    JSONObject jsonChanges=retrieveChangesAsJson(cache);
    String symbol;
    for (Iterator<String> iter=jsonChanges.keys(); iter.hasNext(); ) {
      symbol=iter.next();
      changes.put(symbol,jsonChanges.getString(symbol));
    }
  }
 catch (  JSONException e) {
  }
  return changes;
}",0.9606458123107972
59532,"@Override public void delWidget(int oldId){
  List<Integer> ids=this.getIds();
  if (!ids.contains(oldId)) {
    return;
  }
  ids.remove(oldId);
  this.setIds(ids);
}","@Override public void delWidget(int oldId){
  List<Integer> ids=this.getIds();
  if (!ids.contains(oldId)) {
    return;
  }
  ids.remove((Integer)oldId);
  this.setIds(ids);
}",0.9737609329446064
59533,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  Preference about=findPreference(""String_Node_Str"");
  about.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showDisclaimer();
      return true;
    }
  }
);
  Preference help=findPreference(""String_Node_Str"");
  help.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelp();
      return true;
    }
  }
);
  for (int i=1; i < 11; i++) {
    String key=""String_Node_Str"" + i;
    findPreference(key).setOnPreferenceClickListener(new OnPreferenceClickListener(){
      @Override public boolean onPreferenceClick(      Preference preference){
        mSymbolSearchKey=preference.getKey();
        String query=preference.getSharedPreferences().getString(mSymbolSearchKey,""String_Node_Str"");
        startSearch(query,false,null,false);
        return true;
      }
    }
);
  }
  Preference help_usage=findPreference(""String_Node_Str"");
  help_usage.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpUsage();
      return true;
    }
  }
);
  Preference help_portfolio=findPreference(""String_Node_Str"");
  help_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPortfolio();
      return true;
    }
  }
);
  Preference help_prices=findPreference(""String_Node_Str"");
  help_prices.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPrices();
      return true;
    }
  }
);
  Preference updateNow=findPreference(""String_Node_Str"");
  updateNow.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      WidgetProviderBase.updateWidgets(getApplicationContext(),WidgetProviderBase.VIEW_UPDATE);
      finish();
      return true;
    }
  }
);
  Preference portfolio=findPreference(""String_Node_Str"");
  portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(PreferencesActivity.this,PortfolioActivity.class);
      startActivity(intent);
      return true;
    }
  }
);
  Preference backup_portfolio=findPreference(""String_Node_Str"");
  backup_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Storage storage=PreferenceStorage.getInstance(PreferencesActivity.this);
      Cache cache=new PreferenceCache(PreferencesActivity.this);
      WidgetRepository widgetRepository=new AndroidWidgetRepository(PreferencesActivity.this);
      new PortfolioStockRepository(storage,cache,widgetRepository).backupPortfolio(PreferencesActivity.this);
      return true;
    }
  }
);
  Preference restore_portfolio=findPreference(""String_Node_Str"");
  restore_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Storage storage=PreferenceStorage.getInstance(PreferencesActivity.this);
      Cache cache=new PreferenceCache(PreferencesActivity.this);
      WidgetRepository widgetRepository=new AndroidWidgetRepository(PreferencesActivity.this);
      new PortfolioStockRepository(storage,cache,widgetRepository).backupPortfolio(PreferencesActivity.this);
      return true;
    }
  }
);
  Preference backup_widget=findPreference(""String_Node_Str"");
  backup_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.backupWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.inputWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + DateTools.getNowAsString(),callable);
      return true;
    }
  }
);
  Preference restore_widget=findPreference(""String_Node_Str"");
  restore_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      CharSequence[] backupNames=UserData.getWidgetBackupNames(PreferencesActivity.this);
      if (backupNames == null) {
        DialogTools.showSimpleDialog(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"");
        return true;
      }
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.restoreWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.choiceWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",backupNames,callable);
      return true;
    }
  }
);
  Preference rate_app=findPreference(""String_Node_Str"");
  rate_app.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showFeedbackOption();
      return true;
    }
  }
);
  Preference feedback=findPreference(""String_Node_Str"");
  feedback.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_SEND);
      intent.setType(""String_Node_Str"");
      String[] toAddress={""String_Node_Str""};
      intent.putExtra(Intent.EXTRA_EMAIL,toAddress);
      intent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.app_name) + ""String_Node_Str"" + VersionTools.BUILD);
      intent.setType(""String_Node_Str"");
      try {
        startActivity(intent);
        return true;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
catch (      Throwable e) {
        e.printStackTrace();
      }
      DialogTools.showSimpleDialog(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
      return true;
    }
  }
);
  Preference change_history=findPreference(""String_Node_Str"");
  change_history.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showChangeLog();
      return true;
    }
  }
);
  mTimeSetListener=new TimePickerDialog.OnTimeSetListener(){
    @Override public void onTimeSet(    TimePicker view,    int hourOfDay,    int minute){
      setTimePickerPreference(hourOfDay,minute);
    }
  }
;
  Preference update_start=findPreference(""String_Node_Str"");
  update_start.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
  Preference update_end=findPreference(""String_Node_Str"");
  update_end.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  Preference about=findPreference(""String_Node_Str"");
  about.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showDisclaimer();
      return true;
    }
  }
);
  Preference help=findPreference(""String_Node_Str"");
  help.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelp();
      return true;
    }
  }
);
  for (int i=1; i < 11; i++) {
    String key=""String_Node_Str"" + i;
    findPreference(key).setOnPreferenceClickListener(new OnPreferenceClickListener(){
      @Override public boolean onPreferenceClick(      Preference preference){
        mSymbolSearchKey=preference.getKey();
        String query=preference.getSharedPreferences().getString(mSymbolSearchKey,""String_Node_Str"");
        startSearch(query,false,null,false);
        return true;
      }
    }
);
  }
  Preference help_usage=findPreference(""String_Node_Str"");
  help_usage.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpUsage();
      return true;
    }
  }
);
  Preference help_portfolio=findPreference(""String_Node_Str"");
  help_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPortfolio();
      return true;
    }
  }
);
  Preference help_prices=findPreference(""String_Node_Str"");
  help_prices.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showHelpPrices();
      return true;
    }
  }
);
  Preference updateNow=findPreference(""String_Node_Str"");
  updateNow.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      WidgetProviderBase.updateWidgets(getApplicationContext(),WidgetProviderBase.VIEW_UPDATE);
      finish();
      return true;
    }
  }
);
  Preference portfolio=findPreference(""String_Node_Str"");
  portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(PreferencesActivity.this,PortfolioActivity.class);
      startActivity(intent);
      return true;
    }
  }
);
  Preference backup_portfolio=findPreference(""String_Node_Str"");
  backup_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Storage storage=PreferenceStorage.getInstance(PreferencesActivity.this);
      Cache cache=new PreferenceCache(PreferencesActivity.this);
      WidgetRepository widgetRepository=new AndroidWidgetRepository(PreferencesActivity.this);
      new PortfolioStockRepository(storage,cache,widgetRepository).backupPortfolio(PreferencesActivity.this);
      return true;
    }
  }
);
  Preference restore_portfolio=findPreference(""String_Node_Str"");
  restore_portfolio.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Storage storage=PreferenceStorage.getInstance(PreferencesActivity.this);
      Cache cache=new PreferenceCache(PreferencesActivity.this);
      WidgetRepository widgetRepository=new AndroidWidgetRepository(PreferencesActivity.this);
      new PortfolioStockRepository(storage,cache,widgetRepository).restorePortfolio(PreferencesActivity.this);
      return true;
    }
  }
);
  Preference backup_widget=findPreference(""String_Node_Str"");
  backup_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.backupWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.inputWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + DateTools.getNowAsString(),callable);
      return true;
    }
  }
);
  Preference restore_widget=findPreference(""String_Node_Str"");
  restore_widget.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      CharSequence[] backupNames=UserData.getWidgetBackupNames(PreferencesActivity.this);
      if (backupNames == null) {
        DialogTools.showSimpleDialog(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"");
        return true;
      }
      DialogTools.InputAlertCallable callable=new DialogTools.InputAlertCallable(){
        @Override public Object call() throws Exception {
          UserData.restoreWidget(PreferencesActivity.this,mAppWidgetId,this.getInputValue());
          return new Object();
        }
      }
;
      DialogTools.choiceWithCallback(PreferencesActivity.this,""String_Node_Str"",""String_Node_Str"",backupNames,callable);
      return true;
    }
  }
);
  Preference rate_app=findPreference(""String_Node_Str"");
  rate_app.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showFeedbackOption();
      return true;
    }
  }
);
  Preference feedback=findPreference(""String_Node_Str"");
  feedback.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Intent intent=new Intent(Intent.ACTION_SEND);
      intent.setType(""String_Node_Str"");
      String[] toAddress={""String_Node_Str""};
      intent.putExtra(Intent.EXTRA_EMAIL,toAddress);
      intent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.app_name) + ""String_Node_Str"" + VersionTools.BUILD);
      intent.setType(""String_Node_Str"");
      try {
        startActivity(intent);
        return true;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
catch (      Throwable e) {
        e.printStackTrace();
      }
      DialogTools.showSimpleDialog(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
      return true;
    }
  }
);
  Preference change_history=findPreference(""String_Node_Str"");
  change_history.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showChangeLog();
      return true;
    }
  }
);
  mTimeSetListener=new TimePickerDialog.OnTimeSetListener(){
    @Override public void onTimeSet(    TimePicker view,    int hourOfDay,    int minute){
      setTimePickerPreference(hourOfDay,minute);
    }
  }
;
  Preference update_start=findPreference(""String_Node_Str"");
  update_start.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
  Preference update_end=findPreference(""String_Node_Str"");
  update_end.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      showTimePickerDialog(preference,""String_Node_Str"");
      return true;
    }
  }
);
}",0.99915611814346
59534,"@Override protected void onResume(){
  super.onResume();
  showRecentChanges();
  PreferenceScreen screen=getPreferenceScreen();
  SharedPreferences sharedPreferences=screen.getSharedPreferences();
  Set<Integer> appWidgetIds=new HashSet<Integer>();
  WidgetRepository repository=new AndroidWidgetRepository(getBaseContext());
  for (  int i : repository.getIds()) {
    appWidgetIds.add(i);
  }
  if (!appWidgetIds.contains(mAppWidgetId)) {
    repository.addWidgetId(mAppWidgetId);
  }
  int widgetSize=sharedPreferences.getInt(""String_Node_Str"",0);
  if (widgetSize == 0 || widgetSize == 1) {
    PreferenceScreen stock_setup=(PreferenceScreen)findPreference(""String_Node_Str"");
    for (int i=5; i < 11; i++)     removePref(stock_setup,""String_Node_Str"" + i);
  }
  if (widgetSize == 1 || widgetSize == 3) {
    PreferenceScreen widget_views=(PreferenceScreen)findPreference(""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
  }
  String install_date=getAppPreferences().getString(""String_Node_Str"",null);
  if (DateTools.elapsedDays(install_date) < 30)   removePref(""String_Node_Str"",""String_Node_Str"");
  Map<String,?> map=sharedPreferences.getAll();
  for (  String key : map.keySet())   updateSummaries(sharedPreferences,key);
  findPreference(""String_Node_Str"").setSummary(""String_Node_Str"" + VersionTools.BUILD);
  updateSummaries(sharedPreferences,""String_Node_Str"");
  updateSummaries(sharedPreferences,""String_Node_Str"");
  updateSummaries(sharedPreferences,""String_Node_Str"");
  updateSummaries(sharedPreferences,""String_Node_Str"");
  sharedPreferences.registerOnSharedPreferenceChangeListener(this);
}","@Override protected void onResume(){
  super.onResume();
  showRecentChanges();
  PreferenceScreen screen=getPreferenceScreen();
  SharedPreferences sharedPreferences=screen.getSharedPreferences();
  int widgetSize=sharedPreferences.getInt(""String_Node_Str"",0);
  if (widgetSize == 0 || widgetSize == 1) {
    PreferenceScreen stock_setup=(PreferenceScreen)findPreference(""String_Node_Str"");
    for (int i=5; i < 11; i++)     removePref(stock_setup,""String_Node_Str"" + i);
  }
  if (widgetSize == 1 || widgetSize == 3) {
    PreferenceScreen widget_views=(PreferenceScreen)findPreference(""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
    removePref(widget_views,""String_Node_Str"");
  }
  String install_date=getAppPreferences().getString(""String_Node_Str"",null);
  if (DateTools.elapsedDays(install_date) < 30)   removePref(""String_Node_Str"",""String_Node_Str"");
  Map<String,?> map=sharedPreferences.getAll();
  for (  String key : map.keySet())   updateSummaries(sharedPreferences,key);
  findPreference(""String_Node_Str"").setSummary(""String_Node_Str"" + VersionTools.BUILD);
  updateSummaries(sharedPreferences,""String_Node_Str"");
  updateSummaries(sharedPreferences,""String_Node_Str"");
  updateSummaries(sharedPreferences,""String_Node_Str"");
  updateSummaries(sharedPreferences,""String_Node_Str"");
  sharedPreferences.registerOnSharedPreferenceChangeListener(this);
}",0.9112063686466626
59535,"public AndroidWidget(Context context,int id){
  this.context=context;
  this.storage=this.getStorage();
  this.id=id;
}","public AndroidWidget(Context context,int id){
  this.context=context;
  this.id=id;
  this.storage=this.getStorage();
}",0.8823529411764706
59536,"@Override public Widget addWidget(int id,int size){
  Widget widget=getWidget(id);
  widget.setSize(size);
  widget.setStock1(""String_Node_Str"");
  widget.setStock1Summary(""String_Node_Str"");
  widget.save();
  return widget;
}","@Override public Widget addWidget(int id,int size){
  Widget widget=getWidget(id);
  if (this.getIds().contains(id)) {
    return widget;
  }
  this.addWidgetId(id);
  widget.setSize(size);
  widget.setStock1(""String_Node_Str"");
  widget.setStock1Summary(""String_Node_Str"");
  widget.save();
  return widget;
}",0.845437616387337
59537,"@Override public Object call() throws Exception {
  portfolioRepository.updateStock();
  refreshView();
  return new Object();
}","@Override public Object call() throws Exception {
  portfolioRepository.updateStock(mStockSymbol);
  refreshView();
  return new Object();
}",0.9552238805970148
59538,"@Override public boolean onContextItemSelected(MenuItem item){
  if (item.getItemId() == 1) {
    Callable callable=new Callable(){
      @Override public Object call() throws Exception {
        portfolioRepository.updateStock();
        refreshView();
        return new Object();
      }
    }
;
    DialogTools.alertWithCallback(this,""String_Node_Str"",""String_Node_Str"" + mStockSymbol + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",callable,null);
  }
 else   if (item.getItemId() == 0) {
    AdapterContextMenuInfo menuInfo=((AdapterView.AdapterContextMenuInfo)item.getMenuInfo());
    showPortfolioItemEdit(mPortfolioListView,menuInfo.position);
  }
  return super.onContextItemSelected(item);
}","@Override public boolean onContextItemSelected(MenuItem item){
  if (item.getItemId() == 1) {
    Callable callable=new Callable(){
      @Override public Object call() throws Exception {
        portfolioRepository.updateStock(mStockSymbol);
        refreshView();
        return new Object();
      }
    }
;
    DialogTools.alertWithCallback(this,""String_Node_Str"",""String_Node_Str"" + mStockSymbol + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",callable,null);
  }
 else   if (item.getItemId() == 0) {
    AdapterContextMenuInfo menuInfo=((AdapterView.AdapterContextMenuInfo)item.getMenuInfo());
    showPortfolioItemEdit(mPortfolioListView,menuInfo.position);
  }
  return super.onContextItemSelected(item);
}",0.9916201117318436
59539,"void showPortfolioItemEdit(AdapterView<?> a,int position){
  final Dialog portfolioItemEdit=new Dialog(this);
  portfolioItemEdit.setContentView(R.layout.portfolio_item);
  @SuppressWarnings(""String_Node_Str"") HashMap<String,String> stockMap=(HashMap<String,String>)a.getItemAtPosition(position);
  mStockSymbol=stockMap.get(""String_Node_Str"");
  StockQuote data=this.portfolioRepository.mStockData.get(mStockSymbol);
  String currentPrice=""String_Node_Str"";
  if (data != null)   currentPrice=data.getPrice();
  String price=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String date=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String quantity=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitHigh=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitLow=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String customDisplay=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  if (price.equals(""String_Node_Str"")) {
    price=currentPrice;
    date=new SimpleDateFormat(""String_Node_Str"").format(new Date());
  }
  EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
  priceEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  priceEditText.setText(price);
  EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
  dateEditText.setInputType(InputType.TYPE_CLASS_DATETIME + InputType.TYPE_DATETIME_VARIATION_DATE);
  if (!date.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   dateEditText.setText(date);
  EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
  quantityEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_SIGNED + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!quantity.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   quantityEditText.setText(quantity);
  EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
  limitHighEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!limitHigh.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitHighEditText.setText(limitHigh);
  EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
  limitLowEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!limitLow.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitLowEditText.setText(limitLow);
  EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
  customDisplayText.setInputType(InputType.TYPE_CLASS_TEXT + InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
  if (!customDisplay.equals(""String_Node_Str"") && !customDisplay.equals(""String_Node_Str""))   customDisplayText.setText(customDisplay);
  Button okButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_save);
  okButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
      String price=priceEditText.getText().toString();
      EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
      String date=dateEditText.getText().toString();
      EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
      String quantity=quantityEditText.getText().toString();
      EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
      String limitHigh=limitHighEditText.getText().toString();
      EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
      String limitLow=limitLowEditText.getText().toString();
      EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
      String customDisplay=customDisplayText.getText().toString();
      if (price.equals(""String_Node_Str"")) {
        date=""String_Node_Str"";
        quantity=""String_Node_Str"";
        limitHigh=""String_Node_Str"";
        limitLow=""String_Node_Str"";
      }
 else {
        try {
          price=Double.toString(Double.parseDouble(price));
          if (!date.equals(""String_Node_Str"")) {
            SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
            date=formatter.format(formatter.parse(date.replaceAll(""String_Node_Str"",""String_Node_Str""))).toUpperCase();
          }
          if (!quantity.equals(""String_Node_Str"")) {
            quantity=Double.toString(Double.parseDouble(quantity));
          }
          if (!limitHigh.equals(""String_Node_Str"")) {
            limitHigh=Double.toString(Double.parseDouble(limitHigh));
          }
          if (!limitLow.equals(""String_Node_Str"")) {
            limitLow=Double.toString(Double.parseDouble(limitLow));
          }
        }
 catch (        Exception e) {
          portfolioItemEdit.dismiss();
          return;
        }
      }
      if (price.indexOf(""String_Node_Str"") == price.length() - 2) {
        price=price + ""String_Node_Str"";
      }
      portfolioRepository.updateStock(price,date,quantity,limitHigh,limitLow,customDisplay);
      refreshView();
      portfolioItemEdit.dismiss();
    }
  }
);
  Button cancelButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_cancel);
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      portfolioItemEdit.dismiss();
    }
  }
);
  portfolioItemEdit.setTitle(mStockSymbol + ""String_Node_Str"");
  portfolioItemEdit.show();
}","void showPortfolioItemEdit(AdapterView<?> a,int position){
  final Dialog portfolioItemEdit=new Dialog(this);
  portfolioItemEdit.setContentView(R.layout.portfolio_item);
  @SuppressWarnings(""String_Node_Str"") HashMap<String,String> stockMap=(HashMap<String,String>)a.getItemAtPosition(position);
  mStockSymbol=stockMap.get(""String_Node_Str"");
  StockQuote data=this.portfolioRepository.mStockData.get(mStockSymbol);
  String currentPrice=""String_Node_Str"";
  if (data != null)   currentPrice=data.getPrice();
  String price=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String date=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String quantity=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitHigh=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String limitLow=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  String customDisplay=stockMap.get(""String_Node_Str"") != null ? stockMap.get(""String_Node_Str"") : ""String_Node_Str"";
  if (price.equals(""String_Node_Str"")) {
    price=currentPrice;
    date=new SimpleDateFormat(""String_Node_Str"").format(new Date());
  }
  EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
  priceEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  priceEditText.setText(price);
  EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
  dateEditText.setInputType(InputType.TYPE_CLASS_DATETIME + InputType.TYPE_DATETIME_VARIATION_DATE);
  if (!date.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   dateEditText.setText(date);
  EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
  quantityEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_SIGNED + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!quantity.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   quantityEditText.setText(quantity);
  EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
  limitHighEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!limitHigh.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitHighEditText.setText(limitHigh);
  EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
  limitLowEditText.setInputType(InputType.TYPE_CLASS_NUMBER + InputType.TYPE_NUMBER_FLAG_DECIMAL);
  if (!limitLow.equals(""String_Node_Str"") && !price.equals(""String_Node_Str""))   limitLowEditText.setText(limitLow);
  EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
  customDisplayText.setInputType(InputType.TYPE_CLASS_TEXT + InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
  if (!customDisplay.equals(""String_Node_Str"") && !customDisplay.equals(""String_Node_Str""))   customDisplayText.setText(customDisplay);
  Button okButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_save);
  okButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      EditText priceEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_price);
      String price=priceEditText.getText().toString();
      EditText dateEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_date);
      String date=dateEditText.getText().toString();
      EditText quantityEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_quantity);
      String quantity=quantityEditText.getText().toString();
      EditText limitHighEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_high);
      String limitHigh=limitHighEditText.getText().toString();
      EditText limitLowEditText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_limit_low);
      String limitLow=limitLowEditText.getText().toString();
      EditText customDisplayText=(EditText)portfolioItemEdit.findViewById(R.id.portfolio_item_symbol);
      String customDisplay=customDisplayText.getText().toString();
      if (price.equals(""String_Node_Str"")) {
        date=""String_Node_Str"";
        quantity=""String_Node_Str"";
        limitHigh=""String_Node_Str"";
        limitLow=""String_Node_Str"";
      }
 else {
        try {
          price=Double.toString(Double.parseDouble(price));
          if (!date.equals(""String_Node_Str"")) {
            SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
            date=formatter.format(formatter.parse(date.replaceAll(""String_Node_Str"",""String_Node_Str""))).toUpperCase();
          }
          if (!quantity.equals(""String_Node_Str"")) {
            quantity=Double.toString(Double.parseDouble(quantity));
          }
          if (!limitHigh.equals(""String_Node_Str"")) {
            limitHigh=Double.toString(Double.parseDouble(limitHigh));
          }
          if (!limitLow.equals(""String_Node_Str"")) {
            limitLow=Double.toString(Double.parseDouble(limitLow));
          }
        }
 catch (        Exception e) {
          portfolioItemEdit.dismiss();
          return;
        }
      }
      if (price.indexOf(""String_Node_Str"") == price.length() - 2) {
        price=price + ""String_Node_Str"";
      }
      portfolioRepository.updateStock(mStockSymbol,price,date,quantity,limitHigh,limitLow,customDisplay);
      refreshView();
      portfolioItemEdit.dismiss();
    }
  }
);
  Button cancelButton=(Button)portfolioItemEdit.findViewById(R.id.portfolio_item_cancel);
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      portfolioItemEdit.dismiss();
    }
  }
);
  portfolioItemEdit.setTitle(mStockSymbol + ""String_Node_Str"");
  portfolioItemEdit.show();
}",0.9989181992177748
59540,"public WidgetView(Context context,int appWidgetId,UpdateType updateMode,HashMap<String,StockQuote> quotes,String quotesTimeStamp){
  WidgetRepository widgetRepository=new AndroidWidgetRepository(context);
  this.context=context;
  this.widget=widgetRepository.getWidget(appWidgetId);
  this.quotes=quotes;
  this.quotesTimeStamp=quotesTimeStamp;
  this.updateMode=updateMode;
  this.symbols=widget.getSymbols();
  this.portfolioStocks=new PortfolioStockRepository(PreferenceStorage.getInstance(context),new PreferenceCache(context),widgetRepository).getStocksForSymbols(symbols);
  this.hasPortfolioData=portfolioStocks.isEmpty();
  this.remoteViews=this.getBlankRemoteViews(this.widget,context.getPackageName());
  this.enabledViews=this.calculateEnabledViews(this.widget);
}","public WidgetView(Context context,int appWidgetId,UpdateType updateMode,HashMap<String,StockQuote> quotes,String quotesTimeStamp){
  WidgetRepository widgetRepository=new AndroidWidgetRepository(context);
  this.context=context;
  this.widget=widgetRepository.getWidget(appWidgetId);
  this.quotes=quotes;
  this.quotesTimeStamp=quotesTimeStamp;
  this.updateMode=updateMode;
  this.symbols=widget.getSymbols();
  this.portfolioStocks=new PortfolioStockRepository(PreferenceStorage.getInstance(context),new PreferenceCache(context),widgetRepository).getStocksForSymbols(symbols);
  this.hasPortfolioData=!portfolioStocks.isEmpty();
  this.remoteViews=this.getBlankRemoteViews(this.widget,context.getPackageName());
  this.enabledViews=this.calculateEnabledViews(this.widget);
}",0.9993560849967804
59541,"public void updateStock(){
  this.updateStock(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void updateStock(String symbol){
  this.updateStock(symbol,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.940119760479042
59542,"public List<Map<String,String>> getDisplayInfo(){
  NumberFormat numberFormat=NumberFormat.getInstance();
  List<Map<String,String>> info=new ArrayList<>();
  for (  String symbol : this.getSortedSymbols()) {
    StockQuote quote=this.mStockData.get(symbol);
    PortfolioStock stock=this.mPortfolioStockMap.get(symbol);
    Map<String,String> itemInfo=new HashMap<>();
    String name=""String_Node_Str"";
    if (quote != null) {
      if (!stock.getCustomName().equals(""String_Node_Str"")) {
        name=stock.getCustomName();
        itemInfo.put(""String_Node_Str"",name);
      }
      if (name.equals(""String_Node_Str"")) {
        name=quote.getName();
      }
    }
    itemInfo.put(""String_Node_Str"",name);
    String currentPrice=""String_Node_Str"";
    if (quote != null)     currentPrice=quote.getPrice();
    itemInfo.put(""String_Node_Str"",currentPrice);
    itemInfo.put(""String_Node_Str"",""String_Node_Str"");
    itemInfo.put(""String_Node_Str"",""String_Node_Str"");
    if (!stock.getPrice().equals(""String_Node_Str"")) {
      String buyPrice=stock.getPrice();
      itemInfo.put(""String_Node_Str"",buyPrice);
      String date=stock.getDate();
      itemInfo.put(""String_Node_Str"",date);
      String limitHigh=NumberTools.decimalPlaceFormat(stock.getHighLimit());
      if (limitHigh != null && !limitHigh.equals(""String_Node_Str"")) {
        itemInfo.put(""String_Node_Str"",""String_Node_Str"");
      }
      itemInfo.put(""String_Node_Str"",limitHigh);
      String limitLow=NumberTools.decimalPlaceFormat(stock.getLowLimit());
      if (limitLow != null && !limitLow.equals(""String_Node_Str"")) {
        itemInfo.put(""String_Node_Str"",""String_Node_Str"");
      }
      itemInfo.put(""String_Node_Str"",limitLow);
      String quantity=stock.getQuantity();
      itemInfo.put(""String_Node_Str"",quantity);
      String lastChange=""String_Node_Str"";
      try {
        if (quote != null) {
          lastChange=quote.getPercent();
          try {
            Double change=numberFormat.parse(quote.getChange()).doubleValue();
            Double totalChange=NumberTools.parseDouble(stock.getQuantity()) * change;
            lastChange+=""String_Node_Str"" + CurrencyTools.addCurrencyToSymbol(String.format(""String_Node_Str"",(totalChange)),symbol);
          }
 catch (          Exception ignored) {
          }
        }
      }
 catch (      Exception ignored) {
      }
      itemInfo.put(""String_Node_Str"",lastChange);
      String totalChange=""String_Node_Str"";
      try {
        Double price=numberFormat.parse(currentPrice).doubleValue();
        Double buy=Double.parseDouble(buyPrice);
        Double totalPercentChange=price - buy;
        totalChange=String.format(""String_Node_Str"",100 * totalPercentChange / buy) + ""String_Node_Str"";
        try {
          Double quanta=NumberTools.parseDouble(stock.getQuantity());
          totalChange+=""String_Node_Str"" + CurrencyTools.addCurrencyToSymbol(String.format(""String_Node_Str"",quanta * totalPercentChange),symbol);
        }
 catch (        Exception ignored) {
        }
      }
 catch (      Exception ignored) {
      }
      itemInfo.put(""String_Node_Str"",totalChange);
      String holdingValue=""String_Node_Str"";
      try {
        Double holdingQuanta=NumberTools.parseDouble(stock.getQuantity());
        Double holdingPrice=numberFormat.parse(currentPrice).doubleValue();
        holdingValue=CurrencyTools.addCurrencyToSymbol(String.format(""String_Node_Str"",(holdingQuanta * holdingPrice)),symbol);
      }
 catch (      Exception ignored) {
      }
      itemInfo.put(""String_Node_Str"",holdingValue);
    }
    itemInfo.put(""String_Node_Str"",symbol);
    info.add(itemInfo);
  }
  return info;
}","public List<Map<String,String>> getDisplayInfo(){
  NumberFormat numberFormat=NumberFormat.getInstance();
  List<Map<String,String>> info=new ArrayList<>();
  for (  String symbol : this.getSortedSymbols()) {
    StockQuote quote=this.mStockData.get(symbol);
    PortfolioStock stock=this.getStock(symbol);
    Map<String,String> itemInfo=new HashMap<>();
    String name=""String_Node_Str"";
    if (quote != null) {
      if (!stock.getCustomName().equals(""String_Node_Str"")) {
        name=stock.getCustomName();
        itemInfo.put(""String_Node_Str"",name);
      }
      if (name.equals(""String_Node_Str"")) {
        name=quote.getName();
      }
    }
    itemInfo.put(""String_Node_Str"",name);
    String currentPrice=""String_Node_Str"";
    if (quote != null)     currentPrice=quote.getPrice();
    itemInfo.put(""String_Node_Str"",currentPrice);
    itemInfo.put(""String_Node_Str"",""String_Node_Str"");
    itemInfo.put(""String_Node_Str"",""String_Node_Str"");
    if (!stock.getPrice().equals(""String_Node_Str"")) {
      String buyPrice=stock.getPrice();
      itemInfo.put(""String_Node_Str"",buyPrice);
      String date=stock.getDate();
      itemInfo.put(""String_Node_Str"",date);
      String limitHigh=NumberTools.decimalPlaceFormat(stock.getHighLimit());
      if (limitHigh != null && !limitHigh.equals(""String_Node_Str"")) {
        itemInfo.put(""String_Node_Str"",""String_Node_Str"");
      }
      itemInfo.put(""String_Node_Str"",limitHigh);
      String limitLow=NumberTools.decimalPlaceFormat(stock.getLowLimit());
      if (limitLow != null && !limitLow.equals(""String_Node_Str"")) {
        itemInfo.put(""String_Node_Str"",""String_Node_Str"");
      }
      itemInfo.put(""String_Node_Str"",limitLow);
      String quantity=stock.getQuantity();
      itemInfo.put(""String_Node_Str"",quantity);
      String lastChange=""String_Node_Str"";
      try {
        if (quote != null) {
          lastChange=quote.getPercent();
          try {
            Double change=numberFormat.parse(quote.getChange()).doubleValue();
            Double totalChange=NumberTools.parseDouble(stock.getQuantity()) * change;
            lastChange+=""String_Node_Str"" + CurrencyTools.addCurrencyToSymbol(String.format(""String_Node_Str"",(totalChange)),symbol);
          }
 catch (          Exception ignored) {
          }
        }
      }
 catch (      Exception ignored) {
      }
      itemInfo.put(""String_Node_Str"",lastChange);
      String totalChange=""String_Node_Str"";
      try {
        Double price=numberFormat.parse(currentPrice).doubleValue();
        Double buy=Double.parseDouble(buyPrice);
        Double totalPercentChange=price - buy;
        totalChange=String.format(""String_Node_Str"",100 * totalPercentChange / buy) + ""String_Node_Str"";
        try {
          Double quanta=NumberTools.parseDouble(stock.getQuantity());
          totalChange+=""String_Node_Str"" + CurrencyTools.addCurrencyToSymbol(String.format(""String_Node_Str"",quanta * totalPercentChange),symbol);
        }
 catch (        Exception ignored) {
        }
      }
 catch (      Exception ignored) {
      }
      itemInfo.put(""String_Node_Str"",totalChange);
      String holdingValue=""String_Node_Str"";
      try {
        Double holdingQuanta=NumberTools.parseDouble(stock.getQuantity());
        Double holdingPrice=numberFormat.parse(currentPrice).doubleValue();
        holdingValue=CurrencyTools.addCurrencyToSymbol(String.format(""String_Node_Str"",(holdingQuanta * holdingPrice)),symbol);
      }
 catch (      Exception ignored) {
      }
      itemInfo.put(""String_Node_Str"",holdingValue);
    }
    itemInfo.put(""String_Node_Str"",symbol);
    info.add(itemInfo);
  }
  return info;
}",0.9972714870395636
59543,"public String serialize(){
  return String.format(""String_Node_Str"",symbol,price,change,percent,exchange,volume,name);
}","public String serialize(){
  return String.format(""String_Node_Str"",this.symbol != null ? this.symbol : ""String_Node_Str"",this.price != null ? this.price : ""String_Node_Str"",this.change != null ? this.symbol : ""String_Node_Str"",this.percent != null ? this.percent : ""String_Node_Str"",this.exchange != null ? this.exchange : ""String_Node_Str"",this.volume != null ? this.volume : ""String_Node_Str"",this.name != null ? this.name : ""String_Node_Str"");
}",0.3444639718804921
59544,"public StockQuote(String symbol,String price,String change,String percent,String exchange,String volume,String name,String previousPrice){
  this.symbol=symbol;
  this.exchange=exchange;
  this.volume=volume;
  this.name=name;
  Double p0=null;
  boolean isFx=symbol.contains(""String_Node_Str"");
  if (isFx) {
    try {
      p0=Double.parseDouble(previousPrice);
    }
 catch (    Exception ignored) {
    }
  }
  Double p=null;
  if (!price.equals(""String_Node_Str"")) {
    try {
      p=Double.parseDouble(price);
      if (isFx) {
        this.price=NumberTools.getTrimmedDouble2(p,6);
      }
 else {
        this.price=NumberTools.getTrimmedDouble(p,6,4);
      }
    }
 catch (    Exception e) {
      this.price=""String_Node_Str"";
    }
    if ((price.equals(""String_Node_Str"") || price.equals(""String_Node_Str"")) && p0 == null) {
      change=""String_Node_Str"";
    }
    if ((percent.equals(""String_Node_Str"") || percent.equals(""String_Node_Str"")) && p0 == null) {
      percent=""String_Node_Str"";
    }
  }
  Double c=null;
  if (!change.equals(""String_Node_Str"") && !change.equals(""String_Node_Str"")) {
    c=Double.parseDouble(change);
  }
 else   if (p0 != null && p != null) {
    c=p - p0;
  }
  if (c != null) {
    if (p != null && (p < 10 || isFx)) {
      this.change=NumberTools.getTrimmedDouble(c,5,3);
    }
 else {
      this.change=NumberTools.getTrimmedDouble(c,5);
    }
  }
  Double pc=null;
  if (!percent.equals(""String_Node_Str"") && !percent.equals(""String_Node_Str"")) {
    pc=Double.parseDouble(percent.replace(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    if (c != null && p != null) {
      pc=(c / p) * 100;
    }
  }
  if (pc != null) {
    this.percent=String.format(""String_Node_Str"",pc) + ""String_Node_Str"";
  }
}","public StockQuote(String symbol,String price,String change,String percent,String exchange,String volume,String name,String previousPrice){
  this.symbol=symbol;
  this.exchange=exchange;
  this.volume=volume;
  this.name=name;
  Double p0=null;
  boolean isFx=symbol.contains(""String_Node_Str"");
  if (isFx) {
    try {
      p0=Double.parseDouble(previousPrice);
    }
 catch (    Exception ignored) {
    }
  }
  Double p=null;
  if (!price.equals(""String_Node_Str"")) {
    try {
      p=Double.parseDouble(price);
      if (isFx) {
        this.price=NumberTools.getTrimmedDouble2(p,6);
      }
 else {
        this.price=NumberTools.getTrimmedDouble(p,6,4);
      }
    }
 catch (    Exception e) {
      this.price=""String_Node_Str"";
    }
    if (this.isNonEmptyNumber(price) && p0 == null) {
      change=""String_Node_Str"";
    }
    if (this.isNonEmptyNumber(percent) && p0 == null) {
      percent=""String_Node_Str"";
    }
  }
  Double c=null;
  if (this.isNonEmptyNumber(change)) {
    c=Double.parseDouble(change);
  }
 else   if (p0 != null && p != null) {
    c=p - p0;
  }
  if (c != null) {
    if (p != null && (p < 10 || isFx)) {
      this.change=NumberTools.getTrimmedDouble(c,5,3);
    }
 else {
      this.change=NumberTools.getTrimmedDouble(c,5);
    }
  }
  Double pc=null;
  if (this.isNonEmptyNumber(percent)) {
    pc=Double.parseDouble(percent.replace(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    if (c != null && p != null) {
      pc=(c / p) * 100;
    }
  }
  if (pc != null) {
    this.percent=String.format(""String_Node_Str"",pc) + ""String_Node_Str"";
  }
}",0.8835963084251265
59545,"public HashMap<String,StockQuote> getLiveQuotes(List<String> symbols){
  HashMap<String,StockQuote> allQuotes=new HashMap<>();
  List<String> yahooSymbols=new ArrayList<>(symbols);
  List<String> googleSymbols=new ArrayList<>(symbols);
  yahooSymbols.removeAll(GOOGLE_SYMBOLS);
  googleSymbols.retainAll(GOOGLE_SYMBOLS);
  HashMap<String,StockQuote> yahooQuotes=this.yahooRepository.getQuotes(this.appCache,yahooSymbols);
  HashMap<String,StockQuote> googleQuotes=this.googleRepository.getQuotes(this.appCache,googleSymbols);
  if (yahooQuotes != null)   allQuotes.putAll(yahooQuotes);
  if (googleQuotes != null)   allQuotes.putAll(googleQuotes);
  return allQuotes;
}","public HashMap<String,StockQuote> getLiveQuotes(List<String> symbols){
  HashMap<String,StockQuote> allQuotes=new HashMap<>();
  symbols=this.convertRequestSymbols(symbols);
  List<String> yahooSymbols=new ArrayList<>(symbols);
  List<String> googleSymbols=new ArrayList<>(symbols);
  yahooSymbols.removeAll(GOOGLE_SYMBOLS);
  googleSymbols.retainAll(GOOGLE_SYMBOLS);
  HashMap<String,StockQuote> yahooQuotes=this.yahooRepository.getQuotes(this.appCache,yahooSymbols);
  HashMap<String,StockQuote> googleQuotes=this.googleRepository.getQuotes(this.appCache,googleSymbols);
  if (yahooQuotes != null)   allQuotes.putAll(yahooQuotes);
  if (googleQuotes != null)   allQuotes.putAll(googleQuotes);
  allQuotes=this.convertResponseQuotes(allQuotes);
  return allQuotes;
}",0.9317548746518106
59546,"public HashMap<String,StockQuote> getQuotes(List<String> symbols,boolean noCache){
  HashMap<String,StockQuote> quotes=new HashMap<>();
  if (noCache) {
    Set<String> widgetSymbols=this.widgetRepository.getWidgetsStockSymbols();
    widgetSymbols.add(""String_Node_Str"");
    widgetSymbols.addAll(new PortfolioStockRepository(this.appStorage,this.appCache,this.widgetRepository).getStocks().keySet());
    quotes=getLiveQuotes(symbols);
  }
  if (quotes.isEmpty()) {
    quotes=loadQuotes();
  }
 else {
    SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
    String timeStamp=format.format(new Date()).toUpperCase();
    saveQuotes(quotes,timeStamp);
  }
  quotes.keySet().retainAll(symbols);
  return quotes;
}","public HashMap<String,StockQuote> getQuotes(List<String> symbols,boolean noCache){
  HashMap<String,StockQuote> quotes=new HashMap<>();
  if (noCache) {
    Set<String> widgetSymbols=this.widgetRepository.getWidgetsStockSymbols();
    widgetSymbols.add(""String_Node_Str"");
    widgetSymbols.addAll(new PortfolioStockRepository(this.appStorage,this.appCache,this.widgetRepository).getStocks().keySet());
    quotes=getLiveQuotes(new ArrayList<>(widgetSymbols));
  }
  if (quotes.isEmpty()) {
    quotes=loadQuotes();
  }
 else {
    SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
    String timeStamp=format.format(new Date()).toUpperCase();
    saveQuotes(quotes,timeStamp);
  }
  @SuppressWarnings(""String_Node_Str"") HashMap<String,StockQuote> filteredQuotes=(HashMap<String,StockQuote>)quotes.clone();
  filteredQuotes.keySet().retainAll(symbols);
  return filteredQuotes;
}",0.896551724137931
59547,"public void setUp(){
  this.stockRepository=new StockQuoteRepository(new MockStorage(),new MockCache(),new MockWidgetRepository());
}","public void setUp(){
  MockWidgetRepository mockWidgetRepository=new MockWidgetRepository();
  mockWidgetRepository.setWidgetsStockSymbols(new HashSet<>(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  this.stockRepository=new StockQuoteRepository(new MockStorage(),new MockCache(),mockWidgetRepository);
}",0.4439834024896265
59548,"@Override public Set<String> getWidgetsStockSymbols(){
  return new HashSet<>();
}","@Override public Set<String> getWidgetsStockSymbols(){
  if (this.widgetsStockSymbols != null) {
    return this.widgetsStockSymbols;
  }
  return new HashSet<>();
}",0.6639676113360324
59549,"public static HashMap<String,HashMap<StockField,String>> getQuotes(Context context,String[] symbols){
  boolean hasFX=false;
  boolean hasGoogle=false;
  for (  String s : symbols) {
    if (s.contains(""String_Node_Str""))     hasFX=true;
    if (s.contains(""String_Node_Str"") || s.contains(""String_Node_Str""))     hasGoogle=true;
  }
  JSONObject fxData=new JSONObject();
  if (hasFX) {
    try {
      fxData=new JSONObject(URLData.getURLData(context,FX_URL,86400));
    }
 catch (    JSONException ignored) {
    }
  }
  JSONArray gData=new JSONArray();
  if (hasGoogle) {
    try {
      gData=new JSONArray(URLData.getURLData(context,GOOGLE_URL,300).replace(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    JSONException ignored) {
    }
  }
  HashMap<String,HashMap<StockField,String>> quotes=new HashMap<String,HashMap<StockField,String>>();
  StringBuilder sQuery=new StringBuilder();
  for (  String s : symbols) {
    if (s.equals(""String_Node_Str""))     continue;
    if (!sQuery.toString().equals(""String_Node_Str""))     sQuery.append(""String_Node_Str"");
    sQuery.append(s);
  }
  String url=BASE_URL + ""String_Node_Str"" + FORMAT+ ""String_Node_Str""+ sQuery.toString();
  String response=URLData.getURLData(context,url,300);
  if (response.equals(""String_Node_Str"") || response.equals(""String_Node_Str"")) {
    return quotes;
  }
  for (  String s : symbols) {
    quotes.put(s,new HashMap<StockField,String>());
  }
  for (  String line : response.split(""String_Node_Str"")) {
    String[] values=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"",COUNT_FIELDS);
    if (values.length < COUNT_FIELDS) {
      continue;
    }
    if (gData.length() > 0 && values[0].equals(""String_Node_Str"")) {
      JSONObject dji;
      try {
        dji=gData.getJSONObject(0);
        values[0]=""String_Node_Str"";
        values[3]=((String)dji.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
        values[4]=(String)dji.get(""String_Node_Str"");
        values[5]=(String)dji.get(""String_Node_Str"");
        values[6]=""String_Node_Str"";
        values[7]=""String_Node_Str"";
        values[8]=""String_Node_Str"";
      }
 catch (      JSONException ignored) {
      }
    }
    if (gData.length() > 0 && values[0].equals(""String_Node_Str"")) {
      JSONObject jsonObject;
      try {
        jsonObject=gData.getJSONObject(1);
        values[3]=((String)jsonObject.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
        values[4]=(String)jsonObject.get(""String_Node_Str"");
        values[5]=(String)jsonObject.get(""String_Node_Str"");
        values[6]=""String_Node_Str"";
        values[7]=""String_Node_Str"";
        values[8]=""String_Node_Str"";
      }
 catch (      JSONException ignored) {
      }
    }
    if (!quotes.containsKey(values[0])) {
      continue;
    }
    Boolean isFX=values[0].contains(""String_Node_Str"");
    Double yesterdayPrice=null;
    if (isFX) {
      try {
        JSONObject item=fxData.getJSONObject(values[0]);
        yesterdayPrice=Double.parseDouble(item.getString(""String_Node_Str""));
      }
 catch (      Exception ignored) {
      }
    }
    Double price=null;
    if (!values[3].equals(""String_Node_Str"")) {
      try {
        price=Double.parseDouble(values[3]);
        if (isFX)         quotes.get(values[0]).put(StockField.PRICE,Tools.getTrimmedDouble2(price,6));
 else         quotes.get(values[0]).put(StockField.PRICE,Tools.getTrimmedDouble(price,6,4));
      }
 catch (      Exception e) {
        try {
          quotes.get(values[0]).put(StockField.PRICE,""String_Node_Str"");
        }
 catch (        Exception e1) {
          continue;
        }
      }
      if (values[4].equals(""String_Node_Str"") && yesterdayPrice == null) {
        values[4]=""String_Node_Str"";
      }
      if (values[5].equals(""String_Node_Str"") && yesterdayPrice == null) {
        values[5]=""String_Node_Str"";
      }
    }
    Double change=null;
    if (!values[4].equals(""String_Node_Str"")) {
      change=Double.parseDouble(values[4]);
    }
 else     if (yesterdayPrice != null && price != null) {
      change=price - yesterdayPrice;
    }
    if (change != null) {
      if (price != null && (price < 10 || isFX))       quotes.get(values[0]).put(StockField.CHANGE,Tools.getTrimmedDouble(change,5,3));
 else       quotes.get(values[0]).put(StockField.CHANGE,Tools.getTrimmedDouble(change,5));
    }
    Double pc=null;
    if (!values[5].equals(""String_Node_Str"")) {
      pc=Double.parseDouble(values[5].replace(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      if (change != null && price != null) {
        pc=(change / price) * 100;
      }
    }
    if (pc != null) {
      quotes.get(values[0]).put(StockField.PERCENT,String.format(""String_Node_Str"",pc) + ""String_Node_Str"");
    }
    quotes.get(values[0]).put(StockField.EXCHANGE,values[6]);
    quotes.get(values[0]).put(StockField.VOLUME,values[7]);
    quotes.get(values[0]).put(StockField.NAME,values[8]);
  }
  return quotes;
}","public static HashMap<String,HashMap<StockField,String>> getQuotes(Context context,String[] symbols){
  boolean hasFX=false;
  boolean hasGoogle=false;
  for (  String s : symbols) {
    if (s.contains(""String_Node_Str""))     hasFX=true;
    if (s.contains(""String_Node_Str"") || s.contains(""String_Node_Str""))     hasGoogle=true;
  }
  JSONObject fxData=new JSONObject();
  if (hasFX) {
    try {
      fxData=new JSONObject(URLData.getURLData(context,FX_URL,86400));
    }
 catch (    JSONException ignored) {
    }
  }
  JSONArray gData=new JSONArray();
  if (hasGoogle) {
    try {
      gData=new JSONArray(URLData.getURLData(context,GOOGLE_URL,300).replace(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    JSONException ignored) {
    }
  }
  HashMap<String,HashMap<StockField,String>> quotes=new HashMap<String,HashMap<StockField,String>>();
  StringBuilder sQuery=new StringBuilder();
  for (  String s : symbols) {
    if (s.equals(""String_Node_Str""))     continue;
    if (!sQuery.toString().equals(""String_Node_Str""))     sQuery.append(""String_Node_Str"");
    sQuery.append(s);
  }
  String url=BASE_URL + ""String_Node_Str"" + FORMAT+ ""String_Node_Str""+ sQuery.toString();
  String response=URLData.getURLData(context,url,300);
  if (response.equals(""String_Node_Str"") || response.equals(""String_Node_Str"")) {
    return quotes;
  }
  for (  String s : symbols) {
    quotes.put(s,new HashMap<StockField,String>());
  }
  for (  String line : response.split(""String_Node_Str"")) {
    String[] values=line.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"",COUNT_FIELDS);
    if (values.length < COUNT_FIELDS) {
      continue;
    }
    if (gData.length() > 0 && values[0].equals(""String_Node_Str"")) {
      JSONObject dji;
      try {
        dji=gData.getJSONObject(0);
        values[0]=""String_Node_Str"";
        values[3]=((String)dji.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
        values[4]=(String)dji.get(""String_Node_Str"");
        values[5]=(String)dji.get(""String_Node_Str"");
        values[6]=""String_Node_Str"";
        values[7]=""String_Node_Str"";
        values[8]=""String_Node_Str"";
      }
 catch (      JSONException ignored) {
      }
    }
    if (gData.length() > 0 && values[0].equals(""String_Node_Str"")) {
      JSONObject jsonObject;
      try {
        jsonObject=gData.getJSONObject(1);
        values[3]=((String)jsonObject.get(""String_Node_Str"")).replace(""String_Node_Str"",""String_Node_Str"");
        values[4]=(String)jsonObject.get(""String_Node_Str"");
        values[5]=(String)jsonObject.get(""String_Node_Str"");
        values[6]=""String_Node_Str"";
        values[7]=""String_Node_Str"";
        values[8]=""String_Node_Str"";
      }
 catch (      JSONException ignored) {
      }
    }
    if (!quotes.containsKey(values[0])) {
      continue;
    }
    Boolean isFX=values[0].contains(""String_Node_Str"");
    Double yesterdayPrice=null;
    if (isFX) {
      try {
        JSONObject item=fxData.getJSONObject(values[0]);
        yesterdayPrice=Double.parseDouble(item.getString(""String_Node_Str""));
      }
 catch (      Exception ignored) {
      }
    }
    Double price=null;
    if (!values[3].equals(""String_Node_Str"")) {
      try {
        price=Double.parseDouble(values[3]);
        if (isFX)         quotes.get(values[0]).put(StockField.PRICE,Tools.getTrimmedDouble2(price,6));
 else         quotes.get(values[0]).put(StockField.PRICE,Tools.getTrimmedDouble(price,6,4));
      }
 catch (      Exception e) {
        try {
          quotes.get(values[0]).put(StockField.PRICE,""String_Node_Str"");
        }
 catch (        Exception e1) {
          continue;
        }
      }
      if ((values[4].equals(""String_Node_Str"") || values[4].equals(""String_Node_Str"")) && yesterdayPrice == null) {
        values[4]=""String_Node_Str"";
      }
      if ((values[5].equals(""String_Node_Str"") || values[5].equals(""String_Node_Str"")) && yesterdayPrice == null) {
        values[5]=""String_Node_Str"";
      }
    }
    Double change=null;
    if (!values[4].equals(""String_Node_Str"") && !values[4].equals(""String_Node_Str"")) {
      change=Double.parseDouble(values[4]);
    }
 else     if (yesterdayPrice != null && price != null) {
      change=price - yesterdayPrice;
    }
    if (change != null) {
      if (price != null && (price < 10 || isFX))       quotes.get(values[0]).put(StockField.CHANGE,Tools.getTrimmedDouble(change,5,3));
 else       quotes.get(values[0]).put(StockField.CHANGE,Tools.getTrimmedDouble(change,5));
    }
    Double pc=null;
    if (!values[5].equals(""String_Node_Str"") && !values[5].equals(""String_Node_Str"")) {
      pc=Double.parseDouble(values[5].replace(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      if (change != null && price != null) {
        pc=(change / price) * 100;
      }
    }
    if (pc != null) {
      quotes.get(values[0]).put(StockField.PERCENT,String.format(""String_Node_Str"",pc) + ""String_Node_Str"");
    }
    quotes.get(values[0]).put(StockField.EXCHANGE,values[6]);
    quotes.get(values[0]).put(StockField.VOLUME,values[7]);
    quotes.get(values[0]).put(StockField.NAME,values[8]);
  }
  return quotes;
}",0.969935154254274
59550,"public String timestamp(double millis){
  Calendar c=Calendar.getInstance();
  c.setTimeInMillis((long)millis);
  return X_String.toTimestamp(c.get(Calendar.YEAR),c.get(Calendar.MONTH),c.get(Calendar.DATE),c.get(Calendar.HOUR),c.get(Calendar.MINUTE),c.get(Calendar.MILLISECOND),c.getTimeZone().getOffset(c.getTimeInMillis()) / 60000);
}","public String timestamp(double millis){
  Calendar c=Calendar.getInstance();
  c.setTimeInMillis((long)millis);
  return X_String.toTimestamp(c.get(Calendar.YEAR),c.get(Calendar.MONTH) + 1,c.get(Calendar.DATE),c.get(Calendar.HOUR_OF_DAY),c.get(Calendar.MINUTE),c.get(Calendar.MILLISECOND),c.getTimeZone().getOffset(c.getTimeInMillis()) / 60000);
}",0.9838945827232796
59551,"public ModelSerializerDefault(final ClassTo<PrimitiveReader> primitiveReaders){
  this.primitiveReaders=primitiveReaders;
  collectionFactories=X_Collect.newClassMap(Class.class.cast(ConvertsTwoValues.class));
}","public ModelSerializerDefault(final ClassTo<PrimitiveReader> primitiveReaders){
  this.primitiveReaders=primitiveReaders;
  collectionFactories=X_Collect.newClassMap(ConvertsTwoValues.class);
}",0.9554455445544554
59552,"public static ModelManifest createManifest(final Class<? extends Model> cls){
  final ModelManifest manifest=new ModelManifest(cls);
  final Set<Class<?>> allTypes=new LinkedHashSet<>();
  collectAllTypes(allTypes,cls);
  for (  final Class<?> type : allTypes) {
    if (type == Model.class) {
      continue;
    }
    final IsModel isModel=cls.getAnnotation(IsModel.class);
    String idField=isModel == null ? ""String_Node_Str"" : isModel.key().value();
    for (    final Method method : type.getMethods()) {
      if (method.getDeclaringClass() != Model.class) {
        if (method.isDefault() || X_Modifier.isStatic(method.getModifiers())) {
          continue;
        }
        if (!manifest.hasSeenMethod(method.getName())) {
          try {
            final MethodData property=manifest.addProperty(method.getName(),idField,method.getAnnotation(GetterFor.class),method.getAnnotation(SetterFor.class),method.getAnnotation(DeleterFor.class));
            property.setIdField(idField);
            final Class<?> dataType;
            final Type genericType;
            if (property.isGetter(method.getName())) {
              dataType=method.getReturnType();
              genericType=method.getGenericReturnType();
            }
 else {
              if (method.getParameterTypes().length > 0) {
                dataType=method.getParameterTypes()[0];
                genericType=method.getGenericParameterTypes()[0];
              }
 else {
                dataType=null;
                genericType=null;
              }
            }
            if (dataType != null) {
              final Class<?> oldType=property.getType();
              if (oldType != null && oldType != dataType) {
                throw new NotConfiguredCorrectly(""String_Node_Str"" + property.getName() + ""String_Node_Str""+ cls+ ""String_Node_Str""+ ""String_Node_Str""+ oldType+ ""String_Node_Str""+ dataType+ ""String_Node_Str""+ ""String_Node_Str"");
              }
              property.setType(dataType);
              Class[] erasedTypes=getErasedTypeParameters(genericType);
              property.setTypeParams(erasedTypes);
            }
            property.addAnnotations(method.getAnnotations());
          }
 catch (          Throwable e) {
            throw new RuntimeException(""String_Node_Str"" + cls,e);
          }
        }
      }
    }
  }
  return manifest;
}","public static ModelManifest createManifest(final Class<? extends Model> cls){
  final ModelManifest manifest=new ModelManifest(cls);
  final Set<Class<?>> allTypes=new LinkedHashSet<>();
  collectAllTypes(allTypes,cls);
  for (  final Class<?> type : allTypes) {
    if (type == Model.class) {
      continue;
    }
    final IsModel isModel=cls.getAnnotation(IsModel.class);
    String idField=isModel == null ? ""String_Node_Str"" : isModel.key().value();
    for (    final Method method : getMethodsInOrder(type)) {
      if (method.getDeclaringClass() != Model.class) {
        if (method.isDefault() || X_Modifier.isStatic(method.getModifiers())) {
          continue;
        }
        if (!manifest.hasSeenMethod(method.getName())) {
          try {
            final MethodData property=manifest.addProperty(method.getName(),idField,method.getAnnotation(GetterFor.class),method.getAnnotation(SetterFor.class),method.getAnnotation(DeleterFor.class));
            property.setIdField(idField);
            final Class<?> dataType;
            final Type genericType;
            if (property.isGetter(method.getName())) {
              dataType=method.getReturnType();
              genericType=method.getGenericReturnType();
            }
 else {
              if (method.getParameterTypes().length > 0) {
                dataType=method.getParameterTypes()[0];
                genericType=method.getGenericParameterTypes()[0];
              }
 else {
                dataType=null;
                genericType=null;
              }
            }
            if (dataType != null) {
              final Class<?> oldType=property.getType();
              if (oldType != null && oldType != dataType) {
                throw new NotConfiguredCorrectly(""String_Node_Str"" + property.getName() + ""String_Node_Str""+ cls+ ""String_Node_Str""+ ""String_Node_Str""+ oldType+ ""String_Node_Str""+ dataType+ ""String_Node_Str""+ ""String_Node_Str"");
              }
              property.setType(dataType);
              Class[] erasedTypes=getErasedTypeParameters(genericType);
              property.setTypeParams(erasedTypes);
            }
            property.addAnnotations(method.getAnnotations());
          }
 catch (          Throwable e) {
            throw new RuntimeException(""String_Node_Str"" + cls,e);
          }
        }
      }
    }
  }
  return manifest;
}",0.9961880559085132
59553,"@Override @SuppressWarnings(""String_Node_Str"") public void query(final ModelQuery<Model> query,final SuccessHandler<ModelQueryResult<Model>> callback){
  for (  final QueryParameter param : query.getParameters()) {
    throw new UnsupportedOperationException(""String_Node_Str"" + getClass().getName() + ""String_Node_Str"");
  }
  File f=getRoot(callback);
  if (query.getNamespace().length() > 0) {
    f=new File(f,query.getNamespace());
  }
  final ArrayList<File> files=new ArrayList<File>();
  final ModelQueryResult<Model> result=new ModelQueryResult<>(null);
  for (  final File type : f.listFiles()) {
    File[] allFiles;
    if (query.getCursor() == null) {
      allFiles=type.listFiles();
    }
 else {
      allFiles=type.listFiles(new FilenameFilter(){
        @Override public boolean accept(        final File dir,        final String name){
          return name.compareTo(query.getCursor()) > -1;
        }
      }
);
    }
    for (int i=0, m=allFiles.length; i < m; i++) {
      if (files.size() >= query.getLimit()) {
        result.setCursor(allFiles[i].getName());
        break;
      }
      files.add(allFiles[i]);
    }
  }
  final ProvidesValue<RemovalHandler> scope=captureScope();
  X_Time.runLater(new Runnable(){
    @Override public void run(){
      final RemovalHandler handler=scope.get();
      String fileResult;
      try {
        for (        final File file : files) {
          fileResult=X_IO.toStringUtf8(new FileInputStream(file));
          final Class<? extends Model> type=typeNameToClass.get(file.getParent());
          final Model model=deserialize(type,new StringCharIterator(fileResult));
          result.addModel(model);
        }
        callback.onSuccess(result);
      }
 catch (      final Exception e) {
        X_Log.error(getClass(),""String_Node_Str"" + query);
        if (callback instanceof ErrorHandler) {
          ((ErrorHandler)callback).onError(new RuntimeException(""String_Node_Str"" + query));
        }
 else {
          rethrow(e);
        }
      }
 finally {
        handler.remove();
      }
    }
  }
);
}","@Override @SuppressWarnings(""String_Node_Str"") public void query(final ModelQuery<Model> query,final SuccessHandler<ModelQueryResult<Model>> callback){
  for (  final QueryParameter param : query.getParameters()) {
    throw new UnsupportedOperationException(""String_Node_Str"" + getClass().getName() + ""String_Node_Str"");
  }
  File f=getRoot(callback);
  if (query.getNamespace().length() > 0) {
    f=new File(f,query.getNamespace());
  }
  final ArrayList<File> files=new ArrayList<File>();
  final ModelQueryResult<Model> result=new ModelQueryResult<>(null);
  for (  final File type : f.listFiles()) {
    File[] allFiles;
    if (query.getCursor() == null) {
      allFiles=type.listFiles();
    }
 else {
      allFiles=type.listFiles(new FilenameFilter(){
        @Override public boolean accept(        final File dir,        final String name){
          return name.compareTo(query.getCursor()) > -1;
        }
      }
);
    }
    for (int i=0, m=allFiles.length; i < m; i++) {
      if (files.size() >= query.getLimit()) {
        result.setCursor(allFiles[i].getName());
        break;
      }
      files.add(allFiles[i]);
    }
  }
  final ProvidesValue<RemovalHandler> scope=captureScope();
  X_Time.runLater(new Runnable(){
    @Override public void run(){
      final RemovalHandler handler=scope.get();
      String fileResult;
      try {
        for (        final File file : files) {
          fileResult=X_IO.toStringUtf8(new FileInputStream(file));
          final Class<? extends Model> type=typeNameToClass.get(file.getParent());
          final Model model=deserialize(type,new StringCharIterator(fileResult));
          result.addModel(model);
        }
        callback.onSuccess(result);
      }
 catch (      final Exception e) {
        X_Log.error(ModelServiceJre.class,""String_Node_Str"" + query);
        if (callback instanceof ErrorHandler) {
          ((ErrorHandler)callback).onError(new RuntimeException(""String_Node_Str"" + query));
        }
 else {
          rethrow(e);
        }
      }
 finally {
        handler.remove();
      }
    }
  }
);
}",0.9925677295612564
59554,"@Override public void run(){
  final RemovalHandler handler=scope.get();
  String fileResult;
  try {
    for (    final File file : files) {
      fileResult=X_IO.toStringUtf8(new FileInputStream(file));
      final Class<? extends Model> type=typeNameToClass.get(file.getParent());
      final Model model=deserialize(type,new StringCharIterator(fileResult));
      result.addModel(model);
    }
    callback.onSuccess(result);
  }
 catch (  final Exception e) {
    X_Log.error(getClass(),""String_Node_Str"" + query);
    if (callback instanceof ErrorHandler) {
      ((ErrorHandler)callback).onError(new RuntimeException(""String_Node_Str"" + query));
    }
 else {
      rethrow(e);
    }
  }
 finally {
    handler.remove();
  }
}","@Override public void run(){
  final RemovalHandler handler=scope.get();
  String fileResult;
  try {
    for (    final File file : files) {
      fileResult=X_IO.toStringUtf8(new FileInputStream(file));
      final Class<? extends Model> type=typeNameToClass.get(file.getParent());
      final Model model=deserialize(type,new StringCharIterator(fileResult));
      result.addModel(model);
    }
    callback.onSuccess(result);
  }
 catch (  final Exception e) {
    X_Log.error(ModelServiceJre.class,""String_Node_Str"" + query);
    if (callback instanceof ErrorHandler) {
      ((ErrorHandler)callback).onError(new RuntimeException(""String_Node_Str"" + query));
    }
 else {
      rethrow(e);
    }
  }
 finally {
    handler.remove();
  }
}",0.979011509817197
59555,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public File getRoot(final SuccessHandler<?> callback){
  try {
    return getFilesystemRoot();
  }
 catch (  final IOException e) {
    X_Log.error(getClass(),""String_Node_Str"",e);
    if (callback instanceof ErrorHandler) {
      ((ErrorHandler)callback).onError(e);
    }
    return null;
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public File getRoot(final SuccessHandler<?> callback){
  try {
    return getFilesystemRoot();
  }
 catch (  final IOException e) {
    X_Log.error(ModelServiceJre.class,""String_Node_Str"",e);
    if (callback instanceof ErrorHandler) {
      ((ErrorHandler)callback).onError(e);
    }
    return null;
  }
}",0.9567642956764296
59556,"public Node transformUnary(Expression source,UnaryExpr expr){
  final Expression data=expr.getExpr();
switch (expr.getOperator()) {
case posDecrement:
case posIncrement:
    String compute=generateComputeMethod(data) + ""String_Node_Str"";
  List<Parameter> params=new ArrayList<>();
Type type=new UnknownType();
VariableDeclaratorId id=new VariableDeclaratorId(""String_Node_Str"");
params.add(new Parameter(type,id));
UnaryExpr copy=new UnaryExpr(new NameExpr(""String_Node_Str""),expr.getOperator());
Statement body=new ExpressionStmt(copy);
LambdaExpr lambda=new LambdaExpr(params,body,false);
MethodCallExpr methodCall=new MethodCallExpr();
methodCall.setName(compute);
methodCall.setArgs(Arrays.asList(lambda));
initExtras(methodCall,data);
return methodCall;
case preIncrement:
case preDecrement:
final String setter=generateSetterMethod(data);
final String getter=generateGetterMethod(data);
methodCall=new MethodCallExpr();
methodCall.setName(setter);
MethodCallExpr get=new MethodCallExpr();
get.setName(getter);
final BinaryExpr.Operator operator=expr.getOperator() == Operator.preIncrement ? BinaryExpr.Operator.plus : BinaryExpr.Operator.minus;
BinaryExpr op=new BinaryExpr(get,new IntegerLiteralExpr(""String_Node_Str""),operator);
methodCall.setArgs(Arrays.asList(op));
initExtras(methodCall,data);
return methodCall;
case inverse:
case negative:
case not:
case positive:
throw new NotImplemented(""String_Node_Str"" + expr.getOperator() + ""String_Node_Str""+ getClass());
}
return expr;
}","public Node transformUnary(Expression source,UnaryExpr expr){
  final Expression data=expr.getExpr();
switch (expr.getOperator()) {
case posIncrement:
case posDecrement:
    final String setter=generateSetterMethod(data);
  final String getter=generateGetterMethod(data);
MethodCallExpr methodCall=new MethodCallExpr();
methodCall.setName(setter);
MethodCallExpr get=new MethodCallExpr();
get.setName(getter);
final BinaryExpr.Operator operator=expr.getOperator() == Operator.posIncrement ? BinaryExpr.Operator.plus : BinaryExpr.Operator.minus;
BinaryExpr op=new BinaryExpr(get,new IntegerLiteralExpr(""String_Node_Str""),operator);
methodCall.setArgs(Arrays.asList(op));
initExtras(methodCall,data);
return methodCall;
case preIncrement:
case preDecrement:
String compute=generateComputeMethod(data) + ""String_Node_Str"";
List<Parameter> params=new ArrayList<>();
Type type=new UnknownType();
VariableDeclaratorId id=new VariableDeclaratorId(""String_Node_Str"");
params.add(new Parameter(type,id));
UnaryExpr copy=new UnaryExpr(new NameExpr(""String_Node_Str""),expr.getOperator());
Statement body=new ExpressionStmt(copy);
LambdaExpr lambda=new LambdaExpr(params,body,false);
methodCall=new MethodCallExpr();
methodCall.setName(compute);
methodCall.setArgs(Arrays.asList(lambda));
initExtras(methodCall,data);
return methodCall;
case inverse:
case negative:
case not:
case positive:
throw new NotImplemented(""String_Node_Str"" + expr.getOperator() + ""String_Node_Str""+ getClass());
}
return expr;
}",0.4983255190890824
59557,"public void await(double time,TimeUnit unit){
  X_Log.warn(""String_Node_Str"");
}","public void await(double time,TimeUnit unit){
  gwtLogger.log(Level.WARNING,""String_Node_Str"");
}",0.8361581920903954
59558,"public CountdownLatch(int count){
  this.count=count;
}","public CountdownLatch(int count){
  this.count=count;
  gwtLogger=Logger.getLogger(""String_Node_Str"");
}",0.6918238993710691
59559,"@Override public void write(UriInfo uriInfo,Writer w,EntitiesResponse response){
  String baseUri=uriInfo.getBaseUri().toString();
  EdmEntitySet ees=response.getEntitySet();
  String entitySetName=ees.getName();
  DateTime utc=new DateTime().withZone(DateTimeZone.UTC);
  String updated=InternalUtil.toString(utc);
  XMLWriter2 writer=XMLFactoryProvider2.getInstance().newXMLWriterFactory2().createXMLWriter(w);
  writer.startDocument();
  writer.startElement(new QName2(""String_Node_Str""),atom);
  writer.writeNamespace(""String_Node_Str"",m);
  writer.writeNamespace(""String_Node_Str"",d);
  writer.writeAttribute(""String_Node_Str"",baseUri);
  writeElement(writer,""String_Node_Str"",entitySetName,""String_Node_Str"",""String_Node_Str"");
  writeElement(writer,""String_Node_Str"",baseUri + uriInfo.getPath());
  writeElement(writer,""String_Node_Str"",updated);
  writeElement(writer,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",entitySetName,""String_Node_Str"",entitySetName);
  Integer inlineCount=response.getInlineCount();
  if (inlineCount != null) {
    writeElement(writer,""String_Node_Str"",inlineCount.toString());
  }
  for (  OEntity entity : response.getEntities()) {
    writer.startElement(""String_Node_Str"");
    writeEntry(writer,entity,entity.getProperties(),entity.getLinks(),baseUri,updated,ees,true);
    writer.endElement(""String_Node_Str"");
  }
  if (response.getSkipToken() != null) {
    String nextHref=uriInfo.getRequestUriBuilder().replaceQueryParam(""String_Node_Str"",response.getSkipToken()).build().toString();
    writeElement(writer,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nextHref);
  }
  writer.endDocument();
}","@Override public void write(UriInfo uriInfo,Writer w,EntitiesResponse response){
  String baseUri=uriInfo.getBaseUri().toString();
  EdmEntitySet ees=response.getEntitySet();
  String entitySetName=ees.getName();
  DateTime utc=new DateTime().withZone(DateTimeZone.UTC);
  String updated=InternalUtil.toString(utc);
  XMLWriter2 writer=XMLFactoryProvider2.getInstance().newXMLWriterFactory2().createXMLWriter(w);
  writer.startDocument();
  writer.startElement(new QName2(""String_Node_Str""),atom);
  writer.writeNamespace(""String_Node_Str"",m);
  writer.writeNamespace(""String_Node_Str"",d);
  writer.writeAttribute(""String_Node_Str"",baseUri);
  writeElement(writer,""String_Node_Str"",entitySetName,""String_Node_Str"",""String_Node_Str"");
  writeElement(writer,""String_Node_Str"",baseUri + uriInfo.getPath());
  writeElement(writer,""String_Node_Str"",updated);
  writeElement(writer,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",entitySetName,""String_Node_Str"",entitySetName);
  Integer inlineCount=response.getInlineCount();
  if (inlineCount != null) {
    writeElement(writer,""String_Node_Str"",inlineCount.toString());
  }
  for (  OEntity entity : response.getEntities()) {
    writer.startElement(""String_Node_Str"");
    writeEntry(writer,entity,entity.getProperties(),entity.getLinks(),baseUri,updated,ees,true);
    writer.endElement(""String_Node_Str"");
  }
  if (response.getSkipToken() != null) {
    UriBuilder builder=uriInfo.getRequestUriBuilder().replaceQueryParam(""String_Node_Str"",response.getSkipToken());
    List<String> topParam=uriInfo.getQueryParameters().get(""String_Node_Str"");
    if (topParam != null) {
      long top=Long.valueOf(topParam.get(0));
      top-=response.getEntities().size();
      if (top > 0) {
        builder.replaceQueryParam(""String_Node_Str"",top);
      }
 else {
        builder.replaceQueryParam(""String_Node_Str"");
      }
    }
    String nextHref=builder.build().toString();
    writeElement(writer,""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nextHref);
  }
  writer.endDocument();
}",0.7655426765015806
59560,"@Override public T execute() throws ODataProducerException {
  String path=Enumerable.create(getSegments()).join(""String_Node_Str"");
  ODataClientRequest request=ODataClientRequest.get(getServiceRootUri() + path);
  if (select != null) {
    request=request.queryParam(""String_Node_Str"",select);
  }
  if (expand != null) {
    request=request.queryParam(""String_Node_Str"",expand);
  }
  ODataClientResponse response=getClient().getEntity(request);
  if (response == null)   return null;
  EdmEntitySet entitySet=getMetadata().getEdmEntitySet(getSegments().get(0).segment);
  for (  EntitySegment segment : getSegments().subList(1,getSegments().size())) {
    EdmNavigationProperty navProperty=entitySet.getType().findNavigationProperty(segment.segment);
    entitySet=getMetadata().getEdmEntitySet(navProperty.getToRole().getType());
  }
  OEntityKey key=Enumerable.create(getSegments()).last().key;
  FormatParser<Feed> parser=FormatParserFactory.getParser(Feed.class,getClient().getFormatType(),new Settings(ODataConstants.DATA_SERVICE_VERSION,getMetadata(),entitySet.getName(),key));
  Entry entry=Enumerable.create(parser.parse(getClient().getFeedReader(response)).getEntries()).firstOrNull();
  response.close();
  return (T)InternalUtil.toEntity(entityType,entry.getEntity());
}","@Override public T execute() throws ODataProducerException {
  String path=Enumerable.create(getSegments()).join(""String_Node_Str"");
  ODataClientRequest request=ODataClientRequest.get(getServiceRootUri() + path);
  if (select != null) {
    request=request.queryParam(""String_Node_Str"",select);
  }
  if (expand != null) {
    request=request.queryParam(""String_Node_Str"",expand);
  }
  EdmEntitySet entitySet=getMetadata().getEdmEntitySet(getSegments().get(0).segment);
  for (  EntitySegment segment : getSegments().subList(1,getSegments().size())) {
    EdmNavigationProperty navProperty=entitySet.getType().findNavigationProperty(segment.segment);
    if (navProperty != null) {
      entitySet=getMetadata().getEdmEntitySet(navProperty.getToRole().getType());
    }
  }
  ODataClientResponse response=getClient().getEntity(request);
  if (response == null)   return null;
  OEntityKey key=Enumerable.create(getSegments()).last().key;
  FormatParser<Feed> parser=FormatParserFactory.getParser(Feed.class,getClient().getFormatType(),new Settings(ODataConstants.DATA_SERVICE_VERSION,getMetadata(),entitySet.getName(),key));
  Entry entry=Enumerable.create(parser.parse(getClient().getFeedReader(response)).getEntries()).firstOrNull();
  response.close();
  return (T)InternalUtil.toEntity(entityType,entry.getEntity());
}",0.7159831353008815
59561,"@Override public OError parse(Reader reader){
  String code=null;
  String message=null;
  String innerError=null;
  XMLEventReader2 xmlReader=InternalUtil.newXMLEventReader(reader);
  XMLEvent2 event=xmlReader.nextEvent();
  while (!event.isStartElement())   event=xmlReader.nextEvent();
  if (!isStartElement(event,ERROR))   throw new RuntimeException(""String_Node_Str"" + ERROR.getLocalPart() + ""String_Node_Str"");
  while (!isEndElement(event=xmlReader.nextEvent(),ERROR)) {
    if (isStartElement(event,CODE))     code=xmlReader.getElementText();
 else     if (isStartElement(event,MESSAGE))     message=xmlReader.getElementText();
 else     if (isStartElement(event,INNER_ERROR))     innerError=xmlReader.getElementText();
 else     if (!event.isStartElement() || !event.isEndElement())     continue;
 else     throw new RuntimeException(""String_Node_Str"");
  }
  if (!isEndElement(event,ERROR))   throw new RuntimeException(""String_Node_Str"" + ERROR.getLocalPart() + ""String_Node_Str"");
  if (code == null && message == null && innerError == null)   throw new RuntimeException(""String_Node_Str"");
  return OErrors.error(code,message,innerError);
}","@Override public OError parse(Reader reader){
  String code=null;
  String message=null;
  String innerError=null;
  XMLEventReader2 xmlReader=StaxUtil.newXMLEventReader(reader);
  XMLEvent2 event=xmlReader.nextEvent();
  while (!event.isStartElement())   event=xmlReader.nextEvent();
  if (!isStartElement(event,ERROR))   throw new RuntimeException(""String_Node_Str"" + ERROR.getLocalPart() + ""String_Node_Str"");
  while (!isEndElement(event=xmlReader.nextEvent(),ERROR)) {
    if (isStartElement(event,CODE))     code=xmlReader.getElementText();
 else     if (isStartElement(event,MESSAGE))     message=xmlReader.getElementText();
 else     if (isStartElement(event,INNER_ERROR))     innerError=StaxUtil.innerXml(event,xmlReader);
 else     if (!event.isStartElement() || !event.isEndElement())     continue;
 else     throw new RuntimeException(""String_Node_Str"");
  }
  if (!isEndElement(event,ERROR))   throw new RuntimeException(""String_Node_Str"" + ERROR.getLocalPart() + ""String_Node_Str"");
  if (code == null && message == null && innerError == null)   throw new RuntimeException(""String_Node_Str"");
  return OErrors.error(code,message,innerError);
}",0.9696969696969696
59562,"@Override public AtomFeed parse(Reader reader){
  return parseFeed(InternalUtil.newXMLEventReader(reader),getEntitySet());
}","@Override public AtomFeed parse(Reader reader){
  return parseFeed(StaxUtil.newXMLEventReader(reader),getEntitySet());
}",0.9672131147540984
59563,"@Override public OSimpleObject<?> parse(Reader reader){
  XMLEventReader2 xmlReader=InternalUtil.newXMLEventReader(reader);
  xmlReader.nextEvent();
  xmlReader.nextEvent();
  String text=xmlReader.getElementText();
  EdmSimpleType<?> type=EdmSimpleType.STRING;
  if (settings != null && settings.parseType != null && settings.parseType.isSimple())   type=(EdmSimpleType<?>)settings.parseType;
  return OSimpleObjects.parse(type,text);
}","@Override public OSimpleObject<?> parse(Reader reader){
  XMLEventReader2 xmlReader=StaxUtil.newXMLEventReader(reader);
  xmlReader.nextEvent();
  xmlReader.nextEvent();
  String text=xmlReader.getElementText();
  EdmSimpleType<?> type=EdmSimpleType.STRING;
  if (settings != null && settings.parseType != null && settings.parseType.isSimple())   type=(EdmSimpleType<?>)settings.parseType;
  return OSimpleObjects.parse(type,text);
}",0.986206896551724
59564,"@Override public SingleLink parse(Reader reader){
  return parseLinks(InternalUtil.newXMLEventReader(reader)).iterator().next();
}","@Override public SingleLink parse(Reader reader){
  return parseLinks(StaxUtil.newXMLEventReader(reader)).iterator().next();
}",0.96875
59565,"private IterationResult<XMLEvent2> startElement2(){
  Object o=new DomStartElement2(current);
  XMLEvent2 event=new DomXMLEvent2(o);
  return IterationResult.next(event);
}","private IterationResult<XMLEvent2> startElement2(){
  DomStartElement2 start=new DomStartElement2(current);
  XMLEvent2 event=new InMemoryXMLEvent2(start,null,null);
  return IterationResult.next(event);
}",0.3660477453580902
59566,"private IterationResult<XMLEvent2> endElement2(){
  Object o=new DomEndElement2(current);
  XMLEvent2 event=new DomXMLEvent2(o);
  return IterationResult.next(event);
}","private IterationResult<XMLEvent2> endElement2(){
  DomEndElement2 end=new DomEndElement2(current);
  XMLEvent2 event=new InMemoryXMLEvent2(null,end,null);
  return IterationResult.next(event);
}",0.8815426997245179
59567,"@Override public String toString(){
  return event.toString();
}","@Override public String toString(){
  return ""String_Node_Str"" + getName() + ""String_Node_Str""+ AndroidCompat.getTextContent(element);
}",0.56
59568,"@Override public Entry parse(Reader reader){
  JsonStreamReader jsr=JsonStreamReaderFactory.createJsonStreamReader(reader);
  try {
    ensureNext(jsr);
    ensureStartObject(jsr.nextEvent());
    if (isResponse) {
      ensureNext(jsr);
      ensureStartProperty(jsr.nextEvent(),DATA_PROPERTY);
      ensureStartObject(jsr.nextEvent());
    }
    if (version.compareTo(ODataVersion.V1) > 0) {
      ensureNext(jsr);
      ensureStartObject(jsr.nextEvent());
      ensureNext(jsr);
      ensureStartProperty(jsr.nextEvent(),RESULTS_PROPERTY);
      ensureStartObject(jsr.nextEvent());
    }
    return parseEntry(metadata.getEdmEntitySet(entitySetName),jsr);
  }
  finally {
    jsr.close();
  }
}","@Override public Entry parse(Reader reader){
  JsonStreamReader jsr=JsonStreamReaderFactory.createJsonStreamReader(reader);
  try {
    ensureNext(jsr);
    ensureStartObject(jsr.nextEvent());
    if (isResponse) {
      ensureNext(jsr);
      ensureStartProperty(jsr.nextEvent(),DATA_PROPERTY);
      ensureStartObject(jsr.nextEvent());
    }
    return parseEntry(metadata.getEdmEntitySet(entitySetName),jsr);
  }
  finally {
    jsr.close();
  }
}",0.7846556233653008
59569,"@Test public void callMetaData() throws SAXException, IOException, ParserConfigurationException {
  String metadataByService=this.rtFacade.getWebResource(endpointUri + ""String_Node_Str"");
  assertEquals(200,this.rtFacade.getLastStatusCode());
  assertXMLEqual(this.metadata,metadataByService);
}","@Test public void callMetaData() throws SAXException, IOException, ParserConfigurationException {
  String metadata=this.rtFacade.getWebResource(endpointUri + ""String_Node_Str"");
  assertEquals(200,this.rtFacade.getLastStatusCode());
  assertNotNull(metadata);
}",0.9120287253141832
59570,"@Before public void before(){
  this.initializeXmlUnit();
  this.mockProducer=new FunctionImportProducerMock();
  DefaultODataProducerProvider.setInstance(this.mockProducer);
  this.server=this.rtFacade.startODataServer(FunctionImportTest.endpointUri);
  this.metadata=MetadataUtil.readMetadataFromFile();
}","@Before public void before(){
  this.initializeXmlUnit();
  this.mockProducer=new FunctionImportProducerMock();
  DefaultODataProducerProvider.setInstance(this.mockProducer);
  this.server=this.rtFacade.startODataServer(FunctionImportTest.endpointUri);
}",0.9055258467023172
59571,"public static String readMetadataFromFile(){
  EdmDataServices eds=MetadataUtil.readMetadataServiceFromFile();
  StringWriter writer=new StringWriter();
  EdmxFormatWriter.write(eds,writer);
  return writer.toString();
}","public static String readMetadataFromFile(){
  try {
    InputStream inputStream=MetadataUtil.class.getResourceAsStream(MetadataUtil.REF_SCENARIO_EDMX);
    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
    String line=null;
    StringBuilder stringBuilder=new StringBuilder();
    String ls=System.getProperty(""String_Node_Str"");
    while ((line=reader.readLine()) != null) {
      stringBuilder.append(line);
      stringBuilder.append(ls);
    }
    return stringBuilder.toString();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.1481481481481481
59572,"public static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement,EdmDataServices metadata,EdmEntityType entityType){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceUri().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      EdmType et=null;
      if (typeAttribute != null) {
        String type=typeAttribute.getValue();
        et=metadata.resolveType(type);
        if (et == null) {
          throw new RuntimeException(""String_Node_Str"" + type);
        }
      }
 else {
        EdmProperty property=(EdmProperty)entityType.findProperty(name);
        if (property != null)         et=property.getType();
 else         throw new RuntimeException(""String_Node_Str"" + name);
      }
      if (et != null && (!et.isSimple())) {
        op=OProperties.complex(name,(EdmComplexType)et,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement(),metadata,entityType)).toList());
      }
 else {
        op=OProperties.parseSimple(name,(EdmSimpleType<?>)et,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}","public static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement,EdmDataServices metadata,EdmStructuralType structuralType){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceUri().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      EdmType et=null;
      if (typeAttribute != null) {
        String type=typeAttribute.getValue();
        et=metadata.resolveType(type);
        if (et == null) {
          throw new RuntimeException(""String_Node_Str"" + type);
        }
      }
 else {
        EdmProperty property=(EdmProperty)structuralType.findProperty(name);
        if (property != null)         et=property.getType();
 else         throw new RuntimeException(""String_Node_Str"" + name);
      }
      if (et != null && (!et.isSimple())) {
        EdmStructuralType est=(EdmStructuralType)et;
        op=OProperties.complex(name,(EdmComplexType)et,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement(),metadata,est)).toList());
      }
 else {
        op=OProperties.parseSimple(name,(EdmSimpleType<?>)et,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}",0.9684684684684683
59573,"@Override public EdmEntityType apply(){
  return (EdmEntityType)build();
}","@Override public String apply(Builder input){
  return input.getFullyQualifiedTypeName();
}",0.5696969696969697
59574,"public static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement,EdmDataServices metadata,EdmStructuralType structuralType){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceUri().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      EdmType et=null;
      if (typeAttribute != null) {
        String type=typeAttribute.getValue();
        et=metadata.resolveType(type);
        if (et == null) {
          throw new RuntimeException(""String_Node_Str"" + type);
        }
      }
 else {
        EdmProperty property=(EdmProperty)structuralType.findProperty(name);
        if (property != null)         et=property.getType();
 else         throw new RuntimeException(""String_Node_Str"" + name);
      }
      if (et != null && (!et.isSimple())) {
        EdmStructuralType est=(EdmStructuralType)et;
        op=OProperties.complex(name,(EdmComplexType)et,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement(),metadata,est)).toList());
      }
 else {
        op=OProperties.parseSimple(name,(EdmSimpleType<?>)et,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}","public static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement,EdmDataServices metadata,EdmStructuralType structuralType){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceUri().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      EdmType et=null;
      if (typeAttribute != null) {
        String type=typeAttribute.getValue();
        et=metadata.resolveType(type);
        if (et == null) {
          throw new RuntimeException(""String_Node_Str"" + type);
        }
      }
 else {
        EdmProperty property=(EdmProperty)structuralType.findProperty(name);
        if (property != null)         et=property.getType();
 else         et=EdmSimpleType.STRING;
      }
      if (et != null && (!et.isSimple())) {
        EdmStructuralType est=(EdmStructuralType)et;
        op=OProperties.complex(name,(EdmComplexType)et,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement(),metadata,est)).toList());
      }
 else {
        op=OProperties.parseSimple(name,(EdmSimpleType<?>)et,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}",0.980173135995532
59575,"private void resolve(){
  final Map<String,EdmEntityType.Builder> allEetsByFQName=Enumerable.create(dataServices.getEntityTypes()).toMap(new Func1<EdmEntityType.Builder,String>(){
    public String apply(    EdmEntityType.Builder input){
      return input.getFQAliasName() != null ? input.getFQAliasName() : input.getFullyQualifiedTypeName();
    }
  }
);
  final Map<String,EdmAssociation.Builder> allEasByFQName=Enumerable.create(dataServices.getAssociations()).toMap(new Func1<EdmAssociation.Builder,String>(){
    public String apply(    EdmAssociation.Builder input){
      return input.getFQAliasName() != null ? input.getFQAliasName() : input.getFQNamespaceName();
    }
  }
);
  for (  EdmSchema.Builder edmSchema : dataServices.getSchemas()) {
    for (int i=0; i < edmSchema.getAssociations().size(); i++) {
      EdmAssociation.Builder tmpAssociation=edmSchema.getAssociations().get(i);
      tmpAssociation.getEnd1().setType(allEetsByFQName.get(tmpAssociation.getEnd1().getTypeName()));
      tmpAssociation.getEnd2().setType(allEetsByFQName.get(tmpAssociation.getEnd2().getTypeName()));
    }
    for (    EdmEntityType.Builder eet : edmSchema.getEntityTypes()) {
      List<EdmNavigationProperty.Builder> navProps=eet.getNavigationProperties();
      for (int i=0; i < navProps.size(); i++) {
        final EdmNavigationProperty.Builder tmp=navProps.get(i);
        final EdmAssociation.Builder ea=allEasByFQName.get(tmp.getRelationshipName());
        List<EdmAssociationEnd.Builder> finalEnds=Enumerable.create(tmp.getFromRoleName(),tmp.getToRoleName()).select(new Func1<String,EdmAssociationEnd.Builder>(){
          public EdmAssociationEnd.Builder apply(          String input){
            if (ea.getEnd1().getRole().equals(input))             return ea.getEnd1();
            if (ea.getEnd2().getRole().equals(input))             return ea.getEnd2();
            throw new IllegalArgumentException(""String_Node_Str"" + input);
          }
        }
).toList();
        tmp.setRelationship(ea).setFromTo(finalEnds.get(0),finalEnds.get(1));
      }
    }
    for (    EdmEntityContainer.Builder edmEntityContainer : edmSchema.getEntityContainers()) {
      for (int i=0; i < edmEntityContainer.getEntitySets().size(); i++) {
        final EdmEntitySet.Builder tmpEes=edmEntityContainer.getEntitySets().get(i);
        EdmEntityType.Builder eet=allEetsByFQName.get(tmpEes.getEntityTypeName());
        if (eet == null)         throw new IllegalArgumentException(""String_Node_Str"" + tmpEes.getEntityTypeName());
        edmEntityContainer.getEntitySets().set(i,EdmEntitySet.newBuilder().setName(tmpEes.getName()).setEntityType(eet));
      }
    }
    for (    final EdmEntityContainer.Builder edmEntityContainer : edmSchema.getEntityContainers()) {
      for (int i=0; i < edmEntityContainer.getAssociationSets().size(); i++) {
        final EdmAssociationSet.Builder tmpEas=edmEntityContainer.getAssociationSets().get(i);
        final EdmAssociation.Builder ea=allEasByFQName.get(tmpEas.getAssociationName());
        List<EdmAssociationSetEnd.Builder> finalEnds=Enumerable.create(tmpEas.getEnd1(),tmpEas.getEnd2()).select(new Func1<EdmAssociationSetEnd.Builder,EdmAssociationSetEnd.Builder>(){
          public EdmAssociationSetEnd.Builder apply(          final EdmAssociationSetEnd.Builder input){
            EdmAssociationEnd.Builder eae=ea.getEnd1().getRole().equals(input.getRoleName()) ? ea.getEnd1() : ea.getEnd2().getRole().equals(input.getRoleName()) ? ea.getEnd2() : null;
            if (eae == null)             throw new IllegalArgumentException(""String_Node_Str"" + input.getRoleName());
            EdmEntitySet.Builder ees=Enumerable.create(edmEntityContainer.getEntitySets()).first(OPredicates.nameEquals(EdmEntitySet.Builder.class,input.getEntitySetName()));
            return EdmAssociationSetEnd.newBuilder().setRole(eae).setEntitySet(ees);
          }
        }
).toList();
        tmpEas.setAssociation(ea).setEnds(finalEnds.get(0),finalEnds.get(1));
      }
    }
    for (    final EdmEntityContainer.Builder edmEntityContainer : edmSchema.getEntityContainers()) {
      for (int i=0; i < edmEntityContainer.getFunctionImports().size(); i++) {
        final EdmFunctionImport.Builder tmpEfi=edmEntityContainer.getFunctionImports().get(i);
        EdmEntitySet.Builder ees=Enumerable.create(edmEntityContainer.getEntitySets()).firstOrNull(new Predicate1<EdmEntitySet.Builder>(){
          public boolean apply(          EdmEntitySet.Builder input){
            return input.getName().equals(tmpEfi.getEntitySetName());
          }
        }
);
        EdmType.Builder<?,?> typeBuilder=null;
        if (tmpEfi.getReturnTypeName() != null) {
          typeBuilder=dataServices.resolveType(tmpEfi.getReturnTypeName());
          if (typeBuilder == null)           throw new RuntimeException(""String_Node_Str"" + tmpEfi.getReturnTypeName());
          if (tmpEfi.isCollection()) {
            typeBuilder=EdmCollectionType.newBuilder().setKind(CollectionKind.Collection).setCollectionType(typeBuilder);
          }
        }
        edmEntityContainer.getFunctionImports().set(i,EdmFunctionImport.newBuilder().setName(tmpEfi.getName()).setEntitySet(ees).setReturnType(typeBuilder).setHttpMethod(tmpEfi.getHttpMethod()).addParameters(tmpEfi.getParameters()));
      }
    }
    for (    Entry<String,EdmEntityType.Builder> entry : allEetsByFQName.entrySet()) {
      String baseTypeName=entry.getValue().getFQBaseTypeName();
      if (baseTypeName != null) {
        EdmEntityType.Builder baseType=allEetsByFQName.get(baseTypeName);
        if (baseType == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + baseTypeName);
        }
        entry.getValue().setBaseType(baseType);
      }
    }
  }
}","private void resolve(){
  final Map<String,EdmEntityType.Builder> allEetsByFQName=Enumerable.create(dataServices.getEntityTypes()).toMap(EdmEntityType.Builder.func1_getFullyQualifiedTypeName());
  final Map<String,EdmAssociation.Builder> allEasByFQName=Enumerable.create(dataServices.getAssociations()).toMap(EdmAssociation.Builder.func1_getFQNamespaceName());
  for (  EdmSchema.Builder edmSchema : dataServices.getSchemas()) {
    for (int i=0; i < edmSchema.getAssociations().size(); i++) {
      EdmAssociation.Builder tmpAssociation=edmSchema.getAssociations().get(i);
      tmpAssociation.getEnd1().setType(allEetsByFQName.get(tmpAssociation.getEnd1().getTypeName()));
      tmpAssociation.getEnd2().setType(allEetsByFQName.get(tmpAssociation.getEnd2().getTypeName()));
    }
    for (    EdmEntityType.Builder eet : edmSchema.getEntityTypes()) {
      List<EdmNavigationProperty.Builder> navProps=eet.getNavigationProperties();
      for (int i=0; i < navProps.size(); i++) {
        final EdmNavigationProperty.Builder tmp=navProps.get(i);
        final EdmAssociation.Builder ea=allEasByFQName.get(tmp.getRelationshipName());
        if (ea == null)         throw new IllegalArgumentException(""String_Node_Str"" + tmp.getRelationshipName());
        List<EdmAssociationEnd.Builder> finalEnds=Enumerable.create(tmp.getFromRoleName(),tmp.getToRoleName()).select(new Func1<String,EdmAssociationEnd.Builder>(){
          public EdmAssociationEnd.Builder apply(          String input){
            if (ea.getEnd1().getRole().equals(input))             return ea.getEnd1();
            if (ea.getEnd2().getRole().equals(input))             return ea.getEnd2();
            throw new IllegalArgumentException(""String_Node_Str"" + input);
          }
        }
).toList();
        tmp.setRelationship(ea).setFromTo(finalEnds.get(0),finalEnds.get(1));
      }
    }
    for (    EdmEntityContainer.Builder edmEntityContainer : edmSchema.getEntityContainers()) {
      for (int i=0; i < edmEntityContainer.getEntitySets().size(); i++) {
        final EdmEntitySet.Builder tmpEes=edmEntityContainer.getEntitySets().get(i);
        EdmEntityType.Builder eet=allEetsByFQName.get(tmpEes.getEntityTypeName());
        if (eet == null)         throw new IllegalArgumentException(""String_Node_Str"" + tmpEes.getEntityTypeName());
        edmEntityContainer.getEntitySets().set(i,EdmEntitySet.newBuilder().setName(tmpEes.getName()).setEntityType(eet));
      }
    }
    for (    final EdmEntityContainer.Builder edmEntityContainer : edmSchema.getEntityContainers()) {
      for (int i=0; i < edmEntityContainer.getAssociationSets().size(); i++) {
        final EdmAssociationSet.Builder tmpEas=edmEntityContainer.getAssociationSets().get(i);
        final EdmAssociation.Builder ea=allEasByFQName.get(tmpEas.getAssociationName());
        List<EdmAssociationSetEnd.Builder> finalEnds=Enumerable.create(tmpEas.getEnd1(),tmpEas.getEnd2()).select(new Func1<EdmAssociationSetEnd.Builder,EdmAssociationSetEnd.Builder>(){
          public EdmAssociationSetEnd.Builder apply(          final EdmAssociationSetEnd.Builder input){
            EdmAssociationEnd.Builder eae=ea.getEnd1().getRole().equals(input.getRoleName()) ? ea.getEnd1() : ea.getEnd2().getRole().equals(input.getRoleName()) ? ea.getEnd2() : null;
            if (eae == null)             throw new IllegalArgumentException(""String_Node_Str"" + input.getRoleName());
            EdmEntitySet.Builder ees=Enumerable.create(edmEntityContainer.getEntitySets()).first(OPredicates.nameEquals(EdmEntitySet.Builder.class,input.getEntitySetName()));
            return EdmAssociationSetEnd.newBuilder().setRole(eae).setEntitySet(ees);
          }
        }
).toList();
        tmpEas.setAssociation(ea).setEnds(finalEnds.get(0),finalEnds.get(1));
      }
    }
    for (    final EdmEntityContainer.Builder edmEntityContainer : edmSchema.getEntityContainers()) {
      for (int i=0; i < edmEntityContainer.getFunctionImports().size(); i++) {
        final EdmFunctionImport.Builder tmpEfi=edmEntityContainer.getFunctionImports().get(i);
        EdmEntitySet.Builder ees=Enumerable.create(edmEntityContainer.getEntitySets()).firstOrNull(new Predicate1<EdmEntitySet.Builder>(){
          public boolean apply(          EdmEntitySet.Builder input){
            return input.getName().equals(tmpEfi.getEntitySetName());
          }
        }
);
        EdmType.Builder<?,?> typeBuilder=null;
        if (tmpEfi.getReturnTypeName() != null) {
          typeBuilder=dataServices.resolveType(tmpEfi.getReturnTypeName());
          if (typeBuilder == null)           throw new RuntimeException(""String_Node_Str"" + tmpEfi.getReturnTypeName());
          if (tmpEfi.isCollection()) {
            typeBuilder=EdmCollectionType.newBuilder().setKind(CollectionKind.Collection).setCollectionType(typeBuilder);
          }
        }
        edmEntityContainer.getFunctionImports().set(i,EdmFunctionImport.newBuilder().setName(tmpEfi.getName()).setEntitySet(ees).setReturnType(typeBuilder).setHttpMethod(tmpEfi.getHttpMethod()).addParameters(tmpEfi.getParameters()));
      }
    }
    for (    Entry<String,EdmEntityType.Builder> entry : allEetsByFQName.entrySet()) {
      String baseTypeName=entry.getValue().getFQBaseTypeName();
      if (baseTypeName != null) {
        EdmEntityType.Builder baseType=allEetsByFQName.get(baseTypeName);
        if (baseType == null) {
          throw new IllegalArgumentException(""String_Node_Str"" + baseTypeName);
        }
        entry.getValue().setBaseType(baseType);
      }
    }
  }
}",0.9490806223479492
59576,"@Test(expected=IllegalArgumentException.class) public void illegalDateTime() throws Exception {
  formatParser.parse(buildJson(""String_Node_Str""));
}","@Ignore(""String_Node_Str"") @Test(expected=IllegalArgumentException.class) public void illegalDateTime() throws Exception {
  formatParser.parse(buildJson(""String_Node_Str""));
}",0.916923076923077
59577,"@Test(expected=IllegalArgumentException.class) public void illegalDateTime() throws Exception {
  formatParser.parse(buildAtom(""String_Node_Str""));
}","@Ignore(""String_Node_Str"") @Test(expected=IllegalArgumentException.class) public void illegalDateTime() throws Exception {
  formatParser.parse(buildAtom(""String_Node_Str""));
}",0.916923076923077
59578,"private static void writeProperties(Iterable<EdmProperty> properties,XMLWriter2 writer){
  for (  EdmProperty prop : properties) {
    writer.startElement(new QName2(""String_Node_Str""));
    writer.writeAttribute(""String_Node_Str"",prop.getName());
    writer.writeAttribute(""String_Node_Str"",prop.getType().getFullyQualifiedTypeName());
    writer.writeAttribute(""String_Node_Str"",Boolean.toString(prop.isNullable()));
    if (prop.getMaxLength() != null) {
      writer.writeAttribute(""String_Node_Str"",Integer.toString(prop.getMaxLength()));
    }
    if (!prop.getCollectionKind().equals(CollectionKind.NONE)) {
      writer.writeAttribute(""String_Node_Str"",prop.getCollectionKind().toString());
    }
    if (prop.getDefaultValue() != null) {
      writer.writeAttribute(""String_Node_Str"",prop.getDefaultValue());
    }
    if (prop.getPrecision() != null) {
      writer.writeAttribute(""String_Node_Str"",Integer.toString(prop.getPrecision()));
    }
    if (prop.getScale() != null) {
      writer.writeAttribute(""String_Node_Str"",Integer.toString(prop.getPrecision()));
    }
    writeAnnotationAttributes(prop,writer);
    writeAnnotationElements(prop,writer);
    writer.endElement(""String_Node_Str"");
  }
}","private static void writeProperties(Iterable<EdmProperty> properties,XMLWriter2 writer){
  for (  EdmProperty prop : properties) {
    writer.startElement(new QName2(""String_Node_Str""));
    writer.writeAttribute(""String_Node_Str"",prop.getName());
    writer.writeAttribute(""String_Node_Str"",prop.getType().getFullyQualifiedTypeName());
    writer.writeAttribute(""String_Node_Str"",Boolean.toString(prop.isNullable()));
    if (prop.getMaxLength() != null) {
      writer.writeAttribute(""String_Node_Str"",Integer.toString(prop.getMaxLength()));
    }
    if (!prop.getCollectionKind().equals(CollectionKind.NONE)) {
      writer.writeAttribute(""String_Node_Str"",prop.getCollectionKind().toString());
    }
    if (prop.getDefaultValue() != null) {
      writer.writeAttribute(""String_Node_Str"",prop.getDefaultValue());
    }
    if (prop.getPrecision() != null) {
      writer.writeAttribute(""String_Node_Str"",Integer.toString(prop.getPrecision()));
    }
    if (prop.getScale() != null) {
      writer.writeAttribute(""String_Node_Str"",Integer.toString(prop.getScale()));
    }
    writeAnnotationAttributes(prop,writer);
    writeAnnotationElements(prop,writer);
    writer.endElement(""String_Node_Str"");
  }
}",0.8845836768342952
59579,"protected OEntity toOEntity(EdmEntitySet ees,Object obj,PropertyPathHelper pathHelper){
  InMemoryEntityInfo<?> ei=this.findEntityInfoForClass(obj.getClass());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Map<String,Object> keyKVPair=new HashMap<String,Object>();
  for (  String key : ei.getKeys()) {
    Object keyValue=ei.getPropertyModel().getPropertyValue(obj,key);
    keyKVPair.put(key,keyValue);
  }
  addPropertiesFromObject(obj,ei.getPropertyModel(),ees.getType(),properties,pathHelper);
  EdmEntityType edmEntityType=ees.getType();
  for (  final EdmNavigationProperty navProp : ees.getType().getNavigationProperties()) {
    if (!pathHelper.isSelected(navProp.getName())) {
      continue;
    }
    if (!pathHelper.isExpanded(navProp.getName())) {
      if (navProp.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,navProp.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,navProp.getName(),null));
      }
    }
 else {
      pathHelper.navigate(navProp.getName());
      if (navProp.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        EdmEntitySet relEntitySet=null;
        for (        final Object entity : getRelatedPojos(navProp,obj,ei)) {
          if (relEntitySet == null) {
            InMemoryEntityInfo<?> oei=this.findEntityInfoForClass(entity.getClass());
            relEntitySet=getMetadata().getEdmEntitySet(oei.getEntitySetName());
          }
          relatedEntities.add(toOEntity(relEntitySet,entity,pathHelper));
        }
        links.add(OLinks.relatedEntitiesInline(null,navProp.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.getPropertyModel().getPropertyValue(obj,navProp.getName());
        OEntity relatedEntity=null;
        if (entity != null) {
          InMemoryEntityInfo<?> oei=this.findEntityInfoForClass(entity.getClass());
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.getEntitySetName());
          relatedEntity=toOEntity(relEntitySet,entity,pathHelper);
        }
        links.add(OLinks.relatedEntityInline(null,navProp.getName(),null,relatedEntity));
      }
      pathHelper.popPath();
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyKVPair),properties,links,obj);
}","protected OEntity toOEntity(EdmEntitySet ees,Object obj,PropertyPathHelper pathHelper){
  InMemoryEntityInfo<?> ei=this.findEntityInfoForClass(obj.getClass());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Map<String,Object> keyKVPair=new HashMap<String,Object>();
  for (  String key : ei.getKeys()) {
    Object keyValue=ei.getPropertyModel().getPropertyValue(obj,key);
    keyKVPair.put(key,keyValue);
  }
  EdmEntityType edmEntityType=(EdmEntityType)this.getMetadata().findEdmEntityType(namespace + ""String_Node_Str"" + ei.getEntityTypeName());
  addPropertiesFromObject(obj,ei.getPropertyModel(),edmEntityType,properties,pathHelper);
  for (  final EdmNavigationProperty navProp : edmEntityType.getNavigationProperties()) {
    if (!pathHelper.isSelected(navProp.getName())) {
      continue;
    }
    if (!pathHelper.isExpanded(navProp.getName())) {
      if (navProp.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,navProp.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,navProp.getName(),null));
      }
    }
 else {
      pathHelper.navigate(navProp.getName());
      if (navProp.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        EdmEntitySet relEntitySet=null;
        for (        final Object entity : getRelatedPojos(navProp,obj,ei)) {
          if (relEntitySet == null) {
            InMemoryEntityInfo<?> oei=this.findEntityInfoForClass(entity.getClass());
            relEntitySet=getMetadata().getEdmEntitySet(oei.getEntitySetName());
          }
          relatedEntities.add(toOEntity(relEntitySet,entity,pathHelper));
        }
        links.add(OLinks.relatedEntitiesInline(null,navProp.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.getPropertyModel().getPropertyValue(obj,navProp.getName());
        OEntity relatedEntity=null;
        if (entity != null) {
          InMemoryEntityInfo<?> oei=this.findEntityInfoForClass(entity.getClass());
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.getEntitySetName());
          relatedEntity=toOEntity(relEntitySet,entity,pathHelper);
        }
        links.add(OLinks.relatedEntityInline(null,navProp.getName(),null,relatedEntity));
      }
      pathHelper.popPath();
    }
  }
  return OEntities.create(ees,edmEntityType,OEntityKey.create(keyKVPair),properties,links,obj);
}",0.9384800965018094
59580,"public Builder addEntityTypes(List<EdmEntityType.Builder> entityTypes){
  this.entityTypes.addAll(entityTypes);
  return this;
}","public Builder addEntityTypes(EdmEntityType.Builder... entityTypes){
  this.entityTypes.addAll(Arrays.asList(entityTypes));
  return this;
}",0.9104477611940298
59581,"private AtomEntry parseEntry(XMLEventReader2 reader,StartElement2 entryElement){
  String id=null;
  String categoryTerm=null;
  String categoryScheme=null;
  String title=null;
  String summary=null;
  String updated=null;
  String contentType=null;
  List<AtomLink> atomLinks=new ArrayList<AtomLink>();
  String etag=getAttributeValueIfExists(entryElement,M_ETAG);
  AtomEntry rt=null;
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(entryElement.getName())) {
      rt.id=id;
      rt.title=title;
      rt.summary=summary;
      rt.updated=updated;
      rt.categoryScheme=categoryScheme;
      rt.categoryTerm=categoryTerm;
      rt.contentType=contentType;
      rt.atomLinks=atomLinks;
      if (rt instanceof DataServicesAtomEntry) {
        DataServicesAtomEntry dsae=(DataServicesAtomEntry)rt;
        String entitySetName=this.entitySetName;
        if (rt.id != null && rt.id.endsWith(""String_Node_Str""))         entitySetName=parseEntitySetName(rt.id);
        EdmEntitySet ees=metadata.findEdmEntitySet(entitySetName);
        if (ees == null) {
          EdmFunctionImport efi=metadata.findEdmFunctionImport(entitySetName);
          if (efi != null)           ees=efi.getEntitySet();
        }
        if (ees == null)         throw new RuntimeException(""String_Node_Str"" + rt.id);
        dsae.setOEntity(entityFromAtomEntry(metadata,ees,dsae,fcMapping));
      }
      return rt;
    }
    if (isStartElement(event,ATOM_ID)) {
      id=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_TITLE)) {
      title=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_SUMMARY)) {
      summary=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_UPDATED)) {
      updated=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_CATEGORY)) {
      categoryTerm=getAttributeValueIfExists(event.asStartElement(),""String_Node_Str"");
      categoryScheme=getAttributeValueIfExists(event.asStartElement(),""String_Node_Str"");
    }
 else     if (isStartElement(event,ATOM_LINK)) {
      AtomLink link=parseAtomLink(reader,event.asStartElement());
      atomLinks.add(link);
    }
 else     if (isStartElement(event,M_PROPERTIES)) {
      rt=parseDSAtomEntry(etag,reader,event);
    }
 else     if (isStartElement(event,ATOM_CONTENT)) {
      contentType=getAttributeValueIfExists(event.asStartElement(),""String_Node_Str"");
      if (contentType.equals(MediaType.APPLICATION_XML)) {
        StartElement2 contentElement=event.asStartElement();
        StartElement2 valueElement=null;
        while (reader.hasNext()) {
          XMLEvent2 event2=reader.nextEvent();
          if (valueElement == null && event2.isStartElement()) {
            valueElement=event2.asStartElement();
            if (isStartElement(event2,M_PROPERTIES)) {
              rt=parseDSAtomEntry(etag,reader,event2);
            }
 else {
              BasicAtomEntry bae=new BasicAtomEntry();
              bae.content=innerText(reader,event2.asStartElement());
              rt=bae;
            }
          }
          if (event2.isEndElement() && event2.asEndElement().getName().equals(contentElement.getName())) {
            break;
          }
        }
      }
 else {
        BasicAtomEntry bae=new BasicAtomEntry();
        bae.content=innerText(reader,event.asStartElement());
        rt=bae;
      }
    }
  }
  throw new RuntimeException();
}","private AtomEntry parseEntry(XMLEventReader2 reader,StartElement2 entryElement){
  String id=null;
  String categoryTerm=null;
  String categoryScheme=null;
  String title=null;
  String summary=null;
  String updated=null;
  String contentType=null;
  List<AtomLink> atomLinks=new ArrayList<AtomLink>();
  String etag=getAttributeValueIfExists(entryElement,M_ETAG);
  AtomEntry rt=null;
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(entryElement.getName())) {
      rt.id=id;
      rt.title=title;
      rt.summary=summary;
      rt.updated=updated;
      rt.categoryScheme=categoryScheme;
      rt.categoryTerm=categoryTerm;
      rt.contentType=contentType;
      rt.atomLinks=atomLinks;
      if (rt instanceof DataServicesAtomEntry) {
        DataServicesAtomEntry dsae=(DataServicesAtomEntry)rt;
        String entitySetName=this.entitySetName;
        if (rt.id != null && rt.id.endsWith(""String_Node_Str""))         entitySetName=parseEntitySetName(rt.id);
        EdmEntitySet ees=metadata.findEdmEntitySet(entitySetName);
        if (ees == null) {
          EdmFunctionImport efi=metadata.findEdmFunctionImport(entitySetName);
          if (efi != null)           ees=efi.getEntitySet();
        }
        if (ees == null)         throw new RuntimeException(""String_Node_Str"" + rt.id);
        dsae.setOEntity(entityFromAtomEntry(metadata,ees,dsae,fcMapping));
      }
      return rt;
    }
    if (isStartElement(event,ATOM_ID)) {
      id=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_TITLE)) {
      title=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_SUMMARY)) {
      summary=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_UPDATED)) {
      updated=reader.getElementText();
    }
 else     if (isStartElement(event,ATOM_CATEGORY)) {
      categoryTerm=getAttributeValueIfExists(event.asStartElement(),""String_Node_Str"");
      categoryScheme=getAttributeValueIfExists(event.asStartElement(),""String_Node_Str"");
    }
 else     if (isStartElement(event,ATOM_LINK)) {
      AtomLink link=parseAtomLink(reader,event.asStartElement());
      atomLinks.add(link);
    }
 else     if (isStartElement(event,M_PROPERTIES)) {
      rt=parseDSAtomEntry(etag,reader,event);
    }
 else     if (isStartElement(event,ATOM_CONTENT)) {
      contentType=getAttributeValueIfExists(event.asStartElement(),""String_Node_Str"");
      if (MediaType.APPLICATION_XML.equals(contentType)) {
        StartElement2 contentElement=event.asStartElement();
        StartElement2 valueElement=null;
        while (reader.hasNext()) {
          XMLEvent2 event2=reader.nextEvent();
          if (valueElement == null && event2.isStartElement()) {
            valueElement=event2.asStartElement();
            if (isStartElement(event2,M_PROPERTIES)) {
              rt=parseDSAtomEntry(etag,reader,event2);
            }
 else {
              BasicAtomEntry bae=new BasicAtomEntry();
              bae.content=innerText(reader,event2.asStartElement());
              rt=bae;
            }
          }
          if (event2.isEndElement() && event2.asEndElement().getName().equals(contentElement.getName())) {
            break;
          }
        }
      }
 else {
        BasicAtomEntry bae=new BasicAtomEntry();
        bae.content=innerText(reader,event.asStartElement());
        rt=bae;
      }
    }
  }
  throw new RuntimeException();
}",0.9945636623748212
59582,"public InMemoryEdmGenerator(String namespace,InMemoryTypeMapping typeMapping,String idPropertyName,Map<String,InMemoryEntityInfo<?,?>> eis){
  this.namespace=namespace;
  this.typeMapping=typeMapping;
  this.eis=eis;
}","public InMemoryEdmGenerator(String namespace,InMemoryTypeMapping typeMapping,String idPropertyName,Map<String,InMemoryEntityInfo<?>> eis){
  this.namespace=namespace;
  this.typeMapping=typeMapping;
  this.eis=eis;
}",0.9953917050691244
59583,"private void generateToOneNavProperties(List<EdmAssociation.Builder> associations,List<EdmAssociationSet.Builder> associationSets,Map<String,EdmEntityType.Builder> entityTypesByName,Map<String,EdmEntitySet.Builder> entitySetByName,Map<Class<?>,String> entityNameByClass,String entityTypeName,InMemoryEntityInfo<?,?> ei){
  for (  String assocProp : ei.properties.getPropertyNames()) {
    EdmEntityType.Builder eet1=entityTypesByName.get(entityTypeName);
    Class<?> clazz2=ei.properties.getPropertyType(assocProp);
    String eetName2=entityNameByClass.get(clazz2);
    if (eet1.findProperty(assocProp) != null || eetName2 == null)     continue;
    EdmEntityType.Builder eet2=entityTypesByName.get(eetName2);
    EdmMultiplicity m1=EdmMultiplicity.MANY;
    EdmMultiplicity m2=EdmMultiplicity.ONE;
    String assocName=String.format(""String_Node_Str"",eet1.getName(),eet2.getName());
    EdmAssociationEnd.Builder assocEnd1=EdmAssociationEnd.newBuilder().setRole(eet1.getName()).setType(eet1).setMultiplicity(m1);
    String assocEnd2Name=eet2.getName();
    if (assocEnd2Name.equals(eet1.getName()))     assocEnd2Name=assocEnd2Name + ""String_Node_Str"";
    EdmAssociationEnd.Builder assocEnd2=EdmAssociationEnd.newBuilder().setRole(assocEnd2Name).setType(eet2).setMultiplicity(m2);
    EdmAssociation.Builder assoc=EdmAssociation.newBuilder().setNamespace(namespace).setName(assocName).setEnds(assocEnd1,assocEnd2);
    associations.add(assoc);
    EdmEntitySet.Builder ees1=entitySetByName.get(eet1.getName());
    EdmEntitySet.Builder ees2=entitySetByName.get(eet2.getName());
    EdmAssociationSet.Builder eas=EdmAssociationSet.newBuilder().setName(assocName).setAssociation(assoc).setEnds(EdmAssociationSetEnd.newBuilder().setRole(assocEnd1).setEntitySet(ees1),EdmAssociationSetEnd.newBuilder().setRole(assocEnd2).setEntitySet(ees2));
    associationSets.add(eas);
    EdmNavigationProperty.Builder np=EdmNavigationProperty.newBuilder(assocProp).setRelationship(assoc).setFromTo(assoc.getEnd1(),assoc.getEnd2());
    eet1.addNavigationProperties(np);
  }
}","private void generateToOneNavProperties(List<EdmAssociation.Builder> associations,List<EdmAssociationSet.Builder> associationSets,Map<String,EdmEntityType.Builder> entityTypesByName,Map<String,EdmEntitySet.Builder> entitySetByName,Map<Class<?>,String> entityNameByClass,String entityTypeName,InMemoryEntityInfo<?> ei){
  for (  String assocProp : ei.properties.getPropertyNames()) {
    EdmEntityType.Builder eet1=entityTypesByName.get(entityTypeName);
    Class<?> clazz2=ei.properties.getPropertyType(assocProp);
    String eetName2=entityNameByClass.get(clazz2);
    if (eet1.findProperty(assocProp) != null || eetName2 == null)     continue;
    EdmEntityType.Builder eet2=entityTypesByName.get(eetName2);
    EdmMultiplicity m1=EdmMultiplicity.MANY;
    EdmMultiplicity m2=EdmMultiplicity.ONE;
    String assocName=String.format(""String_Node_Str"",eet1.getName(),eet2.getName());
    EdmAssociationEnd.Builder assocEnd1=EdmAssociationEnd.newBuilder().setRole(eet1.getName()).setType(eet1).setMultiplicity(m1);
    String assocEnd2Name=eet2.getName();
    if (assocEnd2Name.equals(eet1.getName()))     assocEnd2Name=assocEnd2Name + ""String_Node_Str"";
    EdmAssociationEnd.Builder assocEnd2=EdmAssociationEnd.newBuilder().setRole(assocEnd2Name).setType(eet2).setMultiplicity(m2);
    EdmAssociation.Builder assoc=EdmAssociation.newBuilder().setNamespace(namespace).setName(assocName).setEnds(assocEnd1,assocEnd2);
    associations.add(assoc);
    EdmEntitySet.Builder ees1=entitySetByName.get(eet1.getName());
    EdmEntitySet.Builder ees2=entitySetByName.get(eet2.getName());
    EdmAssociationSet.Builder eas=EdmAssociationSet.newBuilder().setName(assocName).setAssociation(assoc).setEnds(EdmAssociationSetEnd.newBuilder().setRole(assocEnd1).setEntitySet(ees1),EdmAssociationSetEnd.newBuilder().setRole(assocEnd2).setEntitySet(ees2));
    associationSets.add(eas);
    EdmNavigationProperty.Builder np=EdmNavigationProperty.newBuilder(assocProp).setRelationship(assoc).setFromTo(assoc.getEnd1(),assoc.getEnd2());
    eet1.addNavigationProperties(np);
  }
}",0.9995150339476236
59584,"@Override public EdmDataServices.Builder generateEdm(EdmDecorator decorator){
  List<EdmSchema.Builder> schemas=new ArrayList<EdmSchema.Builder>();
  List<EdmEntityContainer.Builder> containers=new ArrayList<EdmEntityContainer.Builder>();
  List<EdmEntitySet.Builder> entitySets=new ArrayList<EdmEntitySet.Builder>();
  List<EdmEntityType.Builder> entityTypes=new ArrayList<EdmEntityType.Builder>();
  List<EdmAssociation.Builder> associations=new ArrayList<EdmAssociation.Builder>();
  List<EdmAssociationSet.Builder> associationSets=new ArrayList<EdmAssociationSet.Builder>();
  createStructuralEntities(decorator,entitySets,entityTypes);
  Map<String,EdmEntityType.Builder> entityTypesByName=Enumerable.create(entityTypes).toMap(new Func1<EdmEntityType.Builder,String>(){
    public String apply(    EdmEntityType.Builder input){
      return input.getName();
    }
  }
);
  Map<String,EdmEntitySet.Builder> entitySetByName=Enumerable.create(entitySets).toMap(new Func1<EdmEntitySet.Builder,String>(){
    public String apply(    EdmEntitySet.Builder input){
      return input.getName();
    }
  }
);
  Map<Class<?>,String> entityNameByClass=new HashMap<Class<?>,String>();
  for (  Entry<String,InMemoryEntityInfo<?,?>> e : eis.entrySet())   entityNameByClass.put(e.getValue().entityClass,e.getKey());
  createNavigationProperties(associations,associationSets,entityTypesByName,entitySetByName,entityNameByClass);
  EdmEntityContainer.Builder container=EdmEntityContainer.newBuilder().setName(CONTAINER_NAME).setIsDefault(true).addEntitySets(entitySets).addAssociationSets(associationSets);
  containers.add(container);
  EdmSchema.Builder schema=EdmSchema.newBuilder().setNamespace(namespace).addEntityTypes(entityTypes).addAssociations(associations).addEntityContainers(containers);
  if (decorator != null) {
    schema.setDocumentation(decorator.getDocumentationForSchema(namespace));
    schema.setAnnotations(decorator.getAnnotationsForSchema(namespace));
  }
  schemas.add(schema);
  EdmDataServices.Builder rt=EdmDataServices.newBuilder().addSchemas(schemas);
  if (decorator != null)   rt.addNamespaces(decorator.getNamespaces());
  return rt;
}","@Override public EdmDataServices.Builder generateEdm(EdmDecorator decorator){
  List<EdmSchema.Builder> schemas=new ArrayList<EdmSchema.Builder>();
  List<EdmEntityContainer.Builder> containers=new ArrayList<EdmEntityContainer.Builder>();
  List<EdmEntitySet.Builder> entitySets=new ArrayList<EdmEntitySet.Builder>();
  List<EdmEntityType.Builder> entityTypes=new ArrayList<EdmEntityType.Builder>();
  List<EdmAssociation.Builder> associations=new ArrayList<EdmAssociation.Builder>();
  List<EdmAssociationSet.Builder> associationSets=new ArrayList<EdmAssociationSet.Builder>();
  createStructuralEntities(decorator,entitySets,entityTypes);
  Map<String,EdmEntityType.Builder> entityTypesByName=Enumerable.create(entityTypes).toMap(new Func1<EdmEntityType.Builder,String>(){
    public String apply(    EdmEntityType.Builder input){
      return input.getName();
    }
  }
);
  Map<String,EdmEntitySet.Builder> entitySetByName=Enumerable.create(entitySets).toMap(new Func1<EdmEntitySet.Builder,String>(){
    public String apply(    EdmEntitySet.Builder input){
      return input.getName();
    }
  }
);
  Map<Class<?>,String> entityNameByClass=new HashMap<Class<?>,String>();
  for (  Entry<String,InMemoryEntityInfo<?>> e : eis.entrySet())   entityNameByClass.put(e.getValue().entityClass,e.getKey());
  createNavigationProperties(associations,associationSets,entityTypesByName,entitySetByName,entityNameByClass);
  EdmEntityContainer.Builder container=EdmEntityContainer.newBuilder().setName(CONTAINER_NAME).setIsDefault(true).addEntitySets(entitySets).addAssociationSets(associationSets);
  containers.add(container);
  EdmSchema.Builder schema=EdmSchema.newBuilder().setNamespace(namespace).addEntityTypes(entityTypes).addAssociations(associations).addEntityContainers(containers);
  if (decorator != null) {
    schema.setDocumentation(decorator.getDocumentationForSchema(namespace));
    schema.setAnnotations(decorator.getAnnotationsForSchema(namespace));
  }
  schemas.add(schema);
  EdmDataServices.Builder rt=EdmDataServices.newBuilder().addSchemas(schemas);
  if (decorator != null)   rt.addNamespaces(decorator.getNamespaces());
  return rt;
}",0.9995366079703428
59585,"private void createNavigationProperties(List<EdmAssociation.Builder> associations,List<EdmAssociationSet.Builder> associationSets,Map<String,EdmEntityType.Builder> entityTypesByName,Map<String,EdmEntitySet.Builder> entitySetByName,Map<Class<?>,String> entityNameByClass){
  for (  String entitySetName : eis.keySet()) {
    InMemoryEntityInfo<?,?> ei=eis.get(entitySetName);
    Class<?> clazz1=ei.entityClass;
    generateToOneNavProperties(associations,associationSets,entityTypesByName,entitySetByName,entityNameByClass,ei.entityTypeName,ei);
    generateToManyNavProperties(associations,associationSets,entityTypesByName,entitySetByName,entityNameByClass,ei.entityTypeName,ei,clazz1);
  }
}","private void createNavigationProperties(List<EdmAssociation.Builder> associations,List<EdmAssociationSet.Builder> associationSets,Map<String,EdmEntityType.Builder> entityTypesByName,Map<String,EdmEntitySet.Builder> entitySetByName,Map<Class<?>,String> entityNameByClass){
  for (  String entitySetName : eis.keySet()) {
    InMemoryEntityInfo<?> ei=eis.get(entitySetName);
    Class<?> clazz1=ei.entityClass;
    generateToOneNavProperties(associations,associationSets,entityTypesByName,entitySetByName,entityNameByClass,ei.entityTypeName,ei);
    generateToManyNavProperties(associations,associationSets,entityTypesByName,entitySetByName,entityNameByClass,ei.entityTypeName,ei,clazz1);
  }
}",0.9985569985569984
59586,"private void generateToManyNavProperties(List<EdmAssociation.Builder> associations,List<EdmAssociationSet.Builder> associationSets,Map<String,EdmEntityType.Builder> entityTypesByName,Map<String,EdmEntitySet.Builder> entitySetByName,Map<Class<?>,String> entityNameByClass,String entityTypeName,InMemoryEntityInfo<?,?> ei,Class<?> clazz1){
  for (  String assocProp : ei.properties.getCollectionNames()) {
    final EdmEntityType.Builder eet1=entityTypesByName.get(entityTypeName);
    Class<?> clazz2=ei.properties.getCollectionElementType(assocProp);
    String eetName2=entityNameByClass.get(clazz2);
    if (eetName2 == null)     continue;
    final EdmEntityType.Builder eet2=entityTypesByName.get(eetName2);
    try {
      EdmAssociation.Builder assoc=Enumerable.create(associations).firstOrNull(new Predicate1<EdmAssociation.Builder>(){
        public boolean apply(        EdmAssociation.Builder input){
          return input.getEnd1().getType().equals(eet2) && input.getEnd2().getType().equals(eet1);
        }
      }
);
      EdmAssociationEnd.Builder fromRole, toRole;
      if (assoc == null) {
        EdmMultiplicity m1=EdmMultiplicity.ZERO_TO_ONE;
        EdmMultiplicity m2=EdmMultiplicity.MANY;
        InMemoryEntityInfo<?,?> class2eiInfo=eis.get(eetName2);
        for (        String tmp : class2eiInfo.properties.getCollectionNames()) {
          if (clazz1 == class2eiInfo.properties.getCollectionElementType(tmp)) {
            m1=EdmMultiplicity.MANY;
            m2=EdmMultiplicity.MANY;
            break;
          }
        }
        String assocName=String.format(""String_Node_Str"",eet1.getName(),eet2.getName());
        EdmAssociationEnd.Builder assocEnd1=EdmAssociationEnd.newBuilder().setRole(eet1.getName()).setType(eet1).setMultiplicity(m1);
        String assocEnd2Name=eet2.getName();
        if (assocEnd2Name.equals(eet1.getName()))         assocEnd2Name=assocEnd2Name + ""String_Node_Str"";
        EdmAssociationEnd.Builder assocEnd2=EdmAssociationEnd.newBuilder().setRole(assocEnd2Name).setType(eet2).setMultiplicity(m2);
        assoc=EdmAssociation.newBuilder().setNamespace(namespace).setName(assocName).setEnds(assocEnd1,assocEnd2);
        associations.add(assoc);
        EdmEntitySet.Builder ees1=entitySetByName.get(eet1.getName());
        EdmEntitySet.Builder ees2=entitySetByName.get(eet2.getName());
        EdmAssociationSet.Builder eas=EdmAssociationSet.newBuilder().setName(assocName).setAssociation(assoc).setEnds(EdmAssociationSetEnd.newBuilder().setRole(assocEnd1).setEntitySet(ees1),EdmAssociationSetEnd.newBuilder().setRole(assocEnd2).setEntitySet(ees2));
        associationSets.add(eas);
        fromRole=assoc.getEnd1();
        toRole=assoc.getEnd2();
      }
 else {
        fromRole=assoc.getEnd2();
        toRole=assoc.getEnd1();
      }
      EdmNavigationProperty.Builder np=EdmNavigationProperty.newBuilder(assocProp).setRelationship(assoc).setFromTo(fromRole,toRole);
      eet1.addNavigationProperties(np);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","private void generateToManyNavProperties(List<EdmAssociation.Builder> associations,List<EdmAssociationSet.Builder> associationSets,Map<String,EdmEntityType.Builder> entityTypesByName,Map<String,EdmEntitySet.Builder> entitySetByName,Map<Class<?>,String> entityNameByClass,String entityTypeName,InMemoryEntityInfo<?> ei,Class<?> clazz1){
  for (  String assocProp : ei.properties.getCollectionNames()) {
    final EdmEntityType.Builder eet1=entityTypesByName.get(entityTypeName);
    Class<?> clazz2=ei.properties.getCollectionElementType(assocProp);
    String eetName2=entityNameByClass.get(clazz2);
    if (eetName2 == null)     continue;
    final EdmEntityType.Builder eet2=entityTypesByName.get(eetName2);
    try {
      EdmAssociation.Builder assoc=Enumerable.create(associations).firstOrNull(new Predicate1<EdmAssociation.Builder>(){
        public boolean apply(        EdmAssociation.Builder input){
          return input.getEnd1().getType().equals(eet2) && input.getEnd2().getType().equals(eet1);
        }
      }
);
      EdmAssociationEnd.Builder fromRole, toRole;
      if (assoc == null) {
        EdmMultiplicity m1=EdmMultiplicity.ZERO_TO_ONE;
        EdmMultiplicity m2=EdmMultiplicity.MANY;
        InMemoryEntityInfo<?> class2eiInfo=eis.get(eetName2);
        for (        String tmp : class2eiInfo.properties.getCollectionNames()) {
          if (clazz1 == class2eiInfo.properties.getCollectionElementType(tmp)) {
            m1=EdmMultiplicity.MANY;
            m2=EdmMultiplicity.MANY;
            break;
          }
        }
        String assocName=String.format(""String_Node_Str"",eet1.getName(),eet2.getName());
        EdmAssociationEnd.Builder assocEnd1=EdmAssociationEnd.newBuilder().setRole(eet1.getName()).setType(eet1).setMultiplicity(m1);
        String assocEnd2Name=eet2.getName();
        if (assocEnd2Name.equals(eet1.getName()))         assocEnd2Name=assocEnd2Name + ""String_Node_Str"";
        EdmAssociationEnd.Builder assocEnd2=EdmAssociationEnd.newBuilder().setRole(assocEnd2Name).setType(eet2).setMultiplicity(m2);
        assoc=EdmAssociation.newBuilder().setNamespace(namespace).setName(assocName).setEnds(assocEnd1,assocEnd2);
        associations.add(assoc);
        EdmEntitySet.Builder ees1=entitySetByName.get(eet1.getName());
        EdmEntitySet.Builder ees2=entitySetByName.get(eet2.getName());
        EdmAssociationSet.Builder eas=EdmAssociationSet.newBuilder().setName(assocName).setAssociation(assoc).setEnds(EdmAssociationSetEnd.newBuilder().setRole(assocEnd1).setEntitySet(ees1),EdmAssociationSetEnd.newBuilder().setRole(assocEnd2).setEntitySet(ees2));
        associationSets.add(eas);
        fromRole=assoc.getEnd1();
        toRole=assoc.getEnd2();
      }
 else {
        fromRole=assoc.getEnd2();
        toRole=assoc.getEnd1();
      }
      EdmNavigationProperty.Builder np=EdmNavigationProperty.newBuilder(assocProp).setRelationship(assoc).setFromTo(fromRole,toRole);
      eet1.addNavigationProperties(np);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
    }
  }
}",0.9993527508090616
59587,"private void createStructuralEntities(EdmDecorator decorator,List<EdmEntitySet.Builder> entitySets,List<EdmEntityType.Builder> entityTypes){
  for (  String entitySetName : eis.keySet()) {
    InMemoryEntityInfo<?,?> entityInfo=eis.get(entitySetName);
    List<EdmProperty.Builder> properties=new ArrayList<EdmProperty.Builder>();
    properties.addAll(toEdmProperties(decorator,entityInfo.properties,entitySetName));
    EdmEntityType.Builder eet=EdmEntityType.newBuilder().setNamespace(namespace).setName(entityInfo.entityTypeName).addKeys(entityInfo.keys).setHasStream(entityInfo.hasStream).addProperties(properties);
    if (decorator != null) {
      eet.setDocumentation(decorator.getDocumentationForEntityType(namespace,entitySetName));
      eet.setAnnotations(decorator.getAnnotationsForEntityType(namespace,entitySetName));
    }
    EdmEntitySet.Builder ees=EdmEntitySet.newBuilder().setName(entitySetName).setEntityType(eet);
    entitySets.add(ees);
    entityTypes.add(eet);
  }
}","private void createStructuralEntities(EdmDecorator decorator,List<EdmEntitySet.Builder> entitySets,List<EdmEntityType.Builder> entityTypes){
  for (  String entitySetName : eis.keySet()) {
    InMemoryEntityInfo<?> entityInfo=eis.get(entitySetName);
    List<EdmProperty.Builder> properties=new ArrayList<EdmProperty.Builder>();
    properties.addAll(toEdmProperties(decorator,entityInfo.properties,entitySetName));
    EdmEntityType.Builder eet=EdmEntityType.newBuilder().setNamespace(namespace).setName(entityInfo.entityTypeName).addKeys(entityInfo.keys).setHasStream(entityInfo.hasStream).addProperties(properties);
    if (decorator != null) {
      eet.setDocumentation(decorator.getDocumentationForEntityType(namespace,entitySetName));
      eet.setAnnotations(decorator.getAnnotationsForEntityType(namespace,entitySetName));
    }
    EdmEntitySet.Builder ees=EdmEntitySet.newBuilder().setName(entitySetName).setEntityType(eet);
    entitySets.add(ees);
    entityTypes.add(eet);
  }
}",0.998992950654582
59588,"protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  InMemoryEntityInfo<?,?> ei=eis.get(ees.getName());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Map<String,Object> keyKVPair=new HashMap<String,Object>();
  for (  String key : ei.keys) {
    Object keyValue=ei.properties.getPropertyValue(obj,key);
    keyKVPair.put(key,keyValue);
  }
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType<?> type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=typeMapping.findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.getType();
    HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      String remainingPropPath=props.length > 1 ? props[1] : null;
      if (expandedProps.containsKey(prop)) {
        if (remainingPropPath != null) {
          List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
          remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
        }
      }
 else {
        List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
        if (remainingPropPath != null)         remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
        expandedProps.put(prop,remainingPropPaths);
      }
    }
    for (    final String prop : expandedProps.keySet()) {
      List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              InMemoryEntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?,?>>(){
                @Override public boolean apply(                InMemoryEntityInfo<?,?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          InMemoryEntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?,?>>(){
            @Override public boolean apply(            InMemoryEntityInfo<?,?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.getName(),null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.getName());
      }
    }
);
    if (!expanded) {
      if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.getName(),null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyKVPair),properties,links,obj);
}","protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  InMemoryEntityInfo<?> ei=eis.get(ees.getName());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Map<String,Object> keyKVPair=new HashMap<String,Object>();
  for (  String key : ei.keys) {
    Object keyValue=ei.properties.getPropertyValue(obj,key);
    keyKVPair.put(key,keyValue);
  }
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType<?> type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=typeMapping.findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.getType();
    HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      String remainingPropPath=props.length > 1 ? props[1] : null;
      if (expandedProps.containsKey(prop)) {
        if (remainingPropPath != null) {
          List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
          remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
        }
      }
 else {
        List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
        if (remainingPropPath != null)         remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
        expandedProps.put(prop,remainingPropPaths);
      }
    }
    for (    final String prop : expandedProps.keySet()) {
      List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              InMemoryEntityInfo<?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?>>(){
                @Override public boolean apply(                InMemoryEntityInfo<?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          InMemoryEntityInfo<?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?>>(){
            @Override public boolean apply(            InMemoryEntityInfo<?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.getName(),null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.getName());
      }
    }
);
    if (!expanded) {
      if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.getName(),null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyKVPair),properties,links,obj);
}",0.8262331838565022
59589,"@SuppressWarnings(""String_Node_Str"") @Override public EntityResponse getEntity(String entitySetName,final OEntityKey entityKey,QueryInfo queryInfo){
  final EdmEntitySet ees=getMetadata().getEdmEntitySet(entitySetName);
  final InMemoryEntityInfo<?,?> ei=eis.get(entitySetName);
  final String[] keyList=ei.keys;
  Iterable<Object> iter=(Iterable<Object>)ei.get.apply();
  final Object rt=Enumerable.create(iter).firstOrNull(new Predicate1<Object>(){
    public boolean apply(    Object input){
      HashMap<String,Object> idObjectMap=ei.id.apply(input);
      if (keyList.length == 1) {
        Object idValue=entityKey.asSingleValue();
        return idObjectMap.get(keyList[0]).equals(idValue);
      }
 else       if (keyList.length > 1) {
        for (        String key : keyList) {
          Object curValue=null;
          Iterator<OProperty<?>> keyProps=entityKey.asComplexProperties().iterator();
          while (keyProps.hasNext()) {
            OProperty<?> keyProp=keyProps.next();
            if (keyProp.getName().equalsIgnoreCase(key)) {
              curValue=keyProp.getValue();
            }
          }
          if (curValue == null) {
            return false;
          }
 else           if (!idObjectMap.get(key).equals(curValue)) {
            return false;
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  if (rt == null)   throw new NotFoundException();
  OEntity oe=toOEntity(ees,rt,queryInfo.expand);
  return Responses.entity(oe);
}","@SuppressWarnings(""String_Node_Str"") @Override public EntityResponse getEntity(String entitySetName,final OEntityKey entityKey,QueryInfo queryInfo){
  final EdmEntitySet ees=getMetadata().getEdmEntitySet(entitySetName);
  final InMemoryEntityInfo<?> ei=eis.get(entitySetName);
  final String[] keyList=ei.keys;
  Iterable<Object> iter=(Iterable<Object>)ei.get.apply();
  final Object rt=Enumerable.create(iter).firstOrNull(new Predicate1<Object>(){
    public boolean apply(    Object input){
      HashMap<String,Object> idObjectMap=ei.id.apply(input);
      if (keyList.length == 1) {
        Object idValue=entityKey.asSingleValue();
        return idObjectMap.get(keyList[0]).equals(idValue);
      }
 else       if (keyList.length > 1) {
        for (        String key : keyList) {
          Object curValue=null;
          Iterator<OProperty<?>> keyProps=entityKey.asComplexProperties().iterator();
          while (keyProps.hasNext()) {
            OProperty<?> keyProp=keyProps.next();
            if (keyProp.getName().equalsIgnoreCase(key)) {
              curValue=keyProp.getValue();
            }
          }
          if (curValue == null) {
            return false;
          }
 else           if (!idObjectMap.get(key).equals(curValue)) {
            return false;
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  if (rt == null)   throw new NotFoundException();
  OEntity oe=toOEntity(ees,rt,queryInfo.expand);
  return Responses.entity(oe);
}",0.9993412384716732
59590,"@Override public EntitiesResponse getEntities(String entitySetName,final QueryInfo queryInfo){
  final EdmEntitySet ees=getMetadata().getEdmEntitySet(entitySetName);
  final InMemoryEntityInfo<?,?> ei=eis.get(entitySetName);
  Enumerable<Object> objects=Enumerable.create(ei.get.apply()).cast(Object.class);
  if (queryInfo != null && queryInfo.filter != null) {
    objects=objects.where(filterToPredicate(queryInfo.filter,ei.properties));
  }
  Integer inlineCount=null;
  if (queryInfo != null && queryInfo.inlineCount == InlineCount.ALLPAGES) {
    objects=Enumerable.create(objects.toList());
    inlineCount=objects.count();
  }
  if (queryInfo != null && queryInfo.orderBy != null) {
    objects=orderBy(objects,queryInfo.orderBy,ei.properties);
  }
  Enumerable<OEntity> entities=objects.select(new Func1<Object,OEntity>(){
    public OEntity apply(    Object input){
      return toOEntity(ees,input,queryInfo != null ? queryInfo.expand : null);
    }
  }
);
  if (queryInfo != null && queryInfo.skipToken != null) {
    final Boolean[] skipping=new Boolean[]{true};
    entities=entities.skipWhile(new Predicate1<OEntity>(){
      public boolean apply(      OEntity input){
        if (skipping[0]) {
          String inputKey=input.getEntityKey().toKeyString();
          if (queryInfo.skipToken.equals(inputKey))           skipping[0]=false;
          return true;
        }
        return false;
      }
    }
);
  }
  if (queryInfo != null && queryInfo.skip != null) {
    entities=entities.skip(queryInfo.skip);
  }
  int limit=this.maxResults;
  if (queryInfo != null && queryInfo.top != null && queryInfo.top < limit) {
    limit=queryInfo.top;
  }
  entities=entities.take(limit + 1);
  List<OEntity> entitiesList=entities.toList();
  String skipToken=null;
  if (entitiesList.size() > limit) {
    entitiesList=Enumerable.create(entitiesList).take(limit).toList();
    skipToken=entitiesList.size() == 0 ? null : Enumerable.create(entitiesList).last().getEntityKey().toKeyString();
  }
  return Responses.entities(entitiesList,ees,inlineCount,skipToken);
}","@Override public EntitiesResponse getEntities(String entitySetName,final QueryInfo queryInfo){
  final EdmEntitySet ees=getMetadata().getEdmEntitySet(entitySetName);
  final InMemoryEntityInfo<?> ei=eis.get(entitySetName);
  Enumerable<Object> objects=Enumerable.create(ei.get.apply()).cast(Object.class);
  if (queryInfo != null && queryInfo.filter != null) {
    objects=objects.where(filterToPredicate(queryInfo.filter,ei.properties));
  }
  Integer inlineCount=null;
  if (queryInfo != null && queryInfo.inlineCount == InlineCount.ALLPAGES) {
    objects=Enumerable.create(objects.toList());
    inlineCount=objects.count();
  }
  if (queryInfo != null && queryInfo.orderBy != null) {
    objects=orderBy(objects,queryInfo.orderBy,ei.properties);
  }
  Enumerable<OEntity> entities=objects.select(new Func1<Object,OEntity>(){
    public OEntity apply(    Object input){
      return toOEntity(ees,input,queryInfo != null ? queryInfo.expand : null);
    }
  }
);
  if (queryInfo != null && queryInfo.skipToken != null) {
    final Boolean[] skipping=new Boolean[]{true};
    entities=entities.skipWhile(new Predicate1<OEntity>(){
      public boolean apply(      OEntity input){
        if (skipping[0]) {
          String inputKey=input.getEntityKey().toKeyString();
          if (queryInfo.skipToken.equals(inputKey))           skipping[0]=false;
          return true;
        }
        return false;
      }
    }
);
  }
  if (queryInfo != null && queryInfo.skip != null) {
    entities=entities.skip(queryInfo.skip);
  }
  int limit=this.maxResults;
  if (queryInfo != null && queryInfo.top != null && queryInfo.top < limit) {
    limit=queryInfo.top;
  }
  entities=entities.take(limit + 1);
  List<OEntity> entitiesList=entities.toList();
  String skipToken=null;
  if (entitiesList.size() > limit) {
    entitiesList=Enumerable.create(entitiesList).take(limit).toList();
    skipToken=entitiesList.size() == 0 ? null : Enumerable.create(entitiesList).last().getEntityKey().toKeyString();
  }
  return Responses.entities(entitiesList,ees,inlineCount,skipToken);
}",0.9995178399228544
59591,"protected InMemoryEdmGenerator newEdmGenerator(String namespace,InMemoryTypeMapping typeMapping,String idPropName,Map<String,InMemoryEntityInfo<?,?>> eis){
  return new InMemoryEdmGenerator(namespace,typeMapping,ID_PROPNAME,eis);
}","protected InMemoryEdmGenerator newEdmGenerator(String namespace,InMemoryTypeMapping typeMapping,String idPropName,Map<String,InMemoryEntityInfo<?>> eis){
  return new InMemoryEdmGenerator(namespace,typeMapping,ID_PROPNAME,eis);
}",0.9956521739130436
59592,"public <TEntity,TKey>void register(final Class<TEntity> entityClass,final PropertyModel propertyModel,final String entitySetName,final String entityTypeName,final Func<Iterable<TEntity>> get,final String... keys){
  InMemoryEntityInfo<TEntity,TKey> ei=new InMemoryEntityInfo<TEntity,TKey>();
  ei.entitySetName=entitySetName;
  ei.entityTypeName=entityTypeName;
  ei.properties=propertyModel;
  ei.get=get;
  ei.keys=keys;
  ei.entityClass=entityClass;
  ei.hasStream=OAtomStreamEntity.class.isAssignableFrom(entityClass);
  ei.id=new Func1<Object,HashMap<String,Object>>(){
    @Override public HashMap<String,Object> apply(    Object input){
      HashMap<String,Object> values=new HashMap<String,Object>();
      for (      String key : keys) {
        values.put(key,eis.get(entitySetName).properties.getPropertyValue(input,key));
      }
      return values;
    }
  }
;
  eis.put(entitySetName,ei);
  metadata=null;
}","public <TEntity>void register(final Class<TEntity> entityClass,final PropertyModel propertyModel,final String entitySetName,final String entityTypeName,final Func<Iterable<TEntity>> get,final String... keys){
  InMemoryEntityInfo<TEntity> ei=new InMemoryEntityInfo<TEntity>();
  ei.entitySetName=entitySetName;
  ei.entityTypeName=entityTypeName;
  ei.properties=propertyModel;
  ei.get=get;
  ei.keys=keys;
  ei.entityClass=entityClass;
  ei.hasStream=OAtomStreamEntity.class.isAssignableFrom(entityClass);
  ei.id=new Func1<Object,HashMap<String,Object>>(){
    @Override public HashMap<String,Object> apply(    Object input){
      HashMap<String,Object> values=new HashMap<String,Object>();
      for (      String key : keys) {
        values.put(key,eis.get(entitySetName).properties.getPropertyValue(input,key));
      }
      return values;
    }
  }
;
  eis.put(entitySetName,ei);
  metadata=null;
}",0.991807755324959
59593,"public String toJpql(BoolCommonExpression expression){
  if (expression instanceof EqExpression)   return bceToJpql(""String_Node_Str"",(EqExpression)expression);
  if (expression instanceof NeExpression)   return bceToJpql(""String_Node_Str"",(NeExpression)expression);
  if (expression instanceof AndExpression) {
    AndExpression e=(AndExpression)expression;
    return String.format(""String_Node_Str"",toJpql(e.getLHS()),toJpql(e.getRHS()));
  }
  if (expression instanceof OrExpression) {
    OrExpression e=(OrExpression)expression;
    return String.format(""String_Node_Str"",toJpql(e.getLHS()),toJpql(e.getRHS()));
  }
  if (expression instanceof BooleanLiteral)   return Boolean.toString(((BooleanLiteral)expression).getValue());
  if (expression instanceof GtExpression)   return bceToJpql(""String_Node_Str"",(GtExpression)expression);
  if (expression instanceof LtExpression)   return bceToJpql(""String_Node_Str"",(LtExpression)expression);
  if (expression instanceof GeExpression)   return bceToJpql(""String_Node_Str"",(GeExpression)expression);
  if (expression instanceof LeExpression)   return bceToJpql(""String_Node_Str"",(LeExpression)expression);
  if (expression instanceof NotExpression) {
    NotExpression e=(NotExpression)expression;
    return String.format(""String_Node_Str"",toJpql(e.getExpression()));
  }
  if (expression instanceof SubstringOfMethodCallExpression) {
    SubstringOfMethodCallExpression e=(SubstringOfMethodCallExpression)expression;
    String value=(String)toJpql(e.getValue());
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    return String.format(""String_Node_Str"",toJpql(e.getTarget()),value);
  }
  if (expression instanceof EndsWithMethodCallExpression) {
    EndsWithMethodCallExpression e=(EndsWithMethodCallExpression)expression;
    String value=(String)toJpql(e.getValue());
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    return String.format(""String_Node_Str"",toJpql(e.getTarget()),value);
  }
  if (expression instanceof StartsWithMethodCallExpression) {
    StartsWithMethodCallExpression e=(StartsWithMethodCallExpression)expression;
    String value=(String)toJpql(e.getValue());
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    return String.format(""String_Node_Str"",toJpql(e.getTarget()),value);
  }
  if (expression instanceof IsofExpression) {
    IsofExpression e=(IsofExpression)expression;
    String clazz=toJpql(e.getExpression());
    if (clazz == null) {
      clazz=tableAlias;
    }
    return String.format(""String_Node_Str"",clazz,e.getType());
  }
  if (expression instanceof ParenExpression) {
    ParenExpression e=(ParenExpression)expression;
    return ""String_Node_Str"" + toJpql((ParenExpression)e.getExpression()) + ""String_Node_Str"";
  }
  if (expression instanceof BoolParenExpression) {
    BoolParenExpression e=(BoolParenExpression)expression;
    return ""String_Node_Str"" + toJpql((BoolCommonExpression)e.getExpression()) + ""String_Node_Str"";
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + expression);
}","public String toJpql(BoolCommonExpression expression){
  if (expression instanceof EqExpression)   return bceToJpql(""String_Node_Str"",(EqExpression)expression);
  if (expression instanceof NeExpression)   return bceToJpql(""String_Node_Str"",(NeExpression)expression);
  if (expression instanceof AndExpression) {
    AndExpression e=(AndExpression)expression;
    return String.format(""String_Node_Str"",toJpql(e.getLHS()),toJpql(e.getRHS()));
  }
  if (expression instanceof OrExpression) {
    OrExpression e=(OrExpression)expression;
    return String.format(""String_Node_Str"",toJpql(e.getLHS()),toJpql(e.getRHS()));
  }
  if (expression instanceof BooleanLiteral)   return Boolean.toString(((BooleanLiteral)expression).getValue());
  if (expression instanceof GtExpression)   return bceToJpql(""String_Node_Str"",(GtExpression)expression);
  if (expression instanceof LtExpression)   return bceToJpql(""String_Node_Str"",(LtExpression)expression);
  if (expression instanceof GeExpression)   return bceToJpql(""String_Node_Str"",(GeExpression)expression);
  if (expression instanceof LeExpression)   return bceToJpql(""String_Node_Str"",(LeExpression)expression);
  if (expression instanceof NotExpression) {
    NotExpression e=(NotExpression)expression;
    if (e.getExpression() instanceof BoolParenExpression) {
      return String.format(""String_Node_Str"",toJpql(e.getExpression()));
    }
    return String.format(""String_Node_Str"",toJpql(e.getExpression()));
  }
  if (expression instanceof SubstringOfMethodCallExpression) {
    SubstringOfMethodCallExpression e=(SubstringOfMethodCallExpression)expression;
    String value=(String)toJpql(e.getValue());
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    return String.format(""String_Node_Str"",toJpql(e.getTarget()),value);
  }
  if (expression instanceof EndsWithMethodCallExpression) {
    EndsWithMethodCallExpression e=(EndsWithMethodCallExpression)expression;
    String value=(String)toJpql(e.getValue());
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    return String.format(""String_Node_Str"",toJpql(e.getTarget()),value);
  }
  if (expression instanceof StartsWithMethodCallExpression) {
    StartsWithMethodCallExpression e=(StartsWithMethodCallExpression)expression;
    String value=(String)toJpql(e.getValue());
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    return String.format(""String_Node_Str"",toJpql(e.getTarget()),value);
  }
  if (expression instanceof IsofExpression) {
    IsofExpression e=(IsofExpression)expression;
    String clazz=toJpql(e.getExpression());
    if (clazz == null) {
      clazz=tableAlias;
    }
    return String.format(""String_Node_Str"",clazz,e.getType());
  }
  if (expression instanceof ParenExpression) {
    ParenExpression e=(ParenExpression)expression;
    return ""String_Node_Str"" + toJpql((ParenExpression)e.getExpression()) + ""String_Node_Str"";
  }
  if (expression instanceof BoolParenExpression) {
    BoolParenExpression e=(BoolParenExpression)expression;
    return ""String_Node_Str"" + toJpql((BoolCommonExpression)e.getExpression()) + ""String_Node_Str"";
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + expression);
}",0.9777706700783624
59594,"private static CommonExpression readExpression(List<Token> tokens){
  CommonExpression rt=null;
  tokens=trimWhitespace(tokens);
  Token lastToken=tokens.get(tokens.size() - 1);
  if (lastToken.type == TokenType.WORD && (lastToken.value.equals(""String_Node_Str"") || lastToken.value.equals(""String_Node_Str""))) {
    return Expression.orderBy(readExpression(tokens.subList(0,tokens.size() - 1)),lastToken.value.equals(""String_Node_Str"") ? Direction.ASCENDING : Direction.DESCENDING);
  }
  tokens=processParentheses(tokens);
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.WORD && tokens.get(1).type == TokenType.QUOTED_STRING) {
    String word=tokens.get(0).value;
    String value=unquote(tokens.get(1).value);
    if (word.equals(""String_Node_Str"")) {
      DateTime dt=InternalUtil.parseDateTime(value);
      return Expression.dateTime(new LocalDateTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      LocalTime t=InternalUtil.parseTime(value);
      return Expression.time(t);
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=InternalUtil.parseDateTime(value);
      return Expression.dateTimeOffset(dt);
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.guid(Guid.fromString(value));
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.decimal(new BigDecimal(value));
    }
 else     if (word.equals(""String_Node_Str"") || word.equals(""String_Node_Str"")) {
      try {
        byte[] bValue=Hex.decodeHex(value.toCharArray());
        return Expression.binary(bValue);
      }
 catch (      DecoderException e) {
        throw new RuntimeException(e);
      }
    }
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    long longValue=Long.parseLong(tokens.get(0).value);
    return Expression.int64(longValue);
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.SYMBOL && tokens.get(2).value.equals(""String_Node_Str"") && tokens.get(3).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(3).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(2).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 6 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.SYMBOL && tokens.get(4).value.equals(""String_Node_Str"") && tokens.get(5).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(5).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 5 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(4).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(4).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equalsIgnoreCase(""String_Node_Str"")) {
    BigDecimal decimalValue=new BigDecimal(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.decimal(decimalValue);
  }
  if (tokens.size() == 1) {
    final Token token=tokens.get(0);
    if (token.type == TokenType.QUOTED_STRING) {
      return Expression.string(unquote(token.value));
    }
 else     if (token.type == TokenType.WORD) {
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.null_();
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(true);
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(false);
      }
      return Expression.simpleProperty(token.value);
    }
 else     if (token.type == TokenType.NUMBER) {
      try {
        int value=Integer.parseInt(token.value);
        return Expression.integral(value);
      }
 catch (      NumberFormatException e) {
        long value=Long.parseLong(token.value);
        return Expression.int64(value);
      }
    }
 else     if (token.type == TokenType.EXPRESSION) {
      return ((ExpressionToken)token).expression;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.or((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.and((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.eq(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ne(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.lt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.gt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.le(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ge(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.add(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.sub(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mul(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.div(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mod(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",true,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.not(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",false,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.negate(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  throw new RuntimeException(""String_Node_Str"" + tokens);
}","private static CommonExpression readExpression(List<Token> tokens){
  CommonExpression rt=null;
  tokens=trimWhitespace(tokens);
  Token lastToken=tokens.get(tokens.size() - 1);
  if (lastToken.type == TokenType.WORD && (lastToken.value.equals(""String_Node_Str"") || lastToken.value.equals(""String_Node_Str""))) {
    return Expression.orderBy(readExpression(tokens.subList(0,tokens.size() - 1)),lastToken.value.equals(""String_Node_Str"") ? Direction.ASCENDING : Direction.DESCENDING);
  }
  tokens=processParentheses(tokens);
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.WORD && tokens.get(1).type == TokenType.QUOTED_STRING) {
    String word=tokens.get(0).value;
    String value=unquote(tokens.get(1).value);
    if (word.equals(""String_Node_Str"")) {
      DateTime dt=InternalUtil.parseDateTime(value);
      return Expression.dateTime(new LocalDateTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      LocalTime t=InternalUtil.parseTime(value);
      return Expression.time(t);
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=InternalUtil.parseDateTime(value);
      return Expression.dateTimeOffset(dt);
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.guid(Guid.fromString(value));
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.decimal(new BigDecimal(value));
    }
 else     if (word.equals(""String_Node_Str"") || word.equals(""String_Node_Str"")) {
      try {
        byte[] bValue=Hex.decodeHex(value.toCharArray());
        return Expression.binary(bValue);
      }
 catch (      DecoderException e) {
        throw new RuntimeException(e);
      }
    }
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    long longValue=Long.parseLong(tokens.get(0).value);
    return Expression.int64(longValue);
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.SYMBOL && tokens.get(2).value.equals(""String_Node_Str"") && tokens.get(3).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(3).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(2).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 6 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.SYMBOL && tokens.get(4).value.equals(""String_Node_Str"") && tokens.get(5).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(5).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 5 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(4).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(4).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equalsIgnoreCase(""String_Node_Str"")) {
    BigDecimal decimalValue=new BigDecimal(tokens.get(0).value);
    return Expression.decimal(decimalValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equalsIgnoreCase(""String_Node_Str"")) {
    BigDecimal decimalValue=new BigDecimal(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.decimal(decimalValue);
  }
  if (tokens.size() == 1) {
    final Token token=tokens.get(0);
    if (token.type == TokenType.QUOTED_STRING) {
      return Expression.string(unquote(token.value));
    }
 else     if (token.type == TokenType.WORD) {
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.null_();
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(true);
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(false);
      }
      return Expression.simpleProperty(token.value);
    }
 else     if (token.type == TokenType.NUMBER) {
      try {
        int value=Integer.parseInt(token.value);
        return Expression.integral(value);
      }
 catch (      NumberFormatException e) {
        long value=Long.parseLong(token.value);
        return Expression.int64(value);
      }
    }
 else     if (token.type == TokenType.EXPRESSION) {
      return ((ExpressionToken)token).expression;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.or((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.and((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.eq(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ne(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.lt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.gt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.le(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ge(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.add(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.sub(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mul(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.div(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mod(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",true,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.not(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",false,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.negate(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  throw new RuntimeException(""String_Node_Str"" + tokens);
}",0.9875817280266797
59595,"@Test public void testExpressionParsing(){
  ExpressionParser.DUMP_EXPRESSION_INFO=true;
  t(Expression.null_(),""String_Node_Str"");
  t(Expression.boolean_(true),""String_Node_Str"");
  t(Expression.boolean_(false),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.integral(0),""String_Node_Str"");
  t(Expression.integral(2),""String_Node_Str"");
  t(Expression.integral(-2),""String_Node_Str"");
  t(Expression.integral(222222222),""String_Node_Str"");
  t(Expression.integral(-222222222),""String_Node_Str"");
  t(Expression.int64(-2),""String_Node_Str"");
  t(Expression.single(-2f),""String_Node_Str"");
  t(Expression.single(-2.34f),""String_Node_Str"");
  t(Expression.double_(-2.34d),""String_Node_Str"");
  t(Expression.double_(-2E+1),""String_Node_Str"");
  t(Expression.double_(2E-1),""String_Node_Str"");
  t(Expression.double_(-2.1E+1),""String_Node_Str"");
  t(Expression.double_(-2.1E-1),""String_Node_Str"");
  t(Expression.dateTime(new LocalDateTime(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.dateTimeOffset(new DateTime(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.time(new LocalTime(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.guid(Guid.fromString(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.guid(Guid.fromString(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.binary(new byte[]{(byte)0xff}),""String_Node_Str"");
  t(Expression.binary(new byte[]{(byte)0x00,(byte)0xaa,(byte)0xff}),""String_Node_Str"");
  t(Expression.simpleProperty(""String_Node_Str""),""String_Node_Str"");
  t(Expression.simpleProperty(""String_Node_Str""),""String_Node_Str"");
  t(Expression.eq(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.eq(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.eq(Expression.string(""String_Node_Str""),Expression.simpleProperty(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.ne(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  EqExpression exp=Expression.eq(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1));
  t(Expression.and(exp,exp),""String_Node_Str"");
  t(Expression.or(exp,exp),""String_Node_Str"");
  t(Expression.or(exp,Expression.and(exp,exp)),""String_Node_Str"");
  t(Expression.or(Expression.and(exp,exp),exp),""String_Node_Str"");
  t(Expression.and(Expression.boolean_(true),Expression.boolean_(false)),""String_Node_Str"");
  t(Expression.lt(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.gt(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.le(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.ge(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.add(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.sub(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.mul(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.div(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.mod(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.paren(Expression.null_()),""String_Node_Str"");
  t(Expression.paren(Expression.null_()),""String_Node_Str"");
  t(Expression.paren(Expression.paren(Expression.null_())),""String_Node_Str"");
  t(Expression.add(Expression.paren(Expression.integral(1)),Expression.paren(Expression.integral(2))),""String_Node_Str"");
  t(Expression.not(Expression.null_()),""String_Node_Str"");
  t(Expression.negate(Expression.simpleProperty(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.negate(Expression.simpleProperty(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.cast(EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.cast(EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.cast(Expression.null_(),EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.cast(Expression.null_(),EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.isof(EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.endsWith(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.startsWith(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substringOf(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substringOf(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.indexOf(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.replace(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.toLower(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.toUpper(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.trim(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substring(Expression.string(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.substring(Expression.string(""String_Node_Str""),Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.concat(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.length(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substringOf(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.year(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.month(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.day(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.hour(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.minute(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.second(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.round(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.ceiling(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.floor(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  o(""String_Node_Str"",Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.DESCENDING));
  o(""String_Node_Str"",Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.ASCENDING));
  o(""String_Node_Str"",Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.DESCENDING),Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.ASCENDING));
}","@Test public void testExpressionParsing(){
  ExpressionParser.DUMP_EXPRESSION_INFO=true;
  t(Expression.null_(),""String_Node_Str"");
  t(Expression.boolean_(true),""String_Node_Str"");
  t(Expression.boolean_(false),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.string(""String_Node_Str""),""String_Node_Str"");
  t(Expression.integral(0),""String_Node_Str"");
  t(Expression.integral(2),""String_Node_Str"");
  t(Expression.integral(-2),""String_Node_Str"");
  t(Expression.integral(222222222),""String_Node_Str"");
  t(Expression.integral(-222222222),""String_Node_Str"");
  t(Expression.int64(-2),""String_Node_Str"");
  t(Expression.single(-2f),""String_Node_Str"");
  t(Expression.single(-2.34f),""String_Node_Str"");
  t(Expression.double_(-2.34d),""String_Node_Str"");
  t(Expression.double_(-2E+1),""String_Node_Str"");
  t(Expression.double_(2E-1),""String_Node_Str"");
  t(Expression.double_(-2.1E+1),""String_Node_Str"");
  t(Expression.double_(-2.1E-1),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.dateTime(new LocalDateTime(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.dateTimeOffset(new DateTime(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.time(new LocalTime(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.guid(Guid.fromString(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.guid(Guid.fromString(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.decimal(new BigDecimal(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.binary(new byte[]{(byte)0xff}),""String_Node_Str"");
  t(Expression.binary(new byte[]{(byte)0x00,(byte)0xaa,(byte)0xff}),""String_Node_Str"");
  t(Expression.simpleProperty(""String_Node_Str""),""String_Node_Str"");
  t(Expression.simpleProperty(""String_Node_Str""),""String_Node_Str"");
  t(Expression.eq(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.eq(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.eq(Expression.string(""String_Node_Str""),Expression.simpleProperty(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.ne(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  EqExpression exp=Expression.eq(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1));
  t(Expression.and(exp,exp),""String_Node_Str"");
  t(Expression.or(exp,exp),""String_Node_Str"");
  t(Expression.or(exp,Expression.and(exp,exp)),""String_Node_Str"");
  t(Expression.or(Expression.and(exp,exp),exp),""String_Node_Str"");
  t(Expression.and(Expression.boolean_(true),Expression.boolean_(false)),""String_Node_Str"");
  t(Expression.lt(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.gt(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.le(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.ge(Expression.simpleProperty(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.add(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.sub(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.mul(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.div(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.mod(Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.paren(Expression.null_()),""String_Node_Str"");
  t(Expression.paren(Expression.null_()),""String_Node_Str"");
  t(Expression.paren(Expression.paren(Expression.null_())),""String_Node_Str"");
  t(Expression.add(Expression.paren(Expression.integral(1)),Expression.paren(Expression.integral(2))),""String_Node_Str"");
  t(Expression.not(Expression.null_()),""String_Node_Str"");
  t(Expression.negate(Expression.simpleProperty(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.negate(Expression.simpleProperty(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.cast(EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.cast(EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.cast(Expression.null_(),EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.cast(Expression.null_(),EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.isof(EdmSimpleType.STRING.getFullyQualifiedTypeName()),""String_Node_Str"");
  t(Expression.endsWith(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.startsWith(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substringOf(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substringOf(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.indexOf(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.replace(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.toLower(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.toUpper(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.trim(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substring(Expression.string(""String_Node_Str""),Expression.integral(1)),""String_Node_Str"");
  t(Expression.substring(Expression.string(""String_Node_Str""),Expression.integral(1),Expression.integral(2)),""String_Node_Str"");
  t(Expression.concat(Expression.string(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.length(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.substringOf(Expression.simpleProperty(""String_Node_Str""),Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.year(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.month(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.day(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.hour(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.minute(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.second(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.round(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.ceiling(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  t(Expression.floor(Expression.string(""String_Node_Str"")),""String_Node_Str"");
  o(""String_Node_Str"",Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.DESCENDING));
  o(""String_Node_Str"",Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.ASCENDING));
  o(""String_Node_Str"",Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.DESCENDING),Expression.orderBy(Expression.simpleProperty(""String_Node_Str""),Direction.ASCENDING));
}",0.9599074787972244
59596,"public ServerErrorException(String message){
  super(Response.status(501).entity(message).build());
}","public ServerErrorException(String message){
  super(Response.status(500).entity(message).build());
}",0.99009900990099
59597,"@Override public EntitiesResponse getNavProperty(String entitySetName,OEntityKey entityKey,String navProp,QueryInfo queryInfo){
  throw new NotImplementedException();
}","@Override public BaseResponse getNavProperty(String entitySetName,OEntityKey entityKey,String navProp,QueryInfo queryInfo){
  throw new NotImplementedException();
}",0.9698795180722892
59598,"protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  InMemoryEntityInfo<?,?> ei=eis.get(ees.getName());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Object keyValue=ei.properties.getPropertyValue(obj,ID_PROPNAME);
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType<?> type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=typeMapping.findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.getType();
    HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      String remainingPropPath=props.length > 1 ? props[1] : null;
      if (expandedProps.containsKey(prop)) {
        if (remainingPropPath != null) {
          List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
          remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
        }
      }
 else {
        List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
        if (remainingPropPath != null)         remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
        expandedProps.put(prop,remainingPropPaths);
      }
    }
    for (    final String prop : expandedProps.keySet()) {
      List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              InMemoryEntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?,?>>(){
                @Override public boolean apply(                InMemoryEntityInfo<?,?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          InMemoryEntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?,?>>(){
            @Override public boolean apply(            InMemoryEntityInfo<?,?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.getName(),null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.getName());
      }
    }
);
    if (!expanded) {
      if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.getName(),null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyValue),properties,links);
}","protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  InMemoryEntityInfo<?,?> ei=eis.get(ees.getName());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Object keyValue=ei.properties.getPropertyValue(obj,ID_PROPNAME);
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType<?> type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=typeMapping.findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.getType();
    HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      String remainingPropPath=props.length > 1 ? props[1] : null;
      if (expandedProps.containsKey(prop)) {
        if (remainingPropPath != null) {
          List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
          remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
        }
      }
 else {
        List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
        if (remainingPropPath != null)         remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
        expandedProps.put(prop,remainingPropPaths);
      }
    }
    for (    final String prop : expandedProps.keySet()) {
      List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              InMemoryEntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?,?>>(){
                @Override public boolean apply(                InMemoryEntityInfo<?,?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          InMemoryEntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryEntityInfo<?,?>>(){
            @Override public boolean apply(            InMemoryEntityInfo<?,?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.getName(),null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.getName());
      }
    }
);
    if (!expanded) {
      if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.getName(),null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyValue),properties,links);
}",0.994724770642202
59599,"private OEntity jpaEntityToOEntity(EdmEntitySet ees,EntityType<?> entityType,Object jpaEntity,List<EntitySimpleProperty> expand,List<EntitySimpleProperty> select){
  List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  List<OLink> links=new ArrayList<OLink>();
  try {
    SingularAttribute<?,?> idAtt=JPAEdmGenerator.getIdAttribute(entityType);
    boolean hasEmbeddedCompositeKey=idAtt.getPersistentAttributeType() == PersistentAttributeType.EMBEDDED;
    for (    EdmProperty ep : ees.getType().getProperties()) {
      if (!isSelected(ep.getName(),select)) {
        continue;
      }
      if (hasEmbeddedCompositeKey && ees.getType().getKeys().contains(ep.getName())) {
        Object value=getIdValue(jpaEntity,idAtt,ep.getName());
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
 else {
        Attribute<?,?> att=entityType.getAttribute(ep.getName());
        JPAMember member=JPAMember.create(att,jpaEntity);
        Object value=member.get();
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
    }
    if (expand != null && !expand.isEmpty()) {
      HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
      for (      final EntitySimpleProperty propPath : expand) {
        String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
        String prop=props[0];
        String remainingPropPath=props.length > 1 ? props[1] : null;
        if (expandedProps.containsKey(prop)) {
          if (remainingPropPath != null) {
            List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
            remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
          }
        }
 else {
          List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
          if (remainingPropPath != null)           remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
          expandedProps.put(prop,remainingPropPaths);
        }
      }
      for (      final String prop : expandedProps.keySet()) {
        List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
        Attribute<?,?> att=entityType.getAttribute(prop);
        if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_MANY || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_MANY) {
          Collection<?> value=JPAMember.create(att,jpaEntity).get();
          List<OEntity> relatedEntities=new ArrayList<OEntity>();
          for (          Object relatedEntity : value) {
            EntityType<?> elementEntityType=(EntityType<?>)((PluralAttribute<?,?,?>)att).getElementType();
            EdmEntitySet elementEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(elementEntityType));
            relatedEntities.add(jpaEntityToOEntity(elementEntitySet,elementEntityType,relatedEntity,remainingPropPath,null));
          }
          links.add(OLinks.relatedEntitiesInline(null,prop,null,relatedEntities));
        }
 else         if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_ONE || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_ONE) {
          EntityType<?> relatedEntityType=(EntityType<?>)((SingularAttribute<?,?>)att).getType();
          EdmEntitySet relatedEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(relatedEntityType));
          Object relatedEntity=JPAMember.create(att,jpaEntity).get();
          if (relatedEntity == null) {
            links.add(OLinks.relatedEntityInline(null,prop,null,null));
          }
 else {
            links.add(OLinks.relatedEntityInline(null,prop,null,jpaEntityToOEntity(relatedEntitySet,relatedEntityType,relatedEntity,remainingPropPath,null)));
          }
        }
      }
    }
    for (    final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
      if (isSelected(ep.getName(),select)) {
        boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
          @Override public boolean apply(          OLink t){
            return t.getTitle().equals(ep.getName());
          }
        }
);
        if (!expanded) {
          if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
            links.add(OLinks.relatedEntities(null,ep.getName(),null));
          }
 else {
            links.add(OLinks.relatedEntity(null,ep.getName(),null));
          }
        }
      }
    }
    return OEntities.create(ees,toOEntityKey(jpaEntity,idAtt),properties,links);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private OEntity jpaEntityToOEntity(EdmEntitySet ees,EntityType<?> entityType,Object jpaEntity,List<EntitySimpleProperty> expand,List<EntitySimpleProperty> select){
  List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  List<OLink> links=new ArrayList<OLink>();
  try {
    SingularAttribute<?,?> idAtt=JPAEdmGenerator.getIdAttribute(entityType);
    boolean hasEmbeddedCompositeKey=idAtt.getPersistentAttributeType() == PersistentAttributeType.EMBEDDED;
    for (    EdmProperty ep : ees.getType().getProperties()) {
      if (!isSelected(ep.getName(),select)) {
        continue;
      }
      if (hasEmbeddedCompositeKey && ees.getType().getKeys().contains(ep.getName())) {
        Object value=getIdValue(jpaEntity,idAtt,ep.getName());
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
 else {
        Attribute<?,?> att=entityType.getAttribute(ep.getName());
        JPAMember member=JPAMember.create(att,jpaEntity);
        Object value=member.get();
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
    }
    if (expand != null && !expand.isEmpty()) {
      HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
      for (      final EntitySimpleProperty propPath : expand) {
        String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
        String prop=props[0];
        String remainingPropPath=props.length > 1 ? props[1] : null;
        if (expandedProps.containsKey(prop)) {
          if (remainingPropPath != null) {
            List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
            remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
          }
        }
 else {
          List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
          if (remainingPropPath != null)           remainingPropPaths.add(Expression.simpleProperty(remainingPropPath));
          expandedProps.put(prop,remainingPropPaths);
        }
      }
      for (      final String prop : expandedProps.keySet()) {
        List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
        Attribute<?,?> att=entityType.getAttribute(prop);
        if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_MANY || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_MANY) {
          Collection<?> value=JPAMember.create(att,jpaEntity).get();
          List<OEntity> relatedEntities=new ArrayList<OEntity>();
          for (          Object relatedEntity : value) {
            EntityType<?> elementEntityType=(EntityType<?>)((PluralAttribute<?,?,?>)att).getElementType();
            EdmEntitySet elementEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(elementEntityType));
            relatedEntities.add(jpaEntityToOEntity(elementEntitySet,elementEntityType,relatedEntity,remainingPropPath,null));
          }
          links.add(OLinks.relatedEntitiesInline(null,prop,null,relatedEntities));
        }
 else         if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_ONE || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_ONE) {
          EntityType<?> relatedEntityType=(EntityType<?>)((SingularAttribute<?,?>)att).getType();
          EdmEntitySet relatedEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(relatedEntityType));
          Object relatedEntity=JPAMember.create(att,jpaEntity).get();
          if (relatedEntity == null) {
            links.add(OLinks.relatedEntityInline(null,prop,null,null));
          }
 else {
            links.add(OLinks.relatedEntityInline(null,prop,null,jpaEntityToOEntity(relatedEntitySet,relatedEntityType,relatedEntity,remainingPropPath,null)));
          }
        }
      }
    }
    for (    final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
      if (isSelected(ep.getName(),select)) {
        boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
          @Override public boolean apply(          OLink t){
            return t.getTitle().equals(ep.getName());
          }
        }
);
        if (!expanded) {
          if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
            links.add(OLinks.relatedEntities(null,ep.getName(),null));
          }
 else {
            links.add(OLinks.relatedEntity(null,ep.getName(),null));
          }
        }
      }
    }
    return OEntities.create(ees,toOEntityKey(jpaEntity,idAtt),properties,links);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9951405028523136
59600,"protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  EntityInfo<?,?> ei=eis.get(ees.getName());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Object keyValue=ei.properties.getPropertyValue(obj,ID_PROPNAME);
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType<?> type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.getType();
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      List<EntitySimpleProperty> remainingPropPath=props.length > 1 ? Arrays.asList(org.odata4j.expression.Expression.simpleProperty(props[1])) : null;
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
                @Override public boolean apply(                EntityInfo<?,?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
            @Override public boolean apply(            EntityInfo<?,?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.getName(),null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.getName());
      }
    }
);
    if (!expanded) {
      if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.getName(),null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyValue),properties,links);
}","protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  EntityInfo<?,?> ei=eis.get(ees.getName());
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Object keyValue=ei.properties.getPropertyValue(obj,ID_PROPNAME);
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType<?> type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.getType();
    HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      String remainingPropPath=props.length > 1 ? props[1] : null;
      if (expandedProps.containsKey(prop)) {
        if (remainingPropPath != null) {
          List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
          remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
        }
      }
 else {
        List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
        if (remainingPropPath != null)         remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
        expandedProps.put(prop,remainingPropPaths);
      }
    }
    for (    final String prop : expandedProps.keySet()) {
      List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
                @Override public boolean apply(                EntityInfo<?,?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.getName(),null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
            @Override public boolean apply(            EntityInfo<?,?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.getName(),null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.getName());
      }
    }
);
    if (!expanded) {
      if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.getName(),null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.getName(),null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyValue),properties,links);
}",0.8821455552757492
59601,"private OEntity jpaEntityToOEntity(EdmEntitySet ees,EntityType<?> entityType,Object jpaEntity,List<EntitySimpleProperty> expand,List<EntitySimpleProperty> select){
  List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  List<OLink> links=new ArrayList<OLink>();
  try {
    SingularAttribute<?,?> idAtt=JPAEdmGenerator.getIdAttribute(entityType);
    boolean hasEmbeddedCompositeKey=idAtt.getPersistentAttributeType() == PersistentAttributeType.EMBEDDED;
    for (    EdmProperty ep : ees.getType().getProperties()) {
      if (!isSelected(ep.getName(),select)) {
        continue;
      }
      if (hasEmbeddedCompositeKey && ees.getType().getKeys().contains(ep.getName())) {
        Object value=getIdValue(jpaEntity,idAtt,ep.getName());
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
 else {
        Attribute<?,?> att=entityType.getAttribute(ep.getName());
        JPAMember member=JPAMember.create(att,jpaEntity);
        Object value=member.get();
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
    }
    if (expand != null && !expand.isEmpty()) {
      for (      final EntitySimpleProperty propPath : expand) {
        String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
        String prop=props[0];
        List<EntitySimpleProperty> remainingPropPath=props.length > 1 ? Arrays.asList(org.odata4j.expression.Expression.simpleProperty(props[1])) : null;
        Attribute<?,?> att=entityType.getAttribute(prop);
        if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_MANY || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_MANY) {
          Collection<?> value=JPAMember.create(att,jpaEntity).get();
          List<OEntity> relatedEntities=new ArrayList<OEntity>();
          for (          Object relatedEntity : value) {
            EntityType<?> elementEntityType=(EntityType<?>)((PluralAttribute<?,?,?>)att).getElementType();
            EdmEntitySet elementEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(elementEntityType));
            relatedEntities.add(jpaEntityToOEntity(elementEntitySet,elementEntityType,relatedEntity,remainingPropPath,null));
          }
          links.add(OLinks.relatedEntitiesInline(null,prop,null,relatedEntities));
        }
 else         if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_ONE || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_ONE) {
          EntityType<?> relatedEntityType=(EntityType<?>)((SingularAttribute<?,?>)att).getType();
          EdmEntitySet relatedEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(relatedEntityType));
          Object relatedEntity=JPAMember.create(att,jpaEntity).get();
          if (relatedEntity == null) {
            links.add(OLinks.relatedEntityInline(null,prop,null,null));
          }
 else {
            links.add(OLinks.relatedEntityInline(null,prop,null,jpaEntityToOEntity(relatedEntitySet,relatedEntityType,relatedEntity,remainingPropPath,null)));
          }
        }
      }
    }
    for (    final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
      if (isSelected(ep.getName(),select)) {
        boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
          @Override public boolean apply(          OLink t){
            return t.getTitle().equals(ep.getName());
          }
        }
);
        if (!expanded) {
          if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
            links.add(OLinks.relatedEntities(null,ep.getName(),null));
          }
 else {
            links.add(OLinks.relatedEntity(null,ep.getName(),null));
          }
        }
      }
    }
    return OEntities.create(ees,toOEntityKey(jpaEntity,idAtt),properties,links);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private OEntity jpaEntityToOEntity(EdmEntitySet ees,EntityType<?> entityType,Object jpaEntity,List<EntitySimpleProperty> expand,List<EntitySimpleProperty> select){
  List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  List<OLink> links=new ArrayList<OLink>();
  try {
    SingularAttribute<?,?> idAtt=JPAEdmGenerator.getIdAttribute(entityType);
    boolean hasEmbeddedCompositeKey=idAtt.getPersistentAttributeType() == PersistentAttributeType.EMBEDDED;
    for (    EdmProperty ep : ees.getType().getProperties()) {
      if (!isSelected(ep.getName(),select)) {
        continue;
      }
      if (hasEmbeddedCompositeKey && ees.getType().getKeys().contains(ep.getName())) {
        Object value=getIdValue(jpaEntity,idAtt,ep.getName());
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
 else {
        Attribute<?,?> att=entityType.getAttribute(ep.getName());
        JPAMember member=JPAMember.create(att,jpaEntity);
        Object value=member.get();
        properties.add(OProperties.simple(ep.getName(),(EdmSimpleType<?>)ep.getType(),value));
      }
    }
    if (expand != null && !expand.isEmpty()) {
      HashMap<String,List<EntitySimpleProperty>> expandedProps=new HashMap<String,List<EntitySimpleProperty>>();
      for (      final EntitySimpleProperty propPath : expand) {
        String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
        String prop=props[0];
        String remainingPropPath=props.length > 1 ? props[1] : null;
        if (expandedProps.containsKey(prop)) {
          if (remainingPropPath != null) {
            List<EntitySimpleProperty> remainingPropPaths=expandedProps.get(prop);
            remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
          }
        }
 else {
          List<EntitySimpleProperty> remainingPropPaths=new ArrayList<EntitySimpleProperty>();
          if (remainingPropPath != null)           remainingPropPaths.add(org.odata4j.expression.Expression.simpleProperty(remainingPropPath));
          expandedProps.put(prop,remainingPropPaths);
        }
      }
      for (      final String prop : expandedProps.keySet()) {
        List<EntitySimpleProperty> remainingPropPath=expandedProps.get(prop);
        Attribute<?,?> att=entityType.getAttribute(prop);
        if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_MANY || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_MANY) {
          Collection<?> value=JPAMember.create(att,jpaEntity).get();
          List<OEntity> relatedEntities=new ArrayList<OEntity>();
          for (          Object relatedEntity : value) {
            EntityType<?> elementEntityType=(EntityType<?>)((PluralAttribute<?,?,?>)att).getElementType();
            EdmEntitySet elementEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(elementEntityType));
            relatedEntities.add(jpaEntityToOEntity(elementEntitySet,elementEntityType,relatedEntity,remainingPropPath,null));
          }
          links.add(OLinks.relatedEntitiesInline(null,prop,null,relatedEntities));
        }
 else         if (att.getPersistentAttributeType() == PersistentAttributeType.ONE_TO_ONE || att.getPersistentAttributeType() == PersistentAttributeType.MANY_TO_ONE) {
          EntityType<?> relatedEntityType=(EntityType<?>)((SingularAttribute<?,?>)att).getType();
          EdmEntitySet relatedEntitySet=metadata.getEdmEntitySet(JPAEdmGenerator.getEntitySetName(relatedEntityType));
          Object relatedEntity=JPAMember.create(att,jpaEntity).get();
          if (relatedEntity == null) {
            links.add(OLinks.relatedEntityInline(null,prop,null,null));
          }
 else {
            links.add(OLinks.relatedEntityInline(null,prop,null,jpaEntityToOEntity(relatedEntitySet,relatedEntityType,relatedEntity,remainingPropPath,null)));
          }
        }
      }
    }
    for (    final EdmNavigationProperty ep : ees.getType().getNavigationProperties()) {
      if (isSelected(ep.getName(),select)) {
        boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
          @Override public boolean apply(          OLink t){
            return t.getTitle().equals(ep.getName());
          }
        }
);
        if (!expanded) {
          if (ep.getToRole().getMultiplicity() == EdmMultiplicity.MANY) {
            links.add(OLinks.relatedEntities(null,ep.getName(),null));
          }
 else {
            links.add(OLinks.relatedEntity(null,ep.getName(),null));
          }
        }
      }
    }
    return OEntities.create(ees,toOEntityKey(jpaEntity,idAtt),properties,links);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.8890417239798257
59602,"public static BoolCommonExpression parse(String primaryKeyName,List<OrderByExpression> orderByList,String skipToken){
  if (skipToken == null)   return null;
  List<BoolCommonExpression> predicates=new ArrayList<BoolCommonExpression>();
  List<LiteralExpression> orderByValues=new ArrayList<LiteralExpression>();
  int start=0;
  int end=0;
  if (orderByList != null) {
    for (int i=0; i < orderByList.size(); i++) {
      OrderByExpression orderBy=orderByList.get(i);
      end=skipToken.indexOf(',',start);
      String orderByValueString=skipToken.substring(start,end);
      LiteralExpression orderByValue=(LiteralExpression)Expression.parse(orderByValueString);
      orderByValues.add(orderByValue);
      BoolCommonExpression ordExp=orderBy.getDirection() == Direction.ASCENDING ? Expression.gt(orderBy.getExpression(),orderByValue) : Expression.lt(orderBy.getExpression(),orderByValue);
      predicates.add(ordExp);
      start=end + 1;
    }
  }
  OEntityKey entityKey=OEntityKey.parse(skipToken.substring(start));
  if (entityKey.getKeyType() == KeyType.SINGLE) {
    LiteralExpression entityKeyValue=Expression.literal(entityKey.asSingleValue());
    BoolCommonExpression keyPredicate=Expression.gt(Expression.simpleProperty(primaryKeyName),entityKeyValue);
    predicates.add(keyPredicate);
  }
 else {
    List<OProperty<?>> keyProperties=new ArrayList<OProperty<?>>(entityKey.asComplexProperties());
    BoolCommonExpression keyPredicate=null;
    for (int i=0; i < keyProperties.size(); i++) {
      OProperty<?> keyProperty=keyProperties.get(i);
      BoolCommonExpression subPredicate=Expression.gt(Expression.simpleProperty(primaryKeyName + ""String_Node_Str"" + keyProperty.getName()),Expression.literal(keyProperty.getValue()));
      for (int j=0; j < i; j++) {
        OProperty<?> earlierKeyProperty=keyProperties.get(j);
        BoolCommonExpression eq=Expression.eq(Expression.simpleProperty(primaryKeyName + ""String_Node_Str"" + earlierKeyProperty.getName()),Expression.literal(earlierKeyProperty.getValue()));
        subPredicate=Expression.and(eq,subPredicate);
      }
      if (keyPredicate == null)       keyPredicate=subPredicate;
 else       keyPredicate=Expression.or(keyPredicate,subPredicate);
    }
    predicates.add(keyPredicate);
  }
  for (int i=1; i < predicates.size(); i++) {
    BoolCommonExpression predicate=predicates.get(i);
    for (int j=0; j < i; j++) {
      OrderByExpression orderBy=orderByList.get(j);
      BoolCommonExpression eq=Expression.eq(orderBy.getExpression(),orderByValues.get(j));
      predicate=Expression.and(eq,predicate);
    }
    predicates.set(i,predicate);
  }
  BoolCommonExpression rt=predicates.get(0);
  for (int i=1; i < predicates.size(); i++)   rt=Expression.or(rt,predicates.get(i));
  return rt;
}","public static BoolCommonExpression parse(String primaryKeyName,List<OrderByExpression> orderByList,String skipToken){
  if (skipToken == null)   return null;
  List<BoolCommonExpression> predicates=new ArrayList<BoolCommonExpression>();
  List<LiteralExpression> orderByValues=new ArrayList<LiteralExpression>();
  int start=0;
  int end=0;
  if (orderByList != null) {
    for (int i=0; i < orderByList.size(); i++) {
      OrderByExpression orderBy=orderByList.get(i);
      end=skipToken.indexOf(',',start);
      String orderByValueString=skipToken.substring(start,end);
      LiteralExpression orderByValue=(LiteralExpression)Expression.parse(orderByValueString);
      orderByValues.add(orderByValue);
      BoolCommonExpression ordExp=orderBy.getDirection() == Direction.ASCENDING ? Expression.gt(orderBy.getExpression(),orderByValue) : Expression.lt(orderBy.getExpression(),orderByValue);
      predicates.add(ordExp);
      start=end + 1;
    }
  }
  OEntityKey entityKey=OEntityKey.parse(skipToken.substring(start));
  if (entityKey.getKeyType() == KeyType.SINGLE) {
    LiteralExpression entityKeyValue=Expression.literal(entityKey.asSingleValue());
    BoolCommonExpression keyPredicate=Expression.gt(Expression.simpleProperty(primaryKeyName),entityKeyValue);
    predicates.add(keyPredicate);
  }
 else {
    List<OProperty<?>> keyProperties=new ArrayList<OProperty<?>>(entityKey.asComplexProperties());
    BoolCommonExpression keyPredicate=null;
    for (int i=0; i < keyProperties.size(); i++) {
      OProperty<?> keyProperty=keyProperties.get(i);
      BoolCommonExpression subPredicate=Expression.gt(Expression.simpleProperty(primaryKeyName + ""String_Node_Str"" + keyProperty.getName()),Expression.literal(keyProperty.getValue()));
      for (int j=0; j < i; j++) {
        OProperty<?> earlierKeyProperty=keyProperties.get(j);
        BoolCommonExpression eq=Expression.eq(Expression.simpleProperty(primaryKeyName + ""String_Node_Str"" + earlierKeyProperty.getName()),Expression.literal(earlierKeyProperty.getValue()));
        subPredicate=Expression.and(eq,subPredicate);
      }
      if (keyPredicate == null)       keyPredicate=subPredicate;
 else       keyPredicate=Expression.or(keyPredicate,subPredicate);
    }
    predicates.add(keyPredicate);
  }
  for (int i=1; i < predicates.size(); i++) {
    BoolCommonExpression predicate=predicates.get(i);
    for (int j=0; j < i; j++) {
      OrderByExpression orderBy=orderByList.get(j);
      BoolCommonExpression eq=Expression.eq(orderBy.getExpression(),orderByValues.get(j));
      predicate=Expression.and(eq,predicate);
    }
    predicates.set(i,Expression.boolParen(predicate));
  }
  BoolCommonExpression rt=predicates.get(0);
  for (int i=1; i < predicates.size(); i++)   rt=Expression.or(rt,predicates.get(i));
  return Expression.boolParen(rt);
}",0.98823948681397
59603,"protected OCollection<? extends OObject> parseCollection(JsonStreamReader jsr){
  ensureNext(jsr);
  ensureStartArray(jsr.nextEvent());
  OCollection.Builder<OObject> c=newCollectionBuilder();
  FormatParser<? extends OObject> parser=createItemParser(this.returnType.getCollectionType());
  while (jsr.hasNext()) {
    if (parser instanceof JsonComplexObjectFormatParser) {
      OComplexObject obj=((JsonComplexObjectFormatParser)parser).parseSingleObject(jsr);
      if (null != obj) {
        c=c.add(obj);
      }
 else {
        break;
      }
    }
 else {
      throw new NotImplementedException(""String_Node_Str"" + this.returnType.getCollectionType().getFullyQualifiedTypeName() + ""String_Node_Str"");
    }
  }
  ensureEndArray(jsr.previousEvent());
  return c.build();
}","protected OCollection<? extends OObject> parseCollection(JsonStreamReader jsr){
  ensureNext(jsr);
  ensureStartArray(jsr.nextEvent());
  OCollection.Builder<OObject> c=newCollectionBuilder();
  if (this.returnType.getCollectionType().isSimple()) {
    parseCollectionOfSimple(c,jsr);
  }
 else {
    FormatParser<? extends OObject> parser=createItemParser(this.returnType.getCollectionType());
    while (jsr.hasNext()) {
      if (parser instanceof JsonComplexObjectFormatParser) {
        OComplexObject obj=((JsonComplexObjectFormatParser)parser).parseSingleObject(jsr);
        if (null != obj) {
          c=c.add(obj);
        }
 else {
          break;
        }
      }
 else {
        throw new NotImplementedException(""String_Node_Str"" + this.returnType.getCollectionType().getFullyQualifiedTypeName() + ""String_Node_Str"");
      }
    }
  }
  ensureEndArray(jsr.previousEvent());
  return c.build();
}",0.9208037825059102
59604,"protected FormatParser<? extends OObject> createItemParser(EdmType edmType){
  Settings s=new Settings(this.version,this.metadata,this.entitySetName,this.entityKey,null,false,edmType);
  return FormatParserFactory.getParser(OFunctionParameters.getResultClass(edmType),FormatType.JSON,s);
}","protected FormatParser<? extends OObject> createItemParser(EdmType edmType){
  if (edmType instanceof EdmNonSimpleType) {
    edmType=metadata.findEdmComplexType(edmType.getFullyQualifiedTypeName());
  }
  Settings s=new Settings(this.version,this.metadata,this.entitySetName,this.entityKey,null,false,edmType);
  return FormatParserFactory.getParser(OFunctionParameters.getResultClass(edmType),FormatType.JSON,s);
}",0.8198581560283688
59605,"protected OCollection.Builder<OObject> newCollectionBuilder(){
  if (this.returnType.getCollectionType() instanceof EdmComplexType) {
    return OCollections.<OObject>newBuilder(this.returnType.getCollectionType());
  }
  throw new NotImplementedException(""String_Node_Str"" + this.returnType.getCollectionType().getFullyQualifiedTypeName());
}","protected OCollection.Builder<OObject> newCollectionBuilder(){
  return OCollections.<OObject>newBuilder(this.returnType.getCollectionType());
}",0.5913757700205339
59606,"public JsonCollectionFormatParser(Settings s){
  super(s);
  returnType=(EdmCollectionType)(null == s ? null : s.parseType);
}","public JsonCollectionFormatParser(EdmCollectionType collectionType,EdmDataServices md){
  super(null);
  this.metadata=md;
  returnType=collectionType;
}",0.5089605734767025
59607,"public JsonComplexObjectFormatParser(Settings s){
  super(s);
  returnType=(EdmComplexType)(null == s ? null : s.parseType);
}","public JsonComplexObjectFormatParser(EdmComplexType type){
  super(null);
  returnType=type;
}",0.6545454545454545
59608,"public OComplexObject parseSingleObject(JsonStreamReader jsr){
  ensureNext(jsr);
  JsonEvent event=jsr.nextEvent();
  if (event.isStartObject()) {
    List<OProperty<?>> props=new ArrayList<OProperty<?>>();
    while (jsr.hasNext()) {
      event=jsr.nextEvent();
      if (event.isStartProperty()) {
        addProperty(props,event.asStartProperty().getName(),jsr);
      }
 else       if (event.isEndObject()) {
        break;
      }
 else {
        throw new JsonParseException(""String_Node_Str"" + event.toString());
      }
    }
    return OComplexObjects.create(returnType,props);
  }
 else {
    return null;
  }
}","public OComplexObject parseSingleObject(JsonStreamReader jsr,JsonEvent startPropertyEvent){
  List<OProperty<?>> props=new ArrayList<OProperty<?>>();
  addProperty(props,startPropertyEvent.asStartProperty().getName(),jsr);
  return eatProps(props,jsr);
}",0.282782212086659
59609,"public void setDeclaredNavigationProperties(Collection<EdmNavigationProperty> navProperties){
  this.navigationProperties.clear();
  this.navigationProperties.addAll(navProperties);
}","public void setDeclaredNavigationProperties(Enumerable<EdmNavigationProperty> navProperties){
  this.navigationProperties.clear();
  this.navigationProperties.addAll(navProperties.toList());
}",0.9333333333333332
59610,"private static void resolve(EdmDataServices metadata){
  final Map<String,EdmEntityType> allEetsByFQName=Enumerable.create(metadata.getEntityTypes()).toMap(new Func1<EdmEntityType,String>(){
    public String apply(    EdmEntityType input){
      return input.getFQAliasName() != null ? input.getFQAliasName() : input.getFullyQualifiedTypeName();
    }
  }
);
  final Map<String,EdmAssociation> allEasByFQName=Enumerable.create(metadata.getAssociations()).toMap(new Func1<EdmAssociation,String>(){
    public String apply(    EdmAssociation input){
      return input.getFQAliasName() != null ? input.getFQAliasName() : input.getFQNamespaceName();
    }
  }
);
  for (  EdmSchema edmSchema : metadata.getSchemas()) {
    for (int i=0; i < edmSchema.associations.size(); i++) {
      EdmAssociation tmpAssociation=edmSchema.associations.get(i);
      List<EdmAssociationEnd> finalEnds=Enumerable.create(tmpAssociation.end1,tmpAssociation.end2).select(new Func1<EdmAssociationEnd,EdmAssociationEnd>(){
        public EdmAssociationEnd apply(        final EdmAssociationEnd tempEnd){
          EdmEntityType eet=allEetsByFQName.get(((TempEdmAssociationEnd)tempEnd).typeName);
          return new EdmAssociationEnd(tempEnd.role,eet,tempEnd.multiplicity);
        }
      }
).toList();
      EdmAssociation ea=new EdmAssociation(tmpAssociation.namespace,tmpAssociation.alias,tmpAssociation.name,finalEnds.get(0),finalEnds.get(1));
      edmSchema.associations.set(i,ea);
      allEasByFQName.put(ea.getFQAliasName() != null ? ea.getFQAliasName() : ea.getFQNamespaceName(),ea);
    }
    for (    EdmEntityType eet : edmSchema.entityTypes) {
      List<EdmNavigationProperty> navProps=eet.getDeclaredNavigationProperties().toList();
      for (int i=0; i < navProps.size(); i++) {
        final TempEdmNavigationProperty tmp=(TempEdmNavigationProperty)navProps.get(i);
        final EdmAssociation ea=allEasByFQName.get(tmp.relationshipName);
        List<EdmAssociationEnd> finalEnds=Enumerable.create(tmp.fromRoleName,tmp.toRoleName).select(new Func1<String,EdmAssociationEnd>(){
          public EdmAssociationEnd apply(          String input){
            if (ea.end1.role.equals(input))             return ea.end1;
            if (ea.end2.role.equals(input))             return ea.end2;
            throw new IllegalArgumentException(""String_Node_Str"" + input);
          }
        }
).toList();
        EdmNavigationProperty enp=new EdmNavigationProperty(tmp.name,ea,finalEnds.get(0),finalEnds.get(1));
        navProps.set(i,enp);
      }
      eet.setDeclaredNavigationProperties(navProps);
    }
    for (    EdmEntityContainer edmEntityContainer : edmSchema.entityContainers) {
      for (int i=0; i < edmEntityContainer.entitySets.size(); i++) {
        final TempEdmEntitySet tmpEes=(TempEdmEntitySet)edmEntityContainer.entitySets.get(i);
        EdmEntityType eet=allEetsByFQName.get(tmpEes.entityTypeName);
        if (eet == null)         throw new IllegalArgumentException(""String_Node_Str"" + tmpEes.entityTypeName);
        edmEntityContainer.entitySets.set(i,new EdmEntitySet(tmpEes.name,eet));
      }
    }
    for (    final EdmEntityContainer edmEntityContainer : edmSchema.entityContainers) {
      for (int i=0; i < edmEntityContainer.associationSets.size(); i++) {
        final TempEdmAssociationSet tmpEas=(TempEdmAssociationSet)edmEntityContainer.associationSets.get(i);
        final EdmAssociation ea=allEasByFQName.get(tmpEas.associationName);
        List<EdmAssociationSetEnd> finalEnds=Enumerable.create(tmpEas.end1,tmpEas.end2).select(new Func1<EdmAssociationSetEnd,EdmAssociationSetEnd>(){
          public EdmAssociationSetEnd apply(          EdmAssociationSetEnd input){
            final TempEdmAssociationSetEnd tmpEase=(TempEdmAssociationSetEnd)input;
            EdmAssociationEnd eae=ea.end1.role.equals(tmpEase.roleName) ? ea.end1 : ea.end2.role.equals(tmpEase.roleName) ? ea.end2 : null;
            if (eae == null)             throw new IllegalArgumentException(""String_Node_Str"" + tmpEase.roleName);
            EdmEntitySet ees=Enumerable.create(edmEntityContainer.entitySets).first(new Predicate1<EdmEntitySet>(){
              public boolean apply(              EdmEntitySet input){
                return input.name.equals(tmpEase.entitySetName);
              }
            }
);
            return new EdmAssociationSetEnd(eae,ees);
          }
        }
).toList();
        edmEntityContainer.associationSets.set(i,new EdmAssociationSet(tmpEas.name,ea,finalEnds.get(0),finalEnds.get(1)));
      }
    }
    for (    final EdmEntityContainer edmEntityContainer : edmSchema.entityContainers) {
      for (int i=0; i < edmEntityContainer.functionImports.size(); i++) {
        final TempEdmFunctionImport tmpEfi=(TempEdmFunctionImport)edmEntityContainer.functionImports.get(i);
        EdmEntitySet ees=Enumerable.create(edmEntityContainer.entitySets).firstOrNull(new Predicate1<EdmEntitySet>(){
          public boolean apply(          EdmEntitySet input){
            return input.name.equals(tmpEfi.entitySetName);
          }
        }
);
        EdmType type=null;
        type=EdmType.get(tmpEfi.returnTypeName);
        if (!type.isSimple()) {
          type=metadata.findEdmEntityType(tmpEfi.returnTypeName);
          if (type == null)           type=metadata.findEdmComplexType(tmpEfi.returnTypeName);
        }
        if (type == null)         throw new RuntimeException(""String_Node_Str"" + tmpEfi.returnTypeName);
        if (tmpEfi.isCollection) {
          type=new EdmCollectionType(tmpEfi.returnTypeName,type);
        }
        edmEntityContainer.functionImports.set(i,new EdmFunctionImport(tmpEfi.name,ees,type,tmpEfi.httpMethod,tmpEfi.parameters));
      }
    }
    for (    Entry<String,EdmEntityType> entry : allEetsByFQName.entrySet()) {
      String baseTypeName=entry.getValue().getFQBaseTypeName();
      if (null != baseTypeName) {
        EdmEntityType baseType=allEetsByFQName.get(baseTypeName);
        if (null == baseType) {
          throw new IllegalArgumentException(""String_Node_Str"" + baseTypeName);
        }
        entry.getValue().setBaseType(baseType);
      }
    }
  }
}","private static void resolve(EdmDataServices metadata){
  final Map<String,EdmEntityType> allEetsByFQName=Enumerable.create(metadata.getEntityTypes()).toMap(new Func1<EdmEntityType,String>(){
    public String apply(    EdmEntityType input){
      return input.getFQAliasName() != null ? input.getFQAliasName() : input.getFullyQualifiedTypeName();
    }
  }
);
  final Map<String,EdmAssociation> allEasByFQName=Enumerable.create(metadata.getAssociations()).toMap(new Func1<EdmAssociation,String>(){
    public String apply(    EdmAssociation input){
      return input.getFQAliasName() != null ? input.getFQAliasName() : input.getFQNamespaceName();
    }
  }
);
  for (  EdmSchema edmSchema : metadata.getSchemas()) {
    for (int i=0; i < edmSchema.associations.size(); i++) {
      EdmAssociation tmpAssociation=edmSchema.associations.get(i);
      List<EdmAssociationEnd> finalEnds=Enumerable.create(tmpAssociation.end1,tmpAssociation.end2).select(new Func1<EdmAssociationEnd,EdmAssociationEnd>(){
        public EdmAssociationEnd apply(        final EdmAssociationEnd tempEnd){
          EdmEntityType eet=allEetsByFQName.get(((TempEdmAssociationEnd)tempEnd).typeName);
          return new EdmAssociationEnd(tempEnd.role,eet,tempEnd.multiplicity);
        }
      }
).toList();
      EdmAssociation ea=new EdmAssociation(tmpAssociation.namespace,tmpAssociation.alias,tmpAssociation.name,finalEnds.get(0),finalEnds.get(1));
      edmSchema.associations.set(i,ea);
      allEasByFQName.put(ea.getFQAliasName() != null ? ea.getFQAliasName() : ea.getFQNamespaceName(),ea);
    }
    for (    EdmEntityType eet : edmSchema.entityTypes) {
      List<EdmNavigationProperty> navProps=eet.getDeclaredNavigationProperties().toList();
      for (int i=0; i < navProps.size(); i++) {
        final TempEdmNavigationProperty tmp=(TempEdmNavigationProperty)navProps.get(i);
        final EdmAssociation ea=allEasByFQName.get(tmp.relationshipName);
        List<EdmAssociationEnd> finalEnds=Enumerable.create(tmp.fromRoleName,tmp.toRoleName).select(new Func1<String,EdmAssociationEnd>(){
          public EdmAssociationEnd apply(          String input){
            if (ea.end1.role.equals(input))             return ea.end1;
            if (ea.end2.role.equals(input))             return ea.end2;
            throw new IllegalArgumentException(""String_Node_Str"" + input);
          }
        }
).toList();
        EdmNavigationProperty enp=new EdmNavigationProperty(tmp.name,ea,finalEnds.get(0),finalEnds.get(1));
        navProps.set(i,enp);
      }
      eet.setDeclaredNavigationProperties(Enumerable.create(navProps));
    }
    for (    EdmEntityContainer edmEntityContainer : edmSchema.entityContainers) {
      for (int i=0; i < edmEntityContainer.entitySets.size(); i++) {
        final TempEdmEntitySet tmpEes=(TempEdmEntitySet)edmEntityContainer.entitySets.get(i);
        EdmEntityType eet=allEetsByFQName.get(tmpEes.entityTypeName);
        if (eet == null)         throw new IllegalArgumentException(""String_Node_Str"" + tmpEes.entityTypeName);
        edmEntityContainer.entitySets.set(i,new EdmEntitySet(tmpEes.name,eet));
      }
    }
    for (    final EdmEntityContainer edmEntityContainer : edmSchema.entityContainers) {
      for (int i=0; i < edmEntityContainer.associationSets.size(); i++) {
        final TempEdmAssociationSet tmpEas=(TempEdmAssociationSet)edmEntityContainer.associationSets.get(i);
        final EdmAssociation ea=allEasByFQName.get(tmpEas.associationName);
        List<EdmAssociationSetEnd> finalEnds=Enumerable.create(tmpEas.end1,tmpEas.end2).select(new Func1<EdmAssociationSetEnd,EdmAssociationSetEnd>(){
          public EdmAssociationSetEnd apply(          EdmAssociationSetEnd input){
            final TempEdmAssociationSetEnd tmpEase=(TempEdmAssociationSetEnd)input;
            EdmAssociationEnd eae=ea.end1.role.equals(tmpEase.roleName) ? ea.end1 : ea.end2.role.equals(tmpEase.roleName) ? ea.end2 : null;
            if (eae == null)             throw new IllegalArgumentException(""String_Node_Str"" + tmpEase.roleName);
            EdmEntitySet ees=Enumerable.create(edmEntityContainer.entitySets).first(new Predicate1<EdmEntitySet>(){
              public boolean apply(              EdmEntitySet input){
                return input.name.equals(tmpEase.entitySetName);
              }
            }
);
            return new EdmAssociationSetEnd(eae,ees);
          }
        }
).toList();
        edmEntityContainer.associationSets.set(i,new EdmAssociationSet(tmpEas.name,ea,finalEnds.get(0),finalEnds.get(1)));
      }
    }
    for (    final EdmEntityContainer edmEntityContainer : edmSchema.entityContainers) {
      for (int i=0; i < edmEntityContainer.functionImports.size(); i++) {
        final TempEdmFunctionImport tmpEfi=(TempEdmFunctionImport)edmEntityContainer.functionImports.get(i);
        EdmEntitySet ees=Enumerable.create(edmEntityContainer.entitySets).firstOrNull(new Predicate1<EdmEntitySet>(){
          public boolean apply(          EdmEntitySet input){
            return input.name.equals(tmpEfi.entitySetName);
          }
        }
);
        EdmType type=null;
        type=EdmType.get(tmpEfi.returnTypeName);
        if (!type.isSimple()) {
          type=metadata.findEdmEntityType(tmpEfi.returnTypeName);
          if (type == null)           type=metadata.findEdmComplexType(tmpEfi.returnTypeName);
        }
        if (type == null)         throw new RuntimeException(""String_Node_Str"" + tmpEfi.returnTypeName);
        if (tmpEfi.isCollection) {
          type=new EdmCollectionType(tmpEfi.returnTypeName,type);
        }
        edmEntityContainer.functionImports.set(i,new EdmFunctionImport(tmpEfi.name,ees,type,tmpEfi.httpMethod,tmpEfi.parameters));
      }
    }
    for (    Entry<String,EdmEntityType> entry : allEetsByFQName.entrySet()) {
      String baseTypeName=entry.getValue().getFQBaseTypeName();
      if (null != baseTypeName) {
        EdmEntityType baseType=allEetsByFQName.get(baseTypeName);
        if (null == baseType) {
          throw new IllegalArgumentException(""String_Node_Str"" + baseTypeName);
        }
        entry.getValue().setBaseType(baseType);
      }
    }
  }
}",0.9984604164978528
59611,"private static Map<String,Class<?>> computeTypes(Map<String,Method> getters,Map<String,Method> setters){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  String propertyName : getters.keySet()) {
    Class<?> getterType=getters.get(propertyName).getReturnType();
    if (!isCollection(getterType))     rt.put(propertyName,getterType);
  }
  for (  String propertyName : setters.keySet()) {
    Class<?> getterType=rt.get(propertyName);
    if (getterType != null) {
      Class<?> setterType=setters.get(propertyName).getParameterTypes()[0];
      if (getterType != null && !getterType.equals(setterType))       throw new RuntimeException(String.format(""String_Node_Str"",propertyName,getterType.getName(),setterType.getName()));
      rt.put(propertyName,setterType);
    }
  }
  return rt;
}","private static Map<String,Class<?>> computeTypes(Map<String,Method> getters,Map<String,Method> setters){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  String propertyName : getters.keySet()) {
    Class<?> getterType=getters.get(propertyName).getReturnType();
    if (!isIterable(getterType))     rt.put(propertyName,getterType);
  }
  for (  String propertyName : setters.keySet()) {
    Class<?> getterType=rt.get(propertyName);
    if (getterType != null) {
      Class<?> setterType=setters.get(propertyName).getParameterTypes()[0];
      if (getterType != null && !getterType.equals(setterType))       throw new RuntimeException(String.format(""String_Node_Str"",setters.get(propertyName).getDeclaringClass().getName(),propertyName,getterType.getName(),setterType.getName()));
      rt.put(propertyName,setterType);
    }
  }
  return rt;
}",0.955794504181601
59612,"private Map<String,Class<?>> computeCollections(Map<String,Method> getters2,Map<String,Method> setters2){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  String propertyName : getters.keySet()) {
    Class<?> getterType=getters.get(propertyName).getReturnType();
    if (isCollection(getterType)) {
      Class<?> setterType=setters.containsKey(propertyName) ? setters.get(propertyName).getParameterTypes()[0] : null;
      if (setterType != null) {
        if (!getterType.equals(setterType))         throw new RuntimeException(String.format(""String_Node_Str"",propertyName,getterType.getName(),setterType.getName()));
        Class<?> elementClass;
        Type type=getters.get(propertyName).getGenericReturnType();
        if (type instanceof ParameterizedType) {
          Type[] actualTypes=((ParameterizedType)type).getActualTypeArguments();
          elementClass=actualTypes.length > 0 ? (Class<?>)actualTypes[0] : Object.class;
        }
 else         elementClass=Object.class;
        rt.put(propertyName,elementClass);
      }
    }
  }
  return rt;
}","private Map<String,Class<?>> computeCollections(Map<String,Method> getters2,Map<String,Method> setters2){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  String propertyName : getters.keySet()) {
    Class<?> getterType=getters.get(propertyName).getReturnType();
    if (isIterable(getterType)) {
      Class<?> setterType=setters.containsKey(propertyName) ? setters.get(propertyName).getParameterTypes()[0] : null;
      if (setterType != null) {
        if (!getterType.equals(setterType))         throw new RuntimeException(String.format(""String_Node_Str"",setters.get(propertyName).getDeclaringClass().getName(),propertyName,getterType.getName(),setterType.getName()));
        Class<?> elementClass;
        Type type=getters.get(propertyName).getGenericReturnType();
        if (type instanceof ParameterizedType) {
          Type[] actualTypes=((ParameterizedType)type).getActualTypeArguments();
          elementClass=actualTypes.length > 0 ? (Class<?>)actualTypes[0] : Object.class;
        }
 else         elementClass=Object.class;
        rt.put(propertyName,elementClass);
      }
    }
  }
  return rt;
}",0.9666366095581606
59613,"protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  EntityInfo<?,?> ei=eis.get(ees.name);
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Object keyValue=ei.id.apply(obj);
  properties.add(OProperties.simple(ID_PROPNAME,getEdmType(ei.keyClass),keyValue));
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.type;
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      List<EntitySimpleProperty> remainingPropPath=props.length > 1 ? Arrays.asList(org.odata4j.expression.Expression.simpleProperty(props[1])) : null;
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.toRole.multiplicity == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
                @Override public boolean apply(                EntityInfo<?,?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.name,null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
            @Override public boolean apply(            EntityInfo<?,?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.name,null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.type.getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.name);
      }
    }
);
    if (!expanded) {
      if (ep.toRole.multiplicity == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.name,null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.name,null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyValue),properties,links);
}","protected OEntity toOEntity(EdmEntitySet ees,Object obj,List<EntitySimpleProperty> expand){
  EntityInfo<?,?> ei=eis.get(ees.name);
  final List<OLink> links=new ArrayList<OLink>();
  final List<OProperty<?>> properties=new ArrayList<OProperty<?>>();
  Object keyValue=ei.properties.getPropertyValue(obj,ID_PROPNAME);
  for (  String propName : ei.properties.getPropertyNames()) {
    EdmSimpleType type;
    Object value=ei.properties.getPropertyValue(obj,propName);
    Class<?> propType=ei.properties.getPropertyType(propName);
    type=findEdmType(propType);
    if (type == null)     continue;
    properties.add(OProperties.simple(propName,type,value));
  }
  if (expand != null && !expand.isEmpty()) {
    EdmEntityType edmEntityType=ees.type;
    for (    final EntitySimpleProperty propPath : expand) {
      String[] props=propPath.getPropertyName().split(""String_Node_Str"",2);
      String prop=props[0];
      List<EntitySimpleProperty> remainingPropPath=props.length > 1 ? Arrays.asList(org.odata4j.expression.Expression.simpleProperty(props[1])) : null;
      EdmNavigationProperty edmNavProperty=edmEntityType.findNavigationProperty(prop);
      if (edmNavProperty == null)       continue;
      if (edmNavProperty.toRole.multiplicity == EdmMultiplicity.MANY) {
        List<OEntity> relatedEntities=new ArrayList<OEntity>();
        Iterable<?> values=ei.properties.getCollectionValue(obj,prop);
        if (values != null) {
          EdmEntitySet relEntitySet=null;
          for (          final Object entity : values) {
            if (relEntitySet == null) {
              EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
                @Override public boolean apply(                EntityInfo<?,?> input){
                  return entity.getClass().equals(input.entityClass);
                }
              }
);
              relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
            }
            relatedEntities.add(toOEntity(relEntitySet,entity,remainingPropPath));
          }
        }
        links.add(OLinks.relatedEntitiesInline(null,edmNavProperty.name,null,relatedEntities));
      }
 else {
        final Object entity=ei.properties.getPropertyValue(obj,prop);
        OEntity relatedEntity=null;
        if (entity != null) {
          EntityInfo<?,?> oei=Enumerable.create(eis.values()).firstOrNull(new Predicate1<InMemoryProducer.EntityInfo<?,?>>(){
            @Override public boolean apply(            EntityInfo<?,?> input){
              return entity.getClass().equals(input.entityClass);
            }
          }
);
          EdmEntitySet relEntitySet=getMetadata().getEdmEntitySet(oei.entitySetName);
          relatedEntity=toOEntity(relEntitySet,entity,remainingPropPath);
        }
        links.add(OLinks.relatedEntityInline(null,edmNavProperty.name,null,relatedEntity));
      }
    }
  }
  for (  final EdmNavigationProperty ep : ees.type.getNavigationProperties()) {
    boolean expanded=null != Enumerable.create(links).firstOrNull(new Predicate1<OLink>(){
      @Override public boolean apply(      OLink t){
        return t.getTitle().equals(ep.name);
      }
    }
);
    if (!expanded) {
      if (ep.toRole.multiplicity == EdmMultiplicity.MANY) {
        links.add(OLinks.relatedEntities(null,ep.name,null));
      }
 else {
        links.add(OLinks.relatedEntity(null,ep.name,null));
      }
    }
  }
  return OEntities.create(ees,OEntityKey.create(keyValue),properties,links);
}",0.9846759454519892
59614,"private void generateToManyNavProperties(List<EdmAssociation> associations,List<EdmAssociationSet> associationSets,Map<String,EdmEntityType> entityTypesByName,Map<String,EdmEntitySet> entitySetByName,Map<Class<?>,String> entityNameByClass,String entitySetName,EntityInfo<?,?> ei,Class<?> clazz1){
  for (  String assocProp : ei.properties.getCollectionNames()) {
    final EdmEntityType eet1=entityTypesByName.get(entitySetName);
    Class<?> clazz2=ei.properties.getCollectionElementType(assocProp);
    String eetName2=entityNameByClass.get(clazz2);
    final EdmEntityType eet2=entityTypesByName.get(eetName2);
    try {
      EdmAssociation assoc=Enumerable.create(associations).firstOrNull(new Predicate1<EdmAssociation>(){
        public boolean apply(        EdmAssociation input){
          return input.end1.type.equals(eet2) && input.end2.type.equals(eet1);
        }
      }
);
      EdmAssociationEnd fromRole, toRole;
      if (assoc == null) {
        EdmMultiplicity m1=EdmMultiplicity.ZERO_TO_ONE;
        EdmMultiplicity m2=EdmMultiplicity.MANY;
        EntityInfo<?,?> class2eiInfo=eis.get(eetName2);
        for (        String tmp : class2eiInfo.properties.getCollectionNames()) {
          if (clazz1 == class2eiInfo.properties.getCollectionElementType(tmp)) {
            m1=EdmMultiplicity.MANY;
            m2=EdmMultiplicity.MANY;
            break;
          }
        }
        String assocName=String.format(""String_Node_Str"",eet1.name,eet2.name);
        EdmAssociationEnd assocEnd1=new EdmAssociationEnd(eet1.name,eet1,m1);
        String assocEnd2Name=eet2.name;
        if (assocEnd2Name.equals(eet1.name))         assocEnd2Name=assocEnd2Name + ""String_Node_Str"";
        EdmAssociationEnd assocEnd2=new EdmAssociationEnd(assocEnd2Name,eet2,m2);
        assoc=new EdmAssociation(namespace,null,assocName,assocEnd1,assocEnd2);
        associations.add(assoc);
        EdmEntitySet ees1=entitySetByName.get(eet1.name);
        EdmEntitySet ees2=entitySetByName.get(eet2.name);
        EdmAssociationSet eas=new EdmAssociationSet(assocName,assoc,new EdmAssociationSetEnd(assocEnd1,ees1),new EdmAssociationSetEnd(assocEnd2,ees2));
        associationSets.add(eas);
        fromRole=assoc.end1;
        toRole=assoc.end2;
      }
 else {
        fromRole=assoc.end2;
        toRole=assoc.end1;
      }
      EdmNavigationProperty np=new EdmNavigationProperty(assocProp,assoc,fromRole,toRole);
      eet1.addNavigationProperty(np);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","private void generateToManyNavProperties(List<EdmAssociation> associations,List<EdmAssociationSet> associationSets,Map<String,EdmEntityType> entityTypesByName,Map<String,EdmEntitySet> entitySetByName,Map<Class<?>,String> entityNameByClass,String entitySetName,EntityInfo<?,?> ei,Class<?> clazz1){
  for (  String assocProp : ei.properties.getCollectionNames()) {
    final EdmEntityType eet1=entityTypesByName.get(entitySetName);
    Class<?> clazz2=ei.properties.getCollectionElementType(assocProp);
    String eetName2=entityNameByClass.get(clazz2);
    if (eetName2 == null)     continue;
    final EdmEntityType eet2=entityTypesByName.get(eetName2);
    try {
      EdmAssociation assoc=Enumerable.create(associations).firstOrNull(new Predicate1<EdmAssociation>(){
        public boolean apply(        EdmAssociation input){
          return input.end1.type.equals(eet2) && input.end2.type.equals(eet1);
        }
      }
);
      EdmAssociationEnd fromRole, toRole;
      if (assoc == null) {
        EdmMultiplicity m1=EdmMultiplicity.ZERO_TO_ONE;
        EdmMultiplicity m2=EdmMultiplicity.MANY;
        EntityInfo<?,?> class2eiInfo=eis.get(eetName2);
        for (        String tmp : class2eiInfo.properties.getCollectionNames()) {
          if (clazz1 == class2eiInfo.properties.getCollectionElementType(tmp)) {
            m1=EdmMultiplicity.MANY;
            m2=EdmMultiplicity.MANY;
            break;
          }
        }
        String assocName=String.format(""String_Node_Str"",eet1.name,eet2.name);
        EdmAssociationEnd assocEnd1=new EdmAssociationEnd(eet1.name,eet1,m1);
        String assocEnd2Name=eet2.name;
        if (assocEnd2Name.equals(eet1.name))         assocEnd2Name=assocEnd2Name + ""String_Node_Str"";
        EdmAssociationEnd assocEnd2=new EdmAssociationEnd(assocEnd2Name,eet2,m2);
        assoc=new EdmAssociation(namespace,null,assocName,assocEnd1,assocEnd2);
        associations.add(assoc);
        EdmEntitySet ees1=entitySetByName.get(eet1.name);
        EdmEntitySet ees2=entitySetByName.get(eet2.name);
        EdmAssociationSet eas=new EdmAssociationSet(assocName,assoc,new EdmAssociationSetEnd(assocEnd1,ees1),new EdmAssociationSetEnd(assocEnd2,ees2));
        associationSets.add(eas);
        fromRole=assoc.end1;
        toRole=assoc.end2;
      }
 else {
        fromRole=assoc.end2;
        toRole=assoc.end1;
      }
      EdmNavigationProperty np=new EdmNavigationProperty(assocProp,assoc,fromRole,toRole);
      eet1.addNavigationProperty(np);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + e.getMessage(),e);
    }
  }
}",0.992275009656238
59615,"private void createStructuralEntities(List<EdmEntitySet> entitySets,List<EdmEntityType> entityTypes){
  for (  String entitySetName : eis.keySet()) {
    EntityInfo<?,?> entityInfo=eis.get(entitySetName);
    List<EdmProperty> properties=new ArrayList<EdmProperty>();
    properties.add(new EdmProperty(ID_PROPNAME,getEdmType(entityInfo.keyClass),false,null,null,null,null,null,null,null,null,null,CollectionKind.None,null == this.decorator ? null : this.decorator.getDocumentationForProperty(namespace,entitySetName,ID_PROPNAME),null == this.decorator ? null : this.decorator.getAnnotationsForProperty(namespace,entitySetName,ID_PROPNAME)));
    properties.addAll(toEdmProperties(entityInfo.properties,entitySetName));
    EdmEntityType eet=new EdmEntityType(namespace,null,entitySetName,null,Enumerable.create(ID_PROPNAME).toList(),null,properties,null,null == this.decorator ? null : this.decorator.getDocumentationForEntityType(namespace,entitySetName),null == this.decorator ? null : this.decorator.getAnnotationsForEntityType(namespace,entitySetName));
    EdmEntitySet ees=new EdmEntitySet(entitySetName,eet);
    entitySets.add(ees);
    entityTypes.add(eet);
  }
}","private void createStructuralEntities(List<EdmEntitySet> entitySets,List<EdmEntityType> entityTypes){
  for (  String entitySetName : eis.keySet()) {
    EntityInfo<?,?> entityInfo=eis.get(entitySetName);
    List<EdmProperty> properties=new ArrayList<EdmProperty>();
    properties.addAll(toEdmProperties(entityInfo.properties,entitySetName));
    EdmEntityType eet=new EdmEntityType(namespace,null,entitySetName,null,Enumerable.create(ID_PROPNAME).toList(),null,properties,null,null == this.decorator ? null : this.decorator.getDocumentationForEntityType(namespace,entitySetName),null == this.decorator ? null : this.decorator.getAnnotationsForEntityType(namespace,entitySetName));
    EdmEntitySet ees=new EdmEntitySet(entitySetName,eet);
    entitySets.add(ees);
    entityTypes.add(eet);
  }
}",0.5256215119228818
59616,"@Override public ODataClientRequest transform(ODataClientRequest request){
  try {
    String utc=new DateTime(DateTimeZone.UTC).toString(""String_Node_Str"");
    String date=utc.substring(0,utc.lastIndexOf(' ') + 1) + ""String_Node_Str"";
    String path=request.getUrl().substring(request.getUrl().indexOf('/',8) + 1);
    boolean isTableRequest=path.startsWith(""String_Node_Str"");
    String contentType=request.getHeaders().get(ODataConstants.Headers.CONTENT_TYPE);
    contentType=contentType == null ? ""String_Node_Str"" : contentType;
    boolean isPut=request.getMethod().equals(""String_Node_Str"");
    boolean isPost=request.getMethod().equals(""String_Node_Str"");
    boolean isDelete=request.getMethod().equals(""String_Node_Str"");
    if (isPut || isPost || isDelete) {
      contentType=MediaType.APPLICATION_ATOM_XML;
      request=request.header(ODataConstants.Headers.CONTENT_TYPE,MediaType.APPLICATION_ATOM_XML);
    }
    String canonicalizedResource=""String_Node_Str"" + account + ""String_Node_Str""+ path;
    String stringToSign=request.getMethod() + ""String_Node_Str"" + contentType+ ""String_Node_Str""+ date+ ""String_Node_Str""+ canonicalizedResource;
    if (ODataConsumer.dump.requestHeaders())     System.out.println(""String_Node_Str"" + stringToSign);
    Mac mac=Mac.getInstance(""String_Node_Str"");
    mac.init(new SecretKeySpec(base64Decode(key),mac.getAlgorithm()));
    mac.update(stringToSign.getBytes(""String_Node_Str""));
    byte[] sigBytes=mac.doFinal();
    String sig=base64Encode(sigBytes);
    String auth=""String_Node_Str"" + account + ""String_Node_Str""+ sig;
    if (ODataConsumer.dump.requestHeaders())     System.out.println(""String_Node_Str"" + auth);
    request=request.header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",date).header(""String_Node_Str"",auth).header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"");
    if (isPut || (isDelete && !isTableRequest) || (isPost && request.getHeaders().containsKey(ODataConstants.Headers.X_HTTP_METHOD)))     request=request.header(""String_Node_Str"",""String_Node_Str"");
    if (isDelete) {
      request=request.header(""String_Node_Str"",""String_Node_Str"");
    }
    return request;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public ODataClientRequest transform(ODataClientRequest request){
  try {
    String utc=new DateTime(DateTimeZone.UTC).toString(""String_Node_Str"");
    String date=utc.substring(0,utc.lastIndexOf(' ') + 1) + ""String_Node_Str"";
    String path=request.getUrl().substring(request.getUrl().indexOf('/',8) + 1);
    boolean isTableRequest=path.startsWith(""String_Node_Str"");
    String contentType=request.getHeaders().get(ODataConstants.Headers.CONTENT_TYPE);
    contentType=contentType == null ? ""String_Node_Str"" : contentType;
    boolean isPut=request.getMethod().equals(""String_Node_Str"");
    boolean isPost=request.getMethod().equals(""String_Node_Str"");
    boolean isDelete=request.getMethod().equals(""String_Node_Str"");
    if (isPut || isPost || isDelete) {
      contentType=MediaType.APPLICATION_ATOM_XML;
      request=request.header(ODataConstants.Headers.CONTENT_TYPE,MediaType.APPLICATION_ATOM_XML);
    }
    String canonicalizedResource=""String_Node_Str"" + account + ""String_Node_Str""+ path;
    String stringToSign=request.getMethod() + ""String_Node_Str"" + contentType+ ""String_Node_Str""+ date+ ""String_Node_Str""+ canonicalizedResource;
    if (ODataConsumer.dump.requestHeaders())     System.out.println(""String_Node_Str"" + stringToSign);
    Mac mac=Mac.getInstance(""String_Node_Str"");
    mac.init(new SecretKeySpec(base64Decode(key),mac.getAlgorithm()));
    mac.update(stringToSign.getBytes(""String_Node_Str""));
    byte[] sigBytes=mac.doFinal();
    String sig=base64Encode(sigBytes);
    String auth=""String_Node_Str"" + account + ""String_Node_Str""+ sig;
    if (ODataConsumer.dump.requestHeaders())     System.out.println(""String_Node_Str"" + auth);
    request=request.header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",date).header(""String_Node_Str"",auth).header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"");
    if (isPut || (isDelete && !isTableRequest) || (isPost && request.getHeaders().containsKey(ODataConstants.Headers.X_HTTP_METHOD)))     request=request.header(""String_Node_Str"",""String_Node_Str"");
    if (isDelete) {
      request=request.header(""String_Node_Str"",""String_Node_Str"");
    }
    return request;
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
catch (  InvalidKeyException e) {
    throw new RuntimeException(e);
  }
catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",0.9640439932318104
59617,"/** 
 * Creates a new OFunctionParameter, inferring the edm-type from the value provided, which cannot be null.
 * @param < T >  the property value's java-type
 * @param name  the property name
 * @param value  the property value
 * @return a new OData property instance
 */
public static <T>OFunctionParameter create(String name,T value){
  if (value == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (value instanceof OObject) {
    return new FunctionParameterImpl(name,(OObject)value);
  }
  EdmType type=EdmSimpleType.forJavaType(value.getClass());
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + value.getClass().getName());
  }
  if (type instanceof EdmSimpleType) {
    return new FunctionParameterImpl(name,OSimpleObjects.create(value,(EdmSimpleType)type));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + type.getFullyQualifiedTypeName());
  }
}","/** 
 * Creates a new OFunctionParameter, inferring the edm-type from the value provided, which cannot be null.
 * @param < T >  the property value's java-type
 * @param name  the property name
 * @param value  the property value
 * @return a new OData property instance
 */
public static <T>OFunctionParameter create(String name,T value){
  if (value == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (value instanceof OObject) {
    return new FunctionParameterImpl(name,(OObject)value);
  }
  EdmType type=EdmSimpleType.forJavaType(value.getClass());
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + value.getClass().getName());
  }
  return new FunctionParameterImpl(name,OSimpleObjects.create(value,(EdmSimpleType)type));
}",0.8336252189141856
59618,"@Override public String toString(){
  Object value=this.getValue();
  if (value instanceof byte[]) {
    value=""String_Node_Str"" + Hex.encodeHexString((byte[])value);
  }
  return String.format(""String_Node_Str"",getName(),getType(),value);
}","@Override public String toString(){
  Object value=this.getValue();
  if (value instanceof OSimpleObject<?>) {
    Object simpleValue=((OSimpleObject<?>)value).getValue();
    if (simpleValue instanceof byte[])     value=""String_Node_Str"" + Hex.encodeHexString((byte[])simpleValue);
  }
  return String.format(""String_Node_Str"",getName(),getType(),value);
}",0.7959866220735786
59619,"private static Object convert(Object val,EdmSimpleType type){
  Object v=val;
  if (type.equals(EdmSimpleType.INT16) && (!(val instanceof Short))) {
    v=new Short(((Number)val).shortValue());
  }
 else   if (type.equals(EdmSimpleType.SINGLE) && (!(val instanceof Float))) {
    v=new Float(((Number)val).floatValue());
  }
 else   if (type.equals(EdmSimpleType.BYTE) && (!(val instanceof Byte))) {
    v=new Byte(((Number)val).byteValue());
  }
  return v;
}","private static Object convert(Object val,EdmSimpleType type){
  Object v=val;
  if (type.equals(EdmSimpleType.INT16) && (!(val instanceof Short))) {
    v=Short.valueOf(((Number)val).shortValue());
  }
 else   if (type.equals(EdmSimpleType.SINGLE) && (!(val instanceof Float))) {
    v=new Float(((Number)val).floatValue());
  }
 else   if (type.equals(EdmSimpleType.BYTE) && (!(val instanceof Byte))) {
    v=Byte.valueOf(((Number)val).byteValue());
  }
  return v;
}",0.9741379310344828
59620,"@Override public JsonEvent nextEvent(){
  if (fireEndPropertyEvent) {
    if (state.peek() != ReaderState.PROPERTY) {
      throw new IllegalStateException(""String_Node_Str"" + state.peek());
    }
    fireEndPropertyEvent=false;
    return createEndPropertyEvent(null);
  }
  if (hasNext()) {
    JsonToken token=tokenizer.nextToken();
switch (state.peek()) {
case NONE:
      if (token.type != JsonTokenType.LEFT_CURLY_BRACKET) {
        throw new JsonParseException(""String_Node_Str"");
      }
 else {
        return createStartObjectEvent();
      }
case OBJECT:
    if (expectCommaOrEnd) {
      if (token.type == JsonTokenType.COMMA) {
        if (!tokenizer.hasNext()) {
          throw new JsonParseException(""String_Node_Str"");
        }
        token=tokenizer.nextToken();
      }
 else       if (token.type != JsonTokenType.RIGHT_CURLY_BRACKET) {
        throw new JsonParseException(""String_Node_Str"" + token.type);
      }
      expectCommaOrEnd=false;
    }
switch (token.type) {
case STRING:
    if (!tokenizer.hasNext() || tokenizer.nextToken().type != JsonTokenType.COLON) {
      throw new JsonParseException(""String_Node_Str"" + token.value);
    }
  expectCommaOrEnd=true;
return createStartPropertyEvent(token.value);
case RIGHT_CURLY_BRACKET:
return createEndObjectEvent();
default :
throw new JsonParseException(""String_Node_Str"");
}
case PROPERTY:
switch (token.type) {
case STRING:
case NUMBER:
case TRUE:
case FALSE:
return createEndPropertyEvent(token.value);
case NULL:
return createEndPropertyEvent(null);
case LEFT_CURLY_BRACKET:
return createStartObjectEvent();
case LEFT_BRACKET:
return createStartArrayEvent();
default :
throw new JsonParseException(""String_Node_Str"");
}
case ARRAY:
if (expectCommaOrEnd) {
if (token.type == JsonTokenType.COMMA) {
if (!tokenizer.hasNext()) {
throw new JsonParseException(""String_Node_Str"");
}
token=tokenizer.nextToken();
}
 else if (token.type != JsonTokenType.RIGHT_BRACKET) {
throw new JsonParseException(""String_Node_Str"");
}
expectCommaOrEnd=false;
}
switch (token.type) {
case STRING:
expectCommaOrEnd=true;
case NUMBER:
expectCommaOrEnd=true;
case TRUE:
expectCommaOrEnd=true;
case FALSE:
expectCommaOrEnd=true;
return createValueEvent(token.value);
case NULL:
expectCommaOrEnd=true;
return createValueEvent(null);
case LEFT_CURLY_BRACKET:
expectCommaOrEnd=true;
return createStartObjectEvent();
case LEFT_BRACKET:
expectCommaOrEnd=true;
return createStartArrayEvent();
case RIGHT_BRACKET:
return createEndArrayEvent();
default :
break;
}
}
}
this.previousEvent=null;
throw new RuntimeException(""String_Node_Str"");
}","@Override public JsonEvent nextEvent(){
  if (fireEndPropertyEvent) {
    if (state.peek() != ReaderState.PROPERTY) {
      throw new IllegalStateException(""String_Node_Str"" + state.peek());
    }
    fireEndPropertyEvent=false;
    return createEndPropertyEvent(null);
  }
  if (hasNext()) {
    JsonToken token=tokenizer.nextToken();
switch (state.peek()) {
case NONE:
      if (token.type != JsonTokenType.LEFT_CURLY_BRACKET) {
        throw new JsonParseException(""String_Node_Str"");
      }
 else {
        return createStartObjectEvent();
      }
case OBJECT:
    if (expectCommaOrEnd) {
      if (token.type == JsonTokenType.COMMA) {
        if (!tokenizer.hasNext()) {
          throw new JsonParseException(""String_Node_Str"");
        }
        token=tokenizer.nextToken();
      }
 else       if (token.type != JsonTokenType.RIGHT_CURLY_BRACKET) {
        throw new JsonParseException(""String_Node_Str"" + token.type);
      }
      expectCommaOrEnd=false;
    }
switch (token.type) {
case STRING:
    if (!tokenizer.hasNext() || tokenizer.nextToken().type != JsonTokenType.COLON) {
      throw new JsonParseException(""String_Node_Str"" + token.value);
    }
  expectCommaOrEnd=true;
return createStartPropertyEvent(token.value);
case RIGHT_CURLY_BRACKET:
return createEndObjectEvent();
default :
throw new JsonParseException(""String_Node_Str"");
}
case PROPERTY:
switch (token.type) {
case STRING:
case NUMBER:
case TRUE:
case FALSE:
return createEndPropertyEvent(token.value);
case NULL:
return createEndPropertyEvent(null);
case LEFT_CURLY_BRACKET:
return createStartObjectEvent();
case LEFT_BRACKET:
return createStartArrayEvent();
default :
throw new JsonParseException(""String_Node_Str"");
}
case ARRAY:
if (expectCommaOrEnd) {
if (token.type == JsonTokenType.COMMA) {
if (!tokenizer.hasNext()) {
throw new JsonParseException(""String_Node_Str"");
}
token=tokenizer.nextToken();
}
 else if (token.type != JsonTokenType.RIGHT_BRACKET) {
throw new JsonParseException(""String_Node_Str"");
}
expectCommaOrEnd=false;
}
switch (token.type) {
case STRING:
case NUMBER:
case TRUE:
case FALSE:
expectCommaOrEnd=true;
return createValueEvent(token.value);
case NULL:
expectCommaOrEnd=true;
return createValueEvent(null);
case LEFT_CURLY_BRACKET:
expectCommaOrEnd=true;
return createStartObjectEvent();
case LEFT_BRACKET:
expectCommaOrEnd=true;
return createStartArrayEvent();
case RIGHT_BRACKET:
return createEndArrayEvent();
default :
break;
}
}
}
this.previousEvent=null;
throw new RuntimeException(""String_Node_Str"");
}",0.986499706515359
59621,"@Override public boolean equals(Object rhso){
  if (!rhso.getClass().equals(Path.class)) {
    return false;
  }
  Path rhs=(Path)rhso;
  return spath.equals(rhs.spath);
}","@Override public boolean equals(Object rhso){
  if (rhso == null || !(rhso instanceof Path)) {
    return false;
  }
  Path rhs=(Path)rhso;
  return spath.equals(rhs.spath);
}",0.8439306358381503
59622,"private static Map<String,Class<?>> computeTypes(Map<String,Method> getters,Map<String,Method> setters){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  String propertyName : getters.keySet()) {
    Class<?> getterType=getters.get(propertyName).getReturnType();
    if (!isIterable(getterType))     rt.put(propertyName,getterType);
  }
  for (  String propertyName : setters.keySet()) {
    Class<?> getterType=rt.get(propertyName);
    if (getterType != null) {
      Class<?> setterType=setters.get(propertyName).getParameterTypes()[0];
      if (getterType != null && !getterType.equals(setterType))       throw new RuntimeException(String.format(""String_Node_Str"",setters.get(propertyName).getDeclaringClass().getName(),propertyName,getterType.getName(),setterType.getName()));
      rt.put(propertyName,setterType);
    }
  }
  return rt;
}","private static Map<String,Class<?>> computeTypes(Map<String,Method> getters,Map<String,Method> setters){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  Entry<String,Method> getter : getters.entrySet()) {
    Class<?> getterType=getter.getValue().getReturnType();
    if (!isIterable(getterType))     rt.put(getter.getKey(),getterType);
  }
  for (  Entry<String,Method> setter : setters.entrySet()) {
    String propertyName=setter.getKey();
    Class<?> getterType=rt.get(propertyName);
    if (getterType != null) {
      Class<?> setterType=setter.getValue().getParameterTypes()[0];
      if (getterType != null && !getterType.equals(setterType))       throw new RuntimeException(String.format(""String_Node_Str"",setters.get(propertyName).getDeclaringClass().getName(),propertyName,getterType.getName(),setterType.getName()));
      rt.put(propertyName,setterType);
    }
  }
  return rt;
}",0.7162162162162162
59623,"private Map<String,Class<?>> computeCollections(Map<String,Method> getters2,Map<String,Method> setters2){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  String propertyName : getters.keySet()) {
    Class<?> getterType=getters.get(propertyName).getReturnType();
    if (isIterable(getterType)) {
      Class<?> setterType=setters.containsKey(propertyName) ? setters.get(propertyName).getParameterTypes()[0] : null;
      if (setterType != null) {
        if (!getterType.equals(setterType))         throw new RuntimeException(String.format(""String_Node_Str"",setters.get(propertyName).getDeclaringClass().getName(),propertyName,getterType.getName(),setterType.getName()));
        Class<?> elementClass;
        Type type=getters.get(propertyName).getGenericReturnType();
        if (type instanceof ParameterizedType) {
          Type[] actualTypes=((ParameterizedType)type).getActualTypeArguments();
          elementClass=actualTypes.length > 0 ? (Class<?>)actualTypes[0] : Object.class;
        }
 else         elementClass=Object.class;
        rt.put(propertyName,elementClass);
      }
    }
  }
  return rt;
}","private Map<String,Class<?>> computeCollections(Map<String,Method> getters2,Map<String,Method> setters2){
  Map<String,Class<?>> rt=new HashMap<String,Class<?>>();
  for (  Entry<String,Method> getter : getters.entrySet()) {
    String propertyName=getter.getKey();
    Method method=getter.getValue();
    Class<?> getterType=method.getReturnType();
    if (isIterable(getterType)) {
      Class<?> setterType=setters.containsKey(propertyName) ? setters.get(propertyName).getParameterTypes()[0] : null;
      if (setterType != null) {
        if (!getterType.equals(setterType))         throw new RuntimeException(String.format(""String_Node_Str"",setters.get(propertyName).getDeclaringClass().getName(),propertyName,getterType.getName(),setterType.getName()));
        Class<?> elementClass;
        Type type=method.getGenericReturnType();
        if (type instanceof ParameterizedType) {
          Type[] actualTypes=((ParameterizedType)type).getActualTypeArguments();
          elementClass=actualTypes.length > 0 ? (Class<?>)actualTypes[0] : Object.class;
        }
 else         elementClass=Object.class;
        rt.put(propertyName,elementClass);
      }
    }
  }
  return rt;
}",0.9164513350559862
59624,"@SuppressWarnings(""String_Node_Str"") private void applyOLinks(EntityManager em,EntityType<?> jpaEntityType,List<OLink> links,Object jpaEntity){
  if (links == null)   return;
  try {
    for (    final OLink link : links) {
      String[] propNameSplit=link.getRelation().split(""String_Node_Str"");
      String propName=propNameSplit[propNameSplit.length - 1];
      if (link instanceof ORelatedEntitiesLinkInline) {
        PluralAttribute<?,?,?> att=(PluralAttribute<?,?,?>)jpaEntityType.getAttribute(propName);
        JPAMember member=JPAMember.create(att,jpaEntity);
        EntityType<?> collJpaEntityType=(EntityType<?>)att.getElementType();
        OneToMany oneToMany=member.getAnnotation(OneToMany.class);
        boolean hasSingularBackRef=oneToMany != null && oneToMany.mappedBy() != null && !oneToMany.mappedBy().isEmpty();
        ManyToMany manyToMany=member.getAnnotation(ManyToMany.class);
        Collection<Object> coll=member.get();
        if (coll == null) {
          coll=(Collection<Object>)newInstance(member.getJavaType());
          member.set(coll);
        }
        for (        OEntity oentity : ((ORelatedEntitiesLinkInline)link).getRelatedEntities()) {
          Object collJpaEntity=createNewJPAEntity(em,collJpaEntityType,oentity,true);
          if (hasSingularBackRef) {
            JPAMember backRef=JPAMember.create(collJpaEntityType.getAttribute(oneToMany.mappedBy()),collJpaEntity);
            backRef.set(jpaEntity);
          }
          if (manyToMany != null) {
            Attribute<?,?> other=null;
            if (manyToMany.mappedBy() != null && !manyToMany.mappedBy().isEmpty())             other=collJpaEntityType.getAttribute(manyToMany.mappedBy());
 else {
              for (              Attribute<?,?> att2 : collJpaEntityType.getAttributes()) {
                if (att2.isCollection() && JPAMember.create(att2,null).getAnnotation(ManyToMany.class) != null) {
                  CollectionAttribute<?,?> ca=(CollectionAttribute<?,?>)att2;
                  if (ca.getElementType().equals(jpaEntityType)) {
                    other=ca;
                    break;
                  }
                }
              }
            }
            if (other == null)             throw new RuntimeException(""String_Node_Str"");
            JPAMember backRef=JPAMember.create(other,collJpaEntity);
            Collection<Object> coll2=backRef.get();
            if (coll2 == null) {
              coll2=newInstance(backRef.getJavaType());
              backRef.set(coll2);
            }
            coll2.add(jpaEntity);
          }
          em.persist(collJpaEntity);
          coll.add(collJpaEntity);
        }
      }
 else       if (link instanceof ORelatedEntityLinkInline) {
        SingularAttribute<?,?> att=jpaEntityType.getSingularAttribute(propName);
        JPAMember member=JPAMember.create(att,jpaEntity);
        EntityType<?> relJpaEntityType=(EntityType<?>)att.getType();
        Object relJpaEntity=createNewJPAEntity(em,relJpaEntityType,((ORelatedEntityLinkInline)link).getRelatedEntity(),true);
        em.persist(relJpaEntity);
        member.set(relJpaEntity);
      }
 else       if (link instanceof ORelatedEntityLink) {
        SingularAttribute<?,?> att=jpaEntityType.getSingularAttribute(propName);
        JPAMember member=JPAMember.create(att,jpaEntity);
        EntityType<?> relJpaEntityType=(EntityType<?>)att.getType();
        Object key=typeSafeEntityKey(em,relJpaEntityType,OEntityKey.parse(link.getHref().substring(link.getHref().indexOf('('))));
        Object relEntity=em.find(relJpaEntityType.getJavaType(),key);
        member.set(relEntity);
        JoinColumn joinColumn=member.getAnnotation(JoinColumn.class);
        ManyToOne manyToOne=member.getAnnotation(ManyToOne.class);
        if (joinColumn != null && manyToOne != null) {
          String columnName=joinColumn.name();
          JPAMember m=JPAMember.findByColumn(jpaEntityType,columnName,jpaEntity);
          if (m != null)           m.set(key);
        }
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") private void applyOLinks(EntityManager em,EntityType<?> jpaEntityType,List<OLink> links,Object jpaEntity){
  if (links == null)   return;
  for (  final OLink link : links) {
    String[] propNameSplit=link.getRelation().split(""String_Node_Str"");
    String propName=propNameSplit[propNameSplit.length - 1];
    if (link instanceof ORelatedEntitiesLinkInline) {
      PluralAttribute<?,?,?> att=(PluralAttribute<?,?,?>)jpaEntityType.getAttribute(propName);
      JPAMember member=JPAMember.create(att,jpaEntity);
      EntityType<?> collJpaEntityType=(EntityType<?>)att.getElementType();
      OneToMany oneToMany=member.getAnnotation(OneToMany.class);
      boolean hasSingularBackRef=oneToMany != null && oneToMany.mappedBy() != null && !oneToMany.mappedBy().isEmpty();
      ManyToMany manyToMany=member.getAnnotation(ManyToMany.class);
      Collection<Object> coll=member.get();
      if (coll == null) {
        coll=(Collection<Object>)newInstance(member.getJavaType());
        member.set(coll);
      }
      for (      OEntity oentity : ((ORelatedEntitiesLinkInline)link).getRelatedEntities()) {
        Object collJpaEntity=createNewJPAEntity(em,collJpaEntityType,oentity,true);
        if (hasSingularBackRef) {
          JPAMember backRef=JPAMember.create(collJpaEntityType.getAttribute(oneToMany.mappedBy()),collJpaEntity);
          backRef.set(jpaEntity);
        }
        if (manyToMany != null) {
          Attribute<?,?> other=null;
          if (manyToMany.mappedBy() != null && !manyToMany.mappedBy().isEmpty())           other=collJpaEntityType.getAttribute(manyToMany.mappedBy());
 else {
            for (            Attribute<?,?> att2 : collJpaEntityType.getAttributes()) {
              if (att2.isCollection() && JPAMember.create(att2,null).getAnnotation(ManyToMany.class) != null) {
                CollectionAttribute<?,?> ca=(CollectionAttribute<?,?>)att2;
                if (ca.getElementType().equals(jpaEntityType)) {
                  other=ca;
                  break;
                }
              }
            }
          }
          if (other == null)           throw new RuntimeException(""String_Node_Str"");
          JPAMember backRef=JPAMember.create(other,collJpaEntity);
          Collection<Object> coll2=backRef.get();
          if (coll2 == null) {
            coll2=newInstance(backRef.getJavaType());
            backRef.set(coll2);
          }
          coll2.add(jpaEntity);
        }
        em.persist(collJpaEntity);
        coll.add(collJpaEntity);
      }
    }
 else     if (link instanceof ORelatedEntityLinkInline) {
      SingularAttribute<?,?> att=jpaEntityType.getSingularAttribute(propName);
      JPAMember member=JPAMember.create(att,jpaEntity);
      EntityType<?> relJpaEntityType=(EntityType<?>)att.getType();
      Object relJpaEntity=createNewJPAEntity(em,relJpaEntityType,((ORelatedEntityLinkInline)link).getRelatedEntity(),true);
      em.persist(relJpaEntity);
      member.set(relJpaEntity);
    }
 else     if (link instanceof ORelatedEntityLink) {
      SingularAttribute<?,?> att=jpaEntityType.getSingularAttribute(propName);
      JPAMember member=JPAMember.create(att,jpaEntity);
      EntityType<?> relJpaEntityType=(EntityType<?>)att.getType();
      Object key=typeSafeEntityKey(em,relJpaEntityType,OEntityKey.parse(link.getHref().substring(link.getHref().indexOf('('))));
      Object relEntity=em.find(relJpaEntityType.getJavaType(),key);
      member.set(relEntity);
      JoinColumn joinColumn=member.getAnnotation(JoinColumn.class);
      ManyToOne manyToOne=member.getAnnotation(ManyToOne.class);
      if (joinColumn != null && manyToOne != null) {
        String columnName=joinColumn.name();
        JPAMember m=JPAMember.findByColumn(jpaEntityType,columnName,jpaEntity);
        if (m != null)         m.set(key);
      }
    }
 else {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
}",0.9611220472440944
59625,"private static BatchBodyPart validateBodyPart(BatchBodyPart block){
  if (block.getHttpMethod() == null ? ""String_Node_Str"" == null : block.getHttpMethod().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (block.getUri() == null ? ""String_Node_Str"" == null : block.getUri().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return block;
}","private static BatchBodyPart validateBodyPart(BatchBodyPart block){
  if (block.getHttpMethod() == null ? ""String_Node_Str"" == null : block.getHttpMethod().toString().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (block.getUri() == null ? ""String_Node_Str"" == null : block.getUri().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return block;
}",0.9873997709049256
59626,"protected TemporalType getTemporalType(SingularAttribute<?,?> sa){
  Member member=sa.getJavaMember();
  Temporal temporal=null;
  if (member instanceof Field) {
    temporal=((Field)member).getAnnotation(Temporal.class);
  }
 else   if (member instanceof Method) {
    temporal=((Method)member).getAnnotation(Temporal.class);
  }
  return temporal.value();
}","protected TemporalType getTemporalType(SingularAttribute<?,?> sa){
  Member member=sa.getJavaMember();
  Temporal temporal=null;
  if (member instanceof Field) {
    temporal=((Field)member).getAnnotation(Temporal.class);
  }
 else   if (member instanceof Method) {
    temporal=((Method)member).getAnnotation(Temporal.class);
  }
  return temporal == null ? null : temporal.value();
}",0.9650537634408602
59627,"protected void writeValue(JsonWriter jw,EdmBaseType type,Object pvalue){
  if (pvalue == null) {
    jw.writeNull();
  }
 else   if (type.equals(EdmType.BINARY)) {
    jw.writeString(Base64.encodeBase64String((byte[])pvalue));
  }
 else   if (type.equals(EdmType.BOOLEAN)) {
    jw.writeBoolean((Boolean)pvalue);
  }
 else   if (type.equals(EdmType.BYTE)) {
    jw.writeString(Hex.encodeHexString(new byte[]{(Byte)pvalue}));
  }
 else   if (type.equals(EdmType.DATETIME)) {
    LocalDateTime ldt=(LocalDateTime)pvalue;
    long millis=ldt.toDateTime(DateTimeZone.UTC).getMillis();
    String date=""String_Node_Str"" + millis + ""String_Node_Str"";
    jw.writeRaw(date);
  }
 else   if (type.equals(EdmType.DECIMAL)) {
    jw.writeString(String.format(Locale.ENGLISH,""String_Node_Str"",pvalue));
  }
 else   if (type.equals(EdmType.DOUBLE)) {
    jw.writeString(String.format(Locale.ENGLISH,""String_Node_Str"",pvalue));
  }
 else   if (type.equals(EdmType.GUID)) {
    jw.writeString(""String_Node_Str"" + (Guid)pvalue + ""String_Node_Str"");
  }
 else   if (type.equals(EdmType.INT16)) {
    jw.writeNumber((Short)pvalue);
  }
 else   if (type.equals(EdmType.INT32)) {
    jw.writeNumber((Integer)pvalue);
  }
 else   if (type.equals(EdmType.INT64)) {
    jw.writeString(pvalue.toString());
  }
 else   if (type.equals(EdmType.SINGLE)) {
    jw.writeNumber((Float)pvalue);
  }
 else   if (type.equals(EdmType.TIME)) {
    LocalTime ldt=(LocalTime)pvalue;
    jw.writeString(""String_Node_Str"" + ldt + ""String_Node_Str"");
  }
 else   if (type.equals(EdmType.DATETIMEOFFSET)) {
    jw.writeString(""String_Node_Str"" + InternalUtil.toString((DateTime)pvalue) + ""String_Node_Str"");
  }
 else   if (type instanceof EdmComplexType || (type instanceof EdmType && (!((EdmType)type).isSimple()))) {
    if (pvalue instanceof OComplexObject) {
      pvalue=((OComplexObject)pvalue).getProperties();
    }
    writeComplexObject(jw,type.toTypeString(),(List<OProperty<?>>)pvalue);
  }
 else {
    String value=pvalue.toString();
    jw.writeString(value);
  }
}","protected void writeValue(JsonWriter jw,EdmBaseType type,Object pvalue){
  if (pvalue == null) {
    jw.writeNull();
  }
 else   if (type.equals(EdmType.BINARY)) {
    jw.writeString(Base64.encodeBase64String((byte[])pvalue));
  }
 else   if (type.equals(EdmType.BOOLEAN)) {
    jw.writeBoolean((Boolean)pvalue);
  }
 else   if (type.equals(EdmType.BYTE)) {
    jw.writeString(Hex.encodeHexString(new byte[]{(Byte)pvalue}));
  }
 else   if (type.equals(EdmType.DATETIME)) {
    LocalDateTime ldt=(LocalDateTime)pvalue;
    long millis=ldt.toDateTime().getMillis();
    String date=""String_Node_Str"" + millis + ""String_Node_Str"";
    jw.writeRaw(date);
  }
 else   if (type.equals(EdmType.DECIMAL)) {
    jw.writeString(String.format(Locale.ENGLISH,""String_Node_Str"",pvalue));
  }
 else   if (type.equals(EdmType.DOUBLE)) {
    jw.writeString(String.format(Locale.ENGLISH,""String_Node_Str"",pvalue));
  }
 else   if (type.equals(EdmType.GUID)) {
    jw.writeString(""String_Node_Str"" + (Guid)pvalue + ""String_Node_Str"");
  }
 else   if (type.equals(EdmType.INT16)) {
    jw.writeNumber((Short)pvalue);
  }
 else   if (type.equals(EdmType.INT32)) {
    jw.writeNumber((Integer)pvalue);
  }
 else   if (type.equals(EdmType.INT64)) {
    jw.writeString(pvalue.toString());
  }
 else   if (type.equals(EdmType.SINGLE)) {
    jw.writeNumber((Float)pvalue);
  }
 else   if (type.equals(EdmType.TIME)) {
    LocalTime ldt=(LocalTime)pvalue;
    jw.writeString(""String_Node_Str"" + ldt + ""String_Node_Str"");
  }
 else   if (type.equals(EdmType.DATETIMEOFFSET)) {
    jw.writeString(""String_Node_Str"" + InternalUtil.toString((DateTime)pvalue) + ""String_Node_Str"");
  }
 else   if (type instanceof EdmComplexType || (type instanceof EdmType && (!((EdmType)type).isSimple()))) {
    if (pvalue instanceof OComplexObject) {
      pvalue=((OComplexObject)pvalue).getProperties();
    }
    writeComplexObject(jw,type.toTypeString(),(List<OProperty<?>>)pvalue);
  }
 else {
    String value=pvalue.toString();
    jw.writeString(value);
  }
}",0.9960629921259844
59628,"public static OProperty<?> parse(String name,EdmType type,String value){
  if (EdmType.GUID.equals(type)) {
    Guid uValue=value == null ? null : Guid.fromString(value.substring(5,value.length() - 1));
    return OProperties.guid(name,uValue);
  }
 else   if (EdmType.BOOLEAN.equals(type)) {
    Boolean bValue=value == null ? null : Boolean.parseBoolean(value);
    return OProperties.boolean_(name,bValue);
  }
 else   if (EdmType.BYTE.equals(type)) {
    Byte bValue;
    try {
      bValue=value == null ? null : Hex.decodeHex(value.toCharArray())[0];
    }
 catch (    DecoderException dex) {
      throw new IllegalArgumentException(dex);
    }
    return OProperties.byte_(name,bValue);
  }
 else   if (EdmType.INT16.equals(type)) {
    Short sValue=value == null ? null : Short.parseShort(value);
    return OProperties.int16(name,sValue);
  }
 else   if (EdmType.INT32.equals(type)) {
    Integer iValue=value == null ? null : Integer.parseInt(value);
    return OProperties.int32(name,iValue);
  }
 else   if (EdmType.INT64.equals(type)) {
    Long lValue=value == null ? null : Long.parseLong(value);
    return OProperties.int64(name,lValue);
  }
 else   if (EdmType.SINGLE.equals(type)) {
    Float fValue=value == null ? null : Float.parseFloat(value);
    return OProperties.single(name,fValue);
  }
 else   if (EdmType.DOUBLE.equals(type)) {
    Double dValue=value == null ? null : Double.parseDouble(value);
    return OProperties.double_(name,dValue);
  }
 else   if (EdmType.DECIMAL.equals(type)) {
    BigDecimal dValue=value == null ? null : new BigDecimal(value);
    return OProperties.decimal(name,dValue);
  }
 else   if (EdmType.BINARY.equals(type)) {
    byte[] bValue=value == null ? null : new Base64().decode(value);
    return OProperties.binary(name,bValue);
  }
 else   if (EdmType.DATETIME.equals(type)) {
    LocalDateTime dValue=null;
    if (value != null) {
      if (!value.startsWith(""String_Node_Str"") || !value.endsWith(""String_Node_Str"")) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String ticks=value.substring(7,value.length() - 3);
      String offset=null;
      int idx=ticks.indexOf('-');
      if (idx > 0) {
        offset=ticks.substring(idx + 1);
        ticks=ticks.substring(0,idx);
        dValue=new LocalDateTime(Long.parseLong(ticks),DateTimeZone.UTC);
        dValue=dValue.minusMinutes(Integer.valueOf(offset));
      }
 else       if ((idx=ticks.indexOf('+')) > 0) {
        offset=ticks.substring(idx + 1);
        ticks=ticks.substring(0,idx);
        dValue=new LocalDateTime(Long.parseLong(ticks),DateTimeZone.UTC);
        dValue=dValue.plusMinutes(Integer.valueOf(offset));
      }
 else {
        dValue=new LocalDateTime(Long.parseLong(ticks),DateTimeZone.UTC);
      }
    }
    return OProperties.datetime(name,dValue);
  }
 else   if (EdmType.TIME.equals(type)) {
    LocalTime tValue=value == null ? null : new LocalTime(value);
    return OProperties.time(name,tValue);
  }
 else   if (EdmType.STRING.equals(type) || type == null) {
    return OProperties.string(name,value);
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + type);
}","public static OProperty<?> parse(String name,EdmType type,String value){
  if (EdmType.GUID.equals(type)) {
    Guid uValue=value == null ? null : Guid.fromString(value.substring(5,value.length() - 1));
    return OProperties.guid(name,uValue);
  }
 else   if (EdmType.BOOLEAN.equals(type)) {
    Boolean bValue=value == null ? null : Boolean.parseBoolean(value);
    return OProperties.boolean_(name,bValue);
  }
 else   if (EdmType.BYTE.equals(type)) {
    Byte bValue;
    try {
      bValue=value == null ? null : Hex.decodeHex(value.toCharArray())[0];
    }
 catch (    DecoderException dex) {
      throw new IllegalArgumentException(dex);
    }
    return OProperties.byte_(name,bValue);
  }
 else   if (EdmType.INT16.equals(type)) {
    Short sValue=value == null ? null : Short.parseShort(value);
    return OProperties.int16(name,sValue);
  }
 else   if (EdmType.INT32.equals(type)) {
    Integer iValue=value == null ? null : Integer.parseInt(value);
    return OProperties.int32(name,iValue);
  }
 else   if (EdmType.INT64.equals(type)) {
    Long lValue=value == null ? null : Long.parseLong(value);
    return OProperties.int64(name,lValue);
  }
 else   if (EdmType.SINGLE.equals(type)) {
    Float fValue=value == null ? null : Float.parseFloat(value);
    return OProperties.single(name,fValue);
  }
 else   if (EdmType.DOUBLE.equals(type)) {
    Double dValue=value == null ? null : Double.parseDouble(value);
    return OProperties.double_(name,dValue);
  }
 else   if (EdmType.DECIMAL.equals(type)) {
    BigDecimal dValue=value == null ? null : new BigDecimal(value);
    return OProperties.decimal(name,dValue);
  }
 else   if (EdmType.BINARY.equals(type)) {
    byte[] bValue=value == null ? null : new Base64().decode(value);
    return OProperties.binary(name,bValue);
  }
 else   if (EdmType.DATETIME.equals(type)) {
    LocalDateTime dValue=null;
    if (value != null) {
      if (!value.startsWith(""String_Node_Str"") || !value.endsWith(""String_Node_Str"")) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      String ticks=value.substring(6,value.length() - 2);
      String offset=null;
      int idx=ticks.indexOf('-');
      if (idx > 0) {
        offset=ticks.substring(idx + 1);
        ticks=ticks.substring(0,idx);
        dValue=new LocalDateTime(Long.parseLong(ticks));
        dValue=dValue.minusMinutes(Integer.valueOf(offset));
      }
 else       if ((idx=ticks.indexOf('+')) > 0) {
        offset=ticks.substring(idx + 1);
        ticks=ticks.substring(0,idx);
        dValue=new LocalDateTime(Long.parseLong(ticks));
        dValue=dValue.plusMinutes(Integer.valueOf(offset));
      }
 else {
        dValue=new LocalDateTime(Long.parseLong(ticks));
      }
    }
    return OProperties.datetime(name,dValue);
  }
 else   if (EdmType.TIME.equals(type)) {
    LocalTime tValue=value == null ? null : new LocalTime(value);
    return OProperties.time(name,tValue);
  }
 else   if (EdmType.STRING.equals(type) || type == null) {
    return OProperties.string(name,value);
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + type);
}",0.9912322652638292
59629,"@SuppressWarnings(""String_Node_Str"") private DynamicEntitiesResponse getEntitiesResponse(final Context context,String navProp){
  String jpql=generateJPQL(context,navProp);
  Query tq=context.em.createQuery(jpql);
  Integer inlineCount=context.query != null && context.query.inlineCount == InlineCount.ALLPAGES ? tq.getResultList().size() : null;
  int queryMaxResults=maxResults;
  if (context.query != null && context.query.top != null) {
    if (context.query.top.equals(0))     return DynamicEntitiesResponse.entities(null,inlineCount,null);
    if (context.query.top < maxResults)     queryMaxResults=context.query.top;
  }
  tq=tq.setMaxResults(queryMaxResults + 1);
  if (context.query != null && context.query.skip != null)   tq=tq.setFirstResult(context.query.skip);
  List<Object> results=tq.getResultList();
  if (context.edmPropertyBase instanceof EdmProperty) {
    EdmProperty propInfo=(EdmProperty)context.edmPropertyBase;
    if (results.size() != 1)     throw new RuntimeException(""String_Node_Str"" + results.size());
    Object value=results.get(0);
    OProperty<?> op=OProperties.simple(((EdmProperty)propInfo).name,(EdmSimpleType)((EdmProperty)propInfo).type,value);
    return DynamicEntitiesResponse.property(op);
  }
  List<OEntity> entities=Enumerable.create(results).take(queryMaxResults).select(new Func1<Object,OEntity>(){
    public OEntity apply(    final Object jpaEntity){
      return makeEntity(context,jpaEntity);
    }
  }
).toList();
  String skipToken=null;
  boolean hasMoreResults=context.query != null && context.query.top != null ? context.query.top > maxResults && results.size() > queryMaxResults : results.size() > queryMaxResults;
  if (hasMoreResults)   skipToken=JPASkipToken.create(context.query == null ? null : context.query.orderBy,Enumerable.create(entities).last());
  if (context.edmPropertyBase instanceof EdmNavigationProperty) {
    EdmNavigationProperty edmNavProp=(EdmNavigationProperty)context.edmPropertyBase;
    if (edmNavProp.toRole.multiplicity == EdmMultiplicity.ONE || edmNavProp.toRole.multiplicity == EdmMultiplicity.ZERO_TO_ONE) {
      if (entities.size() != 1)       throw new RuntimeException(""String_Node_Str"" + entities.size());
      return DynamicEntitiesResponse.entity(entities.get(0));
    }
  }
  return DynamicEntitiesResponse.entities(entities,inlineCount,skipToken);
}","@SuppressWarnings(""String_Node_Str"") private DynamicEntitiesResponse getEntitiesResponse(final Context context,String navProp){
  String jpql=generateJPQL(context,navProp);
  Query tq=context.em.createQuery(jpql);
  Integer inlineCount=context.query != null && context.query.inlineCount == InlineCount.ALLPAGES ? tq.getResultList().size() : null;
  int queryMaxResults=maxResults;
  if (context.query != null && context.query.top != null) {
    if (context.query.top.equals(0)) {
      List<OEntity> emptyList=Collections.emptyList();
      return DynamicEntitiesResponse.entities(emptyList,inlineCount,null);
    }
    if (context.query.top < maxResults)     queryMaxResults=context.query.top;
  }
  tq=tq.setMaxResults(queryMaxResults + 1);
  if (context.query != null && context.query.skip != null)   tq=tq.setFirstResult(context.query.skip);
  List<Object> results=tq.getResultList();
  if (context.edmPropertyBase instanceof EdmProperty) {
    EdmProperty propInfo=(EdmProperty)context.edmPropertyBase;
    if (results.size() != 1)     throw new RuntimeException(""String_Node_Str"" + results.size());
    Object value=results.get(0);
    OProperty<?> op=OProperties.simple(((EdmProperty)propInfo).name,(EdmSimpleType)((EdmProperty)propInfo).type,value);
    return DynamicEntitiesResponse.property(op);
  }
  List<OEntity> entities=Enumerable.create(results).take(queryMaxResults).select(new Func1<Object,OEntity>(){
    public OEntity apply(    final Object jpaEntity){
      return makeEntity(context,jpaEntity);
    }
  }
).toList();
  String skipToken=null;
  boolean hasMoreResults=context.query != null && context.query.top != null ? context.query.top > maxResults && results.size() > queryMaxResults : results.size() > queryMaxResults;
  if (hasMoreResults)   skipToken=JPASkipToken.create(context.query == null ? null : context.query.orderBy,Enumerable.create(entities).last());
  if (context.edmPropertyBase instanceof EdmNavigationProperty) {
    EdmNavigationProperty edmNavProp=(EdmNavigationProperty)context.edmPropertyBase;
    if (edmNavProp.toRole.multiplicity == EdmMultiplicity.ONE || edmNavProp.toRole.multiplicity == EdmMultiplicity.ZERO_TO_ONE) {
      if (entities.size() != 1)       throw new RuntimeException(""String_Node_Str"" + entities.size());
      return DynamicEntitiesResponse.entity(entities.get(0));
    }
  }
  return DynamicEntitiesResponse.entities(entities,inlineCount,skipToken);
}",0.9836683417085428
59630,"public static EdmDataServices parseMetadata(XMLEventReader2 reader){
  List<EdmSchema> schemas=new ArrayList<EdmSchema>();
  ODataVersion version=null;
  boolean foundDataServices=false;
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    boolean shouldReturn=false;
    if (isStartElement(event,EDMX_DATASERVICES)) {
      foundDataServices=true;
      String str=getAttributeValueIfExists(event.asStartElement(),new QName2(NS_METADATA,""String_Node_Str""));
      version=str != null ? ODataVersion.valueOf(str) : null;
    }
    if (isStartElement(event,EDM2006_SCHEMA,EDM2007_SCHEMA,EDM2008_SCHEMA,EDM2009_SCHEMA)) {
      schemas.add(parseEdmSchema(reader,event.asStartElement()));
      if (!foundDataServices)       shouldReturn=true;
    }
    if (isEndElement(event,EDMX_DATASERVICES))     shouldReturn=true;
    if (shouldReturn) {
      EdmDataServices rt=new EdmDataServices(version,schemas);
      resolve(rt);
      return rt;
    }
  }
  throw new UnsupportedOperationException();
}","public static EdmDataServices parseMetadata(XMLEventReader2 reader){
  List<EdmSchema> schemas=new ArrayList<EdmSchema>();
  ODataVersion version=null;
  boolean foundDataServices=false;
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    boolean shouldReturn=false;
    if (isStartElement(event,EDMX_DATASERVICES)) {
      foundDataServices=true;
      String str=getAttributeValueIfExists(event.asStartElement(),new QName2(NS_METADATA,""String_Node_Str""));
      version=str != null ? ODataVersion.parse(str) : null;
    }
    if (isStartElement(event,EDM2006_SCHEMA,EDM2007_SCHEMA,EDM2008_SCHEMA,EDM2009_SCHEMA)) {
      schemas.add(parseEdmSchema(reader,event.asStartElement()));
      if (!foundDataServices)       shouldReturn=true;
    }
    if (isEndElement(event,EDMX_DATASERVICES))     shouldReturn=true;
    if (shouldReturn) {
      EdmDataServices rt=new EdmDataServices(version,schemas);
      resolve(rt);
      return rt;
    }
  }
  throw new UnsupportedOperationException();
}",0.994088669950739
59631,"private DynamicEntitiesResponse enumJpaEntities(final Context context,final String navProp){
  String alias=""String_Node_Str"";
  String from=context.jpaEntityType.getName() + ""String_Node_Str"" + alias;
  String where=null;
  Object edmObj=null;
  if (navProp != null) {
    where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
    String prop=null;
    int propCount=0;
    for (    String pn : navProp.split(""String_Node_Str"")) {
      String[] propSplit=pn.split(""String_Node_Str"");
      prop=propSplit[0];
      propCount++;
      if (edmObj instanceof EdmProperty) {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",alias));
      }
      edmObj=metadata.findEdmProperty(prop);
      if (edmObj instanceof EdmNavigationProperty) {
        EdmNavigationProperty propInfo=(EdmNavigationProperty)edmObj;
        context.jpaEntityType=findJPAEntityType(context.em,propInfo.toRole.type.name);
        context.ees=metadata.findEdmEntitySet(JPAEdmGenerator.getEntitySetName(context.jpaEntityType));
        prop=alias + ""String_Node_Str"" + prop;
        alias=""String_Node_Str"" + Integer.toString(propCount);
        from=String.format(""String_Node_Str"",from,prop,alias);
        if (propSplit.length > 1) {
          Object entityKey=OptionsQueryParser.parseIdObject(""String_Node_Str"" + propSplit[1]);
          context.keyPropertyName=JPAEdmGenerator.getId(context.jpaEntityType).getName();
          context.typeSafeEntityKey=typeSafeEntityKey(em,context.jpaEntityType,entityKey);
          where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
        }
      }
 else       if (edmObj instanceof EdmProperty) {
        EdmProperty propInfo=(EdmProperty)edmObj;
        alias=alias + ""String_Node_Str"" + propInfo.name;
        context.ees=null;
      }
      if (edmObj == null) {
        throw new EntityNotFoundException(String.format(""String_Node_Str"",pn));
      }
    }
  }
  String jpql=String.format(""String_Node_Str"",alias,from);
  JPQLGenerator jpqlGen=new JPQLGenerator(context.keyPropertyName,alias);
  if (context.query.filter != null) {
    String filterPredicate=jpqlGen.toJpql(context.query.filter);
    where=addWhereExpression(where,filterPredicate,""String_Node_Str"");
  }
  if (context.query.skipToken != null) {
    String skipPredicate=jpqlGen.toJpql(parseSkipToken(jpqlGen,context.query.orderBy,context.query.skipToken));
    where=addWhereExpression(where,skipPredicate,""String_Node_Str"");
  }
  if (where != null) {
    jpql=String.format(""String_Node_Str"",jpql,where);
  }
  if (context.query.orderBy != null) {
    String orders=""String_Node_Str"";
    for (    OrderByExpression orderBy : context.query.orderBy) {
      String field=jpqlGen.toJpql(orderBy.getExpression());
      if (orderBy.isAscending()) {
        orders=orders + field + ""String_Node_Str"";
      }
 else {
        orders=String.format(""String_Node_Str"",orders,field);
      }
    }
    jpql=jpql + ""String_Node_Str"" + orders.substring(0,orders.length() - 1);
  }
  Query tq=em.createQuery(jpql);
  Integer inlineCount=context.query.inlineCount == InlineCount.ALLPAGES ? tq.getResultList().size() : null;
  int queryMaxResult=maxResults;
  if (context.query.top != null) {
    if (context.query.top.equals(0)) {
      return DynamicEntitiesResponse.entities(null,inlineCount,null);
    }
    if (context.query.top < maxResults) {
      queryMaxResult=context.query.top;
    }
  }
  tq=tq.setMaxResults(queryMaxResult + 1);
  if (context.query.skip != null) {
    tq=tq.setFirstResult(context.query.skip);
  }
  @SuppressWarnings(""String_Node_Str"") List<Object> results=tq.getResultList();
  List<OEntity> entities=new LinkedList<OEntity>();
  if (edmObj instanceof EdmProperty) {
    EdmProperty propInfo=(EdmProperty)edmObj;
    if (results.size() != 1)     throw new RuntimeException(""String_Node_Str"" + results.size());
    Object value=results.get(0);
    OProperty<?> op=OProperties.simple(((EdmProperty)propInfo).name,((EdmProperty)propInfo).type,value);
    return DynamicEntitiesResponse.property(op);
  }
 else {
    entities=Enumerable.create(results).take(queryMaxResult).select(new Func1<Object,OEntity>(){
      public OEntity apply(      final Object input){
        return makeEntity(context,input);
      }
    }
).toList();
  }
  boolean useSkipToken=context.query.top != null ? context.query.top > maxResults && results.size() > queryMaxResult : results.size() > queryMaxResult;
  String skipToken=null;
  if (useSkipToken) {
    OEntity last=Enumerable.create(entities).last();
    skipToken=createSkipToken(context,last);
  }
  return DynamicEntitiesResponse.entities(entities,inlineCount,skipToken);
}","private DynamicEntitiesResponse enumJpaEntities(final Context context,final String navProp){
  String alias=""String_Node_Str"";
  String from=context.jpaEntityType.getName() + ""String_Node_Str"" + alias;
  String where=null;
  Object edmObj=null;
  if (navProp != null) {
    where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
    String prop=null;
    int propCount=0;
    for (    String pn : navProp.split(""String_Node_Str"")) {
      String[] propSplit=pn.split(""String_Node_Str"");
      prop=propSplit[0];
      propCount++;
      if (edmObj instanceof EdmProperty) {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",alias));
      }
      edmObj=metadata.findEdmProperty(prop);
      if (edmObj instanceof EdmNavigationProperty) {
        EdmNavigationProperty propInfo=(EdmNavigationProperty)edmObj;
        context.jpaEntityType=findJPAEntityType(context.em,propInfo.toRole.type.name);
        context.ees=metadata.findEdmEntitySet(JPAEdmGenerator.getEntitySetName(context.jpaEntityType));
        prop=alias + ""String_Node_Str"" + prop;
        alias=""String_Node_Str"" + Integer.toString(propCount);
        from=String.format(""String_Node_Str"",from,prop,alias);
        if (propSplit.length > 1) {
          Object entityKey=OptionsQueryParser.parseIdObject(""String_Node_Str"" + propSplit[1]);
          context.keyPropertyName=JPAEdmGenerator.getId(context.jpaEntityType).getName();
          context.typeSafeEntityKey=typeSafeEntityKey(em,context.jpaEntityType,entityKey);
          where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
        }
      }
 else       if (edmObj instanceof EdmProperty) {
        EdmProperty propInfo=(EdmProperty)edmObj;
        alias=alias + ""String_Node_Str"" + propInfo.name;
        context.ees=null;
      }
      if (edmObj == null) {
        throw new EntityNotFoundException(String.format(""String_Node_Str"",pn));
      }
    }
  }
  String jpql=String.format(""String_Node_Str"",alias,from);
  JPQLGenerator jpqlGen=new JPQLGenerator(context.keyPropertyName,alias);
  if (context.query.filter != null) {
    String filterPredicate=jpqlGen.toJpql(context.query.filter);
    where=addWhereExpression(where,filterPredicate,""String_Node_Str"");
  }
  if (context.query.skipToken != null) {
    String skipPredicate=jpqlGen.toJpql(parseSkipToken(jpqlGen,context.query.orderBy,context.query.skipToken));
    where=addWhereExpression(where,skipPredicate,""String_Node_Str"");
  }
  if (where != null) {
    jpql=String.format(""String_Node_Str"",jpql,where);
  }
  if (context.query.orderBy != null) {
    String orders=""String_Node_Str"";
    for (    OrderByExpression orderBy : context.query.orderBy) {
      String field=jpqlGen.toJpql(orderBy.getExpression());
      if (orderBy.isAscending()) {
        orders=orders + field + ""String_Node_Str"";
      }
 else {
        orders=String.format(""String_Node_Str"",orders,field);
      }
    }
    jpql=jpql + ""String_Node_Str"" + orders.substring(0,orders.length() - 1);
  }
  Query tq=context.em.createQuery(jpql);
  Integer inlineCount=context.query.inlineCount == InlineCount.ALLPAGES ? tq.getResultList().size() : null;
  int queryMaxResult=maxResults;
  if (context.query.top != null) {
    if (context.query.top.equals(0)) {
      return DynamicEntitiesResponse.entities(null,inlineCount,null);
    }
    if (context.query.top < maxResults) {
      queryMaxResult=context.query.top;
    }
  }
  tq=tq.setMaxResults(queryMaxResult + 1);
  if (context.query.skip != null) {
    tq=tq.setFirstResult(context.query.skip);
  }
  @SuppressWarnings(""String_Node_Str"") List<Object> results=tq.getResultList();
  List<OEntity> entities=new LinkedList<OEntity>();
  if (edmObj instanceof EdmProperty) {
    EdmProperty propInfo=(EdmProperty)edmObj;
    if (results.size() != 1)     throw new RuntimeException(""String_Node_Str"" + results.size());
    Object value=results.get(0);
    OProperty<?> op=OProperties.simple(((EdmProperty)propInfo).name,((EdmProperty)propInfo).type,value);
    return DynamicEntitiesResponse.property(op);
  }
 else {
    entities=Enumerable.create(results).take(queryMaxResult).select(new Func1<Object,OEntity>(){
      public OEntity apply(      final Object input){
        return makeEntity(context,input);
      }
    }
).toList();
  }
  boolean useSkipToken=context.query.top != null ? context.query.top > maxResults && results.size() > queryMaxResult : results.size() > queryMaxResult;
  String skipToken=null;
  if (useSkipToken) {
    OEntity last=Enumerable.create(entities).last();
    skipToken=createSkipToken(context,last);
  }
  return DynamicEntitiesResponse.entities(entities,inlineCount,skipToken);
}",0.999165971643036
59632,"/** 
 * adds the property. This property can be a navigation property too. In this case a link will be added. If it's the meta data the information will be added to the entry too.
 */
protected void addProperty(JsonEntry entry,EdmEntitySet ees,String name,JsonStreamReader jsr){
  if (METADATA_PROPERTY.equals(name)) {
    JsonEntryMetaData jemd=parseMetadata(jsr);
    entry.etag=jemd.etag;
    JsonEvent event=jsr.nextEvent();
    ensureStartProperty(event);
    name=event.asStartProperty().getName();
  }
  JsonEvent event=jsr.nextEvent();
  if (event.isEndProperty()) {
    EdmProperty ep=ees.type.getProperty(name);
    if (ep == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ ees.name);
    }
    entry.properties.add(JsonTypeConverter.parse(name,ep.type,event.asEndProperty().getValue()));
  }
 else   if (event.isStartObject()) {
    JsonObjectPropertyValue val=getValue(event,ees,name,jsr);
    if (val.uri != null) {
      entry.links.add(OLinks.relatedEntity(name,name,val.uri));
    }
 else     if (val.entity != null) {
      entry.links.add(OLinks.relatedEntityInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entity));
    }
 else {
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entities));
    }
  }
 else   if (event.isStartArray()) {
    ensureNext(jsr);
    event=jsr.nextEvent();
    if (event.isValue()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ees.name + ""String_Node_Str""+ name);
    }
 else     if (event.isStartObject()) {
      EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
      if (navProp == null) {
        System.out.println(""String_Node_Str"");
      }
      ees=metadata.getEdmEntitySet(navProp.toRole.type);
      List<OEntity> entities=new ArrayList<OEntity>();
      do {
        entities.add(parseEntry(ees,jsr).getEntity());
        event=jsr.nextEvent();
      }
 while (!event.isEndArray());
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,entities));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    ensureEndProperty(jsr.nextEvent());
  }
}","/** 
 * adds the property. This property can be a navigation property too. In this case a link will be added. If it's the meta data the information will be added to the entry too.
 */
protected void addProperty(JsonEntry entry,EdmEntitySet ees,String name,JsonStreamReader jsr){
  if (METADATA_PROPERTY.equals(name)) {
    JsonEntryMetaData jemd=parseMetadata(jsr);
    entry.etag=jemd.etag;
    JsonEvent event=jsr.nextEvent();
    ensureStartProperty(event);
    name=event.asStartProperty().getName();
  }
  JsonEvent event=jsr.nextEvent();
  if (event.isEndProperty()) {
    EdmProperty ep=ees.type.getProperty(name);
    if (ep == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ ees.name);
    }
    entry.properties.add(JsonTypeConverter.parse(name,ep.type,event.asEndProperty().getValue()));
  }
 else   if (event.isStartObject()) {
    JsonObjectPropertyValue val=getValue(event,ees,name,jsr);
    if (val.uri != null) {
      entry.links.add(OLinks.relatedEntity(name,name,val.uri));
    }
 else     if (val.entity != null) {
      entry.links.add(OLinks.relatedEntityInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entity));
    }
 else {
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entities));
    }
  }
 else   if (event.isStartArray()) {
    ensureNext(jsr);
    event=jsr.nextEvent();
    if (event.isValue()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ees.name + ""String_Node_Str""+ name);
    }
 else     if (event.isStartObject()) {
      EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
      ees=metadata.getEdmEntitySet(navProp.toRole.type);
      List<OEntity> entities=new ArrayList<OEntity>();
      do {
        entities.add(parseEntry(ees,jsr).getEntity());
        event=jsr.nextEvent();
      }
 while (!event.isEndArray());
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,entities));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    ensureEndProperty(jsr.nextEvent());
  }
}",0.794813466787989
59633,"protected JsonObjectPropertyValue getValue(JsonEvent event,EdmEntitySet ees,String name,JsonStreamReader jsr){
  JsonObjectPropertyValue rt=new JsonObjectPropertyValue();
  ensureStartObject(event);
  event=jsr.nextEvent();
  ensureStartProperty(event);
  if (DEFERRED_PROPERTY.equals(event.asStartProperty().getName())) {
    ensureStartObject(jsr.nextEvent());
    ensureStartProperty(jsr.nextEvent(),URI_PROPERTY);
    String uri=jsr.nextEvent().asEndProperty().getValue();
    rt.uri=uri;
    ensureEndObject(jsr.nextEvent());
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (RESULTS_PROPERTY.equals(event.asStartProperty().getName())) {
    if (version == ODataVersion.V1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ensureStartArray(jsr.nextEvent());
    Feed feed=parseFeed(metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    rt.entities=Enumerable.create(feed.getEntries()).cast(JsonEntry.class).select(new Func1<JsonEntry,OEntity>(){
      @Override public OEntity apply(      JsonEntry input){
        return input.getEntity();
      }
    }
).toList();
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (METADATA_PROPERTY.equals(event.asStartProperty().getName())) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    JsonEntryMetaData jemd=parseMetadata(jsr);
    JsonEntry refentry=parseEntry(jemd,metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    if (isResponse) {
      rt.entity=refentry.getEntity();
    }
 else {
      boolean isInlined=!refentry.properties.isEmpty() || !refentry.links.isEmpty();
      if (isInlined) {
        rt.entity=refentry.getEntity();
      }
 else {
        rt.uri=jemd.uri;
      }
    }
  }
 else   if (event.isStartProperty()) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ees=metadata.getEdmEntitySet(navProp.toRole.type);
    JsonEntry refentry=new JsonEntry();
    refentry.properties=new ArrayList<OProperty<?>>();
    refentry.links=new ArrayList<OLink>();
    do {
      addProperty(refentry,ees,event.asStartProperty().getName(),jsr);
      event=jsr.nextEvent();
    }
 while (!event.isEndObject());
    rt.entity=refentry.getEntity();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ensureEndProperty(jsr.nextEvent());
  return rt;
}","protected JsonObjectPropertyValue getValue(JsonEvent event,EdmEntitySet ees,String name,JsonStreamReader jsr){
  JsonObjectPropertyValue rt=new JsonObjectPropertyValue();
  ensureStartObject(event);
  event=jsr.nextEvent();
  ensureStartProperty(event);
  if (DEFERRED_PROPERTY.equals(event.asStartProperty().getName())) {
    ensureStartObject(jsr.nextEvent());
    ensureStartProperty(jsr.nextEvent(),URI_PROPERTY);
    String uri=jsr.nextEvent().asEndProperty().getValue();
    rt.uri=uri;
    ensureEndObject(jsr.nextEvent());
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (RESULTS_PROPERTY.equals(event.asStartProperty().getName())) {
    if (version == ODataVersion.V1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ensureStartArray(jsr.nextEvent());
    Feed feed=parseFeed(metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    rt.entities=Enumerable.create(feed.getEntries()).cast(JsonEntry.class).select(new Func1<JsonEntry,OEntity>(){
      @Override public OEntity apply(      JsonEntry input){
        return input.getEntity();
      }
    }
).toList();
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (METADATA_PROPERTY.equals(event.asStartProperty().getName())) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    JsonEntryMetaData jemd=parseMetadata(jsr);
    JsonEntry refentry=parseEntry(jemd,metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    if (isResponse) {
      rt.entity=refentry.getEntity();
    }
 else {
      boolean isInlined=!refentry.properties.isEmpty() || !refentry.links.isEmpty();
      if (isInlined) {
        rt.entity=refentry.getEntity();
      }
 else {
        rt.uri=jemd.uri;
      }
    }
  }
 else   if (event.isStartProperty()) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ees=metadata.getEdmEntitySet(navProp.toRole.type);
    JsonEntry refentry=new JsonEntry();
    refentry.properties=new ArrayList<OProperty<?>>();
    refentry.links=new ArrayList<OLink>();
    do {
      addProperty(refentry,ees,event.asStartProperty().getName(),jsr);
      event=jsr.nextEvent();
    }
 while (!event.isEndObject());
    rt.entity=toOEntity(ees,refentry.properties,refentry.links);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ensureEndProperty(jsr.nextEvent());
  return rt;
}",0.9901586663988752
59634,"public void insertEntityWithInlinedEntityJson(){
  insertEntityWithInlinedEntity(ODataConsumer.create(FormatType.JSON,endpointUri));
}","@Test public void insertEntityWithInlinedEntityJson(){
  insertEntityWithInlinedEntity(ODataConsumer.create(FormatType.JSON,endpointUri));
}",0.978102189781022
59635,"public ODataClient(FormatType type,Class<F> feedClass,Class<E> entryClass,OClientBehavior... behaviors){
  this.feedClass=feedClass;
  this.entryClass=entryClass;
  this.behaviors=Enumerable.create(requiredBehaviors).concat(Enumerable.create(behaviors)).toArray(OClientBehavior.class);
  this.type=type;
  this.client=ClientUtil.newClient(behaviors);
}","@SuppressWarnings(""String_Node_Str"") public ODataClient(FormatType type,Class<?> feedClass,Class<?> entryClass,OClientBehavior... behaviors){
  this.feedClass=(Class<F>)feedClass;
  this.entryClass=(Class<E>)entryClass;
  this.behaviors=Enumerable.create(requiredBehaviors).concat(Enumerable.create(behaviors)).toArray(OClientBehavior.class);
  this.type=type;
  this.client=ClientUtil.newClient(behaviors);
}",0.6859395532194481
59636,"public OEntityRef<Void> deleteEntity(String entitySetName,Object... key){
  return createDeleteOEntityRefImpl(entitySetName,key);
}","public OEntityRef<Void> deleteEntity(String entitySetName,Object... key){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OEntityRefImpl<Void,Feed<Entry>,Entry>(true,client,null,serviceRootUri,getMetadata(),entitySetName,key,mapping);
}",0.5401459854014599
59637,"public <T>OEntityRef<T> getEntity(Class<T> entityType,String entitySetName,Object... key){
  return createGetOEntityRefImpl(entityType,entitySetName,key);
}","public <T>OEntityRef<T> getEntity(Class<T> entityType,String entitySetName,Object... key){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OEntityRefImpl<T,Feed<Entry>,Entry>(false,client,entityType,serviceRootUri,getMetadata(),entitySetName,key,mapping);
}",0.5733041575492341
59638,"public OCreate<OEntity> createEntity(String entitySetName){
  return createOCreateImpl(entitySetName);
}","public OCreate<OEntity> createEntity(String entitySetName){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OCreateImpl<OEntity,Feed<Entry>,Entry>(client,serviceRootUri,getMetadata(),entitySetName,mapping);
}",0.5056179775280899
59639,"public OModify<OEntity> updateEntity(OEntity entity,String entitySetName,Object... key){
  return createOModifyImpl(entity,entitySetName,key);
}","public OModify<OEntity> updateEntity(OEntity entity,String entitySetName,Object... key){
  return new OModifyImpl<OEntity,Feed<Entry>,Entry>(entity,client,serviceRootUri,entitySetName,key);
}",0.8298507462686567
59640,"public <T>OQuery<T> getEntities(Class<T> entityType,String entitySetName){
  return createOQueryImpl(entityType,entitySetName);
}","public <T>OQuery<T> getEntities(Class<T> entityType,String entitySetName){
  FeedCustomizationMapping mapping=getFeedCustomizationMapping(entitySetName);
  return new OQueryImpl<T,Feed<Entry>,Entry>(client,entityType,serviceRootUri,getMetadata(),entitySetName,mapping);
}",0.525
59641,"public OModify<OEntity> mergeEntity(String entitySetName,Object... key){
  return createOModifyImpl(null,entitySetName,key);
}","public OModify<OEntity> mergeEntity(String entitySetName,Object... key){
  return new OModifyImpl<OEntity,Feed<Entry>,Entry>(null,client,serviceRootUri,entitySetName,key);
}",0.8093645484949833
59642,"private void applyOLinks(EntityManager em,EntityType<?> jpaEntityType,List<OLink> links,Object jpaEntity){
  try {
    for (    final OLink link : links) {
      String[] propNameSplit=link.getRelation().split(""String_Node_Str"");
      String propName=propNameSplit[propNameSplit.length - 1];
      if (link instanceof ORelatedEntitiesLinkInline) {
        CollectionAttribute<?,?> att=jpaEntityType.getCollection(propName);
        Member member=att.getJavaMember();
        EntityType<?> collJpaEntityType=(EntityType<?>)att.getElementType();
        OneToMany oneToMany=getAnnotation(member,OneToMany.class);
        Member backRef=null;
        if (oneToMany != null && oneToMany.mappedBy() != null && !oneToMany.mappedBy().isEmpty()) {
          backRef=collJpaEntityType.getAttribute(oneToMany.mappedBy()).getJavaMember();
        }
        @SuppressWarnings(""String_Node_Str"") Collection<Object> coll=(Collection<Object>)getValue(jpaEntity,member);
        for (        OEntity oentity : ((ORelatedEntitiesLinkInline)link).getRelatedEntities()) {
          Object collJpaEntity=createNewJPAEntity(em,collJpaEntityType,oentity,true);
          if (backRef != null) {
            setValue(collJpaEntity,backRef,jpaEntity);
          }
          coll.add(collJpaEntity);
        }
      }
 else       if (link instanceof ORelatedEntityLink) {
      }
 else {
        Attribute<?,?> att=jpaEntityType.getAttribute(propName);
        Member member=att.getJavaMember();
        WebResource webResource=httpClient.resource(link.getHref());
        String requestEntity=webResource.get(String.class);
        OEntity relOEntity=BaseResource.convertFromString(requestEntity);
        String term=((AtomInfo)relOEntity).getCategoryTerm();
        EdmEntitySet ees=metadata.getEdmEntitySet(term.split(""String_Node_Str"")[1]);
        EntityType<?> jpaRelType=findJPAEntityType(em,ees.type.name);
        Object relEntity=createNewJPAEntity(em,jpaRelType,relOEntity,false);
        setValue(jpaEntity,member,relEntity);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private void applyOLinks(EntityManager em,EntityType<?> jpaEntityType,List<OLink> links,Object jpaEntity){
  try {
    for (    final OLink link : links) {
      String[] propNameSplit=link.getRelation().split(""String_Node_Str"");
      String propName=propNameSplit[propNameSplit.length - 1];
      if (link instanceof ORelatedEntitiesLinkInline) {
        CollectionAttribute<?,?> att=jpaEntityType.getCollection(propName);
        Member member=att.getJavaMember();
        EntityType<?> collJpaEntityType=(EntityType<?>)att.getElementType();
        OneToMany oneToMany=getAnnotation(member,OneToMany.class);
        Member backRef=null;
        if (oneToMany != null && oneToMany.mappedBy() != null && !oneToMany.mappedBy().isEmpty()) {
          backRef=collJpaEntityType.getAttribute(oneToMany.mappedBy()).getJavaMember();
        }
        @SuppressWarnings(""String_Node_Str"") Collection<Object> coll=(Collection<Object>)getValue(jpaEntity,member);
        for (        OEntity oentity : ((ORelatedEntitiesLinkInline)link).getRelatedEntities()) {
          Object collJpaEntity=createNewJPAEntity(em,collJpaEntityType,oentity,true);
          if (backRef != null) {
            setValue(collJpaEntity,backRef,jpaEntity);
          }
          coll.add(collJpaEntity);
        }
      }
 else       if (link instanceof ORelatedEntityLinkInline) {
      }
 else {
        Attribute<?,?> att=jpaEntityType.getAttribute(propName);
        Member member=att.getJavaMember();
        WebResource webResource=httpClient.resource(link.getHref());
        String requestEntity=webResource.get(String.class);
        OEntity relOEntity=BaseResource.convertFromString(requestEntity);
        String term=((AtomInfo)relOEntity).getCategoryTerm();
        EdmEntitySet ees=metadata.getEdmEntitySet(term.split(""String_Node_Str"")[1]);
        EntityType<?> jpaRelType=findJPAEntityType(em,ees.type.name);
        Object relEntity=createNewJPAEntity(em,jpaRelType,relOEntity,false);
        setValue(jpaEntity,member,relEntity);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9985714285714286
59643,"public static void main(String... args){
  ODataConsumer c=ODataConsumer.create(ODataEndpoints.NETFLIX);
  ODataConsumer.dump.all(true);
  int morganSpurlockId=c.getEntities(""String_Node_Str"").filter(""String_Node_Str"").execute().first().getProperty(""String_Node_Str"",Integer.class).getValue();
  List<OEntity> titlesActedIn=c.getEntities(""String_Node_Str"").nav(morganSpurlockId,""String_Node_Str"").execute().toList();
  for (  OEntity title : titlesActedIn) {
    for (    OProperty<?> p : title.getProperties()) {
      report(""String_Node_Str"",p.getName(),p.getValue());
    }
    report(""String_Node_Str"");
    for (    OLink link : title.getLinks()) {
      System.out.println(""String_Node_Str"" + link);
    }
  }
  report(""String_Node_Str"" + titlesActedIn.size());
}","public static void main(String... args){
  ODataConsumer c=ODataConsumer.create(ODataEndpoints.NETFLIX);
  int morganSpurlockId=c.getEntities(""String_Node_Str"").filter(""String_Node_Str"").execute().first().getProperty(""String_Node_Str"",Integer.class).getValue();
  List<OEntity> titlesActedIn=c.getEntities(""String_Node_Str"").nav(morganSpurlockId,""String_Node_Str"").execute().toList();
  for (  OEntity title : titlesActedIn) {
    for (    OProperty<?> p : title.getProperties()) {
      report(""String_Node_Str"",p.getName(),p.getValue());
    }
    report(""String_Node_Str"");
  }
  report(""String_Node_Str"" + titlesActedIn.size());
}",0.8603988603988604
59644,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  ODataConsumer.dump.requestHeaders(true);
  Enumerable<String> smallServices=Enumerable.create(ODataEndpoints.NORTHWIND,ODataEndpoints.ODATA4JSAMPLE_APPSPOT,ODataEndpoints.ODATA_WEBSITE_DATA,ODataEndpoints.ODATA_TEST_SERVICE_READONLY,ODataEndpoints.NERD_DINNER,ODataEndpoints.MIX10,ODataEndpoints.TECH_ED,ODataEndpoints.EU_TECH_ED,ODataEndpoints.PLURALSIGHT,ODataEndpoints.TELERIK_TV,ODataEndpoints.AGILITRAIN,ODataEndpoints.PROAGORA_FR,ODataEndpoints.PROAGORA_EN);
  Enumerable<String> brokenServices=Enumerable.create(ODataEndpoints.CITY_OF_EDMONTON,ODataEndpoints.DEVEXPRESS,ODataEndpoints.DEVTRANSIT,ODataEndpoints.LOGMYTIME);
  Enumerable<String> largeServices=Enumerable.create(ODataEndpoints.BASEBALL_STATS,ODataEndpoints.NETFLIX,ODataEndpoints.STACK_OVERFLOW,ODataEndpoints.SUPER_USER,ODataEndpoints.SERVER_FAULT,ODataEndpoints.META_STACK_OVERFLOW,ODataEndpoints.WORLD_CUP);
  for (  String endpoint : smallServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).execute());
    }
    return;
  }
  for (  String endpoint : largeServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).top(1).execute());
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  ODataConsumer.dump.requestHeaders(true);
  Enumerable<String> smallServices=Enumerable.create(ODataEndpoints.NORTHWIND,ODataEndpoints.ODATA4JSAMPLE_APPSPOT,ODataEndpoints.ODATA_WEBSITE_DATA,ODataEndpoints.ODATA_TEST_SERVICE_READONLY,ODataEndpoints.NERD_DINNER,ODataEndpoints.TECH_ED,ODataEndpoints.EU_TECH_ED,ODataEndpoints.PLURALSIGHT,ODataEndpoints.TELERIK_TV,ODataEndpoints.AGILITRAIN,ODataEndpoints.PROAGORA_FR,ODataEndpoints.PROAGORA_EN,ODataEndpoints.INETA_LIVE);
  Enumerable<String> brokenServices=Enumerable.create(ODataEndpoints.CITY_OF_EDMONTON,ODataEndpoints.DEVEXPRESS,ODataEndpoints.DEVTRANSIT,ODataEndpoints.LOGMYTIME,ODataEndpoints.PDC_2010,ODataEndpoints.MIX10);
  Enumerable<String> largeServices=Enumerable.create(ODataEndpoints.BASEBALL_STATS,ODataEndpoints.NETFLIX,ODataEndpoints.WORLD_CUP);
  for (  String endpoint : smallServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).execute());
    }
  }
  for (  String endpoint : largeServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).top(1).execute());
    }
  }
}",0.5206167084976694
59645,"public XmlDataProducer(){
  String namespace=""String_Node_Str"";
  List<EdmProperty> properties=new ArrayList<EdmProperty>();
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  List<EdmEntityType> entityTypes=new ArrayList<EdmEntityType>();
  EdmEntityType type=new EdmEntityType(namespace,null,""String_Node_Str"",null,Arrays.asList(""String_Node_Str""),properties,null);
  entityTypes.add(type);
  List<EdmEntitySet> entitySets=new ArrayList<EdmEntitySet>();
  entitySets.add(new EdmEntitySet(""String_Node_Str"",type));
  EdmEntityContainer container=new EdmEntityContainer(namespace + ""String_Node_Str"",true,null,entitySets,null,null);
  EdmSchema modelSchema=new EdmSchema(namespace + ""String_Node_Str"",null,entityTypes,null,null,Enumerable.create(container).toList());
  EdmSchema containerSchema=new EdmSchema(namespace + ""String_Node_Str"",null,null,null,null,Enumerable.create(container).toList());
  metadata=new EdmDataServices(ODataConstants.DATA_SERVICE_VERSION,Enumerable.create(modelSchema,containerSchema).toList());
  xmlInputFactory=XMLInputFactory.newInstance();
}","public XmlDataProducer(){
  String namespace=""String_Node_Str"";
  List<EdmProperty> properties=new ArrayList<EdmProperty>();
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  properties.add(new EdmProperty(""String_Node_Str"",EdmType.STRING,false));
  List<EdmEntityType> entityTypes=new ArrayList<EdmEntityType>();
  EdmEntityType type=new EdmEntityType(namespace,null,""String_Node_Str"",null,Arrays.asList(""String_Node_Str""),properties,null);
  entityTypes.add(type);
  List<EdmEntitySet> entitySets=new ArrayList<EdmEntitySet>();
  entitySets.add(new EdmEntitySet(""String_Node_Str"",type));
  EdmEntityContainer container=new EdmEntityContainer(namespace + ""String_Node_Str"",true,null,entitySets,null,null);
  EdmSchema modelSchema=new EdmSchema(namespace + ""String_Node_Str"",null,entityTypes,null,null,null);
  EdmSchema containerSchema=new EdmSchema(namespace + ""String_Node_Str"",null,null,null,null,Enumerable.create(container).toList());
  metadata=new EdmDataServices(ODataConstants.DATA_SERVICE_VERSION,Enumerable.create(modelSchema,containerSchema).toList());
  xmlInputFactory=XMLInputFactory.newInstance();
}",0.9883489627735152
59646,"private static CommonExpression readExpression(List<Token> tokens){
  CommonExpression rt=null;
  tokens=trimWhitespace(tokens);
  Token lastToken=tokens.get(tokens.size() - 1);
  if (lastToken.type == TokenType.WORD && (lastToken.value.equals(""String_Node_Str"") || lastToken.value.equals(""String_Node_Str""))) {
    return Expression.orderBy(readExpression(tokens.subList(0,tokens.size() - 1)),lastToken.value.equals(""String_Node_Str""));
  }
  tokens=processParentheses(tokens);
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.WORD && tokens.get(1).type == TokenType.QUOTED_STRING) {
    String word=tokens.get(0).value;
    String value=unquote(tokens.get(1).value);
    if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIME_FORMATTER.parseDateTime(value);
      return Expression.dateTime(new LocalDateTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=TIME_FORMATTER.parseDateTime(value);
      return Expression.time(new LocalTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIMEOFFSET_FORMATTER.parseDateTime(value);
      return Expression.dateTimeOffset(dt);
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.guid(Guid.fromString(value));
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.decimal(new BigDecimal(value));
    }
 else     if (word.equals(""String_Node_Str"") || word.equals(""String_Node_Str"")) {
      try {
        byte[] bValue=Hex.decodeHex(value.toCharArray());
        return Expression.binary(bValue);
      }
 catch (      DecoderException e) {
        throw new RuntimeException(e);
      }
    }
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    long longValue=Long.parseLong(tokens.get(0).value);
    return Expression.int64(longValue);
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.SYMBOL && tokens.get(2).value.equals(""String_Node_Str"") && tokens.get(3).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(3).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(2).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 6 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.SYMBOL && tokens.get(4).value.equals(""String_Node_Str"") && tokens.get(5).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(5).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 5 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(4).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(4).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 1) {
    final Token token=tokens.get(0);
    if (token.type == TokenType.QUOTED_STRING) {
      return Expression.string(unquote(token.value));
    }
 else     if (token.type == TokenType.WORD) {
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.null_();
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(true);
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(false);
      }
      return Expression.simpleProperty(token.value);
    }
 else     if (token.type == TokenType.NUMBER) {
      int value=Integer.parseInt(token.value);
      return Expression.integral(value);
    }
 else     if (token.type == TokenType.EXPRESSION) {
      return ((ExpressionToken)token).expression;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.or((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.and((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.eq(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ne(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.lt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.gt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.le(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ge(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.add(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.sub(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mul(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.div(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mod(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",true,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.not(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",false,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.negate(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  throw new RuntimeException(""String_Node_Str"");
}","private static CommonExpression readExpression(List<Token> tokens){
  CommonExpression rt=null;
  tokens=trimWhitespace(tokens);
  Token lastToken=tokens.get(tokens.size() - 1);
  if (lastToken.type == TokenType.WORD && (lastToken.value.equals(""String_Node_Str"") || lastToken.value.equals(""String_Node_Str""))) {
    return Expression.orderBy(readExpression(tokens.subList(0,tokens.size() - 1)),lastToken.value.equals(""String_Node_Str""));
  }
  tokens=processParentheses(tokens);
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.WORD && tokens.get(1).type == TokenType.QUOTED_STRING) {
    String word=tokens.get(0).value;
    String value=unquote(tokens.get(1).value);
    if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIME_FORMATTER.parseDateTime(value);
      return Expression.dateTime(new LocalDateTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=TIME_FORMATTER.parseDateTime(value);
      return Expression.time(new LocalTime(dt));
    }
 else     if (word.equals(""String_Node_Str"")) {
      DateTime dt=DATETIMEOFFSET_FORMATTER.parseDateTime(value);
      return Expression.dateTimeOffset(dt);
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.guid(Guid.fromString(value));
    }
 else     if (word.equals(""String_Node_Str"")) {
      return Expression.decimal(new BigDecimal(value));
    }
 else     if (word.equals(""String_Node_Str"") || word.equals(""String_Node_Str"")) {
      try {
        byte[] bValue=Hex.decodeHex(value.toCharArray());
        return Expression.binary(bValue);
      }
 catch (      DecoderException e) {
        throw new RuntimeException(e);
      }
    }
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    long longValue=Long.parseLong(tokens.get(0).value);
    return Expression.int64(longValue);
  }
  if (tokens.size() == 2 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).value.equals(""String_Node_Str"")) {
    float floatValue=Float.parseFloat(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.single(floatValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 4 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.SYMBOL && tokens.get(2).value.equals(""String_Node_Str"") && tokens.get(3).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(3).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 3 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.WORD && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(2).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 6 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.SYMBOL && tokens.get(4).value.equals(""String_Node_Str"") && tokens.get(5).type == TokenType.NUMBER) {
    double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(5).value);
    return Expression.double_(doubleValue);
  }
  if (tokens.size() == 5 && tokens.get(0).type == TokenType.NUMBER && tokens.get(1).type == TokenType.SYMBOL && tokens.get(1).value.equals(""String_Node_Str"") && tokens.get(2).type == TokenType.NUMBER && tokens.get(3).type == TokenType.WORD && tokens.get(3).value.equals(""String_Node_Str"") && tokens.get(4).type == TokenType.NUMBER) {
    int e=Integer.parseInt(tokens.get(4).value);
    if (e < 1) {
      double doubleValue=Double.parseDouble(tokens.get(0).value + ""String_Node_Str"" + tokens.get(2).value+ ""String_Node_Str""+ tokens.get(4).value);
      return Expression.double_(doubleValue);
    }
  }
  if (tokens.size() == 1) {
    final Token token=tokens.get(0);
    if (token.type == TokenType.QUOTED_STRING) {
      return Expression.string(unquote(token.value));
    }
 else     if (token.type == TokenType.WORD) {
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.null_();
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(true);
      }
      if (token.value.equals(""String_Node_Str"")) {
        return Expression.boolean_(false);
      }
      return Expression.simpleProperty(token.value);
    }
 else     if (token.type == TokenType.NUMBER) {
      try {
        int value=Integer.parseInt(token.value);
        return Expression.integral(value);
      }
 catch (      NumberFormatException e) {
        long value=Long.parseLong(token.value);
        return Expression.int64(value);
      }
    }
 else     if (token.type == TokenType.EXPRESSION) {
      return ((ExpressionToken)token).expression;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.or((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      assertType(lhs,BoolCommonExpression.class);
      assertType(rhs,BoolCommonExpression.class);
      return Expression.and((BoolCommonExpression)lhs,(BoolCommonExpression)rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.eq(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ne(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.lt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.gt(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.le(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.ge(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.add(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.sub(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mul(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.div(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processBinaryExpression(tokens,""String_Node_Str"",new Func2<CommonExpression,CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression lhs,    CommonExpression rhs){
      return Expression.mod(lhs,rhs);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",true,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.not(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  rt=processUnaryExpression(tokens,""String_Node_Str"",false,new Func1<CommonExpression,CommonExpression>(){
    public CommonExpression apply(    CommonExpression expression){
      return Expression.negate(expression);
    }
  }
);
  if (rt != null) {
    return rt;
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.9925050044225128
59647,"public static boolean evaluate(BoolCommonExpression expression,Object target,PropertyModel properties){
  if (expression instanceof EqExpression) {
    return equals((EqExpression)expression,target,properties);
  }
  if (expression instanceof NeExpression) {
    return !equals((NeExpression)expression,target,properties);
  }
  if (expression instanceof AndExpression) {
    AndExpression e=(AndExpression)expression;
    return evaluate(e.getLHS(),target,properties) && evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof OrExpression) {
    OrExpression e=(OrExpression)expression;
    return evaluate(e.getLHS(),target,properties) || evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof BooleanLiteral) {
    return ((BooleanLiteral)expression).getValue();
  }
  if (expression instanceof GtExpression) {
    return compareTo((GtExpression)expression,target,properties) > 0;
  }
  if (expression instanceof LtExpression) {
    return compareTo((LtExpression)expression,target,properties) < 0;
  }
  if (expression instanceof GeExpression) {
    return compareTo((GeExpression)expression,target,properties) >= 0;
  }
  if (expression instanceof LeExpression) {
    return compareTo((LeExpression)expression,target,properties) <= 0;
  }
  if (expression instanceof NotExpression) {
    NotExpression e=(NotExpression)expression;
    Boolean rt=(Boolean)evaluate(e.getExpression(),target,properties);
    return !rt;
  }
  if (expression instanceof SubstringOfMethodCallExpression) {
    SubstringOfMethodCallExpression e=(SubstringOfMethodCallExpression)expression;
    String targetValue=(String)evaluate(e.getTarget(),target,properties);
    String searchValue=(String)evaluate(e.getValue(),target,properties);
    return targetValue != null && searchValue != null && targetValue.contains(searchValue);
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + expression);
}","public static boolean evaluate(BoolCommonExpression expression,Object target,PropertyModel properties){
  if (expression instanceof EqExpression) {
    return equals((EqExpression)expression,target,properties);
  }
  if (expression instanceof NeExpression) {
    return !equals((NeExpression)expression,target,properties);
  }
  if (expression instanceof AndExpression) {
    AndExpression e=(AndExpression)expression;
    return evaluate(e.getLHS(),target,properties) && evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof OrExpression) {
    OrExpression e=(OrExpression)expression;
    return evaluate(e.getLHS(),target,properties) || evaluate(e.getRHS(),target,properties);
  }
  if (expression instanceof BooleanLiteral) {
    return ((BooleanLiteral)expression).getValue();
  }
  if (expression instanceof GtExpression) {
    return compareTo((GtExpression)expression,target,properties) > 0;
  }
  if (expression instanceof LtExpression) {
    return compareTo((LtExpression)expression,target,properties) < 0;
  }
  if (expression instanceof GeExpression) {
    return compareTo((GeExpression)expression,target,properties) >= 0;
  }
  if (expression instanceof LeExpression) {
    return compareTo((LeExpression)expression,target,properties) <= 0;
  }
  if (expression instanceof NotExpression) {
    NotExpression e=(NotExpression)expression;
    Boolean rt=(Boolean)evaluate(e.getExpression(),target,properties);
    return !rt;
  }
  if (expression instanceof SubstringOfMethodCallExpression) {
    SubstringOfMethodCallExpression e=(SubstringOfMethodCallExpression)expression;
    String targetValue=(String)evaluate(e.getTarget(),target,properties);
    String searchValue=(String)evaluate(e.getValue(),target,properties);
    return targetValue != null && searchValue != null && targetValue.contains(searchValue);
  }
  if (expression instanceof ParenExpression) {
    Object o=null;
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + expression);
}",0.9821519632840388
59648,"public static Object parseIdObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}","public static Object parseIdObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else   if (cleanid.endsWith(""String_Node_Str"")) {
    idObject=Long.parseLong(cleanid.substring(0,cleanid.length() - 1));
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}",0.8983186549239391
59649,"private Object idObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null)   throw new RuntimeException(""String_Node_Str"");
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}","private Object idObject(String id){
  String cleanid=null;
  if (id != null && id.length() > 0) {
    if (id.startsWith(""String_Node_Str"") && id.endsWith(""String_Node_Str"")) {
      cleanid=id.substring(1,id.length() - 1);
    }
  }
  if (cleanid == null)   throw new RuntimeException(""String_Node_Str"");
  Object idObject;
  if (cleanid.startsWith(""String_Node_Str"") && cleanid.endsWith(""String_Node_Str"")) {
    idObject=cleanid.substring(1,cleanid.length() - 1);
  }
 else   if (cleanid.endsWith(""String_Node_Str"")) {
    idObject=Long.parseLong(cleanid.substring(0,cleanid.length() - 1));
  }
 else {
    idObject=Integer.parseInt(cleanid);
  }
  return idObject;
}",0.8951279933938894
59650,"private static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceURI().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      String type=null;
      boolean isComplexType=false;
      if (typeAttribute != null) {
        type=typeAttribute.getValue();
        EdmType et=EdmType.get(type);
        isComplexType=!et.isPrimitive();
      }
      if (isComplexType) {
        op=OProperties.complex(name,type,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement())).toList());
      }
 else {
        op=OProperties.parse(name,type,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}","public static Iterable<OProperty<?>> parseProperties(XMLEventReader2 reader,StartElement2 propertiesElement){
  List<OProperty<?>> rt=new ArrayList<OProperty<?>>();
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    if (event.isEndElement() && event.asEndElement().getName().equals(propertiesElement.getName())) {
      return rt;
    }
    if (event.isStartElement() && event.asStartElement().getName().getNamespaceURI().equals(NS_DATASERVICES)) {
      String name=event.asStartElement().getName().getLocalPart();
      Attribute2 typeAttribute=event.asStartElement().getAttributeByName(M_TYPE);
      Attribute2 nullAttribute=event.asStartElement().getAttributeByName(M_NULL);
      boolean isNull=nullAttribute != null && ""String_Node_Str"".equals(nullAttribute.getValue());
      OProperty<?> op=null;
      String type=null;
      boolean isComplexType=false;
      if (typeAttribute != null) {
        type=typeAttribute.getValue();
        EdmType et=EdmType.get(type);
        isComplexType=!et.isPrimitive();
      }
      if (isComplexType) {
        op=OProperties.complex(name,type,isNull ? null : Enumerable.create(parseProperties(reader,event.asStartElement())).toList());
      }
 else {
        op=OProperties.parse(name,type,isNull ? null : reader.getElementText());
      }
      rt.add(op);
    }
  }
  throw new RuntimeException();
}",0.9960014540167212
59651,"public Args(Element ele,File outputDir,String jobPrefix,List<Mecq.Sample> samples,Organism organism,CalcOptimalKmer.Args kmerCalcArgs,boolean runParallel) throws IOException {
  super(RampartStage.MASS,outputDir,jobPrefix,samples,organism,runParallel);
  if (!XmlHelper.validate(ele,new String[0],new String[]{KEY_ATTR_PARALLEL},new String[]{KEY_ELEM_MASS_JOB},new String[0])) {
    throw new IOException(""String_Node_Str"");
  }
  this.massJobArgMap=new HashMap<>();
  this.kmerCalcArgs=kmerCalcArgs;
  this.runParallel=ele.hasAttribute(KEY_ATTR_PARALLEL) ? XmlHelper.getBooleanValue(ele,KEY_ATTR_PARALLEL) : runParallel;
  NodeList nodes=ele.getElementsByTagName(KEY_ELEM_MASS_JOB);
  for (  Mecq.Sample sample : samples) {
    List<MassJob.Args> massJobArgs=new ArrayList<>();
    for (int i=0; i < nodes.getLength(); i++) {
      massJobArgs.add(new MassJob.Args((Element)nodes.item(i),this.getStageDir(sample),jobPrefix + ""String_Node_Str"",sample,this.organism,this.runParallel,i + 1,this.kmerCalcArgs != null));
    }
    this.massJobArgMap.put(sample,massJobArgs);
  }
}","public Args(Element ele,File outputDir,String jobPrefix,List<Mecq.Sample> samples,Organism organism,CalcOptimalKmer.Args kmerCalcArgs,boolean runParallel) throws IOException {
  super(RampartStage.MASS,outputDir,jobPrefix,samples,organism,runParallel);
  if (!XmlHelper.validate(ele,new String[0],new String[]{KEY_ATTR_PARALLEL},new String[]{KEY_ELEM_MASS_JOB},new String[0])) {
    throw new IOException(""String_Node_Str"");
  }
  this.massJobArgMap=new HashMap<>();
  this.kmerCalcArgs=kmerCalcArgs;
  this.organism=organism;
  this.runParallel=ele.hasAttribute(KEY_ATTR_PARALLEL) ? XmlHelper.getBooleanValue(ele,KEY_ATTR_PARALLEL) : runParallel;
  NodeList nodes=ele.getElementsByTagName(KEY_ELEM_MASS_JOB);
  for (  Mecq.Sample sample : samples) {
    List<MassJob.Args> massJobArgs=new ArrayList<>();
    for (int i=0; i < nodes.getLength(); i++) {
      massJobArgs.add(new MassJob.Args((Element)nodes.item(i),this.getStageDir(sample),jobPrefix + ""String_Node_Str"",sample,this.organism,this.runParallel,i + 1,this.kmerCalcArgs != null));
    }
    this.massJobArgMap.put(sample,massJobArgs);
  }
}",0.9880624426078972
59652,"protected final void validateCoverageRange(){
  if (coverageRange == null) {
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.info(""String_Node_Str"" + this.name + ""String_Node_Str""+ defaultCoverageRange.toString());
  }
 else   if (organism == null || !organism.isGenomeSizeAvailable()) {
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.info(""String_Node_Str"" + ""String_Node_Str"" + defaultCoverageRange.toString());
  }
 else   if (coverageRange.validate()) {
    log.info(""String_Node_Str"" + this.name + ""String_Node_Str""+ coverageRange.toString());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + coverageRange.toString() + ""String_Node_Str""+ this.name+ ""String_Node_Str"");
  }
}","protected final void validateCoverageRange(){
  if (coverageRange == null) {
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.info(""String_Node_Str"" + this.name + ""String_Node_Str""+ defaultCoverageRange.toString());
  }
 else   if (organism == null || !organism.isGenomeSizeAvailable()) {
    if (organism == null) {
      log.error(""String_Node_Str"");
    }
 else     if (!organism.isGenomeSizeAvailable()) {
      if (organism.getReference() == null) {
        log.error(""String_Node_Str"");
      }
    }
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.warn(""String_Node_Str"" + ""String_Node_Str"" + defaultCoverageRange.toString());
  }
 else   if (coverageRange.validate()) {
    log.info(""String_Node_Str"" + this.name + ""String_Node_Str""+ coverageRange.toString());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + coverageRange.toString() + ""String_Node_Str""+ this.name+ ""String_Node_Str"");
  }
}",0.8673708920187794
59653,"@Override public void updateTable(AssemblyStatsTable table,File reportDir) throws IOException {
  log.info(""String_Node_Str"" + reportDir.getCanonicalPath());
  Collection<File> cegmaFiles=FileUtils.listFiles(reportDir,new String[]{""String_Node_Str""},false);
  for (  AssemblyStats stats : table) {
    File c=null;
    File asm=new File(stats.getFilePath());
    for (    File cf : cegmaFiles) {
      if (FilenameUtils.getBaseName(asm.getName()).equals(FilenameUtils.getBaseName(cf.getName()))) {
        c=cf;
        break;
      }
    }
    if (c == null || !c.exists())     throw new IllegalStateException(""String_Node_Str"");
    if (!asm.exists())     throw new IllegalStateException(""String_Node_Str"" + asm.getAbsolutePath());
    CegmaV24.Report cegmaReport=new CegmaV24.Report(c);
    stats.setCompletenessPercentage(cegmaReport.getPcComplete());
  }
}","@Override public void updateTable(AssemblyStatsTable table,File reportDir) throws IOException {
  log.info(""String_Node_Str"" + reportDir.getCanonicalPath());
  Collection<File> cegmaFiles=FileUtils.listFiles(reportDir,new String[]{""String_Node_Str""},true);
  for (  File cf : cegmaFiles) {
    String asmName=cf.getName().substring(0,cf.getName().length() - 23);
    log.info(""String_Node_Str"" + cf.getCanonicalPath() + ""String_Node_Str""+ asmName);
    AssemblyStats stats=table.findStatsByFilename(asmName);
    CegmaV24.Report cegmaReport=new CegmaV24.Report(cf);
    stats.setCompletenessPercentage(cegmaReport.getPcComplete());
  }
}",0.5527369826435247
59654,"@Override public List<ExecutionResult> execute(List<File> assemblies,File outputDir,String jobPrefix,ConanExecutorService ces) throws InterruptedException, ProcessExecutionException, ConanParameterException, IOException {
  List<ExecutionResult> jobResults=new ArrayList<>();
  if (outputDir.exists()) {
    FileUtils.deleteDirectory(outputDir);
  }
  outputDir.mkdirs();
  int i=1;
  for (  File f : assemblies) {
    String cegmaJobName=jobPrefix + ""String_Node_Str"" + i++;
    File cegOutputDir=new File(outputDir,f.getName());
    if (cegOutputDir.exists()) {
      FileUtils.deleteDirectory(cegOutputDir);
    }
    cegOutputDir.mkdirs();
    CegmaV24 cegmaProc=this.makeCegmaProcess(f,cegOutputDir,args.getThreads());
    ExecutionResult result=ces.executeProcess(cegmaProc,cegOutputDir,cegmaJobName,args.getThreads(),args.getMemory(),false);
    jobResults.add(result);
    File sourceFile=new File(((CegmaV24.Args)cegmaProc.getProcessArgs()).getOutputPrefix().getAbsolutePath() + ""String_Node_Str"");
    File destFile=new File(cegOutputDir,f.getName() + ""String_Node_Str"");
    ces.getConanProcessService().createLocalSymbolicLink(sourceFile,destFile);
  }
  return jobResults;
}","@Override public List<ExecutionResult> execute(List<File> assemblies,File outputDir,String jobPrefix,ConanExecutorService ces) throws InterruptedException, ProcessExecutionException, ConanParameterException, IOException {
  List<ExecutionResult> jobResults=new ArrayList<>();
  if (outputDir.exists()) {
    FileUtils.deleteDirectory(outputDir);
  }
  outputDir.mkdirs();
  int i=1;
  for (  File f : assemblies) {
    String cegmaJobName=jobPrefix + ""String_Node_Str"" + i++;
    File cegOutputDir=new File(outputDir,f.getName().substring(0,f.getName().length() - 3));
    if (cegOutputDir.exists()) {
      FileUtils.deleteDirectory(cegOutputDir);
    }
    cegOutputDir.mkdirs();
    CegmaV24 cegmaProc=this.makeCegmaProcess(f,cegOutputDir,args.getThreads());
    ExecutionResult result=ces.executeProcess(cegmaProc,cegOutputDir,cegmaJobName,args.getThreads(),args.getMemory(),false);
    jobResults.add(result);
    File sourceFile=new File(((CegmaV24.Args)cegmaProc.getProcessArgs()).getOutputPrefix().getAbsolutePath() + ""String_Node_Str"");
    File destFile=new File(cegOutputDir,f.getName() + ""String_Node_Str"");
    ces.getConanProcessService().createLocalSymbolicLink(sourceFile,destFile);
  }
  return jobResults;
}",0.98424543946932
59655,"@Override public boolean isOperational(ExecutionContext executionContext){
  Args args=(Args)this.getProcessArgs();
  for (  MassJob.Args massJobArgs : args.getMassJobArgList()) {
    if (!new MassJob(this.conanExecutorService,massJobArgs).isOperational(executionContext)) {
      log.warn(""String_Node_Str"");
      return false;
    }
  }
  if (args.kmerCalcArgs != null) {
    if (!new CalcOptimalKmer(this.conanExecutorService).isOperational(executionContext)) {
      log.warn(""String_Node_Str"");
    }
  }
  log.info(""String_Node_Str"");
  return true;
}","@Override public boolean isOperational(ExecutionContext executionContext){
  Args args=(Args)this.getProcessArgs();
  for (  MassJob.Args massJobArgs : args.getMassJobArgList()) {
    if (!new MassJob(this.conanExecutorService,massJobArgs).isOperational(executionContext)) {
      log.warn(""String_Node_Str"");
      return false;
    }
  }
  log.info(""String_Node_Str"");
  return true;
}",0.7767195767195767
59656,"@Override public ExecutionResult execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    StopWatch stopWatch=new StopWatch();
    stopWatch.start();
    log.info(""String_Node_Str"");
    Args args=this.getArgs();
    if (!args.getOutputDir().exists()) {
      args.getOutputDir().mkdirs();
    }
    Set<AssemblyAnalyser> requestedServices=args.getAssemblyAnalysers();
    for (    AssemblyAnalyser requestedService : requestedServices) {
      requestedService.setConanExecutorService(this.conanExecutorService);
    }
    List<ExecutionResult> jobResults=new ArrayList<>();
    List<File> unitigAssemblies=new ArrayList<>();
    List<File> contigAssemblies=new ArrayList<>();
    List<File> scaffoldAssemblies=new ArrayList<>();
    List<File> bestAssemblies=new ArrayList<>();
    List<File> bubbles=new ArrayList<>();
    List<String> mappings=new ArrayList<>();
    int index=1;
    if (args.kmerCalcResults != null && args.kmerCalcResults.exists()) {
      Mass.setKmerValues(args.getKmerCalcResults(),args.getMassJobs());
    }
    for (    MassJob.Args jobArgs : args.getMassJobs()) {
      String massGroup=jobArgs.getName();
      File inputDir=new File(args.getMassDir(),massGroup);
      if (!inputDir.exists()) {
        throw new ProcessExecutionException(-1,""String_Node_Str"" + massGroup + ""String_Node_Str""+ inputDir.getAbsolutePath());
      }
      final File unitigsDir=jobArgs.getUnitigsDir();
      final File contigsDir=jobArgs.getContigsDir();
      final File scaffoldsDir=jobArgs.getScaffoldsDir();
      final File longestDir=jobArgs.getLongestDir();
      if (unitigsDir.exists()) {
        unitigAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(unitigsDir));
      }
      if (contigsDir.exists()) {
        contigAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(contigsDir));
      }
      if (scaffoldsDir.exists()) {
        scaffoldAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(scaffoldsDir));
      }
      bestAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(longestDir));
      for (      Assembler assembler : jobArgs.getAssemblers()) {
        File assembly=assembler.getBestAssembly();
        if (assembler.getBubbleFile() != null) {
          bubbles.add(assembler.getBubbleFile());
        }
        String run=assembler.getAssemblerArgs().getOutputDir().getName();
        String line=Integer.toString(index) + ""String_Node_Str"" + massGroup+ ""String_Node_Str""+ run+ ""String_Node_Str""+ assembly.getAbsolutePath()+ ""String_Node_Str""+ (assembler.getBubbleFile() != null ? assembler.getBubbleFile().getAbsolutePath() : ""String_Node_Str"");
        mappings.add(line);
        index++;
      }
    }
    File unitigsDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File contigsDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File scaffoldsDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File bestDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File bubblesDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    this.makeLinks(unitigAssemblies,unitigsDir);
    this.makeLinks(contigAssemblies,contigsDir);
    this.makeLinks(scaffoldAssemblies,scaffoldsDir);
    this.makeLinks(bestAssemblies,bestDir);
    this.makeLinks(bubbles,bubblesDir);
    FileUtils.writeLines(args.getAssemblyLinkageFile(),mappings);
    for (    AssemblyAnalyser analyser : requestedServices) {
      File outputDir=new File(args.getOutputDir(),analyser.getName().toLowerCase());
      String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + analyser.getName().toLowerCase();
      if (analyser.isFast()) {
        if (!unitigAssemblies.isEmpty()) {
          jobResults.addAll(analyser.execute(unitigAssemblies,new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.conanExecutorService));
        }
        if (!contigAssemblies.isEmpty()) {
          jobResults.addAll(analyser.execute(contigAssemblies,new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.conanExecutorService));
        }
        if (!scaffoldAssemblies.isEmpty()) {
          jobResults.addAll(analyser.execute(scaffoldAssemblies,new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.conanExecutorService));
        }
      }
      File bestOutDir=analyser.isFast() ? new File(outputDir,""String_Node_Str"") : outputDir;
      jobResults.addAll(analyser.execute(bestAssemblies,bestOutDir,jobPrefix,this.conanExecutorService));
    }
    stopWatch.stop();
    TaskResult taskResult=new DefaultTaskResult(""String_Node_Str"",true,jobResults,stopWatch.getTime() / 1000L);
    FileUtils.writeLines(new File(args.getOutputDir(),args.getJobPrefix() + ""String_Node_Str""),taskResult.getOutput());
    return new DefaultExecutionResult(taskResult.getTaskName(),0,new String[]{},null,-1,new ResourceUsage(taskResult.getMaxMemUsage(),taskResult.getActualTotalRuntime(),taskResult.getTotalExternalCputime()));
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
}","@Override public ExecutionResult execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    StopWatch stopWatch=new StopWatch();
    stopWatch.start();
    log.info(""String_Node_Str"");
    Args args=this.getArgs();
    if (!args.getOutputDir().exists()) {
      args.getOutputDir().mkdirs();
    }
    Set<AssemblyAnalyser> requestedServices=args.getAssemblyAnalysers();
    for (    AssemblyAnalyser requestedService : requestedServices) {
      requestedService.setConanExecutorService(this.conanExecutorService);
    }
    List<ExecutionResult> jobResults=new ArrayList<>();
    List<File> unitigAssemblies=new ArrayList<>();
    List<File> contigAssemblies=new ArrayList<>();
    List<File> scaffoldAssemblies=new ArrayList<>();
    List<File> bestAssemblies=new ArrayList<>();
    List<File> bubbles=new ArrayList<>();
    List<String> mappings=new ArrayList<>();
    int index=1;
    if (args.kmerCalcResults != null && args.kmerCalcResults.exists()) {
      Mass.setKmerValues(args.getKmerCalcResults(),args.getMassJobs());
    }
    for (    MassJob.Args jobArgs : args.getMassJobs()) {
      jobArgs.initialise();
      String massGroup=jobArgs.getName();
      File inputDir=new File(args.getMassDir(),massGroup);
      if (!inputDir.exists()) {
        throw new ProcessExecutionException(-1,""String_Node_Str"" + massGroup + ""String_Node_Str""+ inputDir.getAbsolutePath());
      }
      final File unitigsDir=jobArgs.getUnitigsDir();
      final File contigsDir=jobArgs.getContigsDir();
      final File scaffoldsDir=jobArgs.getScaffoldsDir();
      final File longestDir=jobArgs.getLongestDir();
      if (unitigsDir.exists()) {
        unitigAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(unitigsDir));
      }
      if (contigsDir.exists()) {
        contigAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(contigsDir));
      }
      if (scaffoldsDir.exists()) {
        scaffoldAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(scaffoldsDir));
      }
      bestAssemblies.addAll(AnalyseMassAssemblies.assembliesFromDir(longestDir));
      for (      Assembler assembler : jobArgs.getAssemblers()) {
        File assembly=assembler.getBestAssembly();
        if (assembler.getBubbleFile() != null) {
          bubbles.add(assembler.getBubbleFile());
        }
        String run=assembler.getAssemblerArgs().getOutputDir().getName();
        String line=Integer.toString(index) + ""String_Node_Str"" + massGroup+ ""String_Node_Str""+ run+ ""String_Node_Str""+ assembly.getAbsolutePath()+ ""String_Node_Str""+ (assembler.getBubbleFile() != null ? assembler.getBubbleFile().getAbsolutePath() : ""String_Node_Str"");
        mappings.add(line);
        index++;
      }
    }
    File unitigsDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File contigsDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File scaffoldsDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File bestDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    File bubblesDir=new File(args.getAssembliesDir(),""String_Node_Str"");
    this.makeLinks(unitigAssemblies,unitigsDir);
    this.makeLinks(contigAssemblies,contigsDir);
    this.makeLinks(scaffoldAssemblies,scaffoldsDir);
    this.makeLinks(bestAssemblies,bestDir);
    this.makeLinks(bubbles,bubblesDir);
    FileUtils.writeLines(args.getAssemblyLinkageFile(),mappings);
    for (    AssemblyAnalyser analyser : requestedServices) {
      File outputDir=new File(args.getOutputDir(),analyser.getName().toLowerCase());
      String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + analyser.getName().toLowerCase();
      if (analyser.isFast()) {
        if (!unitigAssemblies.isEmpty()) {
          jobResults.addAll(analyser.execute(unitigAssemblies,new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.conanExecutorService));
        }
        if (!contigAssemblies.isEmpty()) {
          jobResults.addAll(analyser.execute(contigAssemblies,new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.conanExecutorService));
        }
        if (!scaffoldAssemblies.isEmpty()) {
          jobResults.addAll(analyser.execute(scaffoldAssemblies,new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.conanExecutorService));
        }
      }
      File bestOutDir=analyser.isFast() ? new File(outputDir,""String_Node_Str"") : outputDir;
      jobResults.addAll(analyser.execute(bestAssemblies,bestOutDir,jobPrefix,this.conanExecutorService));
    }
    stopWatch.stop();
    TaskResult taskResult=new DefaultTaskResult(""String_Node_Str"",true,jobResults,stopWatch.getTime() / 1000L);
    FileUtils.writeLines(new File(args.getOutputDir(),args.getJobPrefix() + ""String_Node_Str""),taskResult.getOutput());
    return new DefaultExecutionResult(taskResult.getTaskName(),0,new String[]{},null,-1,new ResourceUsage(taskResult.getMaxMemUsage(),taskResult.getActualTotalRuntime(),taskResult.getTotalExternalCputime()));
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
}",0.99726455646737
59657,"/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs to
 * @throws ProcessExecutionException Thrown if there is an issue during execution of an external process
 * @throws InterruptedException Thrown if user has interrupted the process during execution
 */
@Override public ExecutionResult execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    StopWatch stopWatch=new StopWatch();
    stopWatch.start();
    Args args=this.getArgs();
    log.info(""String_Node_Str"" + args.getName() + ""String_Node_Str"");
    Assembler genericAssembler=args.getGenericAssembler();
    this.createSupportDirectories(genericAssembler);
    log.debug(""String_Node_Str"" + args.getOutputDir() + ""String_Node_Str"");
    jobResults.clear();
    Map<Integer,List<Integer>> ssResults=new HashMap<>();
    List<ExecutionResult> results=new ArrayList<>();
    for (    Integer cvg : args.getCoverageRange()) {
      ssResults.put(cvg,this.doSubsampling(genericAssembler.doesSubsampling(),cvg,args.getSelectedLibs(),args.isRunParallel()));
    }
    for (    Assembler assembler : args.getAssemblers()) {
      AbstractAssemblerArgs asmArgs=assembler.getAssemblerArgs();
      File outputDir=asmArgs.getOutputDir();
      String title=args.getName() + ""String_Node_Str"" + outputDir.getName();
      log.debug(""String_Node_Str"" + args.getTool() + ""String_Node_Str""+ outputDir.getAbsolutePath()+ ""String_Node_Str"");
      if (outputDir.exists()) {
        FileUtils.deleteDirectory(outputDir);
      }
      outputDir.mkdirs();
      assembler.setup();
      ExecutionResult result=this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + outputDir.getName(),ssResults.get(asmArgs.getDesiredCoverage()));
      result.setName(title);
      jobResults.add(result);
      this.createAssemblyLinks(assembler,args,title);
    }
    if (executionContext.usingScheduler() && !args.isMassParallel() && args.isRunParallel()) {
      log.info(""String_Node_Str"" + args.getName());
      this.conanExecutorService.executeScheduledWait(jobResults,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
    log.info(""String_Node_Str"" + args.getName() + ""String_Node_Str"");
    stopWatch.stop();
    this.taskResult=new DefaultTaskResult(""String_Node_Str"" + args.name,true,this.jobResults,stopWatch.getTime() / 1000L);
    return new DefaultExecutionResult(this.taskResult.getTaskName(),0,new String[]{},null,-1,new ResourceUsage(this.taskResult.getMaxMemUsage(),this.taskResult.getActualTotalRuntime(),this.taskResult.getTotalExternalCputime()));
  }
 catch (  IOException|ConanParameterException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
}","/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs to
 * @throws ProcessExecutionException Thrown if there is an issue during execution of an external process
 * @throws InterruptedException Thrown if user has interrupted the process during execution
 */
@Override public ExecutionResult execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    StopWatch stopWatch=new StopWatch();
    stopWatch.start();
    Args args=this.getArgs();
    log.info(""String_Node_Str"" + args.getName() + ""String_Node_Str"");
    Assembler genericAssembler=args.getGenericAssembler();
    this.createSupportDirectories(genericAssembler);
    log.debug(""String_Node_Str"" + args.getOutputDir() + ""String_Node_Str"");
    jobResults.clear();
    Map<Integer,List<Integer>> ssResults=new HashMap<>();
    for (    Integer cvg : args.getCoverageRange()) {
      ssResults.put(cvg,this.doSubsampling(genericAssembler.doesSubsampling(),cvg,args.getSelectedLibs(),args.isRunParallel()));
    }
    for (    Assembler assembler : args.getAssemblers()) {
      AbstractAssemblerArgs asmArgs=assembler.getAssemblerArgs();
      File outputDir=asmArgs.getOutputDir();
      String title=args.getName() + ""String_Node_Str"" + outputDir.getName();
      log.debug(""String_Node_Str"" + args.getTool() + ""String_Node_Str""+ outputDir.getAbsolutePath()+ ""String_Node_Str"");
      if (outputDir.exists()) {
        FileUtils.deleteDirectory(outputDir);
      }
      outputDir.mkdirs();
      ExecutionResult result=this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + outputDir.getName(),ssResults.get(asmArgs.getDesiredCoverage()));
      result.setName(title);
      jobResults.add(result);
      this.createAssemblyLinks(assembler,args,title);
    }
    if (executionContext.usingScheduler() && !args.isMassParallel() && args.isRunParallel()) {
      log.info(""String_Node_Str"" + args.getName());
      this.conanExecutorService.executeScheduledWait(jobResults,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
    log.info(""String_Node_Str"" + args.getName() + ""String_Node_Str"");
    stopWatch.stop();
    this.taskResult=new DefaultTaskResult(""String_Node_Str"" + args.name,true,this.jobResults,stopWatch.getTime() / 1000L);
    return new DefaultExecutionResult(this.taskResult.getTaskName(),0,new String[]{},null,-1,new ResourceUsage(this.taskResult.getMaxMemUsage(),this.taskResult.getActualTotalRuntime(),this.taskResult.getTotalExternalCputime()));
  }
 catch (  IOException|ConanParameterException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
}",0.7640970735189151
59658,"public ExecutionResult executeAssembler(Assembler assembler,String jobName,List<Integer> jobIds) throws ProcessExecutionException, InterruptedException, IOException, ConanParameterException {
  assembler.setup();
  Args args=this.getArgs();
  return this.conanExecutorService.executeProcess(assembler,assembler.getAssemblerArgs().getOutputDir(),jobName,args.getThreads(),args.getMemory(),args.isRunParallel(),jobIds,assembler.usesOpenMpi());
}","public ExecutionResult executeAssembler(Assembler assembler,String jobName,List<Integer> jobIds) throws ProcessExecutionException, InterruptedException, IOException, ConanParameterException {
  assembler.setup();
  Args args=this.getArgs();
  return this.conanExecutorService.executeProcess(assembler,assembler.getAssemblerArgs().getOutputDir(),jobName,args.getThreads(),args.getMemory(),args.isMassParallel() || args.isRunParallel(),jobIds,assembler.usesOpenMpi());
}",0.9725576289791438
59659,"public void createAssemblyLinks(Assembler assembler,Args jobArgs,String jobName) throws ProcessExecutionException, InterruptedException {
  ExecutionContext linkingExecutionContext=new DefaultExecutionContext(this.conanExecutorService.getExecutionContext().getLocality(),null,null);
  ConanProcessService cps=this.conanExecutorService.getConanProcessService();
  StringJoiner compoundLinkCmdLine=new StringJoiner(""String_Node_Str"");
  if (assembler.makesUnitigs()) {
    compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getUnitigsFile(),new File(jobArgs.getUnitigsDir(),jobName + ""String_Node_Str"")));
  }
  if (assembler.makesContigs()) {
    compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getContigsFile(),new File(jobArgs.getContigsDir(),jobName + ""String_Node_Str"")));
  }
  if (assembler.makesScaffolds()) {
    compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getScaffoldsFile(),new File(jobArgs.getScaffoldsDir(),jobName + ""String_Node_Str"")));
  }
  compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getScaffoldsFile(),new File(jobArgs.getLongestDir(),jobName + ""String_Node_Str"")));
  cps.execute(compoundLinkCmdLine.toString(),linkingExecutionContext);
}","public void createAssemblyLinks(Assembler assembler,Args jobArgs,String jobName) throws ProcessExecutionException, InterruptedException {
  ExecutionContext linkingExecutionContext=new DefaultExecutionContext(this.conanExecutorService.getExecutionContext().getLocality(),null,null);
  ConanProcessService cps=this.conanExecutorService.getConanProcessService();
  StringJoiner compoundLinkCmdLine=new StringJoiner(""String_Node_Str"");
  if (assembler.makesUnitigs()) {
    compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getUnitigsFile(),new File(jobArgs.getUnitigsDir(),jobName + ""String_Node_Str"")));
  }
  if (assembler.makesContigs()) {
    compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getContigsFile(),new File(jobArgs.getContigsDir(),jobName + ""String_Node_Str"")));
  }
  if (assembler.makesScaffolds()) {
    compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getScaffoldsFile(),new File(jobArgs.getScaffoldsDir(),jobName + ""String_Node_Str"")));
  }
  compoundLinkCmdLine.add(cps.makeLinkCommand(assembler.getBestAssembly(),new File(jobArgs.getLongestDir(),jobName + ""String_Node_Str"")));
  cps.execute(compoundLinkCmdLine.toString(),linkingExecutionContext);
}",0.9894470240607852
59660,"public DependencyDownloader(String[] args) throws ParseException {
  CommandLine cmdLine=new PosixParser().parse(createOptions(),args,true);
  this.help=cmdLine.hasOption(OPT_HELP);
  this.verbose=cmdLine.hasOption(OPT_VERBOSE);
  this.targetDir=cmdLine.getArgList().isEmpty() ? new File(""String_Node_Str"") : new File((String)cmdLine.getArgList().get(0));
}","public DependencyDownloader(String[] args) throws ParseException, IOException {
  CommandLine cmdLine=new PosixParser().parse(createOptions(),args,true);
  this.help=cmdLine.hasOption(OPT_HELP);
  this.verbose=cmdLine.hasOption(OPT_VERBOSE);
  this.targetDir=cmdLine.getArgList().isEmpty() ? new File(""String_Node_Str"").getCanonicalFile() : new File((String)cmdLine.getArgList().get(0)).getCanonicalFile();
}",0.9333333333333332
59661,"public Args(Element element,List<Library> libs,Organism organism,RampartJobFileSystem rjfs,String jobPrefix,String institution,RampartStageList stages,boolean doInitialChecks,File ampInput,File ampBubble) throws IOException {
  this();
  if (!XmlHelper.validate(element,new String[0],new String[0],new String[0],new String[]{KEY_ELEM_MECQ,KEY_ELEM_ANALYSE_READS,KEY_ELEM_KMER_CALC,KEY_ELEM_MASS,KEY_ELEM_ANALYSE_MASS,KEY_ELEM_SELECT_MASS,KEY_ELEM_AMP,KEY_ELEM_ANALYSE_AMP,KEY_ELEM_FINALISE})) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.libs=libs;
  this.organism=organism;
  this.rampartJobFileSystem=rjfs;
  this.jobPrefix=jobPrefix;
  this.institution=institution;
  this.stages=stages;
  this.doInitialChecks=doInitialChecks;
  this.ampInput=ampInput;
  this.ampBubble=ampBubble;
  Element mecqElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new Mecq.Args(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.jobPrefix + ""String_Node_Str"",this.libs);
  this.stages.setArgsIfPresent(RampartStage.MECQ,this.mecqArgs);
  Element analyseReadsElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_ANALYSE_READS);
  this.analyseReadsArgs=analyseReadsElement == null ? null : new AnalyseReads.Args(analyseReadsElement,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.jobPrefix + ""String_Node_Str"",this.rampartJobFileSystem.getMeqcDir(),this.rampartJobFileSystem.getAnalyseReadsDir(),this.organism);
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_READS,this.analyseReadsArgs);
  Element kmerCalcElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_KMER_CALC);
  this.kmerCalcArgs=kmerCalcElement == null ? null : new CalcOptimalKmer.Args(kmerCalcElement,this.rampartJobFileSystem.getKmerCalcDir(),this.jobPrefix + ""String_Node_Str"",this.organism.getPloidy());
  this.stages.setArgsIfPresent(RampartStage.KMER_CALC,this.kmerCalcArgs);
  Element massElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new Mass.Args(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.jobPrefix + ""String_Node_Str"",this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.organism);
  this.stages.setArgsIfPresent(RampartStage.MASS,this.massArgs);
  if (this.kmerCalcArgs != null && this.massArgs != null) {
    this.kmerCalcArgs.setMassJobArgList(this.massArgs.getMassJobArgList());
    this.massArgs.setKmerCalcArgs(this.kmerCalcArgs);
  }
  if (this.kmerCalcArgs != null) {
    this.kmerCalcArgs.initialise();
  }
  if (this.massArgs != null) {
    this.massArgs.initialise();
  }
  Element analyseMassElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_ANALYSE_MASS);
  this.analyseMassArgs=analyseMassElement == null ? null : new AnalyseMassAssemblies.Args(analyseMassElement,this.rampartJobFileSystem.getMassDir(),this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseMassDir(),this.massArgs == null ? null : this.massArgs.getMassJobArgList(),this.organism,this.jobPrefix + ""String_Node_Str"",this.kmerCalcArgs == null ? null : this.kmerCalcArgs.getResultFile());
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_MASS,this.analyseMassArgs);
  Element selectMassElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_SELECT_MASS);
  this.selectMassArgs=selectMassElement == null ? null : new Select.Args(selectMassElement,this.rampartJobFileSystem.getAnalyseMassDir(),this.analyseMassArgs.getAssemblyLinkageFile(),this.rampartJobFileSystem.getSelectMassDir(),this.massArgs == null ? null : this.massArgs.getMassJobArgList(),new ArrayList<>(this.analyseMassArgs.getAssemblyAnalysers()),this.organism,this.jobPrefix + ""String_Node_Str"");
  this.stages.setArgsIfPresent(RampartStage.SELECT_MASS,this.selectMassArgs);
  Element ampElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new Amp.Args(ampElement,this.rampartJobFileSystem.getAmpDir(),this.jobPrefix + ""String_Node_Str"",this.ampInput != null ? this.ampInput : this.rampartJobFileSystem.getSelectedAssemblyFile(),this.organism.getPloidy() > 1 ? this.ampBubble != null ? this.ampBubble : this.rampartJobFileSystem.getSelectedBubbleFile() : null,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.organism);
  this.stages.setArgsIfPresent(RampartStage.AMP,this.ampArgs);
  Element analyseAmpElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_ANALYSE_AMP);
  this.analyseAmpArgs=analyseAmpElement == null ? null : new AnalyseAmpAssemblies.Args(analyseAmpElement,this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseAmpDir(),this.ampArgs == null ? null : this.ampArgs.getStageArgsList(),this.organism,this.jobPrefix + ""String_Node_Str"");
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_AMP,this.analyseAmpArgs);
  File finalAssembly=this.ampArgs == null ? this.rampartJobFileSystem.getSelectedAssemblyFile() : this.ampArgs.getFinalAssembly();
  Element finaliseElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_FINALISE);
  this.finaliseArgs=finaliseElement == null ? null : new Finalise.Args(finaliseElement,finalAssembly,this.rampartJobFileSystem.getFinalDir(),this.jobPrefix + ""String_Node_Str"",this.organism,this.institution);
  this.stages.setArgsIfPresent(RampartStage.FINALISE,this.finaliseArgs);
}","public Args(Element element,List<Library> libs,Organism organism,RampartJobFileSystem rjfs,String jobPrefix,String institution,RampartStageList stages,boolean doInitialChecks,File ampInput,File ampBubble) throws IOException {
  this();
  if (!XmlHelper.validate(element,new String[0],new String[0],new String[0],new String[]{KEY_ELEM_MECQ,KEY_ELEM_ANALYSE_READS,KEY_ELEM_KMER_CALC,KEY_ELEM_MASS,KEY_ELEM_ANALYSE_MASS,KEY_ELEM_SELECT_MASS,KEY_ELEM_AMP,KEY_ELEM_ANALYSE_AMP,KEY_ELEM_FINALISE})) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.libs=libs;
  this.organism=organism;
  this.rampartJobFileSystem=rjfs;
  this.jobPrefix=jobPrefix;
  this.institution=institution;
  this.stages=stages;
  this.doInitialChecks=doInitialChecks;
  this.ampInput=ampInput;
  this.ampBubble=ampBubble;
  Element mecqElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new Mecq.Args(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.jobPrefix + ""String_Node_Str"",this.libs);
  this.stages.setArgsIfPresent(RampartStage.MECQ,this.mecqArgs);
  Element analyseReadsElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_ANALYSE_READS);
  this.analyseReadsArgs=analyseReadsElement == null ? null : new AnalyseReads.Args(analyseReadsElement,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.jobPrefix + ""String_Node_Str"",this.rampartJobFileSystem.getMeqcDir(),this.rampartJobFileSystem.getAnalyseReadsDir(),this.organism);
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_READS,this.analyseReadsArgs);
  Element kmerCalcElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_KMER_CALC);
  this.kmerCalcArgs=kmerCalcElement == null ? null : new CalcOptimalKmer.Args(kmerCalcElement,this.rampartJobFileSystem.getKmerCalcDir(),this.jobPrefix + ""String_Node_Str"",this.organism.getPloidy());
  this.stages.setArgsIfPresent(RampartStage.KMER_CALC,this.kmerCalcArgs);
  Element massElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new Mass.Args(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.jobPrefix + ""String_Node_Str"",this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.organism);
  this.stages.setArgsIfPresent(RampartStage.MASS,this.massArgs);
  if (this.kmerCalcArgs != null && this.massArgs != null) {
    this.kmerCalcArgs.setMassJobArgList(this.massArgs.getMassJobArgList());
    this.massArgs.setKmerCalcArgs(this.kmerCalcArgs);
  }
  if (this.kmerCalcArgs != null) {
    this.kmerCalcArgs.initialise();
  }
  if (this.massArgs != null) {
    this.massArgs.initialise();
  }
  Element analyseMassElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_ANALYSE_MASS);
  this.analyseMassArgs=analyseMassElement == null ? null : new AnalyseMassAssemblies.Args(analyseMassElement,this.rampartJobFileSystem.getMassDir(),this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseMassDir(),this.massArgs == null ? null : this.massArgs.getMassJobArgList(),this.organism,this.jobPrefix + ""String_Node_Str"",this.kmerCalcArgs == null ? null : this.kmerCalcArgs.getResultFile(),this.analyseReadsArgs.isKmerAnalysis());
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_MASS,this.analyseMassArgs);
  Element selectMassElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_SELECT_MASS);
  this.selectMassArgs=selectMassElement == null ? null : new Select.Args(selectMassElement,this.rampartJobFileSystem.getAnalyseMassDir(),this.analyseMassArgs.getAssemblyLinkageFile(),this.rampartJobFileSystem.getSelectMassDir(),this.massArgs == null ? null : this.massArgs.getMassJobArgList(),new ArrayList<>(this.analyseMassArgs.getAssemblyAnalysers()),this.organism,this.jobPrefix + ""String_Node_Str"");
  this.stages.setArgsIfPresent(RampartStage.SELECT_MASS,this.selectMassArgs);
  Element ampElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new Amp.Args(ampElement,this.rampartJobFileSystem.getAmpDir(),this.jobPrefix + ""String_Node_Str"",this.ampInput != null ? this.ampInput : this.rampartJobFileSystem.getSelectedAssemblyFile(),this.organism.getPloidy() > 1 ? this.ampBubble != null ? this.ampBubble : this.rampartJobFileSystem.getSelectedBubbleFile() : null,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.organism);
  this.stages.setArgsIfPresent(RampartStage.AMP,this.ampArgs);
  Element analyseAmpElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_ANALYSE_AMP);
  this.analyseAmpArgs=analyseAmpElement == null ? null : new AnalyseAmpAssemblies.Args(analyseAmpElement,this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseAmpDir(),this.ampArgs == null ? null : this.ampArgs.getStageArgsList(),this.organism,this.jobPrefix + ""String_Node_Str"",this.analyseReadsArgs.isKmerAnalysis());
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_AMP,this.analyseAmpArgs);
  File finalAssembly=this.ampArgs == null ? this.rampartJobFileSystem.getSelectedAssemblyFile() : this.ampArgs.getFinalAssembly();
  Element finaliseElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_FINALISE);
  this.finaliseArgs=finaliseElement == null ? null : new Finalise.Args(finaliseElement,finalAssembly,this.rampartJobFileSystem.getFinalDir(),this.jobPrefix + ""String_Node_Str"",this.organism,this.institution);
  this.stages.setArgsIfPresent(RampartStage.FINALISE,this.finaliseArgs);
}",0.9931229060130488
59662,"public Args(Element element,File analyseReadsDir,File outputDir,List<AmpStage.Args> ampStages,Organism organism,String jobPrefix) throws IOException {
  super(new Params(),element,analyseReadsDir,outputDir,organism,jobPrefix);
  this.analyseAll=element.hasAttribute(KEY_ATTR_ALL) ? XmlHelper.getBooleanValue(element,KEY_ATTR_ALL) : DEFAULT_ANALYSE_ALL;
  this.ampStages=ampStages;
}","public Args(Element element,File analyseReadsDir,File outputDir,List<AmpStage.Args> ampStages,Organism organism,String jobPrefix,boolean doingReadKmerAnalysis) throws IOException {
  super(new Params(),element,analyseReadsDir,outputDir,organism,jobPrefix,doingReadKmerAnalysis);
  this.analyseAll=element.hasAttribute(KEY_ATTR_ALL) ? XmlHelper.getBooleanValue(element,KEY_ATTR_ALL) : DEFAULT_ANALYSE_ALL;
  this.ampStages=ampStages;
}",0.9362745098039216
59663,"public ToolArgs(Element ele,File outputDir,File readsAnalysisDir,Organism organism,String jobPrefix,boolean forceParallel) throws IOException {
  this();
  if (!XmlHelper.validate(ele,new String[]{KEY_ATTR_NAME},new String[]{KEY_ATTR_THREADS,KEY_ATTR_MEMORY,KEY_ATTR_PARALLEL},new String[0],new String[0])) {
    throw new IOException(""String_Node_Str"");
  }
  if (!ele.hasAttribute(KEY_ATTR_NAME))   throw new IOException(""String_Node_Str"" + KEY_ATTR_NAME + ""String_Node_Str"");
  this.name=XmlHelper.getTextValue(ele,KEY_ATTR_NAME);
  this.threads=ele.hasAttribute(KEY_ATTR_THREADS) ? XmlHelper.getIntValue(ele,KEY_ATTR_THREADS) : DEFAULT_THREADS;
  this.memory=ele.hasAttribute(KEY_ATTR_MEMORY) ? XmlHelper.getIntValue(ele,KEY_ATTR_MEMORY) : DEFAULT_MEMORY;
  this.runParallel=forceParallel || (ele.hasAttribute(KEY_ATTR_PARALLEL) ? XmlHelper.getBooleanValue(ele,KEY_ATTR_PARALLEL) : DEFAULT_RUN_PARALLEL);
  this.jobPrefix=jobPrefix;
  this.organism=organism;
  this.outputDir=outputDir;
  this.readsAnalysisDir=readsAnalysisDir;
}","public ToolArgs(Element ele,File outputDir,File readsAnalysisDir,Organism organism,String jobPrefix,boolean forceParallel,boolean doingReadKmerAnalysis) throws IOException {
  this();
  if (!XmlHelper.validate(ele,new String[]{KEY_ATTR_NAME},new String[]{KEY_ATTR_THREADS,KEY_ATTR_MEMORY,KEY_ATTR_PARALLEL},new String[0],new String[0])) {
    throw new IOException(""String_Node_Str"");
  }
  if (!ele.hasAttribute(KEY_ATTR_NAME))   throw new IOException(""String_Node_Str"" + KEY_ATTR_NAME + ""String_Node_Str"");
  this.name=XmlHelper.getTextValue(ele,KEY_ATTR_NAME);
  if (this.name.equalsIgnoreCase(""String_Node_Str"") && !doingReadKmerAnalysis) {
    throw new IOException(""String_Node_Str"");
  }
  this.threads=ele.hasAttribute(KEY_ATTR_THREADS) ? XmlHelper.getIntValue(ele,KEY_ATTR_THREADS) : DEFAULT_THREADS;
  this.memory=ele.hasAttribute(KEY_ATTR_MEMORY) ? XmlHelper.getIntValue(ele,KEY_ATTR_MEMORY) : DEFAULT_MEMORY;
  this.runParallel=forceParallel || (ele.hasAttribute(KEY_ATTR_PARALLEL) ? XmlHelper.getBooleanValue(ele,KEY_ATTR_PARALLEL) : DEFAULT_RUN_PARALLEL);
  this.jobPrefix=jobPrefix;
  this.organism=organism;
  this.outputDir=outputDir;
  this.readsAnalysisDir=readsAnalysisDir;
}",0.9277703005832212
59664,"public AnalyseAssembliesArgs(AnalyseAssembliesParams params,Element element,File analyseReadsDir,File outputDir,Organism organism,String jobPrefix) throws IOException {
  this(params);
  if (!XmlHelper.validate(element,new String[]{},new String[]{KEY_ATTR_PARALLEL},new String[]{KEY_ELEM_TOOL},new String[0])) {
    throw new IOException(""String_Node_Str"");
  }
  this.analyseReadsDir=analyseReadsDir;
  this.outputDir=outputDir;
  this.organism=organism;
  this.jobPrefix=jobPrefix;
  this.runParallel=element.hasAttribute(KEY_ATTR_PARALLEL) ? XmlHelper.getBooleanValue(element,KEY_ATTR_PARALLEL) : DEFAULT_RUN_PARALLEL;
  NodeList nodes=element.getElementsByTagName(KEY_ELEM_TOOL);
  for (int i=0; i < nodes.getLength(); i++) {
    this.tools.add(new ToolArgs((Element)nodes.item(i),outputDir,analyseReadsDir,organism,jobPrefix,this.runParallel));
  }
  for (  AnalyseAssembliesArgs.ToolArgs requestedService : this.tools) {
    AssemblyAnalyser aa=this.assemblyAnalyserFactory.create(requestedService.getName());
    aa.setArgs(requestedService);
    this.assemblyAnalysers.add(aa);
  }
}","public AnalyseAssembliesArgs(AnalyseAssembliesParams params,Element element,File analyseReadsDir,File outputDir,Organism organism,String jobPrefix,boolean doingReadKmerAnalysis) throws IOException {
  this(params);
  if (!XmlHelper.validate(element,new String[]{},new String[]{KEY_ATTR_PARALLEL},new String[]{KEY_ELEM_TOOL},new String[0])) {
    throw new IOException(""String_Node_Str"");
  }
  this.analyseReadsDir=analyseReadsDir;
  this.outputDir=outputDir;
  this.organism=organism;
  this.jobPrefix=jobPrefix;
  this.runParallel=element.hasAttribute(KEY_ATTR_PARALLEL) ? XmlHelper.getBooleanValue(element,KEY_ATTR_PARALLEL) : DEFAULT_RUN_PARALLEL;
  NodeList nodes=element.getElementsByTagName(KEY_ELEM_TOOL);
  for (int i=0; i < nodes.getLength(); i++) {
    this.tools.add(new ToolArgs((Element)nodes.item(i),outputDir,analyseReadsDir,organism,jobPrefix,this.runParallel,doingReadKmerAnalysis));
  }
  for (  AnalyseAssembliesArgs.ToolArgs requestedService : this.tools) {
    AssemblyAnalyser aa=this.assemblyAnalyserFactory.create(requestedService.getName());
    aa.setArgs(requestedService);
    this.assemblyAnalysers.add(aa);
  }
}",0.9767233661593554
59665,"public Args(Element element,File massDir,File analyseReadsDir,File outputDir,List<MassJob.Args> massJobs,Organism organism,String jobPrefix,File kmerCalcResults) throws IOException {
  super(new Params(),element,analyseReadsDir,outputDir,organism,jobPrefix);
  this.massDir=massDir;
  this.massJobs=massJobs;
  this.kmerCalcResults=kmerCalcResults;
}","public Args(Element element,File massDir,File analyseReadsDir,File outputDir,List<MassJob.Args> massJobs,Organism organism,String jobPrefix,File kmerCalcResults,boolean doingReadKmerAnalysis) throws IOException {
  super(new Params(),element,analyseReadsDir,outputDir,organism,jobPrefix,doingReadKmerAnalysis);
  this.massDir=massDir;
  this.massJobs=massJobs;
  this.kmerCalcResults=kmerCalcResults;
}",0.9308510638297872
59666,"/** 
 * Cleans a RAMPART job directory of any known temporary information.  This will not delete any information not in the MECQ, MASS, AMP or REPORT directories.
 * @param jobDir The RAMPART job directory to clean
 * @throws java.io.IOException Thrown if there were an issues cleaning the directory
 */
public void cleanJob(File jobDir) throws IOException {
  if (this.verbose) {
    System.out.print(""String_Node_Str"" + jobDir.getAbsolutePath() + ""String_Node_Str"");
  }
  RampartJobFileSystem jobFs=new RampartJobFileSystem(jobDir);
  FileUtils.deleteDirectory(jobFs.getMeqcDir());
  FileUtils.deleteDirectory(jobFs.getAnalyseReadsDir());
  FileUtils.deleteDirectory(jobFs.getMassDir());
  FileUtils.deleteDirectory(jobFs.getAnalyseMassDir());
  FileUtils.deleteDirectory(jobFs.getAmpDir());
  FileUtils.deleteDirectory(jobFs.getAnalyseAmpDir());
  FileUtils.deleteDirectory(jobFs.getReportDir());
  FileUtils.deleteDirectory(jobFs.getFinalDir());
  if (this.verbose) {
    System.out.println(""String_Node_Str"");
  }
}","/** 
 * Cleans a RAMPART job directory of any known temporary information.  This will not delete any information not in the MECQ, MASS, AMP or REPORT directories.
 * @param jobDir The RAMPART job directory to clean
 * @throws java.io.IOException Thrown if there were an issues cleaning the directory
 */
public void cleanJob(File jobDir) throws IOException {
  if (this.verbose) {
    System.out.print(""String_Node_Str"" + jobDir.getAbsolutePath() + ""String_Node_Str"");
  }
  RampartJobFileSystem jobFs=new RampartJobFileSystem(jobDir);
  FileUtils.deleteDirectory(jobFs.getMeqcDir());
  FileUtils.deleteDirectory(jobFs.getAnalyseReadsDir());
  FileUtils.deleteDirectory(jobFs.getKmerCalcDir());
  FileUtils.deleteDirectory(jobFs.getMassDir());
  FileUtils.deleteDirectory(jobFs.getAnalyseMassDir());
  FileUtils.deleteDirectory(jobFs.getSelectMassDir());
  FileUtils.deleteDirectory(jobFs.getAmpDir());
  FileUtils.deleteDirectory(jobFs.getAnalyseAmpDir());
  FileUtils.deleteDirectory(jobFs.getReportDir());
  FileUtils.deleteDirectory(jobFs.getFinalDir());
  if (this.verbose) {
    System.out.println(""String_Node_Str"");
  }
}",0.9497674418604652
59667,"protected final void setupFileStructure(File jobDir){
  this.meqcDir=new File(jobDir,""String_Node_Str"");
  this.analyseReadsDir=new File(jobDir,""String_Node_Str"");
  this.massDir=new File(jobDir,""String_Node_Str"");
  this.analyseMassDir=new File(jobDir,""String_Node_Str"");
  this.massStatsDir=new File(massDir,""String_Node_Str"");
  this.ampDir=new File(jobDir,""String_Node_Str"");
  this.ampAssembliesDir=new File(ampDir,""String_Node_Str"");
  this.analyseAmpDir=new File(jobDir,""String_Node_Str"");
  this.reportDir=new File(jobDir,""String_Node_Str"");
  this.reportImagesDir=new File(reportDir,""String_Node_Str"");
  this.finalDir=new File(jobDir,""String_Node_Str"");
  this.qtLogFile=new File(this.meqcDir + ""String_Node_Str"");
  this.massPlotsFile=new File(this.massStatsDir.getPath() + ""String_Node_Str"");
  this.massStatsFile=new File(this.massStatsDir.getPath() + ""String_Node_Str"");
  this.massLogFile=new File(this.massDir.getPath() + ""String_Node_Str"");
  this.selectedAssemblyFile=new File(this.analyseMassDir.getPath() + ""String_Node_Str"");
  this.selectedBubbleFile=new File(this.analyseMassDir.getPath() + ""String_Node_Str"");
  this.ampPlotsFile=new File(this.ampAssembliesDir.getPath() + ""String_Node_Str"");
  this.ampStatsFile=new File(this.ampAssembliesDir.getPath() + ""String_Node_Str"");
  this.ampLogFile=new File(this.ampDir.getPath() + ""String_Node_Str"");
  this.reportTemplateFile=new File(this.reportDir.getPath() + ""String_Node_Str"");
  this.reportMergedFile=new File(this.reportDir.getPath() + ""String_Node_Str"");
}","protected final void setupFileStructure(File jobDir){
  this.meqcDir=new File(jobDir,""String_Node_Str"");
  this.analyseReadsDir=new File(jobDir,""String_Node_Str"");
  this.massDir=new File(jobDir,""String_Node_Str"");
  this.analyseMassDir=new File(jobDir,""String_Node_Str"");
  this.ampDir=new File(jobDir,""String_Node_Str"");
  this.ampAssembliesDir=new File(ampDir,""String_Node_Str"");
  this.analyseAmpDir=new File(jobDir,""String_Node_Str"");
  this.reportDir=new File(jobDir,""String_Node_Str"");
  this.reportImagesDir=new File(reportDir,""String_Node_Str"");
  this.finalDir=new File(jobDir,""String_Node_Str"");
  this.qtLogFile=new File(this.meqcDir + ""String_Node_Str"");
  this.massPlotsFile=new File(this.analyseMassDir.getPath() + ""String_Node_Str"");
  this.massStatsFile=new File(this.analyseMassDir.getPath() + ""String_Node_Str"");
  this.massLogFile=new File(this.massDir.getPath() + ""String_Node_Str"");
  this.selectedAssemblyFile=new File(this.analyseMassDir.getPath() + ""String_Node_Str"");
  this.selectedBubbleFile=new File(this.analyseMassDir.getPath() + ""String_Node_Str"");
  this.ampPlotsFile=new File(this.ampAssembliesDir.getPath() + ""String_Node_Str"");
  this.ampStatsFile=new File(this.ampAssembliesDir.getPath() + ""String_Node_Str"");
  this.ampLogFile=new File(this.ampDir.getPath() + ""String_Node_Str"");
  this.reportTemplateFile=new File(this.reportDir.getPath() + ""String_Node_Str"");
  this.reportMergedFile=new File(this.reportDir.getPath() + ""String_Node_Str"");
}",0.9691542288557214
59668,"@Override protected void internalParseXml(Element element) throws IOException {
  Element librariesElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_LIBRARIES);
  NodeList libraries=librariesElement.getElementsByTagName(KEY_ELEM_LIBRARY);
  this.libs=new ArrayList<>();
  for (int i=0; i < libraries.getLength(); i++) {
    this.libs.add(new Library((Element)libraries.item(i),this.getOutputDir().getAbsoluteFile()));
  }
  Element pipelineElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_PIPELINE);
  Element mecqElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new Mecq.Args(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs);
  this.stages.setArgsIfPresent(RampartStage.MECQ,this.mecqArgs);
  Element analyseReadsElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_ANALYSE_READS);
  this.analyseReadsArgs=analyseReadsElement == null ? null : new AnalyseReads.Args(analyseReadsElement,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMeqcDir(),this.rampartJobFileSystem.getAnalyseReadsDir(),this.getOrganism());
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_READS,this.analyseReadsArgs);
  Element massElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new Mass.Args(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getOrganism());
  this.stages.setArgsIfPresent(RampartStage.MASS,this.massArgs);
  Element analyseMassElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_ANALYSE_MASS);
  this.analyseMassArgs=analyseMassElement == null ? null : new AnalyseMassAssemblies.Args(analyseMassElement,this.rampartJobFileSystem.getMassDir(),this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseMassDir(),this.massArgs == null ? null : this.massArgs.getSingleMassArgsList(),this.getOrganism(),this.getJobPrefix() + ""String_Node_Str"");
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_MASS,this.analyseMassArgs);
  Element ampElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new Amp.Args(ampElement,this.rampartJobFileSystem.getAmpDir(),this.getJobPrefix() + ""String_Node_Str"",this.ampInput != null ? this.ampInput : this.rampartJobFileSystem.getSelectedAssemblyFile(),this.getOrganism().getPloidy() > 1 ? this.ampBubble != null ? this.ampBubble : this.rampartJobFileSystem.getSelectedBubbleFile() : null,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getOrganism());
  this.stages.setArgsIfPresent(RampartStage.AMP,this.ampArgs);
  Element analyseAmpElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_ANALYSE_AMP);
  this.analyseAmpArgs=analyseAmpElement == null ? null : new AnalyseAmpAssemblies.Args(analyseAmpElement,this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseAmpDir(),this.ampArgs == null ? null : this.ampArgs.getStageArgsList(),this.getOrganism(),this.getJobPrefix() + ""String_Node_Str"");
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_AMP,this.analyseAmpArgs);
  File finalAssembly=this.ampArgs == null ? this.rampartJobFileSystem.getSelectedAssemblyFile() : this.ampArgs.getFinalAssembly();
  Element finaliseElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_FINALISE);
  this.finaliseArgs=finaliseElement == null ? null : new Finalise.Args(finaliseElement,finalAssembly,this.rampartJobFileSystem.getFinalDir(),this.getOrganism(),this.getInstitution());
  this.stages.setArgsIfPresent(RampartStage.FINALISE,this.finaliseArgs);
}","@Override protected void internalParseXml(Element element) throws IOException {
  Element librariesElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_LIBRARIES);
  NodeList libraries=librariesElement.getElementsByTagName(KEY_ELEM_LIBRARY);
  this.libs=new ArrayList<>();
  for (int i=0; i < libraries.getLength(); i++) {
    this.libs.add(new Library((Element)libraries.item(i),this.getOutputDir().getAbsoluteFile()));
  }
  Element pipelineElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_PIPELINE);
  Element mecqElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new Mecq.Args(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs);
  this.stages.setArgsIfPresent(RampartStage.MECQ,this.mecqArgs);
  Element analyseReadsElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_ANALYSE_READS);
  this.analyseReadsArgs=analyseReadsElement == null ? null : new AnalyseReads.Args(analyseReadsElement,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMeqcDir(),this.rampartJobFileSystem.getAnalyseReadsDir(),this.getOrganism());
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_READS,this.analyseReadsArgs);
  Element massElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new Mass.Args(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getOrganism());
  this.stages.setArgsIfPresent(RampartStage.MASS,this.massArgs);
  Element analyseMassElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_ANALYSE_MASS);
  this.analyseMassArgs=analyseMassElement == null ? null : new AnalyseMassAssemblies.Args(analyseMassElement,this.rampartJobFileSystem.getMassDir(),this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseMassDir(),this.massArgs == null ? null : this.massArgs.getMassJobArgList(),this.getOrganism(),this.getJobPrefix() + ""String_Node_Str"");
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_MASS,this.analyseMassArgs);
  Element ampElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new Amp.Args(ampElement,this.rampartJobFileSystem.getAmpDir(),this.getJobPrefix() + ""String_Node_Str"",this.ampInput != null ? this.ampInput : this.rampartJobFileSystem.getSelectedAssemblyFile(),this.getOrganism().getPloidy() > 1 ? this.ampBubble != null ? this.ampBubble : this.rampartJobFileSystem.getSelectedBubbleFile() : null,this.libs,this.mecqArgs == null ? new ArrayList<Mecq.EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getOrganism());
  this.stages.setArgsIfPresent(RampartStage.AMP,this.ampArgs);
  Element analyseAmpElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_ANALYSE_AMP);
  this.analyseAmpArgs=analyseAmpElement == null ? null : new AnalyseAmpAssemblies.Args(analyseAmpElement,this.analyseReadsArgs != null ? this.rampartJobFileSystem.getAnalyseReadsDir() : null,this.rampartJobFileSystem.getAnalyseAmpDir(),this.ampArgs == null ? null : this.ampArgs.getStageArgsList(),this.getOrganism(),this.getJobPrefix() + ""String_Node_Str"");
  this.stages.setArgsIfPresent(RampartStage.ANALYSE_AMP,this.analyseAmpArgs);
  File finalAssembly=this.ampArgs == null ? this.rampartJobFileSystem.getSelectedAssemblyFile() : this.ampArgs.getFinalAssembly();
  Element finaliseElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_FINALISE);
  this.finaliseArgs=finaliseElement == null ? null : new Finalise.Args(finaliseElement,finalAssembly,this.rampartJobFileSystem.getFinalDir(),this.getOrganism(),this.getInstitution());
  this.stages.setArgsIfPresent(RampartStage.FINALISE,this.finaliseArgs);
}",0.9980430528375732
59669,"public ReadsInput(Element ele) throws IOException {
  if (!ele.hasAttribute(KEY_ATTR_ECQ))   throw new IOException(""String_Node_Str"" + KEY_ATTR_ECQ + ""String_Node_Str"");
  if (!ele.hasAttribute(KEY_ATTR_LIB))   throw new IOException(""String_Node_Str"" + KEY_ATTR_LIB + ""String_Node_Str"");
  this.ecq=XmlHelper.getTextValue(ele,KEY_ATTR_ECQ);
  this.lib=XmlHelper.getTextValue(ele,KEY_ATTR_LIB);
}","public ReadsInput(Element ele){
  if (!ele.hasAttribute(KEY_ATTR_ECQ))   throw new IllegalArgumentException(""String_Node_Str"" + KEY_ATTR_ECQ + ""String_Node_Str"");
  if (!ele.hasAttribute(KEY_ATTR_LIB))   throw new IllegalArgumentException(""String_Node_Str"" + KEY_ATTR_LIB + ""String_Node_Str"");
  this.ecq=XmlHelper.getTextValue(ele,KEY_ATTR_ECQ);
  this.lib=XmlHelper.getTextValue(ele,KEY_ATTR_LIB);
}",0.7638190954773869
59670,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  log.info(""String_Node_Str"");
  Args args=this.getArgs();
  if (!args.getOutputDir().exists()) {
    args.getOutputDir().mkdirs();
  }
  Set<AssemblyAnalyser> requestedServices=new HashSet<>();
  for (  String requestedService : this.getArgs().getAsmAnalyses()) {
    requestedServices.add(this.assemblyAnalyserFactory.create(requestedService,this.getConanProcessService()));
  }
  List<Integer> jobIds=new ArrayList<>();
  try {
    for (    AssemblyAnalyser analyser : requestedServices) {
      List<File> assemblies=this.findAssemblies(analyser);
      File outputDir=new File(args.getOutputDir(),analyser.getName().toLowerCase());
      String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + analyser.getName().toLowerCase();
      jobIds.addAll(analyser.execute(assemblies,outputDir,jobPrefix,args,this.conanExecutorService));
    }
    if (this.conanExecutorService.usingScheduler() && args.isRunParallel() && !jobIds.isEmpty()) {
      log.debug(""String_Node_Str"");
      this.conanExecutorService.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
  try {
    AssemblyStatsTable table=new AssemblyStatsTable();
    for (    AssemblyAnalyser analyser : requestedServices) {
      List<File> assemblies=this.findAssemblies(analyser);
      File outputDir=new File(args.getOutputDir(),analyser.getName().toLowerCase());
      analyser.updateTable(table,assemblies,outputDir,""String_Node_Str"");
    }
    File finalFile=new File(args.getOutputDir(),""String_Node_Str"");
    table.save(finalFile);
    log.debug(""String_Node_Str"" + finalFile.getAbsolutePath());
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(5,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  log.info(""String_Node_Str"");
  Args args=this.getArgs();
  if (!args.getOutputDir().exists()) {
    args.getOutputDir().mkdirs();
  }
  Set<AssemblyAnalyser> requestedServices=new HashSet<>();
  for (  String requestedService : this.getArgs().getAsmAnalyses()) {
    requestedServices.add(this.assemblyAnalyserFactory.create(requestedService,this.getConanProcessService()));
  }
  List<Integer> jobIds=new ArrayList<>();
  try {
    for (    AssemblyAnalyser analyser : requestedServices) {
      List<File> assemblies=this.findAssemblies(analyser);
      File outputDir=new File(args.getOutputDir(),analyser.getName().toLowerCase());
      String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + analyser.getName().toLowerCase();
      jobIds.addAll(analyser.execute(assemblies,outputDir,jobPrefix,args,this.conanExecutorService));
    }
    if (this.conanExecutorService.usingScheduler() && args.isRunParallel() && !jobIds.isEmpty()) {
      log.debug(""String_Node_Str"");
      this.conanExecutorService.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
  try {
    AssemblyStatsTable table=this.createTable();
    for (    AssemblyAnalyser analyser : requestedServices) {
      List<File> assemblies=this.findAssemblies(analyser);
      File outputDir=new File(args.getOutputDir(),analyser.getName().toLowerCase());
      analyser.updateTable(table,assemblies,outputDir,""String_Node_Str"");
    }
    File finalFile=new File(args.getOutputDir(),""String_Node_Str"");
    table.save(finalFile);
    log.debug(""String_Node_Str"" + finalFile.getAbsolutePath());
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(5,ioe);
  }
  return true;
}",0.9930795847750864
59671,"public Args(Element element,File massDir,File analyseReadsDir,File outputDir,List<MassJob.Args> massGroups,Organism organism,String jobPrefix){
  super(new Params(),element,analyseReadsDir,outputDir,organism,jobPrefix);
  this.massDir=massDir;
  this.massGroups=massGroups;
}","public Args(Element element,File massDir,File analyseReadsDir,File outputDir,List<MassJob.Args> massJobs,Organism organism,String jobPrefix){
  super(new Params(),element,analyseReadsDir,outputDir,organism,jobPrefix);
  this.massDir=massDir;
  this.massJobs=massJobs;
}",0.9558823529411764
59672,"protected File getAssemblyFile(Assembler assembler,File assemblyDir){
  if (assemblyDir.getName().equals(""String_Node_Str"")) {
    return assembler.getScaffoldsFile();
  }
 else   if (assemblyDir.getName().equals(""String_Node_Str"")) {
    return assembler.getContigsFile();
  }
 else   if (assemblyDir.getName().equals(""String_Node_Str"")) {
    return assembler.getUnitigsFile();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + assemblyDir.getName());
  }
}","protected File getAssemblyFile(Assembler assembler,File assemblyDir){
  if (assemblyDir.getName().equals(""String_Node_Str"")) {
    return assembler.getScaffoldsFile().getAbsoluteFile();
  }
 else   if (assemblyDir.getName().equals(""String_Node_Str"")) {
    return assembler.getContigsFile().getAbsoluteFile();
  }
 else   if (assemblyDir.getName().equals(""String_Node_Str"")) {
    return assembler.getUnitigsFile().getAbsoluteFile();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + assemblyDir.getName());
  }
}",0.9464285714285714
59673,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  log.info(""String_Node_Str"");
  Args args=this.getArgs();
  if (!args.getOutputDir().exists()) {
    args.getOutputDir().mkdirs();
  }
  Set<AssemblyAnalyser> requestedServices=new HashSet<>();
  for (  String requestedService : this.getArgs().getAsmAnalyses()) {
    requestedServices.add(this.assemblyAnalyserFactory.create(requestedService,this.getConanProcessService()));
  }
  try {
    List<Integer> jobIds=new ArrayList<>();
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args singleMassArgs : args.getMassGroups()) {
        String massGroup=singleMassArgs.getName();
        File inputDir=new File(args.getMassDir(),massGroup);
        if (!inputDir.exists()) {
          throw new ProcessExecutionException(-1,""String_Node_Str"" + massGroup + ""String_Node_Str""+ inputDir.getAbsolutePath());
        }
        File unitigsDir=new File(inputDir,""String_Node_Str"");
        File contigsDir=new File(inputDir,""String_Node_Str"");
        File scaffoldsDir=new File(inputDir,""String_Node_Str"");
        File outputDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + massGroup+ ""String_Node_Str""+ analyser.getName().toLowerCase();
        if (analyser.isFast()) {
          if (unitigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(unitigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (contigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(contigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (scaffoldsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(scaffoldsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
        }
 else {
          File seqDir=null;
          if (scaffoldsDir.exists()) {
            seqDir=scaffoldsDir;
          }
 else           if (contigsDir.exists()) {
            seqDir=contigsDir;
          }
 else           if (unitigsDir.exists()) {
            seqDir=unitigsDir;
          }
 else {
            throw new ProcessExecutionException(-2,""String_Node_Str"" + massGroup);
          }
          jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(seqDir),outputDir,jobPrefix,this.getArgs(),this.conanExecutorService));
        }
      }
    }
    if (this.conanExecutorService.usingScheduler() && args.isRunParallel() && !jobIds.isEmpty()) {
      log.debug(""String_Node_Str"");
      this.conanExecutorService.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
  try {
    AssemblyStatsTable table=new AssemblyStatsTable();
    int index=0;
    for (    MassJob.Args jobArgs : args.getMassGroups()) {
      File asmDir=this.getAssemblyDir(new File(args.getMassDir(),jobArgs.getName()));
      for (      Assembler assembler : jobArgs.getAssemblers()) {
        AssemblyStats stats=new AssemblyStats();
        stats.setIndex(index++);
        stats.setDataset(jobArgs.getName());
        stats.setDesc(assembler.getAssemblerArgs().getOutputDir().getName());
        stats.setFilePath(this.getAssemblyFile(assembler,asmDir).getAbsolutePath());
        stats.setBubblePath(assembler.getBubbleFile() != null ? assembler.getBubbleFile().getAbsolutePath() : ""String_Node_Str"");
        table.add(stats);
      }
    }
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args jobArgs : args.getMassGroups()) {
        String massGroup=jobArgs.getName();
        File asmDir=this.getAssemblyDir(new File(args.getMassDir(),massGroup));
        File reportDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        analyser.updateTable(table,assembliesFromDir(asmDir),analyser.isFast() ? new File(reportDir,asmDir.getName()) : reportDir,massGroup);
      }
    }
    AssemblySelector assemblySelector=new DefaultAssemblySelector(args.getWeightings());
    AssemblyStats selectedAssembly=assemblySelector.selectAssembly(table,args.getOrganism().getEstGenomeSize(),args.getOrganism().getEstGcPercentage(),args.getMassDir());
    File massGroupDir=new File(args.getMassDir(),selectedAssembly.getDataset());
    File bestAssembly=new File(selectedAssembly.getFilePath());
    File bubbles=new File(selectedAssembly.getBubblePath());
    File bestAssemblyLink=new File(args.getOutputDir(),""String_Node_Str"");
    File bubblesLink=new File(args.getOutputDir(),""String_Node_Str"");
    log.info(""String_Node_Str"" + bestAssembly.getAbsolutePath());
    this.getConanProcessService().createLocalSymbolicLink(bestAssembly,bestAssemblyLink);
    if (bubbles != null && bubbles.exists()) {
      this.getConanProcessService().createLocalSymbolicLink(bubbles,bubblesLink);
    }
    File finalFile=new File(args.getOutputDir(),""String_Node_Str"");
    table.save(finalFile);
    log.debug(""String_Node_Str"" + finalFile.getAbsolutePath());
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(5,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  log.info(""String_Node_Str"");
  Args args=this.getArgs();
  if (!args.getOutputDir().exists()) {
    args.getOutputDir().mkdirs();
  }
  Set<AssemblyAnalyser> requestedServices=new HashSet<>();
  for (  String requestedService : this.getArgs().getAsmAnalyses()) {
    requestedServices.add(this.assemblyAnalyserFactory.create(requestedService,this.getConanProcessService()));
  }
  try {
    List<Integer> jobIds=new ArrayList<>();
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args singleMassArgs : args.getMassJobs()) {
        String massGroup=singleMassArgs.getName();
        File inputDir=new File(args.getMassDir(),massGroup);
        if (!inputDir.exists()) {
          throw new ProcessExecutionException(-1,""String_Node_Str"" + massGroup + ""String_Node_Str""+ inputDir.getAbsolutePath());
        }
        File unitigsDir=new File(inputDir,""String_Node_Str"");
        File contigsDir=new File(inputDir,""String_Node_Str"");
        File scaffoldsDir=new File(inputDir,""String_Node_Str"");
        File outputDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + massGroup+ ""String_Node_Str""+ analyser.getName().toLowerCase();
        if (analyser.isFast()) {
          if (unitigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(unitigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (contigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(contigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (scaffoldsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(scaffoldsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
        }
 else {
          File seqDir=null;
          if (scaffoldsDir.exists()) {
            seqDir=scaffoldsDir;
          }
 else           if (contigsDir.exists()) {
            seqDir=contigsDir;
          }
 else           if (unitigsDir.exists()) {
            seqDir=unitigsDir;
          }
 else {
            throw new ProcessExecutionException(-2,""String_Node_Str"" + massGroup);
          }
          jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(seqDir),outputDir,jobPrefix,this.getArgs(),this.conanExecutorService));
        }
      }
    }
    if (this.conanExecutorService.usingScheduler() && args.isRunParallel() && !jobIds.isEmpty()) {
      log.debug(""String_Node_Str"");
      this.conanExecutorService.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
  try {
    AssemblyStatsTable table=this.createTable();
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args jobArgs : args.getMassJobs()) {
        String massGroup=jobArgs.getName();
        File asmDir=this.getAssemblyDir(new File(args.getMassDir(),massGroup));
        File reportDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        analyser.updateTable(table,assembliesFromDir(asmDir),analyser.isFast() ? new File(reportDir,asmDir.getName()) : reportDir,massGroup);
      }
    }
    AssemblySelector assemblySelector=new DefaultAssemblySelector(args.getWeightings());
    AssemblyStats selectedAssembly=assemblySelector.selectAssembly(table,args.getOrganism().getEstGenomeSize(),args.getOrganism().getEstGcPercentage(),args.getMassDir());
    File massGroupDir=new File(args.getMassDir(),selectedAssembly.getDataset());
    File bestAssembly=new File(selectedAssembly.getFilePath());
    File bubbles=new File(selectedAssembly.getBubblePath());
    File bestAssemblyLink=new File(args.getOutputDir(),""String_Node_Str"");
    File bubblesLink=new File(args.getOutputDir(),""String_Node_Str"");
    log.info(""String_Node_Str"" + bestAssembly.getAbsolutePath());
    this.getConanProcessService().createLocalSymbolicLink(bestAssembly,bestAssemblyLink);
    if (bubbles != null && bubbles.exists()) {
      this.getConanProcessService().createLocalSymbolicLink(bubbles,bubblesLink);
    }
    File finalFile=new File(args.getOutputDir(),""String_Node_Str"");
    table.save(finalFile);
    log.debug(""String_Node_Str"" + finalFile.getAbsolutePath());
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(5,ioe);
  }
  return true;
}",0.9195466891448908
59674,"@Override public void updateTable(AssemblyStatsTable table,List<File> assemblies,File reportDir,String subGroup) throws IOException {
  Collection<File> cegmaFiles=FileUtils.listFiles(reportDir,new String[]{""String_Node_Str""},false);
  for (  File asm : assemblies) {
    File c=null;
    for (    File cf : cegmaFiles) {
      if (FilenameUtils.getBaseName(asm.getName()).equals(FilenameUtils.getBaseName(cf.getName()))) {
        c=cf;
        break;
      }
    }
    if (c == null || !c.exists())     throw new IllegalStateException(""String_Node_Str"");
    if (!asm.exists())     throw new IllegalStateException(""String_Node_Str"" + asm.getAbsolutePath());
    table.mergeWithCegmaResults(c,FilenameUtils.getBaseName(asm.getName()),subGroup);
  }
}","@Override public void updateTable(AssemblyStatsTable table,List<File> assemblies,File reportDir,String subGroup) throws IOException {
  Collection<File> cegmaFiles=FileUtils.listFiles(reportDir,new String[]{""String_Node_Str""},false);
  for (  File asm : assemblies) {
    File c=null;
    for (    File cf : cegmaFiles) {
      if (FilenameUtils.getBaseName(asm.getName()).equals(FilenameUtils.getBaseName(cf.getName()))) {
        c=cf;
        break;
      }
    }
    if (c == null || !c.exists())     throw new IllegalStateException(""String_Node_Str"");
    if (!asm.exists())     throw new IllegalStateException(""String_Node_Str"" + asm.getAbsolutePath());
    CegmaV2_4Report cegmaReport=new CegmaV2_4Report(c);
    AssemblyStats stats=table.findStats(subGroup,asm.getName());
    if (stats == null) {
      throw new IOException(""String_Node_Str"" + subGroup + ""String_Node_Str""+ asm.getName());
    }
    stats.setCompletenessPercentage(cegmaReport.getPcComplete());
  }
}",0.7881944444444444
59675,"@Override public void updateTable(AssemblyStatsTable table,List<File> assemblies,File reportDir,String subGroup) throws IOException {
  File quastReportFile=new File(reportDir,QUAST_REPORT_NAME);
  if (quastReportFile.exists()) {
    table.mergeWithQuastResults(quastReportFile,subGroup);
  }
 else {
    log.warn(""String_Node_Str"" + quastReportFile.getAbsolutePath() + ""String_Node_Str"");
  }
}","@Override public void updateTable(AssemblyStatsTable table,List<File> assemblies,File reportDir,String subGroup) throws IOException {
  File quastReportFile=new File(reportDir,QUAST_REPORT_NAME);
  if (quastReportFile.exists()) {
    QuastV2_2Report quastReport=new QuastV2_2Report(quastReportFile);
    for (    QuastV2_2Report.QuastV2_2AssemblyStats qStats : quastReport.getStatList()) {
      if (!qStats.getName().endsWith(""String_Node_Str"")) {
        String desc=qStats.getName().substring(subGroup.length() + 1,qStats.getName().lastIndexOf(""String_Node_Str""));
        AssemblyStats stats=table.findStats(subGroup,desc);
        if (stats == null) {
          throw new IOException(""String_Node_Str"" + subGroup + ""String_Node_Str""+ desc);
        }
        stats.setN50(qStats.getN50());
        stats.setL50(qStats.getL50());
        stats.setMaxLen(qStats.getLargestContig());
        stats.setGcPercentage(qStats.getGcPc());
        stats.setNbSeqs(qStats.getNbContigsGt0());
        stats.setNbSeqsGt1K(qStats.getNbContigsGt1k());
        stats.setNbBases(qStats.getTotalLengthGt0());
        stats.setNbBasesGt1K(qStats.getTotalLengthGt1k());
        stats.setNPercentage(qStats.getNsPer100k() / 1000.0);
      }
    }
  }
 else {
    log.warn(""String_Node_Str"" + quastReportFile.getAbsolutePath() + ""String_Node_Str"");
  }
}",0.3013856812933025
59676,"/** 
 * The main entry point for RAMPART.  Looks at the first argument to decide which mode to run in.  Execution of each mode is handled by RampartMode.
 * @param args Command line arguments
 */
public static void main(String[] args){
  try {
    RampartCLI rampartCLI=new RampartCLI(args);
    if (rampartCLI == null)     throw new IllegalArgumentException(""String_Node_Str"");
    if (rampartCLI.isHelp()) {
      rampartCLI.printHelp();
    }
 else {
      rampartCLI.execute();
    }
  }
 catch (  IllegalArgumentException|ParseException e) {
    System.err.println(e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(e.getMessage());
    System.err.println(StringUtils.join(e.getStackTrace(),""String_Node_Str""));
    System.exit(2);
  }
}","/** 
 * The main entry point for RAMPART.  Looks at the first argument to decide which mode to run in.  Execution of each mode is handled by RampartMode.
 * @param args Command line arguments
 */
public static void main(String[] args){
  try {
    RampartCLI rampartCLI=new RampartCLI(args);
    if (rampartCLI == null)     throw new IllegalArgumentException(""String_Node_Str"");
    if (rampartCLI.isHelp()) {
      rampartCLI.printHelp();
    }
 else {
      rampartCLI.initialise();
      rampartCLI.execute();
    }
  }
 catch (  IllegalArgumentException|ParseException e) {
    System.err.println(e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(e.getMessage());
    System.err.println(StringUtils.join(e.getStackTrace(),""String_Node_Str""));
    System.exit(2);
  }
}",0.9804908747640024
59677,"@Override protected void parseExtra(CommandLine commandLine) throws ParseException {
  this.stages=commandLine.hasOption(OPT_STAGES) ? RampartStageList.parse(commandLine.getOptionValue(OPT_STAGES)) : DEFAULT_STAGES;
  if (stages == DEFAULT_STAGES) {
    if (commandLine.hasOption(OPT_RUN_FIRST_HALF)) {
      RampartStageList firstHalf=new RampartStageList();
      firstHalf.add(RampartStage.MECQ);
      firstHalf.add(RampartStage.ANALYSE_READS);
      firstHalf.add(RampartStage.MASS);
      firstHalf.add(RampartStage.ANALYSE_MASS);
      this.stages=firstHalf;
      log.info(""String_Node_Str"");
    }
 else     if (commandLine.hasOption(OPT_RUN_SECOND_HALF)) {
      RampartStageList secondHalf=new RampartStageList();
      secondHalf.add(RampartStage.AMP);
      secondHalf.add(RampartStage.ANALYSE_AMP);
      secondHalf.add(RampartStage.FINALISE);
      this.stages=secondHalf;
      log.info(""String_Node_Str"");
      if (commandLine.hasOption(OPT_AMP_INPUT)) {
        this.ampInput=new File(commandLine.getOptionValue(OPT_AMP_INPUT));
      }
    }
  }
  if (commandLine.getArgs().length != 1)   throw new ParseException(""String_Node_Str"" + commandLine.getArgs().length);
  this.jobConfig=new File(commandLine.getArgs()[0]);
}","@Override protected void parseExtra(CommandLine commandLine) throws ParseException {
  this.skipChecks=commandLine.hasOption(OPT_SKIP_CHECKS);
  this.stages=commandLine.hasOption(OPT_STAGES) ? RampartStageList.parse(commandLine.getOptionValue(OPT_STAGES)) : DEFAULT_STAGES;
  if (stages == DEFAULT_STAGES) {
    if (commandLine.hasOption(OPT_RUN_FIRST_HALF)) {
      RampartStageList firstHalf=new RampartStageList();
      firstHalf.add(RampartStage.MECQ);
      firstHalf.add(RampartStage.ANALYSE_READS);
      firstHalf.add(RampartStage.MASS);
      firstHalf.add(RampartStage.ANALYSE_MASS);
      this.stages=firstHalf;
      log.info(""String_Node_Str"");
    }
 else     if (commandLine.hasOption(OPT_RUN_SECOND_HALF)) {
      RampartStageList secondHalf=new RampartStageList();
      secondHalf.add(RampartStage.AMP);
      secondHalf.add(RampartStage.ANALYSE_AMP);
      secondHalf.add(RampartStage.FINALISE);
      this.stages=secondHalf;
      log.info(""String_Node_Str"");
      if (commandLine.hasOption(OPT_AMP_INPUT)) {
        this.ampInput=new File(commandLine.getOptionValue(OPT_AMP_INPUT));
      }
    }
  }
  if (commandLine.getArgs().length != 1)   throw new ParseException(""String_Node_Str"" + commandLine.getArgs().length);
  this.jobConfig=new File(commandLine.getArgs()[0]);
}",0.9771293375394322
59678,"@Override protected List<Option> createExtraOptions(){
  List<Option> options=new ArrayList<>();
  options.add(OptionBuilder.withArgName(""String_Node_Str"").withLongOpt(OPT_STAGES).hasArg().withDescription(""String_Node_Str"" + RampartStage.getFullListAsString() + ""String_Node_Str"").create(""String_Node_Str""));
  options.add(OptionBuilder.withLongOpt(OPT_RUN_FIRST_HALF).withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.add(OptionBuilder.withLongOpt(OPT_RUN_SECOND_HALF).withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.add(OptionBuilder.withArgName(""String_Node_Str"").withLongOpt(OPT_AMP_INPUT).hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str""));
  return options;
}","@Override protected List<Option> createExtraOptions(){
  List<Option> options=new ArrayList<>();
  options.add(OptionBuilder.withArgName(""String_Node_Str"").withLongOpt(OPT_STAGES).hasArg().withDescription(""String_Node_Str"" + RampartStage.getFullListAsString() + ""String_Node_Str"").create(""String_Node_Str""));
  options.add(OptionBuilder.withLongOpt(OPT_RUN_FIRST_HALF).withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.add(OptionBuilder.withLongOpt(OPT_RUN_SECOND_HALF).withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.add(OptionBuilder.withArgName(""String_Node_Str"").withLongOpt(OPT_AMP_INPUT).hasArg().withDescription(""String_Node_Str"").create(""String_Node_Str""));
  options.add(OptionBuilder.withLongOpt(OPT_SKIP_CHECKS).withDescription(""String_Node_Str"").create(""String_Node_Str""));
  return options;
}",0.9243379571248423
59679,"/** 
 * Creates a new RAMPART instance based on command line arguments
 * @param args List of command line arguments containing information to setup RAMPART
 * @throws ParseException Thrown if an invalid command line was encountered
 */
public RampartCLI(String[] args) throws ParseException, IOException {
  super(APP_NAME,ETC_DIR,DEFAULT_CONAN_FILE,DEFAULT_LOG_FILE,currentWorkingDir(),APP_NAME + createTimestamp(),false,false);
  this.parse(new PosixParser().parse(createOptions(),args,true));
  if (!this.isHelp()) {
    this.init();
    this.args=new RampartArgs(this.jobConfig,this.getOutputDir(),this.getJobPrefix().replaceAll(""String_Node_Str"",createTimestamp()),this.stages,this.ampInput);
    this.args.parseXml();
    this.args.setExecutionContext(this.buildExecutionContext());
    if (this.isVerbose()) {
      LogManager.getRootLogger().setLevel(Level.DEBUG);
    }
    log.info(""String_Node_Str"" + this.getOutputDir().getAbsolutePath());
    log.info(""String_Node_Str"" + this.getEnvironmentConfig().getAbsolutePath());
    log.info(""String_Node_Str"" + this.getLogConfig().getAbsolutePath());
    log.info(""String_Node_Str"" + this.args.getJobPrefix());
    if (ConanProperties.containsKey(""String_Node_Str"")) {
      log.info(""String_Node_Str"" + new File(ConanProperties.getProperty(""String_Node_Str"")).getAbsolutePath());
    }
  }
}","/** 
 * Creates a new RAMPART instance based on command line arguments
 * @param args List of command line arguments containing information to setup RAMPART
 * @throws ParseException Thrown if an invalid command line was encountered
 */
public RampartCLI(String[] args) throws ParseException, IOException {
  this();
  this.parse(new PosixParser().parse(createOptions(),args,true));
}",0.3637413394919168
59680,"public RampartArgs(File configFile,File outputDir,String jobPrefix,RampartStageList stages,File ampInput) throws IOException {
  super(configFile,outputDir,jobPrefix);
  this.stages=stages;
  this.libs=new ArrayList<>();
  this.mecqArgs=null;
  this.analyseReadsArgs=null;
  this.massArgs=null;
  this.analyseMassArgs=null;
  this.ampInput=ampInput;
  this.ampArgs=null;
  this.analyseAmpArgs=null;
  this.finaliseArgs=null;
  this.rampartJobFileSystem=new RampartJobFileSystem(outputDir.getAbsoluteFile());
}","public RampartArgs(File configFile,File outputDir,String jobPrefix,RampartStageList stages,File ampInput,boolean doInitialChecks) throws IOException {
  super(configFile,outputDir,jobPrefix);
  this.stages=stages;
  this.libs=new ArrayList<>();
  this.mecqArgs=null;
  this.analyseReadsArgs=null;
  this.massArgs=null;
  this.analyseMassArgs=null;
  this.ampInput=ampInput;
  this.ampArgs=null;
  this.analyseAmpArgs=null;
  this.finaliseArgs=null;
  this.rampartJobFileSystem=new RampartJobFileSystem(outputDir.getAbsoluteFile());
  this.doInitialChecks=doInitialChecks;
}",0.9408502772643254
59681,"public void init() throws IOException {
  this.clearProcessList();
  this.addProcesses(this.args.getStages().createProcesses(this.conanExecutorService));
  if (!this.isOperational(new DefaultExecutionContext(new Local(),null,this.args.getExecutionContext().getExternalProcessConfiguration()))) {
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"");
  }
}","public void init() throws IOException {
  this.clearProcessList();
  this.addProcesses(this.args.getStages().createProcesses(this.conanExecutorService));
  if (this.args.isDoInitialChecks() && !this.isOperational(new DefaultExecutionContext(new Local(),null,this.args.getExecutionContext().getExternalProcessConfiguration()))) {
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.9569752281616688
59682,"protected AssemblyEnhancer makeStage(Args args,List<Library> libs) throws IOException {
  AssemblyEnhancer proc=AssemblyEnhancerFactory.create(args.getTool(),args.getInputAssembly(),args.getOutputDir(),""String_Node_Str"" + args.getIndex(),libs,args.getThreads(),args.getMemory(),args.getOtherArgs(),this.conanExecutorService);
  if (proc == null)   throw new IOException(""String_Node_Str"" + args.getTool());
  return proc;
}","protected AssemblyEnhancer makeStage(Args args,List<Library> libs) throws IOException {
  return AssemblyEnhancerFactory.create(args.getTool(),args.getInputAssembly(),args.getOutputDir(),""String_Node_Str"" + args.getIndex(),libs,args.getThreads(),args.getMemory(),args.getOtherArgs(),this.conanExecutorService);
}",0.8299319727891157
59683,"@Override public boolean isOperational(ExecutionContext executionContext){
  Args args=(Args)this.getProcessArgs();
  AssemblyEnhancer proc=null;
  try {
    proc=this.makeStage(args,null);
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"");
    return false;
  }
  if (proc == null) {
    log.warn(""String_Node_Str"" + args.getTool() + ""String_Node_Str"");
    return false;
  }
  return proc.isOperational(executionContext);
}","@Override public boolean isOperational(ExecutionContext executionContext){
  Args args=(Args)this.getProcessArgs();
  AssemblyEnhancer proc=null;
  try {
    proc=this.makeStage(args,null);
  }
 catch (  IOException e) {
    log.warn(""String_Node_Str"" + args.getIndex() + ""String_Node_Str""+ args.getTool()+ ""String_Node_Str"");
    return false;
  }
  if (proc == null) {
    log.warn(""String_Node_Str"" + args.getIndex() + ""String_Node_Str""+ args.getTool()+ ""String_Node_Str"");
    return false;
  }
  return proc.isOperational(executionContext);
}",0.8873096446700508
59684,"protected List<Library> validateInputs(int ampIndex,List<ReadsInput> inputs,List<Library> allLibraries,List<Mecq.EcqArgs> allMecqs) throws IOException {
  List<Library> selectedLibs=new ArrayList<>();
  for (  ReadsInput mi : inputs) {
    Library lib=mi.findLibrary(allLibraries);
    Mecq.EcqArgs ecqArgs=mi.findMecq(allMecqs);
    if (lib == null) {
      throw new IOException(""String_Node_Str"" + mi.getLib() + ""String_Node_Str""+ ampIndex);
    }
    if (ecqArgs == null) {
      if (mi.getEcq().equalsIgnoreCase(Mecq.EcqArgs.RAW)) {
        selectedLibs.add(lib);
      }
 else {
        throw new IOException(""String_Node_Str"" + mi.getEcq() + ""String_Node_Str""+ ampIndex);
      }
    }
 else {
      Library modLib=lib.copy();
      AbstractErrorCorrector ec=ecqArgs.makeErrorCorrector(modLib);
      List<File> files=ec.getArgs().getCorrectedFiles();
      if (modLib.isPairedEnd()) {
        if (files.size() < 2 || files.size() > 3) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),files.get(1));
      }
 else {
        if (files.size() != 1) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),null);
      }
      selectedLibs.add(modLib);
    }
    log.info(""String_Node_Str"" + mi.getLib() + ""String_Node_Str""+ mi.getEcq()+ ""String_Node_Str""+ ampIndex);
  }
  return selectedLibs;
}","protected List<Library> validateInputs(int ampIndex,List<ReadsInput> inputs,List<Library> allLibraries,List<Mecq.EcqArgs> allMecqs) throws IOException {
  List<Library> selectedLibs=new ArrayList<>();
  for (  ReadsInput mi : inputs) {
    Library lib=mi.findLibrary(allLibraries);
    Mecq.EcqArgs ecqArgs=mi.findMecq(allMecqs);
    if (lib == null) {
      throw new IOException(""String_Node_Str"" + mi.getLib() + ""String_Node_Str""+ ampIndex);
    }
    if (ecqArgs == null) {
      if (mi.getEcq().equalsIgnoreCase(Mecq.EcqArgs.RAW)) {
        selectedLibs.add(lib);
      }
 else {
        throw new IOException(""String_Node_Str"" + mi.getEcq() + ""String_Node_Str""+ ampIndex);
      }
    }
 else {
      Library modLib=lib.copy();
      AbstractErrorCorrector ec=ecqArgs.makeErrorCorrector(modLib);
      List<File> files=ec.getArgs().getCorrectedFiles();
      if (modLib.isPairedEnd()) {
        if (files.size() < 2 || files.size() > 3) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),files.get(1));
      }
 else {
        if (files.size() != 1) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),null);
      }
      selectedLibs.add(modLib);
    }
    log.info(""String_Node_Str"" + mi.getLib() + ""String_Node_Str""+ mi.getEcq());
  }
  return selectedLibs;
}",0.9905629677839244
59685,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  log.info(""String_Node_Str"");
  Args args=this.getArgs();
  if (!args.getOutputDir().exists()) {
    args.getOutputDir().mkdirs();
  }
  Set<AssemblyAnalyser> requestedServices=new HashSet<>();
  for (  String requestedService : this.getArgs().getAsmAnalyses()) {
    requestedServices.add(this.assemblyAnalyserFactory.create(requestedService,this.getConanProcessService()));
  }
  try {
    List<Integer> jobIds=new ArrayList<>();
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args singleMassArgs : args.getMassGroups()) {
        String massGroup=singleMassArgs.getName();
        File inputDir=new File(args.getMassDir(),massGroup);
        if (!inputDir.exists()) {
          throw new ProcessExecutionException(-1,""String_Node_Str"" + massGroup + ""String_Node_Str""+ inputDir.getAbsolutePath());
        }
        File unitigsDir=new File(inputDir,""String_Node_Str"");
        File contigsDir=new File(inputDir,""String_Node_Str"");
        File scaffoldsDir=new File(inputDir,""String_Node_Str"");
        File outputDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + massGroup+ ""String_Node_Str""+ analyser.getName().toLowerCase();
        if (analyser.isFast()) {
          if (unitigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(unitigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (contigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(contigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (scaffoldsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(scaffoldsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
        }
 else {
          File seqDir=null;
          if (scaffoldsDir.exists()) {
            seqDir=scaffoldsDir;
          }
 else           if (contigsDir.exists()) {
            seqDir=contigsDir;
          }
 else           if (unitigsDir.exists()) {
            seqDir=unitigsDir;
          }
 else {
            throw new ProcessExecutionException(-2,""String_Node_Str"" + massGroup);
          }
          jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(seqDir),outputDir,jobPrefix,this.getArgs(),this.conanExecutorService));
        }
      }
    }
    if (this.conanExecutorService.usingScheduler() && args.isRunParallel() && !jobIds.isEmpty()) {
      log.debug(""String_Node_Str"");
      this.conanExecutorService.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
  try {
    AssemblyStatsTable table=new AssemblyStatsTable();
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args singleMassArgs : args.getMassGroups()) {
        String massGroup=singleMassArgs.getName();
        File asmDirs=new File(args.getMassDir(),massGroup);
        File aUnitigsDir=new File(asmDirs,""String_Node_Str"");
        File aContigsDir=new File(asmDirs,""String_Node_Str"");
        File aScaffoldsDir=new File(asmDirs,""String_Node_Str"");
        File asmDir=null;
        if (aScaffoldsDir.exists()) {
          asmDir=aScaffoldsDir;
        }
 else         if (aContigsDir.exists()) {
          asmDir=aContigsDir;
        }
 else         if (aUnitigsDir.exists()) {
          asmDir=aUnitigsDir;
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + massGroup);
        }
        File reportDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        analyser.updateTable(table,assembliesFromDir(asmDir),reportDir,massGroup);
      }
    }
    AssemblySelector assemblySelector=new DefaultAssemblySelector(args.getWeightings());
    File selectedAssembly=assemblySelector.selectAssembly(table,args.getOrganism().getEstGenomeSize(),args.getOrganism().getEstGcPercentage());
    File outputAssembly=new File(args.getOutputDir(),""String_Node_Str"");
    log.info(""String_Node_Str"" + selectedAssembly.getAbsolutePath());
    this.getConanProcessService().createLocalSymbolicLink(selectedAssembly,outputAssembly);
    File finalFile=new File(args.getOutputDir(),""String_Node_Str"");
    table.save(finalFile);
    log.debug(""String_Node_Str"" + finalFile.getAbsolutePath());
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(5,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  log.info(""String_Node_Str"");
  Args args=this.getArgs();
  if (!args.getOutputDir().exists()) {
    args.getOutputDir().mkdirs();
  }
  Set<AssemblyAnalyser> requestedServices=new HashSet<>();
  for (  String requestedService : this.getArgs().getAsmAnalyses()) {
    requestedServices.add(this.assemblyAnalyserFactory.create(requestedService,this.getConanProcessService()));
  }
  try {
    List<Integer> jobIds=new ArrayList<>();
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args singleMassArgs : args.getMassGroups()) {
        String massGroup=singleMassArgs.getName();
        File inputDir=new File(args.getMassDir(),massGroup);
        if (!inputDir.exists()) {
          throw new ProcessExecutionException(-1,""String_Node_Str"" + massGroup + ""String_Node_Str""+ inputDir.getAbsolutePath());
        }
        File unitigsDir=new File(inputDir,""String_Node_Str"");
        File contigsDir=new File(inputDir,""String_Node_Str"");
        File scaffoldsDir=new File(inputDir,""String_Node_Str"");
        File outputDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        String jobPrefix=this.getArgs().getJobPrefix() + ""String_Node_Str"" + massGroup+ ""String_Node_Str""+ analyser.getName().toLowerCase();
        if (analyser.isFast()) {
          if (unitigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(unitigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (contigsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(contigsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
          if (scaffoldsDir.exists()) {
            jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(scaffoldsDir),new File(outputDir,""String_Node_Str""),jobPrefix + ""String_Node_Str"",this.getArgs(),this.conanExecutorService));
          }
        }
 else {
          File seqDir=null;
          if (scaffoldsDir.exists()) {
            seqDir=scaffoldsDir;
          }
 else           if (contigsDir.exists()) {
            seqDir=contigsDir;
          }
 else           if (unitigsDir.exists()) {
            seqDir=unitigsDir;
          }
 else {
            throw new ProcessExecutionException(-2,""String_Node_Str"" + massGroup);
          }
          jobIds.addAll(analyser.execute(AnalyseMassAssemblies.assembliesFromDir(seqDir),outputDir,jobPrefix,this.getArgs(),this.conanExecutorService));
        }
      }
    }
    if (this.conanExecutorService.usingScheduler() && args.isRunParallel() && !jobIds.isEmpty()) {
      log.debug(""String_Node_Str"");
      this.conanExecutorService.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
    }
  }
 catch (  ConanParameterException|IOException e) {
    throw new ProcessExecutionException(4,e);
  }
  try {
    AssemblyStatsTable table=new AssemblyStatsTable();
    for (    AssemblyAnalyser analyser : requestedServices) {
      for (      MassJob.Args singleMassArgs : args.getMassGroups()) {
        String massGroup=singleMassArgs.getName();
        File asmDirs=new File(args.getMassDir(),massGroup);
        File aUnitigsDir=new File(asmDirs,""String_Node_Str"");
        File aContigsDir=new File(asmDirs,""String_Node_Str"");
        File aScaffoldsDir=new File(asmDirs,""String_Node_Str"");
        File asmDir=null;
        if (aScaffoldsDir.exists()) {
          asmDir=aScaffoldsDir;
        }
 else         if (aContigsDir.exists()) {
          asmDir=aContigsDir;
        }
 else         if (aUnitigsDir.exists()) {
          asmDir=aUnitigsDir;
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + massGroup);
        }
        File reportDir=new File(args.getOutputDir(),massGroup + ""String_Node_Str"" + analyser.getName().toLowerCase());
        analyser.updateTable(table,assembliesFromDir(asmDir),analyser.isFast() ? new File(reportDir,asmDir.getName()) : reportDir,massGroup);
      }
    }
    AssemblySelector assemblySelector=new DefaultAssemblySelector(args.getWeightings());
    File selectedAssembly=assemblySelector.selectAssembly(table,args.getOrganism().getEstGenomeSize(),args.getOrganism().getEstGcPercentage(),args.getMassDir());
    File outputAssembly=new File(args.getOutputDir(),""String_Node_Str"");
    log.info(""String_Node_Str"" + selectedAssembly.getAbsolutePath());
    this.getConanProcessService().createLocalSymbolicLink(selectedAssembly,outputAssembly);
    File finalFile=new File(args.getOutputDir(),""String_Node_Str"");
    table.save(finalFile);
    log.debug(""String_Node_Str"" + finalFile.getAbsolutePath());
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(5,ioe);
  }
  return true;
}",0.9924339196226786
59686,"File selectAssembly(AssemblyStatsTable table,long estimatedGenomeSize,double estimatedGcPercentage);","File selectAssembly(AssemblyStatsTable table,long estimatedGenomeSize,double estimatedGcPercentage,File massDir);",0.9389671361502347
59687,"@Override public File selectAssembly(AssemblyStatsTable table,long estimatedGenomeSize,double estimatedGcPercentage){
  AssemblyStatsMatrix matrix=table.generateStatsMatrix();
  matrix.normalise(estimatedGenomeSize,estimatedGcPercentage);
  log.debug(""String_Node_Str"");
  matrix.weight(weightings);
  double[] scores=matrix.calcScores();
  log.debug(""String_Node_Str"");
  table.addScores(scores);
  log.debug(""String_Node_Str"" + ArrayUtils.toString(scores));
  log.info(""String_Node_Str"" + table.getBest().toString());
  return new File(table.getBest().getFilePath());
}","@Override public File selectAssembly(AssemblyStatsTable table,long estimatedGenomeSize,double estimatedGcPercentage,File massDir){
  AssemblyStatsMatrix matrix=table.generateStatsMatrix();
  matrix.normalise(estimatedGenomeSize,estimatedGcPercentage);
  log.debug(""String_Node_Str"");
  matrix.weight(weightings);
  double[] scores=matrix.calcScores();
  log.debug(""String_Node_Str"");
  table.addScores(scores);
  log.debug(""String_Node_Str"" + ArrayUtils.toString(scores));
  log.info(""String_Node_Str"" + table.getBest().toString());
  File massGroupDir=new File(massDir,table.getBest().getDataset());
  File aUnitigsDir=new File(massGroupDir,""String_Node_Str"");
  File aContigsDir=new File(massGroupDir,""String_Node_Str"");
  File aScaffoldsDir=new File(massGroupDir,""String_Node_Str"");
  File asmDir=null;
  if (aScaffoldsDir.exists()) {
    asmDir=aScaffoldsDir;
  }
 else   if (aContigsDir.exists()) {
    asmDir=aContigsDir;
  }
 else   if (aUnitigsDir.exists()) {
    asmDir=aUnitigsDir;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + table.getBest().getDataset());
  }
  return new File(asmDir,table.getBest().getFilePath());
}",0.6554524361948956
59688,"public AnalyseReads(ConanExecutorService ces,Args args){
  super(""String_Node_Str"",args,new Params());
}","public AnalyseReads(ConanExecutorService ces,Args args){
  super(""String_Node_Str"",args,new Params(),ces);
}",0.981132075471698
59689,"public ExecutionResult executeSubsampler(double probability,long timestamp,File input,File output,String jobName,boolean runParallel) throws ProcessExecutionException, InterruptedException, IOException, ConanParameterException {
  SubsamplerV1_0Args ssArgs=new SubsamplerV1_0Args();
  ssArgs.setInputFile(input);
  ssArgs.setOutputFile(output);
  ssArgs.setLogFile(new File(output.getParentFile(),output.getName() + ""String_Node_Str""));
  ssArgs.setSeed(timestamp);
  ssArgs.setProbability(probability);
  SubsamplerV1_0Process ssProc=new SubsamplerV1_0Process(ssArgs);
  return this.conanExecutorService.executeProcess(ssProc,output.getParentFile(),jobName,1,2000,this.conanExecutorService.usingScheduler() ? !runParallel : true);
}","public ExecutionResult executeSubsampler(double probability,long timestamp,File input,File output,String jobName,boolean runParallel) throws ProcessExecutionException, InterruptedException, IOException, ConanParameterException {
  SubsamplerV1_0Args ssArgs=new SubsamplerV1_0Args();
  ssArgs.setInputFile(input);
  ssArgs.setOutputFile(output);
  ssArgs.setLogFile(new File(output.getParentFile(),output.getName() + ""String_Node_Str""));
  ssArgs.setSeed(timestamp);
  ssArgs.setProbability(probability);
  SubsamplerV1_0Process ssProc=new SubsamplerV1_0Process(ssArgs);
  return this.conanExecutorService.executeProcess(ssProc,output.getParentFile(),jobName,1,2000,this.conanExecutorService.usingScheduler() ? runParallel : false);
}",0.9945429740791268
59690,"@Test public void testConfigLoad() throws IOException {
  File cfgFile=FileUtils.toFile(this.getClass().getResource(""String_Node_Str""));
  File outDir=temp.newFolder(""String_Node_Str"");
  String jobPrefix=""String_Node_Str"";
  RampartArgs args=new RampartArgs(cfgFile,outDir,jobPrefix,RampartStageList.parse(""String_Node_Str""),null);
  assertTrue(true);
}","@Test public void testConfigLoad() throws IOException {
  File cfgFile=FileUtils.toFile(this.getClass().getResource(""String_Node_Str""));
  File outDir=temp.newFolder(""String_Node_Str"");
  String jobPrefix=""String_Node_Str"";
  RampartArgs args=new RampartArgs(cfgFile,outDir,jobPrefix,RampartStageList.parse(""String_Node_Str""),null,true);
  assertTrue(true);
}",0.9929873772791024
59691,"/** 
 * Constructs an execution context from details discovered from the environment configuration file.
 * @return An execution content build from the environment configuration file
 * @throws IOException
 */
private static ExecutionContext buildExecutionContext() throws IOException {
  ExternalProcessConfiguration externalProcessConfiguration=new DefaultExternalProcessConfiguration();
  if (ConanProperties.containsKey(""String_Node_Str"")) {
    externalProcessConfiguration.setProcessConfigFilePath(ConanProperties.getProperty(""String_Node_Str""));
    externalProcessConfiguration.load();
  }
  Locality locality=ConanProperties.containsKey(""String_Node_Str"") ? LocalityFactory.createLocality(ConanProperties.getProperty(""String_Node_Str"")) : new Local();
  log.debug(""String_Node_Str"" + locality == null ? ""String_Node_Str"" : locality.toString());
  Scheduler scheduler=ConanProperties.containsKey(""String_Node_Str"") ? SchedulerFactory.createScheduler(ConanProperties.getProperty(""String_Node_Str"")) : null;
  log.debug(""String_Node_Str"" + scheduler == null ? ""String_Node_Str"" : scheduler.getName());
  if (scheduler != null && ConanProperties.containsKey(""String_Node_Str"")) {
    scheduler.getArgs().setQueueName(ConanProperties.getProperty(""String_Node_Str""));
  }
  if (scheduler != null && ConanProperties.containsKey(""String_Node_Str"")) {
    scheduler.getArgs().setExtraArgs(ConanProperties.getProperty(""String_Node_Str""));
  }
  return new DefaultExecutionContext(locality,scheduler,externalProcessConfiguration,true);
}","/** 
 * Constructs an execution context from details discovered from the environment configuration file.
 * @return An execution content build from the environment configuration file
 * @throws IOException
 */
private static ExecutionContext buildExecutionContext() throws IOException {
  ExternalProcessConfiguration externalProcessConfiguration=new DefaultExternalProcessConfiguration();
  if (ConanProperties.containsKey(""String_Node_Str"")) {
    externalProcessConfiguration.setProcessConfigFilePath(ConanProperties.getProperty(""String_Node_Str""));
    externalProcessConfiguration.load();
  }
  Locality locality=ConanProperties.containsKey(""String_Node_Str"") ? LocalityFactory.createLocality(ConanProperties.getProperty(""String_Node_Str"")) : new Local();
  String localityName=locality == null ? ""String_Node_Str"" : locality.toString();
  log.debug(""String_Node_Str"" + localityName);
  Scheduler scheduler=ConanProperties.containsKey(""String_Node_Str"") ? SchedulerFactory.createScheduler(ConanProperties.getProperty(""String_Node_Str"")) : null;
  String schedulerName=scheduler == null ? ""String_Node_Str"" : scheduler.getName();
  log.debug(""String_Node_Str"" + schedulerName);
  if (scheduler != null && ConanProperties.containsKey(""String_Node_Str"")) {
    scheduler.getArgs().setQueueName(ConanProperties.getProperty(""String_Node_Str""));
  }
  if (scheduler != null && ConanProperties.containsKey(""String_Node_Str"")) {
    scheduler.getArgs().setExtraArgs(ConanProperties.getProperty(""String_Node_Str""));
  }
  return new DefaultExecutionContext(locality,scheduler,externalProcessConfiguration,true);
}",0.9376590330788804
59692,"@Override public boolean execute(ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException {
  AmpArgs args=(AmpArgs)this.getProcessArgs();
  this.ampExecutor.initialise(this.conanProcessService,executionContext);
  AmpPipeline ampPipeline=new AmpPipeline();
  ampPipeline.setConanProcessService(this.getConanProcessService());
  ampPipeline.configureProcesses();
  args.getAssembliesDir().mkdirs();
  this.ampExecutor.createInitialLink(args.getInputAssembly(),args.getAssembliesDir());
  ConanUser rampartUser=new GuestUser(""String_Node_Str"");
  ConanTask<AmpPipeline> ampTask=new DefaultTaskFactory().createTask(ampPipeline,0,ampPipeline.getArgs().getArgMap(),ConanTask.Priority.HIGHEST,rampartUser);
  ampTask.setId(""String_Node_Str"");
  ampTask.submit();
  try {
    ampTask.execute(executionContext);
  }
 catch (  TaskExecutionException e) {
    throw new ProcessExecutionException(-1,e);
  }
  try {
    this.ampExecutor.executeAnalysisJob(args);
  }
 catch (  ProcessExecutionException pee) {
    log.error(pee.getMessage(),pee);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException {
  AmpArgs args=(AmpArgs)this.getProcessArgs();
  this.ampExecutor.initialise(this.conanProcessService,executionContext);
  AmpPipeline ampPipeline=new AmpPipeline();
  ampPipeline.setConanProcessService(this.getConanProcessService());
  ampPipeline.configureProcesses();
  log.debug(""String_Node_Str"" + ampPipeline.getProcesses().size() + ""String_Node_Str"");
  args.getAssembliesDir().mkdirs();
  this.ampExecutor.createInitialLink(args.getInputAssembly(),args.getAssembliesDir());
  ConanUser rampartUser=new GuestUser(""String_Node_Str"");
  ConanTask<AmpPipeline> ampTask=new DefaultTaskFactory().createTask(ampPipeline,0,ampPipeline.getArgs().getArgMap(),ConanTask.Priority.HIGHEST,rampartUser);
  ampTask.setId(""String_Node_Str"");
  ampTask.submit();
  try {
    ampTask.execute(executionContext);
  }
 catch (  TaskExecutionException e) {
    throw new ProcessExecutionException(-1,e);
  }
  try {
    this.ampExecutor.executeAnalysisJob(args);
  }
 catch (  ProcessExecutionException pee) {
    log.error(pee.getMessage(),pee);
  }
  return true;
}",0.961199294532628
59693,"public File getFile1(List<EcqArgs> allMecqs){
  return getFiles(allMecqs).get(0);
}","public File getFile1(List<EcqArgs> allEcqs,List<Library> allLibraries){
  return getFiles(allEcqs,allLibraries).get(0);
}",0.7745098039215687
59694,"public File getFile2(List<EcqArgs> allMecqs){
  return getFiles(allMecqs).get(0);
}","public File getFile2(List<EcqArgs> allEcqs,List<Library> allLibraries){
  return getFiles(allEcqs,allLibraries).get(0);
}",0.7745098039215687
59695,"public List<File> getFiles(List<EcqArgs> allMecqs){
  EcqArgs actualMecq=findMecq(allMecqs);
  return actualMecq.getOutputFiles(this.lib.trim());
}","public List<File> getFiles(List<EcqArgs> allEcqs,List<Library> allLibraries){
  EcqArgs actualEcq=findMecq(allEcqs);
  Library lib=findLibrary(allLibraries);
  return actualEcq.getOutputFiles(lib);
}",0.7341040462427746
59696,"public MassInput(Element ele){
  this.mecq=XmlHelper.getTextValue(ele,KEY_ATTR_MECQ);
  this.lib=XmlHelper.getTextValue(ele,KEY_ATTR_LIB);
}","public MassInput(Element ele){
  this.ecq=XmlHelper.getTextValue(ele,KEY_ATTR_ECQ);
  this.lib=XmlHelper.getTextValue(ele,KEY_ATTR_LIB);
}",0.9928057553956836
59697,"public EcqArgs findMecq(List<EcqArgs> allMecqs){
  if (allMecqs == null)   return null;
  for (  EcqArgs currentMecq : allMecqs) {
    if (currentMecq.getName().equalsIgnoreCase(this.mecq.trim())) {
      return currentMecq;
    }
  }
  return null;
}","public EcqArgs findMecq(List<EcqArgs> allMecqs){
  if (allMecqs == null)   return null;
  for (  EcqArgs currentMecq : allMecqs) {
    if (currentMecq.getName().equalsIgnoreCase(this.ecq.trim())) {
      return currentMecq;
    }
  }
  return null;
}",0.9700598802395208
59698,"protected List<Library> validateInputs(String massName,List<MassInput> inputs,List<Library> allLibraries,List<EcqArgs> allMecqs) throws IOException {
  List<Library> selectedLibs=new ArrayList<Library>();
  for (  MassInput mi : inputs) {
    Library lib=mi.findLibrary(allLibraries);
    EcqArgs ecqArgs=mi.findMecq(allMecqs);
    if (lib == null) {
      throw new IOException(""String_Node_Str"" + mi.getLib() + ""String_Node_Str""+ massName);
    }
    if (ecqArgs == null) {
      if (mi.getMecq().equalsIgnoreCase(EcqArgs.RAW)) {
        selectedLibs.add(lib);
      }
 else {
        throw new IOException(""String_Node_Str"" + mi.getMecq() + ""String_Node_Str""+ massName);
      }
    }
 else {
      Library modLib=lib.copy();
      List<File> files=ecqArgs.getOutputFiles(lib.getName());
      if (modLib.isPairedEnd()) {
        if (files.size() != 2) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),files.get(1));
      }
 else {
        if (files.size() != 1) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),null);
      }
      selectedLibs.add(modLib);
    }
  }
  return selectedLibs;
}","protected List<Library> validateInputs(String massName,List<MassInput> inputs,List<Library> allLibraries,List<EcqArgs> allMecqs) throws IOException {
  List<Library> selectedLibs=new ArrayList<Library>();
  for (  MassInput mi : inputs) {
    Library lib=mi.findLibrary(allLibraries);
    EcqArgs ecqArgs=mi.findMecq(allMecqs);
    if (lib == null) {
      throw new IOException(""String_Node_Str"" + mi.getLib() + ""String_Node_Str""+ massName);
    }
    if (ecqArgs == null) {
      if (mi.getEcq().equalsIgnoreCase(EcqArgs.RAW)) {
        selectedLibs.add(lib);
      }
 else {
        throw new IOException(""String_Node_Str"" + mi.getEcq() + ""String_Node_Str""+ massName);
      }
    }
 else {
      Library modLib=lib.copy();
      List<File> files=ecqArgs.getOutputFiles(modLib);
      if (modLib.isPairedEnd()) {
        if (files.size() != 2 || files.size() != 3) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),files.get(1));
      }
 else {
        if (files.size() != 1) {
          throw new IOException(""String_Node_Str"" + modLib.getName() + ""String_Node_Str""+ ecqArgs.getName()+ ""String_Node_Str"");
        }
        modLib.setFiles(files.get(0),null);
      }
      selectedLibs.add(modLib);
    }
    log.info(""String_Node_Str"" + mi.getLib() + ""String_Node_Str""+ mi.getEcq()+ ""String_Node_Str""+ massName);
  }
  return selectedLibs;
}",0.945249028611798
59699,"/** 
 * Create an Assembler from the Mass args and details of the current context
 * @param massArgs
 * @param k
 * @param cvg
 * @param selectedLibs
 * @param outputDir
 * @return An assembler built using a combinarion of single mass args and user specified args
 */
protected Assembler makeAssembler(SingleMassArgs massArgs,int k,int cvg,List<Library> selectedLibs,File outputDir){
  Assembler asm=AssemblerFactory.valueOf(massArgs.getTool()).create();
  AssemblerArgs asmArgs=asm.getArgs();
  asmArgs.setLibraries(selectedLibs);
  asmArgs.setDesiredCoverage(cvg);
  asmArgs.setKmer(k);
  asmArgs.setThreads(massArgs.getThreads());
  asmArgs.setMemory(massArgs.getMemory());
  asmArgs.setOrganism(massArgs.getOrganism());
  asmArgs.setOutputDir(outputDir);
  return asm;
}","/** 
 * Create an Assembler from the Mass args and details of the current context
 * @param massArgs
 * @param k
 * @param cvg
 * @param selectedLibs
 * @param outputDir
 * @return An assembler built using a combination of single mass args and user specified args
 */
protected Assembler makeAssembler(SingleMassArgs massArgs,int k,int cvg,List<Library> selectedLibs,File outputDir){
  Assembler asm=AssemblerFactory.valueOf(massArgs.getTool()).create();
  AssemblerArgs asmArgs=asm.getArgs();
  asmArgs.setLibraries(selectedLibs);
  asmArgs.setDesiredCoverage(cvg);
  asmArgs.setKmer(k);
  asmArgs.setThreads(massArgs.getThreads());
  asmArgs.setMemory(massArgs.getMemory());
  asmArgs.setOrganism(massArgs.getOrganism());
  asmArgs.setOutputDir(outputDir);
  return asm;
}",0.9987080103359172
59700,"protected CoverageRange validateCoverageRange(String massName,Organism organism,CoverageRange coverageRange) throws CommandExecutionException {
  if (coverageRange == null) {
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.info(""String_Node_Str"" + massName + ""String_Node_Str""+ defaultCoverageRange.toString());
    return defaultCoverageRange;
  }
 else   if (organism == null || organism.getEstGenomeSize() <= 0) {
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.info(""String_Node_Str"" + defaultCoverageRange.toString());
    return defaultCoverageRange;
  }
 else   if (coverageRange.validate()) {
    log.info(""String_Node_Str"" + massName + ""String_Node_Str""+ coverageRange.toString());
    return coverageRange;
  }
 else {
    throw new CommandExecutionException(""String_Node_Str"" + coverageRange.toString() + ""String_Node_Str""+ massName);
  }
}","protected CoverageRange validateCoverageRange(String massName,Organism organism,CoverageRange coverageRange) throws CommandExecutionException {
  if (coverageRange == null) {
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.info(""String_Node_Str"" + massName + ""String_Node_Str""+ defaultCoverageRange.toString());
    return defaultCoverageRange;
  }
 else   if (organism == null || organism.getEstGenomeSize() <= 0) {
    CoverageRange defaultCoverageRange=new CoverageRange();
    log.info(""String_Node_Str"" + ""String_Node_Str"" + defaultCoverageRange.toString());
    return defaultCoverageRange;
  }
 else   if (coverageRange.validate()) {
    log.info(""String_Node_Str"" + massName + ""String_Node_Str""+ coverageRange.toString());
    return coverageRange;
  }
 else {
    throw new CommandExecutionException(""String_Node_Str"" + coverageRange.toString() + ""String_Node_Str""+ massName);
  }
}",0.9889012208657048
59701,"public List<File> getOutputFiles(String libName){
  Library lib=this.findLibrary(libName);
  return lib.getFiles();
}","public List<File> getOutputFiles(Library lib){
  ErrorCorrector ec=ErrorCorrectorFactory.createQualityTrimmer(this.getTool());
  List<File> altInputFiles=new ArrayList<>();
  if (lib.isPairedEnd()) {
    altInputFiles.add(new File(outputDir,lib.getFile1().getName()));
    altInputFiles.add(new File(outputDir,lib.getFile2().getName()));
  }
 else {
    altInputFiles.add(new File(outputDir,lib.getFile1().getName()));
  }
  ec.getArgs().setFromLibrary(lib,altInputFiles);
  return ec.getArgs().getCorrectedFiles();
}",0.1829652996845426
59702,"/** 
 * Using a set of ECQ specific args, creates an ErrorCorrector object for execution
 * @param mecqArgs
 * @param inputLib
 * @param outputDir
 * @return
 */
public ErrorCorrector makeErrorCorrector(EcqArgs mecqArgs,Library inputLib,File outputDir){
  ErrorCorrector ec=ErrorCorrectorFactory.valueOf(mecqArgs.getTool()).create();
  ErrorCorrectorArgs ecArgs=ec.getArgs();
  ecArgs.setMinLength(mecqArgs.getMinLen());
  ecArgs.setQualityThreshold(mecqArgs.getMinQual());
  ecArgs.setKmer(mecqArgs.getKmer());
  ecArgs.setThreads(mecqArgs.getThreads());
  ecArgs.setMemoryGb(mecqArgs.getMemory());
  ecArgs.setOutputDir(outputDir);
  if (inputLib.isPairedEnd()) {
    ((ErrorCorrectorPairedEndArgs)ec.getArgs()).setFromLibrary(inputLib,new File(outputDir,inputLib.getFile1().getName()),new File(outputDir,inputLib.getFile2().getName()));
  }
 else {
    ((ErrorCorrectorSingleEndArgs)ec.getArgs()).setFromLibrary(inputLib,new File(outputDir,inputLib.getFile1().getName()));
  }
  return ec;
}","/** 
 * Using a set of ECQ specific args, creates an ErrorCorrector object for execution
 * @param mecqArgs
 * @param inputLib
 * @param outputDir
 * @return
 */
public ErrorCorrector makeErrorCorrector(EcqArgs mecqArgs,Library inputLib,File outputDir){
  ErrorCorrector ec=ErrorCorrectorFactory.valueOf(mecqArgs.getTool()).create();
  ErrorCorrectorArgs ecArgs=ec.getArgs();
  ecArgs.setMinLength(mecqArgs.getMinLen());
  ecArgs.setQualityThreshold(mecqArgs.getMinQual());
  ecArgs.setKmer(mecqArgs.getKmer());
  ecArgs.setThreads(mecqArgs.getThreads());
  ecArgs.setMemoryGb(mecqArgs.getMemory());
  ecArgs.setOutputDir(outputDir);
  List<File> altInputFiles=new ArrayList<>();
  if (inputLib.isPairedEnd()) {
    altInputFiles.add(new File(outputDir,inputLib.getFile1().getName()));
    altInputFiles.add(new File(outputDir,inputLib.getFile2().getName()));
  }
 else {
    altInputFiles.add(new File(outputDir,inputLib.getFile1().getName()));
  }
  ec.getArgs().setFromLibrary(inputLib,altInputFiles);
  return ec;
}",0.6944858420268256
59703,"@Override public void executeAnalysisJob(AmpArgs args) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  if (args.getStatsLevels() != null) {
    this.statsExecutor.dispatchAnalyserJobs(args.getStatsLevels(),args.getAssembliesDir(),1,args.getOrganism() != null ? args.getOrganism().getEstGenomeSize() : 0,true,args.isRunParallel(),null,args.getJobPrefix() + ""String_Node_Str"");
  }
}","@Override public void executeAnalysisJob(AmpArgs args) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  if (args.getStatsLevels() != null) {
    this.statsExecutor.dispatchAnalyserJobs(args.getStatsLevels(),args.getAssembliesDir(),null,1,0,args.getOrganism(),true,args.isRunParallel(),null,args.getJobPrefix() + ""String_Node_Str"");
  }
}",0.927960927960928
59704,"@Test public void testGetOutputFiles(){
  EcqArgs args=new EcqArgs();
  args.setTool(""String_Node_Str"");
  args.setOutputDir(new File(""String_Node_Str""));
  Library lib=new Library();
  lib.setFiles(new File(""String_Node_Str""),new File(""String_Node_Str""));
  ErrorCorrector ec=new MecqExecutorImpl().makeErrorCorrector(args,lib,new File(""String_Node_Str""));
  List<File> files=args.getOutputFiles(ec);
  assertTrue(files.size() == 3);
}","@Test public void testGetOutputFiles(){
  EcqArgs args=new EcqArgs();
  args.setTool(""String_Node_Str"");
  args.setOutputDir(new File(""String_Node_Str""));
  Library lib=new Library();
  lib.setFiles(new File(""String_Node_Str""),new File(""String_Node_Str""));
  ErrorCorrector ec=new MecqProcess().makeErrorCorrector(args,lib,new File(""String_Node_Str""));
  List<File> files=args.getOutputFiles(ec);
  assertTrue(files.size() == 3);
}",0.7104959630911188
59705,"/** 
 * Creates a new RAMPART instance based on command line arguments
 * @param args List of command line arguments containing information to setup RAMPART
 * @throws ParseException Thrown if an invalid command line was encountered
 */
public Rampart(String[] args) throws ParseException {
  CommandLine cmdLine=new PosixParser().parse(createOptions(),args,true);
  this.help=cmdLine.hasOption(OPT_HELP);
  this.verbose=cmdLine.hasOption(OPT_VERBOSE);
  this.environmentConfig=cmdLine.hasOption(OPT_ENV_CONFIG) ? new File(cmdLine.getOptionValue(OPT_ENV_CONFIG)) : DEFAULT_ENV_CONFIG;
  this.logConfig=cmdLine.hasOption(OPT_LOG_CONFIG) ? new File(cmdLine.getOptionValue(OPT_LOG_CONFIG)) : DEFAULT_LOG_CONFIG;
  this.weightingsFile=cmdLine.hasOption(OPT_WEIGHTINGS) ? new File(cmdLine.getOptionValue(OPT_WEIGHTINGS)) : DEFAULT_WEIGHTINGS_FILE;
  this.outputDir=cmdLine.hasOption(OPT_OUTPUT_DIR) ? new File(cmdLine.getOptionValue(OPT_OUTPUT_DIR)) : DEFAULT_OUTPUT_DIR;
  this.jobPrefix=cmdLine.hasOption(OPT_JOB_PREFIX) ? cmdLine.getOptionValue(OPT_JOB_PREFIX) : DEFAULT_JOB_PREFIX;
  this.stages=cmdLine.hasOption(OPT_STAGES) ? cmdLine.getOptionValue(OPT_STAGES) : DEFAULT_STAGES;
}","/** 
 * Creates a new RAMPART instance based on command line arguments
 * @param args List of command line arguments containing information to setup RAMPART
 * @throws ParseException Thrown if an invalid command line was encountered
 */
public Rampart(String[] args) throws ParseException {
  CommandLine cmdLine=new PosixParser().parse(createOptions(),args,true);
  this.help=cmdLine.hasOption(OPT_HELP);
  this.verbose=cmdLine.hasOption(OPT_VERBOSE);
  this.environmentConfig=cmdLine.hasOption(OPT_ENV_CONFIG) ? new File(cmdLine.getOptionValue(OPT_ENV_CONFIG)) : DEFAULT_ENV_CONFIG;
  this.logConfig=cmdLine.hasOption(OPT_LOG_CONFIG) ? new File(cmdLine.getOptionValue(OPT_LOG_CONFIG)) : DEFAULT_LOG_CONFIG;
  this.weightingsFile=cmdLine.hasOption(OPT_WEIGHTINGS) ? new File(cmdLine.getOptionValue(OPT_WEIGHTINGS)) : DEFAULT_WEIGHTINGS_FILE;
  this.outputDir=cmdLine.hasOption(OPT_OUTPUT_DIR) ? new File(cmdLine.getOptionValue(OPT_OUTPUT_DIR)) : DEFAULT_OUTPUT_DIR;
  this.jobPrefix=cmdLine.hasOption(OPT_JOB_PREFIX) ? cmdLine.getOptionValue(OPT_JOB_PREFIX) : DEFAULT_JOB_PREFIX;
  this.stages=cmdLine.hasOption(OPT_STAGES) ? cmdLine.getOptionValue(OPT_STAGES) : DEFAULT_STAGES;
  if (cmdLine.getArgs().length != 1)   throw new ParseException(""String_Node_Str"");
  this.jobConfig=new File(cmdLine.getArgs()[0]);
}",0.9466933867735472
59706,"@Override public boolean execute(ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException {
  AmpArgs args=(AmpArgs)this.getProcessArgs();
  this.ampExecutor.initialise(this.conanProcessService,executionContext);
  AmpPipeline ampPipeline=new AmpPipeline(args,this.getConanProcessService());
  if (!args.isStatsOnly()) {
    log.debug(""String_Node_Str"" + ampPipeline.getProcesses().size() + ""String_Node_Str"");
    args.getAssembliesDir().mkdirs();
    this.conanProcessService.createLocalSymbolicLink(args.getInputAssembly(),new File(args.getAssembliesDir(),""String_Node_Str""));
    this.execute(ampPipeline.getArgs().getArgMap(),executionContext);
  }
  try {
    this.ampExecutor.executeAnalysisJob(args);
  }
 catch (  ProcessExecutionException|IOException|CommandExecutionException e) {
    throw new ProcessExecutionException(-2,e);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException {
  AmpArgs args=(AmpArgs)this.getProcessArgs();
  this.ampExecutor.initialise(this.conanProcessService,executionContext);
  if (!args.isStatsOnly()) {
    AmpPipeline ampPipeline=new AmpPipeline(args,this.getConanProcessService());
    log.debug(""String_Node_Str"" + ampPipeline.getProcesses().size() + ""String_Node_Str"");
    args.getAssembliesDir().mkdirs();
    this.conanProcessService.createLocalSymbolicLink(args.getInputAssembly(),new File(args.getAssembliesDir(),""String_Node_Str""));
    ConanUser rampartUser=new GuestUser(""String_Node_Str"");
    ConanTask<AmpPipeline> ampTask=new DefaultTaskFactory().createTask(ampPipeline,0,ampPipeline.getArgs().getArgMap(),ConanTask.Priority.HIGHEST,rampartUser);
    ampTask.setId(""String_Node_Str"");
    ampTask.submit();
    try {
      ampTask.execute(executionContext);
    }
 catch (    TaskExecutionException e) {
      throw new ProcessExecutionException(-1,e);
    }
  }
  try {
    this.ampExecutor.executeAnalysisJob(args);
  }
 catch (  IOException|CommandExecutionException e) {
    throw new ProcessExecutionException(-2,e);
  }
  return true;
}",0.7295004712535345
59707,"@Override protected void internalParseXml(Element element) throws IOException {
  Element librariesElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_LIBRARIES);
  NodeList libraries=librariesElement.getElementsByTagName(KEY_ELEM_LIBRARY);
  this.libs=new ArrayList<>();
  for (int i=0; i < libraries.getLength(); i++) {
    this.libs.add(new Library((Element)libraries.item(i)));
  }
  Element pipelineElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_PIPELINE);
  Element mecqElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new MecqArgs(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs);
  Element massElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new MassArgs(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs,this.mecqArgs == null ? null : this.mecqArgs.getEqcArgList(),this.getOrganism());
  Element ampElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new AmpArgs(ampElement,this.rampartJobFileSystem.getAmpDir(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMassOutFile(),this.libs,this.mecqArgs.getEqcArgList(),this.getOrganism());
}","@Override protected void internalParseXml(Element element) throws IOException {
  Element librariesElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_LIBRARIES);
  NodeList libraries=librariesElement.getElementsByTagName(KEY_ELEM_LIBRARY);
  this.libs=new ArrayList<>();
  for (int i=0; i < libraries.getLength(); i++) {
    this.libs.add(new Library((Element)libraries.item(i)));
  }
  Element pipelineElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_PIPELINE);
  Element mecqElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new MecqArgs(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs);
  Element massElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new MassArgs(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs,this.mecqArgs == null ? null : this.mecqArgs.getEqcArgList(),this.getOrganism());
  Element ampElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new AmpArgs(ampElement,this.rampartJobFileSystem.getAmpDir(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMassOutFile(),this.libs,this.mecqArgs == null ? null : this.mecqArgs.getEqcArgList(),this.getOrganism());
}",0.9893360853113176
59708,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    log.info(""String_Node_Str"");
    MassArgs args=(MassArgs)this.getProcessArgs();
    this.massExecutor.initialise(this.conanProcessService,executionContext);
    if (!args.isStatsOnly()) {
      List<Integer> jobIds=new ArrayList<>();
      for (      SingleMassArgs singleMassArgs : args.getSingleMassArgsList()) {
        if (!singleMassArgs.getOutputDir().exists() && !singleMassArgs.getOutputDir().mkdirs()) {
          throw new IOException(""String_Node_Str"");
        }
        this.massExecutor.executeSingleMass(singleMassArgs);
        jobIds.addAll(this.massExecutor.getJobIds());
        if (executionContext.usingScheduler() && !args.isRunParallel()) {
          log.debug(""String_Node_Str"" + singleMassArgs.getName());
          this.massExecutor.executeScheduledWait(jobIds,singleMassArgs.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",singleMassArgs.getOutputDir());
          jobIds.clear();
        }
      }
      if (executionContext.usingScheduler() && args.isRunParallel()) {
        log.debug(""String_Node_Str"");
        this.massExecutor.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
      }
      log.info(""String_Node_Str"");
    }
    log.info(""String_Node_Str"");
    File statsDir=new File(args.getOutputDir(),""String_Node_Str"");
    AssemblyStatsTable results=this.compileMassResults(args);
    this.executeMassSelector(args,statsDir,results);
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + new File(statsDir,""String_Node_Str"").getAbsolutePath());
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    log.info(""String_Node_Str"");
    MassArgs args=(MassArgs)this.getProcessArgs();
    this.massExecutor.initialise(this.conanProcessService,executionContext);
    if (!args.isStatsOnly()) {
      List<Integer> jobIds=new ArrayList<>();
      for (      SingleMassArgs singleMassArgs : args.getSingleMassArgsList()) {
        if (!singleMassArgs.getOutputDir().exists() && !singleMassArgs.getOutputDir().mkdirs()) {
          throw new IOException(""String_Node_Str"");
        }
        this.massExecutor.executeSingleMass(singleMassArgs);
        jobIds.addAll(this.massExecutor.getJobIds());
        if (executionContext.usingScheduler() && !args.isRunParallel()) {
          log.debug(""String_Node_Str"" + singleMassArgs.getName());
          this.massExecutor.executeScheduledWait(jobIds,singleMassArgs.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",singleMassArgs.getOutputDir());
          jobIds.clear();
        }
      }
      if (executionContext.usingScheduler() && args.isRunParallel()) {
        log.debug(""String_Node_Str"");
        this.massExecutor.executeScheduledWait(jobIds,args.getJobPrefix() + ""String_Node_Str"",ExitStatus.Type.COMPLETED_ANY,args.getJobPrefix() + ""String_Node_Str"",args.getOutputDir());
        jobIds.clear();
      }
      log.info(""String_Node_Str"");
    }
    log.info(""String_Node_Str"");
    File statsDir=new File(args.getOutputDir(),""String_Node_Str"");
    AssemblyStatsTable results=this.compileMassResults(args);
    this.executeMassSelector(args,statsDir,results);
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + new File(statsDir,""String_Node_Str"").getAbsolutePath());
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}",0.9938429964084146
59709,"@Override public void dispatchAnalyserJobs(Assembler assembler,SingleMassArgs args,String waitCondition,String jobName) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  File inputDir=null;
  if (assembler.makesScaffolds()) {
    inputDir=args.getScaffoldsDir();
  }
 else   if (assembler.makesContigs()) {
    inputDir=args.getContigsDir();
  }
 else   if (assembler.makesUnitigs()) {
    inputDir=args.getUnitigsDir();
  }
 else {
    throw new IOException(""String_Node_Str"" + MassArgs.OutputLevel.getListAsString());
  }
  this.statsExecutor.dispatchAnalyserJobs(args.getStatsLevels(),inputDir,args.getThreads(),args.getOrganism() == null ? 0 : args.getOrganism().getEstGenomeSize(),assembler.makesScaffolds(),args.isRunParallel(),waitCondition,jobName);
}","@Override public void dispatchAnalyserJobs(Assembler assembler,SingleMassArgs args,String waitCondition,String jobName) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  File inputDir=null;
  if (assembler.makesScaffolds()) {
    inputDir=args.getScaffoldsDir();
  }
 else   if (assembler.makesContigs()) {
    inputDir=args.getContigsDir();
  }
 else   if (assembler.makesUnitigs()) {
    inputDir=args.getUnitigsDir();
  }
 else {
    throw new IOException(""String_Node_Str"" + MassArgs.OutputLevel.getListAsString());
  }
  List<Integer> jobIds=this.statsExecutor.dispatchAnalyserJobs(args.getStatsLevels(),inputDir,args.getThreads(),args.getOrganism() == null ? 0 : args.getOrganism().getEstGenomeSize(),assembler.makesScaffolds(),args.isRunParallel(),waitCondition,jobName);
  this.jobIds.addAll(jobIds);
}",0.9694061187762448
59710,"@Override public void initialise(ConanProcessService conanProcessService,ExecutionContext executionContext){
  super.initialise(conanProcessService,executionContext);
  statsExecutor.initialise(conanProcessService,executionContext);
}","@Override public void initialise(ConanProcessService conanProcessService,ExecutionContext executionContext){
  super.initialise(conanProcessService,executionContext);
  this.jobIds.clear();
  this.statsExecutor.initialise(conanProcessService,executionContext);
}",0.9435483870967742
59711,"public JobCleaner(String[] args) throws ParseException {
  CommandLine cmdLine=new PosixParser().parse(createOptions(),args,true);
  this.help=cmdLine.hasOption(OPT_HELP);
  this.verbose=cmdLine.hasOption(OPT_VERBOSE);
  this.targetDir=cmdLine.getArgList().isEmpty() ? new File(""String_Node_Str"") : new File((String)cmdLine.getArgList().get(0));
}","public JobCleaner(String[] args) throws ParseException {
  CommandLine cmdLine=new PosixParser().parse(createOptions(),args,true);
  this.help=cmdLine.hasOption(OPT_HELP);
  this.verbose=cmdLine.hasOption(OPT_VERBOSE);
  this.targetDir=cmdLine.getArgList().isEmpty() ? new File(""String_Node_Str"").getAbsoluteFile() : new File((String)cmdLine.getArgList().get(0));
}",0.9747191011235956
59712,"/** 
 * Creates a new RAMPART instance based on command line arguments
 * @param args List of command line arguments containing information to setup RAMPART
 * @throws ParseException Thrown if an invalid command line was encountered
 */
public Rampart(String[] args) throws ParseException, IOException {
  super(APP_NAME,SETTINGS_DIR);
  this.parse(new PosixParser().parse(createOptions(),args,true));
  this.init();
  this.args=new RampartArgs(this.jobConfig,this.getOutputDir(),this.getJobPrefix().replaceAll(""String_Node_Str"",createTimestamp()),this.stages);
  this.args.parseXml();
  this.configureSystem();
}","/** 
 * Creates a new RAMPART instance based on command line arguments
 * @param args List of command line arguments containing information to setup RAMPART
 * @throws ParseException Thrown if an invalid command line was encountered
 */
public Rampart(String[] args) throws ParseException, IOException {
  super(APP_NAME,SETTINGS_DIR);
  this.parse(new PosixParser().parse(createOptions(),args,true));
  if (!this.isHelp()) {
    this.init();
    this.args=new RampartArgs(this.jobConfig,this.getOutputDir(),this.getJobPrefix().replaceAll(""String_Node_Str"",createTimestamp()),this.stages);
    this.args.parseXml();
    this.configureSystem();
    log.info(""String_Node_Str"" + this.getOutputDir().getAbsolutePath());
    log.info(""String_Node_Str"" + this.getEnvironmentConfig().getAbsolutePath());
  }
}",0.865819209039548
59713,"@Override protected void internalParseXml(Element element) throws IOException {
  Element librariesElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_LIBRARIES);
  NodeList libraries=librariesElement.getElementsByTagName(KEY_ELEM_LIBRARY);
  this.libs=new ArrayList<>();
  for (int i=0; i < libraries.getLength(); i++) {
    this.libs.add(new Library((Element)libraries.item(i)));
  }
  Element pipelineElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_PIPELINE);
  Element mecqElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new MecqArgs(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs);
  Element kmerReadsElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_KMER_READS);
  this.kmerCountReadsArgs=kmerReadsElement == null ? null : new KmerCountReadsArgs(kmerReadsElement,this.libs,this.mecqArgs == null ? null : this.mecqArgs.getEqcArgList(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMeqcDir(),this.rampartJobFileSystem.getReadsKmersDir(),this.getOrganism());
  Element massElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new MassArgs(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs,this.mecqArgs == null ? null : this.mecqArgs.getEqcArgList(),this.getOrganism());
  Element ampElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new AmpArgs(ampElement,this.rampartJobFileSystem.getAmpDir(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMassOutFile(),this.libs,this.mecqArgs == null ? null : this.mecqArgs.getEqcArgList(),this.getOrganism());
  Element finaliseElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_FINALISE);
  this.finaliseArgs=finaliseElement == null ? null : new FinaliseArgs(finaliseElement,this.ampArgs.getFinalAssembly(),this.rampartJobFileSystem.getFinalDir(),this.getOrganism(),this.getInstitution());
}","@Override protected void internalParseXml(Element element) throws IOException {
  Element librariesElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_LIBRARIES);
  NodeList libraries=librariesElement.getElementsByTagName(KEY_ELEM_LIBRARY);
  this.libs=new ArrayList<>();
  for (int i=0; i < libraries.getLength(); i++) {
    this.libs.add(new Library((Element)libraries.item(i),this.getOutputDir().getAbsoluteFile()));
  }
  Element pipelineElement=XmlHelper.getDistinctElementByName(element,KEY_ELEM_PIPELINE);
  Element mecqElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MECQ);
  this.mecqArgs=mecqElement == null ? null : new MecqArgs(mecqElement,this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs);
  Element kmerReadsElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_KMER_READS);
  this.kmerCountReadsArgs=kmerReadsElement == null ? null : new KmerCountReadsArgs(kmerReadsElement,this.libs,this.mecqArgs == null ? new ArrayList<EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMeqcDir(),this.rampartJobFileSystem.getReadsKmersDir(),this.getOrganism());
  Element massElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_MASS);
  this.massArgs=massElement == null ? null : new MassArgs(massElement,this.rampartJobFileSystem.getMassDir(),this.rampartJobFileSystem.getMeqcDir(),this.getJobPrefix() + ""String_Node_Str"",this.libs,this.mecqArgs == null ? new ArrayList<EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getOrganism());
  Element ampElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_AMP);
  this.ampArgs=ampElement == null ? null : new AmpArgs(ampElement,this.rampartJobFileSystem.getAmpDir(),this.getJobPrefix() + ""String_Node_Str"",this.rampartJobFileSystem.getMassOutFile(),this.libs,this.mecqArgs == null ? new ArrayList<EcqArgs>() : this.mecqArgs.getEqcArgList(),this.getOrganism());
  File finalAssembly=this.ampArgs == null ? this.rampartJobFileSystem.getMassOutFile() : this.ampArgs.getFinalAssembly();
  Element finaliseElement=XmlHelper.getDistinctElementByName(pipelineElement,KEY_ELEM_FINALISE);
  this.finaliseArgs=finaliseElement == null ? null : new FinaliseArgs(finaliseElement,finalAssembly,this.rampartJobFileSystem.getFinalDir(),this.getOrganism(),this.getInstitution());
}",0.920753064798599
59714,"public RampartArgs(File configFile,File outputDir,String jobPrefix,List<RampartStage> stages) throws IOException {
  super(configFile,outputDir,jobPrefix);
  this.stages=stages;
  this.libs=new ArrayList<>();
  this.mecqArgs=null;
  this.kmerCountReadsArgs=null;
  this.massArgs=null;
  this.ampArgs=null;
  this.finaliseArgs=null;
  this.rampartJobFileSystem=new RampartJobFileSystem(outputDir);
}","public RampartArgs(File configFile,File outputDir,String jobPrefix,List<RampartStage> stages) throws IOException {
  super(configFile,outputDir,jobPrefix);
  this.stages=stages;
  this.libs=new ArrayList<>();
  this.mecqArgs=null;
  this.kmerCountReadsArgs=null;
  this.massArgs=null;
  this.ampArgs=null;
  this.finaliseArgs=null;
  this.rampartJobFileSystem=new RampartJobFileSystem(outputDir.getAbsoluteFile());
}",0.977886977886978
59715,"public void init() throws IOException {
  this.clearProcessList();
  addProcessIfRequested(RampartStage.MECQ,this.args.getMecqArgs());
  addProcessIfRequested(RampartStage.MASS,this.args.getMassArgs());
  addProcessIfRequested(RampartStage.AMP,this.args.getAmpArgs());
  addProcessIfRequested(RampartStage.FINALISE,this.args.getFinaliseArgs());
}","public void init() throws IOException {
  this.clearProcessList();
  addProcessIfRequested(RampartStage.MECQ,this.args.getMecqArgs());
  addProcessIfRequested(RampartStage.KMER_READS,this.args.getKmerCountReadsArgs());
  addProcessIfRequested(RampartStage.MASS,this.args.getMassArgs());
  addProcessIfRequested(RampartStage.AMP,this.args.getAmpArgs());
  addProcessIfRequested(RampartStage.FINALISE,this.args.getFinaliseArgs());
}",0.8917525773195877
59716,"@Override public void setFromArgMap(Map<ConanParameter,String> pvp) throws IOException {
}","@Override public void setFromArgMap(Map<ConanParameter,String> pvp) throws IOException {
  for (  Map.Entry<ConanParameter,String> entry : pvp.entrySet()) {
    if (!entry.getKey().validateParameterValue(entry.getValue())) {
      throw new IllegalArgumentException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
    String param=entry.getKey().getName();
  }
}",0.3711340206185567
59717,"@Override public List<ConanParameter> getConanParameters(){
  return null;
}","@Override public List<ConanParameter> getConanParameters(){
  return new ArrayList<>(Arrays.asList(new ConanParameter[]{this.jobPrefix,this.minN,this.outputDir,this.inputFile}));
}",0.5859375
59718,"protected void executeAssembler(Assembler assembler,String jobName,ExecutionContext executionContext) throws IOException, ProcessExecutionException, InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  assembler.initialise();
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  File outputDir=assembler.getArgs().getOutputDir();
  if (outputDir.exists()) {
    FileUtils.deleteDirectory(outputDir);
  }
  outputDir.mkdir();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schArgs=executionContextCopy.getScheduler().getArgs();
    schArgs.setJobName(jobName);
    schArgs.setMonitorFile(new File(outputDir,jobName + ""String_Node_Str""));
    schArgs.setThreads(args.getThreads());
    schArgs.setMemoryMB(args.getMemory());
    if (assembler.usesOpenMpi() && args.getThreads() > 1) {
      schArgs.setOpenmpi(true);
    }
    executionContextCopy.setForegroundJob(!args.getParallelismLevel().doParallelAssemblies());
  }
  this.conanProcessService.execute(assembler,executionContextCopy);
}","protected void executeAssembler(Assembler assembler,String jobName,ExecutionContext executionContext) throws IOException, ProcessExecutionException, InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  File outputDir=assembler.getArgs().getOutputDir();
  if (outputDir.exists()) {
    FileUtils.deleteDirectory(outputDir);
  }
  outputDir.mkdir();
  assembler.initialise();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schArgs=executionContextCopy.getScheduler().getArgs();
    schArgs.setJobName(jobName);
    schArgs.setMonitorFile(new File(outputDir,jobName + ""String_Node_Str""));
    schArgs.setThreads(args.getThreads());
    schArgs.setMemoryMB(args.getMemory());
    if (assembler.usesOpenMpi() && args.getThreads() > 1) {
      schArgs.setOpenmpi(true);
    }
    executionContextCopy.setForegroundJob(!args.getParallelismLevel().doParallelAssemblies());
  }
  this.conanProcessService.execute(assembler,executionContextCopy);
}",0.9753320683111956
59719,"protected void executePlots(File inputFile,File outputFile,String jobName,ExecutionContext executionContext) throws InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schedulerArgs=executionContextCopy.getScheduler().getArgs();
    schedulerArgs.setJobName(jobName);
    schedulerArgs.setMonitorFile(new File(inputFile.getParentFile(),jobName + ""String_Node_Str""));
  }
  AscV10Args ascArgs=new AscV10Args();
  ascArgs.setInput(inputFile);
  ascArgs.setOutput(outputFile);
  AscV10Process ascProcess=new AscV10Process(ascArgs);
  try {
    this.conanProcessService.execute(ascProcess,executionContextCopy);
  }
 catch (  ProcessExecutionException pee) {
    log.error(pee.getMessage(),pee);
  }
}","protected void executePlots(File inputFile,File outputFile,String jobName,ExecutionContext executionContext) throws InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schedulerArgs=executionContextCopy.getScheduler().getArgs();
    schedulerArgs.setJobName(jobName);
    schedulerArgs.setMonitorFile(new File(inputFile.getParentFile(),jobName + ""String_Node_Str""));
  }
  AscV10Args ascArgs=new AscV10Args();
  ascArgs.setInput(inputFile);
  ascArgs.setOutput(outputFile);
  ascArgs.setMode(""String_Node_Str"");
  AscV10Process ascProcess=new AscV10Process(ascArgs);
  try {
    this.conanProcessService.execute(ascProcess,executionContextCopy);
  }
 catch (  ProcessExecutionException pee) {
    log.error(pee.getMessage(),pee);
  }
}",0.9767441860465116
59720,"protected void createConfig(File baseConfigFile,ErrorCorrector errorCorrector,File configDir) throws IOException {
  RampartConfiguration baseConfig=RampartConfiguration.loadFile(baseConfigFile);
  String name=errorCorrector == null ? ""String_Node_Str"" : errorCorrector.getName().toLowerCase();
  baseConfig.getMassSettings().add(""String_Node_Str"",name);
  if (errorCorrector != null) {
    for (    Library lib : baseConfig.getLibs()) {
      if (lib.testUsage(Library.Usage.QUALITY_TRIMMING)) {
        if (errorCorrector.getArgs().isSingleEndOnly()) {
          ErrorCorrectorSingleEndArgs ecPairedEndArgs=(ErrorCorrectorSingleEndArgs)errorCorrector.getArgs();
          lib.setSeFile(new SeqFile(ecPairedEndArgs.getCorrectedFile()));
        }
 else {
          ErrorCorrectorPairedEndArgs ecPairedEndArgs=(ErrorCorrectorPairedEndArgs)errorCorrector.getArgs();
          lib.setFilePaired1(new SeqFile(ecPairedEndArgs.getPairedEndCorrectedFiles().getFile1()));
          lib.setFilePaired2(new SeqFile(ecPairedEndArgs.getPairedEndCorrectedFiles().getFile2()));
          lib.setSeFile(new SeqFile(ecPairedEndArgs.getSingleEndCorrectedFiles().get(0)));
        }
      }
    }
  }
  baseConfig.save(new File(configDir,name + ""String_Node_Str""));
}","protected void createConfig(File baseConfigFile,ErrorCorrector errorCorrector,File configDir) throws IOException {
  RampartConfiguration baseConfig=RampartConfiguration.loadFile(baseConfigFile);
  String name=errorCorrector == null ? ""String_Node_Str"" : errorCorrector.getName().toLowerCase();
  baseConfig.getMassSettings().add(""String_Node_Str"",name);
  if (errorCorrector != null) {
    for (    Library lib : baseConfig.getLibs()) {
      if (lib.testUsage(Library.Usage.QUALITY_TRIMMING)) {
        if (errorCorrector.getArgs().isSingleEndOnly()) {
          ErrorCorrectorSingleEndArgs ecPairedEndArgs=(ErrorCorrectorSingleEndArgs)errorCorrector.getArgs();
          lib.setSeFile(new SeqFile(ecPairedEndArgs.getCorrectedFile()));
        }
 else {
          ErrorCorrectorPairedEndArgs ecPairedEndArgs=(ErrorCorrectorPairedEndArgs)errorCorrector.getArgs();
          lib.setFilePaired1(new SeqFile(ecPairedEndArgs.getPairedEndCorrectedFiles().getFile1()));
          lib.setFilePaired2(new SeqFile(ecPairedEndArgs.getPairedEndCorrectedFiles().getFile2()));
          if (ecPairedEndArgs.getSingleEndCorrectedFiles() != null && !ecPairedEndArgs.getSingleEndCorrectedFiles().isEmpty()) {
            lib.setSeFile(new SeqFile(ecPairedEndArgs.getSingleEndCorrectedFiles().get(0)));
          }
 else {
            lib.setSeFile(null);
          }
        }
      }
    }
  }
  baseConfig.save(new File(configDir,name + ""String_Node_Str""));
}",0.9272997032640948
59721,"/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    log.info(""String_Node_Str"" + args.getConfig().getAbsolutePath());
    log.debug(""String_Node_Str"");
    args.validateKmers(args.getKmin(),args.getKmax());
    log.debug(""String_Node_Str"");
    this.createSupportDirectories();
    WaitCondition assemblerWait=null;
    if (!args.isStatsOnly()) {
      for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=nextKmer(k)) {
        File outputDir=new File(args.getOutputDir(),Integer.toString(k));
        log.debug(""String_Node_Str"" + args.getAssembler() + ""String_Node_Str""+ outputDir.getAbsolutePath());
        Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler(),k,args.getLibs(),outputDir);
        log.debug(""String_Node_Str"" + assembler != null ? assembler.getName() : ""String_Node_Str"");
        assembler.getArgs().setThreads(args.getThreads());
        assembler.getArgs().setCoverageCutoff(args.getCoverageCutoff());
        this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + k,executionContext);
        this.createLinks(assembler,k,executionContext);
      }
      if (executionContext.usingScheduler()) {
        if (args.getParallelismLevel() == MassArgs.ParallelismLevel.PARALLEL_ASSEMBLIES_ONLY) {
          log.debug(""String_Node_Str"");
          this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
        }
 else         if (args.getParallelismLevel().doParallelMass()) {
          log.debug(""String_Node_Str"");
          assemblerWait=executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str"");
        }
      }
    }
    log.debug(""String_Node_Str"");
    this.dispatchStatsJob(assemblerWait,executionContext);
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}","/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    log.info(""String_Node_Str"" + args.getConfig().getAbsolutePath());
    log.debug(""String_Node_Str"");
    args.validateKmers(args.getKmin(),args.getKmax());
    log.debug(""String_Node_Str"");
    this.createSupportDirectories();
    WaitCondition assemblerWait=null;
    if (!args.isStatsOnly()) {
      for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=nextKmer(k)) {
        File outputDir=new File(args.getOutputDir(),Integer.toString(k));
        log.debug(""String_Node_Str"" + args.getAssembler() + ""String_Node_Str""+ outputDir.getAbsolutePath());
        Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler(),k,args.getLibs(),outputDir);
        log.debug(""String_Node_Str"" + assembler != null ? assembler.getName() : ""String_Node_Str"");
        AssemblerArgs asmArgs=assembler.getArgs();
        log.debug(""String_Node_Str"" + asmArgs.toString());
        asmArgs.setThreads(args.getThreads());
        asmArgs.setCoverageCutoff(args.getCoverageCutoff());
        this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + k,executionContext);
        this.createLinks(assembler,k,executionContext);
      }
      if (executionContext.usingScheduler()) {
        if (args.getParallelismLevel() == MassArgs.ParallelismLevel.PARALLEL_ASSEMBLIES_ONLY) {
          log.debug(""String_Node_Str"");
          this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
        }
 else         if (args.getParallelismLevel().doParallelMass()) {
          log.debug(""String_Node_Str"");
          assemblerWait=executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str"");
        }
      }
    }
    log.debug(""String_Node_Str"");
    this.dispatchStatsJob(assemblerWait,executionContext);
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}",0.9700526102792392
59722,"protected void executeAssembler(Assembler assembler,String jobName,ExecutionContext executionContext) throws IOException, ProcessExecutionException, InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  File outputDir=assembler.getArgs().getOutputDir();
  if (outputDir.exists()) {
    FileUtils.deleteDirectory(outputDir);
  }
  outputDir.mkdir();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schArgs=executionContextCopy.getScheduler().getArgs();
    schArgs.setJobName(jobName);
    schArgs.setMonitorFile(new File(outputDir,jobName + ""String_Node_Str""));
    schArgs.setThreads(args.getThreads());
    schArgs.setMemoryMB(args.getMemory());
    if (assembler.usesOpenMpi() && args.getThreads() > 1) {
      schArgs.setOpenmpi(true);
    }
    executionContextCopy.setForegroundJob(!args.getParallelismLevel().doParallelAssemblies());
  }
  this.conanProcessService.execute(assembler,executionContextCopy);
}","protected void executeAssembler(Assembler assembler,String jobName,ExecutionContext executionContext) throws IOException, ProcessExecutionException, InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  assembler.initialise();
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  File outputDir=assembler.getArgs().getOutputDir();
  if (outputDir.exists()) {
    FileUtils.deleteDirectory(outputDir);
  }
  outputDir.mkdir();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schArgs=executionContextCopy.getScheduler().getArgs();
    schArgs.setJobName(jobName);
    schArgs.setMonitorFile(new File(outputDir,jobName + ""String_Node_Str""));
    schArgs.setThreads(args.getThreads());
    schArgs.setMemoryMB(args.getMemory());
    if (assembler.usesOpenMpi() && args.getThreads() > 1) {
      schArgs.setOpenmpi(true);
    }
    executionContextCopy.setForegroundJob(!args.getParallelismLevel().doParallelAssemblies());
  }
  this.conanProcessService.execute(assembler,executionContextCopy);
}",0.9875120076849184
59723,"protected void createLinks(Assembler assembler,int k,ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  ExecutionContext linkingExecutionContext=new DefaultExecutionContext(executionContext.getLocality(),null,null,true);
  StringJoiner compoundLinkCmdLine=new StringJoiner(""String_Node_Str"");
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  compoundLinkCmdLine.add(assembler.makesUnitigs(),""String_Node_Str"",makeLinkCmdLine(assembler.getUnitigsFile(),args.getUnitigsDir(),k));
  compoundLinkCmdLine.add(assembler.makesContigs(),""String_Node_Str"",makeLinkCmdLine(assembler.getContigsFile(),args.getContigsDir(),k));
  compoundLinkCmdLine.add(assembler.makesScaffolds(),""String_Node_Str"",makeLinkCmdLine(assembler.getScaffoldsFile(),args.getScaffoldsDir(),k));
  this.conanProcessService.execute(compoundLinkCmdLine.toString(),linkingExecutionContext);
}","protected void createLinks(Assembler assembler,int k,ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  ExecutionContext linkingExecutionContext=new DefaultExecutionContext(executionContext.getLocality(),null,null,true);
  StringJoiner compoundLinkCmdLine=new StringJoiner(""String_Node_Str"");
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  if (assembler.makesUnitigs()) {
    compoundLinkCmdLine.add(makeLinkCmdLine(assembler.getUnitigsFile(),args.getUnitigsDir(),k));
  }
  if (assembler.makesContigs()) {
    compoundLinkCmdLine.add(makeLinkCmdLine(assembler.getContigsFile(),args.getContigsDir(),k));
  }
  if (assembler.makesScaffolds()) {
    compoundLinkCmdLine.add(makeLinkCmdLine(assembler.getScaffoldsFile(),args.getScaffoldsDir(),k));
  }
  this.conanProcessService.execute(compoundLinkCmdLine.toString(),linkingExecutionContext);
}",0.7509663169519603
59724,"protected void executeEcq(ErrorCorrector errorCorrector,String jobName,boolean runInParallel,File outputDir,ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  errorCorrector.configure(this.getConanProcessService());
  if (executionContext.usingScheduler()) {
    executionContextCopy.getScheduler().getArgs().setJobName(jobName);
    executionContextCopy.getScheduler().getArgs().setMonitorFile(new File(outputDir,jobName + ""String_Node_Str""));
    executionContextCopy.setForegroundJob(!runInParallel);
  }
  this.conanProcessService.execute(errorCorrector,executionContextCopy);
}","protected void executeEcq(ErrorCorrector errorCorrector,String jobName,boolean runInParallel,File outputDir,ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  ExecutionContext executionContextCopy=executionContext.copy();
  errorCorrector.configure(this.getConanProcessService());
  errorCorrector.initialise();
  if (executionContext.usingScheduler()) {
    SchedulerArgs schedulerArgs=executionContextCopy.getScheduler().getArgs();
    ErrorCorrectorArgs ecArgs=errorCorrector.getArgs();
    schedulerArgs.setJobName(jobName);
    schedulerArgs.setMonitorFile(new File(outputDir,jobName + ""String_Node_Str""));
    schedulerArgs.setThreads(ecArgs.getThreads());
    schedulerArgs.setMemoryMB(ecArgs.getMemoryGb() * 1000);
    executionContextCopy.setForegroundJob(!runInParallel);
  }
  this.conanProcessService.execute(errorCorrector,executionContextCopy);
}",0.7859384808537351
59725,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    log.info(""String_Node_Str"");
    MultiMassArgs args=(MultiMassArgs)this.getProcessArgs();
    List<File> unitigStatsFiles=new ArrayList<File>();
    List<File> contigStatsFiles=new ArrayList<File>();
    List<File> scaffoldStatsFiles=new ArrayList<File>();
    List<SingleMassArgs> singleMassArgsList=this.createSingleMassArgsList(args);
    List<Thread> singleMassThreads=new ArrayList<Thread>();
    Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler());
    for (    SingleMassArgs singleMassArgs : singleMassArgsList) {
      if (assembler.makesUnitigs()) {
        unitigStatsFiles.add(new File(singleMassArgs.getUnitigsDir(),""String_Node_Str""));
      }
      if (assembler.makesContigs()) {
        contigStatsFiles.add(new File(singleMassArgs.getContigsDir(),""String_Node_Str""));
      }
      if (assembler.makesScaffolds()) {
        scaffoldStatsFiles.add(new File(singleMassArgs.getScaffoldsDir(),""String_Node_Str""));
      }
      if (!singleMassArgs.getOutputDir().exists() && !singleMassArgs.getOutputDir().mkdirs()) {
        throw new IOException(""String_Node_Str"");
      }
      this.singleMassExecutor.executeSingleMass(singleMassArgs,this.conanProcessService,executionContext);
    }
    if (args.getParallelismLevel().doParallelMass()) {
      log.debug(""String_Node_Str"");
      this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
    }
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    File statsDir=new File(args.getOutputDir(),""String_Node_Str"");
    if (assembler.makesUnitigs()) {
      executeMassSelector(args,new File(statsDir,""String_Node_Str""),unitigStatsFiles,executionContext);
    }
    if (assembler.makesContigs()) {
      executeMassSelector(args,new File(statsDir,""String_Node_Str""),contigStatsFiles,executionContext);
    }
    if (assembler.makesScaffolds()) {
      executeMassSelector(args,new File(statsDir,""String_Node_Str""),scaffoldStatsFiles,executionContext);
    }
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    log.info(""String_Node_Str"");
    MultiMassArgs args=(MultiMassArgs)this.getProcessArgs();
    List<File> unitigStatsFiles=new ArrayList<File>();
    List<File> contigStatsFiles=new ArrayList<File>();
    List<File> scaffoldStatsFiles=new ArrayList<File>();
    List<SingleMassArgs> singleMassArgsList=this.createSingleMassArgsList(args);
    List<Thread> singleMassThreads=new ArrayList<Thread>();
    Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler());
    assembler.getArgs().setLibraries(args.getLibs());
    for (    SingleMassArgs singleMassArgs : singleMassArgsList) {
      if (assembler.makesUnitigs()) {
        unitigStatsFiles.add(new File(singleMassArgs.getUnitigsDir(),""String_Node_Str""));
      }
      if (assembler.makesContigs()) {
        contigStatsFiles.add(new File(singleMassArgs.getContigsDir(),""String_Node_Str""));
      }
      if (assembler.makesScaffolds()) {
        scaffoldStatsFiles.add(new File(singleMassArgs.getScaffoldsDir(),""String_Node_Str""));
      }
      if (!singleMassArgs.getOutputDir().exists() && !singleMassArgs.getOutputDir().mkdirs()) {
        throw new IOException(""String_Node_Str"");
      }
      this.singleMassExecutor.executeSingleMass(singleMassArgs,this.conanProcessService,executionContext);
    }
    if (args.getParallelismLevel().doParallelMass()) {
      log.debug(""String_Node_Str"");
      this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
    }
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    File statsDir=new File(args.getOutputDir(),""String_Node_Str"");
    if (assembler.makesUnitigs()) {
      executeMassSelector(args,new File(statsDir,""String_Node_Str""),unitigStatsFiles,executionContext);
    }
    if (assembler.makesContigs()) {
      executeMassSelector(args,new File(statsDir,""String_Node_Str""),contigStatsFiles,executionContext);
    }
    if (assembler.makesScaffolds()) {
      executeMassSelector(args,new File(statsDir,""String_Node_Str""),scaffoldStatsFiles,executionContext);
    }
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}",0.9881941407958024
59726,"protected void createSupportDirectories(){
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler());
  if (assembler.makesUnitigs()) {
    args.getUnitigsDir().mkdir();
  }
  if (assembler.makesContigs()) {
    args.getContigsDir().mkdir();
  }
  if (assembler.makesScaffolds()) {
    args.getScaffoldsDir().mkdir();
  }
}","protected void createSupportDirectories(Assembler assembler,SingleMassArgs args){
  if (assembler.makesUnitigs()) {
    args.getUnitigsDir().mkdir();
  }
  if (assembler.makesContigs()) {
    args.getContigsDir().mkdir();
  }
  if (assembler.makesScaffolds()) {
    args.getScaffoldsDir().mkdir();
  }
}",0.1588652482269503
59727,"/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    log.info(""String_Node_Str"" + args.getConfig().getAbsolutePath());
    log.debug(""String_Node_Str"");
    args.validateKmers(args.getKmin(),args.getKmax());
    log.debug(""String_Node_Str"");
    this.createSupportDirectories();
    WaitCondition assemblerWait=null;
    if (!args.isStatsOnly()) {
      for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=nextKmer(k)) {
        File outputDir=new File(args.getOutputDir(),Integer.toString(k));
        log.debug(""String_Node_Str"" + args.getAssembler() + ""String_Node_Str""+ outputDir.getAbsolutePath());
        Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler(),k,args.getLibs(),outputDir);
        log.debug(""String_Node_Str"" + assembler != null ? assembler.getName() : ""String_Node_Str"");
        AssemblerArgs asmArgs=assembler.getArgs();
        log.debug(""String_Node_Str"" + asmArgs.toString());
        asmArgs.setThreads(args.getThreads());
        asmArgs.setCoverageCutoff(args.getCoverageCutoff());
        this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + k,executionContext);
        this.createLinks(assembler,k,executionContext);
      }
      if (executionContext.usingScheduler()) {
        if (args.getParallelismLevel() == MassArgs.ParallelismLevel.PARALLEL_ASSEMBLIES_ONLY) {
          log.debug(""String_Node_Str"");
          this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
        }
 else         if (args.getParallelismLevel().doParallelMass()) {
          log.debug(""String_Node_Str"");
          assemblerWait=executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str"");
        }
      }
    }
    log.debug(""String_Node_Str"");
    this.dispatchStatsJob(assemblerWait,executionContext);
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}","/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    Assembler genericAssembler=AssemblerFactory.createAssembler(args.getAssembler());
    genericAssembler.getArgs().setLibraries(args.getLibs());
    log.info(""String_Node_Str"" + args.getConfig().getAbsolutePath());
    log.debug(""String_Node_Str"");
    args.validateKmers(args.getKmin(),args.getKmax());
    log.debug(""String_Node_Str"");
    this.createSupportDirectories(genericAssembler,args);
    WaitCondition assemblerWait=null;
    if (!args.isStatsOnly()) {
      for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=args.getStepSize().nextKmer(k)) {
        File outputDir=new File(args.getOutputDir(),Integer.toString(k));
        log.debug(""String_Node_Str"" + args.getAssembler() + ""String_Node_Str""+ outputDir.getAbsolutePath());
        Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler(),k,args.getLibs(),outputDir);
        log.debug(""String_Node_Str"" + assembler != null ? assembler.getName() : ""String_Node_Str"");
        AssemblerArgs asmArgs=assembler.getArgs();
        log.debug(""String_Node_Str"" + asmArgs.toString());
        asmArgs.setThreads(args.getThreads());
        asmArgs.setCoverageCutoff(args.getCoverageCutoff());
        this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + k,executionContext);
        this.createLinks(assembler,k,executionContext);
      }
      if (executionContext.usingScheduler()) {
        if (args.getParallelismLevel() == MassArgs.ParallelismLevel.PARALLEL_ASSEMBLIES_ONLY) {
          log.debug(""String_Node_Str"");
          this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
        }
 else         if (args.getParallelismLevel().doParallelMass()) {
          log.debug(""String_Node_Str"");
          assemblerWait=executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str"");
        }
      }
    }
    log.debug(""String_Node_Str"");
    this.dispatchStatsJob(genericAssembler,assemblerWait,executionContext);
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}",0.9610091743119266
59728,"protected void dispatchStatsJob(WaitCondition waitCondition,ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  ExecutionContext executionContextCopy=executionContext.copy();
  String jobName=args.getJobPrefix() + ""String_Node_Str"";
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schedulerArgs=executionContextCopy.getScheduler().getArgs();
    schedulerArgs.setJobName(jobName);
    schedulerArgs.setThreads(1);
    schedulerArgs.setMemoryMB(0);
    schedulerArgs.setWaitCondition(waitCondition);
    executionContextCopy.setForegroundJob(args.getParallelismLevel() == MassArgs.ParallelismLevel.LINEAR);
  }
  Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler());
  if (assembler.makesUnitigs()) {
    this.executeSingleStatsJob(args.getUnitigsDir(),jobName + ""String_Node_Str"",executionContextCopy);
  }
  if (assembler.makesContigs()) {
    this.executeSingleStatsJob(args.getContigsDir(),jobName + ""String_Node_Str"",executionContextCopy);
  }
  if (assembler.makesScaffolds()) {
    this.executeSingleStatsJob(args.getScaffoldsDir(),jobName + ""String_Node_Str"",executionContextCopy);
  }
  if (executionContext.usingScheduler() && args.getParallelismLevel() == MassArgs.ParallelismLevel.PARALLEL_ASSEMBLIES_ONLY) {
    log.debug(""String_Node_Str"");
    this.executeScheduledWait(jobName,args.getOutputDir(),executionContext);
  }
}","protected void dispatchStatsJob(Assembler assembler,WaitCondition waitCondition,ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  ExecutionContext executionContextCopy=executionContext.copy();
  String jobName=args.getJobPrefix() + ""String_Node_Str"";
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schedulerArgs=executionContextCopy.getScheduler().getArgs();
    schedulerArgs.setJobName(jobName);
    schedulerArgs.setThreads(1);
    schedulerArgs.setMemoryMB(0);
    schedulerArgs.setWaitCondition(waitCondition);
    executionContextCopy.setForegroundJob(args.getParallelismLevel() == MassArgs.ParallelismLevel.LINEAR);
  }
  if (assembler.makesUnitigs()) {
    this.executeSingleStatsJob(args.getUnitigsDir(),jobName + ""String_Node_Str"",executionContextCopy);
  }
  if (assembler.makesContigs()) {
    this.executeSingleStatsJob(args.getContigsDir(),jobName + ""String_Node_Str"",executionContextCopy);
  }
  if (assembler.makesScaffolds()) {
    this.executeSingleStatsJob(args.getScaffoldsDir(),jobName + ""String_Node_Str"",executionContextCopy);
  }
  if (executionContext.usingScheduler() && args.getParallelismLevel() == MassArgs.ParallelismLevel.PARALLEL_ASSEMBLIES_ONLY) {
    log.debug(""String_Node_Str"");
    this.executeScheduledWait(jobName,args.getOutputDir(),executionContext);
  }
}",0.9674168626133692
59729,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(KEY_JD_AUTHOR + ""String_Node_Str"").append(this.getAuthor()).append(""String_Node_Str"").append(KEY_JD_COLLABORATOR + ""String_Node_Str"").append(this.getAuthor()).append(""String_Node_Str"").append(KEY_JD_INSTITUTION + ""String_Node_Str"").append(this.getAuthor()).append(""String_Node_Str"").append(KEY_JD_TITLE + ""String_Node_Str"").append(this.getAuthor()).append(""String_Node_Str"").append(KEY_JD_JIRA_SEQINFO_ID + ""String_Node_Str"").append(this.getAuthor()).append(""String_Node_Str"").append(KEY_JD_MISO_ID + ""String_Node_Str"").append(this.getAuthor()).append(""String_Node_Str"").append(KEY_JD_NAME + ""String_Node_Str"").append(this.getName()).append(""String_Node_Str"");
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"").append(KEY_JD_AUTHOR + ""String_Node_Str"").append(this.getAuthor()).append(""String_Node_Str"").append(KEY_JD_COLLABORATOR + ""String_Node_Str"").append(this.getCollaborator()).append(""String_Node_Str"").append(KEY_JD_INSTITUTION + ""String_Node_Str"").append(this.getInstitution()).append(""String_Node_Str"").append(KEY_JD_TITLE + ""String_Node_Str"").append(this.getTitle()).append(""String_Node_Str"").append(KEY_JD_JIRA_SEQINFO_ID + ""String_Node_Str"").append(this.getJiraSeqinfoId()).append(""String_Node_Str"").append(KEY_JD_MISO_ID + ""String_Node_Str"").append(this.getMisoId()).append(""String_Node_Str"").append(KEY_JD_NAME + ""String_Node_Str"").append(this.getName()).append(""String_Node_Str"");
  return sb.toString();
}",0.9573283858998144
59730,"public static Library parseIniSection(Section iniSection,int index){
  Library ld=new Library();
  ld.setName(iniSection.get(KEY_NAME));
  ld.setAverageInsertSize(Integer.parseInt(iniSection.get(KEY_AVG_INSERT_SIZE)));
  ld.setInsertErrorTolerance(Double.parseDouble(iniSection.get(KEY_INSERT_ERROR_TOLERANCE)));
  ld.setReadLength(Integer.parseInt(iniSection.get(KEY_READ_LENGTH)));
  ld.setSeqOrientation(SeqOrientation.valueOf(iniSection.get(KEY_SEQ_ORIENTATION).toUpperCase()));
  ld.setUsage(iniSection.get(KEY_USAGE));
  ld.setType(Type.valueOf(iniSection.get(KEY_TYPE).toUpperCase()));
  ld.setFilePaired1(new SeqFile(iniSection.get(KEY_FILE_1)));
  ld.setFilePaired2(new SeqFile(iniSection.get(KEY_FILE_2)));
  if (iniSection.get(KEY_DATASET) != null) {
    ld.setDataset(Dataset.valueOf(iniSection.get(KEY_DATASET)));
  }
  if (iniSection.get(KEY_FILE_SE) != null) {
    ld.setSeFile(new SeqFile(iniSection.get(KEY_FILE_SE)));
  }
  return ld;
}","public static Library parseIniSection(Section iniSection,int index){
  Library ld=new Library();
  ld.setIndex(index);
  ld.setName(iniSection.get(KEY_NAME));
  ld.setAverageInsertSize(Integer.parseInt(iniSection.get(KEY_AVG_INSERT_SIZE)));
  ld.setInsertErrorTolerance(Double.parseDouble(iniSection.get(KEY_INSERT_ERROR_TOLERANCE)));
  ld.setReadLength(Integer.parseInt(iniSection.get(KEY_READ_LENGTH)));
  ld.setSeqOrientation(SeqOrientation.valueOf(iniSection.get(KEY_SEQ_ORIENTATION).toUpperCase()));
  ld.setUsage(iniSection.get(KEY_USAGE));
  ld.setType(Type.valueOf(iniSection.get(KEY_TYPE).toUpperCase()));
  ld.setFilePaired1(new SeqFile(iniSection.get(KEY_FILE_1)));
  ld.setFilePaired2(new SeqFile(iniSection.get(KEY_FILE_2)));
  if (iniSection.get(KEY_DATASET) != null) {
    ld.setDataset(Dataset.valueOf(iniSection.get(KEY_DATASET)));
  }
  if (iniSection.get(KEY_FILE_SE) != null) {
    ld.setSeFile(new SeqFile(iniSection.get(KEY_FILE_SE)));
  }
  return ld;
}",0.98860103626943
59731,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + SECTION_PREFIX + this.getIndex().toString()+ ""String_Node_Str"").append(KEY_NAME + ""String_Node_Str"" + this.getName()+ ""String_Node_Str"").append(KEY_DATASET + ""String_Node_Str"" + this.getDataset().toString()+ ""String_Node_Str"").append(KEY_AVG_INSERT_SIZE + ""String_Node_Str"" + this.getAverageInsertSize().toString()+ ""String_Node_Str"").append(KEY_INSERT_ERROR_TOLERANCE + ""String_Node_Str"" + this.getInsertErrorTolerance().toString()+ ""String_Node_Str"").append(KEY_READ_LENGTH + ""String_Node_Str"" + this.getReadLength()+ ""String_Node_Str"").append(KEY_SEQ_ORIENTATION + ""String_Node_Str"" + this.getSeqOrientation().toString()+ ""String_Node_Str"").append(KEY_USAGE + ""String_Node_Str"" + this.getUsage().toString()+ ""String_Node_Str"").append(KEY_TYPE + ""String_Node_Str"" + this.getType().toString()+ ""String_Node_Str"").append(KEY_FILE_1 + ""String_Node_Str"" + this.getFilePaired1().getFilePath()+ ""String_Node_Str"").append(KEY_FILE_2 + ""String_Node_Str"" + this.getFilePaired2().getFilePath()+ ""String_Node_Str"").append(KEY_FILE_SE + ""String_Node_Str"" + this.getSeFile().getFilePath()+ ""String_Node_Str"");
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + SECTION_PREFIX + this.getIndex().toString()+ ""String_Node_Str"").append(KEY_NAME + ""String_Node_Str"" + this.getName()+ ""String_Node_Str"").append(KEY_AVG_INSERT_SIZE + ""String_Node_Str"" + this.getAverageInsertSize().toString()+ ""String_Node_Str"").append(KEY_INSERT_ERROR_TOLERANCE + ""String_Node_Str"" + this.getInsertErrorTolerance().toString()+ ""String_Node_Str"").append(KEY_READ_LENGTH + ""String_Node_Str"" + this.getReadLength()+ ""String_Node_Str"").append(KEY_SEQ_ORIENTATION + ""String_Node_Str"" + this.getSeqOrientation().toString()+ ""String_Node_Str"").append(KEY_USAGE + ""String_Node_Str"" + this.getUsage().toString()+ ""String_Node_Str"").append(KEY_TYPE + ""String_Node_Str"" + this.getType().toString()+ ""String_Node_Str"");
  if (this.getDataset() != null)   sb.append(KEY_DATASET + ""String_Node_Str"" + this.getDataset().toString()+ ""String_Node_Str"");
  if (this.getFilePaired1() != null && this.getFilePaired2() != null && (this.getType() == Type.PE || this.getType() == Type.MP)) {
    sb.append(KEY_FILE_1 + ""String_Node_Str"" + this.getFilePaired1().getFile().getAbsolutePath()+ ""String_Node_Str"");
    sb.append(KEY_FILE_2 + ""String_Node_Str"" + this.getFilePaired2().getFile().getAbsolutePath()+ ""String_Node_Str"");
  }
  if (this.getSeFile() != null && (this.getType() == Type.SE || this.getDataset() == Dataset.QT))   sb.append(KEY_FILE_SE + ""String_Node_Str"" + this.getSeFile().getFile().getAbsolutePath()+ ""String_Node_Str"");
  return sb.toString();
}",0.8154230631917172
59732,"/** 
 * Saves this object to disk at the specified location
 * @param configFile The location to save this config file.
 * @throws IOException Thrown if there were any problems saving to disk
 */
public void save(File configFile) throws IOException {
  StringBuilder sb=new StringBuilder();
  sb.append(this.job.toString());
  for (  Library ld : this.libs) {
    sb.append(ld.toString());
  }
  FileUtils.writeStringToFile(configFile,sb.toString());
}","/** 
 * Saves this object to disk at the specified location
 * @param configFile The location to save this config file.
 * @throws IOException Thrown if there were any problems saving to disk
 */
public void save(File configFile) throws IOException {
  StringBuilder sb=new StringBuilder();
  sb.append(this.job.toString());
  for (  Library ld : this.libs) {
    sb.append(ld.toString());
  }
  sb.append(this.createToolSection(SECTION_QT,this.qtSettings));
  sb.append(this.createToolSection(SECTION_MASS,this.massSettings));
  sb.append(this.createToolSection(SECTION_AMP,this.ampSettings));
  FileUtils.writeStringToFile(configFile,sb.toString());
}",0.8180995475113122
59733,"@Override public List<ConanProcess> getProcesses(){
  List<ConanProcess> list=new ArrayList<ConanProcess>();
  if (this.stages == null || this.stages.isEmpty() || this.stages.contains(RampartStage.QT)) {
    list.add(this.qtProcess);
  }
  if (this.stages == null || this.stages.isEmpty() || this.stages.contains(RampartStage.MASS)) {
    list.add(this.multiMassProcess);
  }
  if (this.stages == null || this.stages.isEmpty() || this.stages.contains(RampartStage.AMP)) {
    list.addAll(this.ampPipeline.getProcesses());
  }
  return list;
}","@Override public List<ConanProcess> getProcesses(){
  List<ConanProcess> list=new ArrayList<ConanProcess>();
  if (this.stages == null || this.stages.isEmpty() || this.stages.contains(RampartStage.QT)) {
    list.add(this.qtProcess);
  }
  if (this.stages == null || this.stages.isEmpty() || this.stages.contains(RampartStage.MASS)) {
    list.add(this.multiMassProcess);
  }
  return list;
}",0.815845824411135
59734,"private List<SingleMassArgs> createSingleMassArgsList(MultiMassArgs args) throws IOException {
  List<SingleMassArgs> singleMassArgsList=new ArrayList<SingleMassArgs>();
  List<RampartConfiguration> configs=RampartConfiguration.createList(args.getConfigs(),true);
  for (  RampartConfiguration config : configs) {
    SingleMassArgs singleMassArgs=SingleMassArgs.parseConfig(config.getFile());
    if (args.getAssembler() != null) {
      singleMassArgs.setAssembler(args.getAssembler());
    }
    if (args.getKmin() != MassArgs.DEFAULT_KMER_MIN) {
      singleMassArgs.setKmin(args.getKmin());
    }
    if (args.getKmax() != MassArgs.DEFAULT_KMER_MAX) {
      singleMassArgs.setKmax(args.getKmax());
    }
    if (args.getStepSize() != MassArgs.DEFAULT_STEP_SIZE) {
      singleMassArgs.setStepSize(args.getStepSize());
    }
    singleMassArgs.setOutputDir(new File(args.getOutputDir(),config.getJob().getName()));
    singleMassArgs.setJobPrefix(args.getJobPrefix() + ""String_Node_Str"" + config.getJob().getName());
    singleMassArgs.setConfig(config.getFile());
    singleMassArgsList.add(singleMassArgs);
  }
  return singleMassArgsList;
}","private List<SingleMassArgs> createSingleMassArgsList(MultiMassArgs args) throws IOException {
  List<SingleMassArgs> singleMassArgsList=new ArrayList<SingleMassArgs>();
  List<RampartConfiguration> configs=RampartConfiguration.createList(args.getConfigs(),true);
  for (  RampartConfiguration config : configs) {
    SingleMassArgs singleMassArgs=SingleMassArgs.parseConfig(config.getFile());
    if (args.getAssembler() != null) {
      singleMassArgs.setAssembler(args.getAssembler());
    }
    if (args.getKmin() != MassArgs.DEFAULT_KMER_MIN) {
      singleMassArgs.setKmin(args.getKmin());
    }
    if (args.getKmax() != MassArgs.DEFAULT_KMER_MAX) {
      singleMassArgs.setKmax(args.getKmax());
    }
    if (args.getStepSize() != MassArgs.DEFAULT_STEP_SIZE) {
      singleMassArgs.setStepSize(args.getStepSize());
    }
    singleMassArgs.setOutputDir(new File(args.getOutputDir(),config.getJob().getName()));
    singleMassArgs.setJobPrefix(args.getJobPrefix() + ""String_Node_Str"" + config.getJob().getName());
    singleMassArgs.setConfig(config.getFile());
    singleMassArgs.setRunParallel(args.isRunParallel());
    singleMassArgsList.add(singleMassArgs);
  }
  return singleMassArgsList;
}",0.9757549978732454
59735,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    MultiMassArgs args=(MultiMassArgs)this.getProcessArgs();
    List<File> statsFiles=new ArrayList<File>();
    List<SingleMassArgs> singleMassArgsList=this.createSingleMassArgsList(args);
    List<Thread> singleMassThreads=new ArrayList<Thread>();
    for (    SingleMassArgs singleMassArgs : singleMassArgsList) {
      statsFiles.add(singleMassArgs.getStatsFile());
      this.executeSingleMass(singleMassArgs,executionContext);
    }
    if (args.isRunParallel()) {
      this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
    }
    executeMassSelector(args,statsFiles,executionContext);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    log.info(""String_Node_Str"");
    MultiMassArgs args=(MultiMassArgs)this.getProcessArgs();
    List<File> statsFiles=new ArrayList<File>();
    List<SingleMassArgs> singleMassArgsList=this.createSingleMassArgsList(args);
    List<Thread> singleMassThreads=new ArrayList<Thread>();
    for (    SingleMassArgs singleMassArgs : singleMassArgsList) {
      statsFiles.add(singleMassArgs.getStatsFile());
      this.executeSingleMass(singleMassArgs,executionContext);
    }
    if (args.isRunParallel()) {
      log.debug(""String_Node_Str"");
      this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
    }
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    executeMassSelector(args,statsFiles,executionContext);
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}",0.91129883843717
59736,"protected void dispatchStatsJob(WaitCondition waitCondition,ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  ExecutionContext executionContextCopy=executionContext.copy();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schedulerArgs=executionContextCopy.getScheduler().getArgs();
    schedulerArgs.setJobName(args.getJobPrefix() + ""String_Node_Str"");
    schedulerArgs.setThreads(0);
    schedulerArgs.setMemoryMB(0);
    schedulerArgs.setWaitCondition(waitCondition);
  }
  Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler());
  StringJoiner statCommands=new StringJoiner(""String_Node_Str"");
  if (assembler.makesUnitigs()) {
    statCommands.add(buildStatCmdLine(args.getUnitigsDir()));
  }
  if (assembler.makesContigs()) {
    statCommands.add(buildStatCmdLine(args.getContigsDir()));
  }
  if (assembler.makesScaffolds()) {
    statCommands.add(buildStatCmdLine(args.getScaffoldsDir()));
  }
  this.conanProcessService.execute(statCommands.toString(),executionContextCopy);
}","protected void dispatchStatsJob(WaitCondition waitCondition,ExecutionContext executionContext) throws InterruptedException, ProcessExecutionException, IOException, CommandExecutionException {
  SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
  ExecutionContext executionContextCopy=executionContext.copy();
  if (executionContextCopy.usingScheduler()) {
    SchedulerArgs schedulerArgs=executionContextCopy.getScheduler().getArgs();
    String jobName=args.getJobPrefix() + ""String_Node_Str"";
    schedulerArgs.setJobName(jobName);
    schedulerArgs.setMonitorFile(new File(args.getOutputDir(),jobName + ""String_Node_Str""));
    schedulerArgs.setThreads(1);
    schedulerArgs.setMemoryMB(0);
    schedulerArgs.setWaitCondition(waitCondition);
  }
  Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler());
  StringJoiner statCommands=new StringJoiner(""String_Node_Str"");
  if (assembler.makesUnitigs()) {
    statCommands.add(buildStatCmdLine(args.getUnitigsDir()));
  }
  if (assembler.makesContigs()) {
    statCommands.add(buildStatCmdLine(args.getContigsDir()));
  }
  if (assembler.makesScaffolds()) {
    statCommands.add(buildStatCmdLine(args.getScaffoldsDir()));
  }
  this.conanProcessService.execute(statCommands.toString(),executionContextCopy);
}",0.9343660823481452
59737,"/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    args.validateKmers(args.getKmin(),args.getKmax());
    this.createSupportDirectories();
    for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=nextKmer(k)) {
      Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler(),k,args.getLibs(),new File(args.getOutputDir(),Integer.toString(k)));
      this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + k,args.isRunParallel(),executionContext);
    }
    WaitCondition assemblerWait=null;
    if (executionContext.usingScheduler() && args.isRunParallel()) {
      assemblerWait=executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str"");
      this.conanProcessService.waitFor(assemblerWait,executionContext);
    }
    this.dispatchStatsJob(assemblerWait,executionContext);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}","/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    log.info(""String_Node_Str"");
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    log.debug(""String_Node_Str"");
    args.validateKmers(args.getKmin(),args.getKmax());
    log.debug(""String_Node_Str"");
    this.createSupportDirectories();
    for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=nextKmer(k)) {
      File outputDir=new File(args.getOutputDir(),Integer.toString(k));
      log.debug(""String_Node_Str"" + args.getAssembler() + ""String_Node_Str""+ outputDir.getAbsolutePath());
      Assembler assembler=AssemblerFactory.createAssembler(args.getAssembler(),k,args.getLibs(),outputDir);
      this.executeAssembler(assembler,args.getJobPrefix() + ""String_Node_Str"" + k,args.isRunParallel(),executionContext);
    }
    WaitCondition assemblerWait=null;
    if (executionContext.usingScheduler() && args.isRunParallel()) {
      log.debug(""String_Node_Str"");
      this.executeScheduledWait(args.getJobPrefix(),args.getOutputDir(),executionContext);
    }
    log.debug(""String_Node_Str"");
    this.dispatchStatsJob(assemblerWait,executionContext);
    log.info(""String_Node_Str"");
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}",0.7803360298693217
59738,"public List<Library> createQtLibs(){
  List<Library> libList=new ArrayList<Library>();
  for (  Library lib : this.getLibs()) {
    if (lib.testUsage(Library.Usage.QUALITY_TRIMMING)) {
      QualityTrimmer qt=QualityTrimmerFactory.create(this.getQualityTrimmer(),lib,this.getOutputDir());
      Library qtLib=lib.copy();
      qtLib.setFilePaired1(new SeqFile(qt.getArgs().getPairedEndOutputFiles().getFile1()));
      qtLib.setFilePaired2(new SeqFile(qt.getArgs().getPairedEndOutputFiles().getFile2()));
      qtLib.setSeFile(new SeqFile(qt.getArgs().getSingleEndOutputFile()));
      libList.add(qtLib);
    }
  }
  return libList;
}","public List<Library> createQtLibs(){
  List<Library> libList=new ArrayList<Library>();
  for (  Library lib : this.getLibs()) {
    if (lib.testUsage(Library.Usage.QUALITY_TRIMMING)) {
      QualityTrimmer qt=QualityTrimmerFactory.create(this.getQualityTrimmer(),lib,this.getOutputDir());
      Library qtLib=lib.copy();
      qtLib.setFilePaired1(new SeqFile(qt.getArgs().getPairedEndOutputFiles().getFile1()));
      qtLib.setFilePaired2(new SeqFile(qt.getArgs().getPairedEndOutputFiles().getFile2()));
      qtLib.setSeFile(new SeqFile(qt.getArgs().getSingleEndOutputFile()));
      qtLib.setDataset(Library.Dataset.QT);
      libList.add(qtLib);
    }
 else {
      Library rawLib=lib.copy();
      rawLib.setDataset(Library.Dataset.RAW);
      libList.add(rawLib);
    }
  }
  return libList;
}",0.8633193863319386
59739,"/** 
 * Parses a RAMPART configuration file for QT specific information.  Note that only libs, qualityTrimmer, minLength and minQual are set from the configuration file.  It does not make sense to populate: outputDir, jobPrefix and createConfigs from a configuration file.  These settings will be set directly from the command line or by the host process.
 * @param config The RAMPART configuration file to parse
 * @return A QTArgs object populated with information from the configuration file.
 * @throws IOException Thrown if there were any problems reading the file.
 */
public static QTArgs parseConfig(File config) throws IOException {
  RampartConfiguration rampartConfig=new RampartConfiguration();
  QTArgs args=new QTArgs();
  rampartConfig.load(config);
  args.setLibs(rampartConfig.getLibs());
  Profile.Section section=rampartConfig.getQtSettings();
  if (section != null) {
    for (    Map.Entry<String,String> entry : section.entrySet()) {
      if (entry.getKey().equalsIgnoreCase(QT_TOOL)) {
        args.setQualityTrimmer(entry.getValue());
      }
 else       if (entry.getKey().equalsIgnoreCase(QT_MIN_LEN)) {
        args.setMinLen(Integer.parseInt(entry.getValue()));
      }
 else       if (entry.getKey().equalsIgnoreCase(QT_MIN_QUAL)) {
        args.setMinQual(Integer.parseInt(entry.getValue()));
      }
    }
  }
  return args;
}","/** 
 * Parses a RAMPART configuration file for QT specific information.  Note that only libs, qualityTrimmer, minLength and minQual are set from the configuration file.  It does not make sense to populate: outputDir, jobPrefix and createConfigs from a configuration file.  These settings will be set directly from the command line or by the host process.
 * @param config The RAMPART configuration file to parse
 * @return A QTArgs object populated with information from the configuration file.
 * @throws IOException Thrown if there were any problems reading the file.
 */
public static QTArgs parseConfig(File config) throws IOException {
  RampartConfiguration rampartConfig=new RampartConfiguration();
  QTArgs args=new QTArgs();
  rampartConfig.load(config);
  args.setLibs(rampartConfig.getLibs());
  Profile.Section section=rampartConfig.getQtSettings();
  if (section != null) {
    for (    Map.Entry<String,String> entry : section.entrySet()) {
      if (entry.getKey().equalsIgnoreCase(QT_TOOL)) {
        args.setQualityTrimmer(entry.getValue());
      }
 else       if (entry.getKey().equalsIgnoreCase(QT_MIN_LEN)) {
        args.setMinLen(Integer.parseInt(entry.getValue()));
      }
 else       if (entry.getKey().equalsIgnoreCase(QT_MIN_QUAL)) {
        args.setMinQual(Integer.parseInt(entry.getValue()));
      }
    }
  }
  args.config=config;
  return args;
}",0.9839298758217676
59740,"public void parse(File configFile) throws IOException {
  QTArgs qtArgs=parseConfig(configFile);
  this.libs=qtArgs.getLibs();
  this.qualityTrimmer=qtArgs.getQualityTrimmer();
  this.minLen=qtArgs.getMinLen();
  this.minQual=qtArgs.getMinQual();
}","public void parse(File configFile) throws IOException {
  QTArgs qtArgs=parseConfig(configFile);
  this.libs=qtArgs.getLibs();
  this.qualityTrimmer=qtArgs.getQualityTrimmer();
  this.minLen=qtArgs.getMinLen();
  this.minQual=qtArgs.getMinQual();
  this.config=configFile;
}",0.950191570881226
59741,"protected void writeStatistics(File outputFile,Map<String,AssemblyStats> statsMap,RampartStage rampartStage) throws IOException {
  PrintWriter writer=new PrintWriter(new FileWriter(outputFile));
  writer.println(rampartStage.getStatsID() + ""String_Node_Str"" + AssemblyStats.getStatsFileHeader());
  for (  Map.Entry<String,AssemblyStats> entry : statsMap.entrySet()) {
    writer.println(entry.getKey() + ""String_Node_Str"" + (entry.getValue() != null ? entry.getValue().toStatsFileString() : ""String_Node_Str""));
  }
  writer.close();
}","protected void writeStatistics(File outputFile,Map<String,AssemblyStats> statsMap,RampartStage rampartStage) throws IOException {
  PrintWriter writer=new PrintWriter(new FileWriter(outputFile));
  writer.println(rampartStage.getStatsID() + ""String_Node_Str"" + AssemblyStats.getStatsFileHeader());
  Set<String> keys=statsMap.keySet();
  List<Integer> sortedKeys=new ArrayList<Integer>();
  for (  String key : keys) {
    sortedKeys.add(Integer.parseInt(key));
  }
  Collections.sort(sortedKeys);
  for (  Integer keyIndex : sortedKeys) {
    String key=keyIndex.toString();
    AssemblyStats value=statsMap.get(key);
    writer.println(key + ""String_Node_Str"" + (value != null ? value.toStatsFileString() : ""String_Node_Str""));
  }
  writer.close();
}",0.6806201550387597
59742,"public void createLinks(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  StringJoiner linkCmds=new StringJoiner(""String_Node_Str"");
  File scaffoldsDir=new File(args.getOutputDir(),""String_Node_Str"");
  scaffoldsDir.mkdir();
  for (int i=0; i < args.getProcesses().size(); i++) {
    AbstractAmpArgs ampArgs=args.getProcesses().get(i).getAmpArgs();
    linkCmds.add(makeLinkCommand(ampArgs.getOutputFile(),new File(scaffoldsDir,""String_Node_Str"" + i + ""String_Node_Str"")));
  }
  ExecutionContext linkingExecutionContext=new DefaultExecutionContext(executionContext.getLocality(),null,null,true);
  this.conanProcessService.execute(linkCmds.toString(),linkingExecutionContext);
}","public void createLinks(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  StringJoiner linkCmds=new StringJoiner(""String_Node_Str"");
  File scaffoldsDir=new File(args.getOutputDir(),""String_Node_Str"");
  scaffoldsDir.mkdirs();
  for (int i=0; i < args.getProcesses().size(); i++) {
    AbstractAmpArgs ampArgs=args.getProcesses().get(i).getAmpArgs();
    linkCmds.add(makeLinkCommand(ampArgs.getOutputFile(),new File(scaffoldsDir,""String_Node_Str"" + i + ""String_Node_Str"")));
  }
  ExecutionContext linkingExecutionContext=new DefaultExecutionContext(executionContext.getLocality(),null,null,true);
  this.conanProcessService.execute(linkCmds.toString(),linkingExecutionContext);
}",0.9993098688750862
59743,"protected void startJob() throws InterruptedException, TaskExecutionException {
  RampartArgs args=new RampartArgs();
  args.setConfig(this.options.getConfig());
  args.setOutputDir(this.options.getOutput());
  this.rampartPipeline.setStages(this.options.getStages());
  ConanUser rampartUser=new GuestUser(""String_Node_Str"");
  ConanTaskFactory conanTaskFactory=new DefaultTaskFactory();
  ConanTask<RampartPipeline> rampartTask=conanTaskFactory.createTask(this.rampartPipeline,0,args.getArgMap(),ConanTask.Priority.HIGHEST,rampartUser);
  rampartTask.setId(""String_Node_Str"");
  rampartTask.submit();
  rampartTask.execute(this.executionContext);
}","protected void startJob() throws InterruptedException, TaskExecutionException {
  RampartArgs args=new RampartArgs();
  args.setConfig(this.options.getConfig());
  args.setOutputDir(this.options.getOutput());
  RampartJobFileStructure jobFS=new RampartJobFileStructure(this.options.getOutput());
  this.rampartPipeline.setStages(this.options.getStages());
  QTArgs qtArgs=new QTArgs();
  qtArgs.setConfig(this.options.getConfig());
  qtArgs.setOutputDir(jobFS.getReadsDir());
  MultiMassArgs multiMassArgs=new MultiMassArgs();
  multiMassArgs.setConfigs(new ArrayList<File>(Arrays.asList(new File[]{jobFS.getConfigRawFile(),jobFS.getConfigQtFile()})));
  multiMassArgs.setOutputDir(jobFS.getMassDir());
  multiMassArgs.setJobPrefix(""String_Node_Str"");
  this.rampartPipeline.getQtProcess().setProcessArgs(qtArgs);
  this.rampartPipeline.getMultiMassProcess().setProcessArgs(multiMassArgs);
  ConanUser rampartUser=new GuestUser(""String_Node_Str"");
  ConanTaskFactory conanTaskFactory=new DefaultTaskFactory();
  ConanTask<RampartPipeline> rampartTask=conanTaskFactory.createTask(this.rampartPipeline,0,args.getArgMap(),ConanTask.Priority.HIGHEST,rampartUser);
  rampartTask.setId(""String_Node_Str"");
  rampartTask.submit();
  rampartTask.execute(this.executionContext);
}",0.676730869338886
59744,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    QTArgs args=(QTArgs)this.getProcessArgs();
    if ((args.getTool() == null || args.getTool().isEmpty()) && (args.getConfig() != null && args.getConfig().exists())) {
      args=QTArgs.parseConfig(args.getConfig());
    }
    String qtType=args.getTool();
    List<Library> libs=args.getLibs();
    SchedulerArgs backupArgs=null;
    SchedulerArgs copyArgs=null;
    if (executionContext.usingScheduler()) {
      backupArgs=executionContext.getScheduler().getArgs();
      copyArgs=executionContext.getScheduler().getArgs().copy();
      copyArgs.setBackgroundTask(true);
      executionContext.getScheduler().setArgs(copyArgs);
    }
    List<QualityTrimmer> qtList=args.createQualityTrimmers(this);
    String jobPrefix=(copyArgs.getJobName() != null && !copyArgs.getJobName().trim().isEmpty()) ? backupArgs.getJobName().trim() : ""String_Node_Str"";
    int i=1;
    for (    QualityTrimmer qt : qtList) {
      if (executionContext.usingScheduler()) {
        String jobName=jobPrefix + ""String_Node_Str"" + qt.getName()+ ""String_Node_Str""+ i++;
        log.debug(""String_Node_Str"" + jobName);
        executionContext.getScheduler().getArgs().setJobName(jobName);
        executionContext.getScheduler().getArgs().setMonitorFile(new File(((QTArgs)this.getProcessArgs()).getOutputDir(),jobName + ""String_Node_Str""));
      }
      this.conanProcessService.execute(qt,executionContext);
    }
    if (executionContext.usingScheduler()) {
      this.conanProcessService.waitFor(executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,jobPrefix + ""String_Node_Str""),executionContext);
    }
    createConfigs(qtList,args);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    QTArgs args=(QTArgs)this.getProcessArgs();
    if ((args.getTool() == null || args.getTool().isEmpty()) && (args.getConfig() != null && args.getConfig().exists())) {
      QTArgs configArgs=QTArgs.parseConfig(args.getConfig());
      args.setMinLen(configArgs.getMinLen());
      args.setMinQual(configArgs.getMinQual());
      args.setTool(configArgs.getTool());
      args.setLibs(configArgs.getLibs());
    }
    String qtType=args.getTool();
    List<Library> libs=args.getLibs();
    SchedulerArgs backupArgs=null;
    SchedulerArgs copyArgs=null;
    String jobPrefix=""String_Node_Str"";
    if (executionContext.usingScheduler()) {
      backupArgs=executionContext.getScheduler().getArgs();
      copyArgs=executionContext.getScheduler().getArgs().copy();
      copyArgs.setBackgroundTask(true);
      executionContext.getScheduler().setArgs(copyArgs);
      jobPrefix=(copyArgs.getJobName() != null && !copyArgs.getJobName().trim().isEmpty()) ? backupArgs.getJobName().trim() : ""String_Node_Str"";
    }
    List<QualityTrimmer> qtList=args.createQualityTrimmers(this);
    int i=1;
    for (    QualityTrimmer qt : qtList) {
      if (executionContext.usingScheduler()) {
        String jobName=jobPrefix + ""String_Node_Str"" + qt.getName()+ ""String_Node_Str""+ i++;
        log.debug(""String_Node_Str"" + jobName);
        executionContext.getScheduler().getArgs().setJobName(jobName);
        executionContext.getScheduler().getArgs().setMonitorFile(new File(((QTArgs)this.getProcessArgs()).getOutputDir(),jobName + ""String_Node_Str""));
      }
      this.conanProcessService.execute(qt,executionContext);
    }
    if (executionContext.usingScheduler()) {
      this.conanProcessService.waitFor(executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,jobPrefix + ""String_Node_Str""),executionContext);
    }
    createConfigs(qtList,args);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}",0.9041437843235148
59745,"@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    MultiMassArgs args=(MultiMassArgs)this.getProcessArgs();
    List<File> statsFiles=new ArrayList<File>();
    List<SingleMassArgs> singleMassArgsList=createSingleMassArgsList(args);
    for (    SingleMassArgs singleMassArgs : singleMassArgsList) {
      if (!singleMassArgs.getOutputDir().mkdirs()) {
        throw new IOException(""String_Node_Str"");
      }
      statsFiles.add(singleMassArgs.getStatsFile());
      this.conanProcessService.execute(new SingleMassProcess(singleMassArgs),executionContext);
    }
    if (executionContext.usingScheduler() && !executionContext.isForegroundJob()) {
      this.conanProcessService.waitFor(executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str""),executionContext);
    }
    executeMassSelector(args,statsFiles,executionContext);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    MultiMassArgs args=(MultiMassArgs)this.getProcessArgs();
    List<File> statsFiles=new ArrayList<File>();
    List<SingleMassArgs> singleMassArgsList=createSingleMassArgsList(args);
    for (    SingleMassArgs singleMassArgs : singleMassArgsList) {
      if (!singleMassArgs.getOutputDir().mkdirs()) {
        throw new IOException(""String_Node_Str"");
      }
      statsFiles.add(singleMassArgs.getStatsFile());
      SingleMassProcess singleMassProcess=new SingleMassProcess(singleMassArgs);
      singleMassProcess.setConanProcessService(this.getConanProcessService());
      singleMassProcess.execute(executionContext);
    }
    if (executionContext.usingScheduler() && !executionContext.isForegroundJob()) {
      this.conanProcessService.waitFor(executionContext.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str""),executionContext);
    }
    executeMassSelector(args,statsFiles,executionContext);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}",0.9218681798341336
59746,"@Override public String getCommand(){
  return this.getFullCommand();
}","@Override public String getCommand(){
  return null;
}",0.848
59747,"/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    RampartConfiguration config=new RampartConfiguration();
    config.load(args.getConfig());
    args.validateKmers(args.getKmin(),args.getKmax());
    args.getAssembler().getArgs().setLibraries(args.getLibs());
    ExecutionContext asmExeCtx=createAssemblerExecutionContext(executionContext);
    createSupportDirectories();
    for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=nextKmer(k)) {
      File kDir=new File(args.getOutputDir(),String.valueOf(k));
      if (kDir.exists()) {
        FileUtils.deleteDirectory(kDir);
      }
      kDir.mkdir();
      args.getAssembler().getArgs().setKmer(k);
      if (asmExeCtx.usingScheduler()) {
        asmExeCtx.getScheduler().getArgs().setJobName(args.getJobPrefix() + ""String_Node_Str"" + k);
      }
      this.conanProcessService.execute(args.getAssembler(),asmExeCtx);
    }
    if (asmExeCtx.usingScheduler() && !asmExeCtx.isForegroundJob()) {
      this.conanProcessService.waitFor(asmExeCtx.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str""),asmExeCtx);
    }
    this.dispatchStatsJob(executionContext);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}","/** 
 * Dispatches assembly jobs to the specified environments
 * @param executionContext The environment to dispatch jobs too
 * @throws IOException
 * @throws IllegalArgumentException
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
@Override public boolean execute(ExecutionContext executionContext) throws ProcessExecutionException, InterruptedException {
  try {
    SingleMassArgs args=(SingleMassArgs)this.getProcessArgs();
    RampartConfiguration config=new RampartConfiguration();
    config.load(args.getConfig());
    args.validateKmers(args.getKmin(),args.getKmax());
    args.getAssembler().getArgs().setLibraries(args.getLibs());
    ExecutionContext asmExeCtx=createAssemblerExecutionContext(executionContext);
    createSupportDirectories();
    for (int k=getFirstValidKmer(args.getKmin()); k <= args.getKmax(); k=nextKmer(k)) {
      File kDir=new File(args.getOutputDir(),String.valueOf(k));
      if (kDir.exists()) {
        FileUtils.deleteDirectory(kDir);
      }
      kDir.mkdir();
      args.getAssembler().getArgs().setKmer(k);
      if (asmExeCtx.usingScheduler()) {
        String jobName=args.getJobPrefix() + ""String_Node_Str"" + k;
        asmExeCtx.getScheduler().getArgs().setJobName(jobName);
        asmExeCtx.getScheduler().getArgs().setMonitorFile(new File(((SingleMassArgs)this.getProcessArgs()).getOutputDir(),jobName + ""String_Node_Str""));
      }
      this.conanProcessService.execute(args.getAssembler(),asmExeCtx);
    }
    if (asmExeCtx.usingScheduler() && !asmExeCtx.isForegroundJob()) {
      this.conanProcessService.waitFor(asmExeCtx.getScheduler().createWaitCondition(ExitStatus.Type.COMPLETED_SUCCESS,args.getJobPrefix() + ""String_Node_Str""),asmExeCtx);
    }
    this.dispatchStatsJob(executionContext);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
catch (  CommandExecutionException cee) {
    throw new ProcessExecutionException(-2,cee);
  }
  return true;
}",0.9297641134375828
59748,"@Override public String getCommand(){
  return this.getFullCommand();
}","@Override public String getCommand(){
  return null;
}",0.848
59749,"@Test public void testMassViaCLI() throws InterruptedException, ProcessExecutionException, URISyntaxException {
  File outputDir=temp.newFolder(""String_Node_Str"");
  File cfgFile=FileUtils.toFile(this.getClass().getResource(""String_Node_Str""));
  RampartCLI.main(new String[]{""String_Node_Str"",cfgFile.getAbsolutePath(),""String_Node_Str"",outputDir.getAbsolutePath(),""String_Node_Str"",""String_Node_Str""});
}","@Test public void testMassViaCLI() throws InterruptedException, ProcessExecutionException, URISyntaxException, IOException {
  File outputDir=temp.newFolder(""String_Node_Str"");
  RampartJobFileStructure jobFS=new RampartJobFileStructure(outputDir);
  jobFS.getReadsDir().mkdir();
  File cfgFile1=FileUtils.toFile(this.getClass().getResource(""String_Node_Str""));
  File cfgFile2=FileUtils.toFile(this.getClass().getResource(""String_Node_Str""));
  FileUtils.copyFile(cfgFile1,jobFS.getConfigRawFile());
  FileUtils.copyFile(cfgFile2,jobFS.getConfigQtFile());
  RampartCLI.main(new String[]{""String_Node_Str"",cfgFile1.getAbsolutePath(),""String_Node_Str"",outputDir.getAbsolutePath(),""String_Node_Str"",""String_Node_Str""});
}",0.7217777777777777
59750,"public AssemblyStatsMatrixRow(AssemblyStats assemblyStats){
  this.stats[IDX_NB_CONTIGS]=assemblyStats.getNbContigs();
  this.stats[IDX_NB_BASES]=assemblyStats.getNbBases();
  this.stats[IDX_A_PERC]=assemblyStats.getaPerc();
  this.stats[IDX_C_PERC]=assemblyStats.getcPerc();
  this.stats[IDX_G_PERC]=assemblyStats.getgPerc();
  this.stats[IDX_T_PERC]=assemblyStats.gettPerc();
  this.stats[IDX_N_PERC]=assemblyStats.getnPerc();
  this.stats[IDX_MIN_LEN]=assemblyStats.getMinLen();
  this.stats[IDX_AVG_LEN]=assemblyStats.getAvgLen();
  this.stats[IDX_MAX_LEN]=assemblyStats.getMaxLen();
  this.stats[IDX_N_80]=assemblyStats.getN80();
  this.stats[IDX_N_50]=assemblyStats.getN50();
  this.stats[IDX_N_20]=assemblyStats.getN20();
  this.stats[IDX_L_50]=assemblyStats.getL50();
}","public AssemblyStatsMatrixRow(AssemblyStats assemblyStats){
  this.stats=new double[14];
  this.stats[IDX_NB_CONTIGS]=assemblyStats.getNbContigs();
  this.stats[IDX_NB_BASES]=assemblyStats.getNbBases();
  this.stats[IDX_A_PERC]=assemblyStats.getaPerc();
  this.stats[IDX_C_PERC]=assemblyStats.getcPerc();
  this.stats[IDX_G_PERC]=assemblyStats.getgPerc();
  this.stats[IDX_T_PERC]=assemblyStats.gettPerc();
  this.stats[IDX_N_PERC]=assemblyStats.getnPerc();
  this.stats[IDX_MIN_LEN]=assemblyStats.getMinLen();
  this.stats[IDX_AVG_LEN]=assemblyStats.getAvgLen();
  this.stats[IDX_MAX_LEN]=assemblyStats.getMaxLen();
  this.stats[IDX_N_80]=assemblyStats.getN80();
  this.stats[IDX_N_50]=assemblyStats.getN50();
  this.stats[IDX_N_20]=assemblyStats.getN20();
  this.stats[IDX_L_50]=assemblyStats.getL50();
}",0.981680353758686
59751,"@Override public List<ConanProcess> getProcesses(){
  List<ConanProcess> cProcs=new ArrayList<ConanProcess>();
  for (  SimpleIOProcess simpleIOProcess : this.args.getProcesses()) {
    cProcs.add(simpleIOProcess);
  }
  return cProcs;
}","@Override public List<ConanProcess> getProcesses(){
  List<ConanProcess> cProcs=new ArrayList<ConanProcess>();
  for (  AbstractIOProcess abstractIOProcess : this.args.getProcesses()) {
    cProcs.add(abstractIOProcess);
  }
  return cProcs;
}",0.9125
59752,"protected AssemblerArgs(){
  this.kmer=65;
  this.threads=0;
  this.outputDir=new File(""String_Node_Str"");
  this.libraries=new ArrayList<Library>();
}","protected AssemblerArgs(){
  this.kmer=65;
  this.coverageCutoff=0;
  this.threads=0;
  this.outputDir=new File(""String_Node_Str"");
  this.libraries=new ArrayList<Library>();
}",0.9235474006116208
59753,"@Override public void setFromArgMap(Map<ConanParameter,String> pvp){
  for (  Map.Entry<ConanParameter,String> entry : pvp.entrySet()) {
    if (!entry.getKey().validateParameterValue(entry.getValue())) {
      throw new IllegalArgumentException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
    String param=entry.getKey().getName();
    String val=entry.getValue();
    if (param.equals(this.params.getName().getName())) {
      this.name=val;
    }
 else     if (param.equals(this.params.getKmer().getName())) {
      this.setKmer(Integer.parseInt(val));
    }
 else     if (param.equals(this.params.getNbContigPairs().getName())) {
      this.nbContigPairs=Integer.parseInt(val);
    }
 else     if (param.equals(this.params.getThreads().getName())) {
      this.setThreads(Integer.parseInt(val));
    }
 else     if (param.equals(this.params.getLibs().getName())) {
      this.setLibraries(null);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + param);
    }
  }
}","@Override public void setFromArgMap(Map<ConanParameter,String> pvp){
  for (  Map.Entry<ConanParameter,String> entry : pvp.entrySet()) {
    if (!entry.getKey().validateParameterValue(entry.getValue())) {
      throw new IllegalArgumentException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
    String param=entry.getKey().getName();
    String val=entry.getValue();
    if (param.equals(this.params.getName().getName())) {
      this.name=val;
    }
 else     if (param.equals(this.params.getKmer().getName())) {
      this.setKmer(Integer.parseInt(val));
    }
 else     if (param.equals(this.params.getCoverageCutoff().getName())) {
      this.setCoverageCutoff(Integer.parseInt(val));
    }
 else     if (param.equals(this.params.getNbContigPairs().getName())) {
      this.nbContigPairs=Integer.parseInt(val);
    }
 else     if (param.equals(this.params.getThreads().getName())) {
      this.setThreads(Integer.parseInt(val));
    }
 else     if (param.equals(this.params.getLibs().getName())) {
      this.setLibraries(AbyssV134InputLibsArg.parse(val).getLibs());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + param);
    }
  }
}",0.9202508960573476
59754,"@Override public Map<ConanParameter,String> getArgMap(){
  Map<ConanParameter,String> pvp=new LinkedHashMap<ConanParameter,String>();
  if (this.name != null)   pvp.put(params.getName(),params.getName().getName() + ""String_Node_Str"" + this.name);
  if (this.nbContigPairs != 10)   pvp.put(params.getNbContigPairs(),params.getNbContigPairs().getName() + ""String_Node_Str"" + Integer.toString(this.nbContigPairs));
  pvp.put(params.getKmer(),params.getKmer().getName() + ""String_Node_Str"" + Integer.toString(this.getKmer()));
  if (this.getThreads() > 1)   pvp.put(params.getThreads(),params.getThreads().getName() + ""String_Node_Str"" + Integer.toString(this.getThreads()));
  if (this.getLibraries() != null && !this.getLibraries().isEmpty())   pvp.put(params.getLibs(),new AbyssV134InputLibsArg(this.getLibraries()).toString());
  return pvp;
}","@Override public Map<ConanParameter,String> getArgMap(){
  Map<ConanParameter,String> pvp=new LinkedHashMap<ConanParameter,String>();
  if (this.name != null) {
    pvp.put(params.getName(),params.getName().getName() + ""String_Node_Str"" + this.name);
  }
  if (this.nbContigPairs != 10) {
    pvp.put(params.getNbContigPairs(),params.getNbContigPairs().getName() + ""String_Node_Str"" + Integer.toString(this.nbContigPairs));
  }
  if (this.getKmer() > 0) {
    pvp.put(params.getKmer(),params.getKmer().getName() + ""String_Node_Str"" + Integer.toString(this.getKmer()));
  }
  if (this.getCoverageCutoff() > 0) {
    pvp.put(params.getCoverageCutoff(),params.getCoverageCutoff().getName() + ""String_Node_Str"" + Integer.toString(this.getCoverageCutoff()));
  }
  if (this.getThreads() > 1) {
    pvp.put(params.getThreads(),params.getThreads().getName() + ""String_Node_Str"" + Integer.toString(this.getThreads()));
  }
  if (this.getLibraries() != null && !this.getLibraries().isEmpty()) {
    pvp.put(params.getLibs(),new AbyssV134InputLibsArg(this.getLibraries()).toString());
  }
  return pvp;
}",0.856995353639649
59755,"public static AbyssV134InputLibsArg parse(String libs){
  return new AbyssV134InputLibsArg();
}","public static AbyssV134InputLibsArg parse(String libs){
  AbyssV134InputLibsArg libsArg=new AbyssV134InputLibsArg();
  List<String> peLibs=getAbyssArgs(libs,""String_Node_Str"");
  List<String> mpLibs=getAbyssArgs(libs,""String_Node_Str"");
  List<String> seLibs=getAbyssArgs(libs,""String_Node_Str"");
  List<Library> allLibs=new ArrayList<Library>();
  for (  String peLib : peLibs) {
    List<String> peLibPaths=getAbyssArgs(libs,peLib);
    if (peLibPaths.size() == 2) {
      allLibs.add(createNewPELibrary(peLibPaths.get(0),peLibPaths.get(1),Library.Type.PE));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  for (  String mpLib : mpLibs) {
    List<String> mpLibPaths=getAbyssArgs(libs,mpLib);
    if (mpLibPaths.size() == 2) {
      allLibs.add(createNewPELibrary(mpLibPaths.get(0),mpLibPaths.get(1),Library.Type.MP));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  for (  String seLib : seLibs) {
    allLibs.add(createNewSELibrary(seLib));
  }
  libsArg.setLibs(allLibs);
  return libsArg;
}",0.136869118905047
59756,"@Override public List<ConanParameter> getConanParameters(){
  return new ArrayList<ConanParameter>(Arrays.asList(new ConanParameter[]{this.libs,this.nbContigPairs,this.kmer,this.threads,this.name}));
}","@Override public List<ConanParameter> getConanParameters(){
  return new ArrayList<ConanParameter>(Arrays.asList(new ConanParameter[]{this.libs,this.nbContigPairs,this.kmer,this.coverageCutoff,this.threads,this.name}));
}",0.95260663507109
59757,"public AbyssV134Params(){
  this.libs=new AbyssV134InputLibsParameter();
  this.nbContigPairs=new NumericParameter(""String_Node_Str"",""String_Node_Str"",true);
  this.kmer=new NumericParameter(""String_Node_Str"",""String_Node_Str"",false);
  this.threads=new NumericParameter(""String_Node_Str"",""String_Node_Str"",false);
  this.name=new DefaultConanParameter(""String_Node_Str"",""String_Node_Str"",false,false,false);
}","public AbyssV134Params(){
  this.libs=new AbyssV134InputLibsParameter();
  this.nbContigPairs=new NumericParameter(""String_Node_Str"",""String_Node_Str"",true);
  this.kmer=new NumericParameter(""String_Node_Str"",""String_Node_Str"",false);
  this.coverageCutoff=new NumericParameter(""String_Node_Str"",""String_Node_Str"",false);
  this.threads=new NumericParameter(""String_Node_Str"",""String_Node_Str"",false);
  this.name=new DefaultConanParameter(""String_Node_Str"",""String_Node_Str"",false,false,false);
}",0.9040793825799338
59758,"public AssemblyStats analyse(File in) throws IOException {
  if (in == null || !in.exists()) {
    throw new IOException(""String_Node_Str"" + in.getAbsolutePath());
  }
  BufferedReader reader=new BufferedReader(new FileReader(in));
  long totalNbBases=0;
  NucleotideComposition nc=new NucleotideComposition();
  List<Long> lengths=new ArrayList<Long>();
  String line=null;
  boolean firstLine=true;
  long nbSeqBases=0;
  while ((line=reader.readLine()) != null) {
    if (!line.isEmpty()) {
      char firstChar=line.charAt(0);
      if (firstChar == '>') {
        if (firstLine) {
          firstLine=false;
          continue;
        }
        totalNbBases+=nbSeqBases;
        lengths.add(nbSeqBases);
        nbSeqBases=0;
      }
 else {
        nc.add(line);
        nbSeqBases+=line.length();
      }
    }
  }
  reader.close();
  Collections.sort(lengths,new Comparator<Long>(){
    @Override public int compare(    Long o1,    Long o2){
      return o2.compareTo(o1);
    }
  }
);
  long n20=0;
  long n50=0;
  long n80=0;
  long l20=0;
  long l50=0;
  long l80=0;
  boolean foundN20=false;
  boolean foundN50=false;
  boolean foundN80=false;
  long cumlativeLength=0;
  long seqNb=0;
  for (  Long seqLength : lengths) {
    cumlativeLength+=seqLength;
    seqNb++;
    if (!foundN20 && cumlativeLength >= totalNbBases * 0.2) {
      n20=seqLength;
      l20=seqNb;
      foundN20=true;
    }
    if (!foundN50 && cumlativeLength >= totalNbBases * 0.5) {
      n50=seqLength;
      l50=seqNb;
      foundN50=true;
    }
    if (!foundN80 && cumlativeLength >= totalNbBases * 0.8) {
      n80=seqLength;
      l80=seqNb;
      foundN80=true;
    }
  }
  AssemblyStats stats=new AssemblyStats();
  stats.setNbContigs((long)lengths.size());
  stats.setNbBases(totalNbBases);
  stats.setMinLen(lengths.get(lengths.size() - 1));
  stats.setAvgLen((double)totalNbBases / (double)lengths.size());
  stats.setMaxLen(lengths.get(0));
  stats.setN20(n20);
  stats.setN50(n50);
  stats.setN80(n80);
  stats.setL50(l50);
  stats.setaPerc((double)nc.getNbA() / (double)totalNbBases);
  stats.setcPerc((double)nc.getNbC() / (double)totalNbBases);
  stats.setgPerc((double)nc.getNbG() / (double)totalNbBases);
  stats.settPerc((double)nc.getNbT() / (double)totalNbBases);
  stats.setnPerc((double)nc.getNbN() / (double)totalNbBases);
  return stats;
}","public AssemblyStats analyse(File in) throws IOException {
  if (in == null || !in.exists()) {
    throw new IOException(""String_Node_Str"" + in.getAbsolutePath());
  }
  BufferedReader reader=new BufferedReader(new FileReader(in));
  long totalNbBases=0;
  NucleotideComposition nc=new NucleotideComposition();
  List<Long> lengths=new ArrayList<Long>();
  String line=null;
  boolean firstLine=true;
  long nbSeqBases=0;
  while ((line=reader.readLine()) != null) {
    if (!line.isEmpty()) {
      char firstChar=line.charAt(0);
      if (firstChar == '>') {
        if (firstLine) {
          firstLine=false;
          continue;
        }
        totalNbBases+=nbSeqBases;
        lengths.add(nbSeqBases);
        nbSeqBases=0;
      }
 else {
        nc.add(line);
        nbSeqBases+=line.length();
      }
    }
  }
  reader.close();
  Collections.sort(lengths,new Comparator<Long>(){
    @Override public int compare(    Long o1,    Long o2){
      return o2.compareTo(o1);
    }
  }
);
  long n20=0;
  long n50=0;
  long n80=0;
  long l20=0;
  long l50=0;
  long l80=0;
  boolean foundN20=false;
  boolean foundN50=false;
  boolean foundN80=false;
  long cumlativeLength=0;
  long seqNb=0;
  for (  Long seqLength : lengths) {
    cumlativeLength+=seqLength;
    seqNb++;
    if (!foundN20 && cumlativeLength >= totalNbBases * 0.2) {
      n20=seqLength;
      l20=seqNb;
      foundN20=true;
    }
    if (!foundN50 && cumlativeLength >= totalNbBases * 0.5) {
      n50=seqLength;
      l50=seqNb;
      foundN50=true;
    }
    if (!foundN80 && cumlativeLength >= totalNbBases * 0.8) {
      n80=seqLength;
      l80=seqNb;
      foundN80=true;
    }
  }
  AssemblyStats stats=new AssemblyStats();
  stats.setFilePath(in.getAbsolutePath());
  stats.setNbContigs((long)lengths.size());
  stats.setNbBases(totalNbBases);
  stats.setMinLen(lengths.get(lengths.size() - 1));
  stats.setAvgLen((double)totalNbBases / (double)lengths.size());
  stats.setMaxLen(lengths.get(0));
  stats.setN20(n20);
  stats.setN50(n50);
  stats.setN80(n80);
  stats.setL50(l50);
  stats.setaPerc((double)nc.getNbA() / (double)totalNbBases);
  stats.setcPerc((double)nc.getNbC() / (double)totalNbBases);
  stats.setgPerc((double)nc.getNbG() / (double)totalNbBases);
  stats.settPerc((double)nc.getNbT() / (double)totalNbBases);
  stats.setnPerc((double)nc.getNbN() / (double)totalNbBases);
  return stats;
}",0.9909378292939937
59759,"public void configureProcesses(RampartArgs args) throws IOException {
  this.args=args;
  RampartJobFileStructure jobFS=new RampartJobFileStructure(this.args.getOutputDir());
  String jobPrefix=createJobPrefix();
  QTArgs qtArgs=QTArgs.parseConfig(this.args.getConfig());
  qtArgs.setOutputDir(jobFS.getReadsDir());
  qtArgs.setJobPrefix(jobPrefix + ""String_Node_Str"");
  qtArgs.setCreateConfigs(true);
  qtArgs.setRunParallel(true);
  List<File> massConfigFiles=new ArrayList<File>();
  massConfigFiles.add(jobFS.getConfigRawFile());
  if (!qtArgs.isNoQT()) {
    massConfigFiles.add(jobFS.getConfigQtFile());
  }
  MultiMassArgs multiMassArgs=new MultiMassArgs();
  multiMassArgs.setConfigs(massConfigFiles);
  multiMassArgs.setOutputDir(jobFS.getMassDir());
  multiMassArgs.setJobPrefix(jobPrefix + ""String_Node_Str"");
  multiMassArgs.setRunParallel(true);
  AmpArgs ampArgs=AmpArgs.parseConfig(args.getConfig());
  ampArgs.setInputAssembly(jobFS.getMassOutFile());
  ampArgs.setJobPrefix(jobPrefix + ""String_Node_Str"");
  ampArgs.setOutputDir(jobFS.getImproverDir());
  List<RampartStage> stages=this.args.getStages();
  if (stages.contains(RampartStage.QT)) {
    this.processList.add(new QTProcess(qtArgs));
  }
  if (stages.contains(RampartStage.MASS)) {
    this.processList.add(new MultiMassProcess(multiMassArgs));
  }
  if (stages.contains(RampartStage.AMP)) {
    this.processList.add(new AmpProcess(ampArgs));
  }
  for (  AbstractConanProcess process : this.processList) {
    process.setConanProcessService(this.conanProcessService);
  }
}","public void configureProcesses(RampartArgs args) throws IOException {
  this.args=args;
  RampartJobFileStructure jobFS=new RampartJobFileStructure(this.args.getOutputDir());
  String jobPrefix=createJobPrefix();
  QTArgs qtArgs=QTArgs.parseConfig(this.args.getConfig());
  qtArgs.setOutputDir(jobFS.getReadsDir());
  qtArgs.setJobPrefix(jobPrefix + ""String_Node_Str"");
  qtArgs.setCreateConfigs(true);
  qtArgs.setRunParallel(true);
  List<File> massConfigFiles=new ArrayList<File>();
  massConfigFiles.add(jobFS.getConfigRawFile());
  if (!qtArgs.isNoQT()) {
    massConfigFiles.add(jobFS.getConfigQtFile());
  }
  MultiMassArgs multiMassArgs=new MultiMassArgs();
  multiMassArgs.parseConfig(this.args.getConfig());
  multiMassArgs.setConfigs(massConfigFiles);
  multiMassArgs.setOutputDir(jobFS.getMassDir());
  multiMassArgs.setJobPrefix(jobPrefix + ""String_Node_Str"");
  AmpArgs ampArgs=AmpArgs.parseConfig(args.getConfig());
  ampArgs.setInputAssembly(jobFS.getMassOutFile());
  ampArgs.setJobPrefix(jobPrefix + ""String_Node_Str"");
  ampArgs.setOutputDir(jobFS.getImproverDir());
  List<RampartStage> stages=this.args.getStages();
  if (stages.contains(RampartStage.QT)) {
    this.processList.add(new QTProcess(qtArgs));
  }
  if (stages.contains(RampartStage.MASS)) {
    this.processList.add(new MultiMassProcess(multiMassArgs));
  }
  if (stages.contains(RampartStage.AMP)) {
    this.processList.add(new AmpProcess(ampArgs));
  }
  for (  AbstractConanProcess process : this.processList) {
    process.setConanProcessService(this.conanProcessService);
  }
}",0.9711723254324152
59760,"@Override public void setFromArgMap(Map<ConanParameter,String> pvp){
  for (  Map.Entry<ConanParameter,String> entry : pvp.entrySet()) {
    if (!entry.getKey().validateParameterValue(entry.getValue())) {
      throw new IllegalArgumentException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
    String param=entry.getKey().getName();
    if (param.equals(this.params.getInputDir().getName())) {
      this.inputDir=new File(entry.getValue());
    }
 else     if (param.equals(this.params.getOutputDir().getName())) {
      this.outputDir=new File(entry.getValue());
    }
 else     if (param.equals(this.params.getStage().getName())) {
      this.rampartStage=RampartStage.valueOf(entry.getValue());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + param);
    }
  }
}","@Override public void setFromArgMap(Map<ConanParameter,String> pvp){
  for (  Map.Entry<ConanParameter,String> entry : pvp.entrySet()) {
    if (!entry.getKey().validateParameterValue(entry.getValue())) {
      throw new IllegalArgumentException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
    String param=entry.getKey().getName();
    if (param.equals(this.params.getInputDir().getName())) {
      this.inputDir=new File(entry.getValue());
    }
 else     if (param.equals(this.params.getOutputDir().getName())) {
      this.outputDir=new File(entry.getValue());
    }
 else     if (param.equals(this.params.getStage().getName())) {
      this.rampartStage=RampartStage.valueOf(entry.getValue());
    }
 else     if (param.equals(this.params.getDataset().getName())) {
      this.dataset=entry.getValue();
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + param);
    }
  }
}",0.938383267382702
59761,"public LengthAnalysisArgs(){
  this.inputDir=null;
  this.outputDir=null;
  this.rampartStage=RampartStage.MASS;
}","public LengthAnalysisArgs(){
  this.inputDir=null;
  this.outputDir=null;
  this.rampartStage=RampartStage.MASS;
  this.dataset=null;
}",0.9156626506024096
59762,"@Override public Map<ConanParameter,String> getArgMap(){
  Map<ConanParameter,String> pvp=new HashMap<ConanParameter,String>();
  if (this.inputDir != null)   pvp.put(params.getInputDir(),this.inputDir.getAbsolutePath());
  if (this.outputDir != null)   pvp.put(params.getOutputDir(),this.outputDir.getAbsolutePath());
  pvp.put(params.getStage(),this.rampartStage.toString());
  return pvp;
}","@Override public Map<ConanParameter,String> getArgMap(){
  Map<ConanParameter,String> pvp=new HashMap<ConanParameter,String>();
  if (this.inputDir != null) {
    pvp.put(params.getInputDir(),this.inputDir.getAbsolutePath());
  }
  if (this.outputDir != null) {
    pvp.put(params.getOutputDir(),this.outputDir.getAbsolutePath());
  }
  if (this.rampartStage != null) {
    pvp.put(params.getStage(),this.rampartStage.toString());
  }
  if (this.dataset != null && !this.dataset.isEmpty()) {
    pvp.put(params.getDataset(),this.rampartStage.toString());
  }
  return pvp;
}",0.7921406411582212
59763,"@Override public List<ConanParameter> getConanParameters(){
  return new ArrayList<ConanParameter>(Arrays.asList(new ConanParameter[]{this.inputDir,this.outputDir,this.stage}));
}","@Override public List<ConanParameter> getConanParameters(){
  return new ArrayList<ConanParameter>(Arrays.asList(new ConanParameter[]{this.inputDir,this.outputDir,this.stage,this.dataset}));
}",0.9649595687331536
59764,"public LengthAnalysisParams(){
  this.inputDir=new PathParameter(""String_Node_Str"",""String_Node_Str"",true);
  this.outputDir=new PathParameter(""String_Node_Str"",""String_Node_Str"",true);
  this.stage=new DefaultConanParameter(""String_Node_Str"",""String_Node_Str"",false,true,false);
}","public LengthAnalysisParams(){
  this.inputDir=new PathParameter(""String_Node_Str"",""String_Node_Str"",true);
  this.outputDir=new PathParameter(""String_Node_Str"",""String_Node_Str"",true);
  this.stage=new DefaultConanParameter(""String_Node_Str"",""String_Node_Str"",false,true,false);
  this.dataset=new DefaultConanParameter(""String_Node_Str"",""String_Node_Str"",false,true,false);
}",0.8541033434650456
59765,"@Override public boolean execute(ExecutionContext env) throws ProcessExecutionException, InterruptedException {
  LengthAnalysisArgs args=(LengthAnalysisArgs)this.getProcessArgs();
  File[] assemblyFiles=args.getInputDir().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"");
    }
  }
);
  Arrays.sort(assemblyFiles);
  log.debug(""String_Node_Str"" + StringUtils.join(assemblyFiles,""String_Node_Str""));
  try {
    Map<String,AssemblyStats> statsMap=new LinkedHashMap<String,AssemblyStats>();
    for (    File assemblyFile : assemblyFiles) {
      String key=args.getRampartStage().translateFilenameToKey(assemblyFile.getName());
      AssemblyStats stats=this.sequenceStatisticsService.analyseAssembly(assemblyFile);
      statsMap.put(key,stats);
    }
    File statsFile=new File(args.getOutputDir(),""String_Node_Str"");
    writeStatistics(statsFile,statsMap,args.getRampartStage());
    plot(args.getOutputDir(),statsFile,env);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}","@Override public boolean execute(ExecutionContext env) throws ProcessExecutionException, InterruptedException {
  LengthAnalysisArgs args=(LengthAnalysisArgs)this.getProcessArgs();
  File[] assemblyFiles=args.getInputDir().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"");
    }
  }
);
  Arrays.sort(assemblyFiles);
  log.debug(""String_Node_Str"" + StringUtils.join(assemblyFiles,""String_Node_Str""));
  try {
    Map<String,AssemblyStats> statsMap=new LinkedHashMap<String,AssemblyStats>();
    for (    File assemblyFile : assemblyFiles) {
      String key=args.getRampartStage().translateFilenameToKey(assemblyFile.getName());
      AssemblyStats stats=this.sequenceStatisticsService.analyseAssembly(assemblyFile);
      if (stats != null) {
        if (args.getRampartStage() != null) {
          stats.setDesc(args.getRampartStage().toString());
        }
        stats.setDataset(args.getDataset());
        stats.setFilePath(assemblyFile.getAbsolutePath());
      }
      statsMap.put(key,stats);
    }
    File statsFile=new File(args.getOutputDir(),""String_Node_Str"");
    writeStatistics(statsFile,statsMap,args.getRampartStage());
    plot(args.getOutputDir(),statsFile,env);
  }
 catch (  IOException ioe) {
    throw new ProcessExecutionException(-1,ioe);
  }
  return true;
}",0.9012775842044136
59766,"@Override public Map<ConanParameter,String> getArgMap(){
  Map<ConanParameter,String> pvp=new HashMap<ConanParameter,String>();
  if (this.assembler != null)   pvp.put(params.getAssembler(),this.assembler);
  pvp.put(params.getKmin(),String.valueOf(this.kmin));
  pvp.put(params.getKmax(),String.valueOf(this.kmax));
  pvp.put(params.getThreads(),String.valueOf(this.threads));
  pvp.put(params.getMemory(),String.valueOf(this.memory));
  pvp.put(params.getStepSize(),this.stepSize.toString());
  pvp.put(params.getRunParallel(),Boolean.toString(this.runParallel));
  if (this.libs != null && this.libs.size() > 0)   pvp.put(params.getLibs(),this.libs.toString());
  if (this.outputDir != null)   pvp.put(params.getOutputDir(),this.outputDir.getAbsolutePath());
  if (this.jobPrefix != null)   pvp.put(params.getJobPrefix(),this.jobPrefix);
  return pvp;
}","@Override public Map<ConanParameter,String> getArgMap(){
  Map<ConanParameter,String> pvp=new HashMap<ConanParameter,String>();
  if (this.assembler != null)   pvp.put(params.getAssembler(),this.assembler);
  pvp.put(params.getKmin(),String.valueOf(this.kmin));
  pvp.put(params.getKmax(),String.valueOf(this.kmax));
  pvp.put(params.getThreads(),String.valueOf(this.threads));
  pvp.put(params.getMemory(),String.valueOf(this.memory));
  if (this.stepSize != null)   pvp.put(params.getStepSize(),this.stepSize.toString());
  if (this.parallelismLevel != null)   pvp.put(params.getParallelismLevel(),this.parallelismLevel.toString());
  if (this.libs != null && this.libs.size() > 0)   pvp.put(params.getLibs(),this.libs.toString());
  if (this.outputDir != null)   pvp.put(params.getOutputDir(),this.outputDir.getAbsolutePath());
  if (this.jobPrefix != null)   pvp.put(params.getJobPrefix(),this.jobPrefix);
  return pvp;
}",0.8096574957888827
59767,"public MassArgs(){
  this.assembler=null;
  this.kmin=DEFAULT_KMER_MIN;
  this.kmax=DEFAULT_KMER_MAX;
  this.stepSize=DEFAULT_STEP_SIZE;
  this.libs=new ArrayList<Library>();
  this.jobPrefix=""String_Node_Str"";
  this.outputDir=null;
  this.threads=DEFAULT_THREADS;
  this.memory=DEFAULT_MEM;
}","public MassArgs(){
  this.assembler=null;
  this.kmin=DEFAULT_KMER_MIN;
  this.kmax=DEFAULT_KMER_MAX;
  this.stepSize=DEFAULT_STEP_SIZE;
  this.libs=new ArrayList<Library>();
  this.jobPrefix=""String_Node_Str"";
  this.outputDir=null;
  this.threads=DEFAULT_THREADS;
  this.memory=DEFAULT_MEM;
  this.parallelismLevel=DEFAULT_PARALLELISM_LEVEL;
}",0.92018779342723
59768,"@Override public void setFromArgMap(Map<ConanParameter,String> pvp){
  for (  Map.Entry<ConanParameter,String> entry : pvp.entrySet()) {
    if (!entry.getKey().validateParameterValue(entry.getValue())) {
      throw new IllegalArgumentException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
    String param=entry.getKey().getName();
    if (param.equals(this.params.getAssembler().getName())) {
      this.assembler=entry.getValue();
    }
 else     if (param.equals(this.params.getKmin().getName())) {
      this.kmin=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getKmax().getName())) {
      this.kmax=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getThreads().getName())) {
      this.threads=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getMemory().getName())) {
      this.memory=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getStepSize().getName())) {
      this.stepSize=StepSize.valueOf(entry.getValue());
    }
 else     if (param.equals(this.params.getLibs().getName())) {
      this.libs=new ArrayList<Library>();
    }
 else     if (param.equals(this.params.getJobPrefix().getName())) {
      this.jobPrefix=entry.getValue();
    }
 else     if (param.equals(this.params.getOutputDir().getName())) {
      this.outputDir=new File(entry.getValue());
    }
  }
}","@Override public void setFromArgMap(Map<ConanParameter,String> pvp){
  for (  Map.Entry<ConanParameter,String> entry : pvp.entrySet()) {
    if (!entry.getKey().validateParameterValue(entry.getValue())) {
      throw new IllegalArgumentException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
    String param=entry.getKey().getName();
    if (param.equals(this.params.getAssembler().getName())) {
      this.assembler=entry.getValue();
    }
 else     if (param.equals(this.params.getKmin().getName())) {
      this.kmin=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getKmax().getName())) {
      this.kmax=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getThreads().getName())) {
      this.threads=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getMemory().getName())) {
      this.memory=Integer.parseInt(entry.getValue());
    }
 else     if (param.equals(this.params.getStepSize().getName())) {
      this.stepSize=StepSize.valueOf(entry.getValue());
    }
 else     if (param.equals(this.params.getLibs().getName())) {
      this.libs=new ArrayList<Library>();
    }
 else     if (param.equals(this.params.getJobPrefix().getName())) {
      this.jobPrefix=entry.getValue();
    }
 else     if (param.equals(this.params.getOutputDir().getName())) {
      this.outputDir=new File(entry.getValue());
    }
 else     if (param.equalsIgnoreCase(this.params.getParallelismLevel().getName())) {
      this.parallelismLevel=ParallelismLevel.valueOf(entry.getValue());
    }
  }
}",0.9468536028692534
59769,"@Override public int executeCommand(String command,Scheduler scheduler) throws ProcessExecutionException, InterruptedException {
  if (scheduler == null) {
    return -1;
  }
 else {
    return scheduler.executeCommand(command);
  }
}","@Override public int executeCommand(String command,Scheduler scheduler) throws ProcessExecutionException, InterruptedException {
  String[] output=null;
  if (scheduler == null) {
    try {
      output=this.nativeProcessExecutor.execute(command);
    }
 catch (    IOException ioe) {
      throw new ProcessExecutionException(-1,ioe);
    }
catch (    CommandExecutionException cee) {
      throw new ProcessExecutionException(-1,cee);
    }
  }
 else {
    output=scheduler.executeCommand(command);
  }
  return output == null ? -1 : 0;
}",0.5555555555555556
59770,"@Override public int executeCommand(String command,Scheduler scheduler) throws ProcessExecutionException, InterruptedException {
  String commandToExecute=scheduler.createCommand(command);
  int exitValue=-1;
  try {
    Channel channel=this.session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(commandToExecute);
    channel.connect();
    String output=readProcessOutput(channel);
    channel.disconnect();
    log.info(""String_Node_Str"" + commandToExecute + ""String_Node_Str""+ session.getHost());
    exitValue=0;
  }
 catch (  JSchException je) {
    log.error(""String_Node_Str"");
    throw new ProcessExecutionException(exitValue,je);
  }
catch (  IOException ioe) {
    log.error(""String_Node_Str"");
    throw new ProcessExecutionException(exitValue,ioe);
  }
  return exitValue;
}","@Override public int executeCommand(String command,Scheduler scheduler) throws ProcessExecutionException, InterruptedException {
  String commandToExecute=scheduler != null ? scheduler.createCommand(command) : command;
  int exitValue=-1;
  try {
    Channel channel=this.session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(commandToExecute);
    channel.connect();
    String output=readProcessOutput(channel);
    channel.disconnect();
    log.info(""String_Node_Str"" + commandToExecute + ""String_Node_Str""+ session.getHost());
    exitValue=0;
  }
 catch (  JSchException je) {
    log.error(""String_Node_Str"");
    throw new ProcessExecutionException(exitValue,je);
  }
catch (  IOException ioe) {
    log.error(""String_Node_Str"");
    throw new ProcessExecutionException(exitValue,ioe);
  }
  return exitValue;
}",0.9818621523579202
59771,"/** 
 * Dispatches command and then forgets about it.  No progress tracking is performed.
 * @param command The command to dispatch to the scheduler
 * @throws ProcessExecutionException
 */
@Override public void dispatchCommand(String command) throws IllegalArgumentException, ProcessExecutionException, InterruptedException {
  String schedulerCommand=this.createCommand(command);
  boolean dispatched=false;
  try {
    log.debug(""String_Node_Str"" + schedulerCommand);
    String[] output=this.nativeProcessExecutor.execute(schedulerCommand);
  }
 catch (  CommandExecutionException e) {
    String message=""String_Node_Str"" + e.getExitCode() + ""String_Node_Str"";
    log.error(message,e);
    ProcessExecutionException pex=new ProcessExecutionException(e.getExitCode(),message,e);
    pex.setProcessOutput(e.getErrorOutput());
    try {
      pex.setProcessExecutionHost(InetAddress.getLocalHost().getHostName());
    }
 catch (    UnknownHostException e1) {
      log.debug(""String_Node_Str"",e1);
    }
    throw pex;
  }
catch (  IOException e) {
    String message=""String_Node_Str"";
    log.error(message);
    log.debug(""String_Node_Str"",e);
    throw new ProcessExecutionException(1,message,e);
  }
}","/** 
 * Dispatches command and then forgets about it.  No progress tracking is performed.
 * @param command The command to dispatch to the scheduler
 * @throws ProcessExecutionException
 */
@Override public String[] dispatchCommand(String command) throws IllegalArgumentException, ProcessExecutionException, InterruptedException {
  String schedulerCommand=this.createCommand(command);
  String[] output=null;
  boolean dispatched=false;
  try {
    log.debug(""String_Node_Str"" + schedulerCommand);
    output=this.nativeProcessExecutor.execute(schedulerCommand);
  }
 catch (  CommandExecutionException e) {
    String message=""String_Node_Str"" + e.getExitCode() + ""String_Node_Str"";
    log.error(message,e);
    ProcessExecutionException pex=new ProcessExecutionException(e.getExitCode(),message,e);
    pex.setProcessOutput(e.getErrorOutput());
    try {
      pex.setProcessExecutionHost(InetAddress.getLocalHost().getHostName());
    }
 catch (    UnknownHostException e1) {
      log.debug(""String_Node_Str"",e1);
    }
    throw pex;
  }
catch (  IOException e) {
    String message=""String_Node_Str"";
    log.error(message);
    log.debug(""String_Node_Str"",e);
    throw new ProcessExecutionException(1,message,e);
  }
  return output;
}",0.9747351263243684
59772,"/** 
 * Dispatches this command to the scheduler.  The generated process will run in the background and write its standard output to the specified monitor file.
 * @param command The command to schedule.
 * @param monitorFile The file that will contain the standard output from the scheduled process.  This file will beactively monitored in order to ascertain job state and progress.
 * @throws ProcessExecutionException
 */
public void monitoredDispatch(String command,File monitorFile) throws ProcessExecutionException {
  String schedulerCommand=this.createCommand(command);
  boolean recoveryMode=monitorFile.exists();
  if (!recoveryMode) {
    log.debug(""String_Node_Str"" + monitorFile.getAbsolutePath());
    if (!ProcessUtils.createFiles(monitorFile)) {
      throw new ProcessExecutionException(1,""String_Node_Str"" + monitorFile.getAbsolutePath());
    }
  }
  boolean dispatched=false;
  try {
    log.debug(""String_Node_Str"" + recoveryMode);
    if (!recoveryMode) {
      log.debug(""String_Node_Str"" + schedulerCommand);
      String[] output=this.nativeProcessExecutor.execute(schedulerCommand);
    }
    dispatched=true;
  }
 catch (  CommandExecutionException e) {
    String message=""String_Node_Str"" + e.getExitCode() + ""String_Node_Str"";
    log.error(message,e);
    ProcessExecutionException pex=new ProcessExecutionException(e.getExitCode(),message,e);
    pex.setProcessOutput(e.getErrorOutput());
    try {
      pex.setProcessExecutionHost(InetAddress.getLocalHost().getHostName());
    }
 catch (    UnknownHostException e1) {
      log.debug(""String_Node_Str"",e1);
    }
    throw pex;
  }
catch (  IOException e) {
    String message=""String_Node_Str"";
    log.error(message);
    log.debug(""String_Node_Str"",e);
    throw new ProcessExecutionException(1,message,e);
  }
 finally {
    log.debug(""String_Node_Str"" + monitorFile.getAbsolutePath());
    ProcessUtils.deleteFiles(monitorFile);
  }
}","/** 
 * Dispatches this command to the scheduler.  The generated process will run in the background and write its standard output to the specified monitor file.
 * @param command The command to schedule.
 * @param monitorFile The file that will contain the standard output from the scheduled process.  This file will beactively monitored in order to ascertain job state and progress.
 * @return Console output produced from executing the command.
 * @throws ProcessExecutionException
 */
public String[] monitoredDispatch(String command,File monitorFile) throws ProcessExecutionException {
  String schedulerCommand=this.createCommand(command);
  boolean recoveryMode=monitorFile.exists();
  String[] output=null;
  if (!recoveryMode) {
    log.debug(""String_Node_Str"" + monitorFile.getAbsolutePath());
    if (!ProcessUtils.createFiles(monitorFile)) {
      throw new ProcessExecutionException(1,""String_Node_Str"" + monitorFile.getAbsolutePath());
    }
  }
  boolean dispatched=false;
  try {
    log.debug(""String_Node_Str"" + recoveryMode);
    if (!recoveryMode) {
      log.debug(""String_Node_Str"" + schedulerCommand);
      output=this.nativeProcessExecutor.execute(schedulerCommand);
    }
    dispatched=true;
  }
 catch (  CommandExecutionException e) {
    String message=""String_Node_Str"" + e.getExitCode() + ""String_Node_Str"";
    log.error(message,e);
    ProcessExecutionException pex=new ProcessExecutionException(e.getExitCode(),message,e);
    pex.setProcessOutput(e.getErrorOutput());
    try {
      pex.setProcessExecutionHost(InetAddress.getLocalHost().getHostName());
    }
 catch (    UnknownHostException e1) {
      log.debug(""String_Node_Str"",e1);
    }
    throw pex;
  }
catch (  IOException e) {
    String message=""String_Node_Str"";
    log.error(message);
    log.debug(""String_Node_Str"",e);
    throw new ProcessExecutionException(1,message,e);
  }
 finally {
    log.debug(""String_Node_Str"" + monitorFile.getAbsolutePath());
    ProcessUtils.deleteFiles(monitorFile);
  }
  return output;
}",0.9683303775019002
59773,"@Override public int executeCommand(String command) throws IllegalArgumentException, ProcessExecutionException, InterruptedException {
  int exitValue=-1;
  if (!this.getArgs().isBackgroundTask()) {
    this.monitoredDispatch(command);
    exitValue=this.waitFor(this.createProcessAdapter());
  }
 else {
    this.dispatchCommand(command);
    exitValue=0;
  }
  return exitValue;
}","@Override public String[] executeCommand(String command) throws IllegalArgumentException, ProcessExecutionException, InterruptedException {
  String[] output=null;
  if (!this.getArgs().isBackgroundTask()) {
    output=this.monitoredDispatch(command);
    this.waitFor(this.createProcessAdapter());
  }
 else {
    output=this.dispatchCommand(command);
  }
  return output;
}",0.6261558784676354
59774,"@Override public int executeWaitCommand(WaitCondition waitCondition) throws InterruptedException, ProcessExecutionException {
  String waitCommand=this.createWaitCommand(waitCondition);
  return this.executeCommand(waitCommand);
}","@Override public String[] executeWaitCommand(WaitCondition waitCondition) throws InterruptedException, ProcessExecutionException {
  String waitCommand=this.createWaitCommand(waitCondition);
  return this.executeCommand(waitCommand);
}",0.9763440860215054
59775,"/** 
 * Executes the provided command on this architecture in the background
 * @param command The command to execute
 * @return the exit code returned from the executed process
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
void dispatchCommand(String command) throws ProcessExecutionException, InterruptedException ;","/** 
 * Executes the provided command on this architecture in the background
 * @param command The command to execute
 * @return the output returned from the executed process
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
String[] dispatchCommand(String command) throws ProcessExecutionException, InterruptedException ;",0.9608127721335268
59776,"/** 
 * Executes the provided command on this architecture in the foreground
 * @param command The command to execute
 * @return the exit code returned from the executed process
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
int executeCommand(String command) throws ProcessExecutionException, InterruptedException ;","/** 
 * Executes the provided command on this architecture in the foreground
 * @param command The command to execute
 * @return the output returned from the executed process
 * @throws ProcessExecutionException
 * @throws InterruptedException
 */
String[] executeCommand(String command) throws ProcessExecutionException, InterruptedException ;",0.9620991253644317
59777,"/** 
 * Wait for the specified wait condition to be satisifed
 * @param waitCondition The wait condition
 * @return The exit code return by the process that was waited for.
 * @throws InterruptedException
 * @throws ProcessExecutionException
 */
int executeWaitCommand(WaitCondition waitCondition) throws InterruptedException, ProcessExecutionException ;","/** 
 * Wait for the specified wait condition to be satisifed
 * @param waitCondition The wait condition
 * @return The output returned by the process that was waited for.
 * @throws InterruptedException
 * @throws ProcessExecutionException
 */
String[] executeWaitCommand(WaitCondition waitCondition) throws InterruptedException, ProcessExecutionException ;",0.9410112359550562
59778,"@Override public int executeCommand(String command) throws IllegalArgumentException, ProcessExecutionException, InterruptedException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public String[] executeCommand(String command) throws IllegalArgumentException, ProcessExecutionException, InterruptedException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.972568578553616
59779,"/** 
 * Called whenever an error occurs in monitoring this process (for example, if the output file being monitored is deleted by an external process).
 * @param evt an event reporting the change to the file
 */
void processError(ProcessEvent evt);","/** 
 * Called whenever an error occurs in monitoring this process (for example, if the output file being monitored is deleted by an process process).
 * @param evt an event reporting the change to the file
 */
void processError(ProcessEvent evt);",0.9696969696969696
59780,"/** 
 * Helper that loads config settings and throws exceptions if something is amiss.
 * @throws IllegalArgumentException if a config value is invalid
 * @throws NumberFormatException if a config value is invalid
 */
private void setConfiguration(){
  final String host_config=config.getString(""String_Node_Str"");
  if (host_config == null || host_config.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setHosts(host_config);
  index_threads=config.getInt(""String_Node_Str"");
  tsmeta_type=config.getString(""String_Node_Str"");
  if (tsmeta_type == null || tsmeta_type.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  index=config.getString(""String_Node_Str"");
  if (index == null || index.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  uidmeta_type=config.getString(""String_Node_Str"");
  if (uidmeta_type == null || uidmeta_type.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Helper that loads config settings and throws exceptions if something is amiss.
 * @throws IllegalArgumentException if a config value is invalid
 * @throws NumberFormatException if a config value is invalid
 */
private void setConfiguration(){
  final String host_config=config.getString(""String_Node_Str"");
  if (host_config == null || host_config.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setHosts(host_config);
  index_threads=config.getInt(""String_Node_Str"");
  index=config.getString(""String_Node_Str"");
  if (index == null || index.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  tsmeta_type=config.getString(""String_Node_Str"");
  if (tsmeta_type == null || tsmeta_type.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  uidmeta_type=config.getString(""String_Node_Str"");
  if (uidmeta_type == null || uidmeta_type.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.8335005015045135
59781,"public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String l=fmt.formatTermAs(args.get(0),boolean.class);
  final String inlined;
  if (stmtsOkay) {
    final String r=InlinerUtils.formatBlockStmts(fmt,args.get(1));
    inlined=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
  }
 else {
    final String r=InlinerUtils.formatBlockExpr(fmt,args.get(1));
    final String expr=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
    inlined=fmt.fixup(apply.getLoc(),expr,boolean.class);
  }
  return inlined;
}","public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String l=fmt.formatTermAs(args.get(0),boolean.class);
  final String inlined;
  if (stmtsOkay) {
    final String r=InlinerUtils.formatBlockStmts(fmt,args.get(1),true);
    if (r == null)     return null;
    inlined=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
  }
 else {
    final String r=InlinerUtils.formatBlockExpr(fmt,args.get(1),true);
    if (r == null)     return null;
    final String expr=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
    inlined=fmt.fixup(apply.getLoc(),expr,boolean.class);
  }
  return inlined;
}",0.9388335704125178
59782,"public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  if (!stmtsOkay)   return null;
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final Term iterArg=args.get(0);
  final Term bodyArg=args.get(1);
  final String startIndexExpr;
  final String endIndexExpr;
  final Term indexArg=InlinerUtils.derefToIntrinsicApply(iterArg,_index.INSTANCE,fmt);
  if (indexArg != null) {
    startIndexExpr=""String_Node_Str"";
    endIndexExpr=fmt.formatTermAs(indexArg,ListValue.class) + ""String_Node_Str"";
  }
 else {
    final Term countArg=InlinerUtils.derefToIntrinsicApply(iterArg,_count.INSTANCE,fmt);
    if (countArg != null) {
      startIndexExpr=""String_Node_Str"";
      if (countArg instanceof IntLiteral) {
        endIndexExpr=""String_Node_Str"" + Math.abs(((IntLiteral)countArg).getValue());
      }
 else {
        final String raw=""String_Node_Str"" + fmt.formatTermAs(countArg,int.class) + ""String_Node_Str"";
        endIndexExpr=""String_Node_Str"" + raw + ""String_Node_Str""+ raw+ ""String_Node_Str""+ raw+ ""String_Node_Str"";
      }
    }
 else {
      final Term rangeArg=InlinerUtils.derefToIntrinsicApply(iterArg,_range.INSTANCE,fmt);
      if (rangeArg != null && rangeArg instanceof TupleTerm) {
        final List<Term> rangeArgs=((TupleTerm)rangeArg).getItems();
        final Term startArg=rangeArgs.get(0);
        final Term extentArg=rangeArgs.get(1);
        startIndexExpr=fmt.formatTermAs(startArg,int.class);
        if (extentArg instanceof IntLiteral) {
          if (startArg instanceof IntLiteral) {
            endIndexExpr=""String_Node_Str"" + (((IntLiteral)startArg).getValue() + Math.abs(((IntLiteral)extentArg).getValue()));
          }
 else {
            endIndexExpr=""String_Node_Str"" + startIndexExpr + ""String_Node_Str""+ Math.abs(((IntLiteral)extentArg).getValue())+ ""String_Node_Str"";
          }
        }
 else {
          final String raw=""String_Node_Str"" + fmt.formatTermAs(extentArg,int.class) + ""String_Node_Str"";
          endIndexExpr=""String_Node_Str"" + startIndexExpr + ""String_Node_Str""+ raw+ ""String_Node_Str""+ raw+ ""String_Node_Str""+ raw+ ""String_Node_Str"";
        }
      }
 else {
        startIndexExpr=null;
        endIndexExpr=null;
      }
    }
  }
  if (startIndexExpr == null) {
    final String indexes=fmt.formatTermAs(iterArg,ListValue.class);
    final String body=fmt.formatTermAs(bodyArg,Lambda.class);
    return ""String_Node_Str"" + indexes + ""String_Node_Str""+ body+ ""String_Node_Str"";
  }
  final LambdaTerm bodyLambda=InlinerUtils.derefToLambda(bodyArg);
  if (bodyLambda == null) {
    final String body=fmt.formatTermAs(bodyArg,bodyArg.getType());
    return ""String_Node_Str"" + ""String_Node_Str"" + endIndexExpr + ""String_Node_Str""+ ""String_Node_Str""+ Lambda.class.getName()+ ""String_Node_Str""+ body+ ""String_Node_Str""+ ""String_Node_Str""+ startIndexExpr+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    final String bodyParam=StatementFormatter.formatName(bodyLambda.getParams().keySet().iterator().next());
    final String body=InlinerUtils.formatBlockStmts(fmt,bodyArg,false);
    return ""String_Node_Str"" + endIndexExpr + ""String_Node_Str""+ ""String_Node_Str""+ startIndexExpr+ ""String_Node_Str""+ ""String_Node_Str""+ bodyParam+ ""String_Node_Str""+ body+ ""String_Node_Str"";
  }
}","public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
}",0.0608009353990061
59783,"public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final Type applyType=apply.getType();
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String c=fmt.formatTermAs(args.get(0),boolean.class);
  final String def=fmt.formatTermAs(args.get(1),applyType);
  final String inlined;
  if (stmtsOkay) {
    final String block=InlinerUtils.formatBlockStmts(fmt,args.get(2));
    inlined=""String_Node_Str"" + c + ""String_Node_Str""+ def+ ""String_Node_Str""+ block+ ""String_Node_Str"";
  }
 else {
    final String block=InlinerUtils.formatBlockExpr(fmt,args.get(2));
    final String expr=""String_Node_Str"" + c + ""String_Node_Str""+ def+ ""String_Node_Str""+ block+ ""String_Node_Str"";
    inlined=fmt.fixup(apply.getLoc(),expr,applyType);
  }
  return inlined;
}","public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final Type applyType=apply.getType();
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String c=fmt.formatTermAs(args.get(0),boolean.class);
  final String def=fmt.formatTermAs(args.get(1),applyType);
  final String inlined;
  if (stmtsOkay) {
    final String block=InlinerUtils.formatBlockStmts(fmt,args.get(2),true);
    if (block == null)     return null;
    inlined=""String_Node_Str"" + c + ""String_Node_Str""+ def+ ""String_Node_Str""+ block+ ""String_Node_Str"";
  }
 else {
    final String block=InlinerUtils.formatBlockExpr(fmt,args.get(2),true);
    if (block == null)     return null;
    final String expr=""String_Node_Str"" + c + ""String_Node_Str""+ def+ ""String_Node_Str""+ block+ ""String_Node_Str"";
    inlined=fmt.fixup(apply.getLoc(),expr,applyType);
  }
  return inlined;
}",0.9457900807381776
59784,"public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String c=fmt.formatTermAs(args.get(0),boolean.class);
  final String inlined;
  if (stmtsOkay) {
    final String t=InlinerUtils.formatBlockStmts(fmt,args.get(1));
    final String f=InlinerUtils.formatBlockStmts(fmt,args.get(2));
    inlined=""String_Node_Str"" + c + ""String_Node_Str""+ t+ ""String_Node_Str""+ f+ ""String_Node_Str"";
  }
 else {
    final String t=InlinerUtils.formatBlockExpr(fmt,args.get(1));
    final String f=InlinerUtils.formatBlockExpr(fmt,args.get(2));
    final String expr=""String_Node_Str"" + c + ""String_Node_Str""+ t+ ""String_Node_Str""+ f+ ""String_Node_Str"";
    final Type applyType=apply.getType();
    inlined=fmt.fixup(apply.getLoc(),expr,applyType);
  }
  return inlined;
}","public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String c=fmt.formatTermAs(args.get(0),boolean.class);
  final String inlined;
  if (stmtsOkay) {
    final String t=InlinerUtils.formatBlockStmts(fmt,args.get(1),true);
    if (t == null)     return null;
    final String f=InlinerUtils.formatBlockStmts(fmt,args.get(2),true);
    if (f == null)     return null;
    inlined=""String_Node_Str"" + c + ""String_Node_Str""+ t+ ""String_Node_Str""+ f+ ""String_Node_Str"";
  }
 else {
    final String t=InlinerUtils.formatBlockExpr(fmt,args.get(1),true);
    if (t == null)     return null;
    final String f=InlinerUtils.formatBlockExpr(fmt,args.get(2),true);
    if (f == null)     return null;
    final String expr=""String_Node_Str"" + c + ""String_Node_Str""+ t+ ""String_Node_Str""+ f+ ""String_Node_Str"";
    final Type applyType=apply.getType();
    inlined=fmt.fixup(apply.getLoc(),expr,applyType);
  }
  return inlined;
}",0.9103232533889468
59785,"/** 
 * Try to inline the body of a block (a ()->T lambda), for use as a block body in target code. If successful, a string containing the generated code is returned, otherwise null. Inlining succeeds if the term   {@link #derefToLambda dereferences to a lambda}, or failing that if the fallbackToCall param is true, in which case a single statement containing a call to the lambda is returned. So given a block <pre><code> f = { a(1); b(2); c(3) } </code></pre> then in the former case the returned string will amount to <pre><code> ""a(1); b(2); c(3)"" </code></pre> and in the latter case <pre><code> ""f()"" </code></pre> The fallback allows us to inline control flow even when arguments can't be dereferenced to lambda literals, eg <pre><code> if(c, t, f) => if (c) { t(); } else { f(); } </code></pre> ...which empirically seems worth it. Note that as implied by the ""Stmts"" in the name, we are implicitly generating code to be used in a non-expression context. This means that we don't need to return the block's result value, only execute the expression that produces it.
 */
static String formatBlockStmts(final StatementFormatter fmt,final Term block,final boolean fallbackToCall){
  final Loc loc=block.getLoc();
  final Type type=block.getType();
  final Type resultType=Types.funResult(type);
  final String call;
{
    if (fallbackToCall) {
      final Term body=new ApplyTerm(loc,block,TupleTerm.UNIT);
      body.setType(resultType);
      call=fmt.formatTermAs(body,resultType);
    }
 else {
      fmt.formatTermAs(block,block.getType());
      call=null;
    }
  }
  final LambdaTerm blockDeref=derefToLambda(block);
  if (blockDeref == null)   return call;
  final ArrayList<String> bodyStmts=new ArrayList<String>();
  for (  final Statement statement : blockDeref.getNonResultStatements())   bodyStmts.add(fmt.formatInLambdaStatement(statement));
  final UnboundTerm result=blockDeref.getResultStatement();
  if (!result.getValue().equals(TupleTerm.UNIT))   bodyStmts.add(fmt.formatInLambdaStatement(result));
  return StringUtils.join(bodyStmts,""String_Node_Str"");
}","/** 
 * Try to inline the body of a block-typed term (a ()->T lambda), for use as a block body in target code. If successful, a string containing the generated code is returned, otherwise null. Inlining succeeds if the term   {@link #derefToLambda dereferences toa lambda}, or failing that if the fallbackToCall param is true and the term   {@link #isImmediate is immediate}, meaning that obtaining its value involves no computation*. In this case a single statement containing a call to the lambda is returned. (The term must be immediate because use-cases may place the returned call in conditional code, which would alter the semantics of the original if there were computation involved.) So given a block <pre><code> f = { a(1); b(2); c(3) } </code></pre> then in the former case the returned string will amount to <pre><code> ""a(1); b(2); c(3)"" </code></pre> and in the latter case <pre><code> ""f()"" </code></pre> The fallback allows us to inline control flow even when arguments can't be statically dereferenced to lambda literals, eg <pre><code> if(c, t, f) => if (c) { t(); } else { f(); } </code></pre> ...which empirically seems worth it. Note that as implied by the ""Stmts"" in the name, we are implicitly generating code to be used in a non-expression context. This means that we don't need to return the block's result value, only execute the expression that produces it.
 */
static String formatBlockStmts(final StatementFormatter fmt,final Term block,final boolean fallbackToCall){
  final Loc loc=block.getLoc();
  final Type type=block.getType();
  final Type resultType=Types.funResult(type);
  final String call;
{
    if (fallbackToCall && isImmediate(block)) {
      final Term body=new ApplyTerm(loc,block,TupleTerm.UNIT);
      body.setType(resultType);
      call=fmt.formatTermAs(body,resultType);
    }
 else {
      fmt.formatTermAs(block,block.getType());
      call=null;
    }
  }
  final LambdaTerm blockDeref=derefToLambda(block);
  if (blockDeref == null)   return call;
  final ArrayList<String> bodyStmts=new ArrayList<String>();
  for (  final Statement statement : blockDeref.getNonResultStatements())   bodyStmts.add(fmt.formatInLambdaStatement(statement));
  final UnboundTerm result=blockDeref.getResultStatement();
  if (!result.getValue().equals(TupleTerm.UNIT))   bodyStmts.add(fmt.formatInLambdaStatement(result));
  return StringUtils.join(bodyStmts,""String_Node_Str"");
}",0.8951111111111111
59786,"/** 
 * Try to inline the body of a block, in an expression context. If successful, a string containing the generated code is returned, otherwise null. See   {@link #formatBlockStmts(compile.gen.java.StatementFormatter,compile.term.Term,boolean)}for general details. An important difference here is that the expression (rather than statement) context prevents us from generating code containing multiple statements.
 */
static String formatBlockExpr(final StatementFormatter fmt,final Term block,final boolean fallbackToCall){
  final Loc loc=block.getLoc();
  final Type type=block.getType();
  final Type resultType=Types.funResult(type);
  final Term body=new ApplyTerm(loc,block,TupleTerm.UNIT);
  body.setType(resultType);
  final String call;
  if (fallbackToCall) {
    call=fmt.formatTermAs(body,resultType);
  }
 else {
    fmt.formatTermAs(body,resultType);
    call=null;
  }
  final LambdaTerm blockDeref=derefToLambda(block);
  if (blockDeref == null)   return call;
  if (blockDeref.getNonResultStatements().isEmpty()) {
    final boolean save=fmt.getInExpr();
    fmt.setInExpr(true);
    final Term resultTerm=blockDeref.getResultStatement().getValue();
    final String bodyFmt=fmt.formatTermAs(resultTerm,resultType);
    fmt.setInExpr(save);
    return bodyFmt;
  }
  return call;
}","/** 
 * Try to inline the body of a block, in an expression context. If successful, a string containing the generated code is returned, otherwise null. First criterion for success concerns the term itself, as described in   {@link #formatBlockStmts}. In an expression context, we also require that the body of a successfully dereferenced block consist of a single expression in generated code.
 */
static String formatBlockExpr(final StatementFormatter fmt,final Term block,final boolean fallbackToCall){
  final Loc loc=block.getLoc();
  final Type type=block.getType();
  final Type resultType=Types.funResult(type);
  final Term body=new ApplyTerm(loc,block,TupleTerm.UNIT);
  body.setType(resultType);
  final String call;
{
    if (fallbackToCall && isImmediate(block)) {
      call=fmt.formatTermAs(body,resultType);
    }
 else {
      fmt.formatTermAs(body,resultType);
      call=null;
    }
  }
  final LambdaTerm blockDeref=derefToLambda(block);
  if (blockDeref == null)   return call;
  if (!blockDeref.getNonResultStatements().isEmpty())   return call;
  final boolean save=fmt.getInExpr();
  fmt.setInExpr(true);
  final Term resultTerm=blockDeref.getResultStatement().getValue();
  final String bodyFmt=fmt.formatTermAs(resultTerm,resultType);
  fmt.setInExpr(save);
  return bodyFmt;
}",0.7998463311563581
59787,"public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String l=fmt.formatTermAs(args.get(0),boolean.class);
  final String inlined;
  if (stmtsOkay) {
    final String r=InlinerUtils.formatBlockStmts(fmt,args.get(1));
    inlined=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
  }
 else {
    final String r=InlinerUtils.formatBlockExpr(fmt,args.get(1));
    final String expr=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
    inlined=fmt.fixup(apply.getLoc(),expr,boolean.class);
  }
  return inlined;
}","public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String l=fmt.formatTermAs(args.get(0),boolean.class);
  final String inlined;
  if (stmtsOkay) {
    final String r=InlinerUtils.formatBlockStmts(fmt,args.get(1),true);
    if (r == null)     return null;
    inlined=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
  }
 else {
    final String r=InlinerUtils.formatBlockExpr(fmt,args.get(1),true);
    if (r == null)     return null;
    final String expr=""String_Node_Str"" + l + ""String_Node_Str""+ r+ ""String_Node_Str"";
    inlined=fmt.fixup(apply.getLoc(),expr,boolean.class);
  }
  return inlined;
}",0.9388335704125178
59788,"public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  if (!stmtsOkay)   return null;
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String c=fmt.formatTermAs(args.get(0),boolean.class);
  final String ufmt=fmt.formatTermAs(TupleTerm.UNIT,Types.unit());
  final String block=InlinerUtils.formatBlockStmts(fmt,args.get(1));
  return ""String_Node_Str"" + c + ""String_Node_Str""+ block+ ""String_Node_Str"";
}","public String tryInlining(final ApplyTerm apply,final StatementFormatter fmt,final boolean stmtsOkay){
  if (!stmtsOkay)   return null;
  final List<Term> args=((TupleTerm)apply.getArg()).getItems();
  final String c=fmt.formatTermAs(args.get(0),boolean.class);
  final String block=InlinerUtils.formatBlockStmts(fmt,args.get(1),true);
  if (block == null)   return null;
  return ""String_Node_Str"" + c + ""String_Node_Str""+ block+ ""String_Node_Str"";
}",0.8814655172413793
59789,"/** 
 * Shutdowns reporting task thread and waits for the reporting tasks to be finished.
 */
private void waitForReportingTasks(){
  if (runInfo.getDuration().getPeriodType() == PeriodType.TIME) {
    long lastTasks=0;
    long tasks=getTasksInQueue();
    reportingTasks.shutdown();
    while (tasks > 0 && tasks != lastTasks) {
      lastTasks=tasks;
      try {
        reportingTasks.awaitTermination(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException ie) {
      }
      tasks=getTasksInQueue();
    }
    reportingTasks=null;
  }
 else {
    while (getTasksInQueue() > 0 || (periodicThread != null && periodicThread.isAlive())) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
      }
    }
    reportingTasks.shutdown();
    reportingTasks=null;
  }
}","/** 
 * Shutdowns reporting task thread and waits for the reporting tasks to be finished.
 */
private void waitForReportingTasks(){
  if (runInfo.getDuration().getPeriodType() == PeriodType.TIME) {
    long lastTasks=0;
    long tasks=getTasksInQueue();
    reportingTasks.shutdown();
    while (tasks > 0 && tasks != lastTasks) {
      lastTasks=tasks;
      try {
        reportingTasks.awaitTermination(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException ie) {
      }
      tasks=getTasksInQueue();
    }
    reportingTasks=null;
  }
 else {
    int deadLine=5;
    while (deadLine > 0 && (getTasksInQueue() > 0 || (periodicThread != null && periodicThread.isAlive()))) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
      }
      deadLine--;
    }
    reportingTasks.shutdown();
    reportingTasks=null;
  }
}",0.9667458432304038
59790,"/** 
 * Performs a garbage collection based on the provided time information. This might be useful when controlling the time artificially.
 * @param time Current artificial time.
 */
public void gc(final long time){
  Iterator<TemporalObject<E>> it=window.iterator();
  while (it.hasNext() && it.next().time < time - length) {
    it.remove();
  }
}","/** 
 * Performs a garbage collection based on the provided time information. This might be useful when controlling the time artificially.
 * @param time Current artificial time.
 */
public void gc(final long time){
  CursorableLinkedList.Cursor<TemporalObject<E>> it=window.cursor();
  while (it.hasNext() && it.next().time < time - length) {
    it.remove();
  }
}",0.9426573426573428
59791,"/** 
 * Prints trace information for test debugging purposes.
 */
private void printTraceInformation(){
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"");
    final List<String> p=System.getProperties().entrySet().stream().map(entry -> ""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()).collect(Collectors.toCollection(() -> new LinkedList<>()));
    Collections.sort(p);
    for (    final String s : p) {
      log.trace(s);
    }
    log.trace(""String_Node_Str"");
    final ClassLoader currentCL=ScenarioExecution.class.getClassLoader();
    final URL[] curls=((URLClassLoader)currentCL).getURLs();
    for (    final URL curl : curls) {
      log.trace(""String_Node_Str"" + curl);
    }
  }
}","/** 
 * Prints trace information for test debugging purposes.
 */
private void printTraceInformation(){
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"");
    final List<String> p=System.getProperties().entrySet().stream().map(entry -> ""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue()).collect(Collectors.toCollection(() -> new LinkedList<>()));
    Collections.sort(p);
    for (    final String s : p) {
      log.trace(s);
    }
    log.trace(""String_Node_Str"");
    final ClassLoader currentClassLoader=ScenarioExecution.class.getClassLoader();
    final URL[] curls=((URLClassLoader)currentClassLoader).getURLs();
    for (    final URL curl : curls) {
      log.trace(""String_Node_Str"" + curl);
    }
  }
}",0.9851351351351352
59792,"/** 
 * Performs the given action for each element of the sliding window until all elements have been processed or the action throws an exception. Only the elements in the valid time window are processed. All older elements are garbage collected. This action might not return all elements when 1) it was already called with a higher (later) current time, 2)   {@link #forEach(Consumer)}was already called which actually propagated a higher (later) time to this method.
 * @param currentTime Artificial time to control the position of the sliding window.
 * @param action The action to be performed for each element.
 */
public void forEach(final long currentTime,final Consumer<E> action){
  gc(currentTime);
  for (  final TemporalObject<E> te : window) {
    if (te.time <= currentTime) {
      action.accept(te.object);
    }
 else {
      break;
    }
  }
}","/** 
 * <p>Performs the given action for each element of the sliding window until all elements have been processed or the action throws an exception.</p> <p>Only the elements in the valid time window are processed. All older elements are garbage collected.</p> <p>This action might not return all elements when 1) it was already called with a higher (later) current time, 2)   {@link #forEach(Consumer)}was already called which actually propagated a higher (later) time to this method.</p>
 * @param currentTime Artificial time to control the position of the sliding window.
 * @param action The action to be performed for each element.
 */
public void forEach(final long currentTime,final Consumer<E> action){
  gc(currentTime);
  for (  final TemporalObject<E> te : window) {
    if (te.time <= currentTime) {
      action.accept(te.object);
    }
 else {
      break;
    }
  }
}",0.9856569133677568
59793,abstract public void doClose() throws PerfCakeException ;,public abstract void doClose() throws PerfCakeException ;,0.8771929824561403
59794,abstract public void doInit(final Properties messageAttributes) throws PerfCakeException ;,public abstract void doInit(final Properties messageAttributes) throws PerfCakeException ;,0.9222222222222224
59795,"/** 
 * Actually performs the send operation. Should be overridden by specific implementations.
 * @param message Message to be sent.
 * @param measurementUnit Measurement unit carrying the current stop-watch.
 * @return Response to the message.
 * @throws Exception When the sending operation failed.
 * @see org.perfcake.message.sender.MessageSender#send(org.perfcake.message.Message,org.perfcake.reporting.MeasurementUnit)
 */
abstract public Serializable doSend(final Message message,final MeasurementUnit measurementUnit) throws Exception ;","/** 
 * Actually performs the send operation. Should be overridden by specific implementations.
 * @param message Message to be sent.
 * @param measurementUnit Measurement unit carrying the current stop-watch.
 * @return Response to the message.
 * @throws Exception When the sending operation failed.
 * @see org.perfcake.message.sender.MessageSender#send(org.perfcake.message.Message,org.perfcake.reporting.MeasurementUnit)
 */
public abstract Serializable doSend(final Message message,final MeasurementUnit measurementUnit) throws Exception ;",0.9761467889908256
59796,abstract public String doGetNext();,public abstract String doGetNext();,0.8
59797,abstract public void doReset() throws PerfCakeException ;,public abstract void doReset() throws PerfCakeException ;,0.8771929824561403
59798,"@Override public int hashCode(){
  int result;
  long temp;
  result=(int)(iteration ^ (iteration >>> 32));
  result=31 * result + (int)(startTime ^ (startTime >>> 32));
  result=31 * result + (int)(stopTime ^ (stopTime >>> 32));
  temp=Double.doubleToLongBits(totalTime);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + measurementResults.hashCode();
  result=31 * result + (int)(timeStarted ^ (timeStarted >>> 32));
  result=31 * result + (int)(enqueueTime ^ (enqueueTime >>> 32));
  return result;
}","@Override public int hashCode(){
  int result;
  result=(int)(iteration ^ (iteration >>> 32));
  result=31 * result + (int)(startTime ^ (startTime >>> 32));
  result=31 * result + (int)(stopTime ^ (stopTime >>> 32));
  long temp=Double.doubleToLongBits(totalTime);
  result=31 * result + (int)(temp ^ (temp >>> 32));
  result=31 * result + measurementResults.hashCode();
  result=31 * result + (int)(timeStarted ^ (timeStarted >>> 32));
  result=31 * result + (int)(enqueueTime ^ (enqueueTime >>> 32));
  return result;
}",0.6685714285714286
59799,"/** 
 * Shutdowns reporting task thread and waits for the reporting tasks to be finished.
 */
private void waitForReportingTasks(){
  if (runInfo.getDuration().getPeriodType() == PeriodType.TIME) {
    long lastTasks=0, tasks=getTasksInQueue();
    reportingTasks.shutdown();
    while (tasks > 0 && tasks != lastTasks) {
      lastTasks=tasks;
      try {
        reportingTasks.awaitTermination(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException ie) {
      }
      tasks=getTasksInQueue();
    }
    reportingTasks=null;
  }
 else {
    while (getTasksInQueue() > 0) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
      }
    }
    reportingTasks.shutdown();
    reportingTasks=null;
  }
}","/** 
 * Shutdowns reporting task thread and waits for the reporting tasks to be finished.
 */
private void waitForReportingTasks(){
  if (runInfo.getDuration().getPeriodType() == PeriodType.TIME) {
    long lastTasks=0;
    long tasks=getTasksInQueue();
    reportingTasks.shutdown();
    while (tasks > 0 && tasks != lastTasks) {
      lastTasks=tasks;
      try {
        reportingTasks.awaitTermination(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException ie) {
      }
      tasks=getTasksInQueue();
    }
    reportingTasks=null;
  }
 else {
    while (getTasksInQueue() > 0) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
      }
    }
    reportingTasks.shutdown();
    reportingTasks=null;
  }
}",0.9927007299270072
59800,"@SuppressWarnings(""String_Node_Str"") @Override protected Accumulator getAccumulator(final String key,final Class clazz){
  if (Double.class.equals(clazz)) {
    if (windowSize == Integer.MAX_VALUE) {
      return getNonWindowedAccumulator(key);
    }
 else {
      return getWindowedAccumulator(key);
    }
  }
  return super.getAccumulator(key,clazz);
}","@SuppressWarnings(""String_Node_Str"") @Override protected Accumulator getAccumulator(final String key,final Class clazz){
  if (Double.class.equals(clazz) || PerfCakeConst.REQUEST_SIZE_TAG.equals(key) || PerfCakeConst.RESPONSE_SIZE_TAG.equals(key)) {
    if (windowSize == Integer.MAX_VALUE) {
      return getNonWindowedAccumulator(key);
    }
 else {
      return getWindowedAccumulator(key);
    }
  }
  return super.getAccumulator(key,clazz);
}",0.8838951310861424
59801,"@Test public void testDefaults() throws InstantiationException, IllegalAccessException, ClassNotFoundException, InvocationTargetException {
  final ThroughputStatsReporter tsr=(ThroughputStatsReporter)ObjectFactory.summonInstance(ThroughputStatsReporter.class.getName(),new Properties());
  Assert.assertTrue(tsr.isAverageEnabled());
  Assert.assertTrue(tsr.isMinimumEnabled());
  Assert.assertTrue(tsr.isMaximumEnabled());
  Assert.assertNull(tsr.getAccumulatedResult(StatsReporter.AVERAGE));
  Assert.assertNull(tsr.getAccumulatedResult(StatsReporter.MINIMUM));
  Assert.assertNull(tsr.getAccumulatedResult(StatsReporter.MAXIMUM));
  Assert.assertNull(tsr.getAccumulatedResult(Measurement.DEFAULT_RESULT));
  final ResponseTimeStatsReporter rtsr=(ResponseTimeStatsReporter)ObjectFactory.summonInstance(ResponseTimeStatsReporter.class.getName(),new Properties());
  Assert.assertTrue(rtsr.isAverageEnabled());
  Assert.assertTrue(rtsr.isMinimumEnabled());
  Assert.assertTrue(rtsr.isMaximumEnabled());
  Assert.assertNull(rtsr.getAccumulatedResult(StatsReporter.AVERAGE));
  Assert.assertNull(rtsr.getAccumulatedResult(StatsReporter.MINIMUM));
  Assert.assertNull(rtsr.getAccumulatedResult(StatsReporter.MAXIMUM));
  Assert.assertNull(rtsr.getAccumulatedResult(Measurement.DEFAULT_RESULT));
}","@Test public void testDefaults() throws InstantiationException, IllegalAccessException, ClassNotFoundException, InvocationTargetException {
  final ThroughputStatsReporter tsr=(ThroughputStatsReporter)ObjectFactory.summonInstance(ThroughputStatsReporter.class.getName(),new Properties());
  Assert.assertTrue(tsr.isAverageEnabled());
  Assert.assertTrue(tsr.isMinimumEnabled());
  Assert.assertTrue(tsr.isMaximumEnabled());
  Assert.assertNull(tsr.getAccumulatedResult(StatsReporter.AVERAGE));
  Assert.assertNull(tsr.getAccumulatedResult(StatsReporter.MINIMUM));
  Assert.assertNull(tsr.getAccumulatedResult(StatsReporter.MAXIMUM));
  Assert.assertNull(tsr.getAccumulatedResult(Measurement.DEFAULT_RESULT));
  Assert.assertNull(tsr.getAccumulatedResult(PerfCakeConst.REQUEST_SIZE_TAG));
  Assert.assertNull(tsr.getAccumulatedResult(PerfCakeConst.RESPONSE_SIZE_TAG));
  final ResponseTimeStatsReporter rtsr=(ResponseTimeStatsReporter)ObjectFactory.summonInstance(ResponseTimeStatsReporter.class.getName(),new Properties());
  Assert.assertTrue(rtsr.isAverageEnabled());
  Assert.assertTrue(rtsr.isMinimumEnabled());
  Assert.assertTrue(rtsr.isMaximumEnabled());
  Assert.assertNull(rtsr.getAccumulatedResult(StatsReporter.AVERAGE));
  Assert.assertNull(rtsr.getAccumulatedResult(StatsReporter.MINIMUM));
  Assert.assertNull(rtsr.getAccumulatedResult(StatsReporter.MAXIMUM));
  Assert.assertNull(rtsr.getAccumulatedResult(Measurement.DEFAULT_RESULT));
  Assert.assertNull(rtsr.getAccumulatedResult(PerfCakeConst.REQUEST_SIZE_TAG));
  Assert.assertNull(rtsr.getAccumulatedResult(PerfCakeConst.RESPONSE_SIZE_TAG));
}",0.8898830006882312
59802,"private String getResultsLine(final Measurement m){
  final Object defaultResult=m.get();
  final Map<String,Object> results=m.getAll();
  final StringBuilder sb=new StringBuilder();
  sb.append(Utils.timeToHMS(m.getTime()));
  sb.append(delimiter);
  sb.append(m.getIteration() + 1);
  if (defaultResult != null) {
    sb.append(delimiter);
    if (defaultResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)defaultResult).getNumber());
    }
 else {
      sb.append(defaultResult);
    }
  }
  Object currentResult;
  for (  final String resultName : resultNames) {
    sb.append(delimiter);
    currentResult=results.get(resultName);
    if (currentResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)currentResult).getNumber());
    }
 else {
      sb.append(currentResult);
    }
  }
  return sb.toString();
}","/** 
 * Gets a single CSV result file line based on the measurement.
 * @param measurement The measurement to be reported in the CSV result file.
 * @return A new line entry to the CSV result file.
 */
private String getResultsLine(final Measurement measurement){
  final Object defaultResult=measurement.get();
  final Map<String,Object> results=measurement.getAll();
  final StringBuilder sb=new StringBuilder();
  sb.append(Utils.timeToHMS(measurement.getTime()));
  sb.append(delimiter);
  sb.append(measurement.getIteration() + 1);
  if (defaultResult != null) {
    sb.append(delimiter);
    if (defaultResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)defaultResult).getNumber());
    }
 else {
      sb.append(defaultResult);
    }
  }
  Object currentResult;
  for (  final String resultName : resultNames) {
    sb.append(delimiter);
    currentResult=results.get(resultName);
    if (currentResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)currentResult).getNumber());
    }
 else {
      sb.append(currentResult);
    }
  }
  return sb.toString();
}",0.8690228690228691
59803,"private void presetResultNames(final Measurement m){
  if (expectedAttributes.isEmpty()) {
    attributesExpected=false;
    final Map<String,Object> results=m.getAll();
    for (    final String key : results.keySet()) {
      if (!key.equals(Measurement.DEFAULT_RESULT)) {
        resultNames.add(key);
      }
    }
  }
 else {
    resultNames.addAll(expectedAttributes);
    attributesExpected=true;
  }
}","/** 
 * Autocompute the expectedAttributes when theyw ere not specified by the user.
 * @param measurement A sample measurement to read the attributes from.
 */
private void presetResultNames(final Measurement measurement){
  expectedAttributesEmpty=expectedAttributes.isEmpty();
  if (expectedAttributesEmpty) {
    final Map<String,Object> results=measurement.getAll();
    resultNames.addAll(results.keySet().stream().filter(key -> !key.equals(Measurement.DEFAULT_RESULT)).collect(Collectors.toList()));
  }
 else {
    resultNames.addAll(expectedAttributes);
  }
}",0.4380757420675537
59804,"@Override public void close(){
  if (dynamicAttributes) {
    expectedAttributes=buffer.getAttributes();
    openFile();
    buffer.replay((measurement) -> {
      try {
        realReport(measurement);
      }
 catch (      ReportingException e) {
        log.error(""String_Node_Str"",e);
      }
    }
);
  }
  closeFile();
}","@Override public void close(){
  if (dynamicAttributes) {
    expectedAttributes=buffer.getAttributes();
    if (wasWarmUp) {
      expectedAttributes.add(PerfCakeConst.WARM_UP_TAG);
    }
    openFile();
    buffer.replay((measurement) -> {
      try {
        realReport(measurement);
      }
 catch (      ReportingException e) {
        log.error(""String_Node_Str"",e);
      }
    }
,false);
  }
  closeFile();
}",0.8787061994609164
59805,"/** 
 * Performs the real reporting of the measurement.
 * @param measurement The measurement to be reported.
 * @throws ReportingException If it was not possible the write the reported data to the result file.
 */
private void realReport(final Measurement measurement) throws ReportingException {
  if (resultNames.isEmpty()) {
    presetResultNames(measurement);
    fileHeaders=getFileHeaders(measurement);
  }
  if (attributesExpected) {
    if (MissingStrategy.SKIP.equals(missingStrategy)) {
      final Set<String> measurementResults=measurement.getAll().keySet();
      final List<String> missingAttributes=resultNames.stream().filter(ea -> !measurementResults.contains(ea)).collect(Collectors.toList());
      if (!missingAttributes.isEmpty()) {
        if (log.isWarnEnabled()) {
          StringBuilder sb=new StringBuilder();
          sb.append(""String_Node_Str"");
          missingAttributes.forEach(s -> {
            sb.append(s);
            sb.append(""String_Node_Str"");
          }
);
          sb.append(""String_Node_Str"");
          log.warn(sb.toString());
        }
        return;
      }
    }
  }
  final StringBuilder sb=new StringBuilder();
  if (linePrefix != null && !linePrefix.isEmpty()) {
    sb.append(linePrefix);
  }
  sb.append(getResultsLine(measurement));
  if (lineSuffix != null && !lineSuffix.isEmpty()) {
    sb.append(lineSuffix);
  }
  sb.append(lineBreak);
  try {
    final boolean csvFileExists=csvFile.exists();
    if (outputChannel == null) {
      outputChannel=FileChannel.open(csvFile.toPath(),csvFileExists ? StandardOpenOption.APPEND : StandardOpenOption.CREATE,StandardOpenOption.WRITE);
    }
    if (!csvFileExists && !skipHeader) {
      sb.insert(0,fileHeaders + lineBreak);
    }
    outputChannel.write(ByteBuffer.wrap(sb.toString().getBytes(Charset.forName(Utils.getDefaultEncoding()))));
  }
 catch (  final IOException ioe) {
    throw new ReportingException(String.format(""String_Node_Str"",csvFile.getPath()),ioe);
  }
}","/** 
 * Performs the real reporting of the measurement.
 * @param measurement The measurement to be reported.
 * @throws ReportingException If it was not possible the write the reported data to the result file.
 */
private void realReport(final Measurement measurement) throws ReportingException {
  if (resultNames.isEmpty()) {
    presetResultNames(measurement);
    fileHeaders=getFileHeader(measurement);
  }
  if (!expectedAttributesEmpty) {
    if (MissingStrategy.SKIP.equals(missingStrategy)) {
      final Set<String> measurementResults=measurement.getAll().keySet();
      final List<String> missingAttributes=resultNames.stream().filter(ea -> !measurementResults.contains(ea)).collect(Collectors.toList());
      if (!missingAttributes.isEmpty()) {
        if (logTrace) {
          log.trace(""String_Node_Str"" + missingAttributes.toString() + ""String_Node_Str""+ measurement.getAll().toString()+ ""String_Node_Str"");
        }
        return;
      }
    }
  }
  final StringBuilder sb=new StringBuilder();
  if (linePrefix != null && !linePrefix.isEmpty()) {
    sb.append(linePrefix);
  }
  sb.append(getResultsLine(measurement));
  if (lineSuffix != null && !lineSuffix.isEmpty()) {
    sb.append(lineSuffix);
  }
  sb.append(lineBreak);
  try {
    final boolean csvFileExists=csvFile.exists();
    if (outputChannel == null) {
      outputChannel=FileChannel.open(csvFile.toPath(),csvFileExists ? StandardOpenOption.APPEND : StandardOpenOption.CREATE,StandardOpenOption.WRITE);
    }
    if (!csvFileExists && !skipHeader) {
      sb.insert(0,fileHeaders + lineBreak);
    }
    outputChannel.write(ByteBuffer.wrap(sb.toString().getBytes(Charset.forName(Utils.getDefaultEncoding()))));
  }
 catch (  final IOException ioe) {
    throw new ReportingException(String.format(""String_Node_Str"",csvFile.getPath()),ioe);
  }
}",0.9194139194139194
59806,"@Override public void open(){
  dynamicAttributes=expectedAttributes.stream().anyMatch(s -> s.endsWith(""String_Node_Str""));
  if (expectedAttributes.contains(PerfCakeConst.WARM_UP_TAG)) {
    expectedAttributes.remove(PerfCakeConst.WARM_UP_TAG);
    expectedAttributes.addAll(expectedAttributes.stream().map(attr -> attr + ""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG).collect(Collectors.toList()));
  }
  csvFile=new File(path);
  if (dynamicAttributes) {
    buffer=new DataBuffer(expectedAttributes);
  }
 else {
    openFile();
  }
}","@Override public void open(){
  dynamicAttributes=expectedAttributes.stream().anyMatch(s -> s.endsWith(""String_Node_Str""));
  wasWarmUp=expectedAttributes.contains(PerfCakeConst.WARM_UP_TAG);
  csvFile=new File(path);
  if (dynamicAttributes) {
    buffer=new DataBuffer(expectedAttributes);
  }
 else {
    openFile();
  }
}",0.727694090382387
59807,"@Test public void testDefaultProperties() throws IOException {
  final File defaultCSVFile=new File(DEFAULT_FILE_NAME);
  if (defaultCSVFile.exists()) {
    defaultCSVFile.delete();
  }
  try {
    final Properties destinationProperties=new Properties();
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    Assert.assertEquals(destination.getPath(),DEFAULT_FILE_NAME);
    Assert.assertEquals(destination.getDelimiter(),""String_Node_Str"");
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<Double>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<Double>(222.22,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    destination.close();
    assertCSVFileContent(defaultCSVFile,""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
 finally {
    defaultCSVFile.delete();
  }
}","@Test public void testDefaultProperties() throws IOException {
  final File defaultCSVFile=new File(DEFAULT_FILE_NAME);
  if (defaultCSVFile.exists()) {
    defaultCSVFile.delete();
  }
  try {
    final Properties destinationProperties=new Properties();
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    Assert.assertEquals(destination.getPath(),DEFAULT_FILE_NAME);
    Assert.assertEquals(destination.getDelimiter(),""String_Node_Str"");
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<>(222.22,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    destination.close();
    assertCSVFileContent(defaultCSVFile,""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
 finally {
    defaultCSVFile.delete();
  }
}",0.9950980392156864
59808,"@Test(expectedExceptions={ReportingException.class}) public void testPathIsNotFile() throws ReportingException {
  final Properties destinationProperties=new Properties();
  destinationProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<Double>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<Double>(222.22,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    destination.close();
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","@Test(expectedExceptions={ReportingException.class}) public void testPathIsNotFile() throws ReportingException {
  final Properties destinationProperties=new Properties();
  destinationProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<>(222.22,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    destination.close();
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.993212669683258
59809,"@Test public void testDestinationReport(){
  final Properties destinationProperties=new Properties();
  destinationProperties.put(""String_Node_Str"",""String_Node_Str"");
  destinationProperties.put(""String_Node_Str"",csvFile.getAbsolutePath());
  prepareFile(csvFile);
  try {
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<Double>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<Double>(222.22,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    destination.close();
    assertCSVFileContent(csvFile,""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","@Test public void testDestinationReport(){
  final Properties destinationProperties=new Properties();
  destinationProperties.put(""String_Node_Str"",""String_Node_Str"");
  destinationProperties.put(""String_Node_Str"",csvFile.getAbsolutePath());
  prepareFile(csvFile);
  try {
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<>(222.22,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    destination.close();
    assertCSVFileContent(csvFile,""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9943127962085307
59810,"@Test public void testMultipleRecords(){
  final Properties destinationProperties=new Properties();
  destinationProperties.setProperty(""String_Node_Str"",csvFile.getAbsolutePath());
  prepareFile(csvFile);
  try {
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<Double>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<Double>(222.22,""String_Node_Str""));
    final Measurement measurement2=new Measurement(43,123457000,ITERATION);
    measurement2.set(new Quantity<Double>(2222.22,""String_Node_Str""));
    measurement2.set(""String_Node_Str"",new Quantity<Double>(333.33,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    Thread.sleep(100);
    destination.report(measurement2);
    destination.close();
    assertCSVFileContent(csvFile,""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str""+ (ITERATION + 1)+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException|InterruptedException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","@Test public void testMultipleRecords(){
  final Properties destinationProperties=new Properties();
  destinationProperties.setProperty(""String_Node_Str"",csvFile.getAbsolutePath());
  prepareFile(csvFile);
  try {
    final CsvDestination destination=(CsvDestination)ObjectFactory.summonInstance(CsvDestination.class.getName(),destinationProperties);
    final Measurement measurement=new Measurement(42,123456000,ITERATION - 1);
    measurement.set(new Quantity<>(1111.11,""String_Node_Str""));
    measurement.set(""String_Node_Str"",new Quantity<>(222.22,""String_Node_Str""));
    final Measurement measurement2=new Measurement(43,123457000,ITERATION);
    measurement2.set(new Quantity<>(2222.22,""String_Node_Str""));
    measurement2.set(""String_Node_Str"",new Quantity<>(333.33,""String_Node_Str""));
    destination.open();
    destination.report(measurement);
    Thread.sleep(100);
    destination.report(measurement2);
    destination.close();
    assertCSVFileContent(csvFile,""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str""+ (ITERATION + 1)+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException|InterruptedException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9910581222056632
59811,"private void assertCSVFileContent(final File file,final String expected){
  try (Scanner scanner=new Scanner(file).useDelimiter(""String_Node_Str"")){
    Assert.assertEquals(scanner.next(),expected,""String_Node_Str"");
  }
 catch (  final FileNotFoundException fnfe) {
    fnfe.printStackTrace();
    Assert.fail(fnfe.getMessage());
  }
}","private void assertCSVFileContent(final File file,final String expected){
  try (Scanner scanner=new Scanner(file,Utils.getDefaultEncoding()).useDelimiter(""String_Node_Str"")){
    Assert.assertEquals(scanner.next(),expected,""String_Node_Str"");
  }
 catch (  final FileNotFoundException fnfe) {
    fnfe.printStackTrace();
    Assert.fail(fnfe.getMessage());
  }
}",0.96137339055794
59812,"@Override public void close(){
  if (dynamicAttributes) {
    attributes=buffer.getAttributes();
    helper=new C3ChartHelper(this);
  }
  if (!helper.isInitialized()) {
    log.error(""String_Node_Str"");
  }
 else {
    try {
      if (dynamicAttributes) {
        buffer.replay((measurement) -> {
          try {
            helper.appendResult(measurement);
          }
 catch (          ReportingException e) {
            log.error(""String_Node_Str"",e);
          }
        }
);
      }
      helper.close();
      helper.compileResults();
    }
 catch (    final PerfCakeException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void close(){
  if (dynamicAttributes) {
    attributes=buffer.getAttributes();
    helper=new C3ChartHelper(this);
  }
  if (!helper.isInitialized()) {
    log.error(""String_Node_Str"");
  }
 else {
    try {
      if (dynamicAttributes) {
        buffer.replay((measurement) -> {
          try {
            helper.appendResult(measurement);
          }
 catch (          ReportingException e) {
            log.error(""String_Node_Str"",e);
          }
        }
);
      }
      helper.close();
      helper.compileResults(autoCombine);
    }
 catch (    final PerfCakeException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.99147947327653
59813,"/** 
 * Gets a JavaScript line to be written to the data file that represents the current Measurement. All attributes required by the attributes list of this chart must be present in the measurement for the line to be returned.
 * @param measurement The current measurement.
 * @return The line representing the data in measurement specified by the attributes list of this chart, or null when there was some ofthe attributes missing.
 */
private String getResultLine(final Measurement measurement){
  final StringBuilder sb=new StringBuilder();
  boolean missingAttributes=false;
  sb.append(chart.getBaseName());
  sb.append(""String_Node_Str"");
switch (chart.getxAxisType()) {
case TIME:
    sb.append(measurement.getTime());
  break;
case ITERATION:
sb.append(measurement.getIteration());
break;
case PERCENTAGE:
sb.append(measurement.getPercentage());
break;
}
boolean isWarmUp=measurement.get(PerfCakeConst.WARM_UP_TAG) != null ? (Boolean)measurement.get(PerfCakeConst.WARM_UP_TAG) : false;
for (final String attr : chart.getAttributes()) {
if (chart.getAttributes().indexOf(attr) > 0) {
boolean warmUpAttr=attr.endsWith(PerfCakeConst.WARM_UP_TAG);
String pureAttr=warmUpAttr ? attr.substring(0,attr.length() - PerfCakeConst.WARM_UP_TAG.length() - 1) : attr;
sb.append(""String_Node_Str"");
if (!warmUpAttr && !measurement.getAll().containsKey(attr)) {
missingAttributes=true;
if (firstResultsLine) {
log.warn(String.format(""String_Node_Str"",attr));
}
}
 else {
final Object data=measurement.get(pureAttr);
if (isWarmUp ^ warmUpAttr) {
sb.append(""String_Node_Str"");
}
 else {
if (data instanceof String) {
sb.append(""String_Node_Str"");
sb.append(((String)data).replaceAll(""String_Node_Str"",""String_Node_Str""));
sb.append(""String_Node_Str"");
}
 else if (data instanceof Quantity) {
sb.append(((Quantity)data).getNumber().toString());
}
 else {
sb.append(data == null ? ""String_Node_Str"" : data.toString());
}
}
}
}
}
firstResultsLine=false;
if (missingAttributes) {
return ""String_Node_Str"";
}
sb.append(""String_Node_Str"");
return sb.toString();
}","/** 
 * Gets a JavaScript line to be written to the data file that represents the current Measurement. All attributes required by the attributes list of this chart must be present in the measurement for the line to be returned.
 * @param measurement The current measurement.
 * @return The line representing the data in measurement specified by the attributes list of this chart, or null when there was some ofthe attributes missing.
 */
private String getResultLine(final Measurement measurement){
  final StringBuilder sb=new StringBuilder();
  boolean missingAttributes=false;
  boolean isWarmUp=measurement.get(PerfCakeConst.WARM_UP_TAG) != null ? (Boolean)measurement.get(PerfCakeConst.WARM_UP_TAG) : false;
  sb.append(chart.getBaseName());
  sb.append(""String_Node_Str"");
switch (chart.getxAxisType()) {
case TIME:
    sb.append(measurement.getTime());
  break;
case ITERATION:
sb.append(measurement.getIteration());
break;
case PERCENTAGE:
sb.append(measurement.getPercentage());
break;
}
int nullFields=0;
for (final String attr : chart.getAttributes()) {
if (chart.getAttributes().indexOf(attr) > 0) {
boolean warmUpAttr=attr.endsWith(PerfCakeConst.WARM_UP_TAG);
String pureAttr=warmUpAttr ? attr.substring(0,attr.length() - PerfCakeConst.WARM_UP_TAG.length() - 1) : attr;
sb.append(""String_Node_Str"");
if (!warmUpAttr && !measurement.getAll().containsKey(attr)) {
missingAttributes=true;
if (firstResultsLine) {
log.warn(String.format(""String_Node_Str"",attr));
}
}
 else {
final Object data=measurement.get(pureAttr);
if (isWarmUp ^ warmUpAttr) {
nullFields++;
sb.append(""String_Node_Str"");
}
 else {
if (data instanceof String) {
sb.append(""String_Node_Str"");
sb.append(((String)data).replaceAll(""String_Node_Str"",""String_Node_Str""));
sb.append(""String_Node_Str"");
}
 else if (data instanceof Quantity) {
sb.append(((Quantity)data).getNumber().toString());
}
 else {
if (data == null) {
  nullFields++;
  sb.append(""String_Node_Str"");
}
 else {
  sb.append(data.toString());
}
}
}
}
}
}
firstResultsLine=false;
if (missingAttributes || chart.getAttributes().size() - nullFields <= 1) {
return ""String_Node_Str"";
}
sb.append(""String_Node_Str"");
return sb.toString();
}",0.8043529690087533
59814,"/** 
 * Creates a new helper for the given ChartDestination.
 * @param chartDestination The ChartDestination this helper is supposed to serve to.
 */
public C3ChartHelper(final ChartDestination chartDestination){
  try {
    final List<String> attributes=new ArrayList<>(chartDestination.getAttributesAsList());
    if (attributes.contains(PerfCakeConst.WARM_UP_TAG)) {
      attributes.remove(PerfCakeConst.WARM_UP_TAG);
      attributes.addAll(attributes.stream().map(a -> a + ""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG).collect(Collectors.toList()));
    }
switch (chartDestination.getxAxisType()) {
case PERCENTAGE:
      attributes.add(0,COLUMN_PERCENT);
    break;
case TIME:
  attributes.add(0,COLUMN_TIME);
break;
case ITERATION:
attributes.add(0,COLUMN_ITERATION);
break;
}
final C3Chart chart=new C3Chart();
chart.setGroup(chartDestination.getGroup());
chart.setAttributes(attributes);
chart.setName(chartDestination.getName());
chart.setxAxisType(chartDestination.getxAxisType());
chart.setxAxis(chartDestination.getXAxis());
chart.setyAxis(chartDestination.getYAxis());
chart.setHeight(chartDestination.getChartHeight());
chartDataFile=new C3ChartDataFile(chart,chartDestination.getOutputDirAsPath());
chartDataFile.open();
initialized=true;
}
 catch (final PerfCakeException e) {
log.error(String.format(""String_Node_Str"",this.getClass().getName()),e);
initialized=false;
}
}","/** 
 * Creates a new helper for the given ChartDestination.
 * @param chartDestination The ChartDestination this helper is supposed to serve to.
 */
public C3ChartHelper(final ChartDestination chartDestination){
  try {
    final List<String> attributes=new ArrayList<>(chartDestination.getAttributesAsList());
switch (chartDestination.getxAxisType()) {
case PERCENTAGE:
      attributes.add(0,COLUMN_PERCENT);
    break;
case TIME:
  attributes.add(0,COLUMN_TIME);
break;
case ITERATION:
attributes.add(0,COLUMN_ITERATION);
break;
}
final C3Chart chart=new C3Chart();
chart.setGroup(chartDestination.getGroup());
chart.setAttributes(attributes);
chart.setName(chartDestination.getName());
chart.setxAxisType(chartDestination.getxAxisType());
chart.setxAxis(chartDestination.getxAxis());
chart.setyAxis(chartDestination.getyAxis());
chart.setHeight(chartDestination.getChartHeight());
chartDataFile=new C3ChartDataFile(chart,chartDestination.getOutputDirAsPath());
chartDataFile.open();
initialized=true;
}
 catch (final PerfCakeException e) {
log.error(String.format(""String_Node_Str"",this.getClass().getName()),e);
initialized=false;
}
}",0.8992493085736862
59815,"/** 
 * Creates the final result report compiling all the previous charts together.
 * @throws PerfCakeException When there was an error creating the report. Typically an I/O issue.
 */
public void compileResults() throws PerfCakeException {
  C3ChartReport.createReport(chartDataFile.getTarget(),chartDataFile.getChart());
}","/** 
 * Creates the final result report compiling all the previous charts together.
 * @param autoCombine True if we should combine the new results with the previous reports.
 * @throws PerfCakeException When there was an error creating the report. Typically an I/O issue.
 */
public void compileResults(final boolean autoCombine) throws PerfCakeException {
  C3ChartReport.createReport(chartDataFile.getTarget(),chartDataFile.getChart(),autoCombine);
}",0.8354755784061697
59816,"/** 
 * Creates the final report in the given location.
 * @param target Root path to an existing chart report.
 * @param mainChart The chart that was added during this run of the performance test.
 * @throws PerfCakeException When it was not possible to create the report.
 */
static void createReport(final Path target,final C3Chart mainChart) throws PerfCakeException {
  final File outputDir=Paths.get(target.toString(),""String_Node_Str"").toFile();
  final List<C3Chart> charts=new ArrayList<>();
  charts.add(mainChart);
  try {
    deletePreviousCombinedCharts(outputDir);
    final File[] files=outputDir.listFiles(new DescriptionFileFilter());
    if (files != null) {
      final List<File> descriptionFiles=Arrays.asList(files);
      for (      final File f : descriptionFiles) {
        final C3Chart c=new C3ChartDataFile(f).getChart();
        if (!c.getBaseName().equals(mainChart.getBaseName())) {
          charts.add(c);
        }
      }
    }
    charts.sort(Comparator.comparingLong(C3Chart::getCreated));
    charts.addAll(analyzeMatchingCharts(target,charts));
  }
 catch (  final IOException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
  C3ChartHtmlTemplates.writeIndex(target,charts);
}","/** 
 * Creates the final report in the given location.
 * @param target Root path to an existing chart report.
 * @param mainChart The chart that was added during this run of the performance test.
 * @param autoCombine True if we should combine the new results with the previous reports.
 * @throws PerfCakeException When it was not possible to create the report.
 */
static void createReport(final Path target,final C3Chart mainChart,final boolean autoCombine) throws PerfCakeException {
  final File outputDir=Paths.get(target.toString(),""String_Node_Str"").toFile();
  final List<C3Chart> charts=new ArrayList<>();
  charts.add(mainChart);
  try {
    deletePreviousCombinedCharts(outputDir);
    final File[] files=outputDir.listFiles(new DescriptionFileFilter());
    if (files != null) {
      final List<File> descriptionFiles=Arrays.asList(files);
      for (      final File f : descriptionFiles) {
        final C3Chart c=new C3ChartDataFile(f).getChart();
        if (!c.getBaseName().equals(mainChart.getBaseName())) {
          charts.add(c);
        }
      }
    }
    charts.sort(Comparator.comparingLong(C3Chart::getCreated));
    if (autoCombine) {
      charts.addAll(analyzeMatchingCharts(target,charts));
    }
  }
 catch (  final IOException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
  C3ChartHtmlTemplates.writeIndex(target,charts);
}",0.9432515337423312
59817,"/** 
 * Combines the charts in the target path according to the matching attribute. That means a new chart containing the given attribute from all the charts generated in the given location is generated.
 * @param target Root path to an existing chart report.
 * @param matchingAttribute The name of the attribute present in all of the charts.
 * @param matchingCharts The charts to be combined.
 * @return The newly created chart meta-data.
 * @throws PerfCakeException When it was not possible to write the new chart data.
 */
private static C3Chart combineCharts(final Path target,final String matchingAttribute,final List<C3Chart> matchingCharts) throws PerfCakeException {
  final C3Chart newChart=new C3Chart();
  final String newBaseName=matchingCharts.stream().map(C3Chart::getBaseName).collect(Collectors.joining(""String_Node_Str""));
  final List<String> attributes=new ArrayList<>();
  attributes.add(matchingCharts.get(0).getAttributes().get(0));
  attributes.addAll(matchingCharts.stream().map(ch -> String.format(""String_Node_Str"",ch.getName(),C3ChartHtmlTemplates.getCreatedAsString(ch))).collect(Collectors.toList()));
  newChart.setBaseName(COMBINED_PREFIX + fileCounter++);
  newChart.setxAxisType(matchingCharts.get(0).getxAxisType());
  newChart.setxAxis(matchingCharts.get(0).getxAxis());
  newChart.setyAxis(matchingCharts.get(0).getyAxis());
  newChart.setName(""String_Node_Str"" + matchingCharts.get(0).getGroup() + ""String_Node_Str""+ matchingAttribute);
  newChart.setGroup(matchingCharts.get(0).getGroup());
  newChart.setAttributes(attributes);
  C3ChartData chartData=null;
  for (  final C3Chart chart : matchingCharts) {
    C3ChartData tmpChartData=new C3ChartData(chart.getBaseName(),target);
    tmpChartData=tmpChartData.filter(chart.getAttributes().indexOf(matchingAttribute));
    if (chartData == null) {
      chartData=tmpChartData;
    }
 else {
      chartData=chartData.combineWith(tmpChartData);
    }
  }
  new C3ChartDataFile(newChart,target,chartData);
  return newChart;
}","/** 
 * Combines the charts in the target path according to the matching attribute. That means a new chart containing the given attribute from all the charts generated in the given location is generated.
 * @param target Root path to an existing chart report.
 * @param matchingAttribute The name of the attribute present in all of the charts.
 * @param matchingCharts The charts to be combined.
 * @return The newly created chart meta-data.
 * @throws PerfCakeException When it was not possible to write the new chart data.
 */
private static C3Chart combineCharts(final Path target,final String matchingAttribute,final List<C3Chart> matchingCharts) throws PerfCakeException {
  final C3Chart newChart=new C3Chart();
  final List<String> attributes=new ArrayList<>();
  attributes.add(matchingCharts.get(0).getAttributes().get(0));
  attributes.addAll(matchingCharts.stream().map(ch -> String.format(""String_Node_Str"",ch.getName(),C3ChartHtmlTemplates.getCreatedAsString(ch))).collect(Collectors.toList()));
  newChart.setBaseName(COMBINED_PREFIX + fileCounter++);
  newChart.setxAxisType(matchingCharts.get(0).getxAxisType());
  newChart.setxAxis(matchingCharts.get(0).getxAxis());
  newChart.setyAxis(matchingCharts.get(0).getyAxis());
  newChart.setName(""String_Node_Str"" + matchingCharts.get(0).getGroup() + ""String_Node_Str""+ matchingAttribute);
  newChart.setGroup(matchingCharts.get(0).getGroup());
  newChart.setAttributes(attributes);
  C3ChartData chartData=null;
  for (  final C3Chart chart : matchingCharts) {
    C3ChartData tmpChartData=new C3ChartData(chart.getBaseName(),target);
    tmpChartData=tmpChartData.filter(chart.getAttributes().indexOf(matchingAttribute));
    if (chartData == null) {
      chartData=tmpChartData;
    }
 else {
      chartData=chartData.combineWith(tmpChartData);
    }
  }
  new C3ChartDataFile(newChart,target,chartData);
  return newChart;
}",0.9680225121514454
59818,"/** 
 * Get the list of all attributes noticed during recording.
 * @return The list of all attributes noticed during recording.
 */
public List<String> getAttributes(){
  return realAttributes;
}","/** 
 * Get the list of all attributes noticed during recording.
 * @return The list of all attributes noticed during recording.
 */
public List<String> getAttributes(){
  final List<String> result=realAttributes.stream().collect(Collectors.toList());
  result.sort(String::compareTo);
  return result;
}",0.756
59819,"/** 
 * Records the measurement and notices which attributes were present. In case of the warmUp phase, we record the attributes with _warmUp suffix to later separate the two phases. The list of attributes with the _warmUp extension is created in   {@link C3ChartHelper}.
 * @param measurement The measurement to be recorded.
 */
public void record(final Measurement measurement){
  data.add(measurement);
  boolean isWarmUp=measurement.get(PerfCakeConst.WARM_UP_TAG) != null ? (Boolean)measurement.get(PerfCakeConst.WARM_UP_TAG) : false;
  measurement.getAll().forEach((key,value) -> {
    final String warmUpKey=key + (isWarmUp ? ""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG : ""String_Node_Str"");
    if (!realAttributes.contains(warmUpKey)) {
      if (attributes.contains(warmUpKey)) {
        realAttributes.add(warmUpKey);
      }
 else {
        attributes.forEach(attr -> {
          if (attr.endsWith(""String_Node_Str"")) {
            if (key.startsWith(attr.substring(0,attr.length() - 1))) {
              realAttributes.add(key);
            }
          }
 else           if (attr.endsWith(""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG)) {
            if (key.startsWith(attr.substring(0,attr.length() - 2 - PerfCakeConst.WARM_UP_TAG.length())) && isWarmUp) {
              realAttributes.add(warmUpKey);
            }
          }
        }
);
      }
    }
  }
);
}","/** 
 * Records the measurement and notices which attributes were present. In case of the warmUp phase, we record the attributes with _warmUp suffix to later separate the two phases. The list of attributes with the _warmUp extension is created in   {@link C3ChartHelper}.
 * @param measurement The measurement to be recorded.
 */
public void record(final Measurement measurement){
  data.add(measurement);
  boolean isWarmUp=measurement.get(PerfCakeConst.WARM_UP_TAG) != null ? (Boolean)measurement.get(PerfCakeConst.WARM_UP_TAG) : false;
  measurement.getAll().forEach((key,value) -> {
    final String warmUpKey=key + (isWarmUp ? ""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG : ""String_Node_Str"");
    if ((isWarmUp && !realAttributes.contains(warmUpKey)) || (!isWarmUp && !realAttributes.contains(key))) {
      if (attributes.contains(warmUpKey)) {
        realAttributes.add(warmUpKey);
      }
      if (attributes.contains(key)) {
        realAttributes.add(key);
      }
 else {
        attributes.forEach(attr -> {
          if (attr.endsWith(""String_Node_Str"")) {
            if (key.startsWith(attr.substring(0,attr.length() - 1)) && !PerfCakeConst.WARM_UP_TAG.equals(key)) {
              realAttributes.add(key);
            }
          }
 else           if (attr.endsWith(""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG)) {
            if (key.startsWith(attr.substring(0,attr.length() - 2 - PerfCakeConst.WARM_UP_TAG.length())) && isWarmUp) {
              realAttributes.add(warmUpKey);
            }
          }
        }
);
      }
    }
  }
);
}",0.9377762665759946
59820,"@Override public void publishResult(final PeriodType periodType,final Destination destination) throws ReportingException {
  final Measurement m=newMeasurement();
  DoublePercentileIterator pi;
  final DoubleHistogram localHistogram=histogram.copy();
switch (correctionMode) {
case AUTO:
    pi=new DoublePercentileIterator(localHistogram.copyCorrectedForCoordinatedOmission(avg.getResult()),1);
  break;
case USER:
pi=new DoublePercentileIterator(localHistogram.copyCorrectedForCoordinatedOmission(correction),1);
break;
default :
pi=new DoublePercentileIterator(localHistogram,1);
}
pi.reset(detail);
while (pi.hasNext()) {
DoubleHistogramIterationValue val=pi.next();
m.set(prefix + String.format(Locale.US,percentileFormatString,val.getPercentileLevelIteratedTo() / 100d),String.format(Locale.US,valueFormatString,val.getValueIteratedTo()));
}
destination.report(m);
}","@Override public void publishResult(final PeriodType periodType,final Destination destination) throws ReportingException {
  final Measurement m=newMeasurement();
  DoublePercentileIterator pi;
  final DoubleHistogram localHistogram=histogram.copy();
switch (correctionMode) {
case AUTO:
    pi=new DoublePercentileIterator(localHistogram.copyCorrectedForCoordinatedOmission(avg.getResult()),1);
  break;
case USER:
pi=new DoublePercentileIterator(localHistogram.copyCorrectedForCoordinatedOmission(correction),1);
break;
default :
pi=new DoublePercentileIterator(localHistogram,1);
}
pi.reset(detail);
while (pi.hasNext()) {
DoubleHistogramIterationValue val=pi.next();
m.set(prefix + String.format(Locale.US,percentileFormatString,val.getPercentileLevelIteratedTo() / 100d),formatOutput ? String.format(Locale.US,valueFormatString,val.getValueIteratedTo()) : val.getValueIteratedTo());
}
destination.report(m);
}",0.9764837625979844
59821,"/** 
 * Sets the attributes of an object according to the properties provided.
 * @param object Object on which the properties should be set.
 * @param properties Properties that should be set as properties of the object. Key is a name of an object property and value is its value.
 * @throws InvocationTargetException When it was not possible to call the setter on the object.
 * @throws IllegalAccessException When we did not have the correct rights to set any of the properties.
 */
public static void setPropertiesOnObject(final Object object,final Properties properties) throws IllegalAccessException, InvocationTargetException {
  final PropertyUtilsBean propertyUtilsBean=new PropertyUtilsBean();
  propertyUtilsBean.addBeanIntrospector(new FluentPropertyBeanIntrospector());
  final BeanUtilsBean beanUtilsBean=new BeanUtilsBean(new EnumConvertUtilsBean(),propertyUtilsBean);
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",object.getClass().getName()));
  }
  for (  final Map.Entry<Object,Object> entry : properties.entrySet()) {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"" + entry.getKey().toString() + ""String_Node_Str""+ entry.getValue().toString()+ ""String_Node_Str"");
    }
    boolean successSet=false;
    if (entry.getValue() instanceof Element) {
      successSet=setElementProperty(object,entry.getKey().toString(),(Element)entry.getValue());
    }
    if (!successSet) {
      beanUtilsBean.setProperty(object,entry.getKey().toString(),entry.getValue());
    }
  }
}","/** 
 * Sets the attributes of an object according to the properties provided.
 * @param object Object on which the properties should be set.
 * @param properties Properties that should be set as properties of the object. Key is a name of an object property and value is its value.
 * @throws InvocationTargetException When it was not possible to call the setter on the object.
 * @throws IllegalAccessException When we did not have the correct rights to set any of the properties.
 */
public static void setPropertiesOnObject(final Object object,final Properties properties) throws IllegalAccessException, InvocationTargetException {
  final PropertyUtilsBean propertyUtilsBean=new PropertyUtilsBean();
  propertyUtilsBean.addBeanIntrospector(new FluentPropertyBeanIntrospector());
  final BeanUtilsBean beanUtilsBean=new BeanUtilsBean(new EnumConvertUtilsBean(),propertyUtilsBean);
  if (log.isTraceEnabled()) {
    log.trace(String.format(""String_Node_Str"",object.getClass().getName()));
  }
  for (  final Map.Entry<Object,Object> entry : properties.entrySet()) {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"" + entry.getKey().toString() + ""String_Node_Str""+ entry.getValue().toString()+ ""String_Node_Str"");
    }
    boolean successSet=false;
    if (entry.getValue() instanceof Element) {
      successSet=setElementProperty(object,entry.getKey().toString(),(Element)entry.getValue());
    }
    if (!successSet) {
      beanUtilsBean.setProperty(object,entry.getKey().toString(),entry.getValue());
      try {
        beanUtilsBean.getProperty(object,entry.getKey().toString());
      }
 catch (      ReflectiveOperationException reo) {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",entry.getKey().toString(),object.getClass().getCanonicalName()));
      }
    }
  }
}",0.9159212880143112
59822,"@Test public void basicTest() throws Exception {
  Random r=new Random();
  ChartDestination dst=new ChartDestination();
  dst.setAttributes(""String_Node_Str"");
  dst.setXAxis(""String_Node_Str"");
  dst.setYAxis(""String_Node_Str"");
  dst.setGroup(""String_Node_Str"");
  dst.setName(""String_Node_Str"");
  dst.setxAxisType(PeriodType.TIME);
  String tempDir=TestSetup.createTempDir(""String_Node_Str"");
  dst.setOutputDir(tempDir);
  dst.open();
  Measurement m;
  Double d, avg=0d;
  boolean warmUp=true;
  for (int i=1, j=1; i <= 100; i++, j++) {
    if (warmUp && r.nextInt(100 - i) < 10) {
      warmUp=false;
      j=1;
    }
    m=new Measurement(j * 10,j * 1000,(j * 100) + r.nextInt(100));
    d=r.nextDouble() * 100d;
    avg=avg + d;
    m.set(new Quantity<>(d,""String_Node_Str""));
    m.set(""String_Node_Str"",new Quantity<>(avg / i,""String_Node_Str""));
    m.set(""String_Node_Str"",warmUp);
    dst.report(m);
  }
  dst.close();
  final Path dir=Paths.get(tempDir);
  Assert.assertTrue(dir.resolve(Paths.get(""String_Node_Str"",""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY) + ""String_Node_Str"")).toFile().exists());
  Assert.assertTrue(dir.resolve(Paths.get(""String_Node_Str"",""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY) + ""String_Node_Str"")).toFile().exists());
  Assert.assertTrue(dir.resolve(Paths.get(""String_Node_Str"",""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY) + ""String_Node_Str"")).toFile().exists());
  final C3ChartData data1=new C3ChartData(""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY),dir);
  Assert.assertEquals(data1.getData().get(0).size(),5);
  final C3ChartDataFile desc=new C3ChartDataFile(dir,""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY));
  Assert.assertEquals(desc.getChart().getBaseName(),""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY));
  Assert.assertEquals(desc.getChart().getName(),dst.getName());
  Assert.assertEquals(desc.getChart().getGroup(),dst.getGroup());
  Assert.assertEquals(desc.getChart().getxAxis(),dst.getXAxis());
  Assert.assertEquals(desc.getChart().getyAxis(),dst.getYAxis());
  Assert.assertEquals(desc.getChart().getxAxisType(),dst.getxAxisType());
}","@Test public void basicTest() throws Exception {
  Random r=new Random();
  ChartDestination dst=new ChartDestination();
  dst.setAttributes(""String_Node_Str"");
  dst.setXAxis(""String_Node_Str"");
  dst.setYAxis(""String_Node_Str"");
  dst.setGroup(""String_Node_Str"");
  dst.setName(""String_Node_Str"");
  dst.setxAxisType(PeriodType.TIME);
  String tempDir=TestSetup.createTempDir(""String_Node_Str"");
  dst.setOutputDir(tempDir);
  dst.open();
  Measurement m;
  Double d, avg=0d;
  boolean warmUp=true;
  for (int i=1, j=1; i <= 100; i++, j++) {
    if (warmUp && r.nextInt(100 - i) < 10) {
      warmUp=false;
      j=1;
    }
    m=new Measurement(j * 10,j * 1000,(j * 100) + r.nextInt(100));
    d=r.nextDouble() * 100d;
    avg=avg + d;
    m.set(new Quantity<>(d,""String_Node_Str""));
    m.set(""String_Node_Str"",new Quantity<>(avg / i,""String_Node_Str""));
    m.set(""String_Node_Str"",warmUp);
    dst.report(m);
  }
  dst.close();
  final Path dir=Paths.get(tempDir);
  Assert.assertTrue(dir.resolve(Paths.get(""String_Node_Str"",""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY) + ""String_Node_Str"")).toFile().exists());
  Assert.assertTrue(dir.resolve(Paths.get(""String_Node_Str"",""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY) + ""String_Node_Str"")).toFile().exists());
  Assert.assertTrue(dir.resolve(Paths.get(""String_Node_Str"",""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY) + ""String_Node_Str"")).toFile().exists());
  final C3ChartData data1=new C3ChartData(""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY),dir);
  Assert.assertEquals(data1.getData().get(0).size(),5);
  final C3ChartDataFile desc=new C3ChartDataFile(dir,""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY));
  Assert.assertEquals(desc.getChart().getBaseName(),""String_Node_Str"" + System.getProperty(PerfCakeConst.NICE_TIMESTAMP_PROPERTY));
  Assert.assertEquals(desc.getChart().getName(),dst.getName());
  Assert.assertEquals(desc.getChart().getGroup(),dst.getGroup());
  Assert.assertEquals(desc.getChart().getxAxis(),dst.getxAxis());
  Assert.assertEquals(desc.getChart().getyAxis(),dst.getyAxis());
  Assert.assertEquals(desc.getChart().getxAxisType(),dst.getxAxisType());
}",0.9986928104575163
59823,"/** 
 * Gets the properties of an object as a   {@link java.util.Properties} object.
 * @param object The object to be inspected.
 * @return All the properties of the object.
 * @throws IllegalAccessException When it was not possible to find, call, or use any of the getter methods.
 * @throws NoSuchMethodException When it was not possible to find, call, or use any of the getter methods.
 * @throws InvocationTargetException When it was not possible to find, call, or use any of the getter methods.
 */
public static Properties getObjectProperties(final Object object) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {
  final Properties properties=new Properties();
  properties.putAll(BeanUtils.describe(object));
  return properties;
}","/** 
 * Gets the properties of an object as a   {@link java.util.Properties} object.
 * @param object The object to be inspected.
 * @return All the properties of the object.
 * @throws IllegalAccessException When it was not possible to find, call, or use any of the getter methods.
 * @throws NoSuchMethodException When it was not possible to find, call, or use any of the getter methods.
 * @throws InvocationTargetException When it was not possible to find, call, or use any of the getter methods.
 */
public static Properties getObjectProperties(final Object object) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {
  final Properties properties=new Properties();
  final Map<String,String> attributes=BeanUtils.describe(object);
  attributes.forEach((key,value) -> {
    if (value != null) {
      properties.put(key,value);
    }
  }
);
  return properties;
}",0.8526946107784431
59824,"/** 
 * Sets the attributes that will be written to the chart.
 * @param attributes The attributes separated by comma.
 */
public void setAttributes(final String attributes){
  this.attributes=Arrays.asList(attributes.split(""String_Node_Str""));
}","/** 
 * Sets the attributes that will be written to the chart.
 * @param attributes The attributes separated by comma.
 */
public void setAttributes(final String attributes){
  this.attributes=new ArrayList<>(Arrays.asList(attributes.split(""String_Node_Str"")));
}",0.9666011787819252
59825,"@Override public void open(){
  dynamicAttributes=attributes.stream().anyMatch(s -> s.endsWith(""String_Node_Str""));
  if (dynamicAttributes) {
    buffer=new DataBuffer(attributes);
  }
 else {
    helper=new C3ChartHelper(this);
  }
}","@Override public void open(){
  dynamicAttributes=attributes.stream().anyMatch(s -> s.endsWith(""String_Node_Str""));
  if (attributes.contains(PerfCakeConst.WARM_UP_TAG)) {
    attributes.remove(PerfCakeConst.WARM_UP_TAG);
    attributes.addAll(attributes.stream().map(attr -> attr + ""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG).collect(Collectors.toList()));
  }
  if (dynamicAttributes) {
    buffer=new DataBuffer(attributes);
  }
 else {
    helper=new C3ChartHelper(this);
  }
}",0.6536856745479833
59826,"/** 
 * Gets a JavaScript line to be written to the data file that represents the current Measurement. All attributes required by the attributes list of this chart must be present in the measurement for the line to be returned.
 * @param measurement The current measurement.
 * @return The line representing the data in measurement specified by the attributes list of this chart, or null when there was some ofthe attributes missing.
 */
private String getResultLine(final Measurement measurement){
  final StringBuilder sb=new StringBuilder();
  boolean missingAttributes=false;
  sb.append(chart.getBaseName());
  sb.append(""String_Node_Str"");
switch (chart.getxAxisType()) {
case TIME:
    sb.append(measurement.getTime());
  break;
case ITERATION:
sb.append(measurement.getIteration());
break;
case PERCENTAGE:
sb.append(measurement.getPercentage());
break;
}
boolean isWarmUp=measurement.get(PerfCakeConst.WARM_UP_TAG) != null ? (Boolean)measurement.get(PerfCakeConst.WARM_UP_TAG) : false;
for (final String attr : chart.getAttributes()) {
if (chart.getAttributes().indexOf(attr) > 0) {
boolean warmUpAttr=attr.endsWith(PerfCakeConst.WARM_UP_TAG);
String pureAttr=warmUpAttr ? attr.substring(0,attr.length() - PerfCakeConst.WARM_UP_TAG.length() - 1) : attr;
sb.append(""String_Node_Str"");
if (!attr.endsWith(PerfCakeConst.WARM_UP_TAG) && !measurement.getAll().containsKey(attr)) {
missingAttributes=true;
if (firstResultsLine) {
log.warn(String.format(""String_Node_Str"",attr));
}
}
 else {
final Object data=measurement.get(pureAttr);
if (isWarmUp ^ warmUpAttr) {
sb.append(""String_Node_Str"");
}
 else {
if (data instanceof String) {
sb.append(""String_Node_Str"");
sb.append(((String)data).replaceAll(""String_Node_Str"",""String_Node_Str""));
sb.append(""String_Node_Str"");
}
 else if (data instanceof Quantity) {
sb.append(((Quantity)data).getNumber().toString());
}
 else {
sb.append(data == null ? ""String_Node_Str"" : data.toString());
}
}
}
}
}
firstResultsLine=false;
if (missingAttributes) {
return ""String_Node_Str"";
}
sb.append(""String_Node_Str"");
return sb.toString();
}","/** 
 * Gets a JavaScript line to be written to the data file that represents the current Measurement. All attributes required by the attributes list of this chart must be present in the measurement for the line to be returned.
 * @param measurement The current measurement.
 * @return The line representing the data in measurement specified by the attributes list of this chart, or null when there was some ofthe attributes missing.
 */
private String getResultLine(final Measurement measurement){
  final StringBuilder sb=new StringBuilder();
  boolean missingAttributes=false;
  sb.append(chart.getBaseName());
  sb.append(""String_Node_Str"");
switch (chart.getxAxisType()) {
case TIME:
    sb.append(measurement.getTime());
  break;
case ITERATION:
sb.append(measurement.getIteration());
break;
case PERCENTAGE:
sb.append(measurement.getPercentage());
break;
}
boolean isWarmUp=measurement.get(PerfCakeConst.WARM_UP_TAG) != null ? (Boolean)measurement.get(PerfCakeConst.WARM_UP_TAG) : false;
for (final String attr : chart.getAttributes()) {
if (chart.getAttributes().indexOf(attr) > 0) {
boolean warmUpAttr=attr.endsWith(PerfCakeConst.WARM_UP_TAG);
String pureAttr=warmUpAttr ? attr.substring(0,attr.length() - PerfCakeConst.WARM_UP_TAG.length() - 1) : attr;
sb.append(""String_Node_Str"");
if (!warmUpAttr && !measurement.getAll().containsKey(attr)) {
missingAttributes=true;
if (firstResultsLine) {
log.warn(String.format(""String_Node_Str"",attr));
}
}
 else {
final Object data=measurement.get(pureAttr);
if (isWarmUp ^ warmUpAttr) {
sb.append(""String_Node_Str"");
}
 else {
if (data instanceof String) {
sb.append(""String_Node_Str"");
sb.append(((String)data).replaceAll(""String_Node_Str"",""String_Node_Str""));
sb.append(""String_Node_Str"");
}
 else if (data instanceof Quantity) {
sb.append(((Quantity)data).getNumber().toString());
}
 else {
sb.append(data == null ? ""String_Node_Str"" : data.toString());
}
}
}
}
}
firstResultsLine=false;
if (missingAttributes) {
return ""String_Node_Str"";
}
sb.append(""String_Node_Str"");
return sb.toString();
}",0.9883664566165778
59827,"/** 
 * Converts chart meta-data to properties.
 * @param chart Chart meta-data.
 * @return Properties pre-filled from the chart meta-data.
 */
private static Properties getChartProperties(final C3Chart chart){
  final Properties props=new Properties();
  props.setProperty(""String_Node_Str"",chart.getBaseName());
  props.setProperty(""String_Node_Str"",chart.getxAxis());
  props.setProperty(""String_Node_Str"",chart.getyAxis());
  props.setProperty(""String_Node_Str"",chart.getName());
  props.setProperty(""String_Node_Str"",String.valueOf(chart.getHeight()));
switch (chart.getxAxisType()) {
case TIME:
    props.setProperty(""String_Node_Str"",""String_Node_Str"");
  break;
case ITERATION:
props.setProperty(""String_Node_Str"",""String_Node_Str"");
break;
case PERCENTAGE:
props.setProperty(""String_Node_Str"",""String_Node_Str"");
break;
}
return props;
}","/** 
 * Converts chart meta-data to properties.
 * @param chart Chart meta-data.
 * @return Properties pre-filled from the chart meta-data.
 */
private static Properties getChartProperties(final C3Chart chart){
  final Properties props=new Properties();
  props.setProperty(""String_Node_Str"",chart.getBaseName());
  props.setProperty(""String_Node_Str"",chart.getxAxis());
  props.setProperty(""String_Node_Str"",chart.getyAxis());
  props.setProperty(""String_Node_Str"",chart.getName());
  props.setProperty(""String_Node_Str"",String.valueOf(chart.getHeight()));
switch (chart.getxAxisType()) {
case TIME:
    props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",C3ChartHelper.COLUMN_TIME);
break;
case ITERATION:
props.setProperty(""String_Node_Str"",""String_Node_Str"");
props.setProperty(""String_Node_Str"",C3ChartHelper.COLUMN_ITERATION);
break;
case PERCENTAGE:
props.setProperty(""String_Node_Str"",""String_Node_Str"");
props.setProperty(""String_Node_Str"",C3ChartHelper.COLUMN_PERCENT);
break;
}
return props;
}",0.8942917547568711
59828,"public void record(final Measurement measurement){
  data.add(measurement);
  measurement.getAll().forEach((key,value) -> {
    if (attributes.contains(key) && !realAttributes.contains(key)) {
      realAttributes.add(key);
    }
    attributes.forEach(attr -> {
      if (attr.endsWith(""String_Node_Str"")) {
        if (key.startsWith(attr.substring(0,attr.length() - 1))) {
          if (!realAttributes.contains(key)) {
            realAttributes.add(key);
          }
        }
      }
    }
);
  }
);
}","public void record(final Measurement measurement){
  data.add(measurement);
  measurement.getAll().forEach((key,value) -> {
    if (!realAttributes.contains(key)) {
      if (attributes.contains(key)) {
        realAttributes.add(key);
      }
 else {
        attributes.forEach(attr -> {
          if (attr.endsWith(""String_Node_Str"")) {
            if (key.startsWith(attr.substring(0,attr.length() - 1))) {
              realAttributes.add(key);
            }
          }
 else           if (attr.endsWith(""String_Node_Str"" + PerfCakeConst.WARM_UP_TAG)) {
            if (key.startsWith(attr.substring(0,attr.length() - 2 - PerfCakeConst.WARM_UP_TAG.length()))) {
              realAttributes.add(key);
            }
          }
        }
);
      }
    }
  }
);
}",0.6467817896389325
59829,"/** 
 * Takes care of gentle shutdown of the generator based on the period type.
 * @throws java.lang.InterruptedException When waiting for the termination was interrupted.
 */
protected void shutdown() throws InterruptedException {
  if (runInfo.getDuration().getPeriodType() == PeriodType.ITERATION) {
    log.info(SHUTDOWN_LOG);
    adaptiveTermination();
    setStopTime();
  }
 else {
    setStopTime();
    log.info(SHUTDOWN_LOG);
    adaptiveTermination();
  }
  executorService.shutdownNow();
}","/** 
 * Takes care of gentle shutdown of the generator based on the period type.
 * @throws java.lang.InterruptedException When waiting for the termination was interrupted.
 */
protected void shutdown() throws InterruptedException {
  if (runInfo.getDuration().getPeriodType() == PeriodType.ITERATION) {
    log.info(""String_Node_Str"");
    adaptiveTermination();
    setStopTime();
  }
 else {
    setStopTime();
    log.info(""String_Node_Str"");
    adaptiveTermination();
  }
  executorService.shutdownNow();
}",0.95069033530572
59830,"@Override public void publishResult(final PeriodType periodType,final Destination destination) throws ReportingException {
  final Measurement m=newMeasurement();
  DoublePercentileIterator pi;
switch (correctionMode) {
case AUTO:
    pi=new DoublePercentileIterator(histogram.copyCorrectedForCoordinatedOmission(avg.getResult()),1);
  break;
case USER:
pi=new DoublePercentileIterator(histogram.copyCorrectedForCoordinatedOmission(correction),1);
break;
default :
pi=new DoublePercentileIterator(histogram,1);
}
pi.reset(detail);
while (pi.hasNext()) {
DoubleHistogramIterationValue val=pi.next();
m.set(prefix + String.format(Locale.US,percentileFormatString,val.getPercentileLevelIteratedTo() / 100d),String.format(Locale.US,valueFormatString,val.getValueIteratedTo()));
}
destination.report(m);
}","@Override public void publishResult(final PeriodType periodType,final Destination destination) throws ReportingException {
  final Measurement m=newMeasurement();
  DoublePercentileIterator pi;
  final DoubleHistogram localHistogram=histogram.copy();
switch (correctionMode) {
case AUTO:
    pi=new DoublePercentileIterator(localHistogram.copyCorrectedForCoordinatedOmission(avg.getResult()),1);
  break;
case USER:
pi=new DoublePercentileIterator(localHistogram.copyCorrectedForCoordinatedOmission(correction),1);
break;
default :
pi=new DoublePercentileIterator(localHistogram,1);
}
pi.reset(detail);
while (pi.hasNext()) {
DoubleHistogramIterationValue val=pi.next();
m.set(prefix + String.format(Locale.US,percentileFormatString,val.getPercentileLevelIteratedTo() / 100d),String.format(Locale.US,valueFormatString,val.getValueIteratedTo()));
}
destination.report(m);
}",0.9533492822966508
59831,"/** 
 * Creates a new   {@link org.perfcake.reporting.MeasurementUnit measurement unit} with a unique iteration number.
 * @return A {@link org.perfcake.reporting.MeasurementUnit measurement unit} unit with a unique iteration number, or null if a measurement is not running or is already finished.
 */
public MeasurementUnit newMeasurementUnit(){
  if (!runInfo.isRunning()) {
    return null;
  }
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"");
  }
  return new MeasurementUnit(runInfo.getNextIteration());
}","/** 
 * Creates a new   {@link org.perfcake.reporting.MeasurementUnit measurement unit} with a unique iteration number.
 * @return A {@link org.perfcake.reporting.MeasurementUnit measurement unit} unit with a unique iteration number, or null if a measurement is not running or is already finished.
 */
public MeasurementUnit newMeasurementUnit(){
  if (runInfo.isRunning()) {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"");
    }
    return new MeasurementUnit(runInfo.getNextIteration());
  }
  return null;
}",0.957345971563981
59832,"@Override public void doInit(final Properties messageAttributes) throws PerfCakeException {
  final HashMap<String,Object> env=new HashMap<String,Object>();
  env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  if (ldapUsername != null) {
    env.put(Context.SECURITY_PRINCIPAL,ldapUsername);
  }
  if (ldapPassword != null) {
    env.put(Context.SECURITY_CREDENTIALS,ldapPassword);
  }
  env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
  env.put(Context.PROVIDER_URL,safeGetTarget(messageAttributes));
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + safeGetTarget(messageAttributes));
  }
  try {
    ctx=new InitialLdapContext(env,null);
  }
 catch (  NamingException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
  searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
}","@Override public void doInit(final Properties messageAttributes) throws PerfCakeException {
  final Hashtable<String,Object> env=new Hashtable<>();
  env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  if (ldapUsername != null) {
    env.put(Context.SECURITY_PRINCIPAL,ldapUsername);
  }
  if (ldapPassword != null) {
    env.put(Context.SECURITY_CREDENTIALS,ldapPassword);
  }
  env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
  env.put(Context.PROVIDER_URL,safeGetTarget(messageAttributes));
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + safeGetTarget(messageAttributes));
  }
  try {
    ctx=new InitialLdapContext(env,null);
  }
 catch (  NamingException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
  searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
}",0.9826658696951583
59833,"/** 
 * Deletes all previsouly generated chart combinations. We are going to refresh them.
 * @param descriptionsDirectory The directory with existing generated charts.
 * @throws IOException When it was not possible to delete any of the charts.
 */
private void deletePreviousCombinedCharts(final File descriptionsDirectory) throws IOException {
  final StringBuilder issues=new StringBuilder();
  for (  final File f : descriptionsDirectory.listFiles(new CombinedJsFileFilter())) {
    if (!f.delete()) {
      issues.append(String.format(""String_Node_Str"",f.getAbsolutePath()));
    }
  }
  if (issues.length() > 0) {
    throw new IOException(issues.toString());
  }
}","/** 
 * Deletes all previsouly generated chart combinations. We are going to refresh them.
 * @param descriptionsDirectory The directory with existing generated charts.
 * @throws IOException When it was not possible to delete any of the charts.
 */
private void deletePreviousCombinedCharts(final File descriptionsDirectory) throws IOException {
  final StringBuilder issues=new StringBuilder();
  final File[] files=descriptionsDirectory.listFiles(new CombinedJsFileFilter());
  if (files != null) {
    for (    final File f : files) {
      if (!f.delete()) {
        issues.append(String.format(""String_Node_Str"",f.getAbsolutePath()));
      }
    }
  }
  if (issues.length() > 0) {
    throw new IOException(issues.toString());
  }
}",0.9355067328136074
59834,"/** 
 * Creates the final report including generation of the main index.html file based on all previously generated reports in the same directory.
 * @throws org.perfcake.PerfCakeException When it was not possible to generate the report.
 */
public void compileResults() throws PerfCakeException {
  final File outputDir=Paths.get(target.toString(),""String_Node_Str"").toFile();
  final List<Chart> charts=new ArrayList<>();
  charts.add(mainChart);
  try {
    deletePreviousCombinedCharts(outputDir);
    final List<File> descriptionFiles=Arrays.asList(outputDir.listFiles(new DescriptionFileFilter()));
    for (    final File f : descriptionFiles) {
      final Chart c=Chart.fromDescriptionFile(f);
      if (!c.getBaseName().equals(mainChart.getBaseName())) {
        charts.add(c);
      }
    }
    charts.addAll(analyzeMatchingCharts(charts));
  }
 catch (  final IOException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
  writeIndex(getLoadersHtml(charts),getJsHtml(charts),getDivHtml(charts));
}","/** 
 * Creates the final report including generation of the main index.html file based on all previously generated reports in the same directory.
 * @throws org.perfcake.PerfCakeException When it was not possible to generate the report.
 */
public void compileResults() throws PerfCakeException {
  final File outputDir=Paths.get(target.toString(),""String_Node_Str"").toFile();
  final List<Chart> charts=new ArrayList<>();
  charts.add(mainChart);
  try {
    deletePreviousCombinedCharts(outputDir);
    final File[] files=outputDir.listFiles(new DescriptionFileFilter());
    if (files != null) {
      final List<File> descriptionFiles=Arrays.asList(files);
      for (      final File f : descriptionFiles) {
        final Chart c=Chart.fromDescriptionFile(f);
        if (!c.getBaseName().equals(mainChart.getBaseName())) {
          charts.add(c);
        }
      }
    }
    charts.addAll(analyzeMatchingCharts(charts));
  }
 catch (  final IOException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
  writeIndex(getLoadersHtml(charts),getJsHtml(charts),getDivHtml(charts));
}",0.8921337729627885
59835,"/** 
 * Gets the actual counts for individual ranges of the histogram.
 * @return The actual counts for individual ranges of the histogram.
 */
public Map<Range,Double> getHistogramInPercent(){
  Map<Range,Double> result=new LinkedHashMap<>();
  Map<Range,AtomicLong> snapshot=new LinkedHashMap<>(histogram);
  final long count=getCount(snapshot);
  if (count == 0) {
    snapshot.forEach((range,value) -> result.put(range,0d));
  }
 else {
    snapshot.forEach((range,value) -> result.put(range,((double)value.get()) / count * 100.0d));
  }
  return result;
}","/** 
 * Gets the actual counts for individual ranges of the histogram.
 * @return The actual counts for individual ranges of the histogram.
 */
@edu.umd.cs.findbugs.annotations.SuppressWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") public Map<Range,Double> getHistogramInPercent(){
  Map<Range,Double> result=new LinkedHashMap<>();
  Map<Range,AtomicLong> snapshot=new LinkedHashMap<>(histogram);
  final long count=getCount(snapshot);
  if (count == 0) {
    snapshot.forEach((range,value) -> result.put(range,0d));
  }
 else {
    snapshot.forEach((range,value) -> result.put(range,((double)value.get()) / count * 100.0d));
  }
  return result;
}",0.91279543602282
59836,"/** 
 * Gets the actual counts for individual ranges of the histogram.
 * @return The actual counts for individual ranges of the histogram.
 */
public Map<Range,Long> getHistogram(){
  Map<Range,Long> result=new LinkedHashMap<>();
  Map<Range,AtomicLong> snapshot=new LinkedHashMap<>(histogram);
  snapshot.forEach((range,value) -> result.put(range,value.get()));
  return result;
}","/** 
 * Gets the actual counts for individual ranges of the histogram.
 * @return The actual counts for individual ranges of the histogram.
 */
@edu.umd.cs.findbugs.annotations.SuppressWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") public Map<Range,Long> getHistogram(){
  Map<Range,Long> result=new LinkedHashMap<>();
  Map<Range,AtomicLong> snapshot=new LinkedHashMap<>(histogram);
  snapshot.forEach((range,value) -> result.put(range,value.get()));
  return result;
}",0.8771526980482205
59837,"@Override public synchronized void reset(){
  max=Double.MIN_VALUE;
}","@Override public synchronized void reset(){
  max=Double.NEGATIVE_INFINITY;
}",0.8493150684931506
59838,"@Override public synchronized void reset(){
  min=Double.MAX_VALUE;
}","@Override public synchronized void reset(){
  min=Double.POSITIVE_INFINITY;
}",0.8356164383561644
59839,"@Override public Double getResult(){
  double min=Double.MAX_VALUE;
synchronized (fifo) {
    for (    Object o : fifo) {
      min=Math.min(min,(Double)o);
    }
  }
  return fifo.size() == 0 ? Double.NaN : min;
}","@Override public Double getResult(){
  double min=Double.POSITIVE_INFINITY;
synchronized (fifo) {
    for (    Object o : fifo) {
      min=Math.min(min,(Double)o);
    }
  }
  return fifo.size() == 0 ? Double.NaN : min;
}",0.944954128440367
59840,"@Test(dataProvider=""String_Node_Str"") @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void accumulatorGenericTest(final Accumulator a,final Long start,final Long end,final Double result,final Double stressResult,final Double zero){
  Assert.assertEquals(a.getResult(),zero);
  for (long i=start; i <= end; i=i + 1) {
    a.add((double)i);
  }
  Assert.assertEquals(a.getResult(),result);
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}","@Test(dataProvider=""String_Node_Str"") @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void accumulatorGenericTest(final Accumulator a,final Long start,final Long end,final Number result,final Number stressResult,final Number zero){
  Assert.assertEquals(a.getResult(),zero);
  try {
    for (long i=start; i <= end; i=i + 1) {
      a.add((double)i);
    }
  }
 catch (  ClassCastException cce) {
    for (long i=start; i <= end; i=i + 1) {
      a.add(i);
    }
  }
  Assert.assertEquals(a.getResult(),result);
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}",0.8260038240917782
59841,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  for (long i=start; i <= end; i=i + 1L) {
    a.add((double)i);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  try {
    for (long i=start; i <= end; i=i + 1L) {
      a.add((double)i);
    }
  }
 catch (  ClassCastException cce) {
    for (long i=start; i <= end; i=i + 1) {
      a.add(i);
    }
  }
}",0.6717171717171717
59842,"@Test(dataProvider=""String_Node_Str"",groups={""String_Node_Str""}) @SuppressWarnings(""String_Node_Str"") public void accumulatorStressTest(final Accumulator a,final Long start,final Long end,final Double result,final Double stressResult,final Double zero) throws InterruptedException {
  List<Thread> stressors=new ArrayList<>();
  for (int i=0; i < STRESS_THREADS; i++) {
    stressors.add(new Thread(new AccumulatorStressor(a,start,end)));
  }
  long time=System.currentTimeMillis();
  for (  Thread t : stressors) {
    t.start();
  }
  for (  Thread t : stressors) {
    t.join();
  }
  time=System.currentTimeMillis() - time;
  Reporter.log(""String_Node_Str"" + a.getClass().getSimpleName() + ""String_Node_Str""+ time+ ""String_Node_Str"");
  if (stressResult != null) {
    Assert.assertEquals(a.getResult(),stressResult);
  }
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}","@Test(dataProvider=""String_Node_Str"",groups={""String_Node_Str""}) @SuppressWarnings(""String_Node_Str"") public void accumulatorStressTest(final Accumulator a,final Long start,final Long end,final Number result,final Number stressResult,final Number zero) throws InterruptedException {
  List<Thread> stressors=new ArrayList<>();
  for (int i=0; i < STRESS_THREADS; i++) {
    stressors.add(new Thread(new AccumulatorStressor(a,start,end)));
  }
  long time=System.currentTimeMillis();
  for (  Thread t : stressors) {
    t.start();
  }
  for (  Thread t : stressors) {
    t.join();
  }
  time=System.currentTimeMillis() - time;
  Reporter.log(""String_Node_Str"" + a.getClass().getSimpleName() + ""String_Node_Str""+ time+ ""String_Node_Str"");
  if (stressResult != null) {
    Assert.assertEquals(a.getResult(),stressResult);
  }
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}",0.9671574178935448
59843,"/** 
 * Do the parsing itself by using JAXB
 * @return parsed JAXB scenario model
 * @throws PerfCakeException if XML is not valid or cannot be successfully parsed
 */
private org.perfcake.model.Scenario parse() throws PerfCakeException {
  try {
    final Source scenarioXML=new StreamSource(new ByteArrayInputStream(scenarioConfig.getBytes(Utils.getDefaultEncoding())));
    final String schemaFileName=""String_Node_Str"" + PerfCakeConst.XSD_SCHEMA_VERSION + ""String_Node_Str"";
    final URL backupUrl=new URL(""String_Node_Str"" + schemaFileName);
    URL scenarioXsdUrl=Utils.getResourceAsUrl(""String_Node_Str"" + schemaFileName);
    try {
      if (!(new File(scenarioXsdUrl.toURI())).exists()) {
        scenarioXsdUrl=backupUrl;
      }
    }
 catch (    URISyntaxException e) {
      scenarioXsdUrl=backupUrl;
    }
    final SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
    final Schema schema=schemaFactory.newSchema(scenarioXsdUrl);
    final JAXBContext context=JAXBContext.newInstance(org.perfcake.model.Scenario.class);
    final Unmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setSchema(schema);
    return (org.perfcake.model.Scenario)unmarshaller.unmarshal(scenarioXML);
  }
 catch (  SAXException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  JAXBException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  MalformedURLException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
}","/** 
 * Do the parsing itself by using JAXB
 * @return parsed JAXB scenario model
 * @throws PerfCakeException if XML is not valid or cannot be successfully parsed
 */
private org.perfcake.model.Scenario parse() throws PerfCakeException {
  try {
    final Source scenarioXML=new StreamSource(new ByteArrayInputStream(scenarioConfig.getBytes(Utils.getDefaultEncoding())));
    final String schemaFileName=""String_Node_Str"" + PerfCakeConst.XSD_SCHEMA_VERSION + ""String_Node_Str"";
    final URL backupUrl=new URL(""String_Node_Str"" + schemaFileName);
    URL scenarioXsdUrl=Utils.getResourceAsUrl(""String_Node_Str"" + schemaFileName);
    if (!(new File(scenarioXsdUrl.getFile())).exists()) {
      scenarioXsdUrl=backupUrl;
    }
    final SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
    final Schema schema=schemaFactory.newSchema(scenarioXsdUrl);
    final JAXBContext context=JAXBContext.newInstance(org.perfcake.model.Scenario.class);
    final Unmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setSchema(schema);
    return (org.perfcake.model.Scenario)unmarshaller.unmarshal(scenarioXML);
  }
 catch (  SAXException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  JAXBException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  MalformedURLException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
}",0.9658444022770398
59844,"public static String parseTemplate(final String template,final Properties properties){
  return new StringTemplate(template,properties).toString();
}","public static String parseTemplate(final String template,final Properties properties){
  return new StringTemplate(template,properties).toString(properties);
}",0.9675324675324676
59845,"@SuppressWarnings(""String_Node_Str"") public StringTemplate(final String template,final Properties properties){
  this.originalTemplate=template;
  Engine engine=getEngine();
  vars.put(""String_Node_Str"",System.getenv());
  vars.put(""String_Node_Str"",System.getProperties());
  if (properties != null) {
    vars.putAll(properties);
  }
  try {
    if (engine.parseTemplate(PREFIX + template).getChildren().size() > PREFIX_TOKENS + 1) {
      this.template=engine.parseTemplate(PREFIX + template);
    }
  }
 catch (  ParseException pe) {
    log.error(""String_Node_Str"",pe);
  }
}","@SuppressWarnings(""String_Node_Str"") public StringTemplate(final String template,final Properties properties){
  this.originalTemplate=template;
  vars.put(""String_Node_Str"",System.getenv());
  vars.put(""String_Node_Str"",System.getProperties());
  if (properties != null) {
    vars.putAll(properties);
  }
  try {
    final String firstPassTemplate=firstPass(template);
    final Template tmpTemplate=parseTemplate(firstPassTemplate);
    if (hasPlaceholders(tmpTemplate)) {
      this.template=tmpTemplate;
    }
 else {
      this.originalTemplate=firstPassTemplate;
    }
  }
 catch (  ParseException pe) {
    log.error(""String_Node_Str"",pe);
  }
}",0.6991078669910786
59846,"private String renderTemplate(final Map variables){
  if (template != null) {
    try {
      return template.evaluate(variables).toString();
    }
 catch (    ParseException pe) {
      log.error(""String_Node_Str"",pe);
    }
  }
  return originalTemplate;
}","private String renderTemplate(final Template template,final Map variables){
  if (template != null) {
    try {
      return template.evaluate(variables).toString();
    }
 catch (    ParseException pe) {
      log.error(""String_Node_Str"",pe);
    }
  }
  return originalTemplate;
}",0.9555555555555556
59847,"@Override public synchronized void reset(){
  max=Double.MIN_VALUE;
}","@Override public synchronized void reset(){
  max=Double.NEGATIVE_INFINITY;
}",0.8493150684931506
59848,"@Override public synchronized void reset(){
  min=Double.MAX_VALUE;
}","@Override public synchronized void reset(){
  min=Double.POSITIVE_INFINITY;
}",0.8356164383561644
59849,"@Override public Double getResult(){
  double min=Double.MAX_VALUE;
synchronized (fifo) {
    for (    Object o : fifo) {
      min=Math.min(min,(Double)o);
    }
  }
  return fifo.size() == 0 ? Double.NaN : min;
}","@Override public Double getResult(){
  double min=Double.POSITIVE_INFINITY;
synchronized (fifo) {
    for (    Object o : fifo) {
      min=Math.min(min,(Double)o);
    }
  }
  return fifo.size() == 0 ? Double.NaN : min;
}",0.944954128440367
59850,"@Test(dataProvider=""String_Node_Str"") @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void accumulatorGenericTest(final Accumulator a,final Long start,final Long end,final Double result,final Double stressResult,final Double zero){
  Assert.assertEquals(a.getResult(),zero);
  for (long i=start; i <= end; i=i + 1) {
    a.add((double)i);
  }
  Assert.assertEquals(a.getResult(),result);
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}","@Test(dataProvider=""String_Node_Str"") @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void accumulatorGenericTest(final Accumulator a,final Long start,final Long end,final Number result,final Number stressResult,final Number zero){
  Assert.assertEquals(a.getResult(),zero);
  try {
    for (long i=start; i <= end; i=i + 1) {
      a.add((double)i);
    }
  }
 catch (  ClassCastException cce) {
    for (long i=start; i <= end; i=i + 1) {
      a.add(i);
    }
  }
  Assert.assertEquals(a.getResult(),result);
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}",0.8260038240917782
59851,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  for (long i=start; i <= end; i=i + 1L) {
    a.add((double)i);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  try {
    for (long i=start; i <= end; i=i + 1L) {
      a.add((double)i);
    }
  }
 catch (  ClassCastException cce) {
    for (long i=start; i <= end; i=i + 1) {
      a.add(i);
    }
  }
}",0.6717171717171717
59852,"@Test(dataProvider=""String_Node_Str"",groups={""String_Node_Str""}) @SuppressWarnings(""String_Node_Str"") public void accumulatorStressTest(final Accumulator a,final Long start,final Long end,final Double result,final Double stressResult,final Double zero) throws InterruptedException {
  List<Thread> stressors=new ArrayList<>();
  for (int i=0; i < STRESS_THREADS; i++) {
    stressors.add(new Thread(new AccumulatorStressor(a,start,end)));
  }
  long time=System.currentTimeMillis();
  for (  Thread t : stressors) {
    t.start();
  }
  for (  Thread t : stressors) {
    t.join();
  }
  time=System.currentTimeMillis() - time;
  Reporter.log(""String_Node_Str"" + a.getClass().getSimpleName() + ""String_Node_Str""+ time+ ""String_Node_Str"");
  if (stressResult != null) {
    Assert.assertEquals(a.getResult(),stressResult);
  }
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}","@Test(dataProvider=""String_Node_Str"",groups={""String_Node_Str""}) @SuppressWarnings(""String_Node_Str"") public void accumulatorStressTest(final Accumulator a,final Long start,final Long end,final Number result,final Number stressResult,final Number zero) throws InterruptedException {
  List<Thread> stressors=new ArrayList<>();
  for (int i=0; i < STRESS_THREADS; i++) {
    stressors.add(new Thread(new AccumulatorStressor(a,start,end)));
  }
  long time=System.currentTimeMillis();
  for (  Thread t : stressors) {
    t.start();
  }
  for (  Thread t : stressors) {
    t.join();
  }
  time=System.currentTimeMillis() - time;
  Reporter.log(""String_Node_Str"" + a.getClass().getSimpleName() + ""String_Node_Str""+ time+ ""String_Node_Str"");
  if (stressResult != null) {
    Assert.assertEquals(a.getResult(),stressResult);
  }
  a.reset();
  Assert.assertEquals(a.getResult(),zero);
}",0.9671574178935448
59853,"/** 
 * Do the parsing itself by using JAXB
 * @return parsed JAXB scenario model
 * @throws PerfCakeException if XML is not valid or cannot be successfully parsed
 */
private org.perfcake.model.Scenario parse() throws PerfCakeException {
  try {
    final Source scenarioXML=new StreamSource(new ByteArrayInputStream(scenarioConfig.getBytes(Utils.getDefaultEncoding())));
    final String schemaFileName=""String_Node_Str"" + PerfCakeConst.XSD_SCHEMA_VERSION + ""String_Node_Str"";
    final URL backupUrl=new URL(""String_Node_Str"" + schemaFileName);
    URL scenarioXsdUrl=Utils.getResourceAsUrl(""String_Node_Str"" + schemaFileName);
    try {
      if (!(new File(scenarioXsdUrl.toURI())).exists()) {
        scenarioXsdUrl=backupUrl;
      }
    }
 catch (    URISyntaxException e) {
      scenarioXsdUrl=backupUrl;
    }
    final SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
    final Schema schema=schemaFactory.newSchema(scenarioXsdUrl);
    final JAXBContext context=JAXBContext.newInstance(org.perfcake.model.Scenario.class);
    final Unmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setSchema(schema);
    return (org.perfcake.model.Scenario)unmarshaller.unmarshal(scenarioXML);
  }
 catch (  SAXException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  JAXBException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  MalformedURLException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
}","/** 
 * Do the parsing itself by using JAXB
 * @return parsed JAXB scenario model
 * @throws PerfCakeException if XML is not valid or cannot be successfully parsed
 */
private org.perfcake.model.Scenario parse() throws PerfCakeException {
  try {
    final Source scenarioXML=new StreamSource(new ByteArrayInputStream(scenarioConfig.getBytes(Utils.getDefaultEncoding())));
    final String schemaFileName=""String_Node_Str"" + PerfCakeConst.XSD_SCHEMA_VERSION + ""String_Node_Str"";
    final URL backupUrl=new URL(""String_Node_Str"" + schemaFileName);
    URL scenarioXsdUrl=Utils.getResourceAsUrl(""String_Node_Str"" + schemaFileName);
    if (!(new File(scenarioXsdUrl.getFile())).exists()) {
      scenarioXsdUrl=backupUrl;
    }
    final SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
    final Schema schema=schemaFactory.newSchema(scenarioXsdUrl);
    final JAXBContext context=JAXBContext.newInstance(org.perfcake.model.Scenario.class);
    final Unmarshaller unmarshaller=context.createUnmarshaller();
    unmarshaller.setSchema(schema);
    return (org.perfcake.model.Scenario)unmarshaller.unmarshal(scenarioXML);
  }
 catch (  SAXException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  JAXBException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  MalformedURLException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new PerfCakeException(""String_Node_Str"",e);
  }
}",0.9658444022770398
59854,"public static String parseTemplate(final String template,final Properties properties){
  return new StringTemplate(template,properties).toString();
}","public static String parseTemplate(final String template,final Properties properties){
  return new StringTemplate(template,properties).toString(properties);
}",0.9675324675324676
59855,"@SuppressWarnings(""String_Node_Str"") public StringTemplate(final String template,final Properties properties){
  this.originalTemplate=template;
  Engine engine=getEngine();
  vars.put(""String_Node_Str"",System.getenv());
  vars.put(""String_Node_Str"",System.getProperties());
  if (properties != null) {
    vars.putAll(properties);
  }
  try {
    if (engine.parseTemplate(PREFIX + template).getChildren().size() > PREFIX_TOKENS + 1) {
      this.template=engine.parseTemplate(PREFIX + template);
    }
  }
 catch (  ParseException pe) {
    log.error(""String_Node_Str"",pe);
  }
}","@SuppressWarnings(""String_Node_Str"") public StringTemplate(final String template,final Properties properties){
  this.originalTemplate=template;
  vars.put(""String_Node_Str"",System.getenv());
  vars.put(""String_Node_Str"",System.getProperties());
  if (properties != null) {
    vars.putAll(properties);
  }
  try {
    final String firstPassTemplate=firstPass(template);
    final Template tmpTemplate=parseTemplate(firstPassTemplate);
    if (hasPlaceholders(tmpTemplate)) {
      this.template=tmpTemplate;
    }
 else {
      this.originalTemplate=firstPassTemplate;
    }
  }
 catch (  ParseException pe) {
    log.error(""String_Node_Str"",pe);
  }
}",0.6991078669910786
59856,"private String renderTemplate(final Map variables){
  if (template != null) {
    try {
      return template.evaluate(variables).toString();
    }
 catch (    ParseException pe) {
      log.error(""String_Node_Str"",pe);
    }
  }
  return originalTemplate;
}","private String renderTemplate(final Template template,final Map variables){
  if (template != null) {
    try {
      return template.evaluate(variables).toString();
    }
 catch (    ParseException pe) {
      log.error(""String_Node_Str"",pe);
    }
  }
  return originalTemplate;
}",0.9555555555555556
59857,"@Override public void report(final Measurement m) throws ReportingException {
  if (resultNames.isEmpty()) {
synchronized (this) {
      if (resultNames.isEmpty()) {
        presetResultNames(m);
        fileHeaders=getFileHeaders(m);
      }
    }
  }
  final String resultLine=getResultsLine(m);
synchronized (this) {
    final boolean csvFileExists=csvFile.exists();
    try (FileOutputStream fos=new FileOutputStream(csvFile,true);OutputStreamWriter osw=new OutputStreamWriter(fos,Utils.getDefaultEncoding());BufferedWriter bw=new BufferedWriter(osw)){
      if (!csvFileExists && !skipHeader) {
        bw.append(fileHeaders);
        bw.append(lineBreak);
      }
      if (linePrefix != null && !linePrefix.isEmpty()) {
        bw.append(linePrefix);
      }
      bw.append(resultLine);
      if (lineSuffix != null && !lineSuffix.isEmpty()) {
        bw.append(lineSuffix);
      }
      bw.append(lineBreak);
    }
 catch (    IOException ioe) {
      throw new ReportingException(String.format(""String_Node_Str"",csvFile.getPath()),ioe);
    }
  }
}","@Override public void report(final Measurement m) throws ReportingException {
  if (resultNames.isEmpty()) {
synchronized (this) {
      if (resultNames.isEmpty()) {
        presetResultNames(m);
        fileHeaders=getFileHeaders(m);
      }
    }
  }
  final StringBuilder sb=new StringBuilder();
  if (linePrefix != null && !linePrefix.isEmpty()) {
    sb.append(linePrefix);
  }
  sb.append(getResultsLine(m));
  if (lineSuffix != null && !lineSuffix.isEmpty()) {
    sb.append(lineSuffix);
  }
  sb.append(lineBreak);
synchronized (this) {
    final boolean csvFileExists=csvFile.exists();
    try (FileOutputStream fos=new FileOutputStream(csvFile,true);OutputStreamWriter osw=new OutputStreamWriter(fos,Utils.getDefaultEncoding());BufferedWriter bw=new BufferedWriter(osw)){
      if (!csvFileExists && !skipHeader) {
        bw.append(fileHeaders);
        bw.append(lineBreak);
      }
      bw.append(sb.toString());
    }
 catch (    IOException ioe) {
      throw new ReportingException(String.format(""String_Node_Str"",csvFile.getPath()),ioe);
    }
  }
}",0.748824082784572
59858,"@Override public void report(final Measurement m) throws ReportingException {
  if (resultNames.isEmpty()) {
synchronized (this) {
      if (resultNames.isEmpty()) {
        presetResultNames(m);
        fileHeaders=getFileHeaders(m);
      }
    }
  }
  final String resultLine=getResultsLine(m);
synchronized (this) {
    final boolean csvFileExists=csvFile.exists();
    try (FileOutputStream fos=new FileOutputStream(csvFile,true);OutputStreamWriter osw=new OutputStreamWriter(fos,Utils.getDefaultEncoding());BufferedWriter bw=new BufferedWriter(osw)){
      if (!csvFileExists) {
        bw.append(fileHeaders);
        bw.newLine();
      }
      bw.append(resultLine);
      bw.newLine();
    }
 catch (    IOException ioe) {
      throw new ReportingException(""String_Node_Str"" + csvFile.getPath(),ioe);
    }
  }
}","@Override public void report(final Measurement m) throws ReportingException {
  if (resultNames.isEmpty()) {
synchronized (this) {
      if (resultNames.isEmpty()) {
        presetResultNames(m);
        fileHeaders=getFileHeaders(m);
      }
    }
  }
  final String resultLine=getResultsLine(m);
synchronized (this) {
    final boolean csvFileExists=csvFile.exists();
    try (FileOutputStream fos=new FileOutputStream(csvFile,true);OutputStreamWriter osw=new OutputStreamWriter(fos,Utils.getDefaultEncoding());BufferedWriter bw=new BufferedWriter(osw)){
      if (!csvFileExists) {
        bw.append(fileHeaders);
        bw.newLine();
      }
      bw.append(resultLine);
      bw.newLine();
    }
 catch (    IOException ioe) {
      throw new ReportingException(String.format(""String_Node_Str"",csvFile.getPath()),ioe);
    }
  }
}",0.9885473176612416
59859,"/** 
 * Used to set the value of path.
 * @param path The path value to set.
 */
public void setPath(final String path){
  this.path=path;
  this.csvFile=new File(this.path);
}","/** 
 * Used to set the value of path. Once the destination opens the target file, the changes to this property are ignored.
 * @param path The path value to set.
 */
public void setPath(final String path){
synchronized (this) {
    if (csvFile != null) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
  this.path=path;
}",0.5161290322580645
59860,"@Override public void close(){
}","@Override public void close(){
synchronized (this) {
    csvFile=null;
  }
}",0.5925925925925926
59861,"/** 
 * The measurements are appended to the original file.
 */
@Override public void open(){
synchronized (this) {
    csvFile=new File(path);
    if (csvFile.exists()) {
switch (appendStrategy) {
case RENAME:
        String name=csvFile.getAbsolutePath();
      File f=null;
    int ind=1;
  do {
    f=new File(name + ""String_Node_Str"" + (ind++));
  }
 while (f.exists());
csvFile=f;
break;
case OVERWRITE:
csvFile.delete();
break;
case FORCE_APPEND:
default :
}
}
}
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + csvFile.getAbsolutePath());
}
}","/** 
 * The measurements are appended to the original file.
 */
@Override public void open(){
synchronized (this) {
    csvFile=new File(path);
    if (csvFile.exists()) {
switch (appendStrategy) {
case RENAME:
        String name=csvFile.getAbsolutePath();
      File f=null;
    int ind=1;
  do {
    f=new File(name + ""String_Node_Str"" + (ind++));
  }
 while (f.exists());
csvFile=f;
break;
case OVERWRITE:
if (!csvFile.delete()) {
log.warn(String.format(""String_Node_Str"",csvFile.getAbsolutePath()));
}
break;
case FORCE_APPEND:
default :
}
}
}
if (log.isDebugEnabled()) {
log.debug(String.format(""String_Node_Str"",path));
}
}",0.8662741799831791
59862,"@Test public void testPathChange(){
  destinationProperties.put(""String_Node_Str"",PATH);
  final String CHANGED_PATH=""String_Node_Str"";
  final File secondPath=new File(CHANGED_PATH);
  secondPath.deleteOnExit();
  if (secondPath.exists()) {
    secondPath.delete();
  }
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.open();
    Assert.assertEquals(destination.getPath(),PATH);
    Assert.assertFalse(secondPath.exists());
    destination.report(measurementWithoutDefault);
    destination.setPath(CHANGED_PATH);
    Assert.assertEquals(destination.getPath(),CHANGED_PATH);
    destination.report(measurementWithoutDefault);
    Assert.assertTrue(secondPath.exists());
    destination.close();
    assertCSVFileContent(""String_Node_Str"" + ITERATION + ""String_Node_Str"");
    assertCSVFileContent(secondPath,""String_Node_Str"" + ITERATION + ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","@Test public void testPathChange(){
  destinationProperties.put(""String_Node_Str"",PATH);
  final String CHANGED_PATH=""String_Node_Str"";
  final File secondPath=new File(CHANGED_PATH);
  secondPath.deleteOnExit();
  if (secondPath.exists()) {
    secondPath.delete();
  }
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.open();
    Assert.assertEquals(destination.getPath(),PATH);
    Assert.assertFalse(secondPath.exists());
    destination.report(measurementWithoutDefault);
    boolean except=false;
    try {
      destination.setPath(CHANGED_PATH);
    }
 catch (    UnsupportedOperationException expected) {
      except=true;
    }
    Assert.assertTrue(except);
    destination.close();
    destination.setPath(CHANGED_PATH);
    destination.open();
    Assert.assertEquals(destination.getPath(),CHANGED_PATH);
    destination.report(measurementWithoutDefault);
    Assert.assertTrue(secondPath.exists());
    destination.close();
    assertCSVFileContent(""String_Node_Str"" + ITERATION + ""String_Node_Str"");
    assertCSVFileContent(secondPath,""String_Node_Str"" + ITERATION + ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9058365758754864
59863,"public MessageTemplate(final Message message,final long multiplicity,final List<MessageValidator> validators){
  this.message=message;
  prepareMatcher();
  this.multiplicity=multiplicity;
  this.validators=validators;
}","public MessageTemplate(final Message message,final long multiplicity,final List<MessageValidator> validators){
  this.message=message;
  preparePattern();
  this.multiplicity=multiplicity;
  this.validators=validators;
}",0.968181818181818
59864,"public Matcher getMatcher(){
  return matcher;
}","public Matcher getMatcher(String text){
  return pattern != null ? pattern.matcher(text) : null;
}",0.6575342465753424
59865,"public Message getFilteredMessage(final Properties props){
  if (getMatcher() != null) {
    final Message m=MessageFactory.getMessage();
    String text=this.getMessage().getPayload().toString();
    text=Utils.filterProperties(text,getMatcher(),new DefaultPropertyGetter(props));
    m.setPayload(text);
    return m;
  }
 else {
    return message;
  }
}","public Message getFilteredMessage(final Properties props){
  if (pattern != null) {
    final Message m=MessageFactory.getMessage();
    String text=this.getMessage().getPayload().toString();
    text=Utils.filterProperties(text,getMatcher(text),new DefaultPropertyGetter(props));
    m.setPayload(text);
    return m;
  }
 else {
    return message;
  }
}",0.5273492286115007
59866,"@Override public void report(final Measurement m) throws ReportingException {
  StringBuffer sb=new StringBuffer();
  if (csvFile == null) {
    csvFile=new File(path);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + csvFile.getPath());
    }
  }
  final Map<String,Object> results=m.getAll();
  Object defaultResult=m.get();
  if (!csvFile.exists()) {
    sb.append(""String_Node_Str"");
    sb.append(delimiter);
    sb.append(""String_Node_Str"");
    if (defaultResult != null) {
      sb.append(delimiter);
      sb.append(Measurement.DEFAULT_RESULT);
    }
    for (    String key : results.keySet()) {
      if (!key.equals(Measurement.DEFAULT_RESULT)) {
        resultNames.add(key);
        sb.append(delimiter);
        sb.append(key);
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(Utils.timeToHMS(m.getTime()));
  sb.append(delimiter);
  sb.append(m.getIteration());
  if (defaultResult != null) {
    sb.append(delimiter);
    if (defaultResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)defaultResult).getNumber());
    }
 else {
      sb.append(defaultResult);
    }
  }
  Object currentResult;
  for (  String resultName : resultNames) {
    sb.append(delimiter);
    currentResult=results.get(resultName);
    if (currentResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)currentResult).getNumber());
    }
 else {
      sb.append(currentResult);
    }
  }
  try (BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFile,true),Utils.getDefaultEncoding()))){
    bw.append(sb.toString());
    bw.newLine();
  }
 catch (  IOException ioe) {
    throw new ReportingException(""String_Node_Str"" + csvFile.getPath(),ioe);
  }
}","@Override public void report(final Measurement m) throws ReportingException {
  final String delim=delimiter;
synchronized (this) {
    final StringBuffer sb=new StringBuffer();
    final Map<String,Object> results=m.getAll();
    final Object defaultResult=m.get();
    if (resultNames.isEmpty()) {
      for (      String key : results.keySet()) {
        if (!key.equals(Measurement.DEFAULT_RESULT)) {
          resultNames.add(key);
        }
      }
    }
    final boolean csvFileExists=csvFile.exists();
    if (!csvFileExists) {
      sb.append(""String_Node_Str"");
      sb.append(delim);
      sb.append(""String_Node_Str"");
      if (defaultResult != null) {
        sb.append(delim);
        sb.append(Measurement.DEFAULT_RESULT);
      }
      for (      String key : resultNames) {
        sb.append(delim);
        sb.append(key);
      }
      sb.append(""String_Node_Str"");
    }
    sb.append(Utils.timeToHMS(m.getTime()));
    sb.append(delim);
    sb.append(m.getIteration() + 1);
    if (defaultResult != null) {
      sb.append(delim);
      if (defaultResult instanceof Quantity<?>) {
        sb.append(((Quantity<?>)defaultResult).getNumber());
      }
 else {
        sb.append(defaultResult);
      }
    }
    Object currentResult;
    for (    String resultName : resultNames) {
      sb.append(delim);
      currentResult=results.get(resultName);
      if (currentResult instanceof Quantity<?>) {
        sb.append(((Quantity<?>)currentResult).getNumber());
      }
 else {
        sb.append(currentResult);
      }
    }
    try (BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFile,true),Utils.getDefaultEncoding()))){
      bw.append(sb.toString());
      bw.newLine();
    }
 catch (    IOException ioe) {
      throw new ReportingException(""String_Node_Str"" + csvFile.getPath(),ioe);
    }
  }
}",0.6623955431754874
59867,"@Override public void open(){
}","@Override public void open(){
  csvFile=new File(path);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + csvFile.getPath());
  }
}",0.3522727272727273
59868,"@Test public void testDefaultProperties(){
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.report(measurement);
    assertCSVFileContent(""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","@Test public void testDefaultProperties(){
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.open();
    destination.report(measurement);
    destination.close();
    assertCSVFileContent(""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.8778625954198473
59869,"@BeforeClass public void beforeClass(){
  measurement=new Measurement(42,123456000,12345);
  measurement.set(new Quantity<Double>(1111.11,""String_Node_Str""));
  measurement.set(""String_Node_Str"",new Quantity<Double>(222.22,""String_Node_Str""));
  measurementWithoutDefault=new Measurement(42,123456000,12345);
  measurementWithoutDefault.set(""String_Node_Str"",new Quantity<Number>(100,""String_Node_Str""));
  File csvOutputPath=new File(""String_Node_Str"");
  if (!csvOutputPath.exists()) {
    csvOutputPath.mkdir();
  }
  csvFile=new File(csvOutputPath,""String_Node_Str"");
}","@BeforeClass public void beforeClass(){
  measurement=new Measurement(42,123456000,ITERATION - 1);
  measurement.set(new Quantity<Double>(1111.11,""String_Node_Str""));
  measurement.set(""String_Node_Str"",new Quantity<Double>(222.22,""String_Node_Str""));
  measurementWithoutDefault=new Measurement(42,123456000,ITERATION - 1);
  measurementWithoutDefault.set(""String_Node_Str"",new Quantity<Number>(100,""String_Node_Str""));
  measurementStringResult=new Measurement(42,123456000,ITERATION - 1);
  measurementStringResult.set(""String_Node_Str"");
  measurementStringResult.set(""String_Node_Str"",""String_Node_Str"");
  File csvOutputPath=new File(""String_Node_Str"");
  if (!csvOutputPath.exists()) {
    csvOutputPath.mkdir();
  }
  csvFile=new File(csvOutputPath,""String_Node_Str"");
}",0.698741672834937
59870,"@Test public void testDestinationReport(){
  destinationProperties.put(""String_Node_Str"",""String_Node_Str"");
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.report(measurement);
    assertCSVFileContent(""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","@Test public void testDestinationReport(){
  destinationProperties.put(""String_Node_Str"",""String_Node_Str"");
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.open();
    destination.report(measurement);
    destination.close();
    assertCSVFileContent(""String_Node_Str"" + Measurement.DEFAULT_RESULT + ""String_Node_Str""+ ITERATION+ ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.8915254237288136
59871,"@Test public void testNoDefaultResultMeasurement(){
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.report(measurementWithoutDefault);
    assertCSVFileContent(""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}","@Test public void testNoDefaultResultMeasurement(){
  try {
    CSVDestination destination=(CSVDestination)ObjectFactory.summonInstance(CSVDestination.class.getName(),destinationProperties);
    destination.open();
    destination.report(measurementWithoutDefault);
    destination.close();
    assertCSVFileContent(""String_Node_Str"" + ITERATION + ""String_Node_Str"");
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException|InvocationTargetException|ReportingException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
}",0.9226361031518624
59872,"/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iterations even though some of them might still be pending their execution. The value is always 1 number higher than the number of iterations executed (as the number can be used for a new iteration).
 * @return Current iteration counter value
 */
public long getIteration(){
  return iterations.get();
}","/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iterations even though some of them might still be pending their execution.
 * @return Current iteration counter value, -1 if there was no iteration so far.
 */
public long getIteration(){
  return iterations.get() - 1;
}",0.6795580110497238
59873,"@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(timeFormat.format(time));
  sb.append(""String_Node_Str"");
  sb.append(iteration);
  sb.append(""String_Node_Str"");
  sb.append(percentage);
  sb.append(""String_Node_Str"");
  Object defaultResult=get();
  if (defaultResult != null) {
    sb.append(""String_Node_Str"");
    sb.append(get());
    sb.append(""String_Node_Str"");
  }
  for (  Entry<String,Object> entry : results.entrySet()) {
    if (!entry.getKey().equals(DEFAULT_RESULT)) {
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey());
      sb.append(""String_Node_Str"");
      sb.append(entry.getValue());
      sb.append(""String_Node_Str"");
    }
  }
  return sb.toString();
}","@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(Utils.timeToHMS(time));
  sb.append(""String_Node_Str"");
  sb.append(iteration);
  sb.append(""String_Node_Str"");
  sb.append(percentage);
  sb.append(""String_Node_Str"");
  Object defaultResult=get();
  if (defaultResult != null) {
    sb.append(""String_Node_Str"");
    sb.append(get());
    sb.append(""String_Node_Str"");
  }
  for (  Entry<String,Object> entry : results.entrySet()) {
    if (!entry.getKey().equals(DEFAULT_RESULT)) {
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey());
      sb.append(""String_Node_Str"");
      sb.append(entry.getValue());
      sb.append(""String_Node_Str"");
    }
  }
  return sb.toString();
}",0.9842931937172776
59874,"protected MeasurementUnit(final long iteration){
  this.iteration=iteration;
}","/** 
 * Constructor is protected. Use   {@link org.perfcake.nreporting.ReportManager#newMeasurementUnit()} to obtain a new instance.
 * @param iteration Current iteration number.
 */
protected MeasurementUnit(final long iteration){
  this.iteration=iteration;
}",0.4601769911504424
59875,"public long getLastTime(){
}","/** 
 * Gets time of the last measurement (time period between calls to   {@link #startMeasure()} and {@link #stopMeasure()} in milliseconds.
 * @return Time of the last measurement in milliseconds.
 */
public long getLastTime(){
}",0.2162162162162162
59876,"public void appendResult(final String label,final Object value){
  measurementResults.put(label,value);
}","/** 
 * Append a custom result.
 * @param label The label of the result.
 * @param value The value of the result.
 */
public void appendResult(final String label,final Object value){
  measurementResults.put(label,value);
}",0.6402439024390244
59877,"public void stopMeasure(){
  stopTime=System.nanoTime();
  totalTime=totalTime + getLastTime();
}","/** 
 * Stopts measuring.
 */
public void stopMeasure(){
  stopTime=System.nanoTime();
  totalTime=totalTime + getLastTime();
}",0.8660714285714286
59878,"public long getIteration(){
  return iteration;
}","/** 
 * Gets the number of current iteration of this Measurement Unit.
 * @return The number of iteration.
 */
public long getIteration(){
  return iteration;
}",0.4688995215311005
59879,"public void startMeasure(){
  startTime=System.nanoTime();
  stopTime=-1;
}","/** 
 * Starts measuring. This is independent on current system time.
 */
public void startMeasure(){
  startTime=System.nanoTime();
  stopTime=-1;
}",0.6696428571428571
59880,"public Object getResult(final String label){
  return measurementResults.get(label);
}","/** 
 * Get a custom result for the given label.
 * @param label The label of the custom result.
 * @return The value for the given custom result.
 */
public Object getResult(final String label){
  return measurementResults.get(label);
}",0.5325077399380805
59881,"public Map<String,Object> getResults(){
  return Collections.unmodifiableMap(measurementResults);
}","/** 
 * Get immutable map with all the custom results.
 * @return An immutable copy of the custom results map.
 */
public Map<String,Object> getResults(){
  return Collections.unmodifiableMap(measurementResults);
}",0.6325878594249201
59882,"public long getTotalTime(){
  return totalTime;
}","/** 
 * Gets total time measured during all mesurements done by this Measurement Unit (all time periods between calls to   {@link #startMeasure()} and {@link #stopMeasure()} in milliseconds.
 * @return The total time measured by this unit in milliseconds.
 */
public long getTotalTime(){
  return totalTime;
}",0.2737430167597765
59883,"/** 
 * Used to set the value of delimiter.
 * @param delimiter The delimiter value to set.
 */
public void setDelimiter(String delimiter){
  this.delimiter=delimiter;
}","/** 
 * Used to set the value of delimiter.
 * @param delimiter The delimiter value to set.
 */
public void setDelimiter(final String delimiter){
  this.delimiter=delimiter;
}",0.9825581395348836
59884,"@Override public void report(final Measurement m) throws ReportingException {
  StringBuffer sb=new StringBuffer();
  if (csvFile == null) {
    csvFile=new File(path);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + csvFile.getPath());
    }
  }
  final Map<String,Object> results=m.getAll();
  Object defaultResult=m.get();
  if (!csvFile.exists()) {
    sb.append(""String_Node_Str"");
    sb.append(delimiter);
    sb.append(""String_Node_Str"");
    if (defaultResult != null) {
      sb.append(delimiter);
      sb.append(Measurement.DEFAULT_RESULT);
    }
    for (    String key : results.keySet()) {
      if (!key.equals(Measurement.DEFAULT_RESULT)) {
        resultNames.add(key);
        sb.append(delimiter);
        sb.append(key);
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(timeFormat.format(m.getTime()));
  sb.append(delimiter);
  sb.append(m.getIteration());
  if (defaultResult != null) {
    sb.append(delimiter);
    if (defaultResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)defaultResult).getNumber());
    }
 else {
      sb.append(defaultResult);
    }
  }
  Object currentResult;
  for (  String resultName : resultNames) {
    sb.append(delimiter);
    currentResult=results.get(resultName);
    if (currentResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)currentResult).getNumber());
    }
 else {
      sb.append(currentResult);
    }
  }
  try (BufferedWriter bw=new BufferedWriter(new FileWriter(csvFile,true))){
    bw.append(sb.toString());
    bw.newLine();
  }
 catch (  IOException ioe) {
    throw new ReportingException(""String_Node_Str"" + csvFile.getPath(),ioe);
  }
}","@Override public void report(final Measurement m) throws ReportingException {
  StringBuffer sb=new StringBuffer();
  if (csvFile == null) {
    csvFile=new File(path);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + csvFile.getPath());
    }
  }
  final Map<String,Object> results=m.getAll();
  Object defaultResult=m.get();
  if (!csvFile.exists()) {
    sb.append(""String_Node_Str"");
    sb.append(delimiter);
    sb.append(""String_Node_Str"");
    if (defaultResult != null) {
      sb.append(delimiter);
      sb.append(Measurement.DEFAULT_RESULT);
    }
    for (    String key : results.keySet()) {
      if (!key.equals(Measurement.DEFAULT_RESULT)) {
        resultNames.add(key);
        sb.append(delimiter);
        sb.append(key);
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(Utils.timeToHMS(m.getTime()));
  sb.append(delimiter);
  sb.append(m.getIteration());
  if (defaultResult != null) {
    sb.append(delimiter);
    if (defaultResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)defaultResult).getNumber());
    }
 else {
      sb.append(defaultResult);
    }
  }
  Object currentResult;
  for (  String resultName : resultNames) {
    sb.append(delimiter);
    currentResult=results.get(resultName);
    if (currentResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)currentResult).getNumber());
    }
 else {
      sb.append(currentResult);
    }
  }
  try (BufferedWriter bw=new BufferedWriter(new FileWriter(csvFile,true))){
    bw.append(sb.toString());
    bw.newLine();
  }
 catch (  IOException ioe) {
    throw new ReportingException(""String_Node_Str"" + csvFile.getPath(),ioe);
  }
}",0.9904306220095692
59885,"/** 
 * Used to set the value of path.
 * @param path The path value to set.
 */
public void setPath(String path){
  this.path=path;
  this.csvFile=new File(this.path);
}","/** 
 * Used to set the value of path.
 * @param path The path value to set.
 */
public void setPath(final String path){
  this.path=path;
  this.csvFile=new File(this.path);
}",0.9826589595375722
59886,"/** 
 * Reports a single   {@link org.perfcake.nreporting.MeasurementUnit} to this reporter. This calls {@link #doReport(MeasurementUnit)} overrided by a child,accumulates results and reports iteration change and percentage change (if any).
 */
@Override public final void report(final MeasurementUnit mu) throws ReportingException {
  if (runInfo == null) {
    throw new ReportingException(""String_Node_Str"");
  }
  doReport(mu);
  accumulateResults(mu.getResults());
  reportIterations(mu.getIteration());
  final long percentage=Math.round(runInfo.getPercentage());
  if (percentage != lastPercentage) {
    lastPercentage=percentage;
    reportPercentage(percentage);
  }
}","/** 
 * Reports a single   {@link org.perfcake.nreporting.MeasurementUnit} to this reporter. This calls {@link #doReport(MeasurementUnit)} overrided by a child,accumulates results and reports iteration change and percentage change (if any).
 */
@Override public final void report(final MeasurementUnit mu) throws ReportingException {
  if (runInfo == null) {
    throw new ReportingException(""String_Node_Str"");
  }
  doReport(mu);
  accumulateResults(mu.getResults());
  reportIterations(mu.getIteration());
  final long percentage=(long)Math.floor(runInfo.getPercentage());
  if (percentage != lastPercentage) {
    lastPercentage=percentage;
    reportPercentage(percentage);
  }
}",0.9882525697503672
59887,"@SuppressWarnings(""String_Node_Str"") @Override protected Accumulator getAccumulator(final String key,final Class clazz){
  if (clazz.getName().equals(Double.class)) {
    return new AvgAccumulator();
  }
 else {
    return new LastValueAccumulator();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected Accumulator getAccumulator(final String key,final Class clazz){
  if (Double.class.equals(clazz)) {
    return new AvgAccumulator();
  }
 else {
    return new LastValueAccumulator();
  }
}",0.9163346613545816
59888,"@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration() - 1);
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}","@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration());
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}",0.9948453608247424
59889,"/** 
 * Starts a new measurement run. This resets the iteration counter.
 */
public void start(){
  reset();
  startTime=System.currentTimeMillis();
}","/** 
 * Starts a new measurement run. This resets the iteration counter.
 */
public void start(){
  reset();
  startTime=System.currentTimeMillis();
  endTime=-1;
}",0.9554140127388536
59890,"/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iteration even though some of them might still be pending their execution.
 * @return Current iteration counter value
 */
public long getIteration(){
  return iterations.get();
}","/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iterations even though some of them might still be pending their execution. The value is always 1 number higher than the number of iterations executed (as the number can be used for a new iteration).
 * @return Current iteration counter value
 */
public long getIteration(){
  return iterations.get();
}",0.8164464023494861
59891,"public void stop(){
  started=false;
  runInfo.stop();
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.stop();
  }
  rwLock.writeLock().unlock();
}","public void stop(){
  runInfo.stop();
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.stop();
  }
  rwLock.writeLock().unlock();
}",0.9470404984423676
59892,"public void report(final MeasurementUnit mu) throws ReportingException {
  if (started) {
    rwLock.readLock().lock();
    for (    Reporter r : reporters) {
      r.report(mu);
    }
    rwLock.readLock().unlock();
  }
 else {
    log.debug(""String_Node_Str"");
  }
}","public void report(final MeasurementUnit mu) throws ReportingException {
  if (runInfo.isRunning()) {
    rwLock.readLock().lock();
    for (    Reporter r : reporters) {
      r.report(mu);
    }
    rwLock.readLock().unlock();
  }
 else {
    log.debug(""String_Node_Str"");
  }
}",0.9525547445255474
59893,"public void start(){
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.start();
  }
  rwLock.writeLock().unlock();
  started=true;
  runInfo.start();
}","public void start(){
  runInfo.start();
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.start();
  }
  rwLock.writeLock().unlock();
}",0.8343558282208589
59894,"/** 
 * Gets a value of an accumulated result.
 * @param key Key in the results hash map.
 * @return The value associated with the given key.
 */
protected Object getAccumulatedResult(final String key){
  return accumulatedResults.get(key).getResult();
}","/** 
 * Gets a value of an accumulated result.
 * @param key Key in the results hash map.
 * @return The value associated with the given key.
 */
protected Object getAccumulatedResult(final String key){
  return accumulatedResults.get(key) == null ? null : accumulatedResults.get(key).getResult();
}",0.918625678119349
59895,"@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration());
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}","@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration() - 1);
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}",0.9948453608247424
59896,"/** 
 * Used to set the value of property2.
 * @param property2 The property2 value to set.
 */
public void setProperty2(String property2){
  this.property2=property2;
}","/** 
 * Used to set the value of property2.
 * @param property2 The property2 value to set.
 */
public void setProperty2(final String property2){
  this.property2=property2;
}",0.9825581395348836
59897,"/** 
 * Used to set the value of property.
 * @param property The property value to set.
 */
public void setProperty(String property){
  this.property=property;
}","/** 
 * Used to set the value of property.
 * @param property The property value to set.
 */
public void setProperty(final String property){
  this.property=property;
}",0.9818181818181818
59898,"@Override public void report(Measurement m) throws ReportingException {
  System.out.println(m.toString());
}","@Override public void report(final Measurement m) throws ReportingException {
  lastMethod=""String_Node_Str"";
  lastMeasurement=m;
  System.out.println(m.toString());
  try {
    throw new Throwable(""String_Node_Str"");
  }
 catch (  Throwable t) {
    StringWriter sw=new StringWriter();
    t.printStackTrace(new PrintWriter(sw));
    if (sw.toString().contains(""String_Node_Str"")) {
      lastType=PeriodType.ITERATION;
    }
 else     if (sw.toString().contains(""String_Node_Str"")) {
      lastType=PeriodType.PERCENTAGE;
    }
 else     if (sw.toString().contains(""String_Node_Str"")) {
      lastType=PeriodType.TIME;
    }
 else {
      t.printStackTrace();
      lastType=null;
    }
  }
}",0.2611940298507462
59899,"@Override public void close(){
}","@Override public void close(){
  lastMethod=""String_Node_Str"";
}",0.6666666666666666
59900,"@Override public void open(){
}","@Override public void open(){
  lastMethod=""String_Node_Str"";
}",0.6595744680851063
59901,"@Test public void f() throws ReportingException, InterruptedException {
  ReportManager rm=new ReportManager();
  RunInfo ri=new RunInfo(new Period(PeriodType.ITERATION,1000));
  ResponseTimeReporter r1=new ResponseTimeReporter();
  ResponseTimeReporter r2=new ResponseTimeReporter();
  DummyReporter dr=new DummyReporter();
  rm.registerReporter(r1);
  rm.setRunInfo(ri);
  rm.registerReporter(r2);
  Assert.assertEquals(r1.runInfo,ri);
  Assert.assertEquals(r2.runInfo,ri);
  rm.unregisterReporter(r2);
  rm.registerReporter(r1);
  Assert.assertEquals(rm.getReporters().size(),1);
  rm.registerReporter(r2);
  Assert.assertTrue(rm.getReporters().contains(r1));
  Assert.assertTrue(rm.getReporters().contains(r2));
  rm.registerReporter(dr);
  MeasurementUnit mu=null;
  for (int i=0; i <= 500; i++) {
    mu=rm.newMeasurementUnit();
  }
  Assert.assertEquals(mu.getIteration(),500);
  Assert.assertEquals(mu.getLastTime(),-1);
  Assert.assertEquals(mu.getTotalTime(),0);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 600);
  Assert.assertTrue(mu.getLastTime() < 600);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 1200);
  Assert.assertTrue(mu.getLastTime() < 600);
  Assert.assertEquals(ri.getPercentage(),0d);
  Assert.assertFalse(ri.isRunning());
  Assert.assertEquals(ri.getStartTime(),-1);
  Assert.assertEquals(ri.getEndTime(),-1);
  Assert.assertEquals(ri.getRunTime(),0);
  rm.report(mu);
  Assert.assertNull(dr.getLastMethod(),""String_Node_Str"");
  rm.start();
  rm.report(mu);
  Assert.assertTrue(ri.isRunning());
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.reset();
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.stop();
  Assert.assertFalse(ri.isRunning());
}","@Test public void f() throws ReportingException, InterruptedException {
  ReportManager rm=new ReportManager();
  RunInfo ri=new RunInfo(new Period(PeriodType.ITERATION,1000));
  ResponseTimeReporter r1=new ResponseTimeReporter();
  ResponseTimeReporter r2=new ResponseTimeReporter();
  DummyReporter dr=new DummyReporter();
  rm.registerReporter(r1);
  rm.setRunInfo(ri);
  rm.registerReporter(r2);
  Assert.assertEquals(r1.runInfo,ri);
  Assert.assertEquals(r2.runInfo,ri);
  rm.unregisterReporter(r2);
  rm.registerReporter(r1);
  Assert.assertEquals(rm.getReporters().size(),1);
  rm.registerReporter(r2);
  Assert.assertTrue(rm.getReporters().contains(r1));
  Assert.assertTrue(rm.getReporters().contains(r2));
  rm.registerReporter(dr);
  MeasurementUnit mu=null;
  for (int i=0; i <= 500; i++) {
    mu=rm.newMeasurementUnit();
  }
  Assert.assertEquals(mu.getIteration(),500);
  Assert.assertEquals(mu.getLastTime(),-1);
  Assert.assertEquals(mu.getTotalTime(),0);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 600);
  Assert.assertTrue(mu.getLastTime() < 600);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 1200);
  Assert.assertTrue(mu.getLastTime() < 600);
  Assert.assertEquals(ri.getPercentage(),0d);
  Assert.assertFalse(ri.isRunning());
  Assert.assertEquals(ri.getStartTime(),-1);
  Assert.assertEquals(ri.getEndTime(),-1);
  Assert.assertEquals(ri.getRunTime(),0);
  rm.report(mu);
  Assert.assertNull(dr.getLastMethod(),""String_Node_Str"");
  rm.start();
  rm.report(mu);
  long startTime=ri.getStartTime();
  Assert.assertTrue(ri.isRunning());
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.reset();
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.stop();
  Assert.assertFalse(ri.isRunning());
  DummyDestination d1=new DummyDestination();
  DummyDestination d2=new DummyDestination();
  r1.registerDestination(d1,new Period(PeriodType.ITERATION,100));
  r1.registerDestination(d2,new Period(PeriodType.PERCENTAGE,10));
  r1.registerDestination(d1,new Period(PeriodType.TIME,2000));
  Set<BoundPeriod<Destination>> bp=new HashSet<>();
  bp.add(new BoundPeriod<Destination>(PeriodType.ITERATION,100,d1));
  bp.add(new BoundPeriod<Destination>(PeriodType.PERCENTAGE,10,d2));
  bp.add(new BoundPeriod<Destination>(PeriodType.TIME,2000,d1));
  Assert.assertTrue(r1.getReportingPeriods().containsAll(bp));
  Assert.assertEquals(ri.getPercentage(),0d);
  Assert.assertFalse(ri.isRunning());
  Assert.assertEquals(ri.getStartTime(),startTime);
  Assert.assertTrue(ri.getEndTime() > ri.getStartTime());
  Assert.assertTrue(ri.getRunTime() == ri.getEndTime() - ri.getStartTime());
  rm.start();
  mu=null;
  for (int i=0; i <= 100; i++) {
    mu=rm.newMeasurementUnit();
    mu.startMeasure();
    mu.appendResult(""String_Node_Str"",(double)i);
    Thread.sleep(10);
    mu.stopMeasure();
    rm.report(mu);
  }
  Assert.assertEquals(mu.getIteration(),100);
  Assert.assertEquals(mu.getLastTime(),10);
  Assert.assertEquals(mu.getTotalTime(),10);
  Assert.assertEquals(d1.getLastType(),PeriodType.ITERATION);
  Assert.assertEquals(d2.getLastType(),PeriodType.PERCENTAGE);
  Thread.sleep(2500);
  Assert.assertEquals(d1.getLastType(),PeriodType.TIME);
  rm.stop();
}",0.7094017094017094
59902,"/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iterations even though some of them might still be pending their execution. The value is always 1 number higher than the number of iterations executed (as the number can be used for a new iteration).
 * @return Current iteration counter value
 */
public long getIteration(){
  return iterations.get();
}","/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iterations even though some of them might still be pending their execution.
 * @return Current iteration counter value, -1 if there was no iteration so far.
 */
public long getIteration(){
  return iterations.get() - 1;
}",0.6795580110497238
59903,"@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(timeFormat.format(time));
  sb.append(""String_Node_Str"");
  sb.append(iteration);
  sb.append(""String_Node_Str"");
  sb.append(percentage);
  sb.append(""String_Node_Str"");
  Object defaultResult=get();
  if (defaultResult != null) {
    sb.append(""String_Node_Str"");
    sb.append(get());
    sb.append(""String_Node_Str"");
  }
  for (  Entry<String,Object> entry : results.entrySet()) {
    if (!entry.getKey().equals(DEFAULT_RESULT)) {
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey());
      sb.append(""String_Node_Str"");
      sb.append(entry.getValue());
      sb.append(""String_Node_Str"");
    }
  }
  return sb.toString();
}","@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(Utils.timeToHMS(time));
  sb.append(""String_Node_Str"");
  sb.append(iteration);
  sb.append(""String_Node_Str"");
  sb.append(percentage);
  sb.append(""String_Node_Str"");
  Object defaultResult=get();
  if (defaultResult != null) {
    sb.append(""String_Node_Str"");
    sb.append(get());
    sb.append(""String_Node_Str"");
  }
  for (  Entry<String,Object> entry : results.entrySet()) {
    if (!entry.getKey().equals(DEFAULT_RESULT)) {
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey());
      sb.append(""String_Node_Str"");
      sb.append(entry.getValue());
      sb.append(""String_Node_Str"");
    }
  }
  return sb.toString();
}",0.9842931937172776
59904,"protected MeasurementUnit(final long iteration){
  this.iteration=iteration;
}","/** 
 * Constructor is protected. Use   {@link org.perfcake.nreporting.ReportManager#newMeasurementUnit()} to obtain a new instance.
 * @param iteration Current iteration number.
 */
protected MeasurementUnit(final long iteration){
  this.iteration=iteration;
}",0.4601769911504424
59905,"public long getLastTime(){
}","/** 
 * Gets time of the last measurement (time period between calls to   {@link #startMeasure()} and {@link #stopMeasure()} in milliseconds.
 * @return Time of the last measurement in milliseconds.
 */
public long getLastTime(){
}",0.2162162162162162
59906,"public void appendResult(final String label,final Object value){
  measurementResults.put(label,value);
}","/** 
 * Append a custom result.
 * @param label The label of the result.
 * @param value The value of the result.
 */
public void appendResult(final String label,final Object value){
  measurementResults.put(label,value);
}",0.6402439024390244
59907,"public void stopMeasure(){
  stopTime=System.nanoTime();
  totalTime=totalTime + getLastTime();
}","/** 
 * Stopts measuring.
 */
public void stopMeasure(){
  stopTime=System.nanoTime();
  totalTime=totalTime + getLastTime();
}",0.8660714285714286
59908,"public long getIteration(){
  return iteration;
}","/** 
 * Gets the number of current iteration of this Measurement Unit.
 * @return The number of iteration.
 */
public long getIteration(){
  return iteration;
}",0.4688995215311005
59909,"public void startMeasure(){
  startTime=System.nanoTime();
  stopTime=-1;
}","/** 
 * Starts measuring. This is independent on current system time.
 */
public void startMeasure(){
  startTime=System.nanoTime();
  stopTime=-1;
}",0.6696428571428571
59910,"public Object getResult(final String label){
  return measurementResults.get(label);
}","/** 
 * Get a custom result for the given label.
 * @param label The label of the custom result.
 * @return The value for the given custom result.
 */
public Object getResult(final String label){
  return measurementResults.get(label);
}",0.5325077399380805
59911,"public Map<String,Object> getResults(){
  return Collections.unmodifiableMap(measurementResults);
}","/** 
 * Get immutable map with all the custom results.
 * @return An immutable copy of the custom results map.
 */
public Map<String,Object> getResults(){
  return Collections.unmodifiableMap(measurementResults);
}",0.6325878594249201
59912,"public long getTotalTime(){
  return totalTime;
}","/** 
 * Gets total time measured during all mesurements done by this Measurement Unit (all time periods between calls to   {@link #startMeasure()} and {@link #stopMeasure()} in milliseconds.
 * @return The total time measured by this unit in milliseconds.
 */
public long getTotalTime(){
  return totalTime;
}",0.2737430167597765
59913,"/** 
 * Used to set the value of delimiter.
 * @param delimiter The delimiter value to set.
 */
public void setDelimiter(String delimiter){
  this.delimiter=delimiter;
}","/** 
 * Used to set the value of delimiter.
 * @param delimiter The delimiter value to set.
 */
public void setDelimiter(final String delimiter){
  this.delimiter=delimiter;
}",0.9825581395348836
59914,"@Override public void report(final Measurement m) throws ReportingException {
  StringBuffer sb=new StringBuffer();
  if (csvFile == null) {
    csvFile=new File(path);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + csvFile.getPath());
    }
  }
  final Map<String,Object> results=m.getAll();
  Object defaultResult=m.get();
  if (!csvFile.exists()) {
    sb.append(""String_Node_Str"");
    sb.append(delimiter);
    sb.append(""String_Node_Str"");
    if (defaultResult != null) {
      sb.append(delimiter);
      sb.append(Measurement.DEFAULT_RESULT);
    }
    for (    String key : results.keySet()) {
      if (!key.equals(Measurement.DEFAULT_RESULT)) {
        resultNames.add(key);
        sb.append(delimiter);
        sb.append(key);
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(timeFormat.format(m.getTime()));
  sb.append(delimiter);
  sb.append(m.getIteration());
  if (defaultResult != null) {
    sb.append(delimiter);
    if (defaultResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)defaultResult).getNumber());
    }
 else {
      sb.append(defaultResult);
    }
  }
  Object currentResult;
  for (  String resultName : resultNames) {
    sb.append(delimiter);
    currentResult=results.get(resultName);
    if (currentResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)currentResult).getNumber());
    }
 else {
      sb.append(currentResult);
    }
  }
  try (BufferedWriter bw=new BufferedWriter(new FileWriter(csvFile,true))){
    bw.append(sb.toString());
    bw.newLine();
  }
 catch (  IOException ioe) {
    throw new ReportingException(""String_Node_Str"" + csvFile.getPath(),ioe);
  }
}","@Override public void report(final Measurement m) throws ReportingException {
  StringBuffer sb=new StringBuffer();
  if (csvFile == null) {
    csvFile=new File(path);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + csvFile.getPath());
    }
  }
  final Map<String,Object> results=m.getAll();
  Object defaultResult=m.get();
  if (!csvFile.exists()) {
    sb.append(""String_Node_Str"");
    sb.append(delimiter);
    sb.append(""String_Node_Str"");
    if (defaultResult != null) {
      sb.append(delimiter);
      sb.append(Measurement.DEFAULT_RESULT);
    }
    for (    String key : results.keySet()) {
      if (!key.equals(Measurement.DEFAULT_RESULT)) {
        resultNames.add(key);
        sb.append(delimiter);
        sb.append(key);
      }
    }
    sb.append(""String_Node_Str"");
  }
  sb.append(Utils.timeToHMS(m.getTime()));
  sb.append(delimiter);
  sb.append(m.getIteration());
  if (defaultResult != null) {
    sb.append(delimiter);
    if (defaultResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)defaultResult).getNumber());
    }
 else {
      sb.append(defaultResult);
    }
  }
  Object currentResult;
  for (  String resultName : resultNames) {
    sb.append(delimiter);
    currentResult=results.get(resultName);
    if (currentResult instanceof Quantity<?>) {
      sb.append(((Quantity<?>)currentResult).getNumber());
    }
 else {
      sb.append(currentResult);
    }
  }
  try (BufferedWriter bw=new BufferedWriter(new FileWriter(csvFile,true))){
    bw.append(sb.toString());
    bw.newLine();
  }
 catch (  IOException ioe) {
    throw new ReportingException(""String_Node_Str"" + csvFile.getPath(),ioe);
  }
}",0.9904306220095692
59915,"/** 
 * Used to set the value of path.
 * @param path The path value to set.
 */
public void setPath(String path){
  this.path=path;
  this.csvFile=new File(this.path);
}","/** 
 * Used to set the value of path.
 * @param path The path value to set.
 */
public void setPath(final String path){
  this.path=path;
  this.csvFile=new File(this.path);
}",0.9826589595375722
59916,"/** 
 * Reports a single   {@link org.perfcake.nreporting.MeasurementUnit} to this reporter. This calls {@link #doReport(MeasurementUnit)} overrided by a child,accumulates results and reports iteration change and percentage change (if any).
 */
@Override public final void report(final MeasurementUnit mu) throws ReportingException {
  if (runInfo == null) {
    throw new ReportingException(""String_Node_Str"");
  }
  doReport(mu);
  accumulateResults(mu.getResults());
  reportIterations(mu.getIteration());
  final long percentage=Math.round(runInfo.getPercentage());
  if (percentage != lastPercentage) {
    lastPercentage=percentage;
    reportPercentage(percentage);
  }
}","/** 
 * Reports a single   {@link org.perfcake.nreporting.MeasurementUnit} to this reporter. This calls {@link #doReport(MeasurementUnit)} overrided by a child,accumulates results and reports iteration change and percentage change (if any).
 */
@Override public final void report(final MeasurementUnit mu) throws ReportingException {
  if (runInfo == null) {
    throw new ReportingException(""String_Node_Str"");
  }
  doReport(mu);
  accumulateResults(mu.getResults());
  reportIterations(mu.getIteration());
  final long percentage=(long)Math.floor(runInfo.getPercentage());
  if (percentage != lastPercentage) {
    lastPercentage=percentage;
    reportPercentage(percentage);
  }
}",0.9882525697503672
59917,"@SuppressWarnings(""String_Node_Str"") @Override protected Accumulator getAccumulator(final String key,final Class clazz){
  if (clazz.getName().equals(Double.class)) {
    return new AvgAccumulator();
  }
 else {
    return new LastValueAccumulator();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected Accumulator getAccumulator(final String key,final Class clazz){
  if (Double.class.equals(clazz)) {
    return new AvgAccumulator();
  }
 else {
    return new LastValueAccumulator();
  }
}",0.9163346613545816
59918,"@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration() - 1);
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}","@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration());
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}",0.9948453608247424
59919,"/** 
 * Starts a new measurement run. This resets the iteration counter.
 */
public void start(){
  reset();
  startTime=System.currentTimeMillis();
}","/** 
 * Starts a new measurement run. This resets the iteration counter.
 */
public void start(){
  reset();
  startTime=System.currentTimeMillis();
  endTime=-1;
}",0.9554140127388536
59920,"/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iteration even though some of them might still be pending their execution.
 * @return Current iteration counter value
 */
public long getIteration(){
  return iterations.get();
}","/** 
 * Get the current iteration counter value. This can be used as an approximate value of passed iterations even though some of them might still be pending their execution. The value is always 1 number higher than the number of iterations executed (as the number can be used for a new iteration).
 * @return Current iteration counter value
 */
public long getIteration(){
  return iterations.get();
}",0.8164464023494861
59921,"public void stop(){
  started=false;
  runInfo.stop();
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.stop();
  }
  rwLock.writeLock().unlock();
}","public void stop(){
  runInfo.stop();
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.stop();
  }
  rwLock.writeLock().unlock();
}",0.9470404984423676
59922,"public void report(final MeasurementUnit mu) throws ReportingException {
  if (started) {
    rwLock.readLock().lock();
    for (    Reporter r : reporters) {
      r.report(mu);
    }
    rwLock.readLock().unlock();
  }
 else {
    log.debug(""String_Node_Str"");
  }
}","public void report(final MeasurementUnit mu) throws ReportingException {
  if (runInfo.isRunning()) {
    rwLock.readLock().lock();
    for (    Reporter r : reporters) {
      r.report(mu);
    }
    rwLock.readLock().unlock();
  }
 else {
    log.debug(""String_Node_Str"");
  }
}",0.9525547445255474
59923,"public void start(){
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.start();
  }
  rwLock.writeLock().unlock();
  started=true;
  runInfo.start();
}","public void start(){
  runInfo.start();
  rwLock.writeLock().lock();
  for (  Reporter r : reporters) {
    r.start();
  }
  rwLock.writeLock().unlock();
}",0.8343558282208589
59924,"/** 
 * Gets a value of an accumulated result.
 * @param key Key in the results hash map.
 * @return The value associated with the given key.
 */
protected Object getAccumulatedResult(final String key){
  return accumulatedResults.get(key).getResult();
}","/** 
 * Gets a value of an accumulated result.
 * @param key Key in the results hash map.
 * @return The value associated with the given key.
 */
protected Object getAccumulatedResult(final String key){
  return accumulatedResults.get(key) == null ? null : accumulatedResults.get(key).getResult();
}",0.918625678119349
59925,"@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration());
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}","@Override protected void doPublishResult(final PeriodType periodType,final Destination d) throws ReportingException {
  Measurement m=new Measurement(Math.round(runInfo.getPercentage()),runInfo.getRunTime(),runInfo.getIteration() - 1);
  m.set(new Quantity<Double>((Double)getAccumulatedResult(Measurement.DEFAULT_RESULT),""String_Node_Str""));
  publishAccumulatedResult(m);
  d.report(m);
}",0.9948453608247424
59926,"/** 
 * Used to set the value of property2.
 * @param property2 The property2 value to set.
 */
public void setProperty2(String property2){
  this.property2=property2;
}","/** 
 * Used to set the value of property2.
 * @param property2 The property2 value to set.
 */
public void setProperty2(final String property2){
  this.property2=property2;
}",0.9825581395348836
59927,"/** 
 * Used to set the value of property.
 * @param property The property value to set.
 */
public void setProperty(String property){
  this.property=property;
}","/** 
 * Used to set the value of property.
 * @param property The property value to set.
 */
public void setProperty(final String property){
  this.property=property;
}",0.9818181818181818
59928,"@Override public void report(Measurement m) throws ReportingException {
  System.out.println(m.toString());
}","@Override public void report(final Measurement m) throws ReportingException {
  lastMethod=""String_Node_Str"";
  lastMeasurement=m;
  System.out.println(m.toString());
  try {
    throw new Throwable(""String_Node_Str"");
  }
 catch (  Throwable t) {
    StringWriter sw=new StringWriter();
    t.printStackTrace(new PrintWriter(sw));
    if (sw.toString().contains(""String_Node_Str"")) {
      lastType=PeriodType.ITERATION;
    }
 else     if (sw.toString().contains(""String_Node_Str"")) {
      lastType=PeriodType.PERCENTAGE;
    }
 else     if (sw.toString().contains(""String_Node_Str"")) {
      lastType=PeriodType.TIME;
    }
 else {
      t.printStackTrace();
      lastType=null;
    }
  }
}",0.2611940298507462
59929,"@Override public void close(){
}","@Override public void close(){
  lastMethod=""String_Node_Str"";
}",0.6666666666666666
59930,"@Override public void open(){
}","@Override public void open(){
  lastMethod=""String_Node_Str"";
}",0.6595744680851063
59931,"@Test public void f() throws ReportingException, InterruptedException {
  ReportManager rm=new ReportManager();
  RunInfo ri=new RunInfo(new Period(PeriodType.ITERATION,1000));
  ResponseTimeReporter r1=new ResponseTimeReporter();
  ResponseTimeReporter r2=new ResponseTimeReporter();
  DummyReporter dr=new DummyReporter();
  rm.registerReporter(r1);
  rm.setRunInfo(ri);
  rm.registerReporter(r2);
  Assert.assertEquals(r1.runInfo,ri);
  Assert.assertEquals(r2.runInfo,ri);
  rm.unregisterReporter(r2);
  rm.registerReporter(r1);
  Assert.assertEquals(rm.getReporters().size(),1);
  rm.registerReporter(r2);
  Assert.assertTrue(rm.getReporters().contains(r1));
  Assert.assertTrue(rm.getReporters().contains(r2));
  rm.registerReporter(dr);
  MeasurementUnit mu=null;
  for (int i=0; i <= 500; i++) {
    mu=rm.newMeasurementUnit();
  }
  Assert.assertEquals(mu.getIteration(),500);
  Assert.assertEquals(mu.getLastTime(),-1);
  Assert.assertEquals(mu.getTotalTime(),0);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 600);
  Assert.assertTrue(mu.getLastTime() < 600);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 1200);
  Assert.assertTrue(mu.getLastTime() < 600);
  Assert.assertEquals(ri.getPercentage(),0d);
  Assert.assertFalse(ri.isRunning());
  Assert.assertEquals(ri.getStartTime(),-1);
  Assert.assertEquals(ri.getEndTime(),-1);
  Assert.assertEquals(ri.getRunTime(),0);
  rm.report(mu);
  Assert.assertNull(dr.getLastMethod(),""String_Node_Str"");
  rm.start();
  rm.report(mu);
  Assert.assertTrue(ri.isRunning());
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.reset();
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.stop();
  Assert.assertFalse(ri.isRunning());
}","@Test public void f() throws ReportingException, InterruptedException {
  ReportManager rm=new ReportManager();
  RunInfo ri=new RunInfo(new Period(PeriodType.ITERATION,1000));
  ResponseTimeReporter r1=new ResponseTimeReporter();
  ResponseTimeReporter r2=new ResponseTimeReporter();
  DummyReporter dr=new DummyReporter();
  rm.registerReporter(r1);
  rm.setRunInfo(ri);
  rm.registerReporter(r2);
  Assert.assertEquals(r1.runInfo,ri);
  Assert.assertEquals(r2.runInfo,ri);
  rm.unregisterReporter(r2);
  rm.registerReporter(r1);
  Assert.assertEquals(rm.getReporters().size(),1);
  rm.registerReporter(r2);
  Assert.assertTrue(rm.getReporters().contains(r1));
  Assert.assertTrue(rm.getReporters().contains(r2));
  rm.registerReporter(dr);
  MeasurementUnit mu=null;
  for (int i=0; i <= 500; i++) {
    mu=rm.newMeasurementUnit();
  }
  Assert.assertEquals(mu.getIteration(),500);
  Assert.assertEquals(mu.getLastTime(),-1);
  Assert.assertEquals(mu.getTotalTime(),0);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 600);
  Assert.assertTrue(mu.getLastTime() < 600);
  mu.startMeasure();
  Thread.sleep(500);
  mu.stopMeasure();
  Assert.assertTrue(mu.getTotalTime() < 1200);
  Assert.assertTrue(mu.getLastTime() < 600);
  Assert.assertEquals(ri.getPercentage(),0d);
  Assert.assertFalse(ri.isRunning());
  Assert.assertEquals(ri.getStartTime(),-1);
  Assert.assertEquals(ri.getEndTime(),-1);
  Assert.assertEquals(ri.getRunTime(),0);
  rm.report(mu);
  Assert.assertNull(dr.getLastMethod(),""String_Node_Str"");
  rm.start();
  rm.report(mu);
  long startTime=ri.getStartTime();
  Assert.assertTrue(ri.isRunning());
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.reset();
  Assert.assertEquals(dr.getLastMethod(),""String_Node_Str"");
  rm.stop();
  Assert.assertFalse(ri.isRunning());
  DummyDestination d1=new DummyDestination();
  DummyDestination d2=new DummyDestination();
  r1.registerDestination(d1,new Period(PeriodType.ITERATION,100));
  r1.registerDestination(d2,new Period(PeriodType.PERCENTAGE,10));
  r1.registerDestination(d1,new Period(PeriodType.TIME,2000));
  Set<BoundPeriod<Destination>> bp=new HashSet<>();
  bp.add(new BoundPeriod<Destination>(PeriodType.ITERATION,100,d1));
  bp.add(new BoundPeriod<Destination>(PeriodType.PERCENTAGE,10,d2));
  bp.add(new BoundPeriod<Destination>(PeriodType.TIME,2000,d1));
  Assert.assertTrue(r1.getReportingPeriods().containsAll(bp));
  Assert.assertEquals(ri.getPercentage(),0d);
  Assert.assertFalse(ri.isRunning());
  Assert.assertEquals(ri.getStartTime(),startTime);
  Assert.assertTrue(ri.getEndTime() > ri.getStartTime());
  Assert.assertTrue(ri.getRunTime() == ri.getEndTime() - ri.getStartTime());
  rm.start();
  mu=null;
  for (int i=0; i <= 100; i++) {
    mu=rm.newMeasurementUnit();
    mu.startMeasure();
    mu.appendResult(""String_Node_Str"",(double)i);
    Thread.sleep(10);
    mu.stopMeasure();
    rm.report(mu);
  }
  Assert.assertEquals(mu.getIteration(),100);
  Assert.assertEquals(mu.getLastTime(),10);
  Assert.assertEquals(mu.getTotalTime(),10);
  Assert.assertEquals(d1.getLastType(),PeriodType.ITERATION);
  Assert.assertEquals(d2.getLastType(),PeriodType.PERCENTAGE);
  Thread.sleep(2500);
  Assert.assertEquals(d1.getLastType(),PeriodType.TIME);
  rm.stop();
}",0.7094017094017094
59932,"/** 
 * Called upon block activation (right click on the block.)
 */
@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int par6,float par7,float par8,float par9){
  TileEntityGSGraveStone te=(TileEntityGSGraveStone)world.getTileEntity(x,y,z);
  if (te != null) {
    if (player.inventory.getCurrentItem() != null) {
      ItemStack item=player.inventory.getCurrentItem();
      if (item.getItem() instanceof ItemSpade) {
        if (!world.isRemote) {
          GraveStoneLogger.logInfo(player.getCommandSenderName() + ""String_Node_Str"" + x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z);
          te.dropAllItems();
        }
        return false;
      }
 else {
        if (te.hasFlower()) {
          if (item.getItem() instanceof ItemShears) {
            if (!world.isRemote) {
              te.dropFlower();
            }
            te.setFlower(null);
            return false;
          }
        }
 else {
          if (GraveStoneHelper.FLOWERS.contains(Block.getBlockFromItem(item.getItem())) && GraveStoneHelper.FLOWERS_GROUND.contains(world.getBlock(x,y - 1,z)) && GraveStoneHelper.canFlowerBePlaced(te)) {
            te.setFlower(new ItemStack(item.getItem(),1,item.getItemDamage()));
            if (world.isRemote) {
              player.inventory.getCurrentItem().stackSize--;
            }
            return true;
          }
        }
      }
    }
    if (world.isRemote) {
      String name;
      String deathText;
      String killerName;
      deathText=te.getDeathTextComponent().getDeathText();
      if (deathText.length() != 0) {
        if (te.getDeathTextComponent().isLocalized()) {
          name=te.getDeathTextComponent().getName();
          killerName=ModGraveStone.proxy.getLocalizedEntityName(te.getDeathTextComponent().getKillerName());
          if (killerName.length() == 0) {
            player.addChatComponentMessage(new ChatComponentTranslation(deathText,new Object[]{name}));
          }
 else {
            player.addChatComponentMessage(new ChatComponentTranslation(deathText,new Object[]{name,killerName}));
          }
        }
 else {
          player.addChatComponentMessage(new ChatComponentTranslation(deathText));
        }
        if (te.getAge() != -1) {
          player.addChatComponentMessage(new ChatComponentTranslation(""String_Node_Str"" + te.getAge() + ""String_Node_Str""));
        }
      }
    }
  }
  return false;
}","/** 
 * Called upon block activation (right click on the block.)
 */
@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int par6,float par7,float par8,float par9){
  TileEntityGSGraveStone te=(TileEntityGSGraveStone)world.getTileEntity(x,y,z);
  if (te != null) {
    if (player.inventory.getCurrentItem() != null) {
      ItemStack item=player.inventory.getCurrentItem();
      if (item.getItem() instanceof ItemSpade) {
        if (!world.isRemote) {
          GraveStoneLogger.logInfo(player.getCommandSenderName() + ""String_Node_Str"" + x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z);
          te.dropAllItems();
        }
        return false;
      }
 else {
        if (te.hasFlower()) {
          if (item.getItem() instanceof ItemShears) {
            if (!world.isRemote) {
              te.dropFlower();
            }
            te.setFlower(null);
            return false;
          }
        }
 else {
          if (GraveStoneHelper.FLOWERS.contains(Block.getBlockFromItem(item.getItem())) && GraveStoneHelper.FLOWERS_GROUND.contains(world.getBlock(x,y - 1,z)) && GraveStoneHelper.canFlowerBePlaced(te)) {
            te.setFlower(new ItemStack(item.getItem(),1,item.getItemDamage()));
            if (world.isRemote) {
              player.inventory.getCurrentItem().stackSize--;
            }
            return true;
          }
        }
      }
    }
    if (world.isRemote) {
      String name;
      String deathText;
      String killerName;
      deathText=te.getDeathTextComponent().getDeathText();
      if (deathText.length() != 0) {
        if (te.getDeathTextComponent().isLocalized()) {
          name=te.getDeathTextComponent().getName();
          killerName=ModGraveStone.proxy.getLocalizedEntityName(te.getDeathTextComponent().getKillerName());
          if (killerName.length() == 0) {
            player.addChatComponentMessage(new ChatComponentTranslation(deathText,new Object[]{name}));
          }
 else {
            player.addChatComponentMessage(new ChatComponentTranslation(deathText,new Object[]{name,killerName}));
          }
        }
 else {
          player.addChatComponentMessage(new ChatComponentTranslation(deathText));
        }
        if (te.getAge() != -1) {
          StringBuilder ageStr=new StringBuilder();
          ageStr.append(ModGraveStone.proxy.getLocalizedString(""String_Node_Str"")).append(""String_Node_Str"").append(te.getAge()).append(""String_Node_Str"").append(ModGraveStone.proxy.getLocalizedString(""String_Node_Str""));
          player.addChatComponentMessage(new ChatComponentTranslation(ageStr.toString()));
        }
      }
    }
  }
  return false;
}",0.9328621908127208
59933,"public static void setNbt(EntityVillager villager,NBTTagCompound nbt){
  setName(villager,nbt);
  nbt.setInteger(""String_Node_Str"",villager.getProfession());
  MerchantRecipeList recipes=villager.getRecipes(null);
  MerchantRecipe recipe;
  NBTTagCompound recipeTag;
  for (int i=0; i < recipes.size(); i++) {
    recipe=(MerchantRecipe)recipes.get(i);
    recipeTag=recipe.writeToTags();
    recipeTag.setInteger(""String_Node_Str"",0);
    recipeTag.setInteger(""String_Node_Str"",7);
    recipe.readFromTags(recipeTag);
  }
  nbt.setTag(""String_Node_Str"",recipes.getRecipiesAsTags());
}","public static void setNbt(EntityVillager villager,NBTTagCompound nbt){
  setName(villager,nbt);
  nbt.setInteger(""String_Node_Str"",villager.getProfession());
  MerchantRecipeList recipes=villager.getRecipes(null);
  if (recipes != null) {
    MerchantRecipe recipe;
    NBTTagCompound recipeTag;
    for (int i=0; i < recipes.size(); i++) {
      recipe=(MerchantRecipe)recipes.get(i);
      recipeTag=recipe.writeToTags();
      recipeTag.setInteger(""String_Node_Str"",0);
      recipeTag.setInteger(""String_Node_Str"",7);
      recipe.readFromTags(recipeTag);
    }
    nbt.setTag(""String_Node_Str"",recipes.getRecipiesAsTags());
  }
}",0.95980311730927
59934,"public static void registration(){
  GameRegistry.registerTileEntity(TileEntityGSGraveStone.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSMemorial.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSSpawner.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSHauntedChest.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSSkullCandle.class,""String_Node_Str"");
}","public static void registration(){
  GameRegistry.registerTileEntity(TileEntityGSGraveStone.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSMemorial.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSSpawner.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSHauntedChest.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSCandle.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSSkullCandle.class,""String_Node_Str"");
}",0.9191402251791198
59935,"private boolean setGraveText(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,boolean isMemorial){
  TileEntityGSGrave tileEntity=(TileEntityGSGrave)world.getTileEntity(x,y,z);
  if (tileEntity != null && tileEntity.isEditable() && tileEntity.getDeathTextComponent().getDeathText().length() == 0) {
    FMLClientHandler.instance().getClient().displayGuiScreen(new GSGuiGrave(tileEntity));
    if (isMemorial) {
      stack.damageItem(5,player);
    }
 else {
      stack.damageItem(2,player);
    }
    return true;
  }
  return false;
}","private boolean setGraveText(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,boolean isMemorial){
  TileEntityGSGrave tileEntity=(TileEntityGSGrave)world.getTileEntity(x,y,z);
  if (tileEntity != null && tileEntity.isEditable() && tileEntity.getDeathTextComponent().getDeathText().length() == 0) {
    ModGraveStone.proxy.openGraveGui(tileEntity);
    if (isMemorial) {
      stack.damageItem(5,player);
    }
 else {
      stack.damageItem(2,player);
    }
    return true;
  }
  return false;
}",0.8895131086142322
59936,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  if (!world.isSideSolid(x,y - 1,z,ForgeDirection.DOWN,true)) {
    this.dropBlockAsItem(world,x,y,z,0,0);
    world.setBlock(x,y,z,this,0,2);
  }
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  if (!world.isSideSolid(x,y - 1,z,ForgeDirection.DOWN,true)) {
    this.dropBlockAsItem(world,x,y,z,0,0);
    world.setBlock(x,y,z,Blocks.air,0,2);
  }
}",0.9707112970711296
59937,"@Override protected boolean canSpawnMobs(World world){
  long time=world.getWorldTime();
  if (time > START_TIME && time < END_TIME || world.isThundering()) {
    return true;
  }
  return false;
}","@Override protected boolean canSpawnMobs(World world){
  long time=world.getWorldTime() % 24000;
  if (time > START_TIME && time < END_TIME || world.isThundering()) {
    return true;
  }
  return false;
}",0.9800995024875622
59938,"@Override protected void clientUpdateLogic(){
  if (this.delay > 0) {
    --this.delay;
  }
}","@Override protected void clientUpdateLogic(){
}",0.6714285714285714
59939,"/** 
 * Sets the delay before a new spawn.
 */
private void updateDelay(){
  delay=MIN_DELAY + tileEntity.worldObj.rand.nextInt(GraveStoneConfig.graveSpawnRate - MIN_DELAY);
  if (this.field_92060_e != null && this.field_92060_e.size() > 0) {
    tileEntity.worldObj.markBlockForUpdate(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord);
  }
  int block=tileEntity.getBlockType().blockID;
  tileEntity.worldObj.addBlockEvent(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord,block,1,0);
}","/** 
 * Sets the delay before a new spawn.
 */
private void updateDelay(){
  delay=MIN_DELAY + tileEntity.worldObj.rand.nextInt(GraveStoneConfig.graveSpawnRate - MIN_DELAY);
  int block=tileEntity.getBlockType().blockID;
  tileEntity.worldObj.addBlockEvent(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord,block,1,0);
}",0.7902439024390244
59940,"protected static boolean noAnyInRange(int x,int z,int range,World world){
  for (  ChunkCoordIntPair position : structuresList) {
    if (position.chunkXPos > x - range && position.chunkXPos < x + range && position.chunkZPos > z - range && position.chunkZPos < z + range) {
      return false;
    }
  }
  for (  Object villageObj : world.villageCollectionObj.getVillageList()) {
    ChunkCoordinates villageCenter=((Village)villageObj).getCenter();
    if (villageCenter.posX > x - VILLAGE_RANGE && villageCenter.posX < x + VILLAGE_RANGE && villageCenter.posZ > z - VILLAGE_RANGE && villageCenter.posZ < z + VILLAGE_RANGE) {
      return false;
    }
  }
  return true;
}","protected static boolean noAnyInRange(int x,int z,int range,World world){
  GraveStoneLogger.logInfo(""String_Node_Str"");
  for (  ChunkCoordIntPair position : structuresList) {
    if (position.chunkXPos > x - range && position.chunkXPos < x + range && position.chunkZPos > z - range && position.chunkZPos < z + range) {
      return false;
    }
  }
  if (world.villageCollectionObj != null && world.villageCollectionObj.getVillageList() != null) {
    for (    Object villageObj : world.villageCollectionObj.getVillageList()) {
      ChunkCoordinates villageCenter=((Village)villageObj).getCenter();
      if (villageCenter.posX > x - VILLAGE_RANGE && villageCenter.posX < x + VILLAGE_RANGE && villageCenter.posZ > z - VILLAGE_RANGE && villageCenter.posZ < z + VILLAGE_RANGE) {
        return false;
      }
    }
  }
  GraveStoneLogger.logInfo(""String_Node_Str"");
  return true;
}",0.7099678456591639
59941,"private static boolean isHeightAcceptable(World world,int x,int z){
  int height=0;
  int count=0;
  for (int xPos=x - 16; xPos < x + 16; x++) {
    for (int zPos=z - 16; zPos < z + 16; z++) {
      height+=world.getTopSolidOrLiquidBlock(x,z);
      count++;
    }
  }
  return (height / count) < 75;
}","private static boolean isHeightAcceptable(World world,int x,int z){
  GraveStoneLogger.logInfo(""String_Node_Str"");
  int height=0;
  int count=0;
  for (int xPos=x; xPos < x + 16; xPos++) {
    for (int zPos=z; zPos < z + 16; zPos++) {
      height+=world.getTopSolidOrLiquidBlock(xPos,zPos);
      count++;
    }
  }
  GraveStoneLogger.logInfo(""String_Node_Str"");
  return (height / count) < 75;
}",0.5171428571428571
59942,"public static void addExtrabiomsXLBiomes(){
  CATACOMBS_BIOMES.addAll(Arrays.asList(Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID));
  MEMORIAL_BIOMES.add(Arrays.asList(Biomes.getBiome(""String_Node_Str"").get().biomeID,Biomes.getBiome(""String_Node_Str"").get().biomeID));
  GRAVES_BIOMES.add(Arrays.asList(Biomes.getBiome(""String_Node_Str"").get().biomeID));
}","public static void addExtrabiomsXLBiomes(){
  for (int i=0; i < EXTRABIOMES_XL_CATACOMBS_BIOMES.length; i++) {
    if (Biomes.getBiome(EXTRABIOMES_XL_CATACOMBS_BIOMES[i]).isPresent()) {
      if (Biomes.getBiome(EXTRABIOMES_XL_CATACOMBS_BIOMES[i]).get() != null) {
        CATACOMBS_BIOMES.add(Biomes.getBiome(EXTRABIOMES_XL_CATACOMBS_BIOMES[i]).get().biomeID);
      }
 else {
        namedBiomeError(EXTRABIOMES_XL_NAME,EXTRABIOMES_XL_CATACOMBS_BIOMES[i]);
      }
    }
  }
  for (int i=0; i < EXTRABIOMES_XL_MEMORIAL_BIOMES.length; i++) {
    if (Biomes.getBiome(EXTRABIOMES_XL_MEMORIAL_BIOMES[i]).isPresent()) {
      if (Biomes.getBiome(EXTRABIOMES_XL_MEMORIAL_BIOMES[i]).get() != null) {
        MEMORIAL_BIOMES.add(Biomes.getBiome(EXTRABIOMES_XL_MEMORIAL_BIOMES[i]).get().biomeID);
      }
 else {
        namedBiomeError(EXTRABIOMES_XL_NAME,EXTRABIOMES_XL_MEMORIAL_BIOMES[i]);
      }
    }
  }
  for (int i=0; i < EXTRABIOMES_XL_GRAVES_BIOMES.length; i++) {
    if (Biomes.getBiome(EXTRABIOMES_XL_GRAVES_BIOMES[i]).isPresent()) {
      if (Biomes.getBiome(EXTRABIOMES_XL_GRAVES_BIOMES[i]).get() != null) {
        GRAVES_BIOMES.add(Biomes.getBiome(EXTRABIOMES_XL_GRAVES_BIOMES[i]).get().biomeID);
      }
 else {
        namedBiomeError(EXTRABIOMES_XL_NAME,EXTRABIOMES_XL_GRAVES_BIOMES[i]);
      }
    }
  }
}",0.1142857142857142
59943,"public static void addHighlandsBiomes(){
  CATACOMBS_BIOMES.addAll(Arrays.asList(HighlandsBiomes.autumnForest.biomeID,HighlandsBiomes.birchHills.biomeID,HighlandsBiomes.glacier.biomeID,HighlandsBiomes.outback.biomeID,HighlandsBiomes.pinelands.biomeID,HighlandsBiomes.sahel.biomeID,HighlandsBiomes.savannah.biomeID,HighlandsBiomes.tundra.biomeID,HighlandsBiomes.shrubland.biomeID));
  MEMORIAL_BIOMES.add(Arrays.asList(HighlandsBiomes.bog.biomeID,HighlandsBiomes.dunes.biomeID,HighlandsBiomes.estuary.biomeID,HighlandsBiomes.tropicalIslands.biomeID,HighlandsBiomes.lake.biomeID));
  GRAVES_BIOMES.add(Arrays.asList(HighlandsBiomes.lake.biomeID));
}","public static void addHighlandsBiomes(){
  for (int i=0; i < HIGHLANDS_CATACOMBS_BIOMES.length; i++) {
    if (HIGHLANDS_CATACOMBS_BIOMES[i] != null) {
      CATACOMBS_BIOMES.add(HIGHLANDS_CATACOMBS_BIOMES[i].biomeID);
    }
 else {
      unNamedBiomeError(HIGHLANDS_NAME,i);
    }
  }
  for (int i=0; i < HIGHLANDS_MEMORIAL_BIOMES.length; i++) {
    if (HIGHLANDS_MEMORIAL_BIOMES[i] != null) {
      MEMORIAL_BIOMES.add(HIGHLANDS_MEMORIAL_BIOMES[i].biomeID);
    }
 else {
      unNamedBiomeError(HIGHLANDS_NAME,i);
    }
  }
  for (int i=0; i < HIGHLANDS_GRAVES_BIOMES.length; i++) {
    if (HIGHLANDS_GRAVES_BIOMES[i] != null) {
      GRAVES_BIOMES.add(HIGHLANDS_GRAVES_BIOMES[i].biomeID);
    }
 else {
      unNamedBiomeError(HIGHLANDS_NAME,i);
    }
  }
}",0.0923295454545454
59944,"public static void addBiomsOPlentyBiomes(){
  CATACOMBS_BIOMES.addAll(Arrays.asList(biomesoplenty.api.Biomes.arctic.get().biomeID,biomesoplenty.api.Biomes.bambooForest.get().biomeID,biomesoplenty.api.Biomes.birchForest.get().biomeID,biomesoplenty.api.Biomes.borealForest.get().biomeID,biomesoplenty.api.Biomes.brushland.get().biomeID,biomesoplenty.api.Biomes.chaparral.get().biomeID,biomesoplenty.api.Biomes.cherryBlossomGrove.get().biomeID,biomesoplenty.api.Biomes.deadForest.get().biomeID,biomesoplenty.api.Biomes.deadForestSnow.get().biomeID,biomesoplenty.api.Biomes.deciduousForest.get().biomeID,biomesoplenty.api.Biomes.dunes.get().biomeID,biomesoplenty.api.Biomes.fen.get().biomeID,biomesoplenty.api.Biomes.field.get().biomeID,biomesoplenty.api.Biomes.frostForest.get().biomeID,biomesoplenty.api.Biomes.grove.get().biomeID,biomesoplenty.api.Biomes.heathland.get().biomeID,biomesoplenty.api.Biomes.mapleWoods.get().biomeID,biomesoplenty.api.Biomes.meadow.get().biomeID,biomesoplenty.api.Biomes.mysticGrove.get().biomeID,biomesoplenty.api.Biomes.ominousWoods.get().biomeID,biomesoplenty.api.Biomes.orchard.get().biomeID,biomesoplenty.api.Biomes.originValley.get().biomeID,biomesoplenty.api.Biomes.prairie.get().biomeID,biomesoplenty.api.Biomes.savanna.get().biomeID,biomesoplenty.api.Biomes.scrubland.get().biomeID,biomesoplenty.api.Biomes.seasonalForest.get().biomeID,biomesoplenty.api.Biomes.shrubland.get().biomeID,biomesoplenty.api.Biomes.steppe.get().biomeID,biomesoplenty.api.Biomes.thicket.get().biomeID,biomesoplenty.api.Biomes.woodland.get().biomeID));
  MEMORIAL_BIOMES.add(Arrays.asList(biomesoplenty.api.Biomes.deadlands.get().biomeID,biomesoplenty.api.Biomes.beachGravel.get().biomeID,biomesoplenty.api.Biomes.mangrove.get().biomeID,biomesoplenty.api.Biomes.marsh.get().biomeID,biomesoplenty.api.Biomes.polar.get().biomeID,biomesoplenty.api.Biomes.volcano.get().biomeID,biomesoplenty.api.Biomes.wasteland.get().biomeID));
  GRAVES_BIOMES.add(Arrays.asList(biomesoplenty.api.Biomes.mangrove.get().biomeID));
}","public static void addBiomsOPlentyBiomes(){
  for (int i=0; i < BIOMES_OPLENTY_CATACOMBS_BIOMES.length; i++) {
    if (BIOMES_OPLENTY_CATACOMBS_BIOMES[i] != null) {
      CATACOMBS_BIOMES.add(BIOMES_OPLENTY_CATACOMBS_BIOMES[i].biomeID);
    }
 else {
      unNamedBiomeError(BIOMES_OPLENTY_NAME,i);
    }
  }
  for (int i=0; i < BIOMES_OPLENTY_MEMORIAL_BIOMES.length; i++) {
    if (BIOMES_OPLENTY_MEMORIAL_BIOMES[i] != null) {
      MEMORIAL_BIOMES.add(BIOMES_OPLENTY_MEMORIAL_BIOMES[i].biomeID);
    }
 else {
      unNamedBiomeError(BIOMES_OPLENTY_NAME,i);
    }
  }
  for (int i=0; i < BIOMES_OPLENTY_GRAVES_BIOMES.length; i++) {
    if (BIOMES_OPLENTY_GRAVES_BIOMES[i] != null) {
      GRAVES_BIOMES.add(BIOMES_OPLENTY_GRAVES_BIOMES[i].biomeID);
    }
 else {
      unNamedBiomeError(BIOMES_OPLENTY_NAME,i);
    }
  }
}",0.0582660582660582
59945,"@Init public void load(FMLInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new EventHookGSGraveStone());
  creativeTab=new CreativeTabs(""String_Node_Str""){
    @Override public ItemStack getIconItemStack(){
      ItemStack stack=new ItemStack(graveStone,1,0);
      NBTTagCompound nbt=new NBTTagCompound();
      nbt.setByte(""String_Node_Str"",(byte)0);
      stack.setTagCompound(nbt);
      return stack;
    }
  }
;
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  graveStone=new BlockGSGraveStone(GraveStoneConfig.graveStoneID);
  GameRegistry.registerBlock(graveStone,ItemBlockGSGraveStone.class);
  for (byte i=0; i < EnumGraves.GRAVES_COUNT; i++) {
    ItemStack graveStoneStack=new ItemStack(graveStone,1,0);
    NBTTagCompound nbt=new NBTTagCompound();
    nbt.setByte(""String_Node_Str"",i);
    if (GraveStoneHelper.isSwordGrave(i)) {
      nbt.setByte(""String_Node_Str"",GraveStoneHelper.graveTypeToSwordType(i));
    }
    graveStoneStack.setTagCompound(nbt);
    LanguageRegistry.addName(graveStoneStack,EnumGraves.getByID(i).getName());
  }
  MinecraftForge.setBlockHarvestLevel(graveStone,""String_Node_Str"",1);
  witherSpawner=new BlockGSWitherSpawner(GraveStoneConfig.witherSpawnerID);
  GameRegistry.registerBlock(witherSpawner,""String_Node_Str"");
  LanguageRegistry.addName(witherSpawner,""String_Node_Str"");
  MinecraftForge.setBlockHarvestLevel(witherSpawner,""String_Node_Str"",1);
  trap=new BlockGSTrap(GraveStoneConfig.timeTrapID);
  GameRegistry.registerBlock(trap,""String_Node_Str"");
  LanguageRegistry.addName(trap,""String_Node_Str"");
  MinecraftForge.setBlockHarvestLevel(trap,""String_Node_Str"",1);
  memorial=new BlockGSMemorial(GraveStoneConfig.memorialID);
  GameRegistry.registerBlock(memorial,""String_Node_Str"");
  LanguageRegistry.addName(memorial,""String_Node_Str"");
  GameRegistry.registerBlock(memorial,ItemBlockGSMemorial.class);
  for (byte i=0; i < EnumMemorials.MEMORIALS_COUNT; i++) {
    ItemStack memorialStack=new ItemStack(memorial,1,0);
    NBTTagCompound nbt=new NBTTagCompound();
    nbt.setByte(""String_Node_Str"",i);
    memorialStack.setTagCompound(nbt);
    LanguageRegistry.addName(memorialStack,EnumMemorials.getByID(i).getName());
  }
  MinecraftForge.setBlockHarvestLevel(memorial,""String_Node_Str"",2);
  chisel=new ItemGSChisel(GraveStoneConfig.chiselId);
  LanguageRegistry.addName(chisel,""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(chisel),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',Item.stick,'y',Item.ingotIron);
  GameRegistry.registerTileEntity(TileEntityGSGraveStone.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSMemorial.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSWitherSpawner.class,""String_Node_Str"");
  NetworkRegistry.instance().registerGuiHandler(this,new GuiHandler());
  GraveStoneStructures.getInstance();
  GraveStoneEntity.getInstance();
  proxy.registerRenderers();
}","@Init public void load(FMLInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new EventHookGSGraveStone());
  creativeTab=new CreativeTabs(""String_Node_Str""){
    @Override public ItemStack getIconItemStack(){
      ItemStack stack=new ItemStack(graveStone,1,0);
      NBTTagCompound nbt=new NBTTagCompound();
      nbt.setByte(""String_Node_Str"",(byte)0);
      stack.setTagCompound(nbt);
      return stack;
    }
  }
;
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  graveStone=new BlockGSGraveStone(GraveStoneConfig.graveStoneID);
  GameRegistry.registerBlock(graveStone,ItemBlockGSGraveStone.class);
  for (byte i=0; i < EnumGraves.GRAVES_COUNT; i++) {
    ItemStack graveStoneStack=new ItemStack(graveStone,1,0);
    NBTTagCompound nbt=new NBTTagCompound();
    nbt.setByte(""String_Node_Str"",i);
    if (GraveStoneHelper.isSwordGrave(i)) {
      nbt.setByte(""String_Node_Str"",GraveStoneHelper.graveTypeToSwordType(i));
    }
    graveStoneStack.setTagCompound(nbt);
    LanguageRegistry.addName(graveStoneStack,EnumGraves.getByID(i).getName());
  }
  MinecraftForge.setBlockHarvestLevel(graveStone,""String_Node_Str"",1);
  witherSpawner=new BlockGSWitherSpawner(GraveStoneConfig.witherSpawnerID);
  GameRegistry.registerBlock(witherSpawner,""String_Node_Str"");
  LanguageRegistry.addName(witherSpawner,""String_Node_Str"");
  MinecraftForge.setBlockHarvestLevel(witherSpawner,""String_Node_Str"",1);
  trap=new BlockGSTrap(GraveStoneConfig.timeTrapID);
  GameRegistry.registerBlock(trap,""String_Node_Str"");
  LanguageRegistry.addName(trap,""String_Node_Str"");
  MinecraftForge.setBlockHarvestLevel(trap,""String_Node_Str"",1);
  memorial=new BlockGSMemorial(GraveStoneConfig.memorialID);
  GameRegistry.registerBlock(memorial,""String_Node_Str"");
  LanguageRegistry.addName(memorial,""String_Node_Str"");
  GameRegistry.registerBlock(memorial,ItemBlockGSMemorial.class);
  for (byte i=0; i < EnumMemorials.MEMORIALS_COUNT; i++) {
    ItemStack memorialStack=new ItemStack(memorial,1,0);
    NBTTagCompound nbt=new NBTTagCompound();
    nbt.setByte(""String_Node_Str"",i);
    memorialStack.setTagCompound(nbt);
    LanguageRegistry.addName(memorialStack,EnumMemorials.getByID(i).getName());
  }
  MinecraftForge.setBlockHarvestLevel(memorial,""String_Node_Str"",2);
  chisel=new ItemGSChisel(GraveStoneConfig.chiselId);
  LanguageRegistry.addName(chisel,""String_Node_Str"");
  GameRegistry.addRecipe(new ItemStack(chisel),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',Item.stick,'i',Item.ingotIron);
  GameRegistry.registerTileEntity(TileEntityGSGraveStone.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSMemorial.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityGSWitherSpawner.class,""String_Node_Str"");
  NetworkRegistry.instance().registerGuiHandler(this,new GuiHandler());
  GraveStoneStructures.getInstance();
  GraveStoneEntity.getInstance();
  proxy.registerRenderers();
}",0.8519012675116745
59946,"@Mod.PostInit public void postInit(FMLPostInitializationEvent event){
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneMobSpawn.addMoCreaturesMobs();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneMobSpawn.addTwilightForestMobs();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneBiomes.addHighlandsBiomes();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneBiomes.addBiomsOPlentyBiomes();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneBiomes.addExtrabiomsXLBiomes();
  }
}","@Mod.PostInit public void postInit(FMLPostInitializationEvent event){
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneMobSpawn.addMoCreaturesMobs();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneMobSpawn.addTwilightForestMobs();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneBiomes.loadHighlandsBiomes();
    GraveStoneBiomes.addHighlandsBiomes();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneBiomes.loadBiomsOPlentyBiomes();
    GraveStoneBiomes.addBiomsOPlentyBiomes();
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    GraveStoneBiomes.addExtrabiomsXLBiomes();
  }
}",0.9174311926605504
59947,"/** 
 * Spawn mob
 */
private static void spawnMob(World world,int x,int y,int z){
  if (GraveStoneMobSpawn.checkChance(world.rand)) {
    TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
    if (tileEntity != null) {
      Entity mob=GraveStoneMobSpawn.getMobEntity(world,tileEntity.getGraveType(),x,y,z);
      if (mob != null) {
        GraveStoneMobSpawn.spawnMob(world,mob,x,y,z);
      }
    }
  }
}","/** 
 * Spawn mob
 */
private static void spawnMob(World world,int x,int y,int z){
  if (GraveStoneMobSpawn.checkChance(world.rand)) {
    TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
    if (tileEntity != null) {
      Entity mob=GraveStoneMobSpawn.getMobEntity(world,tileEntity.getGraveType(),x,y,z);
      if (mob != null) {
        GraveStoneMobSpawn.spawnMob(world,mob,x,y,z,false);
      }
    }
  }
}",0.9933333333333332
59948,"/** 
 * This returns a complete list of items dropped from this block.
 * @param world The current world
 * @param x X Position
 * @param y Y Position
 * @param z Z Position
 * @param metadata Current metadata
 * @param fortune Breakers fortune level
 * @return A ArrayList containing all items this block drops
 */
@Override public ArrayList<ItemStack> getBlockDropped(World world,int x,int y,int z,int metadata,int fortune){
  spawnMob(world,x,y,z);
  ArrayList<ItemStack> ret=new ArrayList();
  if (!GraveStoneConfig.silkTouchForGraves) {
    ret.add(getBlockItemStack(world,x,y,z));
  }
 else {
    TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
    if (tileEntity != null && isSwordGrave(tileEntity)) {
      tileEntity.dropSword();
    }
  }
  return ret;
}","/** 
 * This returns a complete list of items dropped from this block.
 * @param world The current world
 * @param x X Position
 * @param y Y Position
 * @param z Z Position
 * @param metadata Current metadata
 * @param fortune Breakers fortune level
 * @return A ArrayList containing all items this block drops
 */
@Override public ArrayList<ItemStack> getBlockDropped(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> ret=new ArrayList();
  if (!GraveStoneConfig.silkTouchForGraves) {
    ret.add(getBlockItemStack(world,x,y,z));
  }
 else {
    TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
    if (tileEntity != null && isSwordGrave(tileEntity)) {
      ret.add(tileEntity.getSwordItem());
    }
  }
  return ret;
}",0.9706433479075578
59949,"/** 
 * Update entity s state.
 */
public void updateEntity(){
  if (canSpawnMobs(tileEntity.worldObj) && anyPlayerInRange()) {
    if (tileEntity.worldObj.isRemote) {
      if (this.delay > 0) {
        --this.delay;
      }
    }
 else {
      if (this.delay == -1) {
        this.updateDelay();
      }
      if (this.delay > 0) {
        --this.delay;
        return;
      }
      if (this.getNewMob) {
        this.spawnedMob=GraveStoneMobSpawn.getMobEntity(this.tileEntity.worldObj,EnumGraves.getByID(this.tileEntity.graveType),this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
        if (this.spawnedMob == null) {
          return;
        }
        this.getNewMob=false;
      }
      int nearbyEntitiesCount=tileEntity.worldObj.getEntitiesWithinAABB(this.spawnedMob.getClass(),AxisAlignedBB.getAABBPool().getAABB(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord,tileEntity.xCoord + 1,tileEntity.yCoord + 1,tileEntity.zCoord + 1).expand(1.0D,4.0D,SPAWN_RANGE * 2)).size();
      if (nearbyEntitiesCount >= MAX_NEARBY_ENTITIES) {
        this.updateDelay();
        return;
      }
      if (GraveStoneMobSpawn.checkChance(this.tileEntity.worldObj.rand) && GraveStoneMobSpawn.spawnMob(this.tileEntity.worldObj,this.spawnedMob,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord)) {
        this.updateDelay();
        this.getNewMob=true;
      }
    }
  }
}","/** 
 * Update entity s state.
 */
public void updateEntity(){
  if (canSpawnMobs(tileEntity.worldObj) && anyPlayerInRange()) {
    if (tileEntity.worldObj.isRemote) {
      if (this.delay > 0) {
        --this.delay;
      }
    }
 else {
      if (this.delay == -1) {
        this.updateDelay();
      }
      if (this.delay > 0) {
        --this.delay;
        return;
      }
      if (this.getNewMob) {
        this.spawnedMob=GraveStoneMobSpawn.getMobEntity(this.tileEntity.worldObj,EnumGraves.getByID(this.tileEntity.graveType),this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord);
        if (this.spawnedMob == null) {
          return;
        }
        this.getNewMob=false;
      }
      int nearbyEntitiesCount=tileEntity.worldObj.getEntitiesWithinAABB(this.spawnedMob.getClass(),AxisAlignedBB.getAABBPool().getAABB(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord,tileEntity.xCoord + 1,tileEntity.yCoord + 1,tileEntity.zCoord + 1).expand(1.0D,4.0D,SPAWN_RANGE * 2)).size();
      if (nearbyEntitiesCount >= MAX_NEARBY_ENTITIES) {
        this.updateDelay();
        return;
      }
      if (GraveStoneMobSpawn.checkChance(this.tileEntity.worldObj.rand) && GraveStoneMobSpawn.spawnMob(this.tileEntity.worldObj,this.spawnedMob,this.tileEntity.xCoord,this.tileEntity.yCoord,this.tileEntity.zCoord,true)) {
        this.updateDelay();
        this.getNewMob=true;
      }
    }
  }
}",0.998231340643792
59950,"public void dropSword(){
  int id;
switch (swordType) {
case 5:
    id=Item.swordDiamond.itemID;
  break;
case 3:
id=Item.swordIron.itemID;
break;
case 2:
id=Item.swordStone.itemID;
break;
case 4:
id=Item.swordGold.itemID;
break;
default :
id=Item.swordWood.itemID;
}
ItemStack sword=new ItemStack(id,1,swordDamage);
sword.setItemName(swordName);
sword.setTagCompound(swordNBT);
this.gSItems.dropItem(sword,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
}","public void dropSword(){
  ItemStack sword=getSwordItem();
  this.gSItems.dropItem(sword,this.worldObj,this.xCoord,this.yCoord,this.zCoord);
}",0.4451827242524916
59951,"public boolean generate(World world,Random rand,int x,int z,double chance){
  if (GraveStoneConfig.generateMemorials && canSpawnStructureAtCoords(world,x,z,chance)) {
    new ComponentGSSingleGrave(rand.nextInt(4),rand,x,z).addComponentParts(world,rand);
    structuresList.add(new ChunkCoordIntPair(x,z));
    return true;
  }
  return false;
}","public boolean generate(World world,Random rand,int x,int z,double chance){
  if (GraveStoneConfig.generateSingleGraves && canSpawnStructureAtCoords(world,x,z,chance)) {
    new ComponentGSSingleGrave(rand.nextInt(4),rand,x,z).addComponentParts(world,rand);
    structuresList.add(new ChunkCoordIntPair(x,z));
    return true;
  }
  return false;
}",0.9725829725829724
59952,"private void generateStructures(){
  if (GraveStoneConfig.generateCemeteries) {
    VillageHandlerGSCemetery villageCemeteryHandler=new VillageHandlerGSCemetery();
    VillagerRegistry.instance().registerVillageCreationHandler(villageCemeteryHandler);
  }
  if (GraveStoneConfig.generateVillageMemorials) {
    VillageHandlerGSMemorial villageMemorialHandler=new VillageHandlerGSMemorial();
    VillagerRegistry.instance().registerVillageCreationHandler(villageMemorialHandler);
  }
  if (GraveStoneConfig.generateUndertaker) {
    VillageHandlerGSUndertaker villageUndertakerHandler=new VillageHandlerGSUndertaker();
    VillagerRegistry.instance().registerVillageCreationHandler(villageUndertakerHandler);
    VillagerRegistry.instance().registerVillagerId(385);
    VillagerRegistry.instance().registerVillagerSkin(385,Resources.UNDARTAKER);
    VillagerRegistry.instance().registerVillageTradeHandler(385,villageUndertakerHandler);
  }
  GameRegistry.registerWorldGenerator(new GraveStoneWorldGenerator());
}","private void generateStructures(){
  if (GraveStoneConfig.generateCemeteries) {
    VillageHandlerGSCemetery villageCemeteryHandler=new VillageHandlerGSCemetery();
    VillagerRegistry.instance().registerVillageCreationHandler(villageCemeteryHandler);
  }
  if (GraveStoneConfig.generateVillageMemorials) {
    VillageHandlerGSMemorial villageMemorialHandler=new VillageHandlerGSMemorial();
    VillagerRegistry.instance().registerVillageCreationHandler(villageMemorialHandler);
  }
  if (GraveStoneConfig.generateUndertaker) {
    VillageHandlerGSUndertaker villageUndertakerHandler=new VillageHandlerGSUndertaker();
    VillagerRegistry.instance().registerVillageCreationHandler(villageUndertakerHandler);
    VillagerRegistry.instance().registerVillagerId(385);
    ModGraveStone.proxy.registerVillagers();
    VillagerRegistry.instance().registerVillageTradeHandler(385,villageUndertakerHandler);
  }
  GameRegistry.registerWorldGenerator(new GraveStoneWorldGenerator());
}",0.8275515334338863
59953,"private void createCenterFence(World world,Random random){
  int y=getGroundY(world,42);
  fillWithRandomizedBlocks(world,boundingBox,42,y,0,42,y + 3,0,false,random,getCemeteryCatacombsStones());
  createGrate(world,43);
  createGrate(world,44);
  createGrate(world,45);
  createGrate(world,46);
  y=getGroundY(world,47);
  fillWithRandomizedBlocks(world,boundingBox,47,y,0,47,y + 3,0,false,random,getCemeteryCatacombsStones());
}","private void createCenterFence(World world,Random random){
  int y=getGroundY(world,42);
  if (checkGround(world,42,y)) {
    fillWithRandomizedBlocks(world,boundingBox,42,y,0,42,y + 3,0,false,random,getCemeteryCatacombsStones());
  }
  createGrate(world,43);
  createGrate(world,44);
  createGrate(world,45);
  createGrate(world,46);
  y=getGroundY(world,47);
  if (checkGround(world,47,y)) {
    fillWithRandomizedBlocks(world,boundingBox,47,y,0,47,y + 3,0,false,random,getCemeteryCatacombsStones());
  }
}",0.9168443496801706
59954,"private void createEntrance(World world,Random random){
  int y=getAverageGroundLevel(world,BoundingBoxHelper.getCorrectBox(coordBaseMode,getXWithOffset(42,0),0,getZWithOffset(42,0),5,7,0,xShift));
  this.fillWithRandomizedBlocks(world,boundingBox,42,y,0,42,y + 3,0,false,random,getCemeteryCatacombsStones());
  this.fillWithRandomizedBlocks(world,boundingBox,47,y,0,47,y + 3,0,false,random,getCemeteryCatacombsStones());
  this.fillWithRandomizedBlocks(world,boundingBox,43,y + 4,0,43,y + 4,0,false,random,getCemeteryCatacombsStones());
  this.fillWithRandomizedBlocks(world,boundingBox,46,y + 4,0,46,y + 4,0,false,random,getCemeteryCatacombsStones());
  this.fillWithBlocks(world,boundingBox,43,y,0,43,y + 3,0,Block.fenceIron.blockID,0,false);
  this.fillWithBlocks(world,boundingBox,46,y,0,46,y + 3,0,Block.fenceIron.blockID,0,false);
  this.fillWithBlocks(world,boundingBox,44,y + 3,0,45,y + 4,0,Block.fenceIron.blockID,0,false);
  this.fillWithMetadataBlocks(world,boundingBox,44,y + 5,0,45,y + 5,0,Block.stoneSingleSlab.blockID,5,Block.stoneSingleSlab.blockID,5,false);
  this.placeBlockAtCurrentPosition(world,Block.stoneSingleSlab.blockID,5,42,y + 4,0,boundingBox);
  this.placeBlockAtCurrentPosition(world,Block.stoneSingleSlab.blockID,5,47,y + 4,0,boundingBox);
}","private void createEntrance(World world,Random random){
  int y=getAverageGroundLevel(world,BoundingBoxHelper.getCorrectBox(coordBaseMode,getXWithOffset(42,0),0,getZWithOffset(42,0),5,7,0,xShift));
  if (checkGround(world,42,47,y)) {
    this.fillWithRandomizedBlocks(world,boundingBox,42,y,0,42,y + 3,0,false,random,getCemeteryCatacombsStones());
    this.fillWithRandomizedBlocks(world,boundingBox,47,y,0,47,y + 3,0,false,random,getCemeteryCatacombsStones());
    this.fillWithRandomizedBlocks(world,boundingBox,43,y + 4,0,43,y + 4,0,false,random,getCemeteryCatacombsStones());
    this.fillWithRandomizedBlocks(world,boundingBox,46,y + 4,0,46,y + 4,0,false,random,getCemeteryCatacombsStones());
    this.fillWithBlocks(world,boundingBox,43,y,0,43,y + 3,0,Block.fenceIron.blockID,0,false);
    this.fillWithBlocks(world,boundingBox,46,y,0,46,y + 3,0,Block.fenceIron.blockID,0,false);
    this.fillWithBlocks(world,boundingBox,44,y + 3,0,45,y + 4,0,Block.fenceIron.blockID,0,false);
    this.fillWithMetadataBlocks(world,boundingBox,44,y + 5,0,45,y + 5,0,Block.stoneSingleSlab.blockID,5,Block.stoneSingleSlab.blockID,5,false);
    this.placeBlockAtCurrentPosition(world,Block.stoneSingleSlab.blockID,5,42,y + 4,0,boundingBox);
    this.placeBlockAtCurrentPosition(world,Block.stoneSingleSlab.blockID,5,47,y + 4,0,boundingBox);
  }
}",0.9769762087490408
59955,"private void createCornerFence(World world,Random random,boolean left){
  byte x;
  if (left) {
    x=89;
  }
 else {
    x=0;
  }
  int y=getGroundY(world,x);
  fillWithRandomizedBlocks(world,boundingBox,x,y,0,x,y + 3,0,false,random,getCemeteryCatacombsStones());
}","private void createCornerFence(World world,Random random,boolean left){
  byte x;
  if (left) {
    x=89;
  }
 else {
    x=0;
  }
  int y=getGroundY(world,x);
  if (checkGround(world,x,y)) {
    fillWithRandomizedBlocks(world,boundingBox,x,y,0,x,y + 3,0,false,random,getCemeteryCatacombsStones());
  }
}",0.9333333333333332
59956,"private void createGrate(World world,int x){
  int y=getGroundY(world,x);
  this.fillWithBlocks(world,boundingBox,x,y,0,x,y + 3,0,Block.fenceIron.blockID,0,false);
}","private void createGrate(World world,int x){
  int y=getGroundY(world,x);
  if (checkGround(world,x,y)) {
    this.fillWithBlocks(world,boundingBox,x,y,0,x,y + 3,0,Block.fenceIron.blockID,0,false);
  }
}",0.8967391304347826
59957,"private void createPartOfFence(World world,Random random,FENCE_DIRECTION direction,int x){
  int y;
switch (direction) {
case LEFT:
    createGrate(world,x);
  createGrate(world,x - 1);
createGrate(world,x - 2);
y=getGroundY(world,x - 3);
this.fillWithRandomizedBlocks(world,boundingBox,x - 3,y,0,x - 3,y + 3,0,false,random,getCemeteryCatacombsStones());
break;
case RIGHT:
createGrate(world,x);
createGrate(world,x + 1);
createGrate(world,x + 2);
y=getGroundY(world,x + 3);
this.fillWithRandomizedBlocks(world,boundingBox,x + 3,y,0,x + 3,y + 3,0,false,random,getCemeteryCatacombsStones());
break;
}
}","private void createPartOfFence(World world,Random random,FENCE_DIRECTION direction,int x){
  int y;
switch (direction) {
case LEFT:
    createGrate(world,x);
  createGrate(world,x - 1);
createGrate(world,x - 2);
y=getGroundY(world,x - 3);
if (checkGround(world,x - 3,y)) {
this.fillWithRandomizedBlocks(world,boundingBox,x - 3,y,0,x - 3,y + 3,0,false,random,getCemeteryCatacombsStones());
}
break;
case RIGHT:
createGrate(world,x);
createGrate(world,x + 1);
createGrate(world,x + 2);
y=getGroundY(world,x + 3);
if (checkGround(world,x + 3,y)) {
this.fillWithRandomizedBlocks(world,boundingBox,x + 3,y,0,x + 3,y + 3,0,false,random,getCemeteryCatacombsStones());
}
break;
}
}",0.9434850863422292
59958,"public ModelAngelStatueMemorial(){
  textureWidth=64;
  textureHeight=64;
  Legs=new ModelRenderer(this,0,16);
  Legs.addBox(0F,0F,0F,6,11,3);
  Legs.setRotationPoint(-3F,13F,0F);
  Legs.setTextureSize(64,64);
  Legs.mirror=true;
  setRotation(Legs,0F,0F,0F);
  Body=new ModelRenderer(this,0,0);
  Body.addBox(0F,0F,0F,8,12,4);
  Body.setRotationPoint(-4F,1F,-0.5F);
  Body.setTextureSize(64,64);
  Body.mirror=true;
  setRotation(Body,0F,0F,0F);
  Head=new ModelRenderer(this,24,0);
  Head.addBox(0F,0F,0F,8,8,8);
  Head.setRotationPoint(-4F,-8F,1F);
  Head.setTextureSize(64,64);
  Head.mirror=true;
  setRotation(Head,-1.047198F,0F,0F);
  RightArm=new ModelRenderer(this,18,16);
  RightArm.addBox(0F,0F,0F,3,7,3);
  RightArm.setRotationPoint(-6.5F,1.5F,1F);
  RightArm.setTextureSize(64,64);
  RightArm.mirror=true;
  setRotation(RightArm,-0.837758F,-0.4014257F,0F);
  RightArm2=new ModelRenderer(this,30,16);
  RightArm2.addBox(0F,0F,0F,3,7,3);
  RightArm2.setRotationPoint(-3F,1F,-4.5F);
  RightArm2.setTextureSize(64,64);
  RightArm2.mirror=true;
  setRotation(RightArm2,0.122173F,-0.4363323F,0.2268928F);
  LeftArm=new ModelRenderer(this,18,16);
  LeftArm.addBox(0F,0F,0F,3,7,3);
  LeftArm.setRotationPoint(3.5F,1.5F,2F);
  LeftArm.setTextureSize(64,64);
  LeftArm.mirror=true;
  setRotation(LeftArm,-0.837758F,0.4014257F,0F);
  LeftArm2=new ModelRenderer(this,30,16);
  LeftArm2.addBox(0F,0F,0F,3,7,3);
  LeftArm2.setRotationPoint(0.2F,2F,-4F);
  LeftArm2.setTextureSize(64,64);
  LeftArm2.mirror=true;
  setRotation(LeftArm2,0.296706F,0.4537856F,-0.1570796F);
  RightWing=new ModelRenderer(this,28,30);
  RightWing.addBox(0F,0F,0F,0,7,7);
  RightWing.setRotationPoint(-1F,2F,2.5F);
  RightWing.setTextureSize(64,64);
  RightWing.mirror=true;
  setRotation(RightWing,0.6108652F,-0.5061455F,-0.0872665F);
  RightWing2=new ModelRenderer(this,0,30);
  RightWing2.addBox(0F,0F,0F,0,14,14);
  RightWing2.setRotationPoint(-4F,-2F,7.3F);
  RightWing2.setTextureSize(64,64);
  RightWing2.mirror=true;
  setRotation(RightWing2,-1.064651F,0.2094395F,0.3839724F);
  LeftWing=new ModelRenderer(this,28,30);
  LeftWing.addBox(0F,0F,0F,0,7,7);
  LeftWing.setRotationPoint(1F,2F,2.5F);
  LeftWing.setTextureSize(64,64);
  LeftWing.mirror=true;
  setRotation(LeftWing,0.6108652F,0.5061455F,0.0872665F);
  LeftWing2=new ModelRenderer(this,0,30);
  LeftWing2.addBox(0F,0F,0F,0,14,14);
  LeftWing2.setRotationPoint(4F,-2F,7.3F);
  LeftWing2.setTextureSize(64,64);
  LeftWing2.mirror=true;
  setRotation(LeftWing2,-1.082104F,-0.1745329F,-0.3839724F);
  pedestal=new ModelSmallPedestal();
}","public ModelAngelStatueMemorial(TileEntityGSRenderer renderer){
  this.renderer=renderer;
  textureWidth=64;
  textureHeight=64;
  Legs=new ModelRenderer(this,0,16);
  Legs.addBox(0F,0F,0F,6,11,3);
  Legs.setRotationPoint(-3F,13F,0F);
  Legs.setTextureSize(64,64);
  Legs.mirror=true;
  setRotation(Legs,0F,0F,0F);
  Body=new ModelRenderer(this,0,0);
  Body.addBox(0F,0F,0F,8,12,4);
  Body.setRotationPoint(-4F,1F,-0.5F);
  Body.setTextureSize(64,64);
  Body.mirror=true;
  setRotation(Body,0F,0F,0F);
  Head=new ModelRenderer(this,24,0);
  Head.addBox(0F,0F,0F,8,8,8);
  Head.setRotationPoint(-4F,-8F,1F);
  Head.setTextureSize(64,64);
  Head.mirror=true;
  setRotation(Head,-1.047198F,0F,0F);
  RightArm=new ModelRenderer(this,18,16);
  RightArm.addBox(0F,0F,0F,3,7,3);
  RightArm.setRotationPoint(-6.5F,1.5F,1F);
  RightArm.setTextureSize(64,64);
  RightArm.mirror=true;
  setRotation(RightArm,-0.837758F,-0.4014257F,0F);
  RightArm2=new ModelRenderer(this,30,16);
  RightArm2.addBox(0F,0F,0F,3,7,3);
  RightArm2.setRotationPoint(-3F,1F,-4.5F);
  RightArm2.setTextureSize(64,64);
  RightArm2.mirror=true;
  setRotation(RightArm2,0.122173F,-0.4363323F,0.2268928F);
  LeftArm=new ModelRenderer(this,18,16);
  LeftArm.addBox(0F,0F,0F,3,7,3);
  LeftArm.setRotationPoint(3.5F,1.5F,2F);
  LeftArm.setTextureSize(64,64);
  LeftArm.mirror=true;
  setRotation(LeftArm,-0.837758F,0.4014257F,0F);
  LeftArm2=new ModelRenderer(this,30,16);
  LeftArm2.addBox(0F,0F,0F,3,7,3);
  LeftArm2.setRotationPoint(0.2F,2F,-4F);
  LeftArm2.setTextureSize(64,64);
  LeftArm2.mirror=true;
  setRotation(LeftArm2,0.296706F,0.4537856F,-0.1570796F);
  RightWing=new ModelRenderer(this,28,30);
  RightWing.addBox(0F,0F,0F,0,7,7);
  RightWing.setRotationPoint(-1F,2F,2.5F);
  RightWing.setTextureSize(64,64);
  RightWing.mirror=true;
  setRotation(RightWing,0.6108652F,-0.5061455F,-0.0872665F);
  RightWing2=new ModelRenderer(this,0,30);
  RightWing2.addBox(0F,0F,0F,0,14,14);
  RightWing2.setRotationPoint(-4F,-2F,7.3F);
  RightWing2.setTextureSize(64,64);
  RightWing2.mirror=true;
  setRotation(RightWing2,-1.064651F,0.2094395F,0.3839724F);
  LeftWing=new ModelRenderer(this,28,30);
  LeftWing.addBox(0F,0F,0F,0,7,7);
  LeftWing.setRotationPoint(1F,2F,2.5F);
  LeftWing.setTextureSize(64,64);
  LeftWing.mirror=true;
  setRotation(LeftWing,0.6108652F,0.5061455F,0.0872665F);
  LeftWing2=new ModelRenderer(this,0,30);
  LeftWing2.addBox(0F,0F,0F,0,14,14);
  LeftWing2.setRotationPoint(4F,-2F,7.3F);
  LeftWing2.setTextureSize(64,64);
  LeftWing2.mirror=true;
  setRotation(LeftWing2,-1.082104F,-0.1745329F,-0.3839724F);
  pedestal=new ModelSmallPedestal(renderer);
}",0.9879240943070732
59959,"public ModelCreeperStatueMemorial(){
  textureWidth=64;
  textureHeight=32;
  float par1=0;
  byte b0=4;
  this.head=new ModelRenderer(this,0,0);
  this.head.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1);
  this.head.setRotationPoint(0.0F,(float)b0,0.0F);
  this.field_78133_b=new ModelRenderer(this,32,0);
  this.field_78133_b.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1 + 0.5F);
  this.field_78133_b.setRotationPoint(0.0F,(float)b0,0.0F);
  this.body=new ModelRenderer(this,16,16);
  this.body.addBox(-4.0F,0.0F,-2.0F,8,12,4,par1);
  this.body.setRotationPoint(0.0F,(float)b0,0.0F);
  this.leg1=new ModelRenderer(this,0,16);
  this.leg1.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg1.setRotationPoint(-2.0F,(float)(12 + b0),4.0F);
  this.leg2=new ModelRenderer(this,0,16);
  this.leg2.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg2.setRotationPoint(2.0F,(float)(12 + b0),4.0F);
  this.leg3=new ModelRenderer(this,0,16);
  this.leg3.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg3.setRotationPoint(-2.0F,(float)(12 + b0),-4.0F);
  this.leg4=new ModelRenderer(this,0,16);
  this.leg4.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg4.setRotationPoint(2.0F,(float)(12 + b0),-4.0F);
  pedestal=new ModelSmallPedestal();
}","public ModelCreeperStatueMemorial(TileEntityGSRenderer renderer){
  this.renderer=renderer;
  textureWidth=64;
  textureHeight=32;
  float par1=0;
  byte b0=4;
  this.head=new ModelRenderer(this,0,0);
  this.head.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1);
  this.head.setRotationPoint(0.0F,(float)b0,0.0F);
  this.field_78133_b=new ModelRenderer(this,32,0);
  this.field_78133_b.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1 + 0.5F);
  this.field_78133_b.setRotationPoint(0.0F,(float)b0,0.0F);
  this.body=new ModelRenderer(this,16,16);
  this.body.addBox(-4.0F,0.0F,-2.0F,8,12,4,par1);
  this.body.setRotationPoint(0.0F,(float)b0,0.0F);
  this.leg1=new ModelRenderer(this,0,16);
  this.leg1.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg1.setRotationPoint(-2.0F,(float)(12 + b0),4.0F);
  this.leg2=new ModelRenderer(this,0,16);
  this.leg2.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg2.setRotationPoint(2.0F,(float)(12 + b0),4.0F);
  this.leg3=new ModelRenderer(this,0,16);
  this.leg3.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg3.setRotationPoint(-2.0F,(float)(12 + b0),-4.0F);
  this.leg4=new ModelRenderer(this,0,16);
  this.leg4.addBox(-2.0F,0.0F,-2.0F,4,6,4,par1);
  this.leg4.setRotationPoint(2.0F,(float)(12 + b0),-4.0F);
  pedestal=new ModelSmallPedestal(renderer);
}",0.9745454545454544
59960,"private void renderCreeperCharging(){
  float tickModifier=(float)(Minecraft.getSystemTime() % 3000L) / 3000.0F * 48.0F;
  float scale=1.2F;
  GL11.glScalef(scale,scale,scale);
  TileEntityRenderer.instance.renderEngine.bindTexture(""String_Node_Str"");
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glDepthMask(true);
  GL11.glMatrixMode(GL11.GL_TEXTURE);
  for (int var21=0; var21 < 2; ++var21) {
    float f4=0.5F;
    GL11.glColor4f(f4,f4,f4,1.0F);
    GL11.glBlendFunc(GL11.GL_SRC_COLOR,GL11.GL_ONE);
    GL11.glMatrixMode(GL11.GL_TEXTURE);
    GL11.glLoadIdentity();
    float var23=tickModifier * (0.001F + (float)var21 * 0.003F) * 20.0F;
    GL11.glTranslatef(0,var23,0);
    renderCreeper();
  }
  GL11.glMatrixMode(GL11.GL_TEXTURE);
  GL11.glLoadIdentity();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glDepthFunc(GL11.GL_LEQUAL);
  GL11.glBlendFunc(GL11.GL_ONE,GL11.GL_ONE);
}","private void renderCreeperCharging(){
  float tickModifier=(float)(Minecraft.getSystemTime() % 3000L) / 3000.0F * 48.0F;
  float scale=1.2F;
  GL11.glScalef(scale,scale,scale);
  renderer.bindTextureByName(""String_Node_Str"");
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glDepthMask(true);
  GL11.glMatrixMode(GL11.GL_TEXTURE);
  for (int var21=0; var21 < 2; ++var21) {
    float f4=0.5F;
    GL11.glColor4f(f4,f4,f4,1.0F);
    GL11.glBlendFunc(GL11.GL_SRC_COLOR,GL11.GL_ONE);
    GL11.glMatrixMode(GL11.GL_TEXTURE);
    GL11.glLoadIdentity();
    float var23=tickModifier * (0.001F + (float)var21 * 0.003F) * 20.0F;
    GL11.glTranslatef(0,var23,0);
    renderCreeper();
  }
  GL11.glMatrixMode(GL11.GL_TEXTURE);
  GL11.glLoadIdentity();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glDepthFunc(GL11.GL_LEQUAL);
  GL11.glBlendFunc(GL11.GL_ONE,GL11.GL_ONE);
}",0.9615384615384616
59961,"public ModelSmallPedestal(){
  textureWidth=64;
  textureHeight=32;
  Pedestal=new ModelRenderer(this,0,0);
  Pedestal.addBox(0F,0F,0F,16,4,16);
  Pedestal.setRotationPoint(-8F,20F,-8F);
  Pedestal.setTextureSize(64,32);
  Pedestal.mirror=true;
  setRotation(Pedestal,0F,0F,0F);
  Pedestal2=new ModelRenderer(this,2,2);
  Pedestal2.addBox(0F,0F,0F,14,4,14);
  Pedestal2.setRotationPoint(-7F,16F,-7F);
  Pedestal2.setTextureSize(64,32);
  Pedestal2.mirror=true;
  setRotation(Pedestal2,0F,0F,0F);
}","public ModelSmallPedestal(TileEntityGSRenderer renderer){
  this.renderer=renderer;
  textureWidth=64;
  textureHeight=32;
  Pedestal=new ModelRenderer(this,0,0);
  Pedestal.addBox(0F,0F,0F,16,4,16);
  Pedestal.setRotationPoint(-8F,20F,-8F);
  Pedestal.setTextureSize(64,32);
  Pedestal.mirror=true;
  setRotation(Pedestal,0F,0F,0F);
  Pedestal2=new ModelRenderer(this,2,2);
  Pedestal2.addBox(0F,0F,0F,14,4,14);
  Pedestal2.setRotationPoint(-7F,16F,-7F);
  Pedestal2.setTextureSize(64,32);
  Pedestal2.mirror=true;
  setRotation(Pedestal2,0F,0F,0F);
}",0.9475691134413728
59962,"@Override public void renderAll(){
  unshiftModel();
  float par7=0.0625F;
  TileEntityRenderer.instance.renderEngine.bindTexture(""String_Node_Str"");
  Pedestal.render(par7);
  Pedestal2.render(par7);
}","@Override public void renderAll(){
  unshiftModel();
  float par7=0.0625F;
  renderer.bindTextureByName(""String_Node_Str"");
  Pedestal.render(par7);
  Pedestal2.render(par7);
}",0.8941798941798942
59963,"public ModelSteveStatueMemorial(float par1){
  float par2=0;
  textureWidth=64;
  textureHeight=32;
  this.heldItemLeft=0;
  this.heldItemRight=0;
  this.bipedHead=new ModelRenderer(this,0,0);
  this.bipedHead.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1);
  this.bipedHead.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.bipedHeadwear=new ModelRenderer(this,32,0);
  this.bipedHeadwear.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1 + 0.5F);
  this.bipedHeadwear.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.bipedBody=new ModelRenderer(this,16,16);
  this.bipedBody.addBox(-4.0F,0.0F,-2.0F,8,12,4,par1);
  this.bipedBody.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.bipedRightArm=new ModelRenderer(this,40,16);
  this.bipedRightArm.addBox(-3.0F,-2.0F,-2.0F,4,12,4,par1);
  this.bipedRightArm.setRotationPoint(-5.0F,2.0F + par2,0.0F);
  this.bipedLeftArm=new ModelRenderer(this,40,16);
  this.bipedLeftArm.mirror=true;
  this.bipedLeftArm.addBox(-1.0F,-2.0F,-2.0F,4,12,4,par1);
  this.bipedLeftArm.setRotationPoint(5.0F,2.0F + par2,0.0F);
  this.bipedRightLeg=new ModelRenderer(this,0,16);
  this.bipedRightLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  this.bipedRightLeg.setRotationPoint(-1.9F,12.0F + par2,0.0F);
  this.bipedLeftLeg=new ModelRenderer(this,0,16);
  this.bipedLeftLeg.mirror=true;
  this.bipedLeftLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  this.bipedLeftLeg.setRotationPoint(1.9F,12.0F + par2,0.0F);
  pedestal=new ModelSmallPedestal();
}","public ModelSteveStatueMemorial(TileEntityGSRenderer renderer){
  this.renderer=renderer;
  float par1=0;
  float par2=0;
  textureWidth=64;
  textureHeight=32;
  this.heldItemLeft=0;
  this.heldItemRight=0;
  this.bipedHead=new ModelRenderer(this,0,0);
  this.bipedHead.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1);
  this.bipedHead.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.bipedHeadwear=new ModelRenderer(this,32,0);
  this.bipedHeadwear.addBox(-4.0F,-8.0F,-4.0F,8,8,8,par1 + 0.5F);
  this.bipedHeadwear.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.bipedBody=new ModelRenderer(this,16,16);
  this.bipedBody.addBox(-4.0F,0.0F,-2.0F,8,12,4,par1);
  this.bipedBody.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.bipedRightArm=new ModelRenderer(this,40,16);
  this.bipedRightArm.addBox(-3.0F,-2.0F,-2.0F,4,12,4,par1);
  this.bipedRightArm.setRotationPoint(-5.0F,2.0F + par2,0.0F);
  this.bipedLeftArm=new ModelRenderer(this,40,16);
  this.bipedLeftArm.mirror=true;
  this.bipedLeftArm.addBox(-1.0F,-2.0F,-2.0F,4,12,4,par1);
  this.bipedLeftArm.setRotationPoint(5.0F,2.0F + par2,0.0F);
  this.bipedRightLeg=new ModelRenderer(this,0,16);
  this.bipedRightLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  this.bipedRightLeg.setRotationPoint(-1.9F,12.0F + par2,0.0F);
  this.bipedLeftLeg=new ModelRenderer(this,0,16);
  this.bipedLeftLeg.mirror=true;
  this.bipedLeftLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  this.bipedLeftLeg.setRotationPoint(1.9F,12.0F + par2,0.0F);
  pedestal=new ModelSmallPedestal(renderer);
}",0.9752458460495084
59964,"private void renderArmor(){
  ModelSmallPedestal.shiftModel();
  float scale=1.1F;
  GL11.glScalef(scale,scale,scale);
  TileEntityRenderer.instance.renderEngine.bindTexture(""String_Node_Str"");
  renderSteve();
}","private void renderArmor(){
  ModelSmallPedestal.shiftModel();
  float scale=1.1F;
  GL11.glScalef(scale,scale,scale);
  renderer.bindTextureByName(""String_Node_Str"");
  renderSteve();
}",0.8994974874371859
59965,"public ModelSwordGrave(){
  textureWidth=32;
  textureHeight=32;
  Blade1=new ModelRenderer(this,0,0);
  Blade1.addBox(0F,0F,0F,1,10,0);
  Blade1.setRotationPoint(-1F,14F,0F);
  Blade1.setTextureSize(64,32);
  Blade1.mirror=true;
  setRotation(Blade1,0F,0.2617994F,0F);
  Blade2=new ModelRenderer(this,2,0);
  Blade2.addBox(0F,0F,0F,1,10,0);
  Blade2.setRotationPoint(-1F,14F,0F);
  Blade2.setTextureSize(64,32);
  Blade2.mirror=true;
  setRotation(Blade2,0F,-0.2617994F,0F);
  Blade3=new ModelRenderer(this,2,0);
  Blade3.addBox(0F,0F,0F,1,10,0);
  Blade3.setRotationPoint(0.9F,14F,0F);
  Blade3.setTextureSize(64,32);
  Blade3.mirror=true;
  setRotation(Blade3,0F,2.879793F,0F);
  Blade4=new ModelRenderer(this,0,0);
  Blade4.addBox(0F,0F,0F,1,10,0);
  Blade4.setRotationPoint(0.9F,14F,0F);
  Blade4.setTextureSize(64,32);
  Blade4.mirror=true;
  setRotation(Blade4,0F,-2.879793F,0F);
  Shape3=new ModelRenderer(this,4,0);
  Shape3.addBox(0F,0F,0F,4,1,1);
  Shape3.setRotationPoint(-2F,13F,-0.5F);
  Shape3.setTextureSize(64,32);
  Shape3.mirror=true;
  setRotation(Shape3,0F,0F,0F);
  Hilt=new ModelRenderer(this,4,2);
  Hilt.addBox(0F,0F,0F,1,3,1);
  Hilt.setRotationPoint(-0.5F,10F,-0.5F);
  Hilt.setTextureSize(64,32);
  Hilt.mirror=true;
  setRotation(Hilt,0F,0F,0F);
}","public ModelSwordGrave(TileEntityGSRenderer renderer){
  this.renderer=renderer;
  textureWidth=32;
  textureHeight=32;
  Blade1=new ModelRenderer(this,0,0);
  Blade1.addBox(0F,0F,0F,1,10,0);
  Blade1.setRotationPoint(-1F,14F,0F);
  Blade1.setTextureSize(64,32);
  Blade1.mirror=true;
  setRotation(Blade1,0F,0.2617994F,0F);
  Blade2=new ModelRenderer(this,2,0);
  Blade2.addBox(0F,0F,0F,1,10,0);
  Blade2.setRotationPoint(-1F,14F,0F);
  Blade2.setTextureSize(64,32);
  Blade2.mirror=true;
  setRotation(Blade2,0F,-0.2617994F,0F);
  Blade3=new ModelRenderer(this,2,0);
  Blade3.addBox(0F,0F,0F,1,10,0);
  Blade3.setRotationPoint(0.9F,14F,0F);
  Blade3.setTextureSize(64,32);
  Blade3.mirror=true;
  setRotation(Blade3,0F,2.879793F,0F);
  Blade4=new ModelRenderer(this,0,0);
  Blade4.addBox(0F,0F,0F,1,10,0);
  Blade4.setRotationPoint(0.9F,14F,0F);
  Blade4.setTextureSize(64,32);
  Blade4.mirror=true;
  setRotation(Blade4,0F,-2.879793F,0F);
  Shape3=new ModelRenderer(this,4,0);
  Shape3.addBox(0F,0F,0F,4,1,1);
  Shape3.setRotationPoint(-2F,13F,-0.5F);
  Shape3.setTextureSize(64,32);
  Shape3.mirror=true;
  setRotation(Shape3,0F,0F,0F);
  Hilt=new ModelRenderer(this,4,2);
  Hilt.addBox(0F,0F,0F,1,3,1);
  Hilt.setRotationPoint(-0.5F,10F,-0.5F);
  Hilt.setTextureSize(64,32);
  Hilt.mirror=true;
  setRotation(Hilt,0F,0F,0F);
}",0.978902953586498
59966,"private void renderEnchantment(){
  float tickModifier=(float)(Minecraft.getSystemTime() % 3000L) / 3000.0F * 48.0F;
  TileEntityRenderer.instance.renderEngine.bindTexture(""String_Node_Str"");
  GL11.glEnable(GL11.GL_BLEND);
  float var20=0.5F;
  GL11.glColor4f(var20,var20,var20,1.0F);
  GL11.glDepthFunc(GL11.GL_EQUAL);
  GL11.glDepthMask(false);
  for (int var21=0; var21 < 2; ++var21) {
    GL11.glDisable(GL11.GL_LIGHTING);
    float var22=0.76F;
    GL11.glColor4f(0.5F * var22,0.25F * var22,0.8F * var22,1.0F);
    GL11.glBlendFunc(GL11.GL_SRC_COLOR,GL11.GL_ONE);
    GL11.glMatrixMode(GL11.GL_TEXTURE);
    GL11.glLoadIdentity();
    float var23=tickModifier * (0.001F + (float)var21 * 0.003F) * 20.0F;
    float var24=0.33333334F;
    GL11.glScalef(var24,var24,var24);
    GL11.glRotatef(30.0F - (float)var21 * 60.0F,0.0F,0.0F,1.0F);
    GL11.glTranslatef(0.0F,var23,0.0F);
    GL11.glMatrixMode(GL11.GL_MODELVIEW);
    renderAll();
  }
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glMatrixMode(GL11.GL_TEXTURE);
  GL11.glDepthMask(true);
  GL11.glLoadIdentity();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glDepthFunc(GL11.GL_LEQUAL);
}","private void renderEnchantment(){
  float tickModifier=(float)(Minecraft.getSystemTime() % 3000L) / 3000.0F * 48.0F;
  renderer.bindTextureByName(""String_Node_Str"");
  GL11.glEnable(GL11.GL_BLEND);
  float var20=0.5F;
  GL11.glColor4f(var20,var20,var20,1.0F);
  GL11.glDepthFunc(GL11.GL_EQUAL);
  GL11.glDepthMask(false);
  for (int var21=0; var21 < 2; ++var21) {
    GL11.glDisable(GL11.GL_LIGHTING);
    float var22=0.76F;
    GL11.glColor4f(0.5F * var22,0.25F * var22,0.8F * var22,1.0F);
    GL11.glBlendFunc(GL11.GL_SRC_COLOR,GL11.GL_ONE);
    GL11.glMatrixMode(GL11.GL_TEXTURE);
    GL11.glLoadIdentity();
    float var23=tickModifier * (0.001F + (float)var21 * 0.003F) * 20.0F;
    float var24=0.33333334F;
    GL11.glScalef(var24,var24,var24);
    GL11.glRotatef(30.0F - (float)var21 * 60.0F,0.0F,0.0F,1.0F);
    GL11.glTranslatef(0.0F,var23,0.0F);
    GL11.glMatrixMode(GL11.GL_MODELVIEW);
    renderAll();
  }
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glMatrixMode(GL11.GL_TEXTURE);
  GL11.glDepthMask(true);
  GL11.glLoadIdentity();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glDepthFunc(GL11.GL_LEQUAL);
}",0.9701244813278008
59967,"public ModelVillagerMemorial(float par1,float par2,int par3,int par4){
  textureWidth=64;
  textureHeight=64;
  this.villagerHead=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.villagerHead.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.villagerHead.setTextureOffset(0,0).addBox(-4.0F,-10.0F,-4.0F,8,10,8,par1);
  this.field_82898_f=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.field_82898_f.setRotationPoint(0.0F,par2 - 2.0F,0.0F);
  this.field_82898_f.setTextureOffset(24,0).addBox(-1.0F,-1.0F,-6.0F,2,4,2,par1);
  this.villagerHead.addChild(this.field_82898_f);
  this.villagerBody=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.villagerBody.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.villagerBody.setTextureOffset(16,20).addBox(-4.0F,0.0F,-3.0F,8,12,6,par1);
  this.villagerBody.setTextureOffset(0,38).addBox(-4.0F,0.0F,-3.0F,8,18,6,par1 + 0.5F);
  this.villagerArms=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.villagerArms.setRotationPoint(0.0F,0.0F + par2 + 2.0F,0.0F);
  this.villagerArms.setTextureOffset(44,22).addBox(-8.0F,-2.0F,-2.0F,4,8,4,par1);
  this.villagerArms.setTextureOffset(44,22).addBox(4.0F,-2.0F,-2.0F,4,8,4,par1);
  this.villagerArms.setTextureOffset(40,38).addBox(-4.0F,2.0F,-2.0F,8,4,4,par1);
  this.rightVillagerLeg=(new ModelRenderer(this,0,22)).setTextureSize(par3,par4);
  this.rightVillagerLeg.setRotationPoint(-2.0F,12.0F + par2,0.0F);
  this.rightVillagerLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  this.leftVillagerLeg=(new ModelRenderer(this,0,22)).setTextureSize(par3,par4);
  this.leftVillagerLeg.mirror=true;
  this.leftVillagerLeg.setRotationPoint(2.0F,12.0F + par2,0.0F);
  this.leftVillagerLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  pedestal=new ModelSmallPedestal();
}","public ModelVillagerMemorial(TileEntityGSRenderer renderer){
  float par1=0;
  float par2=0;
  int par3=64;
  int par4=64;
  this.renderer=renderer;
  textureWidth=64;
  textureHeight=64;
  this.villagerHead=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.villagerHead.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.villagerHead.setTextureOffset(0,0).addBox(-4.0F,-10.0F,-4.0F,8,10,8,par1);
  this.field_82898_f=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.field_82898_f.setRotationPoint(0.0F,par2 - 2.0F,0.0F);
  this.field_82898_f.setTextureOffset(24,0).addBox(-1.0F,-1.0F,-6.0F,2,4,2,par1);
  this.villagerHead.addChild(this.field_82898_f);
  this.villagerBody=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.villagerBody.setRotationPoint(0.0F,0.0F + par2,0.0F);
  this.villagerBody.setTextureOffset(16,20).addBox(-4.0F,0.0F,-3.0F,8,12,6,par1);
  this.villagerBody.setTextureOffset(0,38).addBox(-4.0F,0.0F,-3.0F,8,18,6,par1 + 0.5F);
  this.villagerArms=(new ModelRenderer(this)).setTextureSize(par3,par4);
  this.villagerArms.setRotationPoint(0.0F,0.0F + par2 + 2.0F,0.0F);
  this.villagerArms.setTextureOffset(44,22).addBox(-8.0F,-2.0F,-2.0F,4,8,4,par1);
  this.villagerArms.setTextureOffset(44,22).addBox(4.0F,-2.0F,-2.0F,4,8,4,par1);
  this.villagerArms.setTextureOffset(40,38).addBox(-4.0F,2.0F,-2.0F,8,4,4,par1);
  this.rightVillagerLeg=(new ModelRenderer(this,0,22)).setTextureSize(par3,par4);
  this.rightVillagerLeg.setRotationPoint(-2.0F,12.0F + par2,0.0F);
  this.rightVillagerLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  this.leftVillagerLeg=(new ModelRenderer(this,0,22)).setTextureSize(par3,par4);
  this.leftVillagerLeg.mirror=true;
  this.leftVillagerLeg.setRotationPoint(2.0F,12.0F + par2,0.0F);
  this.leftVillagerLeg.addBox(-2.0F,0.0F,-2.0F,4,12,4,par1);
  pedestal=new ModelSmallPedestal(renderer);
}",0.9427942794279428
59968,"private ModelGraveStone getGraveModel(byte graveType){
switch (graveType) {
case 1:
    return cross;
case 2:
  return horisontalPlate;
case 3:
return dogStatue;
case 4:
return catStatue;
case 5:
case 6:
case 7:
case 8:
case 9:
return swordGrave;
case 0:
default :
return verticalPlate;
}
}","private ModelGraveStone getGraveModel(byte graveType){
switch (graveType) {
case 1:
    return cross;
case 2:
  return horisontalPlate;
case 3:
return dogStatue;
case 4:
return catStatue;
case 5:
case 6:
case 7:
case 8:
case 9:
return new ModelSwordGrave(this);
case 0:
default :
return verticalPlate;
}
}",0.9714285714285714
59969,"private ModelGraveStone getMemorialModel(int memorialType){
switch (memorialType) {
case 1:
    return obelisk;
case 2:
  return steveStatue;
case 3:
return villagerStatue;
case 4:
return angelStatue;
case 5:
return dogStatue;
case 6:
return catStatue;
case 7:
return creeperStatue;
case 0:
default :
return cross;
}
}","private ModelGraveStone getMemorialModel(int memorialType){
switch (memorialType) {
case 1:
    return obelisk;
case 2:
  return new ModelSteveStatueMemorial(this);
case 3:
return new ModelVillagerMemorial(this);
case 4:
return new ModelAngelStatueMemorial(this);
case 5:
return dogStatue;
case 6:
return catStatue;
case 7:
return new ModelCreeperStatueMemorial(this);
case 0:
default :
return cross;
}
}",0.853185595567867
59970,"@Override public void renderAll(){
  Blade1.render(0.0625F);
  Blade2.render(0.0625F);
  Blade3.render(0.0625F);
  Blade4.render(0.0625F);
  Shape3.render(0.0625F);
}","@Override public void renderAll(){
  Blade1.render(0.0625F);
  Blade2.render(0.0625F);
  Blade3.render(0.0625F);
  Blade4.render(0.0625F);
  Shape3.render(0.0625F);
  Hilt.render(0.0625F);
}",0.9325842696629212
59971,"private void getGraveTexture(byte graveType){
switch (graveType) {
case 0:
    bindTextureByName(""String_Node_Str"");
  break;
case 1:
bindTextureByName(""String_Node_Str"");
break;
case 2:
bindTextureByName(""String_Node_Str"");
break;
case 3:
bindTextureByName(""String_Node_Str"");
break;
case 4:
bindTextureByName(""String_Node_Str"");
break;
}
}","private void getGraveTexture(byte graveType){
switch (graveType) {
case 0:
    bindTextureByName(""String_Node_Str"");
  break;
case 1:
bindTextureByName(""String_Node_Str"");
break;
case 2:
bindTextureByName(""String_Node_Str"");
break;
case 3:
bindTextureByName(""String_Node_Str"");
break;
case 4:
bindTextureByName(""String_Node_Str"");
break;
case 5:
bindTextureByName(""String_Node_Str"");
break;
case 6:
bindTextureByName(""String_Node_Str"");
break;
case 7:
bindTextureByName(""String_Node_Str"");
break;
case 8:
bindTextureByName(""String_Node_Str"");
break;
case 9:
bindTextureByName(""String_Node_Str"");
break;
}
}",0.720168954593453
59972,"private int getRandomDamage(Random random,int maxDamage){
  return 20 + random.nextInt(maxDamage - 20);
}","private int getRandomDamage(Random random,int maxDamage){
  return random.nextInt(maxDamage);
}",0.95
59973,"private void spawnMob(World world,int x,int y,int z){
  if (GraveStoneMobSpawn.checkChance(world.rand)) {
    TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
    if (tileEntity != null) {
      Entity mob=GraveStoneMobSpawn.getMobEntity(world,tileEntity.getGraveType(),x,y,z);
      GraveStoneMobSpawn.spawnMob(world,mob,x,y,z);
    }
  }
}","private void spawnMob(World world,int x,int y,int z){
  if (GraveStoneMobSpawn.checkChance(world.rand)) {
    TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
    if (tileEntity != null) {
      Entity mob=GraveStoneMobSpawn.getMobEntity(world,tileEntity.getGraveType(),x,y,z);
      if (mob != null) {
        GraveStoneMobSpawn.spawnMob(world,mob,x,y,z);
      }
    }
  }
}",0.9563046192259675
59974,"public void getEntity(){
  EntityRegistry.registerGlobalEntityID(EntityZombieDog.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityZombieDog.class,""String_Node_Str"",1,mod_GraveStone.instance,40,1,true);
  EntityRegistry.addSpawn(EntityZombieDog.class,3,4,8,EnumCreatureType.monster,BiomeGenBase.forest,BiomeGenBase.forestHills,BiomeGenBase.swampland,BiomeGenBase.taiga,BiomeGenBase.taigaHills);
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"");
  registerEntityEgg(EntityZombieDog.class,0xffffff,0x000000);
  EntityRegistry.registerGlobalEntityID(EntityZombieCat.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityZombieCat.class,""String_Node_Str"",1,mod_GraveStone.instance,40,1,true);
  EntityRegistry.addSpawn(EntityZombieCat.class,3,4,8,EnumCreatureType.monster,BiomeGenBase.jungle,BiomeGenBase.jungleHills);
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"");
  registerEntityEgg(EntityZombieCat.class,0xffffff,0x000000);
}","public void getEntity(){
  EntityRegistry.registerGlobalEntityID(EntityZombieDog.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId(),0xffffff,0x000000);
  EntityRegistry.addSpawn(EntityZombieDog.class,3,4,8,EnumCreatureType.monster,BiomeGenBase.forest,BiomeGenBase.forestHills,BiomeGenBase.swampland,BiomeGenBase.taiga,BiomeGenBase.taigaHills);
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EntityZombieCat.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId(),0xffffff,0x000000);
  EntityRegistry.addSpawn(EntityZombieCat.class,3,4,8,EnumCreatureType.monster,BiomeGenBase.jungle,BiomeGenBase.jungleHills);
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"");
}",0.3295336787564767
59975,"/** 
 * Called when the screen is unloaded. Used to disable keyboard repeat events
 */
public void onGuiClosed(){
  Keyboard.enableRepeatEvents(false);
  entityGrave.setDeathText(graveText.toString());
  entityGrave.setEditable(true);
}","/** 
 * Called when the screen is unloaded. Used to disable keyboard repeat events
 */
public void onGuiClosed(){
  Keyboard.enableRepeatEvents(false);
  Packet250CustomPayload packet=new Packet250CustomPayload();
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  DataOutputStream data=new DataOutputStream(bytes);
  try {
    data.writeInt(entityGrave.xCoord);
    data.writeInt(entityGrave.yCoord);
    data.writeInt(entityGrave.zCoord);
    data.writeUTF(graveText.toString());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  packet.channel=""String_Node_Str"";
  packet.data=bytes.toByteArray();
  packet.length=packet.data.length;
  ModLoader.getMinecraftInstance().getNetHandler().addToSendQueue(packet);
  entityGrave.setDeathText(graveText.toString());
  entityGrave.setEditable(true);
}",0.4478178368121442
59976,"public void setDeathText(String text){
  gSDeathText.setDeathText(text);
}","public void setDeathText(String text){
  gSDeathText.setDeathText(text);
  this.onInventoryChanged();
}",0.8361581920903954
59977,"/** 
 * Called upon block activation (right click on the block.)
 */
public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int par6,float par7,float par8,float par9){
  TileEntityGSGraveStone entity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
  if (entity != null) {
    String deathText=entity.getDeathText();
    if (!deathText.equals(""String_Node_Str"")) {
      entityPlayer.sendChatToPlayer(deathText);
      if (entity.getAge() != -1) {
        entityPlayer.sendChatToPlayer(""String_Node_Str"" + entity.getAge() + ""String_Node_Str"");
      }
    }
  }
  return false;
}","/** 
 * Called upon block activation (right click on the block.)
 */
public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int par6,float par7,float par8,float par9){
  if (world.isRemote) {
    TileEntityGSGraveStone entity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
    if (entity != null) {
      String deathText=entity.getDeathText();
      if (!deathText.equals(""String_Node_Str"")) {
        entityPlayer.sendChatToPlayer(deathText);
        if (entity.getAge() != -1) {
          entityPlayer.sendChatToPlayer(""String_Node_Str"" + entity.getAge() + ""String_Node_Str"");
        }
      }
    }
  }
  return false;
}",0.9627329192546584
59978,"/** 
 * Called upon block activation (right click on the block.)
 */
public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int par6,float par7,float par8,float par9){
  TileEntityGSMemorial entity=(TileEntityGSMemorial)world.getBlockTileEntity(x,y,z);
  if (entity != null) {
    String deathText=entity.getDeathText();
    if (!deathText.equals(""String_Node_Str"")) {
      entityPlayer.sendChatToPlayer(deathText);
    }
  }
  return false;
}","/** 
 * Called upon block activation (right click on the block.)
 */
public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int par6,float par7,float par8,float par9){
  if (world.isRemote) {
    TileEntityGSMemorial entity=(TileEntityGSMemorial)world.getBlockTileEntity(x,y,z);
    if (entity != null) {
      String deathText=entity.getDeathText();
      if (!deathText.equals(""String_Node_Str"")) {
        entityPlayer.sendChatToPlayer(deathText);
      }
    }
  }
  return false;
}",0.9578313253012049
59979,"/** 
 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
 */
public boolean isOpaqueCube(){
  return false;
}","/** 
 * Is this block (a) opaque and (b) a full 1m cube? This determines whether or not to render the shared face of two adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
 */
public boolean isOpaqueCube(){
  return false;
}",0.998158379373849
59980,"/** 
 * Called when the block is placed in the world
 */
public void onBlockPlacedBy(World world,int x,int y,int z,EntityLiving player,ItemStack itemStack){
  replaceGround(world,x,y - 1,z);
  int direction=MathHelper.floor_float(player.rotationYaw);
  if (direction < 0) {
    direction=360 + direction;
  }
  int metadata=getMetadataBasedOnRotation(direction);
  world.setBlockMetadataWithNotify(x,y,z,metadata,2);
  TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
  if (tileEntity != null) {
    if (itemStack.stackTagCompound != null) {
      if (itemStack.stackTagCompound.hasKey(""String_Node_Str"")) {
        tileEntity.setGraveType(itemStack.stackTagCompound.getByte(""String_Node_Str""));
      }
 else {
        tileEntity.setGraveType((byte)0);
      }
      if (itemStack.stackTagCompound.hasKey(""String_Node_Str"")) {
        tileEntity.setDeathText(itemStack.stackTagCompound.getString(""String_Node_Str""));
      }
      if (itemStack.stackTagCompound.hasKey(""String_Node_Str"")) {
        tileEntity.setDeathText(itemStack.stackTagCompound.getString(""String_Node_Str""));
      }
    }
  }
}","/** 
 * Called when the block is placed in the world
 */
public void onBlockPlacedBy(World world,int x,int y,int z,EntityLiving player,ItemStack itemStack){
  replaceGround(world,x,y - 1,z);
  int direction=MathHelper.floor_float(player.rotationYaw);
  if (direction < 0) {
    direction=360 + direction;
  }
  int metadata=getMetadataBasedOnRotation(direction);
  world.setBlockMetadataWithNotify(x,y,z,metadata,2);
  TileEntityGSGraveStone tileEntity=(TileEntityGSGraveStone)world.getBlockTileEntity(x,y,z);
  if (tileEntity != null) {
    if (itemStack.stackTagCompound != null) {
      if (itemStack.stackTagCompound.hasKey(""String_Node_Str"")) {
        tileEntity.setGraveType(itemStack.stackTagCompound.getByte(""String_Node_Str""));
      }
 else {
        tileEntity.setGraveType((byte)0);
      }
      if (itemStack.stackTagCompound.hasKey(""String_Node_Str"")) {
        tileEntity.setDeathText(itemStack.stackTagCompound.getString(""String_Node_Str""));
      }
      if (itemStack.stackTagCompound.hasKey(""String_Node_Str"")) {
        tileEntity.setAge(itemStack.stackTagCompound.getInteger(""String_Node_Str""));
      }
    }
  }
}",0.98903989478299
59981,"/** 
 * Assigns an ip to a device. Note: This will return null if there are 255
 */
private final String assignIp(){
  short[] deviceIp=null;
  short[] ip=Internet.ipFromString(this.ip);
  if (devices.size() > 255) {
    return null;
  }
  for (short i=2; i < 256; i++) {
    deviceIp=new short[]{ip[0],ip[1],ip[2],i};
    if (getDevice(Internet.ipToString(deviceIp)) == null) {
      break;
    }
  }
  return Internet.ipToString(deviceIp);
}","/** 
 * Assigns an ip to a device. Note: This will return null if there are 255
 */
private String assignIp(){
  short[] deviceIp=null;
  short[] ip=Internet.ipFromString(this.ip);
  if (devices.size() > 255) {
    return null;
  }
  for (short i=2; i < 256; i++) {
    deviceIp=new short[]{ip[0],ip[1],ip[2],i};
    if (getDevice(Internet.ipToString(deviceIp)) == null) {
      break;
    }
  }
  return Internet.ipToString(deviceIp);
}",0.9931818181818182
59982,"/** 
 * Registers a device on the network.
 */
public final boolean addDevice(Device device){
  String ip=assignIp();
  if (devices.size() >= deviceLimit || ip == null) {
    return false;
  }
  devices.put(device.getIp(),device);
  device.setIp(ip);
  device.setNetwork(this);
  return true;
}","/** 
 * Registers a device on the network.
 */
public final boolean addDevice(Device device){
  String ip=assignIp();
  if (devices.size() >= deviceLimit || ip == null) {
    return false;
  }
  devices.put(ip,device);
  device.setIp(ip);
  device.setNetwork(this);
  return true;
}",0.9027777777777778
59983,"private static ModuleBase politics(){
  try {
    Clamp clamp=new Clamp(new Const());
    clamp.setBounds(0,1);
  }
 catch (  ExceptionInvalidParam exceptionInvalidParam) {
    exceptionInvalidParam.printStackTrace();
  }
  return null;
}","private static ModuleBase politics(){
  try {
    Clamp clamp=new Clamp(new Const());
    clamp.setBounds(0,1);
    return clamp;
  }
 catch (  ExceptionInvalidParam exceptionInvalidParam) {
    exceptionInvalidParam.printStackTrace();
  }
  return null;
}",0.9635627530364372
59984,"private static ModuleBase ethics(){
  try {
    Clamp clamp=new Clamp(new Const());
    clamp.setBounds(0,1);
  }
 catch (  ExceptionInvalidParam exceptionInvalidParam) {
    exceptionInvalidParam.printStackTrace();
  }
  return null;
}","private static ModuleBase ethics(){
  try {
    Clamp clamp=new Clamp(new Const());
    clamp.setBounds(0,1);
    return clamp;
  }
 catch (  ExceptionInvalidParam exceptionInvalidParam) {
    exceptionInvalidParam.printStackTrace();
  }
  return null;
}",0.963265306122449
59985,"private void runPython(List<String> parameters) throws FileNotFoundException {
  PythonInterpreter pi=new PythonInterpreter();
  File[] files=new File(""String_Node_Str"").listFiles();
  File file=null;
  for (  File f : files) {
    if (f.getName().equals(parameters.get(0) + ""String_Node_Str"")) {
      file=f;
    }
  }
  if (file == null || !file.exists()) {
    throw new FileNotFoundException();
  }
  System.out.println(file.getPath());
  if (parameters.size() > 1) {
    parameters.remove(0);
    pi.set(""String_Node_Str"",parameters);
  }
  pi.set(""String_Node_Str"",terminal);
  pi.execfile(file.getPath());
}","private void runPython(List<String> parameters) throws FileNotFoundException {
}",0.2302158273381295
59986,"/** 
 * Runs the desired command on a separate thread. Not that any program would be intensive at all, but sleep(n) or large iterations will not lock up the game.
 */
public Command(String input,Device device,Terminal terminal){
  this.input=input;
  this.device=device;
  this.terminal=terminal;
  userInputBuffer=new ConcurrentLinkedQueue<Integer>();
  File f=new File(""String_Node_Str"");
  if (!f.exists()) {
    try {
      f.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  run();
}","/** 
 * Runs the desired command on a separate thread. Not that any program would be intensive at all, but sleep(n) or large iterations will not lock up the game.
 */
public Command(String input,Device device,Terminal terminal){
  this.input=input;
  this.device=device;
  this.terminal=terminal;
  userInputBuffer=new ConcurrentLinkedQueue<Integer>();
  File f=new File(""String_Node_Str"");
  if (!f.exists()) {
    try {
      if (!f.createNewFile()) {
        throw new IOException();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  run();
}",0.922242314647378
59987,"@Override public void run(){
  List<String> parameters=new ArrayList<String>();
  try {
    commandLog=new PrintWriter(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  while (input.matches(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      input=input.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
    String inputTemp=input;
    input=input.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    int l=input.length();
    String next=inputTemp.substring(0,inputTemp.length() - l);
    parameters.add(next);
  }
  System.out.println(parameters.toString());
  commandLog.println(parameters.toString());
  if (parameters != null && !parameters.isEmpty()) {
    try {
      runPython(parameters);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"");
      commandLog.println(""String_Node_Str"");
    }
  }
  commandLog.println();
  commandLog.flush();
  commandLog.close();
  terminal.setCommand(null);
}","@Override public void run(){
  List<String> parameters=new ArrayList<String>();
  try {
    commandLog=new PrintWriter(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  while (input.matches(""String_Node_Str"")) {
    if (input.startsWith(""String_Node_Str"")) {
      input=input.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
    String inputTemp=input;
    input=input.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    int l=input.length();
    String next=inputTemp.substring(0,inputTemp.length() - l);
    parameters.add(next);
  }
  System.out.println(parameters.toString());
  commandLog.println(parameters.toString());
  if (!parameters.isEmpty()) {
    try {
      runPython(parameters);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"");
      commandLog.println(""String_Node_Str"");
    }
  }
  commandLog.println();
  commandLog.flush();
  commandLog.close();
  terminal.setCommand(null);
}",0.9891732283464568
59988,"public static Billboard make(String imgPath){
  Texture tex=new Texture(Gdx.files.internal(imgPath));
  Billboard sp=new Billboard(tex);
  return sp;
}","public static Billboard make(String imgPath){
  Texture tex=new Texture(Gdx.files.internal(imgPath));
  return new Billboard(tex);
}",0.8975265017667845
59989,"@Override public boolean scrolled(int amount){
  float zoom=0;
  if ((cam.zoom > 0.25 && amount < 0) || (cam.zoom < 5 && amount > 0)) {
    zoom=cam.zoom + amount / 20f;
    cam.zoom=Math.round(zoom * 100) / 100f;
  }
  System.out.println(cam.zoom);
  return true;
}","@Override public boolean scrolled(int amount){
  float zoom;
  if ((cam.zoom > 0.25 && amount < 0) || (cam.zoom < 5 && amount > 0)) {
    zoom=cam.zoom + amount / 20f;
    cam.zoom=Math.round(zoom * 100) / 100f;
  }
  System.out.println(cam.zoom);
  return true;
}",0.9962264150943396
59990,"public Terminal(ServerWindowStage w){
  terminal=this;
  window=w;
  device=window.getDevice();
  Skin skin=Assets.skin;
  history=new ArrayList<String>();
  table=new com.badlogic.gdx.scenes.scene2d.ui.Window(""String_Node_Str"",skin);
  table.setSize(window.getCanvas().getWidth() * .9f,window.getCanvas().getHeight() * .9f);
  close=new ImageButton(new TextureRegionDrawable(Assets.linearTextures.findRegion(""String_Node_Str"")));
  close.setPosition(table.getWidth() - close.getWidth(),table.getHeight() - close.getHeight() - 20);
  input=new TextField(""String_Node_Str"",skin.get(""String_Node_Str"",TextFieldStyle.class));
  display=new Label(""String_Node_Str"",skin.get(""String_Node_Str"",LabelStyle.class));
  scroll=new ScrollPane(display,skin);
  display.setWrap(false);
  display.setAlignment(10,Align.left);
  display.setText(""String_Node_Str"" + ((int)Math.random() * 100) / 10 + ""String_Node_Str"" + ""String_Node_Str"" + Internet.ipToString(device.getIp()) + ""String_Node_Str"" + device.getTotalMemory() + ""String_Node_Str"" + device.getTotalStorage() + ""String_Node_Str"");
  table.addListener(new InputListener(){
    @Override public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      return true;
    }
    @Override public void touchUp(    InputEvent event,    float x,    float y,    int pointer,    int button){
      if (y >= table.getHeight() - 20) {
        if (table.getX() < 0) {
          table.setX(0);
        }
        if (table.getY() < 0) {
          table.setY(0);
        }
        if (table.getX() + table.getWidth() > Gdx.graphics.getWidth()) {
          table.setX(Gdx.graphics.getWidth() - table.getWidth());
        }
        if (table.getY() + table.getHeight() > Gdx.graphics.getHeight()) {
          table.setY(Gdx.graphics.getHeight() - table.getHeight());
        }
      }
    }
  }
);
  close.addListener(new InputListener(){
    @Override public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      return true;
    }
    @Override public void touchUp(    InputEvent event,    float x,    float y,    int pointer,    int button){
      super.touchUp(event,x,y,pointer,button);
      close();
    }
  }
);
  input.addListener(new InputListener(){
    @Override public boolean keyDown(    InputEvent event,    int keycode){
      if (keycode == Keys.ENTER && command == null) {
        System.out.println(input.getText());
        display.setText(display.getText() + ""String_Node_Str"" + Internet.ipToString(device.getIp())+ ""String_Node_Str""+ input.getText());
        history.add(input.getText());
        command=new Command(input.getText(),device,terminal);
        line=history.size();
        input.setText(""String_Node_Str"");
      }
 else       if (keycode == Keys.C && (Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) || Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT)) && command != null) {
        addText(""String_Node_Str"");
        command.stop();
      }
 else       if (keycode == Keys.TAB && command == null) {
        String s=""String_Node_Str"";
        File[] files=new File(""String_Node_Str"").listFiles();
        List<File> filesFiltered=new ArrayList<File>();
        if (firstTab) {
          tabString=input.getText();
        }
        for (        File f : files) {
          if (f.getName().startsWith(tabString)) {
            filesFiltered.add(f);
          }
        }
        for (        File f : filesFiltered) {
          s+=f.getName().substring(0,f.getName().length() - 3);
          if (filesFiltered.lastIndexOf(f) != filesFiltered.size() - 1) {
            s+=""String_Node_Str"";
          }
        }
        if (!filesFiltered.isEmpty()) {
          if (firstTab) {
            addText(s + ""String_Node_Str"");
            firstTab=false;
          }
          String name=filesFiltered.get(tabIndex).getName();
          input.setText(name.substring(0,name.length() - 3));
          input.setCursorPosition(input.getText().length());
        }
 else {
          addText(""String_Node_Str"");
        }
        tabIndex++;
        if (tabIndex >= filesFiltered.size()) {
          tabIndex=0;
        }
      }
 else       if (keycode == Keys.DOWN && line < history.size() - 1) {
        line++;
        input.setText(history.get(line));
        input.setCursorPosition(input.getText().length());
      }
 else       if (keycode == Keys.UP && line > 0) {
        line--;
        input.setText(history.get(line));
        input.setCursorPosition(input.getText().length());
      }
      if (keycode != Keys.TAB && keycode != Keys.LEFT && keycode != Keys.RIGHT) {
        tabIndex=0;
        tabString=""String_Node_Str"";
        firstTab=true;
      }
      if (command != null) {
        command.getUserInputBuffer().offer(keycode);
      }
      return true;
    }
    @Override public boolean keyUp(    InputEvent event,    int keycode){
      if (keycode == Keys.ENTER || (keycode == Keys.C && (Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) || Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT)) && command != null)) {
        scroll.setScrollY(display.getHeight());
      }
      return super.keyUp(event,keycode);
    }
  }
);
  table.add(scroll).expand().fill();
  table.row();
  table.add(input).left().fillX();
  table.addActor(close);
}","public Terminal(ServerWindowStage w){
}",0.0146451370634622
59991,"public File getFile(FileType type,String name){
switch (type) {
case OS:
    for (    File f : osFiles) {
      if (f.getName() == name) {
        return osFiles.get(osFiles.indexOf(f));
      }
    }
  break;
default :
for (File f : userFiles) {
  if (f.getName() == name) {
    return userFiles.get(userFiles.indexOf(f));
  }
}
break;
case PROGRAM:
for (File f : programFiles) {
if (f.getName() == name) {
return programFiles.get(programFiles.indexOf(f));
}
}
break;
case LOG:
for (File f : logFiles) {
if (f.getName() == name) {
return logFiles.get(logFiles.indexOf(f));
}
}
}
return null;
}","public File getFile(FileType type,String name){
switch (type) {
case OS:
    for (    File f : osFiles) {
      if (f.getName().equals(name)) {
        return osFiles.get(osFiles.indexOf(f));
      }
    }
  break;
default :
for (File f : userFiles) {
  if (f.getName().equals(name)) {
    return userFiles.get(userFiles.indexOf(f));
  }
}
break;
case PROGRAM:
for (File f : programFiles) {
if (f.getName().equals(name)) {
return programFiles.get(programFiles.indexOf(f));
}
}
break;
case LOG:
for (File f : logFiles) {
if (f.getName().equals(name)) {
return logFiles.get(logFiles.indexOf(f));
}
}
}
return null;
}",0.9304635761589404
59992,"public void removeFile(FileType type,String name){
switch (type) {
case OS:
    for (    File f : osFiles) {
      if (f.getName() == name) {
        osFiles.remove(f);
      }
    }
  break;
default :
for (File f : userFiles) {
  if (f.getName() == name) {
    userFiles.remove(f);
  }
}
break;
case PROGRAM:
for (File f : programFiles) {
if (f.getName() == name) {
programFiles.remove(f);
}
}
break;
case LOG:
for (File f : logFiles) {
if (f.getName() == name) {
logFiles.remove(f);
}
}
}
}","public void removeFile(FileType type,String name){
switch (type) {
case OS:
    for (    File f : osFiles) {
      if (f.getName().equals(name)) {
        osFiles.remove(f);
      }
    }
  break;
default :
for (File f : userFiles) {
  if (f.getName().equals(name)) {
    userFiles.remove(f);
  }
}
break;
case PROGRAM:
for (File f : programFiles) {
if (f.getName().equals(name)) {
programFiles.remove(f);
}
}
break;
case LOG:
for (File f : logFiles) {
if (f.getName().equals(name)) {
logFiles.remove(f);
}
}
}
}",0.9482071713147412
59993,"/** 
 * Returns a   {@code Future} whose result is taken from this {@code Future} or, if the this {@code Future} fails with the given {@code exceptionType}, from the result provided by the   {@code fallback}.   {@link AsyncFunction#apply} is not invoked until the primary input has failed, so ifthe primary input succeeds, it is never invoked. If, during the invocation of  {@code fallback}, an exception is thrown, this exception is used as the result of the output   {@code Future}. <p>Usage examples: <pre>  {@code // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, x -> immediateFuture(0), directExecutor());}</pre> <p>The fallback can also choose to propagate the original exception when desired: <pre>  {@code // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( fetchCounterFuture, FetchException.class,}e ->  if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); }</pre> <p>When selecting an executor, note that   {@code directExecutor} is dangerous in some cases. Seethe discussion in the  {@link #addListener} documentation. All its warnings about heavyweightlisteners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned   {@code Future}.) <p>This method is similar to   {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of   {@link java.util.concurrent.CompletableFuture#handle}and   {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}.
 * @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. ""The input's exception"" means the cause of the   {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws adifferent kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding  {@code Throwable.class} in particular.
 * @param fallback the {@link AsyncFunction} to be called if the input fails with the expectedexception type. The function's argument is the input's exception. ""The input's exception"" means the cause of the  {@link ExecutionException} thrown by {@code input.get()} or, if{@code get()} throws a different kind of exception, that exception itself.
 * @param executor the executor that runs {@code fallback} if the input fails
 */
@Partially.GwtIncompatible(""String_Node_Str"") public final <X extends Throwable>FluentFuture<V> catchingAsync(Class<X> exceptionType,AsyncFunction<? super X,? extends V> fallback,Executor executor){
  return (FluentFuture<V>)Futures.catchingAsync(this,exceptionType,fallback,executor);
}","/** 
 * Returns a   {@code Future} whose result is taken from this {@code Future} or, if the this {@code Future} fails with the given {@code exceptionType}, from the result provided by the   {@code fallback}.   {@link AsyncFunction#apply} is not invoked until the primary input has failed, so ifthe primary input succeeds, it is never invoked. If, during the invocation of  {@code fallback}, an exception is thrown, this exception is used as the result of the output   {@code Future}. <p>Usage examples: <pre>  {@code // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, x -> immediateFuture(0), directExecutor());}</pre> <p>The fallback can also choose to propagate the original exception when desired: <pre>  {@code // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class,}e ->  if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); }</pre> <p>When selecting an executor, note that   {@code directExecutor} is dangerous in some cases. Seethe discussion in the  {@link #addListener} documentation. All its warnings about heavyweightlisteners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned   {@code Future}.) <p>This method is similar to   {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of   {@link java.util.concurrent.CompletableFuture#handle}and   {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}.
 * @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. ""The input's exception"" means the cause of the   {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws adifferent kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding  {@code Throwable.class} in particular.
 * @param fallback the {@link AsyncFunction} to be called if the input fails with the expectedexception type. The function's argument is the input's exception. ""The input's exception"" means the cause of the  {@link ExecutionException} thrown by {@code input.get()} or, if{@code get()} throws a different kind of exception, that exception itself.
 * @param executor the executor that runs {@code fallback} if the input fails
 */
@Partially.GwtIncompatible(""String_Node_Str"") public final <X extends Throwable>FluentFuture<V> catchingAsync(Class<X> exceptionType,AsyncFunction<? super X,? extends V> fallback,Executor executor){
  return (FluentFuture<V>)Futures.catchingAsync(this,exceptionType,fallback,executor);
}",0.9968434343434344
59994,"/** 
 * Returns a   {@code Future} whose result is taken from this {@code Future} or, if the this {@code Future} fails with the given {@code exceptionType}, from the result provided by the   {@code fallback}.   {@link AsyncFunction#apply} is not invoked until the primary input has failed, so ifthe primary input succeeds, it is never invoked. If, during the invocation of  {@code fallback}, an exception is thrown, this exception is used as the result of the output   {@code Future}. <p>Usage examples: <pre>  {@code // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, x -> immediateFuture(0), directExecutor());}</pre> <p>The fallback can also choose to propagate the original exception when desired: <pre>  {@code // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( fetchCounterFuture, FetchException.class,}e ->  if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); }</pre> <p>When selecting an executor, note that   {@code directExecutor} is dangerous in some cases. Seethe discussion in the  {@link #addListener} documentation. All its warnings about heavyweightlisteners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned   {@code Future}.) <p>This method is similar to   {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of   {@link java.util.concurrent.CompletableFuture#handle}and   {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}.
 * @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. ""The input's exception"" means the cause of the   {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws adifferent kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding  {@code Throwable.class} in particular.
 * @param fallback the {@link AsyncFunction} to be called if the input fails with the expectedexception type. The function's argument is the input's exception. ""The input's exception"" means the cause of the  {@link ExecutionException} thrown by {@code input.get()} or, if{@code get()} throws a different kind of exception, that exception itself.
 * @param executor the executor that runs {@code fallback} if the input fails
 */
@Partially.GwtIncompatible(""String_Node_Str"") public final <X extends Throwable>FluentFuture<V> catchingAsync(Class<X> exceptionType,AsyncFunction<? super X,? extends V> fallback,Executor executor){
  return (FluentFuture<V>)Futures.catchingAsync(this,exceptionType,fallback,executor);
}","/** 
 * Returns a   {@code Future} whose result is taken from this {@code Future} or, if the this {@code Future} fails with the given {@code exceptionType}, from the result provided by the   {@code fallback}.   {@link AsyncFunction#apply} is not invoked until the primary input has failed, so ifthe primary input succeeds, it is never invoked. If, during the invocation of  {@code fallback}, an exception is thrown, this exception is used as the result of the output   {@code Future}. <p>Usage examples: <pre>  {@code // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, x -> immediateFuture(0), directExecutor());}</pre> <p>The fallback can also choose to propagate the original exception when desired: <pre>  {@code // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class,}e ->  if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); }</pre> <p>When selecting an executor, note that   {@code directExecutor} is dangerous in some cases. Seethe discussion in the  {@link #addListener} documentation. All its warnings about heavyweightlisteners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned   {@code Future}.) <p>This method is similar to   {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of   {@link java.util.concurrent.CompletableFuture#handle}and   {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}.
 * @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. ""The input's exception"" means the cause of the   {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws adifferent kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding  {@code Throwable.class} in particular.
 * @param fallback the {@link AsyncFunction} to be called if the input fails with the expectedexception type. The function's argument is the input's exception. ""The input's exception"" means the cause of the  {@link ExecutionException} thrown by {@code input.get()} or, if{@code get()} throws a different kind of exception, that exception itself.
 * @param executor the executor that runs {@code fallback} if the input fails
 */
@Partially.GwtIncompatible(""String_Node_Str"") public final <X extends Throwable>FluentFuture<V> catchingAsync(Class<X> exceptionType,AsyncFunction<? super X,? extends V> fallback,Executor executor){
  return (FluentFuture<V>)Futures.catchingAsync(this,exceptionType,fallback,executor);
}",0.9968434343434344
59995,"@CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemovePropagatesToMultiset(){
  Set<E> elementSet=getMultiset().elementSet();
  assertTrue(elementSet.remove(e0()));
  assertFalse(getMultiset().contains(e0()));
}","@CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemovePropagatesToMultiset(){
  Set<E> elementSet=getMultiset().elementSet();
  int size=getNumElements();
  int expectedSize=size - getMultiset().count(e0());
  assertTrue(elementSet.remove(e0()));
  assertFalse(getMultiset().contains(e0()));
  assertEquals(expectedSize,getMultiset().size());
}",0.8023774145616642
59996,"@CollectionSize.Require(SEVERAL) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemoveDuplicatePropagatesToMultiset(){
  initThreeCopies();
  Set<E> elementSet=getMultiset().elementSet();
  assertTrue(elementSet.remove(e0()));
  assertEmpty(getMultiset());
}","@CollectionSize.Require(SEVERAL) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemoveDuplicatePropagatesToMultiset(){
  initThreeCopies();
  int size=getNumElements();
  int expectedSize=size - getMultiset().count(e0());
  Set<E> elementSet=getMultiset().elementSet();
  assertTrue(elementSet.remove(e0()));
  assertEmpty(getMultiset());
  assertEquals(expectedSize,getMultiset().size());
}",0.8086330935251799
59997,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(transformSuite());
  suite.addTest(filterSuite());
  suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator(){
    @Override protected ListMultimap<String,String> create(    Entry<String,String>[] entries){
      ListMultimap<String,String> multimap=Multimaps.synchronizedListMultimap(ArrayListMultimap.<String,String>create());
      for (      Entry<String,String> entry : entries) {
        multimap.put(entry.getKey(),entry.getValue());
      }
      return multimap;
    }
  }
).named(""String_Node_Str"").withFeatures(MapFeature.ALLOWS_NULL_KEYS,MapFeature.ALLOWS_NULL_VALUES,MapFeature.ALLOWS_ANY_NULL_QUERIES,MapFeature.GENERAL_PURPOSE,MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,CollectionFeature.SUPPORTS_ITERATOR_REMOVE,CollectionSize.ANY).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<Integer,String> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForGet(multimap,elements);
      return multimap.build().get(3);
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ONE).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeySet(multimap,elements);
      return multimap.build().keySet();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeys(multimap,elements);
      return multimap.build().keys();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).suppressing(getCountDuplicateInitializingMethods()).suppressing(getSetCountDuplicateInitializingMethods()).suppressing(getIteratorDuplicateInitializingMethods()).suppressing(getRemoveDuplicateInitializingMethods()).createTestSuite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(transformSuite());
  suite.addTest(filterSuite());
  suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator(){
    @Override protected ListMultimap<String,String> create(    Entry<String,String>[] entries){
      ListMultimap<String,String> multimap=Multimaps.synchronizedListMultimap(ArrayListMultimap.<String,String>create());
      for (      Entry<String,String> entry : entries) {
        multimap.put(entry.getKey(),entry.getValue());
      }
      return multimap;
    }
  }
).named(""String_Node_Str"").withFeatures(MapFeature.ALLOWS_NULL_KEYS,MapFeature.ALLOWS_NULL_VALUES,MapFeature.ALLOWS_ANY_NULL_QUERIES,MapFeature.GENERAL_PURPOSE,MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,CollectionFeature.SUPPORTS_ITERATOR_REMOVE,CollectionSize.ANY).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<Integer,String> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForGet(multimap,elements);
      return multimap.build().get(3);
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ONE).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeySet(multimap,elements);
      return multimap.build().keySet();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeys(multimap,elements);
      return multimap.build().keys();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).suppressing(getCountDuplicateInitializingMethods()).suppressing(getSetCountDuplicateInitializingMethods()).suppressing(getIteratorDuplicateInitializingMethods()).suppressing(getRemoveDuplicateInitializingMethods()).suppressing(getElementSetDuplicateInitializingMethods()).createTestSuite());
  return suite;
}",0.9880827932260088
59998,"@CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemovePropagatesToMultiset(){
  Set<E> elementSet=getMultiset().elementSet();
  assertTrue(elementSet.remove(e0()));
  assertFalse(getMultiset().contains(e0()));
}","@CollectionSize.Require(absent=ZERO) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemovePropagatesToMultiset(){
  Set<E> elementSet=getMultiset().elementSet();
  int size=getNumElements();
  int expectedSize=size - getMultiset().count(e0());
  assertTrue(elementSet.remove(e0()));
  assertFalse(getMultiset().contains(e0()));
  assertEquals(expectedSize,getMultiset().size());
}",0.8023774145616642
59999,"@CollectionSize.Require(SEVERAL) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemoveDuplicatePropagatesToMultiset(){
  initThreeCopies();
  Set<E> elementSet=getMultiset().elementSet();
  assertTrue(elementSet.remove(e0()));
  assertEmpty(getMultiset());
}","@CollectionSize.Require(SEVERAL) @CollectionFeature.Require(SUPPORTS_REMOVE) public void testElementSetRemoveDuplicatePropagatesToMultiset(){
  initThreeCopies();
  int size=getNumElements();
  int expectedSize=size - getMultiset().count(e0());
  Set<E> elementSet=getMultiset().elementSet();
  assertTrue(elementSet.remove(e0()));
  assertEmpty(getMultiset());
  assertEquals(expectedSize,getMultiset().size());
}",0.8086330935251799
60000,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(transformSuite());
  suite.addTest(filterSuite());
  suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator(){
    @Override protected ListMultimap<String,String> create(    Entry<String,String>[] entries){
      ListMultimap<String,String> multimap=Multimaps.synchronizedListMultimap(ArrayListMultimap.<String,String>create());
      for (      Entry<String,String> entry : entries) {
        multimap.put(entry.getKey(),entry.getValue());
      }
      return multimap;
    }
  }
).named(""String_Node_Str"").withFeatures(MapFeature.ALLOWS_NULL_KEYS,MapFeature.ALLOWS_NULL_VALUES,MapFeature.ALLOWS_ANY_NULL_QUERIES,MapFeature.GENERAL_PURPOSE,MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,CollectionFeature.SUPPORTS_ITERATOR_REMOVE,CollectionSize.ANY).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<Integer,String> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForGet(multimap,elements);
      return multimap.build().get(3);
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ONE).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeySet(multimap,elements);
      return multimap.build().keySet();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeys(multimap,elements);
      return multimap.build().keys();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).suppressing(getCountDuplicateInitializingMethods()).suppressing(getSetCountDuplicateInitializingMethods()).suppressing(getIteratorDuplicateInitializingMethods()).suppressing(getRemoveDuplicateInitializingMethods()).suppressing(getForEachEntryDuplicateInitializingMethods()).createTestSuite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(transformSuite());
  suite.addTest(filterSuite());
  suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator(){
    @Override protected ListMultimap<String,String> create(    Entry<String,String>[] entries){
      ListMultimap<String,String> multimap=Multimaps.synchronizedListMultimap(ArrayListMultimap.<String,String>create());
      for (      Entry<String,String> entry : entries) {
        multimap.put(entry.getKey(),entry.getValue());
      }
      return multimap;
    }
  }
).named(""String_Node_Str"").withFeatures(MapFeature.ALLOWS_NULL_KEYS,MapFeature.ALLOWS_NULL_VALUES,MapFeature.ALLOWS_ANY_NULL_QUERIES,MapFeature.GENERAL_PURPOSE,MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,CollectionFeature.SUPPORTS_ITERATOR_REMOVE,CollectionSize.ANY).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<Integer,String> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForGet(multimap,elements);
      return multimap.build().get(3);
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ONE).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeySet(multimap,elements);
      return multimap.build().keySet();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeys(multimap,elements);
      return multimap.build().keys();
    }
  }
).named(""String_Node_Str"").withFeatures(FOR_MAP_FEATURES_ANY).suppressing(getCountDuplicateInitializingMethods()).suppressing(getSetCountDuplicateInitializingMethods()).suppressing(getIteratorDuplicateInitializingMethods()).suppressing(getRemoveDuplicateInitializingMethods()).suppressing(getForEachEntryDuplicateInitializingMethods()).suppressing(getElementSetDuplicateInitializingMethods()).createTestSuite());
  return suite;
}",0.9883697204652112
